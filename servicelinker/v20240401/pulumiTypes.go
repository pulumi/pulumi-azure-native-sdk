// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage
type AccessKeyInfoBase struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'accessKey'.
	AuthType string `pulumi:"authType"`
	// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
	Permissions []string `pulumi:"permissions"`
}

// AccessKeyInfoBaseInput is an input type that accepts AccessKeyInfoBaseArgs and AccessKeyInfoBaseOutput values.
// You can construct a concrete instance of `AccessKeyInfoBaseInput` via:
//
//	AccessKeyInfoBaseArgs{...}
type AccessKeyInfoBaseInput interface {
	pulumi.Input

	ToAccessKeyInfoBaseOutput() AccessKeyInfoBaseOutput
	ToAccessKeyInfoBaseOutputWithContext(context.Context) AccessKeyInfoBaseOutput
}

// The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage
type AccessKeyInfoBaseArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'accessKey'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (AccessKeyInfoBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyInfoBase)(nil)).Elem()
}

func (i AccessKeyInfoBaseArgs) ToAccessKeyInfoBaseOutput() AccessKeyInfoBaseOutput {
	return i.ToAccessKeyInfoBaseOutputWithContext(context.Background())
}

func (i AccessKeyInfoBaseArgs) ToAccessKeyInfoBaseOutputWithContext(ctx context.Context) AccessKeyInfoBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyInfoBaseOutput)
}

func (i AccessKeyInfoBaseArgs) ToAccessKeyInfoBasePtrOutput() AccessKeyInfoBasePtrOutput {
	return i.ToAccessKeyInfoBasePtrOutputWithContext(context.Background())
}

func (i AccessKeyInfoBaseArgs) ToAccessKeyInfoBasePtrOutputWithContext(ctx context.Context) AccessKeyInfoBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyInfoBaseOutput).ToAccessKeyInfoBasePtrOutputWithContext(ctx)
}

// AccessKeyInfoBasePtrInput is an input type that accepts AccessKeyInfoBaseArgs, AccessKeyInfoBasePtr and AccessKeyInfoBasePtrOutput values.
// You can construct a concrete instance of `AccessKeyInfoBasePtrInput` via:
//
//	        AccessKeyInfoBaseArgs{...}
//
//	or:
//
//	        nil
type AccessKeyInfoBasePtrInput interface {
	pulumi.Input

	ToAccessKeyInfoBasePtrOutput() AccessKeyInfoBasePtrOutput
	ToAccessKeyInfoBasePtrOutputWithContext(context.Context) AccessKeyInfoBasePtrOutput
}

type accessKeyInfoBasePtrType AccessKeyInfoBaseArgs

func AccessKeyInfoBasePtr(v *AccessKeyInfoBaseArgs) AccessKeyInfoBasePtrInput {
	return (*accessKeyInfoBasePtrType)(v)
}

func (*accessKeyInfoBasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeyInfoBase)(nil)).Elem()
}

func (i *accessKeyInfoBasePtrType) ToAccessKeyInfoBasePtrOutput() AccessKeyInfoBasePtrOutput {
	return i.ToAccessKeyInfoBasePtrOutputWithContext(context.Background())
}

func (i *accessKeyInfoBasePtrType) ToAccessKeyInfoBasePtrOutputWithContext(ctx context.Context) AccessKeyInfoBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyInfoBasePtrOutput)
}

// The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage
type AccessKeyInfoBaseOutput struct{ *pulumi.OutputState }

func (AccessKeyInfoBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyInfoBase)(nil)).Elem()
}

func (o AccessKeyInfoBaseOutput) ToAccessKeyInfoBaseOutput() AccessKeyInfoBaseOutput {
	return o
}

func (o AccessKeyInfoBaseOutput) ToAccessKeyInfoBaseOutputWithContext(ctx context.Context) AccessKeyInfoBaseOutput {
	return o
}

func (o AccessKeyInfoBaseOutput) ToAccessKeyInfoBasePtrOutput() AccessKeyInfoBasePtrOutput {
	return o.ToAccessKeyInfoBasePtrOutputWithContext(context.Background())
}

func (o AccessKeyInfoBaseOutput) ToAccessKeyInfoBasePtrOutputWithContext(ctx context.Context) AccessKeyInfoBasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessKeyInfoBase) *AccessKeyInfoBase {
		return &v
	}).(AccessKeyInfoBasePtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o AccessKeyInfoBaseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyInfoBase) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'accessKey'.
func (o AccessKeyInfoBaseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyInfoBase) string { return v.AuthType }).(pulumi.StringOutput)
}

// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
func (o AccessKeyInfoBaseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessKeyInfoBase) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type AccessKeyInfoBasePtrOutput struct{ *pulumi.OutputState }

func (AccessKeyInfoBasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeyInfoBase)(nil)).Elem()
}

func (o AccessKeyInfoBasePtrOutput) ToAccessKeyInfoBasePtrOutput() AccessKeyInfoBasePtrOutput {
	return o
}

func (o AccessKeyInfoBasePtrOutput) ToAccessKeyInfoBasePtrOutputWithContext(ctx context.Context) AccessKeyInfoBasePtrOutput {
	return o
}

func (o AccessKeyInfoBasePtrOutput) Elem() AccessKeyInfoBaseOutput {
	return o.ApplyT(func(v *AccessKeyInfoBase) AccessKeyInfoBase {
		if v != nil {
			return *v
		}
		var ret AccessKeyInfoBase
		return ret
	}).(AccessKeyInfoBaseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o AccessKeyInfoBasePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyInfoBase) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'accessKey'.
func (o AccessKeyInfoBasePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyInfoBase) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
func (o AccessKeyInfoBasePtrOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessKeyInfoBase) []string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringArrayOutput)
}

// The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage
type AccessKeyInfoBaseResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'accessKey'.
	AuthType string `pulumi:"authType"`
	// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
	Permissions []string `pulumi:"permissions"`
}

// The access key directly from target resource properties, which target service is Azure Resource, such as Microsoft.Storage
type AccessKeyInfoBaseResponseOutput struct{ *pulumi.OutputState }

func (AccessKeyInfoBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyInfoBaseResponse)(nil)).Elem()
}

func (o AccessKeyInfoBaseResponseOutput) ToAccessKeyInfoBaseResponseOutput() AccessKeyInfoBaseResponseOutput {
	return o
}

func (o AccessKeyInfoBaseResponseOutput) ToAccessKeyInfoBaseResponseOutputWithContext(ctx context.Context) AccessKeyInfoBaseResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o AccessKeyInfoBaseResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyInfoBaseResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'accessKey'.
func (o AccessKeyInfoBaseResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyInfoBaseResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
func (o AccessKeyInfoBaseResponseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessKeyInfoBaseResponse) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

type AccessKeyInfoBaseResponsePtrOutput struct{ *pulumi.OutputState }

func (AccessKeyInfoBaseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKeyInfoBaseResponse)(nil)).Elem()
}

func (o AccessKeyInfoBaseResponsePtrOutput) ToAccessKeyInfoBaseResponsePtrOutput() AccessKeyInfoBaseResponsePtrOutput {
	return o
}

func (o AccessKeyInfoBaseResponsePtrOutput) ToAccessKeyInfoBaseResponsePtrOutputWithContext(ctx context.Context) AccessKeyInfoBaseResponsePtrOutput {
	return o
}

func (o AccessKeyInfoBaseResponsePtrOutput) Elem() AccessKeyInfoBaseResponseOutput {
	return o.ApplyT(func(v *AccessKeyInfoBaseResponse) AccessKeyInfoBaseResponse {
		if v != nil {
			return *v
		}
		var ret AccessKeyInfoBaseResponse
		return ret
	}).(AccessKeyInfoBaseResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o AccessKeyInfoBaseResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyInfoBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'accessKey'.
func (o AccessKeyInfoBaseResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKeyInfoBaseResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Permissions of the accessKey. `Read` and `Write` are for Azure Cosmos DB and Azure App Configuration, `Listen`, `Send` and `Manage` are for Azure Event Hub and Azure Service Bus.
func (o AccessKeyInfoBaseResponsePtrOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AccessKeyInfoBaseResponse) []string {
		if v == nil {
			return nil
		}
		return v.Permissions
	}).(pulumi.StringArrayOutput)
}

// The resource properties when type is Azure Key Vault
type AzureKeyVaultProperties struct {
	// True if connect via Kubernetes CSI Driver.
	ConnectAsKubernetesCsiDriver *bool `pulumi:"connectAsKubernetesCsiDriver"`
	// The azure resource type.
	// Expected value is 'KeyVault'.
	Type string `pulumi:"type"`
}

// AzureKeyVaultPropertiesInput is an input type that accepts AzureKeyVaultPropertiesArgs and AzureKeyVaultPropertiesOutput values.
// You can construct a concrete instance of `AzureKeyVaultPropertiesInput` via:
//
//	AzureKeyVaultPropertiesArgs{...}
type AzureKeyVaultPropertiesInput interface {
	pulumi.Input

	ToAzureKeyVaultPropertiesOutput() AzureKeyVaultPropertiesOutput
	ToAzureKeyVaultPropertiesOutputWithContext(context.Context) AzureKeyVaultPropertiesOutput
}

// The resource properties when type is Azure Key Vault
type AzureKeyVaultPropertiesArgs struct {
	// True if connect via Kubernetes CSI Driver.
	ConnectAsKubernetesCsiDriver pulumi.BoolPtrInput `pulumi:"connectAsKubernetesCsiDriver"`
	// The azure resource type.
	// Expected value is 'KeyVault'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureKeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultProperties)(nil)).Elem()
}

func (i AzureKeyVaultPropertiesArgs) ToAzureKeyVaultPropertiesOutput() AzureKeyVaultPropertiesOutput {
	return i.ToAzureKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i AzureKeyVaultPropertiesArgs) ToAzureKeyVaultPropertiesOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultPropertiesOutput)
}

func (i AzureKeyVaultPropertiesArgs) ToAzureKeyVaultPropertiesPtrOutput() AzureKeyVaultPropertiesPtrOutput {
	return i.ToAzureKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i AzureKeyVaultPropertiesArgs) ToAzureKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultPropertiesOutput).ToAzureKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// AzureKeyVaultPropertiesPtrInput is an input type that accepts AzureKeyVaultPropertiesArgs, AzureKeyVaultPropertiesPtr and AzureKeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `AzureKeyVaultPropertiesPtrInput` via:
//
//	        AzureKeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type AzureKeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToAzureKeyVaultPropertiesPtrOutput() AzureKeyVaultPropertiesPtrOutput
	ToAzureKeyVaultPropertiesPtrOutputWithContext(context.Context) AzureKeyVaultPropertiesPtrOutput
}

type azureKeyVaultPropertiesPtrType AzureKeyVaultPropertiesArgs

func AzureKeyVaultPropertiesPtr(v *AzureKeyVaultPropertiesArgs) AzureKeyVaultPropertiesPtrInput {
	return (*azureKeyVaultPropertiesPtrType)(v)
}

func (*azureKeyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultProperties)(nil)).Elem()
}

func (i *azureKeyVaultPropertiesPtrType) ToAzureKeyVaultPropertiesPtrOutput() AzureKeyVaultPropertiesPtrOutput {
	return i.ToAzureKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *azureKeyVaultPropertiesPtrType) ToAzureKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureKeyVaultPropertiesPtrOutput)
}

// The resource properties when type is Azure Key Vault
type AzureKeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultProperties)(nil)).Elem()
}

func (o AzureKeyVaultPropertiesOutput) ToAzureKeyVaultPropertiesOutput() AzureKeyVaultPropertiesOutput {
	return o
}

func (o AzureKeyVaultPropertiesOutput) ToAzureKeyVaultPropertiesOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesOutput {
	return o
}

func (o AzureKeyVaultPropertiesOutput) ToAzureKeyVaultPropertiesPtrOutput() AzureKeyVaultPropertiesPtrOutput {
	return o.ToAzureKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o AzureKeyVaultPropertiesOutput) ToAzureKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureKeyVaultProperties) *AzureKeyVaultProperties {
		return &v
	}).(AzureKeyVaultPropertiesPtrOutput)
}

// True if connect via Kubernetes CSI Driver.
func (o AzureKeyVaultPropertiesOutput) ConnectAsKubernetesCsiDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultProperties) *bool { return v.ConnectAsKubernetesCsiDriver }).(pulumi.BoolPtrOutput)
}

// The azure resource type.
// Expected value is 'KeyVault'.
func (o AzureKeyVaultPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultProperties) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultProperties)(nil)).Elem()
}

func (o AzureKeyVaultPropertiesPtrOutput) ToAzureKeyVaultPropertiesPtrOutput() AzureKeyVaultPropertiesPtrOutput {
	return o
}

func (o AzureKeyVaultPropertiesPtrOutput) ToAzureKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesPtrOutput {
	return o
}

func (o AzureKeyVaultPropertiesPtrOutput) Elem() AzureKeyVaultPropertiesOutput {
	return o.ApplyT(func(v *AzureKeyVaultProperties) AzureKeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultProperties
		return ret
	}).(AzureKeyVaultPropertiesOutput)
}

// True if connect via Kubernetes CSI Driver.
func (o AzureKeyVaultPropertiesPtrOutput) ConnectAsKubernetesCsiDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectAsKubernetesCsiDriver
	}).(pulumi.BoolPtrOutput)
}

// The azure resource type.
// Expected value is 'KeyVault'.
func (o AzureKeyVaultPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The resource properties when type is Azure Key Vault
type AzureKeyVaultPropertiesResponse struct {
	// True if connect via Kubernetes CSI Driver.
	ConnectAsKubernetesCsiDriver *bool `pulumi:"connectAsKubernetesCsiDriver"`
	// The azure resource type.
	// Expected value is 'KeyVault'.
	Type string `pulumi:"type"`
}

// The resource properties when type is Azure Key Vault
type AzureKeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o AzureKeyVaultPropertiesResponseOutput) ToAzureKeyVaultPropertiesResponseOutput() AzureKeyVaultPropertiesResponseOutput {
	return o
}

func (o AzureKeyVaultPropertiesResponseOutput) ToAzureKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesResponseOutput {
	return o
}

// True if connect via Kubernetes CSI Driver.
func (o AzureKeyVaultPropertiesResponseOutput) ConnectAsKubernetesCsiDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureKeyVaultPropertiesResponse) *bool { return v.ConnectAsKubernetesCsiDriver }).(pulumi.BoolPtrOutput)
}

// The azure resource type.
// Expected value is 'KeyVault'.
func (o AzureKeyVaultPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureKeyVaultPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureKeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureKeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o AzureKeyVaultPropertiesResponsePtrOutput) ToAzureKeyVaultPropertiesResponsePtrOutput() AzureKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o AzureKeyVaultPropertiesResponsePtrOutput) ToAzureKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) AzureKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o AzureKeyVaultPropertiesResponsePtrOutput) Elem() AzureKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *AzureKeyVaultPropertiesResponse) AzureKeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AzureKeyVaultPropertiesResponse
		return ret
	}).(AzureKeyVaultPropertiesResponseOutput)
}

// True if connect via Kubernetes CSI Driver.
func (o AzureKeyVaultPropertiesResponsePtrOutput) ConnectAsKubernetesCsiDriver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ConnectAsKubernetesCsiDriver
	}).(pulumi.BoolPtrOutput)
}

// The azure resource type.
// Expected value is 'KeyVault'.
func (o AzureKeyVaultPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The azure resource info when target service type is AzureResource
type AzureResource struct {
	// The Id of azure resource.
	Id *string `pulumi:"id"`
	// The azure resource connection related properties.
	ResourceProperties *AzureKeyVaultProperties `pulumi:"resourceProperties"`
	// The target service type.
	// Expected value is 'AzureResource'.
	Type string `pulumi:"type"`
}

// AzureResourceInput is an input type that accepts AzureResourceArgs and AzureResourceOutput values.
// You can construct a concrete instance of `AzureResourceInput` via:
//
//	AzureResourceArgs{...}
type AzureResourceInput interface {
	pulumi.Input

	ToAzureResourceOutput() AzureResourceOutput
	ToAzureResourceOutputWithContext(context.Context) AzureResourceOutput
}

// The azure resource info when target service type is AzureResource
type AzureResourceArgs struct {
	// The Id of azure resource.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The azure resource connection related properties.
	ResourceProperties AzureKeyVaultPropertiesPtrInput `pulumi:"resourceProperties"`
	// The target service type.
	// Expected value is 'AzureResource'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResource)(nil)).Elem()
}

func (i AzureResourceArgs) ToAzureResourceOutput() AzureResourceOutput {
	return i.ToAzureResourceOutputWithContext(context.Background())
}

func (i AzureResourceArgs) ToAzureResourceOutputWithContext(ctx context.Context) AzureResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceOutput)
}

func (i AzureResourceArgs) ToAzureResourcePtrOutput() AzureResourcePtrOutput {
	return i.ToAzureResourcePtrOutputWithContext(context.Background())
}

func (i AzureResourceArgs) ToAzureResourcePtrOutputWithContext(ctx context.Context) AzureResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceOutput).ToAzureResourcePtrOutputWithContext(ctx)
}

// AzureResourcePtrInput is an input type that accepts AzureResourceArgs, AzureResourcePtr and AzureResourcePtrOutput values.
// You can construct a concrete instance of `AzureResourcePtrInput` via:
//
//	        AzureResourceArgs{...}
//
//	or:
//
//	        nil
type AzureResourcePtrInput interface {
	pulumi.Input

	ToAzureResourcePtrOutput() AzureResourcePtrOutput
	ToAzureResourcePtrOutputWithContext(context.Context) AzureResourcePtrOutput
}

type azureResourcePtrType AzureResourceArgs

func AzureResourcePtr(v *AzureResourceArgs) AzureResourcePtrInput {
	return (*azureResourcePtrType)(v)
}

func (*azureResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResource)(nil)).Elem()
}

func (i *azureResourcePtrType) ToAzureResourcePtrOutput() AzureResourcePtrOutput {
	return i.ToAzureResourcePtrOutputWithContext(context.Background())
}

func (i *azureResourcePtrType) ToAzureResourcePtrOutputWithContext(ctx context.Context) AzureResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourcePtrOutput)
}

// The azure resource info when target service type is AzureResource
type AzureResourceOutput struct{ *pulumi.OutputState }

func (AzureResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResource)(nil)).Elem()
}

func (o AzureResourceOutput) ToAzureResourceOutput() AzureResourceOutput {
	return o
}

func (o AzureResourceOutput) ToAzureResourceOutputWithContext(ctx context.Context) AzureResourceOutput {
	return o
}

func (o AzureResourceOutput) ToAzureResourcePtrOutput() AzureResourcePtrOutput {
	return o.ToAzureResourcePtrOutputWithContext(context.Background())
}

func (o AzureResourceOutput) ToAzureResourcePtrOutputWithContext(ctx context.Context) AzureResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureResource) *AzureResource {
		return &v
	}).(AzureResourcePtrOutput)
}

// The Id of azure resource.
func (o AzureResourceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureResource) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The azure resource connection related properties.
func (o AzureResourceOutput) ResourceProperties() AzureKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v AzureResource) *AzureKeyVaultProperties { return v.ResourceProperties }).(AzureKeyVaultPropertiesPtrOutput)
}

// The target service type.
// Expected value is 'AzureResource'.
func (o AzureResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResource) string { return v.Type }).(pulumi.StringOutput)
}

type AzureResourcePtrOutput struct{ *pulumi.OutputState }

func (AzureResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResource)(nil)).Elem()
}

func (o AzureResourcePtrOutput) ToAzureResourcePtrOutput() AzureResourcePtrOutput {
	return o
}

func (o AzureResourcePtrOutput) ToAzureResourcePtrOutputWithContext(ctx context.Context) AzureResourcePtrOutput {
	return o
}

func (o AzureResourcePtrOutput) Elem() AzureResourceOutput {
	return o.ApplyT(func(v *AzureResource) AzureResource {
		if v != nil {
			return *v
		}
		var ret AzureResource
		return ret
	}).(AzureResourceOutput)
}

// The Id of azure resource.
func (o AzureResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResource) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The azure resource connection related properties.
func (o AzureResourcePtrOutput) ResourceProperties() AzureKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *AzureResource) *AzureKeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.ResourceProperties
	}).(AzureKeyVaultPropertiesPtrOutput)
}

// The target service type.
// Expected value is 'AzureResource'.
func (o AzureResourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The azure resource info when target service type is AzureResource
type AzureResourceResponse struct {
	// The Id of azure resource.
	Id *string `pulumi:"id"`
	// The azure resource connection related properties.
	ResourceProperties *AzureKeyVaultPropertiesResponse `pulumi:"resourceProperties"`
	// The target service type.
	// Expected value is 'AzureResource'.
	Type string `pulumi:"type"`
}

// The azure resource info when target service type is AzureResource
type AzureResourceResponseOutput struct{ *pulumi.OutputState }

func (AzureResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceResponse)(nil)).Elem()
}

func (o AzureResourceResponseOutput) ToAzureResourceResponseOutput() AzureResourceResponseOutput {
	return o
}

func (o AzureResourceResponseOutput) ToAzureResourceResponseOutputWithContext(ctx context.Context) AzureResourceResponseOutput {
	return o
}

// The Id of azure resource.
func (o AzureResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The azure resource connection related properties.
func (o AzureResourceResponseOutput) ResourceProperties() AzureKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AzureResourceResponse) *AzureKeyVaultPropertiesResponse { return v.ResourceProperties }).(AzureKeyVaultPropertiesResponsePtrOutput)
}

// The target service type.
// Expected value is 'AzureResource'.
func (o AzureResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceResponse)(nil)).Elem()
}

func (o AzureResourceResponsePtrOutput) ToAzureResourceResponsePtrOutput() AzureResourceResponsePtrOutput {
	return o
}

func (o AzureResourceResponsePtrOutput) ToAzureResourceResponsePtrOutputWithContext(ctx context.Context) AzureResourceResponsePtrOutput {
	return o
}

func (o AzureResourceResponsePtrOutput) Elem() AzureResourceResponseOutput {
	return o.ApplyT(func(v *AzureResourceResponse) AzureResourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureResourceResponse
		return ret
	}).(AzureResourceResponseOutput)
}

// The Id of azure resource.
func (o AzureResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The azure resource connection related properties.
func (o AzureResourceResponsePtrOutput) ResourceProperties() AzureKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *AzureResourceResponse) *AzureKeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.ResourceProperties
	}).(AzureKeyVaultPropertiesResponsePtrOutput)
}

// The target service type.
// Expected value is 'AzureResource'.
func (o AzureResourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The represent of basic error
type BasicErrorDryrunPrerequisiteResultResponse struct {
	// The error code.
	Code *string `pulumi:"code"`
	// The error message.
	Message *string `pulumi:"message"`
	// The type of dryrun result.
	// Expected value is 'basicError'.
	Type string `pulumi:"type"`
}

// The represent of basic error
type BasicErrorDryrunPrerequisiteResultResponseOutput struct{ *pulumi.OutputState }

func (BasicErrorDryrunPrerequisiteResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BasicErrorDryrunPrerequisiteResultResponse)(nil)).Elem()
}

func (o BasicErrorDryrunPrerequisiteResultResponseOutput) ToBasicErrorDryrunPrerequisiteResultResponseOutput() BasicErrorDryrunPrerequisiteResultResponseOutput {
	return o
}

func (o BasicErrorDryrunPrerequisiteResultResponseOutput) ToBasicErrorDryrunPrerequisiteResultResponseOutputWithContext(ctx context.Context) BasicErrorDryrunPrerequisiteResultResponseOutput {
	return o
}

// The error code.
func (o BasicErrorDryrunPrerequisiteResultResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicErrorDryrunPrerequisiteResultResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// The error message.
func (o BasicErrorDryrunPrerequisiteResultResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BasicErrorDryrunPrerequisiteResultResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of dryrun result.
// Expected value is 'basicError'.
func (o BasicErrorDryrunPrerequisiteResultResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BasicErrorDryrunPrerequisiteResultResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The configuration information, used to generate configurations or save to applications
type ConfigurationInfo struct {
	// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
	Action *string `pulumi:"action"`
	// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
	AdditionalConfigurations map[string]string `pulumi:"additionalConfigurations"`
	// A dictionary of additional properties to be added in the end of connection string.
	AdditionalConnectionStringProperties map[string]string `pulumi:"additionalConnectionStringProperties"`
	// An option to store configuration into different place
	ConfigurationStore *ConfigurationStore `pulumi:"configurationStore"`
	// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
	CustomizedKeys map[string]string `pulumi:"customizedKeys"`
	// Indicates some additional properties for dapr client type
	DaprProperties *DaprProperties `pulumi:"daprProperties"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
}

// ConfigurationInfoInput is an input type that accepts ConfigurationInfoArgs and ConfigurationInfoOutput values.
// You can construct a concrete instance of `ConfigurationInfoInput` via:
//
//	ConfigurationInfoArgs{...}
type ConfigurationInfoInput interface {
	pulumi.Input

	ToConfigurationInfoOutput() ConfigurationInfoOutput
	ToConfigurationInfoOutputWithContext(context.Context) ConfigurationInfoOutput
}

// The configuration information, used to generate configurations or save to applications
type ConfigurationInfoArgs struct {
	// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
	AdditionalConfigurations pulumi.StringMapInput `pulumi:"additionalConfigurations"`
	// A dictionary of additional properties to be added in the end of connection string.
	AdditionalConnectionStringProperties pulumi.StringMapInput `pulumi:"additionalConnectionStringProperties"`
	// An option to store configuration into different place
	ConfigurationStore ConfigurationStorePtrInput `pulumi:"configurationStore"`
	// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
	CustomizedKeys pulumi.StringMapInput `pulumi:"customizedKeys"`
	// Indicates some additional properties for dapr client type
	DaprProperties DaprPropertiesPtrInput `pulumi:"daprProperties"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
}

func (ConfigurationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationInfo)(nil)).Elem()
}

func (i ConfigurationInfoArgs) ToConfigurationInfoOutput() ConfigurationInfoOutput {
	return i.ToConfigurationInfoOutputWithContext(context.Background())
}

func (i ConfigurationInfoArgs) ToConfigurationInfoOutputWithContext(ctx context.Context) ConfigurationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationInfoOutput)
}

func (i ConfigurationInfoArgs) ToConfigurationInfoPtrOutput() ConfigurationInfoPtrOutput {
	return i.ToConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i ConfigurationInfoArgs) ToConfigurationInfoPtrOutputWithContext(ctx context.Context) ConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationInfoOutput).ToConfigurationInfoPtrOutputWithContext(ctx)
}

// ConfigurationInfoPtrInput is an input type that accepts ConfigurationInfoArgs, ConfigurationInfoPtr and ConfigurationInfoPtrOutput values.
// You can construct a concrete instance of `ConfigurationInfoPtrInput` via:
//
//	        ConfigurationInfoArgs{...}
//
//	or:
//
//	        nil
type ConfigurationInfoPtrInput interface {
	pulumi.Input

	ToConfigurationInfoPtrOutput() ConfigurationInfoPtrOutput
	ToConfigurationInfoPtrOutputWithContext(context.Context) ConfigurationInfoPtrOutput
}

type configurationInfoPtrType ConfigurationInfoArgs

func ConfigurationInfoPtr(v *ConfigurationInfoArgs) ConfigurationInfoPtrInput {
	return (*configurationInfoPtrType)(v)
}

func (*configurationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationInfo)(nil)).Elem()
}

func (i *configurationInfoPtrType) ToConfigurationInfoPtrOutput() ConfigurationInfoPtrOutput {
	return i.ToConfigurationInfoPtrOutputWithContext(context.Background())
}

func (i *configurationInfoPtrType) ToConfigurationInfoPtrOutputWithContext(ctx context.Context) ConfigurationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationInfoPtrOutput)
}

// The configuration information, used to generate configurations or save to applications
type ConfigurationInfoOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationInfo)(nil)).Elem()
}

func (o ConfigurationInfoOutput) ToConfigurationInfoOutput() ConfigurationInfoOutput {
	return o
}

func (o ConfigurationInfoOutput) ToConfigurationInfoOutputWithContext(ctx context.Context) ConfigurationInfoOutput {
	return o
}

func (o ConfigurationInfoOutput) ToConfigurationInfoPtrOutput() ConfigurationInfoPtrOutput {
	return o.ToConfigurationInfoPtrOutputWithContext(context.Background())
}

func (o ConfigurationInfoOutput) ToConfigurationInfoPtrOutputWithContext(ctx context.Context) ConfigurationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationInfo) *ConfigurationInfo {
		return &v
	}).(ConfigurationInfoPtrOutput)
}

// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
func (o ConfigurationInfoOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationInfo) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
func (o ConfigurationInfoOutput) AdditionalConfigurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfo) map[string]string { return v.AdditionalConfigurations }).(pulumi.StringMapOutput)
}

// A dictionary of additional properties to be added in the end of connection string.
func (o ConfigurationInfoOutput) AdditionalConnectionStringProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfo) map[string]string { return v.AdditionalConnectionStringProperties }).(pulumi.StringMapOutput)
}

// An option to store configuration into different place
func (o ConfigurationInfoOutput) ConfigurationStore() ConfigurationStorePtrOutput {
	return o.ApplyT(func(v ConfigurationInfo) *ConfigurationStore { return v.ConfigurationStore }).(ConfigurationStorePtrOutput)
}

// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
func (o ConfigurationInfoOutput) CustomizedKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfo) map[string]string { return v.CustomizedKeys }).(pulumi.StringMapOutput)
}

// Indicates some additional properties for dapr client type
func (o ConfigurationInfoOutput) DaprProperties() DaprPropertiesPtrOutput {
	return o.ApplyT(func(v ConfigurationInfo) *DaprProperties { return v.DaprProperties }).(DaprPropertiesPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ConfigurationInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

type ConfigurationInfoPtrOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationInfo)(nil)).Elem()
}

func (o ConfigurationInfoPtrOutput) ToConfigurationInfoPtrOutput() ConfigurationInfoPtrOutput {
	return o
}

func (o ConfigurationInfoPtrOutput) ToConfigurationInfoPtrOutputWithContext(ctx context.Context) ConfigurationInfoPtrOutput {
	return o
}

func (o ConfigurationInfoPtrOutput) Elem() ConfigurationInfoOutput {
	return o.ApplyT(func(v *ConfigurationInfo) ConfigurationInfo {
		if v != nil {
			return *v
		}
		var ret ConfigurationInfo
		return ret
	}).(ConfigurationInfoOutput)
}

// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
func (o ConfigurationInfoPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfo) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
func (o ConfigurationInfoPtrOutput) AdditionalConfigurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalConfigurations
	}).(pulumi.StringMapOutput)
}

// A dictionary of additional properties to be added in the end of connection string.
func (o ConfigurationInfoPtrOutput) AdditionalConnectionStringProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalConnectionStringProperties
	}).(pulumi.StringMapOutput)
}

// An option to store configuration into different place
func (o ConfigurationInfoPtrOutput) ConfigurationStore() ConfigurationStorePtrOutput {
	return o.ApplyT(func(v *ConfigurationInfo) *ConfigurationStore {
		if v == nil {
			return nil
		}
		return v.ConfigurationStore
	}).(ConfigurationStorePtrOutput)
}

// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
func (o ConfigurationInfoPtrOutput) CustomizedKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfo) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomizedKeys
	}).(pulumi.StringMapOutput)
}

// Indicates some additional properties for dapr client type
func (o ConfigurationInfoPtrOutput) DaprProperties() DaprPropertiesPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfo) *DaprProperties {
		if v == nil {
			return nil
		}
		return v.DaprProperties
	}).(DaprPropertiesPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ConfigurationInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// The configuration information, used to generate configurations or save to applications
type ConfigurationInfoResponse struct {
	// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
	Action *string `pulumi:"action"`
	// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
	AdditionalConfigurations map[string]string `pulumi:"additionalConfigurations"`
	// A dictionary of additional properties to be added in the end of connection string.
	AdditionalConnectionStringProperties map[string]string `pulumi:"additionalConnectionStringProperties"`
	// An option to store configuration into different place
	ConfigurationStore *ConfigurationStoreResponse `pulumi:"configurationStore"`
	// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
	CustomizedKeys map[string]string `pulumi:"customizedKeys"`
	// Indicates some additional properties for dapr client type
	DaprProperties *DaprPropertiesResponse `pulumi:"daprProperties"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
}

// The configuration information, used to generate configurations or save to applications
type ConfigurationInfoResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutput() ConfigurationInfoResponseOutput {
	return o
}

func (o ConfigurationInfoResponseOutput) ToConfigurationInfoResponseOutputWithContext(ctx context.Context) ConfigurationInfoResponseOutput {
	return o
}

// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
func (o ConfigurationInfoResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
func (o ConfigurationInfoResponseOutput) AdditionalConfigurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) map[string]string { return v.AdditionalConfigurations }).(pulumi.StringMapOutput)
}

// A dictionary of additional properties to be added in the end of connection string.
func (o ConfigurationInfoResponseOutput) AdditionalConnectionStringProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) map[string]string { return v.AdditionalConnectionStringProperties }).(pulumi.StringMapOutput)
}

// An option to store configuration into different place
func (o ConfigurationInfoResponseOutput) ConfigurationStore() ConfigurationStoreResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) *ConfigurationStoreResponse { return v.ConfigurationStore }).(ConfigurationStoreResponsePtrOutput)
}

// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
func (o ConfigurationInfoResponseOutput) CustomizedKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) map[string]string { return v.CustomizedKeys }).(pulumi.StringMapOutput)
}

// Indicates some additional properties for dapr client type
func (o ConfigurationInfoResponseOutput) DaprProperties() DaprPropertiesResponsePtrOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) *DaprPropertiesResponse { return v.DaprProperties }).(DaprPropertiesResponsePtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ConfigurationInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

type ConfigurationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationInfoResponse)(nil)).Elem()
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutput() ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) ToConfigurationInfoResponsePtrOutputWithContext(ctx context.Context) ConfigurationInfoResponsePtrOutput {
	return o
}

func (o ConfigurationInfoResponsePtrOutput) Elem() ConfigurationInfoResponseOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) ConfigurationInfoResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationInfoResponse
		return ret
	}).(ConfigurationInfoResponseOutput)
}

// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.
func (o ConfigurationInfoResponsePtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations
func (o ConfigurationInfoResponsePtrOutput) AdditionalConfigurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalConfigurations
	}).(pulumi.StringMapOutput)
}

// A dictionary of additional properties to be added in the end of connection string.
func (o ConfigurationInfoResponsePtrOutput) AdditionalConnectionStringProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalConnectionStringProperties
	}).(pulumi.StringMapOutput)
}

// An option to store configuration into different place
func (o ConfigurationInfoResponsePtrOutput) ConfigurationStore() ConfigurationStoreResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *ConfigurationStoreResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationStore
	}).(ConfigurationStoreResponsePtrOutput)
}

// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations
func (o ConfigurationInfoResponsePtrOutput) CustomizedKeys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomizedKeys
	}).(pulumi.StringMapOutput)
}

// Indicates some additional properties for dapr client type
func (o ConfigurationInfoResponsePtrOutput) DaprProperties() DaprPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *DaprPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DaprProperties
	}).(DaprPropertiesResponsePtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ConfigurationInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// An option to store configuration into different place
type ConfigurationStore struct {
	// The app configuration id to store configuration
	AppConfigurationId *string `pulumi:"appConfigurationId"`
}

// ConfigurationStoreInput is an input type that accepts ConfigurationStoreArgs and ConfigurationStoreOutput values.
// You can construct a concrete instance of `ConfigurationStoreInput` via:
//
//	ConfigurationStoreArgs{...}
type ConfigurationStoreInput interface {
	pulumi.Input

	ToConfigurationStoreOutput() ConfigurationStoreOutput
	ToConfigurationStoreOutputWithContext(context.Context) ConfigurationStoreOutput
}

// An option to store configuration into different place
type ConfigurationStoreArgs struct {
	// The app configuration id to store configuration
	AppConfigurationId pulumi.StringPtrInput `pulumi:"appConfigurationId"`
}

func (ConfigurationStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationStore)(nil)).Elem()
}

func (i ConfigurationStoreArgs) ToConfigurationStoreOutput() ConfigurationStoreOutput {
	return i.ToConfigurationStoreOutputWithContext(context.Background())
}

func (i ConfigurationStoreArgs) ToConfigurationStoreOutputWithContext(ctx context.Context) ConfigurationStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationStoreOutput)
}

func (i ConfigurationStoreArgs) ToConfigurationStorePtrOutput() ConfigurationStorePtrOutput {
	return i.ToConfigurationStorePtrOutputWithContext(context.Background())
}

func (i ConfigurationStoreArgs) ToConfigurationStorePtrOutputWithContext(ctx context.Context) ConfigurationStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationStoreOutput).ToConfigurationStorePtrOutputWithContext(ctx)
}

// ConfigurationStorePtrInput is an input type that accepts ConfigurationStoreArgs, ConfigurationStorePtr and ConfigurationStorePtrOutput values.
// You can construct a concrete instance of `ConfigurationStorePtrInput` via:
//
//	        ConfigurationStoreArgs{...}
//
//	or:
//
//	        nil
type ConfigurationStorePtrInput interface {
	pulumi.Input

	ToConfigurationStorePtrOutput() ConfigurationStorePtrOutput
	ToConfigurationStorePtrOutputWithContext(context.Context) ConfigurationStorePtrOutput
}

type configurationStorePtrType ConfigurationStoreArgs

func ConfigurationStorePtr(v *ConfigurationStoreArgs) ConfigurationStorePtrInput {
	return (*configurationStorePtrType)(v)
}

func (*configurationStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationStore)(nil)).Elem()
}

func (i *configurationStorePtrType) ToConfigurationStorePtrOutput() ConfigurationStorePtrOutput {
	return i.ToConfigurationStorePtrOutputWithContext(context.Background())
}

func (i *configurationStorePtrType) ToConfigurationStorePtrOutputWithContext(ctx context.Context) ConfigurationStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationStorePtrOutput)
}

// An option to store configuration into different place
type ConfigurationStoreOutput struct{ *pulumi.OutputState }

func (ConfigurationStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationStore)(nil)).Elem()
}

func (o ConfigurationStoreOutput) ToConfigurationStoreOutput() ConfigurationStoreOutput {
	return o
}

func (o ConfigurationStoreOutput) ToConfigurationStoreOutputWithContext(ctx context.Context) ConfigurationStoreOutput {
	return o
}

func (o ConfigurationStoreOutput) ToConfigurationStorePtrOutput() ConfigurationStorePtrOutput {
	return o.ToConfigurationStorePtrOutputWithContext(context.Background())
}

func (o ConfigurationStoreOutput) ToConfigurationStorePtrOutputWithContext(ctx context.Context) ConfigurationStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigurationStore) *ConfigurationStore {
		return &v
	}).(ConfigurationStorePtrOutput)
}

// The app configuration id to store configuration
func (o ConfigurationStoreOutput) AppConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationStore) *string { return v.AppConfigurationId }).(pulumi.StringPtrOutput)
}

type ConfigurationStorePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationStore)(nil)).Elem()
}

func (o ConfigurationStorePtrOutput) ToConfigurationStorePtrOutput() ConfigurationStorePtrOutput {
	return o
}

func (o ConfigurationStorePtrOutput) ToConfigurationStorePtrOutputWithContext(ctx context.Context) ConfigurationStorePtrOutput {
	return o
}

func (o ConfigurationStorePtrOutput) Elem() ConfigurationStoreOutput {
	return o.ApplyT(func(v *ConfigurationStore) ConfigurationStore {
		if v != nil {
			return *v
		}
		var ret ConfigurationStore
		return ret
	}).(ConfigurationStoreOutput)
}

// The app configuration id to store configuration
func (o ConfigurationStorePtrOutput) AppConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationStore) *string {
		if v == nil {
			return nil
		}
		return v.AppConfigurationId
	}).(pulumi.StringPtrOutput)
}

// An option to store configuration into different place
type ConfigurationStoreResponse struct {
	// The app configuration id to store configuration
	AppConfigurationId *string `pulumi:"appConfigurationId"`
}

// An option to store configuration into different place
type ConfigurationStoreResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationStoreResponse)(nil)).Elem()
}

func (o ConfigurationStoreResponseOutput) ToConfigurationStoreResponseOutput() ConfigurationStoreResponseOutput {
	return o
}

func (o ConfigurationStoreResponseOutput) ToConfigurationStoreResponseOutputWithContext(ctx context.Context) ConfigurationStoreResponseOutput {
	return o
}

// The app configuration id to store configuration
func (o ConfigurationStoreResponseOutput) AppConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigurationStoreResponse) *string { return v.AppConfigurationId }).(pulumi.StringPtrOutput)
}

type ConfigurationStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfigurationStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationStoreResponse)(nil)).Elem()
}

func (o ConfigurationStoreResponsePtrOutput) ToConfigurationStoreResponsePtrOutput() ConfigurationStoreResponsePtrOutput {
	return o
}

func (o ConfigurationStoreResponsePtrOutput) ToConfigurationStoreResponsePtrOutputWithContext(ctx context.Context) ConfigurationStoreResponsePtrOutput {
	return o
}

func (o ConfigurationStoreResponsePtrOutput) Elem() ConfigurationStoreResponseOutput {
	return o.ApplyT(func(v *ConfigurationStoreResponse) ConfigurationStoreResponse {
		if v != nil {
			return *v
		}
		var ret ConfigurationStoreResponse
		return ret
	}).(ConfigurationStoreResponseOutput)
}

// The app configuration id to store configuration
func (o ConfigurationStoreResponsePtrOutput) AppConfigurationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigurationStoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.AppConfigurationId
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is ConfluentBootstrapServer
type ConfluentBootstrapServer struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentBootstrapServer'.
	Type string `pulumi:"type"`
}

// ConfluentBootstrapServerInput is an input type that accepts ConfluentBootstrapServerArgs and ConfluentBootstrapServerOutput values.
// You can construct a concrete instance of `ConfluentBootstrapServerInput` via:
//
//	ConfluentBootstrapServerArgs{...}
type ConfluentBootstrapServerInput interface {
	pulumi.Input

	ToConfluentBootstrapServerOutput() ConfluentBootstrapServerOutput
	ToConfluentBootstrapServerOutputWithContext(context.Context) ConfluentBootstrapServerOutput
}

// The service properties when target service type is ConfluentBootstrapServer
type ConfluentBootstrapServerArgs struct {
	// The endpoint of service.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentBootstrapServer'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConfluentBootstrapServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentBootstrapServer)(nil)).Elem()
}

func (i ConfluentBootstrapServerArgs) ToConfluentBootstrapServerOutput() ConfluentBootstrapServerOutput {
	return i.ToConfluentBootstrapServerOutputWithContext(context.Background())
}

func (i ConfluentBootstrapServerArgs) ToConfluentBootstrapServerOutputWithContext(ctx context.Context) ConfluentBootstrapServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentBootstrapServerOutput)
}

func (i ConfluentBootstrapServerArgs) ToConfluentBootstrapServerPtrOutput() ConfluentBootstrapServerPtrOutput {
	return i.ToConfluentBootstrapServerPtrOutputWithContext(context.Background())
}

func (i ConfluentBootstrapServerArgs) ToConfluentBootstrapServerPtrOutputWithContext(ctx context.Context) ConfluentBootstrapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentBootstrapServerOutput).ToConfluentBootstrapServerPtrOutputWithContext(ctx)
}

// ConfluentBootstrapServerPtrInput is an input type that accepts ConfluentBootstrapServerArgs, ConfluentBootstrapServerPtr and ConfluentBootstrapServerPtrOutput values.
// You can construct a concrete instance of `ConfluentBootstrapServerPtrInput` via:
//
//	        ConfluentBootstrapServerArgs{...}
//
//	or:
//
//	        nil
type ConfluentBootstrapServerPtrInput interface {
	pulumi.Input

	ToConfluentBootstrapServerPtrOutput() ConfluentBootstrapServerPtrOutput
	ToConfluentBootstrapServerPtrOutputWithContext(context.Context) ConfluentBootstrapServerPtrOutput
}

type confluentBootstrapServerPtrType ConfluentBootstrapServerArgs

func ConfluentBootstrapServerPtr(v *ConfluentBootstrapServerArgs) ConfluentBootstrapServerPtrInput {
	return (*confluentBootstrapServerPtrType)(v)
}

func (*confluentBootstrapServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentBootstrapServer)(nil)).Elem()
}

func (i *confluentBootstrapServerPtrType) ToConfluentBootstrapServerPtrOutput() ConfluentBootstrapServerPtrOutput {
	return i.ToConfluentBootstrapServerPtrOutputWithContext(context.Background())
}

func (i *confluentBootstrapServerPtrType) ToConfluentBootstrapServerPtrOutputWithContext(ctx context.Context) ConfluentBootstrapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentBootstrapServerPtrOutput)
}

// The service properties when target service type is ConfluentBootstrapServer
type ConfluentBootstrapServerOutput struct{ *pulumi.OutputState }

func (ConfluentBootstrapServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentBootstrapServer)(nil)).Elem()
}

func (o ConfluentBootstrapServerOutput) ToConfluentBootstrapServerOutput() ConfluentBootstrapServerOutput {
	return o
}

func (o ConfluentBootstrapServerOutput) ToConfluentBootstrapServerOutputWithContext(ctx context.Context) ConfluentBootstrapServerOutput {
	return o
}

func (o ConfluentBootstrapServerOutput) ToConfluentBootstrapServerPtrOutput() ConfluentBootstrapServerPtrOutput {
	return o.ToConfluentBootstrapServerPtrOutputWithContext(context.Background())
}

func (o ConfluentBootstrapServerOutput) ToConfluentBootstrapServerPtrOutputWithContext(ctx context.Context) ConfluentBootstrapServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfluentBootstrapServer) *ConfluentBootstrapServer {
		return &v
	}).(ConfluentBootstrapServerPtrOutput)
}

// The endpoint of service.
func (o ConfluentBootstrapServerOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfluentBootstrapServer) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentBootstrapServer'.
func (o ConfluentBootstrapServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConfluentBootstrapServer) string { return v.Type }).(pulumi.StringOutput)
}

type ConfluentBootstrapServerPtrOutput struct{ *pulumi.OutputState }

func (ConfluentBootstrapServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentBootstrapServer)(nil)).Elem()
}

func (o ConfluentBootstrapServerPtrOutput) ToConfluentBootstrapServerPtrOutput() ConfluentBootstrapServerPtrOutput {
	return o
}

func (o ConfluentBootstrapServerPtrOutput) ToConfluentBootstrapServerPtrOutputWithContext(ctx context.Context) ConfluentBootstrapServerPtrOutput {
	return o
}

func (o ConfluentBootstrapServerPtrOutput) Elem() ConfluentBootstrapServerOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServer) ConfluentBootstrapServer {
		if v != nil {
			return *v
		}
		var ret ConfluentBootstrapServer
		return ret
	}).(ConfluentBootstrapServerOutput)
}

// The endpoint of service.
func (o ConfluentBootstrapServerPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServer) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentBootstrapServer'.
func (o ConfluentBootstrapServerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServer) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is ConfluentBootstrapServer
type ConfluentBootstrapServerResponse struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentBootstrapServer'.
	Type string `pulumi:"type"`
}

// The service properties when target service type is ConfluentBootstrapServer
type ConfluentBootstrapServerResponseOutput struct{ *pulumi.OutputState }

func (ConfluentBootstrapServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentBootstrapServerResponse)(nil)).Elem()
}

func (o ConfluentBootstrapServerResponseOutput) ToConfluentBootstrapServerResponseOutput() ConfluentBootstrapServerResponseOutput {
	return o
}

func (o ConfluentBootstrapServerResponseOutput) ToConfluentBootstrapServerResponseOutputWithContext(ctx context.Context) ConfluentBootstrapServerResponseOutput {
	return o
}

// The endpoint of service.
func (o ConfluentBootstrapServerResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfluentBootstrapServerResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentBootstrapServer'.
func (o ConfluentBootstrapServerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConfluentBootstrapServerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ConfluentBootstrapServerResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfluentBootstrapServerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentBootstrapServerResponse)(nil)).Elem()
}

func (o ConfluentBootstrapServerResponsePtrOutput) ToConfluentBootstrapServerResponsePtrOutput() ConfluentBootstrapServerResponsePtrOutput {
	return o
}

func (o ConfluentBootstrapServerResponsePtrOutput) ToConfluentBootstrapServerResponsePtrOutputWithContext(ctx context.Context) ConfluentBootstrapServerResponsePtrOutput {
	return o
}

func (o ConfluentBootstrapServerResponsePtrOutput) Elem() ConfluentBootstrapServerResponseOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServerResponse) ConfluentBootstrapServerResponse {
		if v != nil {
			return *v
		}
		var ret ConfluentBootstrapServerResponse
		return ret
	}).(ConfluentBootstrapServerResponseOutput)
}

// The endpoint of service.
func (o ConfluentBootstrapServerResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentBootstrapServer'.
func (o ConfluentBootstrapServerResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentBootstrapServerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is ConfluentSchemaRegistry
type ConfluentSchemaRegistry struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentSchemaRegistry'.
	Type string `pulumi:"type"`
}

// ConfluentSchemaRegistryInput is an input type that accepts ConfluentSchemaRegistryArgs and ConfluentSchemaRegistryOutput values.
// You can construct a concrete instance of `ConfluentSchemaRegistryInput` via:
//
//	ConfluentSchemaRegistryArgs{...}
type ConfluentSchemaRegistryInput interface {
	pulumi.Input

	ToConfluentSchemaRegistryOutput() ConfluentSchemaRegistryOutput
	ToConfluentSchemaRegistryOutputWithContext(context.Context) ConfluentSchemaRegistryOutput
}

// The service properties when target service type is ConfluentSchemaRegistry
type ConfluentSchemaRegistryArgs struct {
	// The endpoint of service.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentSchemaRegistry'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ConfluentSchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentSchemaRegistry)(nil)).Elem()
}

func (i ConfluentSchemaRegistryArgs) ToConfluentSchemaRegistryOutput() ConfluentSchemaRegistryOutput {
	return i.ToConfluentSchemaRegistryOutputWithContext(context.Background())
}

func (i ConfluentSchemaRegistryArgs) ToConfluentSchemaRegistryOutputWithContext(ctx context.Context) ConfluentSchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentSchemaRegistryOutput)
}

func (i ConfluentSchemaRegistryArgs) ToConfluentSchemaRegistryPtrOutput() ConfluentSchemaRegistryPtrOutput {
	return i.ToConfluentSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i ConfluentSchemaRegistryArgs) ToConfluentSchemaRegistryPtrOutputWithContext(ctx context.Context) ConfluentSchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentSchemaRegistryOutput).ToConfluentSchemaRegistryPtrOutputWithContext(ctx)
}

// ConfluentSchemaRegistryPtrInput is an input type that accepts ConfluentSchemaRegistryArgs, ConfluentSchemaRegistryPtr and ConfluentSchemaRegistryPtrOutput values.
// You can construct a concrete instance of `ConfluentSchemaRegistryPtrInput` via:
//
//	        ConfluentSchemaRegistryArgs{...}
//
//	or:
//
//	        nil
type ConfluentSchemaRegistryPtrInput interface {
	pulumi.Input

	ToConfluentSchemaRegistryPtrOutput() ConfluentSchemaRegistryPtrOutput
	ToConfluentSchemaRegistryPtrOutputWithContext(context.Context) ConfluentSchemaRegistryPtrOutput
}

type confluentSchemaRegistryPtrType ConfluentSchemaRegistryArgs

func ConfluentSchemaRegistryPtr(v *ConfluentSchemaRegistryArgs) ConfluentSchemaRegistryPtrInput {
	return (*confluentSchemaRegistryPtrType)(v)
}

func (*confluentSchemaRegistryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentSchemaRegistry)(nil)).Elem()
}

func (i *confluentSchemaRegistryPtrType) ToConfluentSchemaRegistryPtrOutput() ConfluentSchemaRegistryPtrOutput {
	return i.ToConfluentSchemaRegistryPtrOutputWithContext(context.Background())
}

func (i *confluentSchemaRegistryPtrType) ToConfluentSchemaRegistryPtrOutputWithContext(ctx context.Context) ConfluentSchemaRegistryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfluentSchemaRegistryPtrOutput)
}

// The service properties when target service type is ConfluentSchemaRegistry
type ConfluentSchemaRegistryOutput struct{ *pulumi.OutputState }

func (ConfluentSchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentSchemaRegistry)(nil)).Elem()
}

func (o ConfluentSchemaRegistryOutput) ToConfluentSchemaRegistryOutput() ConfluentSchemaRegistryOutput {
	return o
}

func (o ConfluentSchemaRegistryOutput) ToConfluentSchemaRegistryOutputWithContext(ctx context.Context) ConfluentSchemaRegistryOutput {
	return o
}

func (o ConfluentSchemaRegistryOutput) ToConfluentSchemaRegistryPtrOutput() ConfluentSchemaRegistryPtrOutput {
	return o.ToConfluentSchemaRegistryPtrOutputWithContext(context.Background())
}

func (o ConfluentSchemaRegistryOutput) ToConfluentSchemaRegistryPtrOutputWithContext(ctx context.Context) ConfluentSchemaRegistryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfluentSchemaRegistry) *ConfluentSchemaRegistry {
		return &v
	}).(ConfluentSchemaRegistryPtrOutput)
}

// The endpoint of service.
func (o ConfluentSchemaRegistryOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfluentSchemaRegistry) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentSchemaRegistry'.
func (o ConfluentSchemaRegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConfluentSchemaRegistry) string { return v.Type }).(pulumi.StringOutput)
}

type ConfluentSchemaRegistryPtrOutput struct{ *pulumi.OutputState }

func (ConfluentSchemaRegistryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentSchemaRegistry)(nil)).Elem()
}

func (o ConfluentSchemaRegistryPtrOutput) ToConfluentSchemaRegistryPtrOutput() ConfluentSchemaRegistryPtrOutput {
	return o
}

func (o ConfluentSchemaRegistryPtrOutput) ToConfluentSchemaRegistryPtrOutputWithContext(ctx context.Context) ConfluentSchemaRegistryPtrOutput {
	return o
}

func (o ConfluentSchemaRegistryPtrOutput) Elem() ConfluentSchemaRegistryOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistry) ConfluentSchemaRegistry {
		if v != nil {
			return *v
		}
		var ret ConfluentSchemaRegistry
		return ret
	}).(ConfluentSchemaRegistryOutput)
}

// The endpoint of service.
func (o ConfluentSchemaRegistryPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentSchemaRegistry'.
func (o ConfluentSchemaRegistryPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistry) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is ConfluentSchemaRegistry
type ConfluentSchemaRegistryResponse struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'ConfluentSchemaRegistry'.
	Type string `pulumi:"type"`
}

// The service properties when target service type is ConfluentSchemaRegistry
type ConfluentSchemaRegistryResponseOutput struct{ *pulumi.OutputState }

func (ConfluentSchemaRegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfluentSchemaRegistryResponse)(nil)).Elem()
}

func (o ConfluentSchemaRegistryResponseOutput) ToConfluentSchemaRegistryResponseOutput() ConfluentSchemaRegistryResponseOutput {
	return o
}

func (o ConfluentSchemaRegistryResponseOutput) ToConfluentSchemaRegistryResponseOutputWithContext(ctx context.Context) ConfluentSchemaRegistryResponseOutput {
	return o
}

// The endpoint of service.
func (o ConfluentSchemaRegistryResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfluentSchemaRegistryResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentSchemaRegistry'.
func (o ConfluentSchemaRegistryResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConfluentSchemaRegistryResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ConfluentSchemaRegistryResponsePtrOutput struct{ *pulumi.OutputState }

func (ConfluentSchemaRegistryResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfluentSchemaRegistryResponse)(nil)).Elem()
}

func (o ConfluentSchemaRegistryResponsePtrOutput) ToConfluentSchemaRegistryResponsePtrOutput() ConfluentSchemaRegistryResponsePtrOutput {
	return o
}

func (o ConfluentSchemaRegistryResponsePtrOutput) ToConfluentSchemaRegistryResponsePtrOutputWithContext(ctx context.Context) ConfluentSchemaRegistryResponsePtrOutput {
	return o
}

func (o ConfluentSchemaRegistryResponsePtrOutput) Elem() ConfluentSchemaRegistryResponseOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistryResponse) ConfluentSchemaRegistryResponse {
		if v != nil {
			return *v
		}
		var ret ConfluentSchemaRegistryResponse
		return ret
	}).(ConfluentSchemaRegistryResponseOutput)
}

// The endpoint of service.
func (o ConfluentSchemaRegistryResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'ConfluentSchemaRegistry'.
func (o ConfluentSchemaRegistryResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfluentSchemaRegistryResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The dryrun parameters for creation or update a linker
type CreateOrUpdateDryrunParameters struct {
	// The name of action for you dryrun job.
	// Expected value is 'createOrUpdate'.
	ActionName string `pulumi:"actionName"`
	// The authentication type.
	AuthInfo interface{} `pulumi:"authInfo"`
	// The application client type
	ClientType *string `pulumi:"clientType"`
	// The connection information consumed by applications, including secrets, connection strings.
	ConfigurationInfo *ConfigurationInfo `pulumi:"configurationInfo"`
	// The network solution.
	PublicNetworkSolution *PublicNetworkSolution `pulumi:"publicNetworkSolution"`
	// connection scope in source service.
	Scope *string `pulumi:"scope"`
	// An option to store secret value in secure place
	SecretStore *SecretStore `pulumi:"secretStore"`
	// The target service properties
	TargetService interface{} `pulumi:"targetService"`
	// The VNet solution.
	VNetSolution *VNetSolution `pulumi:"vNetSolution"`
}

// CreateOrUpdateDryrunParametersInput is an input type that accepts CreateOrUpdateDryrunParametersArgs and CreateOrUpdateDryrunParametersOutput values.
// You can construct a concrete instance of `CreateOrUpdateDryrunParametersInput` via:
//
//	CreateOrUpdateDryrunParametersArgs{...}
type CreateOrUpdateDryrunParametersInput interface {
	pulumi.Input

	ToCreateOrUpdateDryrunParametersOutput() CreateOrUpdateDryrunParametersOutput
	ToCreateOrUpdateDryrunParametersOutputWithContext(context.Context) CreateOrUpdateDryrunParametersOutput
}

// The dryrun parameters for creation or update a linker
type CreateOrUpdateDryrunParametersArgs struct {
	// The name of action for you dryrun job.
	// Expected value is 'createOrUpdate'.
	ActionName pulumi.StringInput `pulumi:"actionName"`
	// The authentication type.
	AuthInfo pulumi.Input `pulumi:"authInfo"`
	// The application client type
	ClientType pulumi.StringPtrInput `pulumi:"clientType"`
	// The connection information consumed by applications, including secrets, connection strings.
	ConfigurationInfo ConfigurationInfoPtrInput `pulumi:"configurationInfo"`
	// The network solution.
	PublicNetworkSolution PublicNetworkSolutionPtrInput `pulumi:"publicNetworkSolution"`
	// connection scope in source service.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// An option to store secret value in secure place
	SecretStore SecretStorePtrInput `pulumi:"secretStore"`
	// The target service properties
	TargetService pulumi.Input `pulumi:"targetService"`
	// The VNet solution.
	VNetSolution VNetSolutionPtrInput `pulumi:"vNetSolution"`
}

func (CreateOrUpdateDryrunParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateOrUpdateDryrunParameters)(nil)).Elem()
}

func (i CreateOrUpdateDryrunParametersArgs) ToCreateOrUpdateDryrunParametersOutput() CreateOrUpdateDryrunParametersOutput {
	return i.ToCreateOrUpdateDryrunParametersOutputWithContext(context.Background())
}

func (i CreateOrUpdateDryrunParametersArgs) ToCreateOrUpdateDryrunParametersOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateOrUpdateDryrunParametersOutput)
}

func (i CreateOrUpdateDryrunParametersArgs) ToCreateOrUpdateDryrunParametersPtrOutput() CreateOrUpdateDryrunParametersPtrOutput {
	return i.ToCreateOrUpdateDryrunParametersPtrOutputWithContext(context.Background())
}

func (i CreateOrUpdateDryrunParametersArgs) ToCreateOrUpdateDryrunParametersPtrOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateOrUpdateDryrunParametersOutput).ToCreateOrUpdateDryrunParametersPtrOutputWithContext(ctx)
}

// CreateOrUpdateDryrunParametersPtrInput is an input type that accepts CreateOrUpdateDryrunParametersArgs, CreateOrUpdateDryrunParametersPtr and CreateOrUpdateDryrunParametersPtrOutput values.
// You can construct a concrete instance of `CreateOrUpdateDryrunParametersPtrInput` via:
//
//	        CreateOrUpdateDryrunParametersArgs{...}
//
//	or:
//
//	        nil
type CreateOrUpdateDryrunParametersPtrInput interface {
	pulumi.Input

	ToCreateOrUpdateDryrunParametersPtrOutput() CreateOrUpdateDryrunParametersPtrOutput
	ToCreateOrUpdateDryrunParametersPtrOutputWithContext(context.Context) CreateOrUpdateDryrunParametersPtrOutput
}

type createOrUpdateDryrunParametersPtrType CreateOrUpdateDryrunParametersArgs

func CreateOrUpdateDryrunParametersPtr(v *CreateOrUpdateDryrunParametersArgs) CreateOrUpdateDryrunParametersPtrInput {
	return (*createOrUpdateDryrunParametersPtrType)(v)
}

func (*createOrUpdateDryrunParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateOrUpdateDryrunParameters)(nil)).Elem()
}

func (i *createOrUpdateDryrunParametersPtrType) ToCreateOrUpdateDryrunParametersPtrOutput() CreateOrUpdateDryrunParametersPtrOutput {
	return i.ToCreateOrUpdateDryrunParametersPtrOutputWithContext(context.Background())
}

func (i *createOrUpdateDryrunParametersPtrType) ToCreateOrUpdateDryrunParametersPtrOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateOrUpdateDryrunParametersPtrOutput)
}

// The dryrun parameters for creation or update a linker
type CreateOrUpdateDryrunParametersOutput struct{ *pulumi.OutputState }

func (CreateOrUpdateDryrunParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateOrUpdateDryrunParameters)(nil)).Elem()
}

func (o CreateOrUpdateDryrunParametersOutput) ToCreateOrUpdateDryrunParametersOutput() CreateOrUpdateDryrunParametersOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersOutput) ToCreateOrUpdateDryrunParametersOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersOutput) ToCreateOrUpdateDryrunParametersPtrOutput() CreateOrUpdateDryrunParametersPtrOutput {
	return o.ToCreateOrUpdateDryrunParametersPtrOutputWithContext(context.Background())
}

func (o CreateOrUpdateDryrunParametersOutput) ToCreateOrUpdateDryrunParametersPtrOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreateOrUpdateDryrunParameters) *CreateOrUpdateDryrunParameters {
		return &v
	}).(CreateOrUpdateDryrunParametersPtrOutput)
}

// The name of action for you dryrun job.
// Expected value is 'createOrUpdate'.
func (o CreateOrUpdateDryrunParametersOutput) ActionName() pulumi.StringOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) string { return v.ActionName }).(pulumi.StringOutput)
}

// The authentication type.
func (o CreateOrUpdateDryrunParametersOutput) AuthInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) interface{} { return v.AuthInfo }).(pulumi.AnyOutput)
}

// The application client type
func (o CreateOrUpdateDryrunParametersOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *string { return v.ClientType }).(pulumi.StringPtrOutput)
}

// The connection information consumed by applications, including secrets, connection strings.
func (o CreateOrUpdateDryrunParametersOutput) ConfigurationInfo() ConfigurationInfoPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *ConfigurationInfo { return v.ConfigurationInfo }).(ConfigurationInfoPtrOutput)
}

// The network solution.
func (o CreateOrUpdateDryrunParametersOutput) PublicNetworkSolution() PublicNetworkSolutionPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *PublicNetworkSolution { return v.PublicNetworkSolution }).(PublicNetworkSolutionPtrOutput)
}

// connection scope in source service.
func (o CreateOrUpdateDryrunParametersOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
func (o CreateOrUpdateDryrunParametersOutput) SecretStore() SecretStorePtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *SecretStore { return v.SecretStore }).(SecretStorePtrOutput)
}

// The target service properties
func (o CreateOrUpdateDryrunParametersOutput) TargetService() pulumi.AnyOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) interface{} { return v.TargetService }).(pulumi.AnyOutput)
}

// The VNet solution.
func (o CreateOrUpdateDryrunParametersOutput) VNetSolution() VNetSolutionPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParameters) *VNetSolution { return v.VNetSolution }).(VNetSolutionPtrOutput)
}

type CreateOrUpdateDryrunParametersPtrOutput struct{ *pulumi.OutputState }

func (CreateOrUpdateDryrunParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateOrUpdateDryrunParameters)(nil)).Elem()
}

func (o CreateOrUpdateDryrunParametersPtrOutput) ToCreateOrUpdateDryrunParametersPtrOutput() CreateOrUpdateDryrunParametersPtrOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersPtrOutput) ToCreateOrUpdateDryrunParametersPtrOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersPtrOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersPtrOutput) Elem() CreateOrUpdateDryrunParametersOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) CreateOrUpdateDryrunParameters {
		if v != nil {
			return *v
		}
		var ret CreateOrUpdateDryrunParameters
		return ret
	}).(CreateOrUpdateDryrunParametersOutput)
}

// The name of action for you dryrun job.
// Expected value is 'createOrUpdate'.
func (o CreateOrUpdateDryrunParametersPtrOutput) ActionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *string {
		if v == nil {
			return nil
		}
		return &v.ActionName
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
func (o CreateOrUpdateDryrunParametersPtrOutput) AuthInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) interface{} {
		if v == nil {
			return nil
		}
		return v.AuthInfo
	}).(pulumi.AnyOutput)
}

// The application client type
func (o CreateOrUpdateDryrunParametersPtrOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *string {
		if v == nil {
			return nil
		}
		return v.ClientType
	}).(pulumi.StringPtrOutput)
}

// The connection information consumed by applications, including secrets, connection strings.
func (o CreateOrUpdateDryrunParametersPtrOutput) ConfigurationInfo() ConfigurationInfoPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *ConfigurationInfo {
		if v == nil {
			return nil
		}
		return v.ConfigurationInfo
	}).(ConfigurationInfoPtrOutput)
}

// The network solution.
func (o CreateOrUpdateDryrunParametersPtrOutput) PublicNetworkSolution() PublicNetworkSolutionPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *PublicNetworkSolution {
		if v == nil {
			return nil
		}
		return v.PublicNetworkSolution
	}).(PublicNetworkSolutionPtrOutput)
}

// connection scope in source service.
func (o CreateOrUpdateDryrunParametersPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
func (o CreateOrUpdateDryrunParametersPtrOutput) SecretStore() SecretStorePtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *SecretStore {
		if v == nil {
			return nil
		}
		return v.SecretStore
	}).(SecretStorePtrOutput)
}

// The target service properties
func (o CreateOrUpdateDryrunParametersPtrOutput) TargetService() pulumi.AnyOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetService
	}).(pulumi.AnyOutput)
}

// The VNet solution.
func (o CreateOrUpdateDryrunParametersPtrOutput) VNetSolution() VNetSolutionPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParameters) *VNetSolution {
		if v == nil {
			return nil
		}
		return v.VNetSolution
	}).(VNetSolutionPtrOutput)
}

// The dryrun parameters for creation or update a linker
type CreateOrUpdateDryrunParametersResponse struct {
	// The name of action for you dryrun job.
	// Expected value is 'createOrUpdate'.
	ActionName string `pulumi:"actionName"`
	// The authentication type.
	AuthInfo interface{} `pulumi:"authInfo"`
	// The application client type
	ClientType *string `pulumi:"clientType"`
	// The connection information consumed by applications, including secrets, connection strings.
	ConfigurationInfo *ConfigurationInfoResponse `pulumi:"configurationInfo"`
	// The provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// The network solution.
	PublicNetworkSolution *PublicNetworkSolutionResponse `pulumi:"publicNetworkSolution"`
	// connection scope in source service.
	Scope *string `pulumi:"scope"`
	// An option to store secret value in secure place
	SecretStore *SecretStoreResponse `pulumi:"secretStore"`
	// The target service properties
	TargetService interface{} `pulumi:"targetService"`
	// The VNet solution.
	VNetSolution *VNetSolutionResponse `pulumi:"vNetSolution"`
}

// The dryrun parameters for creation or update a linker
type CreateOrUpdateDryrunParametersResponseOutput struct{ *pulumi.OutputState }

func (CreateOrUpdateDryrunParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateOrUpdateDryrunParametersResponse)(nil)).Elem()
}

func (o CreateOrUpdateDryrunParametersResponseOutput) ToCreateOrUpdateDryrunParametersResponseOutput() CreateOrUpdateDryrunParametersResponseOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersResponseOutput) ToCreateOrUpdateDryrunParametersResponseOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersResponseOutput {
	return o
}

// The name of action for you dryrun job.
// Expected value is 'createOrUpdate'.
func (o CreateOrUpdateDryrunParametersResponseOutput) ActionName() pulumi.StringOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) string { return v.ActionName }).(pulumi.StringOutput)
}

// The authentication type.
func (o CreateOrUpdateDryrunParametersResponseOutput) AuthInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) interface{} { return v.AuthInfo }).(pulumi.AnyOutput)
}

// The application client type
func (o CreateOrUpdateDryrunParametersResponseOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *string { return v.ClientType }).(pulumi.StringPtrOutput)
}

// The connection information consumed by applications, including secrets, connection strings.
func (o CreateOrUpdateDryrunParametersResponseOutput) ConfigurationInfo() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *ConfigurationInfoResponse { return v.ConfigurationInfo }).(ConfigurationInfoResponsePtrOutput)
}

// The provisioning state.
func (o CreateOrUpdateDryrunParametersResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The network solution.
func (o CreateOrUpdateDryrunParametersResponseOutput) PublicNetworkSolution() PublicNetworkSolutionResponsePtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *PublicNetworkSolutionResponse {
		return v.PublicNetworkSolution
	}).(PublicNetworkSolutionResponsePtrOutput)
}

// connection scope in source service.
func (o CreateOrUpdateDryrunParametersResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
func (o CreateOrUpdateDryrunParametersResponseOutput) SecretStore() SecretStoreResponsePtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *SecretStoreResponse { return v.SecretStore }).(SecretStoreResponsePtrOutput)
}

// The target service properties
func (o CreateOrUpdateDryrunParametersResponseOutput) TargetService() pulumi.AnyOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) interface{} { return v.TargetService }).(pulumi.AnyOutput)
}

// The VNet solution.
func (o CreateOrUpdateDryrunParametersResponseOutput) VNetSolution() VNetSolutionResponsePtrOutput {
	return o.ApplyT(func(v CreateOrUpdateDryrunParametersResponse) *VNetSolutionResponse { return v.VNetSolution }).(VNetSolutionResponsePtrOutput)
}

type CreateOrUpdateDryrunParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (CreateOrUpdateDryrunParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateOrUpdateDryrunParametersResponse)(nil)).Elem()
}

func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ToCreateOrUpdateDryrunParametersResponsePtrOutput() CreateOrUpdateDryrunParametersResponsePtrOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ToCreateOrUpdateDryrunParametersResponsePtrOutputWithContext(ctx context.Context) CreateOrUpdateDryrunParametersResponsePtrOutput {
	return o
}

func (o CreateOrUpdateDryrunParametersResponsePtrOutput) Elem() CreateOrUpdateDryrunParametersResponseOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) CreateOrUpdateDryrunParametersResponse {
		if v != nil {
			return *v
		}
		var ret CreateOrUpdateDryrunParametersResponse
		return ret
	}).(CreateOrUpdateDryrunParametersResponseOutput)
}

// The name of action for you dryrun job.
// Expected value is 'createOrUpdate'.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ActionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionName
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) AuthInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.AuthInfo
	}).(pulumi.AnyOutput)
}

// The application client type
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ClientType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientType
	}).(pulumi.StringPtrOutput)
}

// The connection information consumed by applications, including secrets, connection strings.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ConfigurationInfo() ConfigurationInfoResponsePtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *ConfigurationInfoResponse {
		if v == nil {
			return nil
		}
		return v.ConfigurationInfo
	}).(ConfigurationInfoResponsePtrOutput)
}

// The provisioning state.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The network solution.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) PublicNetworkSolution() PublicNetworkSolutionResponsePtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *PublicNetworkSolutionResponse {
		if v == nil {
			return nil
		}
		return v.PublicNetworkSolution
	}).(PublicNetworkSolutionResponsePtrOutput)
}

// connection scope in source service.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) SecretStore() SecretStoreResponsePtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *SecretStoreResponse {
		if v == nil {
			return nil
		}
		return v.SecretStore
	}).(SecretStoreResponsePtrOutput)
}

// The target service properties
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) TargetService() pulumi.AnyOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetService
	}).(pulumi.AnyOutput)
}

// The VNet solution.
func (o CreateOrUpdateDryrunParametersResponsePtrOutput) VNetSolution() VNetSolutionResponsePtrOutput {
	return o.ApplyT(func(v *CreateOrUpdateDryrunParametersResponse) *VNetSolutionResponse {
		if v == nil {
			return nil
		}
		return v.VNetSolution
	}).(VNetSolutionResponsePtrOutput)
}

// The dapr component metadata.
type DaprMetadata struct {
	// The description of the metadata, returned from configuration api
	Description *string `pulumi:"description"`
	// Metadata property name.
	Name *string `pulumi:"name"`
	// The value indicating whether the metadata is required or not
	Required *string `pulumi:"required"`
	// The secret name where dapr could get value
	SecretRef *string `pulumi:"secretRef"`
	// Metadata property value.
	Value *string `pulumi:"value"`
}

// DaprMetadataInput is an input type that accepts DaprMetadataArgs and DaprMetadataOutput values.
// You can construct a concrete instance of `DaprMetadataInput` via:
//
//	DaprMetadataArgs{...}
type DaprMetadataInput interface {
	pulumi.Input

	ToDaprMetadataOutput() DaprMetadataOutput
	ToDaprMetadataOutputWithContext(context.Context) DaprMetadataOutput
}

// The dapr component metadata.
type DaprMetadataArgs struct {
	// The description of the metadata, returned from configuration api
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Metadata property name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value indicating whether the metadata is required or not
	Required pulumi.StringPtrInput `pulumi:"required"`
	// The secret name where dapr could get value
	SecretRef pulumi.StringPtrInput `pulumi:"secretRef"`
	// Metadata property value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DaprMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadata)(nil)).Elem()
}

func (i DaprMetadataArgs) ToDaprMetadataOutput() DaprMetadataOutput {
	return i.ToDaprMetadataOutputWithContext(context.Background())
}

func (i DaprMetadataArgs) ToDaprMetadataOutputWithContext(ctx context.Context) DaprMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprMetadataOutput)
}

// DaprMetadataArrayInput is an input type that accepts DaprMetadataArray and DaprMetadataArrayOutput values.
// You can construct a concrete instance of `DaprMetadataArrayInput` via:
//
//	DaprMetadataArray{ DaprMetadataArgs{...} }
type DaprMetadataArrayInput interface {
	pulumi.Input

	ToDaprMetadataArrayOutput() DaprMetadataArrayOutput
	ToDaprMetadataArrayOutputWithContext(context.Context) DaprMetadataArrayOutput
}

type DaprMetadataArray []DaprMetadataInput

func (DaprMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadata)(nil)).Elem()
}

func (i DaprMetadataArray) ToDaprMetadataArrayOutput() DaprMetadataArrayOutput {
	return i.ToDaprMetadataArrayOutputWithContext(context.Background())
}

func (i DaprMetadataArray) ToDaprMetadataArrayOutputWithContext(ctx context.Context) DaprMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprMetadataArrayOutput)
}

// The dapr component metadata.
type DaprMetadataOutput struct{ *pulumi.OutputState }

func (DaprMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadata)(nil)).Elem()
}

func (o DaprMetadataOutput) ToDaprMetadataOutput() DaprMetadataOutput {
	return o
}

func (o DaprMetadataOutput) ToDaprMetadataOutputWithContext(ctx context.Context) DaprMetadataOutput {
	return o
}

// The description of the metadata, returned from configuration api
func (o DaprMetadataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata property name.
func (o DaprMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value indicating whether the metadata is required or not
func (o DaprMetadataOutput) Required() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Required }).(pulumi.StringPtrOutput)
}

// The secret name where dapr could get value
func (o DaprMetadataOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Metadata property value.
func (o DaprMetadataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadata) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DaprMetadataArrayOutput struct{ *pulumi.OutputState }

func (DaprMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadata)(nil)).Elem()
}

func (o DaprMetadataArrayOutput) ToDaprMetadataArrayOutput() DaprMetadataArrayOutput {
	return o
}

func (o DaprMetadataArrayOutput) ToDaprMetadataArrayOutputWithContext(ctx context.Context) DaprMetadataArrayOutput {
	return o
}

func (o DaprMetadataArrayOutput) Index(i pulumi.IntInput) DaprMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaprMetadata {
		return vs[0].([]DaprMetadata)[vs[1].(int)]
	}).(DaprMetadataOutput)
}

// The dapr component metadata.
type DaprMetadataResponse struct {
	// The description of the metadata, returned from configuration api
	Description *string `pulumi:"description"`
	// Metadata property name.
	Name *string `pulumi:"name"`
	// The value indicating whether the metadata is required or not
	Required *string `pulumi:"required"`
	// The secret name where dapr could get value
	SecretRef *string `pulumi:"secretRef"`
	// Metadata property value.
	Value *string `pulumi:"value"`
}

// The dapr component metadata.
type DaprMetadataResponseOutput struct{ *pulumi.OutputState }

func (DaprMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprMetadataResponse)(nil)).Elem()
}

func (o DaprMetadataResponseOutput) ToDaprMetadataResponseOutput() DaprMetadataResponseOutput {
	return o
}

func (o DaprMetadataResponseOutput) ToDaprMetadataResponseOutputWithContext(ctx context.Context) DaprMetadataResponseOutput {
	return o
}

// The description of the metadata, returned from configuration api
func (o DaprMetadataResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata property name.
func (o DaprMetadataResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value indicating whether the metadata is required or not
func (o DaprMetadataResponseOutput) Required() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Required }).(pulumi.StringPtrOutput)
}

// The secret name where dapr could get value
func (o DaprMetadataResponseOutput) SecretRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.SecretRef }).(pulumi.StringPtrOutput)
}

// Metadata property value.
func (o DaprMetadataResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprMetadataResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DaprMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (DaprMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DaprMetadataResponse)(nil)).Elem()
}

func (o DaprMetadataResponseArrayOutput) ToDaprMetadataResponseArrayOutput() DaprMetadataResponseArrayOutput {
	return o
}

func (o DaprMetadataResponseArrayOutput) ToDaprMetadataResponseArrayOutputWithContext(ctx context.Context) DaprMetadataResponseArrayOutput {
	return o
}

func (o DaprMetadataResponseArrayOutput) Index(i pulumi.IntInput) DaprMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DaprMetadataResponse {
		return vs[0].([]DaprMetadataResponse)[vs[1].(int)]
	}).(DaprMetadataResponseOutput)
}

// Indicates some additional properties for dapr client type
type DaprProperties struct {
	// The dapr component type
	ComponentType *string `pulumi:"componentType"`
	// Additional dapr metadata
	Metadata []DaprMetadata `pulumi:"metadata"`
	// The dapr component scopes
	Scopes []string `pulumi:"scopes"`
	// The name of a secret store dapr to retrieve secret
	SecretStoreComponent *string `pulumi:"secretStoreComponent"`
	// The dapr component version
	Version *string `pulumi:"version"`
}

// DaprPropertiesInput is an input type that accepts DaprPropertiesArgs and DaprPropertiesOutput values.
// You can construct a concrete instance of `DaprPropertiesInput` via:
//
//	DaprPropertiesArgs{...}
type DaprPropertiesInput interface {
	pulumi.Input

	ToDaprPropertiesOutput() DaprPropertiesOutput
	ToDaprPropertiesOutputWithContext(context.Context) DaprPropertiesOutput
}

// Indicates some additional properties for dapr client type
type DaprPropertiesArgs struct {
	// The dapr component type
	ComponentType pulumi.StringPtrInput `pulumi:"componentType"`
	// Additional dapr metadata
	Metadata DaprMetadataArrayInput `pulumi:"metadata"`
	// The dapr component scopes
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// The name of a secret store dapr to retrieve secret
	SecretStoreComponent pulumi.StringPtrInput `pulumi:"secretStoreComponent"`
	// The dapr component version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DaprPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprProperties)(nil)).Elem()
}

func (i DaprPropertiesArgs) ToDaprPropertiesOutput() DaprPropertiesOutput {
	return i.ToDaprPropertiesOutputWithContext(context.Background())
}

func (i DaprPropertiesArgs) ToDaprPropertiesOutputWithContext(ctx context.Context) DaprPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprPropertiesOutput)
}

func (i DaprPropertiesArgs) ToDaprPropertiesPtrOutput() DaprPropertiesPtrOutput {
	return i.ToDaprPropertiesPtrOutputWithContext(context.Background())
}

func (i DaprPropertiesArgs) ToDaprPropertiesPtrOutputWithContext(ctx context.Context) DaprPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprPropertiesOutput).ToDaprPropertiesPtrOutputWithContext(ctx)
}

// DaprPropertiesPtrInput is an input type that accepts DaprPropertiesArgs, DaprPropertiesPtr and DaprPropertiesPtrOutput values.
// You can construct a concrete instance of `DaprPropertiesPtrInput` via:
//
//	        DaprPropertiesArgs{...}
//
//	or:
//
//	        nil
type DaprPropertiesPtrInput interface {
	pulumi.Input

	ToDaprPropertiesPtrOutput() DaprPropertiesPtrOutput
	ToDaprPropertiesPtrOutputWithContext(context.Context) DaprPropertiesPtrOutput
}

type daprPropertiesPtrType DaprPropertiesArgs

func DaprPropertiesPtr(v *DaprPropertiesArgs) DaprPropertiesPtrInput {
	return (*daprPropertiesPtrType)(v)
}

func (*daprPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DaprProperties)(nil)).Elem()
}

func (i *daprPropertiesPtrType) ToDaprPropertiesPtrOutput() DaprPropertiesPtrOutput {
	return i.ToDaprPropertiesPtrOutputWithContext(context.Background())
}

func (i *daprPropertiesPtrType) ToDaprPropertiesPtrOutputWithContext(ctx context.Context) DaprPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DaprPropertiesPtrOutput)
}

// Indicates some additional properties for dapr client type
type DaprPropertiesOutput struct{ *pulumi.OutputState }

func (DaprPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprProperties)(nil)).Elem()
}

func (o DaprPropertiesOutput) ToDaprPropertiesOutput() DaprPropertiesOutput {
	return o
}

func (o DaprPropertiesOutput) ToDaprPropertiesOutputWithContext(ctx context.Context) DaprPropertiesOutput {
	return o
}

func (o DaprPropertiesOutput) ToDaprPropertiesPtrOutput() DaprPropertiesPtrOutput {
	return o.ToDaprPropertiesPtrOutputWithContext(context.Background())
}

func (o DaprPropertiesOutput) ToDaprPropertiesPtrOutputWithContext(ctx context.Context) DaprPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DaprProperties) *DaprProperties {
		return &v
	}).(DaprPropertiesPtrOutput)
}

// The dapr component type
func (o DaprPropertiesOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprProperties) *string { return v.ComponentType }).(pulumi.StringPtrOutput)
}

// Additional dapr metadata
func (o DaprPropertiesOutput) Metadata() DaprMetadataArrayOutput {
	return o.ApplyT(func(v DaprProperties) []DaprMetadata { return v.Metadata }).(DaprMetadataArrayOutput)
}

// The dapr component scopes
func (o DaprPropertiesOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DaprProperties) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The name of a secret store dapr to retrieve secret
func (o DaprPropertiesOutput) SecretStoreComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprProperties) *string { return v.SecretStoreComponent }).(pulumi.StringPtrOutput)
}

// The dapr component version
func (o DaprPropertiesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprProperties) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DaprPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DaprPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaprProperties)(nil)).Elem()
}

func (o DaprPropertiesPtrOutput) ToDaprPropertiesPtrOutput() DaprPropertiesPtrOutput {
	return o
}

func (o DaprPropertiesPtrOutput) ToDaprPropertiesPtrOutputWithContext(ctx context.Context) DaprPropertiesPtrOutput {
	return o
}

func (o DaprPropertiesPtrOutput) Elem() DaprPropertiesOutput {
	return o.ApplyT(func(v *DaprProperties) DaprProperties {
		if v != nil {
			return *v
		}
		var ret DaprProperties
		return ret
	}).(DaprPropertiesOutput)
}

// The dapr component type
func (o DaprPropertiesPtrOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprProperties) *string {
		if v == nil {
			return nil
		}
		return v.ComponentType
	}).(pulumi.StringPtrOutput)
}

// Additional dapr metadata
func (o DaprPropertiesPtrOutput) Metadata() DaprMetadataArrayOutput {
	return o.ApplyT(func(v *DaprProperties) []DaprMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(DaprMetadataArrayOutput)
}

// The dapr component scopes
func (o DaprPropertiesPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DaprProperties) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The name of a secret store dapr to retrieve secret
func (o DaprPropertiesPtrOutput) SecretStoreComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprProperties) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreComponent
	}).(pulumi.StringPtrOutput)
}

// The dapr component version
func (o DaprPropertiesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprProperties) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Indicates some additional properties for dapr client type
type DaprPropertiesResponse struct {
	// The direction supported by the dapr binding component
	BindingComponentDirection string `pulumi:"bindingComponentDirection"`
	// The dapr component type
	ComponentType *string `pulumi:"componentType"`
	// Additional dapr metadata
	Metadata []DaprMetadataResponse `pulumi:"metadata"`
	// The runtime version supported by the properties
	RuntimeVersion string `pulumi:"runtimeVersion"`
	// The dapr component scopes
	Scopes []string `pulumi:"scopes"`
	// The name of a secret store dapr to retrieve secret
	SecretStoreComponent *string `pulumi:"secretStoreComponent"`
	// The dapr component version
	Version *string `pulumi:"version"`
}

// Indicates some additional properties for dapr client type
type DaprPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DaprPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DaprPropertiesResponse)(nil)).Elem()
}

func (o DaprPropertiesResponseOutput) ToDaprPropertiesResponseOutput() DaprPropertiesResponseOutput {
	return o
}

func (o DaprPropertiesResponseOutput) ToDaprPropertiesResponseOutputWithContext(ctx context.Context) DaprPropertiesResponseOutput {
	return o
}

// The direction supported by the dapr binding component
func (o DaprPropertiesResponseOutput) BindingComponentDirection() pulumi.StringOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) string { return v.BindingComponentDirection }).(pulumi.StringOutput)
}

// The dapr component type
func (o DaprPropertiesResponseOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) *string { return v.ComponentType }).(pulumi.StringPtrOutput)
}

// Additional dapr metadata
func (o DaprPropertiesResponseOutput) Metadata() DaprMetadataResponseArrayOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) []DaprMetadataResponse { return v.Metadata }).(DaprMetadataResponseArrayOutput)
}

// The runtime version supported by the properties
func (o DaprPropertiesResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// The dapr component scopes
func (o DaprPropertiesResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// The name of a secret store dapr to retrieve secret
func (o DaprPropertiesResponseOutput) SecretStoreComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) *string { return v.SecretStoreComponent }).(pulumi.StringPtrOutput)
}

// The dapr component version
func (o DaprPropertiesResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DaprPropertiesResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DaprPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DaprPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DaprPropertiesResponse)(nil)).Elem()
}

func (o DaprPropertiesResponsePtrOutput) ToDaprPropertiesResponsePtrOutput() DaprPropertiesResponsePtrOutput {
	return o
}

func (o DaprPropertiesResponsePtrOutput) ToDaprPropertiesResponsePtrOutputWithContext(ctx context.Context) DaprPropertiesResponsePtrOutput {
	return o
}

func (o DaprPropertiesResponsePtrOutput) Elem() DaprPropertiesResponseOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) DaprPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DaprPropertiesResponse
		return ret
	}).(DaprPropertiesResponseOutput)
}

// The direction supported by the dapr binding component
func (o DaprPropertiesResponsePtrOutput) BindingComponentDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BindingComponentDirection
	}).(pulumi.StringPtrOutput)
}

// The dapr component type
func (o DaprPropertiesResponsePtrOutput) ComponentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComponentType
	}).(pulumi.StringPtrOutput)
}

// Additional dapr metadata
func (o DaprPropertiesResponsePtrOutput) Metadata() DaprMetadataResponseArrayOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) []DaprMetadataResponse {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(DaprMetadataResponseArrayOutput)
}

// The runtime version supported by the properties
func (o DaprPropertiesResponsePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The dapr component scopes
func (o DaprPropertiesResponsePtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// The name of a secret store dapr to retrieve secret
func (o DaprPropertiesResponsePtrOutput) SecretStoreComponent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretStoreComponent
	}).(pulumi.StringPtrOutput)
}

// The dapr component version
func (o DaprPropertiesResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DaprPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The preview of the operations for creation
type DryrunOperationPreviewResponse struct {
	// The action defined by RBAC, refer https://docs.microsoft.com/azure/role-based-access-control/role-definitions#actions-format
	Action *string `pulumi:"action"`
	// The description of the operation
	Description *string `pulumi:"description"`
	// The operation name
	Name *string `pulumi:"name"`
	// The operation type
	OperationType *string `pulumi:"operationType"`
	// The scope of the operation, refer https://docs.microsoft.com/azure/role-based-access-control/scope-overview
	Scope *string `pulumi:"scope"`
}

// The preview of the operations for creation
type DryrunOperationPreviewResponseOutput struct{ *pulumi.OutputState }

func (DryrunOperationPreviewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DryrunOperationPreviewResponse)(nil)).Elem()
}

func (o DryrunOperationPreviewResponseOutput) ToDryrunOperationPreviewResponseOutput() DryrunOperationPreviewResponseOutput {
	return o
}

func (o DryrunOperationPreviewResponseOutput) ToDryrunOperationPreviewResponseOutputWithContext(ctx context.Context) DryrunOperationPreviewResponseOutput {
	return o
}

// The action defined by RBAC, refer https://docs.microsoft.com/azure/role-based-access-control/role-definitions#actions-format
func (o DryrunOperationPreviewResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DryrunOperationPreviewResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The description of the operation
func (o DryrunOperationPreviewResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DryrunOperationPreviewResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The operation name
func (o DryrunOperationPreviewResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DryrunOperationPreviewResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The operation type
func (o DryrunOperationPreviewResponseOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DryrunOperationPreviewResponse) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// The scope of the operation, refer https://docs.microsoft.com/azure/role-based-access-control/scope-overview
func (o DryrunOperationPreviewResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DryrunOperationPreviewResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type DryrunOperationPreviewResponseArrayOutput struct{ *pulumi.OutputState }

func (DryrunOperationPreviewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DryrunOperationPreviewResponse)(nil)).Elem()
}

func (o DryrunOperationPreviewResponseArrayOutput) ToDryrunOperationPreviewResponseArrayOutput() DryrunOperationPreviewResponseArrayOutput {
	return o
}

func (o DryrunOperationPreviewResponseArrayOutput) ToDryrunOperationPreviewResponseArrayOutputWithContext(ctx context.Context) DryrunOperationPreviewResponseArrayOutput {
	return o
}

func (o DryrunOperationPreviewResponseArrayOutput) Index(i pulumi.IntInput) DryrunOperationPreviewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DryrunOperationPreviewResponse {
		return vs[0].([]DryrunOperationPreviewResponse)[vs[1].(int)]
	}).(DryrunOperationPreviewResponseOutput)
}

// The authentication info when authType is EasyAuth Microsoft Entra ID
type EasyAuthMicrosoftEntraIDAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'easyAuthMicrosoftEntraID'.
	AuthType string `pulumi:"authType"`
	// Application clientId for EasyAuth Microsoft Entra ID.
	ClientId *string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Application Secret for EasyAuth Microsoft Entra ID.
	Secret *string `pulumi:"secret"`
}

// EasyAuthMicrosoftEntraIDAuthInfoInput is an input type that accepts EasyAuthMicrosoftEntraIDAuthInfoArgs and EasyAuthMicrosoftEntraIDAuthInfoOutput values.
// You can construct a concrete instance of `EasyAuthMicrosoftEntraIDAuthInfoInput` via:
//
//	EasyAuthMicrosoftEntraIDAuthInfoArgs{...}
type EasyAuthMicrosoftEntraIDAuthInfoInput interface {
	pulumi.Input

	ToEasyAuthMicrosoftEntraIDAuthInfoOutput() EasyAuthMicrosoftEntraIDAuthInfoOutput
	ToEasyAuthMicrosoftEntraIDAuthInfoOutputWithContext(context.Context) EasyAuthMicrosoftEntraIDAuthInfoOutput
}

// The authentication info when authType is EasyAuth Microsoft Entra ID
type EasyAuthMicrosoftEntraIDAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'easyAuthMicrosoftEntraID'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Application clientId for EasyAuth Microsoft Entra ID.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Application Secret for EasyAuth Microsoft Entra ID.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
}

func (EasyAuthMicrosoftEntraIDAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EasyAuthMicrosoftEntraIDAuthInfo)(nil)).Elem()
}

func (i EasyAuthMicrosoftEntraIDAuthInfoArgs) ToEasyAuthMicrosoftEntraIDAuthInfoOutput() EasyAuthMicrosoftEntraIDAuthInfoOutput {
	return i.ToEasyAuthMicrosoftEntraIDAuthInfoOutputWithContext(context.Background())
}

func (i EasyAuthMicrosoftEntraIDAuthInfoArgs) ToEasyAuthMicrosoftEntraIDAuthInfoOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EasyAuthMicrosoftEntraIDAuthInfoOutput)
}

func (i EasyAuthMicrosoftEntraIDAuthInfoArgs) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutput() EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return i.ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(context.Background())
}

func (i EasyAuthMicrosoftEntraIDAuthInfoArgs) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EasyAuthMicrosoftEntraIDAuthInfoOutput).ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(ctx)
}

// EasyAuthMicrosoftEntraIDAuthInfoPtrInput is an input type that accepts EasyAuthMicrosoftEntraIDAuthInfoArgs, EasyAuthMicrosoftEntraIDAuthInfoPtr and EasyAuthMicrosoftEntraIDAuthInfoPtrOutput values.
// You can construct a concrete instance of `EasyAuthMicrosoftEntraIDAuthInfoPtrInput` via:
//
//	        EasyAuthMicrosoftEntraIDAuthInfoArgs{...}
//
//	or:
//
//	        nil
type EasyAuthMicrosoftEntraIDAuthInfoPtrInput interface {
	pulumi.Input

	ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutput() EasyAuthMicrosoftEntraIDAuthInfoPtrOutput
	ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(context.Context) EasyAuthMicrosoftEntraIDAuthInfoPtrOutput
}

type easyAuthMicrosoftEntraIDAuthInfoPtrType EasyAuthMicrosoftEntraIDAuthInfoArgs

func EasyAuthMicrosoftEntraIDAuthInfoPtr(v *EasyAuthMicrosoftEntraIDAuthInfoArgs) EasyAuthMicrosoftEntraIDAuthInfoPtrInput {
	return (*easyAuthMicrosoftEntraIDAuthInfoPtrType)(v)
}

func (*easyAuthMicrosoftEntraIDAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EasyAuthMicrosoftEntraIDAuthInfo)(nil)).Elem()
}

func (i *easyAuthMicrosoftEntraIDAuthInfoPtrType) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutput() EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return i.ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(context.Background())
}

func (i *easyAuthMicrosoftEntraIDAuthInfoPtrType) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EasyAuthMicrosoftEntraIDAuthInfoPtrOutput)
}

// The authentication info when authType is EasyAuth Microsoft Entra ID
type EasyAuthMicrosoftEntraIDAuthInfoOutput struct{ *pulumi.OutputState }

func (EasyAuthMicrosoftEntraIDAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EasyAuthMicrosoftEntraIDAuthInfo)(nil)).Elem()
}

func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) ToEasyAuthMicrosoftEntraIDAuthInfoOutput() EasyAuthMicrosoftEntraIDAuthInfoOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) ToEasyAuthMicrosoftEntraIDAuthInfoOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutput() EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return o.ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(context.Background())
}

func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EasyAuthMicrosoftEntraIDAuthInfo) *EasyAuthMicrosoftEntraIDAuthInfo {
		return &v
	}).(EasyAuthMicrosoftEntraIDAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'easyAuthMicrosoftEntraID'.
func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// Application clientId for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfo) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Application Secret for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfo) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type EasyAuthMicrosoftEntraIDAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EasyAuthMicrosoftEntraIDAuthInfo)(nil)).Elem()
}

func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutput() EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) ToEasyAuthMicrosoftEntraIDAuthInfoPtrOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoPtrOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) Elem() EasyAuthMicrosoftEntraIDAuthInfoOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) EasyAuthMicrosoftEntraIDAuthInfo {
		if v != nil {
			return *v
		}
		var ret EasyAuthMicrosoftEntraIDAuthInfo
		return ret
	}).(EasyAuthMicrosoftEntraIDAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'easyAuthMicrosoftEntraID'.
func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Application clientId for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Application Secret for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is EasyAuth Microsoft Entra ID
type EasyAuthMicrosoftEntraIDAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'easyAuthMicrosoftEntraID'.
	AuthType string `pulumi:"authType"`
	// Application clientId for EasyAuth Microsoft Entra ID.
	ClientId *string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Application Secret for EasyAuth Microsoft Entra ID.
	Secret *string `pulumi:"secret"`
}

// The authentication info when authType is EasyAuth Microsoft Entra ID
type EasyAuthMicrosoftEntraIDAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EasyAuthMicrosoftEntraIDAuthInfoResponse)(nil)).Elem()
}

func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) ToEasyAuthMicrosoftEntraIDAuthInfoResponseOutput() EasyAuthMicrosoftEntraIDAuthInfoResponseOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) ToEasyAuthMicrosoftEntraIDAuthInfoResponseOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'easyAuthMicrosoftEntraID'.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Application clientId for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfoResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Application Secret for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponseOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EasyAuthMicrosoftEntraIDAuthInfoResponse) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

type EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EasyAuthMicrosoftEntraIDAuthInfoResponse)(nil)).Elem()
}

func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) ToEasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput() EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) ToEasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutputWithContext(ctx context.Context) EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput {
	return o
}

func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) Elem() EasyAuthMicrosoftEntraIDAuthInfoResponseOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) EasyAuthMicrosoftEntraIDAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret EasyAuthMicrosoftEntraIDAuthInfoResponse
		return ret
	}).(EasyAuthMicrosoftEntraIDAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'easyAuthMicrosoftEntraID'.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Application clientId for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Application Secret for EasyAuth Microsoft Entra ID.
func (o EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EasyAuthMicrosoftEntraIDAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Target service's firewall rules. to allow connections from source service.
type FirewallRules struct {
	// Allow Azure services to access the target service if true.
	AzureServices *string `pulumi:"azureServices"`
	// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
	CallerClientIP *string `pulumi:"callerClientIP"`
	// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
	IpRanges []string `pulumi:"ipRanges"`
}

// FirewallRulesInput is an input type that accepts FirewallRulesArgs and FirewallRulesOutput values.
// You can construct a concrete instance of `FirewallRulesInput` via:
//
//	FirewallRulesArgs{...}
type FirewallRulesInput interface {
	pulumi.Input

	ToFirewallRulesOutput() FirewallRulesOutput
	ToFirewallRulesOutputWithContext(context.Context) FirewallRulesOutput
}

// Target service's firewall rules. to allow connections from source service.
type FirewallRulesArgs struct {
	// Allow Azure services to access the target service if true.
	AzureServices pulumi.StringPtrInput `pulumi:"azureServices"`
	// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
	CallerClientIP pulumi.StringPtrInput `pulumi:"callerClientIP"`
	// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
	IpRanges pulumi.StringArrayInput `pulumi:"ipRanges"`
}

func (FirewallRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRules)(nil)).Elem()
}

func (i FirewallRulesArgs) ToFirewallRulesOutput() FirewallRulesOutput {
	return i.ToFirewallRulesOutputWithContext(context.Background())
}

func (i FirewallRulesArgs) ToFirewallRulesOutputWithContext(ctx context.Context) FirewallRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRulesOutput)
}

func (i FirewallRulesArgs) ToFirewallRulesPtrOutput() FirewallRulesPtrOutput {
	return i.ToFirewallRulesPtrOutputWithContext(context.Background())
}

func (i FirewallRulesArgs) ToFirewallRulesPtrOutputWithContext(ctx context.Context) FirewallRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRulesOutput).ToFirewallRulesPtrOutputWithContext(ctx)
}

// FirewallRulesPtrInput is an input type that accepts FirewallRulesArgs, FirewallRulesPtr and FirewallRulesPtrOutput values.
// You can construct a concrete instance of `FirewallRulesPtrInput` via:
//
//	        FirewallRulesArgs{...}
//
//	or:
//
//	        nil
type FirewallRulesPtrInput interface {
	pulumi.Input

	ToFirewallRulesPtrOutput() FirewallRulesPtrOutput
	ToFirewallRulesPtrOutputWithContext(context.Context) FirewallRulesPtrOutput
}

type firewallRulesPtrType FirewallRulesArgs

func FirewallRulesPtr(v *FirewallRulesArgs) FirewallRulesPtrInput {
	return (*firewallRulesPtrType)(v)
}

func (*firewallRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRules)(nil)).Elem()
}

func (i *firewallRulesPtrType) ToFirewallRulesPtrOutput() FirewallRulesPtrOutput {
	return i.ToFirewallRulesPtrOutputWithContext(context.Background())
}

func (i *firewallRulesPtrType) ToFirewallRulesPtrOutputWithContext(ctx context.Context) FirewallRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallRulesPtrOutput)
}

// Target service's firewall rules. to allow connections from source service.
type FirewallRulesOutput struct{ *pulumi.OutputState }

func (FirewallRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRules)(nil)).Elem()
}

func (o FirewallRulesOutput) ToFirewallRulesOutput() FirewallRulesOutput {
	return o
}

func (o FirewallRulesOutput) ToFirewallRulesOutputWithContext(ctx context.Context) FirewallRulesOutput {
	return o
}

func (o FirewallRulesOutput) ToFirewallRulesPtrOutput() FirewallRulesPtrOutput {
	return o.ToFirewallRulesPtrOutputWithContext(context.Background())
}

func (o FirewallRulesOutput) ToFirewallRulesPtrOutputWithContext(ctx context.Context) FirewallRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FirewallRules) *FirewallRules {
		return &v
	}).(FirewallRulesPtrOutput)
}

// Allow Azure services to access the target service if true.
func (o FirewallRulesOutput) AzureServices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRules) *string { return v.AzureServices }).(pulumi.StringPtrOutput)
}

// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
func (o FirewallRulesOutput) CallerClientIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRules) *string { return v.CallerClientIP }).(pulumi.StringPtrOutput)
}

// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
func (o FirewallRulesOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallRules) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

type FirewallRulesPtrOutput struct{ *pulumi.OutputState }

func (FirewallRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRules)(nil)).Elem()
}

func (o FirewallRulesPtrOutput) ToFirewallRulesPtrOutput() FirewallRulesPtrOutput {
	return o
}

func (o FirewallRulesPtrOutput) ToFirewallRulesPtrOutputWithContext(ctx context.Context) FirewallRulesPtrOutput {
	return o
}

func (o FirewallRulesPtrOutput) Elem() FirewallRulesOutput {
	return o.ApplyT(func(v *FirewallRules) FirewallRules {
		if v != nil {
			return *v
		}
		var ret FirewallRules
		return ret
	}).(FirewallRulesOutput)
}

// Allow Azure services to access the target service if true.
func (o FirewallRulesPtrOutput) AzureServices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRules) *string {
		if v == nil {
			return nil
		}
		return v.AzureServices
	}).(pulumi.StringPtrOutput)
}

// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
func (o FirewallRulesPtrOutput) CallerClientIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRules) *string {
		if v == nil {
			return nil
		}
		return v.CallerClientIP
	}).(pulumi.StringPtrOutput)
}

// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
func (o FirewallRulesPtrOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallRules) []string {
		if v == nil {
			return nil
		}
		return v.IpRanges
	}).(pulumi.StringArrayOutput)
}

// Target service's firewall rules. to allow connections from source service.
type FirewallRulesResponse struct {
	// Allow Azure services to access the target service if true.
	AzureServices *string `pulumi:"azureServices"`
	// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
	CallerClientIP *string `pulumi:"callerClientIP"`
	// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
	IpRanges []string `pulumi:"ipRanges"`
}

// Target service's firewall rules. to allow connections from source service.
type FirewallRulesResponseOutput struct{ *pulumi.OutputState }

func (FirewallRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FirewallRulesResponse)(nil)).Elem()
}

func (o FirewallRulesResponseOutput) ToFirewallRulesResponseOutput() FirewallRulesResponseOutput {
	return o
}

func (o FirewallRulesResponseOutput) ToFirewallRulesResponseOutputWithContext(ctx context.Context) FirewallRulesResponseOutput {
	return o
}

// Allow Azure services to access the target service if true.
func (o FirewallRulesResponseOutput) AzureServices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesResponse) *string { return v.AzureServices }).(pulumi.StringPtrOutput)
}

// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
func (o FirewallRulesResponseOutput) CallerClientIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FirewallRulesResponse) *string { return v.CallerClientIP }).(pulumi.StringPtrOutput)
}

// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
func (o FirewallRulesResponseOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FirewallRulesResponse) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

type FirewallRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (FirewallRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallRulesResponse)(nil)).Elem()
}

func (o FirewallRulesResponsePtrOutput) ToFirewallRulesResponsePtrOutput() FirewallRulesResponsePtrOutput {
	return o
}

func (o FirewallRulesResponsePtrOutput) ToFirewallRulesResponsePtrOutputWithContext(ctx context.Context) FirewallRulesResponsePtrOutput {
	return o
}

func (o FirewallRulesResponsePtrOutput) Elem() FirewallRulesResponseOutput {
	return o.ApplyT(func(v *FirewallRulesResponse) FirewallRulesResponse {
		if v != nil {
			return *v
		}
		var ret FirewallRulesResponse
		return ret
	}).(FirewallRulesResponseOutput)
}

// Allow Azure services to access the target service if true.
func (o FirewallRulesResponsePtrOutput) AzureServices() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRulesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureServices
	}).(pulumi.StringPtrOutput)
}

// Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.
func (o FirewallRulesResponsePtrOutput) CallerClientIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallRulesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CallerClientIP
	}).(pulumi.StringPtrOutput)
}

// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.
func (o FirewallRulesResponsePtrOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallRulesResponse) []string {
		if v == nil {
			return nil
		}
		return v.IpRanges
	}).(pulumi.StringArrayOutput)
}

// The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
type KeyVaultSecretReferenceSecretInfo struct {
	// Name of the Key Vault secret.
	Name *string `pulumi:"name"`
	// The secret type.
	// Expected value is 'keyVaultSecretReference'.
	SecretType string `pulumi:"secretType"`
	// Version of the Key Vault secret.
	Version *string `pulumi:"version"`
}

// KeyVaultSecretReferenceSecretInfoInput is an input type that accepts KeyVaultSecretReferenceSecretInfoArgs and KeyVaultSecretReferenceSecretInfoOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceSecretInfoInput` via:
//
//	KeyVaultSecretReferenceSecretInfoArgs{...}
type KeyVaultSecretReferenceSecretInfoInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceSecretInfoOutput() KeyVaultSecretReferenceSecretInfoOutput
	ToKeyVaultSecretReferenceSecretInfoOutputWithContext(context.Context) KeyVaultSecretReferenceSecretInfoOutput
}

// The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
type KeyVaultSecretReferenceSecretInfoArgs struct {
	// Name of the Key Vault secret.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The secret type.
	// Expected value is 'keyVaultSecretReference'.
	SecretType pulumi.StringInput `pulumi:"secretType"`
	// Version of the Key Vault secret.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KeyVaultSecretReferenceSecretInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceSecretInfo)(nil)).Elem()
}

func (i KeyVaultSecretReferenceSecretInfoArgs) ToKeyVaultSecretReferenceSecretInfoOutput() KeyVaultSecretReferenceSecretInfoOutput {
	return i.ToKeyVaultSecretReferenceSecretInfoOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceSecretInfoArgs) ToKeyVaultSecretReferenceSecretInfoOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceSecretInfoOutput)
}

func (i KeyVaultSecretReferenceSecretInfoArgs) ToKeyVaultSecretReferenceSecretInfoPtrOutput() KeyVaultSecretReferenceSecretInfoPtrOutput {
	return i.ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretReferenceSecretInfoArgs) ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceSecretInfoOutput).ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(ctx)
}

// KeyVaultSecretReferenceSecretInfoPtrInput is an input type that accepts KeyVaultSecretReferenceSecretInfoArgs, KeyVaultSecretReferenceSecretInfoPtr and KeyVaultSecretReferenceSecretInfoPtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretReferenceSecretInfoPtrInput` via:
//
//	        KeyVaultSecretReferenceSecretInfoArgs{...}
//
//	or:
//
//	        nil
type KeyVaultSecretReferenceSecretInfoPtrInput interface {
	pulumi.Input

	ToKeyVaultSecretReferenceSecretInfoPtrOutput() KeyVaultSecretReferenceSecretInfoPtrOutput
	ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(context.Context) KeyVaultSecretReferenceSecretInfoPtrOutput
}

type keyVaultSecretReferenceSecretInfoPtrType KeyVaultSecretReferenceSecretInfoArgs

func KeyVaultSecretReferenceSecretInfoPtr(v *KeyVaultSecretReferenceSecretInfoArgs) KeyVaultSecretReferenceSecretInfoPtrInput {
	return (*keyVaultSecretReferenceSecretInfoPtrType)(v)
}

func (*keyVaultSecretReferenceSecretInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceSecretInfo)(nil)).Elem()
}

func (i *keyVaultSecretReferenceSecretInfoPtrType) ToKeyVaultSecretReferenceSecretInfoPtrOutput() KeyVaultSecretReferenceSecretInfoPtrOutput {
	return i.ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretReferenceSecretInfoPtrType) ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretReferenceSecretInfoPtrOutput)
}

// The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
type KeyVaultSecretReferenceSecretInfoOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceSecretInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceSecretInfo)(nil)).Elem()
}

func (o KeyVaultSecretReferenceSecretInfoOutput) ToKeyVaultSecretReferenceSecretInfoOutput() KeyVaultSecretReferenceSecretInfoOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoOutput) ToKeyVaultSecretReferenceSecretInfoOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoOutput) ToKeyVaultSecretReferenceSecretInfoPtrOutput() KeyVaultSecretReferenceSecretInfoPtrOutput {
	return o.ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretReferenceSecretInfoOutput) ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultSecretReferenceSecretInfo) *KeyVaultSecretReferenceSecretInfo {
		return &v
	}).(KeyVaultSecretReferenceSecretInfoPtrOutput)
}

// Name of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretReference'.
func (o KeyVaultSecretReferenceSecretInfoOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfo) string { return v.SecretType }).(pulumi.StringOutput)
}

// Version of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfo) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretReferenceSecretInfoPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceSecretInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceSecretInfo)(nil)).Elem()
}

func (o KeyVaultSecretReferenceSecretInfoPtrOutput) ToKeyVaultSecretReferenceSecretInfoPtrOutput() KeyVaultSecretReferenceSecretInfoPtrOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoPtrOutput) ToKeyVaultSecretReferenceSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoPtrOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoPtrOutput) Elem() KeyVaultSecretReferenceSecretInfoOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfo) KeyVaultSecretReferenceSecretInfo {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretReferenceSecretInfo
		return ret
	}).(KeyVaultSecretReferenceSecretInfoOutput)
}

// Name of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretReference'.
func (o KeyVaultSecretReferenceSecretInfoPtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// Version of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfo) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
type KeyVaultSecretReferenceSecretInfoResponse struct {
	// Name of the Key Vault secret.
	Name *string `pulumi:"name"`
	// The secret type.
	// Expected value is 'keyVaultSecretReference'.
	SecretType string `pulumi:"secretType"`
	// Version of the Key Vault secret.
	Version *string `pulumi:"version"`
}

// The secret info when type is keyVaultSecretReference. It's for scenario that user provides a secret stored in user's keyvault and source is Azure Kubernetes. The key Vault's resource id is linked to secretStore.keyVaultId.
type KeyVaultSecretReferenceSecretInfoResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceSecretInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretReferenceSecretInfoResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceSecretInfoResponseOutput) ToKeyVaultSecretReferenceSecretInfoResponseOutput() KeyVaultSecretReferenceSecretInfoResponseOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoResponseOutput) ToKeyVaultSecretReferenceSecretInfoResponseOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoResponseOutput {
	return o
}

// Name of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretReference'.
func (o KeyVaultSecretReferenceSecretInfoResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfoResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// Version of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretReferenceSecretInfoResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretReferenceSecretInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretReferenceSecretInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretReferenceSecretInfoResponse)(nil)).Elem()
}

func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) ToKeyVaultSecretReferenceSecretInfoResponsePtrOutput() KeyVaultSecretReferenceSecretInfoResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) ToKeyVaultSecretReferenceSecretInfoResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretReferenceSecretInfoResponsePtrOutput {
	return o
}

func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) Elem() KeyVaultSecretReferenceSecretInfoResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfoResponse) KeyVaultSecretReferenceSecretInfoResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretReferenceSecretInfoResponse
		return ret
	}).(KeyVaultSecretReferenceSecretInfoResponseOutput)
}

// Name of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretReference'.
func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// Version of the Key Vault secret.
func (o KeyVaultSecretReferenceSecretInfoResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretReferenceSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
type KeyVaultSecretUriSecretInfo struct {
	// The secret type.
	// Expected value is 'keyVaultSecretUri'.
	SecretType string `pulumi:"secretType"`
	// URI to the keyvault secret
	Value *string `pulumi:"value"`
}

// KeyVaultSecretUriSecretInfoInput is an input type that accepts KeyVaultSecretUriSecretInfoArgs and KeyVaultSecretUriSecretInfoOutput values.
// You can construct a concrete instance of `KeyVaultSecretUriSecretInfoInput` via:
//
//	KeyVaultSecretUriSecretInfoArgs{...}
type KeyVaultSecretUriSecretInfoInput interface {
	pulumi.Input

	ToKeyVaultSecretUriSecretInfoOutput() KeyVaultSecretUriSecretInfoOutput
	ToKeyVaultSecretUriSecretInfoOutputWithContext(context.Context) KeyVaultSecretUriSecretInfoOutput
}

// The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
type KeyVaultSecretUriSecretInfoArgs struct {
	// The secret type.
	// Expected value is 'keyVaultSecretUri'.
	SecretType pulumi.StringInput `pulumi:"secretType"`
	// URI to the keyvault secret
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (KeyVaultSecretUriSecretInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretUriSecretInfo)(nil)).Elem()
}

func (i KeyVaultSecretUriSecretInfoArgs) ToKeyVaultSecretUriSecretInfoOutput() KeyVaultSecretUriSecretInfoOutput {
	return i.ToKeyVaultSecretUriSecretInfoOutputWithContext(context.Background())
}

func (i KeyVaultSecretUriSecretInfoArgs) ToKeyVaultSecretUriSecretInfoOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretUriSecretInfoOutput)
}

func (i KeyVaultSecretUriSecretInfoArgs) ToKeyVaultSecretUriSecretInfoPtrOutput() KeyVaultSecretUriSecretInfoPtrOutput {
	return i.ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(context.Background())
}

func (i KeyVaultSecretUriSecretInfoArgs) ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretUriSecretInfoOutput).ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(ctx)
}

// KeyVaultSecretUriSecretInfoPtrInput is an input type that accepts KeyVaultSecretUriSecretInfoArgs, KeyVaultSecretUriSecretInfoPtr and KeyVaultSecretUriSecretInfoPtrOutput values.
// You can construct a concrete instance of `KeyVaultSecretUriSecretInfoPtrInput` via:
//
//	        KeyVaultSecretUriSecretInfoArgs{...}
//
//	or:
//
//	        nil
type KeyVaultSecretUriSecretInfoPtrInput interface {
	pulumi.Input

	ToKeyVaultSecretUriSecretInfoPtrOutput() KeyVaultSecretUriSecretInfoPtrOutput
	ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(context.Context) KeyVaultSecretUriSecretInfoPtrOutput
}

type keyVaultSecretUriSecretInfoPtrType KeyVaultSecretUriSecretInfoArgs

func KeyVaultSecretUriSecretInfoPtr(v *KeyVaultSecretUriSecretInfoArgs) KeyVaultSecretUriSecretInfoPtrInput {
	return (*keyVaultSecretUriSecretInfoPtrType)(v)
}

func (*keyVaultSecretUriSecretInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretUriSecretInfo)(nil)).Elem()
}

func (i *keyVaultSecretUriSecretInfoPtrType) ToKeyVaultSecretUriSecretInfoPtrOutput() KeyVaultSecretUriSecretInfoPtrOutput {
	return i.ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(context.Background())
}

func (i *keyVaultSecretUriSecretInfoPtrType) ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultSecretUriSecretInfoPtrOutput)
}

// The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
type KeyVaultSecretUriSecretInfoOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretUriSecretInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretUriSecretInfo)(nil)).Elem()
}

func (o KeyVaultSecretUriSecretInfoOutput) ToKeyVaultSecretUriSecretInfoOutput() KeyVaultSecretUriSecretInfoOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoOutput) ToKeyVaultSecretUriSecretInfoOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoOutput) ToKeyVaultSecretUriSecretInfoPtrOutput() KeyVaultSecretUriSecretInfoPtrOutput {
	return o.ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(context.Background())
}

func (o KeyVaultSecretUriSecretInfoOutput) ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultSecretUriSecretInfo) *KeyVaultSecretUriSecretInfo {
		return &v
	}).(KeyVaultSecretUriSecretInfoPtrOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretUri'.
func (o KeyVaultSecretUriSecretInfoOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretUriSecretInfo) string { return v.SecretType }).(pulumi.StringOutput)
}

// URI to the keyvault secret
func (o KeyVaultSecretUriSecretInfoOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretUriSecretInfo) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretUriSecretInfoPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretUriSecretInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretUriSecretInfo)(nil)).Elem()
}

func (o KeyVaultSecretUriSecretInfoPtrOutput) ToKeyVaultSecretUriSecretInfoPtrOutput() KeyVaultSecretUriSecretInfoPtrOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoPtrOutput) ToKeyVaultSecretUriSecretInfoPtrOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoPtrOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoPtrOutput) Elem() KeyVaultSecretUriSecretInfoOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfo) KeyVaultSecretUriSecretInfo {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretUriSecretInfo
		return ret
	}).(KeyVaultSecretUriSecretInfoOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretUri'.
func (o KeyVaultSecretUriSecretInfoPtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// URI to the keyvault secret
func (o KeyVaultSecretUriSecretInfoPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfo) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
type KeyVaultSecretUriSecretInfoResponse struct {
	// The secret type.
	// Expected value is 'keyVaultSecretUri'.
	SecretType string `pulumi:"secretType"`
	// URI to the keyvault secret
	Value *string `pulumi:"value"`
}

// The secret info when type is keyVaultSecretUri. It's for scenario that user provides a secret stored in user's keyvault and source is Web App, Spring Cloud or Container App.
type KeyVaultSecretUriSecretInfoResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretUriSecretInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultSecretUriSecretInfoResponse)(nil)).Elem()
}

func (o KeyVaultSecretUriSecretInfoResponseOutput) ToKeyVaultSecretUriSecretInfoResponseOutput() KeyVaultSecretUriSecretInfoResponseOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoResponseOutput) ToKeyVaultSecretUriSecretInfoResponseOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoResponseOutput {
	return o
}

// The secret type.
// Expected value is 'keyVaultSecretUri'.
func (o KeyVaultSecretUriSecretInfoResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultSecretUriSecretInfoResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// URI to the keyvault secret
func (o KeyVaultSecretUriSecretInfoResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultSecretUriSecretInfoResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type KeyVaultSecretUriSecretInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultSecretUriSecretInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultSecretUriSecretInfoResponse)(nil)).Elem()
}

func (o KeyVaultSecretUriSecretInfoResponsePtrOutput) ToKeyVaultSecretUriSecretInfoResponsePtrOutput() KeyVaultSecretUriSecretInfoResponsePtrOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoResponsePtrOutput) ToKeyVaultSecretUriSecretInfoResponsePtrOutputWithContext(ctx context.Context) KeyVaultSecretUriSecretInfoResponsePtrOutput {
	return o
}

func (o KeyVaultSecretUriSecretInfoResponsePtrOutput) Elem() KeyVaultSecretUriSecretInfoResponseOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfoResponse) KeyVaultSecretUriSecretInfoResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultSecretUriSecretInfoResponse
		return ret
	}).(KeyVaultSecretUriSecretInfoResponseOutput)
}

// The secret type.
// Expected value is 'keyVaultSecretUri'.
func (o KeyVaultSecretUriSecretInfoResponsePtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// URI to the keyvault secret
func (o KeyVaultSecretUriSecretInfoResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultSecretUriSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The represent of missing permissions
type PermissionsMissingDryrunPrerequisiteResultResponse struct {
	// The permission list
	Permissions []string `pulumi:"permissions"`
	// The recommended role to resolve permissions missing
	RecommendedRole *string `pulumi:"recommendedRole"`
	// The permission scope
	Scope *string `pulumi:"scope"`
	// The type of dryrun result.
	// Expected value is 'permissionsMissing'.
	Type string `pulumi:"type"`
}

// The represent of missing permissions
type PermissionsMissingDryrunPrerequisiteResultResponseOutput struct{ *pulumi.OutputState }

func (PermissionsMissingDryrunPrerequisiteResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsMissingDryrunPrerequisiteResultResponse)(nil)).Elem()
}

func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) ToPermissionsMissingDryrunPrerequisiteResultResponseOutput() PermissionsMissingDryrunPrerequisiteResultResponseOutput {
	return o
}

func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) ToPermissionsMissingDryrunPrerequisiteResultResponseOutputWithContext(ctx context.Context) PermissionsMissingDryrunPrerequisiteResultResponseOutput {
	return o
}

// The permission list
func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PermissionsMissingDryrunPrerequisiteResultResponse) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// The recommended role to resolve permissions missing
func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) RecommendedRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsMissingDryrunPrerequisiteResultResponse) *string { return v.RecommendedRole }).(pulumi.StringPtrOutput)
}

// The permission scope
func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsMissingDryrunPrerequisiteResultResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The type of dryrun result.
// Expected value is 'permissionsMissing'.
func (o PermissionsMissingDryrunPrerequisiteResultResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionsMissingDryrunPrerequisiteResultResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates public network solution, include firewall rules
type PublicNetworkSolution struct {
	// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
	Action *string `pulumi:"action"`
	// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Describe firewall rules of target service to make sure source application could connect to the target.
	FirewallRules *FirewallRules `pulumi:"firewallRules"`
}

// PublicNetworkSolutionInput is an input type that accepts PublicNetworkSolutionArgs and PublicNetworkSolutionOutput values.
// You can construct a concrete instance of `PublicNetworkSolutionInput` via:
//
//	PublicNetworkSolutionArgs{...}
type PublicNetworkSolutionInput interface {
	pulumi.Input

	ToPublicNetworkSolutionOutput() PublicNetworkSolutionOutput
	ToPublicNetworkSolutionOutputWithContext(context.Context) PublicNetworkSolutionOutput
}

// Indicates public network solution, include firewall rules
type PublicNetworkSolutionArgs struct {
	// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Describe firewall rules of target service to make sure source application could connect to the target.
	FirewallRules FirewallRulesPtrInput `pulumi:"firewallRules"`
}

func (PublicNetworkSolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkSolution)(nil)).Elem()
}

func (i PublicNetworkSolutionArgs) ToPublicNetworkSolutionOutput() PublicNetworkSolutionOutput {
	return i.ToPublicNetworkSolutionOutputWithContext(context.Background())
}

func (i PublicNetworkSolutionArgs) ToPublicNetworkSolutionOutputWithContext(ctx context.Context) PublicNetworkSolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkSolutionOutput)
}

func (i PublicNetworkSolutionArgs) ToPublicNetworkSolutionPtrOutput() PublicNetworkSolutionPtrOutput {
	return i.ToPublicNetworkSolutionPtrOutputWithContext(context.Background())
}

func (i PublicNetworkSolutionArgs) ToPublicNetworkSolutionPtrOutputWithContext(ctx context.Context) PublicNetworkSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkSolutionOutput).ToPublicNetworkSolutionPtrOutputWithContext(ctx)
}

// PublicNetworkSolutionPtrInput is an input type that accepts PublicNetworkSolutionArgs, PublicNetworkSolutionPtr and PublicNetworkSolutionPtrOutput values.
// You can construct a concrete instance of `PublicNetworkSolutionPtrInput` via:
//
//	        PublicNetworkSolutionArgs{...}
//
//	or:
//
//	        nil
type PublicNetworkSolutionPtrInput interface {
	pulumi.Input

	ToPublicNetworkSolutionPtrOutput() PublicNetworkSolutionPtrOutput
	ToPublicNetworkSolutionPtrOutputWithContext(context.Context) PublicNetworkSolutionPtrOutput
}

type publicNetworkSolutionPtrType PublicNetworkSolutionArgs

func PublicNetworkSolutionPtr(v *PublicNetworkSolutionArgs) PublicNetworkSolutionPtrInput {
	return (*publicNetworkSolutionPtrType)(v)
}

func (*publicNetworkSolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkSolution)(nil)).Elem()
}

func (i *publicNetworkSolutionPtrType) ToPublicNetworkSolutionPtrOutput() PublicNetworkSolutionPtrOutput {
	return i.ToPublicNetworkSolutionPtrOutputWithContext(context.Background())
}

func (i *publicNetworkSolutionPtrType) ToPublicNetworkSolutionPtrOutputWithContext(ctx context.Context) PublicNetworkSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicNetworkSolutionPtrOutput)
}

// Indicates public network solution, include firewall rules
type PublicNetworkSolutionOutput struct{ *pulumi.OutputState }

func (PublicNetworkSolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkSolution)(nil)).Elem()
}

func (o PublicNetworkSolutionOutput) ToPublicNetworkSolutionOutput() PublicNetworkSolutionOutput {
	return o
}

func (o PublicNetworkSolutionOutput) ToPublicNetworkSolutionOutputWithContext(ctx context.Context) PublicNetworkSolutionOutput {
	return o
}

func (o PublicNetworkSolutionOutput) ToPublicNetworkSolutionPtrOutput() PublicNetworkSolutionPtrOutput {
	return o.ToPublicNetworkSolutionPtrOutputWithContext(context.Background())
}

func (o PublicNetworkSolutionOutput) ToPublicNetworkSolutionPtrOutputWithContext(ctx context.Context) PublicNetworkSolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PublicNetworkSolution) *PublicNetworkSolution {
		return &v
	}).(PublicNetworkSolutionPtrOutput)
}

// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
func (o PublicNetworkSolutionOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicNetworkSolution) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
func (o PublicNetworkSolutionOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicNetworkSolution) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Describe firewall rules of target service to make sure source application could connect to the target.
func (o PublicNetworkSolutionOutput) FirewallRules() FirewallRulesPtrOutput {
	return o.ApplyT(func(v PublicNetworkSolution) *FirewallRules { return v.FirewallRules }).(FirewallRulesPtrOutput)
}

type PublicNetworkSolutionPtrOutput struct{ *pulumi.OutputState }

func (PublicNetworkSolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkSolution)(nil)).Elem()
}

func (o PublicNetworkSolutionPtrOutput) ToPublicNetworkSolutionPtrOutput() PublicNetworkSolutionPtrOutput {
	return o
}

func (o PublicNetworkSolutionPtrOutput) ToPublicNetworkSolutionPtrOutputWithContext(ctx context.Context) PublicNetworkSolutionPtrOutput {
	return o
}

func (o PublicNetworkSolutionPtrOutput) Elem() PublicNetworkSolutionOutput {
	return o.ApplyT(func(v *PublicNetworkSolution) PublicNetworkSolution {
		if v != nil {
			return *v
		}
		var ret PublicNetworkSolution
		return ret
	}).(PublicNetworkSolutionOutput)
}

// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
func (o PublicNetworkSolutionPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolution) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
func (o PublicNetworkSolutionPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolution) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Describe firewall rules of target service to make sure source application could connect to the target.
func (o PublicNetworkSolutionPtrOutput) FirewallRules() FirewallRulesPtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolution) *FirewallRules {
		if v == nil {
			return nil
		}
		return v.FirewallRules
	}).(FirewallRulesPtrOutput)
}

// Indicates public network solution, include firewall rules
type PublicNetworkSolutionResponse struct {
	// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
	Action *string `pulumi:"action"`
	// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Describe firewall rules of target service to make sure source application could connect to the target.
	FirewallRules *FirewallRulesResponse `pulumi:"firewallRules"`
}

// Indicates public network solution, include firewall rules
type PublicNetworkSolutionResponseOutput struct{ *pulumi.OutputState }

func (PublicNetworkSolutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PublicNetworkSolutionResponse)(nil)).Elem()
}

func (o PublicNetworkSolutionResponseOutput) ToPublicNetworkSolutionResponseOutput() PublicNetworkSolutionResponseOutput {
	return o
}

func (o PublicNetworkSolutionResponseOutput) ToPublicNetworkSolutionResponseOutputWithContext(ctx context.Context) PublicNetworkSolutionResponseOutput {
	return o
}

// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
func (o PublicNetworkSolutionResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicNetworkSolutionResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
func (o PublicNetworkSolutionResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PublicNetworkSolutionResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Describe firewall rules of target service to make sure source application could connect to the target.
func (o PublicNetworkSolutionResponseOutput) FirewallRules() FirewallRulesResponsePtrOutput {
	return o.ApplyT(func(v PublicNetworkSolutionResponse) *FirewallRulesResponse { return v.FirewallRules }).(FirewallRulesResponsePtrOutput)
}

type PublicNetworkSolutionResponsePtrOutput struct{ *pulumi.OutputState }

func (PublicNetworkSolutionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicNetworkSolutionResponse)(nil)).Elem()
}

func (o PublicNetworkSolutionResponsePtrOutput) ToPublicNetworkSolutionResponsePtrOutput() PublicNetworkSolutionResponsePtrOutput {
	return o
}

func (o PublicNetworkSolutionResponsePtrOutput) ToPublicNetworkSolutionResponsePtrOutputWithContext(ctx context.Context) PublicNetworkSolutionResponsePtrOutput {
	return o
}

func (o PublicNetworkSolutionResponsePtrOutput) Elem() PublicNetworkSolutionResponseOutput {
	return o.ApplyT(func(v *PublicNetworkSolutionResponse) PublicNetworkSolutionResponse {
		if v != nil {
			return *v
		}
		var ret PublicNetworkSolutionResponse
		return ret
	}).(PublicNetworkSolutionResponseOutput)
}

// Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.
func (o PublicNetworkSolutionResponsePtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolutionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
func (o PublicNetworkSolutionResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolutionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Describe firewall rules of target service to make sure source application could connect to the target.
func (o PublicNetworkSolutionResponsePtrOutput) FirewallRules() FirewallRulesResponsePtrOutput {
	return o.ApplyT(func(v *PublicNetworkSolutionResponse) *FirewallRulesResponse {
		if v == nil {
			return nil
		}
		return v.FirewallRules
	}).(FirewallRulesResponsePtrOutput)
}

// The authentication info when authType is secret
type SecretAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'secret'.
	AuthType string `pulumi:"authType"`
	// Username or account name for secret auth.
	Name *string `pulumi:"name"`
	// Password or key vault secret for secret auth.
	SecretInfo interface{} `pulumi:"secretInfo"`
}

// SecretAuthInfoInput is an input type that accepts SecretAuthInfoArgs and SecretAuthInfoOutput values.
// You can construct a concrete instance of `SecretAuthInfoInput` via:
//
//	SecretAuthInfoArgs{...}
type SecretAuthInfoInput interface {
	pulumi.Input

	ToSecretAuthInfoOutput() SecretAuthInfoOutput
	ToSecretAuthInfoOutputWithContext(context.Context) SecretAuthInfoOutput
}

// The authentication info when authType is secret
type SecretAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'secret'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Username or account name for secret auth.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Password or key vault secret for secret auth.
	SecretInfo pulumi.Input `pulumi:"secretInfo"`
}

func (SecretAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretAuthInfo)(nil)).Elem()
}

func (i SecretAuthInfoArgs) ToSecretAuthInfoOutput() SecretAuthInfoOutput {
	return i.ToSecretAuthInfoOutputWithContext(context.Background())
}

func (i SecretAuthInfoArgs) ToSecretAuthInfoOutputWithContext(ctx context.Context) SecretAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAuthInfoOutput)
}

func (i SecretAuthInfoArgs) ToSecretAuthInfoPtrOutput() SecretAuthInfoPtrOutput {
	return i.ToSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (i SecretAuthInfoArgs) ToSecretAuthInfoPtrOutputWithContext(ctx context.Context) SecretAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAuthInfoOutput).ToSecretAuthInfoPtrOutputWithContext(ctx)
}

// SecretAuthInfoPtrInput is an input type that accepts SecretAuthInfoArgs, SecretAuthInfoPtr and SecretAuthInfoPtrOutput values.
// You can construct a concrete instance of `SecretAuthInfoPtrInput` via:
//
//	        SecretAuthInfoArgs{...}
//
//	or:
//
//	        nil
type SecretAuthInfoPtrInput interface {
	pulumi.Input

	ToSecretAuthInfoPtrOutput() SecretAuthInfoPtrOutput
	ToSecretAuthInfoPtrOutputWithContext(context.Context) SecretAuthInfoPtrOutput
}

type secretAuthInfoPtrType SecretAuthInfoArgs

func SecretAuthInfoPtr(v *SecretAuthInfoArgs) SecretAuthInfoPtrInput {
	return (*secretAuthInfoPtrType)(v)
}

func (*secretAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretAuthInfo)(nil)).Elem()
}

func (i *secretAuthInfoPtrType) ToSecretAuthInfoPtrOutput() SecretAuthInfoPtrOutput {
	return i.ToSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (i *secretAuthInfoPtrType) ToSecretAuthInfoPtrOutputWithContext(ctx context.Context) SecretAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretAuthInfoPtrOutput)
}

// The authentication info when authType is secret
type SecretAuthInfoOutput struct{ *pulumi.OutputState }

func (SecretAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretAuthInfo)(nil)).Elem()
}

func (o SecretAuthInfoOutput) ToSecretAuthInfoOutput() SecretAuthInfoOutput {
	return o
}

func (o SecretAuthInfoOutput) ToSecretAuthInfoOutputWithContext(ctx context.Context) SecretAuthInfoOutput {
	return o
}

func (o SecretAuthInfoOutput) ToSecretAuthInfoPtrOutput() SecretAuthInfoPtrOutput {
	return o.ToSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (o SecretAuthInfoOutput) ToSecretAuthInfoPtrOutputWithContext(ctx context.Context) SecretAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretAuthInfo) *SecretAuthInfo {
		return &v
	}).(SecretAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SecretAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'secret'.
func (o SecretAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SecretAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// Username or account name for secret auth.
func (o SecretAuthInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretAuthInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Password or key vault secret for secret auth.
func (o SecretAuthInfoOutput) SecretInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SecretAuthInfo) interface{} { return v.SecretInfo }).(pulumi.AnyOutput)
}

type SecretAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (SecretAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretAuthInfo)(nil)).Elem()
}

func (o SecretAuthInfoPtrOutput) ToSecretAuthInfoPtrOutput() SecretAuthInfoPtrOutput {
	return o
}

func (o SecretAuthInfoPtrOutput) ToSecretAuthInfoPtrOutputWithContext(ctx context.Context) SecretAuthInfoPtrOutput {
	return o
}

func (o SecretAuthInfoPtrOutput) Elem() SecretAuthInfoOutput {
	return o.ApplyT(func(v *SecretAuthInfo) SecretAuthInfo {
		if v != nil {
			return *v
		}
		var ret SecretAuthInfo
		return ret
	}).(SecretAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SecretAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'secret'.
func (o SecretAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Username or account name for secret auth.
func (o SecretAuthInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Password or key vault secret for secret auth.
func (o SecretAuthInfoPtrOutput) SecretInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *SecretAuthInfo) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretInfo
	}).(pulumi.AnyOutput)
}

// The authentication info when authType is secret
type SecretAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'secret'.
	AuthType string `pulumi:"authType"`
	// Username or account name for secret auth.
	Name *string `pulumi:"name"`
	// Password or key vault secret for secret auth.
	SecretInfo interface{} `pulumi:"secretInfo"`
}

// The authentication info when authType is secret
type SecretAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (SecretAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretAuthInfoResponse)(nil)).Elem()
}

func (o SecretAuthInfoResponseOutput) ToSecretAuthInfoResponseOutput() SecretAuthInfoResponseOutput {
	return o
}

func (o SecretAuthInfoResponseOutput) ToSecretAuthInfoResponseOutputWithContext(ctx context.Context) SecretAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SecretAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'secret'.
func (o SecretAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SecretAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Username or account name for secret auth.
func (o SecretAuthInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretAuthInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Password or key vault secret for secret auth.
func (o SecretAuthInfoResponseOutput) SecretInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v SecretAuthInfoResponse) interface{} { return v.SecretInfo }).(pulumi.AnyOutput)
}

type SecretAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretAuthInfoResponse)(nil)).Elem()
}

func (o SecretAuthInfoResponsePtrOutput) ToSecretAuthInfoResponsePtrOutput() SecretAuthInfoResponsePtrOutput {
	return o
}

func (o SecretAuthInfoResponsePtrOutput) ToSecretAuthInfoResponsePtrOutputWithContext(ctx context.Context) SecretAuthInfoResponsePtrOutput {
	return o
}

func (o SecretAuthInfoResponsePtrOutput) Elem() SecretAuthInfoResponseOutput {
	return o.ApplyT(func(v *SecretAuthInfoResponse) SecretAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret SecretAuthInfoResponse
		return ret
	}).(SecretAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SecretAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'secret'.
func (o SecretAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Username or account name for secret auth.
func (o SecretAuthInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Password or key vault secret for secret auth.
func (o SecretAuthInfoResponsePtrOutput) SecretInfo() pulumi.AnyOutput {
	return o.ApplyT(func(v *SecretAuthInfoResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SecretInfo
	}).(pulumi.AnyOutput)
}

// An option to store secret value in secure place
type SecretStore struct {
	// The key vault id to store secret
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The key vault secret name to store secret, only valid when storing one secret
	KeyVaultSecretName *string `pulumi:"keyVaultSecretName"`
}

// SecretStoreInput is an input type that accepts SecretStoreArgs and SecretStoreOutput values.
// You can construct a concrete instance of `SecretStoreInput` via:
//
//	SecretStoreArgs{...}
type SecretStoreInput interface {
	pulumi.Input

	ToSecretStoreOutput() SecretStoreOutput
	ToSecretStoreOutputWithContext(context.Context) SecretStoreOutput
}

// An option to store secret value in secure place
type SecretStoreArgs struct {
	// The key vault id to store secret
	KeyVaultId pulumi.StringPtrInput `pulumi:"keyVaultId"`
	// The key vault secret name to store secret, only valid when storing one secret
	KeyVaultSecretName pulumi.StringPtrInput `pulumi:"keyVaultSecretName"`
}

func (SecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStore)(nil)).Elem()
}

func (i SecretStoreArgs) ToSecretStoreOutput() SecretStoreOutput {
	return i.ToSecretStoreOutputWithContext(context.Background())
}

func (i SecretStoreArgs) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreOutput)
}

func (i SecretStoreArgs) ToSecretStorePtrOutput() SecretStorePtrOutput {
	return i.ToSecretStorePtrOutputWithContext(context.Background())
}

func (i SecretStoreArgs) ToSecretStorePtrOutputWithContext(ctx context.Context) SecretStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreOutput).ToSecretStorePtrOutputWithContext(ctx)
}

// SecretStorePtrInput is an input type that accepts SecretStoreArgs, SecretStorePtr and SecretStorePtrOutput values.
// You can construct a concrete instance of `SecretStorePtrInput` via:
//
//	        SecretStoreArgs{...}
//
//	or:
//
//	        nil
type SecretStorePtrInput interface {
	pulumi.Input

	ToSecretStorePtrOutput() SecretStorePtrOutput
	ToSecretStorePtrOutputWithContext(context.Context) SecretStorePtrOutput
}

type secretStorePtrType SecretStoreArgs

func SecretStorePtr(v *SecretStoreArgs) SecretStorePtrInput {
	return (*secretStorePtrType)(v)
}

func (*secretStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (i *secretStorePtrType) ToSecretStorePtrOutput() SecretStorePtrOutput {
	return i.ToSecretStorePtrOutputWithContext(context.Background())
}

func (i *secretStorePtrType) ToSecretStorePtrOutputWithContext(ctx context.Context) SecretStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStorePtrOutput)
}

// An option to store secret value in secure place
type SecretStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStore)(nil)).Elem()
}

func (o SecretStoreOutput) ToSecretStoreOutput() SecretStoreOutput {
	return o
}

func (o SecretStoreOutput) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return o
}

func (o SecretStoreOutput) ToSecretStorePtrOutput() SecretStorePtrOutput {
	return o.ToSecretStorePtrOutputWithContext(context.Background())
}

func (o SecretStoreOutput) ToSecretStorePtrOutputWithContext(ctx context.Context) SecretStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretStore) *SecretStore {
		return &v
	}).(SecretStorePtrOutput)
}

// The key vault id to store secret
func (o SecretStoreOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStore) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The key vault secret name to store secret, only valid when storing one secret
func (o SecretStoreOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStore) *string { return v.KeyVaultSecretName }).(pulumi.StringPtrOutput)
}

type SecretStorePtrOutput struct{ *pulumi.OutputState }

func (SecretStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (o SecretStorePtrOutput) ToSecretStorePtrOutput() SecretStorePtrOutput {
	return o
}

func (o SecretStorePtrOutput) ToSecretStorePtrOutputWithContext(ctx context.Context) SecretStorePtrOutput {
	return o
}

func (o SecretStorePtrOutput) Elem() SecretStoreOutput {
	return o.ApplyT(func(v *SecretStore) SecretStore {
		if v != nil {
			return *v
		}
		var ret SecretStore
		return ret
	}).(SecretStoreOutput)
}

// The key vault id to store secret
func (o SecretStorePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStore) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The key vault secret name to store secret, only valid when storing one secret
func (o SecretStorePtrOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStore) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultSecretName
	}).(pulumi.StringPtrOutput)
}

// An option to store secret value in secure place
type SecretStoreResponse struct {
	// The key vault id to store secret
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The key vault secret name to store secret, only valid when storing one secret
	KeyVaultSecretName *string `pulumi:"keyVaultSecretName"`
}

// An option to store secret value in secure place
type SecretStoreResponseOutput struct{ *pulumi.OutputState }

func (SecretStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretStoreResponse)(nil)).Elem()
}

func (o SecretStoreResponseOutput) ToSecretStoreResponseOutput() SecretStoreResponseOutput {
	return o
}

func (o SecretStoreResponseOutput) ToSecretStoreResponseOutputWithContext(ctx context.Context) SecretStoreResponseOutput {
	return o
}

// The key vault id to store secret
func (o SecretStoreResponseOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreResponse) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

// The key vault secret name to store secret, only valid when storing one secret
func (o SecretStoreResponseOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretStoreResponse) *string { return v.KeyVaultSecretName }).(pulumi.StringPtrOutput)
}

type SecretStoreResponsePtrOutput struct{ *pulumi.OutputState }

func (SecretStoreResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStoreResponse)(nil)).Elem()
}

func (o SecretStoreResponsePtrOutput) ToSecretStoreResponsePtrOutput() SecretStoreResponsePtrOutput {
	return o
}

func (o SecretStoreResponsePtrOutput) ToSecretStoreResponsePtrOutputWithContext(ctx context.Context) SecretStoreResponsePtrOutput {
	return o
}

func (o SecretStoreResponsePtrOutput) Elem() SecretStoreResponseOutput {
	return o.ApplyT(func(v *SecretStoreResponse) SecretStoreResponse {
		if v != nil {
			return *v
		}
		var ret SecretStoreResponse
		return ret
	}).(SecretStoreResponseOutput)
}

// The key vault id to store secret
func (o SecretStoreResponsePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The key vault secret name to store secret, only valid when storing one secret
func (o SecretStoreResponsePtrOutput) KeyVaultSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStoreResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultSecretName
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is SelfHostedServer
type SelfHostedServer struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'SelfHostedServer'.
	Type string `pulumi:"type"`
}

// SelfHostedServerInput is an input type that accepts SelfHostedServerArgs and SelfHostedServerOutput values.
// You can construct a concrete instance of `SelfHostedServerInput` via:
//
//	SelfHostedServerArgs{...}
type SelfHostedServerInput interface {
	pulumi.Input

	ToSelfHostedServerOutput() SelfHostedServerOutput
	ToSelfHostedServerOutputWithContext(context.Context) SelfHostedServerOutput
}

// The service properties when target service type is SelfHostedServer
type SelfHostedServerArgs struct {
	// The endpoint of service.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'SelfHostedServer'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SelfHostedServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedServer)(nil)).Elem()
}

func (i SelfHostedServerArgs) ToSelfHostedServerOutput() SelfHostedServerOutput {
	return i.ToSelfHostedServerOutputWithContext(context.Background())
}

func (i SelfHostedServerArgs) ToSelfHostedServerOutputWithContext(ctx context.Context) SelfHostedServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedServerOutput)
}

func (i SelfHostedServerArgs) ToSelfHostedServerPtrOutput() SelfHostedServerPtrOutput {
	return i.ToSelfHostedServerPtrOutputWithContext(context.Background())
}

func (i SelfHostedServerArgs) ToSelfHostedServerPtrOutputWithContext(ctx context.Context) SelfHostedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedServerOutput).ToSelfHostedServerPtrOutputWithContext(ctx)
}

// SelfHostedServerPtrInput is an input type that accepts SelfHostedServerArgs, SelfHostedServerPtr and SelfHostedServerPtrOutput values.
// You can construct a concrete instance of `SelfHostedServerPtrInput` via:
//
//	        SelfHostedServerArgs{...}
//
//	or:
//
//	        nil
type SelfHostedServerPtrInput interface {
	pulumi.Input

	ToSelfHostedServerPtrOutput() SelfHostedServerPtrOutput
	ToSelfHostedServerPtrOutputWithContext(context.Context) SelfHostedServerPtrOutput
}

type selfHostedServerPtrType SelfHostedServerArgs

func SelfHostedServerPtr(v *SelfHostedServerArgs) SelfHostedServerPtrInput {
	return (*selfHostedServerPtrType)(v)
}

func (*selfHostedServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfHostedServer)(nil)).Elem()
}

func (i *selfHostedServerPtrType) ToSelfHostedServerPtrOutput() SelfHostedServerPtrOutput {
	return i.ToSelfHostedServerPtrOutputWithContext(context.Background())
}

func (i *selfHostedServerPtrType) ToSelfHostedServerPtrOutputWithContext(ctx context.Context) SelfHostedServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfHostedServerPtrOutput)
}

// The service properties when target service type is SelfHostedServer
type SelfHostedServerOutput struct{ *pulumi.OutputState }

func (SelfHostedServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedServer)(nil)).Elem()
}

func (o SelfHostedServerOutput) ToSelfHostedServerOutput() SelfHostedServerOutput {
	return o
}

func (o SelfHostedServerOutput) ToSelfHostedServerOutputWithContext(ctx context.Context) SelfHostedServerOutput {
	return o
}

func (o SelfHostedServerOutput) ToSelfHostedServerPtrOutput() SelfHostedServerPtrOutput {
	return o.ToSelfHostedServerPtrOutputWithContext(context.Background())
}

func (o SelfHostedServerOutput) ToSelfHostedServerPtrOutputWithContext(ctx context.Context) SelfHostedServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfHostedServer) *SelfHostedServer {
		return &v
	}).(SelfHostedServerPtrOutput)
}

// The endpoint of service.
func (o SelfHostedServerOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedServer) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'SelfHostedServer'.
func (o SelfHostedServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedServer) string { return v.Type }).(pulumi.StringOutput)
}

type SelfHostedServerPtrOutput struct{ *pulumi.OutputState }

func (SelfHostedServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfHostedServer)(nil)).Elem()
}

func (o SelfHostedServerPtrOutput) ToSelfHostedServerPtrOutput() SelfHostedServerPtrOutput {
	return o
}

func (o SelfHostedServerPtrOutput) ToSelfHostedServerPtrOutputWithContext(ctx context.Context) SelfHostedServerPtrOutput {
	return o
}

func (o SelfHostedServerPtrOutput) Elem() SelfHostedServerOutput {
	return o.ApplyT(func(v *SelfHostedServer) SelfHostedServer {
		if v != nil {
			return *v
		}
		var ret SelfHostedServer
		return ret
	}).(SelfHostedServerOutput)
}

// The endpoint of service.
func (o SelfHostedServerPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfHostedServer) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'SelfHostedServer'.
func (o SelfHostedServerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfHostedServer) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The service properties when target service type is SelfHostedServer
type SelfHostedServerResponse struct {
	// The endpoint of service.
	Endpoint *string `pulumi:"endpoint"`
	// The target service type.
	// Expected value is 'SelfHostedServer'.
	Type string `pulumi:"type"`
}

// The service properties when target service type is SelfHostedServer
type SelfHostedServerResponseOutput struct{ *pulumi.OutputState }

func (SelfHostedServerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfHostedServerResponse)(nil)).Elem()
}

func (o SelfHostedServerResponseOutput) ToSelfHostedServerResponseOutput() SelfHostedServerResponseOutput {
	return o
}

func (o SelfHostedServerResponseOutput) ToSelfHostedServerResponseOutputWithContext(ctx context.Context) SelfHostedServerResponseOutput {
	return o
}

// The endpoint of service.
func (o SelfHostedServerResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfHostedServerResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'SelfHostedServer'.
func (o SelfHostedServerResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SelfHostedServerResponse) string { return v.Type }).(pulumi.StringOutput)
}

type SelfHostedServerResponsePtrOutput struct{ *pulumi.OutputState }

func (SelfHostedServerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfHostedServerResponse)(nil)).Elem()
}

func (o SelfHostedServerResponsePtrOutput) ToSelfHostedServerResponsePtrOutput() SelfHostedServerResponsePtrOutput {
	return o
}

func (o SelfHostedServerResponsePtrOutput) ToSelfHostedServerResponsePtrOutputWithContext(ctx context.Context) SelfHostedServerResponsePtrOutput {
	return o
}

func (o SelfHostedServerResponsePtrOutput) Elem() SelfHostedServerResponseOutput {
	return o.ApplyT(func(v *SelfHostedServerResponse) SelfHostedServerResponse {
		if v != nil {
			return *v
		}
		var ret SelfHostedServerResponse
		return ret
	}).(SelfHostedServerResponseOutput)
}

// The endpoint of service.
func (o SelfHostedServerResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfHostedServerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The target service type.
// Expected value is 'SelfHostedServer'.
func (o SelfHostedServerResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfHostedServerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalCertificate'.
	AuthType string `pulumi:"authType"`
	// ServicePrincipal certificate for servicePrincipal auth.
	Certificate string `pulumi:"certificate"`
	// Application clientId for servicePrincipal auth.
	ClientId string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
}

// ServicePrincipalCertificateAuthInfoInput is an input type that accepts ServicePrincipalCertificateAuthInfoArgs and ServicePrincipalCertificateAuthInfoOutput values.
// You can construct a concrete instance of `ServicePrincipalCertificateAuthInfoInput` via:
//
//	ServicePrincipalCertificateAuthInfoArgs{...}
type ServicePrincipalCertificateAuthInfoInput interface {
	pulumi.Input

	ToServicePrincipalCertificateAuthInfoOutput() ServicePrincipalCertificateAuthInfoOutput
	ToServicePrincipalCertificateAuthInfoOutputWithContext(context.Context) ServicePrincipalCertificateAuthInfoOutput
}

// The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalCertificate'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// ServicePrincipal certificate for servicePrincipal auth.
	Certificate pulumi.StringInput `pulumi:"certificate"`
	// Application clientId for servicePrincipal auth.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles pulumi.StringArrayInput `pulumi:"roles"`
}

func (ServicePrincipalCertificateAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalCertificateAuthInfo)(nil)).Elem()
}

func (i ServicePrincipalCertificateAuthInfoArgs) ToServicePrincipalCertificateAuthInfoOutput() ServicePrincipalCertificateAuthInfoOutput {
	return i.ToServicePrincipalCertificateAuthInfoOutputWithContext(context.Background())
}

func (i ServicePrincipalCertificateAuthInfoArgs) ToServicePrincipalCertificateAuthInfoOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateAuthInfoOutput)
}

func (i ServicePrincipalCertificateAuthInfoArgs) ToServicePrincipalCertificateAuthInfoPtrOutput() ServicePrincipalCertificateAuthInfoPtrOutput {
	return i.ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(context.Background())
}

func (i ServicePrincipalCertificateAuthInfoArgs) ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateAuthInfoOutput).ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(ctx)
}

// ServicePrincipalCertificateAuthInfoPtrInput is an input type that accepts ServicePrincipalCertificateAuthInfoArgs, ServicePrincipalCertificateAuthInfoPtr and ServicePrincipalCertificateAuthInfoPtrOutput values.
// You can construct a concrete instance of `ServicePrincipalCertificateAuthInfoPtrInput` via:
//
//	        ServicePrincipalCertificateAuthInfoArgs{...}
//
//	or:
//
//	        nil
type ServicePrincipalCertificateAuthInfoPtrInput interface {
	pulumi.Input

	ToServicePrincipalCertificateAuthInfoPtrOutput() ServicePrincipalCertificateAuthInfoPtrOutput
	ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(context.Context) ServicePrincipalCertificateAuthInfoPtrOutput
}

type servicePrincipalCertificateAuthInfoPtrType ServicePrincipalCertificateAuthInfoArgs

func ServicePrincipalCertificateAuthInfoPtr(v *ServicePrincipalCertificateAuthInfoArgs) ServicePrincipalCertificateAuthInfoPtrInput {
	return (*servicePrincipalCertificateAuthInfoPtrType)(v)
}

func (*servicePrincipalCertificateAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalCertificateAuthInfo)(nil)).Elem()
}

func (i *servicePrincipalCertificateAuthInfoPtrType) ToServicePrincipalCertificateAuthInfoPtrOutput() ServicePrincipalCertificateAuthInfoPtrOutput {
	return i.ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalCertificateAuthInfoPtrType) ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalCertificateAuthInfoPtrOutput)
}

// The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfoOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalCertificateAuthInfo)(nil)).Elem()
}

func (o ServicePrincipalCertificateAuthInfoOutput) ToServicePrincipalCertificateAuthInfoOutput() ServicePrincipalCertificateAuthInfoOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoOutput) ToServicePrincipalCertificateAuthInfoOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoOutput) ToServicePrincipalCertificateAuthInfoPtrOutput() ServicePrincipalCertificateAuthInfoPtrOutput {
	return o.ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(context.Background())
}

func (o ServicePrincipalCertificateAuthInfoOutput) ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicePrincipalCertificateAuthInfo) *ServicePrincipalCertificateAuthInfo {
		return &v
	}).(ServicePrincipalCertificateAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalCertificateAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalCertificate'.
func (o ServicePrincipalCertificateAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// ServicePrincipal certificate for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) string { return v.Certificate }).(pulumi.StringOutput)
}

// Application clientId for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) string { return v.ClientId }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalCertificateAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalCertificateAuthInfoOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfo) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type ServicePrincipalCertificateAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalCertificateAuthInfo)(nil)).Elem()
}

func (o ServicePrincipalCertificateAuthInfoPtrOutput) ToServicePrincipalCertificateAuthInfoPtrOutput() ServicePrincipalCertificateAuthInfoPtrOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoPtrOutput) ToServicePrincipalCertificateAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoPtrOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoPtrOutput) Elem() ServicePrincipalCertificateAuthInfoOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) ServicePrincipalCertificateAuthInfo {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalCertificateAuthInfo
		return ret
	}).(ServicePrincipalCertificateAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalCertificateAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalCertificate'.
func (o ServicePrincipalCertificateAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// ServicePrincipal certificate for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Application clientId for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalCertificateAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalCertificateAuthInfoPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfo) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalCertificate'.
	AuthType string `pulumi:"authType"`
	// ServicePrincipal certificate for servicePrincipal auth.
	Certificate string `pulumi:"certificate"`
	// Application clientId for servicePrincipal auth.
	ClientId string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
}

// The authentication info when authType is servicePrincipal certificate
type ServicePrincipalCertificateAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalCertificateAuthInfoResponse)(nil)).Elem()
}

func (o ServicePrincipalCertificateAuthInfoResponseOutput) ToServicePrincipalCertificateAuthInfoResponseOutput() ServicePrincipalCertificateAuthInfoResponseOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoResponseOutput) ToServicePrincipalCertificateAuthInfoResponseOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalCertificateAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalCertificate'.
func (o ServicePrincipalCertificateAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// ServicePrincipal certificate for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponseOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) string { return v.Certificate }).(pulumi.StringOutput)
}

// Application clientId for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalCertificateAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalCertificateAuthInfoResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalCertificateAuthInfoResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type ServicePrincipalCertificateAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalCertificateAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalCertificateAuthInfoResponse)(nil)).Elem()
}

func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) ToServicePrincipalCertificateAuthInfoResponsePtrOutput() ServicePrincipalCertificateAuthInfoResponsePtrOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) ToServicePrincipalCertificateAuthInfoResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalCertificateAuthInfoResponsePtrOutput {
	return o
}

func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) Elem() ServicePrincipalCertificateAuthInfoResponseOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) ServicePrincipalCertificateAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalCertificateAuthInfoResponse
		return ret
	}).(ServicePrincipalCertificateAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalCertificate'.
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// ServicePrincipal certificate for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Application clientId for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalCertificateAuthInfoResponsePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipalCertificateAuthInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalSecret'.
	AuthType string `pulumi:"authType"`
	// ServicePrincipal application clientId for servicePrincipal auth.
	ClientId string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
	// Secret for servicePrincipal auth.
	Secret string `pulumi:"secret"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// ServicePrincipalSecretAuthInfoInput is an input type that accepts ServicePrincipalSecretAuthInfoArgs and ServicePrincipalSecretAuthInfoOutput values.
// You can construct a concrete instance of `ServicePrincipalSecretAuthInfoInput` via:
//
//	ServicePrincipalSecretAuthInfoArgs{...}
type ServicePrincipalSecretAuthInfoInput interface {
	pulumi.Input

	ToServicePrincipalSecretAuthInfoOutput() ServicePrincipalSecretAuthInfoOutput
	ToServicePrincipalSecretAuthInfoOutputWithContext(context.Context) ServicePrincipalSecretAuthInfoOutput
}

// The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalSecret'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// ServicePrincipal application clientId for servicePrincipal auth.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Secret for servicePrincipal auth.
	Secret pulumi.StringInput `pulumi:"secret"`
	// Username created in the database which is mapped to a user in AAD.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ServicePrincipalSecretAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalSecretAuthInfo)(nil)).Elem()
}

func (i ServicePrincipalSecretAuthInfoArgs) ToServicePrincipalSecretAuthInfoOutput() ServicePrincipalSecretAuthInfoOutput {
	return i.ToServicePrincipalSecretAuthInfoOutputWithContext(context.Background())
}

func (i ServicePrincipalSecretAuthInfoArgs) ToServicePrincipalSecretAuthInfoOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalSecretAuthInfoOutput)
}

func (i ServicePrincipalSecretAuthInfoArgs) ToServicePrincipalSecretAuthInfoPtrOutput() ServicePrincipalSecretAuthInfoPtrOutput {
	return i.ToServicePrincipalSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (i ServicePrincipalSecretAuthInfoArgs) ToServicePrincipalSecretAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalSecretAuthInfoOutput).ToServicePrincipalSecretAuthInfoPtrOutputWithContext(ctx)
}

// ServicePrincipalSecretAuthInfoPtrInput is an input type that accepts ServicePrincipalSecretAuthInfoArgs, ServicePrincipalSecretAuthInfoPtr and ServicePrincipalSecretAuthInfoPtrOutput values.
// You can construct a concrete instance of `ServicePrincipalSecretAuthInfoPtrInput` via:
//
//	        ServicePrincipalSecretAuthInfoArgs{...}
//
//	or:
//
//	        nil
type ServicePrincipalSecretAuthInfoPtrInput interface {
	pulumi.Input

	ToServicePrincipalSecretAuthInfoPtrOutput() ServicePrincipalSecretAuthInfoPtrOutput
	ToServicePrincipalSecretAuthInfoPtrOutputWithContext(context.Context) ServicePrincipalSecretAuthInfoPtrOutput
}

type servicePrincipalSecretAuthInfoPtrType ServicePrincipalSecretAuthInfoArgs

func ServicePrincipalSecretAuthInfoPtr(v *ServicePrincipalSecretAuthInfoArgs) ServicePrincipalSecretAuthInfoPtrInput {
	return (*servicePrincipalSecretAuthInfoPtrType)(v)
}

func (*servicePrincipalSecretAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalSecretAuthInfo)(nil)).Elem()
}

func (i *servicePrincipalSecretAuthInfoPtrType) ToServicePrincipalSecretAuthInfoPtrOutput() ServicePrincipalSecretAuthInfoPtrOutput {
	return i.ToServicePrincipalSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalSecretAuthInfoPtrType) ToServicePrincipalSecretAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalSecretAuthInfoPtrOutput)
}

// The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfoOutput struct{ *pulumi.OutputState }

func (ServicePrincipalSecretAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalSecretAuthInfo)(nil)).Elem()
}

func (o ServicePrincipalSecretAuthInfoOutput) ToServicePrincipalSecretAuthInfoOutput() ServicePrincipalSecretAuthInfoOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoOutput) ToServicePrincipalSecretAuthInfoOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoOutput) ToServicePrincipalSecretAuthInfoPtrOutput() ServicePrincipalSecretAuthInfoPtrOutput {
	return o.ToServicePrincipalSecretAuthInfoPtrOutputWithContext(context.Background())
}

func (o ServicePrincipalSecretAuthInfoOutput) ToServicePrincipalSecretAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicePrincipalSecretAuthInfo) *ServicePrincipalSecretAuthInfo {
		return &v
	}).(ServicePrincipalSecretAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalSecretAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalSecret'.
func (o ServicePrincipalSecretAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// ServicePrincipal application clientId for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) string { return v.ClientId }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalSecretAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalSecretAuthInfoOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Secret for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) string { return v.Secret }).(pulumi.StringOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o ServicePrincipalSecretAuthInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ServicePrincipalSecretAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalSecretAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalSecretAuthInfo)(nil)).Elem()
}

func (o ServicePrincipalSecretAuthInfoPtrOutput) ToServicePrincipalSecretAuthInfoPtrOutput() ServicePrincipalSecretAuthInfoPtrOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoPtrOutput) ToServicePrincipalSecretAuthInfoPtrOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoPtrOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoPtrOutput) Elem() ServicePrincipalSecretAuthInfoOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) ServicePrincipalSecretAuthInfo {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalSecretAuthInfo
		return ret
	}).(ServicePrincipalSecretAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalSecretAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalSecret'.
func (o ServicePrincipalSecretAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// ServicePrincipal application clientId for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalSecretAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalSecretAuthInfoPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Secret for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o ServicePrincipalSecretAuthInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'servicePrincipalSecret'.
	AuthType string `pulumi:"authType"`
	// ServicePrincipal application clientId for servicePrincipal auth.
	ClientId string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for servicePrincipal auth.
	PrincipalId string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
	// Secret for servicePrincipal auth.
	Secret string `pulumi:"secret"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// The authentication info when authType is servicePrincipal secret
type ServicePrincipalSecretAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalSecretAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalSecretAuthInfoResponse)(nil)).Elem()
}

func (o ServicePrincipalSecretAuthInfoResponseOutput) ToServicePrincipalSecretAuthInfoResponseOutput() ServicePrincipalSecretAuthInfoResponseOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoResponseOutput) ToServicePrincipalSecretAuthInfoResponseOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalSecretAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalSecret'.
func (o ServicePrincipalSecretAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// ServicePrincipal application clientId for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalSecretAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalSecretAuthInfoResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Secret for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o ServicePrincipalSecretAuthInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalSecretAuthInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ServicePrincipalSecretAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalSecretAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalSecretAuthInfoResponse)(nil)).Elem()
}

func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) ToServicePrincipalSecretAuthInfoResponsePtrOutput() ServicePrincipalSecretAuthInfoResponsePtrOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) ToServicePrincipalSecretAuthInfoResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalSecretAuthInfoResponsePtrOutput {
	return o
}

func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) Elem() ServicePrincipalSecretAuthInfoResponseOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) ServicePrincipalSecretAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalSecretAuthInfoResponse
		return ret
	}).(ServicePrincipalSecretAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'servicePrincipalSecret'.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// ServicePrincipal application clientId for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Secret for servicePrincipal auth.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o ServicePrincipalSecretAuthInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalSecretAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// A configuration item for source resource
type SourceConfigurationResponse struct {
	// The type of setting
	ConfigType string `pulumi:"configType"`
	// Descriptive information for the configuration
	Description *string `pulumi:"description"`
	// The identity for key vault reference, system or user-assigned managed identity ID
	KeyVaultReferenceIdentity *string `pulumi:"keyVaultReferenceIdentity"`
	// The name of setting.
	Name *string `pulumi:"name"`
	// The value of setting
	Value *string `pulumi:"value"`
}

// A configuration item for source resource
type SourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfigurationResponse)(nil)).Elem()
}

func (o SourceConfigurationResponseOutput) ToSourceConfigurationResponseOutput() SourceConfigurationResponseOutput {
	return o
}

func (o SourceConfigurationResponseOutput) ToSourceConfigurationResponseOutputWithContext(ctx context.Context) SourceConfigurationResponseOutput {
	return o
}

// The type of setting
func (o SourceConfigurationResponseOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v SourceConfigurationResponse) string { return v.ConfigType }).(pulumi.StringOutput)
}

// Descriptive information for the configuration
func (o SourceConfigurationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceConfigurationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The identity for key vault reference, system or user-assigned managed identity ID
func (o SourceConfigurationResponseOutput) KeyVaultReferenceIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceConfigurationResponse) *string { return v.KeyVaultReferenceIdentity }).(pulumi.StringPtrOutput)
}

// The name of setting.
func (o SourceConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of setting
func (o SourceConfigurationResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SourceConfigurationResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SourceConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceConfigurationResponse)(nil)).Elem()
}

func (o SourceConfigurationResponseArrayOutput) ToSourceConfigurationResponseArrayOutput() SourceConfigurationResponseArrayOutput {
	return o
}

func (o SourceConfigurationResponseArrayOutput) ToSourceConfigurationResponseArrayOutputWithContext(ctx context.Context) SourceConfigurationResponseArrayOutput {
	return o
}

func (o SourceConfigurationResponseArrayOutput) Index(i pulumi.IntInput) SourceConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceConfigurationResponse {
		return vs[0].([]SourceConfigurationResponse)[vs[1].(int)]
	}).(SourceConfigurationResponseOutput)
}

// The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'systemAssignedIdentity'.
	AuthType string `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles []string `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// SystemAssignedIdentityAuthInfoInput is an input type that accepts SystemAssignedIdentityAuthInfoArgs and SystemAssignedIdentityAuthInfoOutput values.
// You can construct a concrete instance of `SystemAssignedIdentityAuthInfoInput` via:
//
//	SystemAssignedIdentityAuthInfoArgs{...}
type SystemAssignedIdentityAuthInfoInput interface {
	pulumi.Input

	ToSystemAssignedIdentityAuthInfoOutput() SystemAssignedIdentityAuthInfoOutput
	ToSystemAssignedIdentityAuthInfoOutputWithContext(context.Context) SystemAssignedIdentityAuthInfoOutput
}

// The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'systemAssignedIdentity'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (SystemAssignedIdentityAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedIdentityAuthInfo)(nil)).Elem()
}

func (i SystemAssignedIdentityAuthInfoArgs) ToSystemAssignedIdentityAuthInfoOutput() SystemAssignedIdentityAuthInfoOutput {
	return i.ToSystemAssignedIdentityAuthInfoOutputWithContext(context.Background())
}

func (i SystemAssignedIdentityAuthInfoArgs) ToSystemAssignedIdentityAuthInfoOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedIdentityAuthInfoOutput)
}

func (i SystemAssignedIdentityAuthInfoArgs) ToSystemAssignedIdentityAuthInfoPtrOutput() SystemAssignedIdentityAuthInfoPtrOutput {
	return i.ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (i SystemAssignedIdentityAuthInfoArgs) ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedIdentityAuthInfoOutput).ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(ctx)
}

// SystemAssignedIdentityAuthInfoPtrInput is an input type that accepts SystemAssignedIdentityAuthInfoArgs, SystemAssignedIdentityAuthInfoPtr and SystemAssignedIdentityAuthInfoPtrOutput values.
// You can construct a concrete instance of `SystemAssignedIdentityAuthInfoPtrInput` via:
//
//	        SystemAssignedIdentityAuthInfoArgs{...}
//
//	or:
//
//	        nil
type SystemAssignedIdentityAuthInfoPtrInput interface {
	pulumi.Input

	ToSystemAssignedIdentityAuthInfoPtrOutput() SystemAssignedIdentityAuthInfoPtrOutput
	ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(context.Context) SystemAssignedIdentityAuthInfoPtrOutput
}

type systemAssignedIdentityAuthInfoPtrType SystemAssignedIdentityAuthInfoArgs

func SystemAssignedIdentityAuthInfoPtr(v *SystemAssignedIdentityAuthInfoArgs) SystemAssignedIdentityAuthInfoPtrInput {
	return (*systemAssignedIdentityAuthInfoPtrType)(v)
}

func (*systemAssignedIdentityAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedIdentityAuthInfo)(nil)).Elem()
}

func (i *systemAssignedIdentityAuthInfoPtrType) ToSystemAssignedIdentityAuthInfoPtrOutput() SystemAssignedIdentityAuthInfoPtrOutput {
	return i.ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (i *systemAssignedIdentityAuthInfoPtrType) ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemAssignedIdentityAuthInfoPtrOutput)
}

// The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfoOutput struct{ *pulumi.OutputState }

func (SystemAssignedIdentityAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedIdentityAuthInfo)(nil)).Elem()
}

func (o SystemAssignedIdentityAuthInfoOutput) ToSystemAssignedIdentityAuthInfoOutput() SystemAssignedIdentityAuthInfoOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoOutput) ToSystemAssignedIdentityAuthInfoOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoOutput) ToSystemAssignedIdentityAuthInfoPtrOutput() SystemAssignedIdentityAuthInfoPtrOutput {
	return o.ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (o SystemAssignedIdentityAuthInfoOutput) ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemAssignedIdentityAuthInfo) *SystemAssignedIdentityAuthInfo {
		return &v
	}).(SystemAssignedIdentityAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SystemAssignedIdentityAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'systemAssignedIdentity'.
func (o SystemAssignedIdentityAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o SystemAssignedIdentityAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o SystemAssignedIdentityAuthInfoOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfo) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o SystemAssignedIdentityAuthInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SystemAssignedIdentityAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (SystemAssignedIdentityAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedIdentityAuthInfo)(nil)).Elem()
}

func (o SystemAssignedIdentityAuthInfoPtrOutput) ToSystemAssignedIdentityAuthInfoPtrOutput() SystemAssignedIdentityAuthInfoPtrOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoPtrOutput) ToSystemAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoPtrOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoPtrOutput) Elem() SystemAssignedIdentityAuthInfoOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) SystemAssignedIdentityAuthInfo {
		if v != nil {
			return *v
		}
		var ret SystemAssignedIdentityAuthInfo
		return ret
	}).(SystemAssignedIdentityAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SystemAssignedIdentityAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'systemAssignedIdentity'.
func (o SystemAssignedIdentityAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o SystemAssignedIdentityAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o SystemAssignedIdentityAuthInfoPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o SystemAssignedIdentityAuthInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'systemAssignedIdentity'.
	AuthType string `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles []string `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// The authentication info when authType is systemAssignedIdentity
type SystemAssignedIdentityAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (SystemAssignedIdentityAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemAssignedIdentityAuthInfoResponse)(nil)).Elem()
}

func (o SystemAssignedIdentityAuthInfoResponseOutput) ToSystemAssignedIdentityAuthInfoResponseOutput() SystemAssignedIdentityAuthInfoResponseOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoResponseOutput) ToSystemAssignedIdentityAuthInfoResponseOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SystemAssignedIdentityAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'systemAssignedIdentity'.
func (o SystemAssignedIdentityAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o SystemAssignedIdentityAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o SystemAssignedIdentityAuthInfoResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfoResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o SystemAssignedIdentityAuthInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemAssignedIdentityAuthInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type SystemAssignedIdentityAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemAssignedIdentityAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemAssignedIdentityAuthInfoResponse)(nil)).Elem()
}

func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) ToSystemAssignedIdentityAuthInfoResponsePtrOutput() SystemAssignedIdentityAuthInfoResponsePtrOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) ToSystemAssignedIdentityAuthInfoResponsePtrOutputWithContext(ctx context.Context) SystemAssignedIdentityAuthInfoResponsePtrOutput {
	return o
}

func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) Elem() SystemAssignedIdentityAuthInfoResponseOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) SystemAssignedIdentityAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret SystemAssignedIdentityAuthInfoResponse
		return ret
	}).(SystemAssignedIdentityAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'systemAssignedIdentity'.
func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o SystemAssignedIdentityAuthInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The authentication info when authType is user account
type UserAccountAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAccount'.
	AuthType string `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for user account.
	PrincipalId *string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// UserAccountAuthInfoInput is an input type that accepts UserAccountAuthInfoArgs and UserAccountAuthInfoOutput values.
// You can construct a concrete instance of `UserAccountAuthInfoInput` via:
//
//	UserAccountAuthInfoArgs{...}
type UserAccountAuthInfoInput interface {
	pulumi.Input

	ToUserAccountAuthInfoOutput() UserAccountAuthInfoOutput
	ToUserAccountAuthInfoOutputWithContext(context.Context) UserAccountAuthInfoOutput
}

// The authentication info when authType is user account
type UserAccountAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAccount'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for user account.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserAccountAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountAuthInfo)(nil)).Elem()
}

func (i UserAccountAuthInfoArgs) ToUserAccountAuthInfoOutput() UserAccountAuthInfoOutput {
	return i.ToUserAccountAuthInfoOutputWithContext(context.Background())
}

func (i UserAccountAuthInfoArgs) ToUserAccountAuthInfoOutputWithContext(ctx context.Context) UserAccountAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountAuthInfoOutput)
}

func (i UserAccountAuthInfoArgs) ToUserAccountAuthInfoPtrOutput() UserAccountAuthInfoPtrOutput {
	return i.ToUserAccountAuthInfoPtrOutputWithContext(context.Background())
}

func (i UserAccountAuthInfoArgs) ToUserAccountAuthInfoPtrOutputWithContext(ctx context.Context) UserAccountAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountAuthInfoOutput).ToUserAccountAuthInfoPtrOutputWithContext(ctx)
}

// UserAccountAuthInfoPtrInput is an input type that accepts UserAccountAuthInfoArgs, UserAccountAuthInfoPtr and UserAccountAuthInfoPtrOutput values.
// You can construct a concrete instance of `UserAccountAuthInfoPtrInput` via:
//
//	        UserAccountAuthInfoArgs{...}
//
//	or:
//
//	        nil
type UserAccountAuthInfoPtrInput interface {
	pulumi.Input

	ToUserAccountAuthInfoPtrOutput() UserAccountAuthInfoPtrOutput
	ToUserAccountAuthInfoPtrOutputWithContext(context.Context) UserAccountAuthInfoPtrOutput
}

type userAccountAuthInfoPtrType UserAccountAuthInfoArgs

func UserAccountAuthInfoPtr(v *UserAccountAuthInfoArgs) UserAccountAuthInfoPtrInput {
	return (*userAccountAuthInfoPtrType)(v)
}

func (*userAccountAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountAuthInfo)(nil)).Elem()
}

func (i *userAccountAuthInfoPtrType) ToUserAccountAuthInfoPtrOutput() UserAccountAuthInfoPtrOutput {
	return i.ToUserAccountAuthInfoPtrOutputWithContext(context.Background())
}

func (i *userAccountAuthInfoPtrType) ToUserAccountAuthInfoPtrOutputWithContext(ctx context.Context) UserAccountAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountAuthInfoPtrOutput)
}

// The authentication info when authType is user account
type UserAccountAuthInfoOutput struct{ *pulumi.OutputState }

func (UserAccountAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountAuthInfo)(nil)).Elem()
}

func (o UserAccountAuthInfoOutput) ToUserAccountAuthInfoOutput() UserAccountAuthInfoOutput {
	return o
}

func (o UserAccountAuthInfoOutput) ToUserAccountAuthInfoOutputWithContext(ctx context.Context) UserAccountAuthInfoOutput {
	return o
}

func (o UserAccountAuthInfoOutput) ToUserAccountAuthInfoPtrOutput() UserAccountAuthInfoPtrOutput {
	return o.ToUserAccountAuthInfoPtrOutputWithContext(context.Background())
}

func (o UserAccountAuthInfoOutput) ToUserAccountAuthInfoPtrOutputWithContext(ctx context.Context) UserAccountAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAccountAuthInfo) *UserAccountAuthInfo {
		return &v
	}).(UserAccountAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAccountAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAccount'.
func (o UserAccountAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAccountAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for user account.
func (o UserAccountAuthInfoOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o UserAccountAuthInfoOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAccountAuthInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserAccountAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (UserAccountAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountAuthInfo)(nil)).Elem()
}

func (o UserAccountAuthInfoPtrOutput) ToUserAccountAuthInfoPtrOutput() UserAccountAuthInfoPtrOutput {
	return o
}

func (o UserAccountAuthInfoPtrOutput) ToUserAccountAuthInfoPtrOutputWithContext(ctx context.Context) UserAccountAuthInfoPtrOutput {
	return o
}

func (o UserAccountAuthInfoPtrOutput) Elem() UserAccountAuthInfoOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) UserAccountAuthInfo {
		if v != nil {
			return *v
		}
		var ret UserAccountAuthInfo
		return ret
	}).(UserAccountAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAccountAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAccount'.
func (o UserAccountAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAccountAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for user account.
func (o UserAccountAuthInfoPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o UserAccountAuthInfoPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAccountAuthInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is user account
type UserAccountAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAccount'.
	AuthType string `pulumi:"authType"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Principal Id for user account.
	PrincipalId *string `pulumi:"principalId"`
	// Optional, this value specifies the Azure roles to be assigned. Automatically
	Roles []string `pulumi:"roles"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// The authentication info when authType is user account
type UserAccountAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (UserAccountAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountAuthInfoResponse)(nil)).Elem()
}

func (o UserAccountAuthInfoResponseOutput) ToUserAccountAuthInfoResponseOutput() UserAccountAuthInfoResponseOutput {
	return o
}

func (o UserAccountAuthInfoResponseOutput) ToUserAccountAuthInfoResponseOutputWithContext(ctx context.Context) UserAccountAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAccountAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAccount'.
func (o UserAccountAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAccountAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Principal Id for user account.
func (o UserAccountAuthInfoResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o UserAccountAuthInfoResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAccountAuthInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountAuthInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserAccountAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAccountAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountAuthInfoResponse)(nil)).Elem()
}

func (o UserAccountAuthInfoResponsePtrOutput) ToUserAccountAuthInfoResponsePtrOutput() UserAccountAuthInfoResponsePtrOutput {
	return o
}

func (o UserAccountAuthInfoResponsePtrOutput) ToUserAccountAuthInfoResponsePtrOutputWithContext(ctx context.Context) UserAccountAuthInfoResponsePtrOutput {
	return o
}

func (o UserAccountAuthInfoResponsePtrOutput) Elem() UserAccountAuthInfoResponseOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) UserAccountAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret UserAccountAuthInfoResponse
		return ret
	}).(UserAccountAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAccountAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAccount'.
func (o UserAccountAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAccountAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Principal Id for user account.
func (o UserAccountAuthInfoResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure roles to be assigned. Automatically
func (o UserAccountAuthInfoResponsePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAccountAuthInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfo struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAssignedIdentity'.
	AuthType string `pulumi:"authType"`
	// Client Id for userAssignedIdentity.
	ClientId *string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles []string `pulumi:"roles"`
	// Subscription id for userAssignedIdentity.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// UserAssignedIdentityAuthInfoInput is an input type that accepts UserAssignedIdentityAuthInfoArgs and UserAssignedIdentityAuthInfoOutput values.
// You can construct a concrete instance of `UserAssignedIdentityAuthInfoInput` via:
//
//	UserAssignedIdentityAuthInfoArgs{...}
type UserAssignedIdentityAuthInfoInput interface {
	pulumi.Input

	ToUserAssignedIdentityAuthInfoOutput() UserAssignedIdentityAuthInfoOutput
	ToUserAssignedIdentityAuthInfoOutputWithContext(context.Context) UserAssignedIdentityAuthInfoOutput
}

// The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfoArgs struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAssignedIdentity'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Client Id for userAssignedIdentity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles pulumi.StringArrayInput `pulumi:"roles"`
	// Subscription id for userAssignedIdentity.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Username created in the database which is mapped to a user in AAD.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (UserAssignedIdentityAuthInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityAuthInfo)(nil)).Elem()
}

func (i UserAssignedIdentityAuthInfoArgs) ToUserAssignedIdentityAuthInfoOutput() UserAssignedIdentityAuthInfoOutput {
	return i.ToUserAssignedIdentityAuthInfoOutputWithContext(context.Background())
}

func (i UserAssignedIdentityAuthInfoArgs) ToUserAssignedIdentityAuthInfoOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityAuthInfoOutput)
}

func (i UserAssignedIdentityAuthInfoArgs) ToUserAssignedIdentityAuthInfoPtrOutput() UserAssignedIdentityAuthInfoPtrOutput {
	return i.ToUserAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (i UserAssignedIdentityAuthInfoArgs) ToUserAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityAuthInfoOutput).ToUserAssignedIdentityAuthInfoPtrOutputWithContext(ctx)
}

// UserAssignedIdentityAuthInfoPtrInput is an input type that accepts UserAssignedIdentityAuthInfoArgs, UserAssignedIdentityAuthInfoPtr and UserAssignedIdentityAuthInfoPtrOutput values.
// You can construct a concrete instance of `UserAssignedIdentityAuthInfoPtrInput` via:
//
//	        UserAssignedIdentityAuthInfoArgs{...}
//
//	or:
//
//	        nil
type UserAssignedIdentityAuthInfoPtrInput interface {
	pulumi.Input

	ToUserAssignedIdentityAuthInfoPtrOutput() UserAssignedIdentityAuthInfoPtrOutput
	ToUserAssignedIdentityAuthInfoPtrOutputWithContext(context.Context) UserAssignedIdentityAuthInfoPtrOutput
}

type userAssignedIdentityAuthInfoPtrType UserAssignedIdentityAuthInfoArgs

func UserAssignedIdentityAuthInfoPtr(v *UserAssignedIdentityAuthInfoArgs) UserAssignedIdentityAuthInfoPtrInput {
	return (*userAssignedIdentityAuthInfoPtrType)(v)
}

func (*userAssignedIdentityAuthInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityAuthInfo)(nil)).Elem()
}

func (i *userAssignedIdentityAuthInfoPtrType) ToUserAssignedIdentityAuthInfoPtrOutput() UserAssignedIdentityAuthInfoPtrOutput {
	return i.ToUserAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (i *userAssignedIdentityAuthInfoPtrType) ToUserAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityAuthInfoPtrOutput)
}

// The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfoOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityAuthInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityAuthInfo)(nil)).Elem()
}

func (o UserAssignedIdentityAuthInfoOutput) ToUserAssignedIdentityAuthInfoOutput() UserAssignedIdentityAuthInfoOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoOutput) ToUserAssignedIdentityAuthInfoOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoOutput) ToUserAssignedIdentityAuthInfoPtrOutput() UserAssignedIdentityAuthInfoPtrOutput {
	return o.ToUserAssignedIdentityAuthInfoPtrOutputWithContext(context.Background())
}

func (o UserAssignedIdentityAuthInfoOutput) ToUserAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedIdentityAuthInfo) *UserAssignedIdentityAuthInfo {
		return &v
	}).(UserAssignedIdentityAuthInfoPtrOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAssignedIdentityAuthInfoOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAssignedIdentity'.
func (o UserAssignedIdentityAuthInfoOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) string { return v.AuthType }).(pulumi.StringOutput)
}

// Client Id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAssignedIdentityAuthInfoOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o UserAssignedIdentityAuthInfoOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Subscription id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAssignedIdentityAuthInfoOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfo) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityAuthInfoPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityAuthInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityAuthInfo)(nil)).Elem()
}

func (o UserAssignedIdentityAuthInfoPtrOutput) ToUserAssignedIdentityAuthInfoPtrOutput() UserAssignedIdentityAuthInfoPtrOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoPtrOutput) ToUserAssignedIdentityAuthInfoPtrOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoPtrOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoPtrOutput) Elem() UserAssignedIdentityAuthInfoOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) UserAssignedIdentityAuthInfo {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityAuthInfo
		return ret
	}).(UserAssignedIdentityAuthInfoOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAssignedIdentityAuthInfoPtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAssignedIdentity'.
func (o UserAssignedIdentityAuthInfoPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Client Id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAssignedIdentityAuthInfoPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o UserAssignedIdentityAuthInfoPtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Subscription id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAssignedIdentityAuthInfoPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfoResponse struct {
	// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
	AuthMode *string `pulumi:"authMode"`
	// The authentication type.
	// Expected value is 'userAssignedIdentity'.
	AuthType string `pulumi:"authType"`
	// Client Id for userAssignedIdentity.
	ClientId *string `pulumi:"clientId"`
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Optional, this value specifies the Azure role to be assigned
	Roles []string `pulumi:"roles"`
	// Subscription id for userAssignedIdentity.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Username created in the database which is mapped to a user in AAD.
	UserName *string `pulumi:"userName"`
}

// The authentication info when authType is userAssignedIdentity
type UserAssignedIdentityAuthInfoResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityAuthInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityAuthInfoResponse)(nil)).Elem()
}

func (o UserAssignedIdentityAuthInfoResponseOutput) ToUserAssignedIdentityAuthInfoResponseOutput() UserAssignedIdentityAuthInfoResponseOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoResponseOutput) ToUserAssignedIdentityAuthInfoResponseOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoResponseOutput {
	return o
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAssignedIdentityAuthInfoResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAssignedIdentity'.
func (o UserAssignedIdentityAuthInfoResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Client Id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAssignedIdentityAuthInfoResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o UserAssignedIdentityAuthInfoResponseOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

// Subscription id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAssignedIdentityAuthInfoResponseOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityAuthInfoResponse) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityAuthInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityAuthInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityAuthInfoResponse)(nil)).Elem()
}

func (o UserAssignedIdentityAuthInfoResponsePtrOutput) ToUserAssignedIdentityAuthInfoResponsePtrOutput() UserAssignedIdentityAuthInfoResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoResponsePtrOutput) ToUserAssignedIdentityAuthInfoResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityAuthInfoResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityAuthInfoResponsePtrOutput) Elem() UserAssignedIdentityAuthInfoResponseOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) UserAssignedIdentityAuthInfoResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityAuthInfoResponse
		return ret
	}).(UserAssignedIdentityAuthInfoResponseOutput)
}

// Optional. Indicates how to configure authentication. If optInAllAuth, service linker configures authentication such as enabling identity on source resource and granting RBAC roles. If optOutAllAuth, opt out authentication setup. Default is optInAllAuth.
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthMode
	}).(pulumi.StringPtrOutput)
}

// The authentication type.
// Expected value is 'userAssignedIdentity'.
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// Client Id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Optional, this value specifies the Azure role to be assigned
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) []string {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(pulumi.StringArrayOutput)
}

// Subscription id for userAssignedIdentity.
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Username created in the database which is mapped to a user in AAD.
func (o UserAssignedIdentityAuthInfoResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityAuthInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserName
	}).(pulumi.StringPtrOutput)
}

// The VNet solution for linker
type VNetSolution struct {
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Type of VNet solution.
	Type *string `pulumi:"type"`
}

// VNetSolutionInput is an input type that accepts VNetSolutionArgs and VNetSolutionOutput values.
// You can construct a concrete instance of `VNetSolutionInput` via:
//
//	VNetSolutionArgs{...}
type VNetSolutionInput interface {
	pulumi.Input

	ToVNetSolutionOutput() VNetSolutionOutput
	ToVNetSolutionOutputWithContext(context.Context) VNetSolutionOutput
}

// The VNet solution for linker
type VNetSolutionArgs struct {
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior pulumi.StringPtrInput `pulumi:"deleteOrUpdateBehavior"`
	// Type of VNet solution.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (VNetSolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VNetSolution)(nil)).Elem()
}

func (i VNetSolutionArgs) ToVNetSolutionOutput() VNetSolutionOutput {
	return i.ToVNetSolutionOutputWithContext(context.Background())
}

func (i VNetSolutionArgs) ToVNetSolutionOutputWithContext(ctx context.Context) VNetSolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VNetSolutionOutput)
}

func (i VNetSolutionArgs) ToVNetSolutionPtrOutput() VNetSolutionPtrOutput {
	return i.ToVNetSolutionPtrOutputWithContext(context.Background())
}

func (i VNetSolutionArgs) ToVNetSolutionPtrOutputWithContext(ctx context.Context) VNetSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VNetSolutionOutput).ToVNetSolutionPtrOutputWithContext(ctx)
}

// VNetSolutionPtrInput is an input type that accepts VNetSolutionArgs, VNetSolutionPtr and VNetSolutionPtrOutput values.
// You can construct a concrete instance of `VNetSolutionPtrInput` via:
//
//	        VNetSolutionArgs{...}
//
//	or:
//
//	        nil
type VNetSolutionPtrInput interface {
	pulumi.Input

	ToVNetSolutionPtrOutput() VNetSolutionPtrOutput
	ToVNetSolutionPtrOutputWithContext(context.Context) VNetSolutionPtrOutput
}

type vnetSolutionPtrType VNetSolutionArgs

func VNetSolutionPtr(v *VNetSolutionArgs) VNetSolutionPtrInput {
	return (*vnetSolutionPtrType)(v)
}

func (*vnetSolutionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VNetSolution)(nil)).Elem()
}

func (i *vnetSolutionPtrType) ToVNetSolutionPtrOutput() VNetSolutionPtrOutput {
	return i.ToVNetSolutionPtrOutputWithContext(context.Background())
}

func (i *vnetSolutionPtrType) ToVNetSolutionPtrOutputWithContext(ctx context.Context) VNetSolutionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VNetSolutionPtrOutput)
}

// The VNet solution for linker
type VNetSolutionOutput struct{ *pulumi.OutputState }

func (VNetSolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VNetSolution)(nil)).Elem()
}

func (o VNetSolutionOutput) ToVNetSolutionOutput() VNetSolutionOutput {
	return o
}

func (o VNetSolutionOutput) ToVNetSolutionOutputWithContext(ctx context.Context) VNetSolutionOutput {
	return o
}

func (o VNetSolutionOutput) ToVNetSolutionPtrOutput() VNetSolutionPtrOutput {
	return o.ToVNetSolutionPtrOutputWithContext(context.Background())
}

func (o VNetSolutionOutput) ToVNetSolutionPtrOutputWithContext(ctx context.Context) VNetSolutionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VNetSolution) *VNetSolution {
		return &v
	}).(VNetSolutionPtrOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o VNetSolutionOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VNetSolution) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Type of VNet solution.
func (o VNetSolutionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VNetSolution) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VNetSolutionPtrOutput struct{ *pulumi.OutputState }

func (VNetSolutionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VNetSolution)(nil)).Elem()
}

func (o VNetSolutionPtrOutput) ToVNetSolutionPtrOutput() VNetSolutionPtrOutput {
	return o
}

func (o VNetSolutionPtrOutput) ToVNetSolutionPtrOutputWithContext(ctx context.Context) VNetSolutionPtrOutput {
	return o
}

func (o VNetSolutionPtrOutput) Elem() VNetSolutionOutput {
	return o.ApplyT(func(v *VNetSolution) VNetSolution {
		if v != nil {
			return *v
		}
		var ret VNetSolution
		return ret
	}).(VNetSolutionOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o VNetSolutionPtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VNetSolution) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Type of VNet solution.
func (o VNetSolutionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VNetSolution) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The VNet solution for linker
type VNetSolutionResponse struct {
	// Indicates whether to clean up previous operation when Linker is updating or deleting
	DeleteOrUpdateBehavior *string `pulumi:"deleteOrUpdateBehavior"`
	// Type of VNet solution.
	Type *string `pulumi:"type"`
}

// The VNet solution for linker
type VNetSolutionResponseOutput struct{ *pulumi.OutputState }

func (VNetSolutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VNetSolutionResponse)(nil)).Elem()
}

func (o VNetSolutionResponseOutput) ToVNetSolutionResponseOutput() VNetSolutionResponseOutput {
	return o
}

func (o VNetSolutionResponseOutput) ToVNetSolutionResponseOutputWithContext(ctx context.Context) VNetSolutionResponseOutput {
	return o
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o VNetSolutionResponseOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VNetSolutionResponse) *string { return v.DeleteOrUpdateBehavior }).(pulumi.StringPtrOutput)
}

// Type of VNet solution.
func (o VNetSolutionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VNetSolutionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type VNetSolutionResponsePtrOutput struct{ *pulumi.OutputState }

func (VNetSolutionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VNetSolutionResponse)(nil)).Elem()
}

func (o VNetSolutionResponsePtrOutput) ToVNetSolutionResponsePtrOutput() VNetSolutionResponsePtrOutput {
	return o
}

func (o VNetSolutionResponsePtrOutput) ToVNetSolutionResponsePtrOutputWithContext(ctx context.Context) VNetSolutionResponsePtrOutput {
	return o
}

func (o VNetSolutionResponsePtrOutput) Elem() VNetSolutionResponseOutput {
	return o.ApplyT(func(v *VNetSolutionResponse) VNetSolutionResponse {
		if v != nil {
			return *v
		}
		var ret VNetSolutionResponse
		return ret
	}).(VNetSolutionResponseOutput)
}

// Indicates whether to clean up previous operation when Linker is updating or deleting
func (o VNetSolutionResponsePtrOutput) DeleteOrUpdateBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VNetSolutionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeleteOrUpdateBehavior
	}).(pulumi.StringPtrOutput)
}

// Type of VNet solution.
func (o VNetSolutionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VNetSolutionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The secret info when type is rawValue. It's for scenarios that user input the secret.
type ValueSecretInfo struct {
	// The secret type.
	// Expected value is 'rawValue'.
	SecretType string `pulumi:"secretType"`
	// The actual value of the secret.
	Value *string `pulumi:"value"`
}

// ValueSecretInfoInput is an input type that accepts ValueSecretInfoArgs and ValueSecretInfoOutput values.
// You can construct a concrete instance of `ValueSecretInfoInput` via:
//
//	ValueSecretInfoArgs{...}
type ValueSecretInfoInput interface {
	pulumi.Input

	ToValueSecretInfoOutput() ValueSecretInfoOutput
	ToValueSecretInfoOutputWithContext(context.Context) ValueSecretInfoOutput
}

// The secret info when type is rawValue. It's for scenarios that user input the secret.
type ValueSecretInfoArgs struct {
	// The secret type.
	// Expected value is 'rawValue'.
	SecretType pulumi.StringInput `pulumi:"secretType"`
	// The actual value of the secret.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ValueSecretInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueSecretInfo)(nil)).Elem()
}

func (i ValueSecretInfoArgs) ToValueSecretInfoOutput() ValueSecretInfoOutput {
	return i.ToValueSecretInfoOutputWithContext(context.Background())
}

func (i ValueSecretInfoArgs) ToValueSecretInfoOutputWithContext(ctx context.Context) ValueSecretInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueSecretInfoOutput)
}

func (i ValueSecretInfoArgs) ToValueSecretInfoPtrOutput() ValueSecretInfoPtrOutput {
	return i.ToValueSecretInfoPtrOutputWithContext(context.Background())
}

func (i ValueSecretInfoArgs) ToValueSecretInfoPtrOutputWithContext(ctx context.Context) ValueSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueSecretInfoOutput).ToValueSecretInfoPtrOutputWithContext(ctx)
}

// ValueSecretInfoPtrInput is an input type that accepts ValueSecretInfoArgs, ValueSecretInfoPtr and ValueSecretInfoPtrOutput values.
// You can construct a concrete instance of `ValueSecretInfoPtrInput` via:
//
//	        ValueSecretInfoArgs{...}
//
//	or:
//
//	        nil
type ValueSecretInfoPtrInput interface {
	pulumi.Input

	ToValueSecretInfoPtrOutput() ValueSecretInfoPtrOutput
	ToValueSecretInfoPtrOutputWithContext(context.Context) ValueSecretInfoPtrOutput
}

type valueSecretInfoPtrType ValueSecretInfoArgs

func ValueSecretInfoPtr(v *ValueSecretInfoArgs) ValueSecretInfoPtrInput {
	return (*valueSecretInfoPtrType)(v)
}

func (*valueSecretInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueSecretInfo)(nil)).Elem()
}

func (i *valueSecretInfoPtrType) ToValueSecretInfoPtrOutput() ValueSecretInfoPtrOutput {
	return i.ToValueSecretInfoPtrOutputWithContext(context.Background())
}

func (i *valueSecretInfoPtrType) ToValueSecretInfoPtrOutputWithContext(ctx context.Context) ValueSecretInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValueSecretInfoPtrOutput)
}

// The secret info when type is rawValue. It's for scenarios that user input the secret.
type ValueSecretInfoOutput struct{ *pulumi.OutputState }

func (ValueSecretInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueSecretInfo)(nil)).Elem()
}

func (o ValueSecretInfoOutput) ToValueSecretInfoOutput() ValueSecretInfoOutput {
	return o
}

func (o ValueSecretInfoOutput) ToValueSecretInfoOutputWithContext(ctx context.Context) ValueSecretInfoOutput {
	return o
}

func (o ValueSecretInfoOutput) ToValueSecretInfoPtrOutput() ValueSecretInfoPtrOutput {
	return o.ToValueSecretInfoPtrOutputWithContext(context.Background())
}

func (o ValueSecretInfoOutput) ToValueSecretInfoPtrOutputWithContext(ctx context.Context) ValueSecretInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValueSecretInfo) *ValueSecretInfo {
		return &v
	}).(ValueSecretInfoPtrOutput)
}

// The secret type.
// Expected value is 'rawValue'.
func (o ValueSecretInfoOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v ValueSecretInfo) string { return v.SecretType }).(pulumi.StringOutput)
}

// The actual value of the secret.
func (o ValueSecretInfoOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValueSecretInfo) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ValueSecretInfoPtrOutput struct{ *pulumi.OutputState }

func (ValueSecretInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueSecretInfo)(nil)).Elem()
}

func (o ValueSecretInfoPtrOutput) ToValueSecretInfoPtrOutput() ValueSecretInfoPtrOutput {
	return o
}

func (o ValueSecretInfoPtrOutput) ToValueSecretInfoPtrOutputWithContext(ctx context.Context) ValueSecretInfoPtrOutput {
	return o
}

func (o ValueSecretInfoPtrOutput) Elem() ValueSecretInfoOutput {
	return o.ApplyT(func(v *ValueSecretInfo) ValueSecretInfo {
		if v != nil {
			return *v
		}
		var ret ValueSecretInfo
		return ret
	}).(ValueSecretInfoOutput)
}

// The secret type.
// Expected value is 'rawValue'.
func (o ValueSecretInfoPtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueSecretInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// The actual value of the secret.
func (o ValueSecretInfoPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueSecretInfo) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// The secret info when type is rawValue. It's for scenarios that user input the secret.
type ValueSecretInfoResponse struct {
	// The secret type.
	// Expected value is 'rawValue'.
	SecretType string `pulumi:"secretType"`
	// The actual value of the secret.
	Value *string `pulumi:"value"`
}

// The secret info when type is rawValue. It's for scenarios that user input the secret.
type ValueSecretInfoResponseOutput struct{ *pulumi.OutputState }

func (ValueSecretInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValueSecretInfoResponse)(nil)).Elem()
}

func (o ValueSecretInfoResponseOutput) ToValueSecretInfoResponseOutput() ValueSecretInfoResponseOutput {
	return o
}

func (o ValueSecretInfoResponseOutput) ToValueSecretInfoResponseOutputWithContext(ctx context.Context) ValueSecretInfoResponseOutput {
	return o
}

// The secret type.
// Expected value is 'rawValue'.
func (o ValueSecretInfoResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v ValueSecretInfoResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// The actual value of the secret.
func (o ValueSecretInfoResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ValueSecretInfoResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ValueSecretInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ValueSecretInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValueSecretInfoResponse)(nil)).Elem()
}

func (o ValueSecretInfoResponsePtrOutput) ToValueSecretInfoResponsePtrOutput() ValueSecretInfoResponsePtrOutput {
	return o
}

func (o ValueSecretInfoResponsePtrOutput) ToValueSecretInfoResponsePtrOutputWithContext(ctx context.Context) ValueSecretInfoResponsePtrOutput {
	return o
}

func (o ValueSecretInfoResponsePtrOutput) Elem() ValueSecretInfoResponseOutput {
	return o.ApplyT(func(v *ValueSecretInfoResponse) ValueSecretInfoResponse {
		if v != nil {
			return *v
		}
		var ret ValueSecretInfoResponse
		return ret
	}).(ValueSecretInfoResponseOutput)
}

// The secret type.
// Expected value is 'rawValue'.
func (o ValueSecretInfoResponsePtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecretType
	}).(pulumi.StringPtrOutput)
}

// The actual value of the secret.
func (o ValueSecretInfoResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValueSecretInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessKeyInfoBaseOutput{})
	pulumi.RegisterOutputType(AccessKeyInfoBasePtrOutput{})
	pulumi.RegisterOutputType(AccessKeyInfoBaseResponseOutput{})
	pulumi.RegisterOutputType(AccessKeyInfoBaseResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AzureKeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceOutput{})
	pulumi.RegisterOutputType(AzureResourcePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceResponseOutput{})
	pulumi.RegisterOutputType(AzureResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(BasicErrorDryrunPrerequisiteResultResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoPtrOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationStoreOutput{})
	pulumi.RegisterOutputType(ConfigurationStorePtrOutput{})
	pulumi.RegisterOutputType(ConfigurationStoreResponseOutput{})
	pulumi.RegisterOutputType(ConfigurationStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfluentBootstrapServerOutput{})
	pulumi.RegisterOutputType(ConfluentBootstrapServerPtrOutput{})
	pulumi.RegisterOutputType(ConfluentBootstrapServerResponseOutput{})
	pulumi.RegisterOutputType(ConfluentBootstrapServerResponsePtrOutput{})
	pulumi.RegisterOutputType(ConfluentSchemaRegistryOutput{})
	pulumi.RegisterOutputType(ConfluentSchemaRegistryPtrOutput{})
	pulumi.RegisterOutputType(ConfluentSchemaRegistryResponseOutput{})
	pulumi.RegisterOutputType(ConfluentSchemaRegistryResponsePtrOutput{})
	pulumi.RegisterOutputType(CreateOrUpdateDryrunParametersOutput{})
	pulumi.RegisterOutputType(CreateOrUpdateDryrunParametersPtrOutput{})
	pulumi.RegisterOutputType(CreateOrUpdateDryrunParametersResponseOutput{})
	pulumi.RegisterOutputType(CreateOrUpdateDryrunParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(DaprMetadataOutput{})
	pulumi.RegisterOutputType(DaprMetadataArrayOutput{})
	pulumi.RegisterOutputType(DaprMetadataResponseOutput{})
	pulumi.RegisterOutputType(DaprMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(DaprPropertiesOutput{})
	pulumi.RegisterOutputType(DaprPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DaprPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DaprPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DryrunOperationPreviewResponseOutput{})
	pulumi.RegisterOutputType(DryrunOperationPreviewResponseArrayOutput{})
	pulumi.RegisterOutputType(EasyAuthMicrosoftEntraIDAuthInfoOutput{})
	pulumi.RegisterOutputType(EasyAuthMicrosoftEntraIDAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(EasyAuthMicrosoftEntraIDAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(EasyAuthMicrosoftEntraIDAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(FirewallRulesOutput{})
	pulumi.RegisterOutputType(FirewallRulesPtrOutput{})
	pulumi.RegisterOutputType(FirewallRulesResponseOutput{})
	pulumi.RegisterOutputType(FirewallRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceSecretInfoOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceSecretInfoPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceSecretInfoResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretReferenceSecretInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretUriSecretInfoOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretUriSecretInfoPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretUriSecretInfoResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultSecretUriSecretInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(PermissionsMissingDryrunPrerequisiteResultResponseOutput{})
	pulumi.RegisterOutputType(PublicNetworkSolutionOutput{})
	pulumi.RegisterOutputType(PublicNetworkSolutionPtrOutput{})
	pulumi.RegisterOutputType(PublicNetworkSolutionResponseOutput{})
	pulumi.RegisterOutputType(PublicNetworkSolutionResponsePtrOutput{})
	pulumi.RegisterOutputType(SecretAuthInfoOutput{})
	pulumi.RegisterOutputType(SecretAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(SecretAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(SecretAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreOutput{})
	pulumi.RegisterOutputType(SecretStorePtrOutput{})
	pulumi.RegisterOutputType(SecretStoreResponseOutput{})
	pulumi.RegisterOutputType(SecretStoreResponsePtrOutput{})
	pulumi.RegisterOutputType(SelfHostedServerOutput{})
	pulumi.RegisterOutputType(SelfHostedServerPtrOutput{})
	pulumi.RegisterOutputType(SelfHostedServerResponseOutput{})
	pulumi.RegisterOutputType(SelfHostedServerResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateAuthInfoOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalCertificateAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalSecretAuthInfoOutput{})
	pulumi.RegisterOutputType(ServicePrincipalSecretAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalSecretAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalSecretAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SourceConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemAssignedIdentityAuthInfoOutput{})
	pulumi.RegisterOutputType(SystemAssignedIdentityAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(SystemAssignedIdentityAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(SystemAssignedIdentityAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAccountAuthInfoOutput{})
	pulumi.RegisterOutputType(UserAccountAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(UserAccountAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(UserAccountAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityAuthInfoOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityAuthInfoPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityAuthInfoResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityAuthInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(VNetSolutionOutput{})
	pulumi.RegisterOutputType(VNetSolutionPtrOutput{})
	pulumi.RegisterOutputType(VNetSolutionResponseOutput{})
	pulumi.RegisterOutputType(VNetSolutionResponsePtrOutput{})
	pulumi.RegisterOutputType(ValueSecretInfoOutput{})
	pulumi.RegisterOutputType(ValueSecretInfoPtrOutput{})
	pulumi.RegisterOutputType(ValueSecretInfoResponseOutput{})
	pulumi.RegisterOutputType(ValueSecretInfoResponsePtrOutput{})
}
