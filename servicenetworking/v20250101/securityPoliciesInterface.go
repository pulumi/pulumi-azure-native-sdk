// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250101

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SecurityPolicy Subresource of Traffic Controller.
type SecurityPoliciesInterface struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the Traffic Controller Security Policy
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// Provisioning State of Traffic Controller SecurityPolicy Resource
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Web Application Firewall Policy of the Traffic Controller Security Policy. Single Security Policy can have only one policy type set.
	WafPolicy WafPolicyResponsePtrOutput `pulumi:"wafPolicy"`
}

// NewSecurityPoliciesInterface registers a new resource with the given unique name, arguments, and options.
func NewSecurityPoliciesInterface(ctx *pulumi.Context,
	name string, args *SecurityPoliciesInterfaceArgs, opts ...pulumi.ResourceOption) (*SecurityPoliciesInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.TrafficControllerName == nil {
		return nil, errors.New("invalid value for required argument 'TrafficControllerName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicenetworking/v20240501preview:SecurityPoliciesInterface"),
		},
		{
			Type: pulumi.String("azure-native:servicenetworking/v20250301preview:SecurityPoliciesInterface"),
		},
		{
			Type: pulumi.String("azure-native:servicenetworking:SecurityPoliciesInterface"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SecurityPoliciesInterface
	err := ctx.RegisterResource("azure-native:servicenetworking/v20250101:SecurityPoliciesInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPoliciesInterface gets an existing SecurityPoliciesInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPoliciesInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPoliciesInterfaceState, opts ...pulumi.ResourceOption) (*SecurityPoliciesInterface, error) {
	var resource SecurityPoliciesInterface
	err := ctx.ReadResource("azure-native:servicenetworking/v20250101:SecurityPoliciesInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPoliciesInterface resources.
type securityPoliciesInterfaceState struct {
}

type SecurityPoliciesInterfaceState struct {
}

func (SecurityPoliciesInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPoliciesInterfaceState)(nil)).Elem()
}

type securityPoliciesInterfaceArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// SecurityPolicy
	SecurityPolicyName *string `pulumi:"securityPolicyName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// traffic controller name for path
	TrafficControllerName string `pulumi:"trafficControllerName"`
	// Web Application Firewall Policy of the Traffic Controller Security Policy. Single Security Policy can have only one policy type set.
	WafPolicy *WafPolicy `pulumi:"wafPolicy"`
}

// The set of arguments for constructing a SecurityPoliciesInterface resource.
type SecurityPoliciesInterfaceArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// SecurityPolicy
	SecurityPolicyName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// traffic controller name for path
	TrafficControllerName pulumi.StringInput
	// Web Application Firewall Policy of the Traffic Controller Security Policy. Single Security Policy can have only one policy type set.
	WafPolicy WafPolicyPtrInput
}

func (SecurityPoliciesInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPoliciesInterfaceArgs)(nil)).Elem()
}

type SecurityPoliciesInterfaceInput interface {
	pulumi.Input

	ToSecurityPoliciesInterfaceOutput() SecurityPoliciesInterfaceOutput
	ToSecurityPoliciesInterfaceOutputWithContext(ctx context.Context) SecurityPoliciesInterfaceOutput
}

func (*SecurityPoliciesInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPoliciesInterface)(nil)).Elem()
}

func (i *SecurityPoliciesInterface) ToSecurityPoliciesInterfaceOutput() SecurityPoliciesInterfaceOutput {
	return i.ToSecurityPoliciesInterfaceOutputWithContext(context.Background())
}

func (i *SecurityPoliciesInterface) ToSecurityPoliciesInterfaceOutputWithContext(ctx context.Context) SecurityPoliciesInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPoliciesInterfaceOutput)
}

type SecurityPoliciesInterfaceOutput struct{ *pulumi.OutputState }

func (SecurityPoliciesInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPoliciesInterface)(nil)).Elem()
}

func (o SecurityPoliciesInterfaceOutput) ToSecurityPoliciesInterfaceOutput() SecurityPoliciesInterfaceOutput {
	return o
}

func (o SecurityPoliciesInterfaceOutput) ToSecurityPoliciesInterfaceOutputWithContext(ctx context.Context) SecurityPoliciesInterfaceOutput {
	return o
}

// The geo-location where the resource lives
func (o SecurityPoliciesInterfaceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SecurityPoliciesInterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the Traffic Controller Security Policy
func (o SecurityPoliciesInterfaceOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// Provisioning State of Traffic Controller SecurityPolicy Resource
func (o SecurityPoliciesInterfaceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SecurityPoliciesInterfaceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SecurityPoliciesInterfaceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SecurityPoliciesInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Web Application Firewall Policy of the Traffic Controller Security Policy. Single Security Policy can have only one policy type set.
func (o SecurityPoliciesInterfaceOutput) WafPolicy() WafPolicyResponsePtrOutput {
	return o.ApplyT(func(v *SecurityPoliciesInterface) WafPolicyResponsePtrOutput { return v.WafPolicy }).(WafPolicyResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SecurityPoliciesInterfaceOutput{})
}
