// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231201preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A StandbyVirtualMachinePoolResource.
type StandbyVirtualMachinePool struct {
	pulumi.CustomResourceState

	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId pulumi.StringPtrOutput `pulumi:"attachedVirtualMachineScaleSetId"`
	// Specifies the elasticity profile of the standby virtual machine pools.
	ElasticityProfile StandbyVirtualMachinePoolElasticityProfileResponsePtrOutput `pulumi:"elasticityProfile"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the desired state of virtual machines in the pool.
	VirtualMachineState pulumi.StringOutput `pulumi:"virtualMachineState"`
}

// NewStandbyVirtualMachinePool registers a new resource with the given unique name, arguments, and options.
func NewStandbyVirtualMachinePool(ctx *pulumi.Context,
	name string, args *StandbyVirtualMachinePoolArgs, opts ...pulumi.ResourceOption) (*StandbyVirtualMachinePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VirtualMachineState == nil {
		return nil, errors.New("invalid value for required argument 'VirtualMachineState'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:standbypool:StandbyVirtualMachinePool"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StandbyVirtualMachinePool
	err := ctx.RegisterResource("azure-native:standbypool/v20231201preview:StandbyVirtualMachinePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStandbyVirtualMachinePool gets an existing StandbyVirtualMachinePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStandbyVirtualMachinePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StandbyVirtualMachinePoolState, opts ...pulumi.ResourceOption) (*StandbyVirtualMachinePool, error) {
	var resource StandbyVirtualMachinePool
	err := ctx.ReadResource("azure-native:standbypool/v20231201preview:StandbyVirtualMachinePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StandbyVirtualMachinePool resources.
type standbyVirtualMachinePoolState struct {
}

type StandbyVirtualMachinePoolState struct {
}

func (StandbyVirtualMachinePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*standbyVirtualMachinePoolState)(nil)).Elem()
}

type standbyVirtualMachinePoolArgs struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId *string `pulumi:"attachedVirtualMachineScaleSetId"`
	// Specifies the elasticity profile of the standby virtual machine pools.
	ElasticityProfile *StandbyVirtualMachinePoolElasticityProfile `pulumi:"elasticityProfile"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the standby virtual machine pool
	StandbyVirtualMachinePoolName *string `pulumi:"standbyVirtualMachinePoolName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the desired state of virtual machines in the pool.
	VirtualMachineState string `pulumi:"virtualMachineState"`
}

// The set of arguments for constructing a StandbyVirtualMachinePool resource.
type StandbyVirtualMachinePoolArgs struct {
	// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
	AttachedVirtualMachineScaleSetId pulumi.StringPtrInput
	// Specifies the elasticity profile of the standby virtual machine pools.
	ElasticityProfile StandbyVirtualMachinePoolElasticityProfilePtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Name of the standby virtual machine pool
	StandbyVirtualMachinePoolName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Specifies the desired state of virtual machines in the pool.
	VirtualMachineState pulumi.StringInput
}

func (StandbyVirtualMachinePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*standbyVirtualMachinePoolArgs)(nil)).Elem()
}

type StandbyVirtualMachinePoolInput interface {
	pulumi.Input

	ToStandbyVirtualMachinePoolOutput() StandbyVirtualMachinePoolOutput
	ToStandbyVirtualMachinePoolOutputWithContext(ctx context.Context) StandbyVirtualMachinePoolOutput
}

func (*StandbyVirtualMachinePool) ElementType() reflect.Type {
	return reflect.TypeOf((**StandbyVirtualMachinePool)(nil)).Elem()
}

func (i *StandbyVirtualMachinePool) ToStandbyVirtualMachinePoolOutput() StandbyVirtualMachinePoolOutput {
	return i.ToStandbyVirtualMachinePoolOutputWithContext(context.Background())
}

func (i *StandbyVirtualMachinePool) ToStandbyVirtualMachinePoolOutputWithContext(ctx context.Context) StandbyVirtualMachinePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandbyVirtualMachinePoolOutput)
}

type StandbyVirtualMachinePoolOutput struct{ *pulumi.OutputState }

func (StandbyVirtualMachinePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandbyVirtualMachinePool)(nil)).Elem()
}

func (o StandbyVirtualMachinePoolOutput) ToStandbyVirtualMachinePoolOutput() StandbyVirtualMachinePoolOutput {
	return o
}

func (o StandbyVirtualMachinePoolOutput) ToStandbyVirtualMachinePoolOutputWithContext(ctx context.Context) StandbyVirtualMachinePoolOutput {
	return o
}

// Specifies the fully qualified resource ID of a virtual machine scale set the pool is attached to.
func (o StandbyVirtualMachinePoolOutput) AttachedVirtualMachineScaleSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringPtrOutput { return v.AttachedVirtualMachineScaleSetId }).(pulumi.StringPtrOutput)
}

// Specifies the elasticity profile of the standby virtual machine pools.
func (o StandbyVirtualMachinePoolOutput) ElasticityProfile() StandbyVirtualMachinePoolElasticityProfileResponsePtrOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) StandbyVirtualMachinePoolElasticityProfileResponsePtrOutput {
		return v.ElasticityProfile
	}).(StandbyVirtualMachinePoolElasticityProfileResponsePtrOutput)
}

// The geo-location where the resource lives
func (o StandbyVirtualMachinePoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o StandbyVirtualMachinePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o StandbyVirtualMachinePoolOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o StandbyVirtualMachinePoolOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o StandbyVirtualMachinePoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o StandbyVirtualMachinePoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the desired state of virtual machines in the pool.
func (o StandbyVirtualMachinePoolOutput) VirtualMachineState() pulumi.StringOutput {
	return o.ApplyT(func(v *StandbyVirtualMachinePool) pulumi.StringOutput { return v.VirtualMachineState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(StandbyVirtualMachinePoolOutput{})
}
