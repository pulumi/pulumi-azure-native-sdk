// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241101preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Model that represents a Experiment resource.
type Experiment struct {
	pulumi.CustomResourceState

	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage CustomerDataStoragePropertiesResponsePtrOutput `pulumi:"customerDataStorage"`
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Most recent provisioning state for the given experiment resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// List of selectors.
	Selectors pulumi.ArrayOutput `pulumi:"selectors"`
	// List of steps.
	Steps ChaosExperimentStepResponseArrayOutput `pulumi:"steps"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewExperiment registers a new resource with the given unique name, arguments, and options.
func NewExperiment(ctx *pulumi.Context,
	name string, args *ExperimentArgs, opts ...pulumi.ResourceOption) (*Experiment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Selectors == nil {
		return nil, errors.New("invalid value for required argument 'Selectors'")
	}
	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:chaos:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20210915preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20220701preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20221001preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20230401preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20230415preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20230901preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20231027preview:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20231101:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20240101:Experiment"),
		},
		{
			Type: pulumi.String("azure-native:chaos/v20240322preview:Experiment"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Experiment
	err := ctx.RegisterResource("azure-native:chaos/v20241101preview:Experiment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExperiment gets an existing Experiment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExperiment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExperimentState, opts ...pulumi.ResourceOption) (*Experiment, error) {
	var resource Experiment
	err := ctx.ReadResource("azure-native:chaos/v20241101preview:Experiment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Experiment resources.
type experimentState struct {
}

type ExperimentState struct {
}

func (ExperimentState) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentState)(nil)).Elem()
}

type experimentArgs struct {
	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage *CustomerDataStorageProperties `pulumi:"customerDataStorage"`
	// String that represents a Experiment resource name.
	ExperimentName *string `pulumi:"experimentName"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// List of selectors.
	Selectors []interface{} `pulumi:"selectors"`
	// List of steps.
	Steps []ChaosExperimentStep `pulumi:"steps"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Experiment resource.
type ExperimentArgs struct {
	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage CustomerDataStoragePropertiesPtrInput
	// String that represents a Experiment resource name.
	ExperimentName pulumi.StringPtrInput
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// List of selectors.
	Selectors pulumi.ArrayInput
	// List of steps.
	Steps ChaosExperimentStepArrayInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ExperimentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*experimentArgs)(nil)).Elem()
}

type ExperimentInput interface {
	pulumi.Input

	ToExperimentOutput() ExperimentOutput
	ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput
}

func (*Experiment) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (i *Experiment) ToExperimentOutput() ExperimentOutput {
	return i.ToExperimentOutputWithContext(context.Background())
}

func (i *Experiment) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentOutput)
}

type ExperimentOutput struct{ *pulumi.OutputState }

func (ExperimentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Experiment)(nil)).Elem()
}

func (o ExperimentOutput) ToExperimentOutput() ExperimentOutput {
	return o
}

func (o ExperimentOutput) ToExperimentOutputWithContext(ctx context.Context) ExperimentOutput {
	return o
}

// Optional customer-managed Storage account where Experiment schema will be stored.
func (o ExperimentOutput) CustomerDataStorage() CustomerDataStoragePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *Experiment) CustomerDataStoragePropertiesResponsePtrOutput { return v.CustomerDataStorage }).(CustomerDataStoragePropertiesResponsePtrOutput)
}

// The managed service identities assigned to this resource.
func (o ExperimentOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *Experiment) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o ExperimentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o ExperimentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Most recent provisioning state for the given experiment resource.
func (o ExperimentOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of selectors.
func (o ExperimentOutput) Selectors() pulumi.ArrayOutput {
	return o.ApplyT(func(v *Experiment) pulumi.ArrayOutput { return v.Selectors }).(pulumi.ArrayOutput)
}

// List of steps.
func (o ExperimentOutput) Steps() ChaosExperimentStepResponseArrayOutput {
	return o.ApplyT(func(v *Experiment) ChaosExperimentStepResponseArrayOutput { return v.Steps }).(ChaosExperimentStepResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ExperimentOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Experiment) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ExperimentOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ExperimentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Experiment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ExperimentOutput{})
}
