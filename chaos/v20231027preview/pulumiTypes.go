// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231027preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Model that represents a branch in the step.
type Branch struct {
	// List of actions.
	Actions []interface{} `pulumi:"actions"`
	// String of the branch name.
	Name string `pulumi:"name"`
}

// BranchInput is an input type that accepts BranchArgs and BranchOutput values.
// You can construct a concrete instance of `BranchInput` via:
//
//	BranchArgs{...}
type BranchInput interface {
	pulumi.Input

	ToBranchOutput() BranchOutput
	ToBranchOutputWithContext(context.Context) BranchOutput
}

// Model that represents a branch in the step.
type BranchArgs struct {
	// List of actions.
	Actions pulumi.ArrayInput `pulumi:"actions"`
	// String of the branch name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (BranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Branch)(nil)).Elem()
}

func (i BranchArgs) ToBranchOutput() BranchOutput {
	return i.ToBranchOutputWithContext(context.Background())
}

func (i BranchArgs) ToBranchOutputWithContext(ctx context.Context) BranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchOutput)
}

func (i BranchArgs) ToOutput(ctx context.Context) pulumix.Output[Branch] {
	return pulumix.Output[Branch]{
		OutputState: i.ToBranchOutputWithContext(ctx).OutputState,
	}
}

// BranchArrayInput is an input type that accepts BranchArray and BranchArrayOutput values.
// You can construct a concrete instance of `BranchArrayInput` via:
//
//	BranchArray{ BranchArgs{...} }
type BranchArrayInput interface {
	pulumi.Input

	ToBranchArrayOutput() BranchArrayOutput
	ToBranchArrayOutputWithContext(context.Context) BranchArrayOutput
}

type BranchArray []BranchInput

func (BranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Branch)(nil)).Elem()
}

func (i BranchArray) ToBranchArrayOutput() BranchArrayOutput {
	return i.ToBranchArrayOutputWithContext(context.Background())
}

func (i BranchArray) ToBranchArrayOutputWithContext(ctx context.Context) BranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchArrayOutput)
}

func (i BranchArray) ToOutput(ctx context.Context) pulumix.Output[[]Branch] {
	return pulumix.Output[[]Branch]{
		OutputState: i.ToBranchArrayOutputWithContext(ctx).OutputState,
	}
}

// Model that represents a branch in the step.
type BranchOutput struct{ *pulumi.OutputState }

func (BranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Branch)(nil)).Elem()
}

func (o BranchOutput) ToBranchOutput() BranchOutput {
	return o
}

func (o BranchOutput) ToBranchOutputWithContext(ctx context.Context) BranchOutput {
	return o
}

func (o BranchOutput) ToOutput(ctx context.Context) pulumix.Output[Branch] {
	return pulumix.Output[Branch]{
		OutputState: o.OutputState,
	}
}

// List of actions.
func (o BranchOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v Branch) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// String of the branch name.
func (o BranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Branch) string { return v.Name }).(pulumi.StringOutput)
}

type BranchArrayOutput struct{ *pulumi.OutputState }

func (BranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Branch)(nil)).Elem()
}

func (o BranchArrayOutput) ToBranchArrayOutput() BranchArrayOutput {
	return o
}

func (o BranchArrayOutput) ToBranchArrayOutputWithContext(ctx context.Context) BranchArrayOutput {
	return o
}

func (o BranchArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Branch] {
	return pulumix.Output[[]Branch]{
		OutputState: o.OutputState,
	}
}

func (o BranchArrayOutput) Index(i pulumi.IntInput) BranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Branch {
		return vs[0].([]Branch)[vs[1].(int)]
	}).(BranchOutput)
}

// Model that represents a branch in the step.
type BranchResponse struct {
	// List of actions.
	Actions []interface{} `pulumi:"actions"`
	// String of the branch name.
	Name string `pulumi:"name"`
}

// Model that represents a branch in the step.
type BranchResponseOutput struct{ *pulumi.OutputState }

func (BranchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchResponse)(nil)).Elem()
}

func (o BranchResponseOutput) ToBranchResponseOutput() BranchResponseOutput {
	return o
}

func (o BranchResponseOutput) ToBranchResponseOutputWithContext(ctx context.Context) BranchResponseOutput {
	return o
}

func (o BranchResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BranchResponse] {
	return pulumix.Output[BranchResponse]{
		OutputState: o.OutputState,
	}
}

// List of actions.
func (o BranchResponseOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v BranchResponse) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// String of the branch name.
func (o BranchResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BranchResponse) string { return v.Name }).(pulumi.StringOutput)
}

type BranchResponseArrayOutput struct{ *pulumi.OutputState }

func (BranchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchResponse)(nil)).Elem()
}

func (o BranchResponseArrayOutput) ToBranchResponseArrayOutput() BranchResponseArrayOutput {
	return o
}

func (o BranchResponseArrayOutput) ToBranchResponseArrayOutputWithContext(ctx context.Context) BranchResponseArrayOutput {
	return o
}

func (o BranchResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BranchResponse] {
	return pulumix.Output[[]BranchResponse]{
		OutputState: o.OutputState,
	}
}

func (o BranchResponseArrayOutput) Index(i pulumi.IntInput) BranchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchResponse {
		return vs[0].([]BranchResponse)[vs[1].(int)]
	}).(BranchResponseOutput)
}

// Model that represents the Capability properties model.
type CapabilityPropertiesResponse struct {
	// Localized string of the description.
	Description string `pulumi:"description"`
	// URL to retrieve JSON schema of the Capability parameters.
	ParametersSchema string `pulumi:"parametersSchema"`
	// String of the Publisher that this Capability extends.
	Publisher string `pulumi:"publisher"`
	// String of the Target Type that this Capability extends.
	TargetType string `pulumi:"targetType"`
	// String of the URN for this Capability Type.
	Urn string `pulumi:"urn"`
}

// Model that represents the Capability properties model.
type CapabilityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CapabilityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapabilityPropertiesResponse)(nil)).Elem()
}

func (o CapabilityPropertiesResponseOutput) ToCapabilityPropertiesResponseOutput() CapabilityPropertiesResponseOutput {
	return o
}

func (o CapabilityPropertiesResponseOutput) ToCapabilityPropertiesResponseOutputWithContext(ctx context.Context) CapabilityPropertiesResponseOutput {
	return o
}

func (o CapabilityPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CapabilityPropertiesResponse] {
	return pulumix.Output[CapabilityPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Localized string of the description.
func (o CapabilityPropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityPropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// URL to retrieve JSON schema of the Capability parameters.
func (o CapabilityPropertiesResponseOutput) ParametersSchema() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityPropertiesResponse) string { return v.ParametersSchema }).(pulumi.StringOutput)
}

// String of the Publisher that this Capability extends.
func (o CapabilityPropertiesResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityPropertiesResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// String of the Target Type that this Capability extends.
func (o CapabilityPropertiesResponseOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityPropertiesResponse) string { return v.TargetType }).(pulumi.StringOutput)
}

// String of the URN for this Capability Type.
func (o CapabilityPropertiesResponseOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v CapabilityPropertiesResponse) string { return v.Urn }).(pulumi.StringOutput)
}

// Model that represents a continuous action.
type ContinuousAction struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePair `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum that discriminates between action models.
	// Expected value is 'continuous'.
	Type string `pulumi:"type"`
}

// Model that represents a continuous action.
type ContinuousActionResponse struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePairResponse `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum that discriminates between action models.
	// Expected value is 'continuous'.
	Type string `pulumi:"type"`
}

// Model that represents the Customer Managed Storage for an Experiment.
type CustomerDataStorageProperties struct {
	// Name of the Azure Blob Storage container to use or create.
	BlobContainerName *string `pulumi:"blobContainerName"`
	// ARM Resource ID of the Storage account to use for Customer Data storage.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

// CustomerDataStoragePropertiesInput is an input type that accepts CustomerDataStoragePropertiesArgs and CustomerDataStoragePropertiesOutput values.
// You can construct a concrete instance of `CustomerDataStoragePropertiesInput` via:
//
//	CustomerDataStoragePropertiesArgs{...}
type CustomerDataStoragePropertiesInput interface {
	pulumi.Input

	ToCustomerDataStoragePropertiesOutput() CustomerDataStoragePropertiesOutput
	ToCustomerDataStoragePropertiesOutputWithContext(context.Context) CustomerDataStoragePropertiesOutput
}

// Model that represents the Customer Managed Storage for an Experiment.
type CustomerDataStoragePropertiesArgs struct {
	// Name of the Azure Blob Storage container to use or create.
	BlobContainerName pulumi.StringPtrInput `pulumi:"blobContainerName"`
	// ARM Resource ID of the Storage account to use for Customer Data storage.
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
}

func (CustomerDataStoragePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerDataStorageProperties)(nil)).Elem()
}

func (i CustomerDataStoragePropertiesArgs) ToCustomerDataStoragePropertiesOutput() CustomerDataStoragePropertiesOutput {
	return i.ToCustomerDataStoragePropertiesOutputWithContext(context.Background())
}

func (i CustomerDataStoragePropertiesArgs) ToCustomerDataStoragePropertiesOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerDataStoragePropertiesOutput)
}

func (i CustomerDataStoragePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CustomerDataStorageProperties] {
	return pulumix.Output[CustomerDataStorageProperties]{
		OutputState: i.ToCustomerDataStoragePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CustomerDataStoragePropertiesArgs) ToCustomerDataStoragePropertiesPtrOutput() CustomerDataStoragePropertiesPtrOutput {
	return i.ToCustomerDataStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i CustomerDataStoragePropertiesArgs) ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerDataStoragePropertiesOutput).ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx)
}

// CustomerDataStoragePropertiesPtrInput is an input type that accepts CustomerDataStoragePropertiesArgs, CustomerDataStoragePropertiesPtr and CustomerDataStoragePropertiesPtrOutput values.
// You can construct a concrete instance of `CustomerDataStoragePropertiesPtrInput` via:
//
//	        CustomerDataStoragePropertiesArgs{...}
//
//	or:
//
//	        nil
type CustomerDataStoragePropertiesPtrInput interface {
	pulumi.Input

	ToCustomerDataStoragePropertiesPtrOutput() CustomerDataStoragePropertiesPtrOutput
	ToCustomerDataStoragePropertiesPtrOutputWithContext(context.Context) CustomerDataStoragePropertiesPtrOutput
}

type customerDataStoragePropertiesPtrType CustomerDataStoragePropertiesArgs

func CustomerDataStoragePropertiesPtr(v *CustomerDataStoragePropertiesArgs) CustomerDataStoragePropertiesPtrInput {
	return (*customerDataStoragePropertiesPtrType)(v)
}

func (*customerDataStoragePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerDataStorageProperties)(nil)).Elem()
}

func (i *customerDataStoragePropertiesPtrType) ToCustomerDataStoragePropertiesPtrOutput() CustomerDataStoragePropertiesPtrOutput {
	return i.ToCustomerDataStoragePropertiesPtrOutputWithContext(context.Background())
}

func (i *customerDataStoragePropertiesPtrType) ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerDataStoragePropertiesPtrOutput)
}

func (i *customerDataStoragePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomerDataStorageProperties] {
	return pulumix.Output[*CustomerDataStorageProperties]{
		OutputState: i.ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Model that represents the Customer Managed Storage for an Experiment.
type CustomerDataStoragePropertiesOutput struct{ *pulumi.OutputState }

func (CustomerDataStoragePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerDataStorageProperties)(nil)).Elem()
}

func (o CustomerDataStoragePropertiesOutput) ToCustomerDataStoragePropertiesOutput() CustomerDataStoragePropertiesOutput {
	return o
}

func (o CustomerDataStoragePropertiesOutput) ToCustomerDataStoragePropertiesOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesOutput {
	return o
}

func (o CustomerDataStoragePropertiesOutput) ToCustomerDataStoragePropertiesPtrOutput() CustomerDataStoragePropertiesPtrOutput {
	return o.ToCustomerDataStoragePropertiesPtrOutputWithContext(context.Background())
}

func (o CustomerDataStoragePropertiesOutput) ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerDataStorageProperties) *CustomerDataStorageProperties {
		return &v
	}).(CustomerDataStoragePropertiesPtrOutput)
}

func (o CustomerDataStoragePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerDataStorageProperties] {
	return pulumix.Output[CustomerDataStorageProperties]{
		OutputState: o.OutputState,
	}
}

// Name of the Azure Blob Storage container to use or create.
func (o CustomerDataStoragePropertiesOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerDataStorageProperties) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the Storage account to use for Customer Data storage.
func (o CustomerDataStoragePropertiesOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerDataStorageProperties) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type CustomerDataStoragePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CustomerDataStoragePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerDataStorageProperties)(nil)).Elem()
}

func (o CustomerDataStoragePropertiesPtrOutput) ToCustomerDataStoragePropertiesPtrOutput() CustomerDataStoragePropertiesPtrOutput {
	return o
}

func (o CustomerDataStoragePropertiesPtrOutput) ToCustomerDataStoragePropertiesPtrOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesPtrOutput {
	return o
}

func (o CustomerDataStoragePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerDataStorageProperties] {
	return pulumix.Output[*CustomerDataStorageProperties]{
		OutputState: o.OutputState,
	}
}

func (o CustomerDataStoragePropertiesPtrOutput) Elem() CustomerDataStoragePropertiesOutput {
	return o.ApplyT(func(v *CustomerDataStorageProperties) CustomerDataStorageProperties {
		if v != nil {
			return *v
		}
		var ret CustomerDataStorageProperties
		return ret
	}).(CustomerDataStoragePropertiesOutput)
}

// Name of the Azure Blob Storage container to use or create.
func (o CustomerDataStoragePropertiesPtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerDataStorageProperties) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the Storage account to use for Customer Data storage.
func (o CustomerDataStoragePropertiesPtrOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerDataStorageProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountResourceId
	}).(pulumi.StringPtrOutput)
}

// Model that represents the Customer Managed Storage for an Experiment.
type CustomerDataStoragePropertiesResponse struct {
	// Name of the Azure Blob Storage container to use or create.
	BlobContainerName *string `pulumi:"blobContainerName"`
	// ARM Resource ID of the Storage account to use for Customer Data storage.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

// Model that represents the Customer Managed Storage for an Experiment.
type CustomerDataStoragePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CustomerDataStoragePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerDataStoragePropertiesResponse)(nil)).Elem()
}

func (o CustomerDataStoragePropertiesResponseOutput) ToCustomerDataStoragePropertiesResponseOutput() CustomerDataStoragePropertiesResponseOutput {
	return o
}

func (o CustomerDataStoragePropertiesResponseOutput) ToCustomerDataStoragePropertiesResponseOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesResponseOutput {
	return o
}

func (o CustomerDataStoragePropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerDataStoragePropertiesResponse] {
	return pulumix.Output[CustomerDataStoragePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the Azure Blob Storage container to use or create.
func (o CustomerDataStoragePropertiesResponseOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerDataStoragePropertiesResponse) *string { return v.BlobContainerName }).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the Storage account to use for Customer Data storage.
func (o CustomerDataStoragePropertiesResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerDataStoragePropertiesResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type CustomerDataStoragePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomerDataStoragePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerDataStoragePropertiesResponse)(nil)).Elem()
}

func (o CustomerDataStoragePropertiesResponsePtrOutput) ToCustomerDataStoragePropertiesResponsePtrOutput() CustomerDataStoragePropertiesResponsePtrOutput {
	return o
}

func (o CustomerDataStoragePropertiesResponsePtrOutput) ToCustomerDataStoragePropertiesResponsePtrOutputWithContext(ctx context.Context) CustomerDataStoragePropertiesResponsePtrOutput {
	return o
}

func (o CustomerDataStoragePropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerDataStoragePropertiesResponse] {
	return pulumix.Output[*CustomerDataStoragePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomerDataStoragePropertiesResponsePtrOutput) Elem() CustomerDataStoragePropertiesResponseOutput {
	return o.ApplyT(func(v *CustomerDataStoragePropertiesResponse) CustomerDataStoragePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CustomerDataStoragePropertiesResponse
		return ret
	}).(CustomerDataStoragePropertiesResponseOutput)
}

// Name of the Azure Blob Storage container to use or create.
func (o CustomerDataStoragePropertiesResponsePtrOutput) BlobContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerDataStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobContainerName
	}).(pulumi.StringPtrOutput)
}

// ARM Resource ID of the Storage account to use for Customer Data storage.
func (o CustomerDataStoragePropertiesResponsePtrOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerDataStoragePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountResourceId
	}).(pulumi.StringPtrOutput)
}

// Model that represents a delay action.
type DelayAction struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// Enum that discriminates between action models.
	// Expected value is 'delay'.
	Type string `pulumi:"type"`
}

// Model that represents a delay action.
type DelayActionResponse struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// Enum that discriminates between action models.
	// Expected value is 'delay'.
	Type string `pulumi:"type"`
}

// Model that represents a discrete action.
type DiscreteAction struct {
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePair `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum that discriminates between action models.
	// Expected value is 'discrete'.
	Type string `pulumi:"type"`
}

// Model that represents a discrete action.
type DiscreteActionResponse struct {
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePairResponse `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum that discriminates between action models.
	// Expected value is 'discrete'.
	Type string `pulumi:"type"`
}

// Model that represents the Experiment properties model.
type ExperimentProperties struct {
	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage *CustomerDataStorageProperties `pulumi:"customerDataStorage"`
	// List of selectors.
	Selectors []interface{} `pulumi:"selectors"`
	// List of steps.
	Steps []Step `pulumi:"steps"`
}

// ExperimentPropertiesInput is an input type that accepts ExperimentPropertiesArgs and ExperimentPropertiesOutput values.
// You can construct a concrete instance of `ExperimentPropertiesInput` via:
//
//	ExperimentPropertiesArgs{...}
type ExperimentPropertiesInput interface {
	pulumi.Input

	ToExperimentPropertiesOutput() ExperimentPropertiesOutput
	ToExperimentPropertiesOutputWithContext(context.Context) ExperimentPropertiesOutput
}

// Model that represents the Experiment properties model.
type ExperimentPropertiesArgs struct {
	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage CustomerDataStoragePropertiesPtrInput `pulumi:"customerDataStorage"`
	// List of selectors.
	Selectors pulumi.ArrayInput `pulumi:"selectors"`
	// List of steps.
	Steps StepArrayInput `pulumi:"steps"`
}

func (ExperimentPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentProperties)(nil)).Elem()
}

func (i ExperimentPropertiesArgs) ToExperimentPropertiesOutput() ExperimentPropertiesOutput {
	return i.ToExperimentPropertiesOutputWithContext(context.Background())
}

func (i ExperimentPropertiesArgs) ToExperimentPropertiesOutputWithContext(ctx context.Context) ExperimentPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExperimentPropertiesOutput)
}

func (i ExperimentPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[ExperimentProperties] {
	return pulumix.Output[ExperimentProperties]{
		OutputState: i.ToExperimentPropertiesOutputWithContext(ctx).OutputState,
	}
}

// Model that represents the Experiment properties model.
type ExperimentPropertiesOutput struct{ *pulumi.OutputState }

func (ExperimentPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentProperties)(nil)).Elem()
}

func (o ExperimentPropertiesOutput) ToExperimentPropertiesOutput() ExperimentPropertiesOutput {
	return o
}

func (o ExperimentPropertiesOutput) ToExperimentPropertiesOutputWithContext(ctx context.Context) ExperimentPropertiesOutput {
	return o
}

func (o ExperimentPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentProperties] {
	return pulumix.Output[ExperimentProperties]{
		OutputState: o.OutputState,
	}
}

// Optional customer-managed Storage account where Experiment schema will be stored.
func (o ExperimentPropertiesOutput) CustomerDataStorage() CustomerDataStoragePropertiesPtrOutput {
	return o.ApplyT(func(v ExperimentProperties) *CustomerDataStorageProperties { return v.CustomerDataStorage }).(CustomerDataStoragePropertiesPtrOutput)
}

// List of selectors.
func (o ExperimentPropertiesOutput) Selectors() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExperimentProperties) []interface{} { return v.Selectors }).(pulumi.ArrayOutput)
}

// List of steps.
func (o ExperimentPropertiesOutput) Steps() StepArrayOutput {
	return o.ApplyT(func(v ExperimentProperties) []Step { return v.Steps }).(StepArrayOutput)
}

// Model that represents the Experiment properties model.
type ExperimentPropertiesResponse struct {
	// Optional customer-managed Storage account where Experiment schema will be stored.
	CustomerDataStorage *CustomerDataStoragePropertiesResponse `pulumi:"customerDataStorage"`
	// Most recent provisioning state for the given experiment resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// List of selectors.
	Selectors []interface{} `pulumi:"selectors"`
	// List of steps.
	Steps []StepResponse `pulumi:"steps"`
}

// Model that represents the Experiment properties model.
type ExperimentPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExperimentPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentPropertiesResponse)(nil)).Elem()
}

func (o ExperimentPropertiesResponseOutput) ToExperimentPropertiesResponseOutput() ExperimentPropertiesResponseOutput {
	return o
}

func (o ExperimentPropertiesResponseOutput) ToExperimentPropertiesResponseOutputWithContext(ctx context.Context) ExperimentPropertiesResponseOutput {
	return o
}

func (o ExperimentPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExperimentPropertiesResponse] {
	return pulumix.Output[ExperimentPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Optional customer-managed Storage account where Experiment schema will be stored.
func (o ExperimentPropertiesResponseOutput) CustomerDataStorage() CustomerDataStoragePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ExperimentPropertiesResponse) *CustomerDataStoragePropertiesResponse {
		return v.CustomerDataStorage
	}).(CustomerDataStoragePropertiesResponsePtrOutput)
}

// Most recent provisioning state for the given experiment resource.
func (o ExperimentPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// List of selectors.
func (o ExperimentPropertiesResponseOutput) Selectors() pulumi.ArrayOutput {
	return o.ApplyT(func(v ExperimentPropertiesResponse) []interface{} { return v.Selectors }).(pulumi.ArrayOutput)
}

// List of steps.
func (o ExperimentPropertiesResponseOutput) Steps() StepResponseArrayOutput {
	return o.ApplyT(func(v ExperimentPropertiesResponse) []StepResponse { return v.Steps }).(StepResponseArrayOutput)
}

// A map to describe the settings of an action.
type KeyValuePair struct {
	// The name of the setting for the action.
	Key string `pulumi:"key"`
	// The value of the setting for the action.
	Value string `pulumi:"value"`
}

// A map to describe the settings of an action.
type KeyValuePairResponse struct {
	// The name of the setting for the action.
	Key string `pulumi:"key"`
	// The value of the setting for the action.
	Value string `pulumi:"value"`
}

// Model that represents a list selector.
type ListSelector struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *SimpleFilter `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// List of Target references.
	Targets []TargetReference `pulumi:"targets"`
	// Enum of the selector type.
	// Expected value is 'List'.
	Type string `pulumi:"type"`
}

// Model that represents a list selector.
type ListSelectorResponse struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *SimpleFilterResponse `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// List of Target references.
	Targets []TargetReferenceResponse `pulumi:"targets"`
	// Enum of the selector type.
	// Expected value is 'List'.
	Type string `pulumi:"type"`
}

// Model that represents a query selector.
type QuerySelector struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *SimpleFilter `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// Azure Resource Graph (ARG) Query Language query for target resources.
	QueryString string `pulumi:"queryString"`
	// Subscription id list to scope resource query.
	SubscriptionIds []string `pulumi:"subscriptionIds"`
	// Enum of the selector type.
	// Expected value is 'Query'.
	Type string `pulumi:"type"`
}

// Model that represents a query selector.
type QuerySelectorResponse struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *SimpleFilterResponse `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// Azure Resource Graph (ARG) Query Language query for target resources.
	QueryString string `pulumi:"queryString"`
	// Subscription id list to scope resource query.
	SubscriptionIds []string `pulumi:"subscriptionIds"`
	// Enum of the selector type.
	// Expected value is 'Query'.
	Type string `pulumi:"type"`
}

// The identity of a resource.
type ResourceIdentity struct {
	// String of the resource identity type.
	Type ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ResourceIdentityInput is an input type that accepts ResourceIdentityArgs and ResourceIdentityOutput values.
// You can construct a concrete instance of `ResourceIdentityInput` via:
//
//	ResourceIdentityArgs{...}
type ResourceIdentityInput interface {
	pulumi.Input

	ToResourceIdentityOutput() ResourceIdentityOutput
	ToResourceIdentityOutputWithContext(context.Context) ResourceIdentityOutput
}

// The identity of a resource.
type ResourceIdentityArgs struct {
	// String of the resource identity type.
	Type ResourceIdentityTypeInput `pulumi:"type"`
	// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentity)(nil)).Elem()
}

func (i ResourceIdentityArgs) ToResourceIdentityOutput() ResourceIdentityOutput {
	return i.ToResourceIdentityOutputWithContext(context.Background())
}

func (i ResourceIdentityArgs) ToResourceIdentityOutputWithContext(ctx context.Context) ResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityOutput)
}

func (i ResourceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceIdentity] {
	return pulumix.Output[ResourceIdentity]{
		OutputState: i.ToResourceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ResourceIdentityArgs) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return i.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (i ResourceIdentityArgs) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityOutput).ToResourceIdentityPtrOutputWithContext(ctx)
}

// ResourceIdentityPtrInput is an input type that accepts ResourceIdentityArgs, ResourceIdentityPtr and ResourceIdentityPtrOutput values.
// You can construct a concrete instance of `ResourceIdentityPtrInput` via:
//
//	        ResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type ResourceIdentityPtrInput interface {
	pulumi.Input

	ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput
	ToResourceIdentityPtrOutputWithContext(context.Context) ResourceIdentityPtrOutput
}

type resourceIdentityPtrType ResourceIdentityArgs

func ResourceIdentityPtr(v *ResourceIdentityArgs) ResourceIdentityPtrInput {
	return (*resourceIdentityPtrType)(v)
}

func (*resourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentity)(nil)).Elem()
}

func (i *resourceIdentityPtrType) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return i.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *resourceIdentityPtrType) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdentityPtrOutput)
}

func (i *resourceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ResourceIdentity] {
	return pulumix.Output[*ResourceIdentity]{
		OutputState: i.ToResourceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// The identity of a resource.
type ResourceIdentityOutput struct{ *pulumi.OutputState }

func (ResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentity)(nil)).Elem()
}

func (o ResourceIdentityOutput) ToResourceIdentityOutput() ResourceIdentityOutput {
	return o
}

func (o ResourceIdentityOutput) ToResourceIdentityOutputWithContext(ctx context.Context) ResourceIdentityOutput {
	return o
}

func (o ResourceIdentityOutput) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return o.ToResourceIdentityPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityOutput) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentity) *ResourceIdentity {
		return &v
	}).(ResourceIdentityPtrOutput)
}

func (o ResourceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceIdentity] {
	return pulumix.Output[ResourceIdentity]{
		OutputState: o.OutputState,
	}
}

// String of the resource identity type.
func (o ResourceIdentityOutput) Type() ResourceIdentityTypeOutput {
	return o.ApplyT(func(v ResourceIdentity) ResourceIdentityType { return v.Type }).(ResourceIdentityTypeOutput)
}

// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentity)(nil)).Elem()
}

func (o ResourceIdentityPtrOutput) ToResourceIdentityPtrOutput() ResourceIdentityPtrOutput {
	return o
}

func (o ResourceIdentityPtrOutput) ToResourceIdentityPtrOutputWithContext(ctx context.Context) ResourceIdentityPtrOutput {
	return o
}

func (o ResourceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceIdentity] {
	return pulumix.Output[*ResourceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ResourceIdentityPtrOutput) Elem() ResourceIdentityOutput {
	return o.ApplyT(func(v *ResourceIdentity) ResourceIdentity {
		if v != nil {
			return *v
		}
		var ret ResourceIdentity
		return ret
	}).(ResourceIdentityOutput)
}

// String of the resource identity type.
func (o ResourceIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ResourceIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// The identity of a resource.
type ResourceIdentityResponse struct {
	// GUID that represents the principal ID of this resource identity.
	PrincipalId string `pulumi:"principalId"`
	// GUID that represents the tenant ID of this resource identity.
	TenantId string `pulumi:"tenantId"`
	// String of the resource identity type.
	Type string `pulumi:"type"`
	// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// The identity of a resource.
type ResourceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityResponse)(nil)).Elem()
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutput() ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutputWithContext(ctx context.Context) ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceIdentityResponse] {
	return pulumix.Output[ResourceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// GUID that represents the principal ID of this resource identity.
func (o ResourceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// GUID that represents the tenant ID of this resource identity.
func (o ResourceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// String of the resource identity type.
func (o ResourceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ResourceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ResourceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityResponse)(nil)).Elem()
}

func (o ResourceIdentityResponsePtrOutput) ToResourceIdentityResponsePtrOutput() ResourceIdentityResponsePtrOutput {
	return o
}

func (o ResourceIdentityResponsePtrOutput) ToResourceIdentityResponsePtrOutputWithContext(ctx context.Context) ResourceIdentityResponsePtrOutput {
	return o
}

func (o ResourceIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceIdentityResponse] {
	return pulumix.Output[*ResourceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ResourceIdentityResponsePtrOutput) Elem() ResourceIdentityResponseOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) ResourceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityResponse
		return ret
	}).(ResourceIdentityResponseOutput)
}

// GUID that represents the principal ID of this resource identity.
func (o ResourceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// GUID that represents the tenant ID of this resource identity.
func (o ResourceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// String of the resource identity type.
func (o ResourceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the Experiment. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o ResourceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ResourceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Model that represents a simple target filter.
type SimpleFilter struct {
	// Model that represents the Simple filter parameters.
	Parameters *SimpleFilterParameters `pulumi:"parameters"`
	// Enum that discriminates between filter types. Currently only `Simple` type is supported.
	// Expected value is 'Simple'.
	Type string `pulumi:"type"`
}

// Model that represents the Simple filter parameters.
type SimpleFilterParameters struct {
	// List of Azure availability zones to filter targets by.
	Zones []string `pulumi:"zones"`
}

// Model that represents the Simple filter parameters.
type SimpleFilterParametersResponse struct {
	// List of Azure availability zones to filter targets by.
	Zones []string `pulumi:"zones"`
}

// Model that represents a simple target filter.
type SimpleFilterResponse struct {
	// Model that represents the Simple filter parameters.
	Parameters *SimpleFilterParametersResponse `pulumi:"parameters"`
	// Enum that discriminates between filter types. Currently only `Simple` type is supported.
	// Expected value is 'Simple'.
	Type string `pulumi:"type"`
}

// Model that represents a step in the Experiment resource.
type Step struct {
	// List of branches.
	Branches []Branch `pulumi:"branches"`
	// String of the step name.
	Name string `pulumi:"name"`
}

// StepInput is an input type that accepts StepArgs and StepOutput values.
// You can construct a concrete instance of `StepInput` via:
//
//	StepArgs{...}
type StepInput interface {
	pulumi.Input

	ToStepOutput() StepOutput
	ToStepOutputWithContext(context.Context) StepOutput
}

// Model that represents a step in the Experiment resource.
type StepArgs struct {
	// List of branches.
	Branches BranchArrayInput `pulumi:"branches"`
	// String of the step name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (StepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (i StepArgs) ToStepOutput() StepOutput {
	return i.ToStepOutputWithContext(context.Background())
}

func (i StepArgs) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepOutput)
}

func (i StepArgs) ToOutput(ctx context.Context) pulumix.Output[Step] {
	return pulumix.Output[Step]{
		OutputState: i.ToStepOutputWithContext(ctx).OutputState,
	}
}

// StepArrayInput is an input type that accepts StepArray and StepArrayOutput values.
// You can construct a concrete instance of `StepArrayInput` via:
//
//	StepArray{ StepArgs{...} }
type StepArrayInput interface {
	pulumi.Input

	ToStepArrayOutput() StepArrayOutput
	ToStepArrayOutputWithContext(context.Context) StepArrayOutput
}

type StepArray []StepInput

func (StepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (i StepArray) ToStepArrayOutput() StepArrayOutput {
	return i.ToStepArrayOutputWithContext(context.Background())
}

func (i StepArray) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepArrayOutput)
}

func (i StepArray) ToOutput(ctx context.Context) pulumix.Output[[]Step] {
	return pulumix.Output[[]Step]{
		OutputState: i.ToStepArrayOutputWithContext(ctx).OutputState,
	}
}

// Model that represents a step in the Experiment resource.
type StepOutput struct{ *pulumi.OutputState }

func (StepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (o StepOutput) ToStepOutput() StepOutput {
	return o
}

func (o StepOutput) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return o
}

func (o StepOutput) ToOutput(ctx context.Context) pulumix.Output[Step] {
	return pulumix.Output[Step]{
		OutputState: o.OutputState,
	}
}

// List of branches.
func (o StepOutput) Branches() BranchArrayOutput {
	return o.ApplyT(func(v Step) []Branch { return v.Branches }).(BranchArrayOutput)
}

// String of the step name.
func (o StepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Step) string { return v.Name }).(pulumi.StringOutput)
}

type StepArrayOutput struct{ *pulumi.OutputState }

func (StepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (o StepArrayOutput) ToStepArrayOutput() StepArrayOutput {
	return o
}

func (o StepArrayOutput) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return o
}

func (o StepArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Step] {
	return pulumix.Output[[]Step]{
		OutputState: o.OutputState,
	}
}

func (o StepArrayOutput) Index(i pulumi.IntInput) StepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Step {
		return vs[0].([]Step)[vs[1].(int)]
	}).(StepOutput)
}

// Model that represents a step in the Experiment resource.
type StepResponse struct {
	// List of branches.
	Branches []BranchResponse `pulumi:"branches"`
	// String of the step name.
	Name string `pulumi:"name"`
}

// Model that represents a step in the Experiment resource.
type StepResponseOutput struct{ *pulumi.OutputState }

func (StepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepResponse)(nil)).Elem()
}

func (o StepResponseOutput) ToStepResponseOutput() StepResponseOutput {
	return o
}

func (o StepResponseOutput) ToStepResponseOutputWithContext(ctx context.Context) StepResponseOutput {
	return o
}

func (o StepResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StepResponse] {
	return pulumix.Output[StepResponse]{
		OutputState: o.OutputState,
	}
}

// List of branches.
func (o StepResponseOutput) Branches() BranchResponseArrayOutput {
	return o.ApplyT(func(v StepResponse) []BranchResponse { return v.Branches }).(BranchResponseArrayOutput)
}

// String of the step name.
func (o StepResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Name }).(pulumi.StringOutput)
}

type StepResponseArrayOutput struct{ *pulumi.OutputState }

func (StepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepResponse)(nil)).Elem()
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutput() StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutputWithContext(ctx context.Context) StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StepResponse] {
	return pulumix.Output[[]StepResponse]{
		OutputState: o.OutputState,
	}
}

func (o StepResponseArrayOutput) Index(i pulumi.IntInput) StepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepResponse {
		return vs[0].([]StepResponse)[vs[1].(int)]
	}).(StepResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Model that represents a reference to a Target in the selector.
type TargetReference struct {
	// String of the resource ID of a Target resource.
	Id string `pulumi:"id"`
	// Enum of the Target reference type.
	Type string `pulumi:"type"`
}

// Model that represents a reference to a Target in the selector.
type TargetReferenceResponse struct {
	// String of the resource ID of a Target resource.
	Id string `pulumi:"id"`
	// Enum of the Target reference type.
	Type string `pulumi:"type"`
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BranchOutput{})
	pulumi.RegisterOutputType(BranchArrayOutput{})
	pulumi.RegisterOutputType(BranchResponseOutput{})
	pulumi.RegisterOutputType(BranchResponseArrayOutput{})
	pulumi.RegisterOutputType(CapabilityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CustomerDataStoragePropertiesOutput{})
	pulumi.RegisterOutputType(CustomerDataStoragePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CustomerDataStoragePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CustomerDataStoragePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ExperimentPropertiesOutput{})
	pulumi.RegisterOutputType(ExperimentPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdentityOutput{})
	pulumi.RegisterOutputType(ResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(StepOutput{})
	pulumi.RegisterOutputType(StepArrayOutput{})
	pulumi.RegisterOutputType(StepResponseOutput{})
	pulumi.RegisterOutputType(StepResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
