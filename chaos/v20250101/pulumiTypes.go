// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Model that represents the an action and its status.
type ActionStatusResponse struct {
	// The id of the action status.
	ActionId string `pulumi:"actionId"`
	// The name of the action status.
	ActionName string `pulumi:"actionName"`
	// String that represents the end time of the action.
	EndTime string `pulumi:"endTime"`
	// String that represents the start time of the action.
	StartTime string `pulumi:"startTime"`
	// The status of the action.
	Status string `pulumi:"status"`
	// The array of targets.
	Targets []ExperimentExecutionActionTargetDetailsPropertiesResponse `pulumi:"targets"`
}

// Model that represents the an action and its status.
type ActionStatusResponseOutput struct{ *pulumi.OutputState }

func (ActionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionStatusResponse)(nil)).Elem()
}

func (o ActionStatusResponseOutput) ToActionStatusResponseOutput() ActionStatusResponseOutput {
	return o
}

func (o ActionStatusResponseOutput) ToActionStatusResponseOutputWithContext(ctx context.Context) ActionStatusResponseOutput {
	return o
}

// The id of the action status.
func (o ActionStatusResponseOutput) ActionId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionStatusResponse) string { return v.ActionId }).(pulumi.StringOutput)
}

// The name of the action status.
func (o ActionStatusResponseOutput) ActionName() pulumi.StringOutput {
	return o.ApplyT(func(v ActionStatusResponse) string { return v.ActionName }).(pulumi.StringOutput)
}

// String that represents the end time of the action.
func (o ActionStatusResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v ActionStatusResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// String that represents the start time of the action.
func (o ActionStatusResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ActionStatusResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The status of the action.
func (o ActionStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ActionStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The array of targets.
func (o ActionStatusResponseOutput) Targets() ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput {
	return o.ApplyT(func(v ActionStatusResponse) []ExperimentExecutionActionTargetDetailsPropertiesResponse {
		return v.Targets
	}).(ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput)
}

type ActionStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (ActionStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionStatusResponse)(nil)).Elem()
}

func (o ActionStatusResponseArrayOutput) ToActionStatusResponseArrayOutput() ActionStatusResponseArrayOutput {
	return o
}

func (o ActionStatusResponseArrayOutput) ToActionStatusResponseArrayOutputWithContext(ctx context.Context) ActionStatusResponseArrayOutput {
	return o
}

func (o ActionStatusResponseArrayOutput) Index(i pulumi.IntInput) ActionStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionStatusResponse {
		return vs[0].([]ActionStatusResponse)[vs[1].(int)]
	}).(ActionStatusResponseOutput)
}

// Model that represents the a list of actions and action statuses.
type BranchStatusResponse struct {
	// The array of actions.
	Actions []ActionStatusResponse `pulumi:"actions"`
	// The id of the branch status.
	BranchId string `pulumi:"branchId"`
	// The name of the branch status.
	BranchName string `pulumi:"branchName"`
	// The status of the branch.
	Status string `pulumi:"status"`
}

// Model that represents the a list of actions and action statuses.
type BranchStatusResponseOutput struct{ *pulumi.OutputState }

func (BranchStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchStatusResponse)(nil)).Elem()
}

func (o BranchStatusResponseOutput) ToBranchStatusResponseOutput() BranchStatusResponseOutput {
	return o
}

func (o BranchStatusResponseOutput) ToBranchStatusResponseOutputWithContext(ctx context.Context) BranchStatusResponseOutput {
	return o
}

// The array of actions.
func (o BranchStatusResponseOutput) Actions() ActionStatusResponseArrayOutput {
	return o.ApplyT(func(v BranchStatusResponse) []ActionStatusResponse { return v.Actions }).(ActionStatusResponseArrayOutput)
}

// The id of the branch status.
func (o BranchStatusResponseOutput) BranchId() pulumi.StringOutput {
	return o.ApplyT(func(v BranchStatusResponse) string { return v.BranchId }).(pulumi.StringOutput)
}

// The name of the branch status.
func (o BranchStatusResponseOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v BranchStatusResponse) string { return v.BranchName }).(pulumi.StringOutput)
}

// The status of the branch.
func (o BranchStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BranchStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

type BranchStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (BranchStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchStatusResponse)(nil)).Elem()
}

func (o BranchStatusResponseArrayOutput) ToBranchStatusResponseArrayOutput() BranchStatusResponseArrayOutput {
	return o
}

func (o BranchStatusResponseArrayOutput) ToBranchStatusResponseArrayOutputWithContext(ctx context.Context) BranchStatusResponseArrayOutput {
	return o
}

func (o BranchStatusResponseArrayOutput) Index(i pulumi.IntInput) BranchStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchStatusResponse {
		return vs[0].([]BranchStatusResponse)[vs[1].(int)]
	}).(BranchStatusResponseOutput)
}

// Model that represents a branch in the step. 9 total per experiment.
type ChaosExperimentBranch struct {
	// List of actions.
	Actions []interface{} `pulumi:"actions"`
	// String of the branch name.
	Name string `pulumi:"name"`
}

// ChaosExperimentBranchInput is an input type that accepts ChaosExperimentBranchArgs and ChaosExperimentBranchOutput values.
// You can construct a concrete instance of `ChaosExperimentBranchInput` via:
//
//	ChaosExperimentBranchArgs{...}
type ChaosExperimentBranchInput interface {
	pulumi.Input

	ToChaosExperimentBranchOutput() ChaosExperimentBranchOutput
	ToChaosExperimentBranchOutputWithContext(context.Context) ChaosExperimentBranchOutput
}

// Model that represents a branch in the step. 9 total per experiment.
type ChaosExperimentBranchArgs struct {
	// List of actions.
	Actions pulumi.ArrayInput `pulumi:"actions"`
	// String of the branch name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ChaosExperimentBranchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentBranch)(nil)).Elem()
}

func (i ChaosExperimentBranchArgs) ToChaosExperimentBranchOutput() ChaosExperimentBranchOutput {
	return i.ToChaosExperimentBranchOutputWithContext(context.Background())
}

func (i ChaosExperimentBranchArgs) ToChaosExperimentBranchOutputWithContext(ctx context.Context) ChaosExperimentBranchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosExperimentBranchOutput)
}

// ChaosExperimentBranchArrayInput is an input type that accepts ChaosExperimentBranchArray and ChaosExperimentBranchArrayOutput values.
// You can construct a concrete instance of `ChaosExperimentBranchArrayInput` via:
//
//	ChaosExperimentBranchArray{ ChaosExperimentBranchArgs{...} }
type ChaosExperimentBranchArrayInput interface {
	pulumi.Input

	ToChaosExperimentBranchArrayOutput() ChaosExperimentBranchArrayOutput
	ToChaosExperimentBranchArrayOutputWithContext(context.Context) ChaosExperimentBranchArrayOutput
}

type ChaosExperimentBranchArray []ChaosExperimentBranchInput

func (ChaosExperimentBranchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentBranch)(nil)).Elem()
}

func (i ChaosExperimentBranchArray) ToChaosExperimentBranchArrayOutput() ChaosExperimentBranchArrayOutput {
	return i.ToChaosExperimentBranchArrayOutputWithContext(context.Background())
}

func (i ChaosExperimentBranchArray) ToChaosExperimentBranchArrayOutputWithContext(ctx context.Context) ChaosExperimentBranchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosExperimentBranchArrayOutput)
}

// Model that represents a branch in the step. 9 total per experiment.
type ChaosExperimentBranchOutput struct{ *pulumi.OutputState }

func (ChaosExperimentBranchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentBranch)(nil)).Elem()
}

func (o ChaosExperimentBranchOutput) ToChaosExperimentBranchOutput() ChaosExperimentBranchOutput {
	return o
}

func (o ChaosExperimentBranchOutput) ToChaosExperimentBranchOutputWithContext(ctx context.Context) ChaosExperimentBranchOutput {
	return o
}

// List of actions.
func (o ChaosExperimentBranchOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChaosExperimentBranch) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// String of the branch name.
func (o ChaosExperimentBranchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosExperimentBranch) string { return v.Name }).(pulumi.StringOutput)
}

type ChaosExperimentBranchArrayOutput struct{ *pulumi.OutputState }

func (ChaosExperimentBranchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentBranch)(nil)).Elem()
}

func (o ChaosExperimentBranchArrayOutput) ToChaosExperimentBranchArrayOutput() ChaosExperimentBranchArrayOutput {
	return o
}

func (o ChaosExperimentBranchArrayOutput) ToChaosExperimentBranchArrayOutputWithContext(ctx context.Context) ChaosExperimentBranchArrayOutput {
	return o
}

func (o ChaosExperimentBranchArrayOutput) Index(i pulumi.IntInput) ChaosExperimentBranchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChaosExperimentBranch {
		return vs[0].([]ChaosExperimentBranch)[vs[1].(int)]
	}).(ChaosExperimentBranchOutput)
}

// Model that represents a branch in the step. 9 total per experiment.
type ChaosExperimentBranchResponse struct {
	// List of actions.
	Actions []interface{} `pulumi:"actions"`
	// String of the branch name.
	Name string `pulumi:"name"`
}

// Model that represents a branch in the step. 9 total per experiment.
type ChaosExperimentBranchResponseOutput struct{ *pulumi.OutputState }

func (ChaosExperimentBranchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentBranchResponse)(nil)).Elem()
}

func (o ChaosExperimentBranchResponseOutput) ToChaosExperimentBranchResponseOutput() ChaosExperimentBranchResponseOutput {
	return o
}

func (o ChaosExperimentBranchResponseOutput) ToChaosExperimentBranchResponseOutputWithContext(ctx context.Context) ChaosExperimentBranchResponseOutput {
	return o
}

// List of actions.
func (o ChaosExperimentBranchResponseOutput) Actions() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChaosExperimentBranchResponse) []interface{} { return v.Actions }).(pulumi.ArrayOutput)
}

// String of the branch name.
func (o ChaosExperimentBranchResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosExperimentBranchResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ChaosExperimentBranchResponseArrayOutput struct{ *pulumi.OutputState }

func (ChaosExperimentBranchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentBranchResponse)(nil)).Elem()
}

func (o ChaosExperimentBranchResponseArrayOutput) ToChaosExperimentBranchResponseArrayOutput() ChaosExperimentBranchResponseArrayOutput {
	return o
}

func (o ChaosExperimentBranchResponseArrayOutput) ToChaosExperimentBranchResponseArrayOutputWithContext(ctx context.Context) ChaosExperimentBranchResponseArrayOutput {
	return o
}

func (o ChaosExperimentBranchResponseArrayOutput) Index(i pulumi.IntInput) ChaosExperimentBranchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChaosExperimentBranchResponse {
		return vs[0].([]ChaosExperimentBranchResponse)[vs[1].(int)]
	}).(ChaosExperimentBranchResponseOutput)
}

// Model that represents a step in the Experiment resource.
type ChaosExperimentStep struct {
	// List of branches.
	Branches []ChaosExperimentBranch `pulumi:"branches"`
	// String of the step name.
	Name string `pulumi:"name"`
}

// ChaosExperimentStepInput is an input type that accepts ChaosExperimentStepArgs and ChaosExperimentStepOutput values.
// You can construct a concrete instance of `ChaosExperimentStepInput` via:
//
//	ChaosExperimentStepArgs{...}
type ChaosExperimentStepInput interface {
	pulumi.Input

	ToChaosExperimentStepOutput() ChaosExperimentStepOutput
	ToChaosExperimentStepOutputWithContext(context.Context) ChaosExperimentStepOutput
}

// Model that represents a step in the Experiment resource.
type ChaosExperimentStepArgs struct {
	// List of branches.
	Branches ChaosExperimentBranchArrayInput `pulumi:"branches"`
	// String of the step name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ChaosExperimentStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentStep)(nil)).Elem()
}

func (i ChaosExperimentStepArgs) ToChaosExperimentStepOutput() ChaosExperimentStepOutput {
	return i.ToChaosExperimentStepOutputWithContext(context.Background())
}

func (i ChaosExperimentStepArgs) ToChaosExperimentStepOutputWithContext(ctx context.Context) ChaosExperimentStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosExperimentStepOutput)
}

// ChaosExperimentStepArrayInput is an input type that accepts ChaosExperimentStepArray and ChaosExperimentStepArrayOutput values.
// You can construct a concrete instance of `ChaosExperimentStepArrayInput` via:
//
//	ChaosExperimentStepArray{ ChaosExperimentStepArgs{...} }
type ChaosExperimentStepArrayInput interface {
	pulumi.Input

	ToChaosExperimentStepArrayOutput() ChaosExperimentStepArrayOutput
	ToChaosExperimentStepArrayOutputWithContext(context.Context) ChaosExperimentStepArrayOutput
}

type ChaosExperimentStepArray []ChaosExperimentStepInput

func (ChaosExperimentStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentStep)(nil)).Elem()
}

func (i ChaosExperimentStepArray) ToChaosExperimentStepArrayOutput() ChaosExperimentStepArrayOutput {
	return i.ToChaosExperimentStepArrayOutputWithContext(context.Background())
}

func (i ChaosExperimentStepArray) ToChaosExperimentStepArrayOutputWithContext(ctx context.Context) ChaosExperimentStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosExperimentStepArrayOutput)
}

// Model that represents a step in the Experiment resource.
type ChaosExperimentStepOutput struct{ *pulumi.OutputState }

func (ChaosExperimentStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentStep)(nil)).Elem()
}

func (o ChaosExperimentStepOutput) ToChaosExperimentStepOutput() ChaosExperimentStepOutput {
	return o
}

func (o ChaosExperimentStepOutput) ToChaosExperimentStepOutputWithContext(ctx context.Context) ChaosExperimentStepOutput {
	return o
}

// List of branches.
func (o ChaosExperimentStepOutput) Branches() ChaosExperimentBranchArrayOutput {
	return o.ApplyT(func(v ChaosExperimentStep) []ChaosExperimentBranch { return v.Branches }).(ChaosExperimentBranchArrayOutput)
}

// String of the step name.
func (o ChaosExperimentStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosExperimentStep) string { return v.Name }).(pulumi.StringOutput)
}

type ChaosExperimentStepArrayOutput struct{ *pulumi.OutputState }

func (ChaosExperimentStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentStep)(nil)).Elem()
}

func (o ChaosExperimentStepArrayOutput) ToChaosExperimentStepArrayOutput() ChaosExperimentStepArrayOutput {
	return o
}

func (o ChaosExperimentStepArrayOutput) ToChaosExperimentStepArrayOutputWithContext(ctx context.Context) ChaosExperimentStepArrayOutput {
	return o
}

func (o ChaosExperimentStepArrayOutput) Index(i pulumi.IntInput) ChaosExperimentStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChaosExperimentStep {
		return vs[0].([]ChaosExperimentStep)[vs[1].(int)]
	}).(ChaosExperimentStepOutput)
}

// Model that represents a step in the Experiment resource.
type ChaosExperimentStepResponse struct {
	// List of branches.
	Branches []ChaosExperimentBranchResponse `pulumi:"branches"`
	// String of the step name.
	Name string `pulumi:"name"`
}

// Model that represents a step in the Experiment resource.
type ChaosExperimentStepResponseOutput struct{ *pulumi.OutputState }

func (ChaosExperimentStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosExperimentStepResponse)(nil)).Elem()
}

func (o ChaosExperimentStepResponseOutput) ToChaosExperimentStepResponseOutput() ChaosExperimentStepResponseOutput {
	return o
}

func (o ChaosExperimentStepResponseOutput) ToChaosExperimentStepResponseOutputWithContext(ctx context.Context) ChaosExperimentStepResponseOutput {
	return o
}

// List of branches.
func (o ChaosExperimentStepResponseOutput) Branches() ChaosExperimentBranchResponseArrayOutput {
	return o.ApplyT(func(v ChaosExperimentStepResponse) []ChaosExperimentBranchResponse { return v.Branches }).(ChaosExperimentBranchResponseArrayOutput)
}

// String of the step name.
func (o ChaosExperimentStepResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosExperimentStepResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ChaosExperimentStepResponseArrayOutput struct{ *pulumi.OutputState }

func (ChaosExperimentStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChaosExperimentStepResponse)(nil)).Elem()
}

func (o ChaosExperimentStepResponseArrayOutput) ToChaosExperimentStepResponseArrayOutput() ChaosExperimentStepResponseArrayOutput {
	return o
}

func (o ChaosExperimentStepResponseArrayOutput) ToChaosExperimentStepResponseArrayOutputWithContext(ctx context.Context) ChaosExperimentStepResponseArrayOutput {
	return o
}

func (o ChaosExperimentStepResponseArrayOutput) Index(i pulumi.IntInput) ChaosExperimentStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChaosExperimentStepResponse {
		return vs[0].([]ChaosExperimentStepResponse)[vs[1].(int)]
	}).(ChaosExperimentStepResponseOutput)
}

// Model that represents a list selector.
type ChaosTargetListSelector struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *ChaosTargetSimpleFilter `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// List of Target references.
	Targets []TargetReference `pulumi:"targets"`
	// Enum of the selector type.
	// Expected value is 'List'.
	Type string `pulumi:"type"`
}

// ChaosTargetListSelectorInput is an input type that accepts ChaosTargetListSelectorArgs and ChaosTargetListSelectorOutput values.
// You can construct a concrete instance of `ChaosTargetListSelectorInput` via:
//
//	ChaosTargetListSelectorArgs{...}
type ChaosTargetListSelectorInput interface {
	pulumi.Input

	ToChaosTargetListSelectorOutput() ChaosTargetListSelectorOutput
	ToChaosTargetListSelectorOutputWithContext(context.Context) ChaosTargetListSelectorOutput
}

// Model that represents a list selector.
type ChaosTargetListSelectorArgs struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter ChaosTargetSimpleFilterPtrInput `pulumi:"filter"`
	// String of the selector ID.
	Id pulumi.StringInput `pulumi:"id"`
	// List of Target references.
	Targets TargetReferenceArrayInput `pulumi:"targets"`
	// Enum of the selector type.
	// Expected value is 'List'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChaosTargetListSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetListSelector)(nil)).Elem()
}

func (i ChaosTargetListSelectorArgs) ToChaosTargetListSelectorOutput() ChaosTargetListSelectorOutput {
	return i.ToChaosTargetListSelectorOutputWithContext(context.Background())
}

func (i ChaosTargetListSelectorArgs) ToChaosTargetListSelectorOutputWithContext(ctx context.Context) ChaosTargetListSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetListSelectorOutput)
}

// Model that represents a list selector.
type ChaosTargetListSelectorOutput struct{ *pulumi.OutputState }

func (ChaosTargetListSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetListSelector)(nil)).Elem()
}

func (o ChaosTargetListSelectorOutput) ToChaosTargetListSelectorOutput() ChaosTargetListSelectorOutput {
	return o
}

func (o ChaosTargetListSelectorOutput) ToChaosTargetListSelectorOutputWithContext(ctx context.Context) ChaosTargetListSelectorOutput {
	return o
}

// Model that represents available filter types that can be applied to a targets list.
func (o ChaosTargetListSelectorOutput) Filter() ChaosTargetSimpleFilterPtrOutput {
	return o.ApplyT(func(v ChaosTargetListSelector) *ChaosTargetSimpleFilter { return v.Filter }).(ChaosTargetSimpleFilterPtrOutput)
}

// String of the selector ID.
func (o ChaosTargetListSelectorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetListSelector) string { return v.Id }).(pulumi.StringOutput)
}

// List of Target references.
func (o ChaosTargetListSelectorOutput) Targets() TargetReferenceArrayOutput {
	return o.ApplyT(func(v ChaosTargetListSelector) []TargetReference { return v.Targets }).(TargetReferenceArrayOutput)
}

// Enum of the selector type.
// Expected value is 'List'.
func (o ChaosTargetListSelectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetListSelector) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a list selector.
type ChaosTargetListSelectorResponse struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *ChaosTargetSimpleFilterResponse `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// List of Target references.
	Targets []TargetReferenceResponse `pulumi:"targets"`
	// Enum of the selector type.
	// Expected value is 'List'.
	Type string `pulumi:"type"`
}

// Model that represents a list selector.
type ChaosTargetListSelectorResponseOutput struct{ *pulumi.OutputState }

func (ChaosTargetListSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetListSelectorResponse)(nil)).Elem()
}

func (o ChaosTargetListSelectorResponseOutput) ToChaosTargetListSelectorResponseOutput() ChaosTargetListSelectorResponseOutput {
	return o
}

func (o ChaosTargetListSelectorResponseOutput) ToChaosTargetListSelectorResponseOutputWithContext(ctx context.Context) ChaosTargetListSelectorResponseOutput {
	return o
}

// Model that represents available filter types that can be applied to a targets list.
func (o ChaosTargetListSelectorResponseOutput) Filter() ChaosTargetSimpleFilterResponsePtrOutput {
	return o.ApplyT(func(v ChaosTargetListSelectorResponse) *ChaosTargetSimpleFilterResponse { return v.Filter }).(ChaosTargetSimpleFilterResponsePtrOutput)
}

// String of the selector ID.
func (o ChaosTargetListSelectorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetListSelectorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// List of Target references.
func (o ChaosTargetListSelectorResponseOutput) Targets() TargetReferenceResponseArrayOutput {
	return o.ApplyT(func(v ChaosTargetListSelectorResponse) []TargetReferenceResponse { return v.Targets }).(TargetReferenceResponseArrayOutput)
}

// Enum of the selector type.
// Expected value is 'List'.
func (o ChaosTargetListSelectorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetListSelectorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a query selector.
type ChaosTargetQuerySelector struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *ChaosTargetSimpleFilter `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// Azure Resource Graph (ARG) Query Language query for target resources.
	QueryString string `pulumi:"queryString"`
	// Subscription id list to scope resource query.
	SubscriptionIds []string `pulumi:"subscriptionIds"`
	// Enum of the selector type.
	// Expected value is 'Query'.
	Type string `pulumi:"type"`
}

// ChaosTargetQuerySelectorInput is an input type that accepts ChaosTargetQuerySelectorArgs and ChaosTargetQuerySelectorOutput values.
// You can construct a concrete instance of `ChaosTargetQuerySelectorInput` via:
//
//	ChaosTargetQuerySelectorArgs{...}
type ChaosTargetQuerySelectorInput interface {
	pulumi.Input

	ToChaosTargetQuerySelectorOutput() ChaosTargetQuerySelectorOutput
	ToChaosTargetQuerySelectorOutputWithContext(context.Context) ChaosTargetQuerySelectorOutput
}

// Model that represents a query selector.
type ChaosTargetQuerySelectorArgs struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter ChaosTargetSimpleFilterPtrInput `pulumi:"filter"`
	// String of the selector ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Azure Resource Graph (ARG) Query Language query for target resources.
	QueryString pulumi.StringInput `pulumi:"queryString"`
	// Subscription id list to scope resource query.
	SubscriptionIds pulumi.StringArrayInput `pulumi:"subscriptionIds"`
	// Enum of the selector type.
	// Expected value is 'Query'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChaosTargetQuerySelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetQuerySelector)(nil)).Elem()
}

func (i ChaosTargetQuerySelectorArgs) ToChaosTargetQuerySelectorOutput() ChaosTargetQuerySelectorOutput {
	return i.ToChaosTargetQuerySelectorOutputWithContext(context.Background())
}

func (i ChaosTargetQuerySelectorArgs) ToChaosTargetQuerySelectorOutputWithContext(ctx context.Context) ChaosTargetQuerySelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetQuerySelectorOutput)
}

// Model that represents a query selector.
type ChaosTargetQuerySelectorOutput struct{ *pulumi.OutputState }

func (ChaosTargetQuerySelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetQuerySelector)(nil)).Elem()
}

func (o ChaosTargetQuerySelectorOutput) ToChaosTargetQuerySelectorOutput() ChaosTargetQuerySelectorOutput {
	return o
}

func (o ChaosTargetQuerySelectorOutput) ToChaosTargetQuerySelectorOutputWithContext(ctx context.Context) ChaosTargetQuerySelectorOutput {
	return o
}

// Model that represents available filter types that can be applied to a targets list.
func (o ChaosTargetQuerySelectorOutput) Filter() ChaosTargetSimpleFilterPtrOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelector) *ChaosTargetSimpleFilter { return v.Filter }).(ChaosTargetSimpleFilterPtrOutput)
}

// String of the selector ID.
func (o ChaosTargetQuerySelectorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelector) string { return v.Id }).(pulumi.StringOutput)
}

// Azure Resource Graph (ARG) Query Language query for target resources.
func (o ChaosTargetQuerySelectorOutput) QueryString() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelector) string { return v.QueryString }).(pulumi.StringOutput)
}

// Subscription id list to scope resource query.
func (o ChaosTargetQuerySelectorOutput) SubscriptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelector) []string { return v.SubscriptionIds }).(pulumi.StringArrayOutput)
}

// Enum of the selector type.
// Expected value is 'Query'.
func (o ChaosTargetQuerySelectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelector) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a query selector.
type ChaosTargetQuerySelectorResponse struct {
	// Model that represents available filter types that can be applied to a targets list.
	Filter *ChaosTargetSimpleFilterResponse `pulumi:"filter"`
	// String of the selector ID.
	Id string `pulumi:"id"`
	// Azure Resource Graph (ARG) Query Language query for target resources.
	QueryString string `pulumi:"queryString"`
	// Subscription id list to scope resource query.
	SubscriptionIds []string `pulumi:"subscriptionIds"`
	// Enum of the selector type.
	// Expected value is 'Query'.
	Type string `pulumi:"type"`
}

// Model that represents a query selector.
type ChaosTargetQuerySelectorResponseOutput struct{ *pulumi.OutputState }

func (ChaosTargetQuerySelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetQuerySelectorResponse)(nil)).Elem()
}

func (o ChaosTargetQuerySelectorResponseOutput) ToChaosTargetQuerySelectorResponseOutput() ChaosTargetQuerySelectorResponseOutput {
	return o
}

func (o ChaosTargetQuerySelectorResponseOutput) ToChaosTargetQuerySelectorResponseOutputWithContext(ctx context.Context) ChaosTargetQuerySelectorResponseOutput {
	return o
}

// Model that represents available filter types that can be applied to a targets list.
func (o ChaosTargetQuerySelectorResponseOutput) Filter() ChaosTargetSimpleFilterResponsePtrOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelectorResponse) *ChaosTargetSimpleFilterResponse { return v.Filter }).(ChaosTargetSimpleFilterResponsePtrOutput)
}

// String of the selector ID.
func (o ChaosTargetQuerySelectorResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelectorResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Azure Resource Graph (ARG) Query Language query for target resources.
func (o ChaosTargetQuerySelectorResponseOutput) QueryString() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelectorResponse) string { return v.QueryString }).(pulumi.StringOutput)
}

// Subscription id list to scope resource query.
func (o ChaosTargetQuerySelectorResponseOutput) SubscriptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelectorResponse) []string { return v.SubscriptionIds }).(pulumi.StringArrayOutput)
}

// Enum of the selector type.
// Expected value is 'Query'.
func (o ChaosTargetQuerySelectorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetQuerySelectorResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a simple target filter.
type ChaosTargetSimpleFilter struct {
	// Model that represents the Simple filter parameters.
	Parameters *ChaosTargetSimpleFilterParameters `pulumi:"parameters"`
	// Enum that discriminates between filter types. Currently only `Simple` type is supported.
	// Expected value is 'Simple'.
	Type string `pulumi:"type"`
}

// ChaosTargetSimpleFilterInput is an input type that accepts ChaosTargetSimpleFilterArgs and ChaosTargetSimpleFilterOutput values.
// You can construct a concrete instance of `ChaosTargetSimpleFilterInput` via:
//
//	ChaosTargetSimpleFilterArgs{...}
type ChaosTargetSimpleFilterInput interface {
	pulumi.Input

	ToChaosTargetSimpleFilterOutput() ChaosTargetSimpleFilterOutput
	ToChaosTargetSimpleFilterOutputWithContext(context.Context) ChaosTargetSimpleFilterOutput
}

// Model that represents a simple target filter.
type ChaosTargetSimpleFilterArgs struct {
	// Model that represents the Simple filter parameters.
	Parameters ChaosTargetSimpleFilterParametersPtrInput `pulumi:"parameters"`
	// Enum that discriminates between filter types. Currently only `Simple` type is supported.
	// Expected value is 'Simple'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ChaosTargetSimpleFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilter)(nil)).Elem()
}

func (i ChaosTargetSimpleFilterArgs) ToChaosTargetSimpleFilterOutput() ChaosTargetSimpleFilterOutput {
	return i.ToChaosTargetSimpleFilterOutputWithContext(context.Background())
}

func (i ChaosTargetSimpleFilterArgs) ToChaosTargetSimpleFilterOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterOutput)
}

func (i ChaosTargetSimpleFilterArgs) ToChaosTargetSimpleFilterPtrOutput() ChaosTargetSimpleFilterPtrOutput {
	return i.ToChaosTargetSimpleFilterPtrOutputWithContext(context.Background())
}

func (i ChaosTargetSimpleFilterArgs) ToChaosTargetSimpleFilterPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterOutput).ToChaosTargetSimpleFilterPtrOutputWithContext(ctx)
}

// ChaosTargetSimpleFilterPtrInput is an input type that accepts ChaosTargetSimpleFilterArgs, ChaosTargetSimpleFilterPtr and ChaosTargetSimpleFilterPtrOutput values.
// You can construct a concrete instance of `ChaosTargetSimpleFilterPtrInput` via:
//
//	        ChaosTargetSimpleFilterArgs{...}
//
//	or:
//
//	        nil
type ChaosTargetSimpleFilterPtrInput interface {
	pulumi.Input

	ToChaosTargetSimpleFilterPtrOutput() ChaosTargetSimpleFilterPtrOutput
	ToChaosTargetSimpleFilterPtrOutputWithContext(context.Context) ChaosTargetSimpleFilterPtrOutput
}

type chaosTargetSimpleFilterPtrType ChaosTargetSimpleFilterArgs

func ChaosTargetSimpleFilterPtr(v *ChaosTargetSimpleFilterArgs) ChaosTargetSimpleFilterPtrInput {
	return (*chaosTargetSimpleFilterPtrType)(v)
}

func (*chaosTargetSimpleFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilter)(nil)).Elem()
}

func (i *chaosTargetSimpleFilterPtrType) ToChaosTargetSimpleFilterPtrOutput() ChaosTargetSimpleFilterPtrOutput {
	return i.ToChaosTargetSimpleFilterPtrOutputWithContext(context.Background())
}

func (i *chaosTargetSimpleFilterPtrType) ToChaosTargetSimpleFilterPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterPtrOutput)
}

// Model that represents a simple target filter.
type ChaosTargetSimpleFilterOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilter)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterOutput) ToChaosTargetSimpleFilterOutput() ChaosTargetSimpleFilterOutput {
	return o
}

func (o ChaosTargetSimpleFilterOutput) ToChaosTargetSimpleFilterOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterOutput {
	return o
}

func (o ChaosTargetSimpleFilterOutput) ToChaosTargetSimpleFilterPtrOutput() ChaosTargetSimpleFilterPtrOutput {
	return o.ToChaosTargetSimpleFilterPtrOutputWithContext(context.Background())
}

func (o ChaosTargetSimpleFilterOutput) ToChaosTargetSimpleFilterPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChaosTargetSimpleFilter) *ChaosTargetSimpleFilter {
		return &v
	}).(ChaosTargetSimpleFilterPtrOutput)
}

// Model that represents the Simple filter parameters.
func (o ChaosTargetSimpleFilterOutput) Parameters() ChaosTargetSimpleFilterParametersPtrOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilter) *ChaosTargetSimpleFilterParameters { return v.Parameters }).(ChaosTargetSimpleFilterParametersPtrOutput)
}

// Enum that discriminates between filter types. Currently only `Simple` type is supported.
// Expected value is 'Simple'.
func (o ChaosTargetSimpleFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilter) string { return v.Type }).(pulumi.StringOutput)
}

type ChaosTargetSimpleFilterPtrOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilter)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterPtrOutput) ToChaosTargetSimpleFilterPtrOutput() ChaosTargetSimpleFilterPtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterPtrOutput) ToChaosTargetSimpleFilterPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterPtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterPtrOutput) Elem() ChaosTargetSimpleFilterOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilter) ChaosTargetSimpleFilter {
		if v != nil {
			return *v
		}
		var ret ChaosTargetSimpleFilter
		return ret
	}).(ChaosTargetSimpleFilterOutput)
}

// Model that represents the Simple filter parameters.
func (o ChaosTargetSimpleFilterPtrOutput) Parameters() ChaosTargetSimpleFilterParametersPtrOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilter) *ChaosTargetSimpleFilterParameters {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ChaosTargetSimpleFilterParametersPtrOutput)
}

// Enum that discriminates between filter types. Currently only `Simple` type is supported.
// Expected value is 'Simple'.
func (o ChaosTargetSimpleFilterPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Model that represents the Simple filter parameters.
type ChaosTargetSimpleFilterParameters struct {
	// List of Azure availability zones to filter targets by.
	Zones []string `pulumi:"zones"`
}

// ChaosTargetSimpleFilterParametersInput is an input type that accepts ChaosTargetSimpleFilterParametersArgs and ChaosTargetSimpleFilterParametersOutput values.
// You can construct a concrete instance of `ChaosTargetSimpleFilterParametersInput` via:
//
//	ChaosTargetSimpleFilterParametersArgs{...}
type ChaosTargetSimpleFilterParametersInput interface {
	pulumi.Input

	ToChaosTargetSimpleFilterParametersOutput() ChaosTargetSimpleFilterParametersOutput
	ToChaosTargetSimpleFilterParametersOutputWithContext(context.Context) ChaosTargetSimpleFilterParametersOutput
}

// Model that represents the Simple filter parameters.
type ChaosTargetSimpleFilterParametersArgs struct {
	// List of Azure availability zones to filter targets by.
	Zones pulumi.StringArrayInput `pulumi:"zones"`
}

func (ChaosTargetSimpleFilterParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilterParameters)(nil)).Elem()
}

func (i ChaosTargetSimpleFilterParametersArgs) ToChaosTargetSimpleFilterParametersOutput() ChaosTargetSimpleFilterParametersOutput {
	return i.ToChaosTargetSimpleFilterParametersOutputWithContext(context.Background())
}

func (i ChaosTargetSimpleFilterParametersArgs) ToChaosTargetSimpleFilterParametersOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterParametersOutput)
}

func (i ChaosTargetSimpleFilterParametersArgs) ToChaosTargetSimpleFilterParametersPtrOutput() ChaosTargetSimpleFilterParametersPtrOutput {
	return i.ToChaosTargetSimpleFilterParametersPtrOutputWithContext(context.Background())
}

func (i ChaosTargetSimpleFilterParametersArgs) ToChaosTargetSimpleFilterParametersPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterParametersOutput).ToChaosTargetSimpleFilterParametersPtrOutputWithContext(ctx)
}

// ChaosTargetSimpleFilterParametersPtrInput is an input type that accepts ChaosTargetSimpleFilterParametersArgs, ChaosTargetSimpleFilterParametersPtr and ChaosTargetSimpleFilterParametersPtrOutput values.
// You can construct a concrete instance of `ChaosTargetSimpleFilterParametersPtrInput` via:
//
//	        ChaosTargetSimpleFilterParametersArgs{...}
//
//	or:
//
//	        nil
type ChaosTargetSimpleFilterParametersPtrInput interface {
	pulumi.Input

	ToChaosTargetSimpleFilterParametersPtrOutput() ChaosTargetSimpleFilterParametersPtrOutput
	ToChaosTargetSimpleFilterParametersPtrOutputWithContext(context.Context) ChaosTargetSimpleFilterParametersPtrOutput
}

type chaosTargetSimpleFilterParametersPtrType ChaosTargetSimpleFilterParametersArgs

func ChaosTargetSimpleFilterParametersPtr(v *ChaosTargetSimpleFilterParametersArgs) ChaosTargetSimpleFilterParametersPtrInput {
	return (*chaosTargetSimpleFilterParametersPtrType)(v)
}

func (*chaosTargetSimpleFilterParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilterParameters)(nil)).Elem()
}

func (i *chaosTargetSimpleFilterParametersPtrType) ToChaosTargetSimpleFilterParametersPtrOutput() ChaosTargetSimpleFilterParametersPtrOutput {
	return i.ToChaosTargetSimpleFilterParametersPtrOutputWithContext(context.Background())
}

func (i *chaosTargetSimpleFilterParametersPtrType) ToChaosTargetSimpleFilterParametersPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChaosTargetSimpleFilterParametersPtrOutput)
}

// Model that represents the Simple filter parameters.
type ChaosTargetSimpleFilterParametersOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilterParameters)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterParametersOutput) ToChaosTargetSimpleFilterParametersOutput() ChaosTargetSimpleFilterParametersOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersOutput) ToChaosTargetSimpleFilterParametersOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersOutput) ToChaosTargetSimpleFilterParametersPtrOutput() ChaosTargetSimpleFilterParametersPtrOutput {
	return o.ToChaosTargetSimpleFilterParametersPtrOutputWithContext(context.Background())
}

func (o ChaosTargetSimpleFilterParametersOutput) ToChaosTargetSimpleFilterParametersPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ChaosTargetSimpleFilterParameters) *ChaosTargetSimpleFilterParameters {
		return &v
	}).(ChaosTargetSimpleFilterParametersPtrOutput)
}

// List of Azure availability zones to filter targets by.
func (o ChaosTargetSimpleFilterParametersOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilterParameters) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type ChaosTargetSimpleFilterParametersPtrOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilterParameters)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterParametersPtrOutput) ToChaosTargetSimpleFilterParametersPtrOutput() ChaosTargetSimpleFilterParametersPtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersPtrOutput) ToChaosTargetSimpleFilterParametersPtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersPtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersPtrOutput) Elem() ChaosTargetSimpleFilterParametersOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterParameters) ChaosTargetSimpleFilterParameters {
		if v != nil {
			return *v
		}
		var ret ChaosTargetSimpleFilterParameters
		return ret
	}).(ChaosTargetSimpleFilterParametersOutput)
}

// List of Azure availability zones to filter targets by.
func (o ChaosTargetSimpleFilterParametersPtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterParameters) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

// Model that represents the Simple filter parameters.
type ChaosTargetSimpleFilterParametersResponse struct {
	// List of Azure availability zones to filter targets by.
	Zones []string `pulumi:"zones"`
}

// Model that represents the Simple filter parameters.
type ChaosTargetSimpleFilterParametersResponseOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilterParametersResponse)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterParametersResponseOutput) ToChaosTargetSimpleFilterParametersResponseOutput() ChaosTargetSimpleFilterParametersResponseOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersResponseOutput) ToChaosTargetSimpleFilterParametersResponseOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersResponseOutput {
	return o
}

// List of Azure availability zones to filter targets by.
func (o ChaosTargetSimpleFilterParametersResponseOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilterParametersResponse) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

type ChaosTargetSimpleFilterParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilterParametersResponse)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterParametersResponsePtrOutput) ToChaosTargetSimpleFilterParametersResponsePtrOutput() ChaosTargetSimpleFilterParametersResponsePtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersResponsePtrOutput) ToChaosTargetSimpleFilterParametersResponsePtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterParametersResponsePtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterParametersResponsePtrOutput) Elem() ChaosTargetSimpleFilterParametersResponseOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterParametersResponse) ChaosTargetSimpleFilterParametersResponse {
		if v != nil {
			return *v
		}
		var ret ChaosTargetSimpleFilterParametersResponse
		return ret
	}).(ChaosTargetSimpleFilterParametersResponseOutput)
}

// List of Azure availability zones to filter targets by.
func (o ChaosTargetSimpleFilterParametersResponsePtrOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterParametersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Zones
	}).(pulumi.StringArrayOutput)
}

// Model that represents a simple target filter.
type ChaosTargetSimpleFilterResponse struct {
	// Model that represents the Simple filter parameters.
	Parameters *ChaosTargetSimpleFilterParametersResponse `pulumi:"parameters"`
	// Enum that discriminates between filter types. Currently only `Simple` type is supported.
	// Expected value is 'Simple'.
	Type string `pulumi:"type"`
}

// Model that represents a simple target filter.
type ChaosTargetSimpleFilterResponseOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChaosTargetSimpleFilterResponse)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterResponseOutput) ToChaosTargetSimpleFilterResponseOutput() ChaosTargetSimpleFilterResponseOutput {
	return o
}

func (o ChaosTargetSimpleFilterResponseOutput) ToChaosTargetSimpleFilterResponseOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterResponseOutput {
	return o
}

// Model that represents the Simple filter parameters.
func (o ChaosTargetSimpleFilterResponseOutput) Parameters() ChaosTargetSimpleFilterParametersResponsePtrOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilterResponse) *ChaosTargetSimpleFilterParametersResponse {
		return v.Parameters
	}).(ChaosTargetSimpleFilterParametersResponsePtrOutput)
}

// Enum that discriminates between filter types. Currently only `Simple` type is supported.
// Expected value is 'Simple'.
func (o ChaosTargetSimpleFilterResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ChaosTargetSimpleFilterResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ChaosTargetSimpleFilterResponsePtrOutput struct{ *pulumi.OutputState }

func (ChaosTargetSimpleFilterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChaosTargetSimpleFilterResponse)(nil)).Elem()
}

func (o ChaosTargetSimpleFilterResponsePtrOutput) ToChaosTargetSimpleFilterResponsePtrOutput() ChaosTargetSimpleFilterResponsePtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterResponsePtrOutput) ToChaosTargetSimpleFilterResponsePtrOutputWithContext(ctx context.Context) ChaosTargetSimpleFilterResponsePtrOutput {
	return o
}

func (o ChaosTargetSimpleFilterResponsePtrOutput) Elem() ChaosTargetSimpleFilterResponseOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterResponse) ChaosTargetSimpleFilterResponse {
		if v != nil {
			return *v
		}
		var ret ChaosTargetSimpleFilterResponse
		return ret
	}).(ChaosTargetSimpleFilterResponseOutput)
}

// Model that represents the Simple filter parameters.
func (o ChaosTargetSimpleFilterResponsePtrOutput) Parameters() ChaosTargetSimpleFilterParametersResponsePtrOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterResponse) *ChaosTargetSimpleFilterParametersResponse {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(ChaosTargetSimpleFilterParametersResponsePtrOutput)
}

// Enum that discriminates between filter types. Currently only `Simple` type is supported.
// Expected value is 'Simple'.
func (o ChaosTargetSimpleFilterResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChaosTargetSimpleFilterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Model that represents a continuous action.
type ContinuousAction struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePair `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'continuous'.
	Type string `pulumi:"type"`
}

// ContinuousActionInput is an input type that accepts ContinuousActionArgs and ContinuousActionOutput values.
// You can construct a concrete instance of `ContinuousActionInput` via:
//
//	ContinuousActionArgs{...}
type ContinuousActionInput interface {
	pulumi.Input

	ToContinuousActionOutput() ContinuousActionOutput
	ToContinuousActionOutputWithContext(context.Context) ContinuousActionOutput
}

// Model that represents a continuous action.
type ContinuousActionArgs struct {
	// ISO8601 formatted string that represents a duration.
	Duration pulumi.StringInput `pulumi:"duration"`
	// String that represents a Capability URN.
	Name pulumi.StringInput `pulumi:"name"`
	// List of key value pairs.
	Parameters KeyValuePairArrayInput `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId pulumi.StringInput `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'continuous'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ContinuousActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousAction)(nil)).Elem()
}

func (i ContinuousActionArgs) ToContinuousActionOutput() ContinuousActionOutput {
	return i.ToContinuousActionOutputWithContext(context.Background())
}

func (i ContinuousActionArgs) ToContinuousActionOutputWithContext(ctx context.Context) ContinuousActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousActionOutput)
}

// Model that represents a continuous action.
type ContinuousActionOutput struct{ *pulumi.OutputState }

func (ContinuousActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousAction)(nil)).Elem()
}

func (o ContinuousActionOutput) ToContinuousActionOutput() ContinuousActionOutput {
	return o
}

func (o ContinuousActionOutput) ToContinuousActionOutputWithContext(ctx context.Context) ContinuousActionOutput {
	return o
}

// ISO8601 formatted string that represents a duration.
func (o ContinuousActionOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousAction) string { return v.Duration }).(pulumi.StringOutput)
}

// String that represents a Capability URN.
func (o ContinuousActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousAction) string { return v.Name }).(pulumi.StringOutput)
}

// List of key value pairs.
func (o ContinuousActionOutput) Parameters() KeyValuePairArrayOutput {
	return o.ApplyT(func(v ContinuousAction) []KeyValuePair { return v.Parameters }).(KeyValuePairArrayOutput)
}

// String that represents a selector.
func (o ContinuousActionOutput) SelectorId() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousAction) string { return v.SelectorId }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'continuous'.
func (o ContinuousActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousAction) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a continuous action.
type ContinuousActionResponse struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePairResponse `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'continuous'.
	Type string `pulumi:"type"`
}

// Model that represents a continuous action.
type ContinuousActionResponseOutput struct{ *pulumi.OutputState }

func (ContinuousActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContinuousActionResponse)(nil)).Elem()
}

func (o ContinuousActionResponseOutput) ToContinuousActionResponseOutput() ContinuousActionResponseOutput {
	return o
}

func (o ContinuousActionResponseOutput) ToContinuousActionResponseOutputWithContext(ctx context.Context) ContinuousActionResponseOutput {
	return o
}

// ISO8601 formatted string that represents a duration.
func (o ContinuousActionResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousActionResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// String that represents a Capability URN.
func (o ContinuousActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of key value pairs.
func (o ContinuousActionResponseOutput) Parameters() KeyValuePairResponseArrayOutput {
	return o.ApplyT(func(v ContinuousActionResponse) []KeyValuePairResponse { return v.Parameters }).(KeyValuePairResponseArrayOutput)
}

// String that represents a selector.
func (o ContinuousActionResponseOutput) SelectorId() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousActionResponse) string { return v.SelectorId }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'continuous'.
func (o ContinuousActionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContinuousActionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a delay action.
type DelayAction struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'delay'.
	Type string `pulumi:"type"`
}

// DelayActionInput is an input type that accepts DelayActionArgs and DelayActionOutput values.
// You can construct a concrete instance of `DelayActionInput` via:
//
//	DelayActionArgs{...}
type DelayActionInput interface {
	pulumi.Input

	ToDelayActionOutput() DelayActionOutput
	ToDelayActionOutputWithContext(context.Context) DelayActionOutput
}

// Model that represents a delay action.
type DelayActionArgs struct {
	// ISO8601 formatted string that represents a duration.
	Duration pulumi.StringInput `pulumi:"duration"`
	// String that represents a Capability URN.
	Name pulumi.StringInput `pulumi:"name"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'delay'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DelayActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DelayAction)(nil)).Elem()
}

func (i DelayActionArgs) ToDelayActionOutput() DelayActionOutput {
	return i.ToDelayActionOutputWithContext(context.Background())
}

func (i DelayActionArgs) ToDelayActionOutputWithContext(ctx context.Context) DelayActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DelayActionOutput)
}

// Model that represents a delay action.
type DelayActionOutput struct{ *pulumi.OutputState }

func (DelayActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelayAction)(nil)).Elem()
}

func (o DelayActionOutput) ToDelayActionOutput() DelayActionOutput {
	return o
}

func (o DelayActionOutput) ToDelayActionOutputWithContext(ctx context.Context) DelayActionOutput {
	return o
}

// ISO8601 formatted string that represents a duration.
func (o DelayActionOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v DelayAction) string { return v.Duration }).(pulumi.StringOutput)
}

// String that represents a Capability URN.
func (o DelayActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DelayAction) string { return v.Name }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'delay'.
func (o DelayActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelayAction) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a delay action.
type DelayActionResponse struct {
	// ISO8601 formatted string that represents a duration.
	Duration string `pulumi:"duration"`
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'delay'.
	Type string `pulumi:"type"`
}

// Model that represents a delay action.
type DelayActionResponseOutput struct{ *pulumi.OutputState }

func (DelayActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DelayActionResponse)(nil)).Elem()
}

func (o DelayActionResponseOutput) ToDelayActionResponseOutput() DelayActionResponseOutput {
	return o
}

func (o DelayActionResponseOutput) ToDelayActionResponseOutputWithContext(ctx context.Context) DelayActionResponseOutput {
	return o
}

// ISO8601 formatted string that represents a duration.
func (o DelayActionResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v DelayActionResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// String that represents a Capability URN.
func (o DelayActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DelayActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'delay'.
func (o DelayActionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DelayActionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a discrete action.
type DiscreteAction struct {
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePair `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'discrete'.
	Type string `pulumi:"type"`
}

// DiscreteActionInput is an input type that accepts DiscreteActionArgs and DiscreteActionOutput values.
// You can construct a concrete instance of `DiscreteActionInput` via:
//
//	DiscreteActionArgs{...}
type DiscreteActionInput interface {
	pulumi.Input

	ToDiscreteActionOutput() DiscreteActionOutput
	ToDiscreteActionOutputWithContext(context.Context) DiscreteActionOutput
}

// Model that represents a discrete action.
type DiscreteActionArgs struct {
	// String that represents a Capability URN.
	Name pulumi.StringInput `pulumi:"name"`
	// List of key value pairs.
	Parameters KeyValuePairArrayInput `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId pulumi.StringInput `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'discrete'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DiscreteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscreteAction)(nil)).Elem()
}

func (i DiscreteActionArgs) ToDiscreteActionOutput() DiscreteActionOutput {
	return i.ToDiscreteActionOutputWithContext(context.Background())
}

func (i DiscreteActionArgs) ToDiscreteActionOutputWithContext(ctx context.Context) DiscreteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscreteActionOutput)
}

// Model that represents a discrete action.
type DiscreteActionOutput struct{ *pulumi.OutputState }

func (DiscreteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscreteAction)(nil)).Elem()
}

func (o DiscreteActionOutput) ToDiscreteActionOutput() DiscreteActionOutput {
	return o
}

func (o DiscreteActionOutput) ToDiscreteActionOutputWithContext(ctx context.Context) DiscreteActionOutput {
	return o
}

// String that represents a Capability URN.
func (o DiscreteActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteAction) string { return v.Name }).(pulumi.StringOutput)
}

// List of key value pairs.
func (o DiscreteActionOutput) Parameters() KeyValuePairArrayOutput {
	return o.ApplyT(func(v DiscreteAction) []KeyValuePair { return v.Parameters }).(KeyValuePairArrayOutput)
}

// String that represents a selector.
func (o DiscreteActionOutput) SelectorId() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteAction) string { return v.SelectorId }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'discrete'.
func (o DiscreteActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteAction) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents a discrete action.
type DiscreteActionResponse struct {
	// String that represents a Capability URN.
	Name string `pulumi:"name"`
	// List of key value pairs.
	Parameters []KeyValuePairResponse `pulumi:"parameters"`
	// String that represents a selector.
	SelectorId string `pulumi:"selectorId"`
	// Enum union of Chaos experiment action types.
	// Expected value is 'discrete'.
	Type string `pulumi:"type"`
}

// Model that represents a discrete action.
type DiscreteActionResponseOutput struct{ *pulumi.OutputState }

func (DiscreteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscreteActionResponse)(nil)).Elem()
}

func (o DiscreteActionResponseOutput) ToDiscreteActionResponseOutput() DiscreteActionResponseOutput {
	return o
}

func (o DiscreteActionResponseOutput) ToDiscreteActionResponseOutputWithContext(ctx context.Context) DiscreteActionResponseOutput {
	return o
}

// String that represents a Capability URN.
func (o DiscreteActionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteActionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// List of key value pairs.
func (o DiscreteActionResponseOutput) Parameters() KeyValuePairResponseArrayOutput {
	return o.ApplyT(func(v DiscreteActionResponse) []KeyValuePairResponse { return v.Parameters }).(KeyValuePairResponseArrayOutput)
}

// String that represents a selector.
func (o DiscreteActionResponseOutput) SelectorId() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteActionResponse) string { return v.SelectorId }).(pulumi.StringOutput)
}

// Enum union of Chaos experiment action types.
// Expected value is 'discrete'.
func (o DiscreteActionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiscreteActionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Model that represents the Experiment action target details error model.
type ExperimentExecutionActionTargetDetailsErrorResponse struct {
	// The error code.
	Code string `pulumi:"code"`
	// The error message
	Message string `pulumi:"message"`
}

// Model that represents the Experiment action target details error model.
type ExperimentExecutionActionTargetDetailsErrorResponseOutput struct{ *pulumi.OutputState }

func (ExperimentExecutionActionTargetDetailsErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentExecutionActionTargetDetailsErrorResponse)(nil)).Elem()
}

func (o ExperimentExecutionActionTargetDetailsErrorResponseOutput) ToExperimentExecutionActionTargetDetailsErrorResponseOutput() ExperimentExecutionActionTargetDetailsErrorResponseOutput {
	return o
}

func (o ExperimentExecutionActionTargetDetailsErrorResponseOutput) ToExperimentExecutionActionTargetDetailsErrorResponseOutputWithContext(ctx context.Context) ExperimentExecutionActionTargetDetailsErrorResponseOutput {
	return o
}

// The error code.
func (o ExperimentExecutionActionTargetDetailsErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error message
func (o ExperimentExecutionActionTargetDetailsErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Model that represents the Experiment action target details properties model.
type ExperimentExecutionActionTargetDetailsPropertiesResponse struct {
	// The error of the action.
	Error ExperimentExecutionActionTargetDetailsErrorResponse `pulumi:"error"`
	// The status of the execution.
	Status string `pulumi:"status"`
	// The target for the action.
	Target string `pulumi:"target"`
	// String that represents the completed date time.
	TargetCompletedTime string `pulumi:"targetCompletedTime"`
	// String that represents the failed date time.
	TargetFailedTime string `pulumi:"targetFailedTime"`
}

// Model that represents the Experiment action target details properties model.
type ExperimentExecutionActionTargetDetailsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentExecutionActionTargetDetailsPropertiesResponse)(nil)).Elem()
}

func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) ToExperimentExecutionActionTargetDetailsPropertiesResponseOutput() ExperimentExecutionActionTargetDetailsPropertiesResponseOutput {
	return o
}

func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) ToExperimentExecutionActionTargetDetailsPropertiesResponseOutputWithContext(ctx context.Context) ExperimentExecutionActionTargetDetailsPropertiesResponseOutput {
	return o
}

// The error of the action.
func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) Error() ExperimentExecutionActionTargetDetailsErrorResponseOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsPropertiesResponse) ExperimentExecutionActionTargetDetailsErrorResponse {
		return v.Error
	}).(ExperimentExecutionActionTargetDetailsErrorResponseOutput)
}

// The status of the execution.
func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The target for the action.
func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsPropertiesResponse) string { return v.Target }).(pulumi.StringOutput)
}

// String that represents the completed date time.
func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) TargetCompletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsPropertiesResponse) string { return v.TargetCompletedTime }).(pulumi.StringOutput)
}

// String that represents the failed date time.
func (o ExperimentExecutionActionTargetDetailsPropertiesResponseOutput) TargetFailedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionActionTargetDetailsPropertiesResponse) string { return v.TargetFailedTime }).(pulumi.StringOutput)
}

type ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExperimentExecutionActionTargetDetailsPropertiesResponse)(nil)).Elem()
}

func (o ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput) ToExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput() ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput {
	return o
}

func (o ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput) ToExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutputWithContext(ctx context.Context) ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput {
	return o
}

func (o ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput) Index(i pulumi.IntInput) ExperimentExecutionActionTargetDetailsPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExperimentExecutionActionTargetDetailsPropertiesResponse {
		return vs[0].([]ExperimentExecutionActionTargetDetailsPropertiesResponse)[vs[1].(int)]
	}).(ExperimentExecutionActionTargetDetailsPropertiesResponseOutput)
}

// Model that represents the extended properties of an experiment execution.
type ExperimentExecutionDetailsPropertiesResponse struct {
	// The reason why the execution failed.
	FailureReason string `pulumi:"failureReason"`
	// String that represents the last action date time.
	LastActionAt string `pulumi:"lastActionAt"`
	// The information of the experiment run.
	RunInformation ExperimentExecutionDetailsPropertiesRunInformationResponse `pulumi:"runInformation"`
	// String that represents the start date time.
	StartedAt string `pulumi:"startedAt"`
	// The status of the execution.
	Status string `pulumi:"status"`
	// String that represents the stop date time.
	StoppedAt string `pulumi:"stoppedAt"`
}

// Model that represents the extended properties of an experiment execution.
type ExperimentExecutionDetailsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ExperimentExecutionDetailsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentExecutionDetailsPropertiesResponse)(nil)).Elem()
}

func (o ExperimentExecutionDetailsPropertiesResponseOutput) ToExperimentExecutionDetailsPropertiesResponseOutput() ExperimentExecutionDetailsPropertiesResponseOutput {
	return o
}

func (o ExperimentExecutionDetailsPropertiesResponseOutput) ToExperimentExecutionDetailsPropertiesResponseOutputWithContext(ctx context.Context) ExperimentExecutionDetailsPropertiesResponseOutput {
	return o
}

// The reason why the execution failed.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) string { return v.FailureReason }).(pulumi.StringOutput)
}

// String that represents the last action date time.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) LastActionAt() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) string { return v.LastActionAt }).(pulumi.StringOutput)
}

// The information of the experiment run.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) RunInformation() ExperimentExecutionDetailsPropertiesRunInformationResponseOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) ExperimentExecutionDetailsPropertiesRunInformationResponse {
		return v.RunInformation
	}).(ExperimentExecutionDetailsPropertiesRunInformationResponseOutput)
}

// String that represents the start date time.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) StartedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) string { return v.StartedAt }).(pulumi.StringOutput)
}

// The status of the execution.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// String that represents the stop date time.
func (o ExperimentExecutionDetailsPropertiesResponseOutput) StoppedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesResponse) string { return v.StoppedAt }).(pulumi.StringOutput)
}

// The information of the experiment run.
type ExperimentExecutionDetailsPropertiesRunInformationResponse struct {
	// The steps of the experiment run.
	Steps []StepStatusResponse `pulumi:"steps"`
}

// The information of the experiment run.
type ExperimentExecutionDetailsPropertiesRunInformationResponseOutput struct{ *pulumi.OutputState }

func (ExperimentExecutionDetailsPropertiesRunInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExperimentExecutionDetailsPropertiesRunInformationResponse)(nil)).Elem()
}

func (o ExperimentExecutionDetailsPropertiesRunInformationResponseOutput) ToExperimentExecutionDetailsPropertiesRunInformationResponseOutput() ExperimentExecutionDetailsPropertiesRunInformationResponseOutput {
	return o
}

func (o ExperimentExecutionDetailsPropertiesRunInformationResponseOutput) ToExperimentExecutionDetailsPropertiesRunInformationResponseOutputWithContext(ctx context.Context) ExperimentExecutionDetailsPropertiesRunInformationResponseOutput {
	return o
}

// The steps of the experiment run.
func (o ExperimentExecutionDetailsPropertiesRunInformationResponseOutput) Steps() StepStatusResponseArrayOutput {
	return o.ApplyT(func(v ExperimentExecutionDetailsPropertiesRunInformationResponse) []StepStatusResponse {
		return v.Steps
	}).(StepStatusResponseArrayOutput)
}

// A map to describe the settings of an action.
type KeyValuePair struct {
	// The name of the setting for the action.
	Key string `pulumi:"key"`
	// The value of the setting for the action.
	Value string `pulumi:"value"`
}

// KeyValuePairInput is an input type that accepts KeyValuePairArgs and KeyValuePairOutput values.
// You can construct a concrete instance of `KeyValuePairInput` via:
//
//	KeyValuePairArgs{...}
type KeyValuePairInput interface {
	pulumi.Input

	ToKeyValuePairOutput() KeyValuePairOutput
	ToKeyValuePairOutputWithContext(context.Context) KeyValuePairOutput
}

// A map to describe the settings of an action.
type KeyValuePairArgs struct {
	// The name of the setting for the action.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the setting for the action.
	Value pulumi.StringInput `pulumi:"value"`
}

func (KeyValuePairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValuePair)(nil)).Elem()
}

func (i KeyValuePairArgs) ToKeyValuePairOutput() KeyValuePairOutput {
	return i.ToKeyValuePairOutputWithContext(context.Background())
}

func (i KeyValuePairArgs) ToKeyValuePairOutputWithContext(ctx context.Context) KeyValuePairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyValuePairOutput)
}

// KeyValuePairArrayInput is an input type that accepts KeyValuePairArray and KeyValuePairArrayOutput values.
// You can construct a concrete instance of `KeyValuePairArrayInput` via:
//
//	KeyValuePairArray{ KeyValuePairArgs{...} }
type KeyValuePairArrayInput interface {
	pulumi.Input

	ToKeyValuePairArrayOutput() KeyValuePairArrayOutput
	ToKeyValuePairArrayOutputWithContext(context.Context) KeyValuePairArrayOutput
}

type KeyValuePairArray []KeyValuePairInput

func (KeyValuePairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyValuePair)(nil)).Elem()
}

func (i KeyValuePairArray) ToKeyValuePairArrayOutput() KeyValuePairArrayOutput {
	return i.ToKeyValuePairArrayOutputWithContext(context.Background())
}

func (i KeyValuePairArray) ToKeyValuePairArrayOutputWithContext(ctx context.Context) KeyValuePairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyValuePairArrayOutput)
}

// A map to describe the settings of an action.
type KeyValuePairOutput struct{ *pulumi.OutputState }

func (KeyValuePairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValuePair)(nil)).Elem()
}

func (o KeyValuePairOutput) ToKeyValuePairOutput() KeyValuePairOutput {
	return o
}

func (o KeyValuePairOutput) ToKeyValuePairOutputWithContext(ctx context.Context) KeyValuePairOutput {
	return o
}

// The name of the setting for the action.
func (o KeyValuePairOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValuePair) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the setting for the action.
func (o KeyValuePairOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValuePair) string { return v.Value }).(pulumi.StringOutput)
}

type KeyValuePairArrayOutput struct{ *pulumi.OutputState }

func (KeyValuePairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyValuePair)(nil)).Elem()
}

func (o KeyValuePairArrayOutput) ToKeyValuePairArrayOutput() KeyValuePairArrayOutput {
	return o
}

func (o KeyValuePairArrayOutput) ToKeyValuePairArrayOutputWithContext(ctx context.Context) KeyValuePairArrayOutput {
	return o
}

func (o KeyValuePairArrayOutput) Index(i pulumi.IntInput) KeyValuePairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyValuePair {
		return vs[0].([]KeyValuePair)[vs[1].(int)]
	}).(KeyValuePairOutput)
}

// A map to describe the settings of an action.
type KeyValuePairResponse struct {
	// The name of the setting for the action.
	Key string `pulumi:"key"`
	// The value of the setting for the action.
	Value string `pulumi:"value"`
}

// A map to describe the settings of an action.
type KeyValuePairResponseOutput struct{ *pulumi.OutputState }

func (KeyValuePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyValuePairResponse)(nil)).Elem()
}

func (o KeyValuePairResponseOutput) ToKeyValuePairResponseOutput() KeyValuePairResponseOutput {
	return o
}

func (o KeyValuePairResponseOutput) ToKeyValuePairResponseOutputWithContext(ctx context.Context) KeyValuePairResponseOutput {
	return o
}

// The name of the setting for the action.
func (o KeyValuePairResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValuePairResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the setting for the action.
func (o KeyValuePairResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KeyValuePairResponse) string { return v.Value }).(pulumi.StringOutput)
}

type KeyValuePairResponseArrayOutput struct{ *pulumi.OutputState }

func (KeyValuePairResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyValuePairResponse)(nil)).Elem()
}

func (o KeyValuePairResponseArrayOutput) ToKeyValuePairResponseArrayOutput() KeyValuePairResponseArrayOutput {
	return o
}

func (o KeyValuePairResponseArrayOutput) ToKeyValuePairResponseArrayOutputWithContext(ctx context.Context) KeyValuePairResponseArrayOutput {
	return o
}

func (o KeyValuePairResponseArrayOutput) Index(i pulumi.IntInput) KeyValuePairResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyValuePairResponse {
		return vs[0].([]KeyValuePairResponse)[vs[1].(int)]
	}).(KeyValuePairResponseOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Model that represents the a list of branches and branch statuses.
type StepStatusResponse struct {
	// The array of branches.
	Branches []BranchStatusResponse `pulumi:"branches"`
	// The value of the status of the step.
	Status string `pulumi:"status"`
	// The id of the step.
	StepId string `pulumi:"stepId"`
	// The name of the step.
	StepName string `pulumi:"stepName"`
}

// Model that represents the a list of branches and branch statuses.
type StepStatusResponseOutput struct{ *pulumi.OutputState }

func (StepStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepStatusResponse)(nil)).Elem()
}

func (o StepStatusResponseOutput) ToStepStatusResponseOutput() StepStatusResponseOutput {
	return o
}

func (o StepStatusResponseOutput) ToStepStatusResponseOutputWithContext(ctx context.Context) StepStatusResponseOutput {
	return o
}

// The array of branches.
func (o StepStatusResponseOutput) Branches() BranchStatusResponseArrayOutput {
	return o.ApplyT(func(v StepStatusResponse) []BranchStatusResponse { return v.Branches }).(BranchStatusResponseArrayOutput)
}

// The value of the status of the step.
func (o StepStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v StepStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the step.
func (o StepStatusResponseOutput) StepId() pulumi.StringOutput {
	return o.ApplyT(func(v StepStatusResponse) string { return v.StepId }).(pulumi.StringOutput)
}

// The name of the step.
func (o StepStatusResponseOutput) StepName() pulumi.StringOutput {
	return o.ApplyT(func(v StepStatusResponse) string { return v.StepName }).(pulumi.StringOutput)
}

type StepStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (StepStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepStatusResponse)(nil)).Elem()
}

func (o StepStatusResponseArrayOutput) ToStepStatusResponseArrayOutput() StepStatusResponseArrayOutput {
	return o
}

func (o StepStatusResponseArrayOutput) ToStepStatusResponseArrayOutputWithContext(ctx context.Context) StepStatusResponseArrayOutput {
	return o
}

func (o StepStatusResponseArrayOutput) Index(i pulumi.IntInput) StepStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepStatusResponse {
		return vs[0].([]StepStatusResponse)[vs[1].(int)]
	}).(StepStatusResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Model that represents a reference to a Target in the selector.
type TargetReference struct {
	// String of the resource ID of a Target resource.
	Id string `pulumi:"id"`
	// Enum of the Target reference type.
	Type string `pulumi:"type"`
}

// TargetReferenceInput is an input type that accepts TargetReferenceArgs and TargetReferenceOutput values.
// You can construct a concrete instance of `TargetReferenceInput` via:
//
//	TargetReferenceArgs{...}
type TargetReferenceInput interface {
	pulumi.Input

	ToTargetReferenceOutput() TargetReferenceOutput
	ToTargetReferenceOutputWithContext(context.Context) TargetReferenceOutput
}

// Model that represents a reference to a Target in the selector.
type TargetReferenceArgs struct {
	// String of the resource ID of a Target resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Enum of the Target reference type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TargetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetReference)(nil)).Elem()
}

func (i TargetReferenceArgs) ToTargetReferenceOutput() TargetReferenceOutput {
	return i.ToTargetReferenceOutputWithContext(context.Background())
}

func (i TargetReferenceArgs) ToTargetReferenceOutputWithContext(ctx context.Context) TargetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetReferenceOutput)
}

// TargetReferenceArrayInput is an input type that accepts TargetReferenceArray and TargetReferenceArrayOutput values.
// You can construct a concrete instance of `TargetReferenceArrayInput` via:
//
//	TargetReferenceArray{ TargetReferenceArgs{...} }
type TargetReferenceArrayInput interface {
	pulumi.Input

	ToTargetReferenceArrayOutput() TargetReferenceArrayOutput
	ToTargetReferenceArrayOutputWithContext(context.Context) TargetReferenceArrayOutput
}

type TargetReferenceArray []TargetReferenceInput

func (TargetReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetReference)(nil)).Elem()
}

func (i TargetReferenceArray) ToTargetReferenceArrayOutput() TargetReferenceArrayOutput {
	return i.ToTargetReferenceArrayOutputWithContext(context.Background())
}

func (i TargetReferenceArray) ToTargetReferenceArrayOutputWithContext(ctx context.Context) TargetReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetReferenceArrayOutput)
}

// Model that represents a reference to a Target in the selector.
type TargetReferenceOutput struct{ *pulumi.OutputState }

func (TargetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetReference)(nil)).Elem()
}

func (o TargetReferenceOutput) ToTargetReferenceOutput() TargetReferenceOutput {
	return o
}

func (o TargetReferenceOutput) ToTargetReferenceOutputWithContext(ctx context.Context) TargetReferenceOutput {
	return o
}

// String of the resource ID of a Target resource.
func (o TargetReferenceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TargetReference) string { return v.Id }).(pulumi.StringOutput)
}

// Enum of the Target reference type.
func (o TargetReferenceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TargetReference) string { return v.Type }).(pulumi.StringOutput)
}

type TargetReferenceArrayOutput struct{ *pulumi.OutputState }

func (TargetReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetReference)(nil)).Elem()
}

func (o TargetReferenceArrayOutput) ToTargetReferenceArrayOutput() TargetReferenceArrayOutput {
	return o
}

func (o TargetReferenceArrayOutput) ToTargetReferenceArrayOutputWithContext(ctx context.Context) TargetReferenceArrayOutput {
	return o
}

func (o TargetReferenceArrayOutput) Index(i pulumi.IntInput) TargetReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetReference {
		return vs[0].([]TargetReference)[vs[1].(int)]
	}).(TargetReferenceOutput)
}

// Model that represents a reference to a Target in the selector.
type TargetReferenceResponse struct {
	// String of the resource ID of a Target resource.
	Id string `pulumi:"id"`
	// Enum of the Target reference type.
	Type string `pulumi:"type"`
}

// Model that represents a reference to a Target in the selector.
type TargetReferenceResponseOutput struct{ *pulumi.OutputState }

func (TargetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetReferenceResponse)(nil)).Elem()
}

func (o TargetReferenceResponseOutput) ToTargetReferenceResponseOutput() TargetReferenceResponseOutput {
	return o
}

func (o TargetReferenceResponseOutput) ToTargetReferenceResponseOutputWithContext(ctx context.Context) TargetReferenceResponseOutput {
	return o
}

// String of the resource ID of a Target resource.
func (o TargetReferenceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TargetReferenceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Enum of the Target reference type.
func (o TargetReferenceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TargetReferenceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TargetReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TargetReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TargetReferenceResponse)(nil)).Elem()
}

func (o TargetReferenceResponseArrayOutput) ToTargetReferenceResponseArrayOutput() TargetReferenceResponseArrayOutput {
	return o
}

func (o TargetReferenceResponseArrayOutput) ToTargetReferenceResponseArrayOutputWithContext(ctx context.Context) TargetReferenceResponseArrayOutput {
	return o
}

func (o TargetReferenceResponseArrayOutput) Index(i pulumi.IntInput) TargetReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TargetReferenceResponse {
		return vs[0].([]TargetReferenceResponse)[vs[1].(int)]
	}).(TargetReferenceResponseOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionStatusResponseOutput{})
	pulumi.RegisterOutputType(ActionStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(BranchStatusResponseOutput{})
	pulumi.RegisterOutputType(BranchStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(ChaosExperimentBranchOutput{})
	pulumi.RegisterOutputType(ChaosExperimentBranchArrayOutput{})
	pulumi.RegisterOutputType(ChaosExperimentBranchResponseOutput{})
	pulumi.RegisterOutputType(ChaosExperimentBranchResponseArrayOutput{})
	pulumi.RegisterOutputType(ChaosExperimentStepOutput{})
	pulumi.RegisterOutputType(ChaosExperimentStepArrayOutput{})
	pulumi.RegisterOutputType(ChaosExperimentStepResponseOutput{})
	pulumi.RegisterOutputType(ChaosExperimentStepResponseArrayOutput{})
	pulumi.RegisterOutputType(ChaosTargetListSelectorOutput{})
	pulumi.RegisterOutputType(ChaosTargetListSelectorResponseOutput{})
	pulumi.RegisterOutputType(ChaosTargetQuerySelectorOutput{})
	pulumi.RegisterOutputType(ChaosTargetQuerySelectorResponseOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterPtrOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterParametersOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterParametersPtrOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterParametersResponseOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterResponseOutput{})
	pulumi.RegisterOutputType(ChaosTargetSimpleFilterResponsePtrOutput{})
	pulumi.RegisterOutputType(ContinuousActionOutput{})
	pulumi.RegisterOutputType(ContinuousActionResponseOutput{})
	pulumi.RegisterOutputType(DelayActionOutput{})
	pulumi.RegisterOutputType(DelayActionResponseOutput{})
	pulumi.RegisterOutputType(DiscreteActionOutput{})
	pulumi.RegisterOutputType(DiscreteActionResponseOutput{})
	pulumi.RegisterOutputType(ExperimentExecutionActionTargetDetailsErrorResponseOutput{})
	pulumi.RegisterOutputType(ExperimentExecutionActionTargetDetailsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExperimentExecutionActionTargetDetailsPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ExperimentExecutionDetailsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ExperimentExecutionDetailsPropertiesRunInformationResponseOutput{})
	pulumi.RegisterOutputType(KeyValuePairOutput{})
	pulumi.RegisterOutputType(KeyValuePairArrayOutput{})
	pulumi.RegisterOutputType(KeyValuePairResponseOutput{})
	pulumi.RegisterOutputType(KeyValuePairResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(StepStatusResponseOutput{})
	pulumi.RegisterOutputType(StepStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TargetReferenceOutput{})
	pulumi.RegisterOutputType(TargetReferenceArrayOutput{})
	pulumi.RegisterOutputType(TargetReferenceResponseOutput{})
	pulumi.RegisterOutputType(TargetReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
