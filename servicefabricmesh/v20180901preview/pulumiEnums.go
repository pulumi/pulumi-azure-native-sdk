// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Specifies the application-scoped volume kind.
type ApplicationScopedVolumeKind string

const (
	// Provides Service Fabric High Availability Volume Disk
	ApplicationScopedVolumeKindServiceFabricVolumeDisk = ApplicationScopedVolumeKind("ServiceFabricVolumeDisk")
)

// The type of auto scaling mechanism.
type AutoScalingMechanismKind string

const (
	// Indicates that scaling should be performed by adding or removing replicas.
	AutoScalingMechanismKindAddRemoveReplica = AutoScalingMechanismKind("AddRemoveReplica")
)

// The type of auto scaling metric
type AutoScalingMetricKind string

const (
	// Indicates that the metric is one of resources, like cpu or memory.
	AutoScalingMetricKindResource = AutoScalingMetricKind("Resource")
)

// Name of the resource.
type AutoScalingResourceMetricName string

const (
	// Indicates that the resource is CPU cores.
	AutoScalingResourceMetricNameCpu = AutoScalingResourceMetricName("cpu")
	// Indicates that the resource is memory in GB.
	AutoScalingResourceMetricNameMemoryInGB = AutoScalingResourceMetricName("memoryInGB")
)

func (AutoScalingResourceMetricName) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScalingResourceMetricName)(nil)).Elem()
}

func (e AutoScalingResourceMetricName) ToAutoScalingResourceMetricNameOutput() AutoScalingResourceMetricNameOutput {
	return pulumi.ToOutput(e).(AutoScalingResourceMetricNameOutput)
}

func (e AutoScalingResourceMetricName) ToAutoScalingResourceMetricNameOutputWithContext(ctx context.Context) AutoScalingResourceMetricNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AutoScalingResourceMetricNameOutput)
}

func (e AutoScalingResourceMetricName) ToAutoScalingResourceMetricNamePtrOutput() AutoScalingResourceMetricNamePtrOutput {
	return e.ToAutoScalingResourceMetricNamePtrOutputWithContext(context.Background())
}

func (e AutoScalingResourceMetricName) ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx context.Context) AutoScalingResourceMetricNamePtrOutput {
	return AutoScalingResourceMetricName(e).ToAutoScalingResourceMetricNameOutputWithContext(ctx).ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx)
}

func (e AutoScalingResourceMetricName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoScalingResourceMetricName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoScalingResourceMetricName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoScalingResourceMetricName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AutoScalingResourceMetricNameOutput struct{ *pulumi.OutputState }

func (AutoScalingResourceMetricNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScalingResourceMetricName)(nil)).Elem()
}

func (o AutoScalingResourceMetricNameOutput) ToAutoScalingResourceMetricNameOutput() AutoScalingResourceMetricNameOutput {
	return o
}

func (o AutoScalingResourceMetricNameOutput) ToAutoScalingResourceMetricNameOutputWithContext(ctx context.Context) AutoScalingResourceMetricNameOutput {
	return o
}

func (o AutoScalingResourceMetricNameOutput) ToAutoScalingResourceMetricNamePtrOutput() AutoScalingResourceMetricNamePtrOutput {
	return o.ToAutoScalingResourceMetricNamePtrOutputWithContext(context.Background())
}

func (o AutoScalingResourceMetricNameOutput) ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx context.Context) AutoScalingResourceMetricNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoScalingResourceMetricName) *AutoScalingResourceMetricName {
		return &v
	}).(AutoScalingResourceMetricNamePtrOutput)
}

func (o AutoScalingResourceMetricNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AutoScalingResourceMetricNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoScalingResourceMetricName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AutoScalingResourceMetricNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoScalingResourceMetricNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AutoScalingResourceMetricName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AutoScalingResourceMetricNamePtrOutput struct{ *pulumi.OutputState }

func (AutoScalingResourceMetricNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScalingResourceMetricName)(nil)).Elem()
}

func (o AutoScalingResourceMetricNamePtrOutput) ToAutoScalingResourceMetricNamePtrOutput() AutoScalingResourceMetricNamePtrOutput {
	return o
}

func (o AutoScalingResourceMetricNamePtrOutput) ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx context.Context) AutoScalingResourceMetricNamePtrOutput {
	return o
}

func (o AutoScalingResourceMetricNamePtrOutput) Elem() AutoScalingResourceMetricNameOutput {
	return o.ApplyT(func(v *AutoScalingResourceMetricName) AutoScalingResourceMetricName {
		if v != nil {
			return *v
		}
		var ret AutoScalingResourceMetricName
		return ret
	}).(AutoScalingResourceMetricNameOutput)
}

func (o AutoScalingResourceMetricNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AutoScalingResourceMetricNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AutoScalingResourceMetricName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AutoScalingResourceMetricNameInput is an input type that accepts values of the AutoScalingResourceMetricName enum
// A concrete instance of `AutoScalingResourceMetricNameInput` can be one of the following:
//
//	AutoScalingResourceMetricNameCpu
//	AutoScalingResourceMetricNameMemoryInGB
type AutoScalingResourceMetricNameInput interface {
	pulumi.Input

	ToAutoScalingResourceMetricNameOutput() AutoScalingResourceMetricNameOutput
	ToAutoScalingResourceMetricNameOutputWithContext(context.Context) AutoScalingResourceMetricNameOutput
}

var autoScalingResourceMetricNamePtrType = reflect.TypeOf((**AutoScalingResourceMetricName)(nil)).Elem()

type AutoScalingResourceMetricNamePtrInput interface {
	pulumi.Input

	ToAutoScalingResourceMetricNamePtrOutput() AutoScalingResourceMetricNamePtrOutput
	ToAutoScalingResourceMetricNamePtrOutputWithContext(context.Context) AutoScalingResourceMetricNamePtrOutput
}

type autoScalingResourceMetricNamePtr string

func AutoScalingResourceMetricNamePtr(v string) AutoScalingResourceMetricNamePtrInput {
	return (*autoScalingResourceMetricNamePtr)(&v)
}

func (*autoScalingResourceMetricNamePtr) ElementType() reflect.Type {
	return autoScalingResourceMetricNamePtrType
}

func (in *autoScalingResourceMetricNamePtr) ToAutoScalingResourceMetricNamePtrOutput() AutoScalingResourceMetricNamePtrOutput {
	return pulumi.ToOutput(in).(AutoScalingResourceMetricNamePtrOutput)
}

func (in *autoScalingResourceMetricNamePtr) ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx context.Context) AutoScalingResourceMetricNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AutoScalingResourceMetricNamePtrOutput)
}

func (in *autoScalingResourceMetricNamePtr) ToOutput(ctx context.Context) pulumix.Output[*AutoScalingResourceMetricName] {
	return pulumix.Output[*AutoScalingResourceMetricName]{
		OutputState: in.ToAutoScalingResourceMetricNamePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of auto scaling trigger
type AutoScalingTriggerKind string

const (
	// Indicates that scaling should be performed based on average load of all replicas in the service.
	AutoScalingTriggerKindAverageLoad = AutoScalingTriggerKind("AverageLoad")
)

// The kind of DiagnosticsSink.
type DiagnosticsSinkKind string

const (
	// Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type.
	DiagnosticsSinkKindInvalid = DiagnosticsSinkKind("Invalid")
	// Diagnostics settings for Geneva.
	DiagnosticsSinkKindAzureInternalMonitoringPipeline = DiagnosticsSinkKind("AzureInternalMonitoringPipeline")
)

// how to match header value
type HeaderMatchType string

const (
	HeaderMatchTypeExact = HeaderMatchType("exact")
)

func (HeaderMatchType) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderMatchType)(nil)).Elem()
}

func (e HeaderMatchType) ToHeaderMatchTypeOutput() HeaderMatchTypeOutput {
	return pulumi.ToOutput(e).(HeaderMatchTypeOutput)
}

func (e HeaderMatchType) ToHeaderMatchTypeOutputWithContext(ctx context.Context) HeaderMatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HeaderMatchTypeOutput)
}

func (e HeaderMatchType) ToHeaderMatchTypePtrOutput() HeaderMatchTypePtrOutput {
	return e.ToHeaderMatchTypePtrOutputWithContext(context.Background())
}

func (e HeaderMatchType) ToHeaderMatchTypePtrOutputWithContext(ctx context.Context) HeaderMatchTypePtrOutput {
	return HeaderMatchType(e).ToHeaderMatchTypeOutputWithContext(ctx).ToHeaderMatchTypePtrOutputWithContext(ctx)
}

func (e HeaderMatchType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderMatchType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HeaderMatchType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HeaderMatchType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HeaderMatchTypeOutput struct{ *pulumi.OutputState }

func (HeaderMatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderMatchType)(nil)).Elem()
}

func (o HeaderMatchTypeOutput) ToHeaderMatchTypeOutput() HeaderMatchTypeOutput {
	return o
}

func (o HeaderMatchTypeOutput) ToHeaderMatchTypeOutputWithContext(ctx context.Context) HeaderMatchTypeOutput {
	return o
}

func (o HeaderMatchTypeOutput) ToHeaderMatchTypePtrOutput() HeaderMatchTypePtrOutput {
	return o.ToHeaderMatchTypePtrOutputWithContext(context.Background())
}

func (o HeaderMatchTypeOutput) ToHeaderMatchTypePtrOutputWithContext(ctx context.Context) HeaderMatchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HeaderMatchType) *HeaderMatchType {
		return &v
	}).(HeaderMatchTypePtrOutput)
}

func (o HeaderMatchTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HeaderMatchTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderMatchType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HeaderMatchTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderMatchTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HeaderMatchType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HeaderMatchTypePtrOutput struct{ *pulumi.OutputState }

func (HeaderMatchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HeaderMatchType)(nil)).Elem()
}

func (o HeaderMatchTypePtrOutput) ToHeaderMatchTypePtrOutput() HeaderMatchTypePtrOutput {
	return o
}

func (o HeaderMatchTypePtrOutput) ToHeaderMatchTypePtrOutputWithContext(ctx context.Context) HeaderMatchTypePtrOutput {
	return o
}

func (o HeaderMatchTypePtrOutput) Elem() HeaderMatchTypeOutput {
	return o.ApplyT(func(v *HeaderMatchType) HeaderMatchType {
		if v != nil {
			return *v
		}
		var ret HeaderMatchType
		return ret
	}).(HeaderMatchTypeOutput)
}

func (o HeaderMatchTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderMatchTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HeaderMatchType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HeaderMatchTypeInput is an input type that accepts values of the HeaderMatchType enum
// A concrete instance of `HeaderMatchTypeInput` can be one of the following:
//
//	HeaderMatchTypeExact
type HeaderMatchTypeInput interface {
	pulumi.Input

	ToHeaderMatchTypeOutput() HeaderMatchTypeOutput
	ToHeaderMatchTypeOutputWithContext(context.Context) HeaderMatchTypeOutput
}

var headerMatchTypePtrType = reflect.TypeOf((**HeaderMatchType)(nil)).Elem()

type HeaderMatchTypePtrInput interface {
	pulumi.Input

	ToHeaderMatchTypePtrOutput() HeaderMatchTypePtrOutput
	ToHeaderMatchTypePtrOutputWithContext(context.Context) HeaderMatchTypePtrOutput
}

type headerMatchTypePtr string

func HeaderMatchTypePtr(v string) HeaderMatchTypePtrInput {
	return (*headerMatchTypePtr)(&v)
}

func (*headerMatchTypePtr) ElementType() reflect.Type {
	return headerMatchTypePtrType
}

func (in *headerMatchTypePtr) ToHeaderMatchTypePtrOutput() HeaderMatchTypePtrOutput {
	return pulumi.ToOutput(in).(HeaderMatchTypePtrOutput)
}

func (in *headerMatchTypePtr) ToHeaderMatchTypePtrOutputWithContext(ctx context.Context) HeaderMatchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HeaderMatchTypePtrOutput)
}

func (in *headerMatchTypePtr) ToOutput(ctx context.Context) pulumix.Output[*HeaderMatchType] {
	return pulumix.Output[*HeaderMatchType]{
		OutputState: in.ToHeaderMatchTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The type of a Service Fabric container network.
type NetworkKind string

const (
	// Indicates a container network local to a single Service Fabric cluster. The value is 1.
	NetworkKindLocal = NetworkKind("Local")
)

// The operation system required by the code in service.
type OperatingSystemType string

const (
	// The required operating system is Linux.
	OperatingSystemTypeLinux = OperatingSystemType("Linux")
	// The required operating system is Windows.
	OperatingSystemTypeWindows = OperatingSystemType("Windows")
)

func (OperatingSystemType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (e OperatingSystemType) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return pulumi.ToOutput(e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return e.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return OperatingSystemType(e).ToOperatingSystemTypeOutputWithContext(ctx).ToOperatingSystemTypePtrOutputWithContext(ctx)
}

func (e OperatingSystemType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatingSystemTypeOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatingSystemType) *OperatingSystemType {
		return &v
	}).(OperatingSystemTypePtrOutput)
}

func (o OperatingSystemTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatingSystemTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatingSystemTypePtrOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) Elem() OperatingSystemTypeOutput {
	return o.ApplyT(func(v *OperatingSystemType) OperatingSystemType {
		if v != nil {
			return *v
		}
		var ret OperatingSystemType
		return ret
	}).(OperatingSystemTypeOutput)
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatingSystemType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatingSystemTypeInput is an input type that accepts values of the OperatingSystemType enum
// A concrete instance of `OperatingSystemTypeInput` can be one of the following:
//
//	OperatingSystemTypeLinux
//	OperatingSystemTypeWindows
type OperatingSystemTypeInput interface {
	pulumi.Input

	ToOperatingSystemTypeOutput() OperatingSystemTypeOutput
	ToOperatingSystemTypeOutputWithContext(context.Context) OperatingSystemTypeOutput
}

var operatingSystemTypePtrType = reflect.TypeOf((**OperatingSystemType)(nil)).Elem()

type OperatingSystemTypePtrInput interface {
	pulumi.Input

	ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput
	ToOperatingSystemTypePtrOutputWithContext(context.Context) OperatingSystemTypePtrOutput
}

type operatingSystemTypePtr string

func OperatingSystemTypePtr(v string) OperatingSystemTypePtrInput {
	return (*operatingSystemTypePtr)(&v)
}

func (*operatingSystemTypePtr) ElementType() reflect.Type {
	return operatingSystemTypePtrType
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return pulumi.ToOutput(in).(OperatingSystemTypePtrOutput)
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatingSystemTypePtrOutput)
}

func (in *operatingSystemTypePtr) ToOutput(ctx context.Context) pulumix.Output[*OperatingSystemType] {
	return pulumix.Output[*OperatingSystemType]{
		OutputState: in.ToOperatingSystemTypePtrOutputWithContext(ctx).OutputState,
	}
}

// how to match value in the Uri
type PathMatchType string

const (
	PathMatchTypePrefix = PathMatchType("prefix")
)

func (PathMatchType) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatchType)(nil)).Elem()
}

func (e PathMatchType) ToPathMatchTypeOutput() PathMatchTypeOutput {
	return pulumi.ToOutput(e).(PathMatchTypeOutput)
}

func (e PathMatchType) ToPathMatchTypeOutputWithContext(ctx context.Context) PathMatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PathMatchTypeOutput)
}

func (e PathMatchType) ToPathMatchTypePtrOutput() PathMatchTypePtrOutput {
	return e.ToPathMatchTypePtrOutputWithContext(context.Background())
}

func (e PathMatchType) ToPathMatchTypePtrOutputWithContext(ctx context.Context) PathMatchTypePtrOutput {
	return PathMatchType(e).ToPathMatchTypeOutputWithContext(ctx).ToPathMatchTypePtrOutputWithContext(ctx)
}

func (e PathMatchType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PathMatchType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PathMatchType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PathMatchType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PathMatchTypeOutput struct{ *pulumi.OutputState }

func (PathMatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathMatchType)(nil)).Elem()
}

func (o PathMatchTypeOutput) ToPathMatchTypeOutput() PathMatchTypeOutput {
	return o
}

func (o PathMatchTypeOutput) ToPathMatchTypeOutputWithContext(ctx context.Context) PathMatchTypeOutput {
	return o
}

func (o PathMatchTypeOutput) ToPathMatchTypePtrOutput() PathMatchTypePtrOutput {
	return o.ToPathMatchTypePtrOutputWithContext(context.Background())
}

func (o PathMatchTypeOutput) ToPathMatchTypePtrOutputWithContext(ctx context.Context) PathMatchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PathMatchType) *PathMatchType {
		return &v
	}).(PathMatchTypePtrOutput)
}

func (o PathMatchTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PathMatchTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PathMatchType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PathMatchTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PathMatchTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PathMatchType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PathMatchTypePtrOutput struct{ *pulumi.OutputState }

func (PathMatchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PathMatchType)(nil)).Elem()
}

func (o PathMatchTypePtrOutput) ToPathMatchTypePtrOutput() PathMatchTypePtrOutput {
	return o
}

func (o PathMatchTypePtrOutput) ToPathMatchTypePtrOutputWithContext(ctx context.Context) PathMatchTypePtrOutput {
	return o
}

func (o PathMatchTypePtrOutput) Elem() PathMatchTypeOutput {
	return o.ApplyT(func(v *PathMatchType) PathMatchType {
		if v != nil {
			return *v
		}
		var ret PathMatchType
		return ret
	}).(PathMatchTypeOutput)
}

func (o PathMatchTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PathMatchTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PathMatchType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PathMatchTypeInput is an input type that accepts values of the PathMatchType enum
// A concrete instance of `PathMatchTypeInput` can be one of the following:
//
//	PathMatchTypePrefix
type PathMatchTypeInput interface {
	pulumi.Input

	ToPathMatchTypeOutput() PathMatchTypeOutput
	ToPathMatchTypeOutputWithContext(context.Context) PathMatchTypeOutput
}

var pathMatchTypePtrType = reflect.TypeOf((**PathMatchType)(nil)).Elem()

type PathMatchTypePtrInput interface {
	pulumi.Input

	ToPathMatchTypePtrOutput() PathMatchTypePtrOutput
	ToPathMatchTypePtrOutputWithContext(context.Context) PathMatchTypePtrOutput
}

type pathMatchTypePtr string

func PathMatchTypePtr(v string) PathMatchTypePtrInput {
	return (*pathMatchTypePtr)(&v)
}

func (*pathMatchTypePtr) ElementType() reflect.Type {
	return pathMatchTypePtrType
}

func (in *pathMatchTypePtr) ToPathMatchTypePtrOutput() PathMatchTypePtrOutput {
	return pulumi.ToOutput(in).(PathMatchTypePtrOutput)
}

func (in *pathMatchTypePtr) ToPathMatchTypePtrOutputWithContext(ctx context.Context) PathMatchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PathMatchTypePtrOutput)
}

func (in *pathMatchTypePtr) ToOutput(ctx context.Context) pulumix.Output[*PathMatchType] {
	return pulumix.Output[*PathMatchType]{
		OutputState: in.ToPathMatchTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the kind of secret.
type SecretKind string

const (
	// A simple secret resource whose plaintext value is provided by the user.
	SecretKindInlinedValue = SecretKind("inlinedValue")
)

// Volume size
type SizeTypes string

const (
	SizeTypesSmall  = SizeTypes("Small")
	SizeTypesMedium = SizeTypes("Medium")
	SizeTypesLarge  = SizeTypes("Large")
)

func (SizeTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeTypes)(nil)).Elem()
}

func (e SizeTypes) ToSizeTypesOutput() SizeTypesOutput {
	return pulumi.ToOutput(e).(SizeTypesOutput)
}

func (e SizeTypes) ToSizeTypesOutputWithContext(ctx context.Context) SizeTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SizeTypesOutput)
}

func (e SizeTypes) ToSizeTypesPtrOutput() SizeTypesPtrOutput {
	return e.ToSizeTypesPtrOutputWithContext(context.Background())
}

func (e SizeTypes) ToSizeTypesPtrOutputWithContext(ctx context.Context) SizeTypesPtrOutput {
	return SizeTypes(e).ToSizeTypesOutputWithContext(ctx).ToSizeTypesPtrOutputWithContext(ctx)
}

func (e SizeTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SizeTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SizeTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SizeTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SizeTypesOutput struct{ *pulumi.OutputState }

func (SizeTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SizeTypes)(nil)).Elem()
}

func (o SizeTypesOutput) ToSizeTypesOutput() SizeTypesOutput {
	return o
}

func (o SizeTypesOutput) ToSizeTypesOutputWithContext(ctx context.Context) SizeTypesOutput {
	return o
}

func (o SizeTypesOutput) ToSizeTypesPtrOutput() SizeTypesPtrOutput {
	return o.ToSizeTypesPtrOutputWithContext(context.Background())
}

func (o SizeTypesOutput) ToSizeTypesPtrOutputWithContext(ctx context.Context) SizeTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SizeTypes) *SizeTypes {
		return &v
	}).(SizeTypesPtrOutput)
}

func (o SizeTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SizeTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SizeTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SizeTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SizeTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SizeTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SizeTypesPtrOutput struct{ *pulumi.OutputState }

func (SizeTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SizeTypes)(nil)).Elem()
}

func (o SizeTypesPtrOutput) ToSizeTypesPtrOutput() SizeTypesPtrOutput {
	return o
}

func (o SizeTypesPtrOutput) ToSizeTypesPtrOutputWithContext(ctx context.Context) SizeTypesPtrOutput {
	return o
}

func (o SizeTypesPtrOutput) Elem() SizeTypesOutput {
	return o.ApplyT(func(v *SizeTypes) SizeTypes {
		if v != nil {
			return *v
		}
		var ret SizeTypes
		return ret
	}).(SizeTypesOutput)
}

func (o SizeTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SizeTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SizeTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SizeTypesInput is an input type that accepts values of the SizeTypes enum
// A concrete instance of `SizeTypesInput` can be one of the following:
//
//	SizeTypesSmall
//	SizeTypesMedium
//	SizeTypesLarge
type SizeTypesInput interface {
	pulumi.Input

	ToSizeTypesOutput() SizeTypesOutput
	ToSizeTypesOutputWithContext(context.Context) SizeTypesOutput
}

var sizeTypesPtrType = reflect.TypeOf((**SizeTypes)(nil)).Elem()

type SizeTypesPtrInput interface {
	pulumi.Input

	ToSizeTypesPtrOutput() SizeTypesPtrOutput
	ToSizeTypesPtrOutputWithContext(context.Context) SizeTypesPtrOutput
}

type sizeTypesPtr string

func SizeTypesPtr(v string) SizeTypesPtrInput {
	return (*sizeTypesPtr)(&v)
}

func (*sizeTypesPtr) ElementType() reflect.Type {
	return sizeTypesPtrType
}

func (in *sizeTypesPtr) ToSizeTypesPtrOutput() SizeTypesPtrOutput {
	return pulumi.ToOutput(in).(SizeTypesPtrOutput)
}

func (in *sizeTypesPtr) ToSizeTypesPtrOutputWithContext(ctx context.Context) SizeTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SizeTypesPtrOutput)
}

func (in *sizeTypesPtr) ToOutput(ctx context.Context) pulumix.Output[*SizeTypes] {
	return pulumix.Output[*SizeTypes]{
		OutputState: in.ToSizeTypesPtrOutputWithContext(ctx).OutputState,
	}
}

// Provider of the volume.
type VolumeProvider string

const (
	// Provides volumes that are backed by Azure Files.
	VolumeProviderSFAzureFile = VolumeProvider("SFAzureFile")
)

func (VolumeProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProvider)(nil)).Elem()
}

func (e VolumeProvider) ToVolumeProviderOutput() VolumeProviderOutput {
	return pulumi.ToOutput(e).(VolumeProviderOutput)
}

func (e VolumeProvider) ToVolumeProviderOutputWithContext(ctx context.Context) VolumeProviderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VolumeProviderOutput)
}

func (e VolumeProvider) ToVolumeProviderPtrOutput() VolumeProviderPtrOutput {
	return e.ToVolumeProviderPtrOutputWithContext(context.Background())
}

func (e VolumeProvider) ToVolumeProviderPtrOutputWithContext(ctx context.Context) VolumeProviderPtrOutput {
	return VolumeProvider(e).ToVolumeProviderOutputWithContext(ctx).ToVolumeProviderPtrOutputWithContext(ctx)
}

func (e VolumeProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e VolumeProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e VolumeProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VolumeProviderOutput struct{ *pulumi.OutputState }

func (VolumeProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeProvider)(nil)).Elem()
}

func (o VolumeProviderOutput) ToVolumeProviderOutput() VolumeProviderOutput {
	return o
}

func (o VolumeProviderOutput) ToVolumeProviderOutputWithContext(ctx context.Context) VolumeProviderOutput {
	return o
}

func (o VolumeProviderOutput) ToVolumeProviderPtrOutput() VolumeProviderPtrOutput {
	return o.ToVolumeProviderPtrOutputWithContext(context.Background())
}

func (o VolumeProviderOutput) ToVolumeProviderPtrOutputWithContext(ctx context.Context) VolumeProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeProvider) *VolumeProvider {
		return &v
	}).(VolumeProviderPtrOutput)
}

func (o VolumeProviderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VolumeProviderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeProvider) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VolumeProviderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeProviderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e VolumeProvider) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VolumeProviderPtrOutput struct{ *pulumi.OutputState }

func (VolumeProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeProvider)(nil)).Elem()
}

func (o VolumeProviderPtrOutput) ToVolumeProviderPtrOutput() VolumeProviderPtrOutput {
	return o
}

func (o VolumeProviderPtrOutput) ToVolumeProviderPtrOutputWithContext(ctx context.Context) VolumeProviderPtrOutput {
	return o
}

func (o VolumeProviderPtrOutput) Elem() VolumeProviderOutput {
	return o.ApplyT(func(v *VolumeProvider) VolumeProvider {
		if v != nil {
			return *v
		}
		var ret VolumeProvider
		return ret
	}).(VolumeProviderOutput)
}

func (o VolumeProviderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VolumeProviderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *VolumeProvider) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VolumeProviderInput is an input type that accepts values of the VolumeProvider enum
// A concrete instance of `VolumeProviderInput` can be one of the following:
//
//	VolumeProviderSFAzureFile
type VolumeProviderInput interface {
	pulumi.Input

	ToVolumeProviderOutput() VolumeProviderOutput
	ToVolumeProviderOutputWithContext(context.Context) VolumeProviderOutput
}

var volumeProviderPtrType = reflect.TypeOf((**VolumeProvider)(nil)).Elem()

type VolumeProviderPtrInput interface {
	pulumi.Input

	ToVolumeProviderPtrOutput() VolumeProviderPtrOutput
	ToVolumeProviderPtrOutputWithContext(context.Context) VolumeProviderPtrOutput
}

type volumeProviderPtr string

func VolumeProviderPtr(v string) VolumeProviderPtrInput {
	return (*volumeProviderPtr)(&v)
}

func (*volumeProviderPtr) ElementType() reflect.Type {
	return volumeProviderPtrType
}

func (in *volumeProviderPtr) ToVolumeProviderPtrOutput() VolumeProviderPtrOutput {
	return pulumi.ToOutput(in).(VolumeProviderPtrOutput)
}

func (in *volumeProviderPtr) ToVolumeProviderPtrOutputWithContext(ctx context.Context) VolumeProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VolumeProviderPtrOutput)
}

func (in *volumeProviderPtr) ToOutput(ctx context.Context) pulumix.Output[*VolumeProvider] {
	return pulumix.Output[*VolumeProvider]{
		OutputState: in.ToVolumeProviderPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AutoScalingResourceMetricNameOutput{})
	pulumi.RegisterOutputType(AutoScalingResourceMetricNamePtrOutput{})
	pulumi.RegisterOutputType(HeaderMatchTypeOutput{})
	pulumi.RegisterOutputType(HeaderMatchTypePtrOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypeOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypePtrOutput{})
	pulumi.RegisterOutputType(PathMatchTypeOutput{})
	pulumi.RegisterOutputType(PathMatchTypePtrOutput{})
	pulumi.RegisterOutputType(SizeTypesOutput{})
	pulumi.RegisterOutputType(SizeTypesPtrOutput{})
	pulumi.RegisterOutputType(VolumeProviderOutput{})
	pulumi.RegisterOutputType(VolumeProviderPtrOutput{})
}
