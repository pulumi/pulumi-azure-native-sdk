// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Solution REST Resource.
type SolutionsControllerSolution struct {
	pulumi.CustomResourceState

	// Gets or sets the ETAG for optimistic concurrency control.
	Etag pulumi.StringPtrOutput `pulumi:"etag"`
	// Gets the name of this REST resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets or sets the properties of the solution.
	Properties SolutionPropertiesResponseOutput `pulumi:"properties"`
	// Gets the type of this REST resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSolutionsControllerSolution registers a new resource with the given unique name, arguments, and options.
func NewSolutionsControllerSolution(ctx *pulumi.Context,
	name string, args *SolutionsControllerSolutionArgs, opts ...pulumi.ResourceOption) (*SolutionsControllerSolution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MigrateProjectName == nil {
		return nil, errors.New("invalid value for required argument 'MigrateProjectName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:migrate:SolutionsControllerSolution"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20180901preview:SolutionsControllerSolution"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolutionsControllerSolution
	err := ctx.RegisterResource("azure-native:migrate/v20230101:SolutionsControllerSolution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionsControllerSolution gets an existing SolutionsControllerSolution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionsControllerSolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionsControllerSolutionState, opts ...pulumi.ResourceOption) (*SolutionsControllerSolution, error) {
	var resource SolutionsControllerSolution
	err := ctx.ReadResource("azure-native:migrate/v20230101:SolutionsControllerSolution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionsControllerSolution resources.
type solutionsControllerSolutionState struct {
}

type SolutionsControllerSolutionState struct {
}

func (SolutionsControllerSolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionsControllerSolutionState)(nil)).Elem()
}

type solutionsControllerSolutionArgs struct {
	// Name of the Azure Migrate project.
	MigrateProjectName string `pulumi:"migrateProjectName"`
	// Gets or sets the properties of the solution.
	Properties *SolutionProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Unique name of a migration solution within a migrate project.
	SolutionName *string `pulumi:"solutionName"`
}

// The set of arguments for constructing a SolutionsControllerSolution resource.
type SolutionsControllerSolutionArgs struct {
	// Name of the Azure Migrate project.
	MigrateProjectName pulumi.StringInput
	// Gets or sets the properties of the solution.
	Properties SolutionPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Unique name of a migration solution within a migrate project.
	SolutionName pulumi.StringPtrInput
}

func (SolutionsControllerSolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionsControllerSolutionArgs)(nil)).Elem()
}

type SolutionsControllerSolutionInput interface {
	pulumi.Input

	ToSolutionsControllerSolutionOutput() SolutionsControllerSolutionOutput
	ToSolutionsControllerSolutionOutputWithContext(ctx context.Context) SolutionsControllerSolutionOutput
}

func (*SolutionsControllerSolution) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionsControllerSolution)(nil)).Elem()
}

func (i *SolutionsControllerSolution) ToSolutionsControllerSolutionOutput() SolutionsControllerSolutionOutput {
	return i.ToSolutionsControllerSolutionOutputWithContext(context.Background())
}

func (i *SolutionsControllerSolution) ToSolutionsControllerSolutionOutputWithContext(ctx context.Context) SolutionsControllerSolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionsControllerSolutionOutput)
}

type SolutionsControllerSolutionOutput struct{ *pulumi.OutputState }

func (SolutionsControllerSolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionsControllerSolution)(nil)).Elem()
}

func (o SolutionsControllerSolutionOutput) ToSolutionsControllerSolutionOutput() SolutionsControllerSolutionOutput {
	return o
}

func (o SolutionsControllerSolutionOutput) ToSolutionsControllerSolutionOutputWithContext(ctx context.Context) SolutionsControllerSolutionOutput {
	return o
}

// Gets or sets the ETAG for optimistic concurrency control.
func (o SolutionsControllerSolutionOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolutionsControllerSolution) pulumi.StringPtrOutput { return v.Etag }).(pulumi.StringPtrOutput)
}

// Gets the name of this REST resource.
func (o SolutionsControllerSolutionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionsControllerSolution) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the properties of the solution.
func (o SolutionsControllerSolutionOutput) Properties() SolutionPropertiesResponseOutput {
	return o.ApplyT(func(v *SolutionsControllerSolution) SolutionPropertiesResponseOutput { return v.Properties }).(SolutionPropertiesResponseOutput)
}

// Gets the type of this REST resource.
func (o SolutionsControllerSolutionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionsControllerSolution) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SolutionsControllerSolutionOutput{})
}
