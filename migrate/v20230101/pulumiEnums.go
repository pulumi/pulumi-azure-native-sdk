// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101

// Gets or sets the cleanup state of the solution.
type CleanupState string

const (
	CleanupStateNone       = CleanupState("None")
	CleanupStateStarted    = CleanupState("Started")
	CleanupStateInProgress = CleanupState("InProgress")
	CleanupStateCompleted  = CleanupState("Completed")
	CleanupStateFailed     = CleanupState("Failed")
)

// Gets or sets the goal of the solution.
type Goal string

const (
	GoalServers               = Goal("Servers")
	GoalDatabases             = Goal("Databases")
	GoalDesktopVirtualization = Goal("DesktopVirtualization")
	GoalWebApplications       = Goal("WebApplications")
	GoalDataCenter            = Goal("DataCenter")
)

// Private link connection state.
type PrivateLinkServiceConnectionStateStatus string

const (
	PrivateLinkServiceConnectionStateStatusApproved     = PrivateLinkServiceConnectionStateStatus("Approved")
	PrivateLinkServiceConnectionStateStatusPending      = PrivateLinkServiceConnectionStateStatus("Pending")
	PrivateLinkServiceConnectionStateStatusRejected     = PrivateLinkServiceConnectionStateStatus("Rejected")
	PrivateLinkServiceConnectionStateStatusDisconnected = PrivateLinkServiceConnectionStateStatus("Disconnected")
)

// Gets or sets the state of public network access.
type PublicNetworkAccess string

const (
	PublicNetworkAccessNotSpecified = PublicNetworkAccess("NotSpecified")
	PublicNetworkAccessEnabled      = PublicNetworkAccess("Enabled")
	PublicNetworkAccessDisabled     = PublicNetworkAccess("Disabled")
)

// Gets or sets the purpose of the solution.
type Purpose string

const (
	PurposeDiscovery  = Purpose("Discovery")
	PurposeAssessment = Purpose("Assessment")
	PurposeMigration  = Purpose("Migration")
)

// Gets or sets the current status of the solution.
type Status string

const (
	StatusInactive = Status("Inactive")
	StatusActive   = Status("Active")
)

// Gets or sets the tool being used in the solution.
type Tool string

const (
	ToolServerDiscovery                  = Tool("ServerDiscovery")
	ToolServerAssessment                 = Tool("ServerAssessment")
	ToolServerMigration                  = Tool("ServerMigration")
	ToolCloudamize                       = Tool("Cloudamize")
	ToolTurbonomic                       = Tool("Turbonomic")
	ToolZerto                            = Tool("Zerto")
	ToolCorentTech                       = Tool("CorentTech")
	ToolServerAssessmentV1               = Tool("ServerAssessmentV1")
	Tool_ServerMigration_Replication     = Tool("ServerMigration_Replication")
	ToolCarbonite                        = Tool("Carbonite")
	ToolDataMigrationAssistant           = Tool("DataMigrationAssistant")
	ToolDatabaseMigrationService         = Tool("DatabaseMigrationService")
	ToolDevice42                         = Tool("Device42")
	ToolJetStream                        = Tool("JetStream")
	ToolRackWare                         = Tool("RackWare")
	ToolUnifyCloud                       = Tool("UnifyCloud")
	ToolFlexera                          = Tool("Flexera")
	Tool_ServerDiscovery_Import          = Tool("ServerDiscovery_Import")
	ToolLakeside                         = Tool("Lakeside")
	ToolAppServiceMigrationAssistant     = Tool("AppServiceMigrationAssistant")
	ToolMovere                           = Tool("Movere")
	ToolCloudSphere                      = Tool("CloudSphere")
	ToolModernization                    = Tool("Modernization")
	Tool_ServerMigration_DataReplication = Tool("ServerMigration_DataReplication")
	ToolUnknown                          = Tool("Unknown")
)

func init() {
}
