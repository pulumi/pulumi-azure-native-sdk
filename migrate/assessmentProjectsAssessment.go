// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An assessment created for a group in the Migration project.
// Azure REST API version: 2019-10-01.
type AssessmentProjectsAssessment struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// For optimistic concurrency control.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Unique name of an assessment.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the assessment.
	Properties AssessmentPropertiesResponseOutput `pulumi:"properties"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAssessmentProjectsAssessment registers a new resource with the given unique name, arguments, and options.
func NewAssessmentProjectsAssessment(ctx *pulumi.Context,
	name string, args *AssessmentProjectsAssessmentArgs, opts ...pulumi.ResourceOption) (*AssessmentProjectsAssessment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:migrate/v20191001:Assessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20191001:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentProjectsAssessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate:Assessment"),
		},
		{
			Type: pulumi.String("azure-native:migrate:AssessmentsOperation"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AssessmentProjectsAssessment
	err := ctx.RegisterResource("azure-native:migrate:AssessmentProjectsAssessment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentProjectsAssessment gets an existing AssessmentProjectsAssessment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentProjectsAssessment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentProjectsAssessmentState, opts ...pulumi.ResourceOption) (*AssessmentProjectsAssessment, error) {
	var resource AssessmentProjectsAssessment
	err := ctx.ReadResource("azure-native:migrate:AssessmentProjectsAssessment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentProjectsAssessment resources.
type assessmentProjectsAssessmentState struct {
}

type AssessmentProjectsAssessmentState struct {
}

func (AssessmentProjectsAssessmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsAssessmentState)(nil)).Elem()
}

type assessmentProjectsAssessmentArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName *string `pulumi:"assessmentName"`
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Unique name of a group within a project.
	GroupName string `pulumi:"groupName"`
	// Name of the Azure Migrate project.
	ProjectName string `pulumi:"projectName"`
	// Properties of the assessment.
	Properties AssessmentProperties `pulumi:"properties"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AssessmentProjectsAssessment resource.
type AssessmentProjectsAssessmentArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName pulumi.StringPtrInput
	// For optimistic concurrency control.
	ETag pulumi.StringPtrInput
	// Unique name of a group within a project.
	GroupName pulumi.StringInput
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput
	// Properties of the assessment.
	Properties AssessmentPropertiesInput
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput
}

func (AssessmentProjectsAssessmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsAssessmentArgs)(nil)).Elem()
}

type AssessmentProjectsAssessmentInput interface {
	pulumi.Input

	ToAssessmentProjectsAssessmentOutput() AssessmentProjectsAssessmentOutput
	ToAssessmentProjectsAssessmentOutputWithContext(ctx context.Context) AssessmentProjectsAssessmentOutput
}

func (*AssessmentProjectsAssessment) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsAssessment)(nil)).Elem()
}

func (i *AssessmentProjectsAssessment) ToAssessmentProjectsAssessmentOutput() AssessmentProjectsAssessmentOutput {
	return i.ToAssessmentProjectsAssessmentOutputWithContext(context.Background())
}

func (i *AssessmentProjectsAssessment) ToAssessmentProjectsAssessmentOutputWithContext(ctx context.Context) AssessmentProjectsAssessmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentProjectsAssessmentOutput)
}

type AssessmentProjectsAssessmentOutput struct{ *pulumi.OutputState }

func (AssessmentProjectsAssessmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsAssessment)(nil)).Elem()
}

func (o AssessmentProjectsAssessmentOutput) ToAssessmentProjectsAssessmentOutput() AssessmentProjectsAssessmentOutput {
	return o
}

func (o AssessmentProjectsAssessmentOutput) ToAssessmentProjectsAssessmentOutputWithContext(ctx context.Context) AssessmentProjectsAssessmentOutput {
	return o
}

// The Azure API version of the resource.
func (o AssessmentProjectsAssessmentOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsAssessment) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// For optimistic concurrency control.
func (o AssessmentProjectsAssessmentOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentProjectsAssessment) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

// Unique name of an assessment.
func (o AssessmentProjectsAssessmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsAssessment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the assessment.
func (o AssessmentProjectsAssessmentOutput) Properties() AssessmentPropertiesResponseOutput {
	return o.ApplyT(func(v *AssessmentProjectsAssessment) AssessmentPropertiesResponseOutput { return v.Properties }).(AssessmentPropertiesResponseOutput)
}

// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
func (o AssessmentProjectsAssessmentOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsAssessment) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentProjectsAssessmentOutput{})
}
