// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230315

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a AvsAssessment
func LookupAvsAssessmentsOperation(ctx *pulumi.Context, args *LookupAvsAssessmentsOperationArgs, opts ...pulumi.InvokeOption) (*LookupAvsAssessmentsOperationResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupAvsAssessmentsOperationResult
	err := ctx.Invoke("azure-native:migrate/v20230315:getAvsAssessmentsOperation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAvsAssessmentsOperationArgs struct {
	// AVS Assessment ARM name
	AssessmentName string `pulumi:"assessmentName"`
	// Group ARM name
	GroupName string `pulumi:"groupName"`
	// Assessment Project Name
	ProjectName string `pulumi:"projectName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// AVS assessment resource.
type LookupAvsAssessmentsOperationResult struct {
	// Gets the assessment error summary.
	//             This is the number of machines
	// affected by each type of error in this assessment.
	AssessmentErrorSummary map[string]int `pulumi:"assessmentErrorSummary"`
	// Assessment type of the assessment.
	AssessmentType string `pulumi:"assessmentType"`
	// Azure Location or Azure region where to which the machines will be migrated.
	AzureLocation *string `pulumi:"azureLocation"`
	// Azure Offer code according to which cost estimation is done.
	AzureOfferCode *string `pulumi:"azureOfferCode"`
	// Confidence Rating in Percentage.
	ConfidenceRatingInPercentage float64 `pulumi:"confidenceRatingInPercentage"`
	// Predicted CPU utilization.
	CpuUtilization float64 `pulumi:"cpuUtilization"`
	// Date and Time when assessment was created.
	CreatedTimestamp string `pulumi:"createdTimestamp"`
	// Currency in which prices should be reported.
	Currency *string `pulumi:"currency"`
	// De-duplication compression.
	DedupeCompression *float64 `pulumi:"dedupeCompression"`
	// Custom discount percentage.
	DiscountPercentage *float64 `pulumi:"discountPercentage"`
	// Failures to tolerate and RAID level in a common property.
	FailuresToTolerateAndRaidLevel *string `pulumi:"failuresToTolerateAndRaidLevel"`
	// Gets the group type for the assessment.
	GroupType string `pulumi:"groupType"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Is Stretch Cluster Enabled.
	IsStretchClusterEnabled *bool `pulumi:"isStretchClusterEnabled"`
	// Limiting factor.
	LimitingFactor string `pulumi:"limitingFactor"`
	// Memory overcommit.
	MemOvercommit *float64 `pulumi:"memOvercommit"`
	// The name of the resource
	Name string `pulumi:"name"`
	// AVS node type.
	NodeType *string `pulumi:"nodeType"`
	// Number of machines part of the assessment.
	NumberOfMachines int `pulumi:"numberOfMachines"`
	// Recommended number of nodes.
	NumberOfNodes int `pulumi:"numberOfNodes"`
	// Percentile of the utilization data values to be considered while assessing
	// machines.
	Percentile *string `pulumi:"percentile"`
	// Gets or sets the end time to consider performance data for assessment.
	PerfDataEndTime *string `pulumi:"perfDataEndTime"`
	// Gets or sets the start time to consider performance data for assessment.
	PerfDataStartTime *string `pulumi:"perfDataStartTime"`
	// Time when the Azure Prices were queried. Date-Time represented in ISO-8601
	// format.
	PricesTimestamp string `pulumi:"pricesTimestamp"`
	// The status of the last operation.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Predicted RAM utilization.
	RamUtilization float64 `pulumi:"ramUtilization"`
	// Reserved instance.
	ReservedInstance *string `pulumi:"reservedInstance"`
	// Percentage of buffer that user wants on performance metrics when recommending
	// Azure sizes.
	ScalingFactor *float64 `pulumi:"scalingFactor"`
	// Schema version.
	SchemaVersion string `pulumi:"schemaVersion"`
	// Assessment sizing criterion.
	SizingCriterion *string `pulumi:"sizingCriterion"`
	// User configurable setting to display the Stage of Assessment.
	Stage string `pulumi:"stage"`
	// Whether assessment is in valid state and all machines have been assessed.
	Status string `pulumi:"status"`
	// Predicted storage utilization.
	StorageUtilization float64 `pulumi:"storageUtilization"`
	// Gets or sets the Assessment cloud suitability.
	Suitability string `pulumi:"suitability"`
	// Gets or sets the Assessment suitability explanation.
	SuitabilityExplanation string `pulumi:"suitabilityExplanation"`
	// Cloud suitability summary for all the machines in the assessment.
	SuitabilitySummary map[string]int `pulumi:"suitabilitySummary"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Time Range for which the historic utilization data should be considered for
	// assessment.
	TimeRange *string `pulumi:"timeRange"`
	// Predicted total CPU cores used.
	TotalCpuCores float64 `pulumi:"totalCpuCores"`
	// Total monthly cost.
	TotalMonthlyCost float64 `pulumi:"totalMonthlyCost"`
	// Predicted total RAM used in GB.
	TotalRamInGB float64 `pulumi:"totalRamInGB"`
	// Predicted total Storage used in GB.
	TotalStorageInGB float64 `pulumi:"totalStorageInGB"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Date and Time when assessment was last updated.
	UpdatedTimestamp string `pulumi:"updatedTimestamp"`
	// VCPU over subscription.
	VcpuOversubscription *float64 `pulumi:"vcpuOversubscription"`
}

func LookupAvsAssessmentsOperationOutput(ctx *pulumi.Context, args LookupAvsAssessmentsOperationOutputArgs, opts ...pulumi.InvokeOption) LookupAvsAssessmentsOperationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAvsAssessmentsOperationResult, error) {
			args := v.(LookupAvsAssessmentsOperationArgs)
			r, err := LookupAvsAssessmentsOperation(ctx, &args, opts...)
			var s LookupAvsAssessmentsOperationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAvsAssessmentsOperationResultOutput)
}

type LookupAvsAssessmentsOperationOutputArgs struct {
	// AVS Assessment ARM name
	AssessmentName pulumi.StringInput `pulumi:"assessmentName"`
	// Group ARM name
	GroupName pulumi.StringInput `pulumi:"groupName"`
	// Assessment Project Name
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAvsAssessmentsOperationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAvsAssessmentsOperationArgs)(nil)).Elem()
}

// AVS assessment resource.
type LookupAvsAssessmentsOperationResultOutput struct{ *pulumi.OutputState }

func (LookupAvsAssessmentsOperationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAvsAssessmentsOperationResult)(nil)).Elem()
}

func (o LookupAvsAssessmentsOperationResultOutput) ToLookupAvsAssessmentsOperationResultOutput() LookupAvsAssessmentsOperationResultOutput {
	return o
}

func (o LookupAvsAssessmentsOperationResultOutput) ToLookupAvsAssessmentsOperationResultOutputWithContext(ctx context.Context) LookupAvsAssessmentsOperationResultOutput {
	return o
}

// Gets the assessment error summary.
//
//	This is the number of machines
//
// affected by each type of error in this assessment.
func (o LookupAvsAssessmentsOperationResultOutput) AssessmentErrorSummary() pulumi.IntMapOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) map[string]int { return v.AssessmentErrorSummary }).(pulumi.IntMapOutput)
}

// Assessment type of the assessment.
func (o LookupAvsAssessmentsOperationResultOutput) AssessmentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.AssessmentType }).(pulumi.StringOutput)
}

// Azure Location or Azure region where to which the machines will be migrated.
func (o LookupAvsAssessmentsOperationResultOutput) AzureLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.AzureLocation }).(pulumi.StringPtrOutput)
}

// Azure Offer code according to which cost estimation is done.
func (o LookupAvsAssessmentsOperationResultOutput) AzureOfferCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.AzureOfferCode }).(pulumi.StringPtrOutput)
}

// Confidence Rating in Percentage.
func (o LookupAvsAssessmentsOperationResultOutput) ConfidenceRatingInPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.ConfidenceRatingInPercentage }).(pulumi.Float64Output)
}

// Predicted CPU utilization.
func (o LookupAvsAssessmentsOperationResultOutput) CpuUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.CpuUtilization }).(pulumi.Float64Output)
}

// Date and Time when assessment was created.
func (o LookupAvsAssessmentsOperationResultOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// Currency in which prices should be reported.
func (o LookupAvsAssessmentsOperationResultOutput) Currency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.Currency }).(pulumi.StringPtrOutput)
}

// De-duplication compression.
func (o LookupAvsAssessmentsOperationResultOutput) DedupeCompression() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *float64 { return v.DedupeCompression }).(pulumi.Float64PtrOutput)
}

// Custom discount percentage.
func (o LookupAvsAssessmentsOperationResultOutput) DiscountPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *float64 { return v.DiscountPercentage }).(pulumi.Float64PtrOutput)
}

// Failures to tolerate and RAID level in a common property.
func (o LookupAvsAssessmentsOperationResultOutput) FailuresToTolerateAndRaidLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.FailuresToTolerateAndRaidLevel }).(pulumi.StringPtrOutput)
}

// Gets the group type for the assessment.
func (o LookupAvsAssessmentsOperationResultOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.GroupType }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupAvsAssessmentsOperationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Is Stretch Cluster Enabled.
func (o LookupAvsAssessmentsOperationResultOutput) IsStretchClusterEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *bool { return v.IsStretchClusterEnabled }).(pulumi.BoolPtrOutput)
}

// Limiting factor.
func (o LookupAvsAssessmentsOperationResultOutput) LimitingFactor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.LimitingFactor }).(pulumi.StringOutput)
}

// Memory overcommit.
func (o LookupAvsAssessmentsOperationResultOutput) MemOvercommit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *float64 { return v.MemOvercommit }).(pulumi.Float64PtrOutput)
}

// The name of the resource
func (o LookupAvsAssessmentsOperationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Name }).(pulumi.StringOutput)
}

// AVS node type.
func (o LookupAvsAssessmentsOperationResultOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// Number of machines part of the assessment.
func (o LookupAvsAssessmentsOperationResultOutput) NumberOfMachines() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) int { return v.NumberOfMachines }).(pulumi.IntOutput)
}

// Recommended number of nodes.
func (o LookupAvsAssessmentsOperationResultOutput) NumberOfNodes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) int { return v.NumberOfNodes }).(pulumi.IntOutput)
}

// Percentile of the utilization data values to be considered while assessing
// machines.
func (o LookupAvsAssessmentsOperationResultOutput) Percentile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.Percentile }).(pulumi.StringPtrOutput)
}

// Gets or sets the end time to consider performance data for assessment.
func (o LookupAvsAssessmentsOperationResultOutput) PerfDataEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.PerfDataEndTime }).(pulumi.StringPtrOutput)
}

// Gets or sets the start time to consider performance data for assessment.
func (o LookupAvsAssessmentsOperationResultOutput) PerfDataStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.PerfDataStartTime }).(pulumi.StringPtrOutput)
}

// Time when the Azure Prices were queried. Date-Time represented in ISO-8601
// format.
func (o LookupAvsAssessmentsOperationResultOutput) PricesTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.PricesTimestamp }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o LookupAvsAssessmentsOperationResultOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Predicted RAM utilization.
func (o LookupAvsAssessmentsOperationResultOutput) RamUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.RamUtilization }).(pulumi.Float64Output)
}

// Reserved instance.
func (o LookupAvsAssessmentsOperationResultOutput) ReservedInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.ReservedInstance }).(pulumi.StringPtrOutput)
}

// Percentage of buffer that user wants on performance metrics when recommending
// Azure sizes.
func (o LookupAvsAssessmentsOperationResultOutput) ScalingFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *float64 { return v.ScalingFactor }).(pulumi.Float64PtrOutput)
}

// Schema version.
func (o LookupAvsAssessmentsOperationResultOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// Assessment sizing criterion.
func (o LookupAvsAssessmentsOperationResultOutput) SizingCriterion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.SizingCriterion }).(pulumi.StringPtrOutput)
}

// User configurable setting to display the Stage of Assessment.
func (o LookupAvsAssessmentsOperationResultOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Stage }).(pulumi.StringOutput)
}

// Whether assessment is in valid state and all machines have been assessed.
func (o LookupAvsAssessmentsOperationResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Status }).(pulumi.StringOutput)
}

// Predicted storage utilization.
func (o LookupAvsAssessmentsOperationResultOutput) StorageUtilization() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.StorageUtilization }).(pulumi.Float64Output)
}

// Gets or sets the Assessment cloud suitability.
func (o LookupAvsAssessmentsOperationResultOutput) Suitability() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Suitability }).(pulumi.StringOutput)
}

// Gets or sets the Assessment suitability explanation.
func (o LookupAvsAssessmentsOperationResultOutput) SuitabilityExplanation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.SuitabilityExplanation }).(pulumi.StringOutput)
}

// Cloud suitability summary for all the machines in the assessment.
func (o LookupAvsAssessmentsOperationResultOutput) SuitabilitySummary() pulumi.IntMapOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) map[string]int { return v.SuitabilitySummary }).(pulumi.IntMapOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupAvsAssessmentsOperationResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Time Range for which the historic utilization data should be considered for
// assessment.
func (o LookupAvsAssessmentsOperationResultOutput) TimeRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *string { return v.TimeRange }).(pulumi.StringPtrOutput)
}

// Predicted total CPU cores used.
func (o LookupAvsAssessmentsOperationResultOutput) TotalCpuCores() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.TotalCpuCores }).(pulumi.Float64Output)
}

// Total monthly cost.
func (o LookupAvsAssessmentsOperationResultOutput) TotalMonthlyCost() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.TotalMonthlyCost }).(pulumi.Float64Output)
}

// Predicted total RAM used in GB.
func (o LookupAvsAssessmentsOperationResultOutput) TotalRamInGB() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.TotalRamInGB }).(pulumi.Float64Output)
}

// Predicted total Storage used in GB.
func (o LookupAvsAssessmentsOperationResultOutput) TotalStorageInGB() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) float64 { return v.TotalStorageInGB }).(pulumi.Float64Output)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAvsAssessmentsOperationResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.Type }).(pulumi.StringOutput)
}

// Date and Time when assessment was last updated.
func (o LookupAvsAssessmentsOperationResultOutput) UpdatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) string { return v.UpdatedTimestamp }).(pulumi.StringOutput)
}

// VCPU over subscription.
func (o LookupAvsAssessmentsOperationResultOutput) VcpuOversubscription() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupAvsAssessmentsOperationResult) *float64 { return v.VcpuOversubscription }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAvsAssessmentsOperationResultOutput{})
}
