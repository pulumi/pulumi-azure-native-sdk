// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get an existing assessment with the specified name. Returns a json object of type 'assessment' as specified in Models section.
// Azure REST API version: 2019-10-01.
func LookupAssessmentProjectsAssessment(ctx *pulumi.Context, args *LookupAssessmentProjectsAssessmentArgs, opts ...pulumi.InvokeOption) (*LookupAssessmentProjectsAssessmentResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupAssessmentProjectsAssessmentResult
	err := ctx.Invoke("azure-native:migrate:getAssessmentProjectsAssessment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAssessmentProjectsAssessmentArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName string `pulumi:"assessmentName"`
	// Unique name of a group within a project.
	GroupName string `pulumi:"groupName"`
	// Name of the Azure Migrate project.
	ProjectName string `pulumi:"projectName"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An assessment created for a group in the Migration project.
type LookupAssessmentProjectsAssessmentResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Path reference to this assessment. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessment/{assessmentName}
	Id string `pulumi:"id"`
	// Unique name of an assessment.
	Name string `pulumi:"name"`
	// Properties of the assessment.
	Properties AssessmentPropertiesResponse `pulumi:"properties"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
	Type string `pulumi:"type"`
}

func LookupAssessmentProjectsAssessmentOutput(ctx *pulumi.Context, args LookupAssessmentProjectsAssessmentOutputArgs, opts ...pulumi.InvokeOption) LookupAssessmentProjectsAssessmentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAssessmentProjectsAssessmentResultOutput, error) {
			args := v.(LookupAssessmentProjectsAssessmentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:migrate:getAssessmentProjectsAssessment", args, LookupAssessmentProjectsAssessmentResultOutput{}, options).(LookupAssessmentProjectsAssessmentResultOutput), nil
		}).(LookupAssessmentProjectsAssessmentResultOutput)
}

type LookupAssessmentProjectsAssessmentOutputArgs struct {
	// Unique name of an assessment within a project.
	AssessmentName pulumi.StringInput `pulumi:"assessmentName"`
	// Unique name of a group within a project.
	GroupName pulumi.StringInput `pulumi:"groupName"`
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAssessmentProjectsAssessmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssessmentProjectsAssessmentArgs)(nil)).Elem()
}

// An assessment created for a group in the Migration project.
type LookupAssessmentProjectsAssessmentResultOutput struct{ *pulumi.OutputState }

func (LookupAssessmentProjectsAssessmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAssessmentProjectsAssessmentResult)(nil)).Elem()
}

func (o LookupAssessmentProjectsAssessmentResultOutput) ToLookupAssessmentProjectsAssessmentResultOutput() LookupAssessmentProjectsAssessmentResultOutput {
	return o
}

func (o LookupAssessmentProjectsAssessmentResultOutput) ToLookupAssessmentProjectsAssessmentResultOutputWithContext(ctx context.Context) LookupAssessmentProjectsAssessmentResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupAssessmentProjectsAssessmentResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// For optimistic concurrency control.
func (o LookupAssessmentProjectsAssessmentResultOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Path reference to this assessment. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessment/{assessmentName}
func (o LookupAssessmentProjectsAssessmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique name of an assessment.
func (o LookupAssessmentProjectsAssessmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Properties of the assessment.
func (o LookupAssessmentProjectsAssessmentResultOutput) Properties() AssessmentPropertiesResponseOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) AssessmentPropertiesResponse { return v.Properties }).(AssessmentPropertiesResponseOutput)
}

// Type of the object = [Microsoft.Migrate/assessmentProjects/groups/assessments].
func (o LookupAssessmentProjectsAssessmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAssessmentProjectsAssessmentResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAssessmentProjectsAssessmentResultOutput{})
}
