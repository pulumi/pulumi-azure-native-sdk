// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Solution REST Resource.
// Azure REST API version: 2023-01-01.
func LookupSolutionsControllerSolution(ctx *pulumi.Context, args *LookupSolutionsControllerSolutionArgs, opts ...pulumi.InvokeOption) (*LookupSolutionsControllerSolutionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSolutionsControllerSolutionResult
	err := ctx.Invoke("azure-native:migrate:getSolutionsControllerSolution", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSolutionsControllerSolutionArgs struct {
	// Name of the Azure Migrate project.
	MigrateProjectName string `pulumi:"migrateProjectName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Unique name of a migration solution within a migrate project.
	SolutionName string `pulumi:"solutionName"`
}

// Solution REST Resource.
type LookupSolutionsControllerSolutionResult struct {
	// Gets or sets the ETAG for optimistic concurrency control.
	Etag *string `pulumi:"etag"`
	// Gets the relative URL to get to this REST resource.
	Id string `pulumi:"id"`
	// Gets the name of this REST resource.
	Name string `pulumi:"name"`
	// Gets or sets the properties of the solution.
	Properties SolutionPropertiesResponse `pulumi:"properties"`
	// Gets the type of this REST resource.
	Type string `pulumi:"type"`
}

func LookupSolutionsControllerSolutionOutput(ctx *pulumi.Context, args LookupSolutionsControllerSolutionOutputArgs, opts ...pulumi.InvokeOption) LookupSolutionsControllerSolutionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSolutionsControllerSolutionResult, error) {
			args := v.(LookupSolutionsControllerSolutionArgs)
			r, err := LookupSolutionsControllerSolution(ctx, &args, opts...)
			var s LookupSolutionsControllerSolutionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSolutionsControllerSolutionResultOutput)
}

type LookupSolutionsControllerSolutionOutputArgs struct {
	// Name of the Azure Migrate project.
	MigrateProjectName pulumi.StringInput `pulumi:"migrateProjectName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Unique name of a migration solution within a migrate project.
	SolutionName pulumi.StringInput `pulumi:"solutionName"`
}

func (LookupSolutionsControllerSolutionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionsControllerSolutionArgs)(nil)).Elem()
}

// Solution REST Resource.
type LookupSolutionsControllerSolutionResultOutput struct{ *pulumi.OutputState }

func (LookupSolutionsControllerSolutionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSolutionsControllerSolutionResult)(nil)).Elem()
}

func (o LookupSolutionsControllerSolutionResultOutput) ToLookupSolutionsControllerSolutionResultOutput() LookupSolutionsControllerSolutionResultOutput {
	return o
}

func (o LookupSolutionsControllerSolutionResultOutput) ToLookupSolutionsControllerSolutionResultOutputWithContext(ctx context.Context) LookupSolutionsControllerSolutionResultOutput {
	return o
}

// Gets or sets the ETAG for optimistic concurrency control.
func (o LookupSolutionsControllerSolutionResultOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSolutionsControllerSolutionResult) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Gets the relative URL to get to this REST resource.
func (o LookupSolutionsControllerSolutionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionsControllerSolutionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Gets the name of this REST resource.
func (o LookupSolutionsControllerSolutionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionsControllerSolutionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Gets or sets the properties of the solution.
func (o LookupSolutionsControllerSolutionResultOutput) Properties() SolutionPropertiesResponseOutput {
	return o.ApplyT(func(v LookupSolutionsControllerSolutionResult) SolutionPropertiesResponse { return v.Properties }).(SolutionPropertiesResponseOutput)
}

// Gets the type of this REST resource.
func (o LookupSolutionsControllerSolutionResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSolutionsControllerSolutionResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSolutionsControllerSolutionResultOutput{})
}
