// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure REST API version: 2019-10-01.
type AssessmentProjectsHyperVCollector struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput               `pulumi:"azureApiVersion"`
	ETag            pulumi.StringPtrOutput            `pulumi:"eTag"`
	Name            pulumi.StringOutput               `pulumi:"name"`
	Properties      CollectorPropertiesResponseOutput `pulumi:"properties"`
	Type            pulumi.StringOutput               `pulumi:"type"`
}

// NewAssessmentProjectsHyperVCollector registers a new resource with the given unique name, arguments, and options.
func NewAssessmentProjectsHyperVCollector(ctx *pulumi.Context,
	name string, args *AssessmentProjectsHyperVCollectorArgs, opts ...pulumi.ResourceOption) (*AssessmentProjectsHyperVCollector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:migrate/v20191001:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20191001:HyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:HypervCollectorsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:HypervCollectorsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:HypervCollectorsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:HypervCollectorsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentProjectsHyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:HypervCollectorsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate:HyperVCollector"),
		},
		{
			Type: pulumi.String("azure-native:migrate:HypervCollectorsOperation"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AssessmentProjectsHyperVCollector
	err := ctx.RegisterResource("azure-native:migrate:AssessmentProjectsHyperVCollector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentProjectsHyperVCollector gets an existing AssessmentProjectsHyperVCollector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentProjectsHyperVCollector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentProjectsHyperVCollectorState, opts ...pulumi.ResourceOption) (*AssessmentProjectsHyperVCollector, error) {
	var resource AssessmentProjectsHyperVCollector
	err := ctx.ReadResource("azure-native:migrate:AssessmentProjectsHyperVCollector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentProjectsHyperVCollector resources.
type assessmentProjectsHyperVCollectorState struct {
}

type AssessmentProjectsHyperVCollectorState struct {
}

func (AssessmentProjectsHyperVCollectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsHyperVCollectorState)(nil)).Elem()
}

type assessmentProjectsHyperVCollectorArgs struct {
	ETag *string `pulumi:"eTag"`
	// Unique name of a Hyper-V collector within a project.
	HyperVCollectorName *string `pulumi:"hyperVCollectorName"`
	// Name of the Azure Migrate project.
	ProjectName string               `pulumi:"projectName"`
	Properties  *CollectorProperties `pulumi:"properties"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AssessmentProjectsHyperVCollector resource.
type AssessmentProjectsHyperVCollectorArgs struct {
	ETag pulumi.StringPtrInput
	// Unique name of a Hyper-V collector within a project.
	HyperVCollectorName pulumi.StringPtrInput
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput
	Properties  CollectorPropertiesPtrInput
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput
}

func (AssessmentProjectsHyperVCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsHyperVCollectorArgs)(nil)).Elem()
}

type AssessmentProjectsHyperVCollectorInput interface {
	pulumi.Input

	ToAssessmentProjectsHyperVCollectorOutput() AssessmentProjectsHyperVCollectorOutput
	ToAssessmentProjectsHyperVCollectorOutputWithContext(ctx context.Context) AssessmentProjectsHyperVCollectorOutput
}

func (*AssessmentProjectsHyperVCollector) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsHyperVCollector)(nil)).Elem()
}

func (i *AssessmentProjectsHyperVCollector) ToAssessmentProjectsHyperVCollectorOutput() AssessmentProjectsHyperVCollectorOutput {
	return i.ToAssessmentProjectsHyperVCollectorOutputWithContext(context.Background())
}

func (i *AssessmentProjectsHyperVCollector) ToAssessmentProjectsHyperVCollectorOutputWithContext(ctx context.Context) AssessmentProjectsHyperVCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentProjectsHyperVCollectorOutput)
}

type AssessmentProjectsHyperVCollectorOutput struct{ *pulumi.OutputState }

func (AssessmentProjectsHyperVCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsHyperVCollector)(nil)).Elem()
}

func (o AssessmentProjectsHyperVCollectorOutput) ToAssessmentProjectsHyperVCollectorOutput() AssessmentProjectsHyperVCollectorOutput {
	return o
}

func (o AssessmentProjectsHyperVCollectorOutput) ToAssessmentProjectsHyperVCollectorOutputWithContext(ctx context.Context) AssessmentProjectsHyperVCollectorOutput {
	return o
}

// The Azure API version of the resource.
func (o AssessmentProjectsHyperVCollectorOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsHyperVCollector) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

func (o AssessmentProjectsHyperVCollectorOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentProjectsHyperVCollector) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

func (o AssessmentProjectsHyperVCollectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsHyperVCollector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AssessmentProjectsHyperVCollectorOutput) Properties() CollectorPropertiesResponseOutput {
	return o.ApplyT(func(v *AssessmentProjectsHyperVCollector) CollectorPropertiesResponseOutput { return v.Properties }).(CollectorPropertiesResponseOutput)
}

func (o AssessmentProjectsHyperVCollectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsHyperVCollector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentProjectsHyperVCollectorOutput{})
}
