// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A group created in a Migration project.
// Azure REST API version: 2019-10-01.
type AssessmentProjectsGroup struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// For optimistic concurrency control.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Name of the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the group.
	Properties GroupPropertiesResponseOutput `pulumi:"properties"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects/groups].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAssessmentProjectsGroup registers a new resource with the given unique name, arguments, and options.
func NewAssessmentProjectsGroup(ctx *pulumi.Context,
	name string, args *AssessmentProjectsGroupArgs, opts ...pulumi.ResourceOption) (*AssessmentProjectsGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:migrate/v20191001:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20191001:Group"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:GroupsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:GroupsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:GroupsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:GroupsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentProjectsGroup"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:GroupsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate:Group"),
		},
		{
			Type: pulumi.String("azure-native:migrate:GroupsOperation"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AssessmentProjectsGroup
	err := ctx.RegisterResource("azure-native:migrate:AssessmentProjectsGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentProjectsGroup gets an existing AssessmentProjectsGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentProjectsGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentProjectsGroupState, opts ...pulumi.ResourceOption) (*AssessmentProjectsGroup, error) {
	var resource AssessmentProjectsGroup
	err := ctx.ReadResource("azure-native:migrate:AssessmentProjectsGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentProjectsGroup resources.
type assessmentProjectsGroupState struct {
}

type AssessmentProjectsGroupState struct {
}

func (AssessmentProjectsGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsGroupState)(nil)).Elem()
}

type assessmentProjectsGroupArgs struct {
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Unique name of a group within a project.
	GroupName *string `pulumi:"groupName"`
	// Name of the Azure Migrate project.
	ProjectName string `pulumi:"projectName"`
	// Properties of the group.
	Properties GroupProperties `pulumi:"properties"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a AssessmentProjectsGroup resource.
type AssessmentProjectsGroupArgs struct {
	// For optimistic concurrency control.
	ETag pulumi.StringPtrInput
	// Unique name of a group within a project.
	GroupName pulumi.StringPtrInput
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput
	// Properties of the group.
	Properties GroupPropertiesInput
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput
}

func (AssessmentProjectsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsGroupArgs)(nil)).Elem()
}

type AssessmentProjectsGroupInput interface {
	pulumi.Input

	ToAssessmentProjectsGroupOutput() AssessmentProjectsGroupOutput
	ToAssessmentProjectsGroupOutputWithContext(ctx context.Context) AssessmentProjectsGroupOutput
}

func (*AssessmentProjectsGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsGroup)(nil)).Elem()
}

func (i *AssessmentProjectsGroup) ToAssessmentProjectsGroupOutput() AssessmentProjectsGroupOutput {
	return i.ToAssessmentProjectsGroupOutputWithContext(context.Background())
}

func (i *AssessmentProjectsGroup) ToAssessmentProjectsGroupOutputWithContext(ctx context.Context) AssessmentProjectsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentProjectsGroupOutput)
}

type AssessmentProjectsGroupOutput struct{ *pulumi.OutputState }

func (AssessmentProjectsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsGroup)(nil)).Elem()
}

func (o AssessmentProjectsGroupOutput) ToAssessmentProjectsGroupOutput() AssessmentProjectsGroupOutput {
	return o
}

func (o AssessmentProjectsGroupOutput) ToAssessmentProjectsGroupOutputWithContext(ctx context.Context) AssessmentProjectsGroupOutput {
	return o
}

// The Azure API version of the resource.
func (o AssessmentProjectsGroupOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsGroup) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// For optimistic concurrency control.
func (o AssessmentProjectsGroupOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentProjectsGroup) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

// Name of the group.
func (o AssessmentProjectsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the group.
func (o AssessmentProjectsGroupOutput) Properties() GroupPropertiesResponseOutput {
	return o.ApplyT(func(v *AssessmentProjectsGroup) GroupPropertiesResponseOutput { return v.Properties }).(GroupPropertiesResponseOutput)
}

// Type of the object = [Microsoft.Migrate/assessmentProjects/groups].
func (o AssessmentProjectsGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentProjectsGroupOutput{})
}
