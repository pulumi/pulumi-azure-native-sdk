// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a VMware collector.
//
// Uses Azure REST API version 2019-10-01.
func LookupVMwareCollector(ctx *pulumi.Context, args *LookupVMwareCollectorArgs, opts ...pulumi.InvokeOption) (*LookupVMwareCollectorResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVMwareCollectorResult
	err := ctx.Invoke("azure-native:migrate:getVMwareCollector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVMwareCollectorArgs struct {
	// Name of the Azure Migrate project.
	ProjectName string `pulumi:"projectName"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Unique name of a VMware collector within a project.
	VmWareCollectorName string `pulumi:"vmWareCollectorName"`
}

type LookupVMwareCollectorResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string                      `pulumi:"azureApiVersion"`
	ETag            *string                     `pulumi:"eTag"`
	Id              string                      `pulumi:"id"`
	Name            string                      `pulumi:"name"`
	Properties      CollectorPropertiesResponse `pulumi:"properties"`
	Type            string                      `pulumi:"type"`
}

func LookupVMwareCollectorOutput(ctx *pulumi.Context, args LookupVMwareCollectorOutputArgs, opts ...pulumi.InvokeOption) LookupVMwareCollectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVMwareCollectorResultOutput, error) {
			args := v.(LookupVMwareCollectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:migrate:getVMwareCollector", args, LookupVMwareCollectorResultOutput{}, options).(LookupVMwareCollectorResultOutput), nil
		}).(LookupVMwareCollectorResultOutput)
}

type LookupVMwareCollectorOutputArgs struct {
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Unique name of a VMware collector within a project.
	VmWareCollectorName pulumi.StringInput `pulumi:"vmWareCollectorName"`
}

func (LookupVMwareCollectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVMwareCollectorArgs)(nil)).Elem()
}

type LookupVMwareCollectorResultOutput struct{ *pulumi.OutputState }

func (LookupVMwareCollectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVMwareCollectorResult)(nil)).Elem()
}

func (o LookupVMwareCollectorResultOutput) ToLookupVMwareCollectorResultOutput() LookupVMwareCollectorResultOutput {
	return o
}

func (o LookupVMwareCollectorResultOutput) ToLookupVMwareCollectorResultOutputWithContext(ctx context.Context) LookupVMwareCollectorResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupVMwareCollectorResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

func (o LookupVMwareCollectorResultOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

func (o LookupVMwareCollectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVMwareCollectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVMwareCollectorResultOutput) Properties() CollectorPropertiesResponseOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) CollectorPropertiesResponse { return v.Properties }).(CollectorPropertiesResponseOutput)
}

func (o LookupVMwareCollectorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVMwareCollectorResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVMwareCollectorResultOutput{})
}
