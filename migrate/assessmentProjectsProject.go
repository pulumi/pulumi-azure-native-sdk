// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package migrate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure Migrate Project.
// Azure REST API version: 2019-10-01.
type AssessmentProjectsProject struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// For optimistic concurrency control.
	ETag pulumi.StringPtrOutput `pulumi:"eTag"`
	// Azure location in which project is created.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Name of the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the project.
	Properties ProjectPropertiesResponseOutput `pulumi:"properties"`
	// Tags provided by Azure Tagging service.
	Tags pulumi.AnyOutput `pulumi:"tags"`
	// Type of the object = [Microsoft.Migrate/assessmentProjects].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAssessmentProjectsProject registers a new resource with the given unique name, arguments, and options.
func NewAssessmentProjectsProject(ctx *pulumi.Context,
	name string, args *AssessmentProjectsProjectArgs, opts ...pulumi.ResourceOption) (*AssessmentProjectsProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:migrate/v20191001:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20191001:Project"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230315:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230401preview:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230501preview:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20230909preview:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate/v20240101preview:AssessmentProjectsProject"),
		},
		{
			Type: pulumi.String("azure-native:migrate:AssessmentProjectsOperation"),
		},
		{
			Type: pulumi.String("azure-native:migrate:Project"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AssessmentProjectsProject
	err := ctx.RegisterResource("azure-native:migrate:AssessmentProjectsProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssessmentProjectsProject gets an existing AssessmentProjectsProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssessmentProjectsProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssessmentProjectsProjectState, opts ...pulumi.ResourceOption) (*AssessmentProjectsProject, error) {
	var resource AssessmentProjectsProject
	err := ctx.ReadResource("azure-native:migrate:AssessmentProjectsProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssessmentProjectsProject resources.
type assessmentProjectsProjectState struct {
}

type AssessmentProjectsProjectState struct {
}

func (AssessmentProjectsProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsProjectState)(nil)).Elem()
}

type assessmentProjectsProjectArgs struct {
	// For optimistic concurrency control.
	ETag *string `pulumi:"eTag"`
	// Azure location in which project is created.
	Location *string `pulumi:"location"`
	// Name of the Azure Migrate project.
	ProjectName *string `pulumi:"projectName"`
	// Properties of the project.
	Properties *ProjectProperties `pulumi:"properties"`
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Tags provided by Azure Tagging service.
	Tags interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a AssessmentProjectsProject resource.
type AssessmentProjectsProjectArgs struct {
	// For optimistic concurrency control.
	ETag pulumi.StringPtrInput
	// Azure location in which project is created.
	Location pulumi.StringPtrInput
	// Name of the Azure Migrate project.
	ProjectName pulumi.StringPtrInput
	// Properties of the project.
	Properties ProjectPropertiesPtrInput
	// Name of the Azure Resource Group that project is part of.
	ResourceGroupName pulumi.StringInput
	// Tags provided by Azure Tagging service.
	Tags pulumi.Input
}

func (AssessmentProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assessmentProjectsProjectArgs)(nil)).Elem()
}

type AssessmentProjectsProjectInput interface {
	pulumi.Input

	ToAssessmentProjectsProjectOutput() AssessmentProjectsProjectOutput
	ToAssessmentProjectsProjectOutputWithContext(ctx context.Context) AssessmentProjectsProjectOutput
}

func (*AssessmentProjectsProject) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsProject)(nil)).Elem()
}

func (i *AssessmentProjectsProject) ToAssessmentProjectsProjectOutput() AssessmentProjectsProjectOutput {
	return i.ToAssessmentProjectsProjectOutputWithContext(context.Background())
}

func (i *AssessmentProjectsProject) ToAssessmentProjectsProjectOutputWithContext(ctx context.Context) AssessmentProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssessmentProjectsProjectOutput)
}

type AssessmentProjectsProjectOutput struct{ *pulumi.OutputState }

func (AssessmentProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssessmentProjectsProject)(nil)).Elem()
}

func (o AssessmentProjectsProjectOutput) ToAssessmentProjectsProjectOutput() AssessmentProjectsProjectOutput {
	return o
}

func (o AssessmentProjectsProjectOutput) ToAssessmentProjectsProjectOutputWithContext(ctx context.Context) AssessmentProjectsProjectOutput {
	return o
}

// The Azure API version of the resource.
func (o AssessmentProjectsProjectOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// For optimistic concurrency control.
func (o AssessmentProjectsProjectOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.StringPtrOutput { return v.ETag }).(pulumi.StringPtrOutput)
}

// Azure location in which project is created.
func (o AssessmentProjectsProjectOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the project.
func (o AssessmentProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the project.
func (o AssessmentProjectsProjectOutput) Properties() ProjectPropertiesResponseOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) ProjectPropertiesResponseOutput { return v.Properties }).(ProjectPropertiesResponseOutput)
}

// Tags provided by Azure Tagging service.
func (o AssessmentProjectsProjectOutput) Tags() pulumi.AnyOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.AnyOutput { return v.Tags }).(pulumi.AnyOutput)
}

// Type of the object = [Microsoft.Migrate/assessmentProjects].
func (o AssessmentProjectsProjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AssessmentProjectsProject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AssessmentProjectsProjectOutput{})
}
