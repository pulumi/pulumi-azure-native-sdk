// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get the Application Live  and its properties.
func LookupApplicationLiveView(ctx *pulumi.Context, args *LookupApplicationLiveViewArgs, opts ...pulumi.InvokeOption) (*LookupApplicationLiveViewResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationLiveViewResult
	err := ctx.Invoke("azure-native:appplatform/v20230901preview:getApplicationLiveView", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupApplicationLiveViewArgs struct {
	// The name of Application Live View.
	ApplicationLiveViewName string `pulumi:"applicationLiveViewName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Service resource.
	ServiceName string `pulumi:"serviceName"`
}

// Application Live View resource
type LookupApplicationLiveViewResult struct {
	// Fully qualified resource Id for the resource.
	Id string `pulumi:"id"`
	// The name of the resource.
	Name string `pulumi:"name"`
	// Application Live View properties payload
	Properties ApplicationLiveViewPropertiesResponse `pulumi:"properties"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource.
	Type string `pulumi:"type"`
}

func LookupApplicationLiveViewOutput(ctx *pulumi.Context, args LookupApplicationLiveViewOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationLiveViewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationLiveViewResult, error) {
			args := v.(LookupApplicationLiveViewArgs)
			r, err := LookupApplicationLiveView(ctx, &args, opts...)
			var s LookupApplicationLiveViewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationLiveViewResultOutput)
}

type LookupApplicationLiveViewOutputArgs struct {
	// The name of Application Live View.
	ApplicationLiveViewName pulumi.StringInput `pulumi:"applicationLiveViewName"`
	// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Service resource.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupApplicationLiveViewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationLiveViewArgs)(nil)).Elem()
}

// Application Live View resource
type LookupApplicationLiveViewResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationLiveViewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationLiveViewResult)(nil)).Elem()
}

func (o LookupApplicationLiveViewResultOutput) ToLookupApplicationLiveViewResultOutput() LookupApplicationLiveViewResultOutput {
	return o
}

func (o LookupApplicationLiveViewResultOutput) ToLookupApplicationLiveViewResultOutputWithContext(ctx context.Context) LookupApplicationLiveViewResultOutput {
	return o
}

func (o LookupApplicationLiveViewResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupApplicationLiveViewResult] {
	return pulumix.Output[LookupApplicationLiveViewResult]{
		OutputState: o.OutputState,
	}
}

// Fully qualified resource Id for the resource.
func (o LookupApplicationLiveViewResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationLiveViewResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource.
func (o LookupApplicationLiveViewResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationLiveViewResult) string { return v.Name }).(pulumi.StringOutput)
}

// Application Live View properties payload
func (o LookupApplicationLiveViewResultOutput) Properties() ApplicationLiveViewPropertiesResponseOutput {
	return o.ApplyT(func(v LookupApplicationLiveViewResult) ApplicationLiveViewPropertiesResponse { return v.Properties }).(ApplicationLiveViewPropertiesResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o LookupApplicationLiveViewResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupApplicationLiveViewResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource.
func (o LookupApplicationLiveViewResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationLiveViewResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationLiveViewResultOutput{})
}
