// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231101preview

// Indicates whether the API try-out feature is enabled or disabled. When enabled, users can try out the API by sending requests and viewing responses in API portal. When disabled, users cannot try out the API.
type ApiPortalApiTryOutEnabledState string

const (
	ApiPortalApiTryOutEnabledStateEnabled  = ApiPortalApiTryOutEnabledState("Enabled")
	ApiPortalApiTryOutEnabledStateDisabled = ApiPortalApiTryOutEnabledState("Disabled")
)

// Type of application performance monitoring
type ApmType string

const (
	ApmTypeApplicationInsights = ApmType("ApplicationInsights")
	ApmTypeAppDynamics         = ApmType("AppDynamics")
	ApmTypeDynatrace           = ApmType("Dynatrace")
	ApmTypeNewRelic            = ApmType("NewRelic")
	ApmTypeElasticAPM          = ApmType("ElasticAPM")
)

// How ingress should communicate with this app backend service.
type BackendProtocol string

const (
	BackendProtocolGRPC    = BackendProtocol("GRPC")
	BackendProtocolDefault = BackendProtocol("Default")
)

// Buildpack Binding Type
type BindingType string

const (
	BindingTypeApplicationInsights = BindingType("ApplicationInsights")
	BindingTypeApacheSkyWalking    = BindingType("ApacheSkyWalking")
	BindingTypeAppDynamics         = BindingType("AppDynamics")
	BindingTypeDynatrace           = BindingType("Dynatrace")
	BindingTypeNewRelic            = BindingType("NewRelic")
	BindingTypeElasticAPM          = BindingType("ElasticAPM")
	BindingTypeCACertificates      = BindingType("CACertificates")
)

// Enabled state of the config server. This is only used in Consumption tier.
type ConfigServerEnabledState string

const (
	// Enable the config server.
	ConfigServerEnabledStateEnabled = ConfigServerEnabledState("Enabled")
	// Disable the config server.
	ConfigServerEnabledStateDisabled = ConfigServerEnabledState("Disabled")
)

// The generation of the Application Configuration Service.
type ConfigurationServiceGeneration string

const (
	ConfigurationServiceGenerationGen1 = ConfigurationServiceGeneration("Gen1")
	ConfigurationServiceGenerationGen2 = ConfigurationServiceGeneration("Gen2")
)

// Type of the customized accelerator.
type CustomizedAcceleratorType string

const (
	CustomizedAcceleratorTypeAccelerator = CustomizedAcceleratorType("Accelerator")
	CustomizedAcceleratorTypeFragment    = CustomizedAcceleratorType("Fragment")
)

// State of the plugin
type DevToolPortalFeatureState string

const (
	// Enable the plugin in Dev Tool Portal.
	DevToolPortalFeatureStateEnabled = DevToolPortalFeatureState("Enabled")
	// Disable the plugin in Dev Tool Portal.
	DevToolPortalFeatureStateDisabled = DevToolPortalFeatureState("Disabled")
)

// The frequency to run the maintenance job
type Frequency string

const (
	FrequencyWeekly = Frequency("Weekly")
)

// Whether to enable certificate verification or not
type GatewayCertificateVerification string

const (
	// Enable certificate verification in Spring Cloud Gateway.
	GatewayCertificateVerificationEnabled = GatewayCertificateVerification("Enabled")
	// Disable certificate verification in Spring Cloud Gateway.
	GatewayCertificateVerificationDisabled = GatewayCertificateVerification("Disabled")
)

// Protocol of routed Azure Spring Apps applications.
type GatewayRouteConfigProtocol string

const (
	GatewayRouteConfigProtocolHTTP  = GatewayRouteConfigProtocol("HTTP")
	GatewayRouteConfigProtocolHTTPS = GatewayRouteConfigProtocol("HTTPS")
)

// Git libraries used to support various repository providers
type GitImplementation string

const (
	GitImplementation_Go_Git = GitImplementation("go-git")
	GitImplementationLibgit2 = GitImplementation("libgit2")
)

// Scheme to use for connecting to the host. Defaults to HTTP.
//
// Possible enum values:
//   - `"HTTP"` means that the scheme used will be http://
//   - `"HTTPS"` means that the scheme used will be https://
type HTTPSchemeType string

const (
	HTTPSchemeTypeHTTP  = HTTPSchemeType("HTTP")
	HTTPSchemeTypeHTTPS = HTTPSchemeType("HTTPS")
)

// Indicates whether to automatically synchronize certificate from key vault or not.
type KeyVaultCertificateAutoSync string

const (
	KeyVaultCertificateAutoSyncDisabled = KeyVaultCertificateAutoSync("Disabled")
	KeyVaultCertificateAutoSyncEnabled  = KeyVaultCertificateAutoSync("Enabled")
)

// Type of the managed identity
type ManagedIdentityType string

const (
	ManagedIdentityTypeNone                         = ManagedIdentityType("None")
	ManagedIdentityTypeSystemAssigned               = ManagedIdentityType("SystemAssigned")
	ManagedIdentityTypeUserAssigned                 = ManagedIdentityType("UserAssigned")
	ManagedIdentityType_SystemAssigned_UserAssigned = ManagedIdentityType("SystemAssigned,UserAssigned")
)

// The type of the action to take to perform the health check.
type ProbeActionType string

const (
	ProbeActionTypeHTTPGetAction   = ProbeActionType("HTTPGetAction")
	ProbeActionTypeTCPSocketAction = ProbeActionType("TCPSocketAction")
	ProbeActionTypeExecAction      = ProbeActionType("ExecAction")
)

// Type of the affinity, set this to Cookie to enable session affinity.
type SessionAffinity string

const (
	SessionAffinityCookie = SessionAffinity("Cookie")
	SessionAffinityNone   = SessionAffinity("None")
)

// The type of the storage.
type StorageType string

const (
	StorageTypeStorageAccount = StorageType("StorageAccount")
)

// The type of the underlying resource to mount as a persistent disk.
type Type string

const (
	TypeAzureFileVolume = Type("AzureFileVolume")
)

// The day to run the maintenance job
type WeekDay string

const (
	WeekDayMonday    = WeekDay("Monday")
	WeekDayTuesday   = WeekDay("Tuesday")
	WeekDayWednesday = WeekDay("Wednesday")
	WeekDayThursday  = WeekDay("Thursday")
	WeekDayFriday    = WeekDay("Friday")
	WeekDaySaturday  = WeekDay("Saturday")
	WeekDaySunday    = WeekDay("Sunday")
)

func init() {
}
