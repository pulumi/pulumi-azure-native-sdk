// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231007

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Implements VMMServer GET method.
func LookupVmmServer(ctx *pulumi.Context, args *LookupVmmServerArgs, opts ...pulumi.InvokeOption) (*LookupVmmServerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVmmServerResult
	err := ctx.Invoke("azure-native:scvmm/v20231007:getVmmServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVmmServerArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the VMMServer.
	VmmServerName string `pulumi:"vmmServerName"`
}

// The VmmServers resource definition.
type LookupVmmServerResult struct {
	// Gets the connection status to the vmmServer.
	ConnectionStatus string `pulumi:"connectionStatus"`
	// Credentials to connect to VMMServer.
	Credentials *VMMCredentialResponse `pulumi:"credentials"`
	// Gets any error message if connection to vmmServer is having any issue.
	ErrorMessage string `pulumi:"errorMessage"`
	// The extended location.
	ExtendedLocation ExtendedLocationResponse `pulumi:"extendedLocation"`
	// Fqdn is the hostname/ip of the vmmServer.
	Fqdn string `pulumi:"fqdn"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Port is the port on which the vmmServer is listening.
	Port *int `pulumi:"port"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Unique ID of vmmServer.
	Uuid string `pulumi:"uuid"`
	// Version is the version of the vmmSever.
	Version string `pulumi:"version"`
}

func LookupVmmServerOutput(ctx *pulumi.Context, args LookupVmmServerOutputArgs, opts ...pulumi.InvokeOption) LookupVmmServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVmmServerResult, error) {
			args := v.(LookupVmmServerArgs)
			r, err := LookupVmmServer(ctx, &args, opts...)
			var s LookupVmmServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVmmServerResultOutput)
}

type LookupVmmServerOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of the VMMServer.
	VmmServerName pulumi.StringInput `pulumi:"vmmServerName"`
}

func (LookupVmmServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmmServerArgs)(nil)).Elem()
}

// The VmmServers resource definition.
type LookupVmmServerResultOutput struct{ *pulumi.OutputState }

func (LookupVmmServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmmServerResult)(nil)).Elem()
}

func (o LookupVmmServerResultOutput) ToLookupVmmServerResultOutput() LookupVmmServerResultOutput {
	return o
}

func (o LookupVmmServerResultOutput) ToLookupVmmServerResultOutputWithContext(ctx context.Context) LookupVmmServerResultOutput {
	return o
}

func (o LookupVmmServerResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVmmServerResult] {
	return pulumix.Output[LookupVmmServerResult]{
		OutputState: o.OutputState,
	}
}

// Gets the connection status to the vmmServer.
func (o LookupVmmServerResultOutput) ConnectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.ConnectionStatus }).(pulumi.StringOutput)
}

// Credentials to connect to VMMServer.
func (o LookupVmmServerResultOutput) Credentials() VMMCredentialResponsePtrOutput {
	return o.ApplyT(func(v LookupVmmServerResult) *VMMCredentialResponse { return v.Credentials }).(VMMCredentialResponsePtrOutput)
}

// Gets any error message if connection to vmmServer is having any issue.
func (o LookupVmmServerResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The extended location.
func (o LookupVmmServerResultOutput) ExtendedLocation() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v LookupVmmServerResult) ExtendedLocationResponse { return v.ExtendedLocation }).(ExtendedLocationResponseOutput)
}

// Fqdn is the hostname/ip of the vmmServer.
func (o LookupVmmServerResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupVmmServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupVmmServerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupVmmServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Port is the port on which the vmmServer is listening.
func (o LookupVmmServerResultOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVmmServerResult) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Provisioning state of the resource.
func (o LookupVmmServerResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupVmmServerResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupVmmServerResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupVmmServerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVmmServerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupVmmServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Type }).(pulumi.StringOutput)
}

// Unique ID of vmmServer.
func (o LookupVmmServerResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Uuid }).(pulumi.StringOutput)
}

// Version is the version of the vmmSever.
func (o LookupVmmServerResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmmServerResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVmmServerResultOutput{})
}
