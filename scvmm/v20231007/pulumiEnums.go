// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231007

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets or sets the mac address type.
type AllocationMethod string

const (
	AllocationMethodDynamic = AllocationMethod("Dynamic")
	AllocationMethodStatic  = AllocationMethod("Static")
)

func (AllocationMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationMethod)(nil)).Elem()
}

func (e AllocationMethod) ToAllocationMethodOutput() AllocationMethodOutput {
	return pulumi.ToOutput(e).(AllocationMethodOutput)
}

func (e AllocationMethod) ToAllocationMethodOutputWithContext(ctx context.Context) AllocationMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AllocationMethodOutput)
}

func (e AllocationMethod) ToAllocationMethodPtrOutput() AllocationMethodPtrOutput {
	return e.ToAllocationMethodPtrOutputWithContext(context.Background())
}

func (e AllocationMethod) ToAllocationMethodPtrOutputWithContext(ctx context.Context) AllocationMethodPtrOutput {
	return AllocationMethod(e).ToAllocationMethodOutputWithContext(ctx).ToAllocationMethodPtrOutputWithContext(ctx)
}

func (e AllocationMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AllocationMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AllocationMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AllocationMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AllocationMethodOutput struct{ *pulumi.OutputState }

func (AllocationMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllocationMethod)(nil)).Elem()
}

func (o AllocationMethodOutput) ToAllocationMethodOutput() AllocationMethodOutput {
	return o
}

func (o AllocationMethodOutput) ToAllocationMethodOutputWithContext(ctx context.Context) AllocationMethodOutput {
	return o
}

func (o AllocationMethodOutput) ToAllocationMethodPtrOutput() AllocationMethodPtrOutput {
	return o.ToAllocationMethodPtrOutputWithContext(context.Background())
}

func (o AllocationMethodOutput) ToAllocationMethodPtrOutputWithContext(ctx context.Context) AllocationMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllocationMethod) *AllocationMethod {
		return &v
	}).(AllocationMethodPtrOutput)
}

func (o AllocationMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AllocationMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AllocationMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AllocationMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AllocationMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AllocationMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AllocationMethodPtrOutput struct{ *pulumi.OutputState }

func (AllocationMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllocationMethod)(nil)).Elem()
}

func (o AllocationMethodPtrOutput) ToAllocationMethodPtrOutput() AllocationMethodPtrOutput {
	return o
}

func (o AllocationMethodPtrOutput) ToAllocationMethodPtrOutputWithContext(ctx context.Context) AllocationMethodPtrOutput {
	return o
}

func (o AllocationMethodPtrOutput) Elem() AllocationMethodOutput {
	return o.ApplyT(func(v *AllocationMethod) AllocationMethod {
		if v != nil {
			return *v
		}
		var ret AllocationMethod
		return ret
	}).(AllocationMethodOutput)
}

func (o AllocationMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AllocationMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AllocationMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AllocationMethodInput is an input type that accepts values of the AllocationMethod enum
// A concrete instance of `AllocationMethodInput` can be one of the following:
//
//	AllocationMethodDynamic
//	AllocationMethodStatic
type AllocationMethodInput interface {
	pulumi.Input

	ToAllocationMethodOutput() AllocationMethodOutput
	ToAllocationMethodOutputWithContext(context.Context) AllocationMethodOutput
}

var allocationMethodPtrType = reflect.TypeOf((**AllocationMethod)(nil)).Elem()

type AllocationMethodPtrInput interface {
	pulumi.Input

	ToAllocationMethodPtrOutput() AllocationMethodPtrOutput
	ToAllocationMethodPtrOutputWithContext(context.Context) AllocationMethodPtrOutput
}

type allocationMethodPtr string

func AllocationMethodPtr(v string) AllocationMethodPtrInput {
	return (*allocationMethodPtr)(&v)
}

func (*allocationMethodPtr) ElementType() reflect.Type {
	return allocationMethodPtrType
}

func (in *allocationMethodPtr) ToAllocationMethodPtrOutput() AllocationMethodPtrOutput {
	return pulumi.ToOutput(in).(AllocationMethodPtrOutput)
}

func (in *allocationMethodPtr) ToAllocationMethodPtrOutputWithContext(ctx context.Context) AllocationMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AllocationMethodPtrOutput)
}

func (in *allocationMethodPtr) ToOutput(ctx context.Context) pulumix.Output[*AllocationMethod] {
	return pulumix.Output[*AllocationMethod]{
		OutputState: in.ToAllocationMethodPtrOutputWithContext(ctx).OutputState,
	}
}

// Gets or sets a value indicating diff disk.
type CreateDiffDisk string

const (
	CreateDiffDiskFalse = CreateDiffDisk("false")
	CreateDiffDiskTrue  = CreateDiffDisk("true")
)

func (CreateDiffDisk) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateDiffDisk)(nil)).Elem()
}

func (e CreateDiffDisk) ToCreateDiffDiskOutput() CreateDiffDiskOutput {
	return pulumi.ToOutput(e).(CreateDiffDiskOutput)
}

func (e CreateDiffDisk) ToCreateDiffDiskOutputWithContext(ctx context.Context) CreateDiffDiskOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CreateDiffDiskOutput)
}

func (e CreateDiffDisk) ToCreateDiffDiskPtrOutput() CreateDiffDiskPtrOutput {
	return e.ToCreateDiffDiskPtrOutputWithContext(context.Background())
}

func (e CreateDiffDisk) ToCreateDiffDiskPtrOutputWithContext(ctx context.Context) CreateDiffDiskPtrOutput {
	return CreateDiffDisk(e).ToCreateDiffDiskOutputWithContext(ctx).ToCreateDiffDiskPtrOutputWithContext(ctx)
}

func (e CreateDiffDisk) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateDiffDisk) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CreateDiffDisk) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CreateDiffDisk) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CreateDiffDiskOutput struct{ *pulumi.OutputState }

func (CreateDiffDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateDiffDisk)(nil)).Elem()
}

func (o CreateDiffDiskOutput) ToCreateDiffDiskOutput() CreateDiffDiskOutput {
	return o
}

func (o CreateDiffDiskOutput) ToCreateDiffDiskOutputWithContext(ctx context.Context) CreateDiffDiskOutput {
	return o
}

func (o CreateDiffDiskOutput) ToCreateDiffDiskPtrOutput() CreateDiffDiskPtrOutput {
	return o.ToCreateDiffDiskPtrOutputWithContext(context.Background())
}

func (o CreateDiffDiskOutput) ToCreateDiffDiskPtrOutputWithContext(ctx context.Context) CreateDiffDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreateDiffDisk) *CreateDiffDisk {
		return &v
	}).(CreateDiffDiskPtrOutput)
}

func (o CreateDiffDiskOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CreateDiffDiskOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreateDiffDisk) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CreateDiffDiskOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreateDiffDiskOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CreateDiffDisk) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CreateDiffDiskPtrOutput struct{ *pulumi.OutputState }

func (CreateDiffDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateDiffDisk)(nil)).Elem()
}

func (o CreateDiffDiskPtrOutput) ToCreateDiffDiskPtrOutput() CreateDiffDiskPtrOutput {
	return o
}

func (o CreateDiffDiskPtrOutput) ToCreateDiffDiskPtrOutputWithContext(ctx context.Context) CreateDiffDiskPtrOutput {
	return o
}

func (o CreateDiffDiskPtrOutput) Elem() CreateDiffDiskOutput {
	return o.ApplyT(func(v *CreateDiffDisk) CreateDiffDisk {
		if v != nil {
			return *v
		}
		var ret CreateDiffDisk
		return ret
	}).(CreateDiffDiskOutput)
}

func (o CreateDiffDiskPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CreateDiffDiskPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CreateDiffDisk) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CreateDiffDiskInput is an input type that accepts values of the CreateDiffDisk enum
// A concrete instance of `CreateDiffDiskInput` can be one of the following:
//
//	CreateDiffDiskFalse
//	CreateDiffDiskTrue
type CreateDiffDiskInput interface {
	pulumi.Input

	ToCreateDiffDiskOutput() CreateDiffDiskOutput
	ToCreateDiffDiskOutputWithContext(context.Context) CreateDiffDiskOutput
}

var createDiffDiskPtrType = reflect.TypeOf((**CreateDiffDisk)(nil)).Elem()

type CreateDiffDiskPtrInput interface {
	pulumi.Input

	ToCreateDiffDiskPtrOutput() CreateDiffDiskPtrOutput
	ToCreateDiffDiskPtrOutputWithContext(context.Context) CreateDiffDiskPtrOutput
}

type createDiffDiskPtr string

func CreateDiffDiskPtr(v string) CreateDiffDiskPtrInput {
	return (*createDiffDiskPtr)(&v)
}

func (*createDiffDiskPtr) ElementType() reflect.Type {
	return createDiffDiskPtrType
}

func (in *createDiffDiskPtr) ToCreateDiffDiskPtrOutput() CreateDiffDiskPtrOutput {
	return pulumi.ToOutput(in).(CreateDiffDiskPtrOutput)
}

func (in *createDiffDiskPtr) ToCreateDiffDiskPtrOutputWithContext(ctx context.Context) CreateDiffDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CreateDiffDiskPtrOutput)
}

func (in *createDiffDiskPtr) ToOutput(ctx context.Context) pulumix.Output[*CreateDiffDisk] {
	return pulumix.Output[*CreateDiffDisk]{
		OutputState: in.ToCreateDiffDiskPtrOutputWithContext(ctx).OutputState,
	}
}

// Gets or sets a value indicating whether to enable dynamic memory or not.
type DynamicMemoryEnabled string

const (
	DynamicMemoryEnabledFalse = DynamicMemoryEnabled("false")
	DynamicMemoryEnabledTrue  = DynamicMemoryEnabled("true")
)

func (DynamicMemoryEnabled) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMemoryEnabled)(nil)).Elem()
}

func (e DynamicMemoryEnabled) ToDynamicMemoryEnabledOutput() DynamicMemoryEnabledOutput {
	return pulumi.ToOutput(e).(DynamicMemoryEnabledOutput)
}

func (e DynamicMemoryEnabled) ToDynamicMemoryEnabledOutputWithContext(ctx context.Context) DynamicMemoryEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DynamicMemoryEnabledOutput)
}

func (e DynamicMemoryEnabled) ToDynamicMemoryEnabledPtrOutput() DynamicMemoryEnabledPtrOutput {
	return e.ToDynamicMemoryEnabledPtrOutputWithContext(context.Background())
}

func (e DynamicMemoryEnabled) ToDynamicMemoryEnabledPtrOutputWithContext(ctx context.Context) DynamicMemoryEnabledPtrOutput {
	return DynamicMemoryEnabled(e).ToDynamicMemoryEnabledOutputWithContext(ctx).ToDynamicMemoryEnabledPtrOutputWithContext(ctx)
}

func (e DynamicMemoryEnabled) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicMemoryEnabled) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DynamicMemoryEnabled) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DynamicMemoryEnabled) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DynamicMemoryEnabledOutput struct{ *pulumi.OutputState }

func (DynamicMemoryEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMemoryEnabled)(nil)).Elem()
}

func (o DynamicMemoryEnabledOutput) ToDynamicMemoryEnabledOutput() DynamicMemoryEnabledOutput {
	return o
}

func (o DynamicMemoryEnabledOutput) ToDynamicMemoryEnabledOutputWithContext(ctx context.Context) DynamicMemoryEnabledOutput {
	return o
}

func (o DynamicMemoryEnabledOutput) ToDynamicMemoryEnabledPtrOutput() DynamicMemoryEnabledPtrOutput {
	return o.ToDynamicMemoryEnabledPtrOutputWithContext(context.Background())
}

func (o DynamicMemoryEnabledOutput) ToDynamicMemoryEnabledPtrOutputWithContext(ctx context.Context) DynamicMemoryEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicMemoryEnabled) *DynamicMemoryEnabled {
		return &v
	}).(DynamicMemoryEnabledPtrOutput)
}

func (o DynamicMemoryEnabledOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DynamicMemoryEnabledOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicMemoryEnabled) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DynamicMemoryEnabledOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicMemoryEnabledOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DynamicMemoryEnabled) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DynamicMemoryEnabledPtrOutput struct{ *pulumi.OutputState }

func (DynamicMemoryEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicMemoryEnabled)(nil)).Elem()
}

func (o DynamicMemoryEnabledPtrOutput) ToDynamicMemoryEnabledPtrOutput() DynamicMemoryEnabledPtrOutput {
	return o
}

func (o DynamicMemoryEnabledPtrOutput) ToDynamicMemoryEnabledPtrOutputWithContext(ctx context.Context) DynamicMemoryEnabledPtrOutput {
	return o
}

func (o DynamicMemoryEnabledPtrOutput) Elem() DynamicMemoryEnabledOutput {
	return o.ApplyT(func(v *DynamicMemoryEnabled) DynamicMemoryEnabled {
		if v != nil {
			return *v
		}
		var ret DynamicMemoryEnabled
		return ret
	}).(DynamicMemoryEnabledOutput)
}

func (o DynamicMemoryEnabledPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DynamicMemoryEnabledPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DynamicMemoryEnabled) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DynamicMemoryEnabledInput is an input type that accepts values of the DynamicMemoryEnabled enum
// A concrete instance of `DynamicMemoryEnabledInput` can be one of the following:
//
//	DynamicMemoryEnabledFalse
//	DynamicMemoryEnabledTrue
type DynamicMemoryEnabledInput interface {
	pulumi.Input

	ToDynamicMemoryEnabledOutput() DynamicMemoryEnabledOutput
	ToDynamicMemoryEnabledOutputWithContext(context.Context) DynamicMemoryEnabledOutput
}

var dynamicMemoryEnabledPtrType = reflect.TypeOf((**DynamicMemoryEnabled)(nil)).Elem()

type DynamicMemoryEnabledPtrInput interface {
	pulumi.Input

	ToDynamicMemoryEnabledPtrOutput() DynamicMemoryEnabledPtrOutput
	ToDynamicMemoryEnabledPtrOutputWithContext(context.Context) DynamicMemoryEnabledPtrOutput
}

type dynamicMemoryEnabledPtr string

func DynamicMemoryEnabledPtr(v string) DynamicMemoryEnabledPtrInput {
	return (*dynamicMemoryEnabledPtr)(&v)
}

func (*dynamicMemoryEnabledPtr) ElementType() reflect.Type {
	return dynamicMemoryEnabledPtrType
}

func (in *dynamicMemoryEnabledPtr) ToDynamicMemoryEnabledPtrOutput() DynamicMemoryEnabledPtrOutput {
	return pulumi.ToOutput(in).(DynamicMemoryEnabledPtrOutput)
}

func (in *dynamicMemoryEnabledPtr) ToDynamicMemoryEnabledPtrOutputWithContext(ctx context.Context) DynamicMemoryEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DynamicMemoryEnabledPtrOutput)
}

func (in *dynamicMemoryEnabledPtr) ToOutput(ctx context.Context) pulumix.Output[*DynamicMemoryEnabled] {
	return pulumix.Output[*DynamicMemoryEnabled]{
		OutputState: in.ToDynamicMemoryEnabledPtrOutputWithContext(ctx).OutputState,
	}
}

// They inventory type.
type InventoryType string

const (
	InventoryTypeCloud                  = InventoryType("Cloud")
	InventoryTypeVirtualNetwork         = InventoryType("VirtualNetwork")
	InventoryTypeVirtualMachineTemplate = InventoryType("VirtualMachineTemplate")
	InventoryTypeVirtualMachine         = InventoryType("VirtualMachine")
)

func (InventoryType) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryType)(nil)).Elem()
}

func (e InventoryType) ToInventoryTypeOutput() InventoryTypeOutput {
	return pulumi.ToOutput(e).(InventoryTypeOutput)
}

func (e InventoryType) ToInventoryTypeOutputWithContext(ctx context.Context) InventoryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InventoryTypeOutput)
}

func (e InventoryType) ToInventoryTypePtrOutput() InventoryTypePtrOutput {
	return e.ToInventoryTypePtrOutputWithContext(context.Background())
}

func (e InventoryType) ToInventoryTypePtrOutputWithContext(ctx context.Context) InventoryTypePtrOutput {
	return InventoryType(e).ToInventoryTypeOutputWithContext(ctx).ToInventoryTypePtrOutputWithContext(ctx)
}

func (e InventoryType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InventoryType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InventoryType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InventoryType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InventoryTypeOutput struct{ *pulumi.OutputState }

func (InventoryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InventoryType)(nil)).Elem()
}

func (o InventoryTypeOutput) ToInventoryTypeOutput() InventoryTypeOutput {
	return o
}

func (o InventoryTypeOutput) ToInventoryTypeOutputWithContext(ctx context.Context) InventoryTypeOutput {
	return o
}

func (o InventoryTypeOutput) ToInventoryTypePtrOutput() InventoryTypePtrOutput {
	return o.ToInventoryTypePtrOutputWithContext(context.Background())
}

func (o InventoryTypeOutput) ToInventoryTypePtrOutputWithContext(ctx context.Context) InventoryTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InventoryType) *InventoryType {
		return &v
	}).(InventoryTypePtrOutput)
}

func (o InventoryTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InventoryTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InventoryType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InventoryTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InventoryTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InventoryType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InventoryTypePtrOutput struct{ *pulumi.OutputState }

func (InventoryTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryType)(nil)).Elem()
}

func (o InventoryTypePtrOutput) ToInventoryTypePtrOutput() InventoryTypePtrOutput {
	return o
}

func (o InventoryTypePtrOutput) ToInventoryTypePtrOutputWithContext(ctx context.Context) InventoryTypePtrOutput {
	return o
}

func (o InventoryTypePtrOutput) Elem() InventoryTypeOutput {
	return o.ApplyT(func(v *InventoryType) InventoryType {
		if v != nil {
			return *v
		}
		var ret InventoryType
		return ret
	}).(InventoryTypeOutput)
}

func (o InventoryTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InventoryTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InventoryType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InventoryTypeInput is an input type that accepts values of the InventoryType enum
// A concrete instance of `InventoryTypeInput` can be one of the following:
//
//	InventoryTypeCloud
//	InventoryTypeVirtualNetwork
//	InventoryTypeVirtualMachineTemplate
//	InventoryTypeVirtualMachine
type InventoryTypeInput interface {
	pulumi.Input

	ToInventoryTypeOutput() InventoryTypeOutput
	ToInventoryTypeOutputWithContext(context.Context) InventoryTypeOutput
}

var inventoryTypePtrType = reflect.TypeOf((**InventoryType)(nil)).Elem()

type InventoryTypePtrInput interface {
	pulumi.Input

	ToInventoryTypePtrOutput() InventoryTypePtrOutput
	ToInventoryTypePtrOutputWithContext(context.Context) InventoryTypePtrOutput
}

type inventoryTypePtr string

func InventoryTypePtr(v string) InventoryTypePtrInput {
	return (*inventoryTypePtr)(&v)
}

func (*inventoryTypePtr) ElementType() reflect.Type {
	return inventoryTypePtrType
}

func (in *inventoryTypePtr) ToInventoryTypePtrOutput() InventoryTypePtrOutput {
	return pulumi.ToOutput(in).(InventoryTypePtrOutput)
}

func (in *inventoryTypePtr) ToInventoryTypePtrOutputWithContext(ctx context.Context) InventoryTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InventoryTypePtrOutput)
}

func (in *inventoryTypePtr) ToOutput(ctx context.Context) pulumix.Output[*InventoryType] {
	return pulumix.Output[*InventoryType]{
		OutputState: in.ToInventoryTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
type LimitCpuForMigration string

const (
	LimitCpuForMigrationFalse = LimitCpuForMigration("false")
	LimitCpuForMigrationTrue  = LimitCpuForMigration("true")
)

func (LimitCpuForMigration) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitCpuForMigration)(nil)).Elem()
}

func (e LimitCpuForMigration) ToLimitCpuForMigrationOutput() LimitCpuForMigrationOutput {
	return pulumi.ToOutput(e).(LimitCpuForMigrationOutput)
}

func (e LimitCpuForMigration) ToLimitCpuForMigrationOutputWithContext(ctx context.Context) LimitCpuForMigrationOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LimitCpuForMigrationOutput)
}

func (e LimitCpuForMigration) ToLimitCpuForMigrationPtrOutput() LimitCpuForMigrationPtrOutput {
	return e.ToLimitCpuForMigrationPtrOutputWithContext(context.Background())
}

func (e LimitCpuForMigration) ToLimitCpuForMigrationPtrOutputWithContext(ctx context.Context) LimitCpuForMigrationPtrOutput {
	return LimitCpuForMigration(e).ToLimitCpuForMigrationOutputWithContext(ctx).ToLimitCpuForMigrationPtrOutputWithContext(ctx)
}

func (e LimitCpuForMigration) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LimitCpuForMigration) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LimitCpuForMigration) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LimitCpuForMigration) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LimitCpuForMigrationOutput struct{ *pulumi.OutputState }

func (LimitCpuForMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LimitCpuForMigration)(nil)).Elem()
}

func (o LimitCpuForMigrationOutput) ToLimitCpuForMigrationOutput() LimitCpuForMigrationOutput {
	return o
}

func (o LimitCpuForMigrationOutput) ToLimitCpuForMigrationOutputWithContext(ctx context.Context) LimitCpuForMigrationOutput {
	return o
}

func (o LimitCpuForMigrationOutput) ToLimitCpuForMigrationPtrOutput() LimitCpuForMigrationPtrOutput {
	return o.ToLimitCpuForMigrationPtrOutputWithContext(context.Background())
}

func (o LimitCpuForMigrationOutput) ToLimitCpuForMigrationPtrOutputWithContext(ctx context.Context) LimitCpuForMigrationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LimitCpuForMigration) *LimitCpuForMigration {
		return &v
	}).(LimitCpuForMigrationPtrOutput)
}

func (o LimitCpuForMigrationOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LimitCpuForMigrationOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LimitCpuForMigration) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LimitCpuForMigrationOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LimitCpuForMigrationOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LimitCpuForMigration) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LimitCpuForMigrationPtrOutput struct{ *pulumi.OutputState }

func (LimitCpuForMigrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LimitCpuForMigration)(nil)).Elem()
}

func (o LimitCpuForMigrationPtrOutput) ToLimitCpuForMigrationPtrOutput() LimitCpuForMigrationPtrOutput {
	return o
}

func (o LimitCpuForMigrationPtrOutput) ToLimitCpuForMigrationPtrOutputWithContext(ctx context.Context) LimitCpuForMigrationPtrOutput {
	return o
}

func (o LimitCpuForMigrationPtrOutput) Elem() LimitCpuForMigrationOutput {
	return o.ApplyT(func(v *LimitCpuForMigration) LimitCpuForMigration {
		if v != nil {
			return *v
		}
		var ret LimitCpuForMigration
		return ret
	}).(LimitCpuForMigrationOutput)
}

func (o LimitCpuForMigrationPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LimitCpuForMigrationPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LimitCpuForMigration) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LimitCpuForMigrationInput is an input type that accepts values of the LimitCpuForMigration enum
// A concrete instance of `LimitCpuForMigrationInput` can be one of the following:
//
//	LimitCpuForMigrationFalse
//	LimitCpuForMigrationTrue
type LimitCpuForMigrationInput interface {
	pulumi.Input

	ToLimitCpuForMigrationOutput() LimitCpuForMigrationOutput
	ToLimitCpuForMigrationOutputWithContext(context.Context) LimitCpuForMigrationOutput
}

var limitCpuForMigrationPtrType = reflect.TypeOf((**LimitCpuForMigration)(nil)).Elem()

type LimitCpuForMigrationPtrInput interface {
	pulumi.Input

	ToLimitCpuForMigrationPtrOutput() LimitCpuForMigrationPtrOutput
	ToLimitCpuForMigrationPtrOutputWithContext(context.Context) LimitCpuForMigrationPtrOutput
}

type limitCpuForMigrationPtr string

func LimitCpuForMigrationPtr(v string) LimitCpuForMigrationPtrInput {
	return (*limitCpuForMigrationPtr)(&v)
}

func (*limitCpuForMigrationPtr) ElementType() reflect.Type {
	return limitCpuForMigrationPtrType
}

func (in *limitCpuForMigrationPtr) ToLimitCpuForMigrationPtrOutput() LimitCpuForMigrationPtrOutput {
	return pulumi.ToOutput(in).(LimitCpuForMigrationPtrOutput)
}

func (in *limitCpuForMigrationPtr) ToLimitCpuForMigrationPtrOutputWithContext(ctx context.Context) LimitCpuForMigrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LimitCpuForMigrationPtrOutput)
}

func (in *limitCpuForMigrationPtr) ToOutput(ctx context.Context) pulumix.Output[*LimitCpuForMigration] {
	return pulumix.Output[*LimitCpuForMigration]{
		OutputState: in.ToLimitCpuForMigrationPtrOutputWithContext(ctx).OutputState,
	}
}

// Gets or sets the guest agent provisioning action.
type ProvisioningAction string

const (
	ProvisioningActionInstall   = ProvisioningAction("install")
	ProvisioningActionUninstall = ProvisioningAction("uninstall")
	ProvisioningActionRepair    = ProvisioningAction("repair")
)

func (ProvisioningAction) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningAction)(nil)).Elem()
}

func (e ProvisioningAction) ToProvisioningActionOutput() ProvisioningActionOutput {
	return pulumi.ToOutput(e).(ProvisioningActionOutput)
}

func (e ProvisioningAction) ToProvisioningActionOutputWithContext(ctx context.Context) ProvisioningActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProvisioningActionOutput)
}

func (e ProvisioningAction) ToProvisioningActionPtrOutput() ProvisioningActionPtrOutput {
	return e.ToProvisioningActionPtrOutputWithContext(context.Background())
}

func (e ProvisioningAction) ToProvisioningActionPtrOutputWithContext(ctx context.Context) ProvisioningActionPtrOutput {
	return ProvisioningAction(e).ToProvisioningActionOutputWithContext(ctx).ToProvisioningActionPtrOutputWithContext(ctx)
}

func (e ProvisioningAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProvisioningAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProvisioningActionOutput struct{ *pulumi.OutputState }

func (ProvisioningActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningAction)(nil)).Elem()
}

func (o ProvisioningActionOutput) ToProvisioningActionOutput() ProvisioningActionOutput {
	return o
}

func (o ProvisioningActionOutput) ToProvisioningActionOutputWithContext(ctx context.Context) ProvisioningActionOutput {
	return o
}

func (o ProvisioningActionOutput) ToProvisioningActionPtrOutput() ProvisioningActionPtrOutput {
	return o.ToProvisioningActionPtrOutputWithContext(context.Background())
}

func (o ProvisioningActionOutput) ToProvisioningActionPtrOutputWithContext(ctx context.Context) ProvisioningActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisioningAction) *ProvisioningAction {
		return &v
	}).(ProvisioningActionPtrOutput)
}

func (o ProvisioningActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProvisioningActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProvisioningActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProvisioningActionPtrOutput struct{ *pulumi.OutputState }

func (ProvisioningActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningAction)(nil)).Elem()
}

func (o ProvisioningActionPtrOutput) ToProvisioningActionPtrOutput() ProvisioningActionPtrOutput {
	return o
}

func (o ProvisioningActionPtrOutput) ToProvisioningActionPtrOutputWithContext(ctx context.Context) ProvisioningActionPtrOutput {
	return o
}

func (o ProvisioningActionPtrOutput) Elem() ProvisioningActionOutput {
	return o.ApplyT(func(v *ProvisioningAction) ProvisioningAction {
		if v != nil {
			return *v
		}
		var ret ProvisioningAction
		return ret
	}).(ProvisioningActionOutput)
}

func (o ProvisioningActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProvisioningAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProvisioningActionInput is an input type that accepts values of the ProvisioningAction enum
// A concrete instance of `ProvisioningActionInput` can be one of the following:
//
//	ProvisioningActionInstall
//	ProvisioningActionUninstall
//	ProvisioningActionRepair
type ProvisioningActionInput interface {
	pulumi.Input

	ToProvisioningActionOutput() ProvisioningActionOutput
	ToProvisioningActionOutputWithContext(context.Context) ProvisioningActionOutput
}

var provisioningActionPtrType = reflect.TypeOf((**ProvisioningAction)(nil)).Elem()

type ProvisioningActionPtrInput interface {
	pulumi.Input

	ToProvisioningActionPtrOutput() ProvisioningActionPtrOutput
	ToProvisioningActionPtrOutputWithContext(context.Context) ProvisioningActionPtrOutput
}

type provisioningActionPtr string

func ProvisioningActionPtr(v string) ProvisioningActionPtrInput {
	return (*provisioningActionPtr)(&v)
}

func (*provisioningActionPtr) ElementType() reflect.Type {
	return provisioningActionPtrType
}

func (in *provisioningActionPtr) ToProvisioningActionPtrOutput() ProvisioningActionPtrOutput {
	return pulumi.ToOutput(in).(ProvisioningActionPtrOutput)
}

func (in *provisioningActionPtr) ToProvisioningActionPtrOutputWithContext(ctx context.Context) ProvisioningActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProvisioningActionPtrOutput)
}

func (in *provisioningActionPtr) ToOutput(ctx context.Context) pulumix.Output[*ProvisioningAction] {
	return pulumix.Output[*ProvisioningAction]{
		OutputState: in.ToProvisioningActionPtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AllocationMethodOutput{})
	pulumi.RegisterOutputType(AllocationMethodPtrOutput{})
	pulumi.RegisterOutputType(CreateDiffDiskOutput{})
	pulumi.RegisterOutputType(CreateDiffDiskPtrOutput{})
	pulumi.RegisterOutputType(DynamicMemoryEnabledOutput{})
	pulumi.RegisterOutputType(DynamicMemoryEnabledPtrOutput{})
	pulumi.RegisterOutputType(InventoryTypeOutput{})
	pulumi.RegisterOutputType(InventoryTypePtrOutput{})
	pulumi.RegisterOutputType(LimitCpuForMigrationOutput{})
	pulumi.RegisterOutputType(LimitCpuForMigrationPtrOutput{})
	pulumi.RegisterOutputType(ProvisioningActionOutput{})
	pulumi.RegisterOutputType(ProvisioningActionPtrOutput{})
}
