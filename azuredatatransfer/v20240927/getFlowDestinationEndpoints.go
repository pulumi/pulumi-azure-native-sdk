// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240927

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the destination endpoints for the specified flow and stream ID.
func GetFlowDestinationEndpoints(ctx *pulumi.Context, args *GetFlowDestinationEndpointsArgs, opts ...pulumi.InvokeOption) (*GetFlowDestinationEndpointsResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetFlowDestinationEndpointsResult
	err := ctx.Invoke("azure-native:azuredatatransfer/v20240927:getFlowDestinationEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetFlowDestinationEndpointsArgs struct {
	// The name for the connection that is to be requested.
	ConnectionName string `pulumi:"connectionName"`
	// The name for the flow that is to be onboarded.
	FlowName string `pulumi:"flowName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// List of destination endpoints for the flow stream
type GetFlowDestinationEndpointsResult struct {
	// The destination endpoints for the flow stream
	Endpoints []string `pulumi:"endpoints"`
}

func GetFlowDestinationEndpointsOutput(ctx *pulumi.Context, args GetFlowDestinationEndpointsOutputArgs, opts ...pulumi.InvokeOption) GetFlowDestinationEndpointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFlowDestinationEndpointsResultOutput, error) {
			args := v.(GetFlowDestinationEndpointsArgs)
			opts = utilities.PkgInvokeDefaultOpts(opts)
			var rv GetFlowDestinationEndpointsResult
			secret, err := ctx.InvokePackageRaw("azure-native:azuredatatransfer/v20240927:getFlowDestinationEndpoints", args, &rv, "", opts...)
			if err != nil {
				return GetFlowDestinationEndpointsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetFlowDestinationEndpointsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetFlowDestinationEndpointsResultOutput), nil
			}
			return output, nil
		}).(GetFlowDestinationEndpointsResultOutput)
}

type GetFlowDestinationEndpointsOutputArgs struct {
	// The name for the connection that is to be requested.
	ConnectionName pulumi.StringInput `pulumi:"connectionName"`
	// The name for the flow that is to be onboarded.
	FlowName pulumi.StringInput `pulumi:"flowName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetFlowDestinationEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowDestinationEndpointsArgs)(nil)).Elem()
}

// List of destination endpoints for the flow stream
type GetFlowDestinationEndpointsResultOutput struct{ *pulumi.OutputState }

func (GetFlowDestinationEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlowDestinationEndpointsResult)(nil)).Elem()
}

func (o GetFlowDestinationEndpointsResultOutput) ToGetFlowDestinationEndpointsResultOutput() GetFlowDestinationEndpointsResultOutput {
	return o
}

func (o GetFlowDestinationEndpointsResultOutput) ToGetFlowDestinationEndpointsResultOutputWithContext(ctx context.Context) GetFlowDestinationEndpointsResultOutput {
	return o
}

// The destination endpoints for the flow stream
func (o GetFlowDestinationEndpointsResultOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlowDestinationEndpointsResult) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlowDestinationEndpointsResultOutput{})
}
