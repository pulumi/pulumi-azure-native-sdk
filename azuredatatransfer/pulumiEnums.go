// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredatatransfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The list of Antivirus solutions currently provided.
type AntivirusSolutions string

const (
	// Option to use Microsoft Defender antivirus scanning software as the scanning solution.
	AntivirusSolutionsDefender = AntivirusSolutions("Defender")
	// Option to use the external ClamAV open-source software as an antivirus scanning solution.
	AntivirusSolutionsClamAv = AntivirusSolutions("ClamAv")
)

func (AntivirusSolutions) ElementType() reflect.Type {
	return reflect.TypeOf((*AntivirusSolutions)(nil)).Elem()
}

func (e AntivirusSolutions) ToAntivirusSolutionsOutput() AntivirusSolutionsOutput {
	return pulumi.ToOutput(e).(AntivirusSolutionsOutput)
}

func (e AntivirusSolutions) ToAntivirusSolutionsOutputWithContext(ctx context.Context) AntivirusSolutionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AntivirusSolutionsOutput)
}

func (e AntivirusSolutions) ToAntivirusSolutionsPtrOutput() AntivirusSolutionsPtrOutput {
	return e.ToAntivirusSolutionsPtrOutputWithContext(context.Background())
}

func (e AntivirusSolutions) ToAntivirusSolutionsPtrOutputWithContext(ctx context.Context) AntivirusSolutionsPtrOutput {
	return AntivirusSolutions(e).ToAntivirusSolutionsOutputWithContext(ctx).ToAntivirusSolutionsPtrOutputWithContext(ctx)
}

func (e AntivirusSolutions) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AntivirusSolutions) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AntivirusSolutions) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AntivirusSolutions) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AntivirusSolutionsOutput struct{ *pulumi.OutputState }

func (AntivirusSolutionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AntivirusSolutions)(nil)).Elem()
}

func (o AntivirusSolutionsOutput) ToAntivirusSolutionsOutput() AntivirusSolutionsOutput {
	return o
}

func (o AntivirusSolutionsOutput) ToAntivirusSolutionsOutputWithContext(ctx context.Context) AntivirusSolutionsOutput {
	return o
}

func (o AntivirusSolutionsOutput) ToAntivirusSolutionsPtrOutput() AntivirusSolutionsPtrOutput {
	return o.ToAntivirusSolutionsPtrOutputWithContext(context.Background())
}

func (o AntivirusSolutionsOutput) ToAntivirusSolutionsPtrOutputWithContext(ctx context.Context) AntivirusSolutionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AntivirusSolutions) *AntivirusSolutions {
		return &v
	}).(AntivirusSolutionsPtrOutput)
}

func (o AntivirusSolutionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AntivirusSolutionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AntivirusSolutions) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AntivirusSolutionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AntivirusSolutionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AntivirusSolutions) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AntivirusSolutionsPtrOutput struct{ *pulumi.OutputState }

func (AntivirusSolutionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AntivirusSolutions)(nil)).Elem()
}

func (o AntivirusSolutionsPtrOutput) ToAntivirusSolutionsPtrOutput() AntivirusSolutionsPtrOutput {
	return o
}

func (o AntivirusSolutionsPtrOutput) ToAntivirusSolutionsPtrOutputWithContext(ctx context.Context) AntivirusSolutionsPtrOutput {
	return o
}

func (o AntivirusSolutionsPtrOutput) Elem() AntivirusSolutionsOutput {
	return o.ApplyT(func(v *AntivirusSolutions) AntivirusSolutions {
		if v != nil {
			return *v
		}
		var ret AntivirusSolutions
		return ret
	}).(AntivirusSolutionsOutput)
}

func (o AntivirusSolutionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AntivirusSolutionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AntivirusSolutions) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AntivirusSolutionsInput is an input type that accepts values of the AntivirusSolutions enum
// A concrete instance of `AntivirusSolutionsInput` can be one of the following:
//
//	AntivirusSolutionsDefender
//	AntivirusSolutionsClamAv
type AntivirusSolutionsInput interface {
	pulumi.Input

	ToAntivirusSolutionsOutput() AntivirusSolutionsOutput
	ToAntivirusSolutionsOutputWithContext(context.Context) AntivirusSolutionsOutput
}

var antivirusSolutionsPtrType = reflect.TypeOf((**AntivirusSolutions)(nil)).Elem()

type AntivirusSolutionsPtrInput interface {
	pulumi.Input

	ToAntivirusSolutionsPtrOutput() AntivirusSolutionsPtrOutput
	ToAntivirusSolutionsPtrOutputWithContext(context.Context) AntivirusSolutionsPtrOutput
}

type antivirusSolutionsPtr string

func AntivirusSolutionsPtr(v string) AntivirusSolutionsPtrInput {
	return (*antivirusSolutionsPtr)(&v)
}

func (*antivirusSolutionsPtr) ElementType() reflect.Type {
	return antivirusSolutionsPtrType
}

func (in *antivirusSolutionsPtr) ToAntivirusSolutionsPtrOutput() AntivirusSolutionsPtrOutput {
	return pulumi.ToOutput(in).(AntivirusSolutionsPtrOutput)
}

func (in *antivirusSolutionsPtr) ToAntivirusSolutionsPtrOutputWithContext(ctx context.Context) AntivirusSolutionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AntivirusSolutionsPtrOutput)
}

// Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
type Casing string

const (
	// Ignores casing when performing pattern matching. For example, "Hello World" would be found in "hello world".
	CasingInsensitive = Casing("Insensitive")
	// Requires exact casing for the pattern match. For example, "Hello World" would NOT not be found in "hello world".
	CasingSensitive = Casing("Sensitive")
)

func (Casing) ElementType() reflect.Type {
	return reflect.TypeOf((*Casing)(nil)).Elem()
}

func (e Casing) ToCasingOutput() CasingOutput {
	return pulumi.ToOutput(e).(CasingOutput)
}

func (e Casing) ToCasingOutputWithContext(ctx context.Context) CasingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CasingOutput)
}

func (e Casing) ToCasingPtrOutput() CasingPtrOutput {
	return e.ToCasingPtrOutputWithContext(context.Background())
}

func (e Casing) ToCasingPtrOutputWithContext(ctx context.Context) CasingPtrOutput {
	return Casing(e).ToCasingOutputWithContext(ctx).ToCasingPtrOutputWithContext(ctx)
}

func (e Casing) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Casing) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Casing) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Casing) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CasingOutput struct{ *pulumi.OutputState }

func (CasingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Casing)(nil)).Elem()
}

func (o CasingOutput) ToCasingOutput() CasingOutput {
	return o
}

func (o CasingOutput) ToCasingOutputWithContext(ctx context.Context) CasingOutput {
	return o
}

func (o CasingOutput) ToCasingPtrOutput() CasingPtrOutput {
	return o.ToCasingPtrOutputWithContext(context.Background())
}

func (o CasingOutput) ToCasingPtrOutputWithContext(ctx context.Context) CasingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Casing) *Casing {
		return &v
	}).(CasingPtrOutput)
}

func (o CasingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CasingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Casing) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CasingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CasingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Casing) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CasingPtrOutput struct{ *pulumi.OutputState }

func (CasingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Casing)(nil)).Elem()
}

func (o CasingPtrOutput) ToCasingPtrOutput() CasingPtrOutput {
	return o
}

func (o CasingPtrOutput) ToCasingPtrOutputWithContext(ctx context.Context) CasingPtrOutput {
	return o
}

func (o CasingPtrOutput) Elem() CasingOutput {
	return o.ApplyT(func(v *Casing) Casing {
		if v != nil {
			return *v
		}
		var ret Casing
		return ret
	}).(CasingOutput)
}

func (o CasingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CasingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Casing) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CasingInput is an input type that accepts values of the Casing enum
// A concrete instance of `CasingInput` can be one of the following:
//
//	CasingInsensitive
//	CasingSensitive
type CasingInput interface {
	pulumi.Input

	ToCasingOutput() CasingOutput
	ToCasingOutputWithContext(context.Context) CasingOutput
}

var casingPtrType = reflect.TypeOf((**Casing)(nil)).Elem()

type CasingPtrInput interface {
	pulumi.Input

	ToCasingPtrOutput() CasingPtrOutput
	ToCasingPtrOutputWithContext(context.Context) CasingPtrOutput
}

type casingPtr string

func CasingPtr(v string) CasingPtrInput {
	return (*casingPtr)(&v)
}

func (*casingPtr) ElementType() reflect.Type {
	return casingPtrType
}

func (in *casingPtr) ToCasingPtrOutput() CasingPtrOutput {
	return pulumi.ToOutput(in).(CasingPtrOutput)
}

func (in *casingPtr) ToCasingPtrOutputWithContext(ctx context.Context) CasingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CasingPtrOutput)
}

// The data replication scenario handled by this FlowProfile. Please not, that this value cannot be updated after creation.
type DataClassType string

const (
	// Represents standard message-based data, including Azure Service and Event Hub, used in message replication.
	DataClassTypeMessaging = DataClassType("Messaging")
	// Represents transactional request/response data types from API endpoints.
	DataClassTypeAPI = DataClassType("API")
	// Represents data types that require continuous, real-time streaming replication (e.g., video).
	DataClassTypeStream = DataClassType("Stream")
	// Represents standard file-based data, including Azure Blob and Table Storage, used in general-purpose replication.
	DataClassTypeFiles = DataClassType("Files")
	// Represents data related to development, security, and operations workflows such as build artifacts subject to an NCDSMO policy.
	DataClassTypeSoftwareArtifacts = DataClassType("SoftwareArtifacts")
	// Represents rich content types such as documents (e.g., Word, PDF) and images that require specialized replication handling.
	DataClassTypeComplex = DataClassType("Complex")
)

func (DataClassType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataClassType)(nil)).Elem()
}

func (e DataClassType) ToDataClassTypeOutput() DataClassTypeOutput {
	return pulumi.ToOutput(e).(DataClassTypeOutput)
}

func (e DataClassType) ToDataClassTypeOutputWithContext(ctx context.Context) DataClassTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataClassTypeOutput)
}

func (e DataClassType) ToDataClassTypePtrOutput() DataClassTypePtrOutput {
	return e.ToDataClassTypePtrOutputWithContext(context.Background())
}

func (e DataClassType) ToDataClassTypePtrOutputWithContext(ctx context.Context) DataClassTypePtrOutput {
	return DataClassType(e).ToDataClassTypeOutputWithContext(ctx).ToDataClassTypePtrOutputWithContext(ctx)
}

func (e DataClassType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataClassType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataClassType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataClassType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataClassTypeOutput struct{ *pulumi.OutputState }

func (DataClassTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataClassType)(nil)).Elem()
}

func (o DataClassTypeOutput) ToDataClassTypeOutput() DataClassTypeOutput {
	return o
}

func (o DataClassTypeOutput) ToDataClassTypeOutputWithContext(ctx context.Context) DataClassTypeOutput {
	return o
}

func (o DataClassTypeOutput) ToDataClassTypePtrOutput() DataClassTypePtrOutput {
	return o.ToDataClassTypePtrOutputWithContext(context.Background())
}

func (o DataClassTypeOutput) ToDataClassTypePtrOutputWithContext(ctx context.Context) DataClassTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataClassType) *DataClassType {
		return &v
	}).(DataClassTypePtrOutput)
}

func (o DataClassTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataClassTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataClassType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataClassTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataClassTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataClassType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataClassTypePtrOutput struct{ *pulumi.OutputState }

func (DataClassTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataClassType)(nil)).Elem()
}

func (o DataClassTypePtrOutput) ToDataClassTypePtrOutput() DataClassTypePtrOutput {
	return o
}

func (o DataClassTypePtrOutput) ToDataClassTypePtrOutputWithContext(ctx context.Context) DataClassTypePtrOutput {
	return o
}

func (o DataClassTypePtrOutput) Elem() DataClassTypeOutput {
	return o.ApplyT(func(v *DataClassType) DataClassType {
		if v != nil {
			return *v
		}
		var ret DataClassType
		return ret
	}).(DataClassTypeOutput)
}

func (o DataClassTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataClassTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataClassType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataClassTypeInput is an input type that accepts values of the DataClassType enum
// A concrete instance of `DataClassTypeInput` can be one of the following:
//
//	DataClassTypeMessaging
//	DataClassTypeAPI
//	DataClassTypeStream
//	DataClassTypeFiles
//	DataClassTypeSoftwareArtifacts
//	DataClassTypeComplex
type DataClassTypeInput interface {
	pulumi.Input

	ToDataClassTypeOutput() DataClassTypeOutput
	ToDataClassTypeOutputWithContext(context.Context) DataClassTypeOutput
}

var dataClassTypePtrType = reflect.TypeOf((**DataClassType)(nil)).Elem()

type DataClassTypePtrInput interface {
	pulumi.Input

	ToDataClassTypePtrOutput() DataClassTypePtrOutput
	ToDataClassTypePtrOutputWithContext(context.Context) DataClassTypePtrOutput
}

type dataClassTypePtr string

func DataClassTypePtr(v string) DataClassTypePtrInput {
	return (*dataClassTypePtr)(&v)
}

func (*dataClassTypePtr) ElementType() reflect.Type {
	return dataClassTypePtrType
}

func (in *dataClassTypePtr) ToDataClassTypePtrOutput() DataClassTypePtrOutput {
	return pulumi.ToOutput(in).(DataClassTypePtrOutput)
}

func (in *dataClassTypePtr) ToDataClassTypePtrOutputWithContext(ctx context.Context) DataClassTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataClassTypePtrOutput)
}

// Transfer Storage Blobs or Tables
type DataType string

const (
	DataTypeBlob  = DataType("Blob")
	DataTypeTable = DataType("Table")
)

func (DataType) ElementType() reflect.Type {
	return reflect.TypeOf((*DataType)(nil)).Elem()
}

func (e DataType) ToDataTypeOutput() DataTypeOutput {
	return pulumi.ToOutput(e).(DataTypeOutput)
}

func (e DataType) ToDataTypeOutputWithContext(ctx context.Context) DataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataTypeOutput)
}

func (e DataType) ToDataTypePtrOutput() DataTypePtrOutput {
	return e.ToDataTypePtrOutputWithContext(context.Background())
}

func (e DataType) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return DataType(e).ToDataTypeOutputWithContext(ctx).ToDataTypePtrOutputWithContext(ctx)
}

func (e DataType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataTypeOutput struct{ *pulumi.OutputState }

func (DataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataType)(nil)).Elem()
}

func (o DataTypeOutput) ToDataTypeOutput() DataTypeOutput {
	return o
}

func (o DataTypeOutput) ToDataTypeOutputWithContext(ctx context.Context) DataTypeOutput {
	return o
}

func (o DataTypeOutput) ToDataTypePtrOutput() DataTypePtrOutput {
	return o.ToDataTypePtrOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataType) *DataType {
		return &v
	}).(DataTypePtrOutput)
}

func (o DataTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataTypePtrOutput struct{ *pulumi.OutputState }

func (DataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataType)(nil)).Elem()
}

func (o DataTypePtrOutput) ToDataTypePtrOutput() DataTypePtrOutput {
	return o
}

func (o DataTypePtrOutput) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return o
}

func (o DataTypePtrOutput) Elem() DataTypeOutput {
	return o.ApplyT(func(v *DataType) DataType {
		if v != nil {
			return *v
		}
		var ret DataType
		return ret
	}).(DataTypeOutput)
}

func (o DataTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataTypeInput is an input type that accepts values of the DataType enum
// A concrete instance of `DataTypeInput` can be one of the following:
//
//	DataTypeBlob
//	DataTypeTable
type DataTypeInput interface {
	pulumi.Input

	ToDataTypeOutput() DataTypeOutput
	ToDataTypeOutputWithContext(context.Context) DataTypeOutput
}

var dataTypePtrType = reflect.TypeOf((**DataType)(nil)).Elem()

type DataTypePtrInput interface {
	pulumi.Input

	ToDataTypePtrOutput() DataTypePtrOutput
	ToDataTypePtrOutputWithContext(context.Context) DataTypePtrOutput
}

type dataTypePtr string

func DataTypePtr(v string) DataTypePtrInput {
	return (*dataTypePtr)(&v)
}

func (*dataTypePtr) ElementType() reflect.Type {
	return dataTypePtrType
}

func (in *dataTypePtr) ToDataTypePtrOutput() DataTypePtrOutput {
	return pulumi.ToOutput(in).(DataTypePtrOutput)
}

func (in *dataTypePtr) ToDataTypePtrOutputWithContext(ctx context.Context) DataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataTypePtrOutput)
}

// Direction of data movement
type Direction string

const (
	DirectionSend    = Direction("Send")
	DirectionReceive = Direction("Receive")
)

func (Direction) ElementType() reflect.Type {
	return reflect.TypeOf((*Direction)(nil)).Elem()
}

func (e Direction) ToDirectionOutput() DirectionOutput {
	return pulumi.ToOutput(e).(DirectionOutput)
}

func (e Direction) ToDirectionOutputWithContext(ctx context.Context) DirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DirectionOutput)
}

func (e Direction) ToDirectionPtrOutput() DirectionPtrOutput {
	return e.ToDirectionPtrOutputWithContext(context.Background())
}

func (e Direction) ToDirectionPtrOutputWithContext(ctx context.Context) DirectionPtrOutput {
	return Direction(e).ToDirectionOutputWithContext(ctx).ToDirectionPtrOutputWithContext(ctx)
}

func (e Direction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Direction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Direction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Direction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DirectionOutput struct{ *pulumi.OutputState }

func (DirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Direction)(nil)).Elem()
}

func (o DirectionOutput) ToDirectionOutput() DirectionOutput {
	return o
}

func (o DirectionOutput) ToDirectionOutputWithContext(ctx context.Context) DirectionOutput {
	return o
}

func (o DirectionOutput) ToDirectionPtrOutput() DirectionPtrOutput {
	return o.ToDirectionPtrOutputWithContext(context.Background())
}

func (o DirectionOutput) ToDirectionPtrOutputWithContext(ctx context.Context) DirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Direction) *Direction {
		return &v
	}).(DirectionPtrOutput)
}

func (o DirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Direction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Direction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DirectionPtrOutput struct{ *pulumi.OutputState }

func (DirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Direction)(nil)).Elem()
}

func (o DirectionPtrOutput) ToDirectionPtrOutput() DirectionPtrOutput {
	return o
}

func (o DirectionPtrOutput) ToDirectionPtrOutputWithContext(ctx context.Context) DirectionPtrOutput {
	return o
}

func (o DirectionPtrOutput) Elem() DirectionOutput {
	return o.ApplyT(func(v *Direction) Direction {
		if v != nil {
			return *v
		}
		var ret Direction
		return ret
	}).(DirectionOutput)
}

func (o DirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Direction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DirectionInput is an input type that accepts values of the Direction enum
// A concrete instance of `DirectionInput` can be one of the following:
//
//	DirectionSend
//	DirectionReceive
type DirectionInput interface {
	pulumi.Input

	ToDirectionOutput() DirectionOutput
	ToDirectionOutputWithContext(context.Context) DirectionOutput
}

var directionPtrType = reflect.TypeOf((**Direction)(nil)).Elem()

type DirectionPtrInput interface {
	pulumi.Input

	ToDirectionPtrOutput() DirectionPtrOutput
	ToDirectionPtrOutputWithContext(context.Context) DirectionPtrOutput
}

type directionPtr string

func DirectionPtr(v string) DirectionPtrInput {
	return (*directionPtr)(&v)
}

func (*directionPtr) ElementType() reflect.Type {
	return directionPtrType
}

func (in *directionPtr) ToDirectionPtrOutput() DirectionPtrOutput {
	return pulumi.ToOutput(in).(DirectionPtrOutput)
}

func (in *directionPtr) ToDirectionPtrOutputWithContext(ctx context.Context) DirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DirectionPtrOutput)
}

// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
type FilterType string

const (
	// Defines an allow filter used for allowlist.
	FilterTypeAllow = FilterType("Allow")
	// Defines a denying filter used for blocklisting.
	FilterTypeDeny = FilterType("Deny")
)

func (FilterType) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterType)(nil)).Elem()
}

func (e FilterType) ToFilterTypeOutput() FilterTypeOutput {
	return pulumi.ToOutput(e).(FilterTypeOutput)
}

func (e FilterType) ToFilterTypeOutputWithContext(ctx context.Context) FilterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FilterTypeOutput)
}

func (e FilterType) ToFilterTypePtrOutput() FilterTypePtrOutput {
	return e.ToFilterTypePtrOutputWithContext(context.Background())
}

func (e FilterType) ToFilterTypePtrOutputWithContext(ctx context.Context) FilterTypePtrOutput {
	return FilterType(e).ToFilterTypeOutputWithContext(ctx).ToFilterTypePtrOutputWithContext(ctx)
}

func (e FilterType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FilterType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FilterType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FilterTypeOutput struct{ *pulumi.OutputState }

func (FilterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilterType)(nil)).Elem()
}

func (o FilterTypeOutput) ToFilterTypeOutput() FilterTypeOutput {
	return o
}

func (o FilterTypeOutput) ToFilterTypeOutputWithContext(ctx context.Context) FilterTypeOutput {
	return o
}

func (o FilterTypeOutput) ToFilterTypePtrOutput() FilterTypePtrOutput {
	return o.ToFilterTypePtrOutputWithContext(context.Background())
}

func (o FilterTypeOutput) ToFilterTypePtrOutputWithContext(ctx context.Context) FilterTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FilterType) *FilterType {
		return &v
	}).(FilterTypePtrOutput)
}

func (o FilterTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FilterTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FilterTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FilterType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FilterTypePtrOutput struct{ *pulumi.OutputState }

func (FilterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FilterType)(nil)).Elem()
}

func (o FilterTypePtrOutput) ToFilterTypePtrOutput() FilterTypePtrOutput {
	return o
}

func (o FilterTypePtrOutput) ToFilterTypePtrOutputWithContext(ctx context.Context) FilterTypePtrOutput {
	return o
}

func (o FilterTypePtrOutput) Elem() FilterTypeOutput {
	return o.ApplyT(func(v *FilterType) FilterType {
		if v != nil {
			return *v
		}
		var ret FilterType
		return ret
	}).(FilterTypeOutput)
}

func (o FilterTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FilterTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FilterType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FilterTypeInput is an input type that accepts values of the FilterType enum
// A concrete instance of `FilterTypeInput` can be one of the following:
//
//	FilterTypeAllow
//	FilterTypeDeny
type FilterTypeInput interface {
	pulumi.Input

	ToFilterTypeOutput() FilterTypeOutput
	ToFilterTypeOutputWithContext(context.Context) FilterTypeOutput
}

var filterTypePtrType = reflect.TypeOf((**FilterType)(nil)).Elem()

type FilterTypePtrInput interface {
	pulumi.Input

	ToFilterTypePtrOutput() FilterTypePtrOutput
	ToFilterTypePtrOutputWithContext(context.Context) FilterTypePtrOutput
}

type filterTypePtr string

func FilterTypePtr(v string) FilterTypePtrInput {
	return (*filterTypePtr)(&v)
}

func (*filterTypePtr) ElementType() reflect.Type {
	return filterTypePtrType
}

func (in *filterTypePtr) ToFilterTypePtrOutput() FilterTypePtrOutput {
	return pulumi.ToOutput(in).(FilterTypePtrOutput)
}

func (in *filterTypePtr) ToFilterTypePtrOutputWithContext(ctx context.Context) FilterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FilterTypePtrOutput)
}

// Billing tier for this messaging flow
type FlowBillingTier string

const (
	FlowBillingTierBlobTransport = FlowBillingTier("BlobTransport")
	FlowBillingTierStandard      = FlowBillingTier("Standard")
	FlowBillingTierPremium       = FlowBillingTier("Premium")
)

func (FlowBillingTier) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowBillingTier)(nil)).Elem()
}

func (e FlowBillingTier) ToFlowBillingTierOutput() FlowBillingTierOutput {
	return pulumi.ToOutput(e).(FlowBillingTierOutput)
}

func (e FlowBillingTier) ToFlowBillingTierOutputWithContext(ctx context.Context) FlowBillingTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowBillingTierOutput)
}

func (e FlowBillingTier) ToFlowBillingTierPtrOutput() FlowBillingTierPtrOutput {
	return e.ToFlowBillingTierPtrOutputWithContext(context.Background())
}

func (e FlowBillingTier) ToFlowBillingTierPtrOutputWithContext(ctx context.Context) FlowBillingTierPtrOutput {
	return FlowBillingTier(e).ToFlowBillingTierOutputWithContext(ctx).ToFlowBillingTierPtrOutputWithContext(ctx)
}

func (e FlowBillingTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowBillingTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowBillingTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowBillingTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowBillingTierOutput struct{ *pulumi.OutputState }

func (FlowBillingTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowBillingTier)(nil)).Elem()
}

func (o FlowBillingTierOutput) ToFlowBillingTierOutput() FlowBillingTierOutput {
	return o
}

func (o FlowBillingTierOutput) ToFlowBillingTierOutputWithContext(ctx context.Context) FlowBillingTierOutput {
	return o
}

func (o FlowBillingTierOutput) ToFlowBillingTierPtrOutput() FlowBillingTierPtrOutput {
	return o.ToFlowBillingTierPtrOutputWithContext(context.Background())
}

func (o FlowBillingTierOutput) ToFlowBillingTierPtrOutputWithContext(ctx context.Context) FlowBillingTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowBillingTier) *FlowBillingTier {
		return &v
	}).(FlowBillingTierPtrOutput)
}

func (o FlowBillingTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowBillingTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowBillingTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowBillingTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowBillingTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowBillingTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowBillingTierPtrOutput struct{ *pulumi.OutputState }

func (FlowBillingTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowBillingTier)(nil)).Elem()
}

func (o FlowBillingTierPtrOutput) ToFlowBillingTierPtrOutput() FlowBillingTierPtrOutput {
	return o
}

func (o FlowBillingTierPtrOutput) ToFlowBillingTierPtrOutputWithContext(ctx context.Context) FlowBillingTierPtrOutput {
	return o
}

func (o FlowBillingTierPtrOutput) Elem() FlowBillingTierOutput {
	return o.ApplyT(func(v *FlowBillingTier) FlowBillingTier {
		if v != nil {
			return *v
		}
		var ret FlowBillingTier
		return ret
	}).(FlowBillingTierOutput)
}

func (o FlowBillingTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowBillingTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowBillingTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowBillingTierInput is an input type that accepts values of the FlowBillingTier enum
// A concrete instance of `FlowBillingTierInput` can be one of the following:
//
//	FlowBillingTierBlobTransport
//	FlowBillingTierStandard
//	FlowBillingTierPremium
type FlowBillingTierInput interface {
	pulumi.Input

	ToFlowBillingTierOutput() FlowBillingTierOutput
	ToFlowBillingTierOutputWithContext(context.Context) FlowBillingTierOutput
}

var flowBillingTierPtrType = reflect.TypeOf((**FlowBillingTier)(nil)).Elem()

type FlowBillingTierPtrInput interface {
	pulumi.Input

	ToFlowBillingTierPtrOutput() FlowBillingTierPtrOutput
	ToFlowBillingTierPtrOutputWithContext(context.Context) FlowBillingTierPtrOutput
}

type flowBillingTierPtr string

func FlowBillingTierPtr(v string) FlowBillingTierPtrInput {
	return (*flowBillingTierPtr)(&v)
}

func (*flowBillingTierPtr) ElementType() reflect.Type {
	return flowBillingTierPtrType
}

func (in *flowBillingTierPtr) ToFlowBillingTierPtrOutput() FlowBillingTierPtrOutput {
	return pulumi.ToOutput(in).(FlowBillingTierPtrOutput)
}

func (in *flowBillingTierPtr) ToFlowBillingTierPtrOutputWithContext(ctx context.Context) FlowBillingTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowBillingTierPtrOutput)
}

// The operational status of the FlowProfile.
type FlowProfileStatus string

const (
	// Defines a FlowProfile that can no longer be selected.
	FlowProfileStatusObsolete = FlowProfileStatus("Obsolete")
	// Defines a FlowProfile that is enabled.
	FlowProfileStatusEnabled = FlowProfileStatus("Enabled")
)

func (FlowProfileStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowProfileStatus)(nil)).Elem()
}

func (e FlowProfileStatus) ToFlowProfileStatusOutput() FlowProfileStatusOutput {
	return pulumi.ToOutput(e).(FlowProfileStatusOutput)
}

func (e FlowProfileStatus) ToFlowProfileStatusOutputWithContext(ctx context.Context) FlowProfileStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowProfileStatusOutput)
}

func (e FlowProfileStatus) ToFlowProfileStatusPtrOutput() FlowProfileStatusPtrOutput {
	return e.ToFlowProfileStatusPtrOutputWithContext(context.Background())
}

func (e FlowProfileStatus) ToFlowProfileStatusPtrOutputWithContext(ctx context.Context) FlowProfileStatusPtrOutput {
	return FlowProfileStatus(e).ToFlowProfileStatusOutputWithContext(ctx).ToFlowProfileStatusPtrOutputWithContext(ctx)
}

func (e FlowProfileStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowProfileStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowProfileStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowProfileStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowProfileStatusOutput struct{ *pulumi.OutputState }

func (FlowProfileStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowProfileStatus)(nil)).Elem()
}

func (o FlowProfileStatusOutput) ToFlowProfileStatusOutput() FlowProfileStatusOutput {
	return o
}

func (o FlowProfileStatusOutput) ToFlowProfileStatusOutputWithContext(ctx context.Context) FlowProfileStatusOutput {
	return o
}

func (o FlowProfileStatusOutput) ToFlowProfileStatusPtrOutput() FlowProfileStatusPtrOutput {
	return o.ToFlowProfileStatusPtrOutputWithContext(context.Background())
}

func (o FlowProfileStatusOutput) ToFlowProfileStatusPtrOutputWithContext(ctx context.Context) FlowProfileStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowProfileStatus) *FlowProfileStatus {
		return &v
	}).(FlowProfileStatusPtrOutput)
}

func (o FlowProfileStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowProfileStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowProfileStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowProfileStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowProfileStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowProfileStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowProfileStatusPtrOutput struct{ *pulumi.OutputState }

func (FlowProfileStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowProfileStatus)(nil)).Elem()
}

func (o FlowProfileStatusPtrOutput) ToFlowProfileStatusPtrOutput() FlowProfileStatusPtrOutput {
	return o
}

func (o FlowProfileStatusPtrOutput) ToFlowProfileStatusPtrOutputWithContext(ctx context.Context) FlowProfileStatusPtrOutput {
	return o
}

func (o FlowProfileStatusPtrOutput) Elem() FlowProfileStatusOutput {
	return o.ApplyT(func(v *FlowProfileStatus) FlowProfileStatus {
		if v != nil {
			return *v
		}
		var ret FlowProfileStatus
		return ret
	}).(FlowProfileStatusOutput)
}

func (o FlowProfileStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowProfileStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowProfileStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowProfileStatusInput is an input type that accepts values of the FlowProfileStatus enum
// A concrete instance of `FlowProfileStatusInput` can be one of the following:
//
//	FlowProfileStatusObsolete
//	FlowProfileStatusEnabled
type FlowProfileStatusInput interface {
	pulumi.Input

	ToFlowProfileStatusOutput() FlowProfileStatusOutput
	ToFlowProfileStatusOutputWithContext(context.Context) FlowProfileStatusOutput
}

var flowProfileStatusPtrType = reflect.TypeOf((**FlowProfileStatus)(nil)).Elem()

type FlowProfileStatusPtrInput interface {
	pulumi.Input

	ToFlowProfileStatusPtrOutput() FlowProfileStatusPtrOutput
	ToFlowProfileStatusPtrOutputWithContext(context.Context) FlowProfileStatusPtrOutput
}

type flowProfileStatusPtr string

func FlowProfileStatusPtr(v string) FlowProfileStatusPtrInput {
	return (*flowProfileStatusPtr)(&v)
}

func (*flowProfileStatusPtr) ElementType() reflect.Type {
	return flowProfileStatusPtrType
}

func (in *flowProfileStatusPtr) ToFlowProfileStatusPtrOutput() FlowProfileStatusPtrOutput {
	return pulumi.ToOutput(in).(FlowProfileStatusPtrOutput)
}

func (in *flowProfileStatusPtr) ToFlowProfileStatusPtrOutputWithContext(ctx context.Context) FlowProfileStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowProfileStatusPtrOutput)
}

// Status of the current flow
type FlowStatus string

const (
	FlowStatusEnabled  = FlowStatus("Enabled")
	FlowStatusDisabled = FlowStatus("Disabled")
)

func (FlowStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowStatus)(nil)).Elem()
}

func (e FlowStatus) ToFlowStatusOutput() FlowStatusOutput {
	return pulumi.ToOutput(e).(FlowStatusOutput)
}

func (e FlowStatus) ToFlowStatusOutputWithContext(ctx context.Context) FlowStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowStatusOutput)
}

func (e FlowStatus) ToFlowStatusPtrOutput() FlowStatusPtrOutput {
	return e.ToFlowStatusPtrOutputWithContext(context.Background())
}

func (e FlowStatus) ToFlowStatusPtrOutputWithContext(ctx context.Context) FlowStatusPtrOutput {
	return FlowStatus(e).ToFlowStatusOutputWithContext(ctx).ToFlowStatusPtrOutputWithContext(ctx)
}

func (e FlowStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowStatusOutput struct{ *pulumi.OutputState }

func (FlowStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowStatus)(nil)).Elem()
}

func (o FlowStatusOutput) ToFlowStatusOutput() FlowStatusOutput {
	return o
}

func (o FlowStatusOutput) ToFlowStatusOutputWithContext(ctx context.Context) FlowStatusOutput {
	return o
}

func (o FlowStatusOutput) ToFlowStatusPtrOutput() FlowStatusPtrOutput {
	return o.ToFlowStatusPtrOutputWithContext(context.Background())
}

func (o FlowStatusOutput) ToFlowStatusPtrOutputWithContext(ctx context.Context) FlowStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowStatus) *FlowStatus {
		return &v
	}).(FlowStatusPtrOutput)
}

func (o FlowStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowStatusPtrOutput struct{ *pulumi.OutputState }

func (FlowStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowStatus)(nil)).Elem()
}

func (o FlowStatusPtrOutput) ToFlowStatusPtrOutput() FlowStatusPtrOutput {
	return o
}

func (o FlowStatusPtrOutput) ToFlowStatusPtrOutputWithContext(ctx context.Context) FlowStatusPtrOutput {
	return o
}

func (o FlowStatusPtrOutput) Elem() FlowStatusOutput {
	return o.ApplyT(func(v *FlowStatus) FlowStatus {
		if v != nil {
			return *v
		}
		var ret FlowStatus
		return ret
	}).(FlowStatusOutput)
}

func (o FlowStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowStatusInput is an input type that accepts values of the FlowStatus enum
// A concrete instance of `FlowStatusInput` can be one of the following:
//
//	FlowStatusEnabled
//	FlowStatusDisabled
type FlowStatusInput interface {
	pulumi.Input

	ToFlowStatusOutput() FlowStatusOutput
	ToFlowStatusOutputWithContext(context.Context) FlowStatusOutput
}

var flowStatusPtrType = reflect.TypeOf((**FlowStatus)(nil)).Elem()

type FlowStatusPtrInput interface {
	pulumi.Input

	ToFlowStatusPtrOutput() FlowStatusPtrOutput
	ToFlowStatusPtrOutputWithContext(context.Context) FlowStatusPtrOutput
}

type flowStatusPtr string

func FlowStatusPtr(v string) FlowStatusPtrInput {
	return (*flowStatusPtr)(&v)
}

func (*flowStatusPtr) ElementType() reflect.Type {
	return flowStatusPtrType
}

func (in *flowStatusPtr) ToFlowStatusPtrOutput() FlowStatusPtrOutput {
	return pulumi.ToOutput(in).(FlowStatusPtrOutput)
}

func (in *flowStatusPtr) ToFlowStatusPtrOutputWithContext(ctx context.Context) FlowStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowStatusPtrOutput)
}

// Flow type for the specified resource
type FlowType string

const (
	FlowTypeUnknown           = FlowType("Unknown")
	FlowTypeComplex           = FlowType("Complex")
	FlowTypeDevSecOps         = FlowType("DevSecOps")
	FlowTypeMessaging         = FlowType("Messaging")
	FlowTypeMission           = FlowType("Mission")
	FlowTypeMicrosoftInternal = FlowType("MicrosoftInternal")
	FlowTypeBasicFiles        = FlowType("BasicFiles")
	FlowTypeData              = FlowType("Data")
	FlowTypeStandard          = FlowType("Standard")
	FlowTypeStreamingVideo    = FlowType("StreamingVideo")
	FlowTypeOpaque            = FlowType("Opaque")
	FlowTypeMissionOpaqueXML  = FlowType("MissionOpaqueXML")
)

func (FlowType) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowType)(nil)).Elem()
}

func (e FlowType) ToFlowTypeOutput() FlowTypeOutput {
	return pulumi.ToOutput(e).(FlowTypeOutput)
}

func (e FlowType) ToFlowTypeOutputWithContext(ctx context.Context) FlowTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FlowTypeOutput)
}

func (e FlowType) ToFlowTypePtrOutput() FlowTypePtrOutput {
	return e.ToFlowTypePtrOutputWithContext(context.Background())
}

func (e FlowType) ToFlowTypePtrOutputWithContext(ctx context.Context) FlowTypePtrOutput {
	return FlowType(e).ToFlowTypeOutputWithContext(ctx).ToFlowTypePtrOutputWithContext(ctx)
}

func (e FlowType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FlowType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FlowType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FlowTypeOutput struct{ *pulumi.OutputState }

func (FlowTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowType)(nil)).Elem()
}

func (o FlowTypeOutput) ToFlowTypeOutput() FlowTypeOutput {
	return o
}

func (o FlowTypeOutput) ToFlowTypeOutputWithContext(ctx context.Context) FlowTypeOutput {
	return o
}

func (o FlowTypeOutput) ToFlowTypePtrOutput() FlowTypePtrOutput {
	return o.ToFlowTypePtrOutputWithContext(context.Background())
}

func (o FlowTypeOutput) ToFlowTypePtrOutputWithContext(ctx context.Context) FlowTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowType) *FlowType {
		return &v
	}).(FlowTypePtrOutput)
}

func (o FlowTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FlowTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FlowTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FlowType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FlowTypePtrOutput struct{ *pulumi.OutputState }

func (FlowTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowType)(nil)).Elem()
}

func (o FlowTypePtrOutput) ToFlowTypePtrOutput() FlowTypePtrOutput {
	return o
}

func (o FlowTypePtrOutput) ToFlowTypePtrOutputWithContext(ctx context.Context) FlowTypePtrOutput {
	return o
}

func (o FlowTypePtrOutput) Elem() FlowTypeOutput {
	return o.ApplyT(func(v *FlowType) FlowType {
		if v != nil {
			return *v
		}
		var ret FlowType
		return ret
	}).(FlowTypeOutput)
}

func (o FlowTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FlowTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FlowType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FlowTypeInput is an input type that accepts values of the FlowType enum
// A concrete instance of `FlowTypeInput` can be one of the following:
//
//	FlowTypeUnknown
//	FlowTypeComplex
//	FlowTypeDevSecOps
//	FlowTypeMessaging
//	FlowTypeMission
//	FlowTypeMicrosoftInternal
//	FlowTypeBasicFiles
//	FlowTypeData
//	FlowTypeStandard
//	FlowTypeStreamingVideo
//	FlowTypeOpaque
//	FlowTypeMissionOpaqueXML
type FlowTypeInput interface {
	pulumi.Input

	ToFlowTypeOutput() FlowTypeOutput
	ToFlowTypeOutputWithContext(context.Context) FlowTypeOutput
}

var flowTypePtrType = reflect.TypeOf((**FlowType)(nil)).Elem()

type FlowTypePtrInput interface {
	pulumi.Input

	ToFlowTypePtrOutput() FlowTypePtrOutput
	ToFlowTypePtrOutputWithContext(context.Context) FlowTypePtrOutput
}

type flowTypePtr string

func FlowTypePtr(v string) FlowTypePtrInput {
	return (*flowTypePtr)(&v)
}

func (*flowTypePtr) ElementType() reflect.Type {
	return flowTypePtrType
}

func (in *flowTypePtr) ToFlowTypePtrOutput() FlowTypePtrOutput {
	return pulumi.ToOutput(in).(FlowTypePtrOutput)
}

func (in *flowTypePtr) ToFlowTypePtrOutputWithContext(ctx context.Context) FlowTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FlowTypePtrOutput)
}

// The direction pipeline to filter approved schemas.
type ListApprovedSchemasDirection string

const (
	ListApprovedSchemasDirectionSend    = ListApprovedSchemasDirection("Send")
	ListApprovedSchemasDirectionReceive = ListApprovedSchemasDirection("Receive")
)

func (ListApprovedSchemasDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*ListApprovedSchemasDirection)(nil)).Elem()
}

func (e ListApprovedSchemasDirection) ToListApprovedSchemasDirectionOutput() ListApprovedSchemasDirectionOutput {
	return pulumi.ToOutput(e).(ListApprovedSchemasDirectionOutput)
}

func (e ListApprovedSchemasDirection) ToListApprovedSchemasDirectionOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ListApprovedSchemasDirectionOutput)
}

func (e ListApprovedSchemasDirection) ToListApprovedSchemasDirectionPtrOutput() ListApprovedSchemasDirectionPtrOutput {
	return e.ToListApprovedSchemasDirectionPtrOutputWithContext(context.Background())
}

func (e ListApprovedSchemasDirection) ToListApprovedSchemasDirectionPtrOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionPtrOutput {
	return ListApprovedSchemasDirection(e).ToListApprovedSchemasDirectionOutputWithContext(ctx).ToListApprovedSchemasDirectionPtrOutputWithContext(ctx)
}

func (e ListApprovedSchemasDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ListApprovedSchemasDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ListApprovedSchemasDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ListApprovedSchemasDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ListApprovedSchemasDirectionOutput struct{ *pulumi.OutputState }

func (ListApprovedSchemasDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListApprovedSchemasDirection)(nil)).Elem()
}

func (o ListApprovedSchemasDirectionOutput) ToListApprovedSchemasDirectionOutput() ListApprovedSchemasDirectionOutput {
	return o
}

func (o ListApprovedSchemasDirectionOutput) ToListApprovedSchemasDirectionOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionOutput {
	return o
}

func (o ListApprovedSchemasDirectionOutput) ToListApprovedSchemasDirectionPtrOutput() ListApprovedSchemasDirectionPtrOutput {
	return o.ToListApprovedSchemasDirectionPtrOutputWithContext(context.Background())
}

func (o ListApprovedSchemasDirectionOutput) ToListApprovedSchemasDirectionPtrOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListApprovedSchemasDirection) *ListApprovedSchemasDirection {
		return &v
	}).(ListApprovedSchemasDirectionPtrOutput)
}

func (o ListApprovedSchemasDirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ListApprovedSchemasDirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ListApprovedSchemasDirection) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ListApprovedSchemasDirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ListApprovedSchemasDirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ListApprovedSchemasDirection) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ListApprovedSchemasDirectionPtrOutput struct{ *pulumi.OutputState }

func (ListApprovedSchemasDirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListApprovedSchemasDirection)(nil)).Elem()
}

func (o ListApprovedSchemasDirectionPtrOutput) ToListApprovedSchemasDirectionPtrOutput() ListApprovedSchemasDirectionPtrOutput {
	return o
}

func (o ListApprovedSchemasDirectionPtrOutput) ToListApprovedSchemasDirectionPtrOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionPtrOutput {
	return o
}

func (o ListApprovedSchemasDirectionPtrOutput) Elem() ListApprovedSchemasDirectionOutput {
	return o.ApplyT(func(v *ListApprovedSchemasDirection) ListApprovedSchemasDirection {
		if v != nil {
			return *v
		}
		var ret ListApprovedSchemasDirection
		return ret
	}).(ListApprovedSchemasDirectionOutput)
}

func (o ListApprovedSchemasDirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ListApprovedSchemasDirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ListApprovedSchemasDirection) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ListApprovedSchemasDirectionInput is an input type that accepts values of the ListApprovedSchemasDirection enum
// A concrete instance of `ListApprovedSchemasDirectionInput` can be one of the following:
//
//	ListApprovedSchemasDirectionSend
//	ListApprovedSchemasDirectionReceive
type ListApprovedSchemasDirectionInput interface {
	pulumi.Input

	ToListApprovedSchemasDirectionOutput() ListApprovedSchemasDirectionOutput
	ToListApprovedSchemasDirectionOutputWithContext(context.Context) ListApprovedSchemasDirectionOutput
}

var listApprovedSchemasDirectionPtrType = reflect.TypeOf((**ListApprovedSchemasDirection)(nil)).Elem()

type ListApprovedSchemasDirectionPtrInput interface {
	pulumi.Input

	ToListApprovedSchemasDirectionPtrOutput() ListApprovedSchemasDirectionPtrOutput
	ToListApprovedSchemasDirectionPtrOutputWithContext(context.Context) ListApprovedSchemasDirectionPtrOutput
}

type listApprovedSchemasDirectionPtr string

func ListApprovedSchemasDirectionPtr(v string) ListApprovedSchemasDirectionPtrInput {
	return (*listApprovedSchemasDirectionPtr)(&v)
}

func (*listApprovedSchemasDirectionPtr) ElementType() reflect.Type {
	return listApprovedSchemasDirectionPtrType
}

func (in *listApprovedSchemasDirectionPtr) ToListApprovedSchemasDirectionPtrOutput() ListApprovedSchemasDirectionPtrOutput {
	return pulumi.ToOutput(in).(ListApprovedSchemasDirectionPtrOutput)
}

func (in *listApprovedSchemasDirectionPtr) ToListApprovedSchemasDirectionPtrOutputWithContext(ctx context.Context) ListApprovedSchemasDirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ListApprovedSchemasDirectionPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeSystemAssigned
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityType_SystemAssigned_UserAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

// Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
type MatchType string

const (
	// The option to pattern match substrings within all text content. For example, "hello world" would be found in "chello worlds".
	MatchTypePartial = MatchType("Partial")
	// The option to pattern match the entire string explicitly. For example, "hello world" would NOT be found in "chello worlds".
	MatchTypeComplete = MatchType("Complete")
)

func (MatchType) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchType)(nil)).Elem()
}

func (e MatchType) ToMatchTypeOutput() MatchTypeOutput {
	return pulumi.ToOutput(e).(MatchTypeOutput)
}

func (e MatchType) ToMatchTypeOutputWithContext(ctx context.Context) MatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MatchTypeOutput)
}

func (e MatchType) ToMatchTypePtrOutput() MatchTypePtrOutput {
	return e.ToMatchTypePtrOutputWithContext(context.Background())
}

func (e MatchType) ToMatchTypePtrOutputWithContext(ctx context.Context) MatchTypePtrOutput {
	return MatchType(e).ToMatchTypeOutputWithContext(ctx).ToMatchTypePtrOutputWithContext(ctx)
}

func (e MatchType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MatchTypeOutput struct{ *pulumi.OutputState }

func (MatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchType)(nil)).Elem()
}

func (o MatchTypeOutput) ToMatchTypeOutput() MatchTypeOutput {
	return o
}

func (o MatchTypeOutput) ToMatchTypeOutputWithContext(ctx context.Context) MatchTypeOutput {
	return o
}

func (o MatchTypeOutput) ToMatchTypePtrOutput() MatchTypePtrOutput {
	return o.ToMatchTypePtrOutputWithContext(context.Background())
}

func (o MatchTypeOutput) ToMatchTypePtrOutputWithContext(ctx context.Context) MatchTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchType) *MatchType {
		return &v
	}).(MatchTypePtrOutput)
}

func (o MatchTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MatchTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MatchTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MatchTypePtrOutput struct{ *pulumi.OutputState }

func (MatchTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchType)(nil)).Elem()
}

func (o MatchTypePtrOutput) ToMatchTypePtrOutput() MatchTypePtrOutput {
	return o
}

func (o MatchTypePtrOutput) ToMatchTypePtrOutputWithContext(ctx context.Context) MatchTypePtrOutput {
	return o
}

func (o MatchTypePtrOutput) Elem() MatchTypeOutput {
	return o.ApplyT(func(v *MatchType) MatchType {
		if v != nil {
			return *v
		}
		var ret MatchType
		return ret
	}).(MatchTypeOutput)
}

func (o MatchTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MatchType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MatchTypeInput is an input type that accepts values of the MatchType enum
// A concrete instance of `MatchTypeInput` can be one of the following:
//
//	MatchTypePartial
//	MatchTypeComplete
type MatchTypeInput interface {
	pulumi.Input

	ToMatchTypeOutput() MatchTypeOutput
	ToMatchTypeOutputWithContext(context.Context) MatchTypeOutput
}

var matchTypePtrType = reflect.TypeOf((**MatchType)(nil)).Elem()

type MatchTypePtrInput interface {
	pulumi.Input

	ToMatchTypePtrOutput() MatchTypePtrOutput
	ToMatchTypePtrOutputWithContext(context.Context) MatchTypePtrOutput
}

type matchTypePtr string

func MatchTypePtr(v string) MatchTypePtrInput {
	return (*matchTypePtr)(&v)
}

func (*matchTypePtr) ElementType() reflect.Type {
	return matchTypePtrType
}

func (in *matchTypePtr) ToMatchTypePtrOutput() MatchTypePtrOutput {
	return pulumi.ToOutput(in).(MatchTypePtrOutput)
}

func (in *matchTypePtr) ToMatchTypePtrOutputWithContext(ctx context.Context) MatchTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MatchTypePtrOutput)
}

// The direction of the schema.
type SchemaDirection string

const (
	SchemaDirectionSend    = SchemaDirection("Send")
	SchemaDirectionReceive = SchemaDirection("Receive")
)

func (SchemaDirection) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaDirection)(nil)).Elem()
}

func (e SchemaDirection) ToSchemaDirectionOutput() SchemaDirectionOutput {
	return pulumi.ToOutput(e).(SchemaDirectionOutput)
}

func (e SchemaDirection) ToSchemaDirectionOutputWithContext(ctx context.Context) SchemaDirectionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchemaDirectionOutput)
}

func (e SchemaDirection) ToSchemaDirectionPtrOutput() SchemaDirectionPtrOutput {
	return e.ToSchemaDirectionPtrOutputWithContext(context.Background())
}

func (e SchemaDirection) ToSchemaDirectionPtrOutputWithContext(ctx context.Context) SchemaDirectionPtrOutput {
	return SchemaDirection(e).ToSchemaDirectionOutputWithContext(ctx).ToSchemaDirectionPtrOutputWithContext(ctx)
}

func (e SchemaDirection) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaDirection) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaDirection) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchemaDirection) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchemaDirectionOutput struct{ *pulumi.OutputState }

func (SchemaDirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaDirection)(nil)).Elem()
}

func (o SchemaDirectionOutput) ToSchemaDirectionOutput() SchemaDirectionOutput {
	return o
}

func (o SchemaDirectionOutput) ToSchemaDirectionOutputWithContext(ctx context.Context) SchemaDirectionOutput {
	return o
}

func (o SchemaDirectionOutput) ToSchemaDirectionPtrOutput() SchemaDirectionPtrOutput {
	return o.ToSchemaDirectionPtrOutputWithContext(context.Background())
}

func (o SchemaDirectionOutput) ToSchemaDirectionPtrOutputWithContext(ctx context.Context) SchemaDirectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaDirection) *SchemaDirection {
		return &v
	}).(SchemaDirectionPtrOutput)
}

func (o SchemaDirectionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchemaDirectionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaDirection) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchemaDirectionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaDirectionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaDirection) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchemaDirectionPtrOutput struct{ *pulumi.OutputState }

func (SchemaDirectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaDirection)(nil)).Elem()
}

func (o SchemaDirectionPtrOutput) ToSchemaDirectionPtrOutput() SchemaDirectionPtrOutput {
	return o
}

func (o SchemaDirectionPtrOutput) ToSchemaDirectionPtrOutputWithContext(ctx context.Context) SchemaDirectionPtrOutput {
	return o
}

func (o SchemaDirectionPtrOutput) Elem() SchemaDirectionOutput {
	return o.ApplyT(func(v *SchemaDirection) SchemaDirection {
		if v != nil {
			return *v
		}
		var ret SchemaDirection
		return ret
	}).(SchemaDirectionOutput)
}

func (o SchemaDirectionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaDirectionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchemaDirection) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchemaDirectionInput is an input type that accepts values of the SchemaDirection enum
// A concrete instance of `SchemaDirectionInput` can be one of the following:
//
//	SchemaDirectionSend
//	SchemaDirectionReceive
type SchemaDirectionInput interface {
	pulumi.Input

	ToSchemaDirectionOutput() SchemaDirectionOutput
	ToSchemaDirectionOutputWithContext(context.Context) SchemaDirectionOutput
}

var schemaDirectionPtrType = reflect.TypeOf((**SchemaDirection)(nil)).Elem()

type SchemaDirectionPtrInput interface {
	pulumi.Input

	ToSchemaDirectionPtrOutput() SchemaDirectionPtrOutput
	ToSchemaDirectionPtrOutputWithContext(context.Context) SchemaDirectionPtrOutput
}

type schemaDirectionPtr string

func SchemaDirectionPtr(v string) SchemaDirectionPtrInput {
	return (*schemaDirectionPtr)(&v)
}

func (*schemaDirectionPtr) ElementType() reflect.Type {
	return schemaDirectionPtrType
}

func (in *schemaDirectionPtr) ToSchemaDirectionPtrOutput() SchemaDirectionPtrOutput {
	return pulumi.ToOutput(in).(SchemaDirectionPtrOutput)
}

func (in *schemaDirectionPtr) ToSchemaDirectionPtrOutputWithContext(ctx context.Context) SchemaDirectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchemaDirectionPtrOutput)
}

// Status of the schema
type SchemaStatus string

const (
	SchemaStatusNew      = SchemaStatus("New")
	SchemaStatusApproved = SchemaStatus("Approved")
)

func (SchemaStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaStatus)(nil)).Elem()
}

func (e SchemaStatus) ToSchemaStatusOutput() SchemaStatusOutput {
	return pulumi.ToOutput(e).(SchemaStatusOutput)
}

func (e SchemaStatus) ToSchemaStatusOutputWithContext(ctx context.Context) SchemaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchemaStatusOutput)
}

func (e SchemaStatus) ToSchemaStatusPtrOutput() SchemaStatusPtrOutput {
	return e.ToSchemaStatusPtrOutputWithContext(context.Background())
}

func (e SchemaStatus) ToSchemaStatusPtrOutputWithContext(ctx context.Context) SchemaStatusPtrOutput {
	return SchemaStatus(e).ToSchemaStatusOutputWithContext(ctx).ToSchemaStatusPtrOutputWithContext(ctx)
}

func (e SchemaStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchemaStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchemaStatusOutput struct{ *pulumi.OutputState }

func (SchemaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaStatus)(nil)).Elem()
}

func (o SchemaStatusOutput) ToSchemaStatusOutput() SchemaStatusOutput {
	return o
}

func (o SchemaStatusOutput) ToSchemaStatusOutputWithContext(ctx context.Context) SchemaStatusOutput {
	return o
}

func (o SchemaStatusOutput) ToSchemaStatusPtrOutput() SchemaStatusPtrOutput {
	return o.ToSchemaStatusPtrOutputWithContext(context.Background())
}

func (o SchemaStatusOutput) ToSchemaStatusPtrOutputWithContext(ctx context.Context) SchemaStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaStatus) *SchemaStatus {
		return &v
	}).(SchemaStatusPtrOutput)
}

func (o SchemaStatusOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchemaStatusOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaStatus) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchemaStatusOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaStatusOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaStatus) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchemaStatusPtrOutput struct{ *pulumi.OutputState }

func (SchemaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaStatus)(nil)).Elem()
}

func (o SchemaStatusPtrOutput) ToSchemaStatusPtrOutput() SchemaStatusPtrOutput {
	return o
}

func (o SchemaStatusPtrOutput) ToSchemaStatusPtrOutputWithContext(ctx context.Context) SchemaStatusPtrOutput {
	return o
}

func (o SchemaStatusPtrOutput) Elem() SchemaStatusOutput {
	return o.ApplyT(func(v *SchemaStatus) SchemaStatus {
		if v != nil {
			return *v
		}
		var ret SchemaStatus
		return ret
	}).(SchemaStatusOutput)
}

func (o SchemaStatusPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaStatusPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchemaStatus) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchemaStatusInput is an input type that accepts values of the SchemaStatus enum
// A concrete instance of `SchemaStatusInput` can be one of the following:
//
//	SchemaStatusNew
//	SchemaStatusApproved
type SchemaStatusInput interface {
	pulumi.Input

	ToSchemaStatusOutput() SchemaStatusOutput
	ToSchemaStatusOutputWithContext(context.Context) SchemaStatusOutput
}

var schemaStatusPtrType = reflect.TypeOf((**SchemaStatus)(nil)).Elem()

type SchemaStatusPtrInput interface {
	pulumi.Input

	ToSchemaStatusPtrOutput() SchemaStatusPtrOutput
	ToSchemaStatusPtrOutputWithContext(context.Context) SchemaStatusPtrOutput
}

type schemaStatusPtr string

func SchemaStatusPtr(v string) SchemaStatusPtrInput {
	return (*schemaStatusPtr)(&v)
}

func (*schemaStatusPtr) ElementType() reflect.Type {
	return schemaStatusPtrType
}

func (in *schemaStatusPtr) ToSchemaStatusPtrOutput() SchemaStatusPtrOutput {
	return pulumi.ToOutput(in).(SchemaStatusPtrOutput)
}

func (in *schemaStatusPtr) ToSchemaStatusPtrOutputWithContext(ctx context.Context) SchemaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchemaStatusPtrOutput)
}

// The Schema Type
type SchemaType string

const (
	SchemaTypeXsd = SchemaType("Xsd")
	SchemaTypeZip = SchemaType("Zip")
)

func (SchemaType) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaType)(nil)).Elem()
}

func (e SchemaType) ToSchemaTypeOutput() SchemaTypeOutput {
	return pulumi.ToOutput(e).(SchemaTypeOutput)
}

func (e SchemaType) ToSchemaTypeOutputWithContext(ctx context.Context) SchemaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SchemaTypeOutput)
}

func (e SchemaType) ToSchemaTypePtrOutput() SchemaTypePtrOutput {
	return e.ToSchemaTypePtrOutputWithContext(context.Background())
}

func (e SchemaType) ToSchemaTypePtrOutputWithContext(ctx context.Context) SchemaTypePtrOutput {
	return SchemaType(e).ToSchemaTypeOutputWithContext(ctx).ToSchemaTypePtrOutputWithContext(ctx)
}

func (e SchemaType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SchemaType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SchemaType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SchemaTypeOutput struct{ *pulumi.OutputState }

func (SchemaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaType)(nil)).Elem()
}

func (o SchemaTypeOutput) ToSchemaTypeOutput() SchemaTypeOutput {
	return o
}

func (o SchemaTypeOutput) ToSchemaTypeOutputWithContext(ctx context.Context) SchemaTypeOutput {
	return o
}

func (o SchemaTypeOutput) ToSchemaTypePtrOutput() SchemaTypePtrOutput {
	return o.ToSchemaTypePtrOutputWithContext(context.Background())
}

func (o SchemaTypeOutput) ToSchemaTypePtrOutputWithContext(ctx context.Context) SchemaTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaType) *SchemaType {
		return &v
	}).(SchemaTypePtrOutput)
}

func (o SchemaTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SchemaTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SchemaTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SchemaType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SchemaTypePtrOutput struct{ *pulumi.OutputState }

func (SchemaTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaType)(nil)).Elem()
}

func (o SchemaTypePtrOutput) ToSchemaTypePtrOutput() SchemaTypePtrOutput {
	return o
}

func (o SchemaTypePtrOutput) ToSchemaTypePtrOutputWithContext(ctx context.Context) SchemaTypePtrOutput {
	return o
}

func (o SchemaTypePtrOutput) Elem() SchemaTypeOutput {
	return o.ApplyT(func(v *SchemaType) SchemaType {
		if v != nil {
			return *v
		}
		var ret SchemaType
		return ret
	}).(SchemaTypeOutput)
}

func (o SchemaTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SchemaTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SchemaType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SchemaTypeInput is an input type that accepts values of the SchemaType enum
// A concrete instance of `SchemaTypeInput` can be one of the following:
//
//	SchemaTypeXsd
//	SchemaTypeZip
type SchemaTypeInput interface {
	pulumi.Input

	ToSchemaTypeOutput() SchemaTypeOutput
	ToSchemaTypeOutputWithContext(context.Context) SchemaTypeOutput
}

var schemaTypePtrType = reflect.TypeOf((**SchemaType)(nil)).Elem()

type SchemaTypePtrInput interface {
	pulumi.Input

	ToSchemaTypePtrOutput() SchemaTypePtrOutput
	ToSchemaTypePtrOutputWithContext(context.Context) SchemaTypePtrOutput
}

type schemaTypePtr string

func SchemaTypePtr(v string) SchemaTypePtrInput {
	return (*schemaTypePtr)(&v)
}

func (*schemaTypePtr) ElementType() reflect.Type {
	return schemaTypePtrType
}

func (in *schemaTypePtr) ToSchemaTypePtrOutput() SchemaTypePtrOutput {
	return pulumi.ToOutput(in).(SchemaTypePtrOutput)
}

func (in *schemaTypePtr) ToSchemaTypePtrOutputWithContext(ctx context.Context) SchemaTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SchemaTypePtrOutput)
}

// The protocol of the stream
type StreamProtocol string

const (
	StreamProtocolUDP = StreamProtocol("UDP")
	StreamProtocolSRT = StreamProtocol("SRT")
	StreamProtocolRTP = StreamProtocol("RTP")
)

func (StreamProtocol) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamProtocol)(nil)).Elem()
}

func (e StreamProtocol) ToStreamProtocolOutput() StreamProtocolOutput {
	return pulumi.ToOutput(e).(StreamProtocolOutput)
}

func (e StreamProtocol) ToStreamProtocolOutputWithContext(ctx context.Context) StreamProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StreamProtocolOutput)
}

func (e StreamProtocol) ToStreamProtocolPtrOutput() StreamProtocolPtrOutput {
	return e.ToStreamProtocolPtrOutputWithContext(context.Background())
}

func (e StreamProtocol) ToStreamProtocolPtrOutputWithContext(ctx context.Context) StreamProtocolPtrOutput {
	return StreamProtocol(e).ToStreamProtocolOutputWithContext(ctx).ToStreamProtocolPtrOutputWithContext(ctx)
}

func (e StreamProtocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamProtocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamProtocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StreamProtocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StreamProtocolOutput struct{ *pulumi.OutputState }

func (StreamProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamProtocol)(nil)).Elem()
}

func (o StreamProtocolOutput) ToStreamProtocolOutput() StreamProtocolOutput {
	return o
}

func (o StreamProtocolOutput) ToStreamProtocolOutputWithContext(ctx context.Context) StreamProtocolOutput {
	return o
}

func (o StreamProtocolOutput) ToStreamProtocolPtrOutput() StreamProtocolPtrOutput {
	return o.ToStreamProtocolPtrOutputWithContext(context.Background())
}

func (o StreamProtocolOutput) ToStreamProtocolPtrOutputWithContext(ctx context.Context) StreamProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamProtocol) *StreamProtocol {
		return &v
	}).(StreamProtocolPtrOutput)
}

func (o StreamProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StreamProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamProtocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StreamProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamProtocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StreamProtocolPtrOutput struct{ *pulumi.OutputState }

func (StreamProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamProtocol)(nil)).Elem()
}

func (o StreamProtocolPtrOutput) ToStreamProtocolPtrOutput() StreamProtocolPtrOutput {
	return o
}

func (o StreamProtocolPtrOutput) ToStreamProtocolPtrOutputWithContext(ctx context.Context) StreamProtocolPtrOutput {
	return o
}

func (o StreamProtocolPtrOutput) Elem() StreamProtocolOutput {
	return o.ApplyT(func(v *StreamProtocol) StreamProtocol {
		if v != nil {
			return *v
		}
		var ret StreamProtocol
		return ret
	}).(StreamProtocolOutput)
}

func (o StreamProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StreamProtocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StreamProtocolInput is an input type that accepts values of the StreamProtocol enum
// A concrete instance of `StreamProtocolInput` can be one of the following:
//
//	StreamProtocolUDP
//	StreamProtocolSRT
//	StreamProtocolRTP
type StreamProtocolInput interface {
	pulumi.Input

	ToStreamProtocolOutput() StreamProtocolOutput
	ToStreamProtocolOutputWithContext(context.Context) StreamProtocolOutput
}

var streamProtocolPtrType = reflect.TypeOf((**StreamProtocol)(nil)).Elem()

type StreamProtocolPtrInput interface {
	pulumi.Input

	ToStreamProtocolPtrOutput() StreamProtocolPtrOutput
	ToStreamProtocolPtrOutputWithContext(context.Context) StreamProtocolPtrOutput
}

type streamProtocolPtr string

func StreamProtocolPtr(v string) StreamProtocolPtrInput {
	return (*streamProtocolPtr)(&v)
}

func (*streamProtocolPtr) ElementType() reflect.Type {
	return streamProtocolPtrType
}

func (in *streamProtocolPtr) ToStreamProtocolPtrOutput() StreamProtocolPtrOutput {
	return pulumi.ToOutput(in).(StreamProtocolPtrOutput)
}

func (in *streamProtocolPtr) ToStreamProtocolPtrOutputWithContext(ctx context.Context) StreamProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StreamProtocolPtrOutput)
}

// Defines the method for referencing the xml schema.
type XmlReferenceType string

const (
	// Defines a referencing procedure where the xml schema will be provided inline.
	XmlReferenceTypeInline = XmlReferenceType("Inline")
)

func (XmlReferenceType) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlReferenceType)(nil)).Elem()
}

func (e XmlReferenceType) ToXmlReferenceTypeOutput() XmlReferenceTypeOutput {
	return pulumi.ToOutput(e).(XmlReferenceTypeOutput)
}

func (e XmlReferenceType) ToXmlReferenceTypeOutputWithContext(ctx context.Context) XmlReferenceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(XmlReferenceTypeOutput)
}

func (e XmlReferenceType) ToXmlReferenceTypePtrOutput() XmlReferenceTypePtrOutput {
	return e.ToXmlReferenceTypePtrOutputWithContext(context.Background())
}

func (e XmlReferenceType) ToXmlReferenceTypePtrOutputWithContext(ctx context.Context) XmlReferenceTypePtrOutput {
	return XmlReferenceType(e).ToXmlReferenceTypeOutputWithContext(ctx).ToXmlReferenceTypePtrOutputWithContext(ctx)
}

func (e XmlReferenceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e XmlReferenceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e XmlReferenceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e XmlReferenceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type XmlReferenceTypeOutput struct{ *pulumi.OutputState }

func (XmlReferenceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*XmlReferenceType)(nil)).Elem()
}

func (o XmlReferenceTypeOutput) ToXmlReferenceTypeOutput() XmlReferenceTypeOutput {
	return o
}

func (o XmlReferenceTypeOutput) ToXmlReferenceTypeOutputWithContext(ctx context.Context) XmlReferenceTypeOutput {
	return o
}

func (o XmlReferenceTypeOutput) ToXmlReferenceTypePtrOutput() XmlReferenceTypePtrOutput {
	return o.ToXmlReferenceTypePtrOutputWithContext(context.Background())
}

func (o XmlReferenceTypeOutput) ToXmlReferenceTypePtrOutputWithContext(ctx context.Context) XmlReferenceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v XmlReferenceType) *XmlReferenceType {
		return &v
	}).(XmlReferenceTypePtrOutput)
}

func (o XmlReferenceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o XmlReferenceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e XmlReferenceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o XmlReferenceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o XmlReferenceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e XmlReferenceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type XmlReferenceTypePtrOutput struct{ *pulumi.OutputState }

func (XmlReferenceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**XmlReferenceType)(nil)).Elem()
}

func (o XmlReferenceTypePtrOutput) ToXmlReferenceTypePtrOutput() XmlReferenceTypePtrOutput {
	return o
}

func (o XmlReferenceTypePtrOutput) ToXmlReferenceTypePtrOutputWithContext(ctx context.Context) XmlReferenceTypePtrOutput {
	return o
}

func (o XmlReferenceTypePtrOutput) Elem() XmlReferenceTypeOutput {
	return o.ApplyT(func(v *XmlReferenceType) XmlReferenceType {
		if v != nil {
			return *v
		}
		var ret XmlReferenceType
		return ret
	}).(XmlReferenceTypeOutput)
}

func (o XmlReferenceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o XmlReferenceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *XmlReferenceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// XmlReferenceTypeInput is an input type that accepts values of the XmlReferenceType enum
// A concrete instance of `XmlReferenceTypeInput` can be one of the following:
//
//	XmlReferenceTypeInline
type XmlReferenceTypeInput interface {
	pulumi.Input

	ToXmlReferenceTypeOutput() XmlReferenceTypeOutput
	ToXmlReferenceTypeOutputWithContext(context.Context) XmlReferenceTypeOutput
}

var xmlReferenceTypePtrType = reflect.TypeOf((**XmlReferenceType)(nil)).Elem()

type XmlReferenceTypePtrInput interface {
	pulumi.Input

	ToXmlReferenceTypePtrOutput() XmlReferenceTypePtrOutput
	ToXmlReferenceTypePtrOutputWithContext(context.Context) XmlReferenceTypePtrOutput
}

type xmlReferenceTypePtr string

func XmlReferenceTypePtr(v string) XmlReferenceTypePtrInput {
	return (*xmlReferenceTypePtr)(&v)
}

func (*xmlReferenceTypePtr) ElementType() reflect.Type {
	return xmlReferenceTypePtrType
}

func (in *xmlReferenceTypePtr) ToXmlReferenceTypePtrOutput() XmlReferenceTypePtrOutput {
	return pulumi.ToOutput(in).(XmlReferenceTypePtrOutput)
}

func (in *xmlReferenceTypePtr) ToXmlReferenceTypePtrOutputWithContext(ctx context.Context) XmlReferenceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(XmlReferenceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AntivirusSolutionsOutput{})
	pulumi.RegisterOutputType(AntivirusSolutionsPtrOutput{})
	pulumi.RegisterOutputType(CasingOutput{})
	pulumi.RegisterOutputType(CasingPtrOutput{})
	pulumi.RegisterOutputType(DataClassTypeOutput{})
	pulumi.RegisterOutputType(DataClassTypePtrOutput{})
	pulumi.RegisterOutputType(DataTypeOutput{})
	pulumi.RegisterOutputType(DataTypePtrOutput{})
	pulumi.RegisterOutputType(DirectionOutput{})
	pulumi.RegisterOutputType(DirectionPtrOutput{})
	pulumi.RegisterOutputType(FilterTypeOutput{})
	pulumi.RegisterOutputType(FilterTypePtrOutput{})
	pulumi.RegisterOutputType(FlowBillingTierOutput{})
	pulumi.RegisterOutputType(FlowBillingTierPtrOutput{})
	pulumi.RegisterOutputType(FlowProfileStatusOutput{})
	pulumi.RegisterOutputType(FlowProfileStatusPtrOutput{})
	pulumi.RegisterOutputType(FlowStatusOutput{})
	pulumi.RegisterOutputType(FlowStatusPtrOutput{})
	pulumi.RegisterOutputType(FlowTypeOutput{})
	pulumi.RegisterOutputType(FlowTypePtrOutput{})
	pulumi.RegisterOutputType(ListApprovedSchemasDirectionOutput{})
	pulumi.RegisterOutputType(ListApprovedSchemasDirectionPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(MatchTypeOutput{})
	pulumi.RegisterOutputType(MatchTypePtrOutput{})
	pulumi.RegisterOutputType(SchemaDirectionOutput{})
	pulumi.RegisterOutputType(SchemaDirectionPtrOutput{})
	pulumi.RegisterOutputType(SchemaStatusOutput{})
	pulumi.RegisterOutputType(SchemaStatusPtrOutput{})
	pulumi.RegisterOutputType(SchemaTypeOutput{})
	pulumi.RegisterOutputType(SchemaTypePtrOutput{})
	pulumi.RegisterOutputType(StreamProtocolOutput{})
	pulumi.RegisterOutputType(StreamProtocolPtrOutput{})
	pulumi.RegisterOutputType(XmlReferenceTypeOutput{})
	pulumi.RegisterOutputType(XmlReferenceTypePtrOutput{})
}
