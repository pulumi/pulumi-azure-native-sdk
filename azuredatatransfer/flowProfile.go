// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredatatransfer

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents a FlowProfile Azure resource, which defines a data replication scenario with a specific data classification and a set of configurable policy rules.
//
// Uses Azure REST API version 2025-05-30-preview.
type FlowProfile struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The set of configuration properties that define the behavior and rules of the FlowProfile.
	Properties FlowProfilePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFlowProfile registers a new resource with the given unique name, arguments, and options.
func NewFlowProfile(ctx *pulumi.Context,
	name string, args *FlowProfileArgs, opts ...pulumi.ResourceOption) (*FlowProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PipelineName == nil {
		return nil, errors.New("invalid value for required argument 'PipelineName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Properties != nil {
		args.Properties = args.Properties.ToFlowProfilePropertiesPtrOutput().ApplyT(func(v *FlowProfileProperties) *FlowProfileProperties { return v.Defaults() }).(FlowProfilePropertiesPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azuredatatransfer/v20250530preview:FlowProfile"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource FlowProfile
	err := ctx.RegisterResource("azure-native:azuredatatransfer:FlowProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowProfile gets an existing FlowProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowProfileState, opts ...pulumi.ResourceOption) (*FlowProfile, error) {
	var resource FlowProfile
	err := ctx.ReadResource("azure-native:azuredatatransfer:FlowProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowProfile resources.
type flowProfileState struct {
}

type FlowProfileState struct {
}

func (FlowProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowProfileState)(nil)).Elem()
}

type flowProfileArgs struct {
	// The name of the FlowProfile resource to operate on. Must be 3 to 64 characters long and contain only alphanumeric characters or hyphens.
	FlowProfileName *string `pulumi:"flowProfileName"`
	// The managed service identities assigned to this resource.
	Identity *ManagedServiceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the pipeline on which to operate.
	PipelineName string `pulumi:"pipelineName"`
	// The set of configuration properties that define the behavior and rules of the FlowProfile.
	Properties *FlowProfileProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FlowProfile resource.
type FlowProfileArgs struct {
	// The name of the FlowProfile resource to operate on. Must be 3 to 64 characters long and contain only alphanumeric characters or hyphens.
	FlowProfileName pulumi.StringPtrInput
	// The managed service identities assigned to this resource.
	Identity ManagedServiceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the pipeline on which to operate.
	PipelineName pulumi.StringInput
	// The set of configuration properties that define the behavior and rules of the FlowProfile.
	Properties FlowProfilePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (FlowProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowProfileArgs)(nil)).Elem()
}

type FlowProfileInput interface {
	pulumi.Input

	ToFlowProfileOutput() FlowProfileOutput
	ToFlowProfileOutputWithContext(ctx context.Context) FlowProfileOutput
}

func (*FlowProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowProfile)(nil)).Elem()
}

func (i *FlowProfile) ToFlowProfileOutput() FlowProfileOutput {
	return i.ToFlowProfileOutputWithContext(context.Background())
}

func (i *FlowProfile) ToFlowProfileOutputWithContext(ctx context.Context) FlowProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowProfileOutput)
}

type FlowProfileOutput struct{ *pulumi.OutputState }

func (FlowProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowProfile)(nil)).Elem()
}

func (o FlowProfileOutput) ToFlowProfileOutput() FlowProfileOutput {
	return o
}

func (o FlowProfileOutput) ToFlowProfileOutputWithContext(ctx context.Context) FlowProfileOutput {
	return o
}

// The Azure API version of the resource.
func (o FlowProfileOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowProfile) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The managed service identities assigned to this resource.
func (o FlowProfileOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *FlowProfile) ManagedServiceIdentityResponsePtrOutput { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o FlowProfileOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowProfile) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o FlowProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The set of configuration properties that define the behavior and rules of the FlowProfile.
func (o FlowProfileOutput) Properties() FlowProfilePropertiesResponseOutput {
	return o.ApplyT(func(v *FlowProfile) FlowProfilePropertiesResponseOutput { return v.Properties }).(FlowProfilePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o FlowProfileOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *FlowProfile) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o FlowProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlowProfile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o FlowProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowProfileOutput{})
}
