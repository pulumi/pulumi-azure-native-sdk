// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azuredatatransfer

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Properties of connection
type ConnectionProperties struct {
	// Direction of data movement
	Direction *string `pulumi:"direction"`
	// The flow types being requested for this connection
	FlowTypes []string `pulumi:"flowTypes"`
	// Justification for the connection request
	Justification *string `pulumi:"justification"`
	// PIN to link requests together
	Pin *string `pulumi:"pin"`
	// Pipeline to use to transfer data
	Pipeline string `pulumi:"pipeline"`
	// The policies for this connection
	Policies []string `pulumi:"policies"`
	// The primary contact for this connection request
	PrimaryContact *string `pulumi:"primaryContact"`
	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionId *string `pulumi:"remoteSubscriptionId"`
	// Requirement ID of the connection
	RequirementId *string `pulumi:"requirementId"`
	// The schemas for this connection
	Schemas []Schema `pulumi:"schemas"`
	// The secondary contacts for this connection request
	SecondaryContacts []string `pulumi:"secondaryContacts"`
}

// ConnectionPropertiesInput is an input type that accepts ConnectionPropertiesArgs and ConnectionPropertiesOutput values.
// You can construct a concrete instance of `ConnectionPropertiesInput` via:
//
//	ConnectionPropertiesArgs{...}
type ConnectionPropertiesInput interface {
	pulumi.Input

	ToConnectionPropertiesOutput() ConnectionPropertiesOutput
	ToConnectionPropertiesOutputWithContext(context.Context) ConnectionPropertiesOutput
}

// Properties of connection
type ConnectionPropertiesArgs struct {
	// Direction of data movement
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The flow types being requested for this connection
	FlowTypes pulumi.StringArrayInput `pulumi:"flowTypes"`
	// Justification for the connection request
	Justification pulumi.StringPtrInput `pulumi:"justification"`
	// PIN to link requests together
	Pin pulumi.StringPtrInput `pulumi:"pin"`
	// Pipeline to use to transfer data
	Pipeline pulumi.StringInput `pulumi:"pipeline"`
	// The policies for this connection
	Policies pulumi.StringArrayInput `pulumi:"policies"`
	// The primary contact for this connection request
	PrimaryContact pulumi.StringPtrInput `pulumi:"primaryContact"`
	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionId pulumi.StringPtrInput `pulumi:"remoteSubscriptionId"`
	// Requirement ID of the connection
	RequirementId pulumi.StringPtrInput `pulumi:"requirementId"`
	// The schemas for this connection
	Schemas SchemaArrayInput `pulumi:"schemas"`
	// The secondary contacts for this connection request
	SecondaryContacts pulumi.StringArrayInput `pulumi:"secondaryContacts"`
}

func (ConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperties)(nil)).Elem()
}

func (i ConnectionPropertiesArgs) ToConnectionPropertiesOutput() ConnectionPropertiesOutput {
	return i.ToConnectionPropertiesOutputWithContext(context.Background())
}

func (i ConnectionPropertiesArgs) ToConnectionPropertiesOutputWithContext(ctx context.Context) ConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertiesOutput)
}

func (i ConnectionPropertiesArgs) ToConnectionPropertiesPtrOutput() ConnectionPropertiesPtrOutput {
	return i.ToConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i ConnectionPropertiesArgs) ToConnectionPropertiesPtrOutputWithContext(ctx context.Context) ConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertiesOutput).ToConnectionPropertiesPtrOutputWithContext(ctx)
}

// ConnectionPropertiesPtrInput is an input type that accepts ConnectionPropertiesArgs, ConnectionPropertiesPtr and ConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `ConnectionPropertiesPtrInput` via:
//
//	        ConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToConnectionPropertiesPtrOutput() ConnectionPropertiesPtrOutput
	ToConnectionPropertiesPtrOutputWithContext(context.Context) ConnectionPropertiesPtrOutput
}

type connectionPropertiesPtrType ConnectionPropertiesArgs

func ConnectionPropertiesPtr(v *ConnectionPropertiesArgs) ConnectionPropertiesPtrInput {
	return (*connectionPropertiesPtrType)(v)
}

func (*connectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProperties)(nil)).Elem()
}

func (i *connectionPropertiesPtrType) ToConnectionPropertiesPtrOutput() ConnectionPropertiesPtrOutput {
	return i.ToConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *connectionPropertiesPtrType) ToConnectionPropertiesPtrOutputWithContext(ctx context.Context) ConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertiesPtrOutput)
}

// Properties of connection
type ConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (ConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperties)(nil)).Elem()
}

func (o ConnectionPropertiesOutput) ToConnectionPropertiesOutput() ConnectionPropertiesOutput {
	return o
}

func (o ConnectionPropertiesOutput) ToConnectionPropertiesOutputWithContext(ctx context.Context) ConnectionPropertiesOutput {
	return o
}

func (o ConnectionPropertiesOutput) ToConnectionPropertiesPtrOutput() ConnectionPropertiesPtrOutput {
	return o.ToConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o ConnectionPropertiesOutput) ToConnectionPropertiesPtrOutputWithContext(ctx context.Context) ConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionProperties) *ConnectionProperties {
		return &v
	}).(ConnectionPropertiesPtrOutput)
}

// Direction of data movement
func (o ConnectionPropertiesOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The flow types being requested for this connection
func (o ConnectionPropertiesOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionProperties) []string { return v.FlowTypes }).(pulumi.StringArrayOutput)
}

// Justification for the connection request
func (o ConnectionPropertiesOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.Justification }).(pulumi.StringPtrOutput)
}

// PIN to link requests together
func (o ConnectionPropertiesOutput) Pin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.Pin }).(pulumi.StringPtrOutput)
}

// Pipeline to use to transfer data
func (o ConnectionPropertiesOutput) Pipeline() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionProperties) string { return v.Pipeline }).(pulumi.StringOutput)
}

// The policies for this connection
func (o ConnectionPropertiesOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionProperties) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// The primary contact for this connection request
func (o ConnectionPropertiesOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

// Subscription ID to link cloud subscriptions together
func (o ConnectionPropertiesOutput) RemoteSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.RemoteSubscriptionId }).(pulumi.StringPtrOutput)
}

// Requirement ID of the connection
func (o ConnectionPropertiesOutput) RequirementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperties) *string { return v.RequirementId }).(pulumi.StringPtrOutput)
}

// The schemas for this connection
func (o ConnectionPropertiesOutput) Schemas() SchemaArrayOutput {
	return o.ApplyT(func(v ConnectionProperties) []Schema { return v.Schemas }).(SchemaArrayOutput)
}

// The secondary contacts for this connection request
func (o ConnectionPropertiesOutput) SecondaryContacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionProperties) []string { return v.SecondaryContacts }).(pulumi.StringArrayOutput)
}

type ConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionProperties)(nil)).Elem()
}

func (o ConnectionPropertiesPtrOutput) ToConnectionPropertiesPtrOutput() ConnectionPropertiesPtrOutput {
	return o
}

func (o ConnectionPropertiesPtrOutput) ToConnectionPropertiesPtrOutputWithContext(ctx context.Context) ConnectionPropertiesPtrOutput {
	return o
}

func (o ConnectionPropertiesPtrOutput) Elem() ConnectionPropertiesOutput {
	return o.ApplyT(func(v *ConnectionProperties) ConnectionProperties {
		if v != nil {
			return *v
		}
		var ret ConnectionProperties
		return ret
	}).(ConnectionPropertiesOutput)
}

// Direction of data movement
func (o ConnectionPropertiesPtrOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Direction
	}).(pulumi.StringPtrOutput)
}

// The flow types being requested for this connection
func (o ConnectionPropertiesPtrOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.FlowTypes
	}).(pulumi.StringArrayOutput)
}

// Justification for the connection request
func (o ConnectionPropertiesPtrOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Justification
	}).(pulumi.StringPtrOutput)
}

// PIN to link requests together
func (o ConnectionPropertiesPtrOutput) Pin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Pin
	}).(pulumi.StringPtrOutput)
}

// Pipeline to use to transfer data
func (o ConnectionPropertiesPtrOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Pipeline
	}).(pulumi.StringPtrOutput)
}

// The policies for this connection
func (o ConnectionPropertiesPtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

// The primary contact for this connection request
func (o ConnectionPropertiesPtrOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryContact
	}).(pulumi.StringPtrOutput)
}

// Subscription ID to link cloud subscriptions together
func (o ConnectionPropertiesPtrOutput) RemoteSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RemoteSubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Requirement ID of the connection
func (o ConnectionPropertiesPtrOutput) RequirementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RequirementId
	}).(pulumi.StringPtrOutput)
}

// The schemas for this connection
func (o ConnectionPropertiesPtrOutput) Schemas() SchemaArrayOutput {
	return o.ApplyT(func(v *ConnectionProperties) []Schema {
		if v == nil {
			return nil
		}
		return v.Schemas
	}).(SchemaArrayOutput)
}

// The secondary contacts for this connection request
func (o ConnectionPropertiesPtrOutput) SecondaryContacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.SecondaryContacts
	}).(pulumi.StringArrayOutput)
}

// Properties of connection
type ConnectionPropertiesResponse struct {
	// Approver of this connection request
	Approver string `pulumi:"approver"`
	// The timestamp that this connection request was submitted at
	DateSubmitted string `pulumi:"dateSubmitted"`
	// Direction of data movement
	Direction *string `pulumi:"direction"`
	// The flow types being requested for this connection
	FlowTypes []string `pulumi:"flowTypes"`
	// Justification for the connection request
	Justification *string `pulumi:"justification"`
	// Link status of the current connection
	LinkStatus string `pulumi:"linkStatus"`
	// Resource ID of the linked connection
	LinkedConnectionId string `pulumi:"linkedConnectionId"`
	// PIN to link requests together
	Pin *string `pulumi:"pin"`
	// Pipeline to use to transfer data
	Pipeline string `pulumi:"pipeline"`
	// The policies for this connection
	Policies []string `pulumi:"policies"`
	// The primary contact for this connection request
	PrimaryContact *string `pulumi:"primaryContact"`
	// Provisioning state of the connection
	ProvisioningState string `pulumi:"provisioningState"`
	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionId *string `pulumi:"remoteSubscriptionId"`
	// Requirement ID of the connection
	RequirementId *string `pulumi:"requirementId"`
	// The schemas for this connection
	Schemas []SchemaResponse `pulumi:"schemas"`
	// The secondary contacts for this connection request
	SecondaryContacts []string `pulumi:"secondaryContacts"`
	// Status of the connection
	Status string `pulumi:"status"`
	// Reason for status
	StatusReason string `pulumi:"statusReason"`
}

// Properties of connection
type ConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPropertiesResponse)(nil)).Elem()
}

func (o ConnectionPropertiesResponseOutput) ToConnectionPropertiesResponseOutput() ConnectionPropertiesResponseOutput {
	return o
}

func (o ConnectionPropertiesResponseOutput) ToConnectionPropertiesResponseOutputWithContext(ctx context.Context) ConnectionPropertiesResponseOutput {
	return o
}

// Approver of this connection request
func (o ConnectionPropertiesResponseOutput) Approver() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.Approver }).(pulumi.StringOutput)
}

// The timestamp that this connection request was submitted at
func (o ConnectionPropertiesResponseOutput) DateSubmitted() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.DateSubmitted }).(pulumi.StringOutput)
}

// Direction of data movement
func (o ConnectionPropertiesResponseOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The flow types being requested for this connection
func (o ConnectionPropertiesResponseOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) []string { return v.FlowTypes }).(pulumi.StringArrayOutput)
}

// Justification for the connection request
func (o ConnectionPropertiesResponseOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.Justification }).(pulumi.StringPtrOutput)
}

// Link status of the current connection
func (o ConnectionPropertiesResponseOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Resource ID of the linked connection
func (o ConnectionPropertiesResponseOutput) LinkedConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.LinkedConnectionId }).(pulumi.StringOutput)
}

// PIN to link requests together
func (o ConnectionPropertiesResponseOutput) Pin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.Pin }).(pulumi.StringPtrOutput)
}

// Pipeline to use to transfer data
func (o ConnectionPropertiesResponseOutput) Pipeline() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.Pipeline }).(pulumi.StringOutput)
}

// The policies for this connection
func (o ConnectionPropertiesResponseOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// The primary contact for this connection request
func (o ConnectionPropertiesResponseOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

// Provisioning state of the connection
func (o ConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Subscription ID to link cloud subscriptions together
func (o ConnectionPropertiesResponseOutput) RemoteSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.RemoteSubscriptionId }).(pulumi.StringPtrOutput)
}

// Requirement ID of the connection
func (o ConnectionPropertiesResponseOutput) RequirementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) *string { return v.RequirementId }).(pulumi.StringPtrOutput)
}

// The schemas for this connection
func (o ConnectionPropertiesResponseOutput) Schemas() SchemaResponseArrayOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) []SchemaResponse { return v.Schemas }).(SchemaResponseArrayOutput)
}

// The secondary contacts for this connection request
func (o ConnectionPropertiesResponseOutput) SecondaryContacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) []string { return v.SecondaryContacts }).(pulumi.StringArrayOutput)
}

// Status of the connection
func (o ConnectionPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Reason for status
func (o ConnectionPropertiesResponseOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertiesResponse) string { return v.StatusReason }).(pulumi.StringOutput)
}

// Properties of flow
type FlowProperties struct {
	// The connection associated with this flow
	Connection *SelectedResource `pulumi:"connection"`
	// Transfer Storage Blobs or Tables
	DataType *string `pulumi:"dataType"`
	// The flow type for this flow
	FlowType *string `pulumi:"flowType"`
	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultUri *string `pulumi:"keyVaultUri"`
	// The policies for this flow
	Policies []string `pulumi:"policies"`
	// The selected schema for this flow
	Schema *Schema `pulumi:"schema"`
	// Service Bus Queue ID
	ServiceBusQueueId *string `pulumi:"serviceBusQueueId"`
	// Status of the current flow
	Status *string `pulumi:"status"`
	// Storage Account ID
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Storage Account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Storage Container Name
	StorageContainerName *string `pulumi:"storageContainerName"`
}

// FlowPropertiesInput is an input type that accepts FlowPropertiesArgs and FlowPropertiesOutput values.
// You can construct a concrete instance of `FlowPropertiesInput` via:
//
//	FlowPropertiesArgs{...}
type FlowPropertiesInput interface {
	pulumi.Input

	ToFlowPropertiesOutput() FlowPropertiesOutput
	ToFlowPropertiesOutputWithContext(context.Context) FlowPropertiesOutput
}

// Properties of flow
type FlowPropertiesArgs struct {
	// The connection associated with this flow
	Connection SelectedResourcePtrInput `pulumi:"connection"`
	// Transfer Storage Blobs or Tables
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// The flow type for this flow
	FlowType pulumi.StringPtrInput `pulumi:"flowType"`
	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultUri pulumi.StringPtrInput `pulumi:"keyVaultUri"`
	// The policies for this flow
	Policies pulumi.StringArrayInput `pulumi:"policies"`
	// The selected schema for this flow
	Schema SchemaPtrInput `pulumi:"schema"`
	// Service Bus Queue ID
	ServiceBusQueueId pulumi.StringPtrInput `pulumi:"serviceBusQueueId"`
	// Status of the current flow
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Storage Account ID
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// Storage Account
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
	// Storage Container Name
	StorageContainerName pulumi.StringPtrInput `pulumi:"storageContainerName"`
}

func (FlowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowProperties)(nil)).Elem()
}

func (i FlowPropertiesArgs) ToFlowPropertiesOutput() FlowPropertiesOutput {
	return i.ToFlowPropertiesOutputWithContext(context.Background())
}

func (i FlowPropertiesArgs) ToFlowPropertiesOutputWithContext(ctx context.Context) FlowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowPropertiesOutput)
}

func (i FlowPropertiesArgs) ToFlowPropertiesPtrOutput() FlowPropertiesPtrOutput {
	return i.ToFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i FlowPropertiesArgs) ToFlowPropertiesPtrOutputWithContext(ctx context.Context) FlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowPropertiesOutput).ToFlowPropertiesPtrOutputWithContext(ctx)
}

// FlowPropertiesPtrInput is an input type that accepts FlowPropertiesArgs, FlowPropertiesPtr and FlowPropertiesPtrOutput values.
// You can construct a concrete instance of `FlowPropertiesPtrInput` via:
//
//	        FlowPropertiesArgs{...}
//
//	or:
//
//	        nil
type FlowPropertiesPtrInput interface {
	pulumi.Input

	ToFlowPropertiesPtrOutput() FlowPropertiesPtrOutput
	ToFlowPropertiesPtrOutputWithContext(context.Context) FlowPropertiesPtrOutput
}

type flowPropertiesPtrType FlowPropertiesArgs

func FlowPropertiesPtr(v *FlowPropertiesArgs) FlowPropertiesPtrInput {
	return (*flowPropertiesPtrType)(v)
}

func (*flowPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowProperties)(nil)).Elem()
}

func (i *flowPropertiesPtrType) ToFlowPropertiesPtrOutput() FlowPropertiesPtrOutput {
	return i.ToFlowPropertiesPtrOutputWithContext(context.Background())
}

func (i *flowPropertiesPtrType) ToFlowPropertiesPtrOutputWithContext(ctx context.Context) FlowPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowPropertiesPtrOutput)
}

// Properties of flow
type FlowPropertiesOutput struct{ *pulumi.OutputState }

func (FlowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowProperties)(nil)).Elem()
}

func (o FlowPropertiesOutput) ToFlowPropertiesOutput() FlowPropertiesOutput {
	return o
}

func (o FlowPropertiesOutput) ToFlowPropertiesOutputWithContext(ctx context.Context) FlowPropertiesOutput {
	return o
}

func (o FlowPropertiesOutput) ToFlowPropertiesPtrOutput() FlowPropertiesPtrOutput {
	return o.ToFlowPropertiesPtrOutputWithContext(context.Background())
}

func (o FlowPropertiesOutput) ToFlowPropertiesPtrOutputWithContext(ctx context.Context) FlowPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlowProperties) *FlowProperties {
		return &v
	}).(FlowPropertiesPtrOutput)
}

// The connection associated with this flow
func (o FlowPropertiesOutput) Connection() SelectedResourcePtrOutput {
	return o.ApplyT(func(v FlowProperties) *SelectedResource { return v.Connection }).(SelectedResourcePtrOutput)
}

// Transfer Storage Blobs or Tables
func (o FlowPropertiesOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The flow type for this flow
func (o FlowPropertiesOutput) FlowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.FlowType }).(pulumi.StringPtrOutput)
}

// AME, PME, or TORUS only! AKV Chain Containing SAS Token
func (o FlowPropertiesOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

// The policies for this flow
func (o FlowPropertiesOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowProperties) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// The selected schema for this flow
func (o FlowPropertiesOutput) Schema() SchemaPtrOutput {
	return o.ApplyT(func(v FlowProperties) *Schema { return v.Schema }).(SchemaPtrOutput)
}

// Service Bus Queue ID
func (o FlowPropertiesOutput) ServiceBusQueueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.ServiceBusQueueId }).(pulumi.StringPtrOutput)
}

// Status of the current flow
func (o FlowPropertiesOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Storage Account ID
func (o FlowPropertiesOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// Storage Account
func (o FlowPropertiesOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Storage Container Name
func (o FlowPropertiesOutput) StorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowProperties) *string { return v.StorageContainerName }).(pulumi.StringPtrOutput)
}

type FlowPropertiesPtrOutput struct{ *pulumi.OutputState }

func (FlowPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowProperties)(nil)).Elem()
}

func (o FlowPropertiesPtrOutput) ToFlowPropertiesPtrOutput() FlowPropertiesPtrOutput {
	return o
}

func (o FlowPropertiesPtrOutput) ToFlowPropertiesPtrOutputWithContext(ctx context.Context) FlowPropertiesPtrOutput {
	return o
}

func (o FlowPropertiesPtrOutput) Elem() FlowPropertiesOutput {
	return o.ApplyT(func(v *FlowProperties) FlowProperties {
		if v != nil {
			return *v
		}
		var ret FlowProperties
		return ret
	}).(FlowPropertiesOutput)
}

// The connection associated with this flow
func (o FlowPropertiesPtrOutput) Connection() SelectedResourcePtrOutput {
	return o.ApplyT(func(v *FlowProperties) *SelectedResource {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(SelectedResourcePtrOutput)
}

// Transfer Storage Blobs or Tables
func (o FlowPropertiesPtrOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// The flow type for this flow
func (o FlowPropertiesPtrOutput) FlowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.FlowType
	}).(pulumi.StringPtrOutput)
}

// AME, PME, or TORUS only! AKV Chain Containing SAS Token
func (o FlowPropertiesPtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// The policies for this flow
func (o FlowPropertiesPtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlowProperties) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

// The selected schema for this flow
func (o FlowPropertiesPtrOutput) Schema() SchemaPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *Schema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(SchemaPtrOutput)
}

// Service Bus Queue ID
func (o FlowPropertiesPtrOutput) ServiceBusQueueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusQueueId
	}).(pulumi.StringPtrOutput)
}

// Status of the current flow
func (o FlowPropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Storage Account ID
func (o FlowPropertiesPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Storage Account
func (o FlowPropertiesPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Storage Container Name
func (o FlowPropertiesPtrOutput) StorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowProperties) *string {
		if v == nil {
			return nil
		}
		return v.StorageContainerName
	}).(pulumi.StringPtrOutput)
}

// Properties of flow
type FlowPropertiesResponse struct {
	// The connection associated with this flow
	Connection *SelectedResourceResponse `pulumi:"connection"`
	// Transfer Storage Blobs or Tables
	DataType *string `pulumi:"dataType"`
	// Dataflow GUID associated with this flow
	FlowId string `pulumi:"flowId"`
	// The flow type for this flow
	FlowType *string `pulumi:"flowType"`
	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultUri *string `pulumi:"keyVaultUri"`
	// Link status of the current flow
	LinkStatus string `pulumi:"linkStatus"`
	// Resource ID of the linked flow
	LinkedFlowId string `pulumi:"linkedFlowId"`
	// The policies for this flow
	Policies []string `pulumi:"policies"`
	// Provisioning state of the flow
	ProvisioningState string `pulumi:"provisioningState"`
	// The selected schema for this flow
	Schema *SchemaResponse `pulumi:"schema"`
	// Service Bus Queue ID
	ServiceBusQueueId *string `pulumi:"serviceBusQueueId"`
	// Status of the current flow
	Status *string `pulumi:"status"`
	// Storage Account ID
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Storage Account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Storage Container Name
	StorageContainerName *string `pulumi:"storageContainerName"`
}

// Properties of flow
type FlowPropertiesResponseOutput struct{ *pulumi.OutputState }

func (FlowPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowPropertiesResponse)(nil)).Elem()
}

func (o FlowPropertiesResponseOutput) ToFlowPropertiesResponseOutput() FlowPropertiesResponseOutput {
	return o
}

func (o FlowPropertiesResponseOutput) ToFlowPropertiesResponseOutputWithContext(ctx context.Context) FlowPropertiesResponseOutput {
	return o
}

// The connection associated with this flow
func (o FlowPropertiesResponseOutput) Connection() SelectedResourceResponsePtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *SelectedResourceResponse { return v.Connection }).(SelectedResourceResponsePtrOutput)
}

// Transfer Storage Blobs or Tables
func (o FlowPropertiesResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Dataflow GUID associated with this flow
func (o FlowPropertiesResponseOutput) FlowId() pulumi.StringOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) string { return v.FlowId }).(pulumi.StringOutput)
}

// The flow type for this flow
func (o FlowPropertiesResponseOutput) FlowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.FlowType }).(pulumi.StringPtrOutput)
}

// AME, PME, or TORUS only! AKV Chain Containing SAS Token
func (o FlowPropertiesResponseOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

// Link status of the current flow
func (o FlowPropertiesResponseOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Resource ID of the linked flow
func (o FlowPropertiesResponseOutput) LinkedFlowId() pulumi.StringOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) string { return v.LinkedFlowId }).(pulumi.StringOutput)
}

// The policies for this flow
func (o FlowPropertiesResponseOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// Provisioning state of the flow
func (o FlowPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The selected schema for this flow
func (o FlowPropertiesResponseOutput) Schema() SchemaResponsePtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *SchemaResponse { return v.Schema }).(SchemaResponsePtrOutput)
}

// Service Bus Queue ID
func (o FlowPropertiesResponseOutput) ServiceBusQueueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.ServiceBusQueueId }).(pulumi.StringPtrOutput)
}

// Status of the current flow
func (o FlowPropertiesResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Storage Account ID
func (o FlowPropertiesResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// Storage Account
func (o FlowPropertiesResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Storage Container Name
func (o FlowPropertiesResponseOutput) StorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowPropertiesResponse) *string { return v.StorageContainerName }).(pulumi.StringPtrOutput)
}

// Internal metadata of the connection inside pipeline.
type InternalMetadataPropertiesResponse struct {
	// Operation status associated with the last patch request
	OperationStatus *OperationStatusPropertiesResponse `pulumi:"operationStatus"`
	// User that last set the approved status for this connection
	StatusSetBy string `pulumi:"statusSetBy"`
}

// Internal metadata of the connection inside pipeline.
type InternalMetadataPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InternalMetadataPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InternalMetadataPropertiesResponse)(nil)).Elem()
}

func (o InternalMetadataPropertiesResponseOutput) ToInternalMetadataPropertiesResponseOutput() InternalMetadataPropertiesResponseOutput {
	return o
}

func (o InternalMetadataPropertiesResponseOutput) ToInternalMetadataPropertiesResponseOutputWithContext(ctx context.Context) InternalMetadataPropertiesResponseOutput {
	return o
}

// Operation status associated with the last patch request
func (o InternalMetadataPropertiesResponseOutput) OperationStatus() OperationStatusPropertiesResponsePtrOutput {
	return o.ApplyT(func(v InternalMetadataPropertiesResponse) *OperationStatusPropertiesResponse {
		return v.OperationStatus
	}).(OperationStatusPropertiesResponsePtrOutput)
}

// User that last set the approved status for this connection
func (o InternalMetadataPropertiesResponseOutput) StatusSetBy() pulumi.StringOutput {
	return o.ApplyT(func(v InternalMetadataPropertiesResponse) string { return v.StatusSetBy }).(pulumi.StringOutput)
}

type InternalMetadataPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InternalMetadataPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternalMetadataPropertiesResponse)(nil)).Elem()
}

func (o InternalMetadataPropertiesResponsePtrOutput) ToInternalMetadataPropertiesResponsePtrOutput() InternalMetadataPropertiesResponsePtrOutput {
	return o
}

func (o InternalMetadataPropertiesResponsePtrOutput) ToInternalMetadataPropertiesResponsePtrOutputWithContext(ctx context.Context) InternalMetadataPropertiesResponsePtrOutput {
	return o
}

func (o InternalMetadataPropertiesResponsePtrOutput) Elem() InternalMetadataPropertiesResponseOutput {
	return o.ApplyT(func(v *InternalMetadataPropertiesResponse) InternalMetadataPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret InternalMetadataPropertiesResponse
		return ret
	}).(InternalMetadataPropertiesResponseOutput)
}

// Operation status associated with the last patch request
func (o InternalMetadataPropertiesResponsePtrOutput) OperationStatus() OperationStatusPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *InternalMetadataPropertiesResponse) *OperationStatusPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.OperationStatus
	}).(OperationStatusPropertiesResponsePtrOutput)
}

// User that last set the approved status for this connection
func (o InternalMetadataPropertiesResponsePtrOutput) StatusSetBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InternalMetadataPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StatusSetBy
	}).(pulumi.StringPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Operation status associated with the last patch request
type OperationStatusPropertiesResponse struct {
	// Operation status ID of the last patch request for this connection.
	Id string `pulumi:"id"`
	// Message for the operation for the last patch request for this connection.
	Message string `pulumi:"message"`
	// Operation status for the last patch request for this connection.
	Status string `pulumi:"status"`
}

// Operation status associated with the last patch request
type OperationStatusPropertiesResponseOutput struct{ *pulumi.OutputState }

func (OperationStatusPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationStatusPropertiesResponse)(nil)).Elem()
}

func (o OperationStatusPropertiesResponseOutput) ToOperationStatusPropertiesResponseOutput() OperationStatusPropertiesResponseOutput {
	return o
}

func (o OperationStatusPropertiesResponseOutput) ToOperationStatusPropertiesResponseOutputWithContext(ctx context.Context) OperationStatusPropertiesResponseOutput {
	return o
}

// Operation status ID of the last patch request for this connection.
func (o OperationStatusPropertiesResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OperationStatusPropertiesResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Message for the operation for the last patch request for this connection.
func (o OperationStatusPropertiesResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v OperationStatusPropertiesResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Operation status for the last patch request for this connection.
func (o OperationStatusPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OperationStatusPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type OperationStatusPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (OperationStatusPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationStatusPropertiesResponse)(nil)).Elem()
}

func (o OperationStatusPropertiesResponsePtrOutput) ToOperationStatusPropertiesResponsePtrOutput() OperationStatusPropertiesResponsePtrOutput {
	return o
}

func (o OperationStatusPropertiesResponsePtrOutput) ToOperationStatusPropertiesResponsePtrOutputWithContext(ctx context.Context) OperationStatusPropertiesResponsePtrOutput {
	return o
}

func (o OperationStatusPropertiesResponsePtrOutput) Elem() OperationStatusPropertiesResponseOutput {
	return o.ApplyT(func(v *OperationStatusPropertiesResponse) OperationStatusPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret OperationStatusPropertiesResponse
		return ret
	}).(OperationStatusPropertiesResponseOutput)
}

// Operation status ID of the last patch request for this connection.
func (o OperationStatusPropertiesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationStatusPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Message for the operation for the last patch request for this connection.
func (o OperationStatusPropertiesResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationStatusPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// Operation status for the last patch request for this connection.
func (o OperationStatusPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationStatusPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Pending connection object
type PendingConnectionResponse struct {
	// Approver of this connection request
	Approver string `pulumi:"approver"`
	// The timestamp that this connection request was submitted at
	DateSubmitted string `pulumi:"dateSubmitted"`
	// Direction of data movement
	Direction *string `pulumi:"direction"`
	// The flow types being requested for this connection
	FlowTypes []string `pulumi:"flowTypes"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Justification for the connection request
	Justification *string `pulumi:"justification"`
	// Link status of the current connection
	LinkStatus string `pulumi:"linkStatus"`
	// Resource ID of the linked connection
	LinkedConnectionId string `pulumi:"linkedConnectionId"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// PIN to link requests together
	Pin *string `pulumi:"pin"`
	// Pipeline to use to transfer data
	Pipeline string `pulumi:"pipeline"`
	// The policies for this connection
	Policies []string `pulumi:"policies"`
	// The primary contact for this connection request
	PrimaryContact *string `pulumi:"primaryContact"`
	// Provisioning state of the connection
	ProvisioningState string `pulumi:"provisioningState"`
	// Subscription ID to link cloud subscriptions together
	RemoteSubscriptionId *string `pulumi:"remoteSubscriptionId"`
	// Requirement ID of the connection
	RequirementId *string `pulumi:"requirementId"`
	// The schemas for this connection
	Schemas []SchemaResponse `pulumi:"schemas"`
	// The secondary contacts for this connection request
	SecondaryContacts []string `pulumi:"secondaryContacts"`
	// Status of the connection
	Status string `pulumi:"status"`
	// Reason for status
	StatusReason string `pulumi:"statusReason"`
	// Subscription ID of the pending connection.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Pending connection object
type PendingConnectionResponseOutput struct{ *pulumi.OutputState }

func (PendingConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PendingConnectionResponse)(nil)).Elem()
}

func (o PendingConnectionResponseOutput) ToPendingConnectionResponseOutput() PendingConnectionResponseOutput {
	return o
}

func (o PendingConnectionResponseOutput) ToPendingConnectionResponseOutputWithContext(ctx context.Context) PendingConnectionResponseOutput {
	return o
}

// Approver of this connection request
func (o PendingConnectionResponseOutput) Approver() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Approver }).(pulumi.StringOutput)
}

// The timestamp that this connection request was submitted at
func (o PendingConnectionResponseOutput) DateSubmitted() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.DateSubmitted }).(pulumi.StringOutput)
}

// Direction of data movement
func (o PendingConnectionResponseOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The flow types being requested for this connection
func (o PendingConnectionResponseOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PendingConnectionResponse) []string { return v.FlowTypes }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o PendingConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Justification for the connection request
func (o PendingConnectionResponseOutput) Justification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.Justification }).(pulumi.StringPtrOutput)
}

// Link status of the current connection
func (o PendingConnectionResponseOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Resource ID of the linked connection
func (o PendingConnectionResponseOutput) LinkedConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.LinkedConnectionId }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o PendingConnectionResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o PendingConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// PIN to link requests together
func (o PendingConnectionResponseOutput) Pin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.Pin }).(pulumi.StringPtrOutput)
}

// Pipeline to use to transfer data
func (o PendingConnectionResponseOutput) Pipeline() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Pipeline }).(pulumi.StringOutput)
}

// The policies for this connection
func (o PendingConnectionResponseOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PendingConnectionResponse) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// The primary contact for this connection request
func (o PendingConnectionResponseOutput) PrimaryContact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.PrimaryContact }).(pulumi.StringPtrOutput)
}

// Provisioning state of the connection
func (o PendingConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Subscription ID to link cloud subscriptions together
func (o PendingConnectionResponseOutput) RemoteSubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.RemoteSubscriptionId }).(pulumi.StringPtrOutput)
}

// Requirement ID of the connection
func (o PendingConnectionResponseOutput) RequirementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingConnectionResponse) *string { return v.RequirementId }).(pulumi.StringPtrOutput)
}

// The schemas for this connection
func (o PendingConnectionResponseOutput) Schemas() SchemaResponseArrayOutput {
	return o.ApplyT(func(v PendingConnectionResponse) []SchemaResponse { return v.Schemas }).(SchemaResponseArrayOutput)
}

// The secondary contacts for this connection request
func (o PendingConnectionResponseOutput) SecondaryContacts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PendingConnectionResponse) []string { return v.SecondaryContacts }).(pulumi.StringArrayOutput)
}

// Status of the connection
func (o PendingConnectionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Reason for status
func (o PendingConnectionResponseOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.StatusReason }).(pulumi.StringOutput)
}

// Subscription ID of the pending connection.
func (o PendingConnectionResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PendingConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PendingConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PendingConnectionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PendingConnectionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PendingConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PendingConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PendingConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PendingConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PendingConnectionResponse)(nil)).Elem()
}

func (o PendingConnectionResponseArrayOutput) ToPendingConnectionResponseArrayOutput() PendingConnectionResponseArrayOutput {
	return o
}

func (o PendingConnectionResponseArrayOutput) ToPendingConnectionResponseArrayOutputWithContext(ctx context.Context) PendingConnectionResponseArrayOutput {
	return o
}

func (o PendingConnectionResponseArrayOutput) Index(i pulumi.IntInput) PendingConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PendingConnectionResponse {
		return vs[0].([]PendingConnectionResponse)[vs[1].(int)]
	}).(PendingConnectionResponseOutput)
}

// Pending flow object
type PendingFlowResponse struct {
	// The connection associated with this flow
	Connection *SelectedResourceResponse `pulumi:"connection"`
	// Connection ID of the pending flow.
	ConnectionId string `pulumi:"connectionId"`
	// Transfer Storage Blobs or Tables
	DataType *string `pulumi:"dataType"`
	// Dataflow GUID associated with this flow
	FlowId string `pulumi:"flowId"`
	// The flow type for this flow
	FlowType *string `pulumi:"flowType"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// AME, PME, or TORUS only! AKV Chain Containing SAS Token
	KeyVaultUri *string `pulumi:"keyVaultUri"`
	// Link status of the current flow
	LinkStatus string `pulumi:"linkStatus"`
	// Resource ID of the linked flow
	LinkedFlowId string `pulumi:"linkedFlowId"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The policies for this flow
	Policies []string `pulumi:"policies"`
	// Provisioning state of the flow
	ProvisioningState string `pulumi:"provisioningState"`
	// The selected schema for this flow
	Schema *SchemaResponse `pulumi:"schema"`
	// Service Bus Queue ID
	ServiceBusQueueId *string `pulumi:"serviceBusQueueId"`
	// Status of the current flow
	Status *string `pulumi:"status"`
	// Storage Account ID
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Storage Account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Storage Container Name
	StorageContainerName *string `pulumi:"storageContainerName"`
	// Subscription ID of the pending flow.
	SubscriptionId string `pulumi:"subscriptionId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Pending flow object
type PendingFlowResponseOutput struct{ *pulumi.OutputState }

func (PendingFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PendingFlowResponse)(nil)).Elem()
}

func (o PendingFlowResponseOutput) ToPendingFlowResponseOutput() PendingFlowResponseOutput {
	return o
}

func (o PendingFlowResponseOutput) ToPendingFlowResponseOutputWithContext(ctx context.Context) PendingFlowResponseOutput {
	return o
}

// The connection associated with this flow
func (o PendingFlowResponseOutput) Connection() SelectedResourceResponsePtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *SelectedResourceResponse { return v.Connection }).(SelectedResourceResponsePtrOutput)
}

// Connection ID of the pending flow.
func (o PendingFlowResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Transfer Storage Blobs or Tables
func (o PendingFlowResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Dataflow GUID associated with this flow
func (o PendingFlowResponseOutput) FlowId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.FlowId }).(pulumi.StringOutput)
}

// The flow type for this flow
func (o PendingFlowResponseOutput) FlowType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.FlowType }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o PendingFlowResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.Id }).(pulumi.StringOutput)
}

// AME, PME, or TORUS only! AKV Chain Containing SAS Token
func (o PendingFlowResponseOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

// Link status of the current flow
func (o PendingFlowResponseOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// Resource ID of the linked flow
func (o PendingFlowResponseOutput) LinkedFlowId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.LinkedFlowId }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o PendingFlowResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o PendingFlowResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The policies for this flow
func (o PendingFlowResponseOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PendingFlowResponse) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// Provisioning state of the flow
func (o PendingFlowResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The selected schema for this flow
func (o PendingFlowResponseOutput) Schema() SchemaResponsePtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *SchemaResponse { return v.Schema }).(SchemaResponsePtrOutput)
}

// Service Bus Queue ID
func (o PendingFlowResponseOutput) ServiceBusQueueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.ServiceBusQueueId }).(pulumi.StringPtrOutput)
}

// Status of the current flow
func (o PendingFlowResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Storage Account ID
func (o PendingFlowResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// Storage Account
func (o PendingFlowResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Storage Container Name
func (o PendingFlowResponseOutput) StorageContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PendingFlowResponse) *string { return v.StorageContainerName }).(pulumi.StringPtrOutput)
}

// Subscription ID of the pending flow.
func (o PendingFlowResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PendingFlowResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PendingFlowResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PendingFlowResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PendingFlowResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PendingFlowResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PendingFlowResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PendingFlowResponseArrayOutput struct{ *pulumi.OutputState }

func (PendingFlowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PendingFlowResponse)(nil)).Elem()
}

func (o PendingFlowResponseArrayOutput) ToPendingFlowResponseArrayOutput() PendingFlowResponseArrayOutput {
	return o
}

func (o PendingFlowResponseArrayOutput) ToPendingFlowResponseArrayOutputWithContext(ctx context.Context) PendingFlowResponseArrayOutput {
	return o
}

func (o PendingFlowResponseArrayOutput) Index(i pulumi.IntInput) PendingFlowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PendingFlowResponse {
		return vs[0].([]PendingFlowResponse)[vs[1].(int)]
	}).(PendingFlowResponseOutput)
}

// Connection body inside a pipeline
type PipelineConnectionResponse struct {
	// Connection etag inside pipeline
	Etag string `pulumi:"etag"`
	// Connection id inside pipeline
	Id string `pulumi:"id"`
	// Connection location inside pipeline
	Location string `pulumi:"location"`
	// Connection name inside pipeline
	Name string `pulumi:"name"`
	// Connection properties inside pipeline
	Properties *PipelineConnectionResponseProperties `pulumi:"properties"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Connection type inside pipeline
	Type string `pulumi:"type"`
}

// Connection body inside a pipeline
type PipelineConnectionResponseOutput struct{ *pulumi.OutputState }

func (PipelineConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConnectionResponse)(nil)).Elem()
}

func (o PipelineConnectionResponseOutput) ToPipelineConnectionResponseOutput() PipelineConnectionResponseOutput {
	return o
}

func (o PipelineConnectionResponseOutput) ToPipelineConnectionResponseOutputWithContext(ctx context.Context) PipelineConnectionResponseOutput {
	return o
}

// Connection etag inside pipeline
func (o PipelineConnectionResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Connection id inside pipeline
func (o PipelineConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Connection location inside pipeline
func (o PipelineConnectionResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Connection name inside pipeline
func (o PipelineConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Connection properties inside pipeline
func (o PipelineConnectionResponseOutput) Properties() PipelineConnectionResponsePropertiesPtrOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) *PipelineConnectionResponseProperties { return v.Properties }).(PipelineConnectionResponsePropertiesPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o PipelineConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Connection type inside pipeline
func (o PipelineConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineConnectionResponse)(nil)).Elem()
}

func (o PipelineConnectionResponseArrayOutput) ToPipelineConnectionResponseArrayOutput() PipelineConnectionResponseArrayOutput {
	return o
}

func (o PipelineConnectionResponseArrayOutput) ToPipelineConnectionResponseArrayOutputWithContext(ctx context.Context) PipelineConnectionResponseArrayOutput {
	return o
}

func (o PipelineConnectionResponseArrayOutput) Index(i pulumi.IntInput) PipelineConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineConnectionResponse {
		return vs[0].([]PipelineConnectionResponse)[vs[1].(int)]
	}).(PipelineConnectionResponseOutput)
}

// Connection properties inside pipeline
type PipelineConnectionResponseProperties struct {
	// Internal metadata of the connection inside pipeline.
	InternalMetadata *InternalMetadataPropertiesResponse `pulumi:"internalMetadata"`
}

// Connection properties inside pipeline
type PipelineConnectionResponsePropertiesOutput struct{ *pulumi.OutputState }

func (PipelineConnectionResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineConnectionResponseProperties)(nil)).Elem()
}

func (o PipelineConnectionResponsePropertiesOutput) ToPipelineConnectionResponsePropertiesOutput() PipelineConnectionResponsePropertiesOutput {
	return o
}

func (o PipelineConnectionResponsePropertiesOutput) ToPipelineConnectionResponsePropertiesOutputWithContext(ctx context.Context) PipelineConnectionResponsePropertiesOutput {
	return o
}

// Internal metadata of the connection inside pipeline.
func (o PipelineConnectionResponsePropertiesOutput) InternalMetadata() InternalMetadataPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PipelineConnectionResponseProperties) *InternalMetadataPropertiesResponse {
		return v.InternalMetadata
	}).(InternalMetadataPropertiesResponsePtrOutput)
}

type PipelineConnectionResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineConnectionResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineConnectionResponseProperties)(nil)).Elem()
}

func (o PipelineConnectionResponsePropertiesPtrOutput) ToPipelineConnectionResponsePropertiesPtrOutput() PipelineConnectionResponsePropertiesPtrOutput {
	return o
}

func (o PipelineConnectionResponsePropertiesPtrOutput) ToPipelineConnectionResponsePropertiesPtrOutputWithContext(ctx context.Context) PipelineConnectionResponsePropertiesPtrOutput {
	return o
}

func (o PipelineConnectionResponsePropertiesPtrOutput) Elem() PipelineConnectionResponsePropertiesOutput {
	return o.ApplyT(func(v *PipelineConnectionResponseProperties) PipelineConnectionResponseProperties {
		if v != nil {
			return *v
		}
		var ret PipelineConnectionResponseProperties
		return ret
	}).(PipelineConnectionResponsePropertiesOutput)
}

// Internal metadata of the connection inside pipeline.
func (o PipelineConnectionResponsePropertiesPtrOutput) InternalMetadata() InternalMetadataPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *PipelineConnectionResponseProperties) *InternalMetadataPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.InternalMetadata
	}).(InternalMetadataPropertiesResponsePtrOutput)
}

// Properties of pipeline
type PipelineProperties struct {
	// Display name of this pipeline
	DisplayName *string `pulumi:"displayName"`
	// The flow types allowed for this pipeline
	FlowTypes []string `pulumi:"flowTypes"`
	// The policies for this pipeline
	Policies []string `pulumi:"policies"`
	// Remote cloud of the data to be transferred or received
	RemoteCloud string `pulumi:"remoteCloud"`
	// Subscribers of this resource
	Subscribers []Subscriber `pulumi:"subscribers"`
}

// PipelinePropertiesInput is an input type that accepts PipelinePropertiesArgs and PipelinePropertiesOutput values.
// You can construct a concrete instance of `PipelinePropertiesInput` via:
//
//	PipelinePropertiesArgs{...}
type PipelinePropertiesInput interface {
	pulumi.Input

	ToPipelinePropertiesOutput() PipelinePropertiesOutput
	ToPipelinePropertiesOutputWithContext(context.Context) PipelinePropertiesOutput
}

// Properties of pipeline
type PipelinePropertiesArgs struct {
	// Display name of this pipeline
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The flow types allowed for this pipeline
	FlowTypes pulumi.StringArrayInput `pulumi:"flowTypes"`
	// The policies for this pipeline
	Policies pulumi.StringArrayInput `pulumi:"policies"`
	// Remote cloud of the data to be transferred or received
	RemoteCloud pulumi.StringInput `pulumi:"remoteCloud"`
	// Subscribers of this resource
	Subscribers SubscriberArrayInput `pulumi:"subscribers"`
}

func (PipelinePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineProperties)(nil)).Elem()
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesOutput() PipelinePropertiesOutput {
	return i.ToPipelinePropertiesOutputWithContext(context.Background())
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesOutputWithContext(ctx context.Context) PipelinePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesOutput)
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return i.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (i PipelinePropertiesArgs) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesOutput).ToPipelinePropertiesPtrOutputWithContext(ctx)
}

// PipelinePropertiesPtrInput is an input type that accepts PipelinePropertiesArgs, PipelinePropertiesPtr and PipelinePropertiesPtrOutput values.
// You can construct a concrete instance of `PipelinePropertiesPtrInput` via:
//
//	        PipelinePropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelinePropertiesPtrInput interface {
	pulumi.Input

	ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput
	ToPipelinePropertiesPtrOutputWithContext(context.Context) PipelinePropertiesPtrOutput
}

type pipelinePropertiesPtrType PipelinePropertiesArgs

func PipelinePropertiesPtr(v *PipelinePropertiesArgs) PipelinePropertiesPtrInput {
	return (*pipelinePropertiesPtrType)(v)
}

func (*pipelinePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineProperties)(nil)).Elem()
}

func (i *pipelinePropertiesPtrType) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return i.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelinePropertiesPtrType) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelinePropertiesPtrOutput)
}

// Properties of pipeline
type PipelinePropertiesOutput struct{ *pulumi.OutputState }

func (PipelinePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineProperties)(nil)).Elem()
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesOutput() PipelinePropertiesOutput {
	return o
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesOutputWithContext(ctx context.Context) PipelinePropertiesOutput {
	return o
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return o.ToPipelinePropertiesPtrOutputWithContext(context.Background())
}

func (o PipelinePropertiesOutput) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineProperties) *PipelineProperties {
		return &v
	}).(PipelinePropertiesPtrOutput)
}

// Display name of this pipeline
func (o PipelinePropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The flow types allowed for this pipeline
func (o PipelinePropertiesOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineProperties) []string { return v.FlowTypes }).(pulumi.StringArrayOutput)
}

// The policies for this pipeline
func (o PipelinePropertiesOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineProperties) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// Remote cloud of the data to be transferred or received
func (o PipelinePropertiesOutput) RemoteCloud() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineProperties) string { return v.RemoteCloud }).(pulumi.StringOutput)
}

// Subscribers of this resource
func (o PipelinePropertiesOutput) Subscribers() SubscriberArrayOutput {
	return o.ApplyT(func(v PipelineProperties) []Subscriber { return v.Subscribers }).(SubscriberArrayOutput)
}

type PipelinePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelinePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineProperties)(nil)).Elem()
}

func (o PipelinePropertiesPtrOutput) ToPipelinePropertiesPtrOutput() PipelinePropertiesPtrOutput {
	return o
}

func (o PipelinePropertiesPtrOutput) ToPipelinePropertiesPtrOutputWithContext(ctx context.Context) PipelinePropertiesPtrOutput {
	return o
}

func (o PipelinePropertiesPtrOutput) Elem() PipelinePropertiesOutput {
	return o.ApplyT(func(v *PipelineProperties) PipelineProperties {
		if v != nil {
			return *v
		}
		var ret PipelineProperties
		return ret
	}).(PipelinePropertiesOutput)
}

// Display name of this pipeline
func (o PipelinePropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The flow types allowed for this pipeline
func (o PipelinePropertiesPtrOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineProperties) []string {
		if v == nil {
			return nil
		}
		return v.FlowTypes
	}).(pulumi.StringArrayOutput)
}

// The policies for this pipeline
func (o PipelinePropertiesPtrOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PipelineProperties) []string {
		if v == nil {
			return nil
		}
		return v.Policies
	}).(pulumi.StringArrayOutput)
}

// Remote cloud of the data to be transferred or received
func (o PipelinePropertiesPtrOutput) RemoteCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineProperties) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteCloud
	}).(pulumi.StringPtrOutput)
}

// Subscribers of this resource
func (o PipelinePropertiesPtrOutput) Subscribers() SubscriberArrayOutput {
	return o.ApplyT(func(v *PipelineProperties) []Subscriber {
		if v == nil {
			return nil
		}
		return v.Subscribers
	}).(SubscriberArrayOutput)
}

// Properties of pipeline
type PipelinePropertiesResponse struct {
	// Connections associated with pipeline
	Connections []PipelineConnectionResponse `pulumi:"connections"`
	// Display name of this pipeline
	DisplayName *string `pulumi:"displayName"`
	// The flow types allowed for this pipeline
	FlowTypes []string `pulumi:"flowTypes"`
	// The policies for this pipeline
	Policies []string `pulumi:"policies"`
	// Provisioning state of the pipeline
	ProvisioningState string `pulumi:"provisioningState"`
	// Remote cloud of the data to be transferred or received
	RemoteCloud string `pulumi:"remoteCloud"`
	// Subscribers of this resource
	Subscribers []SubscriberResponse `pulumi:"subscribers"`
}

// Properties of pipeline
type PipelinePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelinePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelinePropertiesResponse)(nil)).Elem()
}

func (o PipelinePropertiesResponseOutput) ToPipelinePropertiesResponseOutput() PipelinePropertiesResponseOutput {
	return o
}

func (o PipelinePropertiesResponseOutput) ToPipelinePropertiesResponseOutputWithContext(ctx context.Context) PipelinePropertiesResponseOutput {
	return o
}

// Connections associated with pipeline
func (o PipelinePropertiesResponseOutput) Connections() PipelineConnectionResponseArrayOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) []PipelineConnectionResponse { return v.Connections }).(PipelineConnectionResponseArrayOutput)
}

// Display name of this pipeline
func (o PipelinePropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The flow types allowed for this pipeline
func (o PipelinePropertiesResponseOutput) FlowTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) []string { return v.FlowTypes }).(pulumi.StringArrayOutput)
}

// The policies for this pipeline
func (o PipelinePropertiesResponseOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

// Provisioning state of the pipeline
func (o PipelinePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Remote cloud of the data to be transferred or received
func (o PipelinePropertiesResponseOutput) RemoteCloud() pulumi.StringOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) string { return v.RemoteCloud }).(pulumi.StringOutput)
}

// Subscribers of this resource
func (o PipelinePropertiesResponseOutput) Subscribers() SubscriberResponseArrayOutput {
	return o.ApplyT(func(v PipelinePropertiesResponse) []SubscriberResponse { return v.Subscribers }).(SubscriberResponseArrayOutput)
}

// Plan for the resource.
type Plan struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Plan for the resource.
type PlanArgs struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name pulumi.StringInput `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product pulumi.StringInput `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

// Plan for the resource.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Plan for the resource.
type PlanResponse struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// Plan for the resource.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The schema object.
type Schema struct {
	// Connection ID associated with this schema
	ConnectionId *string `pulumi:"connectionId"`
	// Content of the schema
	Content *string `pulumi:"content"`
	// ID associated with this schema
	Id *string `pulumi:"id"`
	// Name of the schema
	Name *string `pulumi:"name"`
	// Status of the schema
	Status *string `pulumi:"status"`
}

// SchemaInput is an input type that accepts SchemaArgs and SchemaOutput values.
// You can construct a concrete instance of `SchemaInput` via:
//
//	SchemaArgs{...}
type SchemaInput interface {
	pulumi.Input

	ToSchemaOutput() SchemaOutput
	ToSchemaOutputWithContext(context.Context) SchemaOutput
}

// The schema object.
type SchemaArgs struct {
	// Connection ID associated with this schema
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Content of the schema
	Content pulumi.StringPtrInput `pulumi:"content"`
	// ID associated with this schema
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the schema
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Status of the schema
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil)).Elem()
}

func (i SchemaArgs) ToSchemaOutput() SchemaOutput {
	return i.ToSchemaOutputWithContext(context.Background())
}

func (i SchemaArgs) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaOutput)
}

func (i SchemaArgs) ToSchemaPtrOutput() SchemaPtrOutput {
	return i.ToSchemaPtrOutputWithContext(context.Background())
}

func (i SchemaArgs) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaOutput).ToSchemaPtrOutputWithContext(ctx)
}

// SchemaPtrInput is an input type that accepts SchemaArgs, SchemaPtr and SchemaPtrOutput values.
// You can construct a concrete instance of `SchemaPtrInput` via:
//
//	        SchemaArgs{...}
//
//	or:
//
//	        nil
type SchemaPtrInput interface {
	pulumi.Input

	ToSchemaPtrOutput() SchemaPtrOutput
	ToSchemaPtrOutputWithContext(context.Context) SchemaPtrOutput
}

type schemaPtrType SchemaArgs

func SchemaPtr(v *SchemaArgs) SchemaPtrInput {
	return (*schemaPtrType)(v)
}

func (*schemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil)).Elem()
}

func (i *schemaPtrType) ToSchemaPtrOutput() SchemaPtrOutput {
	return i.ToSchemaPtrOutputWithContext(context.Background())
}

func (i *schemaPtrType) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaPtrOutput)
}

// SchemaArrayInput is an input type that accepts SchemaArray and SchemaArrayOutput values.
// You can construct a concrete instance of `SchemaArrayInput` via:
//
//	SchemaArray{ SchemaArgs{...} }
type SchemaArrayInput interface {
	pulumi.Input

	ToSchemaArrayOutput() SchemaArrayOutput
	ToSchemaArrayOutputWithContext(context.Context) SchemaArrayOutput
}

type SchemaArray []SchemaInput

func (SchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schema)(nil)).Elem()
}

func (i SchemaArray) ToSchemaArrayOutput() SchemaArrayOutput {
	return i.ToSchemaArrayOutputWithContext(context.Background())
}

func (i SchemaArray) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaArrayOutput)
}

// The schema object.
type SchemaOutput struct{ *pulumi.OutputState }

func (SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Schema)(nil)).Elem()
}

func (o SchemaOutput) ToSchemaOutput() SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaPtrOutput() SchemaPtrOutput {
	return o.ToSchemaPtrOutputWithContext(context.Background())
}

func (o SchemaOutput) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Schema) *Schema {
		return &v
	}).(SchemaPtrOutput)
}

// Connection ID associated with this schema
func (o SchemaOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schema) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Content of the schema
func (o SchemaOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schema) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// ID associated with this schema
func (o SchemaOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schema) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the schema
func (o SchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Status of the schema
func (o SchemaOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Schema) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SchemaPtrOutput struct{ *pulumi.OutputState }

func (SchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil)).Elem()
}

func (o SchemaPtrOutput) ToSchemaPtrOutput() SchemaPtrOutput {
	return o
}

func (o SchemaPtrOutput) ToSchemaPtrOutputWithContext(ctx context.Context) SchemaPtrOutput {
	return o
}

func (o SchemaPtrOutput) Elem() SchemaOutput {
	return o.ApplyT(func(v *Schema) Schema {
		if v != nil {
			return *v
		}
		var ret Schema
		return ret
	}).(SchemaOutput)
}

// Connection ID associated with this schema
func (o SchemaPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schema) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Content of the schema
func (o SchemaPtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schema) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// ID associated with this schema
func (o SchemaPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schema) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name of the schema
func (o SchemaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schema) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Status of the schema
func (o SchemaPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Schema) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type SchemaArrayOutput struct{ *pulumi.OutputState }

func (SchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Schema)(nil)).Elem()
}

func (o SchemaArrayOutput) ToSchemaArrayOutput() SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) Index(i pulumi.IntInput) SchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Schema {
		return vs[0].([]Schema)[vs[1].(int)]
	}).(SchemaOutput)
}

// The schema object.
type SchemaResponse struct {
	// Connection ID associated with this schema
	ConnectionId *string `pulumi:"connectionId"`
	// Content of the schema
	Content *string `pulumi:"content"`
	// ID associated with this schema
	Id *string `pulumi:"id"`
	// Name of the schema
	Name *string `pulumi:"name"`
	// Status of the schema
	Status *string `pulumi:"status"`
}

// The schema object.
type SchemaResponseOutput struct{ *pulumi.OutputState }

func (SchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaResponse)(nil)).Elem()
}

func (o SchemaResponseOutput) ToSchemaResponseOutput() SchemaResponseOutput {
	return o
}

func (o SchemaResponseOutput) ToSchemaResponseOutputWithContext(ctx context.Context) SchemaResponseOutput {
	return o
}

// Connection ID associated with this schema
func (o SchemaResponseOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaResponse) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Content of the schema
func (o SchemaResponseOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaResponse) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// ID associated with this schema
func (o SchemaResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the schema
func (o SchemaResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Status of the schema
func (o SchemaResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SchemaResponsePtrOutput struct{ *pulumi.OutputState }

func (SchemaResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaResponse)(nil)).Elem()
}

func (o SchemaResponsePtrOutput) ToSchemaResponsePtrOutput() SchemaResponsePtrOutput {
	return o
}

func (o SchemaResponsePtrOutput) ToSchemaResponsePtrOutputWithContext(ctx context.Context) SchemaResponsePtrOutput {
	return o
}

func (o SchemaResponsePtrOutput) Elem() SchemaResponseOutput {
	return o.ApplyT(func(v *SchemaResponse) SchemaResponse {
		if v != nil {
			return *v
		}
		var ret SchemaResponse
		return ret
	}).(SchemaResponseOutput)
}

// Connection ID associated with this schema
func (o SchemaResponsePtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Content of the schema
func (o SchemaResponsePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// ID associated with this schema
func (o SchemaResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name of the schema
func (o SchemaResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Status of the schema
func (o SchemaResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type SchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (SchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaResponse)(nil)).Elem()
}

func (o SchemaResponseArrayOutput) ToSchemaResponseArrayOutput() SchemaResponseArrayOutput {
	return o
}

func (o SchemaResponseArrayOutput) ToSchemaResponseArrayOutputWithContext(ctx context.Context) SchemaResponseArrayOutput {
	return o
}

func (o SchemaResponseArrayOutput) Index(i pulumi.IntInput) SchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaResponse {
		return vs[0].([]SchemaResponse)[vs[1].(int)]
	}).(SchemaResponseOutput)
}

// A resource selected from ARM
type SelectedResource struct {
	// Id of the connection
	Id string `pulumi:"id"`
	// Location of the connection
	Location *string `pulumi:"location"`
	// Name of the connection
	Name *string `pulumi:"name"`
	// Name of the subscription with the connection
	SubscriptionName *string `pulumi:"subscriptionName"`
}

// SelectedResourceInput is an input type that accepts SelectedResourceArgs and SelectedResourceOutput values.
// You can construct a concrete instance of `SelectedResourceInput` via:
//
//	SelectedResourceArgs{...}
type SelectedResourceInput interface {
	pulumi.Input

	ToSelectedResourceOutput() SelectedResourceOutput
	ToSelectedResourceOutputWithContext(context.Context) SelectedResourceOutput
}

// A resource selected from ARM
type SelectedResourceArgs struct {
	// Id of the connection
	Id pulumi.StringInput `pulumi:"id"`
	// Location of the connection
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Name of the connection
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Name of the subscription with the connection
	SubscriptionName pulumi.StringPtrInput `pulumi:"subscriptionName"`
}

func (SelectedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedResource)(nil)).Elem()
}

func (i SelectedResourceArgs) ToSelectedResourceOutput() SelectedResourceOutput {
	return i.ToSelectedResourceOutputWithContext(context.Background())
}

func (i SelectedResourceArgs) ToSelectedResourceOutputWithContext(ctx context.Context) SelectedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedResourceOutput)
}

func (i SelectedResourceArgs) ToSelectedResourcePtrOutput() SelectedResourcePtrOutput {
	return i.ToSelectedResourcePtrOutputWithContext(context.Background())
}

func (i SelectedResourceArgs) ToSelectedResourcePtrOutputWithContext(ctx context.Context) SelectedResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedResourceOutput).ToSelectedResourcePtrOutputWithContext(ctx)
}

// SelectedResourcePtrInput is an input type that accepts SelectedResourceArgs, SelectedResourcePtr and SelectedResourcePtrOutput values.
// You can construct a concrete instance of `SelectedResourcePtrInput` via:
//
//	        SelectedResourceArgs{...}
//
//	or:
//
//	        nil
type SelectedResourcePtrInput interface {
	pulumi.Input

	ToSelectedResourcePtrOutput() SelectedResourcePtrOutput
	ToSelectedResourcePtrOutputWithContext(context.Context) SelectedResourcePtrOutput
}

type selectedResourcePtrType SelectedResourceArgs

func SelectedResourcePtr(v *SelectedResourceArgs) SelectedResourcePtrInput {
	return (*selectedResourcePtrType)(v)
}

func (*selectedResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelectedResource)(nil)).Elem()
}

func (i *selectedResourcePtrType) ToSelectedResourcePtrOutput() SelectedResourcePtrOutput {
	return i.ToSelectedResourcePtrOutputWithContext(context.Background())
}

func (i *selectedResourcePtrType) ToSelectedResourcePtrOutputWithContext(ctx context.Context) SelectedResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelectedResourcePtrOutput)
}

// A resource selected from ARM
type SelectedResourceOutput struct{ *pulumi.OutputState }

func (SelectedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedResource)(nil)).Elem()
}

func (o SelectedResourceOutput) ToSelectedResourceOutput() SelectedResourceOutput {
	return o
}

func (o SelectedResourceOutput) ToSelectedResourceOutputWithContext(ctx context.Context) SelectedResourceOutput {
	return o
}

func (o SelectedResourceOutput) ToSelectedResourcePtrOutput() SelectedResourcePtrOutput {
	return o.ToSelectedResourcePtrOutputWithContext(context.Background())
}

func (o SelectedResourceOutput) ToSelectedResourcePtrOutputWithContext(ctx context.Context) SelectedResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelectedResource) *SelectedResource {
		return &v
	}).(SelectedResourcePtrOutput)
}

// Id of the connection
func (o SelectedResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedResource) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the connection
func (o SelectedResourceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResource) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the connection
func (o SelectedResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the subscription with the connection
func (o SelectedResourceOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResource) *string { return v.SubscriptionName }).(pulumi.StringPtrOutput)
}

type SelectedResourcePtrOutput struct{ *pulumi.OutputState }

func (SelectedResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelectedResource)(nil)).Elem()
}

func (o SelectedResourcePtrOutput) ToSelectedResourcePtrOutput() SelectedResourcePtrOutput {
	return o
}

func (o SelectedResourcePtrOutput) ToSelectedResourcePtrOutputWithContext(ctx context.Context) SelectedResourcePtrOutput {
	return o
}

func (o SelectedResourcePtrOutput) Elem() SelectedResourceOutput {
	return o.ApplyT(func(v *SelectedResource) SelectedResource {
		if v != nil {
			return *v
		}
		var ret SelectedResource
		return ret
	}).(SelectedResourceOutput)
}

// Id of the connection
func (o SelectedResourcePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResource) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the connection
func (o SelectedResourcePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResource) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Name of the connection
func (o SelectedResourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Name of the subscription with the connection
func (o SelectedResourcePtrOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResource) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionName
	}).(pulumi.StringPtrOutput)
}

// A resource selected from ARM
type SelectedResourceResponse struct {
	// Id of the connection
	Id string `pulumi:"id"`
	// Location of the connection
	Location *string `pulumi:"location"`
	// Name of the connection
	Name *string `pulumi:"name"`
	// Name of the subscription with the connection
	SubscriptionName *string `pulumi:"subscriptionName"`
}

// A resource selected from ARM
type SelectedResourceResponseOutput struct{ *pulumi.OutputState }

func (SelectedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelectedResourceResponse)(nil)).Elem()
}

func (o SelectedResourceResponseOutput) ToSelectedResourceResponseOutput() SelectedResourceResponseOutput {
	return o
}

func (o SelectedResourceResponseOutput) ToSelectedResourceResponseOutputWithContext(ctx context.Context) SelectedResourceResponseOutput {
	return o
}

// Id of the connection
func (o SelectedResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SelectedResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Location of the connection
func (o SelectedResourceResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResourceResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Name of the connection
func (o SelectedResourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Name of the subscription with the connection
func (o SelectedResourceResponseOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelectedResourceResponse) *string { return v.SubscriptionName }).(pulumi.StringPtrOutput)
}

type SelectedResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (SelectedResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelectedResourceResponse)(nil)).Elem()
}

func (o SelectedResourceResponsePtrOutput) ToSelectedResourceResponsePtrOutput() SelectedResourceResponsePtrOutput {
	return o
}

func (o SelectedResourceResponsePtrOutput) ToSelectedResourceResponsePtrOutputWithContext(ctx context.Context) SelectedResourceResponsePtrOutput {
	return o
}

func (o SelectedResourceResponsePtrOutput) Elem() SelectedResourceResponseOutput {
	return o.ApplyT(func(v *SelectedResourceResponse) SelectedResourceResponse {
		if v != nil {
			return *v
		}
		var ret SelectedResourceResponse
		return ret
	}).(SelectedResourceResponseOutput)
}

// Id of the connection
func (o SelectedResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Location of the connection
func (o SelectedResourceResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Name of the connection
func (o SelectedResourceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Name of the subscription with the connection
func (o SelectedResourceResponsePtrOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelectedResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionName
	}).(pulumi.StringPtrOutput)
}

type Subscriber struct {
	// Email of the subscriber
	Email *string `pulumi:"email"`
	// Number specifying what notifications to receive
	Notifications *float64 `pulumi:"notifications"`
}

// SubscriberInput is an input type that accepts SubscriberArgs and SubscriberOutput values.
// You can construct a concrete instance of `SubscriberInput` via:
//
//	SubscriberArgs{...}
type SubscriberInput interface {
	pulumi.Input

	ToSubscriberOutput() SubscriberOutput
	ToSubscriberOutputWithContext(context.Context) SubscriberOutput
}

type SubscriberArgs struct {
	// Email of the subscriber
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Number specifying what notifications to receive
	Notifications pulumi.Float64PtrInput `pulumi:"notifications"`
}

func (SubscriberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Subscriber)(nil)).Elem()
}

func (i SubscriberArgs) ToSubscriberOutput() SubscriberOutput {
	return i.ToSubscriberOutputWithContext(context.Background())
}

func (i SubscriberArgs) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberOutput)
}

// SubscriberArrayInput is an input type that accepts SubscriberArray and SubscriberArrayOutput values.
// You can construct a concrete instance of `SubscriberArrayInput` via:
//
//	SubscriberArray{ SubscriberArgs{...} }
type SubscriberArrayInput interface {
	pulumi.Input

	ToSubscriberArrayOutput() SubscriberArrayOutput
	ToSubscriberArrayOutputWithContext(context.Context) SubscriberArrayOutput
}

type SubscriberArray []SubscriberInput

func (SubscriberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subscriber)(nil)).Elem()
}

func (i SubscriberArray) ToSubscriberArrayOutput() SubscriberArrayOutput {
	return i.ToSubscriberArrayOutputWithContext(context.Background())
}

func (i SubscriberArray) ToSubscriberArrayOutputWithContext(ctx context.Context) SubscriberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriberArrayOutput)
}

type SubscriberOutput struct{ *pulumi.OutputState }

func (SubscriberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Subscriber)(nil)).Elem()
}

func (o SubscriberOutput) ToSubscriberOutput() SubscriberOutput {
	return o
}

func (o SubscriberOutput) ToSubscriberOutputWithContext(ctx context.Context) SubscriberOutput {
	return o
}

// Email of the subscriber
func (o SubscriberOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Subscriber) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Number specifying what notifications to receive
func (o SubscriberOutput) Notifications() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Subscriber) *float64 { return v.Notifications }).(pulumi.Float64PtrOutput)
}

type SubscriberArrayOutput struct{ *pulumi.OutputState }

func (SubscriberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Subscriber)(nil)).Elem()
}

func (o SubscriberArrayOutput) ToSubscriberArrayOutput() SubscriberArrayOutput {
	return o
}

func (o SubscriberArrayOutput) ToSubscriberArrayOutputWithContext(ctx context.Context) SubscriberArrayOutput {
	return o
}

func (o SubscriberArrayOutput) Index(i pulumi.IntInput) SubscriberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Subscriber {
		return vs[0].([]Subscriber)[vs[1].(int)]
	}).(SubscriberOutput)
}

type SubscriberResponse struct {
	// Email of the subscriber
	Email *string `pulumi:"email"`
	// Number specifying what notifications to receive
	Notifications *float64 `pulumi:"notifications"`
}

type SubscriberResponseOutput struct{ *pulumi.OutputState }

func (SubscriberResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriberResponse)(nil)).Elem()
}

func (o SubscriberResponseOutput) ToSubscriberResponseOutput() SubscriberResponseOutput {
	return o
}

func (o SubscriberResponseOutput) ToSubscriberResponseOutputWithContext(ctx context.Context) SubscriberResponseOutput {
	return o
}

// Email of the subscriber
func (o SubscriberResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriberResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Number specifying what notifications to receive
func (o SubscriberResponseOutput) Notifications() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SubscriberResponse) *float64 { return v.Notifications }).(pulumi.Float64PtrOutput)
}

type SubscriberResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriberResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriberResponse)(nil)).Elem()
}

func (o SubscriberResponseArrayOutput) ToSubscriberResponseArrayOutput() SubscriberResponseArrayOutput {
	return o
}

func (o SubscriberResponseArrayOutput) ToSubscriberResponseArrayOutputWithContext(ctx context.Context) SubscriberResponseArrayOutput {
	return o
}

func (o SubscriberResponseArrayOutput) Index(i pulumi.IntInput) SubscriberResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriberResponse {
		return vs[0].([]SubscriberResponse)[vs[1].(int)]
	}).(SubscriberResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(ConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(FlowPropertiesOutput{})
	pulumi.RegisterOutputType(FlowPropertiesPtrOutput{})
	pulumi.RegisterOutputType(FlowPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InternalMetadataPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InternalMetadataPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(OperationStatusPropertiesResponseOutput{})
	pulumi.RegisterOutputType(OperationStatusPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PendingConnectionResponseOutput{})
	pulumi.RegisterOutputType(PendingConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PendingFlowResponseOutput{})
	pulumi.RegisterOutputType(PendingFlowResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineConnectionResponseOutput{})
	pulumi.RegisterOutputType(PipelineConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineConnectionResponsePropertiesOutput{})
	pulumi.RegisterOutputType(PipelineConnectionResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelinePropertiesOutput{})
	pulumi.RegisterOutputType(PipelinePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelinePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(SchemaOutput{})
	pulumi.RegisterOutputType(SchemaPtrOutput{})
	pulumi.RegisterOutputType(SchemaArrayOutput{})
	pulumi.RegisterOutputType(SchemaResponseOutput{})
	pulumi.RegisterOutputType(SchemaResponsePtrOutput{})
	pulumi.RegisterOutputType(SchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(SelectedResourceOutput{})
	pulumi.RegisterOutputType(SelectedResourcePtrOutput{})
	pulumi.RegisterOutputType(SelectedResourceResponseOutput{})
	pulumi.RegisterOutputType(SelectedResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriberOutput{})
	pulumi.RegisterOutputType(SubscriberArrayOutput{})
	pulumi.RegisterOutputType(SubscriberResponseOutput{})
	pulumi.RegisterOutputType(SubscriberResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
