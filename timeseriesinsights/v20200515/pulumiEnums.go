// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A role defining the data plane operations that a principal can perform on a Time Series Insights client.
type AccessPolicyRole string

const (
	AccessPolicyRoleReader      = AccessPolicyRole("Reader")
	AccessPolicyRoleContributor = AccessPolicyRole("Contributor")
)

func (AccessPolicyRole) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPolicyRole)(nil)).Elem()
}

func (e AccessPolicyRole) ToAccessPolicyRoleOutput() AccessPolicyRoleOutput {
	return pulumi.ToOutput(e).(AccessPolicyRoleOutput)
}

func (e AccessPolicyRole) ToAccessPolicyRoleOutputWithContext(ctx context.Context) AccessPolicyRoleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccessPolicyRoleOutput)
}

func (e AccessPolicyRole) ToAccessPolicyRolePtrOutput() AccessPolicyRolePtrOutput {
	return e.ToAccessPolicyRolePtrOutputWithContext(context.Background())
}

func (e AccessPolicyRole) ToAccessPolicyRolePtrOutputWithContext(ctx context.Context) AccessPolicyRolePtrOutput {
	return AccessPolicyRole(e).ToAccessPolicyRoleOutputWithContext(ctx).ToAccessPolicyRolePtrOutputWithContext(ctx)
}

func (e AccessPolicyRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPolicyRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccessPolicyRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccessPolicyRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccessPolicyRoleOutput struct{ *pulumi.OutputState }

func (AccessPolicyRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessPolicyRole)(nil)).Elem()
}

func (o AccessPolicyRoleOutput) ToAccessPolicyRoleOutput() AccessPolicyRoleOutput {
	return o
}

func (o AccessPolicyRoleOutput) ToAccessPolicyRoleOutputWithContext(ctx context.Context) AccessPolicyRoleOutput {
	return o
}

func (o AccessPolicyRoleOutput) ToAccessPolicyRolePtrOutput() AccessPolicyRolePtrOutput {
	return o.ToAccessPolicyRolePtrOutputWithContext(context.Background())
}

func (o AccessPolicyRoleOutput) ToAccessPolicyRolePtrOutputWithContext(ctx context.Context) AccessPolicyRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccessPolicyRole) *AccessPolicyRole {
		return &v
	}).(AccessPolicyRolePtrOutput)
}

func (o AccessPolicyRoleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccessPolicyRoleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPolicyRole) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccessPolicyRoleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPolicyRoleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccessPolicyRole) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccessPolicyRolePtrOutput struct{ *pulumi.OutputState }

func (AccessPolicyRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyRole)(nil)).Elem()
}

func (o AccessPolicyRolePtrOutput) ToAccessPolicyRolePtrOutput() AccessPolicyRolePtrOutput {
	return o
}

func (o AccessPolicyRolePtrOutput) ToAccessPolicyRolePtrOutputWithContext(ctx context.Context) AccessPolicyRolePtrOutput {
	return o
}

func (o AccessPolicyRolePtrOutput) Elem() AccessPolicyRoleOutput {
	return o.ApplyT(func(v *AccessPolicyRole) AccessPolicyRole {
		if v != nil {
			return *v
		}
		var ret AccessPolicyRole
		return ret
	}).(AccessPolicyRoleOutput)
}

func (o AccessPolicyRolePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccessPolicyRolePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccessPolicyRole) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccessPolicyRoleInput is an input type that accepts values of the AccessPolicyRole enum
// A concrete instance of `AccessPolicyRoleInput` can be one of the following:
//
//	AccessPolicyRoleReader
//	AccessPolicyRoleContributor
type AccessPolicyRoleInput interface {
	pulumi.Input

	ToAccessPolicyRoleOutput() AccessPolicyRoleOutput
	ToAccessPolicyRoleOutputWithContext(context.Context) AccessPolicyRoleOutput
}

var accessPolicyRolePtrType = reflect.TypeOf((**AccessPolicyRole)(nil)).Elem()

type AccessPolicyRolePtrInput interface {
	pulumi.Input

	ToAccessPolicyRolePtrOutput() AccessPolicyRolePtrOutput
	ToAccessPolicyRolePtrOutputWithContext(context.Context) AccessPolicyRolePtrOutput
}

type accessPolicyRolePtr string

func AccessPolicyRolePtr(v string) AccessPolicyRolePtrInput {
	return (*accessPolicyRolePtr)(&v)
}

func (*accessPolicyRolePtr) ElementType() reflect.Type {
	return accessPolicyRolePtrType
}

func (in *accessPolicyRolePtr) ToAccessPolicyRolePtrOutput() AccessPolicyRolePtrOutput {
	return pulumi.ToOutput(in).(AccessPolicyRolePtrOutput)
}

func (in *accessPolicyRolePtr) ToAccessPolicyRolePtrOutputWithContext(ctx context.Context) AccessPolicyRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccessPolicyRolePtrOutput)
}

func (in *accessPolicyRolePtr) ToOutput(ctx context.Context) pulumix.Output[*AccessPolicyRole] {
	return pulumix.Output[*AccessPolicyRole]{
		OutputState: in.ToAccessPolicyRolePtrOutputWithContext(ctx).OutputState,
	}
}

// The reference data set key comparison behavior can be set using this property. By default, the value is 'Ordinal' - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When 'OrdinalIgnoreCase' is set, case insensitive comparison will be used.
type DataStringComparisonBehavior string

const (
	DataStringComparisonBehaviorOrdinal           = DataStringComparisonBehavior("Ordinal")
	DataStringComparisonBehaviorOrdinalIgnoreCase = DataStringComparisonBehavior("OrdinalIgnoreCase")
)

func (DataStringComparisonBehavior) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStringComparisonBehavior)(nil)).Elem()
}

func (e DataStringComparisonBehavior) ToDataStringComparisonBehaviorOutput() DataStringComparisonBehaviorOutput {
	return pulumi.ToOutput(e).(DataStringComparisonBehaviorOutput)
}

func (e DataStringComparisonBehavior) ToDataStringComparisonBehaviorOutputWithContext(ctx context.Context) DataStringComparisonBehaviorOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataStringComparisonBehaviorOutput)
}

func (e DataStringComparisonBehavior) ToDataStringComparisonBehaviorPtrOutput() DataStringComparisonBehaviorPtrOutput {
	return e.ToDataStringComparisonBehaviorPtrOutputWithContext(context.Background())
}

func (e DataStringComparisonBehavior) ToDataStringComparisonBehaviorPtrOutputWithContext(ctx context.Context) DataStringComparisonBehaviorPtrOutput {
	return DataStringComparisonBehavior(e).ToDataStringComparisonBehaviorOutputWithContext(ctx).ToDataStringComparisonBehaviorPtrOutputWithContext(ctx)
}

func (e DataStringComparisonBehavior) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataStringComparisonBehavior) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataStringComparisonBehavior) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataStringComparisonBehavior) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataStringComparisonBehaviorOutput struct{ *pulumi.OutputState }

func (DataStringComparisonBehaviorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataStringComparisonBehavior)(nil)).Elem()
}

func (o DataStringComparisonBehaviorOutput) ToDataStringComparisonBehaviorOutput() DataStringComparisonBehaviorOutput {
	return o
}

func (o DataStringComparisonBehaviorOutput) ToDataStringComparisonBehaviorOutputWithContext(ctx context.Context) DataStringComparisonBehaviorOutput {
	return o
}

func (o DataStringComparisonBehaviorOutput) ToDataStringComparisonBehaviorPtrOutput() DataStringComparisonBehaviorPtrOutput {
	return o.ToDataStringComparisonBehaviorPtrOutputWithContext(context.Background())
}

func (o DataStringComparisonBehaviorOutput) ToDataStringComparisonBehaviorPtrOutputWithContext(ctx context.Context) DataStringComparisonBehaviorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataStringComparisonBehavior) *DataStringComparisonBehavior {
		return &v
	}).(DataStringComparisonBehaviorPtrOutput)
}

func (o DataStringComparisonBehaviorOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataStringComparisonBehaviorOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataStringComparisonBehavior) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataStringComparisonBehaviorOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataStringComparisonBehaviorOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataStringComparisonBehavior) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataStringComparisonBehaviorPtrOutput struct{ *pulumi.OutputState }

func (DataStringComparisonBehaviorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStringComparisonBehavior)(nil)).Elem()
}

func (o DataStringComparisonBehaviorPtrOutput) ToDataStringComparisonBehaviorPtrOutput() DataStringComparisonBehaviorPtrOutput {
	return o
}

func (o DataStringComparisonBehaviorPtrOutput) ToDataStringComparisonBehaviorPtrOutputWithContext(ctx context.Context) DataStringComparisonBehaviorPtrOutput {
	return o
}

func (o DataStringComparisonBehaviorPtrOutput) Elem() DataStringComparisonBehaviorOutput {
	return o.ApplyT(func(v *DataStringComparisonBehavior) DataStringComparisonBehavior {
		if v != nil {
			return *v
		}
		var ret DataStringComparisonBehavior
		return ret
	}).(DataStringComparisonBehaviorOutput)
}

func (o DataStringComparisonBehaviorPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataStringComparisonBehaviorPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataStringComparisonBehavior) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataStringComparisonBehaviorInput is an input type that accepts values of the DataStringComparisonBehavior enum
// A concrete instance of `DataStringComparisonBehaviorInput` can be one of the following:
//
//	DataStringComparisonBehaviorOrdinal
//	DataStringComparisonBehaviorOrdinalIgnoreCase
type DataStringComparisonBehaviorInput interface {
	pulumi.Input

	ToDataStringComparisonBehaviorOutput() DataStringComparisonBehaviorOutput
	ToDataStringComparisonBehaviorOutputWithContext(context.Context) DataStringComparisonBehaviorOutput
}

var dataStringComparisonBehaviorPtrType = reflect.TypeOf((**DataStringComparisonBehavior)(nil)).Elem()

type DataStringComparisonBehaviorPtrInput interface {
	pulumi.Input

	ToDataStringComparisonBehaviorPtrOutput() DataStringComparisonBehaviorPtrOutput
	ToDataStringComparisonBehaviorPtrOutputWithContext(context.Context) DataStringComparisonBehaviorPtrOutput
}

type dataStringComparisonBehaviorPtr string

func DataStringComparisonBehaviorPtr(v string) DataStringComparisonBehaviorPtrInput {
	return (*dataStringComparisonBehaviorPtr)(&v)
}

func (*dataStringComparisonBehaviorPtr) ElementType() reflect.Type {
	return dataStringComparisonBehaviorPtrType
}

func (in *dataStringComparisonBehaviorPtr) ToDataStringComparisonBehaviorPtrOutput() DataStringComparisonBehaviorPtrOutput {
	return pulumi.ToOutput(in).(DataStringComparisonBehaviorPtrOutput)
}

func (in *dataStringComparisonBehaviorPtr) ToDataStringComparisonBehaviorPtrOutputWithContext(ctx context.Context) DataStringComparisonBehaviorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataStringComparisonBehaviorPtrOutput)
}

func (in *dataStringComparisonBehaviorPtr) ToOutput(ctx context.Context) pulumix.Output[*DataStringComparisonBehavior] {
	return pulumix.Output[*DataStringComparisonBehavior]{
		OutputState: in.ToDataStringComparisonBehaviorPtrOutputWithContext(ctx).OutputState,
	}
}

// The type of the key property.
type ReferenceDataKeyPropertyType string

const (
	ReferenceDataKeyPropertyTypeString   = ReferenceDataKeyPropertyType("String")
	ReferenceDataKeyPropertyTypeDouble   = ReferenceDataKeyPropertyType("Double")
	ReferenceDataKeyPropertyTypeBool     = ReferenceDataKeyPropertyType("Bool")
	ReferenceDataKeyPropertyTypeDateTime = ReferenceDataKeyPropertyType("DateTime")
)

func (ReferenceDataKeyPropertyType) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceDataKeyPropertyType)(nil)).Elem()
}

func (e ReferenceDataKeyPropertyType) ToReferenceDataKeyPropertyTypeOutput() ReferenceDataKeyPropertyTypeOutput {
	return pulumi.ToOutput(e).(ReferenceDataKeyPropertyTypeOutput)
}

func (e ReferenceDataKeyPropertyType) ToReferenceDataKeyPropertyTypeOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ReferenceDataKeyPropertyTypeOutput)
}

func (e ReferenceDataKeyPropertyType) ToReferenceDataKeyPropertyTypePtrOutput() ReferenceDataKeyPropertyTypePtrOutput {
	return e.ToReferenceDataKeyPropertyTypePtrOutputWithContext(context.Background())
}

func (e ReferenceDataKeyPropertyType) ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypePtrOutput {
	return ReferenceDataKeyPropertyType(e).ToReferenceDataKeyPropertyTypeOutputWithContext(ctx).ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx)
}

func (e ReferenceDataKeyPropertyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReferenceDataKeyPropertyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ReferenceDataKeyPropertyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ReferenceDataKeyPropertyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ReferenceDataKeyPropertyTypeOutput struct{ *pulumi.OutputState }

func (ReferenceDataKeyPropertyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceDataKeyPropertyType)(nil)).Elem()
}

func (o ReferenceDataKeyPropertyTypeOutput) ToReferenceDataKeyPropertyTypeOutput() ReferenceDataKeyPropertyTypeOutput {
	return o
}

func (o ReferenceDataKeyPropertyTypeOutput) ToReferenceDataKeyPropertyTypeOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypeOutput {
	return o
}

func (o ReferenceDataKeyPropertyTypeOutput) ToReferenceDataKeyPropertyTypePtrOutput() ReferenceDataKeyPropertyTypePtrOutput {
	return o.ToReferenceDataKeyPropertyTypePtrOutputWithContext(context.Background())
}

func (o ReferenceDataKeyPropertyTypeOutput) ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceDataKeyPropertyType) *ReferenceDataKeyPropertyType {
		return &v
	}).(ReferenceDataKeyPropertyTypePtrOutput)
}

func (o ReferenceDataKeyPropertyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ReferenceDataKeyPropertyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReferenceDataKeyPropertyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ReferenceDataKeyPropertyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReferenceDataKeyPropertyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ReferenceDataKeyPropertyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ReferenceDataKeyPropertyTypePtrOutput struct{ *pulumi.OutputState }

func (ReferenceDataKeyPropertyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceDataKeyPropertyType)(nil)).Elem()
}

func (o ReferenceDataKeyPropertyTypePtrOutput) ToReferenceDataKeyPropertyTypePtrOutput() ReferenceDataKeyPropertyTypePtrOutput {
	return o
}

func (o ReferenceDataKeyPropertyTypePtrOutput) ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypePtrOutput {
	return o
}

func (o ReferenceDataKeyPropertyTypePtrOutput) Elem() ReferenceDataKeyPropertyTypeOutput {
	return o.ApplyT(func(v *ReferenceDataKeyPropertyType) ReferenceDataKeyPropertyType {
		if v != nil {
			return *v
		}
		var ret ReferenceDataKeyPropertyType
		return ret
	}).(ReferenceDataKeyPropertyTypeOutput)
}

func (o ReferenceDataKeyPropertyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ReferenceDataKeyPropertyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ReferenceDataKeyPropertyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ReferenceDataKeyPropertyTypeInput is an input type that accepts values of the ReferenceDataKeyPropertyType enum
// A concrete instance of `ReferenceDataKeyPropertyTypeInput` can be one of the following:
//
//	ReferenceDataKeyPropertyTypeString
//	ReferenceDataKeyPropertyTypeDouble
//	ReferenceDataKeyPropertyTypeBool
//	ReferenceDataKeyPropertyTypeDateTime
type ReferenceDataKeyPropertyTypeInput interface {
	pulumi.Input

	ToReferenceDataKeyPropertyTypeOutput() ReferenceDataKeyPropertyTypeOutput
	ToReferenceDataKeyPropertyTypeOutputWithContext(context.Context) ReferenceDataKeyPropertyTypeOutput
}

var referenceDataKeyPropertyTypePtrType = reflect.TypeOf((**ReferenceDataKeyPropertyType)(nil)).Elem()

type ReferenceDataKeyPropertyTypePtrInput interface {
	pulumi.Input

	ToReferenceDataKeyPropertyTypePtrOutput() ReferenceDataKeyPropertyTypePtrOutput
	ToReferenceDataKeyPropertyTypePtrOutputWithContext(context.Context) ReferenceDataKeyPropertyTypePtrOutput
}

type referenceDataKeyPropertyTypePtr string

func ReferenceDataKeyPropertyTypePtr(v string) ReferenceDataKeyPropertyTypePtrInput {
	return (*referenceDataKeyPropertyTypePtr)(&v)
}

func (*referenceDataKeyPropertyTypePtr) ElementType() reflect.Type {
	return referenceDataKeyPropertyTypePtrType
}

func (in *referenceDataKeyPropertyTypePtr) ToReferenceDataKeyPropertyTypePtrOutput() ReferenceDataKeyPropertyTypePtrOutput {
	return pulumi.ToOutput(in).(ReferenceDataKeyPropertyTypePtrOutput)
}

func (in *referenceDataKeyPropertyTypePtr) ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx context.Context) ReferenceDataKeyPropertyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ReferenceDataKeyPropertyTypePtrOutput)
}

func (in *referenceDataKeyPropertyTypePtr) ToOutput(ctx context.Context) pulumix.Output[*ReferenceDataKeyPropertyType] {
	return pulumix.Output[*ReferenceDataKeyPropertyType]{
		OutputState: in.ToReferenceDataKeyPropertyTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AccessPolicyRoleOutput{})
	pulumi.RegisterOutputType(AccessPolicyRolePtrOutput{})
	pulumi.RegisterOutputType(DataStringComparisonBehaviorOutput{})
	pulumi.RegisterOutputType(DataStringComparisonBehaviorPtrOutput{})
	pulumi.RegisterOutputType(ReferenceDataKeyPropertyTypeOutput{})
	pulumi.RegisterOutputType(ReferenceDataKeyPropertyTypePtrOutput{})
}
