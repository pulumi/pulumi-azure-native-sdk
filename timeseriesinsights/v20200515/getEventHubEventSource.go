// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the event source with the specified name in the specified environment.
func GetEventHubEventSource(ctx *pulumi.Context, args *GetEventHubEventSourceArgs, opts ...pulumi.InvokeOption) (*GetEventHubEventSourceResult, error) {
	var rv GetEventHubEventSourceResult
	err := ctx.Invoke("azure-native:timeseriesinsights/v20200515:getEventHubEventSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetEventHubEventSourceArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName string `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An event source that receives its data from an Azure EventHub.
type GetEventHubEventSourceResult struct {
	// The name of the event hub's consumer group that holds the partitions from which events will be read.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The time the resource was created.
	CreationTime string `pulumi:"creationTime"`
	// The name of the event hub.
	EventHubName string `pulumi:"eventHubName"`
	// The resource id of the event source in Azure Resource Manager.
	EventSourceResourceId string `pulumi:"eventSourceResourceId"`
	// Resource Id
	Id string `pulumi:"id"`
	// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
	KeyName string `pulumi:"keyName"`
	// The kind of the event source.
	// Expected value is 'Microsoft.EventHub'.
	Kind string `pulumi:"kind"`
	// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
	LocalTimestamp *LocalTimestampResponse `pulumi:"localTimestamp"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of the service bus that contains the event hub.
	ServiceBusNamespace string `pulumi:"serviceBusNamespace"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
	Time *string `pulumi:"time"`
	// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
	TimestampPropertyName *string `pulumi:"timestampPropertyName"`
	// Resource type
	Type string `pulumi:"type"`
}

func GetEventHubEventSourceOutput(ctx *pulumi.Context, args GetEventHubEventSourceOutputArgs, opts ...pulumi.InvokeOption) GetEventHubEventSourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEventHubEventSourceResult, error) {
			args := v.(GetEventHubEventSourceArgs)
			r, err := GetEventHubEventSource(ctx, &args, opts...)
			var s GetEventHubEventSourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEventHubEventSourceResultOutput)
}

type GetEventHubEventSourceOutputArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// The name of the Time Series Insights event source associated with the specified environment.
	EventSourceName pulumi.StringInput `pulumi:"eventSourceName"`
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetEventHubEventSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventHubEventSourceArgs)(nil)).Elem()
}

// An event source that receives its data from an Azure EventHub.
type GetEventHubEventSourceResultOutput struct{ *pulumi.OutputState }

func (GetEventHubEventSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEventHubEventSourceResult)(nil)).Elem()
}

func (o GetEventHubEventSourceResultOutput) ToGetEventHubEventSourceResultOutput() GetEventHubEventSourceResultOutput {
	return o
}

func (o GetEventHubEventSourceResultOutput) ToGetEventHubEventSourceResultOutputWithContext(ctx context.Context) GetEventHubEventSourceResultOutput {
	return o
}

// The name of the event hub's consumer group that holds the partitions from which events will be read.
func (o GetEventHubEventSourceResultOutput) ConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.ConsumerGroupName }).(pulumi.StringOutput)
}

// The time the resource was created.
func (o GetEventHubEventSourceResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The name of the event hub.
func (o GetEventHubEventSourceResultOutput) EventHubName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.EventHubName }).(pulumi.StringOutput)
}

// The resource id of the event source in Azure Resource Manager.
func (o GetEventHubEventSourceResultOutput) EventSourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.EventSourceResourceId }).(pulumi.StringOutput)
}

// Resource Id
func (o GetEventHubEventSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.
func (o GetEventHubEventSourceResultOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.KeyName }).(pulumi.StringOutput)
}

// The kind of the event source.
// Expected value is 'Microsoft.EventHub'.
func (o GetEventHubEventSourceResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.Kind }).(pulumi.StringOutput)
}

// An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.
func (o GetEventHubEventSourceResultOutput) LocalTimestamp() LocalTimestampResponsePtrOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) *LocalTimestampResponse { return v.LocalTimestamp }).(LocalTimestampResponsePtrOutput)
}

// Resource location
func (o GetEventHubEventSourceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o GetEventHubEventSourceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o GetEventHubEventSourceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of the service bus that contains the event hub.
func (o GetEventHubEventSourceResultOutput) ServiceBusNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.ServiceBusNamespace }).(pulumi.StringOutput)
}

// Resource tags
func (o GetEventHubEventSourceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.
func (o GetEventHubEventSourceResultOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) *string { return v.Time }).(pulumi.StringPtrOutput)
}

// The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.
func (o GetEventHubEventSourceResultOutput) TimestampPropertyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) *string { return v.TimestampPropertyName }).(pulumi.StringPtrOutput)
}

// Resource type
func (o GetEventHubEventSourceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEventHubEventSourceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEventHubEventSourceResultOutput{})
}
