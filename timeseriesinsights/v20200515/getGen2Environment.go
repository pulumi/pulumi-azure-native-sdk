// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the environment with the specified name in the specified subscription and resource group.
func GetGen2Environment(ctx *pulumi.Context, args *GetGen2EnvironmentArgs, opts ...pulumi.InvokeOption) (*GetGen2EnvironmentResult, error) {
	var rv GetGen2EnvironmentResult
	err := ctx.Invoke("azure-native:timeseriesinsights/v20200515:getGen2Environment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetGen2EnvironmentArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName string `pulumi:"environmentName"`
	// Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
	Expand *string `pulumi:"expand"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Gen2 environments do not have set data retention limits.
type GetGen2EnvironmentResult struct {
	// The time the resource was created.
	CreationTime string `pulumi:"creationTime"`
	// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessFqdn string `pulumi:"dataAccessFqdn"`
	// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
	DataAccessId string `pulumi:"dataAccessId"`
	// Resource Id
	Id string `pulumi:"id"`
	// The kind of the environment.
	// Expected value is 'Gen2'.
	Kind string `pulumi:"kind"`
	// Resource location
	Location string `pulumi:"location"`
	// Resource name
	Name string `pulumi:"name"`
	// Provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
	Sku SkuResponse `pulumi:"sku"`
	// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
	Status EnvironmentStatusResponse `pulumi:"status"`
	// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
	StorageConfiguration Gen2StorageConfigurationOutputResponse `pulumi:"storageConfiguration"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// The list of event properties which will be used to define the environment's time series id.
	TimeSeriesIdProperties []TimeSeriesIdPropertyResponse `pulumi:"timeSeriesIdProperties"`
	// Resource type
	Type string `pulumi:"type"`
	// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
	WarmStoreConfiguration *WarmStoreConfigurationPropertiesResponse `pulumi:"warmStoreConfiguration"`
}

func GetGen2EnvironmentOutput(ctx *pulumi.Context, args GetGen2EnvironmentOutputArgs, opts ...pulumi.InvokeOption) GetGen2EnvironmentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGen2EnvironmentResult, error) {
			args := v.(GetGen2EnvironmentArgs)
			r, err := GetGen2Environment(ctx, &args, opts...)
			var s GetGen2EnvironmentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetGen2EnvironmentResultOutput)
}

type GetGen2EnvironmentOutputArgs struct {
	// The name of the Time Series Insights environment associated with the specified resource group.
	EnvironmentName pulumi.StringInput `pulumi:"environmentName"`
	// Setting $expand=status will include the status of the internal services of the environment in the Time Series Insights service.
	Expand pulumi.StringPtrInput `pulumi:"expand"`
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetGen2EnvironmentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGen2EnvironmentArgs)(nil)).Elem()
}

// An environment is a set of time-series data available for query, and is the top level Azure Time Series Insights resource. Gen2 environments do not have set data retention limits.
type GetGen2EnvironmentResultOutput struct{ *pulumi.OutputState }

func (GetGen2EnvironmentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGen2EnvironmentResult)(nil)).Elem()
}

func (o GetGen2EnvironmentResultOutput) ToGetGen2EnvironmentResultOutput() GetGen2EnvironmentResultOutput {
	return o
}

func (o GetGen2EnvironmentResultOutput) ToGetGen2EnvironmentResultOutputWithContext(ctx context.Context) GetGen2EnvironmentResultOutput {
	return o
}

// The time the resource was created.
func (o GetGen2EnvironmentResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The fully qualified domain name used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o GetGen2EnvironmentResultOutput) DataAccessFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.DataAccessFqdn }).(pulumi.StringOutput)
}

// An id used to access the environment data, e.g. to query the environment's events or upload reference data for the environment.
func (o GetGen2EnvironmentResultOutput) DataAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.DataAccessId }).(pulumi.StringOutput)
}

// Resource Id
func (o GetGen2EnvironmentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.Id }).(pulumi.StringOutput)
}

// The kind of the environment.
// Expected value is 'Gen2'.
func (o GetGen2EnvironmentResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource location
func (o GetGen2EnvironmentResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.Location }).(pulumi.StringOutput)
}

// Resource name
func (o GetGen2EnvironmentResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.Name }).(pulumi.StringOutput)
}

// Provisioning state of the resource.
func (o GetGen2EnvironmentResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The sku determines the type of environment, either Gen1 (S1 or S2) or Gen2 (L1). For Gen1 environments the sku determines the capacity of the environment, the ingress rate, and the billing rate.
func (o GetGen2EnvironmentResultOutput) Sku() SkuResponseOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) SkuResponse { return v.Sku }).(SkuResponseOutput)
}

// An object that represents the status of the environment, and its internal state in the Time Series Insights service.
func (o GetGen2EnvironmentResultOutput) Status() EnvironmentStatusResponseOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) EnvironmentStatusResponse { return v.Status }).(EnvironmentStatusResponseOutput)
}

// The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment's data.
func (o GetGen2EnvironmentResultOutput) StorageConfiguration() Gen2StorageConfigurationOutputResponseOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) Gen2StorageConfigurationOutputResponse { return v.StorageConfiguration }).(Gen2StorageConfigurationOutputResponseOutput)
}

// Resource tags
func (o GetGen2EnvironmentResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The list of event properties which will be used to define the environment's time series id.
func (o GetGen2EnvironmentResultOutput) TimeSeriesIdProperties() TimeSeriesIdPropertyResponseArrayOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) []TimeSeriesIdPropertyResponse { return v.TimeSeriesIdProperties }).(TimeSeriesIdPropertyResponseArrayOutput)
}

// Resource type
func (o GetGen2EnvironmentResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) string { return v.Type }).(pulumi.StringOutput)
}

// The warm store configuration provides the details to create a warm store cache that will retain a copy of the environment's data available for faster query.
func (o GetGen2EnvironmentResultOutput) WarmStoreConfiguration() WarmStoreConfigurationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v GetGen2EnvironmentResult) *WarmStoreConfigurationPropertiesResponse {
		return v.WarmStoreConfiguration
	}).(WarmStoreConfigurationPropertiesResponsePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGen2EnvironmentResultOutput{})
}
