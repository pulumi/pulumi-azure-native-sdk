// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List the device groups for the catalog.
func ListCatalogDeviceGroups(ctx *pulumi.Context, args *ListCatalogDeviceGroupsArgs, opts ...pulumi.InvokeOption) (*ListCatalogDeviceGroupsResult, error) {
	var rv ListCatalogDeviceGroupsResult
	err := ctx.Invoke("azure-native:azuresphere/v20220901preview:listCatalogDeviceGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListCatalogDeviceGroupsArgs struct {
	// Name of catalog
	CatalogName string `pulumi:"catalogName"`
	// Device Group name.
	DeviceGroupName *string `pulumi:"deviceGroupName"`
	// Filter the result list using the given expression
	Filter *string `pulumi:"filter"`
	// The maximum number of result items per page.
	Maxpagesize *int `pulumi:"maxpagesize"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The number of result items to skip.
	Skip *int `pulumi:"skip"`
	// The number of result items to return.
	Top *int `pulumi:"top"`
}

// The response of a DeviceGroup list operation.
type ListCatalogDeviceGroupsResult struct {
	// The link to the next page of items
	NextLink *string `pulumi:"nextLink"`
	// The DeviceGroup items on this page
	Value []DeviceGroupResponse `pulumi:"value"`
}

func ListCatalogDeviceGroupsOutput(ctx *pulumi.Context, args ListCatalogDeviceGroupsOutputArgs, opts ...pulumi.InvokeOption) ListCatalogDeviceGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListCatalogDeviceGroupsResult, error) {
			args := v.(ListCatalogDeviceGroupsArgs)
			r, err := ListCatalogDeviceGroups(ctx, &args, opts...)
			var s ListCatalogDeviceGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListCatalogDeviceGroupsResultOutput)
}

type ListCatalogDeviceGroupsOutputArgs struct {
	// Name of catalog
	CatalogName pulumi.StringInput `pulumi:"catalogName"`
	// Device Group name.
	DeviceGroupName pulumi.StringPtrInput `pulumi:"deviceGroupName"`
	// Filter the result list using the given expression
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The maximum number of result items per page.
	Maxpagesize pulumi.IntPtrInput `pulumi:"maxpagesize"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The number of result items to skip.
	Skip pulumi.IntPtrInput `pulumi:"skip"`
	// The number of result items to return.
	Top pulumi.IntPtrInput `pulumi:"top"`
}

func (ListCatalogDeviceGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListCatalogDeviceGroupsArgs)(nil)).Elem()
}

// The response of a DeviceGroup list operation.
type ListCatalogDeviceGroupsResultOutput struct{ *pulumi.OutputState }

func (ListCatalogDeviceGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListCatalogDeviceGroupsResult)(nil)).Elem()
}

func (o ListCatalogDeviceGroupsResultOutput) ToListCatalogDeviceGroupsResultOutput() ListCatalogDeviceGroupsResultOutput {
	return o
}

func (o ListCatalogDeviceGroupsResultOutput) ToListCatalogDeviceGroupsResultOutputWithContext(ctx context.Context) ListCatalogDeviceGroupsResultOutput {
	return o
}

// The link to the next page of items
func (o ListCatalogDeviceGroupsResultOutput) NextLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListCatalogDeviceGroupsResult) *string { return v.NextLink }).(pulumi.StringPtrOutput)
}

// The DeviceGroup items on this page
func (o ListCatalogDeviceGroupsResultOutput) Value() DeviceGroupResponseArrayOutput {
	return o.ApplyT(func(v ListCatalogDeviceGroupsResult) []DeviceGroupResponse { return v.Value }).(DeviceGroupResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListCatalogDeviceGroupsResultOutput{})
}
