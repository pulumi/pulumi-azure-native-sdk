// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// An device resource belonging to a device group resource.
type Device struct {
	pulumi.CustomResourceState

	// SKU of the chip
	ChipSku pulumi.StringOutput `pulumi:"chipSku"`
	// Device ID
	DeviceId pulumi.StringPtrOutput `pulumi:"deviceId"`
	// OS version available for installation when update requested
	LastAvailableOsVersion pulumi.StringOutput `pulumi:"lastAvailableOsVersion"`
	// OS version running on device when update requested
	LastInstalledOsVersion pulumi.StringOutput `pulumi:"lastInstalledOsVersion"`
	// Time when update requested and new OS version available
	LastOsUpdateUtc pulumi.StringOutput `pulumi:"lastOsUpdateUtc"`
	// Time when update was last requested
	LastUpdateRequestUtc pulumi.StringOutput `pulumi:"lastUpdateRequestUtc"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogName == nil {
		return nil, errors.New("invalid value for required argument 'CatalogName'")
	}
	if args.DeviceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceGroupName'")
	}
	if args.ProductName == nil {
		return nil, errors.New("invalid value for required argument 'ProductName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azuresphere:Device"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Device
	err := ctx.RegisterResource("azure-native:azuresphere/v20220901preview:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("azure-native:azuresphere/v20220901preview:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
}

type DeviceState struct {
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// Name of catalog
	CatalogName string `pulumi:"catalogName"`
	// Name of device group.
	DeviceGroupName string `pulumi:"deviceGroupName"`
	// Device ID
	DeviceId *string `pulumi:"deviceId"`
	// Device name
	DeviceName *string `pulumi:"deviceName"`
	// Name of product.
	ProductName string `pulumi:"productName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// Name of catalog
	CatalogName pulumi.StringInput
	// Name of device group.
	DeviceGroupName pulumi.StringInput
	// Device ID
	DeviceId pulumi.StringPtrInput
	// Device name
	DeviceName pulumi.StringPtrInput
	// Name of product.
	ProductName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}

type DeviceInput interface {
	pulumi.Input

	ToDeviceOutput() DeviceOutput
	ToDeviceOutputWithContext(ctx context.Context) DeviceOutput
}

func (*Device) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (i *Device) ToDeviceOutput() DeviceOutput {
	return i.ToDeviceOutputWithContext(context.Background())
}

func (i *Device) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeviceOutput)
}

func (i *Device) ToOutput(ctx context.Context) pulumix.Output[*Device] {
	return pulumix.Output[*Device]{
		OutputState: i.ToDeviceOutputWithContext(ctx).OutputState,
	}
}

type DeviceOutput struct{ *pulumi.OutputState }

func (DeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Device)(nil)).Elem()
}

func (o DeviceOutput) ToDeviceOutput() DeviceOutput {
	return o
}

func (o DeviceOutput) ToDeviceOutputWithContext(ctx context.Context) DeviceOutput {
	return o
}

func (o DeviceOutput) ToOutput(ctx context.Context) pulumix.Output[*Device] {
	return pulumix.Output[*Device]{
		OutputState: o.OutputState,
	}
}

// SKU of the chip
func (o DeviceOutput) ChipSku() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ChipSku }).(pulumi.StringOutput)
}

// Device ID
func (o DeviceOutput) DeviceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Device) pulumi.StringPtrOutput { return v.DeviceId }).(pulumi.StringPtrOutput)
}

// OS version available for installation when update requested
func (o DeviceOutput) LastAvailableOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LastAvailableOsVersion }).(pulumi.StringOutput)
}

// OS version running on device when update requested
func (o DeviceOutput) LastInstalledOsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LastInstalledOsVersion }).(pulumi.StringOutput)
}

// Time when update requested and new OS version available
func (o DeviceOutput) LastOsUpdateUtc() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LastOsUpdateUtc }).(pulumi.StringOutput)
}

// Time when update was last requested
func (o DeviceOutput) LastUpdateRequestUtc() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.LastUpdateRequestUtc }).(pulumi.StringOutput)
}

// The name of the resource
func (o DeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o DeviceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o DeviceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Device) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DeviceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Device) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DeviceOutput{})
}
