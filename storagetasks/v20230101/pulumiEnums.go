// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone                         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeSystemAssigned               = ManagedServiceIdentityType("SystemAssigned")
	ManagedServiceIdentityTypeUserAssigned                 = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityType_SystemAssigned_UserAssigned = ManagedServiceIdentityType("SystemAssigned,UserAssigned")
)

// Action to be taken when the operation fails for a object.
type OnFailure string

const (
	OnFailureBreak = OnFailure("break")
)

func (OnFailure) ElementType() reflect.Type {
	return reflect.TypeOf((*OnFailure)(nil)).Elem()
}

func (e OnFailure) ToOnFailureOutput() OnFailureOutput {
	return pulumi.ToOutput(e).(OnFailureOutput)
}

func (e OnFailure) ToOnFailureOutputWithContext(ctx context.Context) OnFailureOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OnFailureOutput)
}

func (e OnFailure) ToOnFailurePtrOutput() OnFailurePtrOutput {
	return e.ToOnFailurePtrOutputWithContext(context.Background())
}

func (e OnFailure) ToOnFailurePtrOutputWithContext(ctx context.Context) OnFailurePtrOutput {
	return OnFailure(e).ToOnFailureOutputWithContext(ctx).ToOnFailurePtrOutputWithContext(ctx)
}

func (e OnFailure) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnFailure) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnFailure) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OnFailure) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OnFailureOutput struct{ *pulumi.OutputState }

func (OnFailureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnFailure)(nil)).Elem()
}

func (o OnFailureOutput) ToOnFailureOutput() OnFailureOutput {
	return o
}

func (o OnFailureOutput) ToOnFailureOutputWithContext(ctx context.Context) OnFailureOutput {
	return o
}

func (o OnFailureOutput) ToOnFailurePtrOutput() OnFailurePtrOutput {
	return o.ToOnFailurePtrOutputWithContext(context.Background())
}

func (o OnFailureOutput) ToOnFailurePtrOutputWithContext(ctx context.Context) OnFailurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnFailure) *OnFailure {
		return &v
	}).(OnFailurePtrOutput)
}

func (o OnFailureOutput) ToOutput(ctx context.Context) pulumix.Output[OnFailure] {
	return pulumix.Output[OnFailure]{
		OutputState: o.OutputState,
	}
}

func (o OnFailureOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnFailureOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnFailure) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnFailureOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnFailureOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnFailure) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnFailurePtrOutput struct{ *pulumi.OutputState }

func (OnFailurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnFailure)(nil)).Elem()
}

func (o OnFailurePtrOutput) ToOnFailurePtrOutput() OnFailurePtrOutput {
	return o
}

func (o OnFailurePtrOutput) ToOnFailurePtrOutputWithContext(ctx context.Context) OnFailurePtrOutput {
	return o
}

func (o OnFailurePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OnFailure] {
	return pulumix.Output[*OnFailure]{
		OutputState: o.OutputState,
	}
}

func (o OnFailurePtrOutput) Elem() OnFailureOutput {
	return o.ApplyT(func(v *OnFailure) OnFailure {
		if v != nil {
			return *v
		}
		var ret OnFailure
		return ret
	}).(OnFailureOutput)
}

func (o OnFailurePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnFailurePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnFailure) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OnFailureInput is an input type that accepts OnFailureArgs and OnFailureOutput values.
// You can construct a concrete instance of `OnFailureInput` via:
//
//	OnFailureArgs{...}
type OnFailureInput interface {
	pulumi.Input

	ToOnFailureOutput() OnFailureOutput
	ToOnFailureOutputWithContext(context.Context) OnFailureOutput
}

var onFailurePtrType = reflect.TypeOf((**OnFailure)(nil)).Elem()

type OnFailurePtrInput interface {
	pulumi.Input

	ToOnFailurePtrOutput() OnFailurePtrOutput
	ToOnFailurePtrOutputWithContext(context.Context) OnFailurePtrOutput
}

type onFailurePtr string

func OnFailurePtr(v string) OnFailurePtrInput {
	return (*onFailurePtr)(&v)
}

func (*onFailurePtr) ElementType() reflect.Type {
	return onFailurePtrType
}

func (in *onFailurePtr) ToOnFailurePtrOutput() OnFailurePtrOutput {
	return pulumi.ToOutput(in).(OnFailurePtrOutput)
}

func (in *onFailurePtr) ToOnFailurePtrOutputWithContext(ctx context.Context) OnFailurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OnFailurePtrOutput)
}

func (in *onFailurePtr) ToOutput(ctx context.Context) pulumix.Output[*OnFailure] {
	return pulumix.Output[*OnFailure]{
		OutputState: in.ToOnFailurePtrOutputWithContext(ctx).OutputState,
	}
}

// Action to be taken when the operation is successful for a object.
type OnSuccess string

const (
	OnSuccessContinue = OnSuccess("continue")
)

func (OnSuccess) ElementType() reflect.Type {
	return reflect.TypeOf((*OnSuccess)(nil)).Elem()
}

func (e OnSuccess) ToOnSuccessOutput() OnSuccessOutput {
	return pulumi.ToOutput(e).(OnSuccessOutput)
}

func (e OnSuccess) ToOnSuccessOutputWithContext(ctx context.Context) OnSuccessOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OnSuccessOutput)
}

func (e OnSuccess) ToOnSuccessPtrOutput() OnSuccessPtrOutput {
	return e.ToOnSuccessPtrOutputWithContext(context.Background())
}

func (e OnSuccess) ToOnSuccessPtrOutputWithContext(ctx context.Context) OnSuccessPtrOutput {
	return OnSuccess(e).ToOnSuccessOutputWithContext(ctx).ToOnSuccessPtrOutputWithContext(ctx)
}

func (e OnSuccess) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnSuccess) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OnSuccess) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OnSuccess) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OnSuccessOutput struct{ *pulumi.OutputState }

func (OnSuccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnSuccess)(nil)).Elem()
}

func (o OnSuccessOutput) ToOnSuccessOutput() OnSuccessOutput {
	return o
}

func (o OnSuccessOutput) ToOnSuccessOutputWithContext(ctx context.Context) OnSuccessOutput {
	return o
}

func (o OnSuccessOutput) ToOnSuccessPtrOutput() OnSuccessPtrOutput {
	return o.ToOnSuccessPtrOutputWithContext(context.Background())
}

func (o OnSuccessOutput) ToOnSuccessPtrOutputWithContext(ctx context.Context) OnSuccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnSuccess) *OnSuccess {
		return &v
	}).(OnSuccessPtrOutput)
}

func (o OnSuccessOutput) ToOutput(ctx context.Context) pulumix.Output[OnSuccess] {
	return pulumix.Output[OnSuccess]{
		OutputState: o.OutputState,
	}
}

func (o OnSuccessOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OnSuccessOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnSuccess) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OnSuccessOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnSuccessOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OnSuccess) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OnSuccessPtrOutput struct{ *pulumi.OutputState }

func (OnSuccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnSuccess)(nil)).Elem()
}

func (o OnSuccessPtrOutput) ToOnSuccessPtrOutput() OnSuccessPtrOutput {
	return o
}

func (o OnSuccessPtrOutput) ToOnSuccessPtrOutputWithContext(ctx context.Context) OnSuccessPtrOutput {
	return o
}

func (o OnSuccessPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OnSuccess] {
	return pulumix.Output[*OnSuccess]{
		OutputState: o.OutputState,
	}
}

func (o OnSuccessPtrOutput) Elem() OnSuccessOutput {
	return o.ApplyT(func(v *OnSuccess) OnSuccess {
		if v != nil {
			return *v
		}
		var ret OnSuccess
		return ret
	}).(OnSuccessOutput)
}

func (o OnSuccessPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OnSuccessPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OnSuccess) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OnSuccessInput is an input type that accepts OnSuccessArgs and OnSuccessOutput values.
// You can construct a concrete instance of `OnSuccessInput` via:
//
//	OnSuccessArgs{...}
type OnSuccessInput interface {
	pulumi.Input

	ToOnSuccessOutput() OnSuccessOutput
	ToOnSuccessOutputWithContext(context.Context) OnSuccessOutput
}

var onSuccessPtrType = reflect.TypeOf((**OnSuccess)(nil)).Elem()

type OnSuccessPtrInput interface {
	pulumi.Input

	ToOnSuccessPtrOutput() OnSuccessPtrOutput
	ToOnSuccessPtrOutputWithContext(context.Context) OnSuccessPtrOutput
}

type onSuccessPtr string

func OnSuccessPtr(v string) OnSuccessPtrInput {
	return (*onSuccessPtr)(&v)
}

func (*onSuccessPtr) ElementType() reflect.Type {
	return onSuccessPtrType
}

func (in *onSuccessPtr) ToOnSuccessPtrOutput() OnSuccessPtrOutput {
	return pulumi.ToOutput(in).(OnSuccessPtrOutput)
}

func (in *onSuccessPtr) ToOnSuccessPtrOutputWithContext(ctx context.Context) OnSuccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OnSuccessPtrOutput)
}

func (in *onSuccessPtr) ToOutput(ctx context.Context) pulumix.Output[*OnSuccess] {
	return pulumix.Output[*OnSuccess]{
		OutputState: in.ToOnSuccessPtrOutputWithContext(ctx).OutputState,
	}
}

// The operation to be performed on the object.
type StorageTaskOperationName string

const (
	StorageTaskOperationNameSetBlobTier               = StorageTaskOperationName("SetBlobTier")
	StorageTaskOperationNameSetBlobTags               = StorageTaskOperationName("SetBlobTags")
	StorageTaskOperationNameSetBlobImmutabilityPolicy = StorageTaskOperationName("SetBlobImmutabilityPolicy")
	StorageTaskOperationNameSetBlobLegalHold          = StorageTaskOperationName("SetBlobLegalHold")
	StorageTaskOperationNameSetBlobExpiry             = StorageTaskOperationName("SetBlobExpiry")
	StorageTaskOperationNameDeleteBlob                = StorageTaskOperationName("DeleteBlob")
	StorageTaskOperationNameUndeleteBlob              = StorageTaskOperationName("UndeleteBlob")
)

func init() {
	pulumi.RegisterOutputType(OnFailureOutput{})
	pulumi.RegisterOutputType(OnFailurePtrOutput{})
	pulumi.RegisterOutputType(OnSuccessOutput{})
	pulumi.RegisterOutputType(OnSuccessPtrOutput{})
}
