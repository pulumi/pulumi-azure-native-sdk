// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220829preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List predefined URL categories for rulestack
func ListLocalRulestackPredefinedUrlCategories(ctx *pulumi.Context, args *ListLocalRulestackPredefinedUrlCategoriesArgs, opts ...pulumi.InvokeOption) (*ListLocalRulestackPredefinedUrlCategoriesResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListLocalRulestackPredefinedUrlCategoriesResult
	err := ctx.Invoke("azure-native:cloudngfw/v20220829preview:listLocalRulestackPredefinedUrlCategories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListLocalRulestackPredefinedUrlCategoriesArgs struct {
	// LocalRulestack resource name
	LocalRulestackName string `pulumi:"localRulestackName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string  `pulumi:"resourceGroupName"`
	Skip              *string `pulumi:"skip"`
	Top               *int    `pulumi:"top"`
}

// predefined url categories response
type ListLocalRulestackPredefinedUrlCategoriesResult struct {
	// next link
	NextLink *string `pulumi:"nextLink"`
	// predefined url categories
	Value []PredefinedUrlCategoryResponse `pulumi:"value"`
}

func ListLocalRulestackPredefinedUrlCategoriesOutput(ctx *pulumi.Context, args ListLocalRulestackPredefinedUrlCategoriesOutputArgs, opts ...pulumi.InvokeOption) ListLocalRulestackPredefinedUrlCategoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListLocalRulestackPredefinedUrlCategoriesResult, error) {
			args := v.(ListLocalRulestackPredefinedUrlCategoriesArgs)
			r, err := ListLocalRulestackPredefinedUrlCategories(ctx, &args, opts...)
			var s ListLocalRulestackPredefinedUrlCategoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListLocalRulestackPredefinedUrlCategoriesResultOutput)
}

type ListLocalRulestackPredefinedUrlCategoriesOutputArgs struct {
	// LocalRulestack resource name
	LocalRulestackName pulumi.StringInput `pulumi:"localRulestackName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput    `pulumi:"resourceGroupName"`
	Skip              pulumi.StringPtrInput `pulumi:"skip"`
	Top               pulumi.IntPtrInput    `pulumi:"top"`
}

func (ListLocalRulestackPredefinedUrlCategoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListLocalRulestackPredefinedUrlCategoriesArgs)(nil)).Elem()
}

// predefined url categories response
type ListLocalRulestackPredefinedUrlCategoriesResultOutput struct{ *pulumi.OutputState }

func (ListLocalRulestackPredefinedUrlCategoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListLocalRulestackPredefinedUrlCategoriesResult)(nil)).Elem()
}

func (o ListLocalRulestackPredefinedUrlCategoriesResultOutput) ToListLocalRulestackPredefinedUrlCategoriesResultOutput() ListLocalRulestackPredefinedUrlCategoriesResultOutput {
	return o
}

func (o ListLocalRulestackPredefinedUrlCategoriesResultOutput) ToListLocalRulestackPredefinedUrlCategoriesResultOutputWithContext(ctx context.Context) ListLocalRulestackPredefinedUrlCategoriesResultOutput {
	return o
}

// next link
func (o ListLocalRulestackPredefinedUrlCategoriesResultOutput) NextLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListLocalRulestackPredefinedUrlCategoriesResult) *string { return v.NextLink }).(pulumi.StringPtrOutput)
}

// predefined url categories
func (o ListLocalRulestackPredefinedUrlCategoriesResultOutput) Value() PredefinedUrlCategoryResponseArrayOutput {
	return o.ApplyT(func(v ListLocalRulestackPredefinedUrlCategoriesResult) []PredefinedUrlCategoryResponse {
		return v.Value
	}).(PredefinedUrlCategoryResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListLocalRulestackPredefinedUrlCategoriesResultOutput{})
}
