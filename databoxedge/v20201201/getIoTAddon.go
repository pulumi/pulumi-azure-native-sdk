// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20201201

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a specific addon by name.
func GetIoTAddon(ctx *pulumi.Context, args *GetIoTAddonArgs, opts ...pulumi.InvokeOption) (*GetIoTAddonResult, error) {
	var rv GetIoTAddonResult
	err := ctx.Invoke("azure-native:databoxedge/v20201201:getIoTAddon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetIoTAddonArgs struct {
	// The addon name.
	AddonName string `pulumi:"addonName"`
	// The device name.
	DeviceName string `pulumi:"deviceName"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The role name.
	RoleName string `pulumi:"roleName"`
}

// IoT Addon.
type GetIoTAddonResult struct {
	// Host OS supported by the IoT addon.
	HostPlatform string `pulumi:"hostPlatform"`
	// Platform where the runtime is hosted.
	HostPlatformType string `pulumi:"hostPlatformType"`
	// The path ID that uniquely identifies the object.
	Id string `pulumi:"id"`
	// IoT device metadata to which appliance needs to be connected.
	IoTDeviceDetails IoTDeviceInfoResponse `pulumi:"ioTDeviceDetails"`
	// IoT edge device to which the IoT Addon needs to be configured.
	IoTEdgeDeviceDetails IoTDeviceInfoResponse `pulumi:"ioTEdgeDeviceDetails"`
	// Addon type.
	// Expected value is 'IotEdge'.
	Kind string `pulumi:"kind"`
	// The object name.
	Name string `pulumi:"name"`
	// Addon Provisioning State
	ProvisioningState string `pulumi:"provisioningState"`
	// Addon type
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The hierarchical type of the object.
	Type string `pulumi:"type"`
	// Version of IoT running on the appliance.
	Version string `pulumi:"version"`
}

func GetIoTAddonOutput(ctx *pulumi.Context, args GetIoTAddonOutputArgs, opts ...pulumi.InvokeOption) GetIoTAddonResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIoTAddonResult, error) {
			args := v.(GetIoTAddonArgs)
			r, err := GetIoTAddon(ctx, &args, opts...)
			var s GetIoTAddonResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIoTAddonResultOutput)
}

type GetIoTAddonOutputArgs struct {
	// The addon name.
	AddonName pulumi.StringInput `pulumi:"addonName"`
	// The device name.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	// The resource group name.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The role name.
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (GetIoTAddonOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIoTAddonArgs)(nil)).Elem()
}

// IoT Addon.
type GetIoTAddonResultOutput struct{ *pulumi.OutputState }

func (GetIoTAddonResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIoTAddonResult)(nil)).Elem()
}

func (o GetIoTAddonResultOutput) ToGetIoTAddonResultOutput() GetIoTAddonResultOutput {
	return o
}

func (o GetIoTAddonResultOutput) ToGetIoTAddonResultOutputWithContext(ctx context.Context) GetIoTAddonResultOutput {
	return o
}

// Host OS supported by the IoT addon.
func (o GetIoTAddonResultOutput) HostPlatform() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.HostPlatform }).(pulumi.StringOutput)
}

// Platform where the runtime is hosted.
func (o GetIoTAddonResultOutput) HostPlatformType() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.HostPlatformType }).(pulumi.StringOutput)
}

// The path ID that uniquely identifies the object.
func (o GetIoTAddonResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.Id }).(pulumi.StringOutput)
}

// IoT device metadata to which appliance needs to be connected.
func (o GetIoTAddonResultOutput) IoTDeviceDetails() IoTDeviceInfoResponseOutput {
	return o.ApplyT(func(v GetIoTAddonResult) IoTDeviceInfoResponse { return v.IoTDeviceDetails }).(IoTDeviceInfoResponseOutput)
}

// IoT edge device to which the IoT Addon needs to be configured.
func (o GetIoTAddonResultOutput) IoTEdgeDeviceDetails() IoTDeviceInfoResponseOutput {
	return o.ApplyT(func(v GetIoTAddonResult) IoTDeviceInfoResponse { return v.IoTEdgeDeviceDetails }).(IoTDeviceInfoResponseOutput)
}

// Addon type.
// Expected value is 'IotEdge'.
func (o GetIoTAddonResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.Kind }).(pulumi.StringOutput)
}

// The object name.
func (o GetIoTAddonResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.Name }).(pulumi.StringOutput)
}

// Addon Provisioning State
func (o GetIoTAddonResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Addon type
func (o GetIoTAddonResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v GetIoTAddonResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The hierarchical type of the object.
func (o GetIoTAddonResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.Type }).(pulumi.StringOutput)
}

// Version of IoT running on the appliance.
func (o GetIoTAddonResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetIoTAddonResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIoTAddonResultOutput{})
}
