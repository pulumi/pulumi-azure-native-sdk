// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The shipping address of the customer.
type Address struct {
	// The address line1.
	AddressLine1 string `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 *string `pulumi:"addressLine3"`
	// The city name.
	City string `pulumi:"city"`
	// The country name.
	Country string `pulumi:"country"`
	// The postal code.
	PostalCode string `pulumi:"postalCode"`
	// The state name.
	State string `pulumi:"state"`
}

// AddressInput is an input type that accepts AddressArgs and AddressOutput values.
// You can construct a concrete instance of `AddressInput` via:
//
//	AddressArgs{...}
type AddressInput interface {
	pulumi.Input

	ToAddressOutput() AddressOutput
	ToAddressOutputWithContext(context.Context) AddressOutput
}

// The shipping address of the customer.
type AddressArgs struct {
	// The address line1.
	AddressLine1 pulumi.StringInput `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 pulumi.StringPtrInput `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 pulumi.StringPtrInput `pulumi:"addressLine3"`
	// The city name.
	City pulumi.StringInput `pulumi:"city"`
	// The country name.
	Country pulumi.StringInput `pulumi:"country"`
	// The postal code.
	PostalCode pulumi.StringInput `pulumi:"postalCode"`
	// The state name.
	State pulumi.StringInput `pulumi:"state"`
}

func (AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Address)(nil)).Elem()
}

func (i AddressArgs) ToAddressOutput() AddressOutput {
	return i.ToAddressOutputWithContext(context.Background())
}

func (i AddressArgs) ToAddressOutputWithContext(ctx context.Context) AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressOutput)
}

// The shipping address of the customer.
type AddressOutput struct{ *pulumi.OutputState }

func (AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Address)(nil)).Elem()
}

func (o AddressOutput) ToAddressOutput() AddressOutput {
	return o
}

func (o AddressOutput) ToAddressOutputWithContext(ctx context.Context) AddressOutput {
	return o
}

// The address line1.
func (o AddressOutput) AddressLine1() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.AddressLine1 }).(pulumi.StringOutput)
}

// The address line2.
func (o AddressOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.AddressLine2 }).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.AddressLine3 }).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.City }).(pulumi.StringOutput)
}

// The country name.
func (o AddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.Country }).(pulumi.StringOutput)
}

// The postal code.
func (o AddressOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.PostalCode }).(pulumi.StringOutput)
}

// The state name.
func (o AddressOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.State }).(pulumi.StringOutput)
}

// The shipping address of the customer.
type AddressResponse struct {
	// The address line1.
	AddressLine1 string `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 *string `pulumi:"addressLine3"`
	// The city name.
	City string `pulumi:"city"`
	// The country name.
	Country string `pulumi:"country"`
	// The postal code.
	PostalCode string `pulumi:"postalCode"`
	// The state name.
	State string `pulumi:"state"`
}

// The shipping address of the customer.
type AddressResponseOutput struct{ *pulumi.OutputState }

func (AddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressResponse)(nil)).Elem()
}

func (o AddressResponseOutput) ToAddressResponseOutput() AddressResponseOutput {
	return o
}

func (o AddressResponseOutput) ToAddressResponseOutputWithContext(ctx context.Context) AddressResponseOutput {
	return o
}

// The address line1.
func (o AddressResponseOutput) AddressLine1() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.AddressLine1 }).(pulumi.StringOutput)
}

// The address line2.
func (o AddressResponseOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.AddressLine2 }).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressResponseOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.AddressLine3 }).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressResponseOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.City }).(pulumi.StringOutput)
}

// The country name.
func (o AddressResponseOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.Country }).(pulumi.StringOutput)
}

// The postal code.
func (o AddressResponseOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.PostalCode }).(pulumi.StringOutput)
}

// The state name.
func (o AddressResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.State }).(pulumi.StringOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecret struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
	EncryptionCertThumbprint *string `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value string `pulumi:"value"`
}

// AsymmetricEncryptedSecretInput is an input type that accepts AsymmetricEncryptedSecretArgs and AsymmetricEncryptedSecretOutput values.
// You can construct a concrete instance of `AsymmetricEncryptedSecretInput` via:
//
//	AsymmetricEncryptedSecretArgs{...}
type AsymmetricEncryptedSecretInput interface {
	pulumi.Input

	ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput
	ToAsymmetricEncryptedSecretOutputWithContext(context.Context) AsymmetricEncryptedSecretOutput
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretArgs struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm pulumi.StringInput `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
	EncryptionCertThumbprint pulumi.StringPtrInput `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AsymmetricEncryptedSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecret)(nil)).Elem()
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput {
	return i.ToAsymmetricEncryptedSecretOutputWithContext(context.Background())
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretOutput)
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return i.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (i AsymmetricEncryptedSecretArgs) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretOutput).ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx)
}

// AsymmetricEncryptedSecretPtrInput is an input type that accepts AsymmetricEncryptedSecretArgs, AsymmetricEncryptedSecretPtr and AsymmetricEncryptedSecretPtrOutput values.
// You can construct a concrete instance of `AsymmetricEncryptedSecretPtrInput` via:
//
//	        AsymmetricEncryptedSecretArgs{...}
//
//	or:
//
//	        nil
type AsymmetricEncryptedSecretPtrInput interface {
	pulumi.Input

	ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput
	ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Context) AsymmetricEncryptedSecretPtrOutput
}

type asymmetricEncryptedSecretPtrType AsymmetricEncryptedSecretArgs

func AsymmetricEncryptedSecretPtr(v *AsymmetricEncryptedSecretArgs) AsymmetricEncryptedSecretPtrInput {
	return (*asymmetricEncryptedSecretPtrType)(v)
}

func (*asymmetricEncryptedSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecret)(nil)).Elem()
}

func (i *asymmetricEncryptedSecretPtrType) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return i.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (i *asymmetricEncryptedSecretPtrType) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AsymmetricEncryptedSecretPtrOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecret)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretOutput() AsymmetricEncryptedSecretOutput {
	return o
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretOutput {
	return o
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return o.ToAsymmetricEncryptedSecretPtrOutputWithContext(context.Background())
}

func (o AsymmetricEncryptedSecretOutput) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AsymmetricEncryptedSecret) *AsymmetricEncryptedSecret {
		return &v
	}).(AsymmetricEncryptedSecretPtrOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) *string { return v.EncryptionCertThumbprint }).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecret) string { return v.Value }).(pulumi.StringOutput)
}

type AsymmetricEncryptedSecretPtrOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecret)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretPtrOutput) ToAsymmetricEncryptedSecretPtrOutput() AsymmetricEncryptedSecretPtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretPtrOutput) ToAsymmetricEncryptedSecretPtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretPtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretPtrOutput) Elem() AsymmetricEncryptedSecretOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) AsymmetricEncryptedSecret {
		if v != nil {
			return *v
		}
		var ret AsymmetricEncryptedSecret
		return ret
	}).(AsymmetricEncryptedSecretOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretPtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretPtrOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertThumbprint
	}).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecret) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponse struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
	EncryptionCertThumbprint *string `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value string `pulumi:"value"`
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponseOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutput() AsymmetricEncryptedSecretResponseOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponseOutput {
	return o
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) *string { return v.EncryptionCertThumbprint }).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.Value }).(pulumi.StringOutput)
}

type AsymmetricEncryptedSecretResponsePtrOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutput() AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) Elem() AsymmetricEncryptedSecretResponseOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) AsymmetricEncryptedSecretResponse {
		if v != nil {
			return *v
		}
		var ret AsymmetricEncryptedSecretResponse
		return ret
	}).(AsymmetricEncryptedSecretResponseOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertThumbprint
	}).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Authentication mechanism for IoT devices.
type Authentication struct {
	// Symmetric key for authentication.
	SymmetricKey *SymmetricKey `pulumi:"symmetricKey"`
}

// AuthenticationInput is an input type that accepts AuthenticationArgs and AuthenticationOutput values.
// You can construct a concrete instance of `AuthenticationInput` via:
//
//	AuthenticationArgs{...}
type AuthenticationInput interface {
	pulumi.Input

	ToAuthenticationOutput() AuthenticationOutput
	ToAuthenticationOutputWithContext(context.Context) AuthenticationOutput
}

// Authentication mechanism for IoT devices.
type AuthenticationArgs struct {
	// Symmetric key for authentication.
	SymmetricKey SymmetricKeyPtrInput `pulumi:"symmetricKey"`
}

func (AuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (i AuthenticationArgs) ToAuthenticationOutput() AuthenticationOutput {
	return i.ToAuthenticationOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput)
}

func (i AuthenticationArgs) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i AuthenticationArgs) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationOutput).ToAuthenticationPtrOutputWithContext(ctx)
}

// AuthenticationPtrInput is an input type that accepts AuthenticationArgs, AuthenticationPtr and AuthenticationPtrOutput values.
// You can construct a concrete instance of `AuthenticationPtrInput` via:
//
//	        AuthenticationArgs{...}
//
//	or:
//
//	        nil
type AuthenticationPtrInput interface {
	pulumi.Input

	ToAuthenticationPtrOutput() AuthenticationPtrOutput
	ToAuthenticationPtrOutputWithContext(context.Context) AuthenticationPtrOutput
}

type authenticationPtrType AuthenticationArgs

func AuthenticationPtr(v *AuthenticationArgs) AuthenticationPtrInput {
	return (*authenticationPtrType)(v)
}

func (*authenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (i *authenticationPtrType) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return i.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (i *authenticationPtrType) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticationPtrOutput)
}

// Authentication mechanism for IoT devices.
type AuthenticationOutput struct{ *pulumi.OutputState }

func (AuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authentication)(nil)).Elem()
}

func (o AuthenticationOutput) ToAuthenticationOutput() AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationOutputWithContext(ctx context.Context) AuthenticationOutput {
	return o
}

func (o AuthenticationOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o.ToAuthenticationPtrOutputWithContext(context.Background())
}

func (o AuthenticationOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authentication) *Authentication {
		return &v
	}).(AuthenticationPtrOutput)
}

// Symmetric key for authentication.
func (o AuthenticationOutput) SymmetricKey() SymmetricKeyPtrOutput {
	return o.ApplyT(func(v Authentication) *SymmetricKey { return v.SymmetricKey }).(SymmetricKeyPtrOutput)
}

type AuthenticationPtrOutput struct{ *pulumi.OutputState }

func (AuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authentication)(nil)).Elem()
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutput() AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) ToAuthenticationPtrOutputWithContext(ctx context.Context) AuthenticationPtrOutput {
	return o
}

func (o AuthenticationPtrOutput) Elem() AuthenticationOutput {
	return o.ApplyT(func(v *Authentication) Authentication {
		if v != nil {
			return *v
		}
		var ret Authentication
		return ret
	}).(AuthenticationOutput)
}

// Symmetric key for authentication.
func (o AuthenticationPtrOutput) SymmetricKey() SymmetricKeyPtrOutput {
	return o.ApplyT(func(v *Authentication) *SymmetricKey {
		if v == nil {
			return nil
		}
		return v.SymmetricKey
	}).(SymmetricKeyPtrOutput)
}

// Authentication mechanism for IoT devices.
type AuthenticationResponse struct {
	// Symmetric key for authentication.
	SymmetricKey *SymmetricKeyResponse `pulumi:"symmetricKey"`
}

// Authentication mechanism for IoT devices.
type AuthenticationResponseOutput struct{ *pulumi.OutputState }

func (AuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationResponse)(nil)).Elem()
}

func (o AuthenticationResponseOutput) ToAuthenticationResponseOutput() AuthenticationResponseOutput {
	return o
}

func (o AuthenticationResponseOutput) ToAuthenticationResponseOutputWithContext(ctx context.Context) AuthenticationResponseOutput {
	return o
}

// Symmetric key for authentication.
func (o AuthenticationResponseOutput) SymmetricKey() SymmetricKeyResponsePtrOutput {
	return o.ApplyT(func(v AuthenticationResponse) *SymmetricKeyResponse { return v.SymmetricKey }).(SymmetricKeyResponsePtrOutput)
}

type AuthenticationResponsePtrOutput struct{ *pulumi.OutputState }

func (AuthenticationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationResponse)(nil)).Elem()
}

func (o AuthenticationResponsePtrOutput) ToAuthenticationResponsePtrOutput() AuthenticationResponsePtrOutput {
	return o
}

func (o AuthenticationResponsePtrOutput) ToAuthenticationResponsePtrOutputWithContext(ctx context.Context) AuthenticationResponsePtrOutput {
	return o
}

func (o AuthenticationResponsePtrOutput) Elem() AuthenticationResponseOutput {
	return o.ApplyT(func(v *AuthenticationResponse) AuthenticationResponse {
		if v != nil {
			return *v
		}
		var ret AuthenticationResponse
		return ret
	}).(AuthenticationResponseOutput)
}

// Symmetric key for authentication.
func (o AuthenticationResponsePtrOutput) SymmetricKey() SymmetricKeyResponsePtrOutput {
	return o.ApplyT(func(v *AuthenticationResponse) *SymmetricKeyResponse {
		if v == nil {
			return nil
		}
		return v.SymmetricKey
	}).(SymmetricKeyResponsePtrOutput)
}

// Contains all the contact details of the customer.
type ContactDetails struct {
	// The name of the company.
	CompanyName string `pulumi:"companyName"`
	// The contact person name.
	ContactPerson string `pulumi:"contactPerson"`
	// The email list.
	EmailList []string `pulumi:"emailList"`
	// The phone number.
	Phone string `pulumi:"phone"`
}

// ContactDetailsInput is an input type that accepts ContactDetailsArgs and ContactDetailsOutput values.
// You can construct a concrete instance of `ContactDetailsInput` via:
//
//	ContactDetailsArgs{...}
type ContactDetailsInput interface {
	pulumi.Input

	ToContactDetailsOutput() ContactDetailsOutput
	ToContactDetailsOutputWithContext(context.Context) ContactDetailsOutput
}

// Contains all the contact details of the customer.
type ContactDetailsArgs struct {
	// The name of the company.
	CompanyName pulumi.StringInput `pulumi:"companyName"`
	// The contact person name.
	ContactPerson pulumi.StringInput `pulumi:"contactPerson"`
	// The email list.
	EmailList pulumi.StringArrayInput `pulumi:"emailList"`
	// The phone number.
	Phone pulumi.StringInput `pulumi:"phone"`
}

func (ContactDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetails)(nil)).Elem()
}

func (i ContactDetailsArgs) ToContactDetailsOutput() ContactDetailsOutput {
	return i.ToContactDetailsOutputWithContext(context.Background())
}

func (i ContactDetailsArgs) ToContactDetailsOutputWithContext(ctx context.Context) ContactDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailsOutput)
}

// Contains all the contact details of the customer.
type ContactDetailsOutput struct{ *pulumi.OutputState }

func (ContactDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetails)(nil)).Elem()
}

func (o ContactDetailsOutput) ToContactDetailsOutput() ContactDetailsOutput {
	return o
}

func (o ContactDetailsOutput) ToContactDetailsOutputWithContext(ctx context.Context) ContactDetailsOutput {
	return o
}

// The name of the company.
func (o ContactDetailsOutput) CompanyName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.CompanyName }).(pulumi.StringOutput)
}

// The contact person name.
func (o ContactDetailsOutput) ContactPerson() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.ContactPerson }).(pulumi.StringOutput)
}

// The email list.
func (o ContactDetailsOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactDetails) []string { return v.EmailList }).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.Phone }).(pulumi.StringOutput)
}

// Contains all the contact details of the customer.
type ContactDetailsResponse struct {
	// The name of the company.
	CompanyName string `pulumi:"companyName"`
	// The contact person name.
	ContactPerson string `pulumi:"contactPerson"`
	// The email list.
	EmailList []string `pulumi:"emailList"`
	// The phone number.
	Phone string `pulumi:"phone"`
}

// Contains all the contact details of the customer.
type ContactDetailsResponseOutput struct{ *pulumi.OutputState }

func (ContactDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetailsResponse)(nil)).Elem()
}

func (o ContactDetailsResponseOutput) ToContactDetailsResponseOutput() ContactDetailsResponseOutput {
	return o
}

func (o ContactDetailsResponseOutput) ToContactDetailsResponseOutputWithContext(ctx context.Context) ContactDetailsResponseOutput {
	return o
}

// The name of the company.
func (o ContactDetailsResponseOutput) CompanyName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.CompanyName }).(pulumi.StringOutput)
}

// The contact person name.
func (o ContactDetailsResponseOutput) ContactPerson() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.ContactPerson }).(pulumi.StringOutput)
}

// The email list.
func (o ContactDetailsResponseOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactDetailsResponse) []string { return v.EmailList }).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsResponseOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.Phone }).(pulumi.StringOutput)
}

// File source details.
type FileSourceInfo struct {
	// File share ID.
	ShareId string `pulumi:"shareId"`
}

// FileSourceInfoInput is an input type that accepts FileSourceInfoArgs and FileSourceInfoOutput values.
// You can construct a concrete instance of `FileSourceInfoInput` via:
//
//	FileSourceInfoArgs{...}
type FileSourceInfoInput interface {
	pulumi.Input

	ToFileSourceInfoOutput() FileSourceInfoOutput
	ToFileSourceInfoOutputWithContext(context.Context) FileSourceInfoOutput
}

// File source details.
type FileSourceInfoArgs struct {
	// File share ID.
	ShareId pulumi.StringInput `pulumi:"shareId"`
}

func (FileSourceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceInfo)(nil)).Elem()
}

func (i FileSourceInfoArgs) ToFileSourceInfoOutput() FileSourceInfoOutput {
	return i.ToFileSourceInfoOutputWithContext(context.Background())
}

func (i FileSourceInfoArgs) ToFileSourceInfoOutputWithContext(ctx context.Context) FileSourceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSourceInfoOutput)
}

// File source details.
type FileSourceInfoOutput struct{ *pulumi.OutputState }

func (FileSourceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceInfo)(nil)).Elem()
}

func (o FileSourceInfoOutput) ToFileSourceInfoOutput() FileSourceInfoOutput {
	return o
}

func (o FileSourceInfoOutput) ToFileSourceInfoOutputWithContext(ctx context.Context) FileSourceInfoOutput {
	return o
}

// File share ID.
func (o FileSourceInfoOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v FileSourceInfo) string { return v.ShareId }).(pulumi.StringOutput)
}

// File source details.
type FileSourceInfoResponse struct {
	// File share ID.
	ShareId string `pulumi:"shareId"`
}

// File source details.
type FileSourceInfoResponseOutput struct{ *pulumi.OutputState }

func (FileSourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSourceInfoResponse)(nil)).Elem()
}

func (o FileSourceInfoResponseOutput) ToFileSourceInfoResponseOutput() FileSourceInfoResponseOutput {
	return o
}

func (o FileSourceInfoResponseOutput) ToFileSourceInfoResponseOutputWithContext(ctx context.Context) FileSourceInfoResponseOutput {
	return o
}

// File share ID.
func (o FileSourceInfoResponseOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v FileSourceInfoResponse) string { return v.ShareId }).(pulumi.StringOutput)
}

// Image repository credential.
type ImageRepositoryCredential struct {
	// Image repository url (e.g.: mcr.microsoft.com).
	ImageRepositoryUrl string `pulumi:"imageRepositoryUrl"`
	// Repository user password.
	Password *AsymmetricEncryptedSecret `pulumi:"password"`
	// Repository user name.
	UserName string `pulumi:"userName"`
}

// ImageRepositoryCredentialInput is an input type that accepts ImageRepositoryCredentialArgs and ImageRepositoryCredentialOutput values.
// You can construct a concrete instance of `ImageRepositoryCredentialInput` via:
//
//	ImageRepositoryCredentialArgs{...}
type ImageRepositoryCredentialInput interface {
	pulumi.Input

	ToImageRepositoryCredentialOutput() ImageRepositoryCredentialOutput
	ToImageRepositoryCredentialOutputWithContext(context.Context) ImageRepositoryCredentialOutput
}

// Image repository credential.
type ImageRepositoryCredentialArgs struct {
	// Image repository url (e.g.: mcr.microsoft.com).
	ImageRepositoryUrl pulumi.StringInput `pulumi:"imageRepositoryUrl"`
	// Repository user password.
	Password AsymmetricEncryptedSecretPtrInput `pulumi:"password"`
	// Repository user name.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (ImageRepositoryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredential)(nil)).Elem()
}

func (i ImageRepositoryCredentialArgs) ToImageRepositoryCredentialOutput() ImageRepositoryCredentialOutput {
	return i.ToImageRepositoryCredentialOutputWithContext(context.Background())
}

func (i ImageRepositoryCredentialArgs) ToImageRepositoryCredentialOutputWithContext(ctx context.Context) ImageRepositoryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialOutput)
}

func (i ImageRepositoryCredentialArgs) ToImageRepositoryCredentialPtrOutput() ImageRepositoryCredentialPtrOutput {
	return i.ToImageRepositoryCredentialPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryCredentialArgs) ToImageRepositoryCredentialPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialOutput).ToImageRepositoryCredentialPtrOutputWithContext(ctx)
}

// ImageRepositoryCredentialPtrInput is an input type that accepts ImageRepositoryCredentialArgs, ImageRepositoryCredentialPtr and ImageRepositoryCredentialPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryCredentialPtrInput` via:
//
//	        ImageRepositoryCredentialArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryCredentialPtrInput interface {
	pulumi.Input

	ToImageRepositoryCredentialPtrOutput() ImageRepositoryCredentialPtrOutput
	ToImageRepositoryCredentialPtrOutputWithContext(context.Context) ImageRepositoryCredentialPtrOutput
}

type imageRepositoryCredentialPtrType ImageRepositoryCredentialArgs

func ImageRepositoryCredentialPtr(v *ImageRepositoryCredentialArgs) ImageRepositoryCredentialPtrInput {
	return (*imageRepositoryCredentialPtrType)(v)
}

func (*imageRepositoryCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredential)(nil)).Elem()
}

func (i *imageRepositoryCredentialPtrType) ToImageRepositoryCredentialPtrOutput() ImageRepositoryCredentialPtrOutput {
	return i.ToImageRepositoryCredentialPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryCredentialPtrType) ToImageRepositoryCredentialPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialPtrOutput)
}

// Image repository credential.
type ImageRepositoryCredentialOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredential)(nil)).Elem()
}

func (o ImageRepositoryCredentialOutput) ToImageRepositoryCredentialOutput() ImageRepositoryCredentialOutput {
	return o
}

func (o ImageRepositoryCredentialOutput) ToImageRepositoryCredentialOutputWithContext(ctx context.Context) ImageRepositoryCredentialOutput {
	return o
}

func (o ImageRepositoryCredentialOutput) ToImageRepositoryCredentialPtrOutput() ImageRepositoryCredentialPtrOutput {
	return o.ToImageRepositoryCredentialPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryCredentialOutput) ToImageRepositoryCredentialPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryCredential) *ImageRepositoryCredential {
		return &v
	}).(ImageRepositoryCredentialPtrOutput)
}

// Image repository url (e.g.: mcr.microsoft.com).
func (o ImageRepositoryCredentialOutput) ImageRepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredential) string { return v.ImageRepositoryUrl }).(pulumi.StringOutput)
}

// Repository user password.
func (o ImageRepositoryCredentialOutput) Password() AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyT(func(v ImageRepositoryCredential) *AsymmetricEncryptedSecret { return v.Password }).(AsymmetricEncryptedSecretPtrOutput)
}

// Repository user name.
func (o ImageRepositoryCredentialOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredential) string { return v.UserName }).(pulumi.StringOutput)
}

type ImageRepositoryCredentialPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredential)(nil)).Elem()
}

func (o ImageRepositoryCredentialPtrOutput) ToImageRepositoryCredentialPtrOutput() ImageRepositoryCredentialPtrOutput {
	return o
}

func (o ImageRepositoryCredentialPtrOutput) ToImageRepositoryCredentialPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialPtrOutput {
	return o
}

func (o ImageRepositoryCredentialPtrOutput) Elem() ImageRepositoryCredentialOutput {
	return o.ApplyT(func(v *ImageRepositoryCredential) ImageRepositoryCredential {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryCredential
		return ret
	}).(ImageRepositoryCredentialOutput)
}

// Image repository url (e.g.: mcr.microsoft.com).
func (o ImageRepositoryCredentialPtrOutput) ImageRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.ImageRepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// Repository user password.
func (o ImageRepositoryCredentialPtrOutput) Password() AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredential) *AsymmetricEncryptedSecret {
		if v == nil {
			return nil
		}
		return v.Password
	}).(AsymmetricEncryptedSecretPtrOutput)
}

// Repository user name.
func (o ImageRepositoryCredentialPtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

// Image repository credential.
type ImageRepositoryCredentialResponse struct {
	// Image repository url (e.g.: mcr.microsoft.com).
	ImageRepositoryUrl string `pulumi:"imageRepositoryUrl"`
	// Repository user password.
	Password *AsymmetricEncryptedSecretResponse `pulumi:"password"`
	// Repository user name.
	UserName string `pulumi:"userName"`
}

// Image repository credential.
type ImageRepositoryCredentialResponseOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredentialResponse)(nil)).Elem()
}

func (o ImageRepositoryCredentialResponseOutput) ToImageRepositoryCredentialResponseOutput() ImageRepositoryCredentialResponseOutput {
	return o
}

func (o ImageRepositoryCredentialResponseOutput) ToImageRepositoryCredentialResponseOutputWithContext(ctx context.Context) ImageRepositoryCredentialResponseOutput {
	return o
}

// Image repository url (e.g.: mcr.microsoft.com).
func (o ImageRepositoryCredentialResponseOutput) ImageRepositoryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialResponse) string { return v.ImageRepositoryUrl }).(pulumi.StringOutput)
}

// Repository user password.
func (o ImageRepositoryCredentialResponseOutput) Password() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialResponse) *AsymmetricEncryptedSecretResponse { return v.Password }).(AsymmetricEncryptedSecretResponsePtrOutput)
}

// Repository user name.
func (o ImageRepositoryCredentialResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type ImageRepositoryCredentialResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredentialResponse)(nil)).Elem()
}

func (o ImageRepositoryCredentialResponsePtrOutput) ToImageRepositoryCredentialResponsePtrOutput() ImageRepositoryCredentialResponsePtrOutput {
	return o
}

func (o ImageRepositoryCredentialResponsePtrOutput) ToImageRepositoryCredentialResponsePtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialResponsePtrOutput {
	return o
}

func (o ImageRepositoryCredentialResponsePtrOutput) Elem() ImageRepositoryCredentialResponseOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialResponse) ImageRepositoryCredentialResponse {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryCredentialResponse
		return ret
	}).(ImageRepositoryCredentialResponseOutput)
}

// Image repository url (e.g.: mcr.microsoft.com).
func (o ImageRepositoryCredentialResponsePtrOutput) ImageRepositoryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageRepositoryUrl
	}).(pulumi.StringPtrOutput)
}

// Repository user password.
func (o ImageRepositoryCredentialResponsePtrOutput) Password() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialResponse) *AsymmetricEncryptedSecretResponse {
		if v == nil {
			return nil
		}
		return v.Password
	}).(AsymmetricEncryptedSecretResponsePtrOutput)
}

// Repository user name.
func (o ImageRepositoryCredentialResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

// Metadata of IoT device/IoT Edge device to be configured.
type IoTDeviceInfo struct {
	// Encrypted IoT device/IoT edge device connection string.
	Authentication *Authentication `pulumi:"authentication"`
	// ID of the IoT device/edge device.
	DeviceId string `pulumi:"deviceId"`
	// Host name for the IoT hub associated to the device.
	IoTHostHub string `pulumi:"ioTHostHub"`
	// Id for the IoT hub associated to the device.
	IoTHostHubId *string `pulumi:"ioTHostHubId"`
}

// IoTDeviceInfoInput is an input type that accepts IoTDeviceInfoArgs and IoTDeviceInfoOutput values.
// You can construct a concrete instance of `IoTDeviceInfoInput` via:
//
//	IoTDeviceInfoArgs{...}
type IoTDeviceInfoInput interface {
	pulumi.Input

	ToIoTDeviceInfoOutput() IoTDeviceInfoOutput
	ToIoTDeviceInfoOutputWithContext(context.Context) IoTDeviceInfoOutput
}

// Metadata of IoT device/IoT Edge device to be configured.
type IoTDeviceInfoArgs struct {
	// Encrypted IoT device/IoT edge device connection string.
	Authentication AuthenticationPtrInput `pulumi:"authentication"`
	// ID of the IoT device/edge device.
	DeviceId pulumi.StringInput `pulumi:"deviceId"`
	// Host name for the IoT hub associated to the device.
	IoTHostHub pulumi.StringInput `pulumi:"ioTHostHub"`
	// Id for the IoT hub associated to the device.
	IoTHostHubId pulumi.StringPtrInput `pulumi:"ioTHostHubId"`
}

func (IoTDeviceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTDeviceInfo)(nil)).Elem()
}

func (i IoTDeviceInfoArgs) ToIoTDeviceInfoOutput() IoTDeviceInfoOutput {
	return i.ToIoTDeviceInfoOutputWithContext(context.Background())
}

func (i IoTDeviceInfoArgs) ToIoTDeviceInfoOutputWithContext(ctx context.Context) IoTDeviceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTDeviceInfoOutput)
}

// Metadata of IoT device/IoT Edge device to be configured.
type IoTDeviceInfoOutput struct{ *pulumi.OutputState }

func (IoTDeviceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTDeviceInfo)(nil)).Elem()
}

func (o IoTDeviceInfoOutput) ToIoTDeviceInfoOutput() IoTDeviceInfoOutput {
	return o
}

func (o IoTDeviceInfoOutput) ToIoTDeviceInfoOutputWithContext(ctx context.Context) IoTDeviceInfoOutput {
	return o
}

// Encrypted IoT device/IoT edge device connection string.
func (o IoTDeviceInfoOutput) Authentication() AuthenticationPtrOutput {
	return o.ApplyT(func(v IoTDeviceInfo) *Authentication { return v.Authentication }).(AuthenticationPtrOutput)
}

// ID of the IoT device/edge device.
func (o IoTDeviceInfoOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v IoTDeviceInfo) string { return v.DeviceId }).(pulumi.StringOutput)
}

// Host name for the IoT hub associated to the device.
func (o IoTDeviceInfoOutput) IoTHostHub() pulumi.StringOutput {
	return o.ApplyT(func(v IoTDeviceInfo) string { return v.IoTHostHub }).(pulumi.StringOutput)
}

// Id for the IoT hub associated to the device.
func (o IoTDeviceInfoOutput) IoTHostHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTDeviceInfo) *string { return v.IoTHostHubId }).(pulumi.StringPtrOutput)
}

// Metadata of IoT device/IoT Edge device to be configured.
type IoTDeviceInfoResponse struct {
	// Encrypted IoT device/IoT edge device connection string.
	Authentication *AuthenticationResponse `pulumi:"authentication"`
	// ID of the IoT device/edge device.
	DeviceId string `pulumi:"deviceId"`
	// Host name for the IoT hub associated to the device.
	IoTHostHub string `pulumi:"ioTHostHub"`
	// Id for the IoT hub associated to the device.
	IoTHostHubId *string `pulumi:"ioTHostHubId"`
}

// Metadata of IoT device/IoT Edge device to be configured.
type IoTDeviceInfoResponseOutput struct{ *pulumi.OutputState }

func (IoTDeviceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTDeviceInfoResponse)(nil)).Elem()
}

func (o IoTDeviceInfoResponseOutput) ToIoTDeviceInfoResponseOutput() IoTDeviceInfoResponseOutput {
	return o
}

func (o IoTDeviceInfoResponseOutput) ToIoTDeviceInfoResponseOutputWithContext(ctx context.Context) IoTDeviceInfoResponseOutput {
	return o
}

// Encrypted IoT device/IoT edge device connection string.
func (o IoTDeviceInfoResponseOutput) Authentication() AuthenticationResponsePtrOutput {
	return o.ApplyT(func(v IoTDeviceInfoResponse) *AuthenticationResponse { return v.Authentication }).(AuthenticationResponsePtrOutput)
}

// ID of the IoT device/edge device.
func (o IoTDeviceInfoResponseOutput) DeviceId() pulumi.StringOutput {
	return o.ApplyT(func(v IoTDeviceInfoResponse) string { return v.DeviceId }).(pulumi.StringOutput)
}

// Host name for the IoT hub associated to the device.
func (o IoTDeviceInfoResponseOutput) IoTHostHub() pulumi.StringOutput {
	return o.ApplyT(func(v IoTDeviceInfoResponse) string { return v.IoTHostHub }).(pulumi.StringOutput)
}

// Id for the IoT hub associated to the device.
func (o IoTDeviceInfoResponseOutput) IoTHostHubId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTDeviceInfoResponse) *string { return v.IoTHostHubId }).(pulumi.StringPtrOutput)
}

// IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified.
type IoTEdgeAgentInfo struct {
	// Name of the IoT edge agent image.
	ImageName string `pulumi:"imageName"`
	// Image repository details.
	ImageRepository *ImageRepositoryCredential `pulumi:"imageRepository"`
	// Image Tag.
	Tag string `pulumi:"tag"`
}

// IoTEdgeAgentInfoInput is an input type that accepts IoTEdgeAgentInfoArgs and IoTEdgeAgentInfoOutput values.
// You can construct a concrete instance of `IoTEdgeAgentInfoInput` via:
//
//	IoTEdgeAgentInfoArgs{...}
type IoTEdgeAgentInfoInput interface {
	pulumi.Input

	ToIoTEdgeAgentInfoOutput() IoTEdgeAgentInfoOutput
	ToIoTEdgeAgentInfoOutputWithContext(context.Context) IoTEdgeAgentInfoOutput
}

// IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified.
type IoTEdgeAgentInfoArgs struct {
	// Name of the IoT edge agent image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Image repository details.
	ImageRepository ImageRepositoryCredentialPtrInput `pulumi:"imageRepository"`
	// Image Tag.
	Tag pulumi.StringInput `pulumi:"tag"`
}

func (IoTEdgeAgentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTEdgeAgentInfo)(nil)).Elem()
}

func (i IoTEdgeAgentInfoArgs) ToIoTEdgeAgentInfoOutput() IoTEdgeAgentInfoOutput {
	return i.ToIoTEdgeAgentInfoOutputWithContext(context.Background())
}

func (i IoTEdgeAgentInfoArgs) ToIoTEdgeAgentInfoOutputWithContext(ctx context.Context) IoTEdgeAgentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTEdgeAgentInfoOutput)
}

func (i IoTEdgeAgentInfoArgs) ToIoTEdgeAgentInfoPtrOutput() IoTEdgeAgentInfoPtrOutput {
	return i.ToIoTEdgeAgentInfoPtrOutputWithContext(context.Background())
}

func (i IoTEdgeAgentInfoArgs) ToIoTEdgeAgentInfoPtrOutputWithContext(ctx context.Context) IoTEdgeAgentInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTEdgeAgentInfoOutput).ToIoTEdgeAgentInfoPtrOutputWithContext(ctx)
}

// IoTEdgeAgentInfoPtrInput is an input type that accepts IoTEdgeAgentInfoArgs, IoTEdgeAgentInfoPtr and IoTEdgeAgentInfoPtrOutput values.
// You can construct a concrete instance of `IoTEdgeAgentInfoPtrInput` via:
//
//	        IoTEdgeAgentInfoArgs{...}
//
//	or:
//
//	        nil
type IoTEdgeAgentInfoPtrInput interface {
	pulumi.Input

	ToIoTEdgeAgentInfoPtrOutput() IoTEdgeAgentInfoPtrOutput
	ToIoTEdgeAgentInfoPtrOutputWithContext(context.Context) IoTEdgeAgentInfoPtrOutput
}

type ioTEdgeAgentInfoPtrType IoTEdgeAgentInfoArgs

func IoTEdgeAgentInfoPtr(v *IoTEdgeAgentInfoArgs) IoTEdgeAgentInfoPtrInput {
	return (*ioTEdgeAgentInfoPtrType)(v)
}

func (*ioTEdgeAgentInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTEdgeAgentInfo)(nil)).Elem()
}

func (i *ioTEdgeAgentInfoPtrType) ToIoTEdgeAgentInfoPtrOutput() IoTEdgeAgentInfoPtrOutput {
	return i.ToIoTEdgeAgentInfoPtrOutputWithContext(context.Background())
}

func (i *ioTEdgeAgentInfoPtrType) ToIoTEdgeAgentInfoPtrOutputWithContext(ctx context.Context) IoTEdgeAgentInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTEdgeAgentInfoPtrOutput)
}

// IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified.
type IoTEdgeAgentInfoOutput struct{ *pulumi.OutputState }

func (IoTEdgeAgentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTEdgeAgentInfo)(nil)).Elem()
}

func (o IoTEdgeAgentInfoOutput) ToIoTEdgeAgentInfoOutput() IoTEdgeAgentInfoOutput {
	return o
}

func (o IoTEdgeAgentInfoOutput) ToIoTEdgeAgentInfoOutputWithContext(ctx context.Context) IoTEdgeAgentInfoOutput {
	return o
}

func (o IoTEdgeAgentInfoOutput) ToIoTEdgeAgentInfoPtrOutput() IoTEdgeAgentInfoPtrOutput {
	return o.ToIoTEdgeAgentInfoPtrOutputWithContext(context.Background())
}

func (o IoTEdgeAgentInfoOutput) ToIoTEdgeAgentInfoPtrOutputWithContext(ctx context.Context) IoTEdgeAgentInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IoTEdgeAgentInfo) *IoTEdgeAgentInfo {
		return &v
	}).(IoTEdgeAgentInfoPtrOutput)
}

// Name of the IoT edge agent image.
func (o IoTEdgeAgentInfoOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfo) string { return v.ImageName }).(pulumi.StringOutput)
}

// Image repository details.
func (o IoTEdgeAgentInfoOutput) ImageRepository() ImageRepositoryCredentialPtrOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfo) *ImageRepositoryCredential { return v.ImageRepository }).(ImageRepositoryCredentialPtrOutput)
}

// Image Tag.
func (o IoTEdgeAgentInfoOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfo) string { return v.Tag }).(pulumi.StringOutput)
}

type IoTEdgeAgentInfoPtrOutput struct{ *pulumi.OutputState }

func (IoTEdgeAgentInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTEdgeAgentInfo)(nil)).Elem()
}

func (o IoTEdgeAgentInfoPtrOutput) ToIoTEdgeAgentInfoPtrOutput() IoTEdgeAgentInfoPtrOutput {
	return o
}

func (o IoTEdgeAgentInfoPtrOutput) ToIoTEdgeAgentInfoPtrOutputWithContext(ctx context.Context) IoTEdgeAgentInfoPtrOutput {
	return o
}

func (o IoTEdgeAgentInfoPtrOutput) Elem() IoTEdgeAgentInfoOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfo) IoTEdgeAgentInfo {
		if v != nil {
			return *v
		}
		var ret IoTEdgeAgentInfo
		return ret
	}).(IoTEdgeAgentInfoOutput)
}

// Name of the IoT edge agent image.
func (o IoTEdgeAgentInfoPtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// Image repository details.
func (o IoTEdgeAgentInfoPtrOutput) ImageRepository() ImageRepositoryCredentialPtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfo) *ImageRepositoryCredential {
		if v == nil {
			return nil
		}
		return v.ImageRepository
	}).(ImageRepositoryCredentialPtrOutput)
}

// Image Tag.
func (o IoTEdgeAgentInfoPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfo) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified.
type IoTEdgeAgentInfoResponse struct {
	// Name of the IoT edge agent image.
	ImageName string `pulumi:"imageName"`
	// Image repository details.
	ImageRepository *ImageRepositoryCredentialResponse `pulumi:"imageRepository"`
	// Image Tag.
	Tag string `pulumi:"tag"`
}

// IoT edge agent details is optional, this will be used for download system Agent module while bootstrapping IoT Role if specified.
type IoTEdgeAgentInfoResponseOutput struct{ *pulumi.OutputState }

func (IoTEdgeAgentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTEdgeAgentInfoResponse)(nil)).Elem()
}

func (o IoTEdgeAgentInfoResponseOutput) ToIoTEdgeAgentInfoResponseOutput() IoTEdgeAgentInfoResponseOutput {
	return o
}

func (o IoTEdgeAgentInfoResponseOutput) ToIoTEdgeAgentInfoResponseOutputWithContext(ctx context.Context) IoTEdgeAgentInfoResponseOutput {
	return o
}

// Name of the IoT edge agent image.
func (o IoTEdgeAgentInfoResponseOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfoResponse) string { return v.ImageName }).(pulumi.StringOutput)
}

// Image repository details.
func (o IoTEdgeAgentInfoResponseOutput) ImageRepository() ImageRepositoryCredentialResponsePtrOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfoResponse) *ImageRepositoryCredentialResponse { return v.ImageRepository }).(ImageRepositoryCredentialResponsePtrOutput)
}

// Image Tag.
func (o IoTEdgeAgentInfoResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v IoTEdgeAgentInfoResponse) string { return v.Tag }).(pulumi.StringOutput)
}

type IoTEdgeAgentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IoTEdgeAgentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTEdgeAgentInfoResponse)(nil)).Elem()
}

func (o IoTEdgeAgentInfoResponsePtrOutput) ToIoTEdgeAgentInfoResponsePtrOutput() IoTEdgeAgentInfoResponsePtrOutput {
	return o
}

func (o IoTEdgeAgentInfoResponsePtrOutput) ToIoTEdgeAgentInfoResponsePtrOutputWithContext(ctx context.Context) IoTEdgeAgentInfoResponsePtrOutput {
	return o
}

func (o IoTEdgeAgentInfoResponsePtrOutput) Elem() IoTEdgeAgentInfoResponseOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfoResponse) IoTEdgeAgentInfoResponse {
		if v != nil {
			return *v
		}
		var ret IoTEdgeAgentInfoResponse
		return ret
	}).(IoTEdgeAgentInfoResponseOutput)
}

// Name of the IoT edge agent image.
func (o IoTEdgeAgentInfoResponsePtrOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ImageName
	}).(pulumi.StringPtrOutput)
}

// Image repository details.
func (o IoTEdgeAgentInfoResponsePtrOutput) ImageRepository() ImageRepositoryCredentialResponsePtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfoResponse) *ImageRepositoryCredentialResponse {
		if v == nil {
			return nil
		}
		return v.ImageRepository
	}).(ImageRepositoryCredentialResponsePtrOutput)
}

// Image Tag.
func (o IoTEdgeAgentInfoResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTEdgeAgentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tag
	}).(pulumi.StringPtrOutput)
}

// The share mount point.
type MountPointMap struct {
	// ID of the share mounted to the role VM.
	ShareId string `pulumi:"shareId"`
}

// MountPointMapInput is an input type that accepts MountPointMap and MountPointMapOutput values.
// You can construct a concrete instance of `MountPointMapInput` via:
//
//	MountPointMap{ "key": MountPointArgs{...} }
type MountPointMapInput interface {
	pulumi.Input

	ToMountPointMapOutput() MountPointMapOutput
	ToMountPointMapOutputWithContext(context.Context) MountPointMapOutput
}

// The share mount point.
type MountPointMapArgs struct {
	// ID of the share mounted to the role VM.
	ShareId pulumi.StringInput `pulumi:"shareId"`
}

func (MountPointMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountPointMap)(nil)).Elem()
}

func (i MountPointMapArgs) ToMountPointMapOutput() MountPointMapOutput {
	return i.ToMountPointMapOutputWithContext(context.Background())
}

func (i MountPointMapArgs) ToMountPointMapOutputWithContext(ctx context.Context) MountPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointMapOutput)
}

// MountPointMapArrayInput is an input type that accepts MountPointMapArray and MountPointMapArrayOutput values.
// You can construct a concrete instance of `MountPointMapArrayInput` via:
//
//	MountPointMapArray{ MountPointMapArgs{...} }
type MountPointMapArrayInput interface {
	pulumi.Input

	ToMountPointMapArrayOutput() MountPointMapArrayOutput
	ToMountPointMapArrayOutputWithContext(context.Context) MountPointMapArrayOutput
}

type MountPointMapArray []MountPointMapInput

func (MountPointMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountPointMap)(nil)).Elem()
}

func (i MountPointMapArray) ToMountPointMapArrayOutput() MountPointMapArrayOutput {
	return i.ToMountPointMapArrayOutputWithContext(context.Background())
}

func (i MountPointMapArray) ToMountPointMapArrayOutputWithContext(ctx context.Context) MountPointMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointMapArrayOutput)
}

// The share mount point.
type MountPointMapOutput struct{ *pulumi.OutputState }

func (MountPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountPointMap)(nil)).Elem()
}

func (o MountPointMapOutput) ToMountPointMapOutput() MountPointMapOutput {
	return o
}

func (o MountPointMapOutput) ToMountPointMapOutputWithContext(ctx context.Context) MountPointMapOutput {
	return o
}

// ID of the share mounted to the role VM.
func (o MountPointMapOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMap) string { return v.ShareId }).(pulumi.StringOutput)
}

type MountPointMapArrayOutput struct{ *pulumi.OutputState }

func (MountPointMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountPointMap)(nil)).Elem()
}

func (o MountPointMapArrayOutput) ToMountPointMapArrayOutput() MountPointMapArrayOutput {
	return o
}

func (o MountPointMapArrayOutput) ToMountPointMapArrayOutputWithContext(ctx context.Context) MountPointMapArrayOutput {
	return o
}

func (o MountPointMapArrayOutput) Index(i pulumi.IntInput) MountPointMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountPointMap {
		return vs[0].([]MountPointMap)[vs[1].(int)]
	}).(MountPointMapOutput)
}

// The share mount point.
type MountPointMapResponse struct {
	// Mount point for the share.
	MountPoint string `pulumi:"mountPoint"`
	// Mounting type.
	MountType string `pulumi:"mountType"`
	// ID of the role to which share is mounted.
	RoleId string `pulumi:"roleId"`
	// Role type.
	RoleType string `pulumi:"roleType"`
	// ID of the share mounted to the role VM.
	ShareId string `pulumi:"shareId"`
}

// The share mount point.
type MountPointMapResponseOutput struct{ *pulumi.OutputState }

func (MountPointMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountPointMapResponse)(nil)).Elem()
}

func (o MountPointMapResponseOutput) ToMountPointMapResponseOutput() MountPointMapResponseOutput {
	return o
}

func (o MountPointMapResponseOutput) ToMountPointMapResponseOutputWithContext(ctx context.Context) MountPointMapResponseOutput {
	return o
}

// Mount point for the share.
func (o MountPointMapResponseOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMapResponse) string { return v.MountPoint }).(pulumi.StringOutput)
}

// Mounting type.
func (o MountPointMapResponseOutput) MountType() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMapResponse) string { return v.MountType }).(pulumi.StringOutput)
}

// ID of the role to which share is mounted.
func (o MountPointMapResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMapResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

// Role type.
func (o MountPointMapResponseOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMapResponse) string { return v.RoleType }).(pulumi.StringOutput)
}

// ID of the share mounted to the role VM.
func (o MountPointMapResponseOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v MountPointMapResponse) string { return v.ShareId }).(pulumi.StringOutput)
}

type MountPointMapResponseArrayOutput struct{ *pulumi.OutputState }

func (MountPointMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountPointMapResponse)(nil)).Elem()
}

func (o MountPointMapResponseArrayOutput) ToMountPointMapResponseArrayOutput() MountPointMapResponseArrayOutput {
	return o
}

func (o MountPointMapResponseArrayOutput) ToMountPointMapResponseArrayOutputWithContext(ctx context.Context) MountPointMapResponseArrayOutput {
	return o
}

func (o MountPointMapResponseArrayOutput) Index(i pulumi.IntInput) MountPointMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountPointMapResponse {
		return vs[0].([]MountPointMapResponse)[vs[1].(int)]
	}).(MountPointMapResponseOutput)
}

// Represents a single status change.
type OrderStatus struct {
	// Comments related to this status change.
	Comments *string `pulumi:"comments"`
	// Status of the order as per the allowed status types.
	Status string `pulumi:"status"`
}

// OrderStatusInput is an input type that accepts OrderStatusArgs and OrderStatusOutput values.
// You can construct a concrete instance of `OrderStatusInput` via:
//
//	OrderStatusArgs{...}
type OrderStatusInput interface {
	pulumi.Input

	ToOrderStatusOutput() OrderStatusOutput
	ToOrderStatusOutputWithContext(context.Context) OrderStatusOutput
}

// Represents a single status change.
type OrderStatusArgs struct {
	// Comments related to this status change.
	Comments pulumi.StringPtrInput `pulumi:"comments"`
	// Status of the order as per the allowed status types.
	Status pulumi.StringInput `pulumi:"status"`
}

func (OrderStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderStatus)(nil)).Elem()
}

func (i OrderStatusArgs) ToOrderStatusOutput() OrderStatusOutput {
	return i.ToOrderStatusOutputWithContext(context.Background())
}

func (i OrderStatusArgs) ToOrderStatusOutputWithContext(ctx context.Context) OrderStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderStatusOutput)
}

func (i OrderStatusArgs) ToOrderStatusPtrOutput() OrderStatusPtrOutput {
	return i.ToOrderStatusPtrOutputWithContext(context.Background())
}

func (i OrderStatusArgs) ToOrderStatusPtrOutputWithContext(ctx context.Context) OrderStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderStatusOutput).ToOrderStatusPtrOutputWithContext(ctx)
}

// OrderStatusPtrInput is an input type that accepts OrderStatusArgs, OrderStatusPtr and OrderStatusPtrOutput values.
// You can construct a concrete instance of `OrderStatusPtrInput` via:
//
//	        OrderStatusArgs{...}
//
//	or:
//
//	        nil
type OrderStatusPtrInput interface {
	pulumi.Input

	ToOrderStatusPtrOutput() OrderStatusPtrOutput
	ToOrderStatusPtrOutputWithContext(context.Context) OrderStatusPtrOutput
}

type orderStatusPtrType OrderStatusArgs

func OrderStatusPtr(v *OrderStatusArgs) OrderStatusPtrInput {
	return (*orderStatusPtrType)(v)
}

func (*orderStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderStatus)(nil)).Elem()
}

func (i *orderStatusPtrType) ToOrderStatusPtrOutput() OrderStatusPtrOutput {
	return i.ToOrderStatusPtrOutputWithContext(context.Background())
}

func (i *orderStatusPtrType) ToOrderStatusPtrOutputWithContext(ctx context.Context) OrderStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderStatusPtrOutput)
}

// Represents a single status change.
type OrderStatusOutput struct{ *pulumi.OutputState }

func (OrderStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderStatus)(nil)).Elem()
}

func (o OrderStatusOutput) ToOrderStatusOutput() OrderStatusOutput {
	return o
}

func (o OrderStatusOutput) ToOrderStatusOutputWithContext(ctx context.Context) OrderStatusOutput {
	return o
}

func (o OrderStatusOutput) ToOrderStatusPtrOutput() OrderStatusPtrOutput {
	return o.ToOrderStatusPtrOutputWithContext(context.Background())
}

func (o OrderStatusOutput) ToOrderStatusPtrOutputWithContext(ctx context.Context) OrderStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OrderStatus) *OrderStatus {
		return &v
	}).(OrderStatusPtrOutput)
}

// Comments related to this status change.
func (o OrderStatusOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrderStatus) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Status of the order as per the allowed status types.
func (o OrderStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OrderStatus) string { return v.Status }).(pulumi.StringOutput)
}

type OrderStatusPtrOutput struct{ *pulumi.OutputState }

func (OrderStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderStatus)(nil)).Elem()
}

func (o OrderStatusPtrOutput) ToOrderStatusPtrOutput() OrderStatusPtrOutput {
	return o
}

func (o OrderStatusPtrOutput) ToOrderStatusPtrOutputWithContext(ctx context.Context) OrderStatusPtrOutput {
	return o
}

func (o OrderStatusPtrOutput) Elem() OrderStatusOutput {
	return o.ApplyT(func(v *OrderStatus) OrderStatus {
		if v != nil {
			return *v
		}
		var ret OrderStatus
		return ret
	}).(OrderStatusOutput)
}

// Comments related to this status change.
func (o OrderStatusPtrOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderStatus) *string {
		if v == nil {
			return nil
		}
		return v.Comments
	}).(pulumi.StringPtrOutput)
}

// Status of the order as per the allowed status types.
func (o OrderStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderStatus) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Represents a single status change.
type OrderStatusResponse struct {
	// Dictionary to hold generic information which is not stored
	// by the already existing properties
	AdditionalOrderDetails map[string]string `pulumi:"additionalOrderDetails"`
	// Comments related to this status change.
	Comments *string `pulumi:"comments"`
	// Status of the order as per the allowed status types.
	Status string `pulumi:"status"`
	// Time of status update.
	UpdateDateTime string `pulumi:"updateDateTime"`
}

// Represents a single status change.
type OrderStatusResponseOutput struct{ *pulumi.OutputState }

func (OrderStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderStatusResponse)(nil)).Elem()
}

func (o OrderStatusResponseOutput) ToOrderStatusResponseOutput() OrderStatusResponseOutput {
	return o
}

func (o OrderStatusResponseOutput) ToOrderStatusResponseOutputWithContext(ctx context.Context) OrderStatusResponseOutput {
	return o
}

// Dictionary to hold generic information which is not stored
// by the already existing properties
func (o OrderStatusResponseOutput) AdditionalOrderDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v OrderStatusResponse) map[string]string { return v.AdditionalOrderDetails }).(pulumi.StringMapOutput)
}

// Comments related to this status change.
func (o OrderStatusResponseOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrderStatusResponse) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Status of the order as per the allowed status types.
func (o OrderStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OrderStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Time of status update.
func (o OrderStatusResponseOutput) UpdateDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v OrderStatusResponse) string { return v.UpdateDateTime }).(pulumi.StringOutput)
}

type OrderStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (OrderStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrderStatusResponse)(nil)).Elem()
}

func (o OrderStatusResponsePtrOutput) ToOrderStatusResponsePtrOutput() OrderStatusResponsePtrOutput {
	return o
}

func (o OrderStatusResponsePtrOutput) ToOrderStatusResponsePtrOutputWithContext(ctx context.Context) OrderStatusResponsePtrOutput {
	return o
}

func (o OrderStatusResponsePtrOutput) Elem() OrderStatusResponseOutput {
	return o.ApplyT(func(v *OrderStatusResponse) OrderStatusResponse {
		if v != nil {
			return *v
		}
		var ret OrderStatusResponse
		return ret
	}).(OrderStatusResponseOutput)
}

// Dictionary to hold generic information which is not stored
// by the already existing properties
func (o OrderStatusResponsePtrOutput) AdditionalOrderDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OrderStatusResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalOrderDetails
	}).(pulumi.StringMapOutput)
}

// Comments related to this status change.
func (o OrderStatusResponsePtrOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Comments
	}).(pulumi.StringPtrOutput)
}

// Status of the order as per the allowed status types.
func (o OrderStatusResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Time of status update.
func (o OrderStatusResponsePtrOutput) UpdateDateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrderStatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdateDateTime
	}).(pulumi.StringPtrOutput)
}

type OrderStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (OrderStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrderStatusResponse)(nil)).Elem()
}

func (o OrderStatusResponseArrayOutput) ToOrderStatusResponseArrayOutput() OrderStatusResponseArrayOutput {
	return o
}

func (o OrderStatusResponseArrayOutput) ToOrderStatusResponseArrayOutputWithContext(ctx context.Context) OrderStatusResponseArrayOutput {
	return o
}

func (o OrderStatusResponseArrayOutput) Index(i pulumi.IntInput) OrderStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrderStatusResponse {
		return vs[0].([]OrderStatusResponse)[vs[1].(int)]
	}).(OrderStatusResponseOutput)
}

// Periodic timer event source.
type PeriodicTimerSourceInfo struct {
	// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
	Schedule string `pulumi:"schedule"`
	// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
	StartTime string `pulumi:"startTime"`
	// Topic where periodic events are published to IoT device.
	Topic *string `pulumi:"topic"`
}

// PeriodicTimerSourceInfoInput is an input type that accepts PeriodicTimerSourceInfoArgs and PeriodicTimerSourceInfoOutput values.
// You can construct a concrete instance of `PeriodicTimerSourceInfoInput` via:
//
//	PeriodicTimerSourceInfoArgs{...}
type PeriodicTimerSourceInfoInput interface {
	pulumi.Input

	ToPeriodicTimerSourceInfoOutput() PeriodicTimerSourceInfoOutput
	ToPeriodicTimerSourceInfoOutputWithContext(context.Context) PeriodicTimerSourceInfoOutput
}

// Periodic timer event source.
type PeriodicTimerSourceInfoArgs struct {
	// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
	Schedule pulumi.StringInput `pulumi:"schedule"`
	// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Topic where periodic events are published to IoT device.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PeriodicTimerSourceInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PeriodicTimerSourceInfo)(nil)).Elem()
}

func (i PeriodicTimerSourceInfoArgs) ToPeriodicTimerSourceInfoOutput() PeriodicTimerSourceInfoOutput {
	return i.ToPeriodicTimerSourceInfoOutputWithContext(context.Background())
}

func (i PeriodicTimerSourceInfoArgs) ToPeriodicTimerSourceInfoOutputWithContext(ctx context.Context) PeriodicTimerSourceInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeriodicTimerSourceInfoOutput)
}

// Periodic timer event source.
type PeriodicTimerSourceInfoOutput struct{ *pulumi.OutputState }

func (PeriodicTimerSourceInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeriodicTimerSourceInfo)(nil)).Elem()
}

func (o PeriodicTimerSourceInfoOutput) ToPeriodicTimerSourceInfoOutput() PeriodicTimerSourceInfoOutput {
	return o
}

func (o PeriodicTimerSourceInfoOutput) ToPeriodicTimerSourceInfoOutputWithContext(ctx context.Context) PeriodicTimerSourceInfoOutput {
	return o
}

// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
func (o PeriodicTimerSourceInfoOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfo) string { return v.Schedule }).(pulumi.StringOutput)
}

// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
func (o PeriodicTimerSourceInfoOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfo) string { return v.StartTime }).(pulumi.StringOutput)
}

// Topic where periodic events are published to IoT device.
func (o PeriodicTimerSourceInfoOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfo) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Periodic timer event source.
type PeriodicTimerSourceInfoResponse struct {
	// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
	Schedule string `pulumi:"schedule"`
	// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
	StartTime string `pulumi:"startTime"`
	// Topic where periodic events are published to IoT device.
	Topic *string `pulumi:"topic"`
}

// Periodic timer event source.
type PeriodicTimerSourceInfoResponseOutput struct{ *pulumi.OutputState }

func (PeriodicTimerSourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeriodicTimerSourceInfoResponse)(nil)).Elem()
}

func (o PeriodicTimerSourceInfoResponseOutput) ToPeriodicTimerSourceInfoResponseOutput() PeriodicTimerSourceInfoResponseOutput {
	return o
}

func (o PeriodicTimerSourceInfoResponseOutput) ToPeriodicTimerSourceInfoResponseOutputWithContext(ctx context.Context) PeriodicTimerSourceInfoResponseOutput {
	return o
}

// Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
func (o PeriodicTimerSourceInfoResponseOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfoResponse) string { return v.Schedule }).(pulumi.StringOutput)
}

// The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
func (o PeriodicTimerSourceInfoResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfoResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Topic where periodic events are published to IoT device.
func (o PeriodicTimerSourceInfoResponseOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PeriodicTimerSourceInfoResponse) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Compute role against which events will be raised.
type RoleSinkInfo struct {
	// Compute role ID.
	RoleId string `pulumi:"roleId"`
}

// RoleSinkInfoInput is an input type that accepts RoleSinkInfoArgs and RoleSinkInfoOutput values.
// You can construct a concrete instance of `RoleSinkInfoInput` via:
//
//	RoleSinkInfoArgs{...}
type RoleSinkInfoInput interface {
	pulumi.Input

	ToRoleSinkInfoOutput() RoleSinkInfoOutput
	ToRoleSinkInfoOutputWithContext(context.Context) RoleSinkInfoOutput
}

// Compute role against which events will be raised.
type RoleSinkInfoArgs struct {
	// Compute role ID.
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (RoleSinkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleSinkInfo)(nil)).Elem()
}

func (i RoleSinkInfoArgs) ToRoleSinkInfoOutput() RoleSinkInfoOutput {
	return i.ToRoleSinkInfoOutputWithContext(context.Background())
}

func (i RoleSinkInfoArgs) ToRoleSinkInfoOutputWithContext(ctx context.Context) RoleSinkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleSinkInfoOutput)
}

// Compute role against which events will be raised.
type RoleSinkInfoOutput struct{ *pulumi.OutputState }

func (RoleSinkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleSinkInfo)(nil)).Elem()
}

func (o RoleSinkInfoOutput) ToRoleSinkInfoOutput() RoleSinkInfoOutput {
	return o
}

func (o RoleSinkInfoOutput) ToRoleSinkInfoOutputWithContext(ctx context.Context) RoleSinkInfoOutput {
	return o
}

// Compute role ID.
func (o RoleSinkInfoOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleSinkInfo) string { return v.RoleId }).(pulumi.StringOutput)
}

// Compute role against which events will be raised.
type RoleSinkInfoResponse struct {
	// Compute role ID.
	RoleId string `pulumi:"roleId"`
}

// Compute role against which events will be raised.
type RoleSinkInfoResponseOutput struct{ *pulumi.OutputState }

func (RoleSinkInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleSinkInfoResponse)(nil)).Elem()
}

func (o RoleSinkInfoResponseOutput) ToRoleSinkInfoResponseOutput() RoleSinkInfoResponseOutput {
	return o
}

func (o RoleSinkInfoResponseOutput) ToRoleSinkInfoResponseOutputWithContext(ctx context.Context) RoleSinkInfoResponseOutput {
	return o
}

// Compute role ID.
func (o RoleSinkInfoResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v RoleSinkInfoResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

// The SKU type.
type Sku struct {
	// SKU name.
	Name *string `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU type.
type SkuArgs struct {
	// SKU name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The SKU type.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// SKU name.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// SKU name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The SKU type.
type SkuResponse struct {
	// SKU name.
	Name *string `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// The SKU type.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// SKU name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// SKU name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Symmetric key for authentication.
type SymmetricKey struct {
	// Connection string based on the symmetric key.
	ConnectionString *AsymmetricEncryptedSecret `pulumi:"connectionString"`
}

// SymmetricKeyInput is an input type that accepts SymmetricKeyArgs and SymmetricKeyOutput values.
// You can construct a concrete instance of `SymmetricKeyInput` via:
//
//	SymmetricKeyArgs{...}
type SymmetricKeyInput interface {
	pulumi.Input

	ToSymmetricKeyOutput() SymmetricKeyOutput
	ToSymmetricKeyOutputWithContext(context.Context) SymmetricKeyOutput
}

// Symmetric key for authentication.
type SymmetricKeyArgs struct {
	// Connection string based on the symmetric key.
	ConnectionString AsymmetricEncryptedSecretPtrInput `pulumi:"connectionString"`
}

func (SymmetricKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SymmetricKey)(nil)).Elem()
}

func (i SymmetricKeyArgs) ToSymmetricKeyOutput() SymmetricKeyOutput {
	return i.ToSymmetricKeyOutputWithContext(context.Background())
}

func (i SymmetricKeyArgs) ToSymmetricKeyOutputWithContext(ctx context.Context) SymmetricKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymmetricKeyOutput)
}

func (i SymmetricKeyArgs) ToSymmetricKeyPtrOutput() SymmetricKeyPtrOutput {
	return i.ToSymmetricKeyPtrOutputWithContext(context.Background())
}

func (i SymmetricKeyArgs) ToSymmetricKeyPtrOutputWithContext(ctx context.Context) SymmetricKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymmetricKeyOutput).ToSymmetricKeyPtrOutputWithContext(ctx)
}

// SymmetricKeyPtrInput is an input type that accepts SymmetricKeyArgs, SymmetricKeyPtr and SymmetricKeyPtrOutput values.
// You can construct a concrete instance of `SymmetricKeyPtrInput` via:
//
//	        SymmetricKeyArgs{...}
//
//	or:
//
//	        nil
type SymmetricKeyPtrInput interface {
	pulumi.Input

	ToSymmetricKeyPtrOutput() SymmetricKeyPtrOutput
	ToSymmetricKeyPtrOutputWithContext(context.Context) SymmetricKeyPtrOutput
}

type symmetricKeyPtrType SymmetricKeyArgs

func SymmetricKeyPtr(v *SymmetricKeyArgs) SymmetricKeyPtrInput {
	return (*symmetricKeyPtrType)(v)
}

func (*symmetricKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SymmetricKey)(nil)).Elem()
}

func (i *symmetricKeyPtrType) ToSymmetricKeyPtrOutput() SymmetricKeyPtrOutput {
	return i.ToSymmetricKeyPtrOutputWithContext(context.Background())
}

func (i *symmetricKeyPtrType) ToSymmetricKeyPtrOutputWithContext(ctx context.Context) SymmetricKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SymmetricKeyPtrOutput)
}

// Symmetric key for authentication.
type SymmetricKeyOutput struct{ *pulumi.OutputState }

func (SymmetricKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SymmetricKey)(nil)).Elem()
}

func (o SymmetricKeyOutput) ToSymmetricKeyOutput() SymmetricKeyOutput {
	return o
}

func (o SymmetricKeyOutput) ToSymmetricKeyOutputWithContext(ctx context.Context) SymmetricKeyOutput {
	return o
}

func (o SymmetricKeyOutput) ToSymmetricKeyPtrOutput() SymmetricKeyPtrOutput {
	return o.ToSymmetricKeyPtrOutputWithContext(context.Background())
}

func (o SymmetricKeyOutput) ToSymmetricKeyPtrOutputWithContext(ctx context.Context) SymmetricKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SymmetricKey) *SymmetricKey {
		return &v
	}).(SymmetricKeyPtrOutput)
}

// Connection string based on the symmetric key.
func (o SymmetricKeyOutput) ConnectionString() AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyT(func(v SymmetricKey) *AsymmetricEncryptedSecret { return v.ConnectionString }).(AsymmetricEncryptedSecretPtrOutput)
}

type SymmetricKeyPtrOutput struct{ *pulumi.OutputState }

func (SymmetricKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SymmetricKey)(nil)).Elem()
}

func (o SymmetricKeyPtrOutput) ToSymmetricKeyPtrOutput() SymmetricKeyPtrOutput {
	return o
}

func (o SymmetricKeyPtrOutput) ToSymmetricKeyPtrOutputWithContext(ctx context.Context) SymmetricKeyPtrOutput {
	return o
}

func (o SymmetricKeyPtrOutput) Elem() SymmetricKeyOutput {
	return o.ApplyT(func(v *SymmetricKey) SymmetricKey {
		if v != nil {
			return *v
		}
		var ret SymmetricKey
		return ret
	}).(SymmetricKeyOutput)
}

// Connection string based on the symmetric key.
func (o SymmetricKeyPtrOutput) ConnectionString() AsymmetricEncryptedSecretPtrOutput {
	return o.ApplyT(func(v *SymmetricKey) *AsymmetricEncryptedSecret {
		if v == nil {
			return nil
		}
		return v.ConnectionString
	}).(AsymmetricEncryptedSecretPtrOutput)
}

// Symmetric key for authentication.
type SymmetricKeyResponse struct {
	// Connection string based on the symmetric key.
	ConnectionString *AsymmetricEncryptedSecretResponse `pulumi:"connectionString"`
}

// Symmetric key for authentication.
type SymmetricKeyResponseOutput struct{ *pulumi.OutputState }

func (SymmetricKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SymmetricKeyResponse)(nil)).Elem()
}

func (o SymmetricKeyResponseOutput) ToSymmetricKeyResponseOutput() SymmetricKeyResponseOutput {
	return o
}

func (o SymmetricKeyResponseOutput) ToSymmetricKeyResponseOutputWithContext(ctx context.Context) SymmetricKeyResponseOutput {
	return o
}

// Connection string based on the symmetric key.
func (o SymmetricKeyResponseOutput) ConnectionString() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v SymmetricKeyResponse) *AsymmetricEncryptedSecretResponse { return v.ConnectionString }).(AsymmetricEncryptedSecretResponsePtrOutput)
}

type SymmetricKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (SymmetricKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SymmetricKeyResponse)(nil)).Elem()
}

func (o SymmetricKeyResponsePtrOutput) ToSymmetricKeyResponsePtrOutput() SymmetricKeyResponsePtrOutput {
	return o
}

func (o SymmetricKeyResponsePtrOutput) ToSymmetricKeyResponsePtrOutputWithContext(ctx context.Context) SymmetricKeyResponsePtrOutput {
	return o
}

func (o SymmetricKeyResponsePtrOutput) Elem() SymmetricKeyResponseOutput {
	return o.ApplyT(func(v *SymmetricKeyResponse) SymmetricKeyResponse {
		if v != nil {
			return *v
		}
		var ret SymmetricKeyResponse
		return ret
	}).(SymmetricKeyResponseOutput)
}

// Connection string based on the symmetric key.
func (o SymmetricKeyResponsePtrOutput) ConnectionString() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v *SymmetricKeyResponse) *AsymmetricEncryptedSecretResponse {
		if v == nil {
			return nil
		}
		return v.ConnectionString
	}).(AsymmetricEncryptedSecretResponsePtrOutput)
}

// Tracking courier information.
type TrackingInfoResponse struct {
	// Name of the carrier used in the delivery.
	CarrierName *string `pulumi:"carrierName"`
	// Serial number of the device being tracked.
	SerialNumber *string `pulumi:"serialNumber"`
	// Tracking ID of the shipment.
	TrackingId *string `pulumi:"trackingId"`
	// Tracking URL of the shipment.
	TrackingUrl *string `pulumi:"trackingUrl"`
}

// Tracking courier information.
type TrackingInfoResponseOutput struct{ *pulumi.OutputState }

func (TrackingInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingInfoResponse)(nil)).Elem()
}

func (o TrackingInfoResponseOutput) ToTrackingInfoResponseOutput() TrackingInfoResponseOutput {
	return o
}

func (o TrackingInfoResponseOutput) ToTrackingInfoResponseOutputWithContext(ctx context.Context) TrackingInfoResponseOutput {
	return o
}

// Name of the carrier used in the delivery.
func (o TrackingInfoResponseOutput) CarrierName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.CarrierName }).(pulumi.StringPtrOutput)
}

// Serial number of the device being tracked.
func (o TrackingInfoResponseOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Tracking ID of the shipment.
func (o TrackingInfoResponseOutput) TrackingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.TrackingId }).(pulumi.StringPtrOutput)
}

// Tracking URL of the shipment.
func (o TrackingInfoResponseOutput) TrackingUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.TrackingUrl }).(pulumi.StringPtrOutput)
}

type TrackingInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackingInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackingInfoResponse)(nil)).Elem()
}

func (o TrackingInfoResponseArrayOutput) ToTrackingInfoResponseArrayOutput() TrackingInfoResponseArrayOutput {
	return o
}

func (o TrackingInfoResponseArrayOutput) ToTrackingInfoResponseArrayOutputWithContext(ctx context.Context) TrackingInfoResponseArrayOutput {
	return o
}

func (o TrackingInfoResponseArrayOutput) Index(i pulumi.IntInput) TrackingInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackingInfoResponse {
		return vs[0].([]TrackingInfoResponse)[vs[1].(int)]
	}).(TrackingInfoResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AddressOutput{})
	pulumi.RegisterOutputType(AddressResponseOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretPtrOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponseOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponsePtrOutput{})
	pulumi.RegisterOutputType(AuthenticationOutput{})
	pulumi.RegisterOutputType(AuthenticationPtrOutput{})
	pulumi.RegisterOutputType(AuthenticationResponseOutput{})
	pulumi.RegisterOutputType(AuthenticationResponsePtrOutput{})
	pulumi.RegisterOutputType(ContactDetailsOutput{})
	pulumi.RegisterOutputType(ContactDetailsResponseOutput{})
	pulumi.RegisterOutputType(FileSourceInfoOutput{})
	pulumi.RegisterOutputType(FileSourceInfoResponseOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialResponseOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialResponsePtrOutput{})
	pulumi.RegisterOutputType(IoTDeviceInfoOutput{})
	pulumi.RegisterOutputType(IoTDeviceInfoResponseOutput{})
	pulumi.RegisterOutputType(IoTEdgeAgentInfoOutput{})
	pulumi.RegisterOutputType(IoTEdgeAgentInfoPtrOutput{})
	pulumi.RegisterOutputType(IoTEdgeAgentInfoResponseOutput{})
	pulumi.RegisterOutputType(IoTEdgeAgentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(MountPointMapOutput{})
	pulumi.RegisterOutputType(MountPointMapArrayOutput{})
	pulumi.RegisterOutputType(MountPointMapResponseOutput{})
	pulumi.RegisterOutputType(MountPointMapResponseArrayOutput{})
	pulumi.RegisterOutputType(OrderStatusOutput{})
	pulumi.RegisterOutputType(OrderStatusPtrOutput{})
	pulumi.RegisterOutputType(OrderStatusResponseOutput{})
	pulumi.RegisterOutputType(OrderStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(OrderStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(PeriodicTimerSourceInfoOutput{})
	pulumi.RegisterOutputType(PeriodicTimerSourceInfoResponseOutput{})
	pulumi.RegisterOutputType(RoleSinkInfoOutput{})
	pulumi.RegisterOutputType(RoleSinkInfoResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SymmetricKeyOutput{})
	pulumi.RegisterOutputType(SymmetricKeyPtrOutput{})
	pulumi.RegisterOutputType(SymmetricKeyResponseOutput{})
	pulumi.RegisterOutputType(SymmetricKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(TrackingInfoResponseOutput{})
	pulumi.RegisterOutputType(TrackingInfoResponseArrayOutput{})
}
