// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The shipping address of the customer.
type Address struct {
	// The address line1.
	AddressLine1 *string `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 *string `pulumi:"addressLine3"`
	// The city name.
	City *string `pulumi:"city"`
	// The country name.
	Country string `pulumi:"country"`
	// The postal code.
	PostalCode *string `pulumi:"postalCode"`
	// The state name.
	State *string `pulumi:"state"`
}

// AddressInput is an input type that accepts AddressArgs and AddressOutput values.
// You can construct a concrete instance of `AddressInput` via:
//
//	AddressArgs{...}
type AddressInput interface {
	pulumi.Input

	ToAddressOutput() AddressOutput
	ToAddressOutputWithContext(context.Context) AddressOutput
}

// The shipping address of the customer.
type AddressArgs struct {
	// The address line1.
	AddressLine1 pulumi.StringPtrInput `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 pulumi.StringPtrInput `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 pulumi.StringPtrInput `pulumi:"addressLine3"`
	// The city name.
	City pulumi.StringPtrInput `pulumi:"city"`
	// The country name.
	Country pulumi.StringInput `pulumi:"country"`
	// The postal code.
	PostalCode pulumi.StringPtrInput `pulumi:"postalCode"`
	// The state name.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Address)(nil)).Elem()
}

func (i AddressArgs) ToAddressOutput() AddressOutput {
	return i.ToAddressOutputWithContext(context.Background())
}

func (i AddressArgs) ToAddressOutputWithContext(ctx context.Context) AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressOutput)
}

func (i AddressArgs) ToOutput(ctx context.Context) pulumix.Output[Address] {
	return pulumix.Output[Address]{
		OutputState: i.ToAddressOutputWithContext(ctx).OutputState,
	}
}

func (i AddressArgs) ToAddressPtrOutput() AddressPtrOutput {
	return i.ToAddressPtrOutputWithContext(context.Background())
}

func (i AddressArgs) ToAddressPtrOutputWithContext(ctx context.Context) AddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressOutput).ToAddressPtrOutputWithContext(ctx)
}

// AddressPtrInput is an input type that accepts AddressArgs, AddressPtr and AddressPtrOutput values.
// You can construct a concrete instance of `AddressPtrInput` via:
//
//	        AddressArgs{...}
//
//	or:
//
//	        nil
type AddressPtrInput interface {
	pulumi.Input

	ToAddressPtrOutput() AddressPtrOutput
	ToAddressPtrOutputWithContext(context.Context) AddressPtrOutput
}

type addressPtrType AddressArgs

func AddressPtr(v *AddressArgs) AddressPtrInput {
	return (*addressPtrType)(v)
}

func (*addressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Address)(nil)).Elem()
}

func (i *addressPtrType) ToAddressPtrOutput() AddressPtrOutput {
	return i.ToAddressPtrOutputWithContext(context.Background())
}

func (i *addressPtrType) ToAddressPtrOutputWithContext(ctx context.Context) AddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddressPtrOutput)
}

func (i *addressPtrType) ToOutput(ctx context.Context) pulumix.Output[*Address] {
	return pulumix.Output[*Address]{
		OutputState: i.ToAddressPtrOutputWithContext(ctx).OutputState,
	}
}

// The shipping address of the customer.
type AddressOutput struct{ *pulumi.OutputState }

func (AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Address)(nil)).Elem()
}

func (o AddressOutput) ToAddressOutput() AddressOutput {
	return o
}

func (o AddressOutput) ToAddressOutputWithContext(ctx context.Context) AddressOutput {
	return o
}

func (o AddressOutput) ToAddressPtrOutput() AddressPtrOutput {
	return o.ToAddressPtrOutputWithContext(context.Background())
}

func (o AddressOutput) ToAddressPtrOutputWithContext(ctx context.Context) AddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Address) *Address {
		return &v
	}).(AddressPtrOutput)
}

func (o AddressOutput) ToOutput(ctx context.Context) pulumix.Output[Address] {
	return pulumix.Output[Address]{
		OutputState: o.OutputState,
	}
}

// The address line1.
func (o AddressOutput) AddressLine1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.AddressLine1 }).(pulumi.StringPtrOutput)
}

// The address line2.
func (o AddressOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.AddressLine2 }).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.AddressLine3 }).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.City }).(pulumi.StringPtrOutput)
}

// The country name.
func (o AddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v Address) string { return v.Country }).(pulumi.StringOutput)
}

// The postal code.
func (o AddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The state name.
func (o AddressOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Address) *string { return v.State }).(pulumi.StringPtrOutput)
}

type AddressPtrOutput struct{ *pulumi.OutputState }

func (AddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Address)(nil)).Elem()
}

func (o AddressPtrOutput) ToAddressPtrOutput() AddressPtrOutput {
	return o
}

func (o AddressPtrOutput) ToAddressPtrOutputWithContext(ctx context.Context) AddressPtrOutput {
	return o
}

func (o AddressPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Address] {
	return pulumix.Output[*Address]{
		OutputState: o.OutputState,
	}
}

func (o AddressPtrOutput) Elem() AddressOutput {
	return o.ApplyT(func(v *Address) Address {
		if v != nil {
			return *v
		}
		var ret Address
		return ret
	}).(AddressOutput)
}

// The address line1.
func (o AddressPtrOutput) AddressLine1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine1
	}).(pulumi.StringPtrOutput)
}

// The address line2.
func (o AddressPtrOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine2
	}).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressPtrOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine3
	}).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressPtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.City
	}).(pulumi.StringPtrOutput)
}

// The country name.
func (o AddressPtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// The postal code.
func (o AddressPtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The state name.
func (o AddressPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Address) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The shipping address of the customer.
type AddressResponse struct {
	// The address line1.
	AddressLine1 *string `pulumi:"addressLine1"`
	// The address line2.
	AddressLine2 *string `pulumi:"addressLine2"`
	// The address line3.
	AddressLine3 *string `pulumi:"addressLine3"`
	// The city name.
	City *string `pulumi:"city"`
	// The country name.
	Country string `pulumi:"country"`
	// The postal code.
	PostalCode *string `pulumi:"postalCode"`
	// The state name.
	State *string `pulumi:"state"`
}

// The shipping address of the customer.
type AddressResponseOutput struct{ *pulumi.OutputState }

func (AddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressResponse)(nil)).Elem()
}

func (o AddressResponseOutput) ToAddressResponseOutput() AddressResponseOutput {
	return o
}

func (o AddressResponseOutput) ToAddressResponseOutputWithContext(ctx context.Context) AddressResponseOutput {
	return o
}

func (o AddressResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AddressResponse] {
	return pulumix.Output[AddressResponse]{
		OutputState: o.OutputState,
	}
}

// The address line1.
func (o AddressResponseOutput) AddressLine1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.AddressLine1 }).(pulumi.StringPtrOutput)
}

// The address line2.
func (o AddressResponseOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.AddressLine2 }).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressResponseOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.AddressLine3 }).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressResponseOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.City }).(pulumi.StringPtrOutput)
}

// The country name.
func (o AddressResponseOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v AddressResponse) string { return v.Country }).(pulumi.StringOutput)
}

// The postal code.
func (o AddressResponseOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

// The state name.
func (o AddressResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type AddressResponsePtrOutput struct{ *pulumi.OutputState }

func (AddressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddressResponse)(nil)).Elem()
}

func (o AddressResponsePtrOutput) ToAddressResponsePtrOutput() AddressResponsePtrOutput {
	return o
}

func (o AddressResponsePtrOutput) ToAddressResponsePtrOutputWithContext(ctx context.Context) AddressResponsePtrOutput {
	return o
}

func (o AddressResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AddressResponse] {
	return pulumix.Output[*AddressResponse]{
		OutputState: o.OutputState,
	}
}

func (o AddressResponsePtrOutput) Elem() AddressResponseOutput {
	return o.ApplyT(func(v *AddressResponse) AddressResponse {
		if v != nil {
			return *v
		}
		var ret AddressResponse
		return ret
	}).(AddressResponseOutput)
}

// The address line1.
func (o AddressResponsePtrOutput) AddressLine1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine1
	}).(pulumi.StringPtrOutput)
}

// The address line2.
func (o AddressResponsePtrOutput) AddressLine2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine2
	}).(pulumi.StringPtrOutput)
}

// The address line3.
func (o AddressResponsePtrOutput) AddressLine3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.AddressLine3
	}).(pulumi.StringPtrOutput)
}

// The city name.
func (o AddressResponsePtrOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.City
	}).(pulumi.StringPtrOutput)
}

// The country name.
func (o AddressResponsePtrOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Country
	}).(pulumi.StringPtrOutput)
}

// The postal code.
func (o AddressResponsePtrOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.PostalCode
	}).(pulumi.StringPtrOutput)
}

// The state name.
func (o AddressResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponse struct {
	// The algorithm used to encrypt "Value".
	EncryptionAlgorithm string `pulumi:"encryptionAlgorithm"`
	// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
	EncryptionCertThumbprint *string `pulumi:"encryptionCertThumbprint"`
	// The value of the secret.
	Value string `pulumi:"value"`
}

// Represent the secrets intended for encryption with asymmetric key pair.
type AsymmetricEncryptedSecretResponseOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutput() AsymmetricEncryptedSecretResponseOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponseOutput) ToAsymmetricEncryptedSecretResponseOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponseOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AsymmetricEncryptedSecretResponse] {
	return pulumix.Output[AsymmetricEncryptedSecretResponse]{
		OutputState: o.OutputState,
	}
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.EncryptionAlgorithm }).(pulumi.StringOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponseOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) *string { return v.EncryptionCertThumbprint }).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AsymmetricEncryptedSecretResponse) string { return v.Value }).(pulumi.StringOutput)
}

type AsymmetricEncryptedSecretResponsePtrOutput struct{ *pulumi.OutputState }

func (AsymmetricEncryptedSecretResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AsymmetricEncryptedSecretResponse)(nil)).Elem()
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutput() AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToAsymmetricEncryptedSecretResponsePtrOutputWithContext(ctx context.Context) AsymmetricEncryptedSecretResponsePtrOutput {
	return o
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AsymmetricEncryptedSecretResponse] {
	return pulumix.Output[*AsymmetricEncryptedSecretResponse]{
		OutputState: o.OutputState,
	}
}

func (o AsymmetricEncryptedSecretResponsePtrOutput) Elem() AsymmetricEncryptedSecretResponseOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) AsymmetricEncryptedSecretResponse {
		if v != nil {
			return *v
		}
		var ret AsymmetricEncryptedSecretResponse
		return ret
	}).(AsymmetricEncryptedSecretResponseOutput)
}

// The algorithm used to encrypt "Value".
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.EncryptionAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null.
func (o AsymmetricEncryptedSecretResponsePtrOutput) EncryptionCertThumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return v.EncryptionCertThumbprint
	}).(pulumi.StringPtrOutput)
}

// The value of the secret.
func (o AsymmetricEncryptedSecretResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AsymmetricEncryptedSecretResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// This contains the compute information
type ComputeVersionInformationResponse struct {
	// Azure Arc Version
	AzureArcVersion *string `pulumi:"azureArcVersion"`
	// IOTEdge Version
	IotEdgeVersion *string `pulumi:"iotEdgeVersion"`
	// Kubernetes Version
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
}

// This contains the compute information
type ComputeVersionInformationResponseOutput struct{ *pulumi.OutputState }

func (ComputeVersionInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeVersionInformationResponse)(nil)).Elem()
}

func (o ComputeVersionInformationResponseOutput) ToComputeVersionInformationResponseOutput() ComputeVersionInformationResponseOutput {
	return o
}

func (o ComputeVersionInformationResponseOutput) ToComputeVersionInformationResponseOutputWithContext(ctx context.Context) ComputeVersionInformationResponseOutput {
	return o
}

func (o ComputeVersionInformationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ComputeVersionInformationResponse] {
	return pulumix.Output[ComputeVersionInformationResponse]{
		OutputState: o.OutputState,
	}
}

// Azure Arc Version
func (o ComputeVersionInformationResponseOutput) AzureArcVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeVersionInformationResponse) *string { return v.AzureArcVersion }).(pulumi.StringPtrOutput)
}

// IOTEdge Version
func (o ComputeVersionInformationResponseOutput) IotEdgeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeVersionInformationResponse) *string { return v.IotEdgeVersion }).(pulumi.StringPtrOutput)
}

// Kubernetes Version
func (o ComputeVersionInformationResponseOutput) KubernetesVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeVersionInformationResponse) *string { return v.KubernetesVersion }).(pulumi.StringPtrOutput)
}

// Contains all the contact details of the customer.
type ContactDetails struct {
	// The name of the company.
	CompanyName string `pulumi:"companyName"`
	// The contact person name.
	ContactPerson string `pulumi:"contactPerson"`
	// The email list.
	EmailList []string `pulumi:"emailList"`
	// The phone number.
	Phone string `pulumi:"phone"`
}

// ContactDetailsInput is an input type that accepts ContactDetailsArgs and ContactDetailsOutput values.
// You can construct a concrete instance of `ContactDetailsInput` via:
//
//	ContactDetailsArgs{...}
type ContactDetailsInput interface {
	pulumi.Input

	ToContactDetailsOutput() ContactDetailsOutput
	ToContactDetailsOutputWithContext(context.Context) ContactDetailsOutput
}

// Contains all the contact details of the customer.
type ContactDetailsArgs struct {
	// The name of the company.
	CompanyName pulumi.StringInput `pulumi:"companyName"`
	// The contact person name.
	ContactPerson pulumi.StringInput `pulumi:"contactPerson"`
	// The email list.
	EmailList pulumi.StringArrayInput `pulumi:"emailList"`
	// The phone number.
	Phone pulumi.StringInput `pulumi:"phone"`
}

func (ContactDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetails)(nil)).Elem()
}

func (i ContactDetailsArgs) ToContactDetailsOutput() ContactDetailsOutput {
	return i.ToContactDetailsOutputWithContext(context.Background())
}

func (i ContactDetailsArgs) ToContactDetailsOutputWithContext(ctx context.Context) ContactDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailsOutput)
}

func (i ContactDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[ContactDetails] {
	return pulumix.Output[ContactDetails]{
		OutputState: i.ToContactDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i ContactDetailsArgs) ToContactDetailsPtrOutput() ContactDetailsPtrOutput {
	return i.ToContactDetailsPtrOutputWithContext(context.Background())
}

func (i ContactDetailsArgs) ToContactDetailsPtrOutputWithContext(ctx context.Context) ContactDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailsOutput).ToContactDetailsPtrOutputWithContext(ctx)
}

// ContactDetailsPtrInput is an input type that accepts ContactDetailsArgs, ContactDetailsPtr and ContactDetailsPtrOutput values.
// You can construct a concrete instance of `ContactDetailsPtrInput` via:
//
//	        ContactDetailsArgs{...}
//
//	or:
//
//	        nil
type ContactDetailsPtrInput interface {
	pulumi.Input

	ToContactDetailsPtrOutput() ContactDetailsPtrOutput
	ToContactDetailsPtrOutputWithContext(context.Context) ContactDetailsPtrOutput
}

type contactDetailsPtrType ContactDetailsArgs

func ContactDetailsPtr(v *ContactDetailsArgs) ContactDetailsPtrInput {
	return (*contactDetailsPtrType)(v)
}

func (*contactDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactDetails)(nil)).Elem()
}

func (i *contactDetailsPtrType) ToContactDetailsPtrOutput() ContactDetailsPtrOutput {
	return i.ToContactDetailsPtrOutputWithContext(context.Background())
}

func (i *contactDetailsPtrType) ToContactDetailsPtrOutputWithContext(ctx context.Context) ContactDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactDetailsPtrOutput)
}

func (i *contactDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContactDetails] {
	return pulumix.Output[*ContactDetails]{
		OutputState: i.ToContactDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

// Contains all the contact details of the customer.
type ContactDetailsOutput struct{ *pulumi.OutputState }

func (ContactDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetails)(nil)).Elem()
}

func (o ContactDetailsOutput) ToContactDetailsOutput() ContactDetailsOutput {
	return o
}

func (o ContactDetailsOutput) ToContactDetailsOutputWithContext(ctx context.Context) ContactDetailsOutput {
	return o
}

func (o ContactDetailsOutput) ToContactDetailsPtrOutput() ContactDetailsPtrOutput {
	return o.ToContactDetailsPtrOutputWithContext(context.Background())
}

func (o ContactDetailsOutput) ToContactDetailsPtrOutputWithContext(ctx context.Context) ContactDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactDetails) *ContactDetails {
		return &v
	}).(ContactDetailsPtrOutput)
}

func (o ContactDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[ContactDetails] {
	return pulumix.Output[ContactDetails]{
		OutputState: o.OutputState,
	}
}

// The name of the company.
func (o ContactDetailsOutput) CompanyName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.CompanyName }).(pulumi.StringOutput)
}

// The contact person name.
func (o ContactDetailsOutput) ContactPerson() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.ContactPerson }).(pulumi.StringOutput)
}

// The email list.
func (o ContactDetailsOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactDetails) []string { return v.EmailList }).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetails) string { return v.Phone }).(pulumi.StringOutput)
}

type ContactDetailsPtrOutput struct{ *pulumi.OutputState }

func (ContactDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactDetails)(nil)).Elem()
}

func (o ContactDetailsPtrOutput) ToContactDetailsPtrOutput() ContactDetailsPtrOutput {
	return o
}

func (o ContactDetailsPtrOutput) ToContactDetailsPtrOutputWithContext(ctx context.Context) ContactDetailsPtrOutput {
	return o
}

func (o ContactDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContactDetails] {
	return pulumix.Output[*ContactDetails]{
		OutputState: o.OutputState,
	}
}

func (o ContactDetailsPtrOutput) Elem() ContactDetailsOutput {
	return o.ApplyT(func(v *ContactDetails) ContactDetails {
		if v != nil {
			return *v
		}
		var ret ContactDetails
		return ret
	}).(ContactDetailsOutput)
}

// The name of the company.
func (o ContactDetailsPtrOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetails) *string {
		if v == nil {
			return nil
		}
		return &v.CompanyName
	}).(pulumi.StringPtrOutput)
}

// The contact person name.
func (o ContactDetailsPtrOutput) ContactPerson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetails) *string {
		if v == nil {
			return nil
		}
		return &v.ContactPerson
	}).(pulumi.StringPtrOutput)
}

// The email list.
func (o ContactDetailsPtrOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactDetails) []string {
		if v == nil {
			return nil
		}
		return v.EmailList
	}).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsPtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetails) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// Contains all the contact details of the customer.
type ContactDetailsResponse struct {
	// The name of the company.
	CompanyName string `pulumi:"companyName"`
	// The contact person name.
	ContactPerson string `pulumi:"contactPerson"`
	// The email list.
	EmailList []string `pulumi:"emailList"`
	// The phone number.
	Phone string `pulumi:"phone"`
}

// Contains all the contact details of the customer.
type ContactDetailsResponseOutput struct{ *pulumi.OutputState }

func (ContactDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactDetailsResponse)(nil)).Elem()
}

func (o ContactDetailsResponseOutput) ToContactDetailsResponseOutput() ContactDetailsResponseOutput {
	return o
}

func (o ContactDetailsResponseOutput) ToContactDetailsResponseOutputWithContext(ctx context.Context) ContactDetailsResponseOutput {
	return o
}

func (o ContactDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContactDetailsResponse] {
	return pulumix.Output[ContactDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the company.
func (o ContactDetailsResponseOutput) CompanyName() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.CompanyName }).(pulumi.StringOutput)
}

// The contact person name.
func (o ContactDetailsResponseOutput) ContactPerson() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.ContactPerson }).(pulumi.StringOutput)
}

// The email list.
func (o ContactDetailsResponseOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactDetailsResponse) []string { return v.EmailList }).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsResponseOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v ContactDetailsResponse) string { return v.Phone }).(pulumi.StringOutput)
}

type ContactDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContactDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactDetailsResponse)(nil)).Elem()
}

func (o ContactDetailsResponsePtrOutput) ToContactDetailsResponsePtrOutput() ContactDetailsResponsePtrOutput {
	return o
}

func (o ContactDetailsResponsePtrOutput) ToContactDetailsResponsePtrOutputWithContext(ctx context.Context) ContactDetailsResponsePtrOutput {
	return o
}

func (o ContactDetailsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContactDetailsResponse] {
	return pulumix.Output[*ContactDetailsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContactDetailsResponsePtrOutput) Elem() ContactDetailsResponseOutput {
	return o.ApplyT(func(v *ContactDetailsResponse) ContactDetailsResponse {
		if v != nil {
			return *v
		}
		var ret ContactDetailsResponse
		return ret
	}).(ContactDetailsResponseOutput)
}

// The name of the company.
func (o ContactDetailsResponsePtrOutput) CompanyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CompanyName
	}).(pulumi.StringPtrOutput)
}

// The contact person name.
func (o ContactDetailsResponsePtrOutput) ContactPerson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContactPerson
	}).(pulumi.StringPtrOutput)
}

// The email list.
func (o ContactDetailsResponsePtrOutput) EmailList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactDetailsResponse) []string {
		if v == nil {
			return nil
		}
		return v.EmailList
	}).(pulumi.StringArrayOutput)
}

// The phone number.
func (o ContactDetailsResponsePtrOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Phone
	}).(pulumi.StringPtrOutput)
}

// Wraps data-residency related information for edge-resource and this should be used with ARM layer.
type DataResidency struct {
	// DataResidencyType enum
	Type *string `pulumi:"type"`
}

// DataResidencyInput is an input type that accepts DataResidencyArgs and DataResidencyOutput values.
// You can construct a concrete instance of `DataResidencyInput` via:
//
//	DataResidencyArgs{...}
type DataResidencyInput interface {
	pulumi.Input

	ToDataResidencyOutput() DataResidencyOutput
	ToDataResidencyOutputWithContext(context.Context) DataResidencyOutput
}

// Wraps data-residency related information for edge-resource and this should be used with ARM layer.
type DataResidencyArgs struct {
	// DataResidencyType enum
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DataResidencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataResidency)(nil)).Elem()
}

func (i DataResidencyArgs) ToDataResidencyOutput() DataResidencyOutput {
	return i.ToDataResidencyOutputWithContext(context.Background())
}

func (i DataResidencyArgs) ToDataResidencyOutputWithContext(ctx context.Context) DataResidencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataResidencyOutput)
}

func (i DataResidencyArgs) ToOutput(ctx context.Context) pulumix.Output[DataResidency] {
	return pulumix.Output[DataResidency]{
		OutputState: i.ToDataResidencyOutputWithContext(ctx).OutputState,
	}
}

func (i DataResidencyArgs) ToDataResidencyPtrOutput() DataResidencyPtrOutput {
	return i.ToDataResidencyPtrOutputWithContext(context.Background())
}

func (i DataResidencyArgs) ToDataResidencyPtrOutputWithContext(ctx context.Context) DataResidencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataResidencyOutput).ToDataResidencyPtrOutputWithContext(ctx)
}

// DataResidencyPtrInput is an input type that accepts DataResidencyArgs, DataResidencyPtr and DataResidencyPtrOutput values.
// You can construct a concrete instance of `DataResidencyPtrInput` via:
//
//	        DataResidencyArgs{...}
//
//	or:
//
//	        nil
type DataResidencyPtrInput interface {
	pulumi.Input

	ToDataResidencyPtrOutput() DataResidencyPtrOutput
	ToDataResidencyPtrOutputWithContext(context.Context) DataResidencyPtrOutput
}

type dataResidencyPtrType DataResidencyArgs

func DataResidencyPtr(v *DataResidencyArgs) DataResidencyPtrInput {
	return (*dataResidencyPtrType)(v)
}

func (*dataResidencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataResidency)(nil)).Elem()
}

func (i *dataResidencyPtrType) ToDataResidencyPtrOutput() DataResidencyPtrOutput {
	return i.ToDataResidencyPtrOutputWithContext(context.Background())
}

func (i *dataResidencyPtrType) ToDataResidencyPtrOutputWithContext(ctx context.Context) DataResidencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataResidencyPtrOutput)
}

func (i *dataResidencyPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataResidency] {
	return pulumix.Output[*DataResidency]{
		OutputState: i.ToDataResidencyPtrOutputWithContext(ctx).OutputState,
	}
}

// Wraps data-residency related information for edge-resource and this should be used with ARM layer.
type DataResidencyOutput struct{ *pulumi.OutputState }

func (DataResidencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataResidency)(nil)).Elem()
}

func (o DataResidencyOutput) ToDataResidencyOutput() DataResidencyOutput {
	return o
}

func (o DataResidencyOutput) ToDataResidencyOutputWithContext(ctx context.Context) DataResidencyOutput {
	return o
}

func (o DataResidencyOutput) ToDataResidencyPtrOutput() DataResidencyPtrOutput {
	return o.ToDataResidencyPtrOutputWithContext(context.Background())
}

func (o DataResidencyOutput) ToDataResidencyPtrOutputWithContext(ctx context.Context) DataResidencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataResidency) *DataResidency {
		return &v
	}).(DataResidencyPtrOutput)
}

func (o DataResidencyOutput) ToOutput(ctx context.Context) pulumix.Output[DataResidency] {
	return pulumix.Output[DataResidency]{
		OutputState: o.OutputState,
	}
}

// DataResidencyType enum
func (o DataResidencyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataResidency) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataResidencyPtrOutput struct{ *pulumi.OutputState }

func (DataResidencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataResidency)(nil)).Elem()
}

func (o DataResidencyPtrOutput) ToDataResidencyPtrOutput() DataResidencyPtrOutput {
	return o
}

func (o DataResidencyPtrOutput) ToDataResidencyPtrOutputWithContext(ctx context.Context) DataResidencyPtrOutput {
	return o
}

func (o DataResidencyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataResidency] {
	return pulumix.Output[*DataResidency]{
		OutputState: o.OutputState,
	}
}

func (o DataResidencyPtrOutput) Elem() DataResidencyOutput {
	return o.ApplyT(func(v *DataResidency) DataResidency {
		if v != nil {
			return *v
		}
		var ret DataResidency
		return ret
	}).(DataResidencyOutput)
}

// DataResidencyType enum
func (o DataResidencyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataResidency) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Wraps data-residency related information for edge-resource and this should be used with ARM layer.
type DataResidencyResponse struct {
	// DataResidencyType enum
	Type *string `pulumi:"type"`
}

// Wraps data-residency related information for edge-resource and this should be used with ARM layer.
type DataResidencyResponseOutput struct{ *pulumi.OutputState }

func (DataResidencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataResidencyResponse)(nil)).Elem()
}

func (o DataResidencyResponseOutput) ToDataResidencyResponseOutput() DataResidencyResponseOutput {
	return o
}

func (o DataResidencyResponseOutput) ToDataResidencyResponseOutputWithContext(ctx context.Context) DataResidencyResponseOutput {
	return o
}

func (o DataResidencyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataResidencyResponse] {
	return pulumix.Output[DataResidencyResponse]{
		OutputState: o.OutputState,
	}
}

// DataResidencyType enum
func (o DataResidencyResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataResidencyResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DataResidencyResponsePtrOutput struct{ *pulumi.OutputState }

func (DataResidencyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataResidencyResponse)(nil)).Elem()
}

func (o DataResidencyResponsePtrOutput) ToDataResidencyResponsePtrOutput() DataResidencyResponsePtrOutput {
	return o
}

func (o DataResidencyResponsePtrOutput) ToDataResidencyResponsePtrOutputWithContext(ctx context.Context) DataResidencyResponsePtrOutput {
	return o
}

func (o DataResidencyResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataResidencyResponse] {
	return pulumix.Output[*DataResidencyResponse]{
		OutputState: o.OutputState,
	}
}

func (o DataResidencyResponsePtrOutput) Elem() DataResidencyResponseOutput {
	return o.ApplyT(func(v *DataResidencyResponse) DataResidencyResponse {
		if v != nil {
			return *v
		}
		var ret DataResidencyResponse
		return ret
	}).(DataResidencyResponseOutput)
}

// DataResidencyType enum
func (o DataResidencyResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataResidencyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Details about Edge Profile for the resource
type EdgeProfileResponse struct {
	// Edge Profile Subscription
	Subscription *EdgeProfileSubscriptionResponse `pulumi:"subscription"`
}

// Details about Edge Profile for the resource
type EdgeProfileResponseOutput struct{ *pulumi.OutputState }

func (EdgeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeProfileResponse)(nil)).Elem()
}

func (o EdgeProfileResponseOutput) ToEdgeProfileResponseOutput() EdgeProfileResponseOutput {
	return o
}

func (o EdgeProfileResponseOutput) ToEdgeProfileResponseOutputWithContext(ctx context.Context) EdgeProfileResponseOutput {
	return o
}

func (o EdgeProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EdgeProfileResponse] {
	return pulumix.Output[EdgeProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Edge Profile Subscription
func (o EdgeProfileResponseOutput) Subscription() EdgeProfileSubscriptionResponsePtrOutput {
	return o.ApplyT(func(v EdgeProfileResponse) *EdgeProfileSubscriptionResponse { return v.Subscription }).(EdgeProfileSubscriptionResponsePtrOutput)
}

// Subscription details for the Edge Profile
type EdgeProfileSubscriptionResponse struct {
	// ARM ID of the subscription
	Id                  *string                                  `pulumi:"id"`
	LocationPlacementId *string                                  `pulumi:"locationPlacementId"`
	QuotaId             *string                                  `pulumi:"quotaId"`
	RegisteredFeatures  []SubscriptionRegisteredFeaturesResponse `pulumi:"registeredFeatures"`
	RegistrationDate    *string                                  `pulumi:"registrationDate"`
	// Edge Subscription Registration ID
	RegistrationId    *string `pulumi:"registrationId"`
	SerializedDetails *string `pulumi:"serializedDetails"`
	State             *string `pulumi:"state"`
	SubscriptionId    *string `pulumi:"subscriptionId"`
	TenantId          *string `pulumi:"tenantId"`
}

// Subscription details for the Edge Profile
type EdgeProfileSubscriptionResponseOutput struct{ *pulumi.OutputState }

func (EdgeProfileSubscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeProfileSubscriptionResponse)(nil)).Elem()
}

func (o EdgeProfileSubscriptionResponseOutput) ToEdgeProfileSubscriptionResponseOutput() EdgeProfileSubscriptionResponseOutput {
	return o
}

func (o EdgeProfileSubscriptionResponseOutput) ToEdgeProfileSubscriptionResponseOutputWithContext(ctx context.Context) EdgeProfileSubscriptionResponseOutput {
	return o
}

func (o EdgeProfileSubscriptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EdgeProfileSubscriptionResponse] {
	return pulumix.Output[EdgeProfileSubscriptionResponse]{
		OutputState: o.OutputState,
	}
}

// ARM ID of the subscription
func (o EdgeProfileSubscriptionResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) LocationPlacementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.LocationPlacementId }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) QuotaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.QuotaId }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) RegisteredFeatures() SubscriptionRegisteredFeaturesResponseArrayOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) []SubscriptionRegisteredFeaturesResponse {
		return v.RegisteredFeatures
	}).(SubscriptionRegisteredFeaturesResponseArrayOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) RegistrationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.RegistrationDate }).(pulumi.StringPtrOutput)
}

// Edge Subscription Registration ID
func (o EdgeProfileSubscriptionResponseOutput) RegistrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.RegistrationId }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) SerializedDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.SerializedDetails }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeProfileSubscriptionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type EdgeProfileSubscriptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EdgeProfileSubscriptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeProfileSubscriptionResponse)(nil)).Elem()
}

func (o EdgeProfileSubscriptionResponsePtrOutput) ToEdgeProfileSubscriptionResponsePtrOutput() EdgeProfileSubscriptionResponsePtrOutput {
	return o
}

func (o EdgeProfileSubscriptionResponsePtrOutput) ToEdgeProfileSubscriptionResponsePtrOutputWithContext(ctx context.Context) EdgeProfileSubscriptionResponsePtrOutput {
	return o
}

func (o EdgeProfileSubscriptionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EdgeProfileSubscriptionResponse] {
	return pulumix.Output[*EdgeProfileSubscriptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o EdgeProfileSubscriptionResponsePtrOutput) Elem() EdgeProfileSubscriptionResponseOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) EdgeProfileSubscriptionResponse {
		if v != nil {
			return *v
		}
		var ret EdgeProfileSubscriptionResponse
		return ret
	}).(EdgeProfileSubscriptionResponseOutput)
}

// ARM ID of the subscription
func (o EdgeProfileSubscriptionResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) LocationPlacementId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LocationPlacementId
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) QuotaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.QuotaId
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) RegisteredFeatures() SubscriptionRegisteredFeaturesResponseArrayOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) []SubscriptionRegisteredFeaturesResponse {
		if v == nil {
			return nil
		}
		return v.RegisteredFeatures
	}).(SubscriptionRegisteredFeaturesResponseArrayOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) RegistrationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationDate
	}).(pulumi.StringPtrOutput)
}

// Edge Subscription Registration ID
func (o EdgeProfileSubscriptionResponsePtrOutput) RegistrationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationId
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) SerializedDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SerializedDetails
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

func (o EdgeProfileSubscriptionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeProfileSubscriptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Represents a single status change.
type OrderStatusResponse struct {
	// Dictionary to hold generic information which is not stored
	// by the already existing properties
	AdditionalOrderDetails map[string]string `pulumi:"additionalOrderDetails"`
	// Comments related to this status change.
	Comments *string `pulumi:"comments"`
	// Status of the order as per the allowed status types.
	Status string `pulumi:"status"`
	// Tracking information related to the state in the ordering flow
	TrackingInformation TrackingInfoResponse `pulumi:"trackingInformation"`
	// Time of status update.
	UpdateDateTime string `pulumi:"updateDateTime"`
}

// Represents a single status change.
type OrderStatusResponseOutput struct{ *pulumi.OutputState }

func (OrderStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OrderStatusResponse)(nil)).Elem()
}

func (o OrderStatusResponseOutput) ToOrderStatusResponseOutput() OrderStatusResponseOutput {
	return o
}

func (o OrderStatusResponseOutput) ToOrderStatusResponseOutputWithContext(ctx context.Context) OrderStatusResponseOutput {
	return o
}

func (o OrderStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OrderStatusResponse] {
	return pulumix.Output[OrderStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Dictionary to hold generic information which is not stored
// by the already existing properties
func (o OrderStatusResponseOutput) AdditionalOrderDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v OrderStatusResponse) map[string]string { return v.AdditionalOrderDetails }).(pulumi.StringMapOutput)
}

// Comments related to this status change.
func (o OrderStatusResponseOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OrderStatusResponse) *string { return v.Comments }).(pulumi.StringPtrOutput)
}

// Status of the order as per the allowed status types.
func (o OrderStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v OrderStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tracking information related to the state in the ordering flow
func (o OrderStatusResponseOutput) TrackingInformation() TrackingInfoResponseOutput {
	return o.ApplyT(func(v OrderStatusResponse) TrackingInfoResponse { return v.TrackingInformation }).(TrackingInfoResponseOutput)
}

// Time of status update.
func (o OrderStatusResponseOutput) UpdateDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v OrderStatusResponse) string { return v.UpdateDateTime }).(pulumi.StringOutput)
}

type OrderStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (OrderStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OrderStatusResponse)(nil)).Elem()
}

func (o OrderStatusResponseArrayOutput) ToOrderStatusResponseArrayOutput() OrderStatusResponseArrayOutput {
	return o
}

func (o OrderStatusResponseArrayOutput) ToOrderStatusResponseArrayOutputWithContext(ctx context.Context) OrderStatusResponseArrayOutput {
	return o
}

func (o OrderStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OrderStatusResponse] {
	return pulumix.Output[[]OrderStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o OrderStatusResponseArrayOutput) Index(i pulumi.IntInput) OrderStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OrderStatusResponse {
		return vs[0].([]OrderStatusResponse)[vs[1].(int)]
	}).(OrderStatusResponseOutput)
}

// Msi identity details of the resource
type ResourceIdentityResponse struct {
	// Service Principal Id backing the Msi
	PrincipalId string `pulumi:"principalId"`
	// Home Tenant Id
	TenantId string `pulumi:"tenantId"`
	// Identity type
	Type *string `pulumi:"type"`
}

// Msi identity details of the resource
type ResourceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityResponse)(nil)).Elem()
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutput() ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToResourceIdentityResponseOutputWithContext(ctx context.Context) ResourceIdentityResponseOutput {
	return o
}

func (o ResourceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceIdentityResponse] {
	return pulumix.Output[ResourceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// Service Principal Id backing the Msi
func (o ResourceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// Home Tenant Id
func (o ResourceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Identity type
func (o ResourceIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Fields for tracking resource move
type ResourceMoveDetailsResponse struct {
	// Denotes whether move operation is in progress
	OperationInProgress *string `pulumi:"operationInProgress"`
	// Denotes the timeout of the operation to finish
	OperationInProgressLockTimeoutInUTC *string `pulumi:"operationInProgressLockTimeoutInUTC"`
}

// Fields for tracking resource move
type ResourceMoveDetailsResponseOutput struct{ *pulumi.OutputState }

func (ResourceMoveDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMoveDetailsResponse)(nil)).Elem()
}

func (o ResourceMoveDetailsResponseOutput) ToResourceMoveDetailsResponseOutput() ResourceMoveDetailsResponseOutput {
	return o
}

func (o ResourceMoveDetailsResponseOutput) ToResourceMoveDetailsResponseOutputWithContext(ctx context.Context) ResourceMoveDetailsResponseOutput {
	return o
}

func (o ResourceMoveDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceMoveDetailsResponse] {
	return pulumix.Output[ResourceMoveDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// Denotes whether move operation is in progress
func (o ResourceMoveDetailsResponseOutput) OperationInProgress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveDetailsResponse) *string { return v.OperationInProgress }).(pulumi.StringPtrOutput)
}

// Denotes the timeout of the operation to finish
func (o ResourceMoveDetailsResponseOutput) OperationInProgressLockTimeoutInUTC() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMoveDetailsResponse) *string { return v.OperationInProgressLockTimeoutInUTC }).(pulumi.StringPtrOutput)
}

// Holds device secret either as a KeyVault reference or as an encrypted value.
type SecretResponse struct {
	// Encrypted (using device public key) secret value.
	EncryptedSecret *AsymmetricEncryptedSecretResponse `pulumi:"encryptedSecret"`
	// Id of the Key-Vault where secret is stored (ex: secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
	KeyVaultId *string `pulumi:"keyVaultId"`
}

// Holds device secret either as a KeyVault reference or as an encrypted value.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecretResponse] {
	return pulumix.Output[SecretResponse]{
		OutputState: o.OutputState,
	}
}

// Encrypted (using device public key) secret value.
func (o SecretResponseOutput) EncryptedSecret() AsymmetricEncryptedSecretResponsePtrOutput {
	return o.ApplyT(func(v SecretResponse) *AsymmetricEncryptedSecretResponse { return v.EncryptedSecret }).(AsymmetricEncryptedSecretResponsePtrOutput)
}

// Id of the Key-Vault where secret is stored (ex: secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
func (o SecretResponseOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretResponse) *string { return v.KeyVaultId }).(pulumi.StringPtrOutput)
}

type SecretResponseMapOutput struct{ *pulumi.OutputState }

func (SecretResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretResponse)(nil)).Elem()
}

func (o SecretResponseMapOutput) ToSecretResponseMapOutput() SecretResponseMapOutput {
	return o
}

func (o SecretResponseMapOutput) ToSecretResponseMapOutputWithContext(ctx context.Context) SecretResponseMapOutput {
	return o
}

func (o SecretResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]SecretResponse] {
	return pulumix.Output[map[string]SecretResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecretResponseMapOutput) MapIndex(k pulumi.StringInput) SecretResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretResponse {
		return vs[0].(map[string]SecretResponse)[vs[1].(string)]
	}).(SecretResponseOutput)
}

// The SKU type.
type Sku struct {
	// SKU name.
	Name *string `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU type.
type SkuArgs struct {
	// SKU name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: i.ToSkuOutputWithContext(ctx).OutputState,
	}
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

func (i *skuPtrType) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: i.ToSkuPtrOutputWithContext(ctx).OutputState,
	}
}

// The SKU type.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

func (o SkuOutput) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: o.OutputState,
	}
}

// SKU name.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: o.OutputState,
	}
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// SKU name.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The SKU type.
type SkuResponse struct {
	// SKU name.
	Name *string `pulumi:"name"`
	// The SKU tier. This is based on the SKU name.
	Tier *string `pulumi:"tier"`
}

// The SKU type.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SkuResponse] {
	return pulumix.Output[SkuResponse]{
		OutputState: o.OutputState,
	}
}

// SKU name.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SkuResponse] {
	return pulumix.Output[*SkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// SKU name.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU tier. This is based on the SKU name.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

type SubscriptionRegisteredFeaturesResponse struct {
	Name  *string `pulumi:"name"`
	State *string `pulumi:"state"`
}

type SubscriptionRegisteredFeaturesResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionRegisteredFeaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionRegisteredFeaturesResponse)(nil)).Elem()
}

func (o SubscriptionRegisteredFeaturesResponseOutput) ToSubscriptionRegisteredFeaturesResponseOutput() SubscriptionRegisteredFeaturesResponseOutput {
	return o
}

func (o SubscriptionRegisteredFeaturesResponseOutput) ToSubscriptionRegisteredFeaturesResponseOutputWithContext(ctx context.Context) SubscriptionRegisteredFeaturesResponseOutput {
	return o
}

func (o SubscriptionRegisteredFeaturesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionRegisteredFeaturesResponse] {
	return pulumix.Output[SubscriptionRegisteredFeaturesResponse]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionRegisteredFeaturesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRegisteredFeaturesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o SubscriptionRegisteredFeaturesResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionRegisteredFeaturesResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type SubscriptionRegisteredFeaturesResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionRegisteredFeaturesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionRegisteredFeaturesResponse)(nil)).Elem()
}

func (o SubscriptionRegisteredFeaturesResponseArrayOutput) ToSubscriptionRegisteredFeaturesResponseArrayOutput() SubscriptionRegisteredFeaturesResponseArrayOutput {
	return o
}

func (o SubscriptionRegisteredFeaturesResponseArrayOutput) ToSubscriptionRegisteredFeaturesResponseArrayOutputWithContext(ctx context.Context) SubscriptionRegisteredFeaturesResponseArrayOutput {
	return o
}

func (o SubscriptionRegisteredFeaturesResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SubscriptionRegisteredFeaturesResponse] {
	return pulumix.Output[[]SubscriptionRegisteredFeaturesResponse]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionRegisteredFeaturesResponseArrayOutput) Index(i pulumi.IntInput) SubscriptionRegisteredFeaturesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionRegisteredFeaturesResponse {
		return vs[0].([]SubscriptionRegisteredFeaturesResponse)[vs[1].(int)]
	}).(SubscriptionRegisteredFeaturesResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Tracking courier information.
type TrackingInfoResponse struct {
	// Name of the carrier used in the delivery.
	CarrierName *string `pulumi:"carrierName"`
	// Serial number of the device being tracked.
	SerialNumber *string `pulumi:"serialNumber"`
	// Tracking ID of the shipment.
	TrackingId *string `pulumi:"trackingId"`
	// Tracking URL of the shipment.
	TrackingUrl *string `pulumi:"trackingUrl"`
}

// Tracking courier information.
type TrackingInfoResponseOutput struct{ *pulumi.OutputState }

func (TrackingInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrackingInfoResponse)(nil)).Elem()
}

func (o TrackingInfoResponseOutput) ToTrackingInfoResponseOutput() TrackingInfoResponseOutput {
	return o
}

func (o TrackingInfoResponseOutput) ToTrackingInfoResponseOutputWithContext(ctx context.Context) TrackingInfoResponseOutput {
	return o
}

func (o TrackingInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrackingInfoResponse] {
	return pulumix.Output[TrackingInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the carrier used in the delivery.
func (o TrackingInfoResponseOutput) CarrierName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.CarrierName }).(pulumi.StringPtrOutput)
}

// Serial number of the device being tracked.
func (o TrackingInfoResponseOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

// Tracking ID of the shipment.
func (o TrackingInfoResponseOutput) TrackingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.TrackingId }).(pulumi.StringPtrOutput)
}

// Tracking URL of the shipment.
func (o TrackingInfoResponseOutput) TrackingUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrackingInfoResponse) *string { return v.TrackingUrl }).(pulumi.StringPtrOutput)
}

type TrackingInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (TrackingInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrackingInfoResponse)(nil)).Elem()
}

func (o TrackingInfoResponseArrayOutput) ToTrackingInfoResponseArrayOutput() TrackingInfoResponseArrayOutput {
	return o
}

func (o TrackingInfoResponseArrayOutput) ToTrackingInfoResponseArrayOutputWithContext(ctx context.Context) TrackingInfoResponseArrayOutput {
	return o
}

func (o TrackingInfoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TrackingInfoResponse] {
	return pulumix.Output[[]TrackingInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrackingInfoResponseArrayOutput) Index(i pulumi.IntInput) TrackingInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrackingInfoResponse {
		return vs[0].([]TrackingInfoResponse)[vs[1].(int)]
	}).(TrackingInfoResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AddressOutput{})
	pulumi.RegisterOutputType(AddressPtrOutput{})
	pulumi.RegisterOutputType(AddressResponseOutput{})
	pulumi.RegisterOutputType(AddressResponsePtrOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponseOutput{})
	pulumi.RegisterOutputType(AsymmetricEncryptedSecretResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeVersionInformationResponseOutput{})
	pulumi.RegisterOutputType(ContactDetailsOutput{})
	pulumi.RegisterOutputType(ContactDetailsPtrOutput{})
	pulumi.RegisterOutputType(ContactDetailsResponseOutput{})
	pulumi.RegisterOutputType(ContactDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(DataResidencyOutput{})
	pulumi.RegisterOutputType(DataResidencyPtrOutput{})
	pulumi.RegisterOutputType(DataResidencyResponseOutput{})
	pulumi.RegisterOutputType(DataResidencyResponsePtrOutput{})
	pulumi.RegisterOutputType(EdgeProfileResponseOutput{})
	pulumi.RegisterOutputType(EdgeProfileSubscriptionResponseOutput{})
	pulumi.RegisterOutputType(EdgeProfileSubscriptionResponsePtrOutput{})
	pulumi.RegisterOutputType(OrderStatusResponseOutput{})
	pulumi.RegisterOutputType(OrderStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ResourceMoveDetailsResponseOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SecretResponseMapOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionRegisteredFeaturesResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionRegisteredFeaturesResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TrackingInfoResponseOutput{})
	pulumi.RegisterOutputType(TrackingInfoResponseArrayOutput{})
}
