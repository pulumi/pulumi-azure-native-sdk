// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// configuration associated with SAP Landscape Monitor Dashboard.
// Azure REST API version: 2023-04-01.
type SapLandscapeMonitor struct {
	pulumi.CustomResourceState

	// Gets or sets the SID groupings by landscape and Environment.
	Grouping SapLandscapeMonitorPropertiesResponseGroupingPtrOutput `pulumi:"grouping"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// State of provisioning of the SAP monitor.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
	TopMetricsThresholds SapLandscapeMonitorMetricThresholdsResponseArrayOutput `pulumi:"topMetricsThresholds"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSapLandscapeMonitor registers a new resource with the given unique name, arguments, and options.
func NewSapLandscapeMonitor(ctx *pulumi.Context,
	name string, args *SapLandscapeMonitorArgs, opts ...pulumi.ResourceOption) (*SapLandscapeMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads/v20221101preview:SapLandscapeMonitor"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20230401:SapLandscapeMonitor"),
		},
	})
	opts = append(opts, aliases)
	var resource SapLandscapeMonitor
	err := ctx.RegisterResource("azure-native:workloads:SapLandscapeMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSapLandscapeMonitor gets an existing SapLandscapeMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSapLandscapeMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SapLandscapeMonitorState, opts ...pulumi.ResourceOption) (*SapLandscapeMonitor, error) {
	var resource SapLandscapeMonitor
	err := ctx.ReadResource("azure-native:workloads:SapLandscapeMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SapLandscapeMonitor resources.
type sapLandscapeMonitorState struct {
}

type SapLandscapeMonitorState struct {
}

func (SapLandscapeMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*sapLandscapeMonitorState)(nil)).Elem()
}

type sapLandscapeMonitorArgs struct {
	// Gets or sets the SID groupings by landscape and Environment.
	Grouping *SapLandscapeMonitorPropertiesGrouping `pulumi:"grouping"`
	// Name of the SAP monitor resource.
	MonitorName string `pulumi:"monitorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
	TopMetricsThresholds []SapLandscapeMonitorMetricThresholds `pulumi:"topMetricsThresholds"`
}

// The set of arguments for constructing a SapLandscapeMonitor resource.
type SapLandscapeMonitorArgs struct {
	// Gets or sets the SID groupings by landscape and Environment.
	Grouping SapLandscapeMonitorPropertiesGroupingPtrInput
	// Name of the SAP monitor resource.
	MonitorName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
	TopMetricsThresholds SapLandscapeMonitorMetricThresholdsArrayInput
}

func (SapLandscapeMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sapLandscapeMonitorArgs)(nil)).Elem()
}

type SapLandscapeMonitorInput interface {
	pulumi.Input

	ToSapLandscapeMonitorOutput() SapLandscapeMonitorOutput
	ToSapLandscapeMonitorOutputWithContext(ctx context.Context) SapLandscapeMonitorOutput
}

func (*SapLandscapeMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitor)(nil)).Elem()
}

func (i *SapLandscapeMonitor) ToSapLandscapeMonitorOutput() SapLandscapeMonitorOutput {
	return i.ToSapLandscapeMonitorOutputWithContext(context.Background())
}

func (i *SapLandscapeMonitor) ToSapLandscapeMonitorOutputWithContext(ctx context.Context) SapLandscapeMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorOutput)
}

type SapLandscapeMonitorOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitor)(nil)).Elem()
}

func (o SapLandscapeMonitorOutput) ToSapLandscapeMonitorOutput() SapLandscapeMonitorOutput {
	return o
}

func (o SapLandscapeMonitorOutput) ToSapLandscapeMonitorOutputWithContext(ctx context.Context) SapLandscapeMonitorOutput {
	return o
}

// Gets or sets the SID groupings by landscape and Environment.
func (o SapLandscapeMonitorOutput) Grouping() SapLandscapeMonitorPropertiesResponseGroupingPtrOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) SapLandscapeMonitorPropertiesResponseGroupingPtrOutput { return v.Grouping }).(SapLandscapeMonitorPropertiesResponseGroupingPtrOutput)
}

// The name of the resource
func (o SapLandscapeMonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// State of provisioning of the SAP monitor.
func (o SapLandscapeMonitorOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SapLandscapeMonitorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard
func (o SapLandscapeMonitorOutput) TopMetricsThresholds() SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
		return v.TopMetricsThresholds
	}).(SapLandscapeMonitorMetricThresholdsResponseArrayOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SapLandscapeMonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SapLandscapeMonitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SapLandscapeMonitorOutput{})
}
