// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Backup profile
type BackupProfile struct {
	// Whether to enable Azure backup for the workload
	BackupEnabled string `pulumi:"backupEnabled"`
}

// BackupProfileInput is an input type that accepts BackupProfileArgs and BackupProfileOutput values.
// You can construct a concrete instance of `BackupProfileInput` via:
//
//	BackupProfileArgs{...}
type BackupProfileInput interface {
	pulumi.Input

	ToBackupProfileOutput() BackupProfileOutput
	ToBackupProfileOutputWithContext(context.Context) BackupProfileOutput
}

// Backup profile
type BackupProfileArgs struct {
	// Whether to enable Azure backup for the workload
	BackupEnabled pulumi.StringInput `pulumi:"backupEnabled"`
}

func (BackupProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupProfile)(nil)).Elem()
}

func (i BackupProfileArgs) ToBackupProfileOutput() BackupProfileOutput {
	return i.ToBackupProfileOutputWithContext(context.Background())
}

func (i BackupProfileArgs) ToBackupProfileOutputWithContext(ctx context.Context) BackupProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupProfileOutput)
}

func (i BackupProfileArgs) ToOutput(ctx context.Context) pulumix.Output[BackupProfile] {
	return pulumix.Output[BackupProfile]{
		OutputState: i.ToBackupProfileOutputWithContext(ctx).OutputState,
	}
}

func (i BackupProfileArgs) ToBackupProfilePtrOutput() BackupProfilePtrOutput {
	return i.ToBackupProfilePtrOutputWithContext(context.Background())
}

func (i BackupProfileArgs) ToBackupProfilePtrOutputWithContext(ctx context.Context) BackupProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupProfileOutput).ToBackupProfilePtrOutputWithContext(ctx)
}

// BackupProfilePtrInput is an input type that accepts BackupProfileArgs, BackupProfilePtr and BackupProfilePtrOutput values.
// You can construct a concrete instance of `BackupProfilePtrInput` via:
//
//	        BackupProfileArgs{...}
//
//	or:
//
//	        nil
type BackupProfilePtrInput interface {
	pulumi.Input

	ToBackupProfilePtrOutput() BackupProfilePtrOutput
	ToBackupProfilePtrOutputWithContext(context.Context) BackupProfilePtrOutput
}

type backupProfilePtrType BackupProfileArgs

func BackupProfilePtr(v *BackupProfileArgs) BackupProfilePtrInput {
	return (*backupProfilePtrType)(v)
}

func (*backupProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupProfile)(nil)).Elem()
}

func (i *backupProfilePtrType) ToBackupProfilePtrOutput() BackupProfilePtrOutput {
	return i.ToBackupProfilePtrOutputWithContext(context.Background())
}

func (i *backupProfilePtrType) ToBackupProfilePtrOutputWithContext(ctx context.Context) BackupProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupProfilePtrOutput)
}

func (i *backupProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*BackupProfile] {
	return pulumix.Output[*BackupProfile]{
		OutputState: i.ToBackupProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Backup profile
type BackupProfileOutput struct{ *pulumi.OutputState }

func (BackupProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupProfile)(nil)).Elem()
}

func (o BackupProfileOutput) ToBackupProfileOutput() BackupProfileOutput {
	return o
}

func (o BackupProfileOutput) ToBackupProfileOutputWithContext(ctx context.Context) BackupProfileOutput {
	return o
}

func (o BackupProfileOutput) ToBackupProfilePtrOutput() BackupProfilePtrOutput {
	return o.ToBackupProfilePtrOutputWithContext(context.Background())
}

func (o BackupProfileOutput) ToBackupProfilePtrOutputWithContext(ctx context.Context) BackupProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupProfile) *BackupProfile {
		return &v
	}).(BackupProfilePtrOutput)
}

func (o BackupProfileOutput) ToOutput(ctx context.Context) pulumix.Output[BackupProfile] {
	return pulumix.Output[BackupProfile]{
		OutputState: o.OutputState,
	}
}

// Whether to enable Azure backup for the workload
func (o BackupProfileOutput) BackupEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v BackupProfile) string { return v.BackupEnabled }).(pulumi.StringOutput)
}

type BackupProfilePtrOutput struct{ *pulumi.OutputState }

func (BackupProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupProfile)(nil)).Elem()
}

func (o BackupProfilePtrOutput) ToBackupProfilePtrOutput() BackupProfilePtrOutput {
	return o
}

func (o BackupProfilePtrOutput) ToBackupProfilePtrOutputWithContext(ctx context.Context) BackupProfilePtrOutput {
	return o
}

func (o BackupProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupProfile] {
	return pulumix.Output[*BackupProfile]{
		OutputState: o.OutputState,
	}
}

func (o BackupProfilePtrOutput) Elem() BackupProfileOutput {
	return o.ApplyT(func(v *BackupProfile) BackupProfile {
		if v != nil {
			return *v
		}
		var ret BackupProfile
		return ret
	}).(BackupProfileOutput)
}

// Whether to enable Azure backup for the workload
func (o BackupProfilePtrOutput) BackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupProfile) *string {
		if v == nil {
			return nil
		}
		return &v.BackupEnabled
	}).(pulumi.StringPtrOutput)
}

// Backup profile
type BackupProfileResponse struct {
	// Whether to enable Azure backup for the workload
	BackupEnabled string `pulumi:"backupEnabled"`
	// Backup vault resource Id
	VaultResourceId string `pulumi:"vaultResourceId"`
}

// Backup profile
type BackupProfileResponseOutput struct{ *pulumi.OutputState }

func (BackupProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupProfileResponse)(nil)).Elem()
}

func (o BackupProfileResponseOutput) ToBackupProfileResponseOutput() BackupProfileResponseOutput {
	return o
}

func (o BackupProfileResponseOutput) ToBackupProfileResponseOutputWithContext(ctx context.Context) BackupProfileResponseOutput {
	return o
}

func (o BackupProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupProfileResponse] {
	return pulumix.Output[BackupProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Whether to enable Azure backup for the workload
func (o BackupProfileResponseOutput) BackupEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v BackupProfileResponse) string { return v.BackupEnabled }).(pulumi.StringOutput)
}

// Backup vault resource Id
func (o BackupProfileResponseOutput) VaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupProfileResponse) string { return v.VaultResourceId }).(pulumi.StringOutput)
}

type BackupProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (BackupProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupProfileResponse)(nil)).Elem()
}

func (o BackupProfileResponsePtrOutput) ToBackupProfileResponsePtrOutput() BackupProfileResponsePtrOutput {
	return o
}

func (o BackupProfileResponsePtrOutput) ToBackupProfileResponsePtrOutputWithContext(ctx context.Context) BackupProfileResponsePtrOutput {
	return o
}

func (o BackupProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupProfileResponse] {
	return pulumix.Output[*BackupProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o BackupProfileResponsePtrOutput) Elem() BackupProfileResponseOutput {
	return o.ApplyT(func(v *BackupProfileResponse) BackupProfileResponse {
		if v != nil {
			return *v
		}
		var ret BackupProfileResponse
		return ret
	}).(BackupProfileResponseOutput)
}

// Whether to enable Azure backup for the workload
func (o BackupProfileResponsePtrOutput) BackupEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupEnabled
	}).(pulumi.StringPtrOutput)
}

// Backup vault resource Id
func (o BackupProfileResponsePtrOutput) VaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultResourceId
	}).(pulumi.StringPtrOutput)
}

// Cache profile
type CacheProfile struct {
	// Cache capacity
	Capacity float64 `pulumi:"capacity"`
	// Cache family
	Family string `pulumi:"family"`
	// Cache name
	Name *string `pulumi:"name"`
	// Cache SKU name
	SkuName string `pulumi:"skuName"`
}

// CacheProfileInput is an input type that accepts CacheProfileArgs and CacheProfileOutput values.
// You can construct a concrete instance of `CacheProfileInput` via:
//
//	CacheProfileArgs{...}
type CacheProfileInput interface {
	pulumi.Input

	ToCacheProfileOutput() CacheProfileOutput
	ToCacheProfileOutputWithContext(context.Context) CacheProfileOutput
}

// Cache profile
type CacheProfileArgs struct {
	// Cache capacity
	Capacity pulumi.Float64Input `pulumi:"capacity"`
	// Cache family
	Family pulumi.StringInput `pulumi:"family"`
	// Cache name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Cache SKU name
	SkuName pulumi.StringInput `pulumi:"skuName"`
}

func (CacheProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheProfile)(nil)).Elem()
}

func (i CacheProfileArgs) ToCacheProfileOutput() CacheProfileOutput {
	return i.ToCacheProfileOutputWithContext(context.Background())
}

func (i CacheProfileArgs) ToCacheProfileOutputWithContext(ctx context.Context) CacheProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheProfileOutput)
}

func (i CacheProfileArgs) ToOutput(ctx context.Context) pulumix.Output[CacheProfile] {
	return pulumix.Output[CacheProfile]{
		OutputState: i.ToCacheProfileOutputWithContext(ctx).OutputState,
	}
}

func (i CacheProfileArgs) ToCacheProfilePtrOutput() CacheProfilePtrOutput {
	return i.ToCacheProfilePtrOutputWithContext(context.Background())
}

func (i CacheProfileArgs) ToCacheProfilePtrOutputWithContext(ctx context.Context) CacheProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheProfileOutput).ToCacheProfilePtrOutputWithContext(ctx)
}

// CacheProfilePtrInput is an input type that accepts CacheProfileArgs, CacheProfilePtr and CacheProfilePtrOutput values.
// You can construct a concrete instance of `CacheProfilePtrInput` via:
//
//	        CacheProfileArgs{...}
//
//	or:
//
//	        nil
type CacheProfilePtrInput interface {
	pulumi.Input

	ToCacheProfilePtrOutput() CacheProfilePtrOutput
	ToCacheProfilePtrOutputWithContext(context.Context) CacheProfilePtrOutput
}

type cacheProfilePtrType CacheProfileArgs

func CacheProfilePtr(v *CacheProfileArgs) CacheProfilePtrInput {
	return (*cacheProfilePtrType)(v)
}

func (*cacheProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheProfile)(nil)).Elem()
}

func (i *cacheProfilePtrType) ToCacheProfilePtrOutput() CacheProfilePtrOutput {
	return i.ToCacheProfilePtrOutputWithContext(context.Background())
}

func (i *cacheProfilePtrType) ToCacheProfilePtrOutputWithContext(ctx context.Context) CacheProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheProfilePtrOutput)
}

func (i *cacheProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*CacheProfile] {
	return pulumix.Output[*CacheProfile]{
		OutputState: i.ToCacheProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Cache profile
type CacheProfileOutput struct{ *pulumi.OutputState }

func (CacheProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheProfile)(nil)).Elem()
}

func (o CacheProfileOutput) ToCacheProfileOutput() CacheProfileOutput {
	return o
}

func (o CacheProfileOutput) ToCacheProfileOutputWithContext(ctx context.Context) CacheProfileOutput {
	return o
}

func (o CacheProfileOutput) ToCacheProfilePtrOutput() CacheProfilePtrOutput {
	return o.ToCacheProfilePtrOutputWithContext(context.Background())
}

func (o CacheProfileOutput) ToCacheProfilePtrOutputWithContext(ctx context.Context) CacheProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheProfile) *CacheProfile {
		return &v
	}).(CacheProfilePtrOutput)
}

func (o CacheProfileOutput) ToOutput(ctx context.Context) pulumix.Output[CacheProfile] {
	return pulumix.Output[CacheProfile]{
		OutputState: o.OutputState,
	}
}

// Cache capacity
func (o CacheProfileOutput) Capacity() pulumi.Float64Output {
	return o.ApplyT(func(v CacheProfile) float64 { return v.Capacity }).(pulumi.Float64Output)
}

// Cache family
func (o CacheProfileOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v CacheProfile) string { return v.Family }).(pulumi.StringOutput)
}

// Cache name
func (o CacheProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Cache SKU name
func (o CacheProfileOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheProfile) string { return v.SkuName }).(pulumi.StringOutput)
}

type CacheProfilePtrOutput struct{ *pulumi.OutputState }

func (CacheProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheProfile)(nil)).Elem()
}

func (o CacheProfilePtrOutput) ToCacheProfilePtrOutput() CacheProfilePtrOutput {
	return o
}

func (o CacheProfilePtrOutput) ToCacheProfilePtrOutputWithContext(ctx context.Context) CacheProfilePtrOutput {
	return o
}

func (o CacheProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CacheProfile] {
	return pulumix.Output[*CacheProfile]{
		OutputState: o.OutputState,
	}
}

func (o CacheProfilePtrOutput) Elem() CacheProfileOutput {
	return o.ApplyT(func(v *CacheProfile) CacheProfile {
		if v != nil {
			return *v
		}
		var ret CacheProfile
		return ret
	}).(CacheProfileOutput)
}

// Cache capacity
func (o CacheProfilePtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CacheProfile) *float64 {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// Cache family
func (o CacheProfilePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// Cache name
func (o CacheProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfile) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cache SKU name
func (o CacheProfilePtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Cache profile
type CacheProfileResponse struct {
	// Cache resource Id
	CacheResourceId string `pulumi:"cacheResourceId"`
	// Cache capacity
	Capacity float64 `pulumi:"capacity"`
	// Cache family
	Family string `pulumi:"family"`
	// Cache name
	Name *string `pulumi:"name"`
	// Cache SKU name
	SkuName string `pulumi:"skuName"`
}

// Cache profile
type CacheProfileResponseOutput struct{ *pulumi.OutputState }

func (CacheProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheProfileResponse)(nil)).Elem()
}

func (o CacheProfileResponseOutput) ToCacheProfileResponseOutput() CacheProfileResponseOutput {
	return o
}

func (o CacheProfileResponseOutput) ToCacheProfileResponseOutputWithContext(ctx context.Context) CacheProfileResponseOutput {
	return o
}

func (o CacheProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CacheProfileResponse] {
	return pulumix.Output[CacheProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Cache resource Id
func (o CacheProfileResponseOutput) CacheResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v CacheProfileResponse) string { return v.CacheResourceId }).(pulumi.StringOutput)
}

// Cache capacity
func (o CacheProfileResponseOutput) Capacity() pulumi.Float64Output {
	return o.ApplyT(func(v CacheProfileResponse) float64 { return v.Capacity }).(pulumi.Float64Output)
}

// Cache family
func (o CacheProfileResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v CacheProfileResponse) string { return v.Family }).(pulumi.StringOutput)
}

// Cache name
func (o CacheProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CacheProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Cache SKU name
func (o CacheProfileResponseOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v CacheProfileResponse) string { return v.SkuName }).(pulumi.StringOutput)
}

type CacheProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheProfileResponse)(nil)).Elem()
}

func (o CacheProfileResponsePtrOutput) ToCacheProfileResponsePtrOutput() CacheProfileResponsePtrOutput {
	return o
}

func (o CacheProfileResponsePtrOutput) ToCacheProfileResponsePtrOutputWithContext(ctx context.Context) CacheProfileResponsePtrOutput {
	return o
}

func (o CacheProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CacheProfileResponse] {
	return pulumix.Output[*CacheProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o CacheProfileResponsePtrOutput) Elem() CacheProfileResponseOutput {
	return o.ApplyT(func(v *CacheProfileResponse) CacheProfileResponse {
		if v != nil {
			return *v
		}
		var ret CacheProfileResponse
		return ret
	}).(CacheProfileResponseOutput)
}

// Cache resource Id
func (o CacheProfileResponsePtrOutput) CacheResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CacheResourceId
	}).(pulumi.StringPtrOutput)
}

// Cache capacity
func (o CacheProfileResponsePtrOutput) Capacity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CacheProfileResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Capacity
	}).(pulumi.Float64PtrOutput)
}

// Cache family
func (o CacheProfileResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Family
	}).(pulumi.StringPtrOutput)
}

// Cache name
func (o CacheProfileResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Cache SKU name
func (o CacheProfileResponsePtrOutput) SkuName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CacheProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SkuName
	}).(pulumi.StringPtrOutput)
}

// Workload database profile
type DatabaseProfile struct {
	// Backup retention days for the server
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// Whether to enable HA for the server
	HaEnabled *string `pulumi:"haEnabled"`
	// Database server name
	ServerName *string `pulumi:"serverName"`
	// The name of the server SKU, e.g. Standard_D32s_v4
	Sku string `pulumi:"sku"`
	// Whether to enable SSL enforcement on the database
	SslEnforcementEnabled *string `pulumi:"sslEnforcementEnabled"`
	// Database storage size in GB
	StorageInGB *float64 `pulumi:"storageInGB"`
	// Storage IOPS for the server
	StorageIops *float64 `pulumi:"storageIops"`
	// SKU name for database storage
	StorageSku *string `pulumi:"storageSku"`
	// Tier of the server SKU
	Tier DatabaseTier `pulumi:"tier"`
	// Database type
	Type string `pulumi:"type"`
	// Database version
	Version *string `pulumi:"version"`
}

// DatabaseProfileInput is an input type that accepts DatabaseProfileArgs and DatabaseProfileOutput values.
// You can construct a concrete instance of `DatabaseProfileInput` via:
//
//	DatabaseProfileArgs{...}
type DatabaseProfileInput interface {
	pulumi.Input

	ToDatabaseProfileOutput() DatabaseProfileOutput
	ToDatabaseProfileOutputWithContext(context.Context) DatabaseProfileOutput
}

// Workload database profile
type DatabaseProfileArgs struct {
	// Backup retention days for the server
	BackupRetentionDays pulumi.IntPtrInput `pulumi:"backupRetentionDays"`
	// Whether to enable HA for the server
	HaEnabled pulumi.StringPtrInput `pulumi:"haEnabled"`
	// Database server name
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
	// The name of the server SKU, e.g. Standard_D32s_v4
	Sku pulumi.StringInput `pulumi:"sku"`
	// Whether to enable SSL enforcement on the database
	SslEnforcementEnabled pulumi.StringPtrInput `pulumi:"sslEnforcementEnabled"`
	// Database storage size in GB
	StorageInGB pulumi.Float64PtrInput `pulumi:"storageInGB"`
	// Storage IOPS for the server
	StorageIops pulumi.Float64PtrInput `pulumi:"storageIops"`
	// SKU name for database storage
	StorageSku pulumi.StringPtrInput `pulumi:"storageSku"`
	// Tier of the server SKU
	Tier DatabaseTierInput `pulumi:"tier"`
	// Database type
	Type pulumi.StringInput `pulumi:"type"`
	// Database version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DatabaseProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseProfile)(nil)).Elem()
}

func (i DatabaseProfileArgs) ToDatabaseProfileOutput() DatabaseProfileOutput {
	return i.ToDatabaseProfileOutputWithContext(context.Background())
}

func (i DatabaseProfileArgs) ToDatabaseProfileOutputWithContext(ctx context.Context) DatabaseProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseProfileOutput)
}

func (i DatabaseProfileArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseProfile] {
	return pulumix.Output[DatabaseProfile]{
		OutputState: i.ToDatabaseProfileOutputWithContext(ctx).OutputState,
	}
}

// Workload database profile
type DatabaseProfileOutput struct{ *pulumi.OutputState }

func (DatabaseProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseProfile)(nil)).Elem()
}

func (o DatabaseProfileOutput) ToDatabaseProfileOutput() DatabaseProfileOutput {
	return o
}

func (o DatabaseProfileOutput) ToDatabaseProfileOutputWithContext(ctx context.Context) DatabaseProfileOutput {
	return o
}

func (o DatabaseProfileOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseProfile] {
	return pulumix.Output[DatabaseProfile]{
		OutputState: o.OutputState,
	}
}

// Backup retention days for the server
func (o DatabaseProfileOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *int { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// Whether to enable HA for the server
func (o DatabaseProfileOutput) HaEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *string { return v.HaEnabled }).(pulumi.StringPtrOutput)
}

// Database server name
func (o DatabaseProfileOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// The name of the server SKU, e.g. Standard_D32s_v4
func (o DatabaseProfileOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfile) string { return v.Sku }).(pulumi.StringOutput)
}

// Whether to enable SSL enforcement on the database
func (o DatabaseProfileOutput) SslEnforcementEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *string { return v.SslEnforcementEnabled }).(pulumi.StringPtrOutput)
}

// Database storage size in GB
func (o DatabaseProfileOutput) StorageInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *float64 { return v.StorageInGB }).(pulumi.Float64PtrOutput)
}

// Storage IOPS for the server
func (o DatabaseProfileOutput) StorageIops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *float64 { return v.StorageIops }).(pulumi.Float64PtrOutput)
}

// SKU name for database storage
func (o DatabaseProfileOutput) StorageSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *string { return v.StorageSku }).(pulumi.StringPtrOutput)
}

// Tier of the server SKU
func (o DatabaseProfileOutput) Tier() DatabaseTierOutput {
	return o.ApplyT(func(v DatabaseProfile) DatabaseTier { return v.Tier }).(DatabaseTierOutput)
}

// Database type
func (o DatabaseProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfile) string { return v.Type }).(pulumi.StringOutput)
}

// Database version
func (o DatabaseProfileOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfile) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Workload database profile
type DatabaseProfileResponse struct {
	// Backup retention days for the server
	BackupRetentionDays *int `pulumi:"backupRetentionDays"`
	// Whether to enable HA for the server
	HaEnabled *string `pulumi:"haEnabled"`
	// Database server name
	ServerName *string `pulumi:"serverName"`
	// Azure Database Server resource Id
	ServerResourceId string `pulumi:"serverResourceId"`
	// The name of the server SKU, e.g. Standard_D32s_v4
	Sku string `pulumi:"sku"`
	// Whether to enable SSL enforcement on the database
	SslEnforcementEnabled *string `pulumi:"sslEnforcementEnabled"`
	// Database storage size in GB
	StorageInGB *float64 `pulumi:"storageInGB"`
	// Storage IOPS for the server
	StorageIops *float64 `pulumi:"storageIops"`
	// SKU name for database storage
	StorageSku *string `pulumi:"storageSku"`
	// Tier of the server SKU
	Tier string `pulumi:"tier"`
	// Database type
	Type string `pulumi:"type"`
	// Database version
	Version *string `pulumi:"version"`
}

// Workload database profile
type DatabaseProfileResponseOutput struct{ *pulumi.OutputState }

func (DatabaseProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseProfileResponse)(nil)).Elem()
}

func (o DatabaseProfileResponseOutput) ToDatabaseProfileResponseOutput() DatabaseProfileResponseOutput {
	return o
}

func (o DatabaseProfileResponseOutput) ToDatabaseProfileResponseOutputWithContext(ctx context.Context) DatabaseProfileResponseOutput {
	return o
}

func (o DatabaseProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseProfileResponse] {
	return pulumix.Output[DatabaseProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Backup retention days for the server
func (o DatabaseProfileResponseOutput) BackupRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *int { return v.BackupRetentionDays }).(pulumi.IntPtrOutput)
}

// Whether to enable HA for the server
func (o DatabaseProfileResponseOutput) HaEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *string { return v.HaEnabled }).(pulumi.StringPtrOutput)
}

// Database server name
func (o DatabaseProfileResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Azure Database Server resource Id
func (o DatabaseProfileResponseOutput) ServerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) string { return v.ServerResourceId }).(pulumi.StringOutput)
}

// The name of the server SKU, e.g. Standard_D32s_v4
func (o DatabaseProfileResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) string { return v.Sku }).(pulumi.StringOutput)
}

// Whether to enable SSL enforcement on the database
func (o DatabaseProfileResponseOutput) SslEnforcementEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *string { return v.SslEnforcementEnabled }).(pulumi.StringPtrOutput)
}

// Database storage size in GB
func (o DatabaseProfileResponseOutput) StorageInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *float64 { return v.StorageInGB }).(pulumi.Float64PtrOutput)
}

// Storage IOPS for the server
func (o DatabaseProfileResponseOutput) StorageIops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *float64 { return v.StorageIops }).(pulumi.Float64PtrOutput)
}

// SKU name for database storage
func (o DatabaseProfileResponseOutput) StorageSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *string { return v.StorageSku }).(pulumi.StringPtrOutput)
}

// Tier of the server SKU
func (o DatabaseProfileResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// Database type
func (o DatabaseProfileResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Database version
func (o DatabaseProfileResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseProfileResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// Disk resource creation details
type DiskInfo struct {
	// Disk size in GB
	SizeInGB *float64 `pulumi:"sizeInGB"`
	// Storage type
	StorageType DiskStorageType `pulumi:"storageType"`
}

// DiskInfoInput is an input type that accepts DiskInfoArgs and DiskInfoOutput values.
// You can construct a concrete instance of `DiskInfoInput` via:
//
//	DiskInfoArgs{...}
type DiskInfoInput interface {
	pulumi.Input

	ToDiskInfoOutput() DiskInfoOutput
	ToDiskInfoOutputWithContext(context.Context) DiskInfoOutput
}

// Disk resource creation details
type DiskInfoArgs struct {
	// Disk size in GB
	SizeInGB pulumi.Float64PtrInput `pulumi:"sizeInGB"`
	// Storage type
	StorageType DiskStorageTypeInput `pulumi:"storageType"`
}

func (DiskInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInfo)(nil)).Elem()
}

func (i DiskInfoArgs) ToDiskInfoOutput() DiskInfoOutput {
	return i.ToDiskInfoOutputWithContext(context.Background())
}

func (i DiskInfoArgs) ToDiskInfoOutputWithContext(ctx context.Context) DiskInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInfoOutput)
}

func (i DiskInfoArgs) ToOutput(ctx context.Context) pulumix.Output[DiskInfo] {
	return pulumix.Output[DiskInfo]{
		OutputState: i.ToDiskInfoOutputWithContext(ctx).OutputState,
	}
}

func (i DiskInfoArgs) ToDiskInfoPtrOutput() DiskInfoPtrOutput {
	return i.ToDiskInfoPtrOutputWithContext(context.Background())
}

func (i DiskInfoArgs) ToDiskInfoPtrOutputWithContext(ctx context.Context) DiskInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInfoOutput).ToDiskInfoPtrOutputWithContext(ctx)
}

// DiskInfoPtrInput is an input type that accepts DiskInfoArgs, DiskInfoPtr and DiskInfoPtrOutput values.
// You can construct a concrete instance of `DiskInfoPtrInput` via:
//
//	        DiskInfoArgs{...}
//
//	or:
//
//	        nil
type DiskInfoPtrInput interface {
	pulumi.Input

	ToDiskInfoPtrOutput() DiskInfoPtrOutput
	ToDiskInfoPtrOutputWithContext(context.Context) DiskInfoPtrOutput
}

type diskInfoPtrType DiskInfoArgs

func DiskInfoPtr(v *DiskInfoArgs) DiskInfoPtrInput {
	return (*diskInfoPtrType)(v)
}

func (*diskInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskInfo)(nil)).Elem()
}

func (i *diskInfoPtrType) ToDiskInfoPtrOutput() DiskInfoPtrOutput {
	return i.ToDiskInfoPtrOutputWithContext(context.Background())
}

func (i *diskInfoPtrType) ToDiskInfoPtrOutputWithContext(ctx context.Context) DiskInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInfoPtrOutput)
}

func (i *diskInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiskInfo] {
	return pulumix.Output[*DiskInfo]{
		OutputState: i.ToDiskInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// DiskInfoArrayInput is an input type that accepts DiskInfoArray and DiskInfoArrayOutput values.
// You can construct a concrete instance of `DiskInfoArrayInput` via:
//
//	DiskInfoArray{ DiskInfoArgs{...} }
type DiskInfoArrayInput interface {
	pulumi.Input

	ToDiskInfoArrayOutput() DiskInfoArrayOutput
	ToDiskInfoArrayOutputWithContext(context.Context) DiskInfoArrayOutput
}

type DiskInfoArray []DiskInfoInput

func (DiskInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInfo)(nil)).Elem()
}

func (i DiskInfoArray) ToDiskInfoArrayOutput() DiskInfoArrayOutput {
	return i.ToDiskInfoArrayOutputWithContext(context.Background())
}

func (i DiskInfoArray) ToDiskInfoArrayOutputWithContext(ctx context.Context) DiskInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskInfoArrayOutput)
}

func (i DiskInfoArray) ToOutput(ctx context.Context) pulumix.Output[[]DiskInfo] {
	return pulumix.Output[[]DiskInfo]{
		OutputState: i.ToDiskInfoArrayOutputWithContext(ctx).OutputState,
	}
}

// Disk resource creation details
type DiskInfoOutput struct{ *pulumi.OutputState }

func (DiskInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInfo)(nil)).Elem()
}

func (o DiskInfoOutput) ToDiskInfoOutput() DiskInfoOutput {
	return o
}

func (o DiskInfoOutput) ToDiskInfoOutputWithContext(ctx context.Context) DiskInfoOutput {
	return o
}

func (o DiskInfoOutput) ToDiskInfoPtrOutput() DiskInfoPtrOutput {
	return o.ToDiskInfoPtrOutputWithContext(context.Background())
}

func (o DiskInfoOutput) ToDiskInfoPtrOutputWithContext(ctx context.Context) DiskInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskInfo) *DiskInfo {
		return &v
	}).(DiskInfoPtrOutput)
}

func (o DiskInfoOutput) ToOutput(ctx context.Context) pulumix.Output[DiskInfo] {
	return pulumix.Output[DiskInfo]{
		OutputState: o.OutputState,
	}
}

// Disk size in GB
func (o DiskInfoOutput) SizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskInfo) *float64 { return v.SizeInGB }).(pulumi.Float64PtrOutput)
}

// Storage type
func (o DiskInfoOutput) StorageType() DiskStorageTypeOutput {
	return o.ApplyT(func(v DiskInfo) DiskStorageType { return v.StorageType }).(DiskStorageTypeOutput)
}

type DiskInfoPtrOutput struct{ *pulumi.OutputState }

func (DiskInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskInfo)(nil)).Elem()
}

func (o DiskInfoPtrOutput) ToDiskInfoPtrOutput() DiskInfoPtrOutput {
	return o
}

func (o DiskInfoPtrOutput) ToDiskInfoPtrOutputWithContext(ctx context.Context) DiskInfoPtrOutput {
	return o
}

func (o DiskInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiskInfo] {
	return pulumix.Output[*DiskInfo]{
		OutputState: o.OutputState,
	}
}

func (o DiskInfoPtrOutput) Elem() DiskInfoOutput {
	return o.ApplyT(func(v *DiskInfo) DiskInfo {
		if v != nil {
			return *v
		}
		var ret DiskInfo
		return ret
	}).(DiskInfoOutput)
}

// Disk size in GB
func (o DiskInfoPtrOutput) SizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskInfo) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeInGB
	}).(pulumi.Float64PtrOutput)
}

// Storage type
func (o DiskInfoPtrOutput) StorageType() DiskStorageTypePtrOutput {
	return o.ApplyT(func(v *DiskInfo) *DiskStorageType {
		if v == nil {
			return nil
		}
		return &v.StorageType
	}).(DiskStorageTypePtrOutput)
}

type DiskInfoArrayOutput struct{ *pulumi.OutputState }

func (DiskInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInfo)(nil)).Elem()
}

func (o DiskInfoArrayOutput) ToDiskInfoArrayOutput() DiskInfoArrayOutput {
	return o
}

func (o DiskInfoArrayOutput) ToDiskInfoArrayOutputWithContext(ctx context.Context) DiskInfoArrayOutput {
	return o
}

func (o DiskInfoArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiskInfo] {
	return pulumix.Output[[]DiskInfo]{
		OutputState: o.OutputState,
	}
}

func (o DiskInfoArrayOutput) Index(i pulumi.IntInput) DiskInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInfo {
		return vs[0].([]DiskInfo)[vs[1].(int)]
	}).(DiskInfoOutput)
}

// Disk resource creation details
type DiskInfoResponse struct {
	// Disk size in GB
	SizeInGB *float64 `pulumi:"sizeInGB"`
	// Storage type
	StorageType string `pulumi:"storageType"`
}

// Disk resource creation details
type DiskInfoResponseOutput struct{ *pulumi.OutputState }

func (DiskInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskInfoResponse)(nil)).Elem()
}

func (o DiskInfoResponseOutput) ToDiskInfoResponseOutput() DiskInfoResponseOutput {
	return o
}

func (o DiskInfoResponseOutput) ToDiskInfoResponseOutputWithContext(ctx context.Context) DiskInfoResponseOutput {
	return o
}

func (o DiskInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DiskInfoResponse] {
	return pulumix.Output[DiskInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Disk size in GB
func (o DiskInfoResponseOutput) SizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskInfoResponse) *float64 { return v.SizeInGB }).(pulumi.Float64PtrOutput)
}

// Storage type
func (o DiskInfoResponseOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskInfoResponse) string { return v.StorageType }).(pulumi.StringOutput)
}

type DiskInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskInfoResponse)(nil)).Elem()
}

func (o DiskInfoResponsePtrOutput) ToDiskInfoResponsePtrOutput() DiskInfoResponsePtrOutput {
	return o
}

func (o DiskInfoResponsePtrOutput) ToDiskInfoResponsePtrOutputWithContext(ctx context.Context) DiskInfoResponsePtrOutput {
	return o
}

func (o DiskInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiskInfoResponse] {
	return pulumix.Output[*DiskInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o DiskInfoResponsePtrOutput) Elem() DiskInfoResponseOutput {
	return o.ApplyT(func(v *DiskInfoResponse) DiskInfoResponse {
		if v != nil {
			return *v
		}
		var ret DiskInfoResponse
		return ret
	}).(DiskInfoResponseOutput)
}

// Disk size in GB
func (o DiskInfoResponsePtrOutput) SizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskInfoResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeInGB
	}).(pulumi.Float64PtrOutput)
}

// Storage type
func (o DiskInfoResponsePtrOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageType
	}).(pulumi.StringPtrOutput)
}

type DiskInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskInfoResponse)(nil)).Elem()
}

func (o DiskInfoResponseArrayOutput) ToDiskInfoResponseArrayOutput() DiskInfoResponseArrayOutput {
	return o
}

func (o DiskInfoResponseArrayOutput) ToDiskInfoResponseArrayOutputWithContext(ctx context.Context) DiskInfoResponseArrayOutput {
	return o
}

func (o DiskInfoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DiskInfoResponse] {
	return pulumix.Output[[]DiskInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o DiskInfoResponseArrayOutput) Index(i pulumi.IntInput) DiskInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskInfoResponse {
		return vs[0].([]DiskInfoResponse)[vs[1].(int)]
	}).(DiskInfoResponseOutput)
}

// Error definition.
type ErrorDefinitionResponse struct {
	// Service specific error code which serves as the substatus for the HTTP error code.
	Code string `pulumi:"code"`
	// Internal error details.
	Details []ErrorDefinitionResponse `pulumi:"details"`
	// Description of the error.
	Message string `pulumi:"message"`
}

// Error definition.
type ErrorDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutput() ErrorDefinitionResponseOutput {
	return o
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutputWithContext(ctx context.Context) ErrorDefinitionResponseOutput {
	return o
}

func (o ErrorDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorDefinitionResponse] {
	return pulumix.Output[ErrorDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Internal error details.
func (o ErrorDefinitionResponseOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) []ErrorDefinitionResponse { return v.Details }).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ErrorDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutput() ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutputWithContext(ctx context.Context) ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ErrorDefinitionResponse] {
	return pulumix.Output[*ErrorDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorDefinitionResponsePtrOutput) Elem() ErrorDefinitionResponseOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) ErrorDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDefinitionResponse
		return ret
	}).(ErrorDefinitionResponseOutput)
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Internal error details.
func (o ErrorDefinitionResponsePtrOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) []ErrorDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

type ErrorDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutput() ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutputWithContext(ctx context.Context) ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorDefinitionResponse] {
	return pulumix.Output[[]ErrorDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ErrorDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDefinitionResponse {
		return vs[0].([]ErrorDefinitionResponse)[vs[1].(int)]
	}).(ErrorDefinitionResponseOutput)
}

// File share profile
type FileshareProfile struct {
	// File share size in GB
	ShareSizeInGB *float64 `pulumi:"shareSizeInGB"`
	// Share type
	ShareType string `pulumi:"shareType"`
	// File share backing storage type
	StorageType string `pulumi:"storageType"`
}

// FileshareProfileInput is an input type that accepts FileshareProfileArgs and FileshareProfileOutput values.
// You can construct a concrete instance of `FileshareProfileInput` via:
//
//	FileshareProfileArgs{...}
type FileshareProfileInput interface {
	pulumi.Input

	ToFileshareProfileOutput() FileshareProfileOutput
	ToFileshareProfileOutputWithContext(context.Context) FileshareProfileOutput
}

// File share profile
type FileshareProfileArgs struct {
	// File share size in GB
	ShareSizeInGB pulumi.Float64PtrInput `pulumi:"shareSizeInGB"`
	// Share type
	ShareType pulumi.StringInput `pulumi:"shareType"`
	// File share backing storage type
	StorageType pulumi.StringInput `pulumi:"storageType"`
}

func (FileshareProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileshareProfile)(nil)).Elem()
}

func (i FileshareProfileArgs) ToFileshareProfileOutput() FileshareProfileOutput {
	return i.ToFileshareProfileOutputWithContext(context.Background())
}

func (i FileshareProfileArgs) ToFileshareProfileOutputWithContext(ctx context.Context) FileshareProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileshareProfileOutput)
}

func (i FileshareProfileArgs) ToOutput(ctx context.Context) pulumix.Output[FileshareProfile] {
	return pulumix.Output[FileshareProfile]{
		OutputState: i.ToFileshareProfileOutputWithContext(ctx).OutputState,
	}
}

func (i FileshareProfileArgs) ToFileshareProfilePtrOutput() FileshareProfilePtrOutput {
	return i.ToFileshareProfilePtrOutputWithContext(context.Background())
}

func (i FileshareProfileArgs) ToFileshareProfilePtrOutputWithContext(ctx context.Context) FileshareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileshareProfileOutput).ToFileshareProfilePtrOutputWithContext(ctx)
}

// FileshareProfilePtrInput is an input type that accepts FileshareProfileArgs, FileshareProfilePtr and FileshareProfilePtrOutput values.
// You can construct a concrete instance of `FileshareProfilePtrInput` via:
//
//	        FileshareProfileArgs{...}
//
//	or:
//
//	        nil
type FileshareProfilePtrInput interface {
	pulumi.Input

	ToFileshareProfilePtrOutput() FileshareProfilePtrOutput
	ToFileshareProfilePtrOutputWithContext(context.Context) FileshareProfilePtrOutput
}

type fileshareProfilePtrType FileshareProfileArgs

func FileshareProfilePtr(v *FileshareProfileArgs) FileshareProfilePtrInput {
	return (*fileshareProfilePtrType)(v)
}

func (*fileshareProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileshareProfile)(nil)).Elem()
}

func (i *fileshareProfilePtrType) ToFileshareProfilePtrOutput() FileshareProfilePtrOutput {
	return i.ToFileshareProfilePtrOutputWithContext(context.Background())
}

func (i *fileshareProfilePtrType) ToFileshareProfilePtrOutputWithContext(ctx context.Context) FileshareProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileshareProfilePtrOutput)
}

func (i *fileshareProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*FileshareProfile] {
	return pulumix.Output[*FileshareProfile]{
		OutputState: i.ToFileshareProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// File share profile
type FileshareProfileOutput struct{ *pulumi.OutputState }

func (FileshareProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileshareProfile)(nil)).Elem()
}

func (o FileshareProfileOutput) ToFileshareProfileOutput() FileshareProfileOutput {
	return o
}

func (o FileshareProfileOutput) ToFileshareProfileOutputWithContext(ctx context.Context) FileshareProfileOutput {
	return o
}

func (o FileshareProfileOutput) ToFileshareProfilePtrOutput() FileshareProfilePtrOutput {
	return o.ToFileshareProfilePtrOutputWithContext(context.Background())
}

func (o FileshareProfileOutput) ToFileshareProfilePtrOutputWithContext(ctx context.Context) FileshareProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileshareProfile) *FileshareProfile {
		return &v
	}).(FileshareProfilePtrOutput)
}

func (o FileshareProfileOutput) ToOutput(ctx context.Context) pulumix.Output[FileshareProfile] {
	return pulumix.Output[FileshareProfile]{
		OutputState: o.OutputState,
	}
}

// File share size in GB
func (o FileshareProfileOutput) ShareSizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FileshareProfile) *float64 { return v.ShareSizeInGB }).(pulumi.Float64PtrOutput)
}

// Share type
func (o FileshareProfileOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfile) string { return v.ShareType }).(pulumi.StringOutput)
}

// File share backing storage type
func (o FileshareProfileOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfile) string { return v.StorageType }).(pulumi.StringOutput)
}

type FileshareProfilePtrOutput struct{ *pulumi.OutputState }

func (FileshareProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileshareProfile)(nil)).Elem()
}

func (o FileshareProfilePtrOutput) ToFileshareProfilePtrOutput() FileshareProfilePtrOutput {
	return o
}

func (o FileshareProfilePtrOutput) ToFileshareProfilePtrOutputWithContext(ctx context.Context) FileshareProfilePtrOutput {
	return o
}

func (o FileshareProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileshareProfile] {
	return pulumix.Output[*FileshareProfile]{
		OutputState: o.OutputState,
	}
}

func (o FileshareProfilePtrOutput) Elem() FileshareProfileOutput {
	return o.ApplyT(func(v *FileshareProfile) FileshareProfile {
		if v != nil {
			return *v
		}
		var ret FileshareProfile
		return ret
	}).(FileshareProfileOutput)
}

// File share size in GB
func (o FileshareProfilePtrOutput) ShareSizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FileshareProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.ShareSizeInGB
	}).(pulumi.Float64PtrOutput)
}

// Share type
func (o FileshareProfilePtrOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfile) *string {
		if v == nil {
			return nil
		}
		return &v.ShareType
	}).(pulumi.StringPtrOutput)
}

// File share backing storage type
func (o FileshareProfilePtrOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfile) *string {
		if v == nil {
			return nil
		}
		return &v.StorageType
	}).(pulumi.StringPtrOutput)
}

// File share profile
type FileshareProfileResponse struct {
	// File share name
	ShareName string `pulumi:"shareName"`
	// File share size in GB
	ShareSizeInGB *float64 `pulumi:"shareSizeInGB"`
	// Share type
	ShareType string `pulumi:"shareType"`
	// File share storage resource id
	StorageResourceId string `pulumi:"storageResourceId"`
	// File share backing storage type
	StorageType string `pulumi:"storageType"`
}

// File share profile
type FileshareProfileResponseOutput struct{ *pulumi.OutputState }

func (FileshareProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileshareProfileResponse)(nil)).Elem()
}

func (o FileshareProfileResponseOutput) ToFileshareProfileResponseOutput() FileshareProfileResponseOutput {
	return o
}

func (o FileshareProfileResponseOutput) ToFileshareProfileResponseOutputWithContext(ctx context.Context) FileshareProfileResponseOutput {
	return o
}

func (o FileshareProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FileshareProfileResponse] {
	return pulumix.Output[FileshareProfileResponse]{
		OutputState: o.OutputState,
	}
}

// File share name
func (o FileshareProfileResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfileResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

// File share size in GB
func (o FileshareProfileResponseOutput) ShareSizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FileshareProfileResponse) *float64 { return v.ShareSizeInGB }).(pulumi.Float64PtrOutput)
}

// Share type
func (o FileshareProfileResponseOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfileResponse) string { return v.ShareType }).(pulumi.StringOutput)
}

// File share storage resource id
func (o FileshareProfileResponseOutput) StorageResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfileResponse) string { return v.StorageResourceId }).(pulumi.StringOutput)
}

// File share backing storage type
func (o FileshareProfileResponseOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v FileshareProfileResponse) string { return v.StorageType }).(pulumi.StringOutput)
}

type FileshareProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (FileshareProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileshareProfileResponse)(nil)).Elem()
}

func (o FileshareProfileResponsePtrOutput) ToFileshareProfileResponsePtrOutput() FileshareProfileResponsePtrOutput {
	return o
}

func (o FileshareProfileResponsePtrOutput) ToFileshareProfileResponsePtrOutputWithContext(ctx context.Context) FileshareProfileResponsePtrOutput {
	return o
}

func (o FileshareProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*FileshareProfileResponse] {
	return pulumix.Output[*FileshareProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o FileshareProfileResponsePtrOutput) Elem() FileshareProfileResponseOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) FileshareProfileResponse {
		if v != nil {
			return *v
		}
		var ret FileshareProfileResponse
		return ret
	}).(FileshareProfileResponseOutput)
}

// File share name
func (o FileshareProfileResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// File share size in GB
func (o FileshareProfileResponsePtrOutput) ShareSizeInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ShareSizeInGB
	}).(pulumi.Float64PtrOutput)
}

// Share type
func (o FileshareProfileResponsePtrOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareType
	}).(pulumi.StringPtrOutput)
}

// File share storage resource id
func (o FileshareProfileResponsePtrOutput) StorageResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageResourceId
	}).(pulumi.StringPtrOutput)
}

// File share backing storage type
func (o FileshareProfileResponsePtrOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileshareProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageType
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfiguration struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// ManagedRGConfigurationInput is an input type that accepts ManagedRGConfigurationArgs and ManagedRGConfigurationOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationInput` via:
//
//	ManagedRGConfigurationArgs{...}
type ManagedRGConfigurationInput interface {
	pulumi.Input

	ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput
	ToManagedRGConfigurationOutputWithContext(context.Context) ManagedRGConfigurationOutput
}

// Managed resource group configuration
type ManagedRGConfigurationArgs struct {
	// Managed resource group name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedRGConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return i.ToManagedRGConfigurationOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput)
}

func (i ManagedRGConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedRGConfiguration] {
	return pulumix.Output[ManagedRGConfiguration]{
		OutputState: i.ToManagedRGConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput).ToManagedRGConfigurationPtrOutputWithContext(ctx)
}

// ManagedRGConfigurationPtrInput is an input type that accepts ManagedRGConfigurationArgs, ManagedRGConfigurationPtr and ManagedRGConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationPtrInput` via:
//
//	        ManagedRGConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedRGConfigurationPtrInput interface {
	pulumi.Input

	ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput
	ToManagedRGConfigurationPtrOutputWithContext(context.Context) ManagedRGConfigurationPtrOutput
}

type managedRGConfigurationPtrType ManagedRGConfigurationArgs

func ManagedRGConfigurationPtr(v *ManagedRGConfigurationArgs) ManagedRGConfigurationPtrInput {
	return (*managedRGConfigurationPtrType)(v)
}

func (*managedRGConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationPtrOutput)
}

func (i *managedRGConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedRGConfiguration] {
	return pulumix.Output[*ManagedRGConfiguration]{
		OutputState: i.ToManagedRGConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Managed resource group configuration
type ManagedRGConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRGConfiguration) *ManagedRGConfiguration {
		return &v
	}).(ManagedRGConfigurationPtrOutput)
}

func (o ManagedRGConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedRGConfiguration] {
	return pulumix.Output[ManagedRGConfiguration]{
		OutputState: o.OutputState,
	}
}

// Managed resource group name
func (o ManagedRGConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedRGConfiguration] {
	return pulumix.Output[*ManagedRGConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ManagedRGConfigurationPtrOutput) Elem() ManagedRGConfigurationOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) ManagedRGConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfiguration
		return ret
	}).(ManagedRGConfigurationOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfigurationResponse struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// Managed resource group configuration
type ManagedRGConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutput() ManagedRGConfigurationResponseOutput {
	return o
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutputWithContext(ctx context.Context) ManagedRGConfigurationResponseOutput {
	return o
}

func (o ManagedRGConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedRGConfigurationResponse] {
	return pulumix.Output[ManagedRGConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Managed resource group name
func (o ManagedRGConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutput() ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedRGConfigurationResponse] {
	return pulumix.Output[*ManagedRGConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedRGConfigurationResponsePtrOutput) Elem() ManagedRGConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) ManagedRGConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfigurationResponse
		return ret
	}).(ManagedRGConfigurationResponseOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Network profile
type NetworkProfile struct {
	// Whether to enable Azure front door
	AzureFrontDoorEnabled *string `pulumi:"azureFrontDoorEnabled"`
	// Capacity, applicable only for Application Gateway
	Capacity *int `pulumi:"capacity"`
	// Load balancer SKU
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// Load balancer tier
	LoadBalancerTier *string `pulumi:"loadBalancerTier"`
	// Load balancer type
	LoadBalancerType string `pulumi:"loadBalancerType"`
}

// NetworkProfileInput is an input type that accepts NetworkProfileArgs and NetworkProfileOutput values.
// You can construct a concrete instance of `NetworkProfileInput` via:
//
//	NetworkProfileArgs{...}
type NetworkProfileInput interface {
	pulumi.Input

	ToNetworkProfileOutput() NetworkProfileOutput
	ToNetworkProfileOutputWithContext(context.Context) NetworkProfileOutput
}

// Network profile
type NetworkProfileArgs struct {
	// Whether to enable Azure front door
	AzureFrontDoorEnabled pulumi.StringPtrInput `pulumi:"azureFrontDoorEnabled"`
	// Capacity, applicable only for Application Gateway
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Load balancer SKU
	LoadBalancerSku pulumi.StringPtrInput `pulumi:"loadBalancerSku"`
	// Load balancer tier
	LoadBalancerTier pulumi.StringPtrInput `pulumi:"loadBalancerTier"`
	// Load balancer type
	LoadBalancerType pulumi.StringInput `pulumi:"loadBalancerType"`
}

func (NetworkProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (i NetworkProfileArgs) ToNetworkProfileOutput() NetworkProfileOutput {
	return i.ToNetworkProfileOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput)
}

func (i NetworkProfileArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkProfile] {
	return pulumix.Output[NetworkProfile]{
		OutputState: i.ToNetworkProfileOutputWithContext(ctx).OutputState,
	}
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i NetworkProfileArgs) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfileOutput).ToNetworkProfilePtrOutputWithContext(ctx)
}

// NetworkProfilePtrInput is an input type that accepts NetworkProfileArgs, NetworkProfilePtr and NetworkProfilePtrOutput values.
// You can construct a concrete instance of `NetworkProfilePtrInput` via:
//
//	        NetworkProfileArgs{...}
//
//	or:
//
//	        nil
type NetworkProfilePtrInput interface {
	pulumi.Input

	ToNetworkProfilePtrOutput() NetworkProfilePtrOutput
	ToNetworkProfilePtrOutputWithContext(context.Context) NetworkProfilePtrOutput
}

type networkProfilePtrType NetworkProfileArgs

func NetworkProfilePtr(v *NetworkProfileArgs) NetworkProfilePtrInput {
	return (*networkProfilePtrType)(v)
}

func (*networkProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return i.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (i *networkProfilePtrType) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkProfilePtrOutput)
}

func (i *networkProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*NetworkProfile] {
	return pulumix.Output[*NetworkProfile]{
		OutputState: i.ToNetworkProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Network profile
type NetworkProfileOutput struct{ *pulumi.OutputState }

func (NetworkProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfile)(nil)).Elem()
}

func (o NetworkProfileOutput) ToNetworkProfileOutput() NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfileOutputWithContext(ctx context.Context) NetworkProfileOutput {
	return o
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o.ToNetworkProfilePtrOutputWithContext(context.Background())
}

func (o NetworkProfileOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkProfile) *NetworkProfile {
		return &v
	}).(NetworkProfilePtrOutput)
}

func (o NetworkProfileOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkProfile] {
	return pulumix.Output[NetworkProfile]{
		OutputState: o.OutputState,
	}
}

// Whether to enable Azure front door
func (o NetworkProfileOutput) AzureFrontDoorEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.AzureFrontDoorEnabled }).(pulumi.StringPtrOutput)
}

// Capacity, applicable only for Application Gateway
func (o NetworkProfileOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Load balancer SKU
func (o NetworkProfileOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// Load balancer tier
func (o NetworkProfileOutput) LoadBalancerTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfile) *string { return v.LoadBalancerTier }).(pulumi.StringPtrOutput)
}

// Load balancer type
func (o NetworkProfileOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfile) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

type NetworkProfilePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfile)(nil)).Elem()
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutput() NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) ToNetworkProfilePtrOutputWithContext(ctx context.Context) NetworkProfilePtrOutput {
	return o
}

func (o NetworkProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkProfile] {
	return pulumix.Output[*NetworkProfile]{
		OutputState: o.OutputState,
	}
}

func (o NetworkProfilePtrOutput) Elem() NetworkProfileOutput {
	return o.ApplyT(func(v *NetworkProfile) NetworkProfile {
		if v != nil {
			return *v
		}
		var ret NetworkProfile
		return ret
	}).(NetworkProfileOutput)
}

// Whether to enable Azure front door
func (o NetworkProfilePtrOutput) AzureFrontDoorEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.AzureFrontDoorEnabled
	}).(pulumi.StringPtrOutput)
}

// Capacity, applicable only for Application Gateway
func (o NetworkProfilePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Load balancer SKU
func (o NetworkProfilePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// Load balancer tier
func (o NetworkProfilePtrOutput) LoadBalancerTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerTier
	}).(pulumi.StringPtrOutput)
}

// Load balancer type
func (o NetworkProfilePtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfile) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// Network profile
type NetworkProfileResponse struct {
	// Whether to enable Azure front door
	AzureFrontDoorEnabled *string `pulumi:"azureFrontDoorEnabled"`
	// Azure front door resource id
	AzureFrontDoorResourceId string `pulumi:"azureFrontDoorResourceId"`
	// Capacity, applicable only for Application Gateway
	Capacity *int `pulumi:"capacity"`
	// Loadbalancer front-end IP address resource Id
	FrontEndPublicIpResourceId string `pulumi:"frontEndPublicIpResourceId"`
	// Azure Loadbalancer or ApplicationGateway resource Id
	LoadBalancerResourceId string `pulumi:"loadBalancerResourceId"`
	// Load balancer SKU
	LoadBalancerSku *string `pulumi:"loadBalancerSku"`
	// Load balancer tier
	LoadBalancerTier *string `pulumi:"loadBalancerTier"`
	// Load balancer type
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// List of outbound public IP resource IDs
	OutboundPublicIpResourceIds []string `pulumi:"outboundPublicIpResourceIds"`
	// Virtual network resource Id
	VNetResourceId string `pulumi:"vNetResourceId"`
}

// Network profile
type NetworkProfileResponseOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutput() NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToNetworkProfileResponseOutputWithContext(ctx context.Context) NetworkProfileResponseOutput {
	return o
}

func (o NetworkProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkProfileResponse] {
	return pulumix.Output[NetworkProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Whether to enable Azure front door
func (o NetworkProfileResponseOutput) AzureFrontDoorEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.AzureFrontDoorEnabled }).(pulumi.StringPtrOutput)
}

// Azure front door resource id
func (o NetworkProfileResponseOutput) AzureFrontDoorResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.AzureFrontDoorResourceId }).(pulumi.StringOutput)
}

// Capacity, applicable only for Application Gateway
func (o NetworkProfileResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Loadbalancer front-end IP address resource Id
func (o NetworkProfileResponseOutput) FrontEndPublicIpResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.FrontEndPublicIpResourceId }).(pulumi.StringOutput)
}

// Azure Loadbalancer or ApplicationGateway resource Id
func (o NetworkProfileResponseOutput) LoadBalancerResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.LoadBalancerResourceId }).(pulumi.StringOutput)
}

// Load balancer SKU
func (o NetworkProfileResponseOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.LoadBalancerSku }).(pulumi.StringPtrOutput)
}

// Load balancer tier
func (o NetworkProfileResponseOutput) LoadBalancerTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkProfileResponse) *string { return v.LoadBalancerTier }).(pulumi.StringPtrOutput)
}

// Load balancer type
func (o NetworkProfileResponseOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// List of outbound public IP resource IDs
func (o NetworkProfileResponseOutput) OutboundPublicIpResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkProfileResponse) []string { return v.OutboundPublicIpResourceIds }).(pulumi.StringArrayOutput)
}

// Virtual network resource Id
func (o NetworkProfileResponseOutput) VNetResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkProfileResponse) string { return v.VNetResourceId }).(pulumi.StringOutput)
}

type NetworkProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkProfileResponse)(nil)).Elem()
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutput() NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToNetworkProfileResponsePtrOutputWithContext(ctx context.Context) NetworkProfileResponsePtrOutput {
	return o
}

func (o NetworkProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*NetworkProfileResponse] {
	return pulumix.Output[*NetworkProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o NetworkProfileResponsePtrOutput) Elem() NetworkProfileResponseOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) NetworkProfileResponse {
		if v != nil {
			return *v
		}
		var ret NetworkProfileResponse
		return ret
	}).(NetworkProfileResponseOutput)
}

// Whether to enable Azure front door
func (o NetworkProfileResponsePtrOutput) AzureFrontDoorEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureFrontDoorEnabled
	}).(pulumi.StringPtrOutput)
}

// Azure front door resource id
func (o NetworkProfileResponsePtrOutput) AzureFrontDoorResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AzureFrontDoorResourceId
	}).(pulumi.StringPtrOutput)
}

// Capacity, applicable only for Application Gateway
func (o NetworkProfileResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Loadbalancer front-end IP address resource Id
func (o NetworkProfileResponsePtrOutput) FrontEndPublicIpResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FrontEndPublicIpResourceId
	}).(pulumi.StringPtrOutput)
}

// Azure Loadbalancer or ApplicationGateway resource Id
func (o NetworkProfileResponsePtrOutput) LoadBalancerResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancerResourceId
	}).(pulumi.StringPtrOutput)
}

// Load balancer SKU
func (o NetworkProfileResponsePtrOutput) LoadBalancerSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSku
	}).(pulumi.StringPtrOutput)
}

// Load balancer tier
func (o NetworkProfileResponsePtrOutput) LoadBalancerTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerTier
	}).(pulumi.StringPtrOutput)
}

// Load balancer type
func (o NetworkProfileResponsePtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// List of outbound public IP resource IDs
func (o NetworkProfileResponsePtrOutput) OutboundPublicIpResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.OutboundPublicIpResourceIds
	}).(pulumi.StringArrayOutput)
}

// Virtual network resource Id
func (o NetworkProfileResponsePtrOutput) VNetResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VNetResourceId
	}).(pulumi.StringPtrOutput)
}

// VM or VMSS node profile
type NodeProfile struct {
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfo `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfo `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfile `pulumi:"osImage"`
}

// NodeProfileInput is an input type that accepts NodeProfileArgs and NodeProfileOutput values.
// You can construct a concrete instance of `NodeProfileInput` via:
//
//	NodeProfileArgs{...}
type NodeProfileInput interface {
	pulumi.Input

	ToNodeProfileOutput() NodeProfileOutput
	ToNodeProfileOutputWithContext(context.Context) NodeProfileOutput
}

// VM or VMSS node profile
type NodeProfileArgs struct {
	// Data disks details. This property is not in use right now
	DataDisks DiskInfoArrayInput `pulumi:"dataDisks"`
	// VM or VMSS name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku pulumi.StringInput `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoInput `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileInput `pulumi:"osImage"`
}

func (NodeProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (i NodeProfileArgs) ToNodeProfileOutput() NodeProfileOutput {
	return i.ToNodeProfileOutputWithContext(context.Background())
}

func (i NodeProfileArgs) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeProfileOutput)
}

func (i NodeProfileArgs) ToOutput(ctx context.Context) pulumix.Output[NodeProfile] {
	return pulumix.Output[NodeProfile]{
		OutputState: i.ToNodeProfileOutputWithContext(ctx).OutputState,
	}
}

// VM or VMSS node profile
type NodeProfileOutput struct{ *pulumi.OutputState }

func (NodeProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfile)(nil)).Elem()
}

func (o NodeProfileOutput) ToNodeProfileOutput() NodeProfileOutput {
	return o
}

func (o NodeProfileOutput) ToNodeProfileOutputWithContext(ctx context.Context) NodeProfileOutput {
	return o
}

func (o NodeProfileOutput) ToOutput(ctx context.Context) pulumix.Output[NodeProfile] {
	return pulumix.Output[NodeProfile]{
		OutputState: o.OutputState,
	}
}

// Data disks details. This property is not in use right now
func (o NodeProfileOutput) DataDisks() DiskInfoArrayOutput {
	return o.ApplyT(func(v NodeProfile) []DiskInfo { return v.DataDisks }).(DiskInfoArrayOutput)
}

// VM or VMSS name
func (o NodeProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM SKU for node(s)
func (o NodeProfileOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfile) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o NodeProfileOutput) OsDisk() DiskInfoOutput {
	return o.ApplyT(func(v NodeProfile) DiskInfo { return v.OsDisk }).(DiskInfoOutput)
}

// OS image used for creating the nodes
func (o NodeProfileOutput) OsImage() OsImageProfileOutput {
	return o.ApplyT(func(v NodeProfile) OsImageProfile { return v.OsImage }).(OsImageProfileOutput)
}

// VM or VMSS node profile
type NodeProfileResponse struct {
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfoResponse `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM/VMSS resource ARM Ids
	NodeResourceIds []string `pulumi:"nodeResourceIds"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoResponse `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileResponse `pulumi:"osImage"`
}

// VM or VMSS node profile
type NodeProfileResponseOutput struct{ *pulumi.OutputState }

func (NodeProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeProfileResponse)(nil)).Elem()
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutput() NodeProfileResponseOutput {
	return o
}

func (o NodeProfileResponseOutput) ToNodeProfileResponseOutputWithContext(ctx context.Context) NodeProfileResponseOutput {
	return o
}

func (o NodeProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeProfileResponse] {
	return pulumix.Output[NodeProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Data disks details. This property is not in use right now
func (o NodeProfileResponseOutput) DataDisks() DiskInfoResponseArrayOutput {
	return o.ApplyT(func(v NodeProfileResponse) []DiskInfoResponse { return v.DataDisks }).(DiskInfoResponseArrayOutput)
}

// VM or VMSS name
func (o NodeProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM/VMSS resource ARM Ids
func (o NodeProfileResponseOutput) NodeResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeProfileResponse) []string { return v.NodeResourceIds }).(pulumi.StringArrayOutput)
}

// VM SKU for node(s)
func (o NodeProfileResponseOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v NodeProfileResponse) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o NodeProfileResponseOutput) OsDisk() DiskInfoResponseOutput {
	return o.ApplyT(func(v NodeProfileResponse) DiskInfoResponse { return v.OsDisk }).(DiskInfoResponseOutput)
}

// OS image used for creating the nodes
func (o NodeProfileResponseOutput) OsImage() OsImageProfileResponseOutput {
	return o.ApplyT(func(v NodeProfileResponse) OsImageProfileResponse { return v.OsImage }).(OsImageProfileResponseOutput)
}

// OS image profile
type OsImageProfile struct {
	// OS image offer
	Offer *string `pulumi:"offer"`
	// OS image publisher
	Publisher *string `pulumi:"publisher"`
	// OS image sku
	Sku *string `pulumi:"sku"`
	// OS image version
	Version *string `pulumi:"version"`
}

// OsImageProfileInput is an input type that accepts OsImageProfileArgs and OsImageProfileOutput values.
// You can construct a concrete instance of `OsImageProfileInput` via:
//
//	OsImageProfileArgs{...}
type OsImageProfileInput interface {
	pulumi.Input

	ToOsImageProfileOutput() OsImageProfileOutput
	ToOsImageProfileOutputWithContext(context.Context) OsImageProfileOutput
}

// OS image profile
type OsImageProfileArgs struct {
	// OS image offer
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// OS image publisher
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// OS image sku
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// OS image version
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (OsImageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsImageProfile)(nil)).Elem()
}

func (i OsImageProfileArgs) ToOsImageProfileOutput() OsImageProfileOutput {
	return i.ToOsImageProfileOutputWithContext(context.Background())
}

func (i OsImageProfileArgs) ToOsImageProfileOutputWithContext(ctx context.Context) OsImageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsImageProfileOutput)
}

func (i OsImageProfileArgs) ToOutput(ctx context.Context) pulumix.Output[OsImageProfile] {
	return pulumix.Output[OsImageProfile]{
		OutputState: i.ToOsImageProfileOutputWithContext(ctx).OutputState,
	}
}

func (i OsImageProfileArgs) ToOsImageProfilePtrOutput() OsImageProfilePtrOutput {
	return i.ToOsImageProfilePtrOutputWithContext(context.Background())
}

func (i OsImageProfileArgs) ToOsImageProfilePtrOutputWithContext(ctx context.Context) OsImageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsImageProfileOutput).ToOsImageProfilePtrOutputWithContext(ctx)
}

// OsImageProfilePtrInput is an input type that accepts OsImageProfileArgs, OsImageProfilePtr and OsImageProfilePtrOutput values.
// You can construct a concrete instance of `OsImageProfilePtrInput` via:
//
//	        OsImageProfileArgs{...}
//
//	or:
//
//	        nil
type OsImageProfilePtrInput interface {
	pulumi.Input

	ToOsImageProfilePtrOutput() OsImageProfilePtrOutput
	ToOsImageProfilePtrOutputWithContext(context.Context) OsImageProfilePtrOutput
}

type osImageProfilePtrType OsImageProfileArgs

func OsImageProfilePtr(v *OsImageProfileArgs) OsImageProfilePtrInput {
	return (*osImageProfilePtrType)(v)
}

func (*osImageProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsImageProfile)(nil)).Elem()
}

func (i *osImageProfilePtrType) ToOsImageProfilePtrOutput() OsImageProfilePtrOutput {
	return i.ToOsImageProfilePtrOutputWithContext(context.Background())
}

func (i *osImageProfilePtrType) ToOsImageProfilePtrOutputWithContext(ctx context.Context) OsImageProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsImageProfilePtrOutput)
}

func (i *osImageProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*OsImageProfile] {
	return pulumix.Output[*OsImageProfile]{
		OutputState: i.ToOsImageProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// OS image profile
type OsImageProfileOutput struct{ *pulumi.OutputState }

func (OsImageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsImageProfile)(nil)).Elem()
}

func (o OsImageProfileOutput) ToOsImageProfileOutput() OsImageProfileOutput {
	return o
}

func (o OsImageProfileOutput) ToOsImageProfileOutputWithContext(ctx context.Context) OsImageProfileOutput {
	return o
}

func (o OsImageProfileOutput) ToOsImageProfilePtrOutput() OsImageProfilePtrOutput {
	return o.ToOsImageProfilePtrOutputWithContext(context.Background())
}

func (o OsImageProfileOutput) ToOsImageProfilePtrOutputWithContext(ctx context.Context) OsImageProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsImageProfile) *OsImageProfile {
		return &v
	}).(OsImageProfilePtrOutput)
}

func (o OsImageProfileOutput) ToOutput(ctx context.Context) pulumix.Output[OsImageProfile] {
	return pulumix.Output[OsImageProfile]{
		OutputState: o.OutputState,
	}
}

// OS image offer
func (o OsImageProfileOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfile) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// OS image publisher
func (o OsImageProfileOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfile) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// OS image sku
func (o OsImageProfileOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfile) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// OS image version
func (o OsImageProfileOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfile) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type OsImageProfilePtrOutput struct{ *pulumi.OutputState }

func (OsImageProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsImageProfile)(nil)).Elem()
}

func (o OsImageProfilePtrOutput) ToOsImageProfilePtrOutput() OsImageProfilePtrOutput {
	return o
}

func (o OsImageProfilePtrOutput) ToOsImageProfilePtrOutputWithContext(ctx context.Context) OsImageProfilePtrOutput {
	return o
}

func (o OsImageProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OsImageProfile] {
	return pulumix.Output[*OsImageProfile]{
		OutputState: o.OutputState,
	}
}

func (o OsImageProfilePtrOutput) Elem() OsImageProfileOutput {
	return o.ApplyT(func(v *OsImageProfile) OsImageProfile {
		if v != nil {
			return *v
		}
		var ret OsImageProfile
		return ret
	}).(OsImageProfileOutput)
}

// OS image offer
func (o OsImageProfilePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// OS image publisher
func (o OsImageProfilePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// OS image sku
func (o OsImageProfilePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// OS image version
func (o OsImageProfilePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfile) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// OS image profile
type OsImageProfileResponse struct {
	// OS image offer
	Offer *string `pulumi:"offer"`
	// OS image publisher
	Publisher *string `pulumi:"publisher"`
	// OS image sku
	Sku *string `pulumi:"sku"`
	// OS image version
	Version *string `pulumi:"version"`
}

// OS image profile
type OsImageProfileResponseOutput struct{ *pulumi.OutputState }

func (OsImageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsImageProfileResponse)(nil)).Elem()
}

func (o OsImageProfileResponseOutput) ToOsImageProfileResponseOutput() OsImageProfileResponseOutput {
	return o
}

func (o OsImageProfileResponseOutput) ToOsImageProfileResponseOutputWithContext(ctx context.Context) OsImageProfileResponseOutput {
	return o
}

func (o OsImageProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OsImageProfileResponse] {
	return pulumix.Output[OsImageProfileResponse]{
		OutputState: o.OutputState,
	}
}

// OS image offer
func (o OsImageProfileResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfileResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// OS image publisher
func (o OsImageProfileResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfileResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// OS image sku
func (o OsImageProfileResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfileResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// OS image version
func (o OsImageProfileResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsImageProfileResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type OsImageProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OsImageProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsImageProfileResponse)(nil)).Elem()
}

func (o OsImageProfileResponsePtrOutput) ToOsImageProfileResponsePtrOutput() OsImageProfileResponsePtrOutput {
	return o
}

func (o OsImageProfileResponsePtrOutput) ToOsImageProfileResponsePtrOutputWithContext(ctx context.Context) OsImageProfileResponsePtrOutput {
	return o
}

func (o OsImageProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OsImageProfileResponse] {
	return pulumix.Output[*OsImageProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o OsImageProfileResponsePtrOutput) Elem() OsImageProfileResponseOutput {
	return o.ApplyT(func(v *OsImageProfileResponse) OsImageProfileResponse {
		if v != nil {
			return *v
		}
		var ret OsImageProfileResponse
		return ret
	}).(OsImageProfileResponseOutput)
}

// OS image offer
func (o OsImageProfileResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// OS image publisher
func (o OsImageProfileResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// OS image sku
func (o OsImageProfileResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// OS image version
func (o OsImageProfileResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsImageProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// PHP profile
type PhpProfile struct {
	// PHP version
	Version string `pulumi:"version"`
}

// PhpProfileInput is an input type that accepts PhpProfileArgs and PhpProfileOutput values.
// You can construct a concrete instance of `PhpProfileInput` via:
//
//	PhpProfileArgs{...}
type PhpProfileInput interface {
	pulumi.Input

	ToPhpProfileOutput() PhpProfileOutput
	ToPhpProfileOutputWithContext(context.Context) PhpProfileOutput
}

// PHP profile
type PhpProfileArgs struct {
	// PHP version
	Version pulumi.StringInput `pulumi:"version"`
}

func (PhpProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpProfile)(nil)).Elem()
}

func (i PhpProfileArgs) ToPhpProfileOutput() PhpProfileOutput {
	return i.ToPhpProfileOutputWithContext(context.Background())
}

func (i PhpProfileArgs) ToPhpProfileOutputWithContext(ctx context.Context) PhpProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpProfileOutput)
}

func (i PhpProfileArgs) ToOutput(ctx context.Context) pulumix.Output[PhpProfile] {
	return pulumix.Output[PhpProfile]{
		OutputState: i.ToPhpProfileOutputWithContext(ctx).OutputState,
	}
}

func (i PhpProfileArgs) ToPhpProfilePtrOutput() PhpProfilePtrOutput {
	return i.ToPhpProfilePtrOutputWithContext(context.Background())
}

func (i PhpProfileArgs) ToPhpProfilePtrOutputWithContext(ctx context.Context) PhpProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpProfileOutput).ToPhpProfilePtrOutputWithContext(ctx)
}

// PhpProfilePtrInput is an input type that accepts PhpProfileArgs, PhpProfilePtr and PhpProfilePtrOutput values.
// You can construct a concrete instance of `PhpProfilePtrInput` via:
//
//	        PhpProfileArgs{...}
//
//	or:
//
//	        nil
type PhpProfilePtrInput interface {
	pulumi.Input

	ToPhpProfilePtrOutput() PhpProfilePtrOutput
	ToPhpProfilePtrOutputWithContext(context.Context) PhpProfilePtrOutput
}

type phpProfilePtrType PhpProfileArgs

func PhpProfilePtr(v *PhpProfileArgs) PhpProfilePtrInput {
	return (*phpProfilePtrType)(v)
}

func (*phpProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpProfile)(nil)).Elem()
}

func (i *phpProfilePtrType) ToPhpProfilePtrOutput() PhpProfilePtrOutput {
	return i.ToPhpProfilePtrOutputWithContext(context.Background())
}

func (i *phpProfilePtrType) ToPhpProfilePtrOutputWithContext(ctx context.Context) PhpProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpProfilePtrOutput)
}

func (i *phpProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*PhpProfile] {
	return pulumix.Output[*PhpProfile]{
		OutputState: i.ToPhpProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// PHP profile
type PhpProfileOutput struct{ *pulumi.OutputState }

func (PhpProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpProfile)(nil)).Elem()
}

func (o PhpProfileOutput) ToPhpProfileOutput() PhpProfileOutput {
	return o
}

func (o PhpProfileOutput) ToPhpProfileOutputWithContext(ctx context.Context) PhpProfileOutput {
	return o
}

func (o PhpProfileOutput) ToPhpProfilePtrOutput() PhpProfilePtrOutput {
	return o.ToPhpProfilePtrOutputWithContext(context.Background())
}

func (o PhpProfileOutput) ToPhpProfilePtrOutputWithContext(ctx context.Context) PhpProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PhpProfile) *PhpProfile {
		return &v
	}).(PhpProfilePtrOutput)
}

func (o PhpProfileOutput) ToOutput(ctx context.Context) pulumix.Output[PhpProfile] {
	return pulumix.Output[PhpProfile]{
		OutputState: o.OutputState,
	}
}

// PHP version
func (o PhpProfileOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PhpProfile) string { return v.Version }).(pulumi.StringOutput)
}

type PhpProfilePtrOutput struct{ *pulumi.OutputState }

func (PhpProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpProfile)(nil)).Elem()
}

func (o PhpProfilePtrOutput) ToPhpProfilePtrOutput() PhpProfilePtrOutput {
	return o
}

func (o PhpProfilePtrOutput) ToPhpProfilePtrOutputWithContext(ctx context.Context) PhpProfilePtrOutput {
	return o
}

func (o PhpProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PhpProfile] {
	return pulumix.Output[*PhpProfile]{
		OutputState: o.OutputState,
	}
}

func (o PhpProfilePtrOutput) Elem() PhpProfileOutput {
	return o.ApplyT(func(v *PhpProfile) PhpProfile {
		if v != nil {
			return *v
		}
		var ret PhpProfile
		return ret
	}).(PhpProfileOutput)
}

// PHP version
func (o PhpProfilePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhpProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// PHP profile
type PhpProfileResponse struct {
	// PHP version
	Version string `pulumi:"version"`
}

// PHP profile
type PhpProfileResponseOutput struct{ *pulumi.OutputState }

func (PhpProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpProfileResponse)(nil)).Elem()
}

func (o PhpProfileResponseOutput) ToPhpProfileResponseOutput() PhpProfileResponseOutput {
	return o
}

func (o PhpProfileResponseOutput) ToPhpProfileResponseOutputWithContext(ctx context.Context) PhpProfileResponseOutput {
	return o
}

func (o PhpProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PhpProfileResponse] {
	return pulumix.Output[PhpProfileResponse]{
		OutputState: o.OutputState,
	}
}

// PHP version
func (o PhpProfileResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PhpProfileResponse) string { return v.Version }).(pulumi.StringOutput)
}

type PhpProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (PhpProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpProfileResponse)(nil)).Elem()
}

func (o PhpProfileResponsePtrOutput) ToPhpProfileResponsePtrOutput() PhpProfileResponsePtrOutput {
	return o
}

func (o PhpProfileResponsePtrOutput) ToPhpProfileResponsePtrOutputWithContext(ctx context.Context) PhpProfileResponsePtrOutput {
	return o
}

func (o PhpProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PhpProfileResponse] {
	return pulumix.Output[*PhpProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o PhpProfileResponsePtrOutput) Elem() PhpProfileResponseOutput {
	return o.ApplyT(func(v *PhpProfileResponse) PhpProfileResponse {
		if v != nil {
			return *v
		}
		var ret PhpProfileResponse
		return ret
	}).(PhpProfileResponseOutput)
}

// PHP version
func (o PhpProfileResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhpProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource. Currently not supported
type PhpWorkloadResourceIdentity struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// PhpWorkloadResourceIdentityInput is an input type that accepts PhpWorkloadResourceIdentityArgs and PhpWorkloadResourceIdentityOutput values.
// You can construct a concrete instance of `PhpWorkloadResourceIdentityInput` via:
//
//	PhpWorkloadResourceIdentityArgs{...}
type PhpWorkloadResourceIdentityInput interface {
	pulumi.Input

	ToPhpWorkloadResourceIdentityOutput() PhpWorkloadResourceIdentityOutput
	ToPhpWorkloadResourceIdentityOutputWithContext(context.Context) PhpWorkloadResourceIdentityOutput
}

// Identity for the resource. Currently not supported
type PhpWorkloadResourceIdentityArgs struct {
	// Type of manage identity
	Type pulumi.StringInput `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (PhpWorkloadResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpWorkloadResourceIdentity)(nil)).Elem()
}

func (i PhpWorkloadResourceIdentityArgs) ToPhpWorkloadResourceIdentityOutput() PhpWorkloadResourceIdentityOutput {
	return i.ToPhpWorkloadResourceIdentityOutputWithContext(context.Background())
}

func (i PhpWorkloadResourceIdentityArgs) ToPhpWorkloadResourceIdentityOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpWorkloadResourceIdentityOutput)
}

func (i PhpWorkloadResourceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[PhpWorkloadResourceIdentity] {
	return pulumix.Output[PhpWorkloadResourceIdentity]{
		OutputState: i.ToPhpWorkloadResourceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i PhpWorkloadResourceIdentityArgs) ToPhpWorkloadResourceIdentityPtrOutput() PhpWorkloadResourceIdentityPtrOutput {
	return i.ToPhpWorkloadResourceIdentityPtrOutputWithContext(context.Background())
}

func (i PhpWorkloadResourceIdentityArgs) ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpWorkloadResourceIdentityOutput).ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx)
}

// PhpWorkloadResourceIdentityPtrInput is an input type that accepts PhpWorkloadResourceIdentityArgs, PhpWorkloadResourceIdentityPtr and PhpWorkloadResourceIdentityPtrOutput values.
// You can construct a concrete instance of `PhpWorkloadResourceIdentityPtrInput` via:
//
//	        PhpWorkloadResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type PhpWorkloadResourceIdentityPtrInput interface {
	pulumi.Input

	ToPhpWorkloadResourceIdentityPtrOutput() PhpWorkloadResourceIdentityPtrOutput
	ToPhpWorkloadResourceIdentityPtrOutputWithContext(context.Context) PhpWorkloadResourceIdentityPtrOutput
}

type phpWorkloadResourceIdentityPtrType PhpWorkloadResourceIdentityArgs

func PhpWorkloadResourceIdentityPtr(v *PhpWorkloadResourceIdentityArgs) PhpWorkloadResourceIdentityPtrInput {
	return (*phpWorkloadResourceIdentityPtrType)(v)
}

func (*phpWorkloadResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpWorkloadResourceIdentity)(nil)).Elem()
}

func (i *phpWorkloadResourceIdentityPtrType) ToPhpWorkloadResourceIdentityPtrOutput() PhpWorkloadResourceIdentityPtrOutput {
	return i.ToPhpWorkloadResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *phpWorkloadResourceIdentityPtrType) ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PhpWorkloadResourceIdentityPtrOutput)
}

func (i *phpWorkloadResourceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*PhpWorkloadResourceIdentity] {
	return pulumix.Output[*PhpWorkloadResourceIdentity]{
		OutputState: i.ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity for the resource. Currently not supported
type PhpWorkloadResourceIdentityOutput struct{ *pulumi.OutputState }

func (PhpWorkloadResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpWorkloadResourceIdentity)(nil)).Elem()
}

func (o PhpWorkloadResourceIdentityOutput) ToPhpWorkloadResourceIdentityOutput() PhpWorkloadResourceIdentityOutput {
	return o
}

func (o PhpWorkloadResourceIdentityOutput) ToPhpWorkloadResourceIdentityOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityOutput {
	return o
}

func (o PhpWorkloadResourceIdentityOutput) ToPhpWorkloadResourceIdentityPtrOutput() PhpWorkloadResourceIdentityPtrOutput {
	return o.ToPhpWorkloadResourceIdentityPtrOutputWithContext(context.Background())
}

func (o PhpWorkloadResourceIdentityOutput) ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PhpWorkloadResourceIdentity) *PhpWorkloadResourceIdentity {
		return &v
	}).(PhpWorkloadResourceIdentityPtrOutput)
}

func (o PhpWorkloadResourceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[PhpWorkloadResourceIdentity] {
	return pulumix.Output[PhpWorkloadResourceIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of manage identity
func (o PhpWorkloadResourceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhpWorkloadResourceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o PhpWorkloadResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PhpWorkloadResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type PhpWorkloadResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (PhpWorkloadResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpWorkloadResourceIdentity)(nil)).Elem()
}

func (o PhpWorkloadResourceIdentityPtrOutput) ToPhpWorkloadResourceIdentityPtrOutput() PhpWorkloadResourceIdentityPtrOutput {
	return o
}

func (o PhpWorkloadResourceIdentityPtrOutput) ToPhpWorkloadResourceIdentityPtrOutputWithContext(ctx context.Context) PhpWorkloadResourceIdentityPtrOutput {
	return o
}

func (o PhpWorkloadResourceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PhpWorkloadResourceIdentity] {
	return pulumix.Output[*PhpWorkloadResourceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o PhpWorkloadResourceIdentityPtrOutput) Elem() PhpWorkloadResourceIdentityOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceIdentity) PhpWorkloadResourceIdentity {
		if v != nil {
			return *v
		}
		var ret PhpWorkloadResourceIdentity
		return ret
	}).(PhpWorkloadResourceIdentityOutput)
}

// Type of manage identity
func (o PhpWorkloadResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o PhpWorkloadResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource. Currently not supported
type PhpWorkloadResourceResponseIdentity struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the resource. Currently not supported
type PhpWorkloadResourceResponseIdentityOutput struct{ *pulumi.OutputState }

func (PhpWorkloadResourceResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PhpWorkloadResourceResponseIdentity)(nil)).Elem()
}

func (o PhpWorkloadResourceResponseIdentityOutput) ToPhpWorkloadResourceResponseIdentityOutput() PhpWorkloadResourceResponseIdentityOutput {
	return o
}

func (o PhpWorkloadResourceResponseIdentityOutput) ToPhpWorkloadResourceResponseIdentityOutputWithContext(ctx context.Context) PhpWorkloadResourceResponseIdentityOutput {
	return o
}

func (o PhpWorkloadResourceResponseIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[PhpWorkloadResourceResponseIdentity] {
	return pulumix.Output[PhpWorkloadResourceResponseIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of manage identity
func (o PhpWorkloadResourceResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PhpWorkloadResourceResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o PhpWorkloadResourceResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v PhpWorkloadResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type PhpWorkloadResourceResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (PhpWorkloadResourceResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PhpWorkloadResourceResponseIdentity)(nil)).Elem()
}

func (o PhpWorkloadResourceResponseIdentityPtrOutput) ToPhpWorkloadResourceResponseIdentityPtrOutput() PhpWorkloadResourceResponseIdentityPtrOutput {
	return o
}

func (o PhpWorkloadResourceResponseIdentityPtrOutput) ToPhpWorkloadResourceResponseIdentityPtrOutputWithContext(ctx context.Context) PhpWorkloadResourceResponseIdentityPtrOutput {
	return o
}

func (o PhpWorkloadResourceResponseIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PhpWorkloadResourceResponseIdentity] {
	return pulumix.Output[*PhpWorkloadResourceResponseIdentity]{
		OutputState: o.OutputState,
	}
}

func (o PhpWorkloadResourceResponseIdentityPtrOutput) Elem() PhpWorkloadResourceResponseIdentityOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceResponseIdentity) PhpWorkloadResourceResponseIdentity {
		if v != nil {
			return *v
		}
		var ret PhpWorkloadResourceResponseIdentity
		return ret
	}).(PhpWorkloadResourceResponseIdentityOutput)
}

// Type of manage identity
func (o PhpWorkloadResourceResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o PhpWorkloadResourceResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *PhpWorkloadResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponse struct {
	// The zone A.
	ZoneA *float64 `pulumi:"zoneA"`
	// The zone B.
	ZoneB *float64 `pulumi:"zoneB"`
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponseOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutput() SAPAvailabilityZonePairResponseOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SAPAvailabilityZonePairResponse] {
	return pulumix.Output[SAPAvailabilityZonePairResponse]{
		OutputState: o.OutputState,
	}
}

// The zone A.
func (o SAPAvailabilityZonePairResponseOutput) ZoneA() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneA }).(pulumi.Float64PtrOutput)
}

// The zone B.
func (o SAPAvailabilityZonePairResponseOutput) ZoneB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneB }).(pulumi.Float64PtrOutput)
}

type SAPAvailabilityZonePairResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutput() SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SAPAvailabilityZonePairResponse] {
	return pulumix.Output[[]SAPAvailabilityZonePairResponse]{
		OutputState: o.OutputState,
	}
}

func (o SAPAvailabilityZonePairResponseArrayOutput) Index(i pulumi.IntInput) SAPAvailabilityZonePairResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPAvailabilityZonePairResponse {
		return vs[0].([]SAPAvailabilityZonePairResponse)[vs[1].(int)]
	}).(SAPAvailabilityZonePairResponseOutput)
}

// The SAP Disk Configuration.
type SAPDiskConfigurationResponse struct {
	// The disk count.
	DiskCount *float64 `pulumi:"diskCount"`
	// The disk Iops.
	DiskIopsReadWrite *float64 `pulumi:"diskIopsReadWrite"`
	// The disk provisioned throughput in MBps.
	DiskMBpsReadWrite *float64 `pulumi:"diskMBpsReadWrite"`
	// The disk size in GB.
	DiskSizeGB *float64 `pulumi:"diskSizeGB"`
	// The disk storage type
	DiskStorageType *string `pulumi:"diskStorageType"`
	// The disk type.
	DiskType *string `pulumi:"diskType"`
	// The volume name.
	Volume *string `pulumi:"volume"`
}

// The SAP Disk Configuration.
type SAPDiskConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutput() SAPDiskConfigurationResponseOutput {
	return o
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseOutput {
	return o
}

func (o SAPDiskConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SAPDiskConfigurationResponse] {
	return pulumix.Output[SAPDiskConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The disk count.
func (o SAPDiskConfigurationResponseOutput) DiskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *float64 { return v.DiskCount }).(pulumi.Float64PtrOutput)
}

// The disk Iops.
func (o SAPDiskConfigurationResponseOutput) DiskIopsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *float64 { return v.DiskIopsReadWrite }).(pulumi.Float64PtrOutput)
}

// The disk provisioned throughput in MBps.
func (o SAPDiskConfigurationResponseOutput) DiskMBpsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *float64 { return v.DiskMBpsReadWrite }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o SAPDiskConfigurationResponseOutput) DiskSizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *float64 { return v.DiskSizeGB }).(pulumi.Float64PtrOutput)
}

// The disk storage type
func (o SAPDiskConfigurationResponseOutput) DiskStorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *string { return v.DiskStorageType }).(pulumi.StringPtrOutput)
}

// The disk type.
func (o SAPDiskConfigurationResponseOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// The volume name.
func (o SAPDiskConfigurationResponseOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type SAPDiskConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseArrayOutput) ToSAPDiskConfigurationResponseArrayOutput() SAPDiskConfigurationResponseArrayOutput {
	return o
}

func (o SAPDiskConfigurationResponseArrayOutput) ToSAPDiskConfigurationResponseArrayOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseArrayOutput {
	return o
}

func (o SAPDiskConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SAPDiskConfigurationResponse] {
	return pulumix.Output[[]SAPDiskConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o SAPDiskConfigurationResponseArrayOutput) Index(i pulumi.IntInput) SAPDiskConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPDiskConfigurationResponse {
		return vs[0].([]SAPDiskConfigurationResponse)[vs[1].(int)]
	}).(SAPDiskConfigurationResponseOutput)
}

// The SAP supported SKU.
type SAPSupportedSkuResponse struct {
	// True if the Sku is certified for App server in the SAP system.
	IsAppServerCertified *bool `pulumi:"isAppServerCertified"`
	// True if the Sku is certified for Database server in the SAP system.
	IsDatabaseCertified *bool `pulumi:"isDatabaseCertified"`
	// The VM Sku.
	VmSku *string `pulumi:"vmSku"`
}

// The SAP supported SKU.
type SAPSupportedSkuResponseOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutput() SAPSupportedSkuResponseOutput {
	return o
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutputWithContext(ctx context.Context) SAPSupportedSkuResponseOutput {
	return o
}

func (o SAPSupportedSkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SAPSupportedSkuResponse] {
	return pulumix.Output[SAPSupportedSkuResponse]{
		OutputState: o.OutputState,
	}
}

// True if the Sku is certified for App server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsAppServerCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsAppServerCertified }).(pulumi.BoolPtrOutput)
}

// True if the Sku is certified for Database server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsDatabaseCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsDatabaseCertified }).(pulumi.BoolPtrOutput)
}

// The VM Sku.
func (o SAPSupportedSkuResponseOutput) VmSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *string { return v.VmSku }).(pulumi.StringPtrOutput)
}

type SAPSupportedSkuResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutput() SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutputWithContext(ctx context.Context) SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SAPSupportedSkuResponse] {
	return pulumix.Output[[]SAPSupportedSkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o SAPSupportedSkuResponseArrayOutput) Index(i pulumi.IntInput) SAPSupportedSkuResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPSupportedSkuResponse {
		return vs[0].([]SAPSupportedSkuResponse)[vs[1].(int)]
	}).(SAPSupportedSkuResponseOutput)
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponse struct {
	// The Virtual Instance for SAP error body.
	Properties *ErrorDefinitionResponse `pulumi:"properties"`
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponseOutput struct{ *pulumi.OutputState }

func (SAPVirtualInstanceErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPVirtualInstanceErrorResponse)(nil)).Elem()
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutput() SAPVirtualInstanceErrorResponseOutput {
	return o
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutputWithContext(ctx context.Context) SAPVirtualInstanceErrorResponseOutput {
	return o
}

func (o SAPVirtualInstanceErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SAPVirtualInstanceErrorResponse] {
	return pulumix.Output[SAPVirtualInstanceErrorResponse]{
		OutputState: o.OutputState,
	}
}

// The Virtual Instance for SAP error body.
func (o SAPVirtualInstanceErrorResponseOutput) Properties() ErrorDefinitionResponsePtrOutput {
	return o.ApplyT(func(v SAPVirtualInstanceErrorResponse) *ErrorDefinitionResponse { return v.Properties }).(ErrorDefinitionResponsePtrOutput)
}

// Search profile
type SearchProfile struct {
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfo `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfo `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfile `pulumi:"osImage"`
	// Search type
	SearchType string `pulumi:"searchType"`
}

// SearchProfileInput is an input type that accepts SearchProfileArgs and SearchProfileOutput values.
// You can construct a concrete instance of `SearchProfileInput` via:
//
//	SearchProfileArgs{...}
type SearchProfileInput interface {
	pulumi.Input

	ToSearchProfileOutput() SearchProfileOutput
	ToSearchProfileOutputWithContext(context.Context) SearchProfileOutput
}

// Search profile
type SearchProfileArgs struct {
	// Data disks details. This property is not in use right now
	DataDisks DiskInfoArrayInput `pulumi:"dataDisks"`
	// VM or VMSS name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku pulumi.StringInput `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoInput `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileInput `pulumi:"osImage"`
	// Search type
	SearchType pulumi.StringInput `pulumi:"searchType"`
}

func (SearchProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchProfile)(nil)).Elem()
}

func (i SearchProfileArgs) ToSearchProfileOutput() SearchProfileOutput {
	return i.ToSearchProfileOutputWithContext(context.Background())
}

func (i SearchProfileArgs) ToSearchProfileOutputWithContext(ctx context.Context) SearchProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchProfileOutput)
}

func (i SearchProfileArgs) ToOutput(ctx context.Context) pulumix.Output[SearchProfile] {
	return pulumix.Output[SearchProfile]{
		OutputState: i.ToSearchProfileOutputWithContext(ctx).OutputState,
	}
}

func (i SearchProfileArgs) ToSearchProfilePtrOutput() SearchProfilePtrOutput {
	return i.ToSearchProfilePtrOutputWithContext(context.Background())
}

func (i SearchProfileArgs) ToSearchProfilePtrOutputWithContext(ctx context.Context) SearchProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchProfileOutput).ToSearchProfilePtrOutputWithContext(ctx)
}

// SearchProfilePtrInput is an input type that accepts SearchProfileArgs, SearchProfilePtr and SearchProfilePtrOutput values.
// You can construct a concrete instance of `SearchProfilePtrInput` via:
//
//	        SearchProfileArgs{...}
//
//	or:
//
//	        nil
type SearchProfilePtrInput interface {
	pulumi.Input

	ToSearchProfilePtrOutput() SearchProfilePtrOutput
	ToSearchProfilePtrOutputWithContext(context.Context) SearchProfilePtrOutput
}

type searchProfilePtrType SearchProfileArgs

func SearchProfilePtr(v *SearchProfileArgs) SearchProfilePtrInput {
	return (*searchProfilePtrType)(v)
}

func (*searchProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchProfile)(nil)).Elem()
}

func (i *searchProfilePtrType) ToSearchProfilePtrOutput() SearchProfilePtrOutput {
	return i.ToSearchProfilePtrOutputWithContext(context.Background())
}

func (i *searchProfilePtrType) ToSearchProfilePtrOutputWithContext(ctx context.Context) SearchProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SearchProfilePtrOutput)
}

func (i *searchProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*SearchProfile] {
	return pulumix.Output[*SearchProfile]{
		OutputState: i.ToSearchProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Search profile
type SearchProfileOutput struct{ *pulumi.OutputState }

func (SearchProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchProfile)(nil)).Elem()
}

func (o SearchProfileOutput) ToSearchProfileOutput() SearchProfileOutput {
	return o
}

func (o SearchProfileOutput) ToSearchProfileOutputWithContext(ctx context.Context) SearchProfileOutput {
	return o
}

func (o SearchProfileOutput) ToSearchProfilePtrOutput() SearchProfilePtrOutput {
	return o.ToSearchProfilePtrOutputWithContext(context.Background())
}

func (o SearchProfileOutput) ToSearchProfilePtrOutputWithContext(ctx context.Context) SearchProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SearchProfile) *SearchProfile {
		return &v
	}).(SearchProfilePtrOutput)
}

func (o SearchProfileOutput) ToOutput(ctx context.Context) pulumix.Output[SearchProfile] {
	return pulumix.Output[SearchProfile]{
		OutputState: o.OutputState,
	}
}

// Data disks details. This property is not in use right now
func (o SearchProfileOutput) DataDisks() DiskInfoArrayOutput {
	return o.ApplyT(func(v SearchProfile) []DiskInfo { return v.DataDisks }).(DiskInfoArrayOutput)
}

// VM or VMSS name
func (o SearchProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM SKU for node(s)
func (o SearchProfileOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v SearchProfile) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o SearchProfileOutput) OsDisk() DiskInfoOutput {
	return o.ApplyT(func(v SearchProfile) DiskInfo { return v.OsDisk }).(DiskInfoOutput)
}

// OS image used for creating the nodes
func (o SearchProfileOutput) OsImage() OsImageProfileOutput {
	return o.ApplyT(func(v SearchProfile) OsImageProfile { return v.OsImage }).(OsImageProfileOutput)
}

// Search type
func (o SearchProfileOutput) SearchType() pulumi.StringOutput {
	return o.ApplyT(func(v SearchProfile) string { return v.SearchType }).(pulumi.StringOutput)
}

type SearchProfilePtrOutput struct{ *pulumi.OutputState }

func (SearchProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchProfile)(nil)).Elem()
}

func (o SearchProfilePtrOutput) ToSearchProfilePtrOutput() SearchProfilePtrOutput {
	return o
}

func (o SearchProfilePtrOutput) ToSearchProfilePtrOutputWithContext(ctx context.Context) SearchProfilePtrOutput {
	return o
}

func (o SearchProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SearchProfile] {
	return pulumix.Output[*SearchProfile]{
		OutputState: o.OutputState,
	}
}

func (o SearchProfilePtrOutput) Elem() SearchProfileOutput {
	return o.ApplyT(func(v *SearchProfile) SearchProfile {
		if v != nil {
			return *v
		}
		var ret SearchProfile
		return ret
	}).(SearchProfileOutput)
}

// Data disks details. This property is not in use right now
func (o SearchProfilePtrOutput) DataDisks() DiskInfoArrayOutput {
	return o.ApplyT(func(v *SearchProfile) []DiskInfo {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DiskInfoArrayOutput)
}

// VM or VMSS name
func (o SearchProfilePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfile) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// VM SKU for node(s)
func (o SearchProfilePtrOutput) NodeSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfile) *string {
		if v == nil {
			return nil
		}
		return &v.NodeSku
	}).(pulumi.StringPtrOutput)
}

// OS disk details
func (o SearchProfilePtrOutput) OsDisk() DiskInfoPtrOutput {
	return o.ApplyT(func(v *SearchProfile) *DiskInfo {
		if v == nil {
			return nil
		}
		return &v.OsDisk
	}).(DiskInfoPtrOutput)
}

// OS image used for creating the nodes
func (o SearchProfilePtrOutput) OsImage() OsImageProfilePtrOutput {
	return o.ApplyT(func(v *SearchProfile) *OsImageProfile {
		if v == nil {
			return nil
		}
		return &v.OsImage
	}).(OsImageProfilePtrOutput)
}

// Search type
func (o SearchProfilePtrOutput) SearchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfile) *string {
		if v == nil {
			return nil
		}
		return &v.SearchType
	}).(pulumi.StringPtrOutput)
}

// Search profile
type SearchProfileResponse struct {
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfoResponse `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM/VMSS resource ARM Ids
	NodeResourceIds []string `pulumi:"nodeResourceIds"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoResponse `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileResponse `pulumi:"osImage"`
	// Search type
	SearchType string `pulumi:"searchType"`
}

// Search profile
type SearchProfileResponseOutput struct{ *pulumi.OutputState }

func (SearchProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchProfileResponse)(nil)).Elem()
}

func (o SearchProfileResponseOutput) ToSearchProfileResponseOutput() SearchProfileResponseOutput {
	return o
}

func (o SearchProfileResponseOutput) ToSearchProfileResponseOutputWithContext(ctx context.Context) SearchProfileResponseOutput {
	return o
}

func (o SearchProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SearchProfileResponse] {
	return pulumix.Output[SearchProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Data disks details. This property is not in use right now
func (o SearchProfileResponseOutput) DataDisks() DiskInfoResponseArrayOutput {
	return o.ApplyT(func(v SearchProfileResponse) []DiskInfoResponse { return v.DataDisks }).(DiskInfoResponseArrayOutput)
}

// VM or VMSS name
func (o SearchProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SearchProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM/VMSS resource ARM Ids
func (o SearchProfileResponseOutput) NodeResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SearchProfileResponse) []string { return v.NodeResourceIds }).(pulumi.StringArrayOutput)
}

// VM SKU for node(s)
func (o SearchProfileResponseOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v SearchProfileResponse) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o SearchProfileResponseOutput) OsDisk() DiskInfoResponseOutput {
	return o.ApplyT(func(v SearchProfileResponse) DiskInfoResponse { return v.OsDisk }).(DiskInfoResponseOutput)
}

// OS image used for creating the nodes
func (o SearchProfileResponseOutput) OsImage() OsImageProfileResponseOutput {
	return o.ApplyT(func(v SearchProfileResponse) OsImageProfileResponse { return v.OsImage }).(OsImageProfileResponseOutput)
}

// Search type
func (o SearchProfileResponseOutput) SearchType() pulumi.StringOutput {
	return o.ApplyT(func(v SearchProfileResponse) string { return v.SearchType }).(pulumi.StringOutput)
}

type SearchProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SearchProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SearchProfileResponse)(nil)).Elem()
}

func (o SearchProfileResponsePtrOutput) ToSearchProfileResponsePtrOutput() SearchProfileResponsePtrOutput {
	return o
}

func (o SearchProfileResponsePtrOutput) ToSearchProfileResponsePtrOutputWithContext(ctx context.Context) SearchProfileResponsePtrOutput {
	return o
}

func (o SearchProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SearchProfileResponse] {
	return pulumix.Output[*SearchProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o SearchProfileResponsePtrOutput) Elem() SearchProfileResponseOutput {
	return o.ApplyT(func(v *SearchProfileResponse) SearchProfileResponse {
		if v != nil {
			return *v
		}
		var ret SearchProfileResponse
		return ret
	}).(SearchProfileResponseOutput)
}

// Data disks details. This property is not in use right now
func (o SearchProfileResponsePtrOutput) DataDisks() DiskInfoResponseArrayOutput {
	return o.ApplyT(func(v *SearchProfileResponse) []DiskInfoResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(DiskInfoResponseArrayOutput)
}

// VM or VMSS name
func (o SearchProfileResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// VM/VMSS resource ARM Ids
func (o SearchProfileResponsePtrOutput) NodeResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SearchProfileResponse) []string {
		if v == nil {
			return nil
		}
		return v.NodeResourceIds
	}).(pulumi.StringArrayOutput)
}

// VM SKU for node(s)
func (o SearchProfileResponsePtrOutput) NodeSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodeSku
	}).(pulumi.StringPtrOutput)
}

// OS disk details
func (o SearchProfileResponsePtrOutput) OsDisk() DiskInfoResponsePtrOutput {
	return o.ApplyT(func(v *SearchProfileResponse) *DiskInfoResponse {
		if v == nil {
			return nil
		}
		return &v.OsDisk
	}).(DiskInfoResponsePtrOutput)
}

// OS image used for creating the nodes
func (o SearchProfileResponsePtrOutput) OsImage() OsImageProfileResponsePtrOutput {
	return o.ApplyT(func(v *SearchProfileResponse) *OsImageProfileResponse {
		if v == nil {
			return nil
		}
		return &v.OsImage
	}).(OsImageProfileResponsePtrOutput)
}

// Search type
func (o SearchProfileResponsePtrOutput) SearchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SearchProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SearchType
	}).(pulumi.StringPtrOutput)
}

// Workload website profile
type SiteProfile struct {
	// Domain name for the application site URL
	DomainName *string `pulumi:"domainName"`
}

// SiteProfileInput is an input type that accepts SiteProfileArgs and SiteProfileOutput values.
// You can construct a concrete instance of `SiteProfileInput` via:
//
//	SiteProfileArgs{...}
type SiteProfileInput interface {
	pulumi.Input

	ToSiteProfileOutput() SiteProfileOutput
	ToSiteProfileOutputWithContext(context.Context) SiteProfileOutput
}

// Workload website profile
type SiteProfileArgs struct {
	// Domain name for the application site URL
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
}

func (SiteProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteProfile)(nil)).Elem()
}

func (i SiteProfileArgs) ToSiteProfileOutput() SiteProfileOutput {
	return i.ToSiteProfileOutputWithContext(context.Background())
}

func (i SiteProfileArgs) ToSiteProfileOutputWithContext(ctx context.Context) SiteProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteProfileOutput)
}

func (i SiteProfileArgs) ToOutput(ctx context.Context) pulumix.Output[SiteProfile] {
	return pulumix.Output[SiteProfile]{
		OutputState: i.ToSiteProfileOutputWithContext(ctx).OutputState,
	}
}

func (i SiteProfileArgs) ToSiteProfilePtrOutput() SiteProfilePtrOutput {
	return i.ToSiteProfilePtrOutputWithContext(context.Background())
}

func (i SiteProfileArgs) ToSiteProfilePtrOutputWithContext(ctx context.Context) SiteProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteProfileOutput).ToSiteProfilePtrOutputWithContext(ctx)
}

// SiteProfilePtrInput is an input type that accepts SiteProfileArgs, SiteProfilePtr and SiteProfilePtrOutput values.
// You can construct a concrete instance of `SiteProfilePtrInput` via:
//
//	        SiteProfileArgs{...}
//
//	or:
//
//	        nil
type SiteProfilePtrInput interface {
	pulumi.Input

	ToSiteProfilePtrOutput() SiteProfilePtrOutput
	ToSiteProfilePtrOutputWithContext(context.Context) SiteProfilePtrOutput
}

type siteProfilePtrType SiteProfileArgs

func SiteProfilePtr(v *SiteProfileArgs) SiteProfilePtrInput {
	return (*siteProfilePtrType)(v)
}

func (*siteProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteProfile)(nil)).Elem()
}

func (i *siteProfilePtrType) ToSiteProfilePtrOutput() SiteProfilePtrOutput {
	return i.ToSiteProfilePtrOutputWithContext(context.Background())
}

func (i *siteProfilePtrType) ToSiteProfilePtrOutputWithContext(ctx context.Context) SiteProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteProfilePtrOutput)
}

func (i *siteProfilePtrType) ToOutput(ctx context.Context) pulumix.Output[*SiteProfile] {
	return pulumix.Output[*SiteProfile]{
		OutputState: i.ToSiteProfilePtrOutputWithContext(ctx).OutputState,
	}
}

// Workload website profile
type SiteProfileOutput struct{ *pulumi.OutputState }

func (SiteProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteProfile)(nil)).Elem()
}

func (o SiteProfileOutput) ToSiteProfileOutput() SiteProfileOutput {
	return o
}

func (o SiteProfileOutput) ToSiteProfileOutputWithContext(ctx context.Context) SiteProfileOutput {
	return o
}

func (o SiteProfileOutput) ToSiteProfilePtrOutput() SiteProfilePtrOutput {
	return o.ToSiteProfilePtrOutputWithContext(context.Background())
}

func (o SiteProfileOutput) ToSiteProfilePtrOutputWithContext(ctx context.Context) SiteProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SiteProfile) *SiteProfile {
		return &v
	}).(SiteProfilePtrOutput)
}

func (o SiteProfileOutput) ToOutput(ctx context.Context) pulumix.Output[SiteProfile] {
	return pulumix.Output[SiteProfile]{
		OutputState: o.OutputState,
	}
}

// Domain name for the application site URL
func (o SiteProfileOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteProfile) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

type SiteProfilePtrOutput struct{ *pulumi.OutputState }

func (SiteProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteProfile)(nil)).Elem()
}

func (o SiteProfilePtrOutput) ToSiteProfilePtrOutput() SiteProfilePtrOutput {
	return o
}

func (o SiteProfilePtrOutput) ToSiteProfilePtrOutputWithContext(ctx context.Context) SiteProfilePtrOutput {
	return o
}

func (o SiteProfilePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SiteProfile] {
	return pulumix.Output[*SiteProfile]{
		OutputState: o.OutputState,
	}
}

func (o SiteProfilePtrOutput) Elem() SiteProfileOutput {
	return o.ApplyT(func(v *SiteProfile) SiteProfile {
		if v != nil {
			return *v
		}
		var ret SiteProfile
		return ret
	}).(SiteProfileOutput)
}

// Domain name for the application site URL
func (o SiteProfilePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteProfile) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// Workload website profile
type SiteProfileResponse struct {
	// Domain name for the application site URL
	DomainName *string `pulumi:"domainName"`
}

// Workload website profile
type SiteProfileResponseOutput struct{ *pulumi.OutputState }

func (SiteProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteProfileResponse)(nil)).Elem()
}

func (o SiteProfileResponseOutput) ToSiteProfileResponseOutput() SiteProfileResponseOutput {
	return o
}

func (o SiteProfileResponseOutput) ToSiteProfileResponseOutputWithContext(ctx context.Context) SiteProfileResponseOutput {
	return o
}

func (o SiteProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SiteProfileResponse] {
	return pulumix.Output[SiteProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Domain name for the application site URL
func (o SiteProfileResponseOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteProfileResponse) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

type SiteProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (SiteProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SiteProfileResponse)(nil)).Elem()
}

func (o SiteProfileResponsePtrOutput) ToSiteProfileResponsePtrOutput() SiteProfileResponsePtrOutput {
	return o
}

func (o SiteProfileResponsePtrOutput) ToSiteProfileResponsePtrOutputWithContext(ctx context.Context) SiteProfileResponsePtrOutput {
	return o
}

func (o SiteProfileResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SiteProfileResponse] {
	return pulumix.Output[*SiteProfileResponse]{
		OutputState: o.OutputState,
	}
}

func (o SiteProfileResponsePtrOutput) Elem() SiteProfileResponseOutput {
	return o.ApplyT(func(v *SiteProfileResponse) SiteProfileResponse {
		if v != nil {
			return *v
		}
		var ret SiteProfileResponse
		return ret
	}).(SiteProfileResponseOutput)
}

// Domain name for the application site URL
func (o SiteProfileResponsePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SiteProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: i.ToSkuOutputWithContext(ctx).OutputState,
	}
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

func (i *skuPtrType) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: i.ToSkuPtrOutputWithContext(ctx).OutputState,
	}
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

func (o SkuOutput) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: o.OutputState,
	}
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Sku] {
	return pulumix.Output[*Sku]{
		OutputState: o.OutputState,
	}
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SkuResponse] {
	return pulumix.Output[SkuResponse]{
		OutputState: o.OutputState,
	}
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SkuResponse] {
	return pulumix.Output[*SkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponse struct {
	Id string `pulumi:"id"`
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponseOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutput() StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutputWithContext(ctx context.Context) StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StorageInformationResponse] {
	return pulumix.Output[StorageInformationResponse]{
		OutputState: o.OutputState,
	}
}

func (o StorageInformationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageInformationResponse) string { return v.Id }).(pulumi.StringOutput)
}

type StorageInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutput() StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutputWithContext(ctx context.Context) StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StorageInformationResponse] {
	return pulumix.Output[[]StorageInformationResponse]{
		OutputState: o.OutputState,
	}
}

func (o StorageInformationResponseArrayOutput) Index(i pulumi.IntInput) StorageInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageInformationResponse {
		return vs[0].([]StorageInformationResponse)[vs[1].(int)]
	}).(StorageInformationResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// User profile to configure on a compute resources such as VM, VMSS
type UserProfile struct {
	// SSH public key data
	SshPublicKey string `pulumi:"sshPublicKey"`
	// User name
	UserName string `pulumi:"userName"`
}

// UserProfileInput is an input type that accepts UserProfileArgs and UserProfileOutput values.
// You can construct a concrete instance of `UserProfileInput` via:
//
//	UserProfileArgs{...}
type UserProfileInput interface {
	pulumi.Input

	ToUserProfileOutput() UserProfileOutput
	ToUserProfileOutputWithContext(context.Context) UserProfileOutput
}

// User profile to configure on a compute resources such as VM, VMSS
type UserProfileArgs struct {
	// SSH public key data
	SshPublicKey pulumi.StringInput `pulumi:"sshPublicKey"`
	// User name
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (UserProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProfile)(nil)).Elem()
}

func (i UserProfileArgs) ToUserProfileOutput() UserProfileOutput {
	return i.ToUserProfileOutputWithContext(context.Background())
}

func (i UserProfileArgs) ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProfileOutput)
}

func (i UserProfileArgs) ToOutput(ctx context.Context) pulumix.Output[UserProfile] {
	return pulumix.Output[UserProfile]{
		OutputState: i.ToUserProfileOutputWithContext(ctx).OutputState,
	}
}

// User profile to configure on a compute resources such as VM, VMSS
type UserProfileOutput struct{ *pulumi.OutputState }

func (UserProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProfile)(nil)).Elem()
}

func (o UserProfileOutput) ToUserProfileOutput() UserProfileOutput {
	return o
}

func (o UserProfileOutput) ToUserProfileOutputWithContext(ctx context.Context) UserProfileOutput {
	return o
}

func (o UserProfileOutput) ToOutput(ctx context.Context) pulumix.Output[UserProfile] {
	return pulumix.Output[UserProfile]{
		OutputState: o.OutputState,
	}
}

// SSH public key data
func (o UserProfileOutput) SshPublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v UserProfile) string { return v.SshPublicKey }).(pulumi.StringOutput)
}

// User name
func (o UserProfileOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserProfile) string { return v.UserName }).(pulumi.StringOutput)
}

// User profile to configure on a compute resources such as VM, VMSS
type UserProfileResponse struct {
	// SSH public key data
	SshPublicKey string `pulumi:"sshPublicKey"`
	// User name
	UserName string `pulumi:"userName"`
}

// User profile to configure on a compute resources such as VM, VMSS
type UserProfileResponseOutput struct{ *pulumi.OutputState }

func (UserProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserProfileResponse)(nil)).Elem()
}

func (o UserProfileResponseOutput) ToUserProfileResponseOutput() UserProfileResponseOutput {
	return o
}

func (o UserProfileResponseOutput) ToUserProfileResponseOutputWithContext(ctx context.Context) UserProfileResponseOutput {
	return o
}

func (o UserProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserProfileResponse] {
	return pulumix.Output[UserProfileResponse]{
		OutputState: o.OutputState,
	}
}

// SSH public key data
func (o UserProfileResponseOutput) SshPublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v UserProfileResponse) string { return v.SshPublicKey }).(pulumi.StringOutput)
}

// User name
func (o UserProfileResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserProfileResponse) string { return v.UserName }).(pulumi.StringOutput)
}

// VMSS profile
type VmssNodesProfile struct {
	// Maximum number of nodes for autoscale
	AutoScaleMaxCount *int `pulumi:"autoScaleMaxCount"`
	// Minimum number of nodes for autoscale
	AutoScaleMinCount *int `pulumi:"autoScaleMinCount"`
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfo `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfo `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfile `pulumi:"osImage"`
}

// VmssNodesProfileInput is an input type that accepts VmssNodesProfileArgs and VmssNodesProfileOutput values.
// You can construct a concrete instance of `VmssNodesProfileInput` via:
//
//	VmssNodesProfileArgs{...}
type VmssNodesProfileInput interface {
	pulumi.Input

	ToVmssNodesProfileOutput() VmssNodesProfileOutput
	ToVmssNodesProfileOutputWithContext(context.Context) VmssNodesProfileOutput
}

// VMSS profile
type VmssNodesProfileArgs struct {
	// Maximum number of nodes for autoscale
	AutoScaleMaxCount pulumi.IntPtrInput `pulumi:"autoScaleMaxCount"`
	// Minimum number of nodes for autoscale
	AutoScaleMinCount pulumi.IntPtrInput `pulumi:"autoScaleMinCount"`
	// Data disks details. This property is not in use right now
	DataDisks DiskInfoArrayInput `pulumi:"dataDisks"`
	// VM or VMSS name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// VM SKU for node(s)
	NodeSku pulumi.StringInput `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoInput `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileInput `pulumi:"osImage"`
}

func (VmssNodesProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssNodesProfile)(nil)).Elem()
}

func (i VmssNodesProfileArgs) ToVmssNodesProfileOutput() VmssNodesProfileOutput {
	return i.ToVmssNodesProfileOutputWithContext(context.Background())
}

func (i VmssNodesProfileArgs) ToVmssNodesProfileOutputWithContext(ctx context.Context) VmssNodesProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmssNodesProfileOutput)
}

func (i VmssNodesProfileArgs) ToOutput(ctx context.Context) pulumix.Output[VmssNodesProfile] {
	return pulumix.Output[VmssNodesProfile]{
		OutputState: i.ToVmssNodesProfileOutputWithContext(ctx).OutputState,
	}
}

// VMSS profile
type VmssNodesProfileOutput struct{ *pulumi.OutputState }

func (VmssNodesProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssNodesProfile)(nil)).Elem()
}

func (o VmssNodesProfileOutput) ToVmssNodesProfileOutput() VmssNodesProfileOutput {
	return o
}

func (o VmssNodesProfileOutput) ToVmssNodesProfileOutputWithContext(ctx context.Context) VmssNodesProfileOutput {
	return o
}

func (o VmssNodesProfileOutput) ToOutput(ctx context.Context) pulumix.Output[VmssNodesProfile] {
	return pulumix.Output[VmssNodesProfile]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes for autoscale
func (o VmssNodesProfileOutput) AutoScaleMaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmssNodesProfile) *int { return v.AutoScaleMaxCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes for autoscale
func (o VmssNodesProfileOutput) AutoScaleMinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmssNodesProfile) *int { return v.AutoScaleMinCount }).(pulumi.IntPtrOutput)
}

// Data disks details. This property is not in use right now
func (o VmssNodesProfileOutput) DataDisks() DiskInfoArrayOutput {
	return o.ApplyT(func(v VmssNodesProfile) []DiskInfo { return v.DataDisks }).(DiskInfoArrayOutput)
}

// VM or VMSS name
func (o VmssNodesProfileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmssNodesProfile) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM SKU for node(s)
func (o VmssNodesProfileOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v VmssNodesProfile) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o VmssNodesProfileOutput) OsDisk() DiskInfoOutput {
	return o.ApplyT(func(v VmssNodesProfile) DiskInfo { return v.OsDisk }).(DiskInfoOutput)
}

// OS image used for creating the nodes
func (o VmssNodesProfileOutput) OsImage() OsImageProfileOutput {
	return o.ApplyT(func(v VmssNodesProfile) OsImageProfile { return v.OsImage }).(OsImageProfileOutput)
}

// VMSS profile
type VmssNodesProfileResponse struct {
	// Maximum number of nodes for autoscale
	AutoScaleMaxCount *int `pulumi:"autoScaleMaxCount"`
	// Minimum number of nodes for autoscale
	AutoScaleMinCount *int `pulumi:"autoScaleMinCount"`
	// Data disks details. This property is not in use right now
	DataDisks []DiskInfoResponse `pulumi:"dataDisks"`
	// VM or VMSS name
	Name *string `pulumi:"name"`
	// VM/VMSS resource ARM Ids
	NodeResourceIds []string `pulumi:"nodeResourceIds"`
	// VM SKU for node(s)
	NodeSku string `pulumi:"nodeSku"`
	// OS disk details
	OsDisk DiskInfoResponse `pulumi:"osDisk"`
	// OS image used for creating the nodes
	OsImage OsImageProfileResponse `pulumi:"osImage"`
}

// VMSS profile
type VmssNodesProfileResponseOutput struct{ *pulumi.OutputState }

func (VmssNodesProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VmssNodesProfileResponse)(nil)).Elem()
}

func (o VmssNodesProfileResponseOutput) ToVmssNodesProfileResponseOutput() VmssNodesProfileResponseOutput {
	return o
}

func (o VmssNodesProfileResponseOutput) ToVmssNodesProfileResponseOutputWithContext(ctx context.Context) VmssNodesProfileResponseOutput {
	return o
}

func (o VmssNodesProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VmssNodesProfileResponse] {
	return pulumix.Output[VmssNodesProfileResponse]{
		OutputState: o.OutputState,
	}
}

// Maximum number of nodes for autoscale
func (o VmssNodesProfileResponseOutput) AutoScaleMaxCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) *int { return v.AutoScaleMaxCount }).(pulumi.IntPtrOutput)
}

// Minimum number of nodes for autoscale
func (o VmssNodesProfileResponseOutput) AutoScaleMinCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) *int { return v.AutoScaleMinCount }).(pulumi.IntPtrOutput)
}

// Data disks details. This property is not in use right now
func (o VmssNodesProfileResponseOutput) DataDisks() DiskInfoResponseArrayOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) []DiskInfoResponse { return v.DataDisks }).(DiskInfoResponseArrayOutput)
}

// VM or VMSS name
func (o VmssNodesProfileResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM/VMSS resource ARM Ids
func (o VmssNodesProfileResponseOutput) NodeResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) []string { return v.NodeResourceIds }).(pulumi.StringArrayOutput)
}

// VM SKU for node(s)
func (o VmssNodesProfileResponseOutput) NodeSku() pulumi.StringOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) string { return v.NodeSku }).(pulumi.StringOutput)
}

// OS disk details
func (o VmssNodesProfileResponseOutput) OsDisk() DiskInfoResponseOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) DiskInfoResponse { return v.OsDisk }).(DiskInfoResponseOutput)
}

// OS image used for creating the nodes
func (o VmssNodesProfileResponseOutput) OsImage() OsImageProfileResponseOutput {
	return o.ApplyT(func(v VmssNodesProfileResponse) OsImageProfileResponse { return v.OsImage }).(OsImageProfileResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupProfileOutput{})
	pulumi.RegisterOutputType(BackupProfilePtrOutput{})
	pulumi.RegisterOutputType(BackupProfileResponseOutput{})
	pulumi.RegisterOutputType(BackupProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheProfileOutput{})
	pulumi.RegisterOutputType(CacheProfilePtrOutput{})
	pulumi.RegisterOutputType(CacheProfileResponseOutput{})
	pulumi.RegisterOutputType(CacheProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseProfileOutput{})
	pulumi.RegisterOutputType(DatabaseProfileResponseOutput{})
	pulumi.RegisterOutputType(DiskInfoOutput{})
	pulumi.RegisterOutputType(DiskInfoPtrOutput{})
	pulumi.RegisterOutputType(DiskInfoArrayOutput{})
	pulumi.RegisterOutputType(DiskInfoResponseOutput{})
	pulumi.RegisterOutputType(DiskInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(FileshareProfileOutput{})
	pulumi.RegisterOutputType(FileshareProfilePtrOutput{})
	pulumi.RegisterOutputType(FileshareProfileResponseOutput{})
	pulumi.RegisterOutputType(FileshareProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileOutput{})
	pulumi.RegisterOutputType(NetworkProfilePtrOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponseOutput{})
	pulumi.RegisterOutputType(NetworkProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeProfileOutput{})
	pulumi.RegisterOutputType(NodeProfileResponseOutput{})
	pulumi.RegisterOutputType(OsImageProfileOutput{})
	pulumi.RegisterOutputType(OsImageProfilePtrOutput{})
	pulumi.RegisterOutputType(OsImageProfileResponseOutput{})
	pulumi.RegisterOutputType(OsImageProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PhpProfileOutput{})
	pulumi.RegisterOutputType(PhpProfilePtrOutput{})
	pulumi.RegisterOutputType(PhpProfileResponseOutput{})
	pulumi.RegisterOutputType(PhpProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(PhpWorkloadResourceIdentityOutput{})
	pulumi.RegisterOutputType(PhpWorkloadResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(PhpWorkloadResourceResponseIdentityOutput{})
	pulumi.RegisterOutputType(PhpWorkloadResourceResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPVirtualInstanceErrorResponseOutput{})
	pulumi.RegisterOutputType(SearchProfileOutput{})
	pulumi.RegisterOutputType(SearchProfilePtrOutput{})
	pulumi.RegisterOutputType(SearchProfileResponseOutput{})
	pulumi.RegisterOutputType(SearchProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SiteProfileOutput{})
	pulumi.RegisterOutputType(SiteProfilePtrOutput{})
	pulumi.RegisterOutputType(SiteProfileResponseOutput{})
	pulumi.RegisterOutputType(SiteProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserProfileOutput{})
	pulumi.RegisterOutputType(UserProfileResponseOutput{})
	pulumi.RegisterOutputType(VmssNodesProfileOutput{})
	pulumi.RegisterOutputType(VmssNodesProfileResponseOutput{})
}
