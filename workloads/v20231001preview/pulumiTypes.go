// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Gets or sets the application server configuration.
type ApplicationServerConfiguration struct {
	// The number of app server instances.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// ApplicationServerConfigurationInput is an input type that accepts ApplicationServerConfigurationArgs and ApplicationServerConfigurationOutput values.
// You can construct a concrete instance of `ApplicationServerConfigurationInput` via:
//
//	ApplicationServerConfigurationArgs{...}
type ApplicationServerConfigurationInput interface {
	pulumi.Input

	ToApplicationServerConfigurationOutput() ApplicationServerConfigurationOutput
	ToApplicationServerConfigurationOutputWithContext(context.Context) ApplicationServerConfigurationOutput
}

// Gets or sets the application server configuration.
type ApplicationServerConfigurationArgs struct {
	// The number of app server instances.
	InstanceCount pulumi.Float64Input `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationInput `pulumi:"virtualMachineConfiguration"`
}

func (ApplicationServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerConfiguration)(nil)).Elem()
}

func (i ApplicationServerConfigurationArgs) ToApplicationServerConfigurationOutput() ApplicationServerConfigurationOutput {
	return i.ToApplicationServerConfigurationOutputWithContext(context.Background())
}

func (i ApplicationServerConfigurationArgs) ToApplicationServerConfigurationOutputWithContext(ctx context.Context) ApplicationServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerConfigurationOutput)
}

func (i ApplicationServerConfigurationArgs) ToApplicationServerConfigurationPtrOutput() ApplicationServerConfigurationPtrOutput {
	return i.ToApplicationServerConfigurationPtrOutputWithContext(context.Background())
}

func (i ApplicationServerConfigurationArgs) ToApplicationServerConfigurationPtrOutputWithContext(ctx context.Context) ApplicationServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerConfigurationOutput).ToApplicationServerConfigurationPtrOutputWithContext(ctx)
}

// ApplicationServerConfigurationPtrInput is an input type that accepts ApplicationServerConfigurationArgs, ApplicationServerConfigurationPtr and ApplicationServerConfigurationPtrOutput values.
// You can construct a concrete instance of `ApplicationServerConfigurationPtrInput` via:
//
//	        ApplicationServerConfigurationArgs{...}
//
//	or:
//
//	        nil
type ApplicationServerConfigurationPtrInput interface {
	pulumi.Input

	ToApplicationServerConfigurationPtrOutput() ApplicationServerConfigurationPtrOutput
	ToApplicationServerConfigurationPtrOutputWithContext(context.Context) ApplicationServerConfigurationPtrOutput
}

type applicationServerConfigurationPtrType ApplicationServerConfigurationArgs

func ApplicationServerConfigurationPtr(v *ApplicationServerConfigurationArgs) ApplicationServerConfigurationPtrInput {
	return (*applicationServerConfigurationPtrType)(v)
}

func (*applicationServerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerConfiguration)(nil)).Elem()
}

func (i *applicationServerConfigurationPtrType) ToApplicationServerConfigurationPtrOutput() ApplicationServerConfigurationPtrOutput {
	return i.ToApplicationServerConfigurationPtrOutputWithContext(context.Background())
}

func (i *applicationServerConfigurationPtrType) ToApplicationServerConfigurationPtrOutputWithContext(ctx context.Context) ApplicationServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerConfigurationPtrOutput)
}

// Gets or sets the application server configuration.
type ApplicationServerConfigurationOutput struct{ *pulumi.OutputState }

func (ApplicationServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerConfiguration)(nil)).Elem()
}

func (o ApplicationServerConfigurationOutput) ToApplicationServerConfigurationOutput() ApplicationServerConfigurationOutput {
	return o
}

func (o ApplicationServerConfigurationOutput) ToApplicationServerConfigurationOutputWithContext(ctx context.Context) ApplicationServerConfigurationOutput {
	return o
}

func (o ApplicationServerConfigurationOutput) ToApplicationServerConfigurationPtrOutput() ApplicationServerConfigurationPtrOutput {
	return o.ToApplicationServerConfigurationPtrOutputWithContext(context.Background())
}

func (o ApplicationServerConfigurationOutput) ToApplicationServerConfigurationPtrOutputWithContext(ctx context.Context) ApplicationServerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationServerConfiguration) *ApplicationServerConfiguration {
		return &v
	}).(ApplicationServerConfigurationPtrOutput)
}

// The number of app server instances.
func (o ApplicationServerConfigurationOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v ApplicationServerConfiguration) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o ApplicationServerConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o ApplicationServerConfigurationOutput) VirtualMachineConfiguration() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v ApplicationServerConfiguration) VirtualMachineConfiguration {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationOutput)
}

type ApplicationServerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ApplicationServerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerConfiguration)(nil)).Elem()
}

func (o ApplicationServerConfigurationPtrOutput) ToApplicationServerConfigurationPtrOutput() ApplicationServerConfigurationPtrOutput {
	return o
}

func (o ApplicationServerConfigurationPtrOutput) ToApplicationServerConfigurationPtrOutputWithContext(ctx context.Context) ApplicationServerConfigurationPtrOutput {
	return o
}

func (o ApplicationServerConfigurationPtrOutput) Elem() ApplicationServerConfigurationOutput {
	return o.ApplyT(func(v *ApplicationServerConfiguration) ApplicationServerConfiguration {
		if v != nil {
			return *v
		}
		var ret ApplicationServerConfiguration
		return ret
	}).(ApplicationServerConfigurationOutput)
}

// The number of app server instances.
func (o ApplicationServerConfigurationPtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o ApplicationServerConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o ApplicationServerConfigurationPtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfiguration) *VirtualMachineConfiguration {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationPtrOutput)
}

// Gets or sets the application server configuration.
type ApplicationServerConfigurationResponse struct {
	// The number of app server instances.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the application server configuration.
type ApplicationServerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ApplicationServerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerConfigurationResponse)(nil)).Elem()
}

func (o ApplicationServerConfigurationResponseOutput) ToApplicationServerConfigurationResponseOutput() ApplicationServerConfigurationResponseOutput {
	return o
}

func (o ApplicationServerConfigurationResponseOutput) ToApplicationServerConfigurationResponseOutputWithContext(ctx context.Context) ApplicationServerConfigurationResponseOutput {
	return o
}

// The number of app server instances.
func (o ApplicationServerConfigurationResponseOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v ApplicationServerConfigurationResponse) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o ApplicationServerConfigurationResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerConfigurationResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o ApplicationServerConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v ApplicationServerConfigurationResponse) VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponseOutput)
}

type ApplicationServerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationServerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerConfigurationResponse)(nil)).Elem()
}

func (o ApplicationServerConfigurationResponsePtrOutput) ToApplicationServerConfigurationResponsePtrOutput() ApplicationServerConfigurationResponsePtrOutput {
	return o
}

func (o ApplicationServerConfigurationResponsePtrOutput) ToApplicationServerConfigurationResponsePtrOutputWithContext(ctx context.Context) ApplicationServerConfigurationResponsePtrOutput {
	return o
}

func (o ApplicationServerConfigurationResponsePtrOutput) Elem() ApplicationServerConfigurationResponseOutput {
	return o.ApplyT(func(v *ApplicationServerConfigurationResponse) ApplicationServerConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ApplicationServerConfigurationResponse
		return ret
	}).(ApplicationServerConfigurationResponseOutput)
}

// The number of app server instances.
func (o ApplicationServerConfigurationResponsePtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o ApplicationServerConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o ApplicationServerConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ApplicationServerConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// ApplicationServerFullResourceNamesInput is an input type that accepts ApplicationServerFullResourceNamesArgs and ApplicationServerFullResourceNamesOutput values.
// You can construct a concrete instance of `ApplicationServerFullResourceNamesInput` via:
//
//	ApplicationServerFullResourceNamesArgs{...}
type ApplicationServerFullResourceNamesInput interface {
	pulumi.Input

	ToApplicationServerFullResourceNamesOutput() ApplicationServerFullResourceNamesOutput
	ToApplicationServerFullResourceNamesOutputWithContext(context.Context) ApplicationServerFullResourceNamesOutput
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNamesArgs struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
	AvailabilitySetName pulumi.StringPtrInput `pulumi:"availabilitySetName"`
	// The list of virtual machine naming details.
	VirtualMachines VirtualMachineResourceNamesArrayInput `pulumi:"virtualMachines"`
}

func (ApplicationServerFullResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerFullResourceNames)(nil)).Elem()
}

func (i ApplicationServerFullResourceNamesArgs) ToApplicationServerFullResourceNamesOutput() ApplicationServerFullResourceNamesOutput {
	return i.ToApplicationServerFullResourceNamesOutputWithContext(context.Background())
}

func (i ApplicationServerFullResourceNamesArgs) ToApplicationServerFullResourceNamesOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerFullResourceNamesOutput)
}

func (i ApplicationServerFullResourceNamesArgs) ToApplicationServerFullResourceNamesPtrOutput() ApplicationServerFullResourceNamesPtrOutput {
	return i.ToApplicationServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i ApplicationServerFullResourceNamesArgs) ToApplicationServerFullResourceNamesPtrOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerFullResourceNamesOutput).ToApplicationServerFullResourceNamesPtrOutputWithContext(ctx)
}

// ApplicationServerFullResourceNamesPtrInput is an input type that accepts ApplicationServerFullResourceNamesArgs, ApplicationServerFullResourceNamesPtr and ApplicationServerFullResourceNamesPtrOutput values.
// You can construct a concrete instance of `ApplicationServerFullResourceNamesPtrInput` via:
//
//	        ApplicationServerFullResourceNamesArgs{...}
//
//	or:
//
//	        nil
type ApplicationServerFullResourceNamesPtrInput interface {
	pulumi.Input

	ToApplicationServerFullResourceNamesPtrOutput() ApplicationServerFullResourceNamesPtrOutput
	ToApplicationServerFullResourceNamesPtrOutputWithContext(context.Context) ApplicationServerFullResourceNamesPtrOutput
}

type applicationServerFullResourceNamesPtrType ApplicationServerFullResourceNamesArgs

func ApplicationServerFullResourceNamesPtr(v *ApplicationServerFullResourceNamesArgs) ApplicationServerFullResourceNamesPtrInput {
	return (*applicationServerFullResourceNamesPtrType)(v)
}

func (*applicationServerFullResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerFullResourceNames)(nil)).Elem()
}

func (i *applicationServerFullResourceNamesPtrType) ToApplicationServerFullResourceNamesPtrOutput() ApplicationServerFullResourceNamesPtrOutput {
	return i.ToApplicationServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i *applicationServerFullResourceNamesPtrType) ToApplicationServerFullResourceNamesPtrOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationServerFullResourceNamesPtrOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNamesOutput struct{ *pulumi.OutputState }

func (ApplicationServerFullResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerFullResourceNames)(nil)).Elem()
}

func (o ApplicationServerFullResourceNamesOutput) ToApplicationServerFullResourceNamesOutput() ApplicationServerFullResourceNamesOutput {
	return o
}

func (o ApplicationServerFullResourceNamesOutput) ToApplicationServerFullResourceNamesOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesOutput {
	return o
}

func (o ApplicationServerFullResourceNamesOutput) ToApplicationServerFullResourceNamesPtrOutput() ApplicationServerFullResourceNamesPtrOutput {
	return o.ToApplicationServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (o ApplicationServerFullResourceNamesOutput) ToApplicationServerFullResourceNamesPtrOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationServerFullResourceNames) *ApplicationServerFullResourceNames {
		return &v
	}).(ApplicationServerFullResourceNamesPtrOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
func (o ApplicationServerFullResourceNamesOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationServerFullResourceNames) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The list of virtual machine naming details.
func (o ApplicationServerFullResourceNamesOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v ApplicationServerFullResourceNames) []VirtualMachineResourceNames { return v.VirtualMachines }).(VirtualMachineResourceNamesArrayOutput)
}

type ApplicationServerFullResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationServerFullResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerFullResourceNames)(nil)).Elem()
}

func (o ApplicationServerFullResourceNamesPtrOutput) ToApplicationServerFullResourceNamesPtrOutput() ApplicationServerFullResourceNamesPtrOutput {
	return o
}

func (o ApplicationServerFullResourceNamesPtrOutput) ToApplicationServerFullResourceNamesPtrOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesPtrOutput {
	return o
}

func (o ApplicationServerFullResourceNamesPtrOutput) Elem() ApplicationServerFullResourceNamesOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNames) ApplicationServerFullResourceNames {
		if v != nil {
			return *v
		}
		var ret ApplicationServerFullResourceNames
		return ret
	}).(ApplicationServerFullResourceNamesOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
func (o ApplicationServerFullResourceNamesPtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The list of virtual machine naming details.
func (o ApplicationServerFullResourceNamesPtrOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNames) []VirtualMachineResourceNames {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesArrayOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationServerFullResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerFullResourceNamesResponse)(nil)).Elem()
}

func (o ApplicationServerFullResourceNamesResponseOutput) ToApplicationServerFullResourceNamesResponseOutput() ApplicationServerFullResourceNamesResponseOutput {
	return o
}

func (o ApplicationServerFullResourceNamesResponseOutput) ToApplicationServerFullResourceNamesResponseOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesResponseOutput {
	return o
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
func (o ApplicationServerFullResourceNamesResponseOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationServerFullResourceNamesResponse) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The list of virtual machine naming details.
func (o ApplicationServerFullResourceNamesResponseOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v ApplicationServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

type ApplicationServerFullResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (ApplicationServerFullResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationServerFullResourceNamesResponse)(nil)).Elem()
}

func (o ApplicationServerFullResourceNamesResponsePtrOutput) ToApplicationServerFullResourceNamesResponsePtrOutput() ApplicationServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o ApplicationServerFullResourceNamesResponsePtrOutput) ToApplicationServerFullResourceNamesResponsePtrOutputWithContext(ctx context.Context) ApplicationServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o ApplicationServerFullResourceNamesResponsePtrOutput) Elem() ApplicationServerFullResourceNamesResponseOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNamesResponse) ApplicationServerFullResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret ApplicationServerFullResourceNamesResponse
		return ret
	}).(ApplicationServerFullResourceNamesResponseOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
func (o ApplicationServerFullResourceNamesResponsePtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The list of virtual machine naming details.
func (o ApplicationServerFullResourceNamesResponsePtrOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v *ApplicationServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

// The Application Server VM Details.
type ApplicationServerVmDetailsResponse struct {
	// Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails []StorageInformationResponse `pulumi:"storageDetails"`
	// Defines the type of application server VM.
	Type             string `pulumi:"type"`
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The Application Server VM Details.
type ApplicationServerVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (ApplicationServerVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerVmDetailsResponse)(nil)).Elem()
}

func (o ApplicationServerVmDetailsResponseOutput) ToApplicationServerVmDetailsResponseOutput() ApplicationServerVmDetailsResponseOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseOutput) ToApplicationServerVmDetailsResponseOutputWithContext(ctx context.Context) ApplicationServerVmDetailsResponseOutput {
	return o
}

// Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o ApplicationServerVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

// Defines the type of application server VM.
func (o ApplicationServerVmDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o ApplicationServerVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type ApplicationServerVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationServerVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationServerVmDetailsResponse)(nil)).Elem()
}

func (o ApplicationServerVmDetailsResponseArrayOutput) ToApplicationServerVmDetailsResponseArrayOutput() ApplicationServerVmDetailsResponseArrayOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseArrayOutput) ToApplicationServerVmDetailsResponseArrayOutputWithContext(ctx context.Context) ApplicationServerVmDetailsResponseArrayOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) ApplicationServerVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationServerVmDetailsResponse {
		return vs[0].([]ApplicationServerVmDetailsResponse)[vs[1].(int)]
	}).(ApplicationServerVmDetailsResponseOutput)
}

// Gets or sets the central server configuration.
type CentralServerConfiguration struct {
	// The number of central server VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// CentralServerConfigurationInput is an input type that accepts CentralServerConfigurationArgs and CentralServerConfigurationOutput values.
// You can construct a concrete instance of `CentralServerConfigurationInput` via:
//
//	CentralServerConfigurationArgs{...}
type CentralServerConfigurationInput interface {
	pulumi.Input

	ToCentralServerConfigurationOutput() CentralServerConfigurationOutput
	ToCentralServerConfigurationOutputWithContext(context.Context) CentralServerConfigurationOutput
}

// Gets or sets the central server configuration.
type CentralServerConfigurationArgs struct {
	// The number of central server VMs.
	InstanceCount pulumi.Float64Input `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationInput `pulumi:"virtualMachineConfiguration"`
}

func (CentralServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerConfiguration)(nil)).Elem()
}

func (i CentralServerConfigurationArgs) ToCentralServerConfigurationOutput() CentralServerConfigurationOutput {
	return i.ToCentralServerConfigurationOutputWithContext(context.Background())
}

func (i CentralServerConfigurationArgs) ToCentralServerConfigurationOutputWithContext(ctx context.Context) CentralServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerConfigurationOutput)
}

func (i CentralServerConfigurationArgs) ToCentralServerConfigurationPtrOutput() CentralServerConfigurationPtrOutput {
	return i.ToCentralServerConfigurationPtrOutputWithContext(context.Background())
}

func (i CentralServerConfigurationArgs) ToCentralServerConfigurationPtrOutputWithContext(ctx context.Context) CentralServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerConfigurationOutput).ToCentralServerConfigurationPtrOutputWithContext(ctx)
}

// CentralServerConfigurationPtrInput is an input type that accepts CentralServerConfigurationArgs, CentralServerConfigurationPtr and CentralServerConfigurationPtrOutput values.
// You can construct a concrete instance of `CentralServerConfigurationPtrInput` via:
//
//	        CentralServerConfigurationArgs{...}
//
//	or:
//
//	        nil
type CentralServerConfigurationPtrInput interface {
	pulumi.Input

	ToCentralServerConfigurationPtrOutput() CentralServerConfigurationPtrOutput
	ToCentralServerConfigurationPtrOutputWithContext(context.Context) CentralServerConfigurationPtrOutput
}

type centralServerConfigurationPtrType CentralServerConfigurationArgs

func CentralServerConfigurationPtr(v *CentralServerConfigurationArgs) CentralServerConfigurationPtrInput {
	return (*centralServerConfigurationPtrType)(v)
}

func (*centralServerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerConfiguration)(nil)).Elem()
}

func (i *centralServerConfigurationPtrType) ToCentralServerConfigurationPtrOutput() CentralServerConfigurationPtrOutput {
	return i.ToCentralServerConfigurationPtrOutputWithContext(context.Background())
}

func (i *centralServerConfigurationPtrType) ToCentralServerConfigurationPtrOutputWithContext(ctx context.Context) CentralServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerConfigurationPtrOutput)
}

// Gets or sets the central server configuration.
type CentralServerConfigurationOutput struct{ *pulumi.OutputState }

func (CentralServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerConfiguration)(nil)).Elem()
}

func (o CentralServerConfigurationOutput) ToCentralServerConfigurationOutput() CentralServerConfigurationOutput {
	return o
}

func (o CentralServerConfigurationOutput) ToCentralServerConfigurationOutputWithContext(ctx context.Context) CentralServerConfigurationOutput {
	return o
}

func (o CentralServerConfigurationOutput) ToCentralServerConfigurationPtrOutput() CentralServerConfigurationPtrOutput {
	return o.ToCentralServerConfigurationPtrOutputWithContext(context.Background())
}

func (o CentralServerConfigurationOutput) ToCentralServerConfigurationPtrOutputWithContext(ctx context.Context) CentralServerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CentralServerConfiguration) *CentralServerConfiguration {
		return &v
	}).(CentralServerConfigurationPtrOutput)
}

// The number of central server VMs.
func (o CentralServerConfigurationOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v CentralServerConfiguration) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o CentralServerConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o CentralServerConfigurationOutput) VirtualMachineConfiguration() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v CentralServerConfiguration) VirtualMachineConfiguration { return v.VirtualMachineConfiguration }).(VirtualMachineConfigurationOutput)
}

type CentralServerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CentralServerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerConfiguration)(nil)).Elem()
}

func (o CentralServerConfigurationPtrOutput) ToCentralServerConfigurationPtrOutput() CentralServerConfigurationPtrOutput {
	return o
}

func (o CentralServerConfigurationPtrOutput) ToCentralServerConfigurationPtrOutputWithContext(ctx context.Context) CentralServerConfigurationPtrOutput {
	return o
}

func (o CentralServerConfigurationPtrOutput) Elem() CentralServerConfigurationOutput {
	return o.ApplyT(func(v *CentralServerConfiguration) CentralServerConfiguration {
		if v != nil {
			return *v
		}
		var ret CentralServerConfiguration
		return ret
	}).(CentralServerConfigurationOutput)
}

// The number of central server VMs.
func (o CentralServerConfigurationPtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CentralServerConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o CentralServerConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o CentralServerConfigurationPtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v *CentralServerConfiguration) *VirtualMachineConfiguration {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationPtrOutput)
}

// Gets or sets the central server configuration.
type CentralServerConfigurationResponse struct {
	// The number of central server VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the central server configuration.
type CentralServerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CentralServerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerConfigurationResponse)(nil)).Elem()
}

func (o CentralServerConfigurationResponseOutput) ToCentralServerConfigurationResponseOutput() CentralServerConfigurationResponseOutput {
	return o
}

func (o CentralServerConfigurationResponseOutput) ToCentralServerConfigurationResponseOutputWithContext(ctx context.Context) CentralServerConfigurationResponseOutput {
	return o
}

// The number of central server VMs.
func (o CentralServerConfigurationResponseOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v CentralServerConfigurationResponse) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o CentralServerConfigurationResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerConfigurationResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o CentralServerConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v CentralServerConfigurationResponse) VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponseOutput)
}

type CentralServerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CentralServerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerConfigurationResponse)(nil)).Elem()
}

func (o CentralServerConfigurationResponsePtrOutput) ToCentralServerConfigurationResponsePtrOutput() CentralServerConfigurationResponsePtrOutput {
	return o
}

func (o CentralServerConfigurationResponsePtrOutput) ToCentralServerConfigurationResponsePtrOutputWithContext(ctx context.Context) CentralServerConfigurationResponsePtrOutput {
	return o
}

func (o CentralServerConfigurationResponsePtrOutput) Elem() CentralServerConfigurationResponseOutput {
	return o.ApplyT(func(v *CentralServerConfigurationResponse) CentralServerConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CentralServerConfigurationResponse
		return ret
	}).(CentralServerConfigurationResponseOutput)
}

// The number of central server VMs.
func (o CentralServerConfigurationResponsePtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *CentralServerConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o CentralServerConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o CentralServerConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *CentralServerConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNames `pulumi:"loadBalancer"`
	// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// CentralServerFullResourceNamesInput is an input type that accepts CentralServerFullResourceNamesArgs and CentralServerFullResourceNamesOutput values.
// You can construct a concrete instance of `CentralServerFullResourceNamesInput` via:
//
//	CentralServerFullResourceNamesArgs{...}
type CentralServerFullResourceNamesInput interface {
	pulumi.Input

	ToCentralServerFullResourceNamesOutput() CentralServerFullResourceNamesOutput
	ToCentralServerFullResourceNamesOutputWithContext(context.Context) CentralServerFullResourceNamesOutput
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNamesArgs struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
	AvailabilitySetName pulumi.StringPtrInput `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer LoadBalancerResourceNamesPtrInput `pulumi:"loadBalancer"`
	// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
	VirtualMachines VirtualMachineResourceNamesArrayInput `pulumi:"virtualMachines"`
}

func (CentralServerFullResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerFullResourceNames)(nil)).Elem()
}

func (i CentralServerFullResourceNamesArgs) ToCentralServerFullResourceNamesOutput() CentralServerFullResourceNamesOutput {
	return i.ToCentralServerFullResourceNamesOutputWithContext(context.Background())
}

func (i CentralServerFullResourceNamesArgs) ToCentralServerFullResourceNamesOutputWithContext(ctx context.Context) CentralServerFullResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerFullResourceNamesOutput)
}

func (i CentralServerFullResourceNamesArgs) ToCentralServerFullResourceNamesPtrOutput() CentralServerFullResourceNamesPtrOutput {
	return i.ToCentralServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i CentralServerFullResourceNamesArgs) ToCentralServerFullResourceNamesPtrOutputWithContext(ctx context.Context) CentralServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerFullResourceNamesOutput).ToCentralServerFullResourceNamesPtrOutputWithContext(ctx)
}

// CentralServerFullResourceNamesPtrInput is an input type that accepts CentralServerFullResourceNamesArgs, CentralServerFullResourceNamesPtr and CentralServerFullResourceNamesPtrOutput values.
// You can construct a concrete instance of `CentralServerFullResourceNamesPtrInput` via:
//
//	        CentralServerFullResourceNamesArgs{...}
//
//	or:
//
//	        nil
type CentralServerFullResourceNamesPtrInput interface {
	pulumi.Input

	ToCentralServerFullResourceNamesPtrOutput() CentralServerFullResourceNamesPtrOutput
	ToCentralServerFullResourceNamesPtrOutputWithContext(context.Context) CentralServerFullResourceNamesPtrOutput
}

type centralServerFullResourceNamesPtrType CentralServerFullResourceNamesArgs

func CentralServerFullResourceNamesPtr(v *CentralServerFullResourceNamesArgs) CentralServerFullResourceNamesPtrInput {
	return (*centralServerFullResourceNamesPtrType)(v)
}

func (*centralServerFullResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerFullResourceNames)(nil)).Elem()
}

func (i *centralServerFullResourceNamesPtrType) ToCentralServerFullResourceNamesPtrOutput() CentralServerFullResourceNamesPtrOutput {
	return i.ToCentralServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i *centralServerFullResourceNamesPtrType) ToCentralServerFullResourceNamesPtrOutputWithContext(ctx context.Context) CentralServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralServerFullResourceNamesPtrOutput)
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNamesOutput struct{ *pulumi.OutputState }

func (CentralServerFullResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerFullResourceNames)(nil)).Elem()
}

func (o CentralServerFullResourceNamesOutput) ToCentralServerFullResourceNamesOutput() CentralServerFullResourceNamesOutput {
	return o
}

func (o CentralServerFullResourceNamesOutput) ToCentralServerFullResourceNamesOutputWithContext(ctx context.Context) CentralServerFullResourceNamesOutput {
	return o
}

func (o CentralServerFullResourceNamesOutput) ToCentralServerFullResourceNamesPtrOutput() CentralServerFullResourceNamesPtrOutput {
	return o.ToCentralServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (o CentralServerFullResourceNamesOutput) ToCentralServerFullResourceNamesPtrOutputWithContext(ctx context.Context) CentralServerFullResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CentralServerFullResourceNames) *CentralServerFullResourceNames {
		return &v
	}).(CentralServerFullResourceNamesPtrOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
func (o CentralServerFullResourceNamesOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CentralServerFullResourceNames) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o CentralServerFullResourceNamesOutput) LoadBalancer() LoadBalancerResourceNamesPtrOutput {
	return o.ApplyT(func(v CentralServerFullResourceNames) *LoadBalancerResourceNames { return v.LoadBalancer }).(LoadBalancerResourceNamesPtrOutput)
}

// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
func (o CentralServerFullResourceNamesOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v CentralServerFullResourceNames) []VirtualMachineResourceNames { return v.VirtualMachines }).(VirtualMachineResourceNamesArrayOutput)
}

type CentralServerFullResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (CentralServerFullResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerFullResourceNames)(nil)).Elem()
}

func (o CentralServerFullResourceNamesPtrOutput) ToCentralServerFullResourceNamesPtrOutput() CentralServerFullResourceNamesPtrOutput {
	return o
}

func (o CentralServerFullResourceNamesPtrOutput) ToCentralServerFullResourceNamesPtrOutputWithContext(ctx context.Context) CentralServerFullResourceNamesPtrOutput {
	return o
}

func (o CentralServerFullResourceNamesPtrOutput) Elem() CentralServerFullResourceNamesOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNames) CentralServerFullResourceNames {
		if v != nil {
			return *v
		}
		var ret CentralServerFullResourceNames
		return ret
	}).(CentralServerFullResourceNamesOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
func (o CentralServerFullResourceNamesPtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o CentralServerFullResourceNamesPtrOutput) LoadBalancer() LoadBalancerResourceNamesPtrOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNames) *LoadBalancerResourceNames {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesPtrOutput)
}

// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
func (o CentralServerFullResourceNamesPtrOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNames) []VirtualMachineResourceNames {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesArrayOutput)
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNamesResponse `pulumi:"loadBalancer"`
	// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (CentralServerFullResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerFullResourceNamesResponse)(nil)).Elem()
}

func (o CentralServerFullResourceNamesResponseOutput) ToCentralServerFullResourceNamesResponseOutput() CentralServerFullResourceNamesResponseOutput {
	return o
}

func (o CentralServerFullResourceNamesResponseOutput) ToCentralServerFullResourceNamesResponseOutputWithContext(ctx context.Context) CentralServerFullResourceNamesResponseOutput {
	return o
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
func (o CentralServerFullResourceNamesResponseOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CentralServerFullResourceNamesResponse) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o CentralServerFullResourceNamesResponseOutput) LoadBalancer() LoadBalancerResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v CentralServerFullResourceNamesResponse) *LoadBalancerResourceNamesResponse {
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesResponsePtrOutput)
}

// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
func (o CentralServerFullResourceNamesResponseOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v CentralServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

type CentralServerFullResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (CentralServerFullResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralServerFullResourceNamesResponse)(nil)).Elem()
}

func (o CentralServerFullResourceNamesResponsePtrOutput) ToCentralServerFullResourceNamesResponsePtrOutput() CentralServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o CentralServerFullResourceNamesResponsePtrOutput) ToCentralServerFullResourceNamesResponsePtrOutputWithContext(ctx context.Context) CentralServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o CentralServerFullResourceNamesResponsePtrOutput) Elem() CentralServerFullResourceNamesResponseOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNamesResponse) CentralServerFullResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret CentralServerFullResourceNamesResponse
		return ret
	}).(CentralServerFullResourceNamesResponseOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
func (o CentralServerFullResourceNamesResponsePtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o CentralServerFullResourceNamesResponsePtrOutput) LoadBalancer() LoadBalancerResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNamesResponse) *LoadBalancerResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesResponsePtrOutput)
}

// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
func (o CentralServerFullResourceNamesResponsePtrOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v *CentralServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

// The SAP Central Services Instance VM details.
type CentralServerVmDetailsResponse struct {
	// Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails []StorageInformationResponse `pulumi:"storageDetails"`
	// Defines the type of central server VM.
	Type             string `pulumi:"type"`
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The SAP Central Services Instance VM details.
type CentralServerVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (CentralServerVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerVmDetailsResponse)(nil)).Elem()
}

func (o CentralServerVmDetailsResponseOutput) ToCentralServerVmDetailsResponseOutput() CentralServerVmDetailsResponseOutput {
	return o
}

func (o CentralServerVmDetailsResponseOutput) ToCentralServerVmDetailsResponseOutputWithContext(ctx context.Context) CentralServerVmDetailsResponseOutput {
	return o
}

// Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o CentralServerVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

// Defines the type of central server VM.
func (o CentralServerVmDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o CentralServerVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type CentralServerVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (CentralServerVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CentralServerVmDetailsResponse)(nil)).Elem()
}

func (o CentralServerVmDetailsResponseArrayOutput) ToCentralServerVmDetailsResponseArrayOutput() CentralServerVmDetailsResponseArrayOutput {
	return o
}

func (o CentralServerVmDetailsResponseArrayOutput) ToCentralServerVmDetailsResponseArrayOutputWithContext(ctx context.Context) CentralServerVmDetailsResponseArrayOutput {
	return o
}

func (o CentralServerVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) CentralServerVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CentralServerVmDetailsResponse {
		return vs[0].([]CentralServerVmDetailsResponse)[vs[1].(int)]
	}).(CentralServerVmDetailsResponseOutput)
}

// The SAP instance specific configuration data.
type ConfigurationDataResponse struct {
	// Provide the CPU value of the server. For example, 16, 32 etc.
	Cpu int `pulumi:"cpu"`
	// Provide the CPU clock speed of the server in MHz. This should be a non-zero value. For example, 2100.
	CpuInMhz int `pulumi:"cpuInMhz"`
	// Provide the CPU architecture type of the server. For example, Xeon Platinum 8171M, Xeon E5-2673 v3.
	CpuType string `pulumi:"cpuType"`
	// The database of this is a server instance. Applicable only if SAP instance type for this server instance is 'DB'.
	DatabaseType string `pulumi:"databaseType"`
	// Provide the HW manufacturer company of the server.  For example, Microsoft Corporation.
	HardwareManufacturer string `pulumi:"hardwareManufacturer"`
	// Specify if the Hardware is a physical server or virtual machine.
	Model string `pulumi:"model"`
	// Provide the RAM of the server. This should be a non-zero value. For example, 256.
	Ram int `pulumi:"ram"`
	// Provide the SAPS for each server of the SAP system. This should be a non-zero value. For example, 1000.
	Saps int `pulumi:"saps"`
	// Provide the target HANA database size you need. Applicable only if SAP instance type for this server instance is 'DB' and you are migrating an AnyDb database to SAP S/4HANA.
	TargetHanaRamSizeGB int `pulumi:"targetHanaRamSizeGB"`
	// Provide the total disk IOPS capacity. Add the disk volume for each individual disk and provide the sum total in this field.
	TotalDiskIops int `pulumi:"totalDiskIops"`
	// Provide the total disk volume capacity in GB. Add the disk volume for each individual disks and provide the total sum in this field.
	TotalDiskSizeGB int `pulumi:"totalDiskSizeGB"`
}

// The SAP instance specific configuration data.
type ConfigurationDataResponseOutput struct{ *pulumi.OutputState }

func (ConfigurationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurationDataResponse)(nil)).Elem()
}

func (o ConfigurationDataResponseOutput) ToConfigurationDataResponseOutput() ConfigurationDataResponseOutput {
	return o
}

func (o ConfigurationDataResponseOutput) ToConfigurationDataResponseOutputWithContext(ctx context.Context) ConfigurationDataResponseOutput {
	return o
}

// Provide the CPU value of the server. For example, 16, 32 etc.
func (o ConfigurationDataResponseOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.Cpu }).(pulumi.IntOutput)
}

// Provide the CPU clock speed of the server in MHz. This should be a non-zero value. For example, 2100.
func (o ConfigurationDataResponseOutput) CpuInMhz() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.CpuInMhz }).(pulumi.IntOutput)
}

// Provide the CPU architecture type of the server. For example, Xeon Platinum 8171M, Xeon E5-2673 v3.
func (o ConfigurationDataResponseOutput) CpuType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) string { return v.CpuType }).(pulumi.StringOutput)
}

// The database of this is a server instance. Applicable only if SAP instance type for this server instance is 'DB'.
func (o ConfigurationDataResponseOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) string { return v.DatabaseType }).(pulumi.StringOutput)
}

// Provide the HW manufacturer company of the server.  For example, Microsoft Corporation.
func (o ConfigurationDataResponseOutput) HardwareManufacturer() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) string { return v.HardwareManufacturer }).(pulumi.StringOutput)
}

// Specify if the Hardware is a physical server or virtual machine.
func (o ConfigurationDataResponseOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) string { return v.Model }).(pulumi.StringOutput)
}

// Provide the RAM of the server. This should be a non-zero value. For example, 256.
func (o ConfigurationDataResponseOutput) Ram() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.Ram }).(pulumi.IntOutput)
}

// Provide the SAPS for each server of the SAP system. This should be a non-zero value. For example, 1000.
func (o ConfigurationDataResponseOutput) Saps() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.Saps }).(pulumi.IntOutput)
}

// Provide the target HANA database size you need. Applicable only if SAP instance type for this server instance is 'DB' and you are migrating an AnyDb database to SAP S/4HANA.
func (o ConfigurationDataResponseOutput) TargetHanaRamSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.TargetHanaRamSizeGB }).(pulumi.IntOutput)
}

// Provide the total disk IOPS capacity. Add the disk volume for each individual disk and provide the sum total in this field.
func (o ConfigurationDataResponseOutput) TotalDiskIops() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.TotalDiskIops }).(pulumi.IntOutput)
}

// Provide the total disk volume capacity in GB. Add the disk volume for each individual disks and provide the total sum in this field.
func (o ConfigurationDataResponseOutput) TotalDiskSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurationDataResponse) int { return v.TotalDiskSizeGB }).(pulumi.IntOutput)
}

// Error definition.
type ConnectorErrorDefinitionResponse struct {
	// Service specific error code which serves as the substatus for the HTTP error code.
	Code string `pulumi:"code"`
	// Internal error details.
	Details []ConnectorErrorDefinitionResponse `pulumi:"details"`
	// Description of the error.
	Message string `pulumi:"message"`
}

// Error definition.
type ConnectorErrorDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ConnectorErrorDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorErrorDefinitionResponse)(nil)).Elem()
}

func (o ConnectorErrorDefinitionResponseOutput) ToConnectorErrorDefinitionResponseOutput() ConnectorErrorDefinitionResponseOutput {
	return o
}

func (o ConnectorErrorDefinitionResponseOutput) ToConnectorErrorDefinitionResponseOutputWithContext(ctx context.Context) ConnectorErrorDefinitionResponseOutput {
	return o
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ConnectorErrorDefinitionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorErrorDefinitionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Internal error details.
func (o ConnectorErrorDefinitionResponseOutput) Details() ConnectorErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ConnectorErrorDefinitionResponse) []ConnectorErrorDefinitionResponse { return v.Details }).(ConnectorErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ConnectorErrorDefinitionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorErrorDefinitionResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ConnectorErrorDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectorErrorDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorErrorDefinitionResponse)(nil)).Elem()
}

func (o ConnectorErrorDefinitionResponseArrayOutput) ToConnectorErrorDefinitionResponseArrayOutput() ConnectorErrorDefinitionResponseArrayOutput {
	return o
}

func (o ConnectorErrorDefinitionResponseArrayOutput) ToConnectorErrorDefinitionResponseArrayOutputWithContext(ctx context.Context) ConnectorErrorDefinitionResponseArrayOutput {
	return o
}

func (o ConnectorErrorDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ConnectorErrorDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorErrorDefinitionResponse {
		return vs[0].([]ConnectorErrorDefinitionResponse)[vs[1].(int)]
	}).(ConnectorErrorDefinitionResponseOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
type CreateAndMountFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'CreateAndMount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The name of file share storage account name . A custom name is used in case of missing input.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// CreateAndMountFileShareConfigurationInput is an input type that accepts CreateAndMountFileShareConfigurationArgs and CreateAndMountFileShareConfigurationOutput values.
// You can construct a concrete instance of `CreateAndMountFileShareConfigurationInput` via:
//
//	CreateAndMountFileShareConfigurationArgs{...}
type CreateAndMountFileShareConfigurationInput interface {
	pulumi.Input

	ToCreateAndMountFileShareConfigurationOutput() CreateAndMountFileShareConfigurationOutput
	ToCreateAndMountFileShareConfigurationOutputWithContext(context.Context) CreateAndMountFileShareConfigurationOutput
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
type CreateAndMountFileShareConfigurationArgs struct {
	// The type of file share config.
	// Expected value is 'CreateAndMount'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
	// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// The name of file share storage account name . A custom name is used in case of missing input.
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
}

func (CreateAndMountFileShareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateAndMountFileShareConfiguration)(nil)).Elem()
}

func (i CreateAndMountFileShareConfigurationArgs) ToCreateAndMountFileShareConfigurationOutput() CreateAndMountFileShareConfigurationOutput {
	return i.ToCreateAndMountFileShareConfigurationOutputWithContext(context.Background())
}

func (i CreateAndMountFileShareConfigurationArgs) ToCreateAndMountFileShareConfigurationOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateAndMountFileShareConfigurationOutput)
}

func (i CreateAndMountFileShareConfigurationArgs) ToCreateAndMountFileShareConfigurationPtrOutput() CreateAndMountFileShareConfigurationPtrOutput {
	return i.ToCreateAndMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i CreateAndMountFileShareConfigurationArgs) ToCreateAndMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateAndMountFileShareConfigurationOutput).ToCreateAndMountFileShareConfigurationPtrOutputWithContext(ctx)
}

// CreateAndMountFileShareConfigurationPtrInput is an input type that accepts CreateAndMountFileShareConfigurationArgs, CreateAndMountFileShareConfigurationPtr and CreateAndMountFileShareConfigurationPtrOutput values.
// You can construct a concrete instance of `CreateAndMountFileShareConfigurationPtrInput` via:
//
//	        CreateAndMountFileShareConfigurationArgs{...}
//
//	or:
//
//	        nil
type CreateAndMountFileShareConfigurationPtrInput interface {
	pulumi.Input

	ToCreateAndMountFileShareConfigurationPtrOutput() CreateAndMountFileShareConfigurationPtrOutput
	ToCreateAndMountFileShareConfigurationPtrOutputWithContext(context.Context) CreateAndMountFileShareConfigurationPtrOutput
}

type createAndMountFileShareConfigurationPtrType CreateAndMountFileShareConfigurationArgs

func CreateAndMountFileShareConfigurationPtr(v *CreateAndMountFileShareConfigurationArgs) CreateAndMountFileShareConfigurationPtrInput {
	return (*createAndMountFileShareConfigurationPtrType)(v)
}

func (*createAndMountFileShareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateAndMountFileShareConfiguration)(nil)).Elem()
}

func (i *createAndMountFileShareConfigurationPtrType) ToCreateAndMountFileShareConfigurationPtrOutput() CreateAndMountFileShareConfigurationPtrOutput {
	return i.ToCreateAndMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i *createAndMountFileShareConfigurationPtrType) ToCreateAndMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateAndMountFileShareConfigurationPtrOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
type CreateAndMountFileShareConfigurationOutput struct{ *pulumi.OutputState }

func (CreateAndMountFileShareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateAndMountFileShareConfiguration)(nil)).Elem()
}

func (o CreateAndMountFileShareConfigurationOutput) ToCreateAndMountFileShareConfigurationOutput() CreateAndMountFileShareConfigurationOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationOutput) ToCreateAndMountFileShareConfigurationOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationOutput) ToCreateAndMountFileShareConfigurationPtrOutput() CreateAndMountFileShareConfigurationPtrOutput {
	return o.ToCreateAndMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (o CreateAndMountFileShareConfigurationOutput) ToCreateAndMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CreateAndMountFileShareConfiguration) *CreateAndMountFileShareConfiguration {
		return &v
	}).(CreateAndMountFileShareConfigurationPtrOutput)
}

// The type of file share config.
// Expected value is 'CreateAndMount'.
func (o CreateAndMountFileShareConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
func (o CreateAndMountFileShareConfigurationOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfiguration) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The name of file share storage account name . A custom name is used in case of missing input.
func (o CreateAndMountFileShareConfigurationOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfiguration) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

type CreateAndMountFileShareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CreateAndMountFileShareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateAndMountFileShareConfiguration)(nil)).Elem()
}

func (o CreateAndMountFileShareConfigurationPtrOutput) ToCreateAndMountFileShareConfigurationPtrOutput() CreateAndMountFileShareConfigurationPtrOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationPtrOutput) ToCreateAndMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationPtrOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationPtrOutput) Elem() CreateAndMountFileShareConfigurationOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfiguration) CreateAndMountFileShareConfiguration {
		if v != nil {
			return *v
		}
		var ret CreateAndMountFileShareConfiguration
		return ret
	}).(CreateAndMountFileShareConfigurationOutput)
}

// The type of file share config.
// Expected value is 'CreateAndMount'.
func (o CreateAndMountFileShareConfigurationPtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
func (o CreateAndMountFileShareConfigurationPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The name of file share storage account name . A custom name is used in case of missing input.
func (o CreateAndMountFileShareConfigurationPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
type CreateAndMountFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'CreateAndMount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The name of file share storage account name . A custom name is used in case of missing input.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn't need to be pre-created.
type CreateAndMountFileShareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CreateAndMountFileShareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateAndMountFileShareConfigurationResponse)(nil)).Elem()
}

func (o CreateAndMountFileShareConfigurationResponseOutput) ToCreateAndMountFileShareConfigurationResponseOutput() CreateAndMountFileShareConfigurationResponseOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationResponseOutput) ToCreateAndMountFileShareConfigurationResponseOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationResponseOutput {
	return o
}

// The type of file share config.
// Expected value is 'CreateAndMount'.
func (o CreateAndMountFileShareConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
func (o CreateAndMountFileShareConfigurationResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfigurationResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The name of file share storage account name . A custom name is used in case of missing input.
func (o CreateAndMountFileShareConfigurationResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CreateAndMountFileShareConfigurationResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

type CreateAndMountFileShareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CreateAndMountFileShareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateAndMountFileShareConfigurationResponse)(nil)).Elem()
}

func (o CreateAndMountFileShareConfigurationResponsePtrOutput) ToCreateAndMountFileShareConfigurationResponsePtrOutput() CreateAndMountFileShareConfigurationResponsePtrOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationResponsePtrOutput) ToCreateAndMountFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) CreateAndMountFileShareConfigurationResponsePtrOutput {
	return o
}

func (o CreateAndMountFileShareConfigurationResponsePtrOutput) Elem() CreateAndMountFileShareConfigurationResponseOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfigurationResponse) CreateAndMountFileShareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CreateAndMountFileShareConfigurationResponse
		return ret
	}).(CreateAndMountFileShareConfigurationResponseOutput)
}

// The type of file share config.
// Expected value is 'CreateAndMount'.
func (o CreateAndMountFileShareConfigurationResponsePtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
func (o CreateAndMountFileShareConfigurationResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The name of file share storage account name . A custom name is used in case of missing input.
func (o CreateAndMountFileShareConfigurationResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CreateAndMountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstanceProperties struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// DB2ProviderInstancePropertiesInput is an input type that accepts DB2ProviderInstancePropertiesArgs and DB2ProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `DB2ProviderInstancePropertiesInput` via:
//
//	DB2ProviderInstancePropertiesArgs{...}
type DB2ProviderInstancePropertiesInput interface {
	pulumi.Input

	ToDB2ProviderInstancePropertiesOutput() DB2ProviderInstancePropertiesOutput
	ToDB2ProviderInstancePropertiesOutputWithContext(context.Context) DB2ProviderInstancePropertiesOutput
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstancePropertiesArgs struct {
	// Gets or sets the db2 database name.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort pulumi.StringPtrInput `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (DB2ProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DB2ProviderInstanceProperties)(nil)).Elem()
}

func (i DB2ProviderInstancePropertiesArgs) ToDB2ProviderInstancePropertiesOutput() DB2ProviderInstancePropertiesOutput {
	return i.ToDB2ProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i DB2ProviderInstancePropertiesArgs) ToDB2ProviderInstancePropertiesOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DB2ProviderInstancePropertiesOutput)
}

func (i DB2ProviderInstancePropertiesArgs) ToDB2ProviderInstancePropertiesPtrOutput() DB2ProviderInstancePropertiesPtrOutput {
	return i.ToDB2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i DB2ProviderInstancePropertiesArgs) ToDB2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DB2ProviderInstancePropertiesOutput).ToDB2ProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// DB2ProviderInstancePropertiesPtrInput is an input type that accepts DB2ProviderInstancePropertiesArgs, DB2ProviderInstancePropertiesPtr and DB2ProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `DB2ProviderInstancePropertiesPtrInput` via:
//
//	        DB2ProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type DB2ProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToDB2ProviderInstancePropertiesPtrOutput() DB2ProviderInstancePropertiesPtrOutput
	ToDB2ProviderInstancePropertiesPtrOutputWithContext(context.Context) DB2ProviderInstancePropertiesPtrOutput
}

type db2providerInstancePropertiesPtrType DB2ProviderInstancePropertiesArgs

func DB2ProviderInstancePropertiesPtr(v *DB2ProviderInstancePropertiesArgs) DB2ProviderInstancePropertiesPtrInput {
	return (*db2providerInstancePropertiesPtrType)(v)
}

func (*db2providerInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DB2ProviderInstanceProperties)(nil)).Elem()
}

func (i *db2providerInstancePropertiesPtrType) ToDB2ProviderInstancePropertiesPtrOutput() DB2ProviderInstancePropertiesPtrOutput {
	return i.ToDB2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *db2providerInstancePropertiesPtrType) ToDB2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DB2ProviderInstancePropertiesPtrOutput)
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (DB2ProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DB2ProviderInstanceProperties)(nil)).Elem()
}

func (o DB2ProviderInstancePropertiesOutput) ToDB2ProviderInstancePropertiesOutput() DB2ProviderInstancePropertiesOutput {
	return o
}

func (o DB2ProviderInstancePropertiesOutput) ToDB2ProviderInstancePropertiesOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesOutput {
	return o
}

func (o DB2ProviderInstancePropertiesOutput) ToDB2ProviderInstancePropertiesPtrOutput() DB2ProviderInstancePropertiesPtrOutput {
	return o.ToDB2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o DB2ProviderInstancePropertiesOutput) ToDB2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DB2ProviderInstanceProperties) *DB2ProviderInstanceProperties {
		return &v
	}).(DB2ProviderInstancePropertiesPtrOutput)
}

// Gets or sets the db2 database name.
func (o DB2ProviderInstancePropertiesOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o DB2ProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o DB2ProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o DB2ProviderInstancePropertiesOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o DB2ProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o DB2ProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o DB2ProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o DB2ProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o DB2ProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o DB2ProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type DB2ProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DB2ProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DB2ProviderInstanceProperties)(nil)).Elem()
}

func (o DB2ProviderInstancePropertiesPtrOutput) ToDB2ProviderInstancePropertiesPtrOutput() DB2ProviderInstancePropertiesPtrOutput {
	return o
}

func (o DB2ProviderInstancePropertiesPtrOutput) ToDB2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesPtrOutput {
	return o
}

func (o DB2ProviderInstancePropertiesPtrOutput) Elem() DB2ProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) DB2ProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret DB2ProviderInstanceProperties
		return ret
	}).(DB2ProviderInstancePropertiesOutput)
}

// Gets or sets the db2 database name.
func (o DB2ProviderInstancePropertiesPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o DB2ProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o DB2ProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o DB2ProviderInstancePropertiesPtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o DB2ProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o DB2ProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o DB2ProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o DB2ProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o DB2ProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o DB2ProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstancePropertiesResponse struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DB2ProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DB2ProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o DB2ProviderInstancePropertiesResponseOutput) ToDB2ProviderInstancePropertiesResponseOutput() DB2ProviderInstancePropertiesResponseOutput {
	return o
}

func (o DB2ProviderInstancePropertiesResponseOutput) ToDB2ProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the db2 database name.
func (o DB2ProviderInstancePropertiesResponseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o DB2ProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o DB2ProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o DB2ProviderInstancePropertiesResponseOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o DB2ProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o DB2ProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o DB2ProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o DB2ProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o DB2ProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o DB2ProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DB2ProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type DB2ProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DB2ProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DB2ProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o DB2ProviderInstancePropertiesResponsePtrOutput) ToDB2ProviderInstancePropertiesResponsePtrOutput() DB2ProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o DB2ProviderInstancePropertiesResponsePtrOutput) ToDB2ProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) DB2ProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o DB2ProviderInstancePropertiesResponsePtrOutput) Elem() DB2ProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) DB2ProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DB2ProviderInstancePropertiesResponse
		return ret
	}).(DB2ProviderInstancePropertiesResponseOutput)
}

// Gets or sets the db2 database name.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o DB2ProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o DB2ProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DB2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Defines the policy properties for database backup.
type DBBackupPolicyProperties struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureWorkload'.
	BackupManagementType string `pulumi:"backupManagementType"`
	// Fix the policy inconsistency
	MakePolicyConsistent *bool `pulumi:"makePolicyConsistent"`
	// The name of the DB backup policy.
	Name string `pulumi:"name"`
	// Number of items associated with this policy.
	ProtectedItemsCount *int `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []string `pulumi:"resourceGuardOperationRequests"`
	// Common settings for the backup management
	Settings *Settings `pulumi:"settings"`
	// List of sub-protection policies which includes schedule and retention
	SubProtectionPolicy []SubProtectionPolicy `pulumi:"subProtectionPolicy"`
	// Type of workload for the backup management
	WorkLoadType *string `pulumi:"workLoadType"`
}

// DBBackupPolicyPropertiesInput is an input type that accepts DBBackupPolicyPropertiesArgs and DBBackupPolicyPropertiesOutput values.
// You can construct a concrete instance of `DBBackupPolicyPropertiesInput` via:
//
//	DBBackupPolicyPropertiesArgs{...}
type DBBackupPolicyPropertiesInput interface {
	pulumi.Input

	ToDBBackupPolicyPropertiesOutput() DBBackupPolicyPropertiesOutput
	ToDBBackupPolicyPropertiesOutputWithContext(context.Context) DBBackupPolicyPropertiesOutput
}

// Defines the policy properties for database backup.
type DBBackupPolicyPropertiesArgs struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureWorkload'.
	BackupManagementType pulumi.StringInput `pulumi:"backupManagementType"`
	// Fix the policy inconsistency
	MakePolicyConsistent pulumi.BoolPtrInput `pulumi:"makePolicyConsistent"`
	// The name of the DB backup policy.
	Name pulumi.StringInput `pulumi:"name"`
	// Number of items associated with this policy.
	ProtectedItemsCount pulumi.IntPtrInput `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests pulumi.StringArrayInput `pulumi:"resourceGuardOperationRequests"`
	// Common settings for the backup management
	Settings SettingsPtrInput `pulumi:"settings"`
	// List of sub-protection policies which includes schedule and retention
	SubProtectionPolicy SubProtectionPolicyArrayInput `pulumi:"subProtectionPolicy"`
	// Type of workload for the backup management
	WorkLoadType pulumi.StringPtrInput `pulumi:"workLoadType"`
}

func (DBBackupPolicyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DBBackupPolicyProperties)(nil)).Elem()
}

func (i DBBackupPolicyPropertiesArgs) ToDBBackupPolicyPropertiesOutput() DBBackupPolicyPropertiesOutput {
	return i.ToDBBackupPolicyPropertiesOutputWithContext(context.Background())
}

func (i DBBackupPolicyPropertiesArgs) ToDBBackupPolicyPropertiesOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBBackupPolicyPropertiesOutput)
}

func (i DBBackupPolicyPropertiesArgs) ToDBBackupPolicyPropertiesPtrOutput() DBBackupPolicyPropertiesPtrOutput {
	return i.ToDBBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (i DBBackupPolicyPropertiesArgs) ToDBBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBBackupPolicyPropertiesOutput).ToDBBackupPolicyPropertiesPtrOutputWithContext(ctx)
}

// DBBackupPolicyPropertiesPtrInput is an input type that accepts DBBackupPolicyPropertiesArgs, DBBackupPolicyPropertiesPtr and DBBackupPolicyPropertiesPtrOutput values.
// You can construct a concrete instance of `DBBackupPolicyPropertiesPtrInput` via:
//
//	        DBBackupPolicyPropertiesArgs{...}
//
//	or:
//
//	        nil
type DBBackupPolicyPropertiesPtrInput interface {
	pulumi.Input

	ToDBBackupPolicyPropertiesPtrOutput() DBBackupPolicyPropertiesPtrOutput
	ToDBBackupPolicyPropertiesPtrOutputWithContext(context.Context) DBBackupPolicyPropertiesPtrOutput
}

type dbbackupPolicyPropertiesPtrType DBBackupPolicyPropertiesArgs

func DBBackupPolicyPropertiesPtr(v *DBBackupPolicyPropertiesArgs) DBBackupPolicyPropertiesPtrInput {
	return (*dbbackupPolicyPropertiesPtrType)(v)
}

func (*dbbackupPolicyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DBBackupPolicyProperties)(nil)).Elem()
}

func (i *dbbackupPolicyPropertiesPtrType) ToDBBackupPolicyPropertiesPtrOutput() DBBackupPolicyPropertiesPtrOutput {
	return i.ToDBBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (i *dbbackupPolicyPropertiesPtrType) ToDBBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DBBackupPolicyPropertiesPtrOutput)
}

// Defines the policy properties for database backup.
type DBBackupPolicyPropertiesOutput struct{ *pulumi.OutputState }

func (DBBackupPolicyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBBackupPolicyProperties)(nil)).Elem()
}

func (o DBBackupPolicyPropertiesOutput) ToDBBackupPolicyPropertiesOutput() DBBackupPolicyPropertiesOutput {
	return o
}

func (o DBBackupPolicyPropertiesOutput) ToDBBackupPolicyPropertiesOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesOutput {
	return o
}

func (o DBBackupPolicyPropertiesOutput) ToDBBackupPolicyPropertiesPtrOutput() DBBackupPolicyPropertiesPtrOutput {
	return o.ToDBBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (o DBBackupPolicyPropertiesOutput) ToDBBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DBBackupPolicyProperties) *DBBackupPolicyProperties {
		return &v
	}).(DBBackupPolicyPropertiesPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureWorkload'.
func (o DBBackupPolicyPropertiesOutput) BackupManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) string { return v.BackupManagementType }).(pulumi.StringOutput)
}

// Fix the policy inconsistency
func (o DBBackupPolicyPropertiesOutput) MakePolicyConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) *bool { return v.MakePolicyConsistent }).(pulumi.BoolPtrOutput)
}

// The name of the DB backup policy.
func (o DBBackupPolicyPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) string { return v.Name }).(pulumi.StringOutput)
}

// Number of items associated with this policy.
func (o DBBackupPolicyPropertiesOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) *int { return v.ProtectedItemsCount }).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o DBBackupPolicyPropertiesOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) []string { return v.ResourceGuardOperationRequests }).(pulumi.StringArrayOutput)
}

// Common settings for the backup management
func (o DBBackupPolicyPropertiesOutput) Settings() SettingsPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) *Settings { return v.Settings }).(SettingsPtrOutput)
}

// List of sub-protection policies which includes schedule and retention
func (o DBBackupPolicyPropertiesOutput) SubProtectionPolicy() SubProtectionPolicyArrayOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) []SubProtectionPolicy { return v.SubProtectionPolicy }).(SubProtectionPolicyArrayOutput)
}

// Type of workload for the backup management
func (o DBBackupPolicyPropertiesOutput) WorkLoadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyProperties) *string { return v.WorkLoadType }).(pulumi.StringPtrOutput)
}

type DBBackupPolicyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DBBackupPolicyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBBackupPolicyProperties)(nil)).Elem()
}

func (o DBBackupPolicyPropertiesPtrOutput) ToDBBackupPolicyPropertiesPtrOutput() DBBackupPolicyPropertiesPtrOutput {
	return o
}

func (o DBBackupPolicyPropertiesPtrOutput) ToDBBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesPtrOutput {
	return o
}

func (o DBBackupPolicyPropertiesPtrOutput) Elem() DBBackupPolicyPropertiesOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) DBBackupPolicyProperties {
		if v != nil {
			return *v
		}
		var ret DBBackupPolicyProperties
		return ret
	}).(DBBackupPolicyPropertiesOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureWorkload'.
func (o DBBackupPolicyPropertiesPtrOutput) BackupManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.BackupManagementType
	}).(pulumi.StringPtrOutput)
}

// Fix the policy inconsistency
func (o DBBackupPolicyPropertiesPtrOutput) MakePolicyConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *bool {
		if v == nil {
			return nil
		}
		return v.MakePolicyConsistent
	}).(pulumi.BoolPtrOutput)
}

// The name of the DB backup policy.
func (o DBBackupPolicyPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o DBBackupPolicyPropertiesPtrOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *int {
		if v == nil {
			return nil
		}
		return v.ProtectedItemsCount
	}).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o DBBackupPolicyPropertiesPtrOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGuardOperationRequests
	}).(pulumi.StringArrayOutput)
}

// Common settings for the backup management
func (o DBBackupPolicyPropertiesPtrOutput) Settings() SettingsPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *Settings {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(SettingsPtrOutput)
}

// List of sub-protection policies which includes schedule and retention
func (o DBBackupPolicyPropertiesPtrOutput) SubProtectionPolicy() SubProtectionPolicyArrayOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) []SubProtectionPolicy {
		if v == nil {
			return nil
		}
		return v.SubProtectionPolicy
	}).(SubProtectionPolicyArrayOutput)
}

// Type of workload for the backup management
func (o DBBackupPolicyPropertiesPtrOutput) WorkLoadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkLoadType
	}).(pulumi.StringPtrOutput)
}

// Defines the policy properties for database backup.
type DBBackupPolicyPropertiesResponse struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureWorkload'.
	BackupManagementType string `pulumi:"backupManagementType"`
	// Fix the policy inconsistency
	MakePolicyConsistent *bool `pulumi:"makePolicyConsistent"`
	// The name of the DB backup policy.
	Name string `pulumi:"name"`
	// Number of items associated with this policy.
	ProtectedItemsCount *int `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []string `pulumi:"resourceGuardOperationRequests"`
	// Common settings for the backup management
	Settings *SettingsResponse `pulumi:"settings"`
	// List of sub-protection policies which includes schedule and retention
	SubProtectionPolicy []SubProtectionPolicyResponse `pulumi:"subProtectionPolicy"`
	// Type of workload for the backup management
	WorkLoadType *string `pulumi:"workLoadType"`
}

// Defines the policy properties for database backup.
type DBBackupPolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DBBackupPolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DBBackupPolicyPropertiesResponse)(nil)).Elem()
}

func (o DBBackupPolicyPropertiesResponseOutput) ToDBBackupPolicyPropertiesResponseOutput() DBBackupPolicyPropertiesResponseOutput {
	return o
}

func (o DBBackupPolicyPropertiesResponseOutput) ToDBBackupPolicyPropertiesResponseOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesResponseOutput {
	return o
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureWorkload'.
func (o DBBackupPolicyPropertiesResponseOutput) BackupManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) string { return v.BackupManagementType }).(pulumi.StringOutput)
}

// Fix the policy inconsistency
func (o DBBackupPolicyPropertiesResponseOutput) MakePolicyConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) *bool { return v.MakePolicyConsistent }).(pulumi.BoolPtrOutput)
}

// The name of the DB backup policy.
func (o DBBackupPolicyPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Number of items associated with this policy.
func (o DBBackupPolicyPropertiesResponseOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) *int { return v.ProtectedItemsCount }).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o DBBackupPolicyPropertiesResponseOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) []string { return v.ResourceGuardOperationRequests }).(pulumi.StringArrayOutput)
}

// Common settings for the backup management
func (o DBBackupPolicyPropertiesResponseOutput) Settings() SettingsResponsePtrOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) *SettingsResponse { return v.Settings }).(SettingsResponsePtrOutput)
}

// List of sub-protection policies which includes schedule and retention
func (o DBBackupPolicyPropertiesResponseOutput) SubProtectionPolicy() SubProtectionPolicyResponseArrayOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) []SubProtectionPolicyResponse { return v.SubProtectionPolicy }).(SubProtectionPolicyResponseArrayOutput)
}

// Type of workload for the backup management
func (o DBBackupPolicyPropertiesResponseOutput) WorkLoadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DBBackupPolicyPropertiesResponse) *string { return v.WorkLoadType }).(pulumi.StringPtrOutput)
}

type DBBackupPolicyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DBBackupPolicyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DBBackupPolicyPropertiesResponse)(nil)).Elem()
}

func (o DBBackupPolicyPropertiesResponsePtrOutput) ToDBBackupPolicyPropertiesResponsePtrOutput() DBBackupPolicyPropertiesResponsePtrOutput {
	return o
}

func (o DBBackupPolicyPropertiesResponsePtrOutput) ToDBBackupPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) DBBackupPolicyPropertiesResponsePtrOutput {
	return o
}

func (o DBBackupPolicyPropertiesResponsePtrOutput) Elem() DBBackupPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) DBBackupPolicyPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DBBackupPolicyPropertiesResponse
		return ret
	}).(DBBackupPolicyPropertiesResponseOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureWorkload'.
func (o DBBackupPolicyPropertiesResponsePtrOutput) BackupManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupManagementType
	}).(pulumi.StringPtrOutput)
}

// Fix the policy inconsistency
func (o DBBackupPolicyPropertiesResponsePtrOutput) MakePolicyConsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MakePolicyConsistent
	}).(pulumi.BoolPtrOutput)
}

// The name of the DB backup policy.
func (o DBBackupPolicyPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o DBBackupPolicyPropertiesResponsePtrOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProtectedItemsCount
	}).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o DBBackupPolicyPropertiesResponsePtrOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGuardOperationRequests
	}).(pulumi.StringArrayOutput)
}

// Common settings for the backup management
func (o DBBackupPolicyPropertiesResponsePtrOutput) Settings() SettingsResponsePtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *SettingsResponse {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(SettingsResponsePtrOutput)
}

// List of sub-protection policies which includes schedule and retention
func (o DBBackupPolicyPropertiesResponsePtrOutput) SubProtectionPolicy() SubProtectionPolicyResponseArrayOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) []SubProtectionPolicyResponse {
		if v == nil {
			return nil
		}
		return v.SubProtectionPolicy
	}).(SubProtectionPolicyResponseArrayOutput)
}

// Type of workload for the backup management
func (o DBBackupPolicyPropertiesResponsePtrOutput) WorkLoadType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DBBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkLoadType
	}).(pulumi.StringPtrOutput)
}

// Daily retention format.
type DailyRetentionFormat struct {
	// List of days of the month.
	DaysOfTheMonth []Day `pulumi:"daysOfTheMonth"`
}

// DailyRetentionFormatInput is an input type that accepts DailyRetentionFormatArgs and DailyRetentionFormatOutput values.
// You can construct a concrete instance of `DailyRetentionFormatInput` via:
//
//	DailyRetentionFormatArgs{...}
type DailyRetentionFormatInput interface {
	pulumi.Input

	ToDailyRetentionFormatOutput() DailyRetentionFormatOutput
	ToDailyRetentionFormatOutputWithContext(context.Context) DailyRetentionFormatOutput
}

// Daily retention format.
type DailyRetentionFormatArgs struct {
	// List of days of the month.
	DaysOfTheMonth DayArrayInput `pulumi:"daysOfTheMonth"`
}

func (DailyRetentionFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionFormat)(nil)).Elem()
}

func (i DailyRetentionFormatArgs) ToDailyRetentionFormatOutput() DailyRetentionFormatOutput {
	return i.ToDailyRetentionFormatOutputWithContext(context.Background())
}

func (i DailyRetentionFormatArgs) ToDailyRetentionFormatOutputWithContext(ctx context.Context) DailyRetentionFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionFormatOutput)
}

func (i DailyRetentionFormatArgs) ToDailyRetentionFormatPtrOutput() DailyRetentionFormatPtrOutput {
	return i.ToDailyRetentionFormatPtrOutputWithContext(context.Background())
}

func (i DailyRetentionFormatArgs) ToDailyRetentionFormatPtrOutputWithContext(ctx context.Context) DailyRetentionFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionFormatOutput).ToDailyRetentionFormatPtrOutputWithContext(ctx)
}

// DailyRetentionFormatPtrInput is an input type that accepts DailyRetentionFormatArgs, DailyRetentionFormatPtr and DailyRetentionFormatPtrOutput values.
// You can construct a concrete instance of `DailyRetentionFormatPtrInput` via:
//
//	        DailyRetentionFormatArgs{...}
//
//	or:
//
//	        nil
type DailyRetentionFormatPtrInput interface {
	pulumi.Input

	ToDailyRetentionFormatPtrOutput() DailyRetentionFormatPtrOutput
	ToDailyRetentionFormatPtrOutputWithContext(context.Context) DailyRetentionFormatPtrOutput
}

type dailyRetentionFormatPtrType DailyRetentionFormatArgs

func DailyRetentionFormatPtr(v *DailyRetentionFormatArgs) DailyRetentionFormatPtrInput {
	return (*dailyRetentionFormatPtrType)(v)
}

func (*dailyRetentionFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionFormat)(nil)).Elem()
}

func (i *dailyRetentionFormatPtrType) ToDailyRetentionFormatPtrOutput() DailyRetentionFormatPtrOutput {
	return i.ToDailyRetentionFormatPtrOutputWithContext(context.Background())
}

func (i *dailyRetentionFormatPtrType) ToDailyRetentionFormatPtrOutputWithContext(ctx context.Context) DailyRetentionFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionFormatPtrOutput)
}

// Daily retention format.
type DailyRetentionFormatOutput struct{ *pulumi.OutputState }

func (DailyRetentionFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionFormat)(nil)).Elem()
}

func (o DailyRetentionFormatOutput) ToDailyRetentionFormatOutput() DailyRetentionFormatOutput {
	return o
}

func (o DailyRetentionFormatOutput) ToDailyRetentionFormatOutputWithContext(ctx context.Context) DailyRetentionFormatOutput {
	return o
}

func (o DailyRetentionFormatOutput) ToDailyRetentionFormatPtrOutput() DailyRetentionFormatPtrOutput {
	return o.ToDailyRetentionFormatPtrOutputWithContext(context.Background())
}

func (o DailyRetentionFormatOutput) ToDailyRetentionFormatPtrOutputWithContext(ctx context.Context) DailyRetentionFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DailyRetentionFormat) *DailyRetentionFormat {
		return &v
	}).(DailyRetentionFormatPtrOutput)
}

// List of days of the month.
func (o DailyRetentionFormatOutput) DaysOfTheMonth() DayArrayOutput {
	return o.ApplyT(func(v DailyRetentionFormat) []Day { return v.DaysOfTheMonth }).(DayArrayOutput)
}

type DailyRetentionFormatPtrOutput struct{ *pulumi.OutputState }

func (DailyRetentionFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionFormat)(nil)).Elem()
}

func (o DailyRetentionFormatPtrOutput) ToDailyRetentionFormatPtrOutput() DailyRetentionFormatPtrOutput {
	return o
}

func (o DailyRetentionFormatPtrOutput) ToDailyRetentionFormatPtrOutputWithContext(ctx context.Context) DailyRetentionFormatPtrOutput {
	return o
}

func (o DailyRetentionFormatPtrOutput) Elem() DailyRetentionFormatOutput {
	return o.ApplyT(func(v *DailyRetentionFormat) DailyRetentionFormat {
		if v != nil {
			return *v
		}
		var ret DailyRetentionFormat
		return ret
	}).(DailyRetentionFormatOutput)
}

// List of days of the month.
func (o DailyRetentionFormatPtrOutput) DaysOfTheMonth() DayArrayOutput {
	return o.ApplyT(func(v *DailyRetentionFormat) []Day {
		if v == nil {
			return nil
		}
		return v.DaysOfTheMonth
	}).(DayArrayOutput)
}

// Daily retention format.
type DailyRetentionFormatResponse struct {
	// List of days of the month.
	DaysOfTheMonth []DayResponse `pulumi:"daysOfTheMonth"`
}

// Daily retention format.
type DailyRetentionFormatResponseOutput struct{ *pulumi.OutputState }

func (DailyRetentionFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionFormatResponse)(nil)).Elem()
}

func (o DailyRetentionFormatResponseOutput) ToDailyRetentionFormatResponseOutput() DailyRetentionFormatResponseOutput {
	return o
}

func (o DailyRetentionFormatResponseOutput) ToDailyRetentionFormatResponseOutputWithContext(ctx context.Context) DailyRetentionFormatResponseOutput {
	return o
}

// List of days of the month.
func (o DailyRetentionFormatResponseOutput) DaysOfTheMonth() DayResponseArrayOutput {
	return o.ApplyT(func(v DailyRetentionFormatResponse) []DayResponse { return v.DaysOfTheMonth }).(DayResponseArrayOutput)
}

type DailyRetentionFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyRetentionFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionFormatResponse)(nil)).Elem()
}

func (o DailyRetentionFormatResponsePtrOutput) ToDailyRetentionFormatResponsePtrOutput() DailyRetentionFormatResponsePtrOutput {
	return o
}

func (o DailyRetentionFormatResponsePtrOutput) ToDailyRetentionFormatResponsePtrOutputWithContext(ctx context.Context) DailyRetentionFormatResponsePtrOutput {
	return o
}

func (o DailyRetentionFormatResponsePtrOutput) Elem() DailyRetentionFormatResponseOutput {
	return o.ApplyT(func(v *DailyRetentionFormatResponse) DailyRetentionFormatResponse {
		if v != nil {
			return *v
		}
		var ret DailyRetentionFormatResponse
		return ret
	}).(DailyRetentionFormatResponseOutput)
}

// List of days of the month.
func (o DailyRetentionFormatResponsePtrOutput) DaysOfTheMonth() DayResponseArrayOutput {
	return o.ApplyT(func(v *DailyRetentionFormatResponse) []DayResponse {
		if v == nil {
			return nil
		}
		return v.DaysOfTheMonth
	}).(DayResponseArrayOutput)
}

// Daily retention schedule.
type DailyRetentionSchedule struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// DailyRetentionScheduleInput is an input type that accepts DailyRetentionScheduleArgs and DailyRetentionScheduleOutput values.
// You can construct a concrete instance of `DailyRetentionScheduleInput` via:
//
//	DailyRetentionScheduleArgs{...}
type DailyRetentionScheduleInput interface {
	pulumi.Input

	ToDailyRetentionScheduleOutput() DailyRetentionScheduleOutput
	ToDailyRetentionScheduleOutputWithContext(context.Context) DailyRetentionScheduleOutput
}

// Daily retention schedule.
type DailyRetentionScheduleArgs struct {
	// Retention duration of retention Policy.
	RetentionDuration RetentionDurationPtrInput `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes pulumi.StringArrayInput `pulumi:"retentionTimes"`
}

func (DailyRetentionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionSchedule)(nil)).Elem()
}

func (i DailyRetentionScheduleArgs) ToDailyRetentionScheduleOutput() DailyRetentionScheduleOutput {
	return i.ToDailyRetentionScheduleOutputWithContext(context.Background())
}

func (i DailyRetentionScheduleArgs) ToDailyRetentionScheduleOutputWithContext(ctx context.Context) DailyRetentionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionScheduleOutput)
}

func (i DailyRetentionScheduleArgs) ToDailyRetentionSchedulePtrOutput() DailyRetentionSchedulePtrOutput {
	return i.ToDailyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i DailyRetentionScheduleArgs) ToDailyRetentionSchedulePtrOutputWithContext(ctx context.Context) DailyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionScheduleOutput).ToDailyRetentionSchedulePtrOutputWithContext(ctx)
}

// DailyRetentionSchedulePtrInput is an input type that accepts DailyRetentionScheduleArgs, DailyRetentionSchedulePtr and DailyRetentionSchedulePtrOutput values.
// You can construct a concrete instance of `DailyRetentionSchedulePtrInput` via:
//
//	        DailyRetentionScheduleArgs{...}
//
//	or:
//
//	        nil
type DailyRetentionSchedulePtrInput interface {
	pulumi.Input

	ToDailyRetentionSchedulePtrOutput() DailyRetentionSchedulePtrOutput
	ToDailyRetentionSchedulePtrOutputWithContext(context.Context) DailyRetentionSchedulePtrOutput
}

type dailyRetentionSchedulePtrType DailyRetentionScheduleArgs

func DailyRetentionSchedulePtr(v *DailyRetentionScheduleArgs) DailyRetentionSchedulePtrInput {
	return (*dailyRetentionSchedulePtrType)(v)
}

func (*dailyRetentionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionSchedule)(nil)).Elem()
}

func (i *dailyRetentionSchedulePtrType) ToDailyRetentionSchedulePtrOutput() DailyRetentionSchedulePtrOutput {
	return i.ToDailyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i *dailyRetentionSchedulePtrType) ToDailyRetentionSchedulePtrOutputWithContext(ctx context.Context) DailyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyRetentionSchedulePtrOutput)
}

// Daily retention schedule.
type DailyRetentionScheduleOutput struct{ *pulumi.OutputState }

func (DailyRetentionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionSchedule)(nil)).Elem()
}

func (o DailyRetentionScheduleOutput) ToDailyRetentionScheduleOutput() DailyRetentionScheduleOutput {
	return o
}

func (o DailyRetentionScheduleOutput) ToDailyRetentionScheduleOutputWithContext(ctx context.Context) DailyRetentionScheduleOutput {
	return o
}

func (o DailyRetentionScheduleOutput) ToDailyRetentionSchedulePtrOutput() DailyRetentionSchedulePtrOutput {
	return o.ToDailyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (o DailyRetentionScheduleOutput) ToDailyRetentionSchedulePtrOutputWithContext(ctx context.Context) DailyRetentionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DailyRetentionSchedule) *DailyRetentionSchedule {
		return &v
	}).(DailyRetentionSchedulePtrOutput)
}

// Retention duration of retention Policy.
func (o DailyRetentionScheduleOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v DailyRetentionSchedule) *RetentionDuration { return v.RetentionDuration }).(RetentionDurationPtrOutput)
}

// Retention times of retention policy.
func (o DailyRetentionScheduleOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DailyRetentionSchedule) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type DailyRetentionSchedulePtrOutput struct{ *pulumi.OutputState }

func (DailyRetentionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionSchedule)(nil)).Elem()
}

func (o DailyRetentionSchedulePtrOutput) ToDailyRetentionSchedulePtrOutput() DailyRetentionSchedulePtrOutput {
	return o
}

func (o DailyRetentionSchedulePtrOutput) ToDailyRetentionSchedulePtrOutputWithContext(ctx context.Context) DailyRetentionSchedulePtrOutput {
	return o
}

func (o DailyRetentionSchedulePtrOutput) Elem() DailyRetentionScheduleOutput {
	return o.ApplyT(func(v *DailyRetentionSchedule) DailyRetentionSchedule {
		if v != nil {
			return *v
		}
		var ret DailyRetentionSchedule
		return ret
	}).(DailyRetentionScheduleOutput)
}

// Retention duration of retention Policy.
func (o DailyRetentionSchedulePtrOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v *DailyRetentionSchedule) *RetentionDuration {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationPtrOutput)
}

// Retention times of retention policy.
func (o DailyRetentionSchedulePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DailyRetentionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Daily retention schedule.
type DailyRetentionScheduleResponse struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDurationResponse `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// Daily retention schedule.
type DailyRetentionScheduleResponseOutput struct{ *pulumi.OutputState }

func (DailyRetentionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyRetentionScheduleResponse)(nil)).Elem()
}

func (o DailyRetentionScheduleResponseOutput) ToDailyRetentionScheduleResponseOutput() DailyRetentionScheduleResponseOutput {
	return o
}

func (o DailyRetentionScheduleResponseOutput) ToDailyRetentionScheduleResponseOutputWithContext(ctx context.Context) DailyRetentionScheduleResponseOutput {
	return o
}

// Retention duration of retention Policy.
func (o DailyRetentionScheduleResponseOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v DailyRetentionScheduleResponse) *RetentionDurationResponse { return v.RetentionDuration }).(RetentionDurationResponsePtrOutput)
}

// Retention times of retention policy.
func (o DailyRetentionScheduleResponseOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DailyRetentionScheduleResponse) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type DailyRetentionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyRetentionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyRetentionScheduleResponse)(nil)).Elem()
}

func (o DailyRetentionScheduleResponsePtrOutput) ToDailyRetentionScheduleResponsePtrOutput() DailyRetentionScheduleResponsePtrOutput {
	return o
}

func (o DailyRetentionScheduleResponsePtrOutput) ToDailyRetentionScheduleResponsePtrOutputWithContext(ctx context.Context) DailyRetentionScheduleResponsePtrOutput {
	return o
}

func (o DailyRetentionScheduleResponsePtrOutput) Elem() DailyRetentionScheduleResponseOutput {
	return o.ApplyT(func(v *DailyRetentionScheduleResponse) DailyRetentionScheduleResponse {
		if v != nil {
			return *v
		}
		var ret DailyRetentionScheduleResponse
		return ret
	}).(DailyRetentionScheduleResponseOutput)
}

// Retention duration of retention Policy.
func (o DailyRetentionScheduleResponsePtrOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v *DailyRetentionScheduleResponse) *RetentionDurationResponse {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationResponsePtrOutput)
}

// Retention times of retention policy.
func (o DailyRetentionScheduleResponsePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DailyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Daily schedule.
type DailySchedule struct {
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
}

// DailyScheduleInput is an input type that accepts DailyScheduleArgs and DailyScheduleOutput values.
// You can construct a concrete instance of `DailyScheduleInput` via:
//
//	DailyScheduleArgs{...}
type DailyScheduleInput interface {
	pulumi.Input

	ToDailyScheduleOutput() DailyScheduleOutput
	ToDailyScheduleOutputWithContext(context.Context) DailyScheduleOutput
}

// Daily schedule.
type DailyScheduleArgs struct {
	// List of times of day this schedule has to be run.
	ScheduleRunTimes pulumi.StringArrayInput `pulumi:"scheduleRunTimes"`
}

func (DailyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (i DailyScheduleArgs) ToDailyScheduleOutput() DailyScheduleOutput {
	return i.ToDailyScheduleOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput)
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i DailyScheduleArgs) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailyScheduleOutput).ToDailySchedulePtrOutputWithContext(ctx)
}

// DailySchedulePtrInput is an input type that accepts DailyScheduleArgs, DailySchedulePtr and DailySchedulePtrOutput values.
// You can construct a concrete instance of `DailySchedulePtrInput` via:
//
//	        DailyScheduleArgs{...}
//
//	or:
//
//	        nil
type DailySchedulePtrInput interface {
	pulumi.Input

	ToDailySchedulePtrOutput() DailySchedulePtrOutput
	ToDailySchedulePtrOutputWithContext(context.Context) DailySchedulePtrOutput
}

type dailySchedulePtrType DailyScheduleArgs

func DailySchedulePtr(v *DailyScheduleArgs) DailySchedulePtrInput {
	return (*dailySchedulePtrType)(v)
}

func (*dailySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return i.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (i *dailySchedulePtrType) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DailySchedulePtrOutput)
}

// Daily schedule.
type DailyScheduleOutput struct{ *pulumi.OutputState }

func (DailyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailySchedule)(nil)).Elem()
}

func (o DailyScheduleOutput) ToDailyScheduleOutput() DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailyScheduleOutputWithContext(ctx context.Context) DailyScheduleOutput {
	return o
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o.ToDailySchedulePtrOutputWithContext(context.Background())
}

func (o DailyScheduleOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DailySchedule) *DailySchedule {
		return &v
	}).(DailySchedulePtrOutput)
}

// List of times of day this schedule has to be run.
func (o DailyScheduleOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DailySchedule) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

type DailySchedulePtrOutput struct{ *pulumi.OutputState }

func (DailySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailySchedule)(nil)).Elem()
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutput() DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) ToDailySchedulePtrOutputWithContext(ctx context.Context) DailySchedulePtrOutput {
	return o
}

func (o DailySchedulePtrOutput) Elem() DailyScheduleOutput {
	return o.ApplyT(func(v *DailySchedule) DailySchedule {
		if v != nil {
			return *v
		}
		var ret DailySchedule
		return ret
	}).(DailyScheduleOutput)
}

// List of times of day this schedule has to be run.
func (o DailySchedulePtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DailySchedule) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// Daily schedule.
type DailyScheduleResponse struct {
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
}

// Daily schedule.
type DailyScheduleResponseOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutput() DailyScheduleResponseOutput {
	return o
}

func (o DailyScheduleResponseOutput) ToDailyScheduleResponseOutputWithContext(ctx context.Context) DailyScheduleResponseOutput {
	return o
}

// List of times of day this schedule has to be run.
func (o DailyScheduleResponseOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DailyScheduleResponse) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

type DailyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (DailyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DailyScheduleResponse)(nil)).Elem()
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutput() DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) ToDailyScheduleResponsePtrOutputWithContext(ctx context.Context) DailyScheduleResponsePtrOutput {
	return o
}

func (o DailyScheduleResponsePtrOutput) Elem() DailyScheduleResponseOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) DailyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret DailyScheduleResponse
		return ret
	}).(DailyScheduleResponseOutput)
}

// List of times of day this schedule has to be run.
func (o DailyScheduleResponsePtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DailyScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the database configuration.
type DatabaseConfiguration struct {
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DiskConfiguration *DiskConfiguration `pulumi:"diskConfiguration"`
	// The number of database VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// DatabaseConfigurationInput is an input type that accepts DatabaseConfigurationArgs and DatabaseConfigurationOutput values.
// You can construct a concrete instance of `DatabaseConfigurationInput` via:
//
//	DatabaseConfigurationArgs{...}
type DatabaseConfigurationInput interface {
	pulumi.Input

	ToDatabaseConfigurationOutput() DatabaseConfigurationOutput
	ToDatabaseConfigurationOutputWithContext(context.Context) DatabaseConfigurationOutput
}

// Gets or sets the database configuration.
type DatabaseConfigurationArgs struct {
	// The database type.
	DatabaseType pulumi.StringPtrInput `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DiskConfiguration DiskConfigurationPtrInput `pulumi:"diskConfiguration"`
	// The number of database VMs.
	InstanceCount pulumi.Float64Input `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationInput `pulumi:"virtualMachineConfiguration"`
}

func (DatabaseConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfiguration)(nil)).Elem()
}

func (i DatabaseConfigurationArgs) ToDatabaseConfigurationOutput() DatabaseConfigurationOutput {
	return i.ToDatabaseConfigurationOutputWithContext(context.Background())
}

func (i DatabaseConfigurationArgs) ToDatabaseConfigurationOutputWithContext(ctx context.Context) DatabaseConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigurationOutput)
}

func (i DatabaseConfigurationArgs) ToDatabaseConfigurationPtrOutput() DatabaseConfigurationPtrOutput {
	return i.ToDatabaseConfigurationPtrOutputWithContext(context.Background())
}

func (i DatabaseConfigurationArgs) ToDatabaseConfigurationPtrOutputWithContext(ctx context.Context) DatabaseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigurationOutput).ToDatabaseConfigurationPtrOutputWithContext(ctx)
}

// DatabaseConfigurationPtrInput is an input type that accepts DatabaseConfigurationArgs, DatabaseConfigurationPtr and DatabaseConfigurationPtrOutput values.
// You can construct a concrete instance of `DatabaseConfigurationPtrInput` via:
//
//	        DatabaseConfigurationArgs{...}
//
//	or:
//
//	        nil
type DatabaseConfigurationPtrInput interface {
	pulumi.Input

	ToDatabaseConfigurationPtrOutput() DatabaseConfigurationPtrOutput
	ToDatabaseConfigurationPtrOutputWithContext(context.Context) DatabaseConfigurationPtrOutput
}

type databaseConfigurationPtrType DatabaseConfigurationArgs

func DatabaseConfigurationPtr(v *DatabaseConfigurationArgs) DatabaseConfigurationPtrInput {
	return (*databaseConfigurationPtrType)(v)
}

func (*databaseConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfiguration)(nil)).Elem()
}

func (i *databaseConfigurationPtrType) ToDatabaseConfigurationPtrOutput() DatabaseConfigurationPtrOutput {
	return i.ToDatabaseConfigurationPtrOutputWithContext(context.Background())
}

func (i *databaseConfigurationPtrType) ToDatabaseConfigurationPtrOutputWithContext(ctx context.Context) DatabaseConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConfigurationPtrOutput)
}

// Gets or sets the database configuration.
type DatabaseConfigurationOutput struct{ *pulumi.OutputState }

func (DatabaseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfiguration)(nil)).Elem()
}

func (o DatabaseConfigurationOutput) ToDatabaseConfigurationOutput() DatabaseConfigurationOutput {
	return o
}

func (o DatabaseConfigurationOutput) ToDatabaseConfigurationOutputWithContext(ctx context.Context) DatabaseConfigurationOutput {
	return o
}

func (o DatabaseConfigurationOutput) ToDatabaseConfigurationPtrOutput() DatabaseConfigurationPtrOutput {
	return o.ToDatabaseConfigurationPtrOutputWithContext(context.Background())
}

func (o DatabaseConfigurationOutput) ToDatabaseConfigurationPtrOutputWithContext(ctx context.Context) DatabaseConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseConfiguration) *DatabaseConfiguration {
		return &v
	}).(DatabaseConfigurationPtrOutput)
}

// The database type.
func (o DatabaseConfigurationOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseConfiguration) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o DatabaseConfigurationOutput) DiskConfiguration() DiskConfigurationPtrOutput {
	return o.ApplyT(func(v DatabaseConfiguration) *DiskConfiguration { return v.DiskConfiguration }).(DiskConfigurationPtrOutput)
}

// The number of database VMs.
func (o DatabaseConfigurationOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseConfiguration) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o DatabaseConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o DatabaseConfigurationOutput) VirtualMachineConfiguration() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v DatabaseConfiguration) VirtualMachineConfiguration { return v.VirtualMachineConfiguration }).(VirtualMachineConfigurationOutput)
}

type DatabaseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DatabaseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfiguration)(nil)).Elem()
}

func (o DatabaseConfigurationPtrOutput) ToDatabaseConfigurationPtrOutput() DatabaseConfigurationPtrOutput {
	return o
}

func (o DatabaseConfigurationPtrOutput) ToDatabaseConfigurationPtrOutputWithContext(ctx context.Context) DatabaseConfigurationPtrOutput {
	return o
}

func (o DatabaseConfigurationPtrOutput) Elem() DatabaseConfigurationOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) DatabaseConfiguration {
		if v != nil {
			return *v
		}
		var ret DatabaseConfiguration
		return ret
	}).(DatabaseConfigurationOutput)
}

// The database type.
func (o DatabaseConfigurationPtrOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o DatabaseConfigurationPtrOutput) DiskConfiguration() DiskConfigurationPtrOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) *DiskConfiguration {
		if v == nil {
			return nil
		}
		return v.DiskConfiguration
	}).(DiskConfigurationPtrOutput)
}

// The number of database VMs.
func (o DatabaseConfigurationPtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o DatabaseConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o DatabaseConfigurationPtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v *DatabaseConfiguration) *VirtualMachineConfiguration {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationPtrOutput)
}

// Gets or sets the database configuration.
type DatabaseConfigurationResponse struct {
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DiskConfiguration *DiskConfigurationResponse `pulumi:"diskConfiguration"`
	// The number of database VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the database configuration.
type DatabaseConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DatabaseConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseConfigurationResponse)(nil)).Elem()
}

func (o DatabaseConfigurationResponseOutput) ToDatabaseConfigurationResponseOutput() DatabaseConfigurationResponseOutput {
	return o
}

func (o DatabaseConfigurationResponseOutput) ToDatabaseConfigurationResponseOutputWithContext(ctx context.Context) DatabaseConfigurationResponseOutput {
	return o
}

// The database type.
func (o DatabaseConfigurationResponseOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseConfigurationResponse) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o DatabaseConfigurationResponseOutput) DiskConfiguration() DiskConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DatabaseConfigurationResponse) *DiskConfigurationResponse { return v.DiskConfiguration }).(DiskConfigurationResponsePtrOutput)
}

// The number of database VMs.
func (o DatabaseConfigurationResponseOutput) InstanceCount() pulumi.Float64Output {
	return o.ApplyT(func(v DatabaseConfigurationResponse) float64 { return v.InstanceCount }).(pulumi.Float64Output)
}

// The subnet id.
func (o DatabaseConfigurationResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseConfigurationResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o DatabaseConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v DatabaseConfigurationResponse) VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponseOutput)
}

type DatabaseConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConfigurationResponse)(nil)).Elem()
}

func (o DatabaseConfigurationResponsePtrOutput) ToDatabaseConfigurationResponsePtrOutput() DatabaseConfigurationResponsePtrOutput {
	return o
}

func (o DatabaseConfigurationResponsePtrOutput) ToDatabaseConfigurationResponsePtrOutputWithContext(ctx context.Context) DatabaseConfigurationResponsePtrOutput {
	return o
}

func (o DatabaseConfigurationResponsePtrOutput) Elem() DatabaseConfigurationResponseOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) DatabaseConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DatabaseConfigurationResponse
		return ret
	}).(DatabaseConfigurationResponseOutput)
}

// The database type.
func (o DatabaseConfigurationResponsePtrOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o DatabaseConfigurationResponsePtrOutput) DiskConfiguration() DiskConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) *DiskConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.DiskConfiguration
	}).(DiskConfigurationResponsePtrOutput)
}

// The number of database VMs.
func (o DatabaseConfigurationResponsePtrOutput) InstanceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.InstanceCount
	}).(pulumi.Float64PtrOutput)
}

// The subnet id.
func (o DatabaseConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o DatabaseConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *DatabaseConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNames `pulumi:"loadBalancer"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// DatabaseServerFullResourceNamesInput is an input type that accepts DatabaseServerFullResourceNamesArgs and DatabaseServerFullResourceNamesOutput values.
// You can construct a concrete instance of `DatabaseServerFullResourceNamesInput` via:
//
//	DatabaseServerFullResourceNamesArgs{...}
type DatabaseServerFullResourceNamesInput interface {
	pulumi.Input

	ToDatabaseServerFullResourceNamesOutput() DatabaseServerFullResourceNamesOutput
	ToDatabaseServerFullResourceNamesOutputWithContext(context.Context) DatabaseServerFullResourceNamesOutput
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNamesArgs struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
	AvailabilitySetName pulumi.StringPtrInput `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer LoadBalancerResourceNamesPtrInput `pulumi:"loadBalancer"`
	// The list of virtual machine naming details.
	VirtualMachines VirtualMachineResourceNamesArrayInput `pulumi:"virtualMachines"`
}

func (DatabaseServerFullResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseServerFullResourceNames)(nil)).Elem()
}

func (i DatabaseServerFullResourceNamesArgs) ToDatabaseServerFullResourceNamesOutput() DatabaseServerFullResourceNamesOutput {
	return i.ToDatabaseServerFullResourceNamesOutputWithContext(context.Background())
}

func (i DatabaseServerFullResourceNamesArgs) ToDatabaseServerFullResourceNamesOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseServerFullResourceNamesOutput)
}

func (i DatabaseServerFullResourceNamesArgs) ToDatabaseServerFullResourceNamesPtrOutput() DatabaseServerFullResourceNamesPtrOutput {
	return i.ToDatabaseServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i DatabaseServerFullResourceNamesArgs) ToDatabaseServerFullResourceNamesPtrOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseServerFullResourceNamesOutput).ToDatabaseServerFullResourceNamesPtrOutputWithContext(ctx)
}

// DatabaseServerFullResourceNamesPtrInput is an input type that accepts DatabaseServerFullResourceNamesArgs, DatabaseServerFullResourceNamesPtr and DatabaseServerFullResourceNamesPtrOutput values.
// You can construct a concrete instance of `DatabaseServerFullResourceNamesPtrInput` via:
//
//	        DatabaseServerFullResourceNamesArgs{...}
//
//	or:
//
//	        nil
type DatabaseServerFullResourceNamesPtrInput interface {
	pulumi.Input

	ToDatabaseServerFullResourceNamesPtrOutput() DatabaseServerFullResourceNamesPtrOutput
	ToDatabaseServerFullResourceNamesPtrOutputWithContext(context.Context) DatabaseServerFullResourceNamesPtrOutput
}

type databaseServerFullResourceNamesPtrType DatabaseServerFullResourceNamesArgs

func DatabaseServerFullResourceNamesPtr(v *DatabaseServerFullResourceNamesArgs) DatabaseServerFullResourceNamesPtrInput {
	return (*databaseServerFullResourceNamesPtrType)(v)
}

func (*databaseServerFullResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseServerFullResourceNames)(nil)).Elem()
}

func (i *databaseServerFullResourceNamesPtrType) ToDatabaseServerFullResourceNamesPtrOutput() DatabaseServerFullResourceNamesPtrOutput {
	return i.ToDatabaseServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i *databaseServerFullResourceNamesPtrType) ToDatabaseServerFullResourceNamesPtrOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseServerFullResourceNamesPtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNamesOutput struct{ *pulumi.OutputState }

func (DatabaseServerFullResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseServerFullResourceNames)(nil)).Elem()
}

func (o DatabaseServerFullResourceNamesOutput) ToDatabaseServerFullResourceNamesOutput() DatabaseServerFullResourceNamesOutput {
	return o
}

func (o DatabaseServerFullResourceNamesOutput) ToDatabaseServerFullResourceNamesOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesOutput {
	return o
}

func (o DatabaseServerFullResourceNamesOutput) ToDatabaseServerFullResourceNamesPtrOutput() DatabaseServerFullResourceNamesPtrOutput {
	return o.ToDatabaseServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (o DatabaseServerFullResourceNamesOutput) ToDatabaseServerFullResourceNamesPtrOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseServerFullResourceNames) *DatabaseServerFullResourceNames {
		return &v
	}).(DatabaseServerFullResourceNamesPtrOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
func (o DatabaseServerFullResourceNamesOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNames) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o DatabaseServerFullResourceNamesOutput) LoadBalancer() LoadBalancerResourceNamesPtrOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNames) *LoadBalancerResourceNames { return v.LoadBalancer }).(LoadBalancerResourceNamesPtrOutput)
}

// The list of virtual machine naming details.
func (o DatabaseServerFullResourceNamesOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNames) []VirtualMachineResourceNames { return v.VirtualMachines }).(VirtualMachineResourceNamesArrayOutput)
}

type DatabaseServerFullResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (DatabaseServerFullResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseServerFullResourceNames)(nil)).Elem()
}

func (o DatabaseServerFullResourceNamesPtrOutput) ToDatabaseServerFullResourceNamesPtrOutput() DatabaseServerFullResourceNamesPtrOutput {
	return o
}

func (o DatabaseServerFullResourceNamesPtrOutput) ToDatabaseServerFullResourceNamesPtrOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesPtrOutput {
	return o
}

func (o DatabaseServerFullResourceNamesPtrOutput) Elem() DatabaseServerFullResourceNamesOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNames) DatabaseServerFullResourceNames {
		if v != nil {
			return *v
		}
		var ret DatabaseServerFullResourceNames
		return ret
	}).(DatabaseServerFullResourceNamesOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
func (o DatabaseServerFullResourceNamesPtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o DatabaseServerFullResourceNamesPtrOutput) LoadBalancer() LoadBalancerResourceNamesPtrOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNames) *LoadBalancerResourceNames {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesPtrOutput)
}

// The list of virtual machine naming details.
func (o DatabaseServerFullResourceNamesPtrOutput) VirtualMachines() VirtualMachineResourceNamesArrayOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNames) []VirtualMachineResourceNames {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesArrayOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNamesResponse `pulumi:"loadBalancer"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (DatabaseServerFullResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseServerFullResourceNamesResponse)(nil)).Elem()
}

func (o DatabaseServerFullResourceNamesResponseOutput) ToDatabaseServerFullResourceNamesResponseOutput() DatabaseServerFullResourceNamesResponseOutput {
	return o
}

func (o DatabaseServerFullResourceNamesResponseOutput) ToDatabaseServerFullResourceNamesResponseOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesResponseOutput {
	return o
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
func (o DatabaseServerFullResourceNamesResponseOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNamesResponse) *string { return v.AvailabilitySetName }).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o DatabaseServerFullResourceNamesResponseOutput) LoadBalancer() LoadBalancerResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNamesResponse) *LoadBalancerResourceNamesResponse {
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesResponsePtrOutput)
}

// The list of virtual machine naming details.
func (o DatabaseServerFullResourceNamesResponseOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v DatabaseServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

type DatabaseServerFullResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseServerFullResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseServerFullResourceNamesResponse)(nil)).Elem()
}

func (o DatabaseServerFullResourceNamesResponsePtrOutput) ToDatabaseServerFullResourceNamesResponsePtrOutput() DatabaseServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o DatabaseServerFullResourceNamesResponsePtrOutput) ToDatabaseServerFullResourceNamesResponsePtrOutputWithContext(ctx context.Context) DatabaseServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o DatabaseServerFullResourceNamesResponsePtrOutput) Elem() DatabaseServerFullResourceNamesResponseOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNamesResponse) DatabaseServerFullResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret DatabaseServerFullResourceNamesResponse
		return ret
	}).(DatabaseServerFullResourceNamesResponseOutput)
}

// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
func (o DatabaseServerFullResourceNamesResponsePtrOutput) AvailabilitySetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilitySetName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
func (o DatabaseServerFullResourceNamesResponsePtrOutput) LoadBalancer() LoadBalancerResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNamesResponse) *LoadBalancerResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(LoadBalancerResourceNamesResponsePtrOutput)
}

// The list of virtual machine naming details.
func (o DatabaseServerFullResourceNamesResponsePtrOutput) VirtualMachines() VirtualMachineResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v *DatabaseServerFullResourceNamesResponse) []VirtualMachineResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachines
	}).(VirtualMachineResourceNamesResponseArrayOutput)
}

// Database VM details.
type DatabaseVmDetailsResponse struct {
	// Defines the SAP Instance status.
	Status string `pulumi:"status"`
	// Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails   []StorageInformationResponse `pulumi:"storageDetails"`
	VirtualMachineId string                       `pulumi:"virtualMachineId"`
}

// Database VM details.
type DatabaseVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (DatabaseVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseVmDetailsResponse)(nil)).Elem()
}

func (o DatabaseVmDetailsResponseOutput) ToDatabaseVmDetailsResponseOutput() DatabaseVmDetailsResponseOutput {
	return o
}

func (o DatabaseVmDetailsResponseOutput) ToDatabaseVmDetailsResponseOutputWithContext(ctx context.Context) DatabaseVmDetailsResponseOutput {
	return o
}

// Defines the SAP Instance status.
func (o DatabaseVmDetailsResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o DatabaseVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

func (o DatabaseVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type DatabaseVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseVmDetailsResponse)(nil)).Elem()
}

func (o DatabaseVmDetailsResponseArrayOutput) ToDatabaseVmDetailsResponseArrayOutput() DatabaseVmDetailsResponseArrayOutput {
	return o
}

func (o DatabaseVmDetailsResponseArrayOutput) ToDatabaseVmDetailsResponseArrayOutputWithContext(ctx context.Context) DatabaseVmDetailsResponseArrayOutput {
	return o
}

func (o DatabaseVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) DatabaseVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseVmDetailsResponse {
		return vs[0].([]DatabaseVmDetailsResponse)[vs[1].(int)]
	}).(DatabaseVmDetailsResponseOutput)
}

// Day of the week.
type Day struct {
	// Date of the month
	Date *int `pulumi:"date"`
	// Whether Date is last date of month
	IsLast *bool `pulumi:"isLast"`
}

// DayInput is an input type that accepts DayArgs and DayOutput values.
// You can construct a concrete instance of `DayInput` via:
//
//	DayArgs{...}
type DayInput interface {
	pulumi.Input

	ToDayOutput() DayOutput
	ToDayOutputWithContext(context.Context) DayOutput
}

// Day of the week.
type DayArgs struct {
	// Date of the month
	Date pulumi.IntPtrInput `pulumi:"date"`
	// Whether Date is last date of month
	IsLast pulumi.BoolPtrInput `pulumi:"isLast"`
}

func (DayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Day)(nil)).Elem()
}

func (i DayArgs) ToDayOutput() DayOutput {
	return i.ToDayOutputWithContext(context.Background())
}

func (i DayArgs) ToDayOutputWithContext(ctx context.Context) DayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DayOutput)
}

// DayArrayInput is an input type that accepts DayArray and DayArrayOutput values.
// You can construct a concrete instance of `DayArrayInput` via:
//
//	DayArray{ DayArgs{...} }
type DayArrayInput interface {
	pulumi.Input

	ToDayArrayOutput() DayArrayOutput
	ToDayArrayOutputWithContext(context.Context) DayArrayOutput
}

type DayArray []DayInput

func (DayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Day)(nil)).Elem()
}

func (i DayArray) ToDayArrayOutput() DayArrayOutput {
	return i.ToDayArrayOutputWithContext(context.Background())
}

func (i DayArray) ToDayArrayOutputWithContext(ctx context.Context) DayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DayArrayOutput)
}

// Day of the week.
type DayOutput struct{ *pulumi.OutputState }

func (DayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Day)(nil)).Elem()
}

func (o DayOutput) ToDayOutput() DayOutput {
	return o
}

func (o DayOutput) ToDayOutputWithContext(ctx context.Context) DayOutput {
	return o
}

// Date of the month
func (o DayOutput) Date() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Day) *int { return v.Date }).(pulumi.IntPtrOutput)
}

// Whether Date is last date of month
func (o DayOutput) IsLast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Day) *bool { return v.IsLast }).(pulumi.BoolPtrOutput)
}

type DayArrayOutput struct{ *pulumi.OutputState }

func (DayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Day)(nil)).Elem()
}

func (o DayArrayOutput) ToDayArrayOutput() DayArrayOutput {
	return o
}

func (o DayArrayOutput) ToDayArrayOutputWithContext(ctx context.Context) DayArrayOutput {
	return o
}

func (o DayArrayOutput) Index(i pulumi.IntInput) DayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Day {
		return vs[0].([]Day)[vs[1].(int)]
	}).(DayOutput)
}

// Day of the week.
type DayResponse struct {
	// Date of the month
	Date *int `pulumi:"date"`
	// Whether Date is last date of month
	IsLast *bool `pulumi:"isLast"`
}

// Day of the week.
type DayResponseOutput struct{ *pulumi.OutputState }

func (DayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayResponse)(nil)).Elem()
}

func (o DayResponseOutput) ToDayResponseOutput() DayResponseOutput {
	return o
}

func (o DayResponseOutput) ToDayResponseOutputWithContext(ctx context.Context) DayResponseOutput {
	return o
}

// Date of the month
func (o DayResponseOutput) Date() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DayResponse) *int { return v.Date }).(pulumi.IntPtrOutput)
}

// Whether Date is last date of month
func (o DayResponseOutput) IsLast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DayResponse) *bool { return v.IsLast }).(pulumi.BoolPtrOutput)
}

type DayResponseArrayOutput struct{ *pulumi.OutputState }

func (DayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayResponse)(nil)).Elem()
}

func (o DayResponseArrayOutput) ToDayResponseArrayOutput() DayResponseArrayOutput {
	return o
}

func (o DayResponseArrayOutput) ToDayResponseArrayOutputWithContext(ctx context.Context) DayResponseArrayOutput {
	return o
}

func (o DayResponseArrayOutput) Index(i pulumi.IntInput) DayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DayResponse {
		return vs[0].([]DayResponse)[vs[1].(int)]
	}).(DayResponseOutput)
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackages struct {
	// The deployer VM packages storage account id
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The URL to the deployer VM packages file.
	Url *string `pulumi:"url"`
}

// DeployerVmPackagesInput is an input type that accepts DeployerVmPackagesArgs and DeployerVmPackagesOutput values.
// You can construct a concrete instance of `DeployerVmPackagesInput` via:
//
//	DeployerVmPackagesArgs{...}
type DeployerVmPackagesInput interface {
	pulumi.Input

	ToDeployerVmPackagesOutput() DeployerVmPackagesOutput
	ToDeployerVmPackagesOutputWithContext(context.Context) DeployerVmPackagesOutput
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackagesArgs struct {
	// The deployer VM packages storage account id
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// The URL to the deployer VM packages file.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DeployerVmPackagesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployerVmPackages)(nil)).Elem()
}

func (i DeployerVmPackagesArgs) ToDeployerVmPackagesOutput() DeployerVmPackagesOutput {
	return i.ToDeployerVmPackagesOutputWithContext(context.Background())
}

func (i DeployerVmPackagesArgs) ToDeployerVmPackagesOutputWithContext(ctx context.Context) DeployerVmPackagesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployerVmPackagesOutput)
}

func (i DeployerVmPackagesArgs) ToDeployerVmPackagesPtrOutput() DeployerVmPackagesPtrOutput {
	return i.ToDeployerVmPackagesPtrOutputWithContext(context.Background())
}

func (i DeployerVmPackagesArgs) ToDeployerVmPackagesPtrOutputWithContext(ctx context.Context) DeployerVmPackagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployerVmPackagesOutput).ToDeployerVmPackagesPtrOutputWithContext(ctx)
}

// DeployerVmPackagesPtrInput is an input type that accepts DeployerVmPackagesArgs, DeployerVmPackagesPtr and DeployerVmPackagesPtrOutput values.
// You can construct a concrete instance of `DeployerVmPackagesPtrInput` via:
//
//	        DeployerVmPackagesArgs{...}
//
//	or:
//
//	        nil
type DeployerVmPackagesPtrInput interface {
	pulumi.Input

	ToDeployerVmPackagesPtrOutput() DeployerVmPackagesPtrOutput
	ToDeployerVmPackagesPtrOutputWithContext(context.Context) DeployerVmPackagesPtrOutput
}

type deployerVmPackagesPtrType DeployerVmPackagesArgs

func DeployerVmPackagesPtr(v *DeployerVmPackagesArgs) DeployerVmPackagesPtrInput {
	return (*deployerVmPackagesPtrType)(v)
}

func (*deployerVmPackagesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployerVmPackages)(nil)).Elem()
}

func (i *deployerVmPackagesPtrType) ToDeployerVmPackagesPtrOutput() DeployerVmPackagesPtrOutput {
	return i.ToDeployerVmPackagesPtrOutputWithContext(context.Background())
}

func (i *deployerVmPackagesPtrType) ToDeployerVmPackagesPtrOutputWithContext(ctx context.Context) DeployerVmPackagesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployerVmPackagesPtrOutput)
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackagesOutput struct{ *pulumi.OutputState }

func (DeployerVmPackagesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployerVmPackages)(nil)).Elem()
}

func (o DeployerVmPackagesOutput) ToDeployerVmPackagesOutput() DeployerVmPackagesOutput {
	return o
}

func (o DeployerVmPackagesOutput) ToDeployerVmPackagesOutputWithContext(ctx context.Context) DeployerVmPackagesOutput {
	return o
}

func (o DeployerVmPackagesOutput) ToDeployerVmPackagesPtrOutput() DeployerVmPackagesPtrOutput {
	return o.ToDeployerVmPackagesPtrOutputWithContext(context.Background())
}

func (o DeployerVmPackagesOutput) ToDeployerVmPackagesPtrOutputWithContext(ctx context.Context) DeployerVmPackagesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeployerVmPackages) *DeployerVmPackages {
		return &v
	}).(DeployerVmPackagesPtrOutput)
}

// The deployer VM packages storage account id
func (o DeployerVmPackagesOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeployerVmPackages) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The URL to the deployer VM packages file.
func (o DeployerVmPackagesOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeployerVmPackages) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DeployerVmPackagesPtrOutput struct{ *pulumi.OutputState }

func (DeployerVmPackagesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployerVmPackages)(nil)).Elem()
}

func (o DeployerVmPackagesPtrOutput) ToDeployerVmPackagesPtrOutput() DeployerVmPackagesPtrOutput {
	return o
}

func (o DeployerVmPackagesPtrOutput) ToDeployerVmPackagesPtrOutputWithContext(ctx context.Context) DeployerVmPackagesPtrOutput {
	return o
}

func (o DeployerVmPackagesPtrOutput) Elem() DeployerVmPackagesOutput {
	return o.ApplyT(func(v *DeployerVmPackages) DeployerVmPackages {
		if v != nil {
			return *v
		}
		var ret DeployerVmPackages
		return ret
	}).(DeployerVmPackagesOutput)
}

// The deployer VM packages storage account id
func (o DeployerVmPackagesPtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployerVmPackages) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The URL to the deployer VM packages file.
func (o DeployerVmPackagesPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployerVmPackages) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackagesResponse struct {
	// The deployer VM packages storage account id
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The URL to the deployer VM packages file.
	Url *string `pulumi:"url"`
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackagesResponseOutput struct{ *pulumi.OutputState }

func (DeployerVmPackagesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeployerVmPackagesResponse)(nil)).Elem()
}

func (o DeployerVmPackagesResponseOutput) ToDeployerVmPackagesResponseOutput() DeployerVmPackagesResponseOutput {
	return o
}

func (o DeployerVmPackagesResponseOutput) ToDeployerVmPackagesResponseOutputWithContext(ctx context.Context) DeployerVmPackagesResponseOutput {
	return o
}

// The deployer VM packages storage account id
func (o DeployerVmPackagesResponseOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeployerVmPackagesResponse) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// The URL to the deployer VM packages file.
func (o DeployerVmPackagesResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeployerVmPackagesResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DeployerVmPackagesResponsePtrOutput struct{ *pulumi.OutputState }

func (DeployerVmPackagesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployerVmPackagesResponse)(nil)).Elem()
}

func (o DeployerVmPackagesResponsePtrOutput) ToDeployerVmPackagesResponsePtrOutput() DeployerVmPackagesResponsePtrOutput {
	return o
}

func (o DeployerVmPackagesResponsePtrOutput) ToDeployerVmPackagesResponsePtrOutputWithContext(ctx context.Context) DeployerVmPackagesResponsePtrOutput {
	return o
}

func (o DeployerVmPackagesResponsePtrOutput) Elem() DeployerVmPackagesResponseOutput {
	return o.ApplyT(func(v *DeployerVmPackagesResponse) DeployerVmPackagesResponse {
		if v != nil {
			return *v
		}
		var ret DeployerVmPackagesResponse
		return ret
	}).(DeployerVmPackagesResponseOutput)
}

// The deployer VM packages storage account id
func (o DeployerVmPackagesResponsePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployerVmPackagesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The URL to the deployer VM packages file.
func (o DeployerVmPackagesResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployerVmPackagesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Deployment Configuration.
type DeploymentConfiguration struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'Deployment'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// DeploymentConfigurationInput is an input type that accepts DeploymentConfigurationArgs and DeploymentConfigurationOutput values.
// You can construct a concrete instance of `DeploymentConfigurationInput` via:
//
//	DeploymentConfigurationArgs{...}
type DeploymentConfigurationInput interface {
	pulumi.Input

	ToDeploymentConfigurationOutput() DeploymentConfigurationOutput
	ToDeploymentConfigurationOutputWithContext(context.Context) DeploymentConfigurationOutput
}

// Deployment Configuration.
type DeploymentConfigurationArgs struct {
	// The geo-location where the SAP system is to be created.
	AppLocation pulumi.StringPtrInput `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'Deployment'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration pulumi.Input `pulumi:"infrastructureConfiguration"`
	// The software configuration.
	SoftwareConfiguration pulumi.Input `pulumi:"softwareConfiguration"`
}

func (DeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfiguration)(nil)).Elem()
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutput() DeploymentConfigurationOutput {
	return i.ToDeploymentConfigurationOutputWithContext(context.Background())
}

func (i DeploymentConfigurationArgs) ToDeploymentConfigurationOutputWithContext(ctx context.Context) DeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentConfigurationOutput)
}

// Deployment Configuration.
type DeploymentConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfiguration)(nil)).Elem()
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationOutput() DeploymentConfigurationOutput {
	return o
}

func (o DeploymentConfigurationOutput) ToDeploymentConfigurationOutputWithContext(ctx context.Context) DeploymentConfigurationOutput {
	return o
}

// The geo-location where the SAP system is to be created.
func (o DeploymentConfigurationOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConfiguration) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'Deployment'.
func (o DeploymentConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The infrastructure configuration.
func (o DeploymentConfigurationOutput) InfrastructureConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentConfiguration) interface{} { return v.InfrastructureConfiguration }).(pulumi.AnyOutput)
}

// The software configuration.
func (o DeploymentConfigurationOutput) SoftwareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentConfiguration) interface{} { return v.SoftwareConfiguration }).(pulumi.AnyOutput)
}

// Deployment Configuration.
type DeploymentConfigurationResponse struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'Deployment'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Deployment Configuration.
type DeploymentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentConfigurationResponse)(nil)).Elem()
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutput() DeploymentConfigurationResponseOutput {
	return o
}

func (o DeploymentConfigurationResponseOutput) ToDeploymentConfigurationResponseOutputWithContext(ctx context.Context) DeploymentConfigurationResponseOutput {
	return o
}

// The geo-location where the SAP system is to be created.
func (o DeploymentConfigurationResponseOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'Deployment'.
func (o DeploymentConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The infrastructure configuration.
func (o DeploymentConfigurationResponseOutput) InfrastructureConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) interface{} { return v.InfrastructureConfiguration }).(pulumi.AnyOutput)
}

// The software configuration.
func (o DeploymentConfigurationResponseOutput) SoftwareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentConfigurationResponse) interface{} { return v.SoftwareConfiguration }).(pulumi.AnyOutput)
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfiguration struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'DeploymentWithOSConfig'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The OS and SAP configuration.
	OsSapConfiguration *OsSapConfiguration `pulumi:"osSapConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// DeploymentWithOSConfigurationInput is an input type that accepts DeploymentWithOSConfigurationArgs and DeploymentWithOSConfigurationOutput values.
// You can construct a concrete instance of `DeploymentWithOSConfigurationInput` via:
//
//	DeploymentWithOSConfigurationArgs{...}
type DeploymentWithOSConfigurationInput interface {
	pulumi.Input

	ToDeploymentWithOSConfigurationOutput() DeploymentWithOSConfigurationOutput
	ToDeploymentWithOSConfigurationOutputWithContext(context.Context) DeploymentWithOSConfigurationOutput
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfigurationArgs struct {
	// The geo-location where the SAP system is to be created.
	AppLocation pulumi.StringPtrInput `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'DeploymentWithOSConfig'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration pulumi.Input `pulumi:"infrastructureConfiguration"`
	// The OS and SAP configuration.
	OsSapConfiguration OsSapConfigurationPtrInput `pulumi:"osSapConfiguration"`
	// The software configuration.
	SoftwareConfiguration pulumi.Input `pulumi:"softwareConfiguration"`
}

func (DeploymentWithOSConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentWithOSConfiguration)(nil)).Elem()
}

func (i DeploymentWithOSConfigurationArgs) ToDeploymentWithOSConfigurationOutput() DeploymentWithOSConfigurationOutput {
	return i.ToDeploymentWithOSConfigurationOutputWithContext(context.Background())
}

func (i DeploymentWithOSConfigurationArgs) ToDeploymentWithOSConfigurationOutputWithContext(ctx context.Context) DeploymentWithOSConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentWithOSConfigurationOutput)
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentWithOSConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentWithOSConfiguration)(nil)).Elem()
}

func (o DeploymentWithOSConfigurationOutput) ToDeploymentWithOSConfigurationOutput() DeploymentWithOSConfigurationOutput {
	return o
}

func (o DeploymentWithOSConfigurationOutput) ToDeploymentWithOSConfigurationOutputWithContext(ctx context.Context) DeploymentWithOSConfigurationOutput {
	return o
}

// The geo-location where the SAP system is to be created.
func (o DeploymentWithOSConfigurationOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentWithOSConfiguration) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'DeploymentWithOSConfig'.
func (o DeploymentWithOSConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentWithOSConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The infrastructure configuration.
func (o DeploymentWithOSConfigurationOutput) InfrastructureConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentWithOSConfiguration) interface{} { return v.InfrastructureConfiguration }).(pulumi.AnyOutput)
}

// The OS and SAP configuration.
func (o DeploymentWithOSConfigurationOutput) OsSapConfiguration() OsSapConfigurationPtrOutput {
	return o.ApplyT(func(v DeploymentWithOSConfiguration) *OsSapConfiguration { return v.OsSapConfiguration }).(OsSapConfigurationPtrOutput)
}

// The software configuration.
func (o DeploymentWithOSConfigurationOutput) SoftwareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentWithOSConfiguration) interface{} { return v.SoftwareConfiguration }).(pulumi.AnyOutput)
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfigurationResponse struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'DeploymentWithOSConfig'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The OS and SAP configuration.
	OsSapConfiguration *OsSapConfigurationResponse `pulumi:"osSapConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentWithOSConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentWithOSConfigurationResponse)(nil)).Elem()
}

func (o DeploymentWithOSConfigurationResponseOutput) ToDeploymentWithOSConfigurationResponseOutput() DeploymentWithOSConfigurationResponseOutput {
	return o
}

func (o DeploymentWithOSConfigurationResponseOutput) ToDeploymentWithOSConfigurationResponseOutputWithContext(ctx context.Context) DeploymentWithOSConfigurationResponseOutput {
	return o
}

// The geo-location where the SAP system is to be created.
func (o DeploymentWithOSConfigurationResponseOutput) AppLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentWithOSConfigurationResponse) *string { return v.AppLocation }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'DeploymentWithOSConfig'.
func (o DeploymentWithOSConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentWithOSConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The infrastructure configuration.
func (o DeploymentWithOSConfigurationResponseOutput) InfrastructureConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentWithOSConfigurationResponse) interface{} { return v.InfrastructureConfiguration }).(pulumi.AnyOutput)
}

// The OS and SAP configuration.
func (o DeploymentWithOSConfigurationResponseOutput) OsSapConfiguration() OsSapConfigurationResponsePtrOutput {
	return o.ApplyT(func(v DeploymentWithOSConfigurationResponse) *OsSapConfigurationResponse { return v.OsSapConfiguration }).(OsSapConfigurationResponsePtrOutput)
}

// The software configuration.
func (o DeploymentWithOSConfigurationResponseOutput) SoftwareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentWithOSConfigurationResponse) interface{} { return v.SoftwareConfiguration }).(pulumi.AnyOutput)
}

// Discovery Details.
type DiscoveryConfiguration struct {
	// The virtual machine ID of the Central Server.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The configuration Type.
	// Expected value is 'Discovery'.
	ConfigurationType string `pulumi:"configurationType"`
	// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
	ManagedRgStorageAccountName *string `pulumi:"managedRgStorageAccountName"`
}

// DiscoveryConfigurationInput is an input type that accepts DiscoveryConfigurationArgs and DiscoveryConfigurationOutput values.
// You can construct a concrete instance of `DiscoveryConfigurationInput` via:
//
//	DiscoveryConfigurationArgs{...}
type DiscoveryConfigurationInput interface {
	pulumi.Input

	ToDiscoveryConfigurationOutput() DiscoveryConfigurationOutput
	ToDiscoveryConfigurationOutputWithContext(context.Context) DiscoveryConfigurationOutput
}

// Discovery Details.
type DiscoveryConfigurationArgs struct {
	// The virtual machine ID of the Central Server.
	CentralServerVmId pulumi.StringPtrInput `pulumi:"centralServerVmId"`
	// The configuration Type.
	// Expected value is 'Discovery'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
	// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
	ManagedRgStorageAccountName pulumi.StringPtrInput `pulumi:"managedRgStorageAccountName"`
}

func (DiscoveryConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryConfiguration)(nil)).Elem()
}

func (i DiscoveryConfigurationArgs) ToDiscoveryConfigurationOutput() DiscoveryConfigurationOutput {
	return i.ToDiscoveryConfigurationOutputWithContext(context.Background())
}

func (i DiscoveryConfigurationArgs) ToDiscoveryConfigurationOutputWithContext(ctx context.Context) DiscoveryConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiscoveryConfigurationOutput)
}

// Discovery Details.
type DiscoveryConfigurationOutput struct{ *pulumi.OutputState }

func (DiscoveryConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryConfiguration)(nil)).Elem()
}

func (o DiscoveryConfigurationOutput) ToDiscoveryConfigurationOutput() DiscoveryConfigurationOutput {
	return o
}

func (o DiscoveryConfigurationOutput) ToDiscoveryConfigurationOutputWithContext(ctx context.Context) DiscoveryConfigurationOutput {
	return o
}

// The virtual machine ID of the Central Server.
func (o DiscoveryConfigurationOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryConfiguration) *string { return v.CentralServerVmId }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'Discovery'.
func (o DiscoveryConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
func (o DiscoveryConfigurationOutput) ManagedRgStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryConfiguration) *string { return v.ManagedRgStorageAccountName }).(pulumi.StringPtrOutput)
}

// Discovery Details.
type DiscoveryConfigurationResponse struct {
	// The geo-location where the SAP system exists.
	AppLocation string `pulumi:"appLocation"`
	// The virtual machine ID of the Central Server.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The configuration Type.
	// Expected value is 'Discovery'.
	ConfigurationType string `pulumi:"configurationType"`
	// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
	ManagedRgStorageAccountName *string `pulumi:"managedRgStorageAccountName"`
}

// Discovery Details.
type DiscoveryConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryConfigurationResponse)(nil)).Elem()
}

func (o DiscoveryConfigurationResponseOutput) ToDiscoveryConfigurationResponseOutput() DiscoveryConfigurationResponseOutput {
	return o
}

func (o DiscoveryConfigurationResponseOutput) ToDiscoveryConfigurationResponseOutputWithContext(ctx context.Context) DiscoveryConfigurationResponseOutput {
	return o
}

// The geo-location where the SAP system exists.
func (o DiscoveryConfigurationResponseOutput) AppLocation() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryConfigurationResponse) string { return v.AppLocation }).(pulumi.StringOutput)
}

// The virtual machine ID of the Central Server.
func (o DiscoveryConfigurationResponseOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryConfigurationResponse) *string { return v.CentralServerVmId }).(pulumi.StringPtrOutput)
}

// The configuration Type.
// Expected value is 'Discovery'.
func (o DiscoveryConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
func (o DiscoveryConfigurationResponseOutput) ManagedRgStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiscoveryConfigurationResponse) *string { return v.ManagedRgStorageAccountName }).(pulumi.StringPtrOutput)
}

// The Disk Configuration Details.
type DiskConfiguration struct {
	// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
	DiskVolumeConfigurations map[string]DiskVolumeConfiguration `pulumi:"diskVolumeConfigurations"`
}

// DiskConfigurationInput is an input type that accepts DiskConfigurationArgs and DiskConfigurationOutput values.
// You can construct a concrete instance of `DiskConfigurationInput` via:
//
//	DiskConfigurationArgs{...}
type DiskConfigurationInput interface {
	pulumi.Input

	ToDiskConfigurationOutput() DiskConfigurationOutput
	ToDiskConfigurationOutputWithContext(context.Context) DiskConfigurationOutput
}

// The Disk Configuration Details.
type DiskConfigurationArgs struct {
	// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
	DiskVolumeConfigurations DiskVolumeConfigurationMapInput `pulumi:"diskVolumeConfigurations"`
}

func (DiskConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskConfiguration)(nil)).Elem()
}

func (i DiskConfigurationArgs) ToDiskConfigurationOutput() DiskConfigurationOutput {
	return i.ToDiskConfigurationOutputWithContext(context.Background())
}

func (i DiskConfigurationArgs) ToDiskConfigurationOutputWithContext(ctx context.Context) DiskConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskConfigurationOutput)
}

func (i DiskConfigurationArgs) ToDiskConfigurationPtrOutput() DiskConfigurationPtrOutput {
	return i.ToDiskConfigurationPtrOutputWithContext(context.Background())
}

func (i DiskConfigurationArgs) ToDiskConfigurationPtrOutputWithContext(ctx context.Context) DiskConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskConfigurationOutput).ToDiskConfigurationPtrOutputWithContext(ctx)
}

// DiskConfigurationPtrInput is an input type that accepts DiskConfigurationArgs, DiskConfigurationPtr and DiskConfigurationPtrOutput values.
// You can construct a concrete instance of `DiskConfigurationPtrInput` via:
//
//	        DiskConfigurationArgs{...}
//
//	or:
//
//	        nil
type DiskConfigurationPtrInput interface {
	pulumi.Input

	ToDiskConfigurationPtrOutput() DiskConfigurationPtrOutput
	ToDiskConfigurationPtrOutputWithContext(context.Context) DiskConfigurationPtrOutput
}

type diskConfigurationPtrType DiskConfigurationArgs

func DiskConfigurationPtr(v *DiskConfigurationArgs) DiskConfigurationPtrInput {
	return (*diskConfigurationPtrType)(v)
}

func (*diskConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskConfiguration)(nil)).Elem()
}

func (i *diskConfigurationPtrType) ToDiskConfigurationPtrOutput() DiskConfigurationPtrOutput {
	return i.ToDiskConfigurationPtrOutputWithContext(context.Background())
}

func (i *diskConfigurationPtrType) ToDiskConfigurationPtrOutputWithContext(ctx context.Context) DiskConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskConfigurationPtrOutput)
}

// The Disk Configuration Details.
type DiskConfigurationOutput struct{ *pulumi.OutputState }

func (DiskConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskConfiguration)(nil)).Elem()
}

func (o DiskConfigurationOutput) ToDiskConfigurationOutput() DiskConfigurationOutput {
	return o
}

func (o DiskConfigurationOutput) ToDiskConfigurationOutputWithContext(ctx context.Context) DiskConfigurationOutput {
	return o
}

func (o DiskConfigurationOutput) ToDiskConfigurationPtrOutput() DiskConfigurationPtrOutput {
	return o.ToDiskConfigurationPtrOutputWithContext(context.Background())
}

func (o DiskConfigurationOutput) ToDiskConfigurationPtrOutputWithContext(ctx context.Context) DiskConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskConfiguration) *DiskConfiguration {
		return &v
	}).(DiskConfigurationPtrOutput)
}

// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
func (o DiskConfigurationOutput) DiskVolumeConfigurations() DiskVolumeConfigurationMapOutput {
	return o.ApplyT(func(v DiskConfiguration) map[string]DiskVolumeConfiguration { return v.DiskVolumeConfigurations }).(DiskVolumeConfigurationMapOutput)
}

type DiskConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DiskConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskConfiguration)(nil)).Elem()
}

func (o DiskConfigurationPtrOutput) ToDiskConfigurationPtrOutput() DiskConfigurationPtrOutput {
	return o
}

func (o DiskConfigurationPtrOutput) ToDiskConfigurationPtrOutputWithContext(ctx context.Context) DiskConfigurationPtrOutput {
	return o
}

func (o DiskConfigurationPtrOutput) Elem() DiskConfigurationOutput {
	return o.ApplyT(func(v *DiskConfiguration) DiskConfiguration {
		if v != nil {
			return *v
		}
		var ret DiskConfiguration
		return ret
	}).(DiskConfigurationOutput)
}

// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
func (o DiskConfigurationPtrOutput) DiskVolumeConfigurations() DiskVolumeConfigurationMapOutput {
	return o.ApplyT(func(v *DiskConfiguration) map[string]DiskVolumeConfiguration {
		if v == nil {
			return nil
		}
		return v.DiskVolumeConfigurations
	}).(DiskVolumeConfigurationMapOutput)
}

// The Disk Configuration Details.
type DiskConfigurationResponse struct {
	// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
	DiskVolumeConfigurations map[string]DiskVolumeConfigurationResponse `pulumi:"diskVolumeConfigurations"`
}

// The Disk Configuration Details.
type DiskConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiskConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskConfigurationResponse)(nil)).Elem()
}

func (o DiskConfigurationResponseOutput) ToDiskConfigurationResponseOutput() DiskConfigurationResponseOutput {
	return o
}

func (o DiskConfigurationResponseOutput) ToDiskConfigurationResponseOutputWithContext(ctx context.Context) DiskConfigurationResponseOutput {
	return o
}

// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
func (o DiskConfigurationResponseOutput) DiskVolumeConfigurations() DiskVolumeConfigurationResponseMapOutput {
	return o.ApplyT(func(v DiskConfigurationResponse) map[string]DiskVolumeConfigurationResponse {
		return v.DiskVolumeConfigurations
	}).(DiskVolumeConfigurationResponseMapOutput)
}

type DiskConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskConfigurationResponse)(nil)).Elem()
}

func (o DiskConfigurationResponsePtrOutput) ToDiskConfigurationResponsePtrOutput() DiskConfigurationResponsePtrOutput {
	return o
}

func (o DiskConfigurationResponsePtrOutput) ToDiskConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskConfigurationResponsePtrOutput {
	return o
}

func (o DiskConfigurationResponsePtrOutput) Elem() DiskConfigurationResponseOutput {
	return o.ApplyT(func(v *DiskConfigurationResponse) DiskConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DiskConfigurationResponse
		return ret
	}).(DiskConfigurationResponseOutput)
}

// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
func (o DiskConfigurationResponsePtrOutput) DiskVolumeConfigurations() DiskVolumeConfigurationResponseMapOutput {
	return o.ApplyT(func(v *DiskConfigurationResponse) map[string]DiskVolumeConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.DiskVolumeConfigurations
	}).(DiskVolumeConfigurationResponseMapOutput)
}

// The supported disk size details for a disk type.
type DiskDetailsResponse struct {
	// The disk tier, e.g. P10, E10.
	DiskTier *string `pulumi:"diskTier"`
	// The disk Iops.
	IopsReadWrite *float64 `pulumi:"iopsReadWrite"`
	// The maximum supported disk count.
	MaximumSupportedDiskCount *float64 `pulumi:"maximumSupportedDiskCount"`
	// The disk provisioned throughput in MBps.
	MbpsReadWrite *float64 `pulumi:"mbpsReadWrite"`
	// The minimum supported disk count.
	MinimumSupportedDiskCount *float64 `pulumi:"minimumSupportedDiskCount"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
	Sku *DiskSkuResponse `pulumi:"sku"`
}

// The supported disk size details for a disk type.
type DiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (DiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskDetailsResponse)(nil)).Elem()
}

func (o DiskDetailsResponseOutput) ToDiskDetailsResponseOutput() DiskDetailsResponseOutput {
	return o
}

func (o DiskDetailsResponseOutput) ToDiskDetailsResponseOutputWithContext(ctx context.Context) DiskDetailsResponseOutput {
	return o
}

// The disk tier, e.g. P10, E10.
func (o DiskDetailsResponseOutput) DiskTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *string { return v.DiskTier }).(pulumi.StringPtrOutput)
}

// The disk Iops.
func (o DiskDetailsResponseOutput) IopsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.IopsReadWrite }).(pulumi.Float64PtrOutput)
}

// The maximum supported disk count.
func (o DiskDetailsResponseOutput) MaximumSupportedDiskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MaximumSupportedDiskCount }).(pulumi.Float64PtrOutput)
}

// The disk provisioned throughput in MBps.
func (o DiskDetailsResponseOutput) MbpsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MbpsReadWrite }).(pulumi.Float64PtrOutput)
}

// The minimum supported disk count.
func (o DiskDetailsResponseOutput) MinimumSupportedDiskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MinimumSupportedDiskCount }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskDetailsResponseOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
func (o DiskDetailsResponseOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *DiskSkuResponse { return v.Sku }).(DiskSkuResponsePtrOutput)
}

type DiskDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskDetailsResponse)(nil)).Elem()
}

func (o DiskDetailsResponseArrayOutput) ToDiskDetailsResponseArrayOutput() DiskDetailsResponseArrayOutput {
	return o
}

func (o DiskDetailsResponseArrayOutput) ToDiskDetailsResponseArrayOutputWithContext(ctx context.Context) DiskDetailsResponseArrayOutput {
	return o
}

func (o DiskDetailsResponseArrayOutput) Index(i pulumi.IntInput) DiskDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskDetailsResponse {
		return vs[0].([]DiskDetailsResponse)[vs[1].(int)]
	}).(DiskDetailsResponseOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionProperties struct {
	// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
	DiskLunList []int `pulumi:"diskLunList"`
	// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
	IsInclusionList bool `pulumi:"isInclusionList"`
}

// DiskExclusionPropertiesInput is an input type that accepts DiskExclusionPropertiesArgs and DiskExclusionPropertiesOutput values.
// You can construct a concrete instance of `DiskExclusionPropertiesInput` via:
//
//	DiskExclusionPropertiesArgs{...}
type DiskExclusionPropertiesInput interface {
	pulumi.Input

	ToDiskExclusionPropertiesOutput() DiskExclusionPropertiesOutput
	ToDiskExclusionPropertiesOutputWithContext(context.Context) DiskExclusionPropertiesOutput
}

// Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionPropertiesArgs struct {
	// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
	DiskLunList pulumi.IntArrayInput `pulumi:"diskLunList"`
	// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
	IsInclusionList pulumi.BoolInput `pulumi:"isInclusionList"`
}

func (DiskExclusionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskExclusionProperties)(nil)).Elem()
}

func (i DiskExclusionPropertiesArgs) ToDiskExclusionPropertiesOutput() DiskExclusionPropertiesOutput {
	return i.ToDiskExclusionPropertiesOutputWithContext(context.Background())
}

func (i DiskExclusionPropertiesArgs) ToDiskExclusionPropertiesOutputWithContext(ctx context.Context) DiskExclusionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskExclusionPropertiesOutput)
}

func (i DiskExclusionPropertiesArgs) ToDiskExclusionPropertiesPtrOutput() DiskExclusionPropertiesPtrOutput {
	return i.ToDiskExclusionPropertiesPtrOutputWithContext(context.Background())
}

func (i DiskExclusionPropertiesArgs) ToDiskExclusionPropertiesPtrOutputWithContext(ctx context.Context) DiskExclusionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskExclusionPropertiesOutput).ToDiskExclusionPropertiesPtrOutputWithContext(ctx)
}

// DiskExclusionPropertiesPtrInput is an input type that accepts DiskExclusionPropertiesArgs, DiskExclusionPropertiesPtr and DiskExclusionPropertiesPtrOutput values.
// You can construct a concrete instance of `DiskExclusionPropertiesPtrInput` via:
//
//	        DiskExclusionPropertiesArgs{...}
//
//	or:
//
//	        nil
type DiskExclusionPropertiesPtrInput interface {
	pulumi.Input

	ToDiskExclusionPropertiesPtrOutput() DiskExclusionPropertiesPtrOutput
	ToDiskExclusionPropertiesPtrOutputWithContext(context.Context) DiskExclusionPropertiesPtrOutput
}

type diskExclusionPropertiesPtrType DiskExclusionPropertiesArgs

func DiskExclusionPropertiesPtr(v *DiskExclusionPropertiesArgs) DiskExclusionPropertiesPtrInput {
	return (*diskExclusionPropertiesPtrType)(v)
}

func (*diskExclusionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskExclusionProperties)(nil)).Elem()
}

func (i *diskExclusionPropertiesPtrType) ToDiskExclusionPropertiesPtrOutput() DiskExclusionPropertiesPtrOutput {
	return i.ToDiskExclusionPropertiesPtrOutputWithContext(context.Background())
}

func (i *diskExclusionPropertiesPtrType) ToDiskExclusionPropertiesPtrOutputWithContext(ctx context.Context) DiskExclusionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskExclusionPropertiesPtrOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionPropertiesOutput struct{ *pulumi.OutputState }

func (DiskExclusionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskExclusionProperties)(nil)).Elem()
}

func (o DiskExclusionPropertiesOutput) ToDiskExclusionPropertiesOutput() DiskExclusionPropertiesOutput {
	return o
}

func (o DiskExclusionPropertiesOutput) ToDiskExclusionPropertiesOutputWithContext(ctx context.Context) DiskExclusionPropertiesOutput {
	return o
}

func (o DiskExclusionPropertiesOutput) ToDiskExclusionPropertiesPtrOutput() DiskExclusionPropertiesPtrOutput {
	return o.ToDiskExclusionPropertiesPtrOutputWithContext(context.Background())
}

func (o DiskExclusionPropertiesOutput) ToDiskExclusionPropertiesPtrOutputWithContext(ctx context.Context) DiskExclusionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskExclusionProperties) *DiskExclusionProperties {
		return &v
	}).(DiskExclusionPropertiesPtrOutput)
}

// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
func (o DiskExclusionPropertiesOutput) DiskLunList() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DiskExclusionProperties) []int { return v.DiskLunList }).(pulumi.IntArrayOutput)
}

// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
func (o DiskExclusionPropertiesOutput) IsInclusionList() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskExclusionProperties) bool { return v.IsInclusionList }).(pulumi.BoolOutput)
}

type DiskExclusionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DiskExclusionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskExclusionProperties)(nil)).Elem()
}

func (o DiskExclusionPropertiesPtrOutput) ToDiskExclusionPropertiesPtrOutput() DiskExclusionPropertiesPtrOutput {
	return o
}

func (o DiskExclusionPropertiesPtrOutput) ToDiskExclusionPropertiesPtrOutputWithContext(ctx context.Context) DiskExclusionPropertiesPtrOutput {
	return o
}

func (o DiskExclusionPropertiesPtrOutput) Elem() DiskExclusionPropertiesOutput {
	return o.ApplyT(func(v *DiskExclusionProperties) DiskExclusionProperties {
		if v != nil {
			return *v
		}
		var ret DiskExclusionProperties
		return ret
	}).(DiskExclusionPropertiesOutput)
}

// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
func (o DiskExclusionPropertiesPtrOutput) DiskLunList() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DiskExclusionProperties) []int {
		if v == nil {
			return nil
		}
		return v.DiskLunList
	}).(pulumi.IntArrayOutput)
}

// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
func (o DiskExclusionPropertiesPtrOutput) IsInclusionList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskExclusionProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.IsInclusionList
	}).(pulumi.BoolPtrOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionPropertiesResponse struct {
	// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
	DiskLunList []int `pulumi:"diskLunList"`
	// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
	IsInclusionList bool `pulumi:"isInclusionList"`
}

// Defines the disk exclusion properties for virtual machine backup.
type DiskExclusionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DiskExclusionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskExclusionPropertiesResponse)(nil)).Elem()
}

func (o DiskExclusionPropertiesResponseOutput) ToDiskExclusionPropertiesResponseOutput() DiskExclusionPropertiesResponseOutput {
	return o
}

func (o DiskExclusionPropertiesResponseOutput) ToDiskExclusionPropertiesResponseOutputWithContext(ctx context.Context) DiskExclusionPropertiesResponseOutput {
	return o
}

// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
func (o DiskExclusionPropertiesResponseOutput) DiskLunList() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DiskExclusionPropertiesResponse) []int { return v.DiskLunList }).(pulumi.IntArrayOutput)
}

// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
func (o DiskExclusionPropertiesResponseOutput) IsInclusionList() pulumi.BoolOutput {
	return o.ApplyT(func(v DiskExclusionPropertiesResponse) bool { return v.IsInclusionList }).(pulumi.BoolOutput)
}

type DiskExclusionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskExclusionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskExclusionPropertiesResponse)(nil)).Elem()
}

func (o DiskExclusionPropertiesResponsePtrOutput) ToDiskExclusionPropertiesResponsePtrOutput() DiskExclusionPropertiesResponsePtrOutput {
	return o
}

func (o DiskExclusionPropertiesResponsePtrOutput) ToDiskExclusionPropertiesResponsePtrOutputWithContext(ctx context.Context) DiskExclusionPropertiesResponsePtrOutput {
	return o
}

func (o DiskExclusionPropertiesResponsePtrOutput) Elem() DiskExclusionPropertiesResponseOutput {
	return o.ApplyT(func(v *DiskExclusionPropertiesResponse) DiskExclusionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DiskExclusionPropertiesResponse
		return ret
	}).(DiskExclusionPropertiesResponseOutput)
}

// List of Disks' Logical Unit Numbers (LUN) to be used for VM Protection.
func (o DiskExclusionPropertiesResponsePtrOutput) DiskLunList() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DiskExclusionPropertiesResponse) []int {
		if v == nil {
			return nil
		}
		return v.DiskLunList
	}).(pulumi.IntArrayOutput)
}

// Flag to indicate whether DiskLunList is to be included/ excluded from backup.
func (o DiskExclusionPropertiesResponsePtrOutput) IsInclusionList() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DiskExclusionPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.IsInclusionList
	}).(pulumi.BoolPtrOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSku struct {
	// Defines the disk sku name.
	Name *string `pulumi:"name"`
}

// DiskSkuInput is an input type that accepts DiskSkuArgs and DiskSkuOutput values.
// You can construct a concrete instance of `DiskSkuInput` via:
//
//	DiskSkuArgs{...}
type DiskSkuInput interface {
	pulumi.Input

	ToDiskSkuOutput() DiskSkuOutput
	ToDiskSkuOutputWithContext(context.Context) DiskSkuOutput
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuArgs struct {
	// Defines the disk sku name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DiskSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (i DiskSkuArgs) ToDiskSkuOutput() DiskSkuOutput {
	return i.ToDiskSkuOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput)
}

func (i DiskSkuArgs) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i DiskSkuArgs) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuOutput).ToDiskSkuPtrOutputWithContext(ctx)
}

// DiskSkuPtrInput is an input type that accepts DiskSkuArgs, DiskSkuPtr and DiskSkuPtrOutput values.
// You can construct a concrete instance of `DiskSkuPtrInput` via:
//
//	        DiskSkuArgs{...}
//
//	or:
//
//	        nil
type DiskSkuPtrInput interface {
	pulumi.Input

	ToDiskSkuPtrOutput() DiskSkuPtrOutput
	ToDiskSkuPtrOutputWithContext(context.Context) DiskSkuPtrOutput
}

type diskSkuPtrType DiskSkuArgs

func DiskSkuPtr(v *DiskSkuArgs) DiskSkuPtrInput {
	return (*diskSkuPtrType)(v)
}

func (*diskSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return i.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (i *diskSkuPtrType) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskSkuPtrOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuOutput struct{ *pulumi.OutputState }

func (DiskSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSku)(nil)).Elem()
}

func (o DiskSkuOutput) ToDiskSkuOutput() DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuOutputWithContext(ctx context.Context) DiskSkuOutput {
	return o
}

func (o DiskSkuOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o.ToDiskSkuPtrOutputWithContext(context.Background())
}

func (o DiskSkuOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskSku) *DiskSku {
		return &v
	}).(DiskSkuPtrOutput)
}

// Defines the disk sku name.
func (o DiskSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuPtrOutput struct{ *pulumi.OutputState }

func (DiskSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSku)(nil)).Elem()
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutput() DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) ToDiskSkuPtrOutputWithContext(ctx context.Context) DiskSkuPtrOutput {
	return o
}

func (o DiskSkuPtrOutput) Elem() DiskSkuOutput {
	return o.ApplyT(func(v *DiskSku) DiskSku {
		if v != nil {
			return *v
		}
		var ret DiskSku
		return ret
	}).(DiskSkuOutput)
}

// Defines the disk sku name.
func (o DiskSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuResponse struct {
	// Defines the disk sku name.
	Name *string `pulumi:"name"`
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

// Defines the disk sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse {
		if v != nil {
			return *v
		}
		var ret DiskSkuResponse
		return ret
	}).(DiskSkuResponseOutput)
}

// Defines the disk sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The disk configuration required for the selected volume.
type DiskVolumeConfiguration struct {
	// The total number of disks required for the concerned volume.
	Count *float64 `pulumi:"count"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The disk SKU details.
	Sku *DiskSku `pulumi:"sku"`
}

// DiskVolumeConfigurationInput is an input type that accepts DiskVolumeConfigurationArgs and DiskVolumeConfigurationOutput values.
// You can construct a concrete instance of `DiskVolumeConfigurationInput` via:
//
//	DiskVolumeConfigurationArgs{...}
type DiskVolumeConfigurationInput interface {
	pulumi.Input

	ToDiskVolumeConfigurationOutput() DiskVolumeConfigurationOutput
	ToDiskVolumeConfigurationOutputWithContext(context.Context) DiskVolumeConfigurationOutput
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationArgs struct {
	// The total number of disks required for the concerned volume.
	Count pulumi.Float64PtrInput `pulumi:"count"`
	// The disk size in GB.
	SizeGB pulumi.Float64PtrInput `pulumi:"sizeGB"`
	// The disk SKU details.
	Sku DiskSkuPtrInput `pulumi:"sku"`
}

func (DiskVolumeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskVolumeConfiguration)(nil)).Elem()
}

func (i DiskVolumeConfigurationArgs) ToDiskVolumeConfigurationOutput() DiskVolumeConfigurationOutput {
	return i.ToDiskVolumeConfigurationOutputWithContext(context.Background())
}

func (i DiskVolumeConfigurationArgs) ToDiskVolumeConfigurationOutputWithContext(ctx context.Context) DiskVolumeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskVolumeConfigurationOutput)
}

// DiskVolumeConfigurationMapInput is an input type that accepts DiskVolumeConfigurationMap and DiskVolumeConfigurationMapOutput values.
// You can construct a concrete instance of `DiskVolumeConfigurationMapInput` via:
//
//	DiskVolumeConfigurationMap{ "key": DiskVolumeConfigurationArgs{...} }
type DiskVolumeConfigurationMapInput interface {
	pulumi.Input

	ToDiskVolumeConfigurationMapOutput() DiskVolumeConfigurationMapOutput
	ToDiskVolumeConfigurationMapOutputWithContext(context.Context) DiskVolumeConfigurationMapOutput
}

type DiskVolumeConfigurationMap map[string]DiskVolumeConfigurationInput

func (DiskVolumeConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DiskVolumeConfiguration)(nil)).Elem()
}

func (i DiskVolumeConfigurationMap) ToDiskVolumeConfigurationMapOutput() DiskVolumeConfigurationMapOutput {
	return i.ToDiskVolumeConfigurationMapOutputWithContext(context.Background())
}

func (i DiskVolumeConfigurationMap) ToDiskVolumeConfigurationMapOutputWithContext(ctx context.Context) DiskVolumeConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskVolumeConfigurationMapOutput)
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskVolumeConfiguration)(nil)).Elem()
}

func (o DiskVolumeConfigurationOutput) ToDiskVolumeConfigurationOutput() DiskVolumeConfigurationOutput {
	return o
}

func (o DiskVolumeConfigurationOutput) ToDiskVolumeConfigurationOutputWithContext(ctx context.Context) DiskVolumeConfigurationOutput {
	return o
}

// The total number of disks required for the concerned volume.
func (o DiskVolumeConfigurationOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfiguration) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskVolumeConfigurationOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfiguration) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

// The disk SKU details.
func (o DiskVolumeConfigurationOutput) Sku() DiskSkuPtrOutput {
	return o.ApplyT(func(v DiskVolumeConfiguration) *DiskSku { return v.Sku }).(DiskSkuPtrOutput)
}

type DiskVolumeConfigurationMapOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DiskVolumeConfiguration)(nil)).Elem()
}

func (o DiskVolumeConfigurationMapOutput) ToDiskVolumeConfigurationMapOutput() DiskVolumeConfigurationMapOutput {
	return o
}

func (o DiskVolumeConfigurationMapOutput) ToDiskVolumeConfigurationMapOutputWithContext(ctx context.Context) DiskVolumeConfigurationMapOutput {
	return o
}

func (o DiskVolumeConfigurationMapOutput) MapIndex(k pulumi.StringInput) DiskVolumeConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DiskVolumeConfiguration {
		return vs[0].(map[string]DiskVolumeConfiguration)[vs[1].(string)]
	}).(DiskVolumeConfigurationOutput)
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationResponse struct {
	// The total number of disks required for the concerned volume.
	Count *float64 `pulumi:"count"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The disk SKU details.
	Sku *DiskSkuResponse `pulumi:"sku"`
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskVolumeConfigurationResponse)(nil)).Elem()
}

func (o DiskVolumeConfigurationResponseOutput) ToDiskVolumeConfigurationResponseOutput() DiskVolumeConfigurationResponseOutput {
	return o
}

func (o DiskVolumeConfigurationResponseOutput) ToDiskVolumeConfigurationResponseOutputWithContext(ctx context.Context) DiskVolumeConfigurationResponseOutput {
	return o
}

// The total number of disks required for the concerned volume.
func (o DiskVolumeConfigurationResponseOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskVolumeConfigurationResponseOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

// The disk SKU details.
func (o DiskVolumeConfigurationResponseOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *DiskSkuResponse { return v.Sku }).(DiskSkuResponsePtrOutput)
}

type DiskVolumeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskVolumeConfigurationResponse)(nil)).Elem()
}

func (o DiskVolumeConfigurationResponsePtrOutput) ToDiskVolumeConfigurationResponsePtrOutput() DiskVolumeConfigurationResponsePtrOutput {
	return o
}

func (o DiskVolumeConfigurationResponsePtrOutput) ToDiskVolumeConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskVolumeConfigurationResponsePtrOutput {
	return o
}

func (o DiskVolumeConfigurationResponsePtrOutput) Elem() DiskVolumeConfigurationResponseOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) DiskVolumeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DiskVolumeConfigurationResponse
		return ret
	}).(DiskVolumeConfigurationResponseOutput)
}

// The total number of disks required for the concerned volume.
func (o DiskVolumeConfigurationResponsePtrOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskVolumeConfigurationResponsePtrOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeGB
	}).(pulumi.Float64PtrOutput)
}

// The disk SKU details.
func (o DiskVolumeConfigurationResponsePtrOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *DiskSkuResponse {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(DiskSkuResponsePtrOutput)
}

type DiskVolumeConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DiskVolumeConfigurationResponse)(nil)).Elem()
}

func (o DiskVolumeConfigurationResponseMapOutput) ToDiskVolumeConfigurationResponseMapOutput() DiskVolumeConfigurationResponseMapOutput {
	return o
}

func (o DiskVolumeConfigurationResponseMapOutput) ToDiskVolumeConfigurationResponseMapOutputWithContext(ctx context.Context) DiskVolumeConfigurationResponseMapOutput {
	return o
}

func (o DiskVolumeConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) DiskVolumeConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DiskVolumeConfigurationResponse {
		return vs[0].(map[string]DiskVolumeConfigurationResponse)[vs[1].(string)]
	}).(DiskVolumeConfigurationResponseOutput)
}

// Defines the SAP Enqueue Replication Server (ERS) properties.
type EnqueueReplicationServerPropertiesResponse struct {
	// Defines the type of Enqueue Replication Server.
	ErsVersion string `pulumi:"ersVersion"`
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// ERS SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// ERS Instance Number.
	InstanceNo string `pulumi:"instanceNo"`
	// ERS SAP IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// ERS SAP Kernel Patch level.
	KernelPatch string `pulumi:"kernelPatch"`
	// ERS SAP Kernel Version.
	KernelVersion string `pulumi:"kernelVersion"`
}

// Defines the SAP Enqueue Replication Server (ERS) properties.
type EnqueueReplicationServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EnqueueReplicationServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnqueueReplicationServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueReplicationServerPropertiesResponseOutput) ToEnqueueReplicationServerPropertiesResponseOutput() EnqueueReplicationServerPropertiesResponseOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponseOutput) ToEnqueueReplicationServerPropertiesResponseOutputWithContext(ctx context.Context) EnqueueReplicationServerPropertiesResponseOutput {
	return o
}

// Defines the type of Enqueue Replication Server.
func (o EnqueueReplicationServerPropertiesResponseOutput) ErsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.ErsVersion }).(pulumi.StringOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueReplicationServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// ERS SAP Hostname.
func (o EnqueueReplicationServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// ERS Instance Number.
func (o EnqueueReplicationServerPropertiesResponseOutput) InstanceNo() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.InstanceNo }).(pulumi.StringOutput)
}

// ERS SAP IP Address.
func (o EnqueueReplicationServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// ERS SAP Kernel Patch level.
func (o EnqueueReplicationServerPropertiesResponseOutput) KernelPatch() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.KernelPatch }).(pulumi.StringOutput)
}

// ERS SAP Kernel Version.
func (o EnqueueReplicationServerPropertiesResponseOutput) KernelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.KernelVersion }).(pulumi.StringOutput)
}

type EnqueueReplicationServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EnqueueReplicationServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnqueueReplicationServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ToEnqueueReplicationServerPropertiesResponsePtrOutput() EnqueueReplicationServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ToEnqueueReplicationServerPropertiesResponsePtrOutputWithContext(ctx context.Context) EnqueueReplicationServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Elem() EnqueueReplicationServerPropertiesResponseOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) EnqueueReplicationServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EnqueueReplicationServerPropertiesResponse
		return ret
	}).(EnqueueReplicationServerPropertiesResponseOutput)
}

// Defines the type of Enqueue Replication Server.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ErsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErsVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Hostname.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// ERS Instance Number.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) InstanceNo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceNo
	}).(pulumi.StringPtrOutput)
}

// ERS SAP IP Address.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Kernel Patch level.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) KernelPatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KernelPatch
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Kernel Version.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) KernelVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KernelVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the SAP Enqueue Server properties.
type EnqueueServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Enqueue Server SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// Enqueue Server SAP IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Enqueue Server Port.
	Port float64 `pulumi:"port"`
}

// Defines the SAP Enqueue Server properties.
type EnqueueServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EnqueueServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnqueueServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueServerPropertiesResponseOutput) ToEnqueueServerPropertiesResponseOutput() EnqueueServerPropertiesResponseOutput {
	return o
}

func (o EnqueueServerPropertiesResponseOutput) ToEnqueueServerPropertiesResponseOutputWithContext(ctx context.Context) EnqueueServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o EnqueueServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// Enqueue Server SAP Hostname.
func (o EnqueueServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Enqueue Server SAP IP Address.
func (o EnqueueServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Enqueue Server Port.
func (o EnqueueServerPropertiesResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

type EnqueueServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EnqueueServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnqueueServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueServerPropertiesResponsePtrOutput) ToEnqueueServerPropertiesResponsePtrOutput() EnqueueServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueServerPropertiesResponsePtrOutput) ToEnqueueServerPropertiesResponsePtrOutputWithContext(ctx context.Context) EnqueueServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueServerPropertiesResponsePtrOutput) Elem() EnqueueServerPropertiesResponseOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) EnqueueServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EnqueueServerPropertiesResponse
		return ret
	}).(EnqueueServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server SAP Hostname.
func (o EnqueueServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server SAP IP Address.
func (o EnqueueServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server Port.
func (o EnqueueServerPropertiesResponsePtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// Error definition.
type ErrorDefinitionResponse struct {
	// Service specific error code which serves as the substatus for the HTTP error code.
	Code string `pulumi:"code"`
	// Internal error details.
	Details []ErrorDefinitionResponse `pulumi:"details"`
	// Description of the error.
	Message string `pulumi:"message"`
	// Description of the recommendation.
	Recommendation string `pulumi:"recommendation"`
}

// Error definition.
type ErrorDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutput() ErrorDefinitionResponseOutput {
	return o
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutputWithContext(ctx context.Context) ErrorDefinitionResponseOutput {
	return o
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Internal error details.
func (o ErrorDefinitionResponseOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) []ErrorDefinitionResponse { return v.Details }).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Description of the recommendation.
func (o ErrorDefinitionResponseOutput) Recommendation() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Recommendation }).(pulumi.StringOutput)
}

type ErrorDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutput() ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutputWithContext(ctx context.Context) ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) Elem() ErrorDefinitionResponseOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) ErrorDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDefinitionResponse
		return ret
	}).(ErrorDefinitionResponseOutput)
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Internal error details.
func (o ErrorDefinitionResponsePtrOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) []ErrorDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// Description of the recommendation.
func (o ErrorDefinitionResponsePtrOutput) Recommendation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Recommendation
	}).(pulumi.StringPtrOutput)
}

type ErrorDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutput() ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutputWithContext(ctx context.Context) ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ErrorDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDefinitionResponse {
		return vs[0].([]ErrorDefinitionResponse)[vs[1].(int)]
	}).(ErrorDefinitionResponseOutput)
}

// Standard error object.
type ErrorResponse struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Standard error object.
type ErrorResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseOutput) ToErrorResponseOutput() ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return o
}

// Server-defined set of error codes.
func (o ErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ErrorResponseOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v ErrorResponse) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ErrorResponseOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v ErrorResponse) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o ErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o ErrorResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponse)(nil)).Elem()
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) Elem() ErrorResponseOutput {
	return o.ApplyT(func(v *ErrorResponse) ErrorResponse {
		if v != nil {
			return *v
		}
		var ret ErrorResponse
		return ret
	}).(ErrorResponseOutput)
}

// Server-defined set of error codes.
func (o ErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ErrorResponsePtrOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v *ErrorResponse) []ErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ErrorResponsePtrOutput) InnerError() ErrorResponseInnerErrorPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *ErrorResponseInnerError {
		if v == nil {
			return nil
		}
		return &v.InnerError
	}).(ErrorResponseInnerErrorPtrOutput)
}

// Human-readable representation of the error.
func (o ErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// Target of the error.
func (o ErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutput() ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutputWithContext(ctx context.Context) ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponse {
		return vs[0].([]ErrorResponse)[vs[1].(int)]
	}).(ErrorResponseOutput)
}

// Object containing more specific information than  the current object about the error.
type ErrorResponseInnerError struct {
	// Standard error object.
	InnerError *ErrorResponse `pulumi:"innerError"`
}

// Object containing more specific information than  the current object about the error.
type ErrorResponseInnerErrorOutput struct{ *pulumi.OutputState }

func (ErrorResponseInnerErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponseInnerError)(nil)).Elem()
}

func (o ErrorResponseInnerErrorOutput) ToErrorResponseInnerErrorOutput() ErrorResponseInnerErrorOutput {
	return o
}

func (o ErrorResponseInnerErrorOutput) ToErrorResponseInnerErrorOutputWithContext(ctx context.Context) ErrorResponseInnerErrorOutput {
	return o
}

// Standard error object.
func (o ErrorResponseInnerErrorOutput) InnerError() ErrorResponsePtrOutput {
	return o.ApplyT(func(v ErrorResponseInnerError) *ErrorResponse { return v.InnerError }).(ErrorResponsePtrOutput)
}

type ErrorResponseInnerErrorPtrOutput struct{ *pulumi.OutputState }

func (ErrorResponseInnerErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponseInnerError)(nil)).Elem()
}

func (o ErrorResponseInnerErrorPtrOutput) ToErrorResponseInnerErrorPtrOutput() ErrorResponseInnerErrorPtrOutput {
	return o
}

func (o ErrorResponseInnerErrorPtrOutput) ToErrorResponseInnerErrorPtrOutputWithContext(ctx context.Context) ErrorResponseInnerErrorPtrOutput {
	return o
}

func (o ErrorResponseInnerErrorPtrOutput) Elem() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v *ErrorResponseInnerError) ErrorResponseInnerError {
		if v != nil {
			return *v
		}
		var ret ErrorResponseInnerError
		return ret
	}).(ErrorResponseInnerErrorOutput)
}

// Standard error object.
func (o ErrorResponseInnerErrorPtrOutput) InnerError() ErrorResponsePtrOutput {
	return o.ApplyT(func(v *ErrorResponseInnerError) *ErrorResponse {
		if v == nil {
			return nil
		}
		return v.InnerError
	}).(ErrorResponsePtrOutput)
}

// The SAP instance specific performance data for Excel import.
type ExcelPerformanceDataResponse struct {
	// The data source for this resource.
	// Expected value is 'Excel'.
	DataSource string `pulumi:"dataSource"`
	// Provide the max CPU percentage load on the server. Omit the percentage symbol while filling this value.
	MaxCpuLoad int `pulumi:"maxCpuLoad"`
	// Provide the source Database size in GB. Applicable only if SAP instance type for this server instance is 'DB'.
	TotalSourceDbSizeGB int `pulumi:"totalSourceDbSizeGB"`
}

// The SAP instance specific performance data for Excel import.
type ExcelPerformanceDataResponseOutput struct{ *pulumi.OutputState }

func (ExcelPerformanceDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExcelPerformanceDataResponse)(nil)).Elem()
}

func (o ExcelPerformanceDataResponseOutput) ToExcelPerformanceDataResponseOutput() ExcelPerformanceDataResponseOutput {
	return o
}

func (o ExcelPerformanceDataResponseOutput) ToExcelPerformanceDataResponseOutputWithContext(ctx context.Context) ExcelPerformanceDataResponseOutput {
	return o
}

// The data source for this resource.
// Expected value is 'Excel'.
func (o ExcelPerformanceDataResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v ExcelPerformanceDataResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Provide the max CPU percentage load on the server. Omit the percentage symbol while filling this value.
func (o ExcelPerformanceDataResponseOutput) MaxCpuLoad() pulumi.IntOutput {
	return o.ApplyT(func(v ExcelPerformanceDataResponse) int { return v.MaxCpuLoad }).(pulumi.IntOutput)
}

// Provide the source Database size in GB. Applicable only if SAP instance type for this server instance is 'DB'.
func (o ExcelPerformanceDataResponseOutput) TotalSourceDbSizeGB() pulumi.IntOutput {
	return o.ApplyT(func(v ExcelPerformanceDataResponse) int { return v.TotalSourceDbSizeGB }).(pulumi.IntOutput)
}

// Existing recovery services vault.
type ExistingRecoveryServicesVault struct {
	// The resource ID of the recovery services vault that has been created.
	Id string `pulumi:"id"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'Existing'.
	VaultType string `pulumi:"vaultType"`
}

// ExistingRecoveryServicesVaultInput is an input type that accepts ExistingRecoveryServicesVaultArgs and ExistingRecoveryServicesVaultOutput values.
// You can construct a concrete instance of `ExistingRecoveryServicesVaultInput` via:
//
//	ExistingRecoveryServicesVaultArgs{...}
type ExistingRecoveryServicesVaultInput interface {
	pulumi.Input

	ToExistingRecoveryServicesVaultOutput() ExistingRecoveryServicesVaultOutput
	ToExistingRecoveryServicesVaultOutputWithContext(context.Context) ExistingRecoveryServicesVaultOutput
}

// Existing recovery services vault.
type ExistingRecoveryServicesVaultArgs struct {
	// The resource ID of the recovery services vault that has been created.
	Id pulumi.StringInput `pulumi:"id"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'Existing'.
	VaultType pulumi.StringInput `pulumi:"vaultType"`
}

func (ExistingRecoveryServicesVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExistingRecoveryServicesVault)(nil)).Elem()
}

func (i ExistingRecoveryServicesVaultArgs) ToExistingRecoveryServicesVaultOutput() ExistingRecoveryServicesVaultOutput {
	return i.ToExistingRecoveryServicesVaultOutputWithContext(context.Background())
}

func (i ExistingRecoveryServicesVaultArgs) ToExistingRecoveryServicesVaultOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingRecoveryServicesVaultOutput)
}

func (i ExistingRecoveryServicesVaultArgs) ToExistingRecoveryServicesVaultPtrOutput() ExistingRecoveryServicesVaultPtrOutput {
	return i.ToExistingRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (i ExistingRecoveryServicesVaultArgs) ToExistingRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingRecoveryServicesVaultOutput).ToExistingRecoveryServicesVaultPtrOutputWithContext(ctx)
}

// ExistingRecoveryServicesVaultPtrInput is an input type that accepts ExistingRecoveryServicesVaultArgs, ExistingRecoveryServicesVaultPtr and ExistingRecoveryServicesVaultPtrOutput values.
// You can construct a concrete instance of `ExistingRecoveryServicesVaultPtrInput` via:
//
//	        ExistingRecoveryServicesVaultArgs{...}
//
//	or:
//
//	        nil
type ExistingRecoveryServicesVaultPtrInput interface {
	pulumi.Input

	ToExistingRecoveryServicesVaultPtrOutput() ExistingRecoveryServicesVaultPtrOutput
	ToExistingRecoveryServicesVaultPtrOutputWithContext(context.Context) ExistingRecoveryServicesVaultPtrOutput
}

type existingRecoveryServicesVaultPtrType ExistingRecoveryServicesVaultArgs

func ExistingRecoveryServicesVaultPtr(v *ExistingRecoveryServicesVaultArgs) ExistingRecoveryServicesVaultPtrInput {
	return (*existingRecoveryServicesVaultPtrType)(v)
}

func (*existingRecoveryServicesVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExistingRecoveryServicesVault)(nil)).Elem()
}

func (i *existingRecoveryServicesVaultPtrType) ToExistingRecoveryServicesVaultPtrOutput() ExistingRecoveryServicesVaultPtrOutput {
	return i.ToExistingRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (i *existingRecoveryServicesVaultPtrType) ToExistingRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExistingRecoveryServicesVaultPtrOutput)
}

// Existing recovery services vault.
type ExistingRecoveryServicesVaultOutput struct{ *pulumi.OutputState }

func (ExistingRecoveryServicesVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExistingRecoveryServicesVault)(nil)).Elem()
}

func (o ExistingRecoveryServicesVaultOutput) ToExistingRecoveryServicesVaultOutput() ExistingRecoveryServicesVaultOutput {
	return o
}

func (o ExistingRecoveryServicesVaultOutput) ToExistingRecoveryServicesVaultOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultOutput {
	return o
}

func (o ExistingRecoveryServicesVaultOutput) ToExistingRecoveryServicesVaultPtrOutput() ExistingRecoveryServicesVaultPtrOutput {
	return o.ToExistingRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (o ExistingRecoveryServicesVaultOutput) ToExistingRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExistingRecoveryServicesVault) *ExistingRecoveryServicesVault {
		return &v
	}).(ExistingRecoveryServicesVaultPtrOutput)
}

// The resource ID of the recovery services vault that has been created.
func (o ExistingRecoveryServicesVaultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExistingRecoveryServicesVault) string { return v.Id }).(pulumi.StringOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'Existing'.
func (o ExistingRecoveryServicesVaultOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v ExistingRecoveryServicesVault) string { return v.VaultType }).(pulumi.StringOutput)
}

type ExistingRecoveryServicesVaultPtrOutput struct{ *pulumi.OutputState }

func (ExistingRecoveryServicesVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExistingRecoveryServicesVault)(nil)).Elem()
}

func (o ExistingRecoveryServicesVaultPtrOutput) ToExistingRecoveryServicesVaultPtrOutput() ExistingRecoveryServicesVaultPtrOutput {
	return o
}

func (o ExistingRecoveryServicesVaultPtrOutput) ToExistingRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultPtrOutput {
	return o
}

func (o ExistingRecoveryServicesVaultPtrOutput) Elem() ExistingRecoveryServicesVaultOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVault) ExistingRecoveryServicesVault {
		if v != nil {
			return *v
		}
		var ret ExistingRecoveryServicesVault
		return ret
	}).(ExistingRecoveryServicesVaultOutput)
}

// The resource ID of the recovery services vault that has been created.
func (o ExistingRecoveryServicesVaultPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVault) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'Existing'.
func (o ExistingRecoveryServicesVaultPtrOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVault) *string {
		if v == nil {
			return nil
		}
		return &v.VaultType
	}).(pulumi.StringPtrOutput)
}

// Existing recovery services vault.
type ExistingRecoveryServicesVaultResponse struct {
	// The resource ID of the recovery services vault that has been created.
	Id string `pulumi:"id"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'Existing'.
	VaultType string `pulumi:"vaultType"`
}

// Existing recovery services vault.
type ExistingRecoveryServicesVaultResponseOutput struct{ *pulumi.OutputState }

func (ExistingRecoveryServicesVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExistingRecoveryServicesVaultResponse)(nil)).Elem()
}

func (o ExistingRecoveryServicesVaultResponseOutput) ToExistingRecoveryServicesVaultResponseOutput() ExistingRecoveryServicesVaultResponseOutput {
	return o
}

func (o ExistingRecoveryServicesVaultResponseOutput) ToExistingRecoveryServicesVaultResponseOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultResponseOutput {
	return o
}

// The resource ID of the recovery services vault that has been created.
func (o ExistingRecoveryServicesVaultResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ExistingRecoveryServicesVaultResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'Existing'.
func (o ExistingRecoveryServicesVaultResponseOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v ExistingRecoveryServicesVaultResponse) string { return v.VaultType }).(pulumi.StringOutput)
}

type ExistingRecoveryServicesVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (ExistingRecoveryServicesVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExistingRecoveryServicesVaultResponse)(nil)).Elem()
}

func (o ExistingRecoveryServicesVaultResponsePtrOutput) ToExistingRecoveryServicesVaultResponsePtrOutput() ExistingRecoveryServicesVaultResponsePtrOutput {
	return o
}

func (o ExistingRecoveryServicesVaultResponsePtrOutput) ToExistingRecoveryServicesVaultResponsePtrOutputWithContext(ctx context.Context) ExistingRecoveryServicesVaultResponsePtrOutput {
	return o
}

func (o ExistingRecoveryServicesVaultResponsePtrOutput) Elem() ExistingRecoveryServicesVaultResponseOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVaultResponse) ExistingRecoveryServicesVaultResponse {
		if v != nil {
			return *v
		}
		var ret ExistingRecoveryServicesVaultResponse
		return ret
	}).(ExistingRecoveryServicesVaultResponseOutput)
}

// The resource ID of the recovery services vault that has been created.
func (o ExistingRecoveryServicesVaultResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVaultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'Existing'.
func (o ExistingRecoveryServicesVaultResponsePtrOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExistingRecoveryServicesVaultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultType
	}).(pulumi.StringPtrOutput)
}

// The extended location definition.
type ExtendedLocation struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The extended location definition.
type ExtendedLocationArgs struct {
	// The extended location name.
	Name pulumi.StringInput `pulumi:"name"`
	// The extended location type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// The extended location definition.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// The extended location name.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The extended location name.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The extended location definition.
type ExtendedLocationResponse struct {
	// The extended location name.
	Name string `pulumi:"name"`
	// The extended location type.
	Type string `pulumi:"type"`
}

// The extended location definition.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The extended location name.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The extended location name.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfiguration struct {
	// The resource ID of the virtual machine containing the central server instance.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The SAP software installation Type.
	// Expected value is 'External'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
}

// ExternalInstallationSoftwareConfigurationInput is an input type that accepts ExternalInstallationSoftwareConfigurationArgs and ExternalInstallationSoftwareConfigurationOutput values.
// You can construct a concrete instance of `ExternalInstallationSoftwareConfigurationInput` via:
//
//	ExternalInstallationSoftwareConfigurationArgs{...}
type ExternalInstallationSoftwareConfigurationInput interface {
	pulumi.Input

	ToExternalInstallationSoftwareConfigurationOutput() ExternalInstallationSoftwareConfigurationOutput
	ToExternalInstallationSoftwareConfigurationOutputWithContext(context.Context) ExternalInstallationSoftwareConfigurationOutput
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfigurationArgs struct {
	// The resource ID of the virtual machine containing the central server instance.
	CentralServerVmId pulumi.StringPtrInput `pulumi:"centralServerVmId"`
	// The SAP software installation Type.
	// Expected value is 'External'.
	SoftwareInstallationType pulumi.StringInput `pulumi:"softwareInstallationType"`
}

func (ExternalInstallationSoftwareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalInstallationSoftwareConfiguration)(nil)).Elem()
}

func (i ExternalInstallationSoftwareConfigurationArgs) ToExternalInstallationSoftwareConfigurationOutput() ExternalInstallationSoftwareConfigurationOutput {
	return i.ToExternalInstallationSoftwareConfigurationOutputWithContext(context.Background())
}

func (i ExternalInstallationSoftwareConfigurationArgs) ToExternalInstallationSoftwareConfigurationOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalInstallationSoftwareConfigurationOutput)
}

func (i ExternalInstallationSoftwareConfigurationArgs) ToExternalInstallationSoftwareConfigurationPtrOutput() ExternalInstallationSoftwareConfigurationPtrOutput {
	return i.ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i ExternalInstallationSoftwareConfigurationArgs) ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalInstallationSoftwareConfigurationOutput).ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(ctx)
}

// ExternalInstallationSoftwareConfigurationPtrInput is an input type that accepts ExternalInstallationSoftwareConfigurationArgs, ExternalInstallationSoftwareConfigurationPtr and ExternalInstallationSoftwareConfigurationPtrOutput values.
// You can construct a concrete instance of `ExternalInstallationSoftwareConfigurationPtrInput` via:
//
//	        ExternalInstallationSoftwareConfigurationArgs{...}
//
//	or:
//
//	        nil
type ExternalInstallationSoftwareConfigurationPtrInput interface {
	pulumi.Input

	ToExternalInstallationSoftwareConfigurationPtrOutput() ExternalInstallationSoftwareConfigurationPtrOutput
	ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(context.Context) ExternalInstallationSoftwareConfigurationPtrOutput
}

type externalInstallationSoftwareConfigurationPtrType ExternalInstallationSoftwareConfigurationArgs

func ExternalInstallationSoftwareConfigurationPtr(v *ExternalInstallationSoftwareConfigurationArgs) ExternalInstallationSoftwareConfigurationPtrInput {
	return (*externalInstallationSoftwareConfigurationPtrType)(v)
}

func (*externalInstallationSoftwareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalInstallationSoftwareConfiguration)(nil)).Elem()
}

func (i *externalInstallationSoftwareConfigurationPtrType) ToExternalInstallationSoftwareConfigurationPtrOutput() ExternalInstallationSoftwareConfigurationPtrOutput {
	return i.ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i *externalInstallationSoftwareConfigurationPtrType) ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalInstallationSoftwareConfigurationPtrOutput)
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfigurationOutput struct{ *pulumi.OutputState }

func (ExternalInstallationSoftwareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalInstallationSoftwareConfiguration)(nil)).Elem()
}

func (o ExternalInstallationSoftwareConfigurationOutput) ToExternalInstallationSoftwareConfigurationOutput() ExternalInstallationSoftwareConfigurationOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationOutput) ToExternalInstallationSoftwareConfigurationOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationOutput) ToExternalInstallationSoftwareConfigurationPtrOutput() ExternalInstallationSoftwareConfigurationPtrOutput {
	return o.ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (o ExternalInstallationSoftwareConfigurationOutput) ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalInstallationSoftwareConfiguration) *ExternalInstallationSoftwareConfiguration {
		return &v
	}).(ExternalInstallationSoftwareConfigurationPtrOutput)
}

// The resource ID of the virtual machine containing the central server instance.
func (o ExternalInstallationSoftwareConfigurationOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalInstallationSoftwareConfiguration) *string { return v.CentralServerVmId }).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'External'.
func (o ExternalInstallationSoftwareConfigurationOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalInstallationSoftwareConfiguration) string { return v.SoftwareInstallationType }).(pulumi.StringOutput)
}

type ExternalInstallationSoftwareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ExternalInstallationSoftwareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalInstallationSoftwareConfiguration)(nil)).Elem()
}

func (o ExternalInstallationSoftwareConfigurationPtrOutput) ToExternalInstallationSoftwareConfigurationPtrOutput() ExternalInstallationSoftwareConfigurationPtrOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationPtrOutput) ToExternalInstallationSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationPtrOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationPtrOutput) Elem() ExternalInstallationSoftwareConfigurationOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfiguration) ExternalInstallationSoftwareConfiguration {
		if v != nil {
			return *v
		}
		var ret ExternalInstallationSoftwareConfiguration
		return ret
	}).(ExternalInstallationSoftwareConfigurationOutput)
}

// The resource ID of the virtual machine containing the central server instance.
func (o ExternalInstallationSoftwareConfigurationPtrOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CentralServerVmId
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'External'.
func (o ExternalInstallationSoftwareConfigurationPtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfigurationResponse struct {
	// The resource ID of the virtual machine containing the central server instance.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The SAP software installation Type.
	// Expected value is 'External'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ExternalInstallationSoftwareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalInstallationSoftwareConfigurationResponse)(nil)).Elem()
}

func (o ExternalInstallationSoftwareConfigurationResponseOutput) ToExternalInstallationSoftwareConfigurationResponseOutput() ExternalInstallationSoftwareConfigurationResponseOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationResponseOutput) ToExternalInstallationSoftwareConfigurationResponseOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationResponseOutput {
	return o
}

// The resource ID of the virtual machine containing the central server instance.
func (o ExternalInstallationSoftwareConfigurationResponseOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalInstallationSoftwareConfigurationResponse) *string { return v.CentralServerVmId }).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'External'.
func (o ExternalInstallationSoftwareConfigurationResponseOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalInstallationSoftwareConfigurationResponse) string { return v.SoftwareInstallationType }).(pulumi.StringOutput)
}

type ExternalInstallationSoftwareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExternalInstallationSoftwareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalInstallationSoftwareConfigurationResponse)(nil)).Elem()
}

func (o ExternalInstallationSoftwareConfigurationResponsePtrOutput) ToExternalInstallationSoftwareConfigurationResponsePtrOutput() ExternalInstallationSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationResponsePtrOutput) ToExternalInstallationSoftwareConfigurationResponsePtrOutputWithContext(ctx context.Context) ExternalInstallationSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o ExternalInstallationSoftwareConfigurationResponsePtrOutput) Elem() ExternalInstallationSoftwareConfigurationResponseOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfigurationResponse) ExternalInstallationSoftwareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ExternalInstallationSoftwareConfigurationResponse
		return ret
	}).(ExternalInstallationSoftwareConfigurationResponseOutput)
}

// The resource ID of the virtual machine containing the central server instance.
func (o ExternalInstallationSoftwareConfigurationResponsePtrOutput) CentralServerVmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CentralServerVmId
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'External'.
func (o ExternalInstallationSoftwareConfigurationResponsePtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalInstallationSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// Defines the SAP Gateway Server properties.
type GatewayServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Gateway Port.
	Port float64 `pulumi:"port"`
}

// Defines the SAP Gateway Server properties.
type GatewayServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GatewayServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayServerPropertiesResponse)(nil)).Elem()
}

func (o GatewayServerPropertiesResponseOutput) ToGatewayServerPropertiesResponseOutput() GatewayServerPropertiesResponseOutput {
	return o
}

func (o GatewayServerPropertiesResponseOutput) ToGatewayServerPropertiesResponseOutputWithContext(ctx context.Context) GatewayServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o GatewayServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// Gateway Port.
func (o GatewayServerPropertiesResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v GatewayServerPropertiesResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

type GatewayServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (GatewayServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayServerPropertiesResponse)(nil)).Elem()
}

func (o GatewayServerPropertiesResponsePtrOutput) ToGatewayServerPropertiesResponsePtrOutput() GatewayServerPropertiesResponsePtrOutput {
	return o
}

func (o GatewayServerPropertiesResponsePtrOutput) ToGatewayServerPropertiesResponsePtrOutputWithContext(ctx context.Context) GatewayServerPropertiesResponsePtrOutput {
	return o
}

func (o GatewayServerPropertiesResponsePtrOutput) Elem() GatewayServerPropertiesResponseOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) GatewayServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret GatewayServerPropertiesResponse
		return ret
	}).(GatewayServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o GatewayServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// Gateway Port.
func (o GatewayServerPropertiesResponsePtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupData struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyProperties `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'HANA'.
	BackupType string `pulumi:"backupType"`
	// Defines the policy properties for database backup.
	DbInstanceSnapshotBackupPolicy *DBBackupPolicyProperties `pulumi:"dbInstanceSnapshotBackupPolicy"`
	// Name of the HANA Database User Store Key.
	HdbuserstoreKeyName string `pulumi:"hdbuserstoreKeyName"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
	// Path of the SSL key store.
	SslConfiguration *SSLConfiguration `pulumi:"sslConfiguration"`
}

// HanaBackupDataInput is an input type that accepts HanaBackupDataArgs and HanaBackupDataOutput values.
// You can construct a concrete instance of `HanaBackupDataInput` via:
//
//	HanaBackupDataArgs{...}
type HanaBackupDataInput interface {
	pulumi.Input

	ToHanaBackupDataOutput() HanaBackupDataOutput
	ToHanaBackupDataOutputWithContext(context.Context) HanaBackupDataOutput
}

// Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupDataArgs struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyPropertiesInput `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'HANA'.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// Defines the policy properties for database backup.
	DbInstanceSnapshotBackupPolicy DBBackupPolicyPropertiesPtrInput `pulumi:"dbInstanceSnapshotBackupPolicy"`
	// Name of the HANA Database User Store Key.
	HdbuserstoreKeyName pulumi.StringInput `pulumi:"hdbuserstoreKeyName"`
	// Gets or sets the database instance number.
	InstanceNumber pulumi.StringPtrInput `pulumi:"instanceNumber"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault pulumi.Input `pulumi:"recoveryServicesVault"`
	// Path of the SSL key store.
	SslConfiguration SSLConfigurationPtrInput `pulumi:"sslConfiguration"`
}

func (HanaBackupDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaBackupData)(nil)).Elem()
}

func (i HanaBackupDataArgs) ToHanaBackupDataOutput() HanaBackupDataOutput {
	return i.ToHanaBackupDataOutputWithContext(context.Background())
}

func (i HanaBackupDataArgs) ToHanaBackupDataOutputWithContext(ctx context.Context) HanaBackupDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaBackupDataOutput)
}

func (i HanaBackupDataArgs) ToHanaBackupDataPtrOutput() HanaBackupDataPtrOutput {
	return i.ToHanaBackupDataPtrOutputWithContext(context.Background())
}

func (i HanaBackupDataArgs) ToHanaBackupDataPtrOutputWithContext(ctx context.Context) HanaBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaBackupDataOutput).ToHanaBackupDataPtrOutputWithContext(ctx)
}

// HanaBackupDataPtrInput is an input type that accepts HanaBackupDataArgs, HanaBackupDataPtr and HanaBackupDataPtrOutput values.
// You can construct a concrete instance of `HanaBackupDataPtrInput` via:
//
//	        HanaBackupDataArgs{...}
//
//	or:
//
//	        nil
type HanaBackupDataPtrInput interface {
	pulumi.Input

	ToHanaBackupDataPtrOutput() HanaBackupDataPtrOutput
	ToHanaBackupDataPtrOutputWithContext(context.Context) HanaBackupDataPtrOutput
}

type hanaBackupDataPtrType HanaBackupDataArgs

func HanaBackupDataPtr(v *HanaBackupDataArgs) HanaBackupDataPtrInput {
	return (*hanaBackupDataPtrType)(v)
}

func (*hanaBackupDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaBackupData)(nil)).Elem()
}

func (i *hanaBackupDataPtrType) ToHanaBackupDataPtrOutput() HanaBackupDataPtrOutput {
	return i.ToHanaBackupDataPtrOutputWithContext(context.Background())
}

func (i *hanaBackupDataPtrType) ToHanaBackupDataPtrOutputWithContext(ctx context.Context) HanaBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaBackupDataPtrOutput)
}

// Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupDataOutput struct{ *pulumi.OutputState }

func (HanaBackupDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaBackupData)(nil)).Elem()
}

func (o HanaBackupDataOutput) ToHanaBackupDataOutput() HanaBackupDataOutput {
	return o
}

func (o HanaBackupDataOutput) ToHanaBackupDataOutputWithContext(ctx context.Context) HanaBackupDataOutput {
	return o
}

func (o HanaBackupDataOutput) ToHanaBackupDataPtrOutput() HanaBackupDataPtrOutput {
	return o.ToHanaBackupDataPtrOutputWithContext(context.Background())
}

func (o HanaBackupDataOutput) ToHanaBackupDataPtrOutputWithContext(ctx context.Context) HanaBackupDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HanaBackupData) *HanaBackupData {
		return &v
	}).(HanaBackupDataPtrOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataOutput) BackupPolicy() DBBackupPolicyPropertiesOutput {
	return o.ApplyT(func(v HanaBackupData) DBBackupPolicyProperties { return v.BackupPolicy }).(DBBackupPolicyPropertiesOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'HANA'.
func (o HanaBackupDataOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaBackupData) string { return v.BackupType }).(pulumi.StringOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataOutput) DbInstanceSnapshotBackupPolicy() DBBackupPolicyPropertiesPtrOutput {
	return o.ApplyT(func(v HanaBackupData) *DBBackupPolicyProperties { return v.DbInstanceSnapshotBackupPolicy }).(DBBackupPolicyPropertiesPtrOutput)
}

// Name of the HANA Database User Store Key.
func (o HanaBackupDataOutput) HdbuserstoreKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v HanaBackupData) string { return v.HdbuserstoreKeyName }).(pulumi.StringOutput)
}

// Gets or sets the database instance number.
func (o HanaBackupDataOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaBackupData) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o HanaBackupDataOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v HanaBackupData) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

// Path of the SSL key store.
func (o HanaBackupDataOutput) SslConfiguration() SSLConfigurationPtrOutput {
	return o.ApplyT(func(v HanaBackupData) *SSLConfiguration { return v.SslConfiguration }).(SSLConfigurationPtrOutput)
}

type HanaBackupDataPtrOutput struct{ *pulumi.OutputState }

func (HanaBackupDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaBackupData)(nil)).Elem()
}

func (o HanaBackupDataPtrOutput) ToHanaBackupDataPtrOutput() HanaBackupDataPtrOutput {
	return o
}

func (o HanaBackupDataPtrOutput) ToHanaBackupDataPtrOutputWithContext(ctx context.Context) HanaBackupDataPtrOutput {
	return o
}

func (o HanaBackupDataPtrOutput) Elem() HanaBackupDataOutput {
	return o.ApplyT(func(v *HanaBackupData) HanaBackupData {
		if v != nil {
			return *v
		}
		var ret HanaBackupData
		return ret
	}).(HanaBackupDataOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataPtrOutput) BackupPolicy() DBBackupPolicyPropertiesPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *DBBackupPolicyProperties {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(DBBackupPolicyPropertiesPtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'HANA'.
func (o HanaBackupDataPtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataPtrOutput) DbInstanceSnapshotBackupPolicy() DBBackupPolicyPropertiesPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *DBBackupPolicyProperties {
		if v == nil {
			return nil
		}
		return v.DbInstanceSnapshotBackupPolicy
	}).(DBBackupPolicyPropertiesPtrOutput)
}

// Name of the HANA Database User Store Key.
func (o HanaBackupDataPtrOutput) HdbuserstoreKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *string {
		if v == nil {
			return nil
		}
		return &v.HdbuserstoreKeyName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaBackupDataPtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o HanaBackupDataPtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *HanaBackupData) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// Path of the SSL key store.
func (o HanaBackupDataPtrOutput) SslConfiguration() SSLConfigurationPtrOutput {
	return o.ApplyT(func(v *HanaBackupData) *SSLConfiguration {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SSLConfigurationPtrOutput)
}

// Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupDataResponse struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyPropertiesResponse `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'HANA'.
	BackupType string `pulumi:"backupType"`
	// Defines the policy properties for database backup.
	DbInstanceSnapshotBackupPolicy *DBBackupPolicyPropertiesResponse `pulumi:"dbInstanceSnapshotBackupPolicy"`
	// Name of the HANA Database User Store Key.
	HdbuserstoreKeyName string `pulumi:"hdbuserstoreKeyName"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
	// Path of the SSL key store.
	SslConfiguration *SSLConfigurationResponse `pulumi:"sslConfiguration"`
}

// Defines the HANA Backup data for a virtual instance for SAP.
type HanaBackupDataResponseOutput struct{ *pulumi.OutputState }

func (HanaBackupDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaBackupDataResponse)(nil)).Elem()
}

func (o HanaBackupDataResponseOutput) ToHanaBackupDataResponseOutput() HanaBackupDataResponseOutput {
	return o
}

func (o HanaBackupDataResponseOutput) ToHanaBackupDataResponseOutputWithContext(ctx context.Context) HanaBackupDataResponseOutput {
	return o
}

// Defines the policy properties for database backup.
func (o HanaBackupDataResponseOutput) BackupPolicy() DBBackupPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) DBBackupPolicyPropertiesResponse { return v.BackupPolicy }).(DBBackupPolicyPropertiesResponseOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'HANA'.
func (o HanaBackupDataResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataResponseOutput) DbInstanceSnapshotBackupPolicy() DBBackupPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) *DBBackupPolicyPropertiesResponse {
		return v.DbInstanceSnapshotBackupPolicy
	}).(DBBackupPolicyPropertiesResponsePtrOutput)
}

// Name of the HANA Database User Store Key.
func (o HanaBackupDataResponseOutput) HdbuserstoreKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) string { return v.HdbuserstoreKeyName }).(pulumi.StringOutput)
}

// Gets or sets the database instance number.
func (o HanaBackupDataResponseOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o HanaBackupDataResponseOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

// Path of the SSL key store.
func (o HanaBackupDataResponseOutput) SslConfiguration() SSLConfigurationResponsePtrOutput {
	return o.ApplyT(func(v HanaBackupDataResponse) *SSLConfigurationResponse { return v.SslConfiguration }).(SSLConfigurationResponsePtrOutput)
}

type HanaBackupDataResponsePtrOutput struct{ *pulumi.OutputState }

func (HanaBackupDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaBackupDataResponse)(nil)).Elem()
}

func (o HanaBackupDataResponsePtrOutput) ToHanaBackupDataResponsePtrOutput() HanaBackupDataResponsePtrOutput {
	return o
}

func (o HanaBackupDataResponsePtrOutput) ToHanaBackupDataResponsePtrOutputWithContext(ctx context.Context) HanaBackupDataResponsePtrOutput {
	return o
}

func (o HanaBackupDataResponsePtrOutput) Elem() HanaBackupDataResponseOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) HanaBackupDataResponse {
		if v != nil {
			return *v
		}
		var ret HanaBackupDataResponse
		return ret
	}).(HanaBackupDataResponseOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataResponsePtrOutput) BackupPolicy() DBBackupPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *DBBackupPolicyPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(DBBackupPolicyPropertiesResponsePtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'HANA'.
func (o HanaBackupDataResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Defines the policy properties for database backup.
func (o HanaBackupDataResponsePtrOutput) DbInstanceSnapshotBackupPolicy() DBBackupPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *DBBackupPolicyPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DbInstanceSnapshotBackupPolicy
	}).(DBBackupPolicyPropertiesResponsePtrOutput)
}

// Name of the HANA Database User Store Key.
func (o HanaBackupDataResponsePtrOutput) HdbuserstoreKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HdbuserstoreKeyName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaBackupDataResponsePtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o HanaBackupDataResponsePtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// Path of the SSL key store.
func (o HanaBackupDataResponsePtrOutput) SslConfiguration() SSLConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *HanaBackupDataResponse) *SSLConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SSLConfigurationResponsePtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstanceProperties struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// HanaDbProviderInstancePropertiesInput is an input type that accepts HanaDbProviderInstancePropertiesArgs and HanaDbProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `HanaDbProviderInstancePropertiesInput` via:
//
//	HanaDbProviderInstancePropertiesArgs{...}
type HanaDbProviderInstancePropertiesInput interface {
	pulumi.Input

	ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput
	ToHanaDbProviderInstancePropertiesOutputWithContext(context.Context) HanaDbProviderInstancePropertiesOutput
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesArgs struct {
	// Gets or sets the hana database name.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber pulumi.StringPtrInput `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort pulumi.StringPtrInput `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate pulumi.StringPtrInput `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (HanaDbProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput {
	return i.ToHanaDbProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesOutput)
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return i.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesOutput).ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// HanaDbProviderInstancePropertiesPtrInput is an input type that accepts HanaDbProviderInstancePropertiesArgs, HanaDbProviderInstancePropertiesPtr and HanaDbProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `HanaDbProviderInstancePropertiesPtrInput` via:
//
//	        HanaDbProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type HanaDbProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput
	ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Context) HanaDbProviderInstancePropertiesPtrOutput
}

type hanaDbProviderInstancePropertiesPtrType HanaDbProviderInstancePropertiesArgs

func HanaDbProviderInstancePropertiesPtr(v *HanaDbProviderInstancePropertiesArgs) HanaDbProviderInstancePropertiesPtrInput {
	return (*hanaDbProviderInstancePropertiesPtrType)(v)
}

func (*hanaDbProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (i *hanaDbProviderInstancePropertiesPtrType) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return i.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *hanaDbProviderInstancePropertiesPtrType) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesPtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return o.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HanaDbProviderInstanceProperties) *HanaDbProviderInstanceProperties {
		return &v
	}).(HanaDbProviderInstancePropertiesPtrOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SqlPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type HanaDbProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesPtrOutput) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesPtrOutput) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesPtrOutput) Elem() HanaDbProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) HanaDbProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret HanaDbProviderInstanceProperties
		return ret
	}).(HanaDbProviderInstancePropertiesOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesPtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesPtrOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SqlPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesResponse struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesResponseOutput) ToHanaDbProviderInstancePropertiesResponseOutput() HanaDbProviderInstancePropertiesResponseOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponseOutput) ToHanaDbProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesResponseOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesResponseOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SqlPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type HanaDbProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ToHanaDbProviderInstancePropertiesResponsePtrOutput() HanaDbProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ToHanaDbProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) Elem() HanaDbProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) HanaDbProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret HanaDbProviderInstancePropertiesResponse
		return ret
	}).(HanaDbProviderInstancePropertiesResponseOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SqlPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Resource health details
type HealthResponse struct {
	// State of health of the provider instance
	HealthState string `pulumi:"healthState"`
	// Reasons impacting health state
	ImpactingReasons string `pulumi:"impactingReasons"`
}

// Resource health details
type HealthResponseOutput struct{ *pulumi.OutputState }

func (HealthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthResponse)(nil)).Elem()
}

func (o HealthResponseOutput) ToHealthResponseOutput() HealthResponseOutput {
	return o
}

func (o HealthResponseOutput) ToHealthResponseOutputWithContext(ctx context.Context) HealthResponseOutput {
	return o
}

// State of health of the provider instance
func (o HealthResponseOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v HealthResponse) string { return v.HealthState }).(pulumi.StringOutput)
}

// Reasons impacting health state
func (o HealthResponseOutput) ImpactingReasons() pulumi.StringOutput {
	return o.ApplyT(func(v HealthResponse) string { return v.ImpactingReasons }).(pulumi.StringOutput)
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfiguration struct {
	// The high availability type.
	HighAvailabilityType string `pulumi:"highAvailabilityType"`
}

// HighAvailabilityConfigurationInput is an input type that accepts HighAvailabilityConfigurationArgs and HighAvailabilityConfigurationOutput values.
// You can construct a concrete instance of `HighAvailabilityConfigurationInput` via:
//
//	HighAvailabilityConfigurationArgs{...}
type HighAvailabilityConfigurationInput interface {
	pulumi.Input

	ToHighAvailabilityConfigurationOutput() HighAvailabilityConfigurationOutput
	ToHighAvailabilityConfigurationOutputWithContext(context.Context) HighAvailabilityConfigurationOutput
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfigurationArgs struct {
	// The high availability type.
	HighAvailabilityType pulumi.StringInput `pulumi:"highAvailabilityType"`
}

func (HighAvailabilityConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilityConfiguration)(nil)).Elem()
}

func (i HighAvailabilityConfigurationArgs) ToHighAvailabilityConfigurationOutput() HighAvailabilityConfigurationOutput {
	return i.ToHighAvailabilityConfigurationOutputWithContext(context.Background())
}

func (i HighAvailabilityConfigurationArgs) ToHighAvailabilityConfigurationOutputWithContext(ctx context.Context) HighAvailabilityConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityConfigurationOutput)
}

func (i HighAvailabilityConfigurationArgs) ToHighAvailabilityConfigurationPtrOutput() HighAvailabilityConfigurationPtrOutput {
	return i.ToHighAvailabilityConfigurationPtrOutputWithContext(context.Background())
}

func (i HighAvailabilityConfigurationArgs) ToHighAvailabilityConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilityConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityConfigurationOutput).ToHighAvailabilityConfigurationPtrOutputWithContext(ctx)
}

// HighAvailabilityConfigurationPtrInput is an input type that accepts HighAvailabilityConfigurationArgs, HighAvailabilityConfigurationPtr and HighAvailabilityConfigurationPtrOutput values.
// You can construct a concrete instance of `HighAvailabilityConfigurationPtrInput` via:
//
//	        HighAvailabilityConfigurationArgs{...}
//
//	or:
//
//	        nil
type HighAvailabilityConfigurationPtrInput interface {
	pulumi.Input

	ToHighAvailabilityConfigurationPtrOutput() HighAvailabilityConfigurationPtrOutput
	ToHighAvailabilityConfigurationPtrOutputWithContext(context.Context) HighAvailabilityConfigurationPtrOutput
}

type highAvailabilityConfigurationPtrType HighAvailabilityConfigurationArgs

func HighAvailabilityConfigurationPtr(v *HighAvailabilityConfigurationArgs) HighAvailabilityConfigurationPtrInput {
	return (*highAvailabilityConfigurationPtrType)(v)
}

func (*highAvailabilityConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilityConfiguration)(nil)).Elem()
}

func (i *highAvailabilityConfigurationPtrType) ToHighAvailabilityConfigurationPtrOutput() HighAvailabilityConfigurationPtrOutput {
	return i.ToHighAvailabilityConfigurationPtrOutputWithContext(context.Background())
}

func (i *highAvailabilityConfigurationPtrType) ToHighAvailabilityConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilityConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilityConfigurationPtrOutput)
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfigurationOutput struct{ *pulumi.OutputState }

func (HighAvailabilityConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilityConfiguration)(nil)).Elem()
}

func (o HighAvailabilityConfigurationOutput) ToHighAvailabilityConfigurationOutput() HighAvailabilityConfigurationOutput {
	return o
}

func (o HighAvailabilityConfigurationOutput) ToHighAvailabilityConfigurationOutputWithContext(ctx context.Context) HighAvailabilityConfigurationOutput {
	return o
}

func (o HighAvailabilityConfigurationOutput) ToHighAvailabilityConfigurationPtrOutput() HighAvailabilityConfigurationPtrOutput {
	return o.ToHighAvailabilityConfigurationPtrOutputWithContext(context.Background())
}

func (o HighAvailabilityConfigurationOutput) ToHighAvailabilityConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilityConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HighAvailabilityConfiguration) *HighAvailabilityConfiguration {
		return &v
	}).(HighAvailabilityConfigurationPtrOutput)
}

// The high availability type.
func (o HighAvailabilityConfigurationOutput) HighAvailabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilityConfiguration) string { return v.HighAvailabilityType }).(pulumi.StringOutput)
}

type HighAvailabilityConfigurationPtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilityConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilityConfiguration)(nil)).Elem()
}

func (o HighAvailabilityConfigurationPtrOutput) ToHighAvailabilityConfigurationPtrOutput() HighAvailabilityConfigurationPtrOutput {
	return o
}

func (o HighAvailabilityConfigurationPtrOutput) ToHighAvailabilityConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilityConfigurationPtrOutput {
	return o
}

func (o HighAvailabilityConfigurationPtrOutput) Elem() HighAvailabilityConfigurationOutput {
	return o.ApplyT(func(v *HighAvailabilityConfiguration) HighAvailabilityConfiguration {
		if v != nil {
			return *v
		}
		var ret HighAvailabilityConfiguration
		return ret
	}).(HighAvailabilityConfigurationOutput)
}

// The high availability type.
func (o HighAvailabilityConfigurationPtrOutput) HighAvailabilityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilityConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.HighAvailabilityType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfigurationResponse struct {
	// The high availability type.
	HighAvailabilityType string `pulumi:"highAvailabilityType"`
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfigurationResponseOutput struct{ *pulumi.OutputState }

func (HighAvailabilityConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilityConfigurationResponse)(nil)).Elem()
}

func (o HighAvailabilityConfigurationResponseOutput) ToHighAvailabilityConfigurationResponseOutput() HighAvailabilityConfigurationResponseOutput {
	return o
}

func (o HighAvailabilityConfigurationResponseOutput) ToHighAvailabilityConfigurationResponseOutputWithContext(ctx context.Context) HighAvailabilityConfigurationResponseOutput {
	return o
}

// The high availability type.
func (o HighAvailabilityConfigurationResponseOutput) HighAvailabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilityConfigurationResponse) string { return v.HighAvailabilityType }).(pulumi.StringOutput)
}

type HighAvailabilityConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilityConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilityConfigurationResponse)(nil)).Elem()
}

func (o HighAvailabilityConfigurationResponsePtrOutput) ToHighAvailabilityConfigurationResponsePtrOutput() HighAvailabilityConfigurationResponsePtrOutput {
	return o
}

func (o HighAvailabilityConfigurationResponsePtrOutput) ToHighAvailabilityConfigurationResponsePtrOutputWithContext(ctx context.Context) HighAvailabilityConfigurationResponsePtrOutput {
	return o
}

func (o HighAvailabilityConfigurationResponsePtrOutput) Elem() HighAvailabilityConfigurationResponseOutput {
	return o.ApplyT(func(v *HighAvailabilityConfigurationResponse) HighAvailabilityConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret HighAvailabilityConfigurationResponse
		return ret
	}).(HighAvailabilityConfigurationResponseOutput)
}

// The high availability type.
func (o HighAvailabilityConfigurationResponsePtrOutput) HighAvailabilityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilityConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HighAvailabilityType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfiguration struct {
	// The fencing client id.
	FencingClientId string `pulumi:"fencingClientId"`
	// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
	FencingClientPassword string `pulumi:"fencingClientPassword"`
}

// HighAvailabilitySoftwareConfigurationInput is an input type that accepts HighAvailabilitySoftwareConfigurationArgs and HighAvailabilitySoftwareConfigurationOutput values.
// You can construct a concrete instance of `HighAvailabilitySoftwareConfigurationInput` via:
//
//	HighAvailabilitySoftwareConfigurationArgs{...}
type HighAvailabilitySoftwareConfigurationInput interface {
	pulumi.Input

	ToHighAvailabilitySoftwareConfigurationOutput() HighAvailabilitySoftwareConfigurationOutput
	ToHighAvailabilitySoftwareConfigurationOutputWithContext(context.Context) HighAvailabilitySoftwareConfigurationOutput
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfigurationArgs struct {
	// The fencing client id.
	FencingClientId pulumi.StringInput `pulumi:"fencingClientId"`
	// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
	FencingClientPassword pulumi.StringInput `pulumi:"fencingClientPassword"`
}

func (HighAvailabilitySoftwareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilitySoftwareConfiguration)(nil)).Elem()
}

func (i HighAvailabilitySoftwareConfigurationArgs) ToHighAvailabilitySoftwareConfigurationOutput() HighAvailabilitySoftwareConfigurationOutput {
	return i.ToHighAvailabilitySoftwareConfigurationOutputWithContext(context.Background())
}

func (i HighAvailabilitySoftwareConfigurationArgs) ToHighAvailabilitySoftwareConfigurationOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilitySoftwareConfigurationOutput)
}

func (i HighAvailabilitySoftwareConfigurationArgs) ToHighAvailabilitySoftwareConfigurationPtrOutput() HighAvailabilitySoftwareConfigurationPtrOutput {
	return i.ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i HighAvailabilitySoftwareConfigurationArgs) ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilitySoftwareConfigurationOutput).ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(ctx)
}

// HighAvailabilitySoftwareConfigurationPtrInput is an input type that accepts HighAvailabilitySoftwareConfigurationArgs, HighAvailabilitySoftwareConfigurationPtr and HighAvailabilitySoftwareConfigurationPtrOutput values.
// You can construct a concrete instance of `HighAvailabilitySoftwareConfigurationPtrInput` via:
//
//	        HighAvailabilitySoftwareConfigurationArgs{...}
//
//	or:
//
//	        nil
type HighAvailabilitySoftwareConfigurationPtrInput interface {
	pulumi.Input

	ToHighAvailabilitySoftwareConfigurationPtrOutput() HighAvailabilitySoftwareConfigurationPtrOutput
	ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(context.Context) HighAvailabilitySoftwareConfigurationPtrOutput
}

type highAvailabilitySoftwareConfigurationPtrType HighAvailabilitySoftwareConfigurationArgs

func HighAvailabilitySoftwareConfigurationPtr(v *HighAvailabilitySoftwareConfigurationArgs) HighAvailabilitySoftwareConfigurationPtrInput {
	return (*highAvailabilitySoftwareConfigurationPtrType)(v)
}

func (*highAvailabilitySoftwareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilitySoftwareConfiguration)(nil)).Elem()
}

func (i *highAvailabilitySoftwareConfigurationPtrType) ToHighAvailabilitySoftwareConfigurationPtrOutput() HighAvailabilitySoftwareConfigurationPtrOutput {
	return i.ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i *highAvailabilitySoftwareConfigurationPtrType) ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfigurationOutput struct{ *pulumi.OutputState }

func (HighAvailabilitySoftwareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilitySoftwareConfiguration)(nil)).Elem()
}

func (o HighAvailabilitySoftwareConfigurationOutput) ToHighAvailabilitySoftwareConfigurationOutput() HighAvailabilitySoftwareConfigurationOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationOutput) ToHighAvailabilitySoftwareConfigurationOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationOutput) ToHighAvailabilitySoftwareConfigurationPtrOutput() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (o HighAvailabilitySoftwareConfigurationOutput) ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HighAvailabilitySoftwareConfiguration) *HighAvailabilitySoftwareConfiguration {
		return &v
	}).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// The fencing client id.
func (o HighAvailabilitySoftwareConfigurationOutput) FencingClientId() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilitySoftwareConfiguration) string { return v.FencingClientId }).(pulumi.StringOutput)
}

// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
func (o HighAvailabilitySoftwareConfigurationOutput) FencingClientPassword() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilitySoftwareConfiguration) string { return v.FencingClientPassword }).(pulumi.StringOutput)
}

type HighAvailabilitySoftwareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilitySoftwareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilitySoftwareConfiguration)(nil)).Elem()
}

func (o HighAvailabilitySoftwareConfigurationPtrOutput) ToHighAvailabilitySoftwareConfigurationPtrOutput() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationPtrOutput) ToHighAvailabilitySoftwareConfigurationPtrOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationPtrOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationPtrOutput) Elem() HighAvailabilitySoftwareConfigurationOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfiguration) HighAvailabilitySoftwareConfiguration {
		if v != nil {
			return *v
		}
		var ret HighAvailabilitySoftwareConfiguration
		return ret
	}).(HighAvailabilitySoftwareConfigurationOutput)
}

// The fencing client id.
func (o HighAvailabilitySoftwareConfigurationPtrOutput) FencingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FencingClientId
	}).(pulumi.StringPtrOutput)
}

// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
func (o HighAvailabilitySoftwareConfigurationPtrOutput) FencingClientPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.FencingClientPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfigurationResponse struct {
	// The fencing client id.
	FencingClientId string `pulumi:"fencingClientId"`
	// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
	FencingClientPassword string `pulumi:"fencingClientPassword"`
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (HighAvailabilitySoftwareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighAvailabilitySoftwareConfigurationResponse)(nil)).Elem()
}

func (o HighAvailabilitySoftwareConfigurationResponseOutput) ToHighAvailabilitySoftwareConfigurationResponseOutput() HighAvailabilitySoftwareConfigurationResponseOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationResponseOutput) ToHighAvailabilitySoftwareConfigurationResponseOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationResponseOutput {
	return o
}

// The fencing client id.
func (o HighAvailabilitySoftwareConfigurationResponseOutput) FencingClientId() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilitySoftwareConfigurationResponse) string { return v.FencingClientId }).(pulumi.StringOutput)
}

// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
func (o HighAvailabilitySoftwareConfigurationResponseOutput) FencingClientPassword() pulumi.StringOutput {
	return o.ApplyT(func(v HighAvailabilitySoftwareConfigurationResponse) string { return v.FencingClientPassword }).(pulumi.StringOutput)
}

type HighAvailabilitySoftwareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (HighAvailabilitySoftwareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HighAvailabilitySoftwareConfigurationResponse)(nil)).Elem()
}

func (o HighAvailabilitySoftwareConfigurationResponsePtrOutput) ToHighAvailabilitySoftwareConfigurationResponsePtrOutput() HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationResponsePtrOutput) ToHighAvailabilitySoftwareConfigurationResponsePtrOutputWithContext(ctx context.Context) HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o
}

func (o HighAvailabilitySoftwareConfigurationResponsePtrOutput) Elem() HighAvailabilitySoftwareConfigurationResponseOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfigurationResponse) HighAvailabilitySoftwareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret HighAvailabilitySoftwareConfigurationResponse
		return ret
	}).(HighAvailabilitySoftwareConfigurationResponseOutput)
}

// The fencing client id.
func (o HighAvailabilitySoftwareConfigurationResponsePtrOutput) FencingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FencingClientId
	}).(pulumi.StringPtrOutput)
}

// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
func (o HighAvailabilitySoftwareConfigurationResponsePtrOutput) FencingClientPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HighAvailabilitySoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FencingClientPassword
	}).(pulumi.StringPtrOutput)
}

// Hourly schedule.
type HourlySchedule struct {
	// Interval at which backup needs to be triggered. For hourly the value
	//  can be 4/6/8/12
	Interval *int `pulumi:"interval"`
	// To specify duration of the backup window
	ScheduleWindowDuration *int `pulumi:"scheduleWindowDuration"`
	// To specify start time of the backup window
	ScheduleWindowStartTime *string `pulumi:"scheduleWindowStartTime"`
}

// HourlyScheduleInput is an input type that accepts HourlyScheduleArgs and HourlyScheduleOutput values.
// You can construct a concrete instance of `HourlyScheduleInput` via:
//
//	HourlyScheduleArgs{...}
type HourlyScheduleInput interface {
	pulumi.Input

	ToHourlyScheduleOutput() HourlyScheduleOutput
	ToHourlyScheduleOutputWithContext(context.Context) HourlyScheduleOutput
}

// Hourly schedule.
type HourlyScheduleArgs struct {
	// Interval at which backup needs to be triggered. For hourly the value
	//  can be 4/6/8/12
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// To specify duration of the backup window
	ScheduleWindowDuration pulumi.IntPtrInput `pulumi:"scheduleWindowDuration"`
	// To specify start time of the backup window
	ScheduleWindowStartTime pulumi.StringPtrInput `pulumi:"scheduleWindowStartTime"`
}

func (HourlyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlySchedule)(nil)).Elem()
}

func (i HourlyScheduleArgs) ToHourlyScheduleOutput() HourlyScheduleOutput {
	return i.ToHourlyScheduleOutputWithContext(context.Background())
}

func (i HourlyScheduleArgs) ToHourlyScheduleOutputWithContext(ctx context.Context) HourlyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleOutput)
}

func (i HourlyScheduleArgs) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return i.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (i HourlyScheduleArgs) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlyScheduleOutput).ToHourlySchedulePtrOutputWithContext(ctx)
}

// HourlySchedulePtrInput is an input type that accepts HourlyScheduleArgs, HourlySchedulePtr and HourlySchedulePtrOutput values.
// You can construct a concrete instance of `HourlySchedulePtrInput` via:
//
//	        HourlyScheduleArgs{...}
//
//	or:
//
//	        nil
type HourlySchedulePtrInput interface {
	pulumi.Input

	ToHourlySchedulePtrOutput() HourlySchedulePtrOutput
	ToHourlySchedulePtrOutputWithContext(context.Context) HourlySchedulePtrOutput
}

type hourlySchedulePtrType HourlyScheduleArgs

func HourlySchedulePtr(v *HourlyScheduleArgs) HourlySchedulePtrInput {
	return (*hourlySchedulePtrType)(v)
}

func (*hourlySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlySchedule)(nil)).Elem()
}

func (i *hourlySchedulePtrType) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return i.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (i *hourlySchedulePtrType) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HourlySchedulePtrOutput)
}

// Hourly schedule.
type HourlyScheduleOutput struct{ *pulumi.OutputState }

func (HourlyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlySchedule)(nil)).Elem()
}

func (o HourlyScheduleOutput) ToHourlyScheduleOutput() HourlyScheduleOutput {
	return o
}

func (o HourlyScheduleOutput) ToHourlyScheduleOutputWithContext(ctx context.Context) HourlyScheduleOutput {
	return o
}

func (o HourlyScheduleOutput) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return o.ToHourlySchedulePtrOutputWithContext(context.Background())
}

func (o HourlyScheduleOutput) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HourlySchedule) *HourlySchedule {
		return &v
	}).(HourlySchedulePtrOutput)
}

// Interval at which backup needs to be triggered. For hourly the value
//
//	can be 4/6/8/12
func (o HourlyScheduleOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// To specify duration of the backup window
func (o HourlyScheduleOutput) ScheduleWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *int { return v.ScheduleWindowDuration }).(pulumi.IntPtrOutput)
}

// To specify start time of the backup window
func (o HourlyScheduleOutput) ScheduleWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HourlySchedule) *string { return v.ScheduleWindowStartTime }).(pulumi.StringPtrOutput)
}

type HourlySchedulePtrOutput struct{ *pulumi.OutputState }

func (HourlySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlySchedule)(nil)).Elem()
}

func (o HourlySchedulePtrOutput) ToHourlySchedulePtrOutput() HourlySchedulePtrOutput {
	return o
}

func (o HourlySchedulePtrOutput) ToHourlySchedulePtrOutputWithContext(ctx context.Context) HourlySchedulePtrOutput {
	return o
}

func (o HourlySchedulePtrOutput) Elem() HourlyScheduleOutput {
	return o.ApplyT(func(v *HourlySchedule) HourlySchedule {
		if v != nil {
			return *v
		}
		var ret HourlySchedule
		return ret
	}).(HourlyScheduleOutput)
}

// Interval at which backup needs to be triggered. For hourly the value
//
//	can be 4/6/8/12
func (o HourlySchedulePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// To specify duration of the backup window
func (o HourlySchedulePtrOutput) ScheduleWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleWindowDuration
	}).(pulumi.IntPtrOutput)
}

// To specify start time of the backup window
func (o HourlySchedulePtrOutput) ScheduleWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourlySchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// Hourly schedule.
type HourlyScheduleResponse struct {
	// Interval at which backup needs to be triggered. For hourly the value
	//  can be 4/6/8/12
	Interval *int `pulumi:"interval"`
	// To specify duration of the backup window
	ScheduleWindowDuration *int `pulumi:"scheduleWindowDuration"`
	// To specify start time of the backup window
	ScheduleWindowStartTime *string `pulumi:"scheduleWindowStartTime"`
}

// Hourly schedule.
type HourlyScheduleResponseOutput struct{ *pulumi.OutputState }

func (HourlyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HourlyScheduleResponse)(nil)).Elem()
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponseOutput() HourlyScheduleResponseOutput {
	return o
}

func (o HourlyScheduleResponseOutput) ToHourlyScheduleResponseOutputWithContext(ctx context.Context) HourlyScheduleResponseOutput {
	return o
}

// Interval at which backup needs to be triggered. For hourly the value
//
//	can be 4/6/8/12
func (o HourlyScheduleResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// To specify duration of the backup window
func (o HourlyScheduleResponseOutput) ScheduleWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *int { return v.ScheduleWindowDuration }).(pulumi.IntPtrOutput)
}

// To specify start time of the backup window
func (o HourlyScheduleResponseOutput) ScheduleWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HourlyScheduleResponse) *string { return v.ScheduleWindowStartTime }).(pulumi.StringPtrOutput)
}

type HourlyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (HourlyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HourlyScheduleResponse)(nil)).Elem()
}

func (o HourlyScheduleResponsePtrOutput) ToHourlyScheduleResponsePtrOutput() HourlyScheduleResponsePtrOutput {
	return o
}

func (o HourlyScheduleResponsePtrOutput) ToHourlyScheduleResponsePtrOutputWithContext(ctx context.Context) HourlyScheduleResponsePtrOutput {
	return o
}

func (o HourlyScheduleResponsePtrOutput) Elem() HourlyScheduleResponseOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) HourlyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret HourlyScheduleResponse
		return ret
	}).(HourlyScheduleResponseOutput)
}

// Interval at which backup needs to be triggered. For hourly the value
//
//	can be 4/6/8/12
func (o HourlyScheduleResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// To specify duration of the backup window
func (o HourlyScheduleResponsePtrOutput) ScheduleWindowDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleWindowDuration
	}).(pulumi.IntPtrOutput)
}

// To specify start time of the backup window
func (o HourlyScheduleResponsePtrOutput) ScheduleWindowStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HourlyScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleWindowStartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReference struct {
	// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// ImageReferenceInput is an input type that accepts ImageReferenceArgs and ImageReferenceOutput values.
// You can construct a concrete instance of `ImageReferenceInput` via:
//
//	ImageReferenceArgs{...}
type ImageReferenceInput interface {
	pulumi.Input

	ToImageReferenceOutput() ImageReferenceOutput
	ToImageReferenceOutputWithContext(context.Context) ImageReferenceOutput
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceArgs struct {
	// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// The image publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
	// The image SKU.
	Sku pulumi.StringPtrInput `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ImageReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (i ImageReferenceArgs) ToImageReferenceOutput() ImageReferenceOutput {
	return i.ToImageReferenceOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput)
}

func (i ImageReferenceArgs) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i ImageReferenceArgs) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferenceOutput).ToImageReferencePtrOutputWithContext(ctx)
}

// ImageReferencePtrInput is an input type that accepts ImageReferenceArgs, ImageReferencePtr and ImageReferencePtrOutput values.
// You can construct a concrete instance of `ImageReferencePtrInput` via:
//
//	        ImageReferenceArgs{...}
//
//	or:
//
//	        nil
type ImageReferencePtrInput interface {
	pulumi.Input

	ToImageReferencePtrOutput() ImageReferencePtrOutput
	ToImageReferencePtrOutputWithContext(context.Context) ImageReferencePtrOutput
}

type imageReferencePtrType ImageReferenceArgs

func ImageReferencePtr(v *ImageReferenceArgs) ImageReferencePtrInput {
	return (*imageReferencePtrType)(v)
}

func (*imageReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (i *imageReferencePtrType) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return i.ToImageReferencePtrOutputWithContext(context.Background())
}

func (i *imageReferencePtrType) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageReferencePtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceOutput struct{ *pulumi.OutputState }

func (ImageReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReference)(nil)).Elem()
}

func (o ImageReferenceOutput) ToImageReferenceOutput() ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferenceOutputWithContext(ctx context.Context) ImageReferenceOutput {
	return o
}

func (o ImageReferenceOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o.ToImageReferencePtrOutputWithContext(context.Background())
}

func (o ImageReferenceOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageReference) *ImageReference {
		return &v
	}).(ImageReferencePtrOutput)
}

// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
func (o ImageReferenceOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferenceOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReference) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferencePtrOutput struct{ *pulumi.OutputState }

func (ImageReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReference)(nil)).Elem()
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutput() ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) ToImageReferencePtrOutputWithContext(ctx context.Context) ImageReferencePtrOutput {
	return o
}

func (o ImageReferencePtrOutput) Elem() ImageReferenceOutput {
	return o.ApplyT(func(v *ImageReference) ImageReference {
		if v != nil {
			return *v
		}
		var ret ImageReference
		return ret
	}).(ImageReferenceOutput)
}

// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
func (o ImageReferencePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferencePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferencePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferencePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferencePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReference) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponse struct {
	// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
	Id *string `pulumi:"id"`
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponseOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutput() ImageReferenceResponseOutput {
	return o
}

func (o ImageReferenceResponseOutput) ToImageReferenceResponseOutputWithContext(ctx context.Context) ImageReferenceResponseOutput {
	return o
}

// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
func (o ImageReferenceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponseOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponseOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Sku }).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferenceResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageReferenceResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageReferenceResponse)(nil)).Elem()
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutput() ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) ToImageReferenceResponsePtrOutputWithContext(ctx context.Context) ImageReferenceResponsePtrOutput {
	return o
}

func (o ImageReferenceResponsePtrOutput) Elem() ImageReferenceResponseOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) ImageReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ImageReferenceResponse
		return ret
	}).(ImageReferenceResponseOutput)
}

// Specifies the ARM resource ID of the Azure Compute Gallery image version used for creating ACSS VMs. You will need to provide this input when you choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.
func (o ImageReferenceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
func (o ImageReferenceResponsePtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// The image publisher.
func (o ImageReferenceResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The image SKU.
func (o ImageReferenceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(pulumi.StringPtrOutput)
}

// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
func (o ImageReferenceResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Instant recovery point additional details.
type InstantRPAdditionalDetails struct {
	// Azure backup resource group name prefix.
	AzureBackupRGNamePrefix *string `pulumi:"azureBackupRGNamePrefix"`
	// Azure backup resource group name suffix.
	AzureBackupRGNameSuffix *string `pulumi:"azureBackupRGNameSuffix"`
}

// InstantRPAdditionalDetailsInput is an input type that accepts InstantRPAdditionalDetailsArgs and InstantRPAdditionalDetailsOutput values.
// You can construct a concrete instance of `InstantRPAdditionalDetailsInput` via:
//
//	InstantRPAdditionalDetailsArgs{...}
type InstantRPAdditionalDetailsInput interface {
	pulumi.Input

	ToInstantRPAdditionalDetailsOutput() InstantRPAdditionalDetailsOutput
	ToInstantRPAdditionalDetailsOutputWithContext(context.Context) InstantRPAdditionalDetailsOutput
}

// Instant recovery point additional details.
type InstantRPAdditionalDetailsArgs struct {
	// Azure backup resource group name prefix.
	AzureBackupRGNamePrefix pulumi.StringPtrInput `pulumi:"azureBackupRGNamePrefix"`
	// Azure backup resource group name suffix.
	AzureBackupRGNameSuffix pulumi.StringPtrInput `pulumi:"azureBackupRGNameSuffix"`
}

func (InstantRPAdditionalDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstantRPAdditionalDetails)(nil)).Elem()
}

func (i InstantRPAdditionalDetailsArgs) ToInstantRPAdditionalDetailsOutput() InstantRPAdditionalDetailsOutput {
	return i.ToInstantRPAdditionalDetailsOutputWithContext(context.Background())
}

func (i InstantRPAdditionalDetailsArgs) ToInstantRPAdditionalDetailsOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantRPAdditionalDetailsOutput)
}

func (i InstantRPAdditionalDetailsArgs) ToInstantRPAdditionalDetailsPtrOutput() InstantRPAdditionalDetailsPtrOutput {
	return i.ToInstantRPAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (i InstantRPAdditionalDetailsArgs) ToInstantRPAdditionalDetailsPtrOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantRPAdditionalDetailsOutput).ToInstantRPAdditionalDetailsPtrOutputWithContext(ctx)
}

// InstantRPAdditionalDetailsPtrInput is an input type that accepts InstantRPAdditionalDetailsArgs, InstantRPAdditionalDetailsPtr and InstantRPAdditionalDetailsPtrOutput values.
// You can construct a concrete instance of `InstantRPAdditionalDetailsPtrInput` via:
//
//	        InstantRPAdditionalDetailsArgs{...}
//
//	or:
//
//	        nil
type InstantRPAdditionalDetailsPtrInput interface {
	pulumi.Input

	ToInstantRPAdditionalDetailsPtrOutput() InstantRPAdditionalDetailsPtrOutput
	ToInstantRPAdditionalDetailsPtrOutputWithContext(context.Context) InstantRPAdditionalDetailsPtrOutput
}

type instantRPAdditionalDetailsPtrType InstantRPAdditionalDetailsArgs

func InstantRPAdditionalDetailsPtr(v *InstantRPAdditionalDetailsArgs) InstantRPAdditionalDetailsPtrInput {
	return (*instantRPAdditionalDetailsPtrType)(v)
}

func (*instantRPAdditionalDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantRPAdditionalDetails)(nil)).Elem()
}

func (i *instantRPAdditionalDetailsPtrType) ToInstantRPAdditionalDetailsPtrOutput() InstantRPAdditionalDetailsPtrOutput {
	return i.ToInstantRPAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (i *instantRPAdditionalDetailsPtrType) ToInstantRPAdditionalDetailsPtrOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstantRPAdditionalDetailsPtrOutput)
}

// Instant recovery point additional details.
type InstantRPAdditionalDetailsOutput struct{ *pulumi.OutputState }

func (InstantRPAdditionalDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstantRPAdditionalDetails)(nil)).Elem()
}

func (o InstantRPAdditionalDetailsOutput) ToInstantRPAdditionalDetailsOutput() InstantRPAdditionalDetailsOutput {
	return o
}

func (o InstantRPAdditionalDetailsOutput) ToInstantRPAdditionalDetailsOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsOutput {
	return o
}

func (o InstantRPAdditionalDetailsOutput) ToInstantRPAdditionalDetailsPtrOutput() InstantRPAdditionalDetailsPtrOutput {
	return o.ToInstantRPAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (o InstantRPAdditionalDetailsOutput) ToInstantRPAdditionalDetailsPtrOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstantRPAdditionalDetails) *InstantRPAdditionalDetails {
		return &v
	}).(InstantRPAdditionalDetailsPtrOutput)
}

// Azure backup resource group name prefix.
func (o InstantRPAdditionalDetailsOutput) AzureBackupRGNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstantRPAdditionalDetails) *string { return v.AzureBackupRGNamePrefix }).(pulumi.StringPtrOutput)
}

// Azure backup resource group name suffix.
func (o InstantRPAdditionalDetailsOutput) AzureBackupRGNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstantRPAdditionalDetails) *string { return v.AzureBackupRGNameSuffix }).(pulumi.StringPtrOutput)
}

type InstantRPAdditionalDetailsPtrOutput struct{ *pulumi.OutputState }

func (InstantRPAdditionalDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantRPAdditionalDetails)(nil)).Elem()
}

func (o InstantRPAdditionalDetailsPtrOutput) ToInstantRPAdditionalDetailsPtrOutput() InstantRPAdditionalDetailsPtrOutput {
	return o
}

func (o InstantRPAdditionalDetailsPtrOutput) ToInstantRPAdditionalDetailsPtrOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsPtrOutput {
	return o
}

func (o InstantRPAdditionalDetailsPtrOutput) Elem() InstantRPAdditionalDetailsOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetails) InstantRPAdditionalDetails {
		if v != nil {
			return *v
		}
		var ret InstantRPAdditionalDetails
		return ret
	}).(InstantRPAdditionalDetailsOutput)
}

// Azure backup resource group name prefix.
func (o InstantRPAdditionalDetailsPtrOutput) AzureBackupRGNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetails) *string {
		if v == nil {
			return nil
		}
		return v.AzureBackupRGNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Azure backup resource group name suffix.
func (o InstantRPAdditionalDetailsPtrOutput) AzureBackupRGNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetails) *string {
		if v == nil {
			return nil
		}
		return v.AzureBackupRGNameSuffix
	}).(pulumi.StringPtrOutput)
}

// Instant recovery point additional details.
type InstantRPAdditionalDetailsResponse struct {
	// Azure backup resource group name prefix.
	AzureBackupRGNamePrefix *string `pulumi:"azureBackupRGNamePrefix"`
	// Azure backup resource group name suffix.
	AzureBackupRGNameSuffix *string `pulumi:"azureBackupRGNameSuffix"`
}

// Instant recovery point additional details.
type InstantRPAdditionalDetailsResponseOutput struct{ *pulumi.OutputState }

func (InstantRPAdditionalDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstantRPAdditionalDetailsResponse)(nil)).Elem()
}

func (o InstantRPAdditionalDetailsResponseOutput) ToInstantRPAdditionalDetailsResponseOutput() InstantRPAdditionalDetailsResponseOutput {
	return o
}

func (o InstantRPAdditionalDetailsResponseOutput) ToInstantRPAdditionalDetailsResponseOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsResponseOutput {
	return o
}

// Azure backup resource group name prefix.
func (o InstantRPAdditionalDetailsResponseOutput) AzureBackupRGNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstantRPAdditionalDetailsResponse) *string { return v.AzureBackupRGNamePrefix }).(pulumi.StringPtrOutput)
}

// Azure backup resource group name suffix.
func (o InstantRPAdditionalDetailsResponseOutput) AzureBackupRGNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstantRPAdditionalDetailsResponse) *string { return v.AzureBackupRGNameSuffix }).(pulumi.StringPtrOutput)
}

type InstantRPAdditionalDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (InstantRPAdditionalDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstantRPAdditionalDetailsResponse)(nil)).Elem()
}

func (o InstantRPAdditionalDetailsResponsePtrOutput) ToInstantRPAdditionalDetailsResponsePtrOutput() InstantRPAdditionalDetailsResponsePtrOutput {
	return o
}

func (o InstantRPAdditionalDetailsResponsePtrOutput) ToInstantRPAdditionalDetailsResponsePtrOutputWithContext(ctx context.Context) InstantRPAdditionalDetailsResponsePtrOutput {
	return o
}

func (o InstantRPAdditionalDetailsResponsePtrOutput) Elem() InstantRPAdditionalDetailsResponseOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetailsResponse) InstantRPAdditionalDetailsResponse {
		if v != nil {
			return *v
		}
		var ret InstantRPAdditionalDetailsResponse
		return ret
	}).(InstantRPAdditionalDetailsResponseOutput)
}

// Azure backup resource group name prefix.
func (o InstantRPAdditionalDetailsResponsePtrOutput) AzureBackupRGNamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureBackupRGNamePrefix
	}).(pulumi.StringPtrOutput)
}

// Azure backup resource group name suffix.
func (o InstantRPAdditionalDetailsResponsePtrOutput) AzureBackupRGNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstantRPAdditionalDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AzureBackupRGNameSuffix
	}).(pulumi.StringPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// The OS Type
	// Expected value is 'Linux'.
	OsType string `pulumi:"osType"`
	// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
	Ssh *SshConfiguration `pulumi:"ssh"`
	// The SSH Key-pair used to authenticate with the VM's.
	SshKeyPair *SshKeyPair `pulumi:"sshKeyPair"`
}

// LinuxConfigurationInput is an input type that accepts LinuxConfigurationArgs and LinuxConfigurationOutput values.
// You can construct a concrete instance of `LinuxConfigurationInput` via:
//
//	LinuxConfigurationArgs{...}
type LinuxConfigurationInput interface {
	pulumi.Input

	ToLinuxConfigurationOutput() LinuxConfigurationOutput
	ToLinuxConfigurationOutputWithContext(context.Context) LinuxConfigurationOutput
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationArgs struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication pulumi.BoolPtrInput `pulumi:"disablePasswordAuthentication"`
	// The OS Type
	// Expected value is 'Linux'.
	OsType pulumi.StringInput `pulumi:"osType"`
	// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
	Ssh SshConfigurationPtrInput `pulumi:"ssh"`
	// The SSH Key-pair used to authenticate with the VM's.
	SshKeyPair SshKeyPairPtrInput `pulumi:"sshKeyPair"`
}

func (LinuxConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfiguration)(nil)).Elem()
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutput() LinuxConfigurationOutput {
	return i.ToLinuxConfigurationOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationOutputWithContext(ctx context.Context) LinuxConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput)
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i LinuxConfigurationArgs) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationOutput).ToLinuxConfigurationPtrOutputWithContext(ctx)
}

// LinuxConfigurationPtrInput is an input type that accepts LinuxConfigurationArgs, LinuxConfigurationPtr and LinuxConfigurationPtrOutput values.
// You can construct a concrete instance of `LinuxConfigurationPtrInput` via:
//
//	        LinuxConfigurationArgs{...}
//
//	or:
//
//	        nil
type LinuxConfigurationPtrInput interface {
	pulumi.Input

	ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput
	ToLinuxConfigurationPtrOutputWithContext(context.Context) LinuxConfigurationPtrOutput
}

type linuxConfigurationPtrType LinuxConfigurationArgs

func LinuxConfigurationPtr(v *LinuxConfigurationArgs) LinuxConfigurationPtrInput {
	return (*linuxConfigurationPtrType)(v)
}

func (*linuxConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfiguration)(nil)).Elem()
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return i.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (i *linuxConfigurationPtrType) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinuxConfigurationPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfiguration)(nil)).Elem()
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationOutput() LinuxConfigurationOutput {
	return o
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationOutputWithContext(ctx context.Context) LinuxConfigurationOutput {
	return o
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return o.ToLinuxConfigurationPtrOutputWithContext(context.Background())
}

func (o LinuxConfigurationOutput) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinuxConfiguration) *LinuxConfiguration {
		return &v
	}).(LinuxConfigurationPtrOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *bool { return v.DisablePasswordAuthentication }).(pulumi.BoolPtrOutput)
}

// The OS Type
// Expected value is 'Linux'.
func (o LinuxConfigurationOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxConfiguration) string { return v.OsType }).(pulumi.StringOutput)
}

// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
func (o LinuxConfigurationOutput) Ssh() SshConfigurationPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *SshConfiguration { return v.Ssh }).(SshConfigurationPtrOutput)
}

// The SSH Key-pair used to authenticate with the VM's.
func (o LinuxConfigurationOutput) SshKeyPair() SshKeyPairPtrOutput {
	return o.ApplyT(func(v LinuxConfiguration) *SshKeyPair { return v.SshKeyPair }).(SshKeyPairPtrOutput)
}

type LinuxConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfiguration)(nil)).Elem()
}

func (o LinuxConfigurationPtrOutput) ToLinuxConfigurationPtrOutput() LinuxConfigurationPtrOutput {
	return o
}

func (o LinuxConfigurationPtrOutput) ToLinuxConfigurationPtrOutputWithContext(ctx context.Context) LinuxConfigurationPtrOutput {
	return o
}

func (o LinuxConfigurationPtrOutput) Elem() LinuxConfigurationOutput {
	return o.ApplyT(func(v *LinuxConfiguration) LinuxConfiguration {
		if v != nil {
			return *v
		}
		var ret LinuxConfiguration
		return ret
	}).(LinuxConfigurationOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationPtrOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePasswordAuthentication
	}).(pulumi.BoolPtrOutput)
}

// The OS Type
// Expected value is 'Linux'.
func (o LinuxConfigurationPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
func (o LinuxConfigurationPtrOutput) Ssh() SshConfigurationPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *SshConfiguration {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(SshConfigurationPtrOutput)
}

// The SSH Key-pair used to authenticate with the VM's.
func (o LinuxConfigurationPtrOutput) SshKeyPair() SshKeyPairPtrOutput {
	return o.ApplyT(func(v *LinuxConfiguration) *SshKeyPair {
		if v == nil {
			return nil
		}
		return v.SshKeyPair
	}).(SshKeyPairPtrOutput)
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationResponse struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// The OS Type
	// Expected value is 'Linux'.
	OsType string `pulumi:"osType"`
	// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
	Ssh *SshConfigurationResponse `pulumi:"ssh"`
	// The SSH Key-pair used to authenticate with the VM's.
	SshKeyPair *SshKeyPairResponse `pulumi:"sshKeyPair"`
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutput() LinuxConfigurationResponseOutput {
	return o
}

func (o LinuxConfigurationResponseOutput) ToLinuxConfigurationResponseOutputWithContext(ctx context.Context) LinuxConfigurationResponseOutput {
	return o
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponseOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *bool { return v.DisablePasswordAuthentication }).(pulumi.BoolPtrOutput)
}

// The OS Type
// Expected value is 'Linux'.
func (o LinuxConfigurationResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
func (o LinuxConfigurationResponseOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *SshConfigurationResponse { return v.Ssh }).(SshConfigurationResponsePtrOutput)
}

// The SSH Key-pair used to authenticate with the VM's.
func (o LinuxConfigurationResponseOutput) SshKeyPair() SshKeyPairResponsePtrOutput {
	return o.ApplyT(func(v LinuxConfigurationResponse) *SshKeyPairResponse { return v.SshKeyPair }).(SshKeyPairResponsePtrOutput)
}

type LinuxConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LinuxConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinuxConfigurationResponse)(nil)).Elem()
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutput() LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) ToLinuxConfigurationResponsePtrOutputWithContext(ctx context.Context) LinuxConfigurationResponsePtrOutput {
	return o
}

func (o LinuxConfigurationResponsePtrOutput) Elem() LinuxConfigurationResponseOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) LinuxConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LinuxConfigurationResponse
		return ret
	}).(LinuxConfigurationResponseOutput)
}

// Specifies whether password authentication should be disabled.
func (o LinuxConfigurationResponsePtrOutput) DisablePasswordAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePasswordAuthentication
	}).(pulumi.BoolPtrOutput)
}

// The OS Type
// Expected value is 'Linux'.
func (o LinuxConfigurationResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
func (o LinuxConfigurationResponsePtrOutput) Ssh() SshConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *SshConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Ssh
	}).(SshConfigurationResponsePtrOutput)
}

// The SSH Key-pair used to authenticate with the VM's.
func (o LinuxConfigurationResponsePtrOutput) SshKeyPair() SshKeyPairResponsePtrOutput {
	return o.ApplyT(func(v *LinuxConfigurationResponse) *SshKeyPairResponse {
		if v == nil {
			return nil
		}
		return v.SshKeyPair
	}).(SshKeyPairResponsePtrOutput)
}

// The Load Balancer details such as Load Balancer ID.
type LoadBalancerDetailsResponse struct {
	Id string `pulumi:"id"`
}

// The Load Balancer details such as Load Balancer ID.
type LoadBalancerDetailsResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerDetailsResponse)(nil)).Elem()
}

func (o LoadBalancerDetailsResponseOutput) ToLoadBalancerDetailsResponseOutput() LoadBalancerDetailsResponseOutput {
	return o
}

func (o LoadBalancerDetailsResponseOutput) ToLoadBalancerDetailsResponseOutputWithContext(ctx context.Context) LoadBalancerDetailsResponseOutput {
	return o
}

func (o LoadBalancerDetailsResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerDetailsResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNames struct {
	// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
	BackendPoolNames []string `pulumi:"backendPoolNames"`
	// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	FrontendIpConfigurationNames []string `pulumi:"frontendIpConfigurationNames"`
	// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	HealthProbeNames []string `pulumi:"healthProbeNames"`
	// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
}

// LoadBalancerResourceNamesInput is an input type that accepts LoadBalancerResourceNamesArgs and LoadBalancerResourceNamesOutput values.
// You can construct a concrete instance of `LoadBalancerResourceNamesInput` via:
//
//	LoadBalancerResourceNamesArgs{...}
type LoadBalancerResourceNamesInput interface {
	pulumi.Input

	ToLoadBalancerResourceNamesOutput() LoadBalancerResourceNamesOutput
	ToLoadBalancerResourceNamesOutputWithContext(context.Context) LoadBalancerResourceNamesOutput
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNamesArgs struct {
	// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
	BackendPoolNames pulumi.StringArrayInput `pulumi:"backendPoolNames"`
	// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	FrontendIpConfigurationNames pulumi.StringArrayInput `pulumi:"frontendIpConfigurationNames"`
	// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	HealthProbeNames pulumi.StringArrayInput `pulumi:"healthProbeNames"`
	// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
}

func (LoadBalancerResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerResourceNames)(nil)).Elem()
}

func (i LoadBalancerResourceNamesArgs) ToLoadBalancerResourceNamesOutput() LoadBalancerResourceNamesOutput {
	return i.ToLoadBalancerResourceNamesOutputWithContext(context.Background())
}

func (i LoadBalancerResourceNamesArgs) ToLoadBalancerResourceNamesOutputWithContext(ctx context.Context) LoadBalancerResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerResourceNamesOutput)
}

func (i LoadBalancerResourceNamesArgs) ToLoadBalancerResourceNamesPtrOutput() LoadBalancerResourceNamesPtrOutput {
	return i.ToLoadBalancerResourceNamesPtrOutputWithContext(context.Background())
}

func (i LoadBalancerResourceNamesArgs) ToLoadBalancerResourceNamesPtrOutputWithContext(ctx context.Context) LoadBalancerResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerResourceNamesOutput).ToLoadBalancerResourceNamesPtrOutputWithContext(ctx)
}

// LoadBalancerResourceNamesPtrInput is an input type that accepts LoadBalancerResourceNamesArgs, LoadBalancerResourceNamesPtr and LoadBalancerResourceNamesPtrOutput values.
// You can construct a concrete instance of `LoadBalancerResourceNamesPtrInput` via:
//
//	        LoadBalancerResourceNamesArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerResourceNamesPtrInput interface {
	pulumi.Input

	ToLoadBalancerResourceNamesPtrOutput() LoadBalancerResourceNamesPtrOutput
	ToLoadBalancerResourceNamesPtrOutputWithContext(context.Context) LoadBalancerResourceNamesPtrOutput
}

type loadBalancerResourceNamesPtrType LoadBalancerResourceNamesArgs

func LoadBalancerResourceNamesPtr(v *LoadBalancerResourceNamesArgs) LoadBalancerResourceNamesPtrInput {
	return (*loadBalancerResourceNamesPtrType)(v)
}

func (*loadBalancerResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerResourceNames)(nil)).Elem()
}

func (i *loadBalancerResourceNamesPtrType) ToLoadBalancerResourceNamesPtrOutput() LoadBalancerResourceNamesPtrOutput {
	return i.ToLoadBalancerResourceNamesPtrOutputWithContext(context.Background())
}

func (i *loadBalancerResourceNamesPtrType) ToLoadBalancerResourceNamesPtrOutputWithContext(ctx context.Context) LoadBalancerResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerResourceNamesPtrOutput)
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNamesOutput struct{ *pulumi.OutputState }

func (LoadBalancerResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerResourceNames)(nil)).Elem()
}

func (o LoadBalancerResourceNamesOutput) ToLoadBalancerResourceNamesOutput() LoadBalancerResourceNamesOutput {
	return o
}

func (o LoadBalancerResourceNamesOutput) ToLoadBalancerResourceNamesOutputWithContext(ctx context.Context) LoadBalancerResourceNamesOutput {
	return o
}

func (o LoadBalancerResourceNamesOutput) ToLoadBalancerResourceNamesPtrOutput() LoadBalancerResourceNamesPtrOutput {
	return o.ToLoadBalancerResourceNamesPtrOutputWithContext(context.Background())
}

func (o LoadBalancerResourceNamesOutput) ToLoadBalancerResourceNamesPtrOutputWithContext(ctx context.Context) LoadBalancerResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerResourceNames) *LoadBalancerResourceNames {
		return &v
	}).(LoadBalancerResourceNamesPtrOutput)
}

// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
func (o LoadBalancerResourceNamesOutput) BackendPoolNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNames) []string { return v.BackendPoolNames }).(pulumi.StringArrayOutput)
}

// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesOutput) FrontendIpConfigurationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNames) []string { return v.FrontendIpConfigurationNames }).(pulumi.StringArrayOutput)
}

// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesOutput) HealthProbeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNames) []string { return v.HealthProbeNames }).(pulumi.StringArrayOutput)
}

// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
func (o LoadBalancerResourceNamesOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerResourceNames) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

type LoadBalancerResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerResourceNames)(nil)).Elem()
}

func (o LoadBalancerResourceNamesPtrOutput) ToLoadBalancerResourceNamesPtrOutput() LoadBalancerResourceNamesPtrOutput {
	return o
}

func (o LoadBalancerResourceNamesPtrOutput) ToLoadBalancerResourceNamesPtrOutputWithContext(ctx context.Context) LoadBalancerResourceNamesPtrOutput {
	return o
}

func (o LoadBalancerResourceNamesPtrOutput) Elem() LoadBalancerResourceNamesOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNames) LoadBalancerResourceNames {
		if v != nil {
			return *v
		}
		var ret LoadBalancerResourceNames
		return ret
	}).(LoadBalancerResourceNamesOutput)
}

// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
func (o LoadBalancerResourceNamesPtrOutput) BackendPoolNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNames) []string {
		if v == nil {
			return nil
		}
		return v.BackendPoolNames
	}).(pulumi.StringArrayOutput)
}

// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesPtrOutput) FrontendIpConfigurationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNames) []string {
		if v == nil {
			return nil
		}
		return v.FrontendIpConfigurationNames
	}).(pulumi.StringArrayOutput)
}

// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesPtrOutput) HealthProbeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNames) []string {
		if v == nil {
			return nil
		}
		return v.HealthProbeNames
	}).(pulumi.StringArrayOutput)
}

// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
func (o LoadBalancerResourceNamesPtrOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNamesResponse struct {
	// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
	BackendPoolNames []string `pulumi:"backendPoolNames"`
	// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	FrontendIpConfigurationNames []string `pulumi:"frontendIpConfigurationNames"`
	// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	HealthProbeNames []string `pulumi:"healthProbeNames"`
	// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerResourceNamesResponse)(nil)).Elem()
}

func (o LoadBalancerResourceNamesResponseOutput) ToLoadBalancerResourceNamesResponseOutput() LoadBalancerResourceNamesResponseOutput {
	return o
}

func (o LoadBalancerResourceNamesResponseOutput) ToLoadBalancerResourceNamesResponseOutputWithContext(ctx context.Context) LoadBalancerResourceNamesResponseOutput {
	return o
}

// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
func (o LoadBalancerResourceNamesResponseOutput) BackendPoolNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNamesResponse) []string { return v.BackendPoolNames }).(pulumi.StringArrayOutput)
}

// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesResponseOutput) FrontendIpConfigurationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNamesResponse) []string { return v.FrontendIpConfigurationNames }).(pulumi.StringArrayOutput)
}

// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesResponseOutput) HealthProbeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LoadBalancerResourceNamesResponse) []string { return v.HealthProbeNames }).(pulumi.StringArrayOutput)
}

// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
func (o LoadBalancerResourceNamesResponseOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerResourceNamesResponse) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

type LoadBalancerResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerResourceNamesResponse)(nil)).Elem()
}

func (o LoadBalancerResourceNamesResponsePtrOutput) ToLoadBalancerResourceNamesResponsePtrOutput() LoadBalancerResourceNamesResponsePtrOutput {
	return o
}

func (o LoadBalancerResourceNamesResponsePtrOutput) ToLoadBalancerResourceNamesResponsePtrOutputWithContext(ctx context.Context) LoadBalancerResourceNamesResponsePtrOutput {
	return o
}

func (o LoadBalancerResourceNamesResponsePtrOutput) Elem() LoadBalancerResourceNamesResponseOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNamesResponse) LoadBalancerResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret LoadBalancerResourceNamesResponse
		return ret
	}).(LoadBalancerResourceNamesResponseOutput)
}

// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
func (o LoadBalancerResourceNamesResponsePtrOutput) BackendPoolNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.BackendPoolNames
	}).(pulumi.StringArrayOutput)
}

// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesResponsePtrOutput) FrontendIpConfigurationNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.FrontendIpConfigurationNames
	}).(pulumi.StringArrayOutput)
}

// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
func (o LoadBalancerResourceNamesResponsePtrOutput) HealthProbeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNamesResponse) []string {
		if v == nil {
			return nil
		}
		return v.HealthProbeNames
	}).(pulumi.StringArrayOutput)
}

// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
func (o LoadBalancerResourceNamesResponsePtrOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerName
	}).(pulumi.StringPtrOutput)
}

// Log policy schedule.
type LogSchedulePolicy struct {
	// Frequency of the log schedule operation of this policy in minutes.
	ScheduleFrequencyInMins *int `pulumi:"scheduleFrequencyInMins"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LogSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
}

// LogSchedulePolicyInput is an input type that accepts LogSchedulePolicyArgs and LogSchedulePolicyOutput values.
// You can construct a concrete instance of `LogSchedulePolicyInput` via:
//
//	LogSchedulePolicyArgs{...}
type LogSchedulePolicyInput interface {
	pulumi.Input

	ToLogSchedulePolicyOutput() LogSchedulePolicyOutput
	ToLogSchedulePolicyOutputWithContext(context.Context) LogSchedulePolicyOutput
}

// Log policy schedule.
type LogSchedulePolicyArgs struct {
	// Frequency of the log schedule operation of this policy in minutes.
	ScheduleFrequencyInMins pulumi.IntPtrInput `pulumi:"scheduleFrequencyInMins"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LogSchedulePolicy'.
	SchedulePolicyType pulumi.StringInput `pulumi:"schedulePolicyType"`
}

func (LogSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSchedulePolicy)(nil)).Elem()
}

func (i LogSchedulePolicyArgs) ToLogSchedulePolicyOutput() LogSchedulePolicyOutput {
	return i.ToLogSchedulePolicyOutputWithContext(context.Background())
}

func (i LogSchedulePolicyArgs) ToLogSchedulePolicyOutputWithContext(ctx context.Context) LogSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSchedulePolicyOutput)
}

func (i LogSchedulePolicyArgs) ToLogSchedulePolicyPtrOutput() LogSchedulePolicyPtrOutput {
	return i.ToLogSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i LogSchedulePolicyArgs) ToLogSchedulePolicyPtrOutputWithContext(ctx context.Context) LogSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSchedulePolicyOutput).ToLogSchedulePolicyPtrOutputWithContext(ctx)
}

// LogSchedulePolicyPtrInput is an input type that accepts LogSchedulePolicyArgs, LogSchedulePolicyPtr and LogSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `LogSchedulePolicyPtrInput` via:
//
//	        LogSchedulePolicyArgs{...}
//
//	or:
//
//	        nil
type LogSchedulePolicyPtrInput interface {
	pulumi.Input

	ToLogSchedulePolicyPtrOutput() LogSchedulePolicyPtrOutput
	ToLogSchedulePolicyPtrOutputWithContext(context.Context) LogSchedulePolicyPtrOutput
}

type logSchedulePolicyPtrType LogSchedulePolicyArgs

func LogSchedulePolicyPtr(v *LogSchedulePolicyArgs) LogSchedulePolicyPtrInput {
	return (*logSchedulePolicyPtrType)(v)
}

func (*logSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSchedulePolicy)(nil)).Elem()
}

func (i *logSchedulePolicyPtrType) ToLogSchedulePolicyPtrOutput() LogSchedulePolicyPtrOutput {
	return i.ToLogSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *logSchedulePolicyPtrType) ToLogSchedulePolicyPtrOutputWithContext(ctx context.Context) LogSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSchedulePolicyPtrOutput)
}

// Log policy schedule.
type LogSchedulePolicyOutput struct{ *pulumi.OutputState }

func (LogSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSchedulePolicy)(nil)).Elem()
}

func (o LogSchedulePolicyOutput) ToLogSchedulePolicyOutput() LogSchedulePolicyOutput {
	return o
}

func (o LogSchedulePolicyOutput) ToLogSchedulePolicyOutputWithContext(ctx context.Context) LogSchedulePolicyOutput {
	return o
}

func (o LogSchedulePolicyOutput) ToLogSchedulePolicyPtrOutput() LogSchedulePolicyPtrOutput {
	return o.ToLogSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o LogSchedulePolicyOutput) ToLogSchedulePolicyPtrOutputWithContext(ctx context.Context) LogSchedulePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogSchedulePolicy) *LogSchedulePolicy {
		return &v
	}).(LogSchedulePolicyPtrOutput)
}

// Frequency of the log schedule operation of this policy in minutes.
func (o LogSchedulePolicyOutput) ScheduleFrequencyInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogSchedulePolicy) *int { return v.ScheduleFrequencyInMins }).(pulumi.IntPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LogSchedulePolicy'.
func (o LogSchedulePolicyOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LogSchedulePolicy) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

type LogSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (LogSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSchedulePolicy)(nil)).Elem()
}

func (o LogSchedulePolicyPtrOutput) ToLogSchedulePolicyPtrOutput() LogSchedulePolicyPtrOutput {
	return o
}

func (o LogSchedulePolicyPtrOutput) ToLogSchedulePolicyPtrOutputWithContext(ctx context.Context) LogSchedulePolicyPtrOutput {
	return o
}

func (o LogSchedulePolicyPtrOutput) Elem() LogSchedulePolicyOutput {
	return o.ApplyT(func(v *LogSchedulePolicy) LogSchedulePolicy {
		if v != nil {
			return *v
		}
		var ret LogSchedulePolicy
		return ret
	}).(LogSchedulePolicyOutput)
}

// Frequency of the log schedule operation of this policy in minutes.
func (o LogSchedulePolicyPtrOutput) ScheduleFrequencyInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogSchedulePolicy) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleFrequencyInMins
	}).(pulumi.IntPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LogSchedulePolicy'.
func (o LogSchedulePolicyPtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Log policy schedule.
type LogSchedulePolicyResponse struct {
	// Frequency of the log schedule operation of this policy in minutes.
	ScheduleFrequencyInMins *int `pulumi:"scheduleFrequencyInMins"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LogSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
}

// Log policy schedule.
type LogSchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (LogSchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSchedulePolicyResponse)(nil)).Elem()
}

func (o LogSchedulePolicyResponseOutput) ToLogSchedulePolicyResponseOutput() LogSchedulePolicyResponseOutput {
	return o
}

func (o LogSchedulePolicyResponseOutput) ToLogSchedulePolicyResponseOutputWithContext(ctx context.Context) LogSchedulePolicyResponseOutput {
	return o
}

// Frequency of the log schedule operation of this policy in minutes.
func (o LogSchedulePolicyResponseOutput) ScheduleFrequencyInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LogSchedulePolicyResponse) *int { return v.ScheduleFrequencyInMins }).(pulumi.IntPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LogSchedulePolicy'.
func (o LogSchedulePolicyResponseOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LogSchedulePolicyResponse) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

type LogSchedulePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (LogSchedulePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogSchedulePolicyResponse)(nil)).Elem()
}

func (o LogSchedulePolicyResponsePtrOutput) ToLogSchedulePolicyResponsePtrOutput() LogSchedulePolicyResponsePtrOutput {
	return o
}

func (o LogSchedulePolicyResponsePtrOutput) ToLogSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) LogSchedulePolicyResponsePtrOutput {
	return o
}

func (o LogSchedulePolicyResponsePtrOutput) Elem() LogSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *LogSchedulePolicyResponse) LogSchedulePolicyResponse {
		if v != nil {
			return *v
		}
		var ret LogSchedulePolicyResponse
		return ret
	}).(LogSchedulePolicyResponseOutput)
}

// Frequency of the log schedule operation of this policy in minutes.
func (o LogSchedulePolicyResponsePtrOutput) ScheduleFrequencyInMins() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LogSchedulePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleFrequencyInMins
	}).(pulumi.IntPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LogSchedulePolicy'.
func (o LogSchedulePolicyResponsePtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Long term retention policy.
type LongTermRetentionPolicy struct {
	// Daily retention schedule of the protection policy.
	DailySchedule *DailyRetentionSchedule `pulumi:"dailySchedule"`
	// Monthly retention schedule of the protection policy.
	MonthlySchedule *MonthlyRetentionSchedule `pulumi:"monthlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermRetentionPolicy'.
	RetentionPolicyType string `pulumi:"retentionPolicyType"`
	// Weekly retention schedule of the protection policy.
	WeeklySchedule *WeeklyRetentionSchedule `pulumi:"weeklySchedule"`
	// Yearly retention schedule of the protection policy.
	YearlySchedule *YearlyRetentionSchedule `pulumi:"yearlySchedule"`
}

// LongTermRetentionPolicyInput is an input type that accepts LongTermRetentionPolicyArgs and LongTermRetentionPolicyOutput values.
// You can construct a concrete instance of `LongTermRetentionPolicyInput` via:
//
//	LongTermRetentionPolicyArgs{...}
type LongTermRetentionPolicyInput interface {
	pulumi.Input

	ToLongTermRetentionPolicyOutput() LongTermRetentionPolicyOutput
	ToLongTermRetentionPolicyOutputWithContext(context.Context) LongTermRetentionPolicyOutput
}

// Long term retention policy.
type LongTermRetentionPolicyArgs struct {
	// Daily retention schedule of the protection policy.
	DailySchedule DailyRetentionSchedulePtrInput `pulumi:"dailySchedule"`
	// Monthly retention schedule of the protection policy.
	MonthlySchedule MonthlyRetentionSchedulePtrInput `pulumi:"monthlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermRetentionPolicy'.
	RetentionPolicyType pulumi.StringInput `pulumi:"retentionPolicyType"`
	// Weekly retention schedule of the protection policy.
	WeeklySchedule WeeklyRetentionSchedulePtrInput `pulumi:"weeklySchedule"`
	// Yearly retention schedule of the protection policy.
	YearlySchedule YearlyRetentionSchedulePtrInput `pulumi:"yearlySchedule"`
}

func (LongTermRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermRetentionPolicy)(nil)).Elem()
}

func (i LongTermRetentionPolicyArgs) ToLongTermRetentionPolicyOutput() LongTermRetentionPolicyOutput {
	return i.ToLongTermRetentionPolicyOutputWithContext(context.Background())
}

func (i LongTermRetentionPolicyArgs) ToLongTermRetentionPolicyOutputWithContext(ctx context.Context) LongTermRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermRetentionPolicyOutput)
}

func (i LongTermRetentionPolicyArgs) ToLongTermRetentionPolicyPtrOutput() LongTermRetentionPolicyPtrOutput {
	return i.ToLongTermRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i LongTermRetentionPolicyArgs) ToLongTermRetentionPolicyPtrOutputWithContext(ctx context.Context) LongTermRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermRetentionPolicyOutput).ToLongTermRetentionPolicyPtrOutputWithContext(ctx)
}

// LongTermRetentionPolicyPtrInput is an input type that accepts LongTermRetentionPolicyArgs, LongTermRetentionPolicyPtr and LongTermRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `LongTermRetentionPolicyPtrInput` via:
//
//	        LongTermRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type LongTermRetentionPolicyPtrInput interface {
	pulumi.Input

	ToLongTermRetentionPolicyPtrOutput() LongTermRetentionPolicyPtrOutput
	ToLongTermRetentionPolicyPtrOutputWithContext(context.Context) LongTermRetentionPolicyPtrOutput
}

type longTermRetentionPolicyPtrType LongTermRetentionPolicyArgs

func LongTermRetentionPolicyPtr(v *LongTermRetentionPolicyArgs) LongTermRetentionPolicyPtrInput {
	return (*longTermRetentionPolicyPtrType)(v)
}

func (*longTermRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermRetentionPolicy)(nil)).Elem()
}

func (i *longTermRetentionPolicyPtrType) ToLongTermRetentionPolicyPtrOutput() LongTermRetentionPolicyPtrOutput {
	return i.ToLongTermRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *longTermRetentionPolicyPtrType) ToLongTermRetentionPolicyPtrOutputWithContext(ctx context.Context) LongTermRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermRetentionPolicyPtrOutput)
}

// Long term retention policy.
type LongTermRetentionPolicyOutput struct{ *pulumi.OutputState }

func (LongTermRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermRetentionPolicy)(nil)).Elem()
}

func (o LongTermRetentionPolicyOutput) ToLongTermRetentionPolicyOutput() LongTermRetentionPolicyOutput {
	return o
}

func (o LongTermRetentionPolicyOutput) ToLongTermRetentionPolicyOutputWithContext(ctx context.Context) LongTermRetentionPolicyOutput {
	return o
}

func (o LongTermRetentionPolicyOutput) ToLongTermRetentionPolicyPtrOutput() LongTermRetentionPolicyPtrOutput {
	return o.ToLongTermRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o LongTermRetentionPolicyOutput) ToLongTermRetentionPolicyPtrOutputWithContext(ctx context.Context) LongTermRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LongTermRetentionPolicy) *LongTermRetentionPolicy {
		return &v
	}).(LongTermRetentionPolicyPtrOutput)
}

// Daily retention schedule of the protection policy.
func (o LongTermRetentionPolicyOutput) DailySchedule() DailyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicy) *DailyRetentionSchedule { return v.DailySchedule }).(DailyRetentionSchedulePtrOutput)
}

// Monthly retention schedule of the protection policy.
func (o LongTermRetentionPolicyOutput) MonthlySchedule() MonthlyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicy) *MonthlyRetentionSchedule { return v.MonthlySchedule }).(MonthlyRetentionSchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermRetentionPolicy'.
func (o LongTermRetentionPolicyOutput) RetentionPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LongTermRetentionPolicy) string { return v.RetentionPolicyType }).(pulumi.StringOutput)
}

// Weekly retention schedule of the protection policy.
func (o LongTermRetentionPolicyOutput) WeeklySchedule() WeeklyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicy) *WeeklyRetentionSchedule { return v.WeeklySchedule }).(WeeklyRetentionSchedulePtrOutput)
}

// Yearly retention schedule of the protection policy.
func (o LongTermRetentionPolicyOutput) YearlySchedule() YearlyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicy) *YearlyRetentionSchedule { return v.YearlySchedule }).(YearlyRetentionSchedulePtrOutput)
}

type LongTermRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (LongTermRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermRetentionPolicy)(nil)).Elem()
}

func (o LongTermRetentionPolicyPtrOutput) ToLongTermRetentionPolicyPtrOutput() LongTermRetentionPolicyPtrOutput {
	return o
}

func (o LongTermRetentionPolicyPtrOutput) ToLongTermRetentionPolicyPtrOutputWithContext(ctx context.Context) LongTermRetentionPolicyPtrOutput {
	return o
}

func (o LongTermRetentionPolicyPtrOutput) Elem() LongTermRetentionPolicyOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) LongTermRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret LongTermRetentionPolicy
		return ret
	}).(LongTermRetentionPolicyOutput)
}

// Daily retention schedule of the protection policy.
func (o LongTermRetentionPolicyPtrOutput) DailySchedule() DailyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) *DailyRetentionSchedule {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(DailyRetentionSchedulePtrOutput)
}

// Monthly retention schedule of the protection policy.
func (o LongTermRetentionPolicyPtrOutput) MonthlySchedule() MonthlyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) *MonthlyRetentionSchedule {
		if v == nil {
			return nil
		}
		return v.MonthlySchedule
	}).(MonthlyRetentionSchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermRetentionPolicy'.
func (o LongTermRetentionPolicyPtrOutput) RetentionPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicyType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention schedule of the protection policy.
func (o LongTermRetentionPolicyPtrOutput) WeeklySchedule() WeeklyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) *WeeklyRetentionSchedule {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(WeeklyRetentionSchedulePtrOutput)
}

// Yearly retention schedule of the protection policy.
func (o LongTermRetentionPolicyPtrOutput) YearlySchedule() YearlyRetentionSchedulePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicy) *YearlyRetentionSchedule {
		if v == nil {
			return nil
		}
		return v.YearlySchedule
	}).(YearlyRetentionSchedulePtrOutput)
}

// Long term retention policy.
type LongTermRetentionPolicyResponse struct {
	// Daily retention schedule of the protection policy.
	DailySchedule *DailyRetentionScheduleResponse `pulumi:"dailySchedule"`
	// Monthly retention schedule of the protection policy.
	MonthlySchedule *MonthlyRetentionScheduleResponse `pulumi:"monthlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermRetentionPolicy'.
	RetentionPolicyType string `pulumi:"retentionPolicyType"`
	// Weekly retention schedule of the protection policy.
	WeeklySchedule *WeeklyRetentionScheduleResponse `pulumi:"weeklySchedule"`
	// Yearly retention schedule of the protection policy.
	YearlySchedule *YearlyRetentionScheduleResponse `pulumi:"yearlySchedule"`
}

// Long term retention policy.
type LongTermRetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (LongTermRetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermRetentionPolicyResponse)(nil)).Elem()
}

func (o LongTermRetentionPolicyResponseOutput) ToLongTermRetentionPolicyResponseOutput() LongTermRetentionPolicyResponseOutput {
	return o
}

func (o LongTermRetentionPolicyResponseOutput) ToLongTermRetentionPolicyResponseOutputWithContext(ctx context.Context) LongTermRetentionPolicyResponseOutput {
	return o
}

// Daily retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponseOutput) DailySchedule() DailyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicyResponse) *DailyRetentionScheduleResponse { return v.DailySchedule }).(DailyRetentionScheduleResponsePtrOutput)
}

// Monthly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponseOutput) MonthlySchedule() MonthlyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicyResponse) *MonthlyRetentionScheduleResponse { return v.MonthlySchedule }).(MonthlyRetentionScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermRetentionPolicy'.
func (o LongTermRetentionPolicyResponseOutput) RetentionPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LongTermRetentionPolicyResponse) string { return v.RetentionPolicyType }).(pulumi.StringOutput)
}

// Weekly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponseOutput) WeeklySchedule() WeeklyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicyResponse) *WeeklyRetentionScheduleResponse { return v.WeeklySchedule }).(WeeklyRetentionScheduleResponsePtrOutput)
}

// Yearly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponseOutput) YearlySchedule() YearlyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v LongTermRetentionPolicyResponse) *YearlyRetentionScheduleResponse { return v.YearlySchedule }).(YearlyRetentionScheduleResponsePtrOutput)
}

type LongTermRetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (LongTermRetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermRetentionPolicyResponse)(nil)).Elem()
}

func (o LongTermRetentionPolicyResponsePtrOutput) ToLongTermRetentionPolicyResponsePtrOutput() LongTermRetentionPolicyResponsePtrOutput {
	return o
}

func (o LongTermRetentionPolicyResponsePtrOutput) ToLongTermRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) LongTermRetentionPolicyResponsePtrOutput {
	return o
}

func (o LongTermRetentionPolicyResponsePtrOutput) Elem() LongTermRetentionPolicyResponseOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) LongTermRetentionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret LongTermRetentionPolicyResponse
		return ret
	}).(LongTermRetentionPolicyResponseOutput)
}

// Daily retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponsePtrOutput) DailySchedule() DailyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) *DailyRetentionScheduleResponse {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(DailyRetentionScheduleResponsePtrOutput)
}

// Monthly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponsePtrOutput) MonthlySchedule() MonthlyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) *MonthlyRetentionScheduleResponse {
		if v == nil {
			return nil
		}
		return v.MonthlySchedule
	}).(MonthlyRetentionScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermRetentionPolicy'.
func (o LongTermRetentionPolicyResponsePtrOutput) RetentionPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicyType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponsePtrOutput) WeeklySchedule() WeeklyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) *WeeklyRetentionScheduleResponse {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(WeeklyRetentionScheduleResponsePtrOutput)
}

// Yearly retention schedule of the protection policy.
func (o LongTermRetentionPolicyResponsePtrOutput) YearlySchedule() YearlyRetentionScheduleResponsePtrOutput {
	return o.ApplyT(func(v *LongTermRetentionPolicyResponse) *YearlyRetentionScheduleResponse {
		if v == nil {
			return nil
		}
		return v.YearlySchedule
	}).(YearlyRetentionScheduleResponsePtrOutput)
}

// Long term policy schedule.
type LongTermSchedulePolicy struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
}

// LongTermSchedulePolicyInput is an input type that accepts LongTermSchedulePolicyArgs and LongTermSchedulePolicyOutput values.
// You can construct a concrete instance of `LongTermSchedulePolicyInput` via:
//
//	LongTermSchedulePolicyArgs{...}
type LongTermSchedulePolicyInput interface {
	pulumi.Input

	ToLongTermSchedulePolicyOutput() LongTermSchedulePolicyOutput
	ToLongTermSchedulePolicyOutputWithContext(context.Context) LongTermSchedulePolicyOutput
}

// Long term policy schedule.
type LongTermSchedulePolicyArgs struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermSchedulePolicy'.
	SchedulePolicyType pulumi.StringInput `pulumi:"schedulePolicyType"`
}

func (LongTermSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermSchedulePolicy)(nil)).Elem()
}

func (i LongTermSchedulePolicyArgs) ToLongTermSchedulePolicyOutput() LongTermSchedulePolicyOutput {
	return i.ToLongTermSchedulePolicyOutputWithContext(context.Background())
}

func (i LongTermSchedulePolicyArgs) ToLongTermSchedulePolicyOutputWithContext(ctx context.Context) LongTermSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermSchedulePolicyOutput)
}

func (i LongTermSchedulePolicyArgs) ToLongTermSchedulePolicyPtrOutput() LongTermSchedulePolicyPtrOutput {
	return i.ToLongTermSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i LongTermSchedulePolicyArgs) ToLongTermSchedulePolicyPtrOutputWithContext(ctx context.Context) LongTermSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermSchedulePolicyOutput).ToLongTermSchedulePolicyPtrOutputWithContext(ctx)
}

// LongTermSchedulePolicyPtrInput is an input type that accepts LongTermSchedulePolicyArgs, LongTermSchedulePolicyPtr and LongTermSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `LongTermSchedulePolicyPtrInput` via:
//
//	        LongTermSchedulePolicyArgs{...}
//
//	or:
//
//	        nil
type LongTermSchedulePolicyPtrInput interface {
	pulumi.Input

	ToLongTermSchedulePolicyPtrOutput() LongTermSchedulePolicyPtrOutput
	ToLongTermSchedulePolicyPtrOutputWithContext(context.Context) LongTermSchedulePolicyPtrOutput
}

type longTermSchedulePolicyPtrType LongTermSchedulePolicyArgs

func LongTermSchedulePolicyPtr(v *LongTermSchedulePolicyArgs) LongTermSchedulePolicyPtrInput {
	return (*longTermSchedulePolicyPtrType)(v)
}

func (*longTermSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermSchedulePolicy)(nil)).Elem()
}

func (i *longTermSchedulePolicyPtrType) ToLongTermSchedulePolicyPtrOutput() LongTermSchedulePolicyPtrOutput {
	return i.ToLongTermSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *longTermSchedulePolicyPtrType) ToLongTermSchedulePolicyPtrOutputWithContext(ctx context.Context) LongTermSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LongTermSchedulePolicyPtrOutput)
}

// Long term policy schedule.
type LongTermSchedulePolicyOutput struct{ *pulumi.OutputState }

func (LongTermSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermSchedulePolicy)(nil)).Elem()
}

func (o LongTermSchedulePolicyOutput) ToLongTermSchedulePolicyOutput() LongTermSchedulePolicyOutput {
	return o
}

func (o LongTermSchedulePolicyOutput) ToLongTermSchedulePolicyOutputWithContext(ctx context.Context) LongTermSchedulePolicyOutput {
	return o
}

func (o LongTermSchedulePolicyOutput) ToLongTermSchedulePolicyPtrOutput() LongTermSchedulePolicyPtrOutput {
	return o.ToLongTermSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o LongTermSchedulePolicyOutput) ToLongTermSchedulePolicyPtrOutputWithContext(ctx context.Context) LongTermSchedulePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LongTermSchedulePolicy) *LongTermSchedulePolicy {
		return &v
	}).(LongTermSchedulePolicyPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermSchedulePolicy'.
func (o LongTermSchedulePolicyOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LongTermSchedulePolicy) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

type LongTermSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (LongTermSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermSchedulePolicy)(nil)).Elem()
}

func (o LongTermSchedulePolicyPtrOutput) ToLongTermSchedulePolicyPtrOutput() LongTermSchedulePolicyPtrOutput {
	return o
}

func (o LongTermSchedulePolicyPtrOutput) ToLongTermSchedulePolicyPtrOutputWithContext(ctx context.Context) LongTermSchedulePolicyPtrOutput {
	return o
}

func (o LongTermSchedulePolicyPtrOutput) Elem() LongTermSchedulePolicyOutput {
	return o.ApplyT(func(v *LongTermSchedulePolicy) LongTermSchedulePolicy {
		if v != nil {
			return *v
		}
		var ret LongTermSchedulePolicy
		return ret
	}).(LongTermSchedulePolicyOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermSchedulePolicy'.
func (o LongTermSchedulePolicyPtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LongTermSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Long term policy schedule.
type LongTermSchedulePolicyResponse struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'LongTermSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
}

// Long term policy schedule.
type LongTermSchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (LongTermSchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LongTermSchedulePolicyResponse)(nil)).Elem()
}

func (o LongTermSchedulePolicyResponseOutput) ToLongTermSchedulePolicyResponseOutput() LongTermSchedulePolicyResponseOutput {
	return o
}

func (o LongTermSchedulePolicyResponseOutput) ToLongTermSchedulePolicyResponseOutputWithContext(ctx context.Context) LongTermSchedulePolicyResponseOutput {
	return o
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermSchedulePolicy'.
func (o LongTermSchedulePolicyResponseOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v LongTermSchedulePolicyResponse) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

type LongTermSchedulePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (LongTermSchedulePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LongTermSchedulePolicyResponse)(nil)).Elem()
}

func (o LongTermSchedulePolicyResponsePtrOutput) ToLongTermSchedulePolicyResponsePtrOutput() LongTermSchedulePolicyResponsePtrOutput {
	return o
}

func (o LongTermSchedulePolicyResponsePtrOutput) ToLongTermSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) LongTermSchedulePolicyResponsePtrOutput {
	return o
}

func (o LongTermSchedulePolicyResponsePtrOutput) Elem() LongTermSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *LongTermSchedulePolicyResponse) LongTermSchedulePolicyResponse {
		if v != nil {
			return *v
		}
		var ret LongTermSchedulePolicyResponse
		return ret
	}).(LongTermSchedulePolicyResponseOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'LongTermSchedulePolicy'.
func (o LongTermSchedulePolicyResponsePtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LongTermSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfiguration struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// ManagedRGConfigurationInput is an input type that accepts ManagedRGConfigurationArgs and ManagedRGConfigurationOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationInput` via:
//
//	ManagedRGConfigurationArgs{...}
type ManagedRGConfigurationInput interface {
	pulumi.Input

	ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput
	ToManagedRGConfigurationOutputWithContext(context.Context) ManagedRGConfigurationOutput
}

// Managed resource group configuration
type ManagedRGConfigurationArgs struct {
	// Managed resource group name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedRGConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return i.ToManagedRGConfigurationOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput)
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput).ToManagedRGConfigurationPtrOutputWithContext(ctx)
}

// ManagedRGConfigurationPtrInput is an input type that accepts ManagedRGConfigurationArgs, ManagedRGConfigurationPtr and ManagedRGConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationPtrInput` via:
//
//	        ManagedRGConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedRGConfigurationPtrInput interface {
	pulumi.Input

	ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput
	ToManagedRGConfigurationPtrOutputWithContext(context.Context) ManagedRGConfigurationPtrOutput
}

type managedRGConfigurationPtrType ManagedRGConfigurationArgs

func ManagedRGConfigurationPtr(v *ManagedRGConfigurationArgs) ManagedRGConfigurationPtrInput {
	return (*managedRGConfigurationPtrType)(v)
}

func (*managedRGConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRGConfiguration) *ManagedRGConfiguration {
		return &v
	}).(ManagedRGConfigurationPtrOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) Elem() ManagedRGConfigurationOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) ManagedRGConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfiguration
		return ret
	}).(ManagedRGConfigurationOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfigurationResponse struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// Managed resource group configuration
type ManagedRGConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutput() ManagedRGConfigurationResponseOutput {
	return o
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutputWithContext(ctx context.Context) ManagedRGConfigurationResponseOutput {
	return o
}

// Managed resource group name
func (o ManagedRGConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutput() ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) Elem() ManagedRGConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) ManagedRGConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfigurationResponse
		return ret
	}).(ManagedRGConfigurationResponseOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Managed service identity.
type ManagedServiceIdentity struct {
	// The managed service identity for all identities.
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// The Managed service identity.
type ManagedServiceIdentityArgs struct {
	// The managed service identity for all identities.
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// The Managed service identity.
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// The managed service identity for all identities.
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// The managed service identity for all identities.
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// The Managed service identity.
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The managed service identity for all identities.
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// The Managed service identity.
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The managed service identity for all identities.
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The managed service identity for all identities.
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Defines the SAP message server properties.
type MessageServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// message server SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// message server HTTP Port.
	HttpPort float64 `pulumi:"httpPort"`
	// message server HTTPS Port.
	HttpsPort float64 `pulumi:"httpsPort"`
	// message server internal MS port.
	InternalMsPort float64 `pulumi:"internalMsPort"`
	// message server IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// message server port.
	MsPort float64 `pulumi:"msPort"`
}

// Defines the SAP message server properties.
type MessageServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MessageServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageServerPropertiesResponse)(nil)).Elem()
}

func (o MessageServerPropertiesResponseOutput) ToMessageServerPropertiesResponseOutput() MessageServerPropertiesResponseOutput {
	return o
}

func (o MessageServerPropertiesResponseOutput) ToMessageServerPropertiesResponseOutputWithContext(ctx context.Context) MessageServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o MessageServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// message server SAP Hostname.
func (o MessageServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// message server HTTP Port.
func (o MessageServerPropertiesResponseOutput) HttpPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.HttpPort }).(pulumi.Float64Output)
}

// message server HTTPS Port.
func (o MessageServerPropertiesResponseOutput) HttpsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.HttpsPort }).(pulumi.Float64Output)
}

// message server internal MS port.
func (o MessageServerPropertiesResponseOutput) InternalMsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.InternalMsPort }).(pulumi.Float64Output)
}

// message server IP Address.
func (o MessageServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// message server port.
func (o MessageServerPropertiesResponseOutput) MsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.MsPort }).(pulumi.Float64Output)
}

type MessageServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MessageServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageServerPropertiesResponse)(nil)).Elem()
}

func (o MessageServerPropertiesResponsePtrOutput) ToMessageServerPropertiesResponsePtrOutput() MessageServerPropertiesResponsePtrOutput {
	return o
}

func (o MessageServerPropertiesResponsePtrOutput) ToMessageServerPropertiesResponsePtrOutputWithContext(ctx context.Context) MessageServerPropertiesResponsePtrOutput {
	return o
}

func (o MessageServerPropertiesResponsePtrOutput) Elem() MessageServerPropertiesResponseOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) MessageServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MessageServerPropertiesResponse
		return ret
	}).(MessageServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o MessageServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// message server SAP Hostname.
func (o MessageServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// message server HTTP Port.
func (o MessageServerPropertiesResponsePtrOutput) HttpPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.HttpPort
	}).(pulumi.Float64PtrOutput)
}

// message server HTTPS Port.
func (o MessageServerPropertiesResponsePtrOutput) HttpsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.HttpsPort
	}).(pulumi.Float64PtrOutput)
}

// message server internal MS port.
func (o MessageServerPropertiesResponsePtrOutput) InternalMsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.InternalMsPort
	}).(pulumi.Float64PtrOutput)
}

// message server IP Address.
func (o MessageServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// message server port.
func (o MessageServerPropertiesResponsePtrOutput) MsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MsPort
	}).(pulumi.Float64PtrOutput)
}

// Defines the SAP monitor errors.
type MonitorPropertiesResponseErrors struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Defines the SAP monitor errors.
type MonitorPropertiesResponseErrorsOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesResponseErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPropertiesResponseErrors)(nil)).Elem()
}

func (o MonitorPropertiesResponseErrorsOutput) ToMonitorPropertiesResponseErrorsOutput() MonitorPropertiesResponseErrorsOutput {
	return o
}

func (o MonitorPropertiesResponseErrorsOutput) ToMonitorPropertiesResponseErrorsOutputWithContext(ctx context.Context) MonitorPropertiesResponseErrorsOutput {
	return o
}

// Server-defined set of error codes.
func (o MonitorPropertiesResponseErrorsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o MonitorPropertiesResponseErrorsOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o MonitorPropertiesResponseErrorsOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o MonitorPropertiesResponseErrorsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o MonitorPropertiesResponseErrorsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Target }).(pulumi.StringOutput)
}

// Monthly retention schedule.
type MonthlyRetentionSchedule struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration `pulumi:"retentionDuration"`
	// Daily retention format for monthly retention policy.
	RetentionScheduleDaily *DailyRetentionFormat `pulumi:"retentionScheduleDaily"`
	// Retention schedule format type for monthly retention policy.
	RetentionScheduleFormatType *string `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for monthly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormat `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// MonthlyRetentionScheduleInput is an input type that accepts MonthlyRetentionScheduleArgs and MonthlyRetentionScheduleOutput values.
// You can construct a concrete instance of `MonthlyRetentionScheduleInput` via:
//
//	MonthlyRetentionScheduleArgs{...}
type MonthlyRetentionScheduleInput interface {
	pulumi.Input

	ToMonthlyRetentionScheduleOutput() MonthlyRetentionScheduleOutput
	ToMonthlyRetentionScheduleOutputWithContext(context.Context) MonthlyRetentionScheduleOutput
}

// Monthly retention schedule.
type MonthlyRetentionScheduleArgs struct {
	// Retention duration of retention Policy.
	RetentionDuration RetentionDurationPtrInput `pulumi:"retentionDuration"`
	// Daily retention format for monthly retention policy.
	RetentionScheduleDaily DailyRetentionFormatPtrInput `pulumi:"retentionScheduleDaily"`
	// Retention schedule format type for monthly retention policy.
	RetentionScheduleFormatType pulumi.StringPtrInput `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for monthly retention policy.
	RetentionScheduleWeekly WeeklyRetentionFormatPtrInput `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes pulumi.StringArrayInput `pulumi:"retentionTimes"`
}

func (MonthlyRetentionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRetentionSchedule)(nil)).Elem()
}

func (i MonthlyRetentionScheduleArgs) ToMonthlyRetentionScheduleOutput() MonthlyRetentionScheduleOutput {
	return i.ToMonthlyRetentionScheduleOutputWithContext(context.Background())
}

func (i MonthlyRetentionScheduleArgs) ToMonthlyRetentionScheduleOutputWithContext(ctx context.Context) MonthlyRetentionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyRetentionScheduleOutput)
}

func (i MonthlyRetentionScheduleArgs) ToMonthlyRetentionSchedulePtrOutput() MonthlyRetentionSchedulePtrOutput {
	return i.ToMonthlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i MonthlyRetentionScheduleArgs) ToMonthlyRetentionSchedulePtrOutputWithContext(ctx context.Context) MonthlyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyRetentionScheduleOutput).ToMonthlyRetentionSchedulePtrOutputWithContext(ctx)
}

// MonthlyRetentionSchedulePtrInput is an input type that accepts MonthlyRetentionScheduleArgs, MonthlyRetentionSchedulePtr and MonthlyRetentionSchedulePtrOutput values.
// You can construct a concrete instance of `MonthlyRetentionSchedulePtrInput` via:
//
//	        MonthlyRetentionScheduleArgs{...}
//
//	or:
//
//	        nil
type MonthlyRetentionSchedulePtrInput interface {
	pulumi.Input

	ToMonthlyRetentionSchedulePtrOutput() MonthlyRetentionSchedulePtrOutput
	ToMonthlyRetentionSchedulePtrOutputWithContext(context.Context) MonthlyRetentionSchedulePtrOutput
}

type monthlyRetentionSchedulePtrType MonthlyRetentionScheduleArgs

func MonthlyRetentionSchedulePtr(v *MonthlyRetentionScheduleArgs) MonthlyRetentionSchedulePtrInput {
	return (*monthlyRetentionSchedulePtrType)(v)
}

func (*monthlyRetentionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlyRetentionSchedule)(nil)).Elem()
}

func (i *monthlyRetentionSchedulePtrType) ToMonthlyRetentionSchedulePtrOutput() MonthlyRetentionSchedulePtrOutput {
	return i.ToMonthlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i *monthlyRetentionSchedulePtrType) ToMonthlyRetentionSchedulePtrOutputWithContext(ctx context.Context) MonthlyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthlyRetentionSchedulePtrOutput)
}

// Monthly retention schedule.
type MonthlyRetentionScheduleOutput struct{ *pulumi.OutputState }

func (MonthlyRetentionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRetentionSchedule)(nil)).Elem()
}

func (o MonthlyRetentionScheduleOutput) ToMonthlyRetentionScheduleOutput() MonthlyRetentionScheduleOutput {
	return o
}

func (o MonthlyRetentionScheduleOutput) ToMonthlyRetentionScheduleOutputWithContext(ctx context.Context) MonthlyRetentionScheduleOutput {
	return o
}

func (o MonthlyRetentionScheduleOutput) ToMonthlyRetentionSchedulePtrOutput() MonthlyRetentionSchedulePtrOutput {
	return o.ToMonthlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (o MonthlyRetentionScheduleOutput) ToMonthlyRetentionSchedulePtrOutputWithContext(ctx context.Context) MonthlyRetentionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonthlyRetentionSchedule) *MonthlyRetentionSchedule {
		return &v
	}).(MonthlyRetentionSchedulePtrOutput)
}

// Retention duration of retention Policy.
func (o MonthlyRetentionScheduleOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v MonthlyRetentionSchedule) *RetentionDuration { return v.RetentionDuration }).(RetentionDurationPtrOutput)
}

// Daily retention format for monthly retention policy.
func (o MonthlyRetentionScheduleOutput) RetentionScheduleDaily() DailyRetentionFormatPtrOutput {
	return o.ApplyT(func(v MonthlyRetentionSchedule) *DailyRetentionFormat { return v.RetentionScheduleDaily }).(DailyRetentionFormatPtrOutput)
}

// Retention schedule format type for monthly retention policy.
func (o MonthlyRetentionScheduleOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRetentionSchedule) *string { return v.RetentionScheduleFormatType }).(pulumi.StringPtrOutput)
}

// Weekly retention format for monthly retention policy.
func (o MonthlyRetentionScheduleOutput) RetentionScheduleWeekly() WeeklyRetentionFormatPtrOutput {
	return o.ApplyT(func(v MonthlyRetentionSchedule) *WeeklyRetentionFormat { return v.RetentionScheduleWeekly }).(WeeklyRetentionFormatPtrOutput)
}

// Retention times of retention policy.
func (o MonthlyRetentionScheduleOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonthlyRetentionSchedule) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type MonthlyRetentionSchedulePtrOutput struct{ *pulumi.OutputState }

func (MonthlyRetentionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlyRetentionSchedule)(nil)).Elem()
}

func (o MonthlyRetentionSchedulePtrOutput) ToMonthlyRetentionSchedulePtrOutput() MonthlyRetentionSchedulePtrOutput {
	return o
}

func (o MonthlyRetentionSchedulePtrOutput) ToMonthlyRetentionSchedulePtrOutputWithContext(ctx context.Context) MonthlyRetentionSchedulePtrOutput {
	return o
}

func (o MonthlyRetentionSchedulePtrOutput) Elem() MonthlyRetentionScheduleOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) MonthlyRetentionSchedule {
		if v != nil {
			return *v
		}
		var ret MonthlyRetentionSchedule
		return ret
	}).(MonthlyRetentionScheduleOutput)
}

// Retention duration of retention Policy.
func (o MonthlyRetentionSchedulePtrOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) *RetentionDuration {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationPtrOutput)
}

// Daily retention format for monthly retention policy.
func (o MonthlyRetentionSchedulePtrOutput) RetentionScheduleDaily() DailyRetentionFormatPtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) *DailyRetentionFormat {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleDaily
	}).(DailyRetentionFormatPtrOutput)
}

// Retention schedule format type for monthly retention policy.
func (o MonthlyRetentionSchedulePtrOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleFormatType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention format for monthly retention policy.
func (o MonthlyRetentionSchedulePtrOutput) RetentionScheduleWeekly() WeeklyRetentionFormatPtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) *WeeklyRetentionFormat {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatPtrOutput)
}

// Retention times of retention policy.
func (o MonthlyRetentionSchedulePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonthlyRetentionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Monthly retention schedule.
type MonthlyRetentionScheduleResponse struct {
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDurationResponse `pulumi:"retentionDuration"`
	// Daily retention format for monthly retention policy.
	RetentionScheduleDaily *DailyRetentionFormatResponse `pulumi:"retentionScheduleDaily"`
	// Retention schedule format type for monthly retention policy.
	RetentionScheduleFormatType *string `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for monthly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormatResponse `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// Monthly retention schedule.
type MonthlyRetentionScheduleResponseOutput struct{ *pulumi.OutputState }

func (MonthlyRetentionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthlyRetentionScheduleResponse)(nil)).Elem()
}

func (o MonthlyRetentionScheduleResponseOutput) ToMonthlyRetentionScheduleResponseOutput() MonthlyRetentionScheduleResponseOutput {
	return o
}

func (o MonthlyRetentionScheduleResponseOutput) ToMonthlyRetentionScheduleResponseOutputWithContext(ctx context.Context) MonthlyRetentionScheduleResponseOutput {
	return o
}

// Retention duration of retention Policy.
func (o MonthlyRetentionScheduleResponseOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v MonthlyRetentionScheduleResponse) *RetentionDurationResponse { return v.RetentionDuration }).(RetentionDurationResponsePtrOutput)
}

// Daily retention format for monthly retention policy.
func (o MonthlyRetentionScheduleResponseOutput) RetentionScheduleDaily() DailyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v MonthlyRetentionScheduleResponse) *DailyRetentionFormatResponse {
		return v.RetentionScheduleDaily
	}).(DailyRetentionFormatResponsePtrOutput)
}

// Retention schedule format type for monthly retention policy.
func (o MonthlyRetentionScheduleResponseOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonthlyRetentionScheduleResponse) *string { return v.RetentionScheduleFormatType }).(pulumi.StringPtrOutput)
}

// Weekly retention format for monthly retention policy.
func (o MonthlyRetentionScheduleResponseOutput) RetentionScheduleWeekly() WeeklyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v MonthlyRetentionScheduleResponse) *WeeklyRetentionFormatResponse {
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatResponsePtrOutput)
}

// Retention times of retention policy.
func (o MonthlyRetentionScheduleResponseOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonthlyRetentionScheduleResponse) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type MonthlyRetentionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (MonthlyRetentionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthlyRetentionScheduleResponse)(nil)).Elem()
}

func (o MonthlyRetentionScheduleResponsePtrOutput) ToMonthlyRetentionScheduleResponsePtrOutput() MonthlyRetentionScheduleResponsePtrOutput {
	return o
}

func (o MonthlyRetentionScheduleResponsePtrOutput) ToMonthlyRetentionScheduleResponsePtrOutputWithContext(ctx context.Context) MonthlyRetentionScheduleResponsePtrOutput {
	return o
}

func (o MonthlyRetentionScheduleResponsePtrOutput) Elem() MonthlyRetentionScheduleResponseOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) MonthlyRetentionScheduleResponse {
		if v != nil {
			return *v
		}
		var ret MonthlyRetentionScheduleResponse
		return ret
	}).(MonthlyRetentionScheduleResponseOutput)
}

// Retention duration of retention Policy.
func (o MonthlyRetentionScheduleResponsePtrOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) *RetentionDurationResponse {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationResponsePtrOutput)
}

// Daily retention format for monthly retention policy.
func (o MonthlyRetentionScheduleResponsePtrOutput) RetentionScheduleDaily() DailyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) *DailyRetentionFormatResponse {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleDaily
	}).(DailyRetentionFormatResponsePtrOutput)
}

// Retention schedule format type for monthly retention policy.
func (o MonthlyRetentionScheduleResponsePtrOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleFormatType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention format for monthly retention policy.
func (o MonthlyRetentionScheduleResponsePtrOutput) RetentionScheduleWeekly() WeeklyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) *WeeklyRetentionFormatResponse {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatResponsePtrOutput)
}

// Retention times of retention policy.
func (o MonthlyRetentionScheduleResponsePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonthlyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'Mount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The fileshare resource ID
	Id string `pulumi:"id"`
	// The private endpoint resource ID
	PrivateEndpointId string `pulumi:"privateEndpointId"`
}

// MountFileShareConfigurationInput is an input type that accepts MountFileShareConfigurationArgs and MountFileShareConfigurationOutput values.
// You can construct a concrete instance of `MountFileShareConfigurationInput` via:
//
//	MountFileShareConfigurationArgs{...}
type MountFileShareConfigurationInput interface {
	pulumi.Input

	ToMountFileShareConfigurationOutput() MountFileShareConfigurationOutput
	ToMountFileShareConfigurationOutputWithContext(context.Context) MountFileShareConfigurationOutput
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfigurationArgs struct {
	// The type of file share config.
	// Expected value is 'Mount'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
	// The fileshare resource ID
	Id pulumi.StringInput `pulumi:"id"`
	// The private endpoint resource ID
	PrivateEndpointId pulumi.StringInput `pulumi:"privateEndpointId"`
}

func (MountFileShareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountFileShareConfiguration)(nil)).Elem()
}

func (i MountFileShareConfigurationArgs) ToMountFileShareConfigurationOutput() MountFileShareConfigurationOutput {
	return i.ToMountFileShareConfigurationOutputWithContext(context.Background())
}

func (i MountFileShareConfigurationArgs) ToMountFileShareConfigurationOutputWithContext(ctx context.Context) MountFileShareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountFileShareConfigurationOutput)
}

func (i MountFileShareConfigurationArgs) ToMountFileShareConfigurationPtrOutput() MountFileShareConfigurationPtrOutput {
	return i.ToMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i MountFileShareConfigurationArgs) ToMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) MountFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountFileShareConfigurationOutput).ToMountFileShareConfigurationPtrOutputWithContext(ctx)
}

// MountFileShareConfigurationPtrInput is an input type that accepts MountFileShareConfigurationArgs, MountFileShareConfigurationPtr and MountFileShareConfigurationPtrOutput values.
// You can construct a concrete instance of `MountFileShareConfigurationPtrInput` via:
//
//	        MountFileShareConfigurationArgs{...}
//
//	or:
//
//	        nil
type MountFileShareConfigurationPtrInput interface {
	pulumi.Input

	ToMountFileShareConfigurationPtrOutput() MountFileShareConfigurationPtrOutput
	ToMountFileShareConfigurationPtrOutputWithContext(context.Context) MountFileShareConfigurationPtrOutput
}

type mountFileShareConfigurationPtrType MountFileShareConfigurationArgs

func MountFileShareConfigurationPtr(v *MountFileShareConfigurationArgs) MountFileShareConfigurationPtrInput {
	return (*mountFileShareConfigurationPtrType)(v)
}

func (*mountFileShareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MountFileShareConfiguration)(nil)).Elem()
}

func (i *mountFileShareConfigurationPtrType) ToMountFileShareConfigurationPtrOutput() MountFileShareConfigurationPtrOutput {
	return i.ToMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i *mountFileShareConfigurationPtrType) ToMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) MountFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountFileShareConfigurationPtrOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfigurationOutput struct{ *pulumi.OutputState }

func (MountFileShareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountFileShareConfiguration)(nil)).Elem()
}

func (o MountFileShareConfigurationOutput) ToMountFileShareConfigurationOutput() MountFileShareConfigurationOutput {
	return o
}

func (o MountFileShareConfigurationOutput) ToMountFileShareConfigurationOutputWithContext(ctx context.Context) MountFileShareConfigurationOutput {
	return o
}

func (o MountFileShareConfigurationOutput) ToMountFileShareConfigurationPtrOutput() MountFileShareConfigurationPtrOutput {
	return o.ToMountFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (o MountFileShareConfigurationOutput) ToMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) MountFileShareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MountFileShareConfiguration) *MountFileShareConfiguration {
		return &v
	}).(MountFileShareConfigurationPtrOutput)
}

// The type of file share config.
// Expected value is 'Mount'.
func (o MountFileShareConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The fileshare resource ID
func (o MountFileShareConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

// The private endpoint resource ID
func (o MountFileShareConfigurationOutput) PrivateEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfiguration) string { return v.PrivateEndpointId }).(pulumi.StringOutput)
}

type MountFileShareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MountFileShareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountFileShareConfiguration)(nil)).Elem()
}

func (o MountFileShareConfigurationPtrOutput) ToMountFileShareConfigurationPtrOutput() MountFileShareConfigurationPtrOutput {
	return o
}

func (o MountFileShareConfigurationPtrOutput) ToMountFileShareConfigurationPtrOutputWithContext(ctx context.Context) MountFileShareConfigurationPtrOutput {
	return o
}

func (o MountFileShareConfigurationPtrOutput) Elem() MountFileShareConfigurationOutput {
	return o.ApplyT(func(v *MountFileShareConfiguration) MountFileShareConfiguration {
		if v != nil {
			return *v
		}
		var ret MountFileShareConfiguration
		return ret
	}).(MountFileShareConfigurationOutput)
}

// The type of file share config.
// Expected value is 'Mount'.
func (o MountFileShareConfigurationPtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The fileshare resource ID
func (o MountFileShareConfigurationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The private endpoint resource ID
func (o MountFileShareConfigurationPtrOutput) PrivateEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateEndpointId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'Mount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The fileshare resource ID
	Id string `pulumi:"id"`
	// The private endpoint resource ID
	PrivateEndpointId string `pulumi:"privateEndpointId"`
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (MountFileShareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountFileShareConfigurationResponse)(nil)).Elem()
}

func (o MountFileShareConfigurationResponseOutput) ToMountFileShareConfigurationResponseOutput() MountFileShareConfigurationResponseOutput {
	return o
}

func (o MountFileShareConfigurationResponseOutput) ToMountFileShareConfigurationResponseOutputWithContext(ctx context.Context) MountFileShareConfigurationResponseOutput {
	return o
}

// The type of file share config.
// Expected value is 'Mount'.
func (o MountFileShareConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

// The fileshare resource ID
func (o MountFileShareConfigurationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfigurationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The private endpoint resource ID
func (o MountFileShareConfigurationResponseOutput) PrivateEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v MountFileShareConfigurationResponse) string { return v.PrivateEndpointId }).(pulumi.StringOutput)
}

type MountFileShareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (MountFileShareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountFileShareConfigurationResponse)(nil)).Elem()
}

func (o MountFileShareConfigurationResponsePtrOutput) ToMountFileShareConfigurationResponsePtrOutput() MountFileShareConfigurationResponsePtrOutput {
	return o
}

func (o MountFileShareConfigurationResponsePtrOutput) ToMountFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) MountFileShareConfigurationResponsePtrOutput {
	return o
}

func (o MountFileShareConfigurationResponsePtrOutput) Elem() MountFileShareConfigurationResponseOutput {
	return o.ApplyT(func(v *MountFileShareConfigurationResponse) MountFileShareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret MountFileShareConfigurationResponse
		return ret
	}).(MountFileShareConfigurationResponseOutput)
}

// The type of file share config.
// Expected value is 'Mount'.
func (o MountFileShareConfigurationResponsePtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The fileshare resource ID
func (o MountFileShareConfigurationResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The private endpoint resource ID
func (o MountFileShareConfigurationResponsePtrOutput) PrivateEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MountFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateEndpointId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstanceProperties struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// MsSqlServerProviderInstancePropertiesInput is an input type that accepts MsSqlServerProviderInstancePropertiesArgs and MsSqlServerProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `MsSqlServerProviderInstancePropertiesInput` via:
//
//	MsSqlServerProviderInstancePropertiesArgs{...}
type MsSqlServerProviderInstancePropertiesInput interface {
	pulumi.Input

	ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput
	ToMsSqlServerProviderInstancePropertiesOutputWithContext(context.Context) MsSqlServerProviderInstancePropertiesOutput
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesArgs struct {
	// Gets or sets the database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort pulumi.StringPtrInput `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (MsSqlServerProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput {
	return i.ToMsSqlServerProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesOutput)
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return i.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesOutput).ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// MsSqlServerProviderInstancePropertiesPtrInput is an input type that accepts MsSqlServerProviderInstancePropertiesArgs, MsSqlServerProviderInstancePropertiesPtr and MsSqlServerProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `MsSqlServerProviderInstancePropertiesPtrInput` via:
//
//	        MsSqlServerProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type MsSqlServerProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput
	ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Context) MsSqlServerProviderInstancePropertiesPtrOutput
}

type msSqlServerProviderInstancePropertiesPtrType MsSqlServerProviderInstancePropertiesArgs

func MsSqlServerProviderInstancePropertiesPtr(v *MsSqlServerProviderInstancePropertiesArgs) MsSqlServerProviderInstancePropertiesPtrInput {
	return (*msSqlServerProviderInstancePropertiesPtrType)(v)
}

func (*msSqlServerProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (i *msSqlServerProviderInstancePropertiesPtrType) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return i.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *msSqlServerProviderInstancePropertiesPtrType) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesPtrOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return o.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MsSqlServerProviderInstanceProperties) *MsSqlServerProviderInstanceProperties {
		return &v
	}).(MsSqlServerProviderInstancePropertiesPtrOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type MsSqlServerProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) Elem() MsSqlServerProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) MsSqlServerProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret MsSqlServerProviderInstanceProperties
		return ret
	}).(MsSqlServerProviderInstancePropertiesOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesResponse struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesResponseOutput) ToMsSqlServerProviderInstancePropertiesResponseOutput() MsSqlServerProviderInstancePropertiesResponseOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponseOutput) ToMsSqlServerProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type MsSqlServerProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ToMsSqlServerProviderInstancePropertiesResponsePtrOutput() MsSqlServerProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ToMsSqlServerProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) Elem() MsSqlServerProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) MsSqlServerProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MsSqlServerProviderInstancePropertiesResponse
		return ret
	}).(MsSqlServerProviderInstancePropertiesResponseOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// The SAP instance specific performance data for native discovery.
type NativePerformanceDataResponse struct {
	// The data source for this resource.
	// Expected value is 'Native'.
	DataSource string `pulumi:"dataSource"`
}

// The SAP instance specific performance data for native discovery.
type NativePerformanceDataResponseOutput struct{ *pulumi.OutputState }

func (NativePerformanceDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NativePerformanceDataResponse)(nil)).Elem()
}

func (o NativePerformanceDataResponseOutput) ToNativePerformanceDataResponseOutput() NativePerformanceDataResponseOutput {
	return o
}

func (o NativePerformanceDataResponseOutput) ToNativePerformanceDataResponseOutputWithContext(ctx context.Context) NativePerformanceDataResponseOutput {
	return o
}

// The data source for this resource.
// Expected value is 'Native'.
func (o NativePerformanceDataResponseOutput) DataSource() pulumi.StringOutput {
	return o.ApplyT(func(v NativePerformanceDataResponse) string { return v.DataSource }).(pulumi.StringOutput)
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfiguration struct {
	// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
	IsSecondaryIpEnabled *bool `pulumi:"isSecondaryIpEnabled"`
}

// Defaults sets the appropriate defaults for NetworkConfiguration
func (val *NetworkConfiguration) Defaults() *NetworkConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecondaryIpEnabled == nil {
		isSecondaryIpEnabled_ := false
		tmp.IsSecondaryIpEnabled = &isSecondaryIpEnabled_
	}
	return &tmp
}

// NetworkConfigurationInput is an input type that accepts NetworkConfigurationArgs and NetworkConfigurationOutput values.
// You can construct a concrete instance of `NetworkConfigurationInput` via:
//
//	NetworkConfigurationArgs{...}
type NetworkConfigurationInput interface {
	pulumi.Input

	ToNetworkConfigurationOutput() NetworkConfigurationOutput
	ToNetworkConfigurationOutputWithContext(context.Context) NetworkConfigurationOutput
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfigurationArgs struct {
	// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
	IsSecondaryIpEnabled pulumi.BoolPtrInput `pulumi:"isSecondaryIpEnabled"`
}

// Defaults sets the appropriate defaults for NetworkConfigurationArgs
func (val *NetworkConfigurationArgs) Defaults() *NetworkConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecondaryIpEnabled == nil {
		tmp.IsSecondaryIpEnabled = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (NetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return i.ToNetworkConfigurationOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput)
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput).ToNetworkConfigurationPtrOutputWithContext(ctx)
}

// NetworkConfigurationPtrInput is an input type that accepts NetworkConfigurationArgs, NetworkConfigurationPtr and NetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `NetworkConfigurationPtrInput` via:
//
//	        NetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigurationPtrInput interface {
	pulumi.Input

	ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput
	ToNetworkConfigurationPtrOutputWithContext(context.Context) NetworkConfigurationPtrOutput
}

type networkConfigurationPtrType NetworkConfigurationArgs

func NetworkConfigurationPtr(v *NetworkConfigurationArgs) NetworkConfigurationPtrInput {
	return (*networkConfigurationPtrType)(v)
}

func (*networkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfiguration)(nil)).Elem()
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return i.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *networkConfigurationPtrType) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationPtrOutput)
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return o.ToNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfiguration) *NetworkConfiguration {
		return &v
	}).(NetworkConfigurationPtrOutput)
}

// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
func (o NetworkConfigurationOutput) IsSecondaryIpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *bool { return v.IsSecondaryIpEnabled }).(pulumi.BoolPtrOutput)
}

type NetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfiguration)(nil)).Elem()
}

func (o NetworkConfigurationPtrOutput) ToNetworkConfigurationPtrOutput() NetworkConfigurationPtrOutput {
	return o
}

func (o NetworkConfigurationPtrOutput) ToNetworkConfigurationPtrOutputWithContext(ctx context.Context) NetworkConfigurationPtrOutput {
	return o
}

func (o NetworkConfigurationPtrOutput) Elem() NetworkConfigurationOutput {
	return o.ApplyT(func(v *NetworkConfiguration) NetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret NetworkConfiguration
		return ret
	}).(NetworkConfigurationOutput)
}

// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
func (o NetworkConfigurationPtrOutput) IsSecondaryIpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IsSecondaryIpEnabled
	}).(pulumi.BoolPtrOutput)
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfigurationResponse struct {
	// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
	IsSecondaryIpEnabled *bool `pulumi:"isSecondaryIpEnabled"`
}

// Defaults sets the appropriate defaults for NetworkConfigurationResponse
func (val *NetworkConfigurationResponse) Defaults() *NetworkConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecondaryIpEnabled == nil {
		isSecondaryIpEnabled_ := false
		tmp.IsSecondaryIpEnabled = &isSecondaryIpEnabled_
	}
	return &tmp
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutputWithContext(ctx context.Context) NetworkConfigurationResponseOutput {
	return o
}

// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
func (o NetworkConfigurationResponseOutput) IsSecondaryIpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *bool { return v.IsSecondaryIpEnabled }).(pulumi.BoolPtrOutput)
}

type NetworkConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutput() NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) ToNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) NetworkConfigurationResponsePtrOutput {
	return o
}

func (o NetworkConfigurationResponsePtrOutput) Elem() NetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) NetworkConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret NetworkConfigurationResponse
		return ret
	}).(NetworkConfigurationResponseOutput)
}

// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
func (o NetworkConfigurationResponsePtrOutput) IsSecondaryIpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSecondaryIpEnabled
	}).(pulumi.BoolPtrOutput)
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNames struct {
	// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
}

// NetworkInterfaceResourceNamesInput is an input type that accepts NetworkInterfaceResourceNamesArgs and NetworkInterfaceResourceNamesOutput values.
// You can construct a concrete instance of `NetworkInterfaceResourceNamesInput` via:
//
//	NetworkInterfaceResourceNamesArgs{...}
type NetworkInterfaceResourceNamesInput interface {
	pulumi.Input

	ToNetworkInterfaceResourceNamesOutput() NetworkInterfaceResourceNamesOutput
	ToNetworkInterfaceResourceNamesOutputWithContext(context.Context) NetworkInterfaceResourceNamesOutput
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNamesArgs struct {
	// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
	NetworkInterfaceName pulumi.StringPtrInput `pulumi:"networkInterfaceName"`
}

func (NetworkInterfaceResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResourceNames)(nil)).Elem()
}

func (i NetworkInterfaceResourceNamesArgs) ToNetworkInterfaceResourceNamesOutput() NetworkInterfaceResourceNamesOutput {
	return i.ToNetworkInterfaceResourceNamesOutputWithContext(context.Background())
}

func (i NetworkInterfaceResourceNamesArgs) ToNetworkInterfaceResourceNamesOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResourceNamesOutput)
}

// NetworkInterfaceResourceNamesArrayInput is an input type that accepts NetworkInterfaceResourceNamesArray and NetworkInterfaceResourceNamesArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceResourceNamesArrayInput` via:
//
//	NetworkInterfaceResourceNamesArray{ NetworkInterfaceResourceNamesArgs{...} }
type NetworkInterfaceResourceNamesArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceResourceNamesArrayOutput() NetworkInterfaceResourceNamesArrayOutput
	ToNetworkInterfaceResourceNamesArrayOutputWithContext(context.Context) NetworkInterfaceResourceNamesArrayOutput
}

type NetworkInterfaceResourceNamesArray []NetworkInterfaceResourceNamesInput

func (NetworkInterfaceResourceNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResourceNames)(nil)).Elem()
}

func (i NetworkInterfaceResourceNamesArray) ToNetworkInterfaceResourceNamesArrayOutput() NetworkInterfaceResourceNamesArrayOutput {
	return i.ToNetworkInterfaceResourceNamesArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceResourceNamesArray) ToNetworkInterfaceResourceNamesArrayOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceResourceNamesArrayOutput)
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNamesOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResourceNames)(nil)).Elem()
}

func (o NetworkInterfaceResourceNamesOutput) ToNetworkInterfaceResourceNamesOutput() NetworkInterfaceResourceNamesOutput {
	return o
}

func (o NetworkInterfaceResourceNamesOutput) ToNetworkInterfaceResourceNamesOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesOutput {
	return o
}

// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
func (o NetworkInterfaceResourceNamesOutput) NetworkInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceResourceNames) *string { return v.NetworkInterfaceName }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceResourceNamesArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResourceNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResourceNames)(nil)).Elem()
}

func (o NetworkInterfaceResourceNamesArrayOutput) ToNetworkInterfaceResourceNamesArrayOutput() NetworkInterfaceResourceNamesArrayOutput {
	return o
}

func (o NetworkInterfaceResourceNamesArrayOutput) ToNetworkInterfaceResourceNamesArrayOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesArrayOutput {
	return o
}

func (o NetworkInterfaceResourceNamesArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResourceNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResourceNames {
		return vs[0].([]NetworkInterfaceResourceNames)[vs[1].(int)]
	}).(NetworkInterfaceResourceNamesOutput)
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNamesResponse struct {
	// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterfaceResourceNamesResponse)(nil)).Elem()
}

func (o NetworkInterfaceResourceNamesResponseOutput) ToNetworkInterfaceResourceNamesResponseOutput() NetworkInterfaceResourceNamesResponseOutput {
	return o
}

func (o NetworkInterfaceResourceNamesResponseOutput) ToNetworkInterfaceResourceNamesResponseOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesResponseOutput {
	return o
}

// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
func (o NetworkInterfaceResourceNamesResponseOutput) NetworkInterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterfaceResourceNamesResponse) *string { return v.NetworkInterfaceName }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceResourceNamesResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceResourceNamesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterfaceResourceNamesResponse)(nil)).Elem()
}

func (o NetworkInterfaceResourceNamesResponseArrayOutput) ToNetworkInterfaceResourceNamesResponseArrayOutput() NetworkInterfaceResourceNamesResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResourceNamesResponseArrayOutput) ToNetworkInterfaceResourceNamesResponseArrayOutputWithContext(ctx context.Context) NetworkInterfaceResourceNamesResponseArrayOutput {
	return o
}

func (o NetworkInterfaceResourceNamesResponseArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceResourceNamesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterfaceResourceNamesResponse {
		return vs[0].([]NetworkInterfaceResourceNamesResponse)[vs[1].(int)]
	}).(NetworkInterfaceResourceNamesResponseOutput)
}

// New recovery services vault.
type NewRecoveryServicesVault struct {
	// The name of the recovery services vault has to be created.
	Name string `pulumi:"name"`
	// The name of the resource group where the recovery services vault has to be created.
	ResourceGroup string `pulumi:"resourceGroup"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'New'.
	VaultType string `pulumi:"vaultType"`
}

// NewRecoveryServicesVaultInput is an input type that accepts NewRecoveryServicesVaultArgs and NewRecoveryServicesVaultOutput values.
// You can construct a concrete instance of `NewRecoveryServicesVaultInput` via:
//
//	NewRecoveryServicesVaultArgs{...}
type NewRecoveryServicesVaultInput interface {
	pulumi.Input

	ToNewRecoveryServicesVaultOutput() NewRecoveryServicesVaultOutput
	ToNewRecoveryServicesVaultOutputWithContext(context.Context) NewRecoveryServicesVaultOutput
}

// New recovery services vault.
type NewRecoveryServicesVaultArgs struct {
	// The name of the recovery services vault has to be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group where the recovery services vault has to be created.
	ResourceGroup pulumi.StringInput `pulumi:"resourceGroup"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'New'.
	VaultType pulumi.StringInput `pulumi:"vaultType"`
}

func (NewRecoveryServicesVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NewRecoveryServicesVault)(nil)).Elem()
}

func (i NewRecoveryServicesVaultArgs) ToNewRecoveryServicesVaultOutput() NewRecoveryServicesVaultOutput {
	return i.ToNewRecoveryServicesVaultOutputWithContext(context.Background())
}

func (i NewRecoveryServicesVaultArgs) ToNewRecoveryServicesVaultOutputWithContext(ctx context.Context) NewRecoveryServicesVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewRecoveryServicesVaultOutput)
}

func (i NewRecoveryServicesVaultArgs) ToNewRecoveryServicesVaultPtrOutput() NewRecoveryServicesVaultPtrOutput {
	return i.ToNewRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (i NewRecoveryServicesVaultArgs) ToNewRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) NewRecoveryServicesVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewRecoveryServicesVaultOutput).ToNewRecoveryServicesVaultPtrOutputWithContext(ctx)
}

// NewRecoveryServicesVaultPtrInput is an input type that accepts NewRecoveryServicesVaultArgs, NewRecoveryServicesVaultPtr and NewRecoveryServicesVaultPtrOutput values.
// You can construct a concrete instance of `NewRecoveryServicesVaultPtrInput` via:
//
//	        NewRecoveryServicesVaultArgs{...}
//
//	or:
//
//	        nil
type NewRecoveryServicesVaultPtrInput interface {
	pulumi.Input

	ToNewRecoveryServicesVaultPtrOutput() NewRecoveryServicesVaultPtrOutput
	ToNewRecoveryServicesVaultPtrOutputWithContext(context.Context) NewRecoveryServicesVaultPtrOutput
}

type newRecoveryServicesVaultPtrType NewRecoveryServicesVaultArgs

func NewRecoveryServicesVaultPtr(v *NewRecoveryServicesVaultArgs) NewRecoveryServicesVaultPtrInput {
	return (*newRecoveryServicesVaultPtrType)(v)
}

func (*newRecoveryServicesVaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NewRecoveryServicesVault)(nil)).Elem()
}

func (i *newRecoveryServicesVaultPtrType) ToNewRecoveryServicesVaultPtrOutput() NewRecoveryServicesVaultPtrOutput {
	return i.ToNewRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (i *newRecoveryServicesVaultPtrType) ToNewRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) NewRecoveryServicesVaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NewRecoveryServicesVaultPtrOutput)
}

// New recovery services vault.
type NewRecoveryServicesVaultOutput struct{ *pulumi.OutputState }

func (NewRecoveryServicesVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NewRecoveryServicesVault)(nil)).Elem()
}

func (o NewRecoveryServicesVaultOutput) ToNewRecoveryServicesVaultOutput() NewRecoveryServicesVaultOutput {
	return o
}

func (o NewRecoveryServicesVaultOutput) ToNewRecoveryServicesVaultOutputWithContext(ctx context.Context) NewRecoveryServicesVaultOutput {
	return o
}

func (o NewRecoveryServicesVaultOutput) ToNewRecoveryServicesVaultPtrOutput() NewRecoveryServicesVaultPtrOutput {
	return o.ToNewRecoveryServicesVaultPtrOutputWithContext(context.Background())
}

func (o NewRecoveryServicesVaultOutput) ToNewRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) NewRecoveryServicesVaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NewRecoveryServicesVault) *NewRecoveryServicesVault {
		return &v
	}).(NewRecoveryServicesVaultPtrOutput)
}

// The name of the recovery services vault has to be created.
func (o NewRecoveryServicesVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVault) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group where the recovery services vault has to be created.
func (o NewRecoveryServicesVaultOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVault) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'New'.
func (o NewRecoveryServicesVaultOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVault) string { return v.VaultType }).(pulumi.StringOutput)
}

type NewRecoveryServicesVaultPtrOutput struct{ *pulumi.OutputState }

func (NewRecoveryServicesVaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NewRecoveryServicesVault)(nil)).Elem()
}

func (o NewRecoveryServicesVaultPtrOutput) ToNewRecoveryServicesVaultPtrOutput() NewRecoveryServicesVaultPtrOutput {
	return o
}

func (o NewRecoveryServicesVaultPtrOutput) ToNewRecoveryServicesVaultPtrOutputWithContext(ctx context.Context) NewRecoveryServicesVaultPtrOutput {
	return o
}

func (o NewRecoveryServicesVaultPtrOutput) Elem() NewRecoveryServicesVaultOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVault) NewRecoveryServicesVault {
		if v != nil {
			return *v
		}
		var ret NewRecoveryServicesVault
		return ret
	}).(NewRecoveryServicesVaultOutput)
}

// The name of the recovery services vault has to be created.
func (o NewRecoveryServicesVaultPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVault) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the resource group where the recovery services vault has to be created.
func (o NewRecoveryServicesVaultPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVault) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'New'.
func (o NewRecoveryServicesVaultPtrOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVault) *string {
		if v == nil {
			return nil
		}
		return &v.VaultType
	}).(pulumi.StringPtrOutput)
}

// New recovery services vault.
type NewRecoveryServicesVaultResponse struct {
	// The name of the recovery services vault has to be created.
	Name string `pulumi:"name"`
	// The name of the resource group where the recovery services vault has to be created.
	ResourceGroup string `pulumi:"resourceGroup"`
	// The vault type, whether it is existing or has to be created.
	// Expected value is 'New'.
	VaultType string `pulumi:"vaultType"`
}

// New recovery services vault.
type NewRecoveryServicesVaultResponseOutput struct{ *pulumi.OutputState }

func (NewRecoveryServicesVaultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NewRecoveryServicesVaultResponse)(nil)).Elem()
}

func (o NewRecoveryServicesVaultResponseOutput) ToNewRecoveryServicesVaultResponseOutput() NewRecoveryServicesVaultResponseOutput {
	return o
}

func (o NewRecoveryServicesVaultResponseOutput) ToNewRecoveryServicesVaultResponseOutputWithContext(ctx context.Context) NewRecoveryServicesVaultResponseOutput {
	return o
}

// The name of the recovery services vault has to be created.
func (o NewRecoveryServicesVaultResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVaultResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group where the recovery services vault has to be created.
func (o NewRecoveryServicesVaultResponseOutput) ResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVaultResponse) string { return v.ResourceGroup }).(pulumi.StringOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'New'.
func (o NewRecoveryServicesVaultResponseOutput) VaultType() pulumi.StringOutput {
	return o.ApplyT(func(v NewRecoveryServicesVaultResponse) string { return v.VaultType }).(pulumi.StringOutput)
}

type NewRecoveryServicesVaultResponsePtrOutput struct{ *pulumi.OutputState }

func (NewRecoveryServicesVaultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NewRecoveryServicesVaultResponse)(nil)).Elem()
}

func (o NewRecoveryServicesVaultResponsePtrOutput) ToNewRecoveryServicesVaultResponsePtrOutput() NewRecoveryServicesVaultResponsePtrOutput {
	return o
}

func (o NewRecoveryServicesVaultResponsePtrOutput) ToNewRecoveryServicesVaultResponsePtrOutputWithContext(ctx context.Context) NewRecoveryServicesVaultResponsePtrOutput {
	return o
}

func (o NewRecoveryServicesVaultResponsePtrOutput) Elem() NewRecoveryServicesVaultResponseOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVaultResponse) NewRecoveryServicesVaultResponse {
		if v != nil {
			return *v
		}
		var ret NewRecoveryServicesVaultResponse
		return ret
	}).(NewRecoveryServicesVaultResponseOutput)
}

// The name of the recovery services vault has to be created.
func (o NewRecoveryServicesVaultResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVaultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The name of the resource group where the recovery services vault has to be created.
func (o NewRecoveryServicesVaultResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVaultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The vault type, whether it is existing or has to be created.
// Expected value is 'New'.
func (o NewRecoveryServicesVaultResponsePtrOutput) VaultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NewRecoveryServicesVaultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultType
	}).(pulumi.StringPtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies Windows operating system settings on the virtual machine.
	OsConfiguration interface{} `pulumi:"osConfiguration"`
}

// OSProfileInput is an input type that accepts OSProfileArgs and OSProfileOutput values.
// You can construct a concrete instance of `OSProfileInput` via:
//
//	OSProfileArgs{...}
type OSProfileInput interface {
	pulumi.Input

	ToOSProfileOutput() OSProfileOutput
	ToOSProfileOutputWithContext(context.Context) OSProfileOutput
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileArgs struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword pulumi.StringPtrInput `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// Specifies Windows operating system settings on the virtual machine.
	OsConfiguration pulumi.Input `pulumi:"osConfiguration"`
}

func (OSProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfile)(nil)).Elem()
}

func (i OSProfileArgs) ToOSProfileOutput() OSProfileOutput {
	return i.ToOSProfileOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfileOutputWithContext(ctx context.Context) OSProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput)
}

func (i OSProfileArgs) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i OSProfileArgs) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfileOutput).ToOSProfilePtrOutputWithContext(ctx)
}

// OSProfilePtrInput is an input type that accepts OSProfileArgs, OSProfilePtr and OSProfilePtrOutput values.
// You can construct a concrete instance of `OSProfilePtrInput` via:
//
//	        OSProfileArgs{...}
//
//	or:
//
//	        nil
type OSProfilePtrInput interface {
	pulumi.Input

	ToOSProfilePtrOutput() OSProfilePtrOutput
	ToOSProfilePtrOutputWithContext(context.Context) OSProfilePtrOutput
}

type osprofilePtrType OSProfileArgs

func OSProfilePtr(v *OSProfileArgs) OSProfilePtrInput {
	return (*osprofilePtrType)(v)
}

func (*osprofilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfile)(nil)).Elem()
}

func (i *osprofilePtrType) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return i.ToOSProfilePtrOutputWithContext(context.Background())
}

func (i *osprofilePtrType) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OSProfilePtrOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileOutput struct{ *pulumi.OutputState }

func (OSProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfile)(nil)).Elem()
}

func (o OSProfileOutput) ToOSProfileOutput() OSProfileOutput {
	return o
}

func (o OSProfileOutput) ToOSProfileOutputWithContext(ctx context.Context) OSProfileOutput {
	return o
}

func (o OSProfileOutput) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return o.ToOSProfilePtrOutputWithContext(context.Background())
}

func (o OSProfileOutput) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OSProfile) *OSProfile {
		return &v
	}).(OSProfilePtrOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfile) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileOutput) OsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v OSProfile) interface{} { return v.OsConfiguration }).(pulumi.AnyOutput)
}

type OSProfilePtrOutput struct{ *pulumi.OutputState }

func (OSProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfile)(nil)).Elem()
}

func (o OSProfilePtrOutput) ToOSProfilePtrOutput() OSProfilePtrOutput {
	return o
}

func (o OSProfilePtrOutput) ToOSProfilePtrOutputWithContext(ctx context.Context) OSProfilePtrOutput {
	return o
}

func (o OSProfilePtrOutput) Elem() OSProfileOutput {
	return o.ApplyT(func(v *OSProfile) OSProfile {
		if v != nil {
			return *v
		}
		var ret OSProfile
		return ret
	}).(OSProfileOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfilePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfilePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfile) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfilePtrOutput) OsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *OSProfile) interface{} {
		if v == nil {
			return nil
		}
		return v.OsConfiguration
	}).(pulumi.AnyOutput)
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies Windows operating system settings on the virtual machine.
	OsConfiguration interface{} `pulumi:"osConfiguration"`
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponseOutput struct{ *pulumi.OutputState }

func (OSProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutput() OSProfileResponseOutput {
	return o
}

func (o OSProfileResponseOutput) ToOSProfileResponseOutputWithContext(ctx context.Context) OSProfileResponseOutput {
	return o
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileResponseOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminPassword }).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OSProfileResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponseOutput) OsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v OSProfileResponse) interface{} { return v.OsConfiguration }).(pulumi.AnyOutput)
}

type OSProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OSProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OSProfileResponse)(nil)).Elem()
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutput() OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) ToOSProfileResponsePtrOutputWithContext(ctx context.Context) OSProfileResponsePtrOutput {
	return o
}

func (o OSProfileResponsePtrOutput) Elem() OSProfileResponseOutput {
	return o.ApplyT(func(v *OSProfileResponse) OSProfileResponse {
		if v != nil {
			return *v
		}
		var ret OSProfileResponse
		return ret
	}).(OSProfileResponseOutput)
}

// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
func (o OSProfileResponsePtrOutput) AdminPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPassword
	}).(pulumi.StringPtrOutput)
}

// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
func (o OSProfileResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OSProfileResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
func (o OSProfileResponsePtrOutput) OsConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *OSProfileResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.OsConfiguration
	}).(pulumi.AnyOutput)
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfiguration struct {
	// The url and storage account ID where deployer VM packages are uploaded
	DeployerVmPackages *DeployerVmPackages `pulumi:"deployerVmPackages"`
	// The FQDN to set for the SAP system
	SapFqdn *string `pulumi:"sapFqdn"`
}

// OsSapConfigurationInput is an input type that accepts OsSapConfigurationArgs and OsSapConfigurationOutput values.
// You can construct a concrete instance of `OsSapConfigurationInput` via:
//
//	OsSapConfigurationArgs{...}
type OsSapConfigurationInput interface {
	pulumi.Input

	ToOsSapConfigurationOutput() OsSapConfigurationOutput
	ToOsSapConfigurationOutputWithContext(context.Context) OsSapConfigurationOutput
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfigurationArgs struct {
	// The url and storage account ID where deployer VM packages are uploaded
	DeployerVmPackages DeployerVmPackagesPtrInput `pulumi:"deployerVmPackages"`
	// The FQDN to set for the SAP system
	SapFqdn pulumi.StringPtrInput `pulumi:"sapFqdn"`
}

func (OsSapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsSapConfiguration)(nil)).Elem()
}

func (i OsSapConfigurationArgs) ToOsSapConfigurationOutput() OsSapConfigurationOutput {
	return i.ToOsSapConfigurationOutputWithContext(context.Background())
}

func (i OsSapConfigurationArgs) ToOsSapConfigurationOutputWithContext(ctx context.Context) OsSapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsSapConfigurationOutput)
}

func (i OsSapConfigurationArgs) ToOsSapConfigurationPtrOutput() OsSapConfigurationPtrOutput {
	return i.ToOsSapConfigurationPtrOutputWithContext(context.Background())
}

func (i OsSapConfigurationArgs) ToOsSapConfigurationPtrOutputWithContext(ctx context.Context) OsSapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsSapConfigurationOutput).ToOsSapConfigurationPtrOutputWithContext(ctx)
}

// OsSapConfigurationPtrInput is an input type that accepts OsSapConfigurationArgs, OsSapConfigurationPtr and OsSapConfigurationPtrOutput values.
// You can construct a concrete instance of `OsSapConfigurationPtrInput` via:
//
//	        OsSapConfigurationArgs{...}
//
//	or:
//
//	        nil
type OsSapConfigurationPtrInput interface {
	pulumi.Input

	ToOsSapConfigurationPtrOutput() OsSapConfigurationPtrOutput
	ToOsSapConfigurationPtrOutputWithContext(context.Context) OsSapConfigurationPtrOutput
}

type osSapConfigurationPtrType OsSapConfigurationArgs

func OsSapConfigurationPtr(v *OsSapConfigurationArgs) OsSapConfigurationPtrInput {
	return (*osSapConfigurationPtrType)(v)
}

func (*osSapConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsSapConfiguration)(nil)).Elem()
}

func (i *osSapConfigurationPtrType) ToOsSapConfigurationPtrOutput() OsSapConfigurationPtrOutput {
	return i.ToOsSapConfigurationPtrOutputWithContext(context.Background())
}

func (i *osSapConfigurationPtrType) ToOsSapConfigurationPtrOutputWithContext(ctx context.Context) OsSapConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsSapConfigurationPtrOutput)
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfigurationOutput struct{ *pulumi.OutputState }

func (OsSapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsSapConfiguration)(nil)).Elem()
}

func (o OsSapConfigurationOutput) ToOsSapConfigurationOutput() OsSapConfigurationOutput {
	return o
}

func (o OsSapConfigurationOutput) ToOsSapConfigurationOutputWithContext(ctx context.Context) OsSapConfigurationOutput {
	return o
}

func (o OsSapConfigurationOutput) ToOsSapConfigurationPtrOutput() OsSapConfigurationPtrOutput {
	return o.ToOsSapConfigurationPtrOutputWithContext(context.Background())
}

func (o OsSapConfigurationOutput) ToOsSapConfigurationPtrOutputWithContext(ctx context.Context) OsSapConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OsSapConfiguration) *OsSapConfiguration {
		return &v
	}).(OsSapConfigurationPtrOutput)
}

// The url and storage account ID where deployer VM packages are uploaded
func (o OsSapConfigurationOutput) DeployerVmPackages() DeployerVmPackagesPtrOutput {
	return o.ApplyT(func(v OsSapConfiguration) *DeployerVmPackages { return v.DeployerVmPackages }).(DeployerVmPackagesPtrOutput)
}

// The FQDN to set for the SAP system
func (o OsSapConfigurationOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsSapConfiguration) *string { return v.SapFqdn }).(pulumi.StringPtrOutput)
}

type OsSapConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OsSapConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsSapConfiguration)(nil)).Elem()
}

func (o OsSapConfigurationPtrOutput) ToOsSapConfigurationPtrOutput() OsSapConfigurationPtrOutput {
	return o
}

func (o OsSapConfigurationPtrOutput) ToOsSapConfigurationPtrOutputWithContext(ctx context.Context) OsSapConfigurationPtrOutput {
	return o
}

func (o OsSapConfigurationPtrOutput) Elem() OsSapConfigurationOutput {
	return o.ApplyT(func(v *OsSapConfiguration) OsSapConfiguration {
		if v != nil {
			return *v
		}
		var ret OsSapConfiguration
		return ret
	}).(OsSapConfigurationOutput)
}

// The url and storage account ID where deployer VM packages are uploaded
func (o OsSapConfigurationPtrOutput) DeployerVmPackages() DeployerVmPackagesPtrOutput {
	return o.ApplyT(func(v *OsSapConfiguration) *DeployerVmPackages {
		if v == nil {
			return nil
		}
		return v.DeployerVmPackages
	}).(DeployerVmPackagesPtrOutput)
}

// The FQDN to set for the SAP system
func (o OsSapConfigurationPtrOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsSapConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SapFqdn
	}).(pulumi.StringPtrOutput)
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfigurationResponse struct {
	// The url and storage account ID where deployer VM packages are uploaded
	DeployerVmPackages *DeployerVmPackagesResponse `pulumi:"deployerVmPackages"`
	// The FQDN to set for the SAP system
	SapFqdn *string `pulumi:"sapFqdn"`
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfigurationResponseOutput struct{ *pulumi.OutputState }

func (OsSapConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsSapConfigurationResponse)(nil)).Elem()
}

func (o OsSapConfigurationResponseOutput) ToOsSapConfigurationResponseOutput() OsSapConfigurationResponseOutput {
	return o
}

func (o OsSapConfigurationResponseOutput) ToOsSapConfigurationResponseOutputWithContext(ctx context.Context) OsSapConfigurationResponseOutput {
	return o
}

// The url and storage account ID where deployer VM packages are uploaded
func (o OsSapConfigurationResponseOutput) DeployerVmPackages() DeployerVmPackagesResponsePtrOutput {
	return o.ApplyT(func(v OsSapConfigurationResponse) *DeployerVmPackagesResponse { return v.DeployerVmPackages }).(DeployerVmPackagesResponsePtrOutput)
}

// The FQDN to set for the SAP system
func (o OsSapConfigurationResponseOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsSapConfigurationResponse) *string { return v.SapFqdn }).(pulumi.StringPtrOutput)
}

type OsSapConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (OsSapConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsSapConfigurationResponse)(nil)).Elem()
}

func (o OsSapConfigurationResponsePtrOutput) ToOsSapConfigurationResponsePtrOutput() OsSapConfigurationResponsePtrOutput {
	return o
}

func (o OsSapConfigurationResponsePtrOutput) ToOsSapConfigurationResponsePtrOutputWithContext(ctx context.Context) OsSapConfigurationResponsePtrOutput {
	return o
}

func (o OsSapConfigurationResponsePtrOutput) Elem() OsSapConfigurationResponseOutput {
	return o.ApplyT(func(v *OsSapConfigurationResponse) OsSapConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret OsSapConfigurationResponse
		return ret
	}).(OsSapConfigurationResponseOutput)
}

// The url and storage account ID where deployer VM packages are uploaded
func (o OsSapConfigurationResponsePtrOutput) DeployerVmPackages() DeployerVmPackagesResponsePtrOutput {
	return o.ApplyT(func(v *OsSapConfigurationResponse) *DeployerVmPackagesResponse {
		if v == nil {
			return nil
		}
		return v.DeployerVmPackages
	}).(DeployerVmPackagesResponsePtrOutput)
}

// The FQDN to set for the SAP system
func (o OsSapConfigurationResponsePtrOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsSapConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapFqdn
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstanceProperties struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// PrometheusHaClusterProviderInstancePropertiesInput is an input type that accepts PrometheusHaClusterProviderInstancePropertiesArgs and PrometheusHaClusterProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `PrometheusHaClusterProviderInstancePropertiesInput` via:
//
//	PrometheusHaClusterProviderInstancePropertiesArgs{...}
type PrometheusHaClusterProviderInstancePropertiesInput interface {
	pulumi.Input

	ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput
	ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(context.Context) PrometheusHaClusterProviderInstancePropertiesOutput
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesArgs struct {
	// Gets or sets the clusterName.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl pulumi.StringPtrInput `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid pulumi.StringPtrInput `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (PrometheusHaClusterProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesOutput)
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesOutput).ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// PrometheusHaClusterProviderInstancePropertiesPtrInput is an input type that accepts PrometheusHaClusterProviderInstancePropertiesArgs, PrometheusHaClusterProviderInstancePropertiesPtr and PrometheusHaClusterProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `PrometheusHaClusterProviderInstancePropertiesPtrInput` via:
//
//	        PrometheusHaClusterProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type PrometheusHaClusterProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput
	ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput
}

type prometheusHaClusterProviderInstancePropertiesPtrType PrometheusHaClusterProviderInstancePropertiesArgs

func PrometheusHaClusterProviderInstancePropertiesPtr(v *PrometheusHaClusterProviderInstancePropertiesArgs) PrometheusHaClusterProviderInstancePropertiesPtrInput {
	return (*prometheusHaClusterProviderInstancePropertiesPtrType)(v)
}

func (*prometheusHaClusterProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (i *prometheusHaClusterProviderInstancePropertiesPtrType) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *prometheusHaClusterProviderInstancePropertiesPtrType) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrometheusHaClusterProviderInstanceProperties) *PrometheusHaClusterProviderInstanceProperties {
		return &v
	}).(PrometheusHaClusterProviderInstancePropertiesPtrOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusHaClusterProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Elem() PrometheusHaClusterProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) PrometheusHaClusterProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret PrometheusHaClusterProviderInstanceProperties
		return ret
	}).(PrometheusHaClusterProviderInstancePropertiesOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Sid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesResponse struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ToPrometheusHaClusterProviderInstancePropertiesResponseOutput() PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ToPrometheusHaClusterProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ToPrometheusHaClusterProviderInstancePropertiesResponsePtrOutput() PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ToPrometheusHaClusterProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Elem() PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) PrometheusHaClusterProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrometheusHaClusterProviderInstancePropertiesResponse
		return ret
	}).(PrometheusHaClusterProviderInstancePropertiesResponseOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstanceProperties struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// PrometheusOSProviderInstancePropertiesInput is an input type that accepts PrometheusOSProviderInstancePropertiesArgs and PrometheusOSProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `PrometheusOSProviderInstancePropertiesInput` via:
//
//	PrometheusOSProviderInstancePropertiesArgs{...}
type PrometheusOSProviderInstancePropertiesInput interface {
	pulumi.Input

	ToPrometheusOSProviderInstancePropertiesOutput() PrometheusOSProviderInstancePropertiesOutput
	ToPrometheusOSProviderInstancePropertiesOutputWithContext(context.Context) PrometheusOSProviderInstancePropertiesOutput
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstancePropertiesArgs struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl pulumi.StringPtrInput `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (PrometheusOSProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOSProviderInstanceProperties)(nil)).Elem()
}

func (i PrometheusOSProviderInstancePropertiesArgs) ToPrometheusOSProviderInstancePropertiesOutput() PrometheusOSProviderInstancePropertiesOutput {
	return i.ToPrometheusOSProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i PrometheusOSProviderInstancePropertiesArgs) ToPrometheusOSProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOSProviderInstancePropertiesOutput)
}

func (i PrometheusOSProviderInstancePropertiesArgs) ToPrometheusOSProviderInstancePropertiesPtrOutput() PrometheusOSProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i PrometheusOSProviderInstancePropertiesArgs) ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOSProviderInstancePropertiesOutput).ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// PrometheusOSProviderInstancePropertiesPtrInput is an input type that accepts PrometheusOSProviderInstancePropertiesArgs, PrometheusOSProviderInstancePropertiesPtr and PrometheusOSProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `PrometheusOSProviderInstancePropertiesPtrInput` via:
//
//	        PrometheusOSProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type PrometheusOSProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToPrometheusOSProviderInstancePropertiesPtrOutput() PrometheusOSProviderInstancePropertiesPtrOutput
	ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(context.Context) PrometheusOSProviderInstancePropertiesPtrOutput
}

type prometheusOSProviderInstancePropertiesPtrType PrometheusOSProviderInstancePropertiesArgs

func PrometheusOSProviderInstancePropertiesPtr(v *PrometheusOSProviderInstancePropertiesArgs) PrometheusOSProviderInstancePropertiesPtrInput {
	return (*prometheusOSProviderInstancePropertiesPtrType)(v)
}

func (*prometheusOSProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOSProviderInstanceProperties)(nil)).Elem()
}

func (i *prometheusOSProviderInstancePropertiesPtrType) ToPrometheusOSProviderInstancePropertiesPtrOutput() PrometheusOSProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *prometheusOSProviderInstancePropertiesPtrType) ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOSProviderInstancePropertiesPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (PrometheusOSProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOSProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusOSProviderInstancePropertiesOutput) ToPrometheusOSProviderInstancePropertiesOutput() PrometheusOSProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesOutput) ToPrometheusOSProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesOutput) ToPrometheusOSProviderInstancePropertiesPtrOutput() PrometheusOSProviderInstancePropertiesPtrOutput {
	return o.ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o PrometheusOSProviderInstancePropertiesOutput) ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrometheusOSProviderInstanceProperties) *PrometheusOSProviderInstanceProperties {
		return &v
	}).(PrometheusOSProviderInstancePropertiesPtrOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOSProviderInstancePropertiesOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstanceProperties) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOSProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOSProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOSProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOSProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusOSProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrometheusOSProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOSProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusOSProviderInstancePropertiesPtrOutput) ToPrometheusOSProviderInstancePropertiesPtrOutput() PrometheusOSProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesPtrOutput) ToPrometheusOSProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesPtrOutput) Elem() PrometheusOSProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) PrometheusOSProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret PrometheusOSProviderInstanceProperties
		return ret
	}).(PrometheusOSProviderInstancePropertiesOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOSProviderInstancePropertiesPtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOSProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOSProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOSProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOSProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstancePropertiesResponse struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrometheusOSProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOSProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusOSProviderInstancePropertiesResponseOutput) ToPrometheusOSProviderInstancePropertiesResponseOutput() PrometheusOSProviderInstancePropertiesResponseOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesResponseOutput) ToPrometheusOSProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesResponseOutput {
	return o
}

// URL of the Node Exporter endpoint
func (o PrometheusOSProviderInstancePropertiesResponseOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstancePropertiesResponse) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOSProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOSProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOSProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOSProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOSProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusOSProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrometheusOSProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOSProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) ToPrometheusOSProviderInstancePropertiesResponsePtrOutput() PrometheusOSProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) ToPrometheusOSProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) PrometheusOSProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) Elem() PrometheusOSProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) PrometheusOSProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrometheusOSProviderInstancePropertiesResponse
		return ret
	}).(PrometheusOSProviderInstancePropertiesResponseOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOSProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOSProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Defines the provider instance errors.
type ProviderInstancePropertiesResponseErrors struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Defines the provider instance errors.
type ProviderInstancePropertiesResponseErrorsOutput struct{ *pulumi.OutputState }

func (ProviderInstancePropertiesResponseErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderInstancePropertiesResponseErrors)(nil)).Elem()
}

func (o ProviderInstancePropertiesResponseErrorsOutput) ToProviderInstancePropertiesResponseErrorsOutput() ProviderInstancePropertiesResponseErrorsOutput {
	return o
}

func (o ProviderInstancePropertiesResponseErrorsOutput) ToProviderInstancePropertiesResponseErrorsOutputWithContext(ctx context.Context) ProviderInstancePropertiesResponseErrorsOutput {
	return o
}

// Server-defined set of error codes.
func (o ProviderInstancePropertiesResponseErrorsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Target }).(pulumi.StringOutput)
}

// Retention duration.
type RetentionDuration struct {
	// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
	// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
	Count *int `pulumi:"count"`
	// Retention duration type of retention policy.
	DurationType *string `pulumi:"durationType"`
}

// RetentionDurationInput is an input type that accepts RetentionDurationArgs and RetentionDurationOutput values.
// You can construct a concrete instance of `RetentionDurationInput` via:
//
//	RetentionDurationArgs{...}
type RetentionDurationInput interface {
	pulumi.Input

	ToRetentionDurationOutput() RetentionDurationOutput
	ToRetentionDurationOutputWithContext(context.Context) RetentionDurationOutput
}

// Retention duration.
type RetentionDurationArgs struct {
	// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
	// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Retention duration type of retention policy.
	DurationType pulumi.StringPtrInput `pulumi:"durationType"`
}

func (RetentionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionDuration)(nil)).Elem()
}

func (i RetentionDurationArgs) ToRetentionDurationOutput() RetentionDurationOutput {
	return i.ToRetentionDurationOutputWithContext(context.Background())
}

func (i RetentionDurationArgs) ToRetentionDurationOutputWithContext(ctx context.Context) RetentionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionDurationOutput)
}

func (i RetentionDurationArgs) ToRetentionDurationPtrOutput() RetentionDurationPtrOutput {
	return i.ToRetentionDurationPtrOutputWithContext(context.Background())
}

func (i RetentionDurationArgs) ToRetentionDurationPtrOutputWithContext(ctx context.Context) RetentionDurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionDurationOutput).ToRetentionDurationPtrOutputWithContext(ctx)
}

// RetentionDurationPtrInput is an input type that accepts RetentionDurationArgs, RetentionDurationPtr and RetentionDurationPtrOutput values.
// You can construct a concrete instance of `RetentionDurationPtrInput` via:
//
//	        RetentionDurationArgs{...}
//
//	or:
//
//	        nil
type RetentionDurationPtrInput interface {
	pulumi.Input

	ToRetentionDurationPtrOutput() RetentionDurationPtrOutput
	ToRetentionDurationPtrOutputWithContext(context.Context) RetentionDurationPtrOutput
}

type retentionDurationPtrType RetentionDurationArgs

func RetentionDurationPtr(v *RetentionDurationArgs) RetentionDurationPtrInput {
	return (*retentionDurationPtrType)(v)
}

func (*retentionDurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionDuration)(nil)).Elem()
}

func (i *retentionDurationPtrType) ToRetentionDurationPtrOutput() RetentionDurationPtrOutput {
	return i.ToRetentionDurationPtrOutputWithContext(context.Background())
}

func (i *retentionDurationPtrType) ToRetentionDurationPtrOutputWithContext(ctx context.Context) RetentionDurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionDurationPtrOutput)
}

// Retention duration.
type RetentionDurationOutput struct{ *pulumi.OutputState }

func (RetentionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionDuration)(nil)).Elem()
}

func (o RetentionDurationOutput) ToRetentionDurationOutput() RetentionDurationOutput {
	return o
}

func (o RetentionDurationOutput) ToRetentionDurationOutputWithContext(ctx context.Context) RetentionDurationOutput {
	return o
}

func (o RetentionDurationOutput) ToRetentionDurationPtrOutput() RetentionDurationPtrOutput {
	return o.ToRetentionDurationPtrOutputWithContext(context.Background())
}

func (o RetentionDurationOutput) ToRetentionDurationPtrOutputWithContext(ctx context.Context) RetentionDurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionDuration) *RetentionDuration {
		return &v
	}).(RetentionDurationPtrOutput)
}

// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
func (o RetentionDurationOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionDuration) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Retention duration type of retention policy.
func (o RetentionDurationOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionDuration) *string { return v.DurationType }).(pulumi.StringPtrOutput)
}

type RetentionDurationPtrOutput struct{ *pulumi.OutputState }

func (RetentionDurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionDuration)(nil)).Elem()
}

func (o RetentionDurationPtrOutput) ToRetentionDurationPtrOutput() RetentionDurationPtrOutput {
	return o
}

func (o RetentionDurationPtrOutput) ToRetentionDurationPtrOutputWithContext(ctx context.Context) RetentionDurationPtrOutput {
	return o
}

func (o RetentionDurationPtrOutput) Elem() RetentionDurationOutput {
	return o.ApplyT(func(v *RetentionDuration) RetentionDuration {
		if v != nil {
			return *v
		}
		var ret RetentionDuration
		return ret
	}).(RetentionDurationOutput)
}

// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
func (o RetentionDurationPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionDuration) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Retention duration type of retention policy.
func (o RetentionDurationPtrOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionDuration) *string {
		if v == nil {
			return nil
		}
		return v.DurationType
	}).(pulumi.StringPtrOutput)
}

// Retention duration.
type RetentionDurationResponse struct {
	// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
	// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
	Count *int `pulumi:"count"`
	// Retention duration type of retention policy.
	DurationType *string `pulumi:"durationType"`
}

// Retention duration.
type RetentionDurationResponseOutput struct{ *pulumi.OutputState }

func (RetentionDurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionDurationResponse)(nil)).Elem()
}

func (o RetentionDurationResponseOutput) ToRetentionDurationResponseOutput() RetentionDurationResponseOutput {
	return o
}

func (o RetentionDurationResponseOutput) ToRetentionDurationResponseOutputWithContext(ctx context.Context) RetentionDurationResponseOutput {
	return o
}

// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
func (o RetentionDurationResponseOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetentionDurationResponse) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Retention duration type of retention policy.
func (o RetentionDurationResponseOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetentionDurationResponse) *string { return v.DurationType }).(pulumi.StringPtrOutput)
}

type RetentionDurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionDurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionDurationResponse)(nil)).Elem()
}

func (o RetentionDurationResponsePtrOutput) ToRetentionDurationResponsePtrOutput() RetentionDurationResponsePtrOutput {
	return o
}

func (o RetentionDurationResponsePtrOutput) ToRetentionDurationResponsePtrOutputWithContext(ctx context.Context) RetentionDurationResponsePtrOutput {
	return o
}

func (o RetentionDurationResponsePtrOutput) Elem() RetentionDurationResponseOutput {
	return o.ApplyT(func(v *RetentionDurationResponse) RetentionDurationResponse {
		if v != nil {
			return *v
		}
		var ret RetentionDurationResponse
		return ret
	}).(RetentionDurationResponseOutput)
}

// Count of duration types. Retention duration is obtained by the counting the duration type Count times.
// For example, when Count = 3 and DurationType = Weeks, retention duration will be three weeks.
func (o RetentionDurationResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionDurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Retention duration type of retention policy.
func (o RetentionDurationResponsePtrOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetentionDurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DurationType
	}).(pulumi.StringPtrOutput)
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponse struct {
	// The zone A.
	ZoneA *float64 `pulumi:"zoneA"`
	// The zone B.
	ZoneB *float64 `pulumi:"zoneB"`
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponseOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutput() SAPAvailabilityZonePairResponseOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseOutput {
	return o
}

// The zone A.
func (o SAPAvailabilityZonePairResponseOutput) ZoneA() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneA }).(pulumi.Float64PtrOutput)
}

// The zone B.
func (o SAPAvailabilityZonePairResponseOutput) ZoneB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneB }).(pulumi.Float64PtrOutput)
}

type SAPAvailabilityZonePairResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutput() SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) Index(i pulumi.IntInput) SAPAvailabilityZonePairResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPAvailabilityZonePairResponse {
		return vs[0].([]SAPAvailabilityZonePairResponse)[vs[1].(int)]
	}).(SAPAvailabilityZonePairResponseOutput)
}

// The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
type SAPDiskConfigurationResponse struct {
	// The recommended disk details for a given VM Sku.
	RecommendedConfiguration *DiskVolumeConfigurationResponse `pulumi:"recommendedConfiguration"`
	// The list of supported disks for a given VM Sku.
	SupportedConfigurations []DiskDetailsResponse `pulumi:"supportedConfigurations"`
}

// The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
type SAPDiskConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutput() SAPDiskConfigurationResponseOutput {
	return o
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseOutput {
	return o
}

// The recommended disk details for a given VM Sku.
func (o SAPDiskConfigurationResponseOutput) RecommendedConfiguration() DiskVolumeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *DiskVolumeConfigurationResponse {
		return v.RecommendedConfiguration
	}).(DiskVolumeConfigurationResponsePtrOutput)
}

// The list of supported disks for a given VM Sku.
func (o SAPDiskConfigurationResponseOutput) SupportedConfigurations() DiskDetailsResponseArrayOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) []DiskDetailsResponse { return v.SupportedConfigurations }).(DiskDetailsResponseArrayOutput)
}

type SAPDiskConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseMapOutput) ToSAPDiskConfigurationResponseMapOutput() SAPDiskConfigurationResponseMapOutput {
	return o
}

func (o SAPDiskConfigurationResponseMapOutput) ToSAPDiskConfigurationResponseMapOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseMapOutput {
	return o
}

func (o SAPDiskConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) SAPDiskConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SAPDiskConfigurationResponse {
		return vs[0].(map[string]SAPDiskConfigurationResponse)[vs[1].(string)]
	}).(SAPDiskConfigurationResponseOutput)
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfiguration struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfiguration `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The SAP software installation Type.
	// Expected value is 'SAPInstallWithoutOSConfig'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
}

// SAPInstallWithoutOSConfigSoftwareConfigurationInput is an input type that accepts SAPInstallWithoutOSConfigSoftwareConfigurationArgs and SAPInstallWithoutOSConfigSoftwareConfigurationOutput values.
// You can construct a concrete instance of `SAPInstallWithoutOSConfigSoftwareConfigurationInput` via:
//
//	SAPInstallWithoutOSConfigSoftwareConfigurationArgs{...}
type SAPInstallWithoutOSConfigSoftwareConfigurationInput interface {
	pulumi.Input

	ToSAPInstallWithoutOSConfigSoftwareConfigurationOutput() SAPInstallWithoutOSConfigSoftwareConfigurationOutput
	ToSAPInstallWithoutOSConfigSoftwareConfigurationOutputWithContext(context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationOutput
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfigurationArgs struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl pulumi.StringInput `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration HighAvailabilitySoftwareConfigurationPtrInput `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId pulumi.StringInput `pulumi:"sapBitsStorageAccountId"`
	// The SAP software installation Type.
	// Expected value is 'SAPInstallWithoutOSConfig'.
	SoftwareInstallationType pulumi.StringInput `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion pulumi.StringInput `pulumi:"softwareVersion"`
}

func (SAPInstallWithoutOSConfigSoftwareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPInstallWithoutOSConfigSoftwareConfiguration)(nil)).Elem()
}

func (i SAPInstallWithoutOSConfigSoftwareConfigurationArgs) ToSAPInstallWithoutOSConfigSoftwareConfigurationOutput() SAPInstallWithoutOSConfigSoftwareConfigurationOutput {
	return i.ToSAPInstallWithoutOSConfigSoftwareConfigurationOutputWithContext(context.Background())
}

func (i SAPInstallWithoutOSConfigSoftwareConfigurationArgs) ToSAPInstallWithoutOSConfigSoftwareConfigurationOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SAPInstallWithoutOSConfigSoftwareConfigurationOutput)
}

func (i SAPInstallWithoutOSConfigSoftwareConfigurationArgs) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return i.ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i SAPInstallWithoutOSConfigSoftwareConfigurationArgs) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SAPInstallWithoutOSConfigSoftwareConfigurationOutput).ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(ctx)
}

// SAPInstallWithoutOSConfigSoftwareConfigurationPtrInput is an input type that accepts SAPInstallWithoutOSConfigSoftwareConfigurationArgs, SAPInstallWithoutOSConfigSoftwareConfigurationPtr and SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput values.
// You can construct a concrete instance of `SAPInstallWithoutOSConfigSoftwareConfigurationPtrInput` via:
//
//	        SAPInstallWithoutOSConfigSoftwareConfigurationArgs{...}
//
//	or:
//
//	        nil
type SAPInstallWithoutOSConfigSoftwareConfigurationPtrInput interface {
	pulumi.Input

	ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput
	ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput
}

type sapinstallWithoutOSConfigSoftwareConfigurationPtrType SAPInstallWithoutOSConfigSoftwareConfigurationArgs

func SAPInstallWithoutOSConfigSoftwareConfigurationPtr(v *SAPInstallWithoutOSConfigSoftwareConfigurationArgs) SAPInstallWithoutOSConfigSoftwareConfigurationPtrInput {
	return (*sapinstallWithoutOSConfigSoftwareConfigurationPtrType)(v)
}

func (*sapinstallWithoutOSConfigSoftwareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPInstallWithoutOSConfigSoftwareConfiguration)(nil)).Elem()
}

func (i *sapinstallWithoutOSConfigSoftwareConfigurationPtrType) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return i.ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i *sapinstallWithoutOSConfigSoftwareConfigurationPtrType) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput)
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfigurationOutput struct{ *pulumi.OutputState }

func (SAPInstallWithoutOSConfigSoftwareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPInstallWithoutOSConfigSoftwareConfiguration)(nil)).Elem()
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationOutput() SAPInstallWithoutOSConfigSoftwareConfigurationOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return o.ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPInstallWithoutOSConfigSoftwareConfiguration) *SAPInstallWithoutOSConfigSoftwareConfiguration {
		return &v
	}).(SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) BomUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfiguration) string { return v.BomUrl }).(pulumi.StringOutput)
}

// Gets or sets the HA software configuration.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfiguration) *HighAvailabilitySoftwareConfiguration {
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// The SAP bits storage account id.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) SapBitsStorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfiguration) string { return v.SapBitsStorageAccountId }).(pulumi.StringOutput)
}

// The SAP software installation Type.
// Expected value is 'SAPInstallWithoutOSConfig'.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfiguration) string { return v.SoftwareInstallationType }).(pulumi.StringOutput)
}

// The software version to install.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfiguration) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

type SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPInstallWithoutOSConfigSoftwareConfiguration)(nil)).Elem()
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationPtrOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) Elem() SAPInstallWithoutOSConfigSoftwareConfigurationOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) SAPInstallWithoutOSConfigSoftwareConfiguration {
		if v != nil {
			return *v
		}
		var ret SAPInstallWithoutOSConfigSoftwareConfiguration
		return ret
	}).(SAPInstallWithoutOSConfigSoftwareConfigurationOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) BomUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BomUrl
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) *HighAvailabilitySoftwareConfiguration {
		if v == nil {
			return nil
		}
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// The SAP bits storage account id.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) SapBitsStorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SapBitsStorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'SAPInstallWithoutOSConfig'.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// The software version to install.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareVersion
	}).(pulumi.StringPtrOutput)
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfigurationResponse struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfigurationResponse `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The SAP software installation Type.
	// Expected value is 'SAPInstallWithoutOSConfig'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPInstallWithoutOSConfigSoftwareConfigurationResponse)(nil)).Elem()
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput() SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationResponseOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput {
	return o
}

// The URL to the SAP Build of Materials(BOM) file.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) BomUrl() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfigurationResponse) string { return v.BomUrl }).(pulumi.StringOutput)
}

// Gets or sets the HA software configuration.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *HighAvailabilitySoftwareConfigurationResponse {
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationResponsePtrOutput)
}

// The SAP bits storage account id.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) SapBitsStorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfigurationResponse) string {
		return v.SapBitsStorageAccountId
	}).(pulumi.StringOutput)
}

// The SAP software installation Type.
// Expected value is 'SAPInstallWithoutOSConfig'.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfigurationResponse) string {
		return v.SoftwareInstallationType
	}).(pulumi.StringOutput)
}

// The software version to install.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SAPInstallWithoutOSConfigSoftwareConfigurationResponse) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

type SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPInstallWithoutOSConfigSoftwareConfigurationResponse)(nil)).Elem()
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput() SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) ToSAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutputWithContext(ctx context.Context) SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) Elem() SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) SAPInstallWithoutOSConfigSoftwareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SAPInstallWithoutOSConfigSoftwareConfigurationResponse
		return ret
	}).(SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) BomUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BomUrl
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *HighAvailabilitySoftwareConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationResponsePtrOutput)
}

// The SAP bits storage account id.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) SapBitsStorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SapBitsStorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'SAPInstallWithoutOSConfig'.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// The software version to install.
func (o SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SAPInstallWithoutOSConfigSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareVersion
	}).(pulumi.StringPtrOutput)
}

// An error response from the SAP migrate resources.
type SAPMigrateErrorResponse struct {
	// Service specific error code which serves as the substatus for the HTTP error code.
	Code string `pulumi:"code"`
	// Internal error details.
	Details []ErrorDefinitionResponse `pulumi:"details"`
	// Description of the error.
	Message string `pulumi:"message"`
	// Description of the recommendation.
	Recommendation string `pulumi:"recommendation"`
}

// An error response from the SAP migrate resources.
type SAPMigrateErrorResponseOutput struct{ *pulumi.OutputState }

func (SAPMigrateErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPMigrateErrorResponse)(nil)).Elem()
}

func (o SAPMigrateErrorResponseOutput) ToSAPMigrateErrorResponseOutput() SAPMigrateErrorResponseOutput {
	return o
}

func (o SAPMigrateErrorResponseOutput) ToSAPMigrateErrorResponseOutputWithContext(ctx context.Context) SAPMigrateErrorResponseOutput {
	return o
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o SAPMigrateErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v SAPMigrateErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Internal error details.
func (o SAPMigrateErrorResponseOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v SAPMigrateErrorResponse) []ErrorDefinitionResponse { return v.Details }).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o SAPMigrateErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v SAPMigrateErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Description of the recommendation.
func (o SAPMigrateErrorResponseOutput) Recommendation() pulumi.StringOutput {
	return o.ApplyT(func(v SAPMigrateErrorResponse) string { return v.Recommendation }).(pulumi.StringOutput)
}

// The SAP supported SKU.
type SAPSupportedSkuResponse struct {
	// True if the Sku is certified for App server in the SAP system.
	IsAppServerCertified *bool `pulumi:"isAppServerCertified"`
	// True if the Sku is certified for Database server in the SAP system.
	IsDatabaseCertified *bool `pulumi:"isDatabaseCertified"`
	// The VM Sku.
	VmSku *string `pulumi:"vmSku"`
}

// The SAP supported SKU.
type SAPSupportedSkuResponseOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutput() SAPSupportedSkuResponseOutput {
	return o
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutputWithContext(ctx context.Context) SAPSupportedSkuResponseOutput {
	return o
}

// True if the Sku is certified for App server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsAppServerCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsAppServerCertified }).(pulumi.BoolPtrOutput)
}

// True if the Sku is certified for Database server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsDatabaseCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsDatabaseCertified }).(pulumi.BoolPtrOutput)
}

// The VM Sku.
func (o SAPSupportedSkuResponseOutput) VmSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *string { return v.VmSku }).(pulumi.StringPtrOutput)
}

type SAPSupportedSkuResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutput() SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutputWithContext(ctx context.Context) SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) Index(i pulumi.IntInput) SAPSupportedSkuResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPSupportedSkuResponse {
		return vs[0].([]SAPSupportedSkuResponse)[vs[1].(int)]
	}).(SAPSupportedSkuResponseOutput)
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponse struct {
	// The Virtual Instance for SAP error body.
	Properties *ErrorDefinitionResponse `pulumi:"properties"`
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponseOutput struct{ *pulumi.OutputState }

func (SAPVirtualInstanceErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPVirtualInstanceErrorResponse)(nil)).Elem()
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutput() SAPVirtualInstanceErrorResponseOutput {
	return o
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutputWithContext(ctx context.Context) SAPVirtualInstanceErrorResponseOutput {
	return o
}

// The Virtual Instance for SAP error body.
func (o SAPVirtualInstanceErrorResponseOutput) Properties() ErrorDefinitionResponsePtrOutput {
	return o.ApplyT(func(v SAPVirtualInstanceErrorResponse) *ErrorDefinitionResponse { return v.Properties }).(ErrorDefinitionResponsePtrOutput)
}

// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
type SSLConfiguration struct {
	// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslCryptoProvider *string `pulumi:"sslCryptoProvider"`
	// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslKeyStore *string `pulumi:"sslKeyStore"`
	// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslTrustStore *string `pulumi:"sslTrustStore"`
}

// SSLConfigurationInput is an input type that accepts SSLConfigurationArgs and SSLConfigurationOutput values.
// You can construct a concrete instance of `SSLConfigurationInput` via:
//
//	SSLConfigurationArgs{...}
type SSLConfigurationInput interface {
	pulumi.Input

	ToSSLConfigurationOutput() SSLConfigurationOutput
	ToSSLConfigurationOutputWithContext(context.Context) SSLConfigurationOutput
}

// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
type SSLConfigurationArgs struct {
	// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslCryptoProvider pulumi.StringPtrInput `pulumi:"sslCryptoProvider"`
	// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
	SslHostNameInCertificate pulumi.StringPtrInput `pulumi:"sslHostNameInCertificate"`
	// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslKeyStore pulumi.StringPtrInput `pulumi:"sslKeyStore"`
	// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslTrustStore pulumi.StringPtrInput `pulumi:"sslTrustStore"`
}

func (SSLConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLConfiguration)(nil)).Elem()
}

func (i SSLConfigurationArgs) ToSSLConfigurationOutput() SSLConfigurationOutput {
	return i.ToSSLConfigurationOutputWithContext(context.Background())
}

func (i SSLConfigurationArgs) ToSSLConfigurationOutputWithContext(ctx context.Context) SSLConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLConfigurationOutput)
}

func (i SSLConfigurationArgs) ToSSLConfigurationPtrOutput() SSLConfigurationPtrOutput {
	return i.ToSSLConfigurationPtrOutputWithContext(context.Background())
}

func (i SSLConfigurationArgs) ToSSLConfigurationPtrOutputWithContext(ctx context.Context) SSLConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLConfigurationOutput).ToSSLConfigurationPtrOutputWithContext(ctx)
}

// SSLConfigurationPtrInput is an input type that accepts SSLConfigurationArgs, SSLConfigurationPtr and SSLConfigurationPtrOutput values.
// You can construct a concrete instance of `SSLConfigurationPtrInput` via:
//
//	        SSLConfigurationArgs{...}
//
//	or:
//
//	        nil
type SSLConfigurationPtrInput interface {
	pulumi.Input

	ToSSLConfigurationPtrOutput() SSLConfigurationPtrOutput
	ToSSLConfigurationPtrOutputWithContext(context.Context) SSLConfigurationPtrOutput
}

type sslconfigurationPtrType SSLConfigurationArgs

func SSLConfigurationPtr(v *SSLConfigurationArgs) SSLConfigurationPtrInput {
	return (*sslconfigurationPtrType)(v)
}

func (*sslconfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLConfiguration)(nil)).Elem()
}

func (i *sslconfigurationPtrType) ToSSLConfigurationPtrOutput() SSLConfigurationPtrOutput {
	return i.ToSSLConfigurationPtrOutputWithContext(context.Background())
}

func (i *sslconfigurationPtrType) ToSSLConfigurationPtrOutputWithContext(ctx context.Context) SSLConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLConfigurationPtrOutput)
}

// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
type SSLConfigurationOutput struct{ *pulumi.OutputState }

func (SSLConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLConfiguration)(nil)).Elem()
}

func (o SSLConfigurationOutput) ToSSLConfigurationOutput() SSLConfigurationOutput {
	return o
}

func (o SSLConfigurationOutput) ToSSLConfigurationOutputWithContext(ctx context.Context) SSLConfigurationOutput {
	return o
}

func (o SSLConfigurationOutput) ToSSLConfigurationPtrOutput() SSLConfigurationPtrOutput {
	return o.ToSSLConfigurationPtrOutputWithContext(context.Background())
}

func (o SSLConfigurationOutput) ToSSLConfigurationPtrOutputWithContext(ctx context.Context) SSLConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SSLConfiguration) *SSLConfiguration {
		return &v
	}).(SSLConfigurationPtrOutput)
}

// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationOutput) SslCryptoProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfiguration) *string { return v.SslCryptoProvider }).(pulumi.StringPtrOutput)
}

// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
func (o SSLConfigurationOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfiguration) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationOutput) SslKeyStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfiguration) *string { return v.SslKeyStore }).(pulumi.StringPtrOutput)
}

// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationOutput) SslTrustStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfiguration) *string { return v.SslTrustStore }).(pulumi.StringPtrOutput)
}

type SSLConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SSLConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLConfiguration)(nil)).Elem()
}

func (o SSLConfigurationPtrOutput) ToSSLConfigurationPtrOutput() SSLConfigurationPtrOutput {
	return o
}

func (o SSLConfigurationPtrOutput) ToSSLConfigurationPtrOutputWithContext(ctx context.Context) SSLConfigurationPtrOutput {
	return o
}

func (o SSLConfigurationPtrOutput) Elem() SSLConfigurationOutput {
	return o.ApplyT(func(v *SSLConfiguration) SSLConfiguration {
		if v != nil {
			return *v
		}
		var ret SSLConfiguration
		return ret
	}).(SSLConfigurationOutput)
}

// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationPtrOutput) SslCryptoProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslCryptoProvider
	}).(pulumi.StringPtrOutput)
}

// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
func (o SSLConfigurationPtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationPtrOutput) SslKeyStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslKeyStore
	}).(pulumi.StringPtrOutput)
}

// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationPtrOutput) SslTrustStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslTrustStore
	}).(pulumi.StringPtrOutput)
}

// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
type SSLConfigurationResponse struct {
	// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslCryptoProvider *string `pulumi:"sslCryptoProvider"`
	// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslKeyStore *string `pulumi:"sslKeyStore"`
	// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
	SslTrustStore *string `pulumi:"sslTrustStore"`
}

// Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need to specify these details if you have enabled secure communication for your HANA database.
type SSLConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SSLConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SSLConfigurationResponse)(nil)).Elem()
}

func (o SSLConfigurationResponseOutput) ToSSLConfigurationResponseOutput() SSLConfigurationResponseOutput {
	return o
}

func (o SSLConfigurationResponseOutput) ToSSLConfigurationResponseOutputWithContext(ctx context.Context) SSLConfigurationResponseOutput {
	return o
}

// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponseOutput) SslCryptoProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfigurationResponse) *string { return v.SslCryptoProvider }).(pulumi.StringPtrOutput)
}

// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
func (o SSLConfigurationResponseOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfigurationResponse) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponseOutput) SslKeyStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfigurationResponse) *string { return v.SslKeyStore }).(pulumi.StringPtrOutput)
}

// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponseOutput) SslTrustStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SSLConfigurationResponse) *string { return v.SslTrustStore }).(pulumi.StringPtrOutput)
}

type SSLConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SSLConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLConfigurationResponse)(nil)).Elem()
}

func (o SSLConfigurationResponsePtrOutput) ToSSLConfigurationResponsePtrOutput() SSLConfigurationResponsePtrOutput {
	return o
}

func (o SSLConfigurationResponsePtrOutput) ToSSLConfigurationResponsePtrOutputWithContext(ctx context.Context) SSLConfigurationResponsePtrOutput {
	return o
}

func (o SSLConfigurationResponsePtrOutput) Elem() SSLConfigurationResponseOutput {
	return o.ApplyT(func(v *SSLConfigurationResponse) SSLConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SSLConfigurationResponse
		return ret
	}).(SSLConfigurationResponseOutput)
}

// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponsePtrOutput) SslCryptoProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCryptoProvider
	}).(pulumi.StringPtrOutput)
}

// Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically determined by searching in the SSL certificate.
func (o SSLConfigurationResponsePtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponsePtrOutput) SslKeyStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslKeyStore
	}).(pulumi.StringPtrOutput)
}

// Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the configuration files.
func (o SSLConfigurationResponsePtrOutput) SslTrustStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslTrustStore
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholds struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// SapLandscapeMonitorMetricThresholdsInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArgs and SapLandscapeMonitorMetricThresholdsOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArgs{...}
type SapLandscapeMonitorMetricThresholdsInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput
	ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsOutput
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsArgs struct {
	// Gets or sets the threshold value for Green.
	Green pulumi.Float64PtrInput `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red pulumi.Float64PtrInput `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow pulumi.Float64PtrInput `pulumi:"yellow"`
}

func (SapLandscapeMonitorMetricThresholdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsOutput)
}

// SapLandscapeMonitorMetricThresholdsArrayInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArray and SapLandscapeMonitorMetricThresholdsArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsArrayInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArray{ SapLandscapeMonitorMetricThresholdsArgs{...} }
type SapLandscapeMonitorMetricThresholdsArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput
	ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput
}

type SapLandscapeMonitorMetricThresholdsArray []SapLandscapeMonitorMetricThresholdsInput

func (SapLandscapeMonitorMetricThresholdsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsArrayOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholds {
		return vs[0].([]SapLandscapeMonitorMetricThresholds)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponse struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutput() SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutput() SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholdsResponse {
		return vs[0].([]SapLandscapeMonitorMetricThresholdsResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsResponseOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGrouping struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMapping `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMapping `pulumi:"sapApplication"`
}

// SapLandscapeMonitorPropertiesGroupingInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs and SapLandscapeMonitorPropertiesGroupingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingInput` via:
//
//	SapLandscapeMonitorPropertiesGroupingArgs{...}
type SapLandscapeMonitorPropertiesGroupingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput
	ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingOutput
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingArgs struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape SapLandscapeMonitorSidMappingArrayInput `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication SapLandscapeMonitorSidMappingArrayInput `pulumi:"sapApplication"`
}

func (SapLandscapeMonitorPropertiesGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput)
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput).ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx)
}

// SapLandscapeMonitorPropertiesGroupingPtrInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs, SapLandscapeMonitorPropertiesGroupingPtr and SapLandscapeMonitorPropertiesGroupingPtrOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingPtrInput` via:
//
//	        SapLandscapeMonitorPropertiesGroupingArgs{...}
//
//	or:
//
//	        nil
type SapLandscapeMonitorPropertiesGroupingPtrInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput
	ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput
}

type sapLandscapeMonitorPropertiesGroupingPtrType SapLandscapeMonitorPropertiesGroupingArgs

func SapLandscapeMonitorPropertiesGroupingPtr(v *SapLandscapeMonitorPropertiesGroupingArgs) SapLandscapeMonitorPropertiesGroupingPtrInput {
	return (*sapLandscapeMonitorPropertiesGroupingPtrType)(v)
}

func (*sapLandscapeMonitorPropertiesGroupingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapLandscapeMonitorPropertiesGrouping) *SapLandscapeMonitorPropertiesGrouping {
		return &v
	}).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.Landscape }).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.SapApplication }).(SapLandscapeMonitorSidMappingArrayOutput)
}

type SapLandscapeMonitorPropertiesGroupingPtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Elem() SapLandscapeMonitorPropertiesGroupingOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) SapLandscapeMonitorPropertiesGrouping {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesGrouping
		return ret
	}).(SapLandscapeMonitorPropertiesGroupingOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesResponseGrouping struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMappingResponse `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMappingResponse `pulumi:"sapApplication"`
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesResponseGroupingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesResponseGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesResponseGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) ToSapLandscapeMonitorPropertiesResponseGroupingOutput() SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) ToSapLandscapeMonitorPropertiesResponseGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

type SapLandscapeMonitorPropertiesResponseGroupingPtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesResponseGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ToSapLandscapeMonitorPropertiesResponseGroupingPtrOutput() SapLandscapeMonitorPropertiesResponseGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ToSapLandscapeMonitorPropertiesResponseGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesResponseGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) Elem() SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) SapLandscapeMonitorPropertiesResponseGrouping {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesResponseGrouping
		return ret
	}).(SapLandscapeMonitorPropertiesResponseGroupingOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMapping struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// SapLandscapeMonitorSidMappingInput is an input type that accepts SapLandscapeMonitorSidMappingArgs and SapLandscapeMonitorSidMappingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingInput` via:
//
//	SapLandscapeMonitorSidMappingArgs{...}
type SapLandscapeMonitorSidMappingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput
	ToSapLandscapeMonitorSidMappingOutputWithContext(context.Context) SapLandscapeMonitorSidMappingOutput
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingArgs struct {
	// Gets or sets the name of the grouping.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid pulumi.StringArrayInput `pulumi:"topSid"`
}

func (SapLandscapeMonitorSidMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return i.ToSapLandscapeMonitorSidMappingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingOutput)
}

// SapLandscapeMonitorSidMappingArrayInput is an input type that accepts SapLandscapeMonitorSidMappingArray and SapLandscapeMonitorSidMappingArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingArrayInput` via:
//
//	SapLandscapeMonitorSidMappingArray{ SapLandscapeMonitorSidMappingArgs{...} }
type SapLandscapeMonitorSidMappingArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput
	ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Context) SapLandscapeMonitorSidMappingArrayOutput
}

type SapLandscapeMonitorSidMappingArray []SapLandscapeMonitorSidMappingInput

func (SapLandscapeMonitorSidMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return i.ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMapping {
		return vs[0].([]SapLandscapeMonitorSidMapping)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponse struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutput() SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingResponseOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutput() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMappingResponse {
		return vs[0].([]SapLandscapeMonitorSidMappingResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingResponseOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstanceProperties struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// SapNetWeaverProviderInstancePropertiesInput is an input type that accepts SapNetWeaverProviderInstancePropertiesArgs and SapNetWeaverProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `SapNetWeaverProviderInstancePropertiesInput` via:
//
//	SapNetWeaverProviderInstancePropertiesArgs{...}
type SapNetWeaverProviderInstancePropertiesInput interface {
	pulumi.Input

	ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput
	ToSapNetWeaverProviderInstancePropertiesOutputWithContext(context.Context) SapNetWeaverProviderInstancePropertiesOutput
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesArgs struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId pulumi.StringPtrInput `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries pulumi.StringArrayInput `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname pulumi.StringPtrInput `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr pulumi.StringPtrInput `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword pulumi.StringPtrInput `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri pulumi.StringPtrInput `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber pulumi.StringPtrInput `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername pulumi.StringPtrInput `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (SapNetWeaverProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesOutput)
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesOutput).ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// SapNetWeaverProviderInstancePropertiesPtrInput is an input type that accepts SapNetWeaverProviderInstancePropertiesArgs, SapNetWeaverProviderInstancePropertiesPtr and SapNetWeaverProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `SapNetWeaverProviderInstancePropertiesPtrInput` via:
//
//	        SapNetWeaverProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type SapNetWeaverProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput
	ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput
}

type sapNetWeaverProviderInstancePropertiesPtrType SapNetWeaverProviderInstancePropertiesArgs

func SapNetWeaverProviderInstancePropertiesPtr(v *SapNetWeaverProviderInstancePropertiesArgs) SapNetWeaverProviderInstancePropertiesPtrInput {
	return (*sapNetWeaverProviderInstancePropertiesPtrType)(v)
}

func (*sapNetWeaverProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (i *sapNetWeaverProviderInstancePropertiesPtrType) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *sapNetWeaverProviderInstancePropertiesPtrType) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesPtrOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapNetWeaverProviderInstanceProperties) *SapNetWeaverProviderInstanceProperties {
		return &v
	}).(SapNetWeaverProviderInstancePropertiesPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapClientId }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) []string { return v.SapHostFileEntries }).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapHostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapInstanceNr }).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPortNumber }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type SapNetWeaverProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) Elem() SapNetWeaverProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) SapNetWeaverProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret SapNetWeaverProviderInstanceProperties
		return ret
	}).(SapNetWeaverProviderInstancePropertiesOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapClientId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) []string {
		if v == nil {
			return nil
		}
		return v.SapHostFileEntries
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapHostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapInstanceNr
	}).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPortNumber
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesResponse struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ToSapNetWeaverProviderInstancePropertiesResponseOutput() SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ToSapNetWeaverProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapClientId }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) []string { return v.SapHostFileEntries }).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapHostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapInstanceNr }).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPortNumber }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type SapNetWeaverProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ToSapNetWeaverProviderInstancePropertiesResponsePtrOutput() SapNetWeaverProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ToSapNetWeaverProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) Elem() SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) SapNetWeaverProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret SapNetWeaverProviderInstancePropertiesResponse
		return ret
	}).(SapNetWeaverProviderInstancePropertiesResponseOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapClientId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.SapHostFileEntries
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapHostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapInstanceNr
	}).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPortNumber
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfiguration struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfiguration `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The FQDN to set for the SAP system during install.
	SapFqdn string `pulumi:"sapFqdn"`
	// The SAP software installation Type.
	// Expected value is 'ServiceInitiated'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The SSH private key.
	SshPrivateKey string `pulumi:"sshPrivateKey"`
}

// ServiceInitiatedSoftwareConfigurationInput is an input type that accepts ServiceInitiatedSoftwareConfigurationArgs and ServiceInitiatedSoftwareConfigurationOutput values.
// You can construct a concrete instance of `ServiceInitiatedSoftwareConfigurationInput` via:
//
//	ServiceInitiatedSoftwareConfigurationArgs{...}
type ServiceInitiatedSoftwareConfigurationInput interface {
	pulumi.Input

	ToServiceInitiatedSoftwareConfigurationOutput() ServiceInitiatedSoftwareConfigurationOutput
	ToServiceInitiatedSoftwareConfigurationOutputWithContext(context.Context) ServiceInitiatedSoftwareConfigurationOutput
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfigurationArgs struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl pulumi.StringInput `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration HighAvailabilitySoftwareConfigurationPtrInput `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId pulumi.StringInput `pulumi:"sapBitsStorageAccountId"`
	// The FQDN to set for the SAP system during install.
	SapFqdn pulumi.StringInput `pulumi:"sapFqdn"`
	// The SAP software installation Type.
	// Expected value is 'ServiceInitiated'.
	SoftwareInstallationType pulumi.StringInput `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion pulumi.StringInput `pulumi:"softwareVersion"`
	// The SSH private key.
	SshPrivateKey pulumi.StringInput `pulumi:"sshPrivateKey"`
}

func (ServiceInitiatedSoftwareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInitiatedSoftwareConfiguration)(nil)).Elem()
}

func (i ServiceInitiatedSoftwareConfigurationArgs) ToServiceInitiatedSoftwareConfigurationOutput() ServiceInitiatedSoftwareConfigurationOutput {
	return i.ToServiceInitiatedSoftwareConfigurationOutputWithContext(context.Background())
}

func (i ServiceInitiatedSoftwareConfigurationArgs) ToServiceInitiatedSoftwareConfigurationOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInitiatedSoftwareConfigurationOutput)
}

func (i ServiceInitiatedSoftwareConfigurationArgs) ToServiceInitiatedSoftwareConfigurationPtrOutput() ServiceInitiatedSoftwareConfigurationPtrOutput {
	return i.ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i ServiceInitiatedSoftwareConfigurationArgs) ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInitiatedSoftwareConfigurationOutput).ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(ctx)
}

// ServiceInitiatedSoftwareConfigurationPtrInput is an input type that accepts ServiceInitiatedSoftwareConfigurationArgs, ServiceInitiatedSoftwareConfigurationPtr and ServiceInitiatedSoftwareConfigurationPtrOutput values.
// You can construct a concrete instance of `ServiceInitiatedSoftwareConfigurationPtrInput` via:
//
//	        ServiceInitiatedSoftwareConfigurationArgs{...}
//
//	or:
//
//	        nil
type ServiceInitiatedSoftwareConfigurationPtrInput interface {
	pulumi.Input

	ToServiceInitiatedSoftwareConfigurationPtrOutput() ServiceInitiatedSoftwareConfigurationPtrOutput
	ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(context.Context) ServiceInitiatedSoftwareConfigurationPtrOutput
}

type serviceInitiatedSoftwareConfigurationPtrType ServiceInitiatedSoftwareConfigurationArgs

func ServiceInitiatedSoftwareConfigurationPtr(v *ServiceInitiatedSoftwareConfigurationArgs) ServiceInitiatedSoftwareConfigurationPtrInput {
	return (*serviceInitiatedSoftwareConfigurationPtrType)(v)
}

func (*serviceInitiatedSoftwareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceInitiatedSoftwareConfiguration)(nil)).Elem()
}

func (i *serviceInitiatedSoftwareConfigurationPtrType) ToServiceInitiatedSoftwareConfigurationPtrOutput() ServiceInitiatedSoftwareConfigurationPtrOutput {
	return i.ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (i *serviceInitiatedSoftwareConfigurationPtrType) ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceInitiatedSoftwareConfigurationPtrOutput)
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceInitiatedSoftwareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInitiatedSoftwareConfiguration)(nil)).Elem()
}

func (o ServiceInitiatedSoftwareConfigurationOutput) ToServiceInitiatedSoftwareConfigurationOutput() ServiceInitiatedSoftwareConfigurationOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationOutput) ToServiceInitiatedSoftwareConfigurationOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationOutput) ToServiceInitiatedSoftwareConfigurationPtrOutput() ServiceInitiatedSoftwareConfigurationPtrOutput {
	return o.ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(context.Background())
}

func (o ServiceInitiatedSoftwareConfigurationOutput) ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceInitiatedSoftwareConfiguration) *ServiceInitiatedSoftwareConfiguration {
		return &v
	}).(ServiceInitiatedSoftwareConfigurationPtrOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o ServiceInitiatedSoftwareConfigurationOutput) BomUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.BomUrl }).(pulumi.StringOutput)
}

// Gets or sets the HA software configuration.
func (o ServiceInitiatedSoftwareConfigurationOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) *HighAvailabilitySoftwareConfiguration {
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// The SAP bits storage account id.
func (o ServiceInitiatedSoftwareConfigurationOutput) SapBitsStorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.SapBitsStorageAccountId }).(pulumi.StringOutput)
}

// The FQDN to set for the SAP system during install.
func (o ServiceInitiatedSoftwareConfigurationOutput) SapFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.SapFqdn }).(pulumi.StringOutput)
}

// The SAP software installation Type.
// Expected value is 'ServiceInitiated'.
func (o ServiceInitiatedSoftwareConfigurationOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.SoftwareInstallationType }).(pulumi.StringOutput)
}

// The software version to install.
func (o ServiceInitiatedSoftwareConfigurationOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// The SSH private key.
func (o ServiceInitiatedSoftwareConfigurationOutput) SshPrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfiguration) string { return v.SshPrivateKey }).(pulumi.StringOutput)
}

type ServiceInitiatedSoftwareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ServiceInitiatedSoftwareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceInitiatedSoftwareConfiguration)(nil)).Elem()
}

func (o ServiceInitiatedSoftwareConfigurationPtrOutput) ToServiceInitiatedSoftwareConfigurationPtrOutput() ServiceInitiatedSoftwareConfigurationPtrOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationPtrOutput) ToServiceInitiatedSoftwareConfigurationPtrOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationPtrOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationPtrOutput) Elem() ServiceInitiatedSoftwareConfigurationOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) ServiceInitiatedSoftwareConfiguration {
		if v != nil {
			return *v
		}
		var ret ServiceInitiatedSoftwareConfiguration
		return ret
	}).(ServiceInitiatedSoftwareConfigurationOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) BomUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.BomUrl
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *HighAvailabilitySoftwareConfiguration {
		if v == nil {
			return nil
		}
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationPtrOutput)
}

// The SAP bits storage account id.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) SapBitsStorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SapBitsStorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The FQDN to set for the SAP system during install.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SapFqdn
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'ServiceInitiated'.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// The software version to install.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareVersion
	}).(pulumi.StringPtrOutput)
}

// The SSH private key.
func (o ServiceInitiatedSoftwareConfigurationPtrOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SshPrivateKey
	}).(pulumi.StringPtrOutput)
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfigurationResponse struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfigurationResponse `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The FQDN to set for the SAP system during install.
	SapFqdn string `pulumi:"sapFqdn"`
	// The SAP software installation Type.
	// Expected value is 'ServiceInitiated'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The SSH private key.
	SshPrivateKey string `pulumi:"sshPrivateKey"`
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ServiceInitiatedSoftwareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceInitiatedSoftwareConfigurationResponse)(nil)).Elem()
}

func (o ServiceInitiatedSoftwareConfigurationResponseOutput) ToServiceInitiatedSoftwareConfigurationResponseOutput() ServiceInitiatedSoftwareConfigurationResponseOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationResponseOutput) ToServiceInitiatedSoftwareConfigurationResponseOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationResponseOutput {
	return o
}

// The URL to the SAP Build of Materials(BOM) file.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) BomUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.BomUrl }).(pulumi.StringOutput)
}

// Gets or sets the HA software configuration.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) *HighAvailabilitySoftwareConfigurationResponse {
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationResponsePtrOutput)
}

// The SAP bits storage account id.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) SapBitsStorageAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.SapBitsStorageAccountId }).(pulumi.StringOutput)
}

// The FQDN to set for the SAP system during install.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) SapFqdn() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.SapFqdn }).(pulumi.StringOutput)
}

// The SAP software installation Type.
// Expected value is 'ServiceInitiated'.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) SoftwareInstallationType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.SoftwareInstallationType }).(pulumi.StringOutput)
}

// The software version to install.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) SoftwareVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.SoftwareVersion }).(pulumi.StringOutput)
}

// The SSH private key.
func (o ServiceInitiatedSoftwareConfigurationResponseOutput) SshPrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceInitiatedSoftwareConfigurationResponse) string { return v.SshPrivateKey }).(pulumi.StringOutput)
}

type ServiceInitiatedSoftwareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceInitiatedSoftwareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceInitiatedSoftwareConfigurationResponse)(nil)).Elem()
}

func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) ToServiceInitiatedSoftwareConfigurationResponsePtrOutput() ServiceInitiatedSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) ToServiceInitiatedSoftwareConfigurationResponsePtrOutputWithContext(ctx context.Context) ServiceInitiatedSoftwareConfigurationResponsePtrOutput {
	return o
}

func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) Elem() ServiceInitiatedSoftwareConfigurationResponseOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) ServiceInitiatedSoftwareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ServiceInitiatedSoftwareConfigurationResponse
		return ret
	}).(ServiceInitiatedSoftwareConfigurationResponseOutput)
}

// The URL to the SAP Build of Materials(BOM) file.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) BomUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BomUrl
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the HA software configuration.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) HighAvailabilitySoftwareConfiguration() HighAvailabilitySoftwareConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *HighAvailabilitySoftwareConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.HighAvailabilitySoftwareConfiguration
	}).(HighAvailabilitySoftwareConfigurationResponsePtrOutput)
}

// The SAP bits storage account id.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) SapBitsStorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SapBitsStorageAccountId
	}).(pulumi.StringPtrOutput)
}

// The FQDN to set for the SAP system during install.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) SapFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SapFqdn
	}).(pulumi.StringPtrOutput)
}

// The SAP software installation Type.
// Expected value is 'ServiceInitiated'.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) SoftwareInstallationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareInstallationType
	}).(pulumi.StringPtrOutput)
}

// The software version to install.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) SoftwareVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SoftwareVersion
	}).(pulumi.StringPtrOutput)
}

// The SSH private key.
func (o ServiceInitiatedSoftwareConfigurationResponsePtrOutput) SshPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceInitiatedSoftwareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SshPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Common settings field for backup management
type Settings struct {
	// Workload compression flag. This has been added so that 'isSqlCompression'
	// will be deprecated once clients upgrade to consider this flag.
	IsCompression *bool `pulumi:"isCompression"`
	// SQL compression flag
	Issqlcompression *bool `pulumi:"issqlcompression"`
	// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
	TimeZone *string `pulumi:"timeZone"`
}

// SettingsInput is an input type that accepts SettingsArgs and SettingsOutput values.
// You can construct a concrete instance of `SettingsInput` via:
//
//	SettingsArgs{...}
type SettingsInput interface {
	pulumi.Input

	ToSettingsOutput() SettingsOutput
	ToSettingsOutputWithContext(context.Context) SettingsOutput
}

// Common settings field for backup management
type SettingsArgs struct {
	// Workload compression flag. This has been added so that 'isSqlCompression'
	// will be deprecated once clients upgrade to consider this flag.
	IsCompression pulumi.BoolPtrInput `pulumi:"isCompression"`
	// SQL compression flag
	Issqlcompression pulumi.BoolPtrInput `pulumi:"issqlcompression"`
	// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (i SettingsArgs) ToSettingsOutput() SettingsOutput {
	return i.ToSettingsOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput)
}

func (i SettingsArgs) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput).ToSettingsPtrOutputWithContext(ctx)
}

// SettingsPtrInput is an input type that accepts SettingsArgs, SettingsPtr and SettingsPtrOutput values.
// You can construct a concrete instance of `SettingsPtrInput` via:
//
//	        SettingsArgs{...}
//
//	or:
//
//	        nil
type SettingsPtrInput interface {
	pulumi.Input

	ToSettingsPtrOutput() SettingsPtrOutput
	ToSettingsPtrOutputWithContext(context.Context) SettingsPtrOutput
}

type settingsPtrType SettingsArgs

func SettingsPtr(v *SettingsArgs) SettingsPtrInput {
	return (*settingsPtrType)(v)
}

func (*settingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (i *settingsPtrType) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i *settingsPtrType) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPtrOutput)
}

// Common settings field for backup management
type SettingsOutput struct{ *pulumi.OutputState }

func (SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (o SettingsOutput) ToSettingsOutput() SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o.ToSettingsPtrOutputWithContext(context.Background())
}

func (o SettingsOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Settings) *Settings {
		return &v
	}).(SettingsPtrOutput)
}

// Workload compression flag. This has been added so that 'isSqlCompression'
// will be deprecated once clients upgrade to consider this flag.
func (o SettingsOutput) IsCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.IsCompression }).(pulumi.BoolPtrOutput)
}

// SQL compression flag
func (o SettingsOutput) Issqlcompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.Issqlcompression }).(pulumi.BoolPtrOutput)
}

// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
func (o SettingsOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type SettingsPtrOutput struct{ *pulumi.OutputState }

func (SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (o SettingsPtrOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) Elem() SettingsOutput {
	return o.ApplyT(func(v *Settings) Settings {
		if v != nil {
			return *v
		}
		var ret Settings
		return ret
	}).(SettingsOutput)
}

// Workload compression flag. This has been added so that 'isSqlCompression'
// will be deprecated once clients upgrade to consider this flag.
func (o SettingsPtrOutput) IsCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.IsCompression
	}).(pulumi.BoolPtrOutput)
}

// SQL compression flag
func (o SettingsPtrOutput) Issqlcompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.Issqlcompression
	}).(pulumi.BoolPtrOutput)
}

// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
func (o SettingsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Common settings field for backup management
type SettingsResponse struct {
	// Workload compression flag. This has been added so that 'isSqlCompression'
	// will be deprecated once clients upgrade to consider this flag.
	IsCompression *bool `pulumi:"isCompression"`
	// SQL compression flag
	Issqlcompression *bool `pulumi:"issqlcompression"`
	// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
	TimeZone *string `pulumi:"timeZone"`
}

// Common settings field for backup management
type SettingsResponseOutput struct{ *pulumi.OutputState }

func (SettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsResponse)(nil)).Elem()
}

func (o SettingsResponseOutput) ToSettingsResponseOutput() SettingsResponseOutput {
	return o
}

func (o SettingsResponseOutput) ToSettingsResponseOutputWithContext(ctx context.Context) SettingsResponseOutput {
	return o
}

// Workload compression flag. This has been added so that 'isSqlCompression'
// will be deprecated once clients upgrade to consider this flag.
func (o SettingsResponseOutput) IsCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingsResponse) *bool { return v.IsCompression }).(pulumi.BoolPtrOutput)
}

// SQL compression flag
func (o SettingsResponseOutput) Issqlcompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SettingsResponse) *bool { return v.Issqlcompression }).(pulumi.BoolPtrOutput)
}

// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
func (o SettingsResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SettingsResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type SettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (SettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingsResponse)(nil)).Elem()
}

func (o SettingsResponsePtrOutput) ToSettingsResponsePtrOutput() SettingsResponsePtrOutput {
	return o
}

func (o SettingsResponsePtrOutput) ToSettingsResponsePtrOutputWithContext(ctx context.Context) SettingsResponsePtrOutput {
	return o
}

func (o SettingsResponsePtrOutput) Elem() SettingsResponseOutput {
	return o.ApplyT(func(v *SettingsResponse) SettingsResponse {
		if v != nil {
			return *v
		}
		var ret SettingsResponse
		return ret
	}).(SettingsResponseOutput)
}

// Workload compression flag. This has been added so that 'isSqlCompression'
// will be deprecated once clients upgrade to consider this flag.
func (o SettingsResponsePtrOutput) IsCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCompression
	}).(pulumi.BoolPtrOutput)
}

// SQL compression flag
func (o SettingsResponsePtrOutput) Issqlcompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Issqlcompression
	}).(pulumi.BoolPtrOutput)
}

// TimeZone optional input as string. For example: TimeZone = "Pacific Standard Time".
func (o SettingsResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The resource names object for shared storage.
type SharedStorageResourceNames struct {
	// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
	SharedStorageAccountName *string `pulumi:"sharedStorageAccountName"`
	// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
	SharedStorageAccountPrivateEndPointName *string `pulumi:"sharedStorageAccountPrivateEndPointName"`
}

// SharedStorageResourceNamesInput is an input type that accepts SharedStorageResourceNamesArgs and SharedStorageResourceNamesOutput values.
// You can construct a concrete instance of `SharedStorageResourceNamesInput` via:
//
//	SharedStorageResourceNamesArgs{...}
type SharedStorageResourceNamesInput interface {
	pulumi.Input

	ToSharedStorageResourceNamesOutput() SharedStorageResourceNamesOutput
	ToSharedStorageResourceNamesOutputWithContext(context.Context) SharedStorageResourceNamesOutput
}

// The resource names object for shared storage.
type SharedStorageResourceNamesArgs struct {
	// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
	SharedStorageAccountName pulumi.StringPtrInput `pulumi:"sharedStorageAccountName"`
	// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
	SharedStorageAccountPrivateEndPointName pulumi.StringPtrInput `pulumi:"sharedStorageAccountPrivateEndPointName"`
}

func (SharedStorageResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedStorageResourceNames)(nil)).Elem()
}

func (i SharedStorageResourceNamesArgs) ToSharedStorageResourceNamesOutput() SharedStorageResourceNamesOutput {
	return i.ToSharedStorageResourceNamesOutputWithContext(context.Background())
}

func (i SharedStorageResourceNamesArgs) ToSharedStorageResourceNamesOutputWithContext(ctx context.Context) SharedStorageResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedStorageResourceNamesOutput)
}

func (i SharedStorageResourceNamesArgs) ToSharedStorageResourceNamesPtrOutput() SharedStorageResourceNamesPtrOutput {
	return i.ToSharedStorageResourceNamesPtrOutputWithContext(context.Background())
}

func (i SharedStorageResourceNamesArgs) ToSharedStorageResourceNamesPtrOutputWithContext(ctx context.Context) SharedStorageResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedStorageResourceNamesOutput).ToSharedStorageResourceNamesPtrOutputWithContext(ctx)
}

// SharedStorageResourceNamesPtrInput is an input type that accepts SharedStorageResourceNamesArgs, SharedStorageResourceNamesPtr and SharedStorageResourceNamesPtrOutput values.
// You can construct a concrete instance of `SharedStorageResourceNamesPtrInput` via:
//
//	        SharedStorageResourceNamesArgs{...}
//
//	or:
//
//	        nil
type SharedStorageResourceNamesPtrInput interface {
	pulumi.Input

	ToSharedStorageResourceNamesPtrOutput() SharedStorageResourceNamesPtrOutput
	ToSharedStorageResourceNamesPtrOutputWithContext(context.Context) SharedStorageResourceNamesPtrOutput
}

type sharedStorageResourceNamesPtrType SharedStorageResourceNamesArgs

func SharedStorageResourceNamesPtr(v *SharedStorageResourceNamesArgs) SharedStorageResourceNamesPtrInput {
	return (*sharedStorageResourceNamesPtrType)(v)
}

func (*sharedStorageResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedStorageResourceNames)(nil)).Elem()
}

func (i *sharedStorageResourceNamesPtrType) ToSharedStorageResourceNamesPtrOutput() SharedStorageResourceNamesPtrOutput {
	return i.ToSharedStorageResourceNamesPtrOutputWithContext(context.Background())
}

func (i *sharedStorageResourceNamesPtrType) ToSharedStorageResourceNamesPtrOutputWithContext(ctx context.Context) SharedStorageResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedStorageResourceNamesPtrOutput)
}

// The resource names object for shared storage.
type SharedStorageResourceNamesOutput struct{ *pulumi.OutputState }

func (SharedStorageResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedStorageResourceNames)(nil)).Elem()
}

func (o SharedStorageResourceNamesOutput) ToSharedStorageResourceNamesOutput() SharedStorageResourceNamesOutput {
	return o
}

func (o SharedStorageResourceNamesOutput) ToSharedStorageResourceNamesOutputWithContext(ctx context.Context) SharedStorageResourceNamesOutput {
	return o
}

func (o SharedStorageResourceNamesOutput) ToSharedStorageResourceNamesPtrOutput() SharedStorageResourceNamesPtrOutput {
	return o.ToSharedStorageResourceNamesPtrOutputWithContext(context.Background())
}

func (o SharedStorageResourceNamesOutput) ToSharedStorageResourceNamesPtrOutputWithContext(ctx context.Context) SharedStorageResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SharedStorageResourceNames) *SharedStorageResourceNames {
		return &v
	}).(SharedStorageResourceNamesPtrOutput)
}

// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
func (o SharedStorageResourceNamesOutput) SharedStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedStorageResourceNames) *string { return v.SharedStorageAccountName }).(pulumi.StringPtrOutput)
}

// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
func (o SharedStorageResourceNamesOutput) SharedStorageAccountPrivateEndPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedStorageResourceNames) *string { return v.SharedStorageAccountPrivateEndPointName }).(pulumi.StringPtrOutput)
}

type SharedStorageResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (SharedStorageResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedStorageResourceNames)(nil)).Elem()
}

func (o SharedStorageResourceNamesPtrOutput) ToSharedStorageResourceNamesPtrOutput() SharedStorageResourceNamesPtrOutput {
	return o
}

func (o SharedStorageResourceNamesPtrOutput) ToSharedStorageResourceNamesPtrOutputWithContext(ctx context.Context) SharedStorageResourceNamesPtrOutput {
	return o
}

func (o SharedStorageResourceNamesPtrOutput) Elem() SharedStorageResourceNamesOutput {
	return o.ApplyT(func(v *SharedStorageResourceNames) SharedStorageResourceNames {
		if v != nil {
			return *v
		}
		var ret SharedStorageResourceNames
		return ret
	}).(SharedStorageResourceNamesOutput)
}

// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
func (o SharedStorageResourceNamesPtrOutput) SharedStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedStorageResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.SharedStorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
func (o SharedStorageResourceNamesPtrOutput) SharedStorageAccountPrivateEndPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedStorageResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.SharedStorageAccountPrivateEndPointName
	}).(pulumi.StringPtrOutput)
}

// The resource names object for shared storage.
type SharedStorageResourceNamesResponse struct {
	// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
	SharedStorageAccountName *string `pulumi:"sharedStorageAccountName"`
	// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
	SharedStorageAccountPrivateEndPointName *string `pulumi:"sharedStorageAccountPrivateEndPointName"`
}

// The resource names object for shared storage.
type SharedStorageResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (SharedStorageResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedStorageResourceNamesResponse)(nil)).Elem()
}

func (o SharedStorageResourceNamesResponseOutput) ToSharedStorageResourceNamesResponseOutput() SharedStorageResourceNamesResponseOutput {
	return o
}

func (o SharedStorageResourceNamesResponseOutput) ToSharedStorageResourceNamesResponseOutputWithContext(ctx context.Context) SharedStorageResourceNamesResponseOutput {
	return o
}

// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
func (o SharedStorageResourceNamesResponseOutput) SharedStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedStorageResourceNamesResponse) *string { return v.SharedStorageAccountName }).(pulumi.StringPtrOutput)
}

// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
func (o SharedStorageResourceNamesResponseOutput) SharedStorageAccountPrivateEndPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedStorageResourceNamesResponse) *string { return v.SharedStorageAccountPrivateEndPointName }).(pulumi.StringPtrOutput)
}

type SharedStorageResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (SharedStorageResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedStorageResourceNamesResponse)(nil)).Elem()
}

func (o SharedStorageResourceNamesResponsePtrOutput) ToSharedStorageResourceNamesResponsePtrOutput() SharedStorageResourceNamesResponsePtrOutput {
	return o
}

func (o SharedStorageResourceNamesResponsePtrOutput) ToSharedStorageResourceNamesResponsePtrOutputWithContext(ctx context.Context) SharedStorageResourceNamesResponsePtrOutput {
	return o
}

func (o SharedStorageResourceNamesResponsePtrOutput) Elem() SharedStorageResourceNamesResponseOutput {
	return o.ApplyT(func(v *SharedStorageResourceNamesResponse) SharedStorageResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret SharedStorageResourceNamesResponse
		return ret
	}).(SharedStorageResourceNamesResponseOutput)
}

// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
func (o SharedStorageResourceNamesResponsePtrOutput) SharedStorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedStorageResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedStorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
func (o SharedStorageResourceNamesResponsePtrOutput) SharedStorageAccountPrivateEndPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SharedStorageResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedStorageAccountPrivateEndPointName
	}).(pulumi.StringPtrOutput)
}

// Simple policy retention.
type SimpleRetentionPolicy struct {
	// Retention duration of the protection policy.
	RetentionDuration *RetentionDuration `pulumi:"retentionDuration"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleRetentionPolicy'.
	RetentionPolicyType string `pulumi:"retentionPolicyType"`
}

// SimpleRetentionPolicyInput is an input type that accepts SimpleRetentionPolicyArgs and SimpleRetentionPolicyOutput values.
// You can construct a concrete instance of `SimpleRetentionPolicyInput` via:
//
//	SimpleRetentionPolicyArgs{...}
type SimpleRetentionPolicyInput interface {
	pulumi.Input

	ToSimpleRetentionPolicyOutput() SimpleRetentionPolicyOutput
	ToSimpleRetentionPolicyOutputWithContext(context.Context) SimpleRetentionPolicyOutput
}

// Simple policy retention.
type SimpleRetentionPolicyArgs struct {
	// Retention duration of the protection policy.
	RetentionDuration RetentionDurationPtrInput `pulumi:"retentionDuration"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleRetentionPolicy'.
	RetentionPolicyType pulumi.StringInput `pulumi:"retentionPolicyType"`
}

func (SimpleRetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleRetentionPolicy)(nil)).Elem()
}

func (i SimpleRetentionPolicyArgs) ToSimpleRetentionPolicyOutput() SimpleRetentionPolicyOutput {
	return i.ToSimpleRetentionPolicyOutputWithContext(context.Background())
}

func (i SimpleRetentionPolicyArgs) ToSimpleRetentionPolicyOutputWithContext(ctx context.Context) SimpleRetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleRetentionPolicyOutput)
}

func (i SimpleRetentionPolicyArgs) ToSimpleRetentionPolicyPtrOutput() SimpleRetentionPolicyPtrOutput {
	return i.ToSimpleRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i SimpleRetentionPolicyArgs) ToSimpleRetentionPolicyPtrOutputWithContext(ctx context.Context) SimpleRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleRetentionPolicyOutput).ToSimpleRetentionPolicyPtrOutputWithContext(ctx)
}

// SimpleRetentionPolicyPtrInput is an input type that accepts SimpleRetentionPolicyArgs, SimpleRetentionPolicyPtr and SimpleRetentionPolicyPtrOutput values.
// You can construct a concrete instance of `SimpleRetentionPolicyPtrInput` via:
//
//	        SimpleRetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type SimpleRetentionPolicyPtrInput interface {
	pulumi.Input

	ToSimpleRetentionPolicyPtrOutput() SimpleRetentionPolicyPtrOutput
	ToSimpleRetentionPolicyPtrOutputWithContext(context.Context) SimpleRetentionPolicyPtrOutput
}

type simpleRetentionPolicyPtrType SimpleRetentionPolicyArgs

func SimpleRetentionPolicyPtr(v *SimpleRetentionPolicyArgs) SimpleRetentionPolicyPtrInput {
	return (*simpleRetentionPolicyPtrType)(v)
}

func (*simpleRetentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleRetentionPolicy)(nil)).Elem()
}

func (i *simpleRetentionPolicyPtrType) ToSimpleRetentionPolicyPtrOutput() SimpleRetentionPolicyPtrOutput {
	return i.ToSimpleRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *simpleRetentionPolicyPtrType) ToSimpleRetentionPolicyPtrOutputWithContext(ctx context.Context) SimpleRetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleRetentionPolicyPtrOutput)
}

// Simple policy retention.
type SimpleRetentionPolicyOutput struct{ *pulumi.OutputState }

func (SimpleRetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleRetentionPolicy)(nil)).Elem()
}

func (o SimpleRetentionPolicyOutput) ToSimpleRetentionPolicyOutput() SimpleRetentionPolicyOutput {
	return o
}

func (o SimpleRetentionPolicyOutput) ToSimpleRetentionPolicyOutputWithContext(ctx context.Context) SimpleRetentionPolicyOutput {
	return o
}

func (o SimpleRetentionPolicyOutput) ToSimpleRetentionPolicyPtrOutput() SimpleRetentionPolicyPtrOutput {
	return o.ToSimpleRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o SimpleRetentionPolicyOutput) ToSimpleRetentionPolicyPtrOutputWithContext(ctx context.Context) SimpleRetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimpleRetentionPolicy) *SimpleRetentionPolicy {
		return &v
	}).(SimpleRetentionPolicyPtrOutput)
}

// Retention duration of the protection policy.
func (o SimpleRetentionPolicyOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v SimpleRetentionPolicy) *RetentionDuration { return v.RetentionDuration }).(RetentionDurationPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleRetentionPolicy'.
func (o SimpleRetentionPolicyOutput) RetentionPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleRetentionPolicy) string { return v.RetentionPolicyType }).(pulumi.StringOutput)
}

type SimpleRetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (SimpleRetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleRetentionPolicy)(nil)).Elem()
}

func (o SimpleRetentionPolicyPtrOutput) ToSimpleRetentionPolicyPtrOutput() SimpleRetentionPolicyPtrOutput {
	return o
}

func (o SimpleRetentionPolicyPtrOutput) ToSimpleRetentionPolicyPtrOutputWithContext(ctx context.Context) SimpleRetentionPolicyPtrOutput {
	return o
}

func (o SimpleRetentionPolicyPtrOutput) Elem() SimpleRetentionPolicyOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicy) SimpleRetentionPolicy {
		if v != nil {
			return *v
		}
		var ret SimpleRetentionPolicy
		return ret
	}).(SimpleRetentionPolicyOutput)
}

// Retention duration of the protection policy.
func (o SimpleRetentionPolicyPtrOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicy) *RetentionDuration {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleRetentionPolicy'.
func (o SimpleRetentionPolicyPtrOutput) RetentionPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicyType
	}).(pulumi.StringPtrOutput)
}

// Simple policy retention.
type SimpleRetentionPolicyResponse struct {
	// Retention duration of the protection policy.
	RetentionDuration *RetentionDurationResponse `pulumi:"retentionDuration"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleRetentionPolicy'.
	RetentionPolicyType string `pulumi:"retentionPolicyType"`
}

// Simple policy retention.
type SimpleRetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (SimpleRetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleRetentionPolicyResponse)(nil)).Elem()
}

func (o SimpleRetentionPolicyResponseOutput) ToSimpleRetentionPolicyResponseOutput() SimpleRetentionPolicyResponseOutput {
	return o
}

func (o SimpleRetentionPolicyResponseOutput) ToSimpleRetentionPolicyResponseOutputWithContext(ctx context.Context) SimpleRetentionPolicyResponseOutput {
	return o
}

// Retention duration of the protection policy.
func (o SimpleRetentionPolicyResponseOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v SimpleRetentionPolicyResponse) *RetentionDurationResponse { return v.RetentionDuration }).(RetentionDurationResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleRetentionPolicy'.
func (o SimpleRetentionPolicyResponseOutput) RetentionPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleRetentionPolicyResponse) string { return v.RetentionPolicyType }).(pulumi.StringOutput)
}

type SimpleRetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (SimpleRetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleRetentionPolicyResponse)(nil)).Elem()
}

func (o SimpleRetentionPolicyResponsePtrOutput) ToSimpleRetentionPolicyResponsePtrOutput() SimpleRetentionPolicyResponsePtrOutput {
	return o
}

func (o SimpleRetentionPolicyResponsePtrOutput) ToSimpleRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) SimpleRetentionPolicyResponsePtrOutput {
	return o
}

func (o SimpleRetentionPolicyResponsePtrOutput) Elem() SimpleRetentionPolicyResponseOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicyResponse) SimpleRetentionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret SimpleRetentionPolicyResponse
		return ret
	}).(SimpleRetentionPolicyResponseOutput)
}

// Retention duration of the protection policy.
func (o SimpleRetentionPolicyResponsePtrOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicyResponse) *RetentionDurationResponse {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleRetentionPolicy'.
func (o SimpleRetentionPolicyResponsePtrOutput) RetentionPolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleRetentionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RetentionPolicyType
	}).(pulumi.StringPtrOutput)
}

// Simple policy schedule.
type SimpleSchedulePolicy struct {
	// Hourly Schedule of this Policy
	HourlySchedule *HourlySchedule `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
	// List of days of week this schedule has to be run.
	ScheduleRunDays []DayOfWeek `pulumi:"scheduleRunDays"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *string `pulumi:"scheduleRunFrequency"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
	// At every number weeks this schedule has to be run.
	ScheduleWeeklyFrequency *int `pulumi:"scheduleWeeklyFrequency"`
}

// SimpleSchedulePolicyInput is an input type that accepts SimpleSchedulePolicyArgs and SimpleSchedulePolicyOutput values.
// You can construct a concrete instance of `SimpleSchedulePolicyInput` via:
//
//	SimpleSchedulePolicyArgs{...}
type SimpleSchedulePolicyInput interface {
	pulumi.Input

	ToSimpleSchedulePolicyOutput() SimpleSchedulePolicyOutput
	ToSimpleSchedulePolicyOutputWithContext(context.Context) SimpleSchedulePolicyOutput
}

// Simple policy schedule.
type SimpleSchedulePolicyArgs struct {
	// Hourly Schedule of this Policy
	HourlySchedule HourlySchedulePtrInput `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicy'.
	SchedulePolicyType pulumi.StringInput `pulumi:"schedulePolicyType"`
	// List of days of week this schedule has to be run.
	ScheduleRunDays DayOfWeekArrayInput `pulumi:"scheduleRunDays"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency pulumi.StringPtrInput `pulumi:"scheduleRunFrequency"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes pulumi.StringArrayInput `pulumi:"scheduleRunTimes"`
	// At every number weeks this schedule has to be run.
	ScheduleWeeklyFrequency pulumi.IntPtrInput `pulumi:"scheduleWeeklyFrequency"`
}

func (SimpleSchedulePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicy)(nil)).Elem()
}

func (i SimpleSchedulePolicyArgs) ToSimpleSchedulePolicyOutput() SimpleSchedulePolicyOutput {
	return i.ToSimpleSchedulePolicyOutputWithContext(context.Background())
}

func (i SimpleSchedulePolicyArgs) ToSimpleSchedulePolicyOutputWithContext(ctx context.Context) SimpleSchedulePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyOutput)
}

func (i SimpleSchedulePolicyArgs) ToSimpleSchedulePolicyPtrOutput() SimpleSchedulePolicyPtrOutput {
	return i.ToSimpleSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i SimpleSchedulePolicyArgs) ToSimpleSchedulePolicyPtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyOutput).ToSimpleSchedulePolicyPtrOutputWithContext(ctx)
}

// SimpleSchedulePolicyPtrInput is an input type that accepts SimpleSchedulePolicyArgs, SimpleSchedulePolicyPtr and SimpleSchedulePolicyPtrOutput values.
// You can construct a concrete instance of `SimpleSchedulePolicyPtrInput` via:
//
//	        SimpleSchedulePolicyArgs{...}
//
//	or:
//
//	        nil
type SimpleSchedulePolicyPtrInput interface {
	pulumi.Input

	ToSimpleSchedulePolicyPtrOutput() SimpleSchedulePolicyPtrOutput
	ToSimpleSchedulePolicyPtrOutputWithContext(context.Context) SimpleSchedulePolicyPtrOutput
}

type simpleSchedulePolicyPtrType SimpleSchedulePolicyArgs

func SimpleSchedulePolicyPtr(v *SimpleSchedulePolicyArgs) SimpleSchedulePolicyPtrInput {
	return (*simpleSchedulePolicyPtrType)(v)
}

func (*simpleSchedulePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicy)(nil)).Elem()
}

func (i *simpleSchedulePolicyPtrType) ToSimpleSchedulePolicyPtrOutput() SimpleSchedulePolicyPtrOutput {
	return i.ToSimpleSchedulePolicyPtrOutputWithContext(context.Background())
}

func (i *simpleSchedulePolicyPtrType) ToSimpleSchedulePolicyPtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyPtrOutput)
}

// Simple policy schedule.
type SimpleSchedulePolicyOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicy)(nil)).Elem()
}

func (o SimpleSchedulePolicyOutput) ToSimpleSchedulePolicyOutput() SimpleSchedulePolicyOutput {
	return o
}

func (o SimpleSchedulePolicyOutput) ToSimpleSchedulePolicyOutputWithContext(ctx context.Context) SimpleSchedulePolicyOutput {
	return o
}

func (o SimpleSchedulePolicyOutput) ToSimpleSchedulePolicyPtrOutput() SimpleSchedulePolicyPtrOutput {
	return o.ToSimpleSchedulePolicyPtrOutputWithContext(context.Background())
}

func (o SimpleSchedulePolicyOutput) ToSimpleSchedulePolicyPtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimpleSchedulePolicy) *SimpleSchedulePolicy {
		return &v
	}).(SimpleSchedulePolicyPtrOutput)
}

// Hourly Schedule of this Policy
func (o SimpleSchedulePolicyOutput) HourlySchedule() HourlySchedulePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) *HourlySchedule { return v.HourlySchedule }).(HourlySchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicy'.
func (o SimpleSchedulePolicyOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

// List of days of week this schedule has to be run.
func (o SimpleSchedulePolicyOutput) ScheduleRunDays() DayOfWeekArrayOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) []DayOfWeek { return v.ScheduleRunDays }).(DayOfWeekArrayOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) *string { return v.ScheduleRunFrequency }).(pulumi.StringPtrOutput)
}

// List of times of day this schedule has to be run.
func (o SimpleSchedulePolicyOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

// At every number weeks this schedule has to be run.
func (o SimpleSchedulePolicyOutput) ScheduleWeeklyFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicy) *int { return v.ScheduleWeeklyFrequency }).(pulumi.IntPtrOutput)
}

type SimpleSchedulePolicyPtrOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicy)(nil)).Elem()
}

func (o SimpleSchedulePolicyPtrOutput) ToSimpleSchedulePolicyPtrOutput() SimpleSchedulePolicyPtrOutput {
	return o
}

func (o SimpleSchedulePolicyPtrOutput) ToSimpleSchedulePolicyPtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyPtrOutput {
	return o
}

func (o SimpleSchedulePolicyPtrOutput) Elem() SimpleSchedulePolicyOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) SimpleSchedulePolicy {
		if v != nil {
			return *v
		}
		var ret SimpleSchedulePolicy
		return ret
	}).(SimpleSchedulePolicyOutput)
}

// Hourly Schedule of this Policy
func (o SimpleSchedulePolicyPtrOutput) HourlySchedule() HourlySchedulePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) *HourlySchedule {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(HourlySchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicy'.
func (o SimpleSchedulePolicyPtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// List of days of week this schedule has to be run.
func (o SimpleSchedulePolicyPtrOutput) ScheduleRunDays() DayOfWeekArrayOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) []DayOfWeek {
		if v == nil {
			return nil
		}
		return v.ScheduleRunDays
	}).(DayOfWeekArrayOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyPtrOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunFrequency
	}).(pulumi.StringPtrOutput)
}

// List of times of day this schedule has to be run.
func (o SimpleSchedulePolicyPtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// At every number weeks this schedule has to be run.
func (o SimpleSchedulePolicyPtrOutput) ScheduleWeeklyFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicy) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleWeeklyFrequency
	}).(pulumi.IntPtrOutput)
}

// Simple policy schedule.
type SimpleSchedulePolicyResponse struct {
	// Hourly Schedule of this Policy
	HourlySchedule *HourlyScheduleResponse `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicy'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
	// List of days of week this schedule has to be run.
	ScheduleRunDays []string `pulumi:"scheduleRunDays"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *string `pulumi:"scheduleRunFrequency"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
	// At every number weeks this schedule has to be run.
	ScheduleWeeklyFrequency *int `pulumi:"scheduleWeeklyFrequency"`
}

// Simple policy schedule.
type SimpleSchedulePolicyResponseOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicyResponse)(nil)).Elem()
}

func (o SimpleSchedulePolicyResponseOutput) ToSimpleSchedulePolicyResponseOutput() SimpleSchedulePolicyResponseOutput {
	return o
}

func (o SimpleSchedulePolicyResponseOutput) ToSimpleSchedulePolicyResponseOutputWithContext(ctx context.Context) SimpleSchedulePolicyResponseOutput {
	return o
}

// Hourly Schedule of this Policy
func (o SimpleSchedulePolicyResponseOutput) HourlySchedule() HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) *HourlyScheduleResponse { return v.HourlySchedule }).(HourlyScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicy'.
func (o SimpleSchedulePolicyResponseOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

// List of days of week this schedule has to be run.
func (o SimpleSchedulePolicyResponseOutput) ScheduleRunDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) []string { return v.ScheduleRunDays }).(pulumi.StringArrayOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyResponseOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) *string { return v.ScheduleRunFrequency }).(pulumi.StringPtrOutput)
}

// List of times of day this schedule has to be run.
func (o SimpleSchedulePolicyResponseOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

// At every number weeks this schedule has to be run.
func (o SimpleSchedulePolicyResponseOutput) ScheduleWeeklyFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyResponse) *int { return v.ScheduleWeeklyFrequency }).(pulumi.IntPtrOutput)
}

type SimpleSchedulePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicyResponse)(nil)).Elem()
}

func (o SimpleSchedulePolicyResponsePtrOutput) ToSimpleSchedulePolicyResponsePtrOutput() SimpleSchedulePolicyResponsePtrOutput {
	return o
}

func (o SimpleSchedulePolicyResponsePtrOutput) ToSimpleSchedulePolicyResponsePtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyResponsePtrOutput {
	return o
}

func (o SimpleSchedulePolicyResponsePtrOutput) Elem() SimpleSchedulePolicyResponseOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) SimpleSchedulePolicyResponse {
		if v != nil {
			return *v
		}
		var ret SimpleSchedulePolicyResponse
		return ret
	}).(SimpleSchedulePolicyResponseOutput)
}

// Hourly Schedule of this Policy
func (o SimpleSchedulePolicyResponsePtrOutput) HourlySchedule() HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) *HourlyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(HourlyScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicy'.
func (o SimpleSchedulePolicyResponsePtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// List of days of week this schedule has to be run.
func (o SimpleSchedulePolicyResponsePtrOutput) ScheduleRunDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunDays
	}).(pulumi.StringArrayOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyResponsePtrOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunFrequency
	}).(pulumi.StringPtrOutput)
}

// List of times of day this schedule has to be run.
func (o SimpleSchedulePolicyResponsePtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// At every number weeks this schedule has to be run.
func (o SimpleSchedulePolicyResponsePtrOutput) ScheduleWeeklyFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.ScheduleWeeklyFrequency
	}).(pulumi.IntPtrOutput)
}

// The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2 struct {
	// Daily schedule of this policy
	DailySchedule *DailySchedule `pulumi:"dailySchedule"`
	// hourly schedule of this policy
	HourlySchedule *HourlySchedule `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicyV2'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *string `pulumi:"scheduleRunFrequency"`
	// Weekly schedule of this policy
	WeeklySchedule *WeeklySchedule `pulumi:"weeklySchedule"`
}

// SimpleSchedulePolicyV2Input is an input type that accepts SimpleSchedulePolicyV2Args and SimpleSchedulePolicyV2Output values.
// You can construct a concrete instance of `SimpleSchedulePolicyV2Input` via:
//
//	SimpleSchedulePolicyV2Args{...}
type SimpleSchedulePolicyV2Input interface {
	pulumi.Input

	ToSimpleSchedulePolicyV2Output() SimpleSchedulePolicyV2Output
	ToSimpleSchedulePolicyV2OutputWithContext(context.Context) SimpleSchedulePolicyV2Output
}

// The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2Args struct {
	// Daily schedule of this policy
	DailySchedule DailySchedulePtrInput `pulumi:"dailySchedule"`
	// hourly schedule of this policy
	HourlySchedule HourlySchedulePtrInput `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicyV2'.
	SchedulePolicyType pulumi.StringInput `pulumi:"schedulePolicyType"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency pulumi.StringPtrInput `pulumi:"scheduleRunFrequency"`
	// Weekly schedule of this policy
	WeeklySchedule WeeklySchedulePtrInput `pulumi:"weeklySchedule"`
}

func (SimpleSchedulePolicyV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicyV2)(nil)).Elem()
}

func (i SimpleSchedulePolicyV2Args) ToSimpleSchedulePolicyV2Output() SimpleSchedulePolicyV2Output {
	return i.ToSimpleSchedulePolicyV2OutputWithContext(context.Background())
}

func (i SimpleSchedulePolicyV2Args) ToSimpleSchedulePolicyV2OutputWithContext(ctx context.Context) SimpleSchedulePolicyV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyV2Output)
}

func (i SimpleSchedulePolicyV2Args) ToSimpleSchedulePolicyV2PtrOutput() SimpleSchedulePolicyV2PtrOutput {
	return i.ToSimpleSchedulePolicyV2PtrOutputWithContext(context.Background())
}

func (i SimpleSchedulePolicyV2Args) ToSimpleSchedulePolicyV2PtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyV2Output).ToSimpleSchedulePolicyV2PtrOutputWithContext(ctx)
}

// SimpleSchedulePolicyV2PtrInput is an input type that accepts SimpleSchedulePolicyV2Args, SimpleSchedulePolicyV2Ptr and SimpleSchedulePolicyV2PtrOutput values.
// You can construct a concrete instance of `SimpleSchedulePolicyV2PtrInput` via:
//
//	        SimpleSchedulePolicyV2Args{...}
//
//	or:
//
//	        nil
type SimpleSchedulePolicyV2PtrInput interface {
	pulumi.Input

	ToSimpleSchedulePolicyV2PtrOutput() SimpleSchedulePolicyV2PtrOutput
	ToSimpleSchedulePolicyV2PtrOutputWithContext(context.Context) SimpleSchedulePolicyV2PtrOutput
}

type simpleSchedulePolicyV2PtrType SimpleSchedulePolicyV2Args

func SimpleSchedulePolicyV2Ptr(v *SimpleSchedulePolicyV2Args) SimpleSchedulePolicyV2PtrInput {
	return (*simpleSchedulePolicyV2PtrType)(v)
}

func (*simpleSchedulePolicyV2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicyV2)(nil)).Elem()
}

func (i *simpleSchedulePolicyV2PtrType) ToSimpleSchedulePolicyV2PtrOutput() SimpleSchedulePolicyV2PtrOutput {
	return i.ToSimpleSchedulePolicyV2PtrOutputWithContext(context.Background())
}

func (i *simpleSchedulePolicyV2PtrType) ToSimpleSchedulePolicyV2PtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SimpleSchedulePolicyV2PtrOutput)
}

// The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2Output struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicyV2)(nil)).Elem()
}

func (o SimpleSchedulePolicyV2Output) ToSimpleSchedulePolicyV2Output() SimpleSchedulePolicyV2Output {
	return o
}

func (o SimpleSchedulePolicyV2Output) ToSimpleSchedulePolicyV2OutputWithContext(ctx context.Context) SimpleSchedulePolicyV2Output {
	return o
}

func (o SimpleSchedulePolicyV2Output) ToSimpleSchedulePolicyV2PtrOutput() SimpleSchedulePolicyV2PtrOutput {
	return o.ToSimpleSchedulePolicyV2PtrOutputWithContext(context.Background())
}

func (o SimpleSchedulePolicyV2Output) ToSimpleSchedulePolicyV2PtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SimpleSchedulePolicyV2) *SimpleSchedulePolicyV2 {
		return &v
	}).(SimpleSchedulePolicyV2PtrOutput)
}

// Daily schedule of this policy
func (o SimpleSchedulePolicyV2Output) DailySchedule() DailySchedulePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2) *DailySchedule { return v.DailySchedule }).(DailySchedulePtrOutput)
}

// hourly schedule of this policy
func (o SimpleSchedulePolicyV2Output) HourlySchedule() HourlySchedulePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2) *HourlySchedule { return v.HourlySchedule }).(HourlySchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicyV2'.
func (o SimpleSchedulePolicyV2Output) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyV2Output) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2) *string { return v.ScheduleRunFrequency }).(pulumi.StringPtrOutput)
}

// Weekly schedule of this policy
func (o SimpleSchedulePolicyV2Output) WeeklySchedule() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2) *WeeklySchedule { return v.WeeklySchedule }).(WeeklySchedulePtrOutput)
}

type SimpleSchedulePolicyV2PtrOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyV2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicyV2)(nil)).Elem()
}

func (o SimpleSchedulePolicyV2PtrOutput) ToSimpleSchedulePolicyV2PtrOutput() SimpleSchedulePolicyV2PtrOutput {
	return o
}

func (o SimpleSchedulePolicyV2PtrOutput) ToSimpleSchedulePolicyV2PtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2PtrOutput {
	return o
}

func (o SimpleSchedulePolicyV2PtrOutput) Elem() SimpleSchedulePolicyV2Output {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) SimpleSchedulePolicyV2 {
		if v != nil {
			return *v
		}
		var ret SimpleSchedulePolicyV2
		return ret
	}).(SimpleSchedulePolicyV2Output)
}

// Daily schedule of this policy
func (o SimpleSchedulePolicyV2PtrOutput) DailySchedule() DailySchedulePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) *DailySchedule {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(DailySchedulePtrOutput)
}

// hourly schedule of this policy
func (o SimpleSchedulePolicyV2PtrOutput) HourlySchedule() HourlySchedulePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) *HourlySchedule {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(HourlySchedulePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicyV2'.
func (o SimpleSchedulePolicyV2PtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyV2PtrOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunFrequency
	}).(pulumi.StringPtrOutput)
}

// Weekly schedule of this policy
func (o SimpleSchedulePolicyV2PtrOutput) WeeklySchedule() WeeklySchedulePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2) *WeeklySchedule {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(WeeklySchedulePtrOutput)
}

// The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2Response struct {
	// Daily schedule of this policy
	DailySchedule *DailyScheduleResponse `pulumi:"dailySchedule"`
	// hourly schedule of this policy
	HourlySchedule *HourlyScheduleResponse `pulumi:"hourlySchedule"`
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'SimpleSchedulePolicyV2'.
	SchedulePolicyType string `pulumi:"schedulePolicyType"`
	// Frequency of the schedule operation of this policy.
	ScheduleRunFrequency *string `pulumi:"scheduleRunFrequency"`
	// Weekly schedule of this policy
	WeeklySchedule *WeeklyScheduleResponse `pulumi:"weeklySchedule"`
}

// The V2 policy schedule for IaaS that supports hourly backups.
type SimpleSchedulePolicyV2ResponseOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyV2ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SimpleSchedulePolicyV2Response)(nil)).Elem()
}

func (o SimpleSchedulePolicyV2ResponseOutput) ToSimpleSchedulePolicyV2ResponseOutput() SimpleSchedulePolicyV2ResponseOutput {
	return o
}

func (o SimpleSchedulePolicyV2ResponseOutput) ToSimpleSchedulePolicyV2ResponseOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2ResponseOutput {
	return o
}

// Daily schedule of this policy
func (o SimpleSchedulePolicyV2ResponseOutput) DailySchedule() DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2Response) *DailyScheduleResponse { return v.DailySchedule }).(DailyScheduleResponsePtrOutput)
}

// hourly schedule of this policy
func (o SimpleSchedulePolicyV2ResponseOutput) HourlySchedule() HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2Response) *HourlyScheduleResponse { return v.HourlySchedule }).(HourlyScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicyV2'.
func (o SimpleSchedulePolicyV2ResponseOutput) SchedulePolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2Response) string { return v.SchedulePolicyType }).(pulumi.StringOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyV2ResponseOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2Response) *string { return v.ScheduleRunFrequency }).(pulumi.StringPtrOutput)
}

// Weekly schedule of this policy
func (o SimpleSchedulePolicyV2ResponseOutput) WeeklySchedule() WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v SimpleSchedulePolicyV2Response) *WeeklyScheduleResponse { return v.WeeklySchedule }).(WeeklyScheduleResponsePtrOutput)
}

type SimpleSchedulePolicyV2ResponsePtrOutput struct{ *pulumi.OutputState }

func (SimpleSchedulePolicyV2ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SimpleSchedulePolicyV2Response)(nil)).Elem()
}

func (o SimpleSchedulePolicyV2ResponsePtrOutput) ToSimpleSchedulePolicyV2ResponsePtrOutput() SimpleSchedulePolicyV2ResponsePtrOutput {
	return o
}

func (o SimpleSchedulePolicyV2ResponsePtrOutput) ToSimpleSchedulePolicyV2ResponsePtrOutputWithContext(ctx context.Context) SimpleSchedulePolicyV2ResponsePtrOutput {
	return o
}

func (o SimpleSchedulePolicyV2ResponsePtrOutput) Elem() SimpleSchedulePolicyV2ResponseOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) SimpleSchedulePolicyV2Response {
		if v != nil {
			return *v
		}
		var ret SimpleSchedulePolicyV2Response
		return ret
	}).(SimpleSchedulePolicyV2ResponseOutput)
}

// Daily schedule of this policy
func (o SimpleSchedulePolicyV2ResponsePtrOutput) DailySchedule() DailyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) *DailyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.DailySchedule
	}).(DailyScheduleResponsePtrOutput)
}

// hourly schedule of this policy
func (o SimpleSchedulePolicyV2ResponsePtrOutput) HourlySchedule() HourlyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) *HourlyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.HourlySchedule
	}).(HourlyScheduleResponsePtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'SimpleSchedulePolicyV2'.
func (o SimpleSchedulePolicyV2ResponsePtrOutput) SchedulePolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) *string {
		if v == nil {
			return nil
		}
		return &v.SchedulePolicyType
	}).(pulumi.StringPtrOutput)
}

// Frequency of the schedule operation of this policy.
func (o SimpleSchedulePolicyV2ResponsePtrOutput) ScheduleRunFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunFrequency
	}).(pulumi.StringPtrOutput)
}

// Weekly schedule of this policy
func (o SimpleSchedulePolicyV2ResponsePtrOutput) WeeklySchedule() WeeklyScheduleResponsePtrOutput {
	return o.ApplyT(func(v *SimpleSchedulePolicyV2Response) *WeeklyScheduleResponse {
		if v == nil {
			return nil
		}
		return v.WeeklySchedule
	}).(WeeklyScheduleResponsePtrOutput)
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfiguration struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *SingleServerFullResourceNames `pulumi:"customResourceNames"`
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DbDiskConfiguration *DiskConfiguration `pulumi:"dbDiskConfiguration"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'SingleServer'.
	DeploymentType string `pulumi:"deploymentType"`
	// Network configuration for the server
	NetworkConfiguration *NetworkConfiguration `pulumi:"networkConfiguration"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// Defaults sets the appropriate defaults for SingleServerConfiguration
func (val *SingleServerConfiguration) Defaults() *SingleServerConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// SingleServerConfigurationInput is an input type that accepts SingleServerConfigurationArgs and SingleServerConfigurationOutput values.
// You can construct a concrete instance of `SingleServerConfigurationInput` via:
//
//	SingleServerConfigurationArgs{...}
type SingleServerConfigurationInput interface {
	pulumi.Input

	ToSingleServerConfigurationOutput() SingleServerConfigurationOutput
	ToSingleServerConfigurationOutputWithContext(context.Context) SingleServerConfigurationOutput
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfigurationArgs struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup pulumi.StringInput `pulumi:"appResourceGroup"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames SingleServerFullResourceNamesPtrInput `pulumi:"customResourceNames"`
	// The database type.
	DatabaseType pulumi.StringPtrInput `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DbDiskConfiguration DiskConfigurationPtrInput `pulumi:"dbDiskConfiguration"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'SingleServer'.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// Network configuration for the server
	NetworkConfiguration NetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// The subnet id.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationInput `pulumi:"virtualMachineConfiguration"`
}

// Defaults sets the appropriate defaults for SingleServerConfigurationArgs
func (val *SingleServerConfigurationArgs) Defaults() *SingleServerConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (SingleServerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerConfiguration)(nil)).Elem()
}

func (i SingleServerConfigurationArgs) ToSingleServerConfigurationOutput() SingleServerConfigurationOutput {
	return i.ToSingleServerConfigurationOutputWithContext(context.Background())
}

func (i SingleServerConfigurationArgs) ToSingleServerConfigurationOutputWithContext(ctx context.Context) SingleServerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerConfigurationOutput)
}

func (i SingleServerConfigurationArgs) ToSingleServerConfigurationPtrOutput() SingleServerConfigurationPtrOutput {
	return i.ToSingleServerConfigurationPtrOutputWithContext(context.Background())
}

func (i SingleServerConfigurationArgs) ToSingleServerConfigurationPtrOutputWithContext(ctx context.Context) SingleServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerConfigurationOutput).ToSingleServerConfigurationPtrOutputWithContext(ctx)
}

// SingleServerConfigurationPtrInput is an input type that accepts SingleServerConfigurationArgs, SingleServerConfigurationPtr and SingleServerConfigurationPtrOutput values.
// You can construct a concrete instance of `SingleServerConfigurationPtrInput` via:
//
//	        SingleServerConfigurationArgs{...}
//
//	or:
//
//	        nil
type SingleServerConfigurationPtrInput interface {
	pulumi.Input

	ToSingleServerConfigurationPtrOutput() SingleServerConfigurationPtrOutput
	ToSingleServerConfigurationPtrOutputWithContext(context.Context) SingleServerConfigurationPtrOutput
}

type singleServerConfigurationPtrType SingleServerConfigurationArgs

func SingleServerConfigurationPtr(v *SingleServerConfigurationArgs) SingleServerConfigurationPtrInput {
	return (*singleServerConfigurationPtrType)(v)
}

func (*singleServerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerConfiguration)(nil)).Elem()
}

func (i *singleServerConfigurationPtrType) ToSingleServerConfigurationPtrOutput() SingleServerConfigurationPtrOutput {
	return i.ToSingleServerConfigurationPtrOutputWithContext(context.Background())
}

func (i *singleServerConfigurationPtrType) ToSingleServerConfigurationPtrOutputWithContext(ctx context.Context) SingleServerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerConfigurationPtrOutput)
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfigurationOutput struct{ *pulumi.OutputState }

func (SingleServerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerConfiguration)(nil)).Elem()
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationOutput() SingleServerConfigurationOutput {
	return o
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationOutputWithContext(ctx context.Context) SingleServerConfigurationOutput {
	return o
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationPtrOutput() SingleServerConfigurationPtrOutput {
	return o.ToSingleServerConfigurationPtrOutputWithContext(context.Background())
}

func (o SingleServerConfigurationOutput) ToSingleServerConfigurationPtrOutputWithContext(ctx context.Context) SingleServerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleServerConfiguration) *SingleServerConfiguration {
		return &v
	}).(SingleServerConfigurationPtrOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o SingleServerConfigurationOutput) AppResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfiguration) string { return v.AppResourceGroup }).(pulumi.StringOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o SingleServerConfigurationOutput) CustomResourceNames() SingleServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v SingleServerConfiguration) *SingleServerFullResourceNames { return v.CustomResourceNames }).(SingleServerFullResourceNamesPtrOutput)
}

// The database type.
func (o SingleServerConfigurationOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleServerConfiguration) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o SingleServerConfigurationOutput) DbDiskConfiguration() DiskConfigurationPtrOutput {
	return o.ApplyT(func(v SingleServerConfiguration) *DiskConfiguration { return v.DbDiskConfiguration }).(DiskConfigurationPtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'SingleServer'.
func (o SingleServerConfigurationOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfiguration) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Network configuration for the server
func (o SingleServerConfigurationOutput) NetworkConfiguration() NetworkConfigurationPtrOutput {
	return o.ApplyT(func(v SingleServerConfiguration) *NetworkConfiguration { return v.NetworkConfiguration }).(NetworkConfigurationPtrOutput)
}

// The subnet id.
func (o SingleServerConfigurationOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfiguration) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o SingleServerConfigurationOutput) VirtualMachineConfiguration() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v SingleServerConfiguration) VirtualMachineConfiguration { return v.VirtualMachineConfiguration }).(VirtualMachineConfigurationOutput)
}

type SingleServerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SingleServerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerConfiguration)(nil)).Elem()
}

func (o SingleServerConfigurationPtrOutput) ToSingleServerConfigurationPtrOutput() SingleServerConfigurationPtrOutput {
	return o
}

func (o SingleServerConfigurationPtrOutput) ToSingleServerConfigurationPtrOutputWithContext(ctx context.Context) SingleServerConfigurationPtrOutput {
	return o
}

func (o SingleServerConfigurationPtrOutput) Elem() SingleServerConfigurationOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) SingleServerConfiguration {
		if v != nil {
			return *v
		}
		var ret SingleServerConfiguration
		return ret
	}).(SingleServerConfigurationOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o SingleServerConfigurationPtrOutput) AppResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AppResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o SingleServerConfigurationPtrOutput) CustomResourceNames() SingleServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *SingleServerFullResourceNames {
		if v == nil {
			return nil
		}
		return v.CustomResourceNames
	}).(SingleServerFullResourceNamesPtrOutput)
}

// The database type.
func (o SingleServerConfigurationPtrOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o SingleServerConfigurationPtrOutput) DbDiskConfiguration() DiskConfigurationPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *DiskConfiguration {
		if v == nil {
			return nil
		}
		return v.DbDiskConfiguration
	}).(DiskConfigurationPtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'SingleServer'.
func (o SingleServerConfigurationPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// Network configuration for the server
func (o SingleServerConfigurationPtrOutput) NetworkConfiguration() NetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *NetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(NetworkConfigurationPtrOutput)
}

// The subnet id.
func (o SingleServerConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o SingleServerConfigurationPtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationPtrOutput {
	return o.ApplyT(func(v *SingleServerConfiguration) *VirtualMachineConfiguration {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationPtrOutput)
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfigurationResponse struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *SingleServerFullResourceNamesResponse `pulumi:"customResourceNames"`
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DbDiskConfiguration *DiskConfigurationResponse `pulumi:"dbDiskConfiguration"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'SingleServer'.
	DeploymentType string `pulumi:"deploymentType"`
	// Network configuration for the server
	NetworkConfiguration *NetworkConfigurationResponse `pulumi:"networkConfiguration"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// Defaults sets the appropriate defaults for SingleServerConfigurationResponse
func (val *SingleServerConfigurationResponse) Defaults() *SingleServerConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SingleServerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerConfigurationResponse)(nil)).Elem()
}

func (o SingleServerConfigurationResponseOutput) ToSingleServerConfigurationResponseOutput() SingleServerConfigurationResponseOutput {
	return o
}

func (o SingleServerConfigurationResponseOutput) ToSingleServerConfigurationResponseOutputWithContext(ctx context.Context) SingleServerConfigurationResponseOutput {
	return o
}

// The application resource group where SAP system resources will be deployed.
func (o SingleServerConfigurationResponseOutput) AppResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) string { return v.AppResourceGroup }).(pulumi.StringOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o SingleServerConfigurationResponseOutput) CustomResourceNames() SingleServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) *SingleServerFullResourceNamesResponse {
		return v.CustomResourceNames
	}).(SingleServerFullResourceNamesResponsePtrOutput)
}

// The database type.
func (o SingleServerConfigurationResponseOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) *string { return v.DatabaseType }).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o SingleServerConfigurationResponseOutput) DbDiskConfiguration() DiskConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) *DiskConfigurationResponse { return v.DbDiskConfiguration }).(DiskConfigurationResponsePtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'SingleServer'.
func (o SingleServerConfigurationResponseOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// Network configuration for the server
func (o SingleServerConfigurationResponseOutput) NetworkConfiguration() NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) *NetworkConfigurationResponse { return v.NetworkConfiguration }).(NetworkConfigurationResponsePtrOutput)
}

// The subnet id.
func (o SingleServerConfigurationResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Gets or sets the virtual machine configuration.
func (o SingleServerConfigurationResponseOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v SingleServerConfigurationResponse) VirtualMachineConfigurationResponse {
		return v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponseOutput)
}

type SingleServerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SingleServerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerConfigurationResponse)(nil)).Elem()
}

func (o SingleServerConfigurationResponsePtrOutput) ToSingleServerConfigurationResponsePtrOutput() SingleServerConfigurationResponsePtrOutput {
	return o
}

func (o SingleServerConfigurationResponsePtrOutput) ToSingleServerConfigurationResponsePtrOutputWithContext(ctx context.Context) SingleServerConfigurationResponsePtrOutput {
	return o
}

func (o SingleServerConfigurationResponsePtrOutput) Elem() SingleServerConfigurationResponseOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) SingleServerConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SingleServerConfigurationResponse
		return ret
	}).(SingleServerConfigurationResponseOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o SingleServerConfigurationResponsePtrOutput) AppResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o SingleServerConfigurationResponsePtrOutput) CustomResourceNames() SingleServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *SingleServerFullResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.CustomResourceNames
	}).(SingleServerFullResourceNamesResponsePtrOutput)
}

// The database type.
func (o SingleServerConfigurationResponsePtrOutput) DatabaseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the disk configuration.
func (o SingleServerConfigurationResponsePtrOutput) DbDiskConfiguration() DiskConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *DiskConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.DbDiskConfiguration
	}).(DiskConfigurationResponsePtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'SingleServer'.
func (o SingleServerConfigurationResponsePtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// Network configuration for the server
func (o SingleServerConfigurationResponsePtrOutput) NetworkConfiguration() NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *NetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(NetworkConfigurationResponsePtrOutput)
}

// The subnet id.
func (o SingleServerConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the virtual machine configuration.
func (o SingleServerConfigurationResponsePtrOutput) VirtualMachineConfiguration() VirtualMachineConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *SingleServerConfigurationResponse) *VirtualMachineConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.VirtualMachineConfiguration
	}).(VirtualMachineConfigurationResponsePtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNames struct {
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for virtual machine and related resources.
	VirtualMachine *VirtualMachineResourceNames `pulumi:"virtualMachine"`
}

// SingleServerFullResourceNamesInput is an input type that accepts SingleServerFullResourceNamesArgs and SingleServerFullResourceNamesOutput values.
// You can construct a concrete instance of `SingleServerFullResourceNamesInput` via:
//
//	SingleServerFullResourceNamesArgs{...}
type SingleServerFullResourceNamesInput interface {
	pulumi.Input

	ToSingleServerFullResourceNamesOutput() SingleServerFullResourceNamesOutput
	ToSingleServerFullResourceNamesOutputWithContext(context.Context) SingleServerFullResourceNamesOutput
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNamesArgs struct {
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType pulumi.StringInput `pulumi:"namingPatternType"`
	// The resource names object for virtual machine and related resources.
	VirtualMachine VirtualMachineResourceNamesPtrInput `pulumi:"virtualMachine"`
}

func (SingleServerFullResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerFullResourceNames)(nil)).Elem()
}

func (i SingleServerFullResourceNamesArgs) ToSingleServerFullResourceNamesOutput() SingleServerFullResourceNamesOutput {
	return i.ToSingleServerFullResourceNamesOutputWithContext(context.Background())
}

func (i SingleServerFullResourceNamesArgs) ToSingleServerFullResourceNamesOutputWithContext(ctx context.Context) SingleServerFullResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerFullResourceNamesOutput)
}

func (i SingleServerFullResourceNamesArgs) ToSingleServerFullResourceNamesPtrOutput() SingleServerFullResourceNamesPtrOutput {
	return i.ToSingleServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i SingleServerFullResourceNamesArgs) ToSingleServerFullResourceNamesPtrOutputWithContext(ctx context.Context) SingleServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerFullResourceNamesOutput).ToSingleServerFullResourceNamesPtrOutputWithContext(ctx)
}

// SingleServerFullResourceNamesPtrInput is an input type that accepts SingleServerFullResourceNamesArgs, SingleServerFullResourceNamesPtr and SingleServerFullResourceNamesPtrOutput values.
// You can construct a concrete instance of `SingleServerFullResourceNamesPtrInput` via:
//
//	        SingleServerFullResourceNamesArgs{...}
//
//	or:
//
//	        nil
type SingleServerFullResourceNamesPtrInput interface {
	pulumi.Input

	ToSingleServerFullResourceNamesPtrOutput() SingleServerFullResourceNamesPtrOutput
	ToSingleServerFullResourceNamesPtrOutputWithContext(context.Context) SingleServerFullResourceNamesPtrOutput
}

type singleServerFullResourceNamesPtrType SingleServerFullResourceNamesArgs

func SingleServerFullResourceNamesPtr(v *SingleServerFullResourceNamesArgs) SingleServerFullResourceNamesPtrInput {
	return (*singleServerFullResourceNamesPtrType)(v)
}

func (*singleServerFullResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerFullResourceNames)(nil)).Elem()
}

func (i *singleServerFullResourceNamesPtrType) ToSingleServerFullResourceNamesPtrOutput() SingleServerFullResourceNamesPtrOutput {
	return i.ToSingleServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i *singleServerFullResourceNamesPtrType) ToSingleServerFullResourceNamesPtrOutputWithContext(ctx context.Context) SingleServerFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleServerFullResourceNamesPtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNamesOutput struct{ *pulumi.OutputState }

func (SingleServerFullResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerFullResourceNames)(nil)).Elem()
}

func (o SingleServerFullResourceNamesOutput) ToSingleServerFullResourceNamesOutput() SingleServerFullResourceNamesOutput {
	return o
}

func (o SingleServerFullResourceNamesOutput) ToSingleServerFullResourceNamesOutputWithContext(ctx context.Context) SingleServerFullResourceNamesOutput {
	return o
}

func (o SingleServerFullResourceNamesOutput) ToSingleServerFullResourceNamesPtrOutput() SingleServerFullResourceNamesPtrOutput {
	return o.ToSingleServerFullResourceNamesPtrOutputWithContext(context.Background())
}

func (o SingleServerFullResourceNamesOutput) ToSingleServerFullResourceNamesPtrOutputWithContext(ctx context.Context) SingleServerFullResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleServerFullResourceNames) *SingleServerFullResourceNames {
		return &v
	}).(SingleServerFullResourceNamesPtrOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o SingleServerFullResourceNamesOutput) NamingPatternType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerFullResourceNames) string { return v.NamingPatternType }).(pulumi.StringOutput)
}

// The resource names object for virtual machine and related resources.
func (o SingleServerFullResourceNamesOutput) VirtualMachine() VirtualMachineResourceNamesPtrOutput {
	return o.ApplyT(func(v SingleServerFullResourceNames) *VirtualMachineResourceNames { return v.VirtualMachine }).(VirtualMachineResourceNamesPtrOutput)
}

type SingleServerFullResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (SingleServerFullResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerFullResourceNames)(nil)).Elem()
}

func (o SingleServerFullResourceNamesPtrOutput) ToSingleServerFullResourceNamesPtrOutput() SingleServerFullResourceNamesPtrOutput {
	return o
}

func (o SingleServerFullResourceNamesPtrOutput) ToSingleServerFullResourceNamesPtrOutputWithContext(ctx context.Context) SingleServerFullResourceNamesPtrOutput {
	return o
}

func (o SingleServerFullResourceNamesPtrOutput) Elem() SingleServerFullResourceNamesOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNames) SingleServerFullResourceNames {
		if v != nil {
			return *v
		}
		var ret SingleServerFullResourceNames
		return ret
	}).(SingleServerFullResourceNamesOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o SingleServerFullResourceNamesPtrOutput) NamingPatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNames) *string {
		if v == nil {
			return nil
		}
		return &v.NamingPatternType
	}).(pulumi.StringPtrOutput)
}

// The resource names object for virtual machine and related resources.
func (o SingleServerFullResourceNamesPtrOutput) VirtualMachine() VirtualMachineResourceNamesPtrOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNames) *VirtualMachineResourceNames {
		if v == nil {
			return nil
		}
		return v.VirtualMachine
	}).(VirtualMachineResourceNamesPtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNamesResponse struct {
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for virtual machine and related resources.
	VirtualMachine *VirtualMachineResourceNamesResponse `pulumi:"virtualMachine"`
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (SingleServerFullResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleServerFullResourceNamesResponse)(nil)).Elem()
}

func (o SingleServerFullResourceNamesResponseOutput) ToSingleServerFullResourceNamesResponseOutput() SingleServerFullResourceNamesResponseOutput {
	return o
}

func (o SingleServerFullResourceNamesResponseOutput) ToSingleServerFullResourceNamesResponseOutputWithContext(ctx context.Context) SingleServerFullResourceNamesResponseOutput {
	return o
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o SingleServerFullResourceNamesResponseOutput) NamingPatternType() pulumi.StringOutput {
	return o.ApplyT(func(v SingleServerFullResourceNamesResponse) string { return v.NamingPatternType }).(pulumi.StringOutput)
}

// The resource names object for virtual machine and related resources.
func (o SingleServerFullResourceNamesResponseOutput) VirtualMachine() VirtualMachineResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v SingleServerFullResourceNamesResponse) *VirtualMachineResourceNamesResponse {
		return v.VirtualMachine
	}).(VirtualMachineResourceNamesResponsePtrOutput)
}

type SingleServerFullResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (SingleServerFullResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleServerFullResourceNamesResponse)(nil)).Elem()
}

func (o SingleServerFullResourceNamesResponsePtrOutput) ToSingleServerFullResourceNamesResponsePtrOutput() SingleServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o SingleServerFullResourceNamesResponsePtrOutput) ToSingleServerFullResourceNamesResponsePtrOutputWithContext(ctx context.Context) SingleServerFullResourceNamesResponsePtrOutput {
	return o
}

func (o SingleServerFullResourceNamesResponsePtrOutput) Elem() SingleServerFullResourceNamesResponseOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNamesResponse) SingleServerFullResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret SingleServerFullResourceNamesResponse
		return ret
	}).(SingleServerFullResourceNamesResponseOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o SingleServerFullResourceNamesResponsePtrOutput) NamingPatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NamingPatternType
	}).(pulumi.StringPtrOutput)
}

// The resource names object for virtual machine and related resources.
func (o SingleServerFullResourceNamesResponsePtrOutput) VirtualMachine() VirtualMachineResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *SingleServerFullResourceNamesResponse) *VirtualMachineResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachine
	}).(VirtualMachineResourceNamesResponsePtrOutput)
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'Skip'.
	ConfigurationType string `pulumi:"configurationType"`
}

// SkipFileShareConfigurationInput is an input type that accepts SkipFileShareConfigurationArgs and SkipFileShareConfigurationOutput values.
// You can construct a concrete instance of `SkipFileShareConfigurationInput` via:
//
//	SkipFileShareConfigurationArgs{...}
type SkipFileShareConfigurationInput interface {
	pulumi.Input

	ToSkipFileShareConfigurationOutput() SkipFileShareConfigurationOutput
	ToSkipFileShareConfigurationOutputWithContext(context.Context) SkipFileShareConfigurationOutput
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfigurationArgs struct {
	// The type of file share config.
	// Expected value is 'Skip'.
	ConfigurationType pulumi.StringInput `pulumi:"configurationType"`
}

func (SkipFileShareConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipFileShareConfiguration)(nil)).Elem()
}

func (i SkipFileShareConfigurationArgs) ToSkipFileShareConfigurationOutput() SkipFileShareConfigurationOutput {
	return i.ToSkipFileShareConfigurationOutputWithContext(context.Background())
}

func (i SkipFileShareConfigurationArgs) ToSkipFileShareConfigurationOutputWithContext(ctx context.Context) SkipFileShareConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipFileShareConfigurationOutput)
}

func (i SkipFileShareConfigurationArgs) ToSkipFileShareConfigurationPtrOutput() SkipFileShareConfigurationPtrOutput {
	return i.ToSkipFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i SkipFileShareConfigurationArgs) ToSkipFileShareConfigurationPtrOutputWithContext(ctx context.Context) SkipFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipFileShareConfigurationOutput).ToSkipFileShareConfigurationPtrOutputWithContext(ctx)
}

// SkipFileShareConfigurationPtrInput is an input type that accepts SkipFileShareConfigurationArgs, SkipFileShareConfigurationPtr and SkipFileShareConfigurationPtrOutput values.
// You can construct a concrete instance of `SkipFileShareConfigurationPtrInput` via:
//
//	        SkipFileShareConfigurationArgs{...}
//
//	or:
//
//	        nil
type SkipFileShareConfigurationPtrInput interface {
	pulumi.Input

	ToSkipFileShareConfigurationPtrOutput() SkipFileShareConfigurationPtrOutput
	ToSkipFileShareConfigurationPtrOutputWithContext(context.Context) SkipFileShareConfigurationPtrOutput
}

type skipFileShareConfigurationPtrType SkipFileShareConfigurationArgs

func SkipFileShareConfigurationPtr(v *SkipFileShareConfigurationArgs) SkipFileShareConfigurationPtrInput {
	return (*skipFileShareConfigurationPtrType)(v)
}

func (*skipFileShareConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipFileShareConfiguration)(nil)).Elem()
}

func (i *skipFileShareConfigurationPtrType) ToSkipFileShareConfigurationPtrOutput() SkipFileShareConfigurationPtrOutput {
	return i.ToSkipFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (i *skipFileShareConfigurationPtrType) ToSkipFileShareConfigurationPtrOutputWithContext(ctx context.Context) SkipFileShareConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkipFileShareConfigurationPtrOutput)
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfigurationOutput struct{ *pulumi.OutputState }

func (SkipFileShareConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipFileShareConfiguration)(nil)).Elem()
}

func (o SkipFileShareConfigurationOutput) ToSkipFileShareConfigurationOutput() SkipFileShareConfigurationOutput {
	return o
}

func (o SkipFileShareConfigurationOutput) ToSkipFileShareConfigurationOutputWithContext(ctx context.Context) SkipFileShareConfigurationOutput {
	return o
}

func (o SkipFileShareConfigurationOutput) ToSkipFileShareConfigurationPtrOutput() SkipFileShareConfigurationPtrOutput {
	return o.ToSkipFileShareConfigurationPtrOutputWithContext(context.Background())
}

func (o SkipFileShareConfigurationOutput) ToSkipFileShareConfigurationPtrOutputWithContext(ctx context.Context) SkipFileShareConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkipFileShareConfiguration) *SkipFileShareConfiguration {
		return &v
	}).(SkipFileShareConfigurationPtrOutput)
}

// The type of file share config.
// Expected value is 'Skip'.
func (o SkipFileShareConfigurationOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v SkipFileShareConfiguration) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

type SkipFileShareConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SkipFileShareConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipFileShareConfiguration)(nil)).Elem()
}

func (o SkipFileShareConfigurationPtrOutput) ToSkipFileShareConfigurationPtrOutput() SkipFileShareConfigurationPtrOutput {
	return o
}

func (o SkipFileShareConfigurationPtrOutput) ToSkipFileShareConfigurationPtrOutputWithContext(ctx context.Context) SkipFileShareConfigurationPtrOutput {
	return o
}

func (o SkipFileShareConfigurationPtrOutput) Elem() SkipFileShareConfigurationOutput {
	return o.ApplyT(func(v *SkipFileShareConfiguration) SkipFileShareConfiguration {
		if v != nil {
			return *v
		}
		var ret SkipFileShareConfiguration
		return ret
	}).(SkipFileShareConfigurationOutput)
}

// The type of file share config.
// Expected value is 'Skip'.
func (o SkipFileShareConfigurationPtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkipFileShareConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'Skip'.
	ConfigurationType string `pulumi:"configurationType"`
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SkipFileShareConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkipFileShareConfigurationResponse)(nil)).Elem()
}

func (o SkipFileShareConfigurationResponseOutput) ToSkipFileShareConfigurationResponseOutput() SkipFileShareConfigurationResponseOutput {
	return o
}

func (o SkipFileShareConfigurationResponseOutput) ToSkipFileShareConfigurationResponseOutputWithContext(ctx context.Context) SkipFileShareConfigurationResponseOutput {
	return o
}

// The type of file share config.
// Expected value is 'Skip'.
func (o SkipFileShareConfigurationResponseOutput) ConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v SkipFileShareConfigurationResponse) string { return v.ConfigurationType }).(pulumi.StringOutput)
}

type SkipFileShareConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SkipFileShareConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkipFileShareConfigurationResponse)(nil)).Elem()
}

func (o SkipFileShareConfigurationResponsePtrOutput) ToSkipFileShareConfigurationResponsePtrOutput() SkipFileShareConfigurationResponsePtrOutput {
	return o
}

func (o SkipFileShareConfigurationResponsePtrOutput) ToSkipFileShareConfigurationResponsePtrOutputWithContext(ctx context.Context) SkipFileShareConfigurationResponsePtrOutput {
	return o
}

func (o SkipFileShareConfigurationResponsePtrOutput) Elem() SkipFileShareConfigurationResponseOutput {
	return o.ApplyT(func(v *SkipFileShareConfigurationResponse) SkipFileShareConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SkipFileShareConfigurationResponse
		return ret
	}).(SkipFileShareConfigurationResponseOutput)
}

// The type of file share config.
// Expected value is 'Skip'.
func (o SkipFileShareConfigurationResponsePtrOutput) ConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkipFileShareConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigurationType
	}).(pulumi.StringPtrOutput)
}

// Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetails struct {
	// Instant RP details for the snapshot.
	InstantRPDetails *string `pulumi:"instantRPDetails"`
	// Retention range for instant Rp in days.
	InstantRpRetentionRangeInDays *int `pulumi:"instantRpRetentionRangeInDays"`
	// User Assigned managed identity details used for snapshot policy.
	UserAssignedManagedIdentityDetails *UserAssignedManagedIdentityDetails `pulumi:"userAssignedManagedIdentityDetails"`
}

// SnapshotBackupAdditionalDetailsInput is an input type that accepts SnapshotBackupAdditionalDetailsArgs and SnapshotBackupAdditionalDetailsOutput values.
// You can construct a concrete instance of `SnapshotBackupAdditionalDetailsInput` via:
//
//	SnapshotBackupAdditionalDetailsArgs{...}
type SnapshotBackupAdditionalDetailsInput interface {
	pulumi.Input

	ToSnapshotBackupAdditionalDetailsOutput() SnapshotBackupAdditionalDetailsOutput
	ToSnapshotBackupAdditionalDetailsOutputWithContext(context.Context) SnapshotBackupAdditionalDetailsOutput
}

// Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetailsArgs struct {
	// Instant RP details for the snapshot.
	InstantRPDetails pulumi.StringPtrInput `pulumi:"instantRPDetails"`
	// Retention range for instant Rp in days.
	InstantRpRetentionRangeInDays pulumi.IntPtrInput `pulumi:"instantRpRetentionRangeInDays"`
	// User Assigned managed identity details used for snapshot policy.
	UserAssignedManagedIdentityDetails UserAssignedManagedIdentityDetailsPtrInput `pulumi:"userAssignedManagedIdentityDetails"`
}

func (SnapshotBackupAdditionalDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotBackupAdditionalDetails)(nil)).Elem()
}

func (i SnapshotBackupAdditionalDetailsArgs) ToSnapshotBackupAdditionalDetailsOutput() SnapshotBackupAdditionalDetailsOutput {
	return i.ToSnapshotBackupAdditionalDetailsOutputWithContext(context.Background())
}

func (i SnapshotBackupAdditionalDetailsArgs) ToSnapshotBackupAdditionalDetailsOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBackupAdditionalDetailsOutput)
}

func (i SnapshotBackupAdditionalDetailsArgs) ToSnapshotBackupAdditionalDetailsPtrOutput() SnapshotBackupAdditionalDetailsPtrOutput {
	return i.ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (i SnapshotBackupAdditionalDetailsArgs) ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBackupAdditionalDetailsOutput).ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(ctx)
}

// SnapshotBackupAdditionalDetailsPtrInput is an input type that accepts SnapshotBackupAdditionalDetailsArgs, SnapshotBackupAdditionalDetailsPtr and SnapshotBackupAdditionalDetailsPtrOutput values.
// You can construct a concrete instance of `SnapshotBackupAdditionalDetailsPtrInput` via:
//
//	        SnapshotBackupAdditionalDetailsArgs{...}
//
//	or:
//
//	        nil
type SnapshotBackupAdditionalDetailsPtrInput interface {
	pulumi.Input

	ToSnapshotBackupAdditionalDetailsPtrOutput() SnapshotBackupAdditionalDetailsPtrOutput
	ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(context.Context) SnapshotBackupAdditionalDetailsPtrOutput
}

type snapshotBackupAdditionalDetailsPtrType SnapshotBackupAdditionalDetailsArgs

func SnapshotBackupAdditionalDetailsPtr(v *SnapshotBackupAdditionalDetailsArgs) SnapshotBackupAdditionalDetailsPtrInput {
	return (*snapshotBackupAdditionalDetailsPtrType)(v)
}

func (*snapshotBackupAdditionalDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotBackupAdditionalDetails)(nil)).Elem()
}

func (i *snapshotBackupAdditionalDetailsPtrType) ToSnapshotBackupAdditionalDetailsPtrOutput() SnapshotBackupAdditionalDetailsPtrOutput {
	return i.ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (i *snapshotBackupAdditionalDetailsPtrType) ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotBackupAdditionalDetailsPtrOutput)
}

// Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetailsOutput struct{ *pulumi.OutputState }

func (SnapshotBackupAdditionalDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotBackupAdditionalDetails)(nil)).Elem()
}

func (o SnapshotBackupAdditionalDetailsOutput) ToSnapshotBackupAdditionalDetailsOutput() SnapshotBackupAdditionalDetailsOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsOutput) ToSnapshotBackupAdditionalDetailsOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsOutput) ToSnapshotBackupAdditionalDetailsPtrOutput() SnapshotBackupAdditionalDetailsPtrOutput {
	return o.ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(context.Background())
}

func (o SnapshotBackupAdditionalDetailsOutput) ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SnapshotBackupAdditionalDetails) *SnapshotBackupAdditionalDetails {
		return &v
	}).(SnapshotBackupAdditionalDetailsPtrOutput)
}

// Instant RP details for the snapshot.
func (o SnapshotBackupAdditionalDetailsOutput) InstantRPDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetails) *string { return v.InstantRPDetails }).(pulumi.StringPtrOutput)
}

// Retention range for instant Rp in days.
func (o SnapshotBackupAdditionalDetailsOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetails) *int { return v.InstantRpRetentionRangeInDays }).(pulumi.IntPtrOutput)
}

// User Assigned managed identity details used for snapshot policy.
func (o SnapshotBackupAdditionalDetailsOutput) UserAssignedManagedIdentityDetails() UserAssignedManagedIdentityDetailsPtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetails) *UserAssignedManagedIdentityDetails {
		return v.UserAssignedManagedIdentityDetails
	}).(UserAssignedManagedIdentityDetailsPtrOutput)
}

type SnapshotBackupAdditionalDetailsPtrOutput struct{ *pulumi.OutputState }

func (SnapshotBackupAdditionalDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotBackupAdditionalDetails)(nil)).Elem()
}

func (o SnapshotBackupAdditionalDetailsPtrOutput) ToSnapshotBackupAdditionalDetailsPtrOutput() SnapshotBackupAdditionalDetailsPtrOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsPtrOutput) ToSnapshotBackupAdditionalDetailsPtrOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsPtrOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsPtrOutput) Elem() SnapshotBackupAdditionalDetailsOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetails) SnapshotBackupAdditionalDetails {
		if v != nil {
			return *v
		}
		var ret SnapshotBackupAdditionalDetails
		return ret
	}).(SnapshotBackupAdditionalDetailsOutput)
}

// Instant RP details for the snapshot.
func (o SnapshotBackupAdditionalDetailsPtrOutput) InstantRPDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetails) *string {
		if v == nil {
			return nil
		}
		return v.InstantRPDetails
	}).(pulumi.StringPtrOutput)
}

// Retention range for instant Rp in days.
func (o SnapshotBackupAdditionalDetailsPtrOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetails) *int {
		if v == nil {
			return nil
		}
		return v.InstantRpRetentionRangeInDays
	}).(pulumi.IntPtrOutput)
}

// User Assigned managed identity details used for snapshot policy.
func (o SnapshotBackupAdditionalDetailsPtrOutput) UserAssignedManagedIdentityDetails() UserAssignedManagedIdentityDetailsPtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetails) *UserAssignedManagedIdentityDetails {
		if v == nil {
			return nil
		}
		return v.UserAssignedManagedIdentityDetails
	}).(UserAssignedManagedIdentityDetailsPtrOutput)
}

// Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetailsResponse struct {
	// Instant RP details for the snapshot.
	InstantRPDetails *string `pulumi:"instantRPDetails"`
	// Retention range for instant Rp in days.
	InstantRpRetentionRangeInDays *int `pulumi:"instantRpRetentionRangeInDays"`
	// User Assigned managed identity details used for snapshot policy.
	UserAssignedManagedIdentityDetails *UserAssignedManagedIdentityDetailsResponse `pulumi:"userAssignedManagedIdentityDetails"`
}

// Snapshot Backup related fields for WorkloadType SAP Hana system
type SnapshotBackupAdditionalDetailsResponseOutput struct{ *pulumi.OutputState }

func (SnapshotBackupAdditionalDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotBackupAdditionalDetailsResponse)(nil)).Elem()
}

func (o SnapshotBackupAdditionalDetailsResponseOutput) ToSnapshotBackupAdditionalDetailsResponseOutput() SnapshotBackupAdditionalDetailsResponseOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsResponseOutput) ToSnapshotBackupAdditionalDetailsResponseOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsResponseOutput {
	return o
}

// Instant RP details for the snapshot.
func (o SnapshotBackupAdditionalDetailsResponseOutput) InstantRPDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetailsResponse) *string { return v.InstantRPDetails }).(pulumi.StringPtrOutput)
}

// Retention range for instant Rp in days.
func (o SnapshotBackupAdditionalDetailsResponseOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetailsResponse) *int { return v.InstantRpRetentionRangeInDays }).(pulumi.IntPtrOutput)
}

// User Assigned managed identity details used for snapshot policy.
func (o SnapshotBackupAdditionalDetailsResponseOutput) UserAssignedManagedIdentityDetails() UserAssignedManagedIdentityDetailsResponsePtrOutput {
	return o.ApplyT(func(v SnapshotBackupAdditionalDetailsResponse) *UserAssignedManagedIdentityDetailsResponse {
		return v.UserAssignedManagedIdentityDetails
	}).(UserAssignedManagedIdentityDetailsResponsePtrOutput)
}

type SnapshotBackupAdditionalDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (SnapshotBackupAdditionalDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotBackupAdditionalDetailsResponse)(nil)).Elem()
}

func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) ToSnapshotBackupAdditionalDetailsResponsePtrOutput() SnapshotBackupAdditionalDetailsResponsePtrOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) ToSnapshotBackupAdditionalDetailsResponsePtrOutputWithContext(ctx context.Context) SnapshotBackupAdditionalDetailsResponsePtrOutput {
	return o
}

func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) Elem() SnapshotBackupAdditionalDetailsResponseOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetailsResponse) SnapshotBackupAdditionalDetailsResponse {
		if v != nil {
			return *v
		}
		var ret SnapshotBackupAdditionalDetailsResponse
		return ret
	}).(SnapshotBackupAdditionalDetailsResponseOutput)
}

// Instant RP details for the snapshot.
func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) InstantRPDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstantRPDetails
	}).(pulumi.StringPtrOutput)
}

// Retention range for instant Rp in days.
func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetailsResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstantRpRetentionRangeInDays
	}).(pulumi.IntPtrOutput)
}

// User Assigned managed identity details used for snapshot policy.
func (o SnapshotBackupAdditionalDetailsResponsePtrOutput) UserAssignedManagedIdentityDetails() UserAssignedManagedIdentityDetailsResponsePtrOutput {
	return o.ApplyT(func(v *SnapshotBackupAdditionalDetailsResponse) *UserAssignedManagedIdentityDetailsResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedManagedIdentityDetails
	}).(UserAssignedManagedIdentityDetailsResponsePtrOutput)
}

// Defines the SQL Backup data for a virtual instance for SAP.
type SqlBackupData struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyProperties `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'SQL'.
	BackupType string `pulumi:"backupType"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
}

// SqlBackupDataInput is an input type that accepts SqlBackupDataArgs and SqlBackupDataOutput values.
// You can construct a concrete instance of `SqlBackupDataInput` via:
//
//	SqlBackupDataArgs{...}
type SqlBackupDataInput interface {
	pulumi.Input

	ToSqlBackupDataOutput() SqlBackupDataOutput
	ToSqlBackupDataOutputWithContext(context.Context) SqlBackupDataOutput
}

// Defines the SQL Backup data for a virtual instance for SAP.
type SqlBackupDataArgs struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyPropertiesInput `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'SQL'.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault pulumi.Input `pulumi:"recoveryServicesVault"`
}

func (SqlBackupDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlBackupData)(nil)).Elem()
}

func (i SqlBackupDataArgs) ToSqlBackupDataOutput() SqlBackupDataOutput {
	return i.ToSqlBackupDataOutputWithContext(context.Background())
}

func (i SqlBackupDataArgs) ToSqlBackupDataOutputWithContext(ctx context.Context) SqlBackupDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlBackupDataOutput)
}

func (i SqlBackupDataArgs) ToSqlBackupDataPtrOutput() SqlBackupDataPtrOutput {
	return i.ToSqlBackupDataPtrOutputWithContext(context.Background())
}

func (i SqlBackupDataArgs) ToSqlBackupDataPtrOutputWithContext(ctx context.Context) SqlBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlBackupDataOutput).ToSqlBackupDataPtrOutputWithContext(ctx)
}

// SqlBackupDataPtrInput is an input type that accepts SqlBackupDataArgs, SqlBackupDataPtr and SqlBackupDataPtrOutput values.
// You can construct a concrete instance of `SqlBackupDataPtrInput` via:
//
//	        SqlBackupDataArgs{...}
//
//	or:
//
//	        nil
type SqlBackupDataPtrInput interface {
	pulumi.Input

	ToSqlBackupDataPtrOutput() SqlBackupDataPtrOutput
	ToSqlBackupDataPtrOutputWithContext(context.Context) SqlBackupDataPtrOutput
}

type sqlBackupDataPtrType SqlBackupDataArgs

func SqlBackupDataPtr(v *SqlBackupDataArgs) SqlBackupDataPtrInput {
	return (*sqlBackupDataPtrType)(v)
}

func (*sqlBackupDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlBackupData)(nil)).Elem()
}

func (i *sqlBackupDataPtrType) ToSqlBackupDataPtrOutput() SqlBackupDataPtrOutput {
	return i.ToSqlBackupDataPtrOutputWithContext(context.Background())
}

func (i *sqlBackupDataPtrType) ToSqlBackupDataPtrOutputWithContext(ctx context.Context) SqlBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlBackupDataPtrOutput)
}

// Defines the SQL Backup data for a virtual instance for SAP.
type SqlBackupDataOutput struct{ *pulumi.OutputState }

func (SqlBackupDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlBackupData)(nil)).Elem()
}

func (o SqlBackupDataOutput) ToSqlBackupDataOutput() SqlBackupDataOutput {
	return o
}

func (o SqlBackupDataOutput) ToSqlBackupDataOutputWithContext(ctx context.Context) SqlBackupDataOutput {
	return o
}

func (o SqlBackupDataOutput) ToSqlBackupDataPtrOutput() SqlBackupDataPtrOutput {
	return o.ToSqlBackupDataPtrOutputWithContext(context.Background())
}

func (o SqlBackupDataOutput) ToSqlBackupDataPtrOutputWithContext(ctx context.Context) SqlBackupDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlBackupData) *SqlBackupData {
		return &v
	}).(SqlBackupDataPtrOutput)
}

// Defines the policy properties for database backup.
func (o SqlBackupDataOutput) BackupPolicy() DBBackupPolicyPropertiesOutput {
	return o.ApplyT(func(v SqlBackupData) DBBackupPolicyProperties { return v.BackupPolicy }).(DBBackupPolicyPropertiesOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'SQL'.
func (o SqlBackupDataOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v SqlBackupData) string { return v.BackupType }).(pulumi.StringOutput)
}

// The properties of the recovery services vault used for backup.
func (o SqlBackupDataOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlBackupData) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

type SqlBackupDataPtrOutput struct{ *pulumi.OutputState }

func (SqlBackupDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlBackupData)(nil)).Elem()
}

func (o SqlBackupDataPtrOutput) ToSqlBackupDataPtrOutput() SqlBackupDataPtrOutput {
	return o
}

func (o SqlBackupDataPtrOutput) ToSqlBackupDataPtrOutputWithContext(ctx context.Context) SqlBackupDataPtrOutput {
	return o
}

func (o SqlBackupDataPtrOutput) Elem() SqlBackupDataOutput {
	return o.ApplyT(func(v *SqlBackupData) SqlBackupData {
		if v != nil {
			return *v
		}
		var ret SqlBackupData
		return ret
	}).(SqlBackupDataOutput)
}

// Defines the policy properties for database backup.
func (o SqlBackupDataPtrOutput) BackupPolicy() DBBackupPolicyPropertiesPtrOutput {
	return o.ApplyT(func(v *SqlBackupData) *DBBackupPolicyProperties {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(DBBackupPolicyPropertiesPtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'SQL'.
func (o SqlBackupDataPtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlBackupData) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o SqlBackupDataPtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlBackupData) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// Defines the SQL Backup data for a virtual instance for SAP.
type SqlBackupDataResponse struct {
	// Defines the policy properties for database backup.
	BackupPolicy DBBackupPolicyPropertiesResponse `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'SQL'.
	BackupType string `pulumi:"backupType"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
}

// Defines the SQL Backup data for a virtual instance for SAP.
type SqlBackupDataResponseOutput struct{ *pulumi.OutputState }

func (SqlBackupDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlBackupDataResponse)(nil)).Elem()
}

func (o SqlBackupDataResponseOutput) ToSqlBackupDataResponseOutput() SqlBackupDataResponseOutput {
	return o
}

func (o SqlBackupDataResponseOutput) ToSqlBackupDataResponseOutputWithContext(ctx context.Context) SqlBackupDataResponseOutput {
	return o
}

// Defines the policy properties for database backup.
func (o SqlBackupDataResponseOutput) BackupPolicy() DBBackupPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v SqlBackupDataResponse) DBBackupPolicyPropertiesResponse { return v.BackupPolicy }).(DBBackupPolicyPropertiesResponseOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'SQL'.
func (o SqlBackupDataResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v SqlBackupDataResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// The properties of the recovery services vault used for backup.
func (o SqlBackupDataResponseOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v SqlBackupDataResponse) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

type SqlBackupDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SqlBackupDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlBackupDataResponse)(nil)).Elem()
}

func (o SqlBackupDataResponsePtrOutput) ToSqlBackupDataResponsePtrOutput() SqlBackupDataResponsePtrOutput {
	return o
}

func (o SqlBackupDataResponsePtrOutput) ToSqlBackupDataResponsePtrOutputWithContext(ctx context.Context) SqlBackupDataResponsePtrOutput {
	return o
}

func (o SqlBackupDataResponsePtrOutput) Elem() SqlBackupDataResponseOutput {
	return o.ApplyT(func(v *SqlBackupDataResponse) SqlBackupDataResponse {
		if v != nil {
			return *v
		}
		var ret SqlBackupDataResponse
		return ret
	}).(SqlBackupDataResponseOutput)
}

// Defines the policy properties for database backup.
func (o SqlBackupDataResponsePtrOutput) BackupPolicy() DBBackupPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SqlBackupDataResponse) *DBBackupPolicyPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(DBBackupPolicyPropertiesResponsePtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'SQL'.
func (o SqlBackupDataResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlBackupDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o SqlBackupDataResponsePtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *SqlBackupDataResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKey `pulumi:"publicKeys"`
}

// SshConfigurationInput is an input type that accepts SshConfigurationArgs and SshConfigurationOutput values.
// You can construct a concrete instance of `SshConfigurationInput` via:
//
//	SshConfigurationArgs{...}
type SshConfigurationInput interface {
	pulumi.Input

	ToSshConfigurationOutput() SshConfigurationOutput
	ToSshConfigurationOutputWithContext(context.Context) SshConfigurationOutput
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationArgs struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys SshPublicKeyArrayInput `pulumi:"publicKeys"`
}

func (SshConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (i SshConfigurationArgs) ToSshConfigurationOutput() SshConfigurationOutput {
	return i.ToSshConfigurationOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput)
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i SshConfigurationArgs) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationOutput).ToSshConfigurationPtrOutputWithContext(ctx)
}

// SshConfigurationPtrInput is an input type that accepts SshConfigurationArgs, SshConfigurationPtr and SshConfigurationPtrOutput values.
// You can construct a concrete instance of `SshConfigurationPtrInput` via:
//
//	        SshConfigurationArgs{...}
//
//	or:
//
//	        nil
type SshConfigurationPtrInput interface {
	pulumi.Input

	ToSshConfigurationPtrOutput() SshConfigurationPtrOutput
	ToSshConfigurationPtrOutputWithContext(context.Context) SshConfigurationPtrOutput
}

type sshConfigurationPtrType SshConfigurationArgs

func SshConfigurationPtr(v *SshConfigurationArgs) SshConfigurationPtrInput {
	return (*sshConfigurationPtrType)(v)
}

func (*sshConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return i.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (i *sshConfigurationPtrType) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshConfigurationPtrOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationOutput struct{ *pulumi.OutputState }

func (SshConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationOutput) ToSshConfigurationOutput() SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationOutputWithContext(ctx context.Context) SshConfigurationOutput {
	return o
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o.ToSshConfigurationPtrOutputWithContext(context.Background())
}

func (o SshConfigurationOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshConfiguration) *SshConfiguration {
		return &v
	}).(SshConfigurationPtrOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationOutput) PublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v SshConfiguration) []SshPublicKey { return v.PublicKeys }).(SshPublicKeyArrayOutput)
}

type SshConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfiguration)(nil)).Elem()
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutput() SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) ToSshConfigurationPtrOutputWithContext(ctx context.Context) SshConfigurationPtrOutput {
	return o
}

func (o SshConfigurationPtrOutput) Elem() SshConfigurationOutput {
	return o.ApplyT(func(v *SshConfiguration) SshConfiguration {
		if v != nil {
			return *v
		}
		var ret SshConfiguration
		return ret
	}).(SshConfigurationOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationPtrOutput) PublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v *SshConfiguration) []SshPublicKey {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyArrayOutput)
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponse struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyResponse `pulumi:"publicKeys"`
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutput() SshConfigurationResponseOutput {
	return o
}

func (o SshConfigurationResponseOutput) ToSshConfigurationResponseOutputWithContext(ctx context.Context) SshConfigurationResponseOutput {
	return o
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponseOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v SshConfigurationResponse) []SshPublicKeyResponse { return v.PublicKeys }).(SshPublicKeyResponseArrayOutput)
}

type SshConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SshConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshConfigurationResponse)(nil)).Elem()
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutput() SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) ToSshConfigurationResponsePtrOutputWithContext(ctx context.Context) SshConfigurationResponsePtrOutput {
	return o
}

func (o SshConfigurationResponsePtrOutput) Elem() SshConfigurationResponseOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) SshConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SshConfigurationResponse
		return ret
	}).(SshConfigurationResponseOutput)
}

// The list of SSH public keys used to authenticate with linux based VMs.
func (o SshConfigurationResponsePtrOutput) PublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *SshConfigurationResponse) []SshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.PublicKeys
	}).(SshPublicKeyResponseArrayOutput)
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPair struct {
	// SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// SSH public key
	PublicKey *string `pulumi:"publicKey"`
}

// SshKeyPairInput is an input type that accepts SshKeyPairArgs and SshKeyPairOutput values.
// You can construct a concrete instance of `SshKeyPairInput` via:
//
//	SshKeyPairArgs{...}
type SshKeyPairInput interface {
	pulumi.Input

	ToSshKeyPairOutput() SshKeyPairOutput
	ToSshKeyPairOutputWithContext(context.Context) SshKeyPairOutput
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPairArgs struct {
	// SSH private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SSH public key
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
}

func (SshKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKeyPair)(nil)).Elem()
}

func (i SshKeyPairArgs) ToSshKeyPairOutput() SshKeyPairOutput {
	return i.ToSshKeyPairOutputWithContext(context.Background())
}

func (i SshKeyPairArgs) ToSshKeyPairOutputWithContext(ctx context.Context) SshKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyPairOutput)
}

func (i SshKeyPairArgs) ToSshKeyPairPtrOutput() SshKeyPairPtrOutput {
	return i.ToSshKeyPairPtrOutputWithContext(context.Background())
}

func (i SshKeyPairArgs) ToSshKeyPairPtrOutputWithContext(ctx context.Context) SshKeyPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyPairOutput).ToSshKeyPairPtrOutputWithContext(ctx)
}

// SshKeyPairPtrInput is an input type that accepts SshKeyPairArgs, SshKeyPairPtr and SshKeyPairPtrOutput values.
// You can construct a concrete instance of `SshKeyPairPtrInput` via:
//
//	        SshKeyPairArgs{...}
//
//	or:
//
//	        nil
type SshKeyPairPtrInput interface {
	pulumi.Input

	ToSshKeyPairPtrOutput() SshKeyPairPtrOutput
	ToSshKeyPairPtrOutputWithContext(context.Context) SshKeyPairPtrOutput
}

type sshKeyPairPtrType SshKeyPairArgs

func SshKeyPairPtr(v *SshKeyPairArgs) SshKeyPairPtrInput {
	return (*sshKeyPairPtrType)(v)
}

func (*sshKeyPairPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeyPair)(nil)).Elem()
}

func (i *sshKeyPairPtrType) ToSshKeyPairPtrOutput() SshKeyPairPtrOutput {
	return i.ToSshKeyPairPtrOutputWithContext(context.Background())
}

func (i *sshKeyPairPtrType) ToSshKeyPairPtrOutputWithContext(ctx context.Context) SshKeyPairPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshKeyPairPtrOutput)
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPairOutput struct{ *pulumi.OutputState }

func (SshKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKeyPair)(nil)).Elem()
}

func (o SshKeyPairOutput) ToSshKeyPairOutput() SshKeyPairOutput {
	return o
}

func (o SshKeyPairOutput) ToSshKeyPairOutputWithContext(ctx context.Context) SshKeyPairOutput {
	return o
}

func (o SshKeyPairOutput) ToSshKeyPairPtrOutput() SshKeyPairPtrOutput {
	return o.ToSshKeyPairPtrOutputWithContext(context.Background())
}

func (o SshKeyPairOutput) ToSshKeyPairPtrOutputWithContext(ctx context.Context) SshKeyPairPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SshKeyPair) *SshKeyPair {
		return &v
	}).(SshKeyPairPtrOutput)
}

// SSH private key.
func (o SshKeyPairOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshKeyPair) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SSH public key
func (o SshKeyPairOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshKeyPair) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

type SshKeyPairPtrOutput struct{ *pulumi.OutputState }

func (SshKeyPairPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeyPair)(nil)).Elem()
}

func (o SshKeyPairPtrOutput) ToSshKeyPairPtrOutput() SshKeyPairPtrOutput {
	return o
}

func (o SshKeyPairPtrOutput) ToSshKeyPairPtrOutputWithContext(ctx context.Context) SshKeyPairPtrOutput {
	return o
}

func (o SshKeyPairPtrOutput) Elem() SshKeyPairOutput {
	return o.ApplyT(func(v *SshKeyPair) SshKeyPair {
		if v != nil {
			return *v
		}
		var ret SshKeyPair
		return ret
	}).(SshKeyPairOutput)
}

// SSH private key.
func (o SshKeyPairPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SSH public key
func (o SshKeyPairPtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeyPair) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPairResponse struct {
	// SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// SSH public key
	PublicKey *string `pulumi:"publicKey"`
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPairResponseOutput struct{ *pulumi.OutputState }

func (SshKeyPairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshKeyPairResponse)(nil)).Elem()
}

func (o SshKeyPairResponseOutput) ToSshKeyPairResponseOutput() SshKeyPairResponseOutput {
	return o
}

func (o SshKeyPairResponseOutput) ToSshKeyPairResponseOutputWithContext(ctx context.Context) SshKeyPairResponseOutput {
	return o
}

// SSH private key.
func (o SshKeyPairResponseOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshKeyPairResponse) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SSH public key
func (o SshKeyPairResponseOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshKeyPairResponse) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

type SshKeyPairResponsePtrOutput struct{ *pulumi.OutputState }

func (SshKeyPairResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SshKeyPairResponse)(nil)).Elem()
}

func (o SshKeyPairResponsePtrOutput) ToSshKeyPairResponsePtrOutput() SshKeyPairResponsePtrOutput {
	return o
}

func (o SshKeyPairResponsePtrOutput) ToSshKeyPairResponsePtrOutputWithContext(ctx context.Context) SshKeyPairResponsePtrOutput {
	return o
}

func (o SshKeyPairResponsePtrOutput) Elem() SshKeyPairResponseOutput {
	return o.ApplyT(func(v *SshKeyPairResponse) SshKeyPairResponse {
		if v != nil {
			return *v
		}
		var ret SshKeyPairResponse
		return ret
	}).(SshKeyPairResponseOutput)
}

// SSH private key.
func (o SshKeyPairResponsePtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeyPairResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SSH public key
func (o SshKeyPairResponsePtrOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SshKeyPairResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicKey
	}).(pulumi.StringPtrOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
}

// SshPublicKeyInput is an input type that accepts SshPublicKeyArgs and SshPublicKeyOutput values.
// You can construct a concrete instance of `SshPublicKeyInput` via:
//
//	SshPublicKeyArgs{...}
type SshPublicKeyInput interface {
	pulumi.Input

	ToSshPublicKeyOutput() SshPublicKeyOutput
	ToSshPublicKeyOutputWithContext(context.Context) SshPublicKeyOutput
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyArgs struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData pulumi.StringPtrInput `pulumi:"keyData"`
}

func (SshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return i.ToSshPublicKeyOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput)
}

// SshPublicKeyArrayInput is an input type that accepts SshPublicKeyArray and SshPublicKeyArrayOutput values.
// You can construct a concrete instance of `SshPublicKeyArrayInput` via:
//
//	SshPublicKeyArray{ SshPublicKeyArgs{...} }
type SshPublicKeyArrayInput interface {
	pulumi.Input

	ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput
	ToSshPublicKeyArrayOutputWithContext(context.Context) SshPublicKeyArrayOutput
}

type SshPublicKeyArray []SshPublicKeyInput

func (SshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return i.ToSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyArrayOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyOutput struct{ *pulumi.OutputState }

func (SshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return o
}

// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
func (o SshPublicKeyOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKey) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

type SshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) Index(i pulumi.IntInput) SshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKey {
		return vs[0].([]SshPublicKey)[vs[1].(int)]
	}).(SshPublicKeyOutput)
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponse struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
func (o SshPublicKeyResponseOutput) KeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) *string { return v.KeyData }).(pulumi.StringPtrOutput)
}

type SshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutput() SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) SshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyResponse {
		return vs[0].([]SshPublicKeyResponse)[vs[1].(int)]
	}).(SshPublicKeyResponseOutput)
}

// Gets or sets the storage configuration.
type StorageConfiguration struct {
	// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
	TransportFileShareConfiguration interface{} `pulumi:"transportFileShareConfiguration"`
}

// StorageConfigurationInput is an input type that accepts StorageConfigurationArgs and StorageConfigurationOutput values.
// You can construct a concrete instance of `StorageConfigurationInput` via:
//
//	StorageConfigurationArgs{...}
type StorageConfigurationInput interface {
	pulumi.Input

	ToStorageConfigurationOutput() StorageConfigurationOutput
	ToStorageConfigurationOutputWithContext(context.Context) StorageConfigurationOutput
}

// Gets or sets the storage configuration.
type StorageConfigurationArgs struct {
	// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
	TransportFileShareConfiguration pulumi.Input `pulumi:"transportFileShareConfiguration"`
}

func (StorageConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfiguration)(nil)).Elem()
}

func (i StorageConfigurationArgs) ToStorageConfigurationOutput() StorageConfigurationOutput {
	return i.ToStorageConfigurationOutputWithContext(context.Background())
}

func (i StorageConfigurationArgs) ToStorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationOutput)
}

func (i StorageConfigurationArgs) ToStorageConfigurationPtrOutput() StorageConfigurationPtrOutput {
	return i.ToStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i StorageConfigurationArgs) ToStorageConfigurationPtrOutputWithContext(ctx context.Context) StorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationOutput).ToStorageConfigurationPtrOutputWithContext(ctx)
}

// StorageConfigurationPtrInput is an input type that accepts StorageConfigurationArgs, StorageConfigurationPtr and StorageConfigurationPtrOutput values.
// You can construct a concrete instance of `StorageConfigurationPtrInput` via:
//
//	        StorageConfigurationArgs{...}
//
//	or:
//
//	        nil
type StorageConfigurationPtrInput interface {
	pulumi.Input

	ToStorageConfigurationPtrOutput() StorageConfigurationPtrOutput
	ToStorageConfigurationPtrOutputWithContext(context.Context) StorageConfigurationPtrOutput
}

type storageConfigurationPtrType StorageConfigurationArgs

func StorageConfigurationPtr(v *StorageConfigurationArgs) StorageConfigurationPtrInput {
	return (*storageConfigurationPtrType)(v)
}

func (*storageConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageConfiguration)(nil)).Elem()
}

func (i *storageConfigurationPtrType) ToStorageConfigurationPtrOutput() StorageConfigurationPtrOutput {
	return i.ToStorageConfigurationPtrOutputWithContext(context.Background())
}

func (i *storageConfigurationPtrType) ToStorageConfigurationPtrOutputWithContext(ctx context.Context) StorageConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageConfigurationPtrOutput)
}

// Gets or sets the storage configuration.
type StorageConfigurationOutput struct{ *pulumi.OutputState }

func (StorageConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfiguration)(nil)).Elem()
}

func (o StorageConfigurationOutput) ToStorageConfigurationOutput() StorageConfigurationOutput {
	return o
}

func (o StorageConfigurationOutput) ToStorageConfigurationOutputWithContext(ctx context.Context) StorageConfigurationOutput {
	return o
}

func (o StorageConfigurationOutput) ToStorageConfigurationPtrOutput() StorageConfigurationPtrOutput {
	return o.ToStorageConfigurationPtrOutputWithContext(context.Background())
}

func (o StorageConfigurationOutput) ToStorageConfigurationPtrOutputWithContext(ctx context.Context) StorageConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageConfiguration) *StorageConfiguration {
		return &v
	}).(StorageConfigurationPtrOutput)
}

// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
func (o StorageConfigurationOutput) TransportFileShareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v StorageConfiguration) interface{} { return v.TransportFileShareConfiguration }).(pulumi.AnyOutput)
}

type StorageConfigurationPtrOutput struct{ *pulumi.OutputState }

func (StorageConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageConfiguration)(nil)).Elem()
}

func (o StorageConfigurationPtrOutput) ToStorageConfigurationPtrOutput() StorageConfigurationPtrOutput {
	return o
}

func (o StorageConfigurationPtrOutput) ToStorageConfigurationPtrOutputWithContext(ctx context.Context) StorageConfigurationPtrOutput {
	return o
}

func (o StorageConfigurationPtrOutput) Elem() StorageConfigurationOutput {
	return o.ApplyT(func(v *StorageConfiguration) StorageConfiguration {
		if v != nil {
			return *v
		}
		var ret StorageConfiguration
		return ret
	}).(StorageConfigurationOutput)
}

// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
func (o StorageConfigurationPtrOutput) TransportFileShareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *StorageConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.TransportFileShareConfiguration
	}).(pulumi.AnyOutput)
}

// Gets or sets the storage configuration.
type StorageConfigurationResponse struct {
	// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
	TransportFileShareConfiguration interface{} `pulumi:"transportFileShareConfiguration"`
}

// Gets or sets the storage configuration.
type StorageConfigurationResponseOutput struct{ *pulumi.OutputState }

func (StorageConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageConfigurationResponse)(nil)).Elem()
}

func (o StorageConfigurationResponseOutput) ToStorageConfigurationResponseOutput() StorageConfigurationResponseOutput {
	return o
}

func (o StorageConfigurationResponseOutput) ToStorageConfigurationResponseOutputWithContext(ctx context.Context) StorageConfigurationResponseOutput {
	return o
}

// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
func (o StorageConfigurationResponseOutput) TransportFileShareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v StorageConfigurationResponse) interface{} { return v.TransportFileShareConfiguration }).(pulumi.AnyOutput)
}

type StorageConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (StorageConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageConfigurationResponse)(nil)).Elem()
}

func (o StorageConfigurationResponsePtrOutput) ToStorageConfigurationResponsePtrOutput() StorageConfigurationResponsePtrOutput {
	return o
}

func (o StorageConfigurationResponsePtrOutput) ToStorageConfigurationResponsePtrOutputWithContext(ctx context.Context) StorageConfigurationResponsePtrOutput {
	return o
}

func (o StorageConfigurationResponsePtrOutput) Elem() StorageConfigurationResponseOutput {
	return o.ApplyT(func(v *StorageConfigurationResponse) StorageConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret StorageConfigurationResponse
		return ret
	}).(StorageConfigurationResponseOutput)
}

// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
func (o StorageConfigurationResponsePtrOutput) TransportFileShareConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v *StorageConfigurationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TransportFileShareConfiguration
	}).(pulumi.AnyOutput)
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponse struct {
	Id string `pulumi:"id"`
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponseOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutput() StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutputWithContext(ctx context.Context) StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageInformationResponse) string { return v.Id }).(pulumi.StringOutput)
}

type StorageInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutput() StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutputWithContext(ctx context.Context) StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) Index(i pulumi.IntInput) StorageInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageInformationResponse {
		return vs[0].([]StorageInformationResponse)[vs[1].(int)]
	}).(StorageInformationResponseOutput)
}

// Sub-protection policy which includes schedule and retention
type SubProtectionPolicy struct {
	// Type of backup policy type
	PolicyType *string `pulumi:"policyType"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy interface{} `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy interface{} `pulumi:"schedulePolicy"`
	// Hana DB instance snapshot backup additional details.
	SnapshotBackupAdditionalDetails *SnapshotBackupAdditionalDetails `pulumi:"snapshotBackupAdditionalDetails"`
	// Tiering policy to automatically move RPs to another tier.
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]TieringPolicy `pulumi:"tieringPolicy"`
}

// SubProtectionPolicyInput is an input type that accepts SubProtectionPolicyArgs and SubProtectionPolicyOutput values.
// You can construct a concrete instance of `SubProtectionPolicyInput` via:
//
//	SubProtectionPolicyArgs{...}
type SubProtectionPolicyInput interface {
	pulumi.Input

	ToSubProtectionPolicyOutput() SubProtectionPolicyOutput
	ToSubProtectionPolicyOutputWithContext(context.Context) SubProtectionPolicyOutput
}

// Sub-protection policy which includes schedule and retention
type SubProtectionPolicyArgs struct {
	// Type of backup policy type
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy pulumi.Input `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy pulumi.Input `pulumi:"schedulePolicy"`
	// Hana DB instance snapshot backup additional details.
	SnapshotBackupAdditionalDetails SnapshotBackupAdditionalDetailsPtrInput `pulumi:"snapshotBackupAdditionalDetails"`
	// Tiering policy to automatically move RPs to another tier.
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy TieringPolicyMapInput `pulumi:"tieringPolicy"`
}

func (SubProtectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubProtectionPolicy)(nil)).Elem()
}

func (i SubProtectionPolicyArgs) ToSubProtectionPolicyOutput() SubProtectionPolicyOutput {
	return i.ToSubProtectionPolicyOutputWithContext(context.Background())
}

func (i SubProtectionPolicyArgs) ToSubProtectionPolicyOutputWithContext(ctx context.Context) SubProtectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubProtectionPolicyOutput)
}

// SubProtectionPolicyArrayInput is an input type that accepts SubProtectionPolicyArray and SubProtectionPolicyArrayOutput values.
// You can construct a concrete instance of `SubProtectionPolicyArrayInput` via:
//
//	SubProtectionPolicyArray{ SubProtectionPolicyArgs{...} }
type SubProtectionPolicyArrayInput interface {
	pulumi.Input

	ToSubProtectionPolicyArrayOutput() SubProtectionPolicyArrayOutput
	ToSubProtectionPolicyArrayOutputWithContext(context.Context) SubProtectionPolicyArrayOutput
}

type SubProtectionPolicyArray []SubProtectionPolicyInput

func (SubProtectionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubProtectionPolicy)(nil)).Elem()
}

func (i SubProtectionPolicyArray) ToSubProtectionPolicyArrayOutput() SubProtectionPolicyArrayOutput {
	return i.ToSubProtectionPolicyArrayOutputWithContext(context.Background())
}

func (i SubProtectionPolicyArray) ToSubProtectionPolicyArrayOutputWithContext(ctx context.Context) SubProtectionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubProtectionPolicyArrayOutput)
}

// Sub-protection policy which includes schedule and retention
type SubProtectionPolicyOutput struct{ *pulumi.OutputState }

func (SubProtectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubProtectionPolicy)(nil)).Elem()
}

func (o SubProtectionPolicyOutput) ToSubProtectionPolicyOutput() SubProtectionPolicyOutput {
	return o
}

func (o SubProtectionPolicyOutput) ToSubProtectionPolicyOutputWithContext(ctx context.Context) SubProtectionPolicyOutput {
	return o
}

// Type of backup policy type
func (o SubProtectionPolicyOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubProtectionPolicy) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o SubProtectionPolicyOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v SubProtectionPolicy) interface{} { return v.RetentionPolicy }).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o SubProtectionPolicyOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v SubProtectionPolicy) interface{} { return v.SchedulePolicy }).(pulumi.AnyOutput)
}

// Hana DB instance snapshot backup additional details.
func (o SubProtectionPolicyOutput) SnapshotBackupAdditionalDetails() SnapshotBackupAdditionalDetailsPtrOutput {
	return o.ApplyT(func(v SubProtectionPolicy) *SnapshotBackupAdditionalDetails { return v.SnapshotBackupAdditionalDetails }).(SnapshotBackupAdditionalDetailsPtrOutput)
}

// Tiering policy to automatically move RPs to another tier.
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o SubProtectionPolicyOutput) TieringPolicy() TieringPolicyMapOutput {
	return o.ApplyT(func(v SubProtectionPolicy) map[string]TieringPolicy { return v.TieringPolicy }).(TieringPolicyMapOutput)
}

type SubProtectionPolicyArrayOutput struct{ *pulumi.OutputState }

func (SubProtectionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubProtectionPolicy)(nil)).Elem()
}

func (o SubProtectionPolicyArrayOutput) ToSubProtectionPolicyArrayOutput() SubProtectionPolicyArrayOutput {
	return o
}

func (o SubProtectionPolicyArrayOutput) ToSubProtectionPolicyArrayOutputWithContext(ctx context.Context) SubProtectionPolicyArrayOutput {
	return o
}

func (o SubProtectionPolicyArrayOutput) Index(i pulumi.IntInput) SubProtectionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubProtectionPolicy {
		return vs[0].([]SubProtectionPolicy)[vs[1].(int)]
	}).(SubProtectionPolicyOutput)
}

// Sub-protection policy which includes schedule and retention
type SubProtectionPolicyResponse struct {
	// Type of backup policy type
	PolicyType *string `pulumi:"policyType"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy interface{} `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy interface{} `pulumi:"schedulePolicy"`
	// Hana DB instance snapshot backup additional details.
	SnapshotBackupAdditionalDetails *SnapshotBackupAdditionalDetailsResponse `pulumi:"snapshotBackupAdditionalDetails"`
	// Tiering policy to automatically move RPs to another tier.
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]TieringPolicyResponse `pulumi:"tieringPolicy"`
}

// Sub-protection policy which includes schedule and retention
type SubProtectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (SubProtectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubProtectionPolicyResponse)(nil)).Elem()
}

func (o SubProtectionPolicyResponseOutput) ToSubProtectionPolicyResponseOutput() SubProtectionPolicyResponseOutput {
	return o
}

func (o SubProtectionPolicyResponseOutput) ToSubProtectionPolicyResponseOutputWithContext(ctx context.Context) SubProtectionPolicyResponseOutput {
	return o
}

// Type of backup policy type
func (o SubProtectionPolicyResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubProtectionPolicyResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o SubProtectionPolicyResponseOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v SubProtectionPolicyResponse) interface{} { return v.RetentionPolicy }).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o SubProtectionPolicyResponseOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v SubProtectionPolicyResponse) interface{} { return v.SchedulePolicy }).(pulumi.AnyOutput)
}

// Hana DB instance snapshot backup additional details.
func (o SubProtectionPolicyResponseOutput) SnapshotBackupAdditionalDetails() SnapshotBackupAdditionalDetailsResponsePtrOutput {
	return o.ApplyT(func(v SubProtectionPolicyResponse) *SnapshotBackupAdditionalDetailsResponse {
		return v.SnapshotBackupAdditionalDetails
	}).(SnapshotBackupAdditionalDetailsResponsePtrOutput)
}

// Tiering policy to automatically move RPs to another tier.
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o SubProtectionPolicyResponseOutput) TieringPolicy() TieringPolicyResponseMapOutput {
	return o.ApplyT(func(v SubProtectionPolicyResponse) map[string]TieringPolicyResponse { return v.TieringPolicy }).(TieringPolicyResponseMapOutput)
}

type SubProtectionPolicyResponseArrayOutput struct{ *pulumi.OutputState }

func (SubProtectionPolicyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubProtectionPolicyResponse)(nil)).Elem()
}

func (o SubProtectionPolicyResponseArrayOutput) ToSubProtectionPolicyResponseArrayOutput() SubProtectionPolicyResponseArrayOutput {
	return o
}

func (o SubProtectionPolicyResponseArrayOutput) ToSubProtectionPolicyResponseArrayOutputWithContext(ctx context.Context) SubProtectionPolicyResponseArrayOutput {
	return o
}

func (o SubProtectionPolicyResponseArrayOutput) Index(i pulumi.IntInput) SubProtectionPolicyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubProtectionPolicyResponse {
		return vs[0].([]SubProtectionPolicyResponse)[vs[1].(int)]
	}).(SubProtectionPolicyResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfiguration struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The application server configuration.
	ApplicationServer ApplicationServerConfiguration `pulumi:"applicationServer"`
	// The central server configuration.
	CentralServer CentralServerConfiguration `pulumi:"centralServer"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *ThreeTierFullResourceNames `pulumi:"customResourceNames"`
	// The database configuration.
	DatabaseServer DatabaseConfiguration `pulumi:"databaseServer"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'ThreeTier'.
	DeploymentType string `pulumi:"deploymentType"`
	// The high availability configuration.
	HighAvailabilityConfig *HighAvailabilityConfiguration `pulumi:"highAvailabilityConfig"`
	// Network configuration common to all servers
	NetworkConfiguration *NetworkConfiguration `pulumi:"networkConfiguration"`
	// The storage configuration.
	StorageConfiguration *StorageConfiguration `pulumi:"storageConfiguration"`
}

// Defaults sets the appropriate defaults for ThreeTierConfiguration
func (val *ThreeTierConfiguration) Defaults() *ThreeTierConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// ThreeTierConfigurationInput is an input type that accepts ThreeTierConfigurationArgs and ThreeTierConfigurationOutput values.
// You can construct a concrete instance of `ThreeTierConfigurationInput` via:
//
//	ThreeTierConfigurationArgs{...}
type ThreeTierConfigurationInput interface {
	pulumi.Input

	ToThreeTierConfigurationOutput() ThreeTierConfigurationOutput
	ToThreeTierConfigurationOutputWithContext(context.Context) ThreeTierConfigurationOutput
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfigurationArgs struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup pulumi.StringInput `pulumi:"appResourceGroup"`
	// The application server configuration.
	ApplicationServer ApplicationServerConfigurationInput `pulumi:"applicationServer"`
	// The central server configuration.
	CentralServer CentralServerConfigurationInput `pulumi:"centralServer"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames ThreeTierFullResourceNamesPtrInput `pulumi:"customResourceNames"`
	// The database configuration.
	DatabaseServer DatabaseConfigurationInput `pulumi:"databaseServer"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'ThreeTier'.
	DeploymentType pulumi.StringInput `pulumi:"deploymentType"`
	// The high availability configuration.
	HighAvailabilityConfig HighAvailabilityConfigurationPtrInput `pulumi:"highAvailabilityConfig"`
	// Network configuration common to all servers
	NetworkConfiguration NetworkConfigurationPtrInput `pulumi:"networkConfiguration"`
	// The storage configuration.
	StorageConfiguration StorageConfigurationPtrInput `pulumi:"storageConfiguration"`
}

// Defaults sets the appropriate defaults for ThreeTierConfigurationArgs
func (val *ThreeTierConfigurationArgs) Defaults() *ThreeTierConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ThreeTierConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierConfiguration)(nil)).Elem()
}

func (i ThreeTierConfigurationArgs) ToThreeTierConfigurationOutput() ThreeTierConfigurationOutput {
	return i.ToThreeTierConfigurationOutputWithContext(context.Background())
}

func (i ThreeTierConfigurationArgs) ToThreeTierConfigurationOutputWithContext(ctx context.Context) ThreeTierConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierConfigurationOutput)
}

func (i ThreeTierConfigurationArgs) ToThreeTierConfigurationPtrOutput() ThreeTierConfigurationPtrOutput {
	return i.ToThreeTierConfigurationPtrOutputWithContext(context.Background())
}

func (i ThreeTierConfigurationArgs) ToThreeTierConfigurationPtrOutputWithContext(ctx context.Context) ThreeTierConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierConfigurationOutput).ToThreeTierConfigurationPtrOutputWithContext(ctx)
}

// ThreeTierConfigurationPtrInput is an input type that accepts ThreeTierConfigurationArgs, ThreeTierConfigurationPtr and ThreeTierConfigurationPtrOutput values.
// You can construct a concrete instance of `ThreeTierConfigurationPtrInput` via:
//
//	        ThreeTierConfigurationArgs{...}
//
//	or:
//
//	        nil
type ThreeTierConfigurationPtrInput interface {
	pulumi.Input

	ToThreeTierConfigurationPtrOutput() ThreeTierConfigurationPtrOutput
	ToThreeTierConfigurationPtrOutputWithContext(context.Context) ThreeTierConfigurationPtrOutput
}

type threeTierConfigurationPtrType ThreeTierConfigurationArgs

func ThreeTierConfigurationPtr(v *ThreeTierConfigurationArgs) ThreeTierConfigurationPtrInput {
	return (*threeTierConfigurationPtrType)(v)
}

func (*threeTierConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierConfiguration)(nil)).Elem()
}

func (i *threeTierConfigurationPtrType) ToThreeTierConfigurationPtrOutput() ThreeTierConfigurationPtrOutput {
	return i.ToThreeTierConfigurationPtrOutputWithContext(context.Background())
}

func (i *threeTierConfigurationPtrType) ToThreeTierConfigurationPtrOutputWithContext(ctx context.Context) ThreeTierConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierConfigurationPtrOutput)
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfigurationOutput struct{ *pulumi.OutputState }

func (ThreeTierConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierConfiguration)(nil)).Elem()
}

func (o ThreeTierConfigurationOutput) ToThreeTierConfigurationOutput() ThreeTierConfigurationOutput {
	return o
}

func (o ThreeTierConfigurationOutput) ToThreeTierConfigurationOutputWithContext(ctx context.Context) ThreeTierConfigurationOutput {
	return o
}

func (o ThreeTierConfigurationOutput) ToThreeTierConfigurationPtrOutput() ThreeTierConfigurationPtrOutput {
	return o.ToThreeTierConfigurationPtrOutputWithContext(context.Background())
}

func (o ThreeTierConfigurationOutput) ToThreeTierConfigurationPtrOutputWithContext(ctx context.Context) ThreeTierConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThreeTierConfiguration) *ThreeTierConfiguration {
		return &v
	}).(ThreeTierConfigurationPtrOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o ThreeTierConfigurationOutput) AppResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) string { return v.AppResourceGroup }).(pulumi.StringOutput)
}

// The application server configuration.
func (o ThreeTierConfigurationOutput) ApplicationServer() ApplicationServerConfigurationOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) ApplicationServerConfiguration { return v.ApplicationServer }).(ApplicationServerConfigurationOutput)
}

// The central server configuration.
func (o ThreeTierConfigurationOutput) CentralServer() CentralServerConfigurationOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) CentralServerConfiguration { return v.CentralServer }).(CentralServerConfigurationOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o ThreeTierConfigurationOutput) CustomResourceNames() ThreeTierFullResourceNamesPtrOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) *ThreeTierFullResourceNames { return v.CustomResourceNames }).(ThreeTierFullResourceNamesPtrOutput)
}

// The database configuration.
func (o ThreeTierConfigurationOutput) DatabaseServer() DatabaseConfigurationOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) DatabaseConfiguration { return v.DatabaseServer }).(DatabaseConfigurationOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'ThreeTier'.
func (o ThreeTierConfigurationOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The high availability configuration.
func (o ThreeTierConfigurationOutput) HighAvailabilityConfig() HighAvailabilityConfigurationPtrOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) *HighAvailabilityConfiguration { return v.HighAvailabilityConfig }).(HighAvailabilityConfigurationPtrOutput)
}

// Network configuration common to all servers
func (o ThreeTierConfigurationOutput) NetworkConfiguration() NetworkConfigurationPtrOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) *NetworkConfiguration { return v.NetworkConfiguration }).(NetworkConfigurationPtrOutput)
}

// The storage configuration.
func (o ThreeTierConfigurationOutput) StorageConfiguration() StorageConfigurationPtrOutput {
	return o.ApplyT(func(v ThreeTierConfiguration) *StorageConfiguration { return v.StorageConfiguration }).(StorageConfigurationPtrOutput)
}

type ThreeTierConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ThreeTierConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierConfiguration)(nil)).Elem()
}

func (o ThreeTierConfigurationPtrOutput) ToThreeTierConfigurationPtrOutput() ThreeTierConfigurationPtrOutput {
	return o
}

func (o ThreeTierConfigurationPtrOutput) ToThreeTierConfigurationPtrOutputWithContext(ctx context.Context) ThreeTierConfigurationPtrOutput {
	return o
}

func (o ThreeTierConfigurationPtrOutput) Elem() ThreeTierConfigurationOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) ThreeTierConfiguration {
		if v != nil {
			return *v
		}
		var ret ThreeTierConfiguration
		return ret
	}).(ThreeTierConfigurationOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o ThreeTierConfigurationPtrOutput) AppResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.AppResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The application server configuration.
func (o ThreeTierConfigurationPtrOutput) ApplicationServer() ApplicationServerConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *ApplicationServerConfiguration {
		if v == nil {
			return nil
		}
		return &v.ApplicationServer
	}).(ApplicationServerConfigurationPtrOutput)
}

// The central server configuration.
func (o ThreeTierConfigurationPtrOutput) CentralServer() CentralServerConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *CentralServerConfiguration {
		if v == nil {
			return nil
		}
		return &v.CentralServer
	}).(CentralServerConfigurationPtrOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o ThreeTierConfigurationPtrOutput) CustomResourceNames() ThreeTierFullResourceNamesPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *ThreeTierFullResourceNames {
		if v == nil {
			return nil
		}
		return v.CustomResourceNames
	}).(ThreeTierFullResourceNamesPtrOutput)
}

// The database configuration.
func (o ThreeTierConfigurationPtrOutput) DatabaseServer() DatabaseConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *DatabaseConfiguration {
		if v == nil {
			return nil
		}
		return &v.DatabaseServer
	}).(DatabaseConfigurationPtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'ThreeTier'.
func (o ThreeTierConfigurationPtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// The high availability configuration.
func (o ThreeTierConfigurationPtrOutput) HighAvailabilityConfig() HighAvailabilityConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *HighAvailabilityConfiguration {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityConfig
	}).(HighAvailabilityConfigurationPtrOutput)
}

// Network configuration common to all servers
func (o ThreeTierConfigurationPtrOutput) NetworkConfiguration() NetworkConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *NetworkConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(NetworkConfigurationPtrOutput)
}

// The storage configuration.
func (o ThreeTierConfigurationPtrOutput) StorageConfiguration() StorageConfigurationPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfiguration) *StorageConfiguration {
		if v == nil {
			return nil
		}
		return v.StorageConfiguration
	}).(StorageConfigurationPtrOutput)
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfigurationResponse struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The application server configuration.
	ApplicationServer ApplicationServerConfigurationResponse `pulumi:"applicationServer"`
	// The central server configuration.
	CentralServer CentralServerConfigurationResponse `pulumi:"centralServer"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *ThreeTierFullResourceNamesResponse `pulumi:"customResourceNames"`
	// The database configuration.
	DatabaseServer DatabaseConfigurationResponse `pulumi:"databaseServer"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'ThreeTier'.
	DeploymentType string `pulumi:"deploymentType"`
	// The high availability configuration.
	HighAvailabilityConfig *HighAvailabilityConfigurationResponse `pulumi:"highAvailabilityConfig"`
	// Network configuration common to all servers
	NetworkConfiguration *NetworkConfigurationResponse `pulumi:"networkConfiguration"`
	// The storage configuration.
	StorageConfiguration *StorageConfigurationResponse `pulumi:"storageConfiguration"`
}

// Defaults sets the appropriate defaults for ThreeTierConfigurationResponse
func (val *ThreeTierConfigurationResponse) Defaults() *ThreeTierConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ThreeTierConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierConfigurationResponse)(nil)).Elem()
}

func (o ThreeTierConfigurationResponseOutput) ToThreeTierConfigurationResponseOutput() ThreeTierConfigurationResponseOutput {
	return o
}

func (o ThreeTierConfigurationResponseOutput) ToThreeTierConfigurationResponseOutputWithContext(ctx context.Context) ThreeTierConfigurationResponseOutput {
	return o
}

// The application resource group where SAP system resources will be deployed.
func (o ThreeTierConfigurationResponseOutput) AppResourceGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) string { return v.AppResourceGroup }).(pulumi.StringOutput)
}

// The application server configuration.
func (o ThreeTierConfigurationResponseOutput) ApplicationServer() ApplicationServerConfigurationResponseOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) ApplicationServerConfigurationResponse {
		return v.ApplicationServer
	}).(ApplicationServerConfigurationResponseOutput)
}

// The central server configuration.
func (o ThreeTierConfigurationResponseOutput) CentralServer() CentralServerConfigurationResponseOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) CentralServerConfigurationResponse { return v.CentralServer }).(CentralServerConfigurationResponseOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o ThreeTierConfigurationResponseOutput) CustomResourceNames() ThreeTierFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) *ThreeTierFullResourceNamesResponse {
		return v.CustomResourceNames
	}).(ThreeTierFullResourceNamesResponsePtrOutput)
}

// The database configuration.
func (o ThreeTierConfigurationResponseOutput) DatabaseServer() DatabaseConfigurationResponseOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) DatabaseConfigurationResponse { return v.DatabaseServer }).(DatabaseConfigurationResponseOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'ThreeTier'.
func (o ThreeTierConfigurationResponseOutput) DeploymentType() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) string { return v.DeploymentType }).(pulumi.StringOutput)
}

// The high availability configuration.
func (o ThreeTierConfigurationResponseOutput) HighAvailabilityConfig() HighAvailabilityConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) *HighAvailabilityConfigurationResponse {
		return v.HighAvailabilityConfig
	}).(HighAvailabilityConfigurationResponsePtrOutput)
}

// Network configuration common to all servers
func (o ThreeTierConfigurationResponseOutput) NetworkConfiguration() NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) *NetworkConfigurationResponse { return v.NetworkConfiguration }).(NetworkConfigurationResponsePtrOutput)
}

// The storage configuration.
func (o ThreeTierConfigurationResponseOutput) StorageConfiguration() StorageConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierConfigurationResponse) *StorageConfigurationResponse { return v.StorageConfiguration }).(StorageConfigurationResponsePtrOutput)
}

type ThreeTierConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ThreeTierConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierConfigurationResponse)(nil)).Elem()
}

func (o ThreeTierConfigurationResponsePtrOutput) ToThreeTierConfigurationResponsePtrOutput() ThreeTierConfigurationResponsePtrOutput {
	return o
}

func (o ThreeTierConfigurationResponsePtrOutput) ToThreeTierConfigurationResponsePtrOutputWithContext(ctx context.Context) ThreeTierConfigurationResponsePtrOutput {
	return o
}

func (o ThreeTierConfigurationResponsePtrOutput) Elem() ThreeTierConfigurationResponseOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) ThreeTierConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ThreeTierConfigurationResponse
		return ret
	}).(ThreeTierConfigurationResponseOutput)
}

// The application resource group where SAP system resources will be deployed.
func (o ThreeTierConfigurationResponsePtrOutput) AppResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AppResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The application server configuration.
func (o ThreeTierConfigurationResponsePtrOutput) ApplicationServer() ApplicationServerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *ApplicationServerConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.ApplicationServer
	}).(ApplicationServerConfigurationResponsePtrOutput)
}

// The central server configuration.
func (o ThreeTierConfigurationResponsePtrOutput) CentralServer() CentralServerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *CentralServerConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.CentralServer
	}).(CentralServerConfigurationResponsePtrOutput)
}

// The set of custom names to be used for underlying azure resources that are part of the SAP system.
func (o ThreeTierConfigurationResponsePtrOutput) CustomResourceNames() ThreeTierFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *ThreeTierFullResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.CustomResourceNames
	}).(ThreeTierFullResourceNamesResponsePtrOutput)
}

// The database configuration.
func (o ThreeTierConfigurationResponsePtrOutput) DatabaseServer() DatabaseConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *DatabaseConfigurationResponse {
		if v == nil {
			return nil
		}
		return &v.DatabaseServer
	}).(DatabaseConfigurationResponsePtrOutput)
}

// The type of SAP deployment, single server or Three tier.
// Expected value is 'ThreeTier'.
func (o ThreeTierConfigurationResponsePtrOutput) DeploymentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentType
	}).(pulumi.StringPtrOutput)
}

// The high availability configuration.
func (o ThreeTierConfigurationResponsePtrOutput) HighAvailabilityConfig() HighAvailabilityConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *HighAvailabilityConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.HighAvailabilityConfig
	}).(HighAvailabilityConfigurationResponsePtrOutput)
}

// Network configuration common to all servers
func (o ThreeTierConfigurationResponsePtrOutput) NetworkConfiguration() NetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *NetworkConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.NetworkConfiguration
	}).(NetworkConfigurationResponsePtrOutput)
}

// The storage configuration.
func (o ThreeTierConfigurationResponsePtrOutput) StorageConfiguration() StorageConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierConfigurationResponse) *StorageConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.StorageConfiguration
	}).(StorageConfigurationResponsePtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNames struct {
	// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
	ApplicationServer *ApplicationServerFullResourceNames `pulumi:"applicationServer"`
	// The full resource names object for central server layer resources.
	CentralServer *CentralServerFullResourceNames `pulumi:"centralServer"`
	// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
	DatabaseServer *DatabaseServerFullResourceNames `pulumi:"databaseServer"`
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for shared storage.
	SharedStorage *SharedStorageResourceNames `pulumi:"sharedStorage"`
}

// ThreeTierFullResourceNamesInput is an input type that accepts ThreeTierFullResourceNamesArgs and ThreeTierFullResourceNamesOutput values.
// You can construct a concrete instance of `ThreeTierFullResourceNamesInput` via:
//
//	ThreeTierFullResourceNamesArgs{...}
type ThreeTierFullResourceNamesInput interface {
	pulumi.Input

	ToThreeTierFullResourceNamesOutput() ThreeTierFullResourceNamesOutput
	ToThreeTierFullResourceNamesOutputWithContext(context.Context) ThreeTierFullResourceNamesOutput
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNamesArgs struct {
	// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
	ApplicationServer ApplicationServerFullResourceNamesPtrInput `pulumi:"applicationServer"`
	// The full resource names object for central server layer resources.
	CentralServer CentralServerFullResourceNamesPtrInput `pulumi:"centralServer"`
	// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
	DatabaseServer DatabaseServerFullResourceNamesPtrInput `pulumi:"databaseServer"`
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType pulumi.StringInput `pulumi:"namingPatternType"`
	// The resource names object for shared storage.
	SharedStorage SharedStorageResourceNamesPtrInput `pulumi:"sharedStorage"`
}

func (ThreeTierFullResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierFullResourceNames)(nil)).Elem()
}

func (i ThreeTierFullResourceNamesArgs) ToThreeTierFullResourceNamesOutput() ThreeTierFullResourceNamesOutput {
	return i.ToThreeTierFullResourceNamesOutputWithContext(context.Background())
}

func (i ThreeTierFullResourceNamesArgs) ToThreeTierFullResourceNamesOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierFullResourceNamesOutput)
}

func (i ThreeTierFullResourceNamesArgs) ToThreeTierFullResourceNamesPtrOutput() ThreeTierFullResourceNamesPtrOutput {
	return i.ToThreeTierFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i ThreeTierFullResourceNamesArgs) ToThreeTierFullResourceNamesPtrOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierFullResourceNamesOutput).ToThreeTierFullResourceNamesPtrOutputWithContext(ctx)
}

// ThreeTierFullResourceNamesPtrInput is an input type that accepts ThreeTierFullResourceNamesArgs, ThreeTierFullResourceNamesPtr and ThreeTierFullResourceNamesPtrOutput values.
// You can construct a concrete instance of `ThreeTierFullResourceNamesPtrInput` via:
//
//	        ThreeTierFullResourceNamesArgs{...}
//
//	or:
//
//	        nil
type ThreeTierFullResourceNamesPtrInput interface {
	pulumi.Input

	ToThreeTierFullResourceNamesPtrOutput() ThreeTierFullResourceNamesPtrOutput
	ToThreeTierFullResourceNamesPtrOutputWithContext(context.Context) ThreeTierFullResourceNamesPtrOutput
}

type threeTierFullResourceNamesPtrType ThreeTierFullResourceNamesArgs

func ThreeTierFullResourceNamesPtr(v *ThreeTierFullResourceNamesArgs) ThreeTierFullResourceNamesPtrInput {
	return (*threeTierFullResourceNamesPtrType)(v)
}

func (*threeTierFullResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierFullResourceNames)(nil)).Elem()
}

func (i *threeTierFullResourceNamesPtrType) ToThreeTierFullResourceNamesPtrOutput() ThreeTierFullResourceNamesPtrOutput {
	return i.ToThreeTierFullResourceNamesPtrOutputWithContext(context.Background())
}

func (i *threeTierFullResourceNamesPtrType) ToThreeTierFullResourceNamesPtrOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreeTierFullResourceNamesPtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNamesOutput struct{ *pulumi.OutputState }

func (ThreeTierFullResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierFullResourceNames)(nil)).Elem()
}

func (o ThreeTierFullResourceNamesOutput) ToThreeTierFullResourceNamesOutput() ThreeTierFullResourceNamesOutput {
	return o
}

func (o ThreeTierFullResourceNamesOutput) ToThreeTierFullResourceNamesOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesOutput {
	return o
}

func (o ThreeTierFullResourceNamesOutput) ToThreeTierFullResourceNamesPtrOutput() ThreeTierFullResourceNamesPtrOutput {
	return o.ToThreeTierFullResourceNamesPtrOutputWithContext(context.Background())
}

func (o ThreeTierFullResourceNamesOutput) ToThreeTierFullResourceNamesPtrOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThreeTierFullResourceNames) *ThreeTierFullResourceNames {
		return &v
	}).(ThreeTierFullResourceNamesPtrOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
func (o ThreeTierFullResourceNamesOutput) ApplicationServer() ApplicationServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNames) *ApplicationServerFullResourceNames { return v.ApplicationServer }).(ApplicationServerFullResourceNamesPtrOutput)
}

// The full resource names object for central server layer resources.
func (o ThreeTierFullResourceNamesOutput) CentralServer() CentralServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNames) *CentralServerFullResourceNames { return v.CentralServer }).(CentralServerFullResourceNamesPtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
func (o ThreeTierFullResourceNamesOutput) DatabaseServer() DatabaseServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNames) *DatabaseServerFullResourceNames { return v.DatabaseServer }).(DatabaseServerFullResourceNamesPtrOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o ThreeTierFullResourceNamesOutput) NamingPatternType() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNames) string { return v.NamingPatternType }).(pulumi.StringOutput)
}

// The resource names object for shared storage.
func (o ThreeTierFullResourceNamesOutput) SharedStorage() SharedStorageResourceNamesPtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNames) *SharedStorageResourceNames { return v.SharedStorage }).(SharedStorageResourceNamesPtrOutput)
}

type ThreeTierFullResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (ThreeTierFullResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierFullResourceNames)(nil)).Elem()
}

func (o ThreeTierFullResourceNamesPtrOutput) ToThreeTierFullResourceNamesPtrOutput() ThreeTierFullResourceNamesPtrOutput {
	return o
}

func (o ThreeTierFullResourceNamesPtrOutput) ToThreeTierFullResourceNamesPtrOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesPtrOutput {
	return o
}

func (o ThreeTierFullResourceNamesPtrOutput) Elem() ThreeTierFullResourceNamesOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) ThreeTierFullResourceNames {
		if v != nil {
			return *v
		}
		var ret ThreeTierFullResourceNames
		return ret
	}).(ThreeTierFullResourceNamesOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
func (o ThreeTierFullResourceNamesPtrOutput) ApplicationServer() ApplicationServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) *ApplicationServerFullResourceNames {
		if v == nil {
			return nil
		}
		return v.ApplicationServer
	}).(ApplicationServerFullResourceNamesPtrOutput)
}

// The full resource names object for central server layer resources.
func (o ThreeTierFullResourceNamesPtrOutput) CentralServer() CentralServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) *CentralServerFullResourceNames {
		if v == nil {
			return nil
		}
		return v.CentralServer
	}).(CentralServerFullResourceNamesPtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
func (o ThreeTierFullResourceNamesPtrOutput) DatabaseServer() DatabaseServerFullResourceNamesPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) *DatabaseServerFullResourceNames {
		if v == nil {
			return nil
		}
		return v.DatabaseServer
	}).(DatabaseServerFullResourceNamesPtrOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o ThreeTierFullResourceNamesPtrOutput) NamingPatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) *string {
		if v == nil {
			return nil
		}
		return &v.NamingPatternType
	}).(pulumi.StringPtrOutput)
}

// The resource names object for shared storage.
func (o ThreeTierFullResourceNamesPtrOutput) SharedStorage() SharedStorageResourceNamesPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNames) *SharedStorageResourceNames {
		if v == nil {
			return nil
		}
		return v.SharedStorage
	}).(SharedStorageResourceNamesPtrOutput)
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNamesResponse struct {
	// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
	ApplicationServer *ApplicationServerFullResourceNamesResponse `pulumi:"applicationServer"`
	// The full resource names object for central server layer resources.
	CentralServer *CentralServerFullResourceNamesResponse `pulumi:"centralServer"`
	// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
	DatabaseServer *DatabaseServerFullResourceNamesResponse `pulumi:"databaseServer"`
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for shared storage.
	SharedStorage *SharedStorageResourceNamesResponse `pulumi:"sharedStorage"`
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (ThreeTierFullResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreeTierFullResourceNamesResponse)(nil)).Elem()
}

func (o ThreeTierFullResourceNamesResponseOutput) ToThreeTierFullResourceNamesResponseOutput() ThreeTierFullResourceNamesResponseOutput {
	return o
}

func (o ThreeTierFullResourceNamesResponseOutput) ToThreeTierFullResourceNamesResponseOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesResponseOutput {
	return o
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
func (o ThreeTierFullResourceNamesResponseOutput) ApplicationServer() ApplicationServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNamesResponse) *ApplicationServerFullResourceNamesResponse {
		return v.ApplicationServer
	}).(ApplicationServerFullResourceNamesResponsePtrOutput)
}

// The full resource names object for central server layer resources.
func (o ThreeTierFullResourceNamesResponseOutput) CentralServer() CentralServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNamesResponse) *CentralServerFullResourceNamesResponse {
		return v.CentralServer
	}).(CentralServerFullResourceNamesResponsePtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
func (o ThreeTierFullResourceNamesResponseOutput) DatabaseServer() DatabaseServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNamesResponse) *DatabaseServerFullResourceNamesResponse {
		return v.DatabaseServer
	}).(DatabaseServerFullResourceNamesResponsePtrOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o ThreeTierFullResourceNamesResponseOutput) NamingPatternType() pulumi.StringOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNamesResponse) string { return v.NamingPatternType }).(pulumi.StringOutput)
}

// The resource names object for shared storage.
func (o ThreeTierFullResourceNamesResponseOutput) SharedStorage() SharedStorageResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v ThreeTierFullResourceNamesResponse) *SharedStorageResourceNamesResponse { return v.SharedStorage }).(SharedStorageResourceNamesResponsePtrOutput)
}

type ThreeTierFullResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (ThreeTierFullResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThreeTierFullResourceNamesResponse)(nil)).Elem()
}

func (o ThreeTierFullResourceNamesResponsePtrOutput) ToThreeTierFullResourceNamesResponsePtrOutput() ThreeTierFullResourceNamesResponsePtrOutput {
	return o
}

func (o ThreeTierFullResourceNamesResponsePtrOutput) ToThreeTierFullResourceNamesResponsePtrOutputWithContext(ctx context.Context) ThreeTierFullResourceNamesResponsePtrOutput {
	return o
}

func (o ThreeTierFullResourceNamesResponsePtrOutput) Elem() ThreeTierFullResourceNamesResponseOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) ThreeTierFullResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret ThreeTierFullResourceNamesResponse
		return ret
	}).(ThreeTierFullResourceNamesResponseOutput)
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
func (o ThreeTierFullResourceNamesResponsePtrOutput) ApplicationServer() ApplicationServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) *ApplicationServerFullResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.ApplicationServer
	}).(ApplicationServerFullResourceNamesResponsePtrOutput)
}

// The full resource names object for central server layer resources.
func (o ThreeTierFullResourceNamesResponsePtrOutput) CentralServer() CentralServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) *CentralServerFullResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.CentralServer
	}).(CentralServerFullResourceNamesResponsePtrOutput)
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
func (o ThreeTierFullResourceNamesResponsePtrOutput) DatabaseServer() DatabaseServerFullResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) *DatabaseServerFullResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.DatabaseServer
	}).(DatabaseServerFullResourceNamesResponsePtrOutput)
}

// The pattern type to be used for resource naming.
// Expected value is 'FullResourceName'.
func (o ThreeTierFullResourceNamesResponsePtrOutput) NamingPatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NamingPatternType
	}).(pulumi.StringPtrOutput)
}

// The resource names object for shared storage.
func (o ThreeTierFullResourceNamesResponsePtrOutput) SharedStorage() SharedStorageResourceNamesResponsePtrOutput {
	return o.ApplyT(func(v *ThreeTierFullResourceNamesResponse) *SharedStorageResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.SharedStorage
	}).(SharedStorageResourceNamesResponsePtrOutput)
}

// Tiering Policy for a target tier.
// If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
type TieringPolicy struct {
	// Number of days/weeks/months/years to retain backups in current tier before tiering.
	// Used only if TieringMode is set to TierAfter
	Duration *int `pulumi:"duration"`
	// Retention duration type: days/weeks/months/years
	// Used only if TieringMode is set to TierAfter
	DurationType *string `pulumi:"durationType"`
	// Tiering Mode to control automatic tiering of recovery points. Supported values are:
	// 1. TierRecommended: Tier all recovery points recommended to be tiered
	// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
	// 3. DoNotTier: Do not tier any recovery points
	TieringMode *string `pulumi:"tieringMode"`
}

// TieringPolicyInput is an input type that accepts TieringPolicyArgs and TieringPolicyOutput values.
// You can construct a concrete instance of `TieringPolicyInput` via:
//
//	TieringPolicyArgs{...}
type TieringPolicyInput interface {
	pulumi.Input

	ToTieringPolicyOutput() TieringPolicyOutput
	ToTieringPolicyOutputWithContext(context.Context) TieringPolicyOutput
}

// Tiering Policy for a target tier.
// If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
type TieringPolicyArgs struct {
	// Number of days/weeks/months/years to retain backups in current tier before tiering.
	// Used only if TieringMode is set to TierAfter
	Duration pulumi.IntPtrInput `pulumi:"duration"`
	// Retention duration type: days/weeks/months/years
	// Used only if TieringMode is set to TierAfter
	DurationType pulumi.StringPtrInput `pulumi:"durationType"`
	// Tiering Mode to control automatic tiering of recovery points. Supported values are:
	// 1. TierRecommended: Tier all recovery points recommended to be tiered
	// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
	// 3. DoNotTier: Do not tier any recovery points
	TieringMode pulumi.StringPtrInput `pulumi:"tieringMode"`
}

func (TieringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TieringPolicy)(nil)).Elem()
}

func (i TieringPolicyArgs) ToTieringPolicyOutput() TieringPolicyOutput {
	return i.ToTieringPolicyOutputWithContext(context.Background())
}

func (i TieringPolicyArgs) ToTieringPolicyOutputWithContext(ctx context.Context) TieringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TieringPolicyOutput)
}

// TieringPolicyMapInput is an input type that accepts TieringPolicyMap and TieringPolicyMapOutput values.
// You can construct a concrete instance of `TieringPolicyMapInput` via:
//
//	TieringPolicyMap{ "key": TieringPolicyArgs{...} }
type TieringPolicyMapInput interface {
	pulumi.Input

	ToTieringPolicyMapOutput() TieringPolicyMapOutput
	ToTieringPolicyMapOutputWithContext(context.Context) TieringPolicyMapOutput
}

type TieringPolicyMap map[string]TieringPolicyInput

func (TieringPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TieringPolicy)(nil)).Elem()
}

func (i TieringPolicyMap) ToTieringPolicyMapOutput() TieringPolicyMapOutput {
	return i.ToTieringPolicyMapOutputWithContext(context.Background())
}

func (i TieringPolicyMap) ToTieringPolicyMapOutputWithContext(ctx context.Context) TieringPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TieringPolicyMapOutput)
}

// Tiering Policy for a target tier.
// If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
type TieringPolicyOutput struct{ *pulumi.OutputState }

func (TieringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TieringPolicy)(nil)).Elem()
}

func (o TieringPolicyOutput) ToTieringPolicyOutput() TieringPolicyOutput {
	return o
}

func (o TieringPolicyOutput) ToTieringPolicyOutputWithContext(ctx context.Context) TieringPolicyOutput {
	return o
}

// Number of days/weeks/months/years to retain backups in current tier before tiering.
// Used only if TieringMode is set to TierAfter
func (o TieringPolicyOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TieringPolicy) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Retention duration type: days/weeks/months/years
// Used only if TieringMode is set to TierAfter
func (o TieringPolicyOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TieringPolicy) *string { return v.DurationType }).(pulumi.StringPtrOutput)
}

// Tiering Mode to control automatic tiering of recovery points. Supported values are:
// 1. TierRecommended: Tier all recovery points recommended to be tiered
// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
// 3. DoNotTier: Do not tier any recovery points
func (o TieringPolicyOutput) TieringMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TieringPolicy) *string { return v.TieringMode }).(pulumi.StringPtrOutput)
}

type TieringPolicyMapOutput struct{ *pulumi.OutputState }

func (TieringPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TieringPolicy)(nil)).Elem()
}

func (o TieringPolicyMapOutput) ToTieringPolicyMapOutput() TieringPolicyMapOutput {
	return o
}

func (o TieringPolicyMapOutput) ToTieringPolicyMapOutputWithContext(ctx context.Context) TieringPolicyMapOutput {
	return o
}

func (o TieringPolicyMapOutput) MapIndex(k pulumi.StringInput) TieringPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TieringPolicy {
		return vs[0].(map[string]TieringPolicy)[vs[1].(string)]
	}).(TieringPolicyOutput)
}

// Tiering Policy for a target tier.
// If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
type TieringPolicyResponse struct {
	// Number of days/weeks/months/years to retain backups in current tier before tiering.
	// Used only if TieringMode is set to TierAfter
	Duration *int `pulumi:"duration"`
	// Retention duration type: days/weeks/months/years
	// Used only if TieringMode is set to TierAfter
	DurationType *string `pulumi:"durationType"`
	// Tiering Mode to control automatic tiering of recovery points. Supported values are:
	// 1. TierRecommended: Tier all recovery points recommended to be tiered
	// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
	// 3. DoNotTier: Do not tier any recovery points
	TieringMode *string `pulumi:"tieringMode"`
}

// Tiering Policy for a target tier.
// If the policy is not specified for a given target tier, service retains the existing configured tiering policy for that tier
type TieringPolicyResponseOutput struct{ *pulumi.OutputState }

func (TieringPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TieringPolicyResponse)(nil)).Elem()
}

func (o TieringPolicyResponseOutput) ToTieringPolicyResponseOutput() TieringPolicyResponseOutput {
	return o
}

func (o TieringPolicyResponseOutput) ToTieringPolicyResponseOutputWithContext(ctx context.Context) TieringPolicyResponseOutput {
	return o
}

// Number of days/weeks/months/years to retain backups in current tier before tiering.
// Used only if TieringMode is set to TierAfter
func (o TieringPolicyResponseOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TieringPolicyResponse) *int { return v.Duration }).(pulumi.IntPtrOutput)
}

// Retention duration type: days/weeks/months/years
// Used only if TieringMode is set to TierAfter
func (o TieringPolicyResponseOutput) DurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TieringPolicyResponse) *string { return v.DurationType }).(pulumi.StringPtrOutput)
}

// Tiering Mode to control automatic tiering of recovery points. Supported values are:
// 1. TierRecommended: Tier all recovery points recommended to be tiered
// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
// 3. DoNotTier: Do not tier any recovery points
func (o TieringPolicyResponseOutput) TieringMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TieringPolicyResponse) *string { return v.TieringMode }).(pulumi.StringPtrOutput)
}

type TieringPolicyResponseMapOutput struct{ *pulumi.OutputState }

func (TieringPolicyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TieringPolicyResponse)(nil)).Elem()
}

func (o TieringPolicyResponseMapOutput) ToTieringPolicyResponseMapOutput() TieringPolicyResponseMapOutput {
	return o
}

func (o TieringPolicyResponseMapOutput) ToTieringPolicyResponseMapOutputWithContext(ctx context.Context) TieringPolicyResponseMapOutput {
	return o
}

func (o TieringPolicyResponseMapOutput) MapIndex(k pulumi.StringInput) TieringPolicyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TieringPolicyResponse {
		return vs[0].(map[string]TieringPolicyResponse)[vs[1].(string)]
	}).(TieringPolicyResponseOutput)
}

// User assigned managed identity properties.
type UserAssignedIdentityProperties struct {
	ClientId    *string `pulumi:"clientId"`
	PrincipalId *string `pulumi:"principalId"`
}

// UserAssignedIdentityPropertiesInput is an input type that accepts UserAssignedIdentityPropertiesArgs and UserAssignedIdentityPropertiesOutput values.
// You can construct a concrete instance of `UserAssignedIdentityPropertiesInput` via:
//
//	UserAssignedIdentityPropertiesArgs{...}
type UserAssignedIdentityPropertiesInput interface {
	pulumi.Input

	ToUserAssignedIdentityPropertiesOutput() UserAssignedIdentityPropertiesOutput
	ToUserAssignedIdentityPropertiesOutputWithContext(context.Context) UserAssignedIdentityPropertiesOutput
}

// User assigned managed identity properties.
type UserAssignedIdentityPropertiesArgs struct {
	ClientId    pulumi.StringPtrInput `pulumi:"clientId"`
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (UserAssignedIdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityProperties)(nil)).Elem()
}

func (i UserAssignedIdentityPropertiesArgs) ToUserAssignedIdentityPropertiesOutput() UserAssignedIdentityPropertiesOutput {
	return i.ToUserAssignedIdentityPropertiesOutputWithContext(context.Background())
}

func (i UserAssignedIdentityPropertiesArgs) ToUserAssignedIdentityPropertiesOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityPropertiesOutput)
}

func (i UserAssignedIdentityPropertiesArgs) ToUserAssignedIdentityPropertiesPtrOutput() UserAssignedIdentityPropertiesPtrOutput {
	return i.ToUserAssignedIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i UserAssignedIdentityPropertiesArgs) ToUserAssignedIdentityPropertiesPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityPropertiesOutput).ToUserAssignedIdentityPropertiesPtrOutputWithContext(ctx)
}

// UserAssignedIdentityPropertiesPtrInput is an input type that accepts UserAssignedIdentityPropertiesArgs, UserAssignedIdentityPropertiesPtr and UserAssignedIdentityPropertiesPtrOutput values.
// You can construct a concrete instance of `UserAssignedIdentityPropertiesPtrInput` via:
//
//	        UserAssignedIdentityPropertiesArgs{...}
//
//	or:
//
//	        nil
type UserAssignedIdentityPropertiesPtrInput interface {
	pulumi.Input

	ToUserAssignedIdentityPropertiesPtrOutput() UserAssignedIdentityPropertiesPtrOutput
	ToUserAssignedIdentityPropertiesPtrOutputWithContext(context.Context) UserAssignedIdentityPropertiesPtrOutput
}

type userAssignedIdentityPropertiesPtrType UserAssignedIdentityPropertiesArgs

func UserAssignedIdentityPropertiesPtr(v *UserAssignedIdentityPropertiesArgs) UserAssignedIdentityPropertiesPtrInput {
	return (*userAssignedIdentityPropertiesPtrType)(v)
}

func (*userAssignedIdentityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityProperties)(nil)).Elem()
}

func (i *userAssignedIdentityPropertiesPtrType) ToUserAssignedIdentityPropertiesPtrOutput() UserAssignedIdentityPropertiesPtrOutput {
	return i.ToUserAssignedIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i *userAssignedIdentityPropertiesPtrType) ToUserAssignedIdentityPropertiesPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedIdentityPropertiesPtrOutput)
}

// User assigned managed identity properties.
type UserAssignedIdentityPropertiesOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityProperties)(nil)).Elem()
}

func (o UserAssignedIdentityPropertiesOutput) ToUserAssignedIdentityPropertiesOutput() UserAssignedIdentityPropertiesOutput {
	return o
}

func (o UserAssignedIdentityPropertiesOutput) ToUserAssignedIdentityPropertiesOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesOutput {
	return o
}

func (o UserAssignedIdentityPropertiesOutput) ToUserAssignedIdentityPropertiesPtrOutput() UserAssignedIdentityPropertiesPtrOutput {
	return o.ToUserAssignedIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (o UserAssignedIdentityPropertiesOutput) ToUserAssignedIdentityPropertiesPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedIdentityProperties) *UserAssignedIdentityProperties {
		return &v
	}).(UserAssignedIdentityPropertiesPtrOutput)
}

func (o UserAssignedIdentityPropertiesOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityProperties) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o UserAssignedIdentityPropertiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityProperties) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityProperties)(nil)).Elem()
}

func (o UserAssignedIdentityPropertiesPtrOutput) ToUserAssignedIdentityPropertiesPtrOutput() UserAssignedIdentityPropertiesPtrOutput {
	return o
}

func (o UserAssignedIdentityPropertiesPtrOutput) ToUserAssignedIdentityPropertiesPtrOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesPtrOutput {
	return o
}

func (o UserAssignedIdentityPropertiesPtrOutput) Elem() UserAssignedIdentityPropertiesOutput {
	return o.ApplyT(func(v *UserAssignedIdentityProperties) UserAssignedIdentityProperties {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityProperties
		return ret
	}).(UserAssignedIdentityPropertiesOutput)
}

func (o UserAssignedIdentityPropertiesPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o UserAssignedIdentityPropertiesPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// User assigned managed identity properties.
type UserAssignedIdentityPropertiesResponse struct {
	ClientId    *string `pulumi:"clientId"`
	PrincipalId *string `pulumi:"principalId"`
}

// User assigned managed identity properties.
type UserAssignedIdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserAssignedIdentityPropertiesResponseOutput) ToUserAssignedIdentityPropertiesResponseOutput() UserAssignedIdentityPropertiesResponseOutput {
	return o
}

func (o UserAssignedIdentityPropertiesResponseOutput) ToUserAssignedIdentityPropertiesResponseOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesResponseOutput {
	return o
}

func (o UserAssignedIdentityPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o UserAssignedIdentityPropertiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedIdentityPropertiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type UserAssignedIdentityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserAssignedIdentityPropertiesResponsePtrOutput) ToUserAssignedIdentityPropertiesResponsePtrOutput() UserAssignedIdentityPropertiesResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityPropertiesResponsePtrOutput) ToUserAssignedIdentityPropertiesResponsePtrOutputWithContext(ctx context.Context) UserAssignedIdentityPropertiesResponsePtrOutput {
	return o
}

func (o UserAssignedIdentityPropertiesResponsePtrOutput) Elem() UserAssignedIdentityPropertiesResponseOutput {
	return o.ApplyT(func(v *UserAssignedIdentityPropertiesResponse) UserAssignedIdentityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedIdentityPropertiesResponse
		return ret
	}).(UserAssignedIdentityPropertiesResponseOutput)
}

func (o UserAssignedIdentityPropertiesResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o UserAssignedIdentityPropertiesResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedIdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// User assigned managed identity details.
type UserAssignedManagedIdentityDetails struct {
	IdentityArmId *string `pulumi:"identityArmId"`
	IdentityName  *string `pulumi:"identityName"`
	// User assigned managed identity properties.
	UserAssignedIdentityProperties *UserAssignedIdentityProperties `pulumi:"userAssignedIdentityProperties"`
}

// UserAssignedManagedIdentityDetailsInput is an input type that accepts UserAssignedManagedIdentityDetailsArgs and UserAssignedManagedIdentityDetailsOutput values.
// You can construct a concrete instance of `UserAssignedManagedIdentityDetailsInput` via:
//
//	UserAssignedManagedIdentityDetailsArgs{...}
type UserAssignedManagedIdentityDetailsInput interface {
	pulumi.Input

	ToUserAssignedManagedIdentityDetailsOutput() UserAssignedManagedIdentityDetailsOutput
	ToUserAssignedManagedIdentityDetailsOutputWithContext(context.Context) UserAssignedManagedIdentityDetailsOutput
}

// User assigned managed identity details.
type UserAssignedManagedIdentityDetailsArgs struct {
	IdentityArmId pulumi.StringPtrInput `pulumi:"identityArmId"`
	IdentityName  pulumi.StringPtrInput `pulumi:"identityName"`
	// User assigned managed identity properties.
	UserAssignedIdentityProperties UserAssignedIdentityPropertiesPtrInput `pulumi:"userAssignedIdentityProperties"`
}

func (UserAssignedManagedIdentityDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedManagedIdentityDetails)(nil)).Elem()
}

func (i UserAssignedManagedIdentityDetailsArgs) ToUserAssignedManagedIdentityDetailsOutput() UserAssignedManagedIdentityDetailsOutput {
	return i.ToUserAssignedManagedIdentityDetailsOutputWithContext(context.Background())
}

func (i UserAssignedManagedIdentityDetailsArgs) ToUserAssignedManagedIdentityDetailsOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedManagedIdentityDetailsOutput)
}

func (i UserAssignedManagedIdentityDetailsArgs) ToUserAssignedManagedIdentityDetailsPtrOutput() UserAssignedManagedIdentityDetailsPtrOutput {
	return i.ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(context.Background())
}

func (i UserAssignedManagedIdentityDetailsArgs) ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedManagedIdentityDetailsOutput).ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(ctx)
}

// UserAssignedManagedIdentityDetailsPtrInput is an input type that accepts UserAssignedManagedIdentityDetailsArgs, UserAssignedManagedIdentityDetailsPtr and UserAssignedManagedIdentityDetailsPtrOutput values.
// You can construct a concrete instance of `UserAssignedManagedIdentityDetailsPtrInput` via:
//
//	        UserAssignedManagedIdentityDetailsArgs{...}
//
//	or:
//
//	        nil
type UserAssignedManagedIdentityDetailsPtrInput interface {
	pulumi.Input

	ToUserAssignedManagedIdentityDetailsPtrOutput() UserAssignedManagedIdentityDetailsPtrOutput
	ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(context.Context) UserAssignedManagedIdentityDetailsPtrOutput
}

type userAssignedManagedIdentityDetailsPtrType UserAssignedManagedIdentityDetailsArgs

func UserAssignedManagedIdentityDetailsPtr(v *UserAssignedManagedIdentityDetailsArgs) UserAssignedManagedIdentityDetailsPtrInput {
	return (*userAssignedManagedIdentityDetailsPtrType)(v)
}

func (*userAssignedManagedIdentityDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedManagedIdentityDetails)(nil)).Elem()
}

func (i *userAssignedManagedIdentityDetailsPtrType) ToUserAssignedManagedIdentityDetailsPtrOutput() UserAssignedManagedIdentityDetailsPtrOutput {
	return i.ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(context.Background())
}

func (i *userAssignedManagedIdentityDetailsPtrType) ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedManagedIdentityDetailsPtrOutput)
}

// User assigned managed identity details.
type UserAssignedManagedIdentityDetailsOutput struct{ *pulumi.OutputState }

func (UserAssignedManagedIdentityDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedManagedIdentityDetails)(nil)).Elem()
}

func (o UserAssignedManagedIdentityDetailsOutput) ToUserAssignedManagedIdentityDetailsOutput() UserAssignedManagedIdentityDetailsOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsOutput) ToUserAssignedManagedIdentityDetailsOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsOutput) ToUserAssignedManagedIdentityDetailsPtrOutput() UserAssignedManagedIdentityDetailsPtrOutput {
	return o.ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(context.Background())
}

func (o UserAssignedManagedIdentityDetailsOutput) ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedManagedIdentityDetails) *UserAssignedManagedIdentityDetails {
		return &v
	}).(UserAssignedManagedIdentityDetailsPtrOutput)
}

func (o UserAssignedManagedIdentityDetailsOutput) IdentityArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetails) *string { return v.IdentityArmId }).(pulumi.StringPtrOutput)
}

func (o UserAssignedManagedIdentityDetailsOutput) IdentityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetails) *string { return v.IdentityName }).(pulumi.StringPtrOutput)
}

// User assigned managed identity properties.
func (o UserAssignedManagedIdentityDetailsOutput) UserAssignedIdentityProperties() UserAssignedIdentityPropertiesPtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetails) *UserAssignedIdentityProperties {
		return v.UserAssignedIdentityProperties
	}).(UserAssignedIdentityPropertiesPtrOutput)
}

type UserAssignedManagedIdentityDetailsPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedManagedIdentityDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedManagedIdentityDetails)(nil)).Elem()
}

func (o UserAssignedManagedIdentityDetailsPtrOutput) ToUserAssignedManagedIdentityDetailsPtrOutput() UserAssignedManagedIdentityDetailsPtrOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsPtrOutput) ToUserAssignedManagedIdentityDetailsPtrOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsPtrOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsPtrOutput) Elem() UserAssignedManagedIdentityDetailsOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetails) UserAssignedManagedIdentityDetails {
		if v != nil {
			return *v
		}
		var ret UserAssignedManagedIdentityDetails
		return ret
	}).(UserAssignedManagedIdentityDetailsOutput)
}

func (o UserAssignedManagedIdentityDetailsPtrOutput) IdentityArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetails) *string {
		if v == nil {
			return nil
		}
		return v.IdentityArmId
	}).(pulumi.StringPtrOutput)
}

func (o UserAssignedManagedIdentityDetailsPtrOutput) IdentityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetails) *string {
		if v == nil {
			return nil
		}
		return v.IdentityName
	}).(pulumi.StringPtrOutput)
}

// User assigned managed identity properties.
func (o UserAssignedManagedIdentityDetailsPtrOutput) UserAssignedIdentityProperties() UserAssignedIdentityPropertiesPtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetails) *UserAssignedIdentityProperties {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityProperties
	}).(UserAssignedIdentityPropertiesPtrOutput)
}

// User assigned managed identity details.
type UserAssignedManagedIdentityDetailsResponse struct {
	IdentityArmId *string `pulumi:"identityArmId"`
	IdentityName  *string `pulumi:"identityName"`
	// User assigned managed identity properties.
	UserAssignedIdentityProperties *UserAssignedIdentityPropertiesResponse `pulumi:"userAssignedIdentityProperties"`
}

// User assigned managed identity details.
type UserAssignedManagedIdentityDetailsResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedManagedIdentityDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedManagedIdentityDetailsResponse)(nil)).Elem()
}

func (o UserAssignedManagedIdentityDetailsResponseOutput) ToUserAssignedManagedIdentityDetailsResponseOutput() UserAssignedManagedIdentityDetailsResponseOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsResponseOutput) ToUserAssignedManagedIdentityDetailsResponseOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsResponseOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsResponseOutput) IdentityArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetailsResponse) *string { return v.IdentityArmId }).(pulumi.StringPtrOutput)
}

func (o UserAssignedManagedIdentityDetailsResponseOutput) IdentityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetailsResponse) *string { return v.IdentityName }).(pulumi.StringPtrOutput)
}

// User assigned managed identity properties.
func (o UserAssignedManagedIdentityDetailsResponseOutput) UserAssignedIdentityProperties() UserAssignedIdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v UserAssignedManagedIdentityDetailsResponse) *UserAssignedIdentityPropertiesResponse {
		return v.UserAssignedIdentityProperties
	}).(UserAssignedIdentityPropertiesResponsePtrOutput)
}

type UserAssignedManagedIdentityDetailsResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedManagedIdentityDetailsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedManagedIdentityDetailsResponse)(nil)).Elem()
}

func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) ToUserAssignedManagedIdentityDetailsResponsePtrOutput() UserAssignedManagedIdentityDetailsResponsePtrOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) ToUserAssignedManagedIdentityDetailsResponsePtrOutputWithContext(ctx context.Context) UserAssignedManagedIdentityDetailsResponsePtrOutput {
	return o
}

func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) Elem() UserAssignedManagedIdentityDetailsResponseOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetailsResponse) UserAssignedManagedIdentityDetailsResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedManagedIdentityDetailsResponse
		return ret
	}).(UserAssignedManagedIdentityDetailsResponseOutput)
}

func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) IdentityArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdentityArmId
	}).(pulumi.StringPtrOutput)
}

func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) IdentityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetailsResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdentityName
	}).(pulumi.StringPtrOutput)
}

// User assigned managed identity properties.
func (o UserAssignedManagedIdentityDetailsResponsePtrOutput) UserAssignedIdentityProperties() UserAssignedIdentityPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *UserAssignedManagedIdentityDetailsResponse) *UserAssignedIdentityPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityProperties
	}).(UserAssignedIdentityPropertiesResponsePtrOutput)
}

// Managed service identity (user assigned identities)
type UserAssignedServiceIdentity struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// UserAssignedServiceIdentityInput is an input type that accepts UserAssignedServiceIdentityArgs and UserAssignedServiceIdentityOutput values.
// You can construct a concrete instance of `UserAssignedServiceIdentityInput` via:
//
//	UserAssignedServiceIdentityArgs{...}
type UserAssignedServiceIdentityInput interface {
	pulumi.Input

	ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput
	ToUserAssignedServiceIdentityOutputWithContext(context.Context) UserAssignedServiceIdentityOutput
}

// Managed service identity (user assigned identities)
type UserAssignedServiceIdentityArgs struct {
	// Type of manage identity
	Type pulumi.StringInput `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (UserAssignedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentity)(nil)).Elem()
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput {
	return i.ToUserAssignedServiceIdentityOutputWithContext(context.Background())
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityOutputWithContext(ctx context.Context) UserAssignedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityOutput)
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return i.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityOutput).ToUserAssignedServiceIdentityPtrOutputWithContext(ctx)
}

// UserAssignedServiceIdentityPtrInput is an input type that accepts UserAssignedServiceIdentityArgs, UserAssignedServiceIdentityPtr and UserAssignedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `UserAssignedServiceIdentityPtrInput` via:
//
//	        UserAssignedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type UserAssignedServiceIdentityPtrInput interface {
	pulumi.Input

	ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput
	ToUserAssignedServiceIdentityPtrOutputWithContext(context.Context) UserAssignedServiceIdentityPtrOutput
}

type userAssignedServiceIdentityPtrType UserAssignedServiceIdentityArgs

func UserAssignedServiceIdentityPtr(v *UserAssignedServiceIdentityArgs) UserAssignedServiceIdentityPtrInput {
	return (*userAssignedServiceIdentityPtrType)(v)
}

func (*userAssignedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentity)(nil)).Elem()
}

func (i *userAssignedServiceIdentityPtrType) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return i.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *userAssignedServiceIdentityPtrType) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityPtrOutput)
}

// Managed service identity (user assigned identities)
type UserAssignedServiceIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentity)(nil)).Elem()
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput {
	return o
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityOutputWithContext(ctx context.Context) UserAssignedServiceIdentityOutput {
	return o
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return o.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedServiceIdentity) *UserAssignedServiceIdentity {
		return &v
	}).(UserAssignedServiceIdentityPtrOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type UserAssignedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentity)(nil)).Elem()
}

func (o UserAssignedServiceIdentityPtrOutput) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return o
}

func (o UserAssignedServiceIdentityPtrOutput) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return o
}

func (o UserAssignedServiceIdentityPtrOutput) Elem() UserAssignedServiceIdentityOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) UserAssignedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret UserAssignedServiceIdentity
		return ret
	}).(UserAssignedServiceIdentityOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (user assigned identities)
type UserAssignedServiceIdentityResponse struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (user assigned identities)
type UserAssignedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o UserAssignedServiceIdentityResponseOutput) ToUserAssignedServiceIdentityResponseOutput() UserAssignedServiceIdentityResponseOutput {
	return o
}

func (o UserAssignedServiceIdentityResponseOutput) ToUserAssignedServiceIdentityResponseOutputWithContext(ctx context.Context) UserAssignedServiceIdentityResponseOutput {
	return o
}

// Type of manage identity
func (o UserAssignedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type UserAssignedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o UserAssignedServiceIdentityResponsePtrOutput) ToUserAssignedServiceIdentityResponsePtrOutput() UserAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedServiceIdentityResponsePtrOutput) ToUserAssignedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedServiceIdentityResponsePtrOutput) Elem() UserAssignedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) UserAssignedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedServiceIdentityResponse
		return ret
	}).(UserAssignedServiceIdentityResponseOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Defines the VM Backup data for a virtual instance for SAP.
type VMBackupData struct {
	// Defines the policy properties for virtual machine backup.
	BackupPolicy VMBackupPolicyProperties `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'VM'.
	BackupType string `pulumi:"backupType"`
	// Defines the disk exclusion properties for virtual machine backup.
	DiskExclusionProperties *DiskExclusionProperties `pulumi:"diskExclusionProperties"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
}

// VMBackupDataInput is an input type that accepts VMBackupDataArgs and VMBackupDataOutput values.
// You can construct a concrete instance of `VMBackupDataInput` via:
//
//	VMBackupDataArgs{...}
type VMBackupDataInput interface {
	pulumi.Input

	ToVMBackupDataOutput() VMBackupDataOutput
	ToVMBackupDataOutputWithContext(context.Context) VMBackupDataOutput
}

// Defines the VM Backup data for a virtual instance for SAP.
type VMBackupDataArgs struct {
	// Defines the policy properties for virtual machine backup.
	BackupPolicy VMBackupPolicyPropertiesInput `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'VM'.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// Defines the disk exclusion properties for virtual machine backup.
	DiskExclusionProperties DiskExclusionPropertiesPtrInput `pulumi:"diskExclusionProperties"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault pulumi.Input `pulumi:"recoveryServicesVault"`
}

func (VMBackupDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupData)(nil)).Elem()
}

func (i VMBackupDataArgs) ToVMBackupDataOutput() VMBackupDataOutput {
	return i.ToVMBackupDataOutputWithContext(context.Background())
}

func (i VMBackupDataArgs) ToVMBackupDataOutputWithContext(ctx context.Context) VMBackupDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupDataOutput)
}

func (i VMBackupDataArgs) ToVMBackupDataPtrOutput() VMBackupDataPtrOutput {
	return i.ToVMBackupDataPtrOutputWithContext(context.Background())
}

func (i VMBackupDataArgs) ToVMBackupDataPtrOutputWithContext(ctx context.Context) VMBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupDataOutput).ToVMBackupDataPtrOutputWithContext(ctx)
}

// VMBackupDataPtrInput is an input type that accepts VMBackupDataArgs, VMBackupDataPtr and VMBackupDataPtrOutput values.
// You can construct a concrete instance of `VMBackupDataPtrInput` via:
//
//	        VMBackupDataArgs{...}
//
//	or:
//
//	        nil
type VMBackupDataPtrInput interface {
	pulumi.Input

	ToVMBackupDataPtrOutput() VMBackupDataPtrOutput
	ToVMBackupDataPtrOutputWithContext(context.Context) VMBackupDataPtrOutput
}

type vmbackupDataPtrType VMBackupDataArgs

func VMBackupDataPtr(v *VMBackupDataArgs) VMBackupDataPtrInput {
	return (*vmbackupDataPtrType)(v)
}

func (*vmbackupDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupData)(nil)).Elem()
}

func (i *vmbackupDataPtrType) ToVMBackupDataPtrOutput() VMBackupDataPtrOutput {
	return i.ToVMBackupDataPtrOutputWithContext(context.Background())
}

func (i *vmbackupDataPtrType) ToVMBackupDataPtrOutputWithContext(ctx context.Context) VMBackupDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupDataPtrOutput)
}

// Defines the VM Backup data for a virtual instance for SAP.
type VMBackupDataOutput struct{ *pulumi.OutputState }

func (VMBackupDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupData)(nil)).Elem()
}

func (o VMBackupDataOutput) ToVMBackupDataOutput() VMBackupDataOutput {
	return o
}

func (o VMBackupDataOutput) ToVMBackupDataOutputWithContext(ctx context.Context) VMBackupDataOutput {
	return o
}

func (o VMBackupDataOutput) ToVMBackupDataPtrOutput() VMBackupDataPtrOutput {
	return o.ToVMBackupDataPtrOutputWithContext(context.Background())
}

func (o VMBackupDataOutput) ToVMBackupDataPtrOutputWithContext(ctx context.Context) VMBackupDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VMBackupData) *VMBackupData {
		return &v
	}).(VMBackupDataPtrOutput)
}

// Defines the policy properties for virtual machine backup.
func (o VMBackupDataOutput) BackupPolicy() VMBackupPolicyPropertiesOutput {
	return o.ApplyT(func(v VMBackupData) VMBackupPolicyProperties { return v.BackupPolicy }).(VMBackupPolicyPropertiesOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'VM'.
func (o VMBackupDataOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupData) string { return v.BackupType }).(pulumi.StringOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
func (o VMBackupDataOutput) DiskExclusionProperties() DiskExclusionPropertiesPtrOutput {
	return o.ApplyT(func(v VMBackupData) *DiskExclusionProperties { return v.DiskExclusionProperties }).(DiskExclusionPropertiesPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o VMBackupDataOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupData) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

type VMBackupDataPtrOutput struct{ *pulumi.OutputState }

func (VMBackupDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupData)(nil)).Elem()
}

func (o VMBackupDataPtrOutput) ToVMBackupDataPtrOutput() VMBackupDataPtrOutput {
	return o
}

func (o VMBackupDataPtrOutput) ToVMBackupDataPtrOutputWithContext(ctx context.Context) VMBackupDataPtrOutput {
	return o
}

func (o VMBackupDataPtrOutput) Elem() VMBackupDataOutput {
	return o.ApplyT(func(v *VMBackupData) VMBackupData {
		if v != nil {
			return *v
		}
		var ret VMBackupData
		return ret
	}).(VMBackupDataOutput)
}

// Defines the policy properties for virtual machine backup.
func (o VMBackupDataPtrOutput) BackupPolicy() VMBackupPolicyPropertiesPtrOutput {
	return o.ApplyT(func(v *VMBackupData) *VMBackupPolicyProperties {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(VMBackupPolicyPropertiesPtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'VM'.
func (o VMBackupDataPtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupData) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
func (o VMBackupDataPtrOutput) DiskExclusionProperties() DiskExclusionPropertiesPtrOutput {
	return o.ApplyT(func(v *VMBackupData) *DiskExclusionProperties {
		if v == nil {
			return nil
		}
		return v.DiskExclusionProperties
	}).(DiskExclusionPropertiesPtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o VMBackupDataPtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupData) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// Defines the VM Backup data for a virtual instance for SAP.
type VMBackupDataResponse struct {
	// Defines the policy properties for virtual machine backup.
	BackupPolicy VMBackupPolicyPropertiesResponse `pulumi:"backupPolicy"`
	// The type of backup, VM, SQL or HANA.
	// Expected value is 'VM'.
	BackupType string `pulumi:"backupType"`
	// Defines the disk exclusion properties for virtual machine backup.
	DiskExclusionProperties *DiskExclusionPropertiesResponse `pulumi:"diskExclusionProperties"`
	// The properties of the recovery services vault used for backup.
	RecoveryServicesVault interface{} `pulumi:"recoveryServicesVault"`
}

// Defines the VM Backup data for a virtual instance for SAP.
type VMBackupDataResponseOutput struct{ *pulumi.OutputState }

func (VMBackupDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupDataResponse)(nil)).Elem()
}

func (o VMBackupDataResponseOutput) ToVMBackupDataResponseOutput() VMBackupDataResponseOutput {
	return o
}

func (o VMBackupDataResponseOutput) ToVMBackupDataResponseOutputWithContext(ctx context.Context) VMBackupDataResponseOutput {
	return o
}

// Defines the policy properties for virtual machine backup.
func (o VMBackupDataResponseOutput) BackupPolicy() VMBackupPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v VMBackupDataResponse) VMBackupPolicyPropertiesResponse { return v.BackupPolicy }).(VMBackupPolicyPropertiesResponseOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'VM'.
func (o VMBackupDataResponseOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupDataResponse) string { return v.BackupType }).(pulumi.StringOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
func (o VMBackupDataResponseOutput) DiskExclusionProperties() DiskExclusionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VMBackupDataResponse) *DiskExclusionPropertiesResponse { return v.DiskExclusionProperties }).(DiskExclusionPropertiesResponsePtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o VMBackupDataResponseOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupDataResponse) interface{} { return v.RecoveryServicesVault }).(pulumi.AnyOutput)
}

type VMBackupDataResponsePtrOutput struct{ *pulumi.OutputState }

func (VMBackupDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupDataResponse)(nil)).Elem()
}

func (o VMBackupDataResponsePtrOutput) ToVMBackupDataResponsePtrOutput() VMBackupDataResponsePtrOutput {
	return o
}

func (o VMBackupDataResponsePtrOutput) ToVMBackupDataResponsePtrOutputWithContext(ctx context.Context) VMBackupDataResponsePtrOutput {
	return o
}

func (o VMBackupDataResponsePtrOutput) Elem() VMBackupDataResponseOutput {
	return o.ApplyT(func(v *VMBackupDataResponse) VMBackupDataResponse {
		if v != nil {
			return *v
		}
		var ret VMBackupDataResponse
		return ret
	}).(VMBackupDataResponseOutput)
}

// Defines the policy properties for virtual machine backup.
func (o VMBackupDataResponsePtrOutput) BackupPolicy() VMBackupPolicyPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VMBackupDataResponse) *VMBackupPolicyPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.BackupPolicy
	}).(VMBackupPolicyPropertiesResponsePtrOutput)
}

// The type of backup, VM, SQL or HANA.
// Expected value is 'VM'.
func (o VMBackupDataResponsePtrOutput) BackupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupDataResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupType
	}).(pulumi.StringPtrOutput)
}

// Defines the disk exclusion properties for virtual machine backup.
func (o VMBackupDataResponsePtrOutput) DiskExclusionProperties() DiskExclusionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VMBackupDataResponse) *DiskExclusionPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.DiskExclusionProperties
	}).(DiskExclusionPropertiesResponsePtrOutput)
}

// The properties of the recovery services vault used for backup.
func (o VMBackupDataResponsePtrOutput) RecoveryServicesVault() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupDataResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RecoveryServicesVault
	}).(pulumi.AnyOutput)
}

// Defines the policy properties for virtual machine backup.
type VMBackupPolicyProperties struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureIaasVM'.
	BackupManagementType string `pulumi:"backupManagementType"`
	// Instant recovery point additional details.
	InstantRPDetails *InstantRPAdditionalDetails `pulumi:"instantRPDetails"`
	// Instant RP retention policy range in days
	InstantRpRetentionRangeInDays *int `pulumi:"instantRpRetentionRangeInDays"`
	// The name of the VM Backup policy.
	Name string `pulumi:"name"`
	// The policy type.
	PolicyType *string `pulumi:"policyType"`
	// Number of items associated with this policy.
	ProtectedItemsCount *int `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []string `pulumi:"resourceGuardOperationRequests"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy interface{} `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy interface{} `pulumi:"schedulePolicy"`
	// Tiering policy to automatically move RPs to another tier
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]TieringPolicy `pulumi:"tieringPolicy"`
	// Time zone optional input as string. For example: "Pacific Standard Time".
	TimeZone *string `pulumi:"timeZone"`
}

// VMBackupPolicyPropertiesInput is an input type that accepts VMBackupPolicyPropertiesArgs and VMBackupPolicyPropertiesOutput values.
// You can construct a concrete instance of `VMBackupPolicyPropertiesInput` via:
//
//	VMBackupPolicyPropertiesArgs{...}
type VMBackupPolicyPropertiesInput interface {
	pulumi.Input

	ToVMBackupPolicyPropertiesOutput() VMBackupPolicyPropertiesOutput
	ToVMBackupPolicyPropertiesOutputWithContext(context.Context) VMBackupPolicyPropertiesOutput
}

// Defines the policy properties for virtual machine backup.
type VMBackupPolicyPropertiesArgs struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureIaasVM'.
	BackupManagementType pulumi.StringInput `pulumi:"backupManagementType"`
	// Instant recovery point additional details.
	InstantRPDetails InstantRPAdditionalDetailsPtrInput `pulumi:"instantRPDetails"`
	// Instant RP retention policy range in days
	InstantRpRetentionRangeInDays pulumi.IntPtrInput `pulumi:"instantRpRetentionRangeInDays"`
	// The name of the VM Backup policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The policy type.
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
	// Number of items associated with this policy.
	ProtectedItemsCount pulumi.IntPtrInput `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests pulumi.StringArrayInput `pulumi:"resourceGuardOperationRequests"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy pulumi.Input `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy pulumi.Input `pulumi:"schedulePolicy"`
	// Tiering policy to automatically move RPs to another tier
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy TieringPolicyMapInput `pulumi:"tieringPolicy"`
	// Time zone optional input as string. For example: "Pacific Standard Time".
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (VMBackupPolicyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupPolicyProperties)(nil)).Elem()
}

func (i VMBackupPolicyPropertiesArgs) ToVMBackupPolicyPropertiesOutput() VMBackupPolicyPropertiesOutput {
	return i.ToVMBackupPolicyPropertiesOutputWithContext(context.Background())
}

func (i VMBackupPolicyPropertiesArgs) ToVMBackupPolicyPropertiesOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupPolicyPropertiesOutput)
}

func (i VMBackupPolicyPropertiesArgs) ToVMBackupPolicyPropertiesPtrOutput() VMBackupPolicyPropertiesPtrOutput {
	return i.ToVMBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (i VMBackupPolicyPropertiesArgs) ToVMBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupPolicyPropertiesOutput).ToVMBackupPolicyPropertiesPtrOutputWithContext(ctx)
}

// VMBackupPolicyPropertiesPtrInput is an input type that accepts VMBackupPolicyPropertiesArgs, VMBackupPolicyPropertiesPtr and VMBackupPolicyPropertiesPtrOutput values.
// You can construct a concrete instance of `VMBackupPolicyPropertiesPtrInput` via:
//
//	        VMBackupPolicyPropertiesArgs{...}
//
//	or:
//
//	        nil
type VMBackupPolicyPropertiesPtrInput interface {
	pulumi.Input

	ToVMBackupPolicyPropertiesPtrOutput() VMBackupPolicyPropertiesPtrOutput
	ToVMBackupPolicyPropertiesPtrOutputWithContext(context.Context) VMBackupPolicyPropertiesPtrOutput
}

type vmbackupPolicyPropertiesPtrType VMBackupPolicyPropertiesArgs

func VMBackupPolicyPropertiesPtr(v *VMBackupPolicyPropertiesArgs) VMBackupPolicyPropertiesPtrInput {
	return (*vmbackupPolicyPropertiesPtrType)(v)
}

func (*vmbackupPolicyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupPolicyProperties)(nil)).Elem()
}

func (i *vmbackupPolicyPropertiesPtrType) ToVMBackupPolicyPropertiesPtrOutput() VMBackupPolicyPropertiesPtrOutput {
	return i.ToVMBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (i *vmbackupPolicyPropertiesPtrType) ToVMBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMBackupPolicyPropertiesPtrOutput)
}

// Defines the policy properties for virtual machine backup.
type VMBackupPolicyPropertiesOutput struct{ *pulumi.OutputState }

func (VMBackupPolicyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupPolicyProperties)(nil)).Elem()
}

func (o VMBackupPolicyPropertiesOutput) ToVMBackupPolicyPropertiesOutput() VMBackupPolicyPropertiesOutput {
	return o
}

func (o VMBackupPolicyPropertiesOutput) ToVMBackupPolicyPropertiesOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesOutput {
	return o
}

func (o VMBackupPolicyPropertiesOutput) ToVMBackupPolicyPropertiesPtrOutput() VMBackupPolicyPropertiesPtrOutput {
	return o.ToVMBackupPolicyPropertiesPtrOutputWithContext(context.Background())
}

func (o VMBackupPolicyPropertiesOutput) ToVMBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VMBackupPolicyProperties) *VMBackupPolicyProperties {
		return &v
	}).(VMBackupPolicyPropertiesPtrOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureIaasVM'.
func (o VMBackupPolicyPropertiesOutput) BackupManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) string { return v.BackupManagementType }).(pulumi.StringOutput)
}

// Instant recovery point additional details.
func (o VMBackupPolicyPropertiesOutput) InstantRPDetails() InstantRPAdditionalDetailsPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) *InstantRPAdditionalDetails { return v.InstantRPDetails }).(InstantRPAdditionalDetailsPtrOutput)
}

// Instant RP retention policy range in days
func (o VMBackupPolicyPropertiesOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) *int { return v.InstantRpRetentionRangeInDays }).(pulumi.IntPtrOutput)
}

// The name of the VM Backup policy.
func (o VMBackupPolicyPropertiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) string { return v.Name }).(pulumi.StringOutput)
}

// The policy type.
func (o VMBackupPolicyPropertiesOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o VMBackupPolicyPropertiesOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) *int { return v.ProtectedItemsCount }).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o VMBackupPolicyPropertiesOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) []string { return v.ResourceGuardOperationRequests }).(pulumi.StringArrayOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o VMBackupPolicyPropertiesOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) interface{} { return v.RetentionPolicy }).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o VMBackupPolicyPropertiesOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) interface{} { return v.SchedulePolicy }).(pulumi.AnyOutput)
}

// Tiering policy to automatically move RPs to another tier
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o VMBackupPolicyPropertiesOutput) TieringPolicy() TieringPolicyMapOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) map[string]TieringPolicy { return v.TieringPolicy }).(TieringPolicyMapOutput)
}

// Time zone optional input as string. For example: "Pacific Standard Time".
func (o VMBackupPolicyPropertiesOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyProperties) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type VMBackupPolicyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VMBackupPolicyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupPolicyProperties)(nil)).Elem()
}

func (o VMBackupPolicyPropertiesPtrOutput) ToVMBackupPolicyPropertiesPtrOutput() VMBackupPolicyPropertiesPtrOutput {
	return o
}

func (o VMBackupPolicyPropertiesPtrOutput) ToVMBackupPolicyPropertiesPtrOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesPtrOutput {
	return o
}

func (o VMBackupPolicyPropertiesPtrOutput) Elem() VMBackupPolicyPropertiesOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) VMBackupPolicyProperties {
		if v != nil {
			return *v
		}
		var ret VMBackupPolicyProperties
		return ret
	}).(VMBackupPolicyPropertiesOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureIaasVM'.
func (o VMBackupPolicyPropertiesPtrOutput) BackupManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.BackupManagementType
	}).(pulumi.StringPtrOutput)
}

// Instant recovery point additional details.
func (o VMBackupPolicyPropertiesPtrOutput) InstantRPDetails() InstantRPAdditionalDetailsPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *InstantRPAdditionalDetails {
		if v == nil {
			return nil
		}
		return v.InstantRPDetails
	}).(InstantRPAdditionalDetailsPtrOutput)
}

// Instant RP retention policy range in days
func (o VMBackupPolicyPropertiesPtrOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *int {
		if v == nil {
			return nil
		}
		return v.InstantRpRetentionRangeInDays
	}).(pulumi.IntPtrOutput)
}

// The name of the VM Backup policy.
func (o VMBackupPolicyPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy type.
func (o VMBackupPolicyPropertiesPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o VMBackupPolicyPropertiesPtrOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *int {
		if v == nil {
			return nil
		}
		return v.ProtectedItemsCount
	}).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o VMBackupPolicyPropertiesPtrOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGuardOperationRequests
	}).(pulumi.StringArrayOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o VMBackupPolicyPropertiesPtrOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o VMBackupPolicyPropertiesPtrOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.SchedulePolicy
	}).(pulumi.AnyOutput)
}

// Tiering policy to automatically move RPs to another tier
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o VMBackupPolicyPropertiesPtrOutput) TieringPolicy() TieringPolicyMapOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) map[string]TieringPolicy {
		if v == nil {
			return nil
		}
		return v.TieringPolicy
	}).(TieringPolicyMapOutput)
}

// Time zone optional input as string. For example: "Pacific Standard Time".
func (o VMBackupPolicyPropertiesPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyProperties) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Defines the policy properties for virtual machine backup.
type VMBackupPolicyPropertiesResponse struct {
	// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
	// Expected value is 'AzureIaasVM'.
	BackupManagementType string `pulumi:"backupManagementType"`
	// Instant recovery point additional details.
	InstantRPDetails *InstantRPAdditionalDetailsResponse `pulumi:"instantRPDetails"`
	// Instant RP retention policy range in days
	InstantRpRetentionRangeInDays *int `pulumi:"instantRpRetentionRangeInDays"`
	// The name of the VM Backup policy.
	Name string `pulumi:"name"`
	// The policy type.
	PolicyType *string `pulumi:"policyType"`
	// Number of items associated with this policy.
	ProtectedItemsCount *int `pulumi:"protectedItemsCount"`
	// ResourceGuard Operation Requests
	ResourceGuardOperationRequests []string `pulumi:"resourceGuardOperationRequests"`
	// Retention policy with the details on backup copy retention ranges.
	RetentionPolicy interface{} `pulumi:"retentionPolicy"`
	// Backup schedule specified as part of backup policy.
	SchedulePolicy interface{} `pulumi:"schedulePolicy"`
	// Tiering policy to automatically move RPs to another tier
	// Key is Target Tier, defined in RecoveryPointTierType enum.
	// Tiering policy specifies the criteria to move RP to the target tier.
	TieringPolicy map[string]TieringPolicyResponse `pulumi:"tieringPolicy"`
	// Time zone optional input as string. For example: "Pacific Standard Time".
	TimeZone *string `pulumi:"timeZone"`
}

// Defines the policy properties for virtual machine backup.
type VMBackupPolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VMBackupPolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VMBackupPolicyPropertiesResponse)(nil)).Elem()
}

func (o VMBackupPolicyPropertiesResponseOutput) ToVMBackupPolicyPropertiesResponseOutput() VMBackupPolicyPropertiesResponseOutput {
	return o
}

func (o VMBackupPolicyPropertiesResponseOutput) ToVMBackupPolicyPropertiesResponseOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesResponseOutput {
	return o
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureIaasVM'.
func (o VMBackupPolicyPropertiesResponseOutput) BackupManagementType() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) string { return v.BackupManagementType }).(pulumi.StringOutput)
}

// Instant recovery point additional details.
func (o VMBackupPolicyPropertiesResponseOutput) InstantRPDetails() InstantRPAdditionalDetailsResponsePtrOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) *InstantRPAdditionalDetailsResponse {
		return v.InstantRPDetails
	}).(InstantRPAdditionalDetailsResponsePtrOutput)
}

// Instant RP retention policy range in days
func (o VMBackupPolicyPropertiesResponseOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) *int { return v.InstantRpRetentionRangeInDays }).(pulumi.IntPtrOutput)
}

// The name of the VM Backup policy.
func (o VMBackupPolicyPropertiesResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The policy type.
func (o VMBackupPolicyPropertiesResponseOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o VMBackupPolicyPropertiesResponseOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) *int { return v.ProtectedItemsCount }).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o VMBackupPolicyPropertiesResponseOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) []string { return v.ResourceGuardOperationRequests }).(pulumi.StringArrayOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o VMBackupPolicyPropertiesResponseOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) interface{} { return v.RetentionPolicy }).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o VMBackupPolicyPropertiesResponseOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) interface{} { return v.SchedulePolicy }).(pulumi.AnyOutput)
}

// Tiering policy to automatically move RPs to another tier
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o VMBackupPolicyPropertiesResponseOutput) TieringPolicy() TieringPolicyResponseMapOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) map[string]TieringPolicyResponse { return v.TieringPolicy }).(TieringPolicyResponseMapOutput)
}

// Time zone optional input as string. For example: "Pacific Standard Time".
func (o VMBackupPolicyPropertiesResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VMBackupPolicyPropertiesResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type VMBackupPolicyPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VMBackupPolicyPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMBackupPolicyPropertiesResponse)(nil)).Elem()
}

func (o VMBackupPolicyPropertiesResponsePtrOutput) ToVMBackupPolicyPropertiesResponsePtrOutput() VMBackupPolicyPropertiesResponsePtrOutput {
	return o
}

func (o VMBackupPolicyPropertiesResponsePtrOutput) ToVMBackupPolicyPropertiesResponsePtrOutputWithContext(ctx context.Context) VMBackupPolicyPropertiesResponsePtrOutput {
	return o
}

func (o VMBackupPolicyPropertiesResponsePtrOutput) Elem() VMBackupPolicyPropertiesResponseOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) VMBackupPolicyPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret VMBackupPolicyPropertiesResponse
		return ret
	}).(VMBackupPolicyPropertiesResponseOutput)
}

// This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types.
// Expected value is 'AzureIaasVM'.
func (o VMBackupPolicyPropertiesResponsePtrOutput) BackupManagementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BackupManagementType
	}).(pulumi.StringPtrOutput)
}

// Instant recovery point additional details.
func (o VMBackupPolicyPropertiesResponsePtrOutput) InstantRPDetails() InstantRPAdditionalDetailsResponsePtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *InstantRPAdditionalDetailsResponse {
		if v == nil {
			return nil
		}
		return v.InstantRPDetails
	}).(InstantRPAdditionalDetailsResponsePtrOutput)
}

// Instant RP retention policy range in days
func (o VMBackupPolicyPropertiesResponsePtrOutput) InstantRpRetentionRangeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstantRpRetentionRangeInDays
	}).(pulumi.IntPtrOutput)
}

// The name of the VM Backup policy.
func (o VMBackupPolicyPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The policy type.
func (o VMBackupPolicyPropertiesResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Number of items associated with this policy.
func (o VMBackupPolicyPropertiesResponsePtrOutput) ProtectedItemsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProtectedItemsCount
	}).(pulumi.IntPtrOutput)
}

// ResourceGuard Operation Requests
func (o VMBackupPolicyPropertiesResponsePtrOutput) ResourceGuardOperationRequests() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.ResourceGuardOperationRequests
	}).(pulumi.StringArrayOutput)
}

// Retention policy with the details on backup copy retention ranges.
func (o VMBackupPolicyPropertiesResponsePtrOutput) RetentionPolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.RetentionPolicy
	}).(pulumi.AnyOutput)
}

// Backup schedule specified as part of backup policy.
func (o VMBackupPolicyPropertiesResponsePtrOutput) SchedulePolicy() pulumi.AnyOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SchedulePolicy
	}).(pulumi.AnyOutput)
}

// Tiering policy to automatically move RPs to another tier
// Key is Target Tier, defined in RecoveryPointTierType enum.
// Tiering policy specifies the criteria to move RP to the target tier.
func (o VMBackupPolicyPropertiesResponsePtrOutput) TieringPolicy() TieringPolicyResponseMapOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) map[string]TieringPolicyResponse {
		if v == nil {
			return nil
		}
		return v.TieringPolicy
	}).(TieringPolicyResponseMapOutput)
}

// Time zone optional input as string. For example: "Pacific Standard Time".
func (o VMBackupPolicyPropertiesResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMBackupPolicyPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Defines the virtual machine configuration.
type VirtualMachineConfiguration struct {
	// The image reference.
	ImageReference ImageReference `pulumi:"imageReference"`
	// The OS profile.
	OsProfile OSProfile `pulumi:"osProfile"`
	// The virtual machine size.
	VmSize string `pulumi:"vmSize"`
}

// VirtualMachineConfigurationInput is an input type that accepts VirtualMachineConfigurationArgs and VirtualMachineConfigurationOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationInput` via:
//
//	VirtualMachineConfigurationArgs{...}
type VirtualMachineConfigurationInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput
	ToVirtualMachineConfigurationOutputWithContext(context.Context) VirtualMachineConfigurationOutput
}

// Defines the virtual machine configuration.
type VirtualMachineConfigurationArgs struct {
	// The image reference.
	ImageReference ImageReferenceInput `pulumi:"imageReference"`
	// The OS profile.
	OsProfile OSProfileInput `pulumi:"osProfile"`
	// The virtual machine size.
	VmSize pulumi.StringInput `pulumi:"vmSize"`
}

func (VirtualMachineConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return i.ToVirtualMachineConfigurationOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput)
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i VirtualMachineConfigurationArgs) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationOutput).ToVirtualMachineConfigurationPtrOutputWithContext(ctx)
}

// VirtualMachineConfigurationPtrInput is an input type that accepts VirtualMachineConfigurationArgs, VirtualMachineConfigurationPtr and VirtualMachineConfigurationPtrOutput values.
// You can construct a concrete instance of `VirtualMachineConfigurationPtrInput` via:
//
//	        VirtualMachineConfigurationArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineConfigurationPtrInput interface {
	pulumi.Input

	ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput
	ToVirtualMachineConfigurationPtrOutputWithContext(context.Context) VirtualMachineConfigurationPtrOutput
}

type virtualMachineConfigurationPtrType VirtualMachineConfigurationArgs

func VirtualMachineConfigurationPtr(v *VirtualMachineConfigurationArgs) VirtualMachineConfigurationPtrInput {
	return (*virtualMachineConfigurationPtrType)(v)
}

func (*virtualMachineConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return i.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (i *virtualMachineConfigurationPtrType) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineConfigurationPtrOutput)
}

// Defines the virtual machine configuration.
type VirtualMachineConfigurationOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutput() VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationOutputWithContext(ctx context.Context) VirtualMachineConfigurationOutput {
	return o
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o.ToVirtualMachineConfigurationPtrOutputWithContext(context.Background())
}

func (o VirtualMachineConfigurationOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineConfiguration) *VirtualMachineConfiguration {
		return &v
	}).(VirtualMachineConfigurationPtrOutput)
}

// The image reference.
func (o VirtualMachineConfigurationOutput) ImageReference() ImageReferenceOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) ImageReference { return v.ImageReference }).(ImageReferenceOutput)
}

// The OS profile.
func (o VirtualMachineConfigurationOutput) OsProfile() OSProfileOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) OSProfile { return v.OsProfile }).(OSProfileOutput)
}

// The virtual machine size.
func (o VirtualMachineConfigurationOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfiguration) string { return v.VmSize }).(pulumi.StringOutput)
}

type VirtualMachineConfigurationPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfiguration)(nil)).Elem()
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutput() VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) ToVirtualMachineConfigurationPtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationPtrOutput {
	return o
}

func (o VirtualMachineConfigurationPtrOutput) Elem() VirtualMachineConfigurationOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) VirtualMachineConfiguration {
		if v != nil {
			return *v
		}
		var ret VirtualMachineConfiguration
		return ret
	}).(VirtualMachineConfigurationOutput)
}

// The image reference.
func (o VirtualMachineConfigurationPtrOutput) ImageReference() ImageReferencePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *ImageReference {
		if v == nil {
			return nil
		}
		return &v.ImageReference
	}).(ImageReferencePtrOutput)
}

// The OS profile.
func (o VirtualMachineConfigurationPtrOutput) OsProfile() OSProfilePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *OSProfile {
		if v == nil {
			return nil
		}
		return &v.OsProfile
	}).(OSProfilePtrOutput)
}

// The virtual machine size.
func (o VirtualMachineConfigurationPtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Defines the virtual machine configuration.
type VirtualMachineConfigurationResponse struct {
	// The image reference.
	ImageReference ImageReferenceResponse `pulumi:"imageReference"`
	// The OS profile.
	OsProfile OSProfileResponse `pulumi:"osProfile"`
	// The virtual machine size.
	VmSize string `pulumi:"vmSize"`
}

// Defines the virtual machine configuration.
type VirtualMachineConfigurationResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutput() VirtualMachineConfigurationResponseOutput {
	return o
}

func (o VirtualMachineConfigurationResponseOutput) ToVirtualMachineConfigurationResponseOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponseOutput {
	return o
}

// The image reference.
func (o VirtualMachineConfigurationResponseOutput) ImageReference() ImageReferenceResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) ImageReferenceResponse { return v.ImageReference }).(ImageReferenceResponseOutput)
}

// The OS profile.
func (o VirtualMachineConfigurationResponseOutput) OsProfile() OSProfileResponseOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) OSProfileResponse { return v.OsProfile }).(OSProfileResponseOutput)
}

// The virtual machine size.
func (o VirtualMachineConfigurationResponseOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineConfigurationResponse) string { return v.VmSize }).(pulumi.StringOutput)
}

type VirtualMachineConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineConfigurationResponse)(nil)).Elem()
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutput() VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) ToVirtualMachineConfigurationResponsePtrOutputWithContext(ctx context.Context) VirtualMachineConfigurationResponsePtrOutput {
	return o
}

func (o VirtualMachineConfigurationResponsePtrOutput) Elem() VirtualMachineConfigurationResponseOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) VirtualMachineConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineConfigurationResponse
		return ret
	}).(VirtualMachineConfigurationResponseOutput)
}

// The image reference.
func (o VirtualMachineConfigurationResponsePtrOutput) ImageReference() ImageReferenceResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *ImageReferenceResponse {
		if v == nil {
			return nil
		}
		return &v.ImageReference
	}).(ImageReferenceResponsePtrOutput)
}

// The OS profile.
func (o VirtualMachineConfigurationResponsePtrOutput) OsProfile() OSProfileResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *OSProfileResponse {
		if v == nil {
			return nil
		}
		return &v.OsProfile
	}).(OSProfileResponsePtrOutput)
}

// The virtual machine size.
func (o VirtualMachineConfigurationResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VmSize
	}).(pulumi.StringPtrOutput)
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNames struct {
	// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
	DataDiskNames map[string][]string `pulumi:"dataDiskNames"`
	// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
	HostName *string `pulumi:"hostName"`
	// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
	NetworkInterfaces []NetworkInterfaceResourceNames `pulumi:"networkInterfaces"`
	// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
	OsDiskName *string `pulumi:"osDiskName"`
	// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
	VmName *string `pulumi:"vmName"`
}

// VirtualMachineResourceNamesInput is an input type that accepts VirtualMachineResourceNamesArgs and VirtualMachineResourceNamesOutput values.
// You can construct a concrete instance of `VirtualMachineResourceNamesInput` via:
//
//	VirtualMachineResourceNamesArgs{...}
type VirtualMachineResourceNamesInput interface {
	pulumi.Input

	ToVirtualMachineResourceNamesOutput() VirtualMachineResourceNamesOutput
	ToVirtualMachineResourceNamesOutputWithContext(context.Context) VirtualMachineResourceNamesOutput
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNamesArgs struct {
	// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
	DataDiskNames pulumi.StringArrayMapInput `pulumi:"dataDiskNames"`
	// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
	HostName pulumi.StringPtrInput `pulumi:"hostName"`
	// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
	NetworkInterfaces NetworkInterfaceResourceNamesArrayInput `pulumi:"networkInterfaces"`
	// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
	OsDiskName pulumi.StringPtrInput `pulumi:"osDiskName"`
	// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
	VmName pulumi.StringPtrInput `pulumi:"vmName"`
}

func (VirtualMachineResourceNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResourceNames)(nil)).Elem()
}

func (i VirtualMachineResourceNamesArgs) ToVirtualMachineResourceNamesOutput() VirtualMachineResourceNamesOutput {
	return i.ToVirtualMachineResourceNamesOutputWithContext(context.Background())
}

func (i VirtualMachineResourceNamesArgs) ToVirtualMachineResourceNamesOutputWithContext(ctx context.Context) VirtualMachineResourceNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineResourceNamesOutput)
}

func (i VirtualMachineResourceNamesArgs) ToVirtualMachineResourceNamesPtrOutput() VirtualMachineResourceNamesPtrOutput {
	return i.ToVirtualMachineResourceNamesPtrOutputWithContext(context.Background())
}

func (i VirtualMachineResourceNamesArgs) ToVirtualMachineResourceNamesPtrOutputWithContext(ctx context.Context) VirtualMachineResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineResourceNamesOutput).ToVirtualMachineResourceNamesPtrOutputWithContext(ctx)
}

// VirtualMachineResourceNamesPtrInput is an input type that accepts VirtualMachineResourceNamesArgs, VirtualMachineResourceNamesPtr and VirtualMachineResourceNamesPtrOutput values.
// You can construct a concrete instance of `VirtualMachineResourceNamesPtrInput` via:
//
//	        VirtualMachineResourceNamesArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineResourceNamesPtrInput interface {
	pulumi.Input

	ToVirtualMachineResourceNamesPtrOutput() VirtualMachineResourceNamesPtrOutput
	ToVirtualMachineResourceNamesPtrOutputWithContext(context.Context) VirtualMachineResourceNamesPtrOutput
}

type virtualMachineResourceNamesPtrType VirtualMachineResourceNamesArgs

func VirtualMachineResourceNamesPtr(v *VirtualMachineResourceNamesArgs) VirtualMachineResourceNamesPtrInput {
	return (*virtualMachineResourceNamesPtrType)(v)
}

func (*virtualMachineResourceNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineResourceNames)(nil)).Elem()
}

func (i *virtualMachineResourceNamesPtrType) ToVirtualMachineResourceNamesPtrOutput() VirtualMachineResourceNamesPtrOutput {
	return i.ToVirtualMachineResourceNamesPtrOutputWithContext(context.Background())
}

func (i *virtualMachineResourceNamesPtrType) ToVirtualMachineResourceNamesPtrOutputWithContext(ctx context.Context) VirtualMachineResourceNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineResourceNamesPtrOutput)
}

// VirtualMachineResourceNamesArrayInput is an input type that accepts VirtualMachineResourceNamesArray and VirtualMachineResourceNamesArrayOutput values.
// You can construct a concrete instance of `VirtualMachineResourceNamesArrayInput` via:
//
//	VirtualMachineResourceNamesArray{ VirtualMachineResourceNamesArgs{...} }
type VirtualMachineResourceNamesArrayInput interface {
	pulumi.Input

	ToVirtualMachineResourceNamesArrayOutput() VirtualMachineResourceNamesArrayOutput
	ToVirtualMachineResourceNamesArrayOutputWithContext(context.Context) VirtualMachineResourceNamesArrayOutput
}

type VirtualMachineResourceNamesArray []VirtualMachineResourceNamesInput

func (VirtualMachineResourceNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineResourceNames)(nil)).Elem()
}

func (i VirtualMachineResourceNamesArray) ToVirtualMachineResourceNamesArrayOutput() VirtualMachineResourceNamesArrayOutput {
	return i.ToVirtualMachineResourceNamesArrayOutputWithContext(context.Background())
}

func (i VirtualMachineResourceNamesArray) ToVirtualMachineResourceNamesArrayOutputWithContext(ctx context.Context) VirtualMachineResourceNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineResourceNamesArrayOutput)
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNamesOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResourceNames)(nil)).Elem()
}

func (o VirtualMachineResourceNamesOutput) ToVirtualMachineResourceNamesOutput() VirtualMachineResourceNamesOutput {
	return o
}

func (o VirtualMachineResourceNamesOutput) ToVirtualMachineResourceNamesOutputWithContext(ctx context.Context) VirtualMachineResourceNamesOutput {
	return o
}

func (o VirtualMachineResourceNamesOutput) ToVirtualMachineResourceNamesPtrOutput() VirtualMachineResourceNamesPtrOutput {
	return o.ToVirtualMachineResourceNamesPtrOutputWithContext(context.Background())
}

func (o VirtualMachineResourceNamesOutput) ToVirtualMachineResourceNamesPtrOutputWithContext(ctx context.Context) VirtualMachineResourceNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineResourceNames) *VirtualMachineResourceNames {
		return &v
	}).(VirtualMachineResourceNamesPtrOutput)
}

// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
func (o VirtualMachineResourceNamesOutput) DataDiskNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v VirtualMachineResourceNames) map[string][]string { return v.DataDiskNames }).(pulumi.StringArrayMapOutput)
}

// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
func (o VirtualMachineResourceNamesOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNames) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
func (o VirtualMachineResourceNamesOutput) NetworkInterfaces() NetworkInterfaceResourceNamesArrayOutput {
	return o.ApplyT(func(v VirtualMachineResourceNames) []NetworkInterfaceResourceNames { return v.NetworkInterfaces }).(NetworkInterfaceResourceNamesArrayOutput)
}

// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
func (o VirtualMachineResourceNamesOutput) OsDiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNames) *string { return v.OsDiskName }).(pulumi.StringPtrOutput)
}

// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
func (o VirtualMachineResourceNamesOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNames) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

type VirtualMachineResourceNamesPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineResourceNames)(nil)).Elem()
}

func (o VirtualMachineResourceNamesPtrOutput) ToVirtualMachineResourceNamesPtrOutput() VirtualMachineResourceNamesPtrOutput {
	return o
}

func (o VirtualMachineResourceNamesPtrOutput) ToVirtualMachineResourceNamesPtrOutputWithContext(ctx context.Context) VirtualMachineResourceNamesPtrOutput {
	return o
}

func (o VirtualMachineResourceNamesPtrOutput) Elem() VirtualMachineResourceNamesOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) VirtualMachineResourceNames {
		if v != nil {
			return *v
		}
		var ret VirtualMachineResourceNames
		return ret
	}).(VirtualMachineResourceNamesOutput)
}

// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
func (o VirtualMachineResourceNamesPtrOutput) DataDiskNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) map[string][]string {
		if v == nil {
			return nil
		}
		return v.DataDiskNames
	}).(pulumi.StringArrayMapOutput)
}

// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
func (o VirtualMachineResourceNamesPtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
func (o VirtualMachineResourceNamesPtrOutput) NetworkInterfaces() NetworkInterfaceResourceNamesArrayOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) []NetworkInterfaceResourceNames {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceResourceNamesArrayOutput)
}

// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
func (o VirtualMachineResourceNamesPtrOutput) OsDiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.OsDiskName
	}).(pulumi.StringPtrOutput)
}

// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
func (o VirtualMachineResourceNamesPtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNames) *string {
		if v == nil {
			return nil
		}
		return v.VmName
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineResourceNamesArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineResourceNames)(nil)).Elem()
}

func (o VirtualMachineResourceNamesArrayOutput) ToVirtualMachineResourceNamesArrayOutput() VirtualMachineResourceNamesArrayOutput {
	return o
}

func (o VirtualMachineResourceNamesArrayOutput) ToVirtualMachineResourceNamesArrayOutputWithContext(ctx context.Context) VirtualMachineResourceNamesArrayOutput {
	return o
}

func (o VirtualMachineResourceNamesArrayOutput) Index(i pulumi.IntInput) VirtualMachineResourceNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineResourceNames {
		return vs[0].([]VirtualMachineResourceNames)[vs[1].(int)]
	}).(VirtualMachineResourceNamesOutput)
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNamesResponse struct {
	// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
	DataDiskNames map[string][]string `pulumi:"dataDiskNames"`
	// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
	HostName *string `pulumi:"hostName"`
	// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
	NetworkInterfaces []NetworkInterfaceResourceNamesResponse `pulumi:"networkInterfaces"`
	// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
	OsDiskName *string `pulumi:"osDiskName"`
	// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
	VmName *string `pulumi:"vmName"`
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNamesResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResourceNamesResponse)(nil)).Elem()
}

func (o VirtualMachineResourceNamesResponseOutput) ToVirtualMachineResourceNamesResponseOutput() VirtualMachineResourceNamesResponseOutput {
	return o
}

func (o VirtualMachineResourceNamesResponseOutput) ToVirtualMachineResourceNamesResponseOutputWithContext(ctx context.Context) VirtualMachineResourceNamesResponseOutput {
	return o
}

// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
func (o VirtualMachineResourceNamesResponseOutput) DataDiskNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v VirtualMachineResourceNamesResponse) map[string][]string { return v.DataDiskNames }).(pulumi.StringArrayMapOutput)
}

// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
func (o VirtualMachineResourceNamesResponseOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNamesResponse) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
func (o VirtualMachineResourceNamesResponseOutput) NetworkInterfaces() NetworkInterfaceResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineResourceNamesResponse) []NetworkInterfaceResourceNamesResponse {
		return v.NetworkInterfaces
	}).(NetworkInterfaceResourceNamesResponseArrayOutput)
}

// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
func (o VirtualMachineResourceNamesResponseOutput) OsDiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNamesResponse) *string { return v.OsDiskName }).(pulumi.StringPtrOutput)
}

// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
func (o VirtualMachineResourceNamesResponseOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResourceNamesResponse) *string { return v.VmName }).(pulumi.StringPtrOutput)
}

type VirtualMachineResourceNamesResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineResourceNamesResponse)(nil)).Elem()
}

func (o VirtualMachineResourceNamesResponsePtrOutput) ToVirtualMachineResourceNamesResponsePtrOutput() VirtualMachineResourceNamesResponsePtrOutput {
	return o
}

func (o VirtualMachineResourceNamesResponsePtrOutput) ToVirtualMachineResourceNamesResponsePtrOutputWithContext(ctx context.Context) VirtualMachineResourceNamesResponsePtrOutput {
	return o
}

func (o VirtualMachineResourceNamesResponsePtrOutput) Elem() VirtualMachineResourceNamesResponseOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) VirtualMachineResourceNamesResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineResourceNamesResponse
		return ret
	}).(VirtualMachineResourceNamesResponseOutput)
}

// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
func (o VirtualMachineResourceNamesResponsePtrOutput) DataDiskNames() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) map[string][]string {
		if v == nil {
			return nil
		}
		return v.DataDiskNames
	}).(pulumi.StringArrayMapOutput)
}

// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
func (o VirtualMachineResourceNamesResponsePtrOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.HostName
	}).(pulumi.StringPtrOutput)
}

// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
func (o VirtualMachineResourceNamesResponsePtrOutput) NetworkInterfaces() NetworkInterfaceResourceNamesResponseArrayOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) []NetworkInterfaceResourceNamesResponse {
		if v == nil {
			return nil
		}
		return v.NetworkInterfaces
	}).(NetworkInterfaceResourceNamesResponseArrayOutput)
}

// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
func (o VirtualMachineResourceNamesResponsePtrOutput) OsDiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsDiskName
	}).(pulumi.StringPtrOutput)
}

// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
func (o VirtualMachineResourceNamesResponsePtrOutput) VmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineResourceNamesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmName
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineResourceNamesResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineResourceNamesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineResourceNamesResponse)(nil)).Elem()
}

func (o VirtualMachineResourceNamesResponseArrayOutput) ToVirtualMachineResourceNamesResponseArrayOutput() VirtualMachineResourceNamesResponseArrayOutput {
	return o
}

func (o VirtualMachineResourceNamesResponseArrayOutput) ToVirtualMachineResourceNamesResponseArrayOutputWithContext(ctx context.Context) VirtualMachineResourceNamesResponseArrayOutput {
	return o
}

func (o VirtualMachineResourceNamesResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineResourceNamesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineResourceNamesResponse {
		return vs[0].([]VirtualMachineResourceNamesResponse)[vs[1].(int)]
	}).(VirtualMachineResourceNamesResponseOutput)
}

// Weekly retention format.
type WeeklyRetentionFormat struct {
	// List of days of the week.
	DaysOfTheWeek []DayOfWeek `pulumi:"daysOfTheWeek"`
	// List of weeks of month.
	WeeksOfTheMonth []WeekOfMonth `pulumi:"weeksOfTheMonth"`
}

// WeeklyRetentionFormatInput is an input type that accepts WeeklyRetentionFormatArgs and WeeklyRetentionFormatOutput values.
// You can construct a concrete instance of `WeeklyRetentionFormatInput` via:
//
//	WeeklyRetentionFormatArgs{...}
type WeeklyRetentionFormatInput interface {
	pulumi.Input

	ToWeeklyRetentionFormatOutput() WeeklyRetentionFormatOutput
	ToWeeklyRetentionFormatOutputWithContext(context.Context) WeeklyRetentionFormatOutput
}

// Weekly retention format.
type WeeklyRetentionFormatArgs struct {
	// List of days of the week.
	DaysOfTheWeek DayOfWeekArrayInput `pulumi:"daysOfTheWeek"`
	// List of weeks of month.
	WeeksOfTheMonth WeekOfMonthArrayInput `pulumi:"weeksOfTheMonth"`
}

func (WeeklyRetentionFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionFormat)(nil)).Elem()
}

func (i WeeklyRetentionFormatArgs) ToWeeklyRetentionFormatOutput() WeeklyRetentionFormatOutput {
	return i.ToWeeklyRetentionFormatOutputWithContext(context.Background())
}

func (i WeeklyRetentionFormatArgs) ToWeeklyRetentionFormatOutputWithContext(ctx context.Context) WeeklyRetentionFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionFormatOutput)
}

func (i WeeklyRetentionFormatArgs) ToWeeklyRetentionFormatPtrOutput() WeeklyRetentionFormatPtrOutput {
	return i.ToWeeklyRetentionFormatPtrOutputWithContext(context.Background())
}

func (i WeeklyRetentionFormatArgs) ToWeeklyRetentionFormatPtrOutputWithContext(ctx context.Context) WeeklyRetentionFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionFormatOutput).ToWeeklyRetentionFormatPtrOutputWithContext(ctx)
}

// WeeklyRetentionFormatPtrInput is an input type that accepts WeeklyRetentionFormatArgs, WeeklyRetentionFormatPtr and WeeklyRetentionFormatPtrOutput values.
// You can construct a concrete instance of `WeeklyRetentionFormatPtrInput` via:
//
//	        WeeklyRetentionFormatArgs{...}
//
//	or:
//
//	        nil
type WeeklyRetentionFormatPtrInput interface {
	pulumi.Input

	ToWeeklyRetentionFormatPtrOutput() WeeklyRetentionFormatPtrOutput
	ToWeeklyRetentionFormatPtrOutputWithContext(context.Context) WeeklyRetentionFormatPtrOutput
}

type weeklyRetentionFormatPtrType WeeklyRetentionFormatArgs

func WeeklyRetentionFormatPtr(v *WeeklyRetentionFormatArgs) WeeklyRetentionFormatPtrInput {
	return (*weeklyRetentionFormatPtrType)(v)
}

func (*weeklyRetentionFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionFormat)(nil)).Elem()
}

func (i *weeklyRetentionFormatPtrType) ToWeeklyRetentionFormatPtrOutput() WeeklyRetentionFormatPtrOutput {
	return i.ToWeeklyRetentionFormatPtrOutputWithContext(context.Background())
}

func (i *weeklyRetentionFormatPtrType) ToWeeklyRetentionFormatPtrOutputWithContext(ctx context.Context) WeeklyRetentionFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionFormatPtrOutput)
}

// Weekly retention format.
type WeeklyRetentionFormatOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionFormat)(nil)).Elem()
}

func (o WeeklyRetentionFormatOutput) ToWeeklyRetentionFormatOutput() WeeklyRetentionFormatOutput {
	return o
}

func (o WeeklyRetentionFormatOutput) ToWeeklyRetentionFormatOutputWithContext(ctx context.Context) WeeklyRetentionFormatOutput {
	return o
}

func (o WeeklyRetentionFormatOutput) ToWeeklyRetentionFormatPtrOutput() WeeklyRetentionFormatPtrOutput {
	return o.ToWeeklyRetentionFormatPtrOutputWithContext(context.Background())
}

func (o WeeklyRetentionFormatOutput) ToWeeklyRetentionFormatPtrOutputWithContext(ctx context.Context) WeeklyRetentionFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklyRetentionFormat) *WeeklyRetentionFormat {
		return &v
	}).(WeeklyRetentionFormatPtrOutput)
}

// List of days of the week.
func (o WeeklyRetentionFormatOutput) DaysOfTheWeek() DayOfWeekArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionFormat) []DayOfWeek { return v.DaysOfTheWeek }).(DayOfWeekArrayOutput)
}

// List of weeks of month.
func (o WeeklyRetentionFormatOutput) WeeksOfTheMonth() WeekOfMonthArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionFormat) []WeekOfMonth { return v.WeeksOfTheMonth }).(WeekOfMonthArrayOutput)
}

type WeeklyRetentionFormatPtrOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionFormat)(nil)).Elem()
}

func (o WeeklyRetentionFormatPtrOutput) ToWeeklyRetentionFormatPtrOutput() WeeklyRetentionFormatPtrOutput {
	return o
}

func (o WeeklyRetentionFormatPtrOutput) ToWeeklyRetentionFormatPtrOutputWithContext(ctx context.Context) WeeklyRetentionFormatPtrOutput {
	return o
}

func (o WeeklyRetentionFormatPtrOutput) Elem() WeeklyRetentionFormatOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormat) WeeklyRetentionFormat {
		if v != nil {
			return *v
		}
		var ret WeeklyRetentionFormat
		return ret
	}).(WeeklyRetentionFormatOutput)
}

// List of days of the week.
func (o WeeklyRetentionFormatPtrOutput) DaysOfTheWeek() DayOfWeekArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormat) []DayOfWeek {
		if v == nil {
			return nil
		}
		return v.DaysOfTheWeek
	}).(DayOfWeekArrayOutput)
}

// List of weeks of month.
func (o WeeklyRetentionFormatPtrOutput) WeeksOfTheMonth() WeekOfMonthArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormat) []WeekOfMonth {
		if v == nil {
			return nil
		}
		return v.WeeksOfTheMonth
	}).(WeekOfMonthArrayOutput)
}

// Weekly retention format.
type WeeklyRetentionFormatResponse struct {
	// List of days of the week.
	DaysOfTheWeek []string `pulumi:"daysOfTheWeek"`
	// List of weeks of month.
	WeeksOfTheMonth []string `pulumi:"weeksOfTheMonth"`
}

// Weekly retention format.
type WeeklyRetentionFormatResponseOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionFormatResponse)(nil)).Elem()
}

func (o WeeklyRetentionFormatResponseOutput) ToWeeklyRetentionFormatResponseOutput() WeeklyRetentionFormatResponseOutput {
	return o
}

func (o WeeklyRetentionFormatResponseOutput) ToWeeklyRetentionFormatResponseOutputWithContext(ctx context.Context) WeeklyRetentionFormatResponseOutput {
	return o
}

// List of days of the week.
func (o WeeklyRetentionFormatResponseOutput) DaysOfTheWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionFormatResponse) []string { return v.DaysOfTheWeek }).(pulumi.StringArrayOutput)
}

// List of weeks of month.
func (o WeeklyRetentionFormatResponseOutput) WeeksOfTheMonth() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionFormatResponse) []string { return v.WeeksOfTheMonth }).(pulumi.StringArrayOutput)
}

type WeeklyRetentionFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionFormatResponse)(nil)).Elem()
}

func (o WeeklyRetentionFormatResponsePtrOutput) ToWeeklyRetentionFormatResponsePtrOutput() WeeklyRetentionFormatResponsePtrOutput {
	return o
}

func (o WeeklyRetentionFormatResponsePtrOutput) ToWeeklyRetentionFormatResponsePtrOutputWithContext(ctx context.Context) WeeklyRetentionFormatResponsePtrOutput {
	return o
}

func (o WeeklyRetentionFormatResponsePtrOutput) Elem() WeeklyRetentionFormatResponseOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormatResponse) WeeklyRetentionFormatResponse {
		if v != nil {
			return *v
		}
		var ret WeeklyRetentionFormatResponse
		return ret
	}).(WeeklyRetentionFormatResponseOutput)
}

// List of days of the week.
func (o WeeklyRetentionFormatResponsePtrOutput) DaysOfTheWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormatResponse) []string {
		if v == nil {
			return nil
		}
		return v.DaysOfTheWeek
	}).(pulumi.StringArrayOutput)
}

// List of weeks of month.
func (o WeeklyRetentionFormatResponsePtrOutput) WeeksOfTheMonth() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionFormatResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeeksOfTheMonth
	}).(pulumi.StringArrayOutput)
}

// Weekly retention schedule.
type WeeklyRetentionSchedule struct {
	// List of days of week for weekly retention policy.
	DaysOfTheWeek []DayOfWeek `pulumi:"daysOfTheWeek"`
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// WeeklyRetentionScheduleInput is an input type that accepts WeeklyRetentionScheduleArgs and WeeklyRetentionScheduleOutput values.
// You can construct a concrete instance of `WeeklyRetentionScheduleInput` via:
//
//	WeeklyRetentionScheduleArgs{...}
type WeeklyRetentionScheduleInput interface {
	pulumi.Input

	ToWeeklyRetentionScheduleOutput() WeeklyRetentionScheduleOutput
	ToWeeklyRetentionScheduleOutputWithContext(context.Context) WeeklyRetentionScheduleOutput
}

// Weekly retention schedule.
type WeeklyRetentionScheduleArgs struct {
	// List of days of week for weekly retention policy.
	DaysOfTheWeek DayOfWeekArrayInput `pulumi:"daysOfTheWeek"`
	// Retention duration of retention Policy.
	RetentionDuration RetentionDurationPtrInput `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes pulumi.StringArrayInput `pulumi:"retentionTimes"`
}

func (WeeklyRetentionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionSchedule)(nil)).Elem()
}

func (i WeeklyRetentionScheduleArgs) ToWeeklyRetentionScheduleOutput() WeeklyRetentionScheduleOutput {
	return i.ToWeeklyRetentionScheduleOutputWithContext(context.Background())
}

func (i WeeklyRetentionScheduleArgs) ToWeeklyRetentionScheduleOutputWithContext(ctx context.Context) WeeklyRetentionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionScheduleOutput)
}

func (i WeeklyRetentionScheduleArgs) ToWeeklyRetentionSchedulePtrOutput() WeeklyRetentionSchedulePtrOutput {
	return i.ToWeeklyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyRetentionScheduleArgs) ToWeeklyRetentionSchedulePtrOutputWithContext(ctx context.Context) WeeklyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionScheduleOutput).ToWeeklyRetentionSchedulePtrOutputWithContext(ctx)
}

// WeeklyRetentionSchedulePtrInput is an input type that accepts WeeklyRetentionScheduleArgs, WeeklyRetentionSchedulePtr and WeeklyRetentionSchedulePtrOutput values.
// You can construct a concrete instance of `WeeklyRetentionSchedulePtrInput` via:
//
//	        WeeklyRetentionScheduleArgs{...}
//
//	or:
//
//	        nil
type WeeklyRetentionSchedulePtrInput interface {
	pulumi.Input

	ToWeeklyRetentionSchedulePtrOutput() WeeklyRetentionSchedulePtrOutput
	ToWeeklyRetentionSchedulePtrOutputWithContext(context.Context) WeeklyRetentionSchedulePtrOutput
}

type weeklyRetentionSchedulePtrType WeeklyRetentionScheduleArgs

func WeeklyRetentionSchedulePtr(v *WeeklyRetentionScheduleArgs) WeeklyRetentionSchedulePtrInput {
	return (*weeklyRetentionSchedulePtrType)(v)
}

func (*weeklyRetentionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionSchedule)(nil)).Elem()
}

func (i *weeklyRetentionSchedulePtrType) ToWeeklyRetentionSchedulePtrOutput() WeeklyRetentionSchedulePtrOutput {
	return i.ToWeeklyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i *weeklyRetentionSchedulePtrType) ToWeeklyRetentionSchedulePtrOutputWithContext(ctx context.Context) WeeklyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyRetentionSchedulePtrOutput)
}

// Weekly retention schedule.
type WeeklyRetentionScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionSchedule)(nil)).Elem()
}

func (o WeeklyRetentionScheduleOutput) ToWeeklyRetentionScheduleOutput() WeeklyRetentionScheduleOutput {
	return o
}

func (o WeeklyRetentionScheduleOutput) ToWeeklyRetentionScheduleOutputWithContext(ctx context.Context) WeeklyRetentionScheduleOutput {
	return o
}

func (o WeeklyRetentionScheduleOutput) ToWeeklyRetentionSchedulePtrOutput() WeeklyRetentionSchedulePtrOutput {
	return o.ToWeeklyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyRetentionScheduleOutput) ToWeeklyRetentionSchedulePtrOutputWithContext(ctx context.Context) WeeklyRetentionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklyRetentionSchedule) *WeeklyRetentionSchedule {
		return &v
	}).(WeeklyRetentionSchedulePtrOutput)
}

// List of days of week for weekly retention policy.
func (o WeeklyRetentionScheduleOutput) DaysOfTheWeek() DayOfWeekArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionSchedule) []DayOfWeek { return v.DaysOfTheWeek }).(DayOfWeekArrayOutput)
}

// Retention duration of retention Policy.
func (o WeeklyRetentionScheduleOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v WeeklyRetentionSchedule) *RetentionDuration { return v.RetentionDuration }).(RetentionDurationPtrOutput)
}

// Retention times of retention policy.
func (o WeeklyRetentionScheduleOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionSchedule) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type WeeklyRetentionSchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionSchedule)(nil)).Elem()
}

func (o WeeklyRetentionSchedulePtrOutput) ToWeeklyRetentionSchedulePtrOutput() WeeklyRetentionSchedulePtrOutput {
	return o
}

func (o WeeklyRetentionSchedulePtrOutput) ToWeeklyRetentionSchedulePtrOutputWithContext(ctx context.Context) WeeklyRetentionSchedulePtrOutput {
	return o
}

func (o WeeklyRetentionSchedulePtrOutput) Elem() WeeklyRetentionScheduleOutput {
	return o.ApplyT(func(v *WeeklyRetentionSchedule) WeeklyRetentionSchedule {
		if v != nil {
			return *v
		}
		var ret WeeklyRetentionSchedule
		return ret
	}).(WeeklyRetentionScheduleOutput)
}

// List of days of week for weekly retention policy.
func (o WeeklyRetentionSchedulePtrOutput) DaysOfTheWeek() DayOfWeekArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionSchedule) []DayOfWeek {
		if v == nil {
			return nil
		}
		return v.DaysOfTheWeek
	}).(DayOfWeekArrayOutput)
}

// Retention duration of retention Policy.
func (o WeeklyRetentionSchedulePtrOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v *WeeklyRetentionSchedule) *RetentionDuration {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationPtrOutput)
}

// Retention times of retention policy.
func (o WeeklyRetentionSchedulePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Weekly retention schedule.
type WeeklyRetentionScheduleResponse struct {
	// List of days of week for weekly retention policy.
	DaysOfTheWeek []string `pulumi:"daysOfTheWeek"`
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDurationResponse `pulumi:"retentionDuration"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// Weekly retention schedule.
type WeeklyRetentionScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyRetentionScheduleResponse)(nil)).Elem()
}

func (o WeeklyRetentionScheduleResponseOutput) ToWeeklyRetentionScheduleResponseOutput() WeeklyRetentionScheduleResponseOutput {
	return o
}

func (o WeeklyRetentionScheduleResponseOutput) ToWeeklyRetentionScheduleResponseOutputWithContext(ctx context.Context) WeeklyRetentionScheduleResponseOutput {
	return o
}

// List of days of week for weekly retention policy.
func (o WeeklyRetentionScheduleResponseOutput) DaysOfTheWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionScheduleResponse) []string { return v.DaysOfTheWeek }).(pulumi.StringArrayOutput)
}

// Retention duration of retention Policy.
func (o WeeklyRetentionScheduleResponseOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v WeeklyRetentionScheduleResponse) *RetentionDurationResponse { return v.RetentionDuration }).(RetentionDurationResponsePtrOutput)
}

// Retention times of retention policy.
func (o WeeklyRetentionScheduleResponseOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyRetentionScheduleResponse) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type WeeklyRetentionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (WeeklyRetentionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyRetentionScheduleResponse)(nil)).Elem()
}

func (o WeeklyRetentionScheduleResponsePtrOutput) ToWeeklyRetentionScheduleResponsePtrOutput() WeeklyRetentionScheduleResponsePtrOutput {
	return o
}

func (o WeeklyRetentionScheduleResponsePtrOutput) ToWeeklyRetentionScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyRetentionScheduleResponsePtrOutput {
	return o
}

func (o WeeklyRetentionScheduleResponsePtrOutput) Elem() WeeklyRetentionScheduleResponseOutput {
	return o.ApplyT(func(v *WeeklyRetentionScheduleResponse) WeeklyRetentionScheduleResponse {
		if v != nil {
			return *v
		}
		var ret WeeklyRetentionScheduleResponse
		return ret
	}).(WeeklyRetentionScheduleResponseOutput)
}

// List of days of week for weekly retention policy.
func (o WeeklyRetentionScheduleResponsePtrOutput) DaysOfTheWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.DaysOfTheWeek
	}).(pulumi.StringArrayOutput)
}

// Retention duration of retention Policy.
func (o WeeklyRetentionScheduleResponsePtrOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v *WeeklyRetentionScheduleResponse) *RetentionDurationResponse {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationResponsePtrOutput)
}

// Retention times of retention policy.
func (o WeeklyRetentionScheduleResponsePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Weekly schedule.
type WeeklySchedule struct {
	// Schedule run days.
	ScheduleRunDays []DayOfWeek `pulumi:"scheduleRunDays"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
}

// WeeklyScheduleInput is an input type that accepts WeeklyScheduleArgs and WeeklyScheduleOutput values.
// You can construct a concrete instance of `WeeklyScheduleInput` via:
//
//	WeeklyScheduleArgs{...}
type WeeklyScheduleInput interface {
	pulumi.Input

	ToWeeklyScheduleOutput() WeeklyScheduleOutput
	ToWeeklyScheduleOutputWithContext(context.Context) WeeklyScheduleOutput
}

// Weekly schedule.
type WeeklyScheduleArgs struct {
	// Schedule run days.
	ScheduleRunDays DayOfWeekArrayInput `pulumi:"scheduleRunDays"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes pulumi.StringArrayInput `pulumi:"scheduleRunTimes"`
}

func (WeeklyScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return i.ToWeeklyScheduleOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput)
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i WeeklyScheduleArgs) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyScheduleOutput).ToWeeklySchedulePtrOutputWithContext(ctx)
}

// WeeklySchedulePtrInput is an input type that accepts WeeklyScheduleArgs, WeeklySchedulePtr and WeeklySchedulePtrOutput values.
// You can construct a concrete instance of `WeeklySchedulePtrInput` via:
//
//	        WeeklyScheduleArgs{...}
//
//	or:
//
//	        nil
type WeeklySchedulePtrInput interface {
	pulumi.Input

	ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput
	ToWeeklySchedulePtrOutputWithContext(context.Context) WeeklySchedulePtrOutput
}

type weeklySchedulePtrType WeeklyScheduleArgs

func WeeklySchedulePtr(v *WeeklyScheduleArgs) WeeklySchedulePtrInput {
	return (*weeklySchedulePtrType)(v)
}

func (*weeklySchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return i.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (i *weeklySchedulePtrType) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklySchedulePtrOutput)
}

// Weekly schedule.
type WeeklyScheduleOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklySchedule)(nil)).Elem()
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutput() WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklyScheduleOutputWithContext(ctx context.Context) WeeklyScheduleOutput {
	return o
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o.ToWeeklySchedulePtrOutputWithContext(context.Background())
}

func (o WeeklyScheduleOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeeklySchedule) *WeeklySchedule {
		return &v
	}).(WeeklySchedulePtrOutput)
}

// Schedule run days.
func (o WeeklyScheduleOutput) ScheduleRunDays() DayOfWeekArrayOutput {
	return o.ApplyT(func(v WeeklySchedule) []DayOfWeek { return v.ScheduleRunDays }).(DayOfWeekArrayOutput)
}

// List of times of day this schedule has to be run.
func (o WeeklyScheduleOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklySchedule) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

type WeeklySchedulePtrOutput struct{ *pulumi.OutputState }

func (WeeklySchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklySchedule)(nil)).Elem()
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutput() WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) ToWeeklySchedulePtrOutputWithContext(ctx context.Context) WeeklySchedulePtrOutput {
	return o
}

func (o WeeklySchedulePtrOutput) Elem() WeeklyScheduleOutput {
	return o.ApplyT(func(v *WeeklySchedule) WeeklySchedule {
		if v != nil {
			return *v
		}
		var ret WeeklySchedule
		return ret
	}).(WeeklyScheduleOutput)
}

// Schedule run days.
func (o WeeklySchedulePtrOutput) ScheduleRunDays() DayOfWeekArrayOutput {
	return o.ApplyT(func(v *WeeklySchedule) []DayOfWeek {
		if v == nil {
			return nil
		}
		return v.ScheduleRunDays
	}).(DayOfWeekArrayOutput)
}

// List of times of day this schedule has to be run.
func (o WeeklySchedulePtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklySchedule) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// Weekly schedule.
type WeeklyScheduleResponse struct {
	// Schedule run days.
	ScheduleRunDays []string `pulumi:"scheduleRunDays"`
	// List of times of day this schedule has to be run.
	ScheduleRunTimes []string `pulumi:"scheduleRunTimes"`
}

// Weekly schedule.
type WeeklyScheduleResponseOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutput() WeeklyScheduleResponseOutput {
	return o
}

func (o WeeklyScheduleResponseOutput) ToWeeklyScheduleResponseOutputWithContext(ctx context.Context) WeeklyScheduleResponseOutput {
	return o
}

// Schedule run days.
func (o WeeklyScheduleResponseOutput) ScheduleRunDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) []string { return v.ScheduleRunDays }).(pulumi.StringArrayOutput)
}

// List of times of day this schedule has to be run.
func (o WeeklyScheduleResponseOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WeeklyScheduleResponse) []string { return v.ScheduleRunTimes }).(pulumi.StringArrayOutput)
}

type WeeklyScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (WeeklyScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeeklyScheduleResponse)(nil)).Elem()
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutput() WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) ToWeeklyScheduleResponsePtrOutputWithContext(ctx context.Context) WeeklyScheduleResponsePtrOutput {
	return o
}

func (o WeeklyScheduleResponsePtrOutput) Elem() WeeklyScheduleResponseOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) WeeklyScheduleResponse {
		if v != nil {
			return *v
		}
		var ret WeeklyScheduleResponse
		return ret
	}).(WeeklyScheduleResponseOutput)
}

// Schedule run days.
func (o WeeklyScheduleResponsePtrOutput) ScheduleRunDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunDays
	}).(pulumi.StringArrayOutput)
}

// List of times of day this schedule has to be run.
func (o WeeklyScheduleResponsePtrOutput) ScheduleRunTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WeeklyScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.ScheduleRunTimes
	}).(pulumi.StringArrayOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// The OS Type
	// Expected value is 'Windows'.
	OsType string `pulumi:"osType"`
}

// WindowsConfigurationInput is an input type that accepts WindowsConfigurationArgs and WindowsConfigurationOutput values.
// You can construct a concrete instance of `WindowsConfigurationInput` via:
//
//	WindowsConfigurationArgs{...}
type WindowsConfigurationInput interface {
	pulumi.Input

	ToWindowsConfigurationOutput() WindowsConfigurationOutput
	ToWindowsConfigurationOutputWithContext(context.Context) WindowsConfigurationOutput
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationArgs struct {
	// The OS Type
	// Expected value is 'Windows'.
	OsType pulumi.StringInput `pulumi:"osType"`
}

func (WindowsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return i.ToWindowsConfigurationOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput)
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i WindowsConfigurationArgs) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationOutput).ToWindowsConfigurationPtrOutputWithContext(ctx)
}

// WindowsConfigurationPtrInput is an input type that accepts WindowsConfigurationArgs, WindowsConfigurationPtr and WindowsConfigurationPtrOutput values.
// You can construct a concrete instance of `WindowsConfigurationPtrInput` via:
//
//	        WindowsConfigurationArgs{...}
//
//	or:
//
//	        nil
type WindowsConfigurationPtrInput interface {
	pulumi.Input

	ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput
	ToWindowsConfigurationPtrOutputWithContext(context.Context) WindowsConfigurationPtrOutput
}

type windowsConfigurationPtrType WindowsConfigurationArgs

func WindowsConfigurationPtr(v *WindowsConfigurationArgs) WindowsConfigurationPtrInput {
	return (*windowsConfigurationPtrType)(v)
}

func (*windowsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return i.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (i *windowsConfigurationPtrType) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsConfigurationPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutput() WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationOutputWithContext(ctx context.Context) WindowsConfigurationOutput {
	return o
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o.ToWindowsConfigurationPtrOutputWithContext(context.Background())
}

func (o WindowsConfigurationOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WindowsConfiguration) *WindowsConfiguration {
		return &v
	}).(WindowsConfigurationPtrOutput)
}

// The OS Type
// Expected value is 'Windows'.
func (o WindowsConfigurationOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsConfiguration) string { return v.OsType }).(pulumi.StringOutput)
}

type WindowsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfiguration)(nil)).Elem()
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutput() WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) ToWindowsConfigurationPtrOutputWithContext(ctx context.Context) WindowsConfigurationPtrOutput {
	return o
}

func (o WindowsConfigurationPtrOutput) Elem() WindowsConfigurationOutput {
	return o.ApplyT(func(v *WindowsConfiguration) WindowsConfiguration {
		if v != nil {
			return *v
		}
		var ret WindowsConfiguration
		return ret
	}).(WindowsConfigurationOutput)
}

// The OS Type
// Expected value is 'Windows'.
func (o WindowsConfigurationPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponse struct {
	// The OS Type
	// Expected value is 'Windows'.
	OsType string `pulumi:"osType"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutput() WindowsConfigurationResponseOutput {
	return o
}

func (o WindowsConfigurationResponseOutput) ToWindowsConfigurationResponseOutputWithContext(ctx context.Context) WindowsConfigurationResponseOutput {
	return o
}

// The OS Type
// Expected value is 'Windows'.
func (o WindowsConfigurationResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v WindowsConfigurationResponse) string { return v.OsType }).(pulumi.StringOutput)
}

type WindowsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (WindowsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WindowsConfigurationResponse)(nil)).Elem()
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutput() WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) ToWindowsConfigurationResponsePtrOutputWithContext(ctx context.Context) WindowsConfigurationResponsePtrOutput {
	return o
}

func (o WindowsConfigurationResponsePtrOutput) Elem() WindowsConfigurationResponseOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) WindowsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret WindowsConfigurationResponse
		return ret
	}).(WindowsConfigurationResponseOutput)
}

// The OS Type
// Expected value is 'Windows'.
func (o WindowsConfigurationResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WindowsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OsType
	}).(pulumi.StringPtrOutput)
}

// Yearly retention schedule.
type YearlyRetentionSchedule struct {
	// List of months of year of yearly retention policy.
	MonthsOfYear []MonthOfYear `pulumi:"monthsOfYear"`
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDuration `pulumi:"retentionDuration"`
	// Daily retention format for yearly retention policy.
	RetentionScheduleDaily *DailyRetentionFormat `pulumi:"retentionScheduleDaily"`
	// Retention schedule format for yearly retention policy.
	RetentionScheduleFormatType *string `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for yearly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormat `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// YearlyRetentionScheduleInput is an input type that accepts YearlyRetentionScheduleArgs and YearlyRetentionScheduleOutput values.
// You can construct a concrete instance of `YearlyRetentionScheduleInput` via:
//
//	YearlyRetentionScheduleArgs{...}
type YearlyRetentionScheduleInput interface {
	pulumi.Input

	ToYearlyRetentionScheduleOutput() YearlyRetentionScheduleOutput
	ToYearlyRetentionScheduleOutputWithContext(context.Context) YearlyRetentionScheduleOutput
}

// Yearly retention schedule.
type YearlyRetentionScheduleArgs struct {
	// List of months of year of yearly retention policy.
	MonthsOfYear MonthOfYearArrayInput `pulumi:"monthsOfYear"`
	// Retention duration of retention Policy.
	RetentionDuration RetentionDurationPtrInput `pulumi:"retentionDuration"`
	// Daily retention format for yearly retention policy.
	RetentionScheduleDaily DailyRetentionFormatPtrInput `pulumi:"retentionScheduleDaily"`
	// Retention schedule format for yearly retention policy.
	RetentionScheduleFormatType pulumi.StringPtrInput `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for yearly retention policy.
	RetentionScheduleWeekly WeeklyRetentionFormatPtrInput `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes pulumi.StringArrayInput `pulumi:"retentionTimes"`
}

func (YearlyRetentionScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YearlyRetentionSchedule)(nil)).Elem()
}

func (i YearlyRetentionScheduleArgs) ToYearlyRetentionScheduleOutput() YearlyRetentionScheduleOutput {
	return i.ToYearlyRetentionScheduleOutputWithContext(context.Background())
}

func (i YearlyRetentionScheduleArgs) ToYearlyRetentionScheduleOutputWithContext(ctx context.Context) YearlyRetentionScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YearlyRetentionScheduleOutput)
}

func (i YearlyRetentionScheduleArgs) ToYearlyRetentionSchedulePtrOutput() YearlyRetentionSchedulePtrOutput {
	return i.ToYearlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i YearlyRetentionScheduleArgs) ToYearlyRetentionSchedulePtrOutputWithContext(ctx context.Context) YearlyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YearlyRetentionScheduleOutput).ToYearlyRetentionSchedulePtrOutputWithContext(ctx)
}

// YearlyRetentionSchedulePtrInput is an input type that accepts YearlyRetentionScheduleArgs, YearlyRetentionSchedulePtr and YearlyRetentionSchedulePtrOutput values.
// You can construct a concrete instance of `YearlyRetentionSchedulePtrInput` via:
//
//	        YearlyRetentionScheduleArgs{...}
//
//	or:
//
//	        nil
type YearlyRetentionSchedulePtrInput interface {
	pulumi.Input

	ToYearlyRetentionSchedulePtrOutput() YearlyRetentionSchedulePtrOutput
	ToYearlyRetentionSchedulePtrOutputWithContext(context.Context) YearlyRetentionSchedulePtrOutput
}

type yearlyRetentionSchedulePtrType YearlyRetentionScheduleArgs

func YearlyRetentionSchedulePtr(v *YearlyRetentionScheduleArgs) YearlyRetentionSchedulePtrInput {
	return (*yearlyRetentionSchedulePtrType)(v)
}

func (*yearlyRetentionSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YearlyRetentionSchedule)(nil)).Elem()
}

func (i *yearlyRetentionSchedulePtrType) ToYearlyRetentionSchedulePtrOutput() YearlyRetentionSchedulePtrOutput {
	return i.ToYearlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (i *yearlyRetentionSchedulePtrType) ToYearlyRetentionSchedulePtrOutputWithContext(ctx context.Context) YearlyRetentionSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YearlyRetentionSchedulePtrOutput)
}

// Yearly retention schedule.
type YearlyRetentionScheduleOutput struct{ *pulumi.OutputState }

func (YearlyRetentionScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YearlyRetentionSchedule)(nil)).Elem()
}

func (o YearlyRetentionScheduleOutput) ToYearlyRetentionScheduleOutput() YearlyRetentionScheduleOutput {
	return o
}

func (o YearlyRetentionScheduleOutput) ToYearlyRetentionScheduleOutputWithContext(ctx context.Context) YearlyRetentionScheduleOutput {
	return o
}

func (o YearlyRetentionScheduleOutput) ToYearlyRetentionSchedulePtrOutput() YearlyRetentionSchedulePtrOutput {
	return o.ToYearlyRetentionSchedulePtrOutputWithContext(context.Background())
}

func (o YearlyRetentionScheduleOutput) ToYearlyRetentionSchedulePtrOutputWithContext(ctx context.Context) YearlyRetentionSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v YearlyRetentionSchedule) *YearlyRetentionSchedule {
		return &v
	}).(YearlyRetentionSchedulePtrOutput)
}

// List of months of year of yearly retention policy.
func (o YearlyRetentionScheduleOutput) MonthsOfYear() MonthOfYearArrayOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) []MonthOfYear { return v.MonthsOfYear }).(MonthOfYearArrayOutput)
}

// Retention duration of retention Policy.
func (o YearlyRetentionScheduleOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) *RetentionDuration { return v.RetentionDuration }).(RetentionDurationPtrOutput)
}

// Daily retention format for yearly retention policy.
func (o YearlyRetentionScheduleOutput) RetentionScheduleDaily() DailyRetentionFormatPtrOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) *DailyRetentionFormat { return v.RetentionScheduleDaily }).(DailyRetentionFormatPtrOutput)
}

// Retention schedule format for yearly retention policy.
func (o YearlyRetentionScheduleOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) *string { return v.RetentionScheduleFormatType }).(pulumi.StringPtrOutput)
}

// Weekly retention format for yearly retention policy.
func (o YearlyRetentionScheduleOutput) RetentionScheduleWeekly() WeeklyRetentionFormatPtrOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) *WeeklyRetentionFormat { return v.RetentionScheduleWeekly }).(WeeklyRetentionFormatPtrOutput)
}

// Retention times of retention policy.
func (o YearlyRetentionScheduleOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YearlyRetentionSchedule) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type YearlyRetentionSchedulePtrOutput struct{ *pulumi.OutputState }

func (YearlyRetentionSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YearlyRetentionSchedule)(nil)).Elem()
}

func (o YearlyRetentionSchedulePtrOutput) ToYearlyRetentionSchedulePtrOutput() YearlyRetentionSchedulePtrOutput {
	return o
}

func (o YearlyRetentionSchedulePtrOutput) ToYearlyRetentionSchedulePtrOutputWithContext(ctx context.Context) YearlyRetentionSchedulePtrOutput {
	return o
}

func (o YearlyRetentionSchedulePtrOutput) Elem() YearlyRetentionScheduleOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) YearlyRetentionSchedule {
		if v != nil {
			return *v
		}
		var ret YearlyRetentionSchedule
		return ret
	}).(YearlyRetentionScheduleOutput)
}

// List of months of year of yearly retention policy.
func (o YearlyRetentionSchedulePtrOutput) MonthsOfYear() MonthOfYearArrayOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) []MonthOfYear {
		if v == nil {
			return nil
		}
		return v.MonthsOfYear
	}).(MonthOfYearArrayOutput)
}

// Retention duration of retention Policy.
func (o YearlyRetentionSchedulePtrOutput) RetentionDuration() RetentionDurationPtrOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) *RetentionDuration {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationPtrOutput)
}

// Daily retention format for yearly retention policy.
func (o YearlyRetentionSchedulePtrOutput) RetentionScheduleDaily() DailyRetentionFormatPtrOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) *DailyRetentionFormat {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleDaily
	}).(DailyRetentionFormatPtrOutput)
}

// Retention schedule format for yearly retention policy.
func (o YearlyRetentionSchedulePtrOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) *string {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleFormatType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention format for yearly retention policy.
func (o YearlyRetentionSchedulePtrOutput) RetentionScheduleWeekly() WeeklyRetentionFormatPtrOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) *WeeklyRetentionFormat {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatPtrOutput)
}

// Retention times of retention policy.
func (o YearlyRetentionSchedulePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YearlyRetentionSchedule) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

// Yearly retention schedule.
type YearlyRetentionScheduleResponse struct {
	// List of months of year of yearly retention policy.
	MonthsOfYear []string `pulumi:"monthsOfYear"`
	// Retention duration of retention Policy.
	RetentionDuration *RetentionDurationResponse `pulumi:"retentionDuration"`
	// Daily retention format for yearly retention policy.
	RetentionScheduleDaily *DailyRetentionFormatResponse `pulumi:"retentionScheduleDaily"`
	// Retention schedule format for yearly retention policy.
	RetentionScheduleFormatType *string `pulumi:"retentionScheduleFormatType"`
	// Weekly retention format for yearly retention policy.
	RetentionScheduleWeekly *WeeklyRetentionFormatResponse `pulumi:"retentionScheduleWeekly"`
	// Retention times of retention policy.
	RetentionTimes []string `pulumi:"retentionTimes"`
}

// Yearly retention schedule.
type YearlyRetentionScheduleResponseOutput struct{ *pulumi.OutputState }

func (YearlyRetentionScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YearlyRetentionScheduleResponse)(nil)).Elem()
}

func (o YearlyRetentionScheduleResponseOutput) ToYearlyRetentionScheduleResponseOutput() YearlyRetentionScheduleResponseOutput {
	return o
}

func (o YearlyRetentionScheduleResponseOutput) ToYearlyRetentionScheduleResponseOutputWithContext(ctx context.Context) YearlyRetentionScheduleResponseOutput {
	return o
}

// List of months of year of yearly retention policy.
func (o YearlyRetentionScheduleResponseOutput) MonthsOfYear() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) []string { return v.MonthsOfYear }).(pulumi.StringArrayOutput)
}

// Retention duration of retention Policy.
func (o YearlyRetentionScheduleResponseOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) *RetentionDurationResponse { return v.RetentionDuration }).(RetentionDurationResponsePtrOutput)
}

// Daily retention format for yearly retention policy.
func (o YearlyRetentionScheduleResponseOutput) RetentionScheduleDaily() DailyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) *DailyRetentionFormatResponse { return v.RetentionScheduleDaily }).(DailyRetentionFormatResponsePtrOutput)
}

// Retention schedule format for yearly retention policy.
func (o YearlyRetentionScheduleResponseOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) *string { return v.RetentionScheduleFormatType }).(pulumi.StringPtrOutput)
}

// Weekly retention format for yearly retention policy.
func (o YearlyRetentionScheduleResponseOutput) RetentionScheduleWeekly() WeeklyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) *WeeklyRetentionFormatResponse {
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatResponsePtrOutput)
}

// Retention times of retention policy.
func (o YearlyRetentionScheduleResponseOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v YearlyRetentionScheduleResponse) []string { return v.RetentionTimes }).(pulumi.StringArrayOutput)
}

type YearlyRetentionScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (YearlyRetentionScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YearlyRetentionScheduleResponse)(nil)).Elem()
}

func (o YearlyRetentionScheduleResponsePtrOutput) ToYearlyRetentionScheduleResponsePtrOutput() YearlyRetentionScheduleResponsePtrOutput {
	return o
}

func (o YearlyRetentionScheduleResponsePtrOutput) ToYearlyRetentionScheduleResponsePtrOutputWithContext(ctx context.Context) YearlyRetentionScheduleResponsePtrOutput {
	return o
}

func (o YearlyRetentionScheduleResponsePtrOutput) Elem() YearlyRetentionScheduleResponseOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) YearlyRetentionScheduleResponse {
		if v != nil {
			return *v
		}
		var ret YearlyRetentionScheduleResponse
		return ret
	}).(YearlyRetentionScheduleResponseOutput)
}

// List of months of year of yearly retention policy.
func (o YearlyRetentionScheduleResponsePtrOutput) MonthsOfYear() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.MonthsOfYear
	}).(pulumi.StringArrayOutput)
}

// Retention duration of retention Policy.
func (o YearlyRetentionScheduleResponsePtrOutput) RetentionDuration() RetentionDurationResponsePtrOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) *RetentionDurationResponse {
		if v == nil {
			return nil
		}
		return v.RetentionDuration
	}).(RetentionDurationResponsePtrOutput)
}

// Daily retention format for yearly retention policy.
func (o YearlyRetentionScheduleResponsePtrOutput) RetentionScheduleDaily() DailyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) *DailyRetentionFormatResponse {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleDaily
	}).(DailyRetentionFormatResponsePtrOutput)
}

// Retention schedule format for yearly retention policy.
func (o YearlyRetentionScheduleResponsePtrOutput) RetentionScheduleFormatType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleFormatType
	}).(pulumi.StringPtrOutput)
}

// Weekly retention format for yearly retention policy.
func (o YearlyRetentionScheduleResponsePtrOutput) RetentionScheduleWeekly() WeeklyRetentionFormatResponsePtrOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) *WeeklyRetentionFormatResponse {
		if v == nil {
			return nil
		}
		return v.RetentionScheduleWeekly
	}).(WeeklyRetentionFormatResponsePtrOutput)
}

// Retention times of retention policy.
func (o YearlyRetentionScheduleResponsePtrOutput) RetentionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *YearlyRetentionScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.RetentionTimes
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationServerConfigurationOutput{})
	pulumi.RegisterOutputType(ApplicationServerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ApplicationServerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ApplicationServerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationServerFullResourceNamesOutput{})
	pulumi.RegisterOutputType(ApplicationServerFullResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationServerFullResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(ApplicationServerFullResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(ApplicationServerVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(ApplicationServerVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(CentralServerConfigurationOutput{})
	pulumi.RegisterOutputType(CentralServerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CentralServerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CentralServerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CentralServerFullResourceNamesOutput{})
	pulumi.RegisterOutputType(CentralServerFullResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(CentralServerFullResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(CentralServerFullResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(CentralServerVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(CentralServerVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationDataResponseOutput{})
	pulumi.RegisterOutputType(ConnectorErrorDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ConnectorErrorDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(CreateAndMountFileShareConfigurationOutput{})
	pulumi.RegisterOutputType(CreateAndMountFileShareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CreateAndMountFileShareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CreateAndMountFileShareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DB2ProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(DB2ProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DB2ProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DB2ProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DBBackupPolicyPropertiesOutput{})
	pulumi.RegisterOutputType(DBBackupPolicyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DBBackupPolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DBBackupPolicyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DailyRetentionFormatOutput{})
	pulumi.RegisterOutputType(DailyRetentionFormatPtrOutput{})
	pulumi.RegisterOutputType(DailyRetentionFormatResponseOutput{})
	pulumi.RegisterOutputType(DailyRetentionFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(DailyRetentionScheduleOutput{})
	pulumi.RegisterOutputType(DailyRetentionSchedulePtrOutput{})
	pulumi.RegisterOutputType(DailyRetentionScheduleResponseOutput{})
	pulumi.RegisterOutputType(DailyRetentionScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(DailyScheduleOutput{})
	pulumi.RegisterOutputType(DailySchedulePtrOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponseOutput{})
	pulumi.RegisterOutputType(DailyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseConfigurationOutput{})
	pulumi.RegisterOutputType(DatabaseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DatabaseConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DatabaseConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseServerFullResourceNamesOutput{})
	pulumi.RegisterOutputType(DatabaseServerFullResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(DatabaseServerFullResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(DatabaseServerFullResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabaseVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(DatabaseVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DayOutput{})
	pulumi.RegisterOutputType(DayArrayOutput{})
	pulumi.RegisterOutputType(DayResponseOutput{})
	pulumi.RegisterOutputType(DayResponseArrayOutput{})
	pulumi.RegisterOutputType(DeployerVmPackagesOutput{})
	pulumi.RegisterOutputType(DeployerVmPackagesPtrOutput{})
	pulumi.RegisterOutputType(DeployerVmPackagesResponseOutput{})
	pulumi.RegisterOutputType(DeployerVmPackagesResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentWithOSConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentWithOSConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiscoveryConfigurationOutput{})
	pulumi.RegisterOutputType(DiscoveryConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskConfigurationOutput{})
	pulumi.RegisterOutputType(DiskConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DiskConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(DiskDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskExclusionPropertiesOutput{})
	pulumi.RegisterOutputType(DiskExclusionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DiskExclusionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DiskExclusionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskSkuOutput{})
	pulumi.RegisterOutputType(DiskSkuPtrOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationMapOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(EnqueueReplicationServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EnqueueReplicationServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EnqueueServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EnqueueServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseInnerErrorOutput{})
	pulumi.RegisterOutputType(ErrorResponseInnerErrorPtrOutput{})
	pulumi.RegisterOutputType(ExcelPerformanceDataResponseOutput{})
	pulumi.RegisterOutputType(ExistingRecoveryServicesVaultOutput{})
	pulumi.RegisterOutputType(ExistingRecoveryServicesVaultPtrOutput{})
	pulumi.RegisterOutputType(ExistingRecoveryServicesVaultResponseOutput{})
	pulumi.RegisterOutputType(ExistingRecoveryServicesVaultResponsePtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExternalInstallationSoftwareConfigurationOutput{})
	pulumi.RegisterOutputType(ExternalInstallationSoftwareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExternalInstallationSoftwareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ExternalInstallationSoftwareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(GatewayServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GatewayServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HanaBackupDataOutput{})
	pulumi.RegisterOutputType(HanaBackupDataPtrOutput{})
	pulumi.RegisterOutputType(HanaBackupDataResponseOutput{})
	pulumi.RegisterOutputType(HanaBackupDataResponsePtrOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HealthResponseOutput{})
	pulumi.RegisterOutputType(HighAvailabilityConfigurationOutput{})
	pulumi.RegisterOutputType(HighAvailabilityConfigurationPtrOutput{})
	pulumi.RegisterOutputType(HighAvailabilityConfigurationResponseOutput{})
	pulumi.RegisterOutputType(HighAvailabilityConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(HighAvailabilitySoftwareConfigurationOutput{})
	pulumi.RegisterOutputType(HighAvailabilitySoftwareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(HighAvailabilitySoftwareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(HighAvailabilitySoftwareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(HourlyScheduleOutput{})
	pulumi.RegisterOutputType(HourlySchedulePtrOutput{})
	pulumi.RegisterOutputType(HourlyScheduleResponseOutput{})
	pulumi.RegisterOutputType(HourlyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceOutput{})
	pulumi.RegisterOutputType(ImageReferencePtrOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponseOutput{})
	pulumi.RegisterOutputType(ImageReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(InstantRPAdditionalDetailsOutput{})
	pulumi.RegisterOutputType(InstantRPAdditionalDetailsPtrOutput{})
	pulumi.RegisterOutputType(InstantRPAdditionalDetailsResponseOutput{})
	pulumi.RegisterOutputType(InstantRPAdditionalDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LinuxConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerDetailsResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerResourceNamesOutput{})
	pulumi.RegisterOutputType(LoadBalancerResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(LoadBalancerResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(LogSchedulePolicyOutput{})
	pulumi.RegisterOutputType(LogSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(LogSchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(LogSchedulePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(LongTermRetentionPolicyOutput{})
	pulumi.RegisterOutputType(LongTermRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(LongTermRetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(LongTermRetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(LongTermSchedulePolicyOutput{})
	pulumi.RegisterOutputType(LongTermSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(LongTermSchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(LongTermSchedulePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MessageServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MessageServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesResponseErrorsOutput{})
	pulumi.RegisterOutputType(MonthlyRetentionScheduleOutput{})
	pulumi.RegisterOutputType(MonthlyRetentionSchedulePtrOutput{})
	pulumi.RegisterOutputType(MonthlyRetentionScheduleResponseOutput{})
	pulumi.RegisterOutputType(MonthlyRetentionScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(MountFileShareConfigurationOutput{})
	pulumi.RegisterOutputType(MountFileShareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MountFileShareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(MountFileShareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(NativePerformanceDataResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResourceNamesOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResourceNamesArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceResourceNamesResponseArrayOutput{})
	pulumi.RegisterOutputType(NewRecoveryServicesVaultOutput{})
	pulumi.RegisterOutputType(NewRecoveryServicesVaultPtrOutput{})
	pulumi.RegisterOutputType(NewRecoveryServicesVaultResponseOutput{})
	pulumi.RegisterOutputType(NewRecoveryServicesVaultResponsePtrOutput{})
	pulumi.RegisterOutputType(OSProfileOutput{})
	pulumi.RegisterOutputType(OSProfilePtrOutput{})
	pulumi.RegisterOutputType(OSProfileResponseOutput{})
	pulumi.RegisterOutputType(OSProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OsSapConfigurationOutput{})
	pulumi.RegisterOutputType(OsSapConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OsSapConfigurationResponseOutput{})
	pulumi.RegisterOutputType(OsSapConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrometheusOSProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(PrometheusOSProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrometheusOSProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrometheusOSProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ProviderInstancePropertiesResponseErrorsOutput{})
	pulumi.RegisterOutputType(RetentionDurationOutput{})
	pulumi.RegisterOutputType(RetentionDurationPtrOutput{})
	pulumi.RegisterOutputType(RetentionDurationResponseOutput{})
	pulumi.RegisterOutputType(RetentionDurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(SAPInstallWithoutOSConfigSoftwareConfigurationOutput{})
	pulumi.RegisterOutputType(SAPInstallWithoutOSConfigSoftwareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SAPInstallWithoutOSConfigSoftwareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SAPInstallWithoutOSConfigSoftwareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SAPMigrateErrorResponseOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPVirtualInstanceErrorResponseOutput{})
	pulumi.RegisterOutputType(SSLConfigurationOutput{})
	pulumi.RegisterOutputType(SSLConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SSLConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SSLConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingPtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesResponseGroupingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesResponseGroupingPtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceInitiatedSoftwareConfigurationOutput{})
	pulumi.RegisterOutputType(ServiceInitiatedSoftwareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ServiceInitiatedSoftwareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ServiceInitiatedSoftwareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SettingsOutput{})
	pulumi.RegisterOutputType(SettingsPtrOutput{})
	pulumi.RegisterOutputType(SettingsResponseOutput{})
	pulumi.RegisterOutputType(SettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedStorageResourceNamesOutput{})
	pulumi.RegisterOutputType(SharedStorageResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(SharedStorageResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(SharedStorageResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(SimpleRetentionPolicyOutput{})
	pulumi.RegisterOutputType(SimpleRetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(SimpleRetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(SimpleRetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyPtrOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyResponseOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyV2Output{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyV2PtrOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyV2ResponseOutput{})
	pulumi.RegisterOutputType(SimpleSchedulePolicyV2ResponsePtrOutput{})
	pulumi.RegisterOutputType(SingleServerConfigurationOutput{})
	pulumi.RegisterOutputType(SingleServerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SingleServerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SingleServerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SingleServerFullResourceNamesOutput{})
	pulumi.RegisterOutputType(SingleServerFullResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(SingleServerFullResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(SingleServerFullResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(SkipFileShareConfigurationOutput{})
	pulumi.RegisterOutputType(SkipFileShareConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SkipFileShareConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SkipFileShareConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SnapshotBackupAdditionalDetailsOutput{})
	pulumi.RegisterOutputType(SnapshotBackupAdditionalDetailsPtrOutput{})
	pulumi.RegisterOutputType(SnapshotBackupAdditionalDetailsResponseOutput{})
	pulumi.RegisterOutputType(SnapshotBackupAdditionalDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(SqlBackupDataOutput{})
	pulumi.RegisterOutputType(SqlBackupDataPtrOutput{})
	pulumi.RegisterOutputType(SqlBackupDataResponseOutput{})
	pulumi.RegisterOutputType(SqlBackupDataResponsePtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationOutput{})
	pulumi.RegisterOutputType(SshConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SshConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SshKeyPairOutput{})
	pulumi.RegisterOutputType(SshKeyPairPtrOutput{})
	pulumi.RegisterOutputType(SshKeyPairResponseOutput{})
	pulumi.RegisterOutputType(SshKeyPairResponsePtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyOutput{})
	pulumi.RegisterOutputType(SshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageConfigurationOutput{})
	pulumi.RegisterOutputType(StorageConfigurationPtrOutput{})
	pulumi.RegisterOutputType(StorageConfigurationResponseOutput{})
	pulumi.RegisterOutputType(StorageConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(SubProtectionPolicyOutput{})
	pulumi.RegisterOutputType(SubProtectionPolicyArrayOutput{})
	pulumi.RegisterOutputType(SubProtectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(SubProtectionPolicyResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(ThreeTierConfigurationOutput{})
	pulumi.RegisterOutputType(ThreeTierConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ThreeTierConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ThreeTierConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ThreeTierFullResourceNamesOutput{})
	pulumi.RegisterOutputType(ThreeTierFullResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(ThreeTierFullResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(ThreeTierFullResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(TieringPolicyOutput{})
	pulumi.RegisterOutputType(TieringPolicyMapOutput{})
	pulumi.RegisterOutputType(TieringPolicyResponseOutput{})
	pulumi.RegisterOutputType(TieringPolicyResponseMapOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertiesOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserAssignedManagedIdentityDetailsOutput{})
	pulumi.RegisterOutputType(UserAssignedManagedIdentityDetailsPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedManagedIdentityDetailsResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedManagedIdentityDetailsResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(VMBackupDataOutput{})
	pulumi.RegisterOutputType(VMBackupDataPtrOutput{})
	pulumi.RegisterOutputType(VMBackupDataResponseOutput{})
	pulumi.RegisterOutputType(VMBackupDataResponsePtrOutput{})
	pulumi.RegisterOutputType(VMBackupPolicyPropertiesOutput{})
	pulumi.RegisterOutputType(VMBackupPolicyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VMBackupPolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VMBackupPolicyPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineResourceNamesResponseArrayOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionFormatOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionFormatPtrOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionFormatResponseOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionScheduleOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionSchedulePtrOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionScheduleResponseOutput{})
	pulumi.RegisterOutputType(WeeklyRetentionScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleOutput{})
	pulumi.RegisterOutputType(WeeklySchedulePtrOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponseOutput{})
	pulumi.RegisterOutputType(WeeklyScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(WindowsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(YearlyRetentionScheduleOutput{})
	pulumi.RegisterOutputType(YearlyRetentionSchedulePtrOutput{})
	pulumi.RegisterOutputType(YearlyRetentionScheduleResponseOutput{})
	pulumi.RegisterOutputType(YearlyRetentionScheduleResponsePtrOutput{})
}
