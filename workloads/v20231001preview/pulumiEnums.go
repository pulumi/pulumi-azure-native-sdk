// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

// The type of file share config.
type ConfigurationType string

const (
	ConfigurationTypeSkip           = ConfigurationType("Skip")
	ConfigurationTypeCreateAndMount = ConfigurationType("CreateAndMount")
	ConfigurationTypeMount          = ConfigurationType("Mount")
)

// Defines the disk sku name.
type DiskSkuName string

const (
	DiskSkuName_Standard_LRS    = DiskSkuName("Standard_LRS")
	DiskSkuName_Premium_LRS     = DiskSkuName("Premium_LRS")
	DiskSkuName_StandardSSD_LRS = DiskSkuName("StandardSSD_LRS")
	DiskSkuName_UltraSSD_LRS    = DiskSkuName("UltraSSD_LRS")
	DiskSkuName_Premium_ZRS     = DiskSkuName("Premium_ZRS")
	DiskSkuName_StandardSSD_ZRS = DiskSkuName("StandardSSD_ZRS")
	DiskSkuName_PremiumV2_LRS   = DiskSkuName("PremiumV2_LRS")
)

// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
type ManagedResourcesNetworkAccessType string

const (
	ManagedResourcesNetworkAccessTypePublic  = ManagedResourcesNetworkAccessType("Public")
	ManagedResourcesNetworkAccessTypePrivate = ManagedResourcesNetworkAccessType("Private")
)

// Type of manage identity
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone         = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeUserAssigned = ManagedServiceIdentityType("UserAssigned")
)

// The pattern type to be used for resource naming.
type NamingPatternType string

const (
	NamingPatternTypeFullResourceName = NamingPatternType("FullResourceName")
)

// The OS Type
type OSType string

const (
	OSTypeLinux   = OSType("Linux")
	OSTypeWindows = OSType("Windows")
)

// The configuration Type.
type SAPConfigurationType string

const (
	SAPConfigurationTypeDeployment             = SAPConfigurationType("Deployment")
	SAPConfigurationTypeDiscovery              = SAPConfigurationType("Discovery")
	SAPConfigurationTypeDeploymentWithOSConfig = SAPConfigurationType("DeploymentWithOSConfig")
)

// The DB scale method.
type SAPDatabaseScaleMethod string

const (
	SAPDatabaseScaleMethodScaleUp = SAPDatabaseScaleMethod("ScaleUp")
)

// The database type. Eg: HANA, DB2, etc
type SAPDatabaseType string

const (
	SAPDatabaseTypeHANA = SAPDatabaseType("HANA")
	SAPDatabaseTypeDB2  = SAPDatabaseType("DB2")
)

// The deployment type. Eg: SingleServer/ThreeTier
type SAPDeploymentType string

const (
	SAPDeploymentTypeSingleServer = SAPDeploymentType("SingleServer")
	SAPDeploymentTypeThreeTier    = SAPDeploymentType("ThreeTier")
)

// Defines the environment type - Production/Non Production.
type SAPEnvironmentType string

const (
	SAPEnvironmentTypeNonProd = SAPEnvironmentType("NonProd")
	SAPEnvironmentTypeProd    = SAPEnvironmentType("Prod")
)

// The high availability type.
type SAPHighAvailabilityType string

const (
	SAPHighAvailabilityTypeAvailabilitySet  = SAPHighAvailabilityType("AvailabilitySet")
	SAPHighAvailabilityTypeAvailabilityZone = SAPHighAvailabilityType("AvailabilityZone")
)

// Defines the SAP Product type.
type SAPProductType string

const (
	SAPProductTypeECC    = SAPProductType("ECC")
	SAPProductTypeS4HANA = SAPProductType("S4HANA")
	SAPProductTypeOther  = SAPProductType("Other")
)

// The SAP software installation Type.
type SAPSoftwareInstallationType string

const (
	SAPSoftwareInstallationTypeServiceInitiated          = SAPSoftwareInstallationType("ServiceInitiated")
	SAPSoftwareInstallationTypeSAPInstallWithoutOSConfig = SAPSoftwareInstallationType("SAPInstallWithoutOSConfig")
	SAPSoftwareInstallationTypeExternal                  = SAPSoftwareInstallationType("External")
)

func init() {
}
