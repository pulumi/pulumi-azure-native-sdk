// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The type of backup, VM, SQL or HANA.
type BackupType string

const (
	BackupTypeVM   = BackupType("VM")
	BackupTypeSQL  = BackupType("SQL")
	BackupTypeHANA = BackupType("HANA")
)

// The type of file share config.
type ConfigurationType string

const (
	ConfigurationTypeSkip           = ConfigurationType("Skip")
	ConfigurationTypeCreateAndMount = ConfigurationType("CreateAndMount")
	ConfigurationTypeMount          = ConfigurationType("Mount")
)

type DayOfWeek string

const (
	DayOfWeekSunday    = DayOfWeek("Sunday")
	DayOfWeekMonday    = DayOfWeek("Monday")
	DayOfWeekTuesday   = DayOfWeek("Tuesday")
	DayOfWeekWednesday = DayOfWeek("Wednesday")
	DayOfWeekThursday  = DayOfWeek("Thursday")
	DayOfWeekFriday    = DayOfWeek("Friday")
	DayOfWeekSaturday  = DayOfWeek("Saturday")
)

func (DayOfWeek) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (e DayOfWeek) ToDayOfWeekOutput() DayOfWeekOutput {
	return pulumi.ToOutput(e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DayOfWeekOutput)
}

func (e DayOfWeek) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return e.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return DayOfWeek(e).ToDayOfWeekOutputWithContext(ctx).ToDayOfWeekPtrOutputWithContext(ctx)
}

func (e DayOfWeek) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DayOfWeek) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DayOfWeek) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DayOfWeekOutput struct{ *pulumi.OutputState }

func (DayOfWeekOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekOutput) ToDayOfWeekOutput() DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekOutputWithContext(ctx context.Context) DayOfWeekOutput {
	return o
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o.ToDayOfWeekPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DayOfWeek) *DayOfWeek {
		return &v
	}).(DayOfWeekPtrOutput)
}

func (o DayOfWeekOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DayOfWeekOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DayOfWeek) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DayOfWeekPtrOutput struct{ *pulumi.OutputState }

func (DayOfWeekPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return o
}

func (o DayOfWeekPtrOutput) Elem() DayOfWeekOutput {
	return o.ApplyT(func(v *DayOfWeek) DayOfWeek {
		if v != nil {
			return *v
		}
		var ret DayOfWeek
		return ret
	}).(DayOfWeekOutput)
}

func (o DayOfWeekPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DayOfWeekPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DayOfWeek) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DayOfWeekInput is an input type that accepts values of the DayOfWeek enum
// A concrete instance of `DayOfWeekInput` can be one of the following:
//
//	DayOfWeekSunday
//	DayOfWeekMonday
//	DayOfWeekTuesday
//	DayOfWeekWednesday
//	DayOfWeekThursday
//	DayOfWeekFriday
//	DayOfWeekSaturday
type DayOfWeekInput interface {
	pulumi.Input

	ToDayOfWeekOutput() DayOfWeekOutput
	ToDayOfWeekOutputWithContext(context.Context) DayOfWeekOutput
}

var dayOfWeekPtrType = reflect.TypeOf((**DayOfWeek)(nil)).Elem()

type DayOfWeekPtrInput interface {
	pulumi.Input

	ToDayOfWeekPtrOutput() DayOfWeekPtrOutput
	ToDayOfWeekPtrOutputWithContext(context.Context) DayOfWeekPtrOutput
}

type dayOfWeekPtr string

func DayOfWeekPtr(v string) DayOfWeekPtrInput {
	return (*dayOfWeekPtr)(&v)
}

func (*dayOfWeekPtr) ElementType() reflect.Type {
	return dayOfWeekPtrType
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutput() DayOfWeekPtrOutput {
	return pulumi.ToOutput(in).(DayOfWeekPtrOutput)
}

func (in *dayOfWeekPtr) ToDayOfWeekPtrOutputWithContext(ctx context.Context) DayOfWeekPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DayOfWeekPtrOutput)
}

// DayOfWeekArrayInput is an input type that accepts DayOfWeekArray and DayOfWeekArrayOutput values.
// You can construct a concrete instance of `DayOfWeekArrayInput` via:
//
//	DayOfWeekArray{ DayOfWeekArgs{...} }
type DayOfWeekArrayInput interface {
	pulumi.Input

	ToDayOfWeekArrayOutput() DayOfWeekArrayOutput
	ToDayOfWeekArrayOutputWithContext(context.Context) DayOfWeekArrayOutput
}

type DayOfWeekArray []DayOfWeek

func (DayOfWeekArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return i.ToDayOfWeekArrayOutputWithContext(context.Background())
}

func (i DayOfWeekArray) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DayOfWeekArrayOutput)
}

type DayOfWeekArrayOutput struct{ *pulumi.OutputState }

func (DayOfWeekArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DayOfWeek)(nil)).Elem()
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutput() DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) ToDayOfWeekArrayOutputWithContext(ctx context.Context) DayOfWeekArrayOutput {
	return o
}

func (o DayOfWeekArrayOutput) Index(i pulumi.IntInput) DayOfWeekOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DayOfWeek {
		return vs[0].([]DayOfWeek)[vs[1].(int)]
	}).(DayOfWeekOutput)
}

// Defines the disk sku name.
type DiskSkuName string

const (
	DiskSkuName_Standard_LRS    = DiskSkuName("Standard_LRS")
	DiskSkuName_Premium_LRS     = DiskSkuName("Premium_LRS")
	DiskSkuName_StandardSSD_LRS = DiskSkuName("StandardSSD_LRS")
	DiskSkuName_UltraSSD_LRS    = DiskSkuName("UltraSSD_LRS")
	DiskSkuName_Premium_ZRS     = DiskSkuName("Premium_ZRS")
	DiskSkuName_StandardSSD_ZRS = DiskSkuName("StandardSSD_ZRS")
	DiskSkuName_PremiumV2_LRS   = DiskSkuName("PremiumV2_LRS")
)

func (DiskSkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuName)(nil)).Elem()
}

func (e DiskSkuName) ToDiskSkuNameOutput() DiskSkuNameOutput {
	return pulumi.ToOutput(e).(DiskSkuNameOutput)
}

func (e DiskSkuName) ToDiskSkuNameOutputWithContext(ctx context.Context) DiskSkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskSkuNameOutput)
}

func (e DiskSkuName) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return e.ToDiskSkuNamePtrOutputWithContext(context.Background())
}

func (e DiskSkuName) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return DiskSkuName(e).ToDiskSkuNameOutputWithContext(ctx).ToDiskSkuNamePtrOutputWithContext(ctx)
}

func (e DiskSkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskSkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskSkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskSkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskSkuNameOutput struct{ *pulumi.OutputState }

func (DiskSkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuName)(nil)).Elem()
}

func (o DiskSkuNameOutput) ToDiskSkuNameOutput() DiskSkuNameOutput {
	return o
}

func (o DiskSkuNameOutput) ToDiskSkuNameOutputWithContext(ctx context.Context) DiskSkuNameOutput {
	return o
}

func (o DiskSkuNameOutput) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return o.ToDiskSkuNamePtrOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskSkuName) *DiskSkuName {
		return &v
	}).(DiskSkuNamePtrOutput)
}

func (o DiskSkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskSkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskSkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskSkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskSkuNamePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuName)(nil)).Elem()
}

func (o DiskSkuNamePtrOutput) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return o
}

func (o DiskSkuNamePtrOutput) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return o
}

func (o DiskSkuNamePtrOutput) Elem() DiskSkuNameOutput {
	return o.ApplyT(func(v *DiskSkuName) DiskSkuName {
		if v != nil {
			return *v
		}
		var ret DiskSkuName
		return ret
	}).(DiskSkuNameOutput)
}

func (o DiskSkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskSkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskSkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskSkuNameInput is an input type that accepts values of the DiskSkuName enum
// A concrete instance of `DiskSkuNameInput` can be one of the following:
//
//	DiskSkuName_Standard_LRS
//	DiskSkuName_Premium_LRS
//	DiskSkuName_StandardSSD_LRS
//	DiskSkuName_UltraSSD_LRS
//	DiskSkuName_Premium_ZRS
//	DiskSkuName_StandardSSD_ZRS
//	DiskSkuName_PremiumV2_LRS
type DiskSkuNameInput interface {
	pulumi.Input

	ToDiskSkuNameOutput() DiskSkuNameOutput
	ToDiskSkuNameOutputWithContext(context.Context) DiskSkuNameOutput
}

var diskSkuNamePtrType = reflect.TypeOf((**DiskSkuName)(nil)).Elem()

type DiskSkuNamePtrInput interface {
	pulumi.Input

	ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput
	ToDiskSkuNamePtrOutputWithContext(context.Context) DiskSkuNamePtrOutput
}

type diskSkuNamePtr string

func DiskSkuNamePtr(v string) DiskSkuNamePtrInput {
	return (*diskSkuNamePtr)(&v)
}

func (*diskSkuNamePtr) ElementType() reflect.Type {
	return diskSkuNamePtrType
}

func (in *diskSkuNamePtr) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return pulumi.ToOutput(in).(DiskSkuNamePtrOutput)
}

func (in *diskSkuNamePtr) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskSkuNamePtrOutput)
}

// The policy type.
type IAASVMPolicyType string

const (
	IAASVMPolicyTypeInvalid = IAASVMPolicyType("Invalid")
	IAASVMPolicyTypeV1      = IAASVMPolicyType("V1")
	IAASVMPolicyTypeV2      = IAASVMPolicyType("V2")
)

func (IAASVMPolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*IAASVMPolicyType)(nil)).Elem()
}

func (e IAASVMPolicyType) ToIAASVMPolicyTypeOutput() IAASVMPolicyTypeOutput {
	return pulumi.ToOutput(e).(IAASVMPolicyTypeOutput)
}

func (e IAASVMPolicyType) ToIAASVMPolicyTypeOutputWithContext(ctx context.Context) IAASVMPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IAASVMPolicyTypeOutput)
}

func (e IAASVMPolicyType) ToIAASVMPolicyTypePtrOutput() IAASVMPolicyTypePtrOutput {
	return e.ToIAASVMPolicyTypePtrOutputWithContext(context.Background())
}

func (e IAASVMPolicyType) ToIAASVMPolicyTypePtrOutputWithContext(ctx context.Context) IAASVMPolicyTypePtrOutput {
	return IAASVMPolicyType(e).ToIAASVMPolicyTypeOutputWithContext(ctx).ToIAASVMPolicyTypePtrOutputWithContext(ctx)
}

func (e IAASVMPolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IAASVMPolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IAASVMPolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IAASVMPolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IAASVMPolicyTypeOutput struct{ *pulumi.OutputState }

func (IAASVMPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAASVMPolicyType)(nil)).Elem()
}

func (o IAASVMPolicyTypeOutput) ToIAASVMPolicyTypeOutput() IAASVMPolicyTypeOutput {
	return o
}

func (o IAASVMPolicyTypeOutput) ToIAASVMPolicyTypeOutputWithContext(ctx context.Context) IAASVMPolicyTypeOutput {
	return o
}

func (o IAASVMPolicyTypeOutput) ToIAASVMPolicyTypePtrOutput() IAASVMPolicyTypePtrOutput {
	return o.ToIAASVMPolicyTypePtrOutputWithContext(context.Background())
}

func (o IAASVMPolicyTypeOutput) ToIAASVMPolicyTypePtrOutputWithContext(ctx context.Context) IAASVMPolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IAASVMPolicyType) *IAASVMPolicyType {
		return &v
	}).(IAASVMPolicyTypePtrOutput)
}

func (o IAASVMPolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IAASVMPolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IAASVMPolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IAASVMPolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IAASVMPolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IAASVMPolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IAASVMPolicyTypePtrOutput struct{ *pulumi.OutputState }

func (IAASVMPolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IAASVMPolicyType)(nil)).Elem()
}

func (o IAASVMPolicyTypePtrOutput) ToIAASVMPolicyTypePtrOutput() IAASVMPolicyTypePtrOutput {
	return o
}

func (o IAASVMPolicyTypePtrOutput) ToIAASVMPolicyTypePtrOutputWithContext(ctx context.Context) IAASVMPolicyTypePtrOutput {
	return o
}

func (o IAASVMPolicyTypePtrOutput) Elem() IAASVMPolicyTypeOutput {
	return o.ApplyT(func(v *IAASVMPolicyType) IAASVMPolicyType {
		if v != nil {
			return *v
		}
		var ret IAASVMPolicyType
		return ret
	}).(IAASVMPolicyTypeOutput)
}

func (o IAASVMPolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IAASVMPolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IAASVMPolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IAASVMPolicyTypeInput is an input type that accepts values of the IAASVMPolicyType enum
// A concrete instance of `IAASVMPolicyTypeInput` can be one of the following:
//
//	IAASVMPolicyTypeInvalid
//	IAASVMPolicyTypeV1
//	IAASVMPolicyTypeV2
type IAASVMPolicyTypeInput interface {
	pulumi.Input

	ToIAASVMPolicyTypeOutput() IAASVMPolicyTypeOutput
	ToIAASVMPolicyTypeOutputWithContext(context.Context) IAASVMPolicyTypeOutput
}

var iaasvmpolicyTypePtrType = reflect.TypeOf((**IAASVMPolicyType)(nil)).Elem()

type IAASVMPolicyTypePtrInput interface {
	pulumi.Input

	ToIAASVMPolicyTypePtrOutput() IAASVMPolicyTypePtrOutput
	ToIAASVMPolicyTypePtrOutputWithContext(context.Context) IAASVMPolicyTypePtrOutput
}

type iaasvmpolicyTypePtr string

func IAASVMPolicyTypePtr(v string) IAASVMPolicyTypePtrInput {
	return (*iaasvmpolicyTypePtr)(&v)
}

func (*iaasvmpolicyTypePtr) ElementType() reflect.Type {
	return iaasvmpolicyTypePtrType
}

func (in *iaasvmpolicyTypePtr) ToIAASVMPolicyTypePtrOutput() IAASVMPolicyTypePtrOutput {
	return pulumi.ToOutput(in).(IAASVMPolicyTypePtrOutput)
}

func (in *iaasvmpolicyTypePtr) ToIAASVMPolicyTypePtrOutputWithContext(ctx context.Context) IAASVMPolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IAASVMPolicyTypePtrOutput)
}

// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
type ManagedResourcesNetworkAccessType string

const (
	ManagedResourcesNetworkAccessTypePublic  = ManagedResourcesNetworkAccessType("Public")
	ManagedResourcesNetworkAccessTypePrivate = ManagedResourcesNetworkAccessType("Private")
)

func (ManagedResourcesNetworkAccessType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput {
	return pulumi.ToOutput(e).(ManagedResourcesNetworkAccessTypeOutput)
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedResourcesNetworkAccessTypeOutput)
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return e.ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return ManagedResourcesNetworkAccessType(e).ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx).ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx)
}

func (e ManagedResourcesNetworkAccessType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedResourcesNetworkAccessType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedResourcesNetworkAccessType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedResourcesNetworkAccessType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedResourcesNetworkAccessTypeOutput struct{ *pulumi.OutputState }

func (ManagedResourcesNetworkAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypeOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return o.ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourcesNetworkAccessType) *ManagedResourcesNetworkAccessType {
		return &v
	}).(ManagedResourcesNetworkAccessTypePtrOutput)
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedResourcesNetworkAccessType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedResourcesNetworkAccessType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedResourcesNetworkAccessTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourcesNetworkAccessTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) Elem() ManagedResourcesNetworkAccessTypeOutput {
	return o.ApplyT(func(v *ManagedResourcesNetworkAccessType) ManagedResourcesNetworkAccessType {
		if v != nil {
			return *v
		}
		var ret ManagedResourcesNetworkAccessType
		return ret
	}).(ManagedResourcesNetworkAccessTypeOutput)
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedResourcesNetworkAccessType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedResourcesNetworkAccessTypeInput is an input type that accepts values of the ManagedResourcesNetworkAccessType enum
// A concrete instance of `ManagedResourcesNetworkAccessTypeInput` can be one of the following:
//
//	ManagedResourcesNetworkAccessTypePublic
//	ManagedResourcesNetworkAccessTypePrivate
type ManagedResourcesNetworkAccessTypeInput interface {
	pulumi.Input

	ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput
	ToManagedResourcesNetworkAccessTypeOutputWithContext(context.Context) ManagedResourcesNetworkAccessTypeOutput
}

var managedResourcesNetworkAccessTypePtrType = reflect.TypeOf((**ManagedResourcesNetworkAccessType)(nil)).Elem()

type ManagedResourcesNetworkAccessTypePtrInput interface {
	pulumi.Input

	ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput
	ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Context) ManagedResourcesNetworkAccessTypePtrOutput
}

type managedResourcesNetworkAccessTypePtr string

func ManagedResourcesNetworkAccessTypePtr(v string) ManagedResourcesNetworkAccessTypePtrInput {
	return (*managedResourcesNetworkAccessTypePtr)(&v)
}

func (*managedResourcesNetworkAccessTypePtr) ElementType() reflect.Type {
	return managedResourcesNetworkAccessTypePtrType
}

func (in *managedResourcesNetworkAccessTypePtr) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedResourcesNetworkAccessTypePtrOutput)
}

func (in *managedResourcesNetworkAccessTypePtr) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedResourcesNetworkAccessTypePtrOutput)
}

// The managed service identity for all identities.
type ManagedServiceIdentityType string

const (
	ManagedServiceIdentityTypeNone           = ManagedServiceIdentityType("None")
	ManagedServiceIdentityTypeUserAssigned   = ManagedServiceIdentityType("UserAssigned")
	ManagedServiceIdentityTypeSystemAssigned = ManagedServiceIdentityType("SystemAssigned")
)

func (ManagedServiceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutput(e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedServiceIdentityTypeOutput)
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return e.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return ManagedServiceIdentityType(e).ToManagedServiceIdentityTypeOutputWithContext(ctx).ToManagedServiceIdentityTypePtrOutputWithContext(ctx)
}

func (e ManagedServiceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedServiceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedServiceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedServiceIdentityTypeOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypeOutputWithContext(ctx context.Context) ManagedServiceIdentityTypeOutput {
	return o
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o.ToManagedServiceIdentityTypePtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentityType) *ManagedServiceIdentityType {
		return &v
	}).(ManagedServiceIdentityTypePtrOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedServiceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedServiceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return o
}

func (o ManagedServiceIdentityTypePtrOutput) Elem() ManagedServiceIdentityTypeOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityType) ManagedServiceIdentityType {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityType
		return ret
	}).(ManagedServiceIdentityTypeOutput)
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedServiceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedServiceIdentityTypeInput is an input type that accepts values of the ManagedServiceIdentityType enum
// A concrete instance of `ManagedServiceIdentityTypeInput` can be one of the following:
//
//	ManagedServiceIdentityTypeNone
//	ManagedServiceIdentityTypeUserAssigned
//	ManagedServiceIdentityTypeSystemAssigned
type ManagedServiceIdentityTypeInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypeOutput() ManagedServiceIdentityTypeOutput
	ToManagedServiceIdentityTypeOutputWithContext(context.Context) ManagedServiceIdentityTypeOutput
}

var managedServiceIdentityTypePtrType = reflect.TypeOf((**ManagedServiceIdentityType)(nil)).Elem()

type ManagedServiceIdentityTypePtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput
	ToManagedServiceIdentityTypePtrOutputWithContext(context.Context) ManagedServiceIdentityTypePtrOutput
}

type managedServiceIdentityTypePtr string

func ManagedServiceIdentityTypePtr(v string) ManagedServiceIdentityTypePtrInput {
	return (*managedServiceIdentityTypePtr)(&v)
}

func (*managedServiceIdentityTypePtr) ElementType() reflect.Type {
	return managedServiceIdentityTypePtrType
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutput() ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedServiceIdentityTypePtrOutput)
}

func (in *managedServiceIdentityTypePtr) ToManagedServiceIdentityTypePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedServiceIdentityTypePtrOutput)
}

type MonthOfYear string

const (
	MonthOfYearInvalid   = MonthOfYear("Invalid")
	MonthOfYearJanuary   = MonthOfYear("January")
	MonthOfYearFebruary  = MonthOfYear("February")
	MonthOfYearMarch     = MonthOfYear("March")
	MonthOfYearApril     = MonthOfYear("April")
	MonthOfYearMay       = MonthOfYear("May")
	MonthOfYearJune      = MonthOfYear("June")
	MonthOfYearJuly      = MonthOfYear("July")
	MonthOfYearAugust    = MonthOfYear("August")
	MonthOfYearSeptember = MonthOfYear("September")
	MonthOfYearOctober   = MonthOfYear("October")
	MonthOfYearNovember  = MonthOfYear("November")
	MonthOfYearDecember  = MonthOfYear("December")
)

func (MonthOfYear) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthOfYear)(nil)).Elem()
}

func (e MonthOfYear) ToMonthOfYearOutput() MonthOfYearOutput {
	return pulumi.ToOutput(e).(MonthOfYearOutput)
}

func (e MonthOfYear) ToMonthOfYearOutputWithContext(ctx context.Context) MonthOfYearOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MonthOfYearOutput)
}

func (e MonthOfYear) ToMonthOfYearPtrOutput() MonthOfYearPtrOutput {
	return e.ToMonthOfYearPtrOutputWithContext(context.Background())
}

func (e MonthOfYear) ToMonthOfYearPtrOutputWithContext(ctx context.Context) MonthOfYearPtrOutput {
	return MonthOfYear(e).ToMonthOfYearOutputWithContext(ctx).ToMonthOfYearPtrOutputWithContext(ctx)
}

func (e MonthOfYear) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonthOfYear) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MonthOfYear) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MonthOfYear) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MonthOfYearOutput struct{ *pulumi.OutputState }

func (MonthOfYearOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonthOfYear)(nil)).Elem()
}

func (o MonthOfYearOutput) ToMonthOfYearOutput() MonthOfYearOutput {
	return o
}

func (o MonthOfYearOutput) ToMonthOfYearOutputWithContext(ctx context.Context) MonthOfYearOutput {
	return o
}

func (o MonthOfYearOutput) ToMonthOfYearPtrOutput() MonthOfYearPtrOutput {
	return o.ToMonthOfYearPtrOutputWithContext(context.Background())
}

func (o MonthOfYearOutput) ToMonthOfYearPtrOutputWithContext(ctx context.Context) MonthOfYearPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonthOfYear) *MonthOfYear {
		return &v
	}).(MonthOfYearPtrOutput)
}

func (o MonthOfYearOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MonthOfYearOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonthOfYear) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MonthOfYearOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonthOfYearOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MonthOfYear) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MonthOfYearPtrOutput struct{ *pulumi.OutputState }

func (MonthOfYearPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonthOfYear)(nil)).Elem()
}

func (o MonthOfYearPtrOutput) ToMonthOfYearPtrOutput() MonthOfYearPtrOutput {
	return o
}

func (o MonthOfYearPtrOutput) ToMonthOfYearPtrOutputWithContext(ctx context.Context) MonthOfYearPtrOutput {
	return o
}

func (o MonthOfYearPtrOutput) Elem() MonthOfYearOutput {
	return o.ApplyT(func(v *MonthOfYear) MonthOfYear {
		if v != nil {
			return *v
		}
		var ret MonthOfYear
		return ret
	}).(MonthOfYearOutput)
}

func (o MonthOfYearPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MonthOfYearPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MonthOfYear) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MonthOfYearInput is an input type that accepts values of the MonthOfYear enum
// A concrete instance of `MonthOfYearInput` can be one of the following:
//
//	MonthOfYearInvalid
//	MonthOfYearJanuary
//	MonthOfYearFebruary
//	MonthOfYearMarch
//	MonthOfYearApril
//	MonthOfYearMay
//	MonthOfYearJune
//	MonthOfYearJuly
//	MonthOfYearAugust
//	MonthOfYearSeptember
//	MonthOfYearOctober
//	MonthOfYearNovember
//	MonthOfYearDecember
type MonthOfYearInput interface {
	pulumi.Input

	ToMonthOfYearOutput() MonthOfYearOutput
	ToMonthOfYearOutputWithContext(context.Context) MonthOfYearOutput
}

var monthOfYearPtrType = reflect.TypeOf((**MonthOfYear)(nil)).Elem()

type MonthOfYearPtrInput interface {
	pulumi.Input

	ToMonthOfYearPtrOutput() MonthOfYearPtrOutput
	ToMonthOfYearPtrOutputWithContext(context.Context) MonthOfYearPtrOutput
}

type monthOfYearPtr string

func MonthOfYearPtr(v string) MonthOfYearPtrInput {
	return (*monthOfYearPtr)(&v)
}

func (*monthOfYearPtr) ElementType() reflect.Type {
	return monthOfYearPtrType
}

func (in *monthOfYearPtr) ToMonthOfYearPtrOutput() MonthOfYearPtrOutput {
	return pulumi.ToOutput(in).(MonthOfYearPtrOutput)
}

func (in *monthOfYearPtr) ToMonthOfYearPtrOutputWithContext(ctx context.Context) MonthOfYearPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MonthOfYearPtrOutput)
}

// MonthOfYearArrayInput is an input type that accepts MonthOfYearArray and MonthOfYearArrayOutput values.
// You can construct a concrete instance of `MonthOfYearArrayInput` via:
//
//	MonthOfYearArray{ MonthOfYearArgs{...} }
type MonthOfYearArrayInput interface {
	pulumi.Input

	ToMonthOfYearArrayOutput() MonthOfYearArrayOutput
	ToMonthOfYearArrayOutputWithContext(context.Context) MonthOfYearArrayOutput
}

type MonthOfYearArray []MonthOfYear

func (MonthOfYearArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonthOfYear)(nil)).Elem()
}

func (i MonthOfYearArray) ToMonthOfYearArrayOutput() MonthOfYearArrayOutput {
	return i.ToMonthOfYearArrayOutputWithContext(context.Background())
}

func (i MonthOfYearArray) ToMonthOfYearArrayOutputWithContext(ctx context.Context) MonthOfYearArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonthOfYearArrayOutput)
}

type MonthOfYearArrayOutput struct{ *pulumi.OutputState }

func (MonthOfYearArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonthOfYear)(nil)).Elem()
}

func (o MonthOfYearArrayOutput) ToMonthOfYearArrayOutput() MonthOfYearArrayOutput {
	return o
}

func (o MonthOfYearArrayOutput) ToMonthOfYearArrayOutputWithContext(ctx context.Context) MonthOfYearArrayOutput {
	return o
}

func (o MonthOfYearArrayOutput) Index(i pulumi.IntInput) MonthOfYearOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonthOfYear {
		return vs[0].([]MonthOfYear)[vs[1].(int)]
	}).(MonthOfYearOutput)
}

// The pattern type to be used for resource naming.
type NamingPatternType string

const (
	NamingPatternTypeFullResourceName = NamingPatternType("FullResourceName")
)

// The OS Type
type OSType string

const (
	OSTypeLinux   = OSType("Linux")
	OSTypeWindows = OSType("Windows")
)

// Type of backup policy type
type PolicyType string

const (
	PolicyTypeInvalid              = PolicyType("Invalid")
	PolicyTypeFull                 = PolicyType("Full")
	PolicyTypeDifferential         = PolicyType("Differential")
	PolicyTypeLog                  = PolicyType("Log")
	PolicyTypeCopyOnlyFull         = PolicyType("CopyOnlyFull")
	PolicyTypeIncremental          = PolicyType("Incremental")
	PolicyTypeSnapshotFull         = PolicyType("SnapshotFull")
	PolicyTypeSnapshotCopyOnlyFull = PolicyType("SnapshotCopyOnlyFull")
)

func (PolicyType) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (e PolicyType) ToPolicyTypeOutput() PolicyTypeOutput {
	return pulumi.ToOutput(e).(PolicyTypeOutput)
}

func (e PolicyType) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PolicyTypeOutput)
}

func (e PolicyType) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return e.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (e PolicyType) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return PolicyType(e).ToPolicyTypeOutputWithContext(ctx).ToPolicyTypePtrOutputWithContext(ctx)
}

func (e PolicyType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PolicyType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PolicyType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PolicyTypeOutput struct{ *pulumi.OutputState }

func (PolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyType)(nil)).Elem()
}

func (o PolicyTypeOutput) ToPolicyTypeOutput() PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypeOutputWithContext(ctx context.Context) PolicyTypeOutput {
	return o
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o.ToPolicyTypePtrOutputWithContext(context.Background())
}

func (o PolicyTypeOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyType) *PolicyType {
		return &v
	}).(PolicyTypePtrOutput)
}

func (o PolicyTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PolicyTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PolicyTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PolicyType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PolicyTypePtrOutput struct{ *pulumi.OutputState }

func (PolicyTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyType)(nil)).Elem()
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return o
}

func (o PolicyTypePtrOutput) Elem() PolicyTypeOutput {
	return o.ApplyT(func(v *PolicyType) PolicyType {
		if v != nil {
			return *v
		}
		var ret PolicyType
		return ret
	}).(PolicyTypeOutput)
}

func (o PolicyTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PolicyTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PolicyType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PolicyTypeInput is an input type that accepts values of the PolicyType enum
// A concrete instance of `PolicyTypeInput` can be one of the following:
//
//	PolicyTypeInvalid
//	PolicyTypeFull
//	PolicyTypeDifferential
//	PolicyTypeLog
//	PolicyTypeCopyOnlyFull
//	PolicyTypeIncremental
//	PolicyTypeSnapshotFull
//	PolicyTypeSnapshotCopyOnlyFull
type PolicyTypeInput interface {
	pulumi.Input

	ToPolicyTypeOutput() PolicyTypeOutput
	ToPolicyTypeOutputWithContext(context.Context) PolicyTypeOutput
}

var policyTypePtrType = reflect.TypeOf((**PolicyType)(nil)).Elem()

type PolicyTypePtrInput interface {
	pulumi.Input

	ToPolicyTypePtrOutput() PolicyTypePtrOutput
	ToPolicyTypePtrOutputWithContext(context.Context) PolicyTypePtrOutput
}

type policyTypePtr string

func PolicyTypePtr(v string) PolicyTypePtrInput {
	return (*policyTypePtr)(&v)
}

func (*policyTypePtr) ElementType() reflect.Type {
	return policyTypePtrType
}

func (in *policyTypePtr) ToPolicyTypePtrOutput() PolicyTypePtrOutput {
	return pulumi.ToOutput(in).(PolicyTypePtrOutput)
}

func (in *policyTypePtr) ToPolicyTypePtrOutputWithContext(ctx context.Context) PolicyTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PolicyTypePtrOutput)
}

// Retention duration type: days/weeks/months/years
// Used only if TieringMode is set to TierAfter
type RetentionDurationType string

const (
	RetentionDurationTypeInvalid = RetentionDurationType("Invalid")
	RetentionDurationTypeDays    = RetentionDurationType("Days")
	RetentionDurationTypeWeeks   = RetentionDurationType("Weeks")
	RetentionDurationTypeMonths  = RetentionDurationType("Months")
	RetentionDurationTypeYears   = RetentionDurationType("Years")
)

func (RetentionDurationType) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionDurationType)(nil)).Elem()
}

func (e RetentionDurationType) ToRetentionDurationTypeOutput() RetentionDurationTypeOutput {
	return pulumi.ToOutput(e).(RetentionDurationTypeOutput)
}

func (e RetentionDurationType) ToRetentionDurationTypeOutputWithContext(ctx context.Context) RetentionDurationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RetentionDurationTypeOutput)
}

func (e RetentionDurationType) ToRetentionDurationTypePtrOutput() RetentionDurationTypePtrOutput {
	return e.ToRetentionDurationTypePtrOutputWithContext(context.Background())
}

func (e RetentionDurationType) ToRetentionDurationTypePtrOutputWithContext(ctx context.Context) RetentionDurationTypePtrOutput {
	return RetentionDurationType(e).ToRetentionDurationTypeOutputWithContext(ctx).ToRetentionDurationTypePtrOutputWithContext(ctx)
}

func (e RetentionDurationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RetentionDurationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RetentionDurationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RetentionDurationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RetentionDurationTypeOutput struct{ *pulumi.OutputState }

func (RetentionDurationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionDurationType)(nil)).Elem()
}

func (o RetentionDurationTypeOutput) ToRetentionDurationTypeOutput() RetentionDurationTypeOutput {
	return o
}

func (o RetentionDurationTypeOutput) ToRetentionDurationTypeOutputWithContext(ctx context.Context) RetentionDurationTypeOutput {
	return o
}

func (o RetentionDurationTypeOutput) ToRetentionDurationTypePtrOutput() RetentionDurationTypePtrOutput {
	return o.ToRetentionDurationTypePtrOutputWithContext(context.Background())
}

func (o RetentionDurationTypeOutput) ToRetentionDurationTypePtrOutputWithContext(ctx context.Context) RetentionDurationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionDurationType) *RetentionDurationType {
		return &v
	}).(RetentionDurationTypePtrOutput)
}

func (o RetentionDurationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RetentionDurationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RetentionDurationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RetentionDurationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RetentionDurationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RetentionDurationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RetentionDurationTypePtrOutput struct{ *pulumi.OutputState }

func (RetentionDurationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionDurationType)(nil)).Elem()
}

func (o RetentionDurationTypePtrOutput) ToRetentionDurationTypePtrOutput() RetentionDurationTypePtrOutput {
	return o
}

func (o RetentionDurationTypePtrOutput) ToRetentionDurationTypePtrOutputWithContext(ctx context.Context) RetentionDurationTypePtrOutput {
	return o
}

func (o RetentionDurationTypePtrOutput) Elem() RetentionDurationTypeOutput {
	return o.ApplyT(func(v *RetentionDurationType) RetentionDurationType {
		if v != nil {
			return *v
		}
		var ret RetentionDurationType
		return ret
	}).(RetentionDurationTypeOutput)
}

func (o RetentionDurationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RetentionDurationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RetentionDurationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RetentionDurationTypeInput is an input type that accepts values of the RetentionDurationType enum
// A concrete instance of `RetentionDurationTypeInput` can be one of the following:
//
//	RetentionDurationTypeInvalid
//	RetentionDurationTypeDays
//	RetentionDurationTypeWeeks
//	RetentionDurationTypeMonths
//	RetentionDurationTypeYears
type RetentionDurationTypeInput interface {
	pulumi.Input

	ToRetentionDurationTypeOutput() RetentionDurationTypeOutput
	ToRetentionDurationTypeOutputWithContext(context.Context) RetentionDurationTypeOutput
}

var retentionDurationTypePtrType = reflect.TypeOf((**RetentionDurationType)(nil)).Elem()

type RetentionDurationTypePtrInput interface {
	pulumi.Input

	ToRetentionDurationTypePtrOutput() RetentionDurationTypePtrOutput
	ToRetentionDurationTypePtrOutputWithContext(context.Context) RetentionDurationTypePtrOutput
}

type retentionDurationTypePtr string

func RetentionDurationTypePtr(v string) RetentionDurationTypePtrInput {
	return (*retentionDurationTypePtr)(&v)
}

func (*retentionDurationTypePtr) ElementType() reflect.Type {
	return retentionDurationTypePtrType
}

func (in *retentionDurationTypePtr) ToRetentionDurationTypePtrOutput() RetentionDurationTypePtrOutput {
	return pulumi.ToOutput(in).(RetentionDurationTypePtrOutput)
}

func (in *retentionDurationTypePtr) ToRetentionDurationTypePtrOutputWithContext(ctx context.Context) RetentionDurationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RetentionDurationTypePtrOutput)
}

// Retention schedule format for yearly retention policy.
type RetentionScheduleFormat string

const (
	RetentionScheduleFormatInvalid = RetentionScheduleFormat("Invalid")
	RetentionScheduleFormatDaily   = RetentionScheduleFormat("Daily")
	RetentionScheduleFormatWeekly  = RetentionScheduleFormat("Weekly")
)

func (RetentionScheduleFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionScheduleFormat)(nil)).Elem()
}

func (e RetentionScheduleFormat) ToRetentionScheduleFormatOutput() RetentionScheduleFormatOutput {
	return pulumi.ToOutput(e).(RetentionScheduleFormatOutput)
}

func (e RetentionScheduleFormat) ToRetentionScheduleFormatOutputWithContext(ctx context.Context) RetentionScheduleFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RetentionScheduleFormatOutput)
}

func (e RetentionScheduleFormat) ToRetentionScheduleFormatPtrOutput() RetentionScheduleFormatPtrOutput {
	return e.ToRetentionScheduleFormatPtrOutputWithContext(context.Background())
}

func (e RetentionScheduleFormat) ToRetentionScheduleFormatPtrOutputWithContext(ctx context.Context) RetentionScheduleFormatPtrOutput {
	return RetentionScheduleFormat(e).ToRetentionScheduleFormatOutputWithContext(ctx).ToRetentionScheduleFormatPtrOutputWithContext(ctx)
}

func (e RetentionScheduleFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RetentionScheduleFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RetentionScheduleFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RetentionScheduleFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RetentionScheduleFormatOutput struct{ *pulumi.OutputState }

func (RetentionScheduleFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionScheduleFormat)(nil)).Elem()
}

func (o RetentionScheduleFormatOutput) ToRetentionScheduleFormatOutput() RetentionScheduleFormatOutput {
	return o
}

func (o RetentionScheduleFormatOutput) ToRetentionScheduleFormatOutputWithContext(ctx context.Context) RetentionScheduleFormatOutput {
	return o
}

func (o RetentionScheduleFormatOutput) ToRetentionScheduleFormatPtrOutput() RetentionScheduleFormatPtrOutput {
	return o.ToRetentionScheduleFormatPtrOutputWithContext(context.Background())
}

func (o RetentionScheduleFormatOutput) ToRetentionScheduleFormatPtrOutputWithContext(ctx context.Context) RetentionScheduleFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionScheduleFormat) *RetentionScheduleFormat {
		return &v
	}).(RetentionScheduleFormatPtrOutput)
}

func (o RetentionScheduleFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RetentionScheduleFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RetentionScheduleFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RetentionScheduleFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RetentionScheduleFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RetentionScheduleFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RetentionScheduleFormatPtrOutput struct{ *pulumi.OutputState }

func (RetentionScheduleFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionScheduleFormat)(nil)).Elem()
}

func (o RetentionScheduleFormatPtrOutput) ToRetentionScheduleFormatPtrOutput() RetentionScheduleFormatPtrOutput {
	return o
}

func (o RetentionScheduleFormatPtrOutput) ToRetentionScheduleFormatPtrOutputWithContext(ctx context.Context) RetentionScheduleFormatPtrOutput {
	return o
}

func (o RetentionScheduleFormatPtrOutput) Elem() RetentionScheduleFormatOutput {
	return o.ApplyT(func(v *RetentionScheduleFormat) RetentionScheduleFormat {
		if v != nil {
			return *v
		}
		var ret RetentionScheduleFormat
		return ret
	}).(RetentionScheduleFormatOutput)
}

func (o RetentionScheduleFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RetentionScheduleFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RetentionScheduleFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RetentionScheduleFormatInput is an input type that accepts values of the RetentionScheduleFormat enum
// A concrete instance of `RetentionScheduleFormatInput` can be one of the following:
//
//	RetentionScheduleFormatInvalid
//	RetentionScheduleFormatDaily
//	RetentionScheduleFormatWeekly
type RetentionScheduleFormatInput interface {
	pulumi.Input

	ToRetentionScheduleFormatOutput() RetentionScheduleFormatOutput
	ToRetentionScheduleFormatOutputWithContext(context.Context) RetentionScheduleFormatOutput
}

var retentionScheduleFormatPtrType = reflect.TypeOf((**RetentionScheduleFormat)(nil)).Elem()

type RetentionScheduleFormatPtrInput interface {
	pulumi.Input

	ToRetentionScheduleFormatPtrOutput() RetentionScheduleFormatPtrOutput
	ToRetentionScheduleFormatPtrOutputWithContext(context.Context) RetentionScheduleFormatPtrOutput
}

type retentionScheduleFormatPtr string

func RetentionScheduleFormatPtr(v string) RetentionScheduleFormatPtrInput {
	return (*retentionScheduleFormatPtr)(&v)
}

func (*retentionScheduleFormatPtr) ElementType() reflect.Type {
	return retentionScheduleFormatPtrType
}

func (in *retentionScheduleFormatPtr) ToRetentionScheduleFormatPtrOutput() RetentionScheduleFormatPtrOutput {
	return pulumi.ToOutput(in).(RetentionScheduleFormatPtrOutput)
}

func (in *retentionScheduleFormatPtr) ToRetentionScheduleFormatPtrOutputWithContext(ctx context.Context) RetentionScheduleFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RetentionScheduleFormatPtrOutput)
}

// Sets the routing preference of the SAP monitor. By default only RFC1918 traffic is routed to the customer VNET.
type RoutingPreference string

const (
	RoutingPreferenceDefault  = RoutingPreference("Default")
	RoutingPreferenceRouteAll = RoutingPreference("RouteAll")
)

func (RoutingPreference) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingPreference)(nil)).Elem()
}

func (e RoutingPreference) ToRoutingPreferenceOutput() RoutingPreferenceOutput {
	return pulumi.ToOutput(e).(RoutingPreferenceOutput)
}

func (e RoutingPreference) ToRoutingPreferenceOutputWithContext(ctx context.Context) RoutingPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoutingPreferenceOutput)
}

func (e RoutingPreference) ToRoutingPreferencePtrOutput() RoutingPreferencePtrOutput {
	return e.ToRoutingPreferencePtrOutputWithContext(context.Background())
}

func (e RoutingPreference) ToRoutingPreferencePtrOutputWithContext(ctx context.Context) RoutingPreferencePtrOutput {
	return RoutingPreference(e).ToRoutingPreferenceOutputWithContext(ctx).ToRoutingPreferencePtrOutputWithContext(ctx)
}

func (e RoutingPreference) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingPreference) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoutingPreference) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoutingPreference) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoutingPreferenceOutput struct{ *pulumi.OutputState }

func (RoutingPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutingPreference)(nil)).Elem()
}

func (o RoutingPreferenceOutput) ToRoutingPreferenceOutput() RoutingPreferenceOutput {
	return o
}

func (o RoutingPreferenceOutput) ToRoutingPreferenceOutputWithContext(ctx context.Context) RoutingPreferenceOutput {
	return o
}

func (o RoutingPreferenceOutput) ToRoutingPreferencePtrOutput() RoutingPreferencePtrOutput {
	return o.ToRoutingPreferencePtrOutputWithContext(context.Background())
}

func (o RoutingPreferenceOutput) ToRoutingPreferencePtrOutputWithContext(ctx context.Context) RoutingPreferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutingPreference) *RoutingPreference {
		return &v
	}).(RoutingPreferencePtrOutput)
}

func (o RoutingPreferenceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoutingPreferenceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingPreference) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoutingPreferenceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingPreferenceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoutingPreference) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoutingPreferencePtrOutput struct{ *pulumi.OutputState }

func (RoutingPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingPreference)(nil)).Elem()
}

func (o RoutingPreferencePtrOutput) ToRoutingPreferencePtrOutput() RoutingPreferencePtrOutput {
	return o
}

func (o RoutingPreferencePtrOutput) ToRoutingPreferencePtrOutputWithContext(ctx context.Context) RoutingPreferencePtrOutput {
	return o
}

func (o RoutingPreferencePtrOutput) Elem() RoutingPreferenceOutput {
	return o.ApplyT(func(v *RoutingPreference) RoutingPreference {
		if v != nil {
			return *v
		}
		var ret RoutingPreference
		return ret
	}).(RoutingPreferenceOutput)
}

func (o RoutingPreferencePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoutingPreferencePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoutingPreference) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoutingPreferenceInput is an input type that accepts values of the RoutingPreference enum
// A concrete instance of `RoutingPreferenceInput` can be one of the following:
//
//	RoutingPreferenceDefault
//	RoutingPreferenceRouteAll
type RoutingPreferenceInput interface {
	pulumi.Input

	ToRoutingPreferenceOutput() RoutingPreferenceOutput
	ToRoutingPreferenceOutputWithContext(context.Context) RoutingPreferenceOutput
}

var routingPreferencePtrType = reflect.TypeOf((**RoutingPreference)(nil)).Elem()

type RoutingPreferencePtrInput interface {
	pulumi.Input

	ToRoutingPreferencePtrOutput() RoutingPreferencePtrOutput
	ToRoutingPreferencePtrOutputWithContext(context.Context) RoutingPreferencePtrOutput
}

type routingPreferencePtr string

func RoutingPreferencePtr(v string) RoutingPreferencePtrInput {
	return (*routingPreferencePtr)(&v)
}

func (*routingPreferencePtr) ElementType() reflect.Type {
	return routingPreferencePtrType
}

func (in *routingPreferencePtr) ToRoutingPreferencePtrOutput() RoutingPreferencePtrOutput {
	return pulumi.ToOutput(in).(RoutingPreferencePtrOutput)
}

func (in *routingPreferencePtr) ToRoutingPreferencePtrOutputWithContext(ctx context.Context) RoutingPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoutingPreferencePtrOutput)
}

// The configuration Type.
type SAPConfigurationType string

const (
	SAPConfigurationTypeDeployment             = SAPConfigurationType("Deployment")
	SAPConfigurationTypeDiscovery              = SAPConfigurationType("Discovery")
	SAPConfigurationTypeDeploymentWithOSConfig = SAPConfigurationType("DeploymentWithOSConfig")
)

// The DB scale method.
type SAPDatabaseScaleMethod string

const (
	SAPDatabaseScaleMethodScaleUp = SAPDatabaseScaleMethod("ScaleUp")
)

func (SAPDatabaseScaleMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutput(e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return e.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return SAPDatabaseScaleMethod(e).ToSAPDatabaseScaleMethodOutputWithContext(ctx).ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx)
}

func (e SAPDatabaseScaleMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseScaleMethodOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseScaleMethod) *SAPDatabaseScaleMethod {
		return &v
	}).(SAPDatabaseScaleMethodPtrOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseScaleMethodPtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) Elem() SAPDatabaseScaleMethodOutput {
	return o.ApplyT(func(v *SAPDatabaseScaleMethod) SAPDatabaseScaleMethod {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseScaleMethod
		return ret
	}).(SAPDatabaseScaleMethodOutput)
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseScaleMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseScaleMethodInput is an input type that accepts values of the SAPDatabaseScaleMethod enum
// A concrete instance of `SAPDatabaseScaleMethodInput` can be one of the following:
//
//	SAPDatabaseScaleMethodScaleUp
type SAPDatabaseScaleMethodInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput
	ToSAPDatabaseScaleMethodOutputWithContext(context.Context) SAPDatabaseScaleMethodOutput
}

var sapdatabaseScaleMethodPtrType = reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()

type SAPDatabaseScaleMethodPtrInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput
	ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Context) SAPDatabaseScaleMethodPtrOutput
}

type sapdatabaseScaleMethodPtr string

func SAPDatabaseScaleMethodPtr(v string) SAPDatabaseScaleMethodPtrInput {
	return (*sapdatabaseScaleMethodPtr)(&v)
}

func (*sapdatabaseScaleMethodPtr) ElementType() reflect.Type {
	return sapdatabaseScaleMethodPtrType
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseScaleMethodPtrOutput)
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseScaleMethodPtrOutput)
}

// The database type. Eg: HANA, DB2, etc
type SAPDatabaseType string

const (
	SAPDatabaseTypeHANA = SAPDatabaseType("HANA")
	SAPDatabaseTypeDB2  = SAPDatabaseType("DB2")
)

func (SAPDatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return pulumi.ToOutput(e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return e.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return SAPDatabaseType(e).ToSAPDatabaseTypeOutputWithContext(ctx).ToSAPDatabaseTypePtrOutputWithContext(ctx)
}

func (e SAPDatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseTypeOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseType) *SAPDatabaseType {
		return &v
	}).(SAPDatabaseTypePtrOutput)
}

func (o SAPDatabaseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) Elem() SAPDatabaseTypeOutput {
	return o.ApplyT(func(v *SAPDatabaseType) SAPDatabaseType {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseType
		return ret
	}).(SAPDatabaseTypeOutput)
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseTypeInput is an input type that accepts values of the SAPDatabaseType enum
// A concrete instance of `SAPDatabaseTypeInput` can be one of the following:
//
//	SAPDatabaseTypeHANA
//	SAPDatabaseTypeDB2
type SAPDatabaseTypeInput interface {
	pulumi.Input

	ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput
	ToSAPDatabaseTypeOutputWithContext(context.Context) SAPDatabaseTypeOutput
}

var sapdatabaseTypePtrType = reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()

type SAPDatabaseTypePtrInput interface {
	pulumi.Input

	ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput
	ToSAPDatabaseTypePtrOutputWithContext(context.Context) SAPDatabaseTypePtrOutput
}

type sapdatabaseTypePtr string

func SAPDatabaseTypePtr(v string) SAPDatabaseTypePtrInput {
	return (*sapdatabaseTypePtr)(&v)
}

func (*sapdatabaseTypePtr) ElementType() reflect.Type {
	return sapdatabaseTypePtrType
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseTypePtrOutput)
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseTypePtrOutput)
}

// The deployment type. Eg: SingleServer/ThreeTier
type SAPDeploymentType string

const (
	SAPDeploymentTypeSingleServer = SAPDeploymentType("SingleServer")
	SAPDeploymentTypeThreeTier    = SAPDeploymentType("ThreeTier")
)

func (SAPDeploymentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return pulumi.ToOutput(e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return e.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return SAPDeploymentType(e).ToSAPDeploymentTypeOutputWithContext(ctx).ToSAPDeploymentTypePtrOutputWithContext(ctx)
}

func (e SAPDeploymentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDeploymentTypeOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDeploymentType) *SAPDeploymentType {
		return &v
	}).(SAPDeploymentTypePtrOutput)
}

func (o SAPDeploymentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDeploymentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) Elem() SAPDeploymentTypeOutput {
	return o.ApplyT(func(v *SAPDeploymentType) SAPDeploymentType {
		if v != nil {
			return *v
		}
		var ret SAPDeploymentType
		return ret
	}).(SAPDeploymentTypeOutput)
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDeploymentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDeploymentTypeInput is an input type that accepts values of the SAPDeploymentType enum
// A concrete instance of `SAPDeploymentTypeInput` can be one of the following:
//
//	SAPDeploymentTypeSingleServer
//	SAPDeploymentTypeThreeTier
type SAPDeploymentTypeInput interface {
	pulumi.Input

	ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput
	ToSAPDeploymentTypeOutputWithContext(context.Context) SAPDeploymentTypeOutput
}

var sapdeploymentTypePtrType = reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()

type SAPDeploymentTypePtrInput interface {
	pulumi.Input

	ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput
	ToSAPDeploymentTypePtrOutputWithContext(context.Context) SAPDeploymentTypePtrOutput
}

type sapdeploymentTypePtr string

func SAPDeploymentTypePtr(v string) SAPDeploymentTypePtrInput {
	return (*sapdeploymentTypePtr)(&v)
}

func (*sapdeploymentTypePtr) ElementType() reflect.Type {
	return sapdeploymentTypePtrType
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDeploymentTypePtrOutput)
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDeploymentTypePtrOutput)
}

// Defines the environment type - Production/Non Production.
type SAPEnvironmentType string

const (
	SAPEnvironmentTypeNonProd = SAPEnvironmentType("NonProd")
	SAPEnvironmentTypeProd    = SAPEnvironmentType("Prod")
)

func (SAPEnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return pulumi.ToOutput(e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return e.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return SAPEnvironmentType(e).ToSAPEnvironmentTypeOutputWithContext(ctx).ToSAPEnvironmentTypePtrOutputWithContext(ctx)
}

func (e SAPEnvironmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPEnvironmentTypeOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPEnvironmentType) *SAPEnvironmentType {
		return &v
	}).(SAPEnvironmentTypePtrOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPEnvironmentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) Elem() SAPEnvironmentTypeOutput {
	return o.ApplyT(func(v *SAPEnvironmentType) SAPEnvironmentType {
		if v != nil {
			return *v
		}
		var ret SAPEnvironmentType
		return ret
	}).(SAPEnvironmentTypeOutput)
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPEnvironmentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPEnvironmentTypeInput is an input type that accepts values of the SAPEnvironmentType enum
// A concrete instance of `SAPEnvironmentTypeInput` can be one of the following:
//
//	SAPEnvironmentTypeNonProd
//	SAPEnvironmentTypeProd
type SAPEnvironmentTypeInput interface {
	pulumi.Input

	ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput
	ToSAPEnvironmentTypeOutputWithContext(context.Context) SAPEnvironmentTypeOutput
}

var sapenvironmentTypePtrType = reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()

type SAPEnvironmentTypePtrInput interface {
	pulumi.Input

	ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput
	ToSAPEnvironmentTypePtrOutputWithContext(context.Context) SAPEnvironmentTypePtrOutput
}

type sapenvironmentTypePtr string

func SAPEnvironmentTypePtr(v string) SAPEnvironmentTypePtrInput {
	return (*sapenvironmentTypePtr)(&v)
}

func (*sapenvironmentTypePtr) ElementType() reflect.Type {
	return sapenvironmentTypePtrType
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPEnvironmentTypePtrOutput)
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPEnvironmentTypePtrOutput)
}

// The high availability type.
type SAPHighAvailabilityType string

const (
	SAPHighAvailabilityTypeAvailabilitySet  = SAPHighAvailabilityType("AvailabilitySet")
	SAPHighAvailabilityTypeAvailabilityZone = SAPHighAvailabilityType("AvailabilityZone")
)

func (SAPHighAvailabilityType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutput(e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return e.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return SAPHighAvailabilityType(e).ToSAPHighAvailabilityTypeOutputWithContext(ctx).ToSAPHighAvailabilityTypePtrOutputWithContext(ctx)
}

func (e SAPHighAvailabilityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPHighAvailabilityTypeOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPHighAvailabilityType) *SAPHighAvailabilityType {
		return &v
	}).(SAPHighAvailabilityTypePtrOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPHighAvailabilityTypePtrOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) Elem() SAPHighAvailabilityTypeOutput {
	return o.ApplyT(func(v *SAPHighAvailabilityType) SAPHighAvailabilityType {
		if v != nil {
			return *v
		}
		var ret SAPHighAvailabilityType
		return ret
	}).(SAPHighAvailabilityTypeOutput)
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPHighAvailabilityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPHighAvailabilityTypeInput is an input type that accepts values of the SAPHighAvailabilityType enum
// A concrete instance of `SAPHighAvailabilityTypeInput` can be one of the following:
//
//	SAPHighAvailabilityTypeAvailabilitySet
//	SAPHighAvailabilityTypeAvailabilityZone
type SAPHighAvailabilityTypeInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput
	ToSAPHighAvailabilityTypeOutputWithContext(context.Context) SAPHighAvailabilityTypeOutput
}

var saphighAvailabilityTypePtrType = reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()

type SAPHighAvailabilityTypePtrInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput
	ToSAPHighAvailabilityTypePtrOutputWithContext(context.Context) SAPHighAvailabilityTypePtrOutput
}

type saphighAvailabilityTypePtr string

func SAPHighAvailabilityTypePtr(v string) SAPHighAvailabilityTypePtrInput {
	return (*saphighAvailabilityTypePtr)(&v)
}

func (*saphighAvailabilityTypePtr) ElementType() reflect.Type {
	return saphighAvailabilityTypePtrType
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutput(in).(SAPHighAvailabilityTypePtrOutput)
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPHighAvailabilityTypePtrOutput)
}

// Defines the SAP Product type.
type SAPProductType string

const (
	SAPProductTypeECC    = SAPProductType("ECC")
	SAPProductTypeS4HANA = SAPProductType("S4HANA")
	SAPProductTypeOther  = SAPProductType("Other")
)

func (SAPProductType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (e SAPProductType) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return pulumi.ToOutput(e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return e.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return SAPProductType(e).ToSAPProductTypeOutputWithContext(ctx).ToSAPProductTypePtrOutputWithContext(ctx)
}

func (e SAPProductType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPProductTypeOutput struct{ *pulumi.OutputState }

func (SAPProductTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPProductType) *SAPProductType {
		return &v
	}).(SAPProductTypePtrOutput)
}

func (o SAPProductTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPProductTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPProductTypePtrOutput struct{ *pulumi.OutputState }

func (SAPProductTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPProductType)(nil)).Elem()
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) Elem() SAPProductTypeOutput {
	return o.ApplyT(func(v *SAPProductType) SAPProductType {
		if v != nil {
			return *v
		}
		var ret SAPProductType
		return ret
	}).(SAPProductTypeOutput)
}

func (o SAPProductTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPProductType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPProductTypeInput is an input type that accepts values of the SAPProductType enum
// A concrete instance of `SAPProductTypeInput` can be one of the following:
//
//	SAPProductTypeECC
//	SAPProductTypeS4HANA
//	SAPProductTypeOther
type SAPProductTypeInput interface {
	pulumi.Input

	ToSAPProductTypeOutput() SAPProductTypeOutput
	ToSAPProductTypeOutputWithContext(context.Context) SAPProductTypeOutput
}

var sapproductTypePtrType = reflect.TypeOf((**SAPProductType)(nil)).Elem()

type SAPProductTypePtrInput interface {
	pulumi.Input

	ToSAPProductTypePtrOutput() SAPProductTypePtrOutput
	ToSAPProductTypePtrOutputWithContext(context.Context) SAPProductTypePtrOutput
}

type sapproductTypePtr string

func SAPProductTypePtr(v string) SAPProductTypePtrInput {
	return (*sapproductTypePtr)(&v)
}

func (*sapproductTypePtr) ElementType() reflect.Type {
	return sapproductTypePtrType
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return pulumi.ToOutput(in).(SAPProductTypePtrOutput)
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPProductTypePtrOutput)
}

// The SAP software installation Type.
type SAPSoftwareInstallationType string

const (
	SAPSoftwareInstallationTypeServiceInitiated          = SAPSoftwareInstallationType("ServiceInitiated")
	SAPSoftwareInstallationTypeSAPInstallWithoutOSConfig = SAPSoftwareInstallationType("SAPInstallWithoutOSConfig")
	SAPSoftwareInstallationTypeExternal                  = SAPSoftwareInstallationType("External")
)

// Frequency of the schedule operation of this policy.
type ScheduleRunType string

const (
	ScheduleRunTypeInvalid = ScheduleRunType("Invalid")
	ScheduleRunTypeDaily   = ScheduleRunType("Daily")
	ScheduleRunTypeWeekly  = ScheduleRunType("Weekly")
	ScheduleRunTypeHourly  = ScheduleRunType("Hourly")
)

func (ScheduleRunType) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRunType)(nil)).Elem()
}

func (e ScheduleRunType) ToScheduleRunTypeOutput() ScheduleRunTypeOutput {
	return pulumi.ToOutput(e).(ScheduleRunTypeOutput)
}

func (e ScheduleRunType) ToScheduleRunTypeOutputWithContext(ctx context.Context) ScheduleRunTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScheduleRunTypeOutput)
}

func (e ScheduleRunType) ToScheduleRunTypePtrOutput() ScheduleRunTypePtrOutput {
	return e.ToScheduleRunTypePtrOutputWithContext(context.Background())
}

func (e ScheduleRunType) ToScheduleRunTypePtrOutputWithContext(ctx context.Context) ScheduleRunTypePtrOutput {
	return ScheduleRunType(e).ToScheduleRunTypeOutputWithContext(ctx).ToScheduleRunTypePtrOutputWithContext(ctx)
}

func (e ScheduleRunType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleRunType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScheduleRunType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScheduleRunType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScheduleRunTypeOutput struct{ *pulumi.OutputState }

func (ScheduleRunTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRunType)(nil)).Elem()
}

func (o ScheduleRunTypeOutput) ToScheduleRunTypeOutput() ScheduleRunTypeOutput {
	return o
}

func (o ScheduleRunTypeOutput) ToScheduleRunTypeOutputWithContext(ctx context.Context) ScheduleRunTypeOutput {
	return o
}

func (o ScheduleRunTypeOutput) ToScheduleRunTypePtrOutput() ScheduleRunTypePtrOutput {
	return o.ToScheduleRunTypePtrOutputWithContext(context.Background())
}

func (o ScheduleRunTypeOutput) ToScheduleRunTypePtrOutputWithContext(ctx context.Context) ScheduleRunTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleRunType) *ScheduleRunType {
		return &v
	}).(ScheduleRunTypePtrOutput)
}

func (o ScheduleRunTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScheduleRunTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleRunType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScheduleRunTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleRunTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScheduleRunType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScheduleRunTypePtrOutput struct{ *pulumi.OutputState }

func (ScheduleRunTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRunType)(nil)).Elem()
}

func (o ScheduleRunTypePtrOutput) ToScheduleRunTypePtrOutput() ScheduleRunTypePtrOutput {
	return o
}

func (o ScheduleRunTypePtrOutput) ToScheduleRunTypePtrOutputWithContext(ctx context.Context) ScheduleRunTypePtrOutput {
	return o
}

func (o ScheduleRunTypePtrOutput) Elem() ScheduleRunTypeOutput {
	return o.ApplyT(func(v *ScheduleRunType) ScheduleRunType {
		if v != nil {
			return *v
		}
		var ret ScheduleRunType
		return ret
	}).(ScheduleRunTypeOutput)
}

func (o ScheduleRunTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScheduleRunTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScheduleRunType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScheduleRunTypeInput is an input type that accepts values of the ScheduleRunType enum
// A concrete instance of `ScheduleRunTypeInput` can be one of the following:
//
//	ScheduleRunTypeInvalid
//	ScheduleRunTypeDaily
//	ScheduleRunTypeWeekly
//	ScheduleRunTypeHourly
type ScheduleRunTypeInput interface {
	pulumi.Input

	ToScheduleRunTypeOutput() ScheduleRunTypeOutput
	ToScheduleRunTypeOutputWithContext(context.Context) ScheduleRunTypeOutput
}

var scheduleRunTypePtrType = reflect.TypeOf((**ScheduleRunType)(nil)).Elem()

type ScheduleRunTypePtrInput interface {
	pulumi.Input

	ToScheduleRunTypePtrOutput() ScheduleRunTypePtrOutput
	ToScheduleRunTypePtrOutputWithContext(context.Context) ScheduleRunTypePtrOutput
}

type scheduleRunTypePtr string

func ScheduleRunTypePtr(v string) ScheduleRunTypePtrInput {
	return (*scheduleRunTypePtr)(&v)
}

func (*scheduleRunTypePtr) ElementType() reflect.Type {
	return scheduleRunTypePtrType
}

func (in *scheduleRunTypePtr) ToScheduleRunTypePtrOutput() ScheduleRunTypePtrOutput {
	return pulumi.ToOutput(in).(ScheduleRunTypePtrOutput)
}

func (in *scheduleRunTypePtr) ToScheduleRunTypePtrOutputWithContext(ctx context.Context) ScheduleRunTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScheduleRunTypePtrOutput)
}

// Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is automatically determined by searching in the configuration files.
type SslCryptoProvider string

const (
	SslCryptoProviderCommoncrypto = SslCryptoProvider("commoncrypto")
	SslCryptoProviderOpenssl      = SslCryptoProvider("openssl")
)

func (SslCryptoProvider) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCryptoProvider)(nil)).Elem()
}

func (e SslCryptoProvider) ToSslCryptoProviderOutput() SslCryptoProviderOutput {
	return pulumi.ToOutput(e).(SslCryptoProviderOutput)
}

func (e SslCryptoProvider) ToSslCryptoProviderOutputWithContext(ctx context.Context) SslCryptoProviderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SslCryptoProviderOutput)
}

func (e SslCryptoProvider) ToSslCryptoProviderPtrOutput() SslCryptoProviderPtrOutput {
	return e.ToSslCryptoProviderPtrOutputWithContext(context.Background())
}

func (e SslCryptoProvider) ToSslCryptoProviderPtrOutputWithContext(ctx context.Context) SslCryptoProviderPtrOutput {
	return SslCryptoProvider(e).ToSslCryptoProviderOutputWithContext(ctx).ToSslCryptoProviderPtrOutputWithContext(ctx)
}

func (e SslCryptoProvider) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCryptoProvider) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslCryptoProvider) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslCryptoProvider) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SslCryptoProviderOutput struct{ *pulumi.OutputState }

func (SslCryptoProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCryptoProvider)(nil)).Elem()
}

func (o SslCryptoProviderOutput) ToSslCryptoProviderOutput() SslCryptoProviderOutput {
	return o
}

func (o SslCryptoProviderOutput) ToSslCryptoProviderOutputWithContext(ctx context.Context) SslCryptoProviderOutput {
	return o
}

func (o SslCryptoProviderOutput) ToSslCryptoProviderPtrOutput() SslCryptoProviderPtrOutput {
	return o.ToSslCryptoProviderPtrOutputWithContext(context.Background())
}

func (o SslCryptoProviderOutput) ToSslCryptoProviderPtrOutputWithContext(ctx context.Context) SslCryptoProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslCryptoProvider) *SslCryptoProvider {
		return &v
	}).(SslCryptoProviderPtrOutput)
}

func (o SslCryptoProviderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SslCryptoProviderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslCryptoProvider) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SslCryptoProviderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslCryptoProviderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslCryptoProvider) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SslCryptoProviderPtrOutput struct{ *pulumi.OutputState }

func (SslCryptoProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCryptoProvider)(nil)).Elem()
}

func (o SslCryptoProviderPtrOutput) ToSslCryptoProviderPtrOutput() SslCryptoProviderPtrOutput {
	return o
}

func (o SslCryptoProviderPtrOutput) ToSslCryptoProviderPtrOutputWithContext(ctx context.Context) SslCryptoProviderPtrOutput {
	return o
}

func (o SslCryptoProviderPtrOutput) Elem() SslCryptoProviderOutput {
	return o.ApplyT(func(v *SslCryptoProvider) SslCryptoProvider {
		if v != nil {
			return *v
		}
		var ret SslCryptoProvider
		return ret
	}).(SslCryptoProviderOutput)
}

func (o SslCryptoProviderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslCryptoProviderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SslCryptoProvider) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SslCryptoProviderInput is an input type that accepts values of the SslCryptoProvider enum
// A concrete instance of `SslCryptoProviderInput` can be one of the following:
//
//	SslCryptoProviderCommoncrypto
//	SslCryptoProviderOpenssl
type SslCryptoProviderInput interface {
	pulumi.Input

	ToSslCryptoProviderOutput() SslCryptoProviderOutput
	ToSslCryptoProviderOutputWithContext(context.Context) SslCryptoProviderOutput
}

var sslCryptoProviderPtrType = reflect.TypeOf((**SslCryptoProvider)(nil)).Elem()

type SslCryptoProviderPtrInput interface {
	pulumi.Input

	ToSslCryptoProviderPtrOutput() SslCryptoProviderPtrOutput
	ToSslCryptoProviderPtrOutputWithContext(context.Context) SslCryptoProviderPtrOutput
}

type sslCryptoProviderPtr string

func SslCryptoProviderPtr(v string) SslCryptoProviderPtrInput {
	return (*sslCryptoProviderPtr)(&v)
}

func (*sslCryptoProviderPtr) ElementType() reflect.Type {
	return sslCryptoProviderPtrType
}

func (in *sslCryptoProviderPtr) ToSslCryptoProviderPtrOutput() SslCryptoProviderPtrOutput {
	return pulumi.ToOutput(in).(SslCryptoProviderPtrOutput)
}

func (in *sslCryptoProviderPtr) ToSslCryptoProviderPtrOutputWithContext(ctx context.Context) SslCryptoProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SslCryptoProviderPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
type SslPreference string

const (
	SslPreferenceDisabled          = SslPreference("Disabled")
	SslPreferenceRootCertificate   = SslPreference("RootCertificate")
	SslPreferenceServerCertificate = SslPreference("ServerCertificate")
)

func (SslPreference) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPreference)(nil)).Elem()
}

func (e SslPreference) ToSslPreferenceOutput() SslPreferenceOutput {
	return pulumi.ToOutput(e).(SslPreferenceOutput)
}

func (e SslPreference) ToSslPreferenceOutputWithContext(ctx context.Context) SslPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SslPreferenceOutput)
}

func (e SslPreference) ToSslPreferencePtrOutput() SslPreferencePtrOutput {
	return e.ToSslPreferencePtrOutputWithContext(context.Background())
}

func (e SslPreference) ToSslPreferencePtrOutputWithContext(ctx context.Context) SslPreferencePtrOutput {
	return SslPreference(e).ToSslPreferenceOutputWithContext(ctx).ToSslPreferencePtrOutputWithContext(ctx)
}

func (e SslPreference) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPreference) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SslPreference) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SslPreference) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SslPreferenceOutput struct{ *pulumi.OutputState }

func (SslPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslPreference)(nil)).Elem()
}

func (o SslPreferenceOutput) ToSslPreferenceOutput() SslPreferenceOutput {
	return o
}

func (o SslPreferenceOutput) ToSslPreferenceOutputWithContext(ctx context.Context) SslPreferenceOutput {
	return o
}

func (o SslPreferenceOutput) ToSslPreferencePtrOutput() SslPreferencePtrOutput {
	return o.ToSslPreferencePtrOutputWithContext(context.Background())
}

func (o SslPreferenceOutput) ToSslPreferencePtrOutputWithContext(ctx context.Context) SslPreferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslPreference) *SslPreference {
		return &v
	}).(SslPreferencePtrOutput)
}

func (o SslPreferenceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SslPreferenceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslPreference) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SslPreferenceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslPreferenceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SslPreference) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SslPreferencePtrOutput struct{ *pulumi.OutputState }

func (SslPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslPreference)(nil)).Elem()
}

func (o SslPreferencePtrOutput) ToSslPreferencePtrOutput() SslPreferencePtrOutput {
	return o
}

func (o SslPreferencePtrOutput) ToSslPreferencePtrOutputWithContext(ctx context.Context) SslPreferencePtrOutput {
	return o
}

func (o SslPreferencePtrOutput) Elem() SslPreferenceOutput {
	return o.ApplyT(func(v *SslPreference) SslPreference {
		if v != nil {
			return *v
		}
		var ret SslPreference
		return ret
	}).(SslPreferenceOutput)
}

func (o SslPreferencePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SslPreferencePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SslPreference) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SslPreferenceInput is an input type that accepts values of the SslPreference enum
// A concrete instance of `SslPreferenceInput` can be one of the following:
//
//	SslPreferenceDisabled
//	SslPreferenceRootCertificate
//	SslPreferenceServerCertificate
type SslPreferenceInput interface {
	pulumi.Input

	ToSslPreferenceOutput() SslPreferenceOutput
	ToSslPreferenceOutputWithContext(context.Context) SslPreferenceOutput
}

var sslPreferencePtrType = reflect.TypeOf((**SslPreference)(nil)).Elem()

type SslPreferencePtrInput interface {
	pulumi.Input

	ToSslPreferencePtrOutput() SslPreferencePtrOutput
	ToSslPreferencePtrOutputWithContext(context.Context) SslPreferencePtrOutput
}

type sslPreferencePtr string

func SslPreferencePtr(v string) SslPreferencePtrInput {
	return (*sslPreferencePtr)(&v)
}

func (*sslPreferencePtr) ElementType() reflect.Type {
	return sslPreferencePtrType
}

func (in *sslPreferencePtr) ToSslPreferencePtrOutput() SslPreferencePtrOutput {
	return pulumi.ToOutput(in).(SslPreferencePtrOutput)
}

func (in *sslPreferencePtr) ToSslPreferencePtrOutputWithContext(ctx context.Context) SslPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SslPreferencePtrOutput)
}

// Tiering Mode to control automatic tiering of recovery points. Supported values are:
// 1. TierRecommended: Tier all recovery points recommended to be tiered
// 2. TierAfter: Tier all recovery points after a fixed period, as specified in duration + durationType below.
// 3. DoNotTier: Do not tier any recovery points
type TieringMode string

const (
	TieringModeInvalid         = TieringMode("Invalid")
	TieringModeTierRecommended = TieringMode("TierRecommended")
	TieringModeTierAfter       = TieringMode("TierAfter")
	TieringModeDoNotTier       = TieringMode("DoNotTier")
)

func (TieringMode) ElementType() reflect.Type {
	return reflect.TypeOf((*TieringMode)(nil)).Elem()
}

func (e TieringMode) ToTieringModeOutput() TieringModeOutput {
	return pulumi.ToOutput(e).(TieringModeOutput)
}

func (e TieringMode) ToTieringModeOutputWithContext(ctx context.Context) TieringModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TieringModeOutput)
}

func (e TieringMode) ToTieringModePtrOutput() TieringModePtrOutput {
	return e.ToTieringModePtrOutputWithContext(context.Background())
}

func (e TieringMode) ToTieringModePtrOutputWithContext(ctx context.Context) TieringModePtrOutput {
	return TieringMode(e).ToTieringModeOutputWithContext(ctx).ToTieringModePtrOutputWithContext(ctx)
}

func (e TieringMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TieringMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TieringMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TieringMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TieringModeOutput struct{ *pulumi.OutputState }

func (TieringModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TieringMode)(nil)).Elem()
}

func (o TieringModeOutput) ToTieringModeOutput() TieringModeOutput {
	return o
}

func (o TieringModeOutput) ToTieringModeOutputWithContext(ctx context.Context) TieringModeOutput {
	return o
}

func (o TieringModeOutput) ToTieringModePtrOutput() TieringModePtrOutput {
	return o.ToTieringModePtrOutputWithContext(context.Background())
}

func (o TieringModeOutput) ToTieringModePtrOutputWithContext(ctx context.Context) TieringModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TieringMode) *TieringMode {
		return &v
	}).(TieringModePtrOutput)
}

func (o TieringModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TieringModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TieringMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TieringModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TieringModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TieringMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TieringModePtrOutput struct{ *pulumi.OutputState }

func (TieringModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TieringMode)(nil)).Elem()
}

func (o TieringModePtrOutput) ToTieringModePtrOutput() TieringModePtrOutput {
	return o
}

func (o TieringModePtrOutput) ToTieringModePtrOutputWithContext(ctx context.Context) TieringModePtrOutput {
	return o
}

func (o TieringModePtrOutput) Elem() TieringModeOutput {
	return o.ApplyT(func(v *TieringMode) TieringMode {
		if v != nil {
			return *v
		}
		var ret TieringMode
		return ret
	}).(TieringModeOutput)
}

func (o TieringModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TieringModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TieringMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TieringModeInput is an input type that accepts values of the TieringMode enum
// A concrete instance of `TieringModeInput` can be one of the following:
//
//	TieringModeInvalid
//	TieringModeTierRecommended
//	TieringModeTierAfter
//	TieringModeDoNotTier
type TieringModeInput interface {
	pulumi.Input

	ToTieringModeOutput() TieringModeOutput
	ToTieringModeOutputWithContext(context.Context) TieringModeOutput
}

var tieringModePtrType = reflect.TypeOf((**TieringMode)(nil)).Elem()

type TieringModePtrInput interface {
	pulumi.Input

	ToTieringModePtrOutput() TieringModePtrOutput
	ToTieringModePtrOutputWithContext(context.Context) TieringModePtrOutput
}

type tieringModePtr string

func TieringModePtr(v string) TieringModePtrInput {
	return (*tieringModePtr)(&v)
}

func (*tieringModePtr) ElementType() reflect.Type {
	return tieringModePtrType
}

func (in *tieringModePtr) ToTieringModePtrOutput() TieringModePtrOutput {
	return pulumi.ToOutput(in).(TieringModePtrOutput)
}

func (in *tieringModePtr) ToTieringModePtrOutputWithContext(ctx context.Context) TieringModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TieringModePtrOutput)
}

// The vault type, whether it is existing or has to be created.
type VaultType string

const (
	VaultTypeExisting = VaultType("Existing")
	VaultTypeNew      = VaultType("New")
)

type WeekOfMonth string

const (
	WeekOfMonthFirst   = WeekOfMonth("First")
	WeekOfMonthSecond  = WeekOfMonth("Second")
	WeekOfMonthThird   = WeekOfMonth("Third")
	WeekOfMonthFourth  = WeekOfMonth("Fourth")
	WeekOfMonthLast    = WeekOfMonth("Last")
	WeekOfMonthInvalid = WeekOfMonth("Invalid")
)

func (WeekOfMonth) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekOfMonth)(nil)).Elem()
}

func (e WeekOfMonth) ToWeekOfMonthOutput() WeekOfMonthOutput {
	return pulumi.ToOutput(e).(WeekOfMonthOutput)
}

func (e WeekOfMonth) ToWeekOfMonthOutputWithContext(ctx context.Context) WeekOfMonthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WeekOfMonthOutput)
}

func (e WeekOfMonth) ToWeekOfMonthPtrOutput() WeekOfMonthPtrOutput {
	return e.ToWeekOfMonthPtrOutputWithContext(context.Background())
}

func (e WeekOfMonth) ToWeekOfMonthPtrOutputWithContext(ctx context.Context) WeekOfMonthPtrOutput {
	return WeekOfMonth(e).ToWeekOfMonthOutputWithContext(ctx).ToWeekOfMonthPtrOutputWithContext(ctx)
}

func (e WeekOfMonth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekOfMonth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WeekOfMonth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WeekOfMonth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WeekOfMonthOutput struct{ *pulumi.OutputState }

func (WeekOfMonthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeekOfMonth)(nil)).Elem()
}

func (o WeekOfMonthOutput) ToWeekOfMonthOutput() WeekOfMonthOutput {
	return o
}

func (o WeekOfMonthOutput) ToWeekOfMonthOutputWithContext(ctx context.Context) WeekOfMonthOutput {
	return o
}

func (o WeekOfMonthOutput) ToWeekOfMonthPtrOutput() WeekOfMonthPtrOutput {
	return o.ToWeekOfMonthPtrOutputWithContext(context.Background())
}

func (o WeekOfMonthOutput) ToWeekOfMonthPtrOutputWithContext(ctx context.Context) WeekOfMonthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WeekOfMonth) *WeekOfMonth {
		return &v
	}).(WeekOfMonthPtrOutput)
}

func (o WeekOfMonthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WeekOfMonthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekOfMonth) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WeekOfMonthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekOfMonthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WeekOfMonth) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WeekOfMonthPtrOutput struct{ *pulumi.OutputState }

func (WeekOfMonthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WeekOfMonth)(nil)).Elem()
}

func (o WeekOfMonthPtrOutput) ToWeekOfMonthPtrOutput() WeekOfMonthPtrOutput {
	return o
}

func (o WeekOfMonthPtrOutput) ToWeekOfMonthPtrOutputWithContext(ctx context.Context) WeekOfMonthPtrOutput {
	return o
}

func (o WeekOfMonthPtrOutput) Elem() WeekOfMonthOutput {
	return o.ApplyT(func(v *WeekOfMonth) WeekOfMonth {
		if v != nil {
			return *v
		}
		var ret WeekOfMonth
		return ret
	}).(WeekOfMonthOutput)
}

func (o WeekOfMonthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WeekOfMonthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WeekOfMonth) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WeekOfMonthInput is an input type that accepts values of the WeekOfMonth enum
// A concrete instance of `WeekOfMonthInput` can be one of the following:
//
//	WeekOfMonthFirst
//	WeekOfMonthSecond
//	WeekOfMonthThird
//	WeekOfMonthFourth
//	WeekOfMonthLast
//	WeekOfMonthInvalid
type WeekOfMonthInput interface {
	pulumi.Input

	ToWeekOfMonthOutput() WeekOfMonthOutput
	ToWeekOfMonthOutputWithContext(context.Context) WeekOfMonthOutput
}

var weekOfMonthPtrType = reflect.TypeOf((**WeekOfMonth)(nil)).Elem()

type WeekOfMonthPtrInput interface {
	pulumi.Input

	ToWeekOfMonthPtrOutput() WeekOfMonthPtrOutput
	ToWeekOfMonthPtrOutputWithContext(context.Context) WeekOfMonthPtrOutput
}

type weekOfMonthPtr string

func WeekOfMonthPtr(v string) WeekOfMonthPtrInput {
	return (*weekOfMonthPtr)(&v)
}

func (*weekOfMonthPtr) ElementType() reflect.Type {
	return weekOfMonthPtrType
}

func (in *weekOfMonthPtr) ToWeekOfMonthPtrOutput() WeekOfMonthPtrOutput {
	return pulumi.ToOutput(in).(WeekOfMonthPtrOutput)
}

func (in *weekOfMonthPtr) ToWeekOfMonthPtrOutputWithContext(ctx context.Context) WeekOfMonthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WeekOfMonthPtrOutput)
}

// WeekOfMonthArrayInput is an input type that accepts WeekOfMonthArray and WeekOfMonthArrayOutput values.
// You can construct a concrete instance of `WeekOfMonthArrayInput` via:
//
//	WeekOfMonthArray{ WeekOfMonthArgs{...} }
type WeekOfMonthArrayInput interface {
	pulumi.Input

	ToWeekOfMonthArrayOutput() WeekOfMonthArrayOutput
	ToWeekOfMonthArrayOutputWithContext(context.Context) WeekOfMonthArrayOutput
}

type WeekOfMonthArray []WeekOfMonth

func (WeekOfMonthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeekOfMonth)(nil)).Elem()
}

func (i WeekOfMonthArray) ToWeekOfMonthArrayOutput() WeekOfMonthArrayOutput {
	return i.ToWeekOfMonthArrayOutputWithContext(context.Background())
}

func (i WeekOfMonthArray) ToWeekOfMonthArrayOutputWithContext(ctx context.Context) WeekOfMonthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeekOfMonthArrayOutput)
}

type WeekOfMonthArrayOutput struct{ *pulumi.OutputState }

func (WeekOfMonthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeekOfMonth)(nil)).Elem()
}

func (o WeekOfMonthArrayOutput) ToWeekOfMonthArrayOutput() WeekOfMonthArrayOutput {
	return o
}

func (o WeekOfMonthArrayOutput) ToWeekOfMonthArrayOutputWithContext(ctx context.Context) WeekOfMonthArrayOutput {
	return o
}

func (o WeekOfMonthArrayOutput) Index(i pulumi.IntInput) WeekOfMonthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeekOfMonth {
		return vs[0].([]WeekOfMonth)[vs[1].(int)]
	}).(WeekOfMonthOutput)
}

// Type of workload for the backup management
type WorkloadType string

const (
	WorkloadTypeInvalid           = WorkloadType("Invalid")
	WorkloadTypeVM                = WorkloadType("VM")
	WorkloadTypeFileFolder        = WorkloadType("FileFolder")
	WorkloadTypeAzureSqlDb        = WorkloadType("AzureSqlDb")
	WorkloadTypeSQLDB             = WorkloadType("SQLDB")
	WorkloadTypeExchange          = WorkloadType("Exchange")
	WorkloadTypeSharepoint        = WorkloadType("Sharepoint")
	WorkloadTypeVMwareVM          = WorkloadType("VMwareVM")
	WorkloadTypeSystemState       = WorkloadType("SystemState")
	WorkloadTypeClient            = WorkloadType("Client")
	WorkloadTypeGenericDataSource = WorkloadType("GenericDataSource")
	WorkloadTypeSQLDataBase       = WorkloadType("SQLDataBase")
	WorkloadTypeAzureFileShare    = WorkloadType("AzureFileShare")
	WorkloadTypeSAPHanaDatabase   = WorkloadType("SAPHanaDatabase")
	WorkloadTypeSAPAseDatabase    = WorkloadType("SAPAseDatabase")
	WorkloadTypeSAPHanaDBInstance = WorkloadType("SAPHanaDBInstance")
)

func (WorkloadType) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadType)(nil)).Elem()
}

func (e WorkloadType) ToWorkloadTypeOutput() WorkloadTypeOutput {
	return pulumi.ToOutput(e).(WorkloadTypeOutput)
}

func (e WorkloadType) ToWorkloadTypeOutputWithContext(ctx context.Context) WorkloadTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(WorkloadTypeOutput)
}

func (e WorkloadType) ToWorkloadTypePtrOutput() WorkloadTypePtrOutput {
	return e.ToWorkloadTypePtrOutputWithContext(context.Background())
}

func (e WorkloadType) ToWorkloadTypePtrOutputWithContext(ctx context.Context) WorkloadTypePtrOutput {
	return WorkloadType(e).ToWorkloadTypeOutputWithContext(ctx).ToWorkloadTypePtrOutputWithContext(ctx)
}

func (e WorkloadType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkloadType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkloadType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type WorkloadTypeOutput struct{ *pulumi.OutputState }

func (WorkloadTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadType)(nil)).Elem()
}

func (o WorkloadTypeOutput) ToWorkloadTypeOutput() WorkloadTypeOutput {
	return o
}

func (o WorkloadTypeOutput) ToWorkloadTypeOutputWithContext(ctx context.Context) WorkloadTypeOutput {
	return o
}

func (o WorkloadTypeOutput) ToWorkloadTypePtrOutput() WorkloadTypePtrOutput {
	return o.ToWorkloadTypePtrOutputWithContext(context.Background())
}

func (o WorkloadTypeOutput) ToWorkloadTypePtrOutputWithContext(ctx context.Context) WorkloadTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadType) *WorkloadType {
		return &v
	}).(WorkloadTypePtrOutput)
}

func (o WorkloadTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o WorkloadTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WorkloadType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o WorkloadTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WorkloadTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e WorkloadType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type WorkloadTypePtrOutput struct{ *pulumi.OutputState }

func (WorkloadTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadType)(nil)).Elem()
}

func (o WorkloadTypePtrOutput) ToWorkloadTypePtrOutput() WorkloadTypePtrOutput {
	return o
}

func (o WorkloadTypePtrOutput) ToWorkloadTypePtrOutputWithContext(ctx context.Context) WorkloadTypePtrOutput {
	return o
}

func (o WorkloadTypePtrOutput) Elem() WorkloadTypeOutput {
	return o.ApplyT(func(v *WorkloadType) WorkloadType {
		if v != nil {
			return *v
		}
		var ret WorkloadType
		return ret
	}).(WorkloadTypeOutput)
}

func (o WorkloadTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o WorkloadTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *WorkloadType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// WorkloadTypeInput is an input type that accepts values of the WorkloadType enum
// A concrete instance of `WorkloadTypeInput` can be one of the following:
//
//	WorkloadTypeInvalid
//	WorkloadTypeVM
//	WorkloadTypeFileFolder
//	WorkloadTypeAzureSqlDb
//	WorkloadTypeSQLDB
//	WorkloadTypeExchange
//	WorkloadTypeSharepoint
//	WorkloadTypeVMwareVM
//	WorkloadTypeSystemState
//	WorkloadTypeClient
//	WorkloadTypeGenericDataSource
//	WorkloadTypeSQLDataBase
//	WorkloadTypeAzureFileShare
//	WorkloadTypeSAPHanaDatabase
//	WorkloadTypeSAPAseDatabase
//	WorkloadTypeSAPHanaDBInstance
type WorkloadTypeInput interface {
	pulumi.Input

	ToWorkloadTypeOutput() WorkloadTypeOutput
	ToWorkloadTypeOutputWithContext(context.Context) WorkloadTypeOutput
}

var workloadTypePtrType = reflect.TypeOf((**WorkloadType)(nil)).Elem()

type WorkloadTypePtrInput interface {
	pulumi.Input

	ToWorkloadTypePtrOutput() WorkloadTypePtrOutput
	ToWorkloadTypePtrOutputWithContext(context.Context) WorkloadTypePtrOutput
}

type workloadTypePtr string

func WorkloadTypePtr(v string) WorkloadTypePtrInput {
	return (*workloadTypePtr)(&v)
}

func (*workloadTypePtr) ElementType() reflect.Type {
	return workloadTypePtrType
}

func (in *workloadTypePtr) ToWorkloadTypePtrOutput() WorkloadTypePtrOutput {
	return pulumi.ToOutput(in).(WorkloadTypePtrOutput)
}

func (in *workloadTypePtr) ToWorkloadTypePtrOutputWithContext(ctx context.Context) WorkloadTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(WorkloadTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DayOfWeekOutput{})
	pulumi.RegisterOutputType(DayOfWeekPtrOutput{})
	pulumi.RegisterOutputType(DayOfWeekArrayOutput{})
	pulumi.RegisterOutputType(DiskSkuNameOutput{})
	pulumi.RegisterOutputType(DiskSkuNamePtrOutput{})
	pulumi.RegisterOutputType(IAASVMPolicyTypeOutput{})
	pulumi.RegisterOutputType(IAASVMPolicyTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedResourcesNetworkAccessTypeOutput{})
	pulumi.RegisterOutputType(ManagedResourcesNetworkAccessTypePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypeOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityTypePtrOutput{})
	pulumi.RegisterOutputType(MonthOfYearOutput{})
	pulumi.RegisterOutputType(MonthOfYearPtrOutput{})
	pulumi.RegisterOutputType(MonthOfYearArrayOutput{})
	pulumi.RegisterOutputType(PolicyTypeOutput{})
	pulumi.RegisterOutputType(PolicyTypePtrOutput{})
	pulumi.RegisterOutputType(RetentionDurationTypeOutput{})
	pulumi.RegisterOutputType(RetentionDurationTypePtrOutput{})
	pulumi.RegisterOutputType(RetentionScheduleFormatOutput{})
	pulumi.RegisterOutputType(RetentionScheduleFormatPtrOutput{})
	pulumi.RegisterOutputType(RoutingPreferenceOutput{})
	pulumi.RegisterOutputType(RoutingPreferencePtrOutput{})
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodOutput{})
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodPtrOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypeOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypeOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypeOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypeOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypePtrOutput{})
	pulumi.RegisterOutputType(SAPProductTypeOutput{})
	pulumi.RegisterOutputType(SAPProductTypePtrOutput{})
	pulumi.RegisterOutputType(ScheduleRunTypeOutput{})
	pulumi.RegisterOutputType(ScheduleRunTypePtrOutput{})
	pulumi.RegisterOutputType(SslCryptoProviderOutput{})
	pulumi.RegisterOutputType(SslCryptoProviderPtrOutput{})
	pulumi.RegisterOutputType(SslPreferenceOutput{})
	pulumi.RegisterOutputType(SslPreferencePtrOutput{})
	pulumi.RegisterOutputType(TieringModeOutput{})
	pulumi.RegisterOutputType(TieringModePtrOutput{})
	pulumi.RegisterOutputType(WeekOfMonthOutput{})
	pulumi.RegisterOutputType(WeekOfMonthPtrOutput{})
	pulumi.RegisterOutputType(WeekOfMonthArrayOutput{})
	pulumi.RegisterOutputType(WorkloadTypeOutput{})
	pulumi.RegisterOutputType(WorkloadTypePtrOutput{})
}
