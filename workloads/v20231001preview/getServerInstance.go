// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the Server Instance resource.
func LookupServerInstance(ctx *pulumi.Context, args *LookupServerInstanceArgs, opts ...pulumi.InvokeOption) (*LookupServerInstanceResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupServerInstanceResult
	err := ctx.Invoke("azure-native:workloads/v20231001preview:getServerInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupServerInstanceArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the discovery site resource for SAP Migration.
	SapDiscoverySiteName string `pulumi:"sapDiscoverySiteName"`
	// The name of SAP Instance resource for SAP Migration.
	SapInstanceName string `pulumi:"sapInstanceName"`
	// The name of the Server instance resource for SAP Migration.
	ServerInstanceName string `pulumi:"serverInstanceName"`
}

// Define the Server Instance resource.
type LookupServerInstanceResult struct {
	// Configuration data for this server instance.
	ConfigurationData ConfigurationDataResponse `pulumi:"configurationData"`
	// Defines the errors related to SAP Instance resource.
	Errors SAPMigrateErrorResponse `pulumi:"errors"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// This is the Instance SID for ASCS/AP/DB instance.  An SAP system with HANA database for example could have a different SID for database Instance than that of ASCS instance.
	InstanceSid string `pulumi:"instanceSid"`
	// The name of the resource
	Name string `pulumi:"name"`
	// This is Operating System on which the host server is running.
	OperatingSystem string `pulumi:"operatingSystem"`
	// Configuration data for this server instance.
	PerformanceData interface{} `pulumi:"performanceData"`
	// Defines the provisioning states.
	ProvisioningState string `pulumi:"provisioningState"`
	// Defines the type SAP instance on this server instance.
	SapInstanceType string `pulumi:"sapInstanceType"`
	// This is the SAP Application Component; e.g. SAP S/4HANA 2022, SAP ERP ENHANCE PACKAGE.
	SapProduct string `pulumi:"sapProduct"`
	// Provide the product version of the SAP product.
	SapProductVersion string `pulumi:"sapProductVersion"`
	// This is the Virtual Machine Name of the SAP system. Add all the virtual machines attached to an SAP system which you wish to migrate to Azure. Keeping this not equal to ID as for single tier all InstanceTypes would be on same server, leading to multiple resources with same servername.
	ServerName string `pulumi:"serverName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupServerInstanceOutput(ctx *pulumi.Context, args LookupServerInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupServerInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerInstanceResult, error) {
			args := v.(LookupServerInstanceArgs)
			r, err := LookupServerInstance(ctx, &args, opts...)
			var s LookupServerInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerInstanceResultOutput)
}

type LookupServerInstanceOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the discovery site resource for SAP Migration.
	SapDiscoverySiteName pulumi.StringInput `pulumi:"sapDiscoverySiteName"`
	// The name of SAP Instance resource for SAP Migration.
	SapInstanceName pulumi.StringInput `pulumi:"sapInstanceName"`
	// The name of the Server instance resource for SAP Migration.
	ServerInstanceName pulumi.StringInput `pulumi:"serverInstanceName"`
}

func (LookupServerInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerInstanceArgs)(nil)).Elem()
}

// Define the Server Instance resource.
type LookupServerInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupServerInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerInstanceResult)(nil)).Elem()
}

func (o LookupServerInstanceResultOutput) ToLookupServerInstanceResultOutput() LookupServerInstanceResultOutput {
	return o
}

func (o LookupServerInstanceResultOutput) ToLookupServerInstanceResultOutputWithContext(ctx context.Context) LookupServerInstanceResultOutput {
	return o
}

// Configuration data for this server instance.
func (o LookupServerInstanceResultOutput) ConfigurationData() ConfigurationDataResponseOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) ConfigurationDataResponse { return v.ConfigurationData }).(ConfigurationDataResponseOutput)
}

// Defines the errors related to SAP Instance resource.
func (o LookupServerInstanceResultOutput) Errors() SAPMigrateErrorResponseOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) SAPMigrateErrorResponse { return v.Errors }).(SAPMigrateErrorResponseOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupServerInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// This is the Instance SID for ASCS/AP/DB instance.  An SAP system with HANA database for example could have a different SID for database Instance than that of ASCS instance.
func (o LookupServerInstanceResultOutput) InstanceSid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.InstanceSid }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupServerInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// This is Operating System on which the host server is running.
func (o LookupServerInstanceResultOutput) OperatingSystem() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.OperatingSystem }).(pulumi.StringOutput)
}

// Configuration data for this server instance.
func (o LookupServerInstanceResultOutput) PerformanceData() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) interface{} { return v.PerformanceData }).(pulumi.AnyOutput)
}

// Defines the provisioning states.
func (o LookupServerInstanceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Defines the type SAP instance on this server instance.
func (o LookupServerInstanceResultOutput) SapInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.SapInstanceType }).(pulumi.StringOutput)
}

// This is the SAP Application Component; e.g. SAP S/4HANA 2022, SAP ERP ENHANCE PACKAGE.
func (o LookupServerInstanceResultOutput) SapProduct() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.SapProduct }).(pulumi.StringOutput)
}

// Provide the product version of the SAP product.
func (o LookupServerInstanceResultOutput) SapProductVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.SapProductVersion }).(pulumi.StringOutput)
}

// This is the Virtual Machine Name of the SAP system. Add all the virtual machines attached to an SAP system which you wish to migrate to Azure. Keeping this not equal to ID as for single tier all InstanceTypes would be on same server, leading to multiple resources with same servername.
func (o LookupServerInstanceResultOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.ServerName }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupServerInstanceResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupServerInstanceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerInstanceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerInstanceResultOutput{})
}
