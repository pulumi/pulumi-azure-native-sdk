// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines the disk sku name.
type DiskSkuName string

const (
	// Standard LRS Disk SKU.
	DiskSkuName_Standard_LRS = DiskSkuName("Standard_LRS")
	// Premium_LRS Disk SKU.
	DiskSkuName_Premium_LRS = DiskSkuName("Premium_LRS")
	// StandardSSD_LRS Disk SKU.
	DiskSkuName_StandardSSD_LRS = DiskSkuName("StandardSSD_LRS")
	// UltraSSD_LRS Disk SKU.
	DiskSkuName_UltraSSD_LRS = DiskSkuName("UltraSSD_LRS")
	// Premium_ZRS Disk SKU.
	DiskSkuName_Premium_ZRS = DiskSkuName("Premium_ZRS")
	// StandardSSD_ZRS Disk SKU.
	DiskSkuName_StandardSSD_ZRS = DiskSkuName("StandardSSD_ZRS")
	// PremiumV2_LRS Disk SKU.
	DiskSkuName_PremiumV2_LRS = DiskSkuName("PremiumV2_LRS")
)

func (DiskSkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuName)(nil)).Elem()
}

func (e DiskSkuName) ToDiskSkuNameOutput() DiskSkuNameOutput {
	return pulumi.ToOutput(e).(DiskSkuNameOutput)
}

func (e DiskSkuName) ToDiskSkuNameOutputWithContext(ctx context.Context) DiskSkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskSkuNameOutput)
}

func (e DiskSkuName) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return e.ToDiskSkuNamePtrOutputWithContext(context.Background())
}

func (e DiskSkuName) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return DiskSkuName(e).ToDiskSkuNameOutputWithContext(ctx).ToDiskSkuNamePtrOutputWithContext(ctx)
}

func (e DiskSkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskSkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskSkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskSkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskSkuNameOutput struct{ *pulumi.OutputState }

func (DiskSkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuName)(nil)).Elem()
}

func (o DiskSkuNameOutput) ToDiskSkuNameOutput() DiskSkuNameOutput {
	return o
}

func (o DiskSkuNameOutput) ToDiskSkuNameOutputWithContext(ctx context.Context) DiskSkuNameOutput {
	return o
}

func (o DiskSkuNameOutput) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return o.ToDiskSkuNamePtrOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskSkuName) *DiskSkuName {
		return &v
	}).(DiskSkuNamePtrOutput)
}

func (o DiskSkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskSkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskSkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskSkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskSkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskSkuNamePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuName)(nil)).Elem()
}

func (o DiskSkuNamePtrOutput) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return o
}

func (o DiskSkuNamePtrOutput) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return o
}

func (o DiskSkuNamePtrOutput) Elem() DiskSkuNameOutput {
	return o.ApplyT(func(v *DiskSkuName) DiskSkuName {
		if v != nil {
			return *v
		}
		var ret DiskSkuName
		return ret
	}).(DiskSkuNameOutput)
}

func (o DiskSkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskSkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskSkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskSkuNameInput is an input type that accepts values of the DiskSkuName enum
// A concrete instance of `DiskSkuNameInput` can be one of the following:
//
//	DiskSkuName_Standard_LRS
//	DiskSkuName_Premium_LRS
//	DiskSkuName_StandardSSD_LRS
//	DiskSkuName_UltraSSD_LRS
//	DiskSkuName_Premium_ZRS
//	DiskSkuName_StandardSSD_ZRS
//	DiskSkuName_PremiumV2_LRS
type DiskSkuNameInput interface {
	pulumi.Input

	ToDiskSkuNameOutput() DiskSkuNameOutput
	ToDiskSkuNameOutputWithContext(context.Context) DiskSkuNameOutput
}

var diskSkuNamePtrType = reflect.TypeOf((**DiskSkuName)(nil)).Elem()

type DiskSkuNamePtrInput interface {
	pulumi.Input

	ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput
	ToDiskSkuNamePtrOutputWithContext(context.Context) DiskSkuNamePtrOutput
}

type diskSkuNamePtr string

func DiskSkuNamePtr(v string) DiskSkuNamePtrInput {
	return (*diskSkuNamePtr)(&v)
}

func (*diskSkuNamePtr) ElementType() reflect.Type {
	return diskSkuNamePtrType
}

func (in *diskSkuNamePtr) ToDiskSkuNamePtrOutput() DiskSkuNamePtrOutput {
	return pulumi.ToOutput(in).(DiskSkuNamePtrOutput)
}

func (in *diskSkuNamePtr) ToDiskSkuNamePtrOutputWithContext(ctx context.Context) DiskSkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskSkuNamePtrOutput)
}

// The type of file share config, eg: Mount/CreateAndMount/Skip.
type FileShareConfigurationType string

const (
	// Skip creating the file share.
	FileShareConfigurationTypeSkip = FileShareConfigurationType("Skip")
	// Fileshare will be created and mounted by service.
	FileShareConfigurationTypeCreateAndMount = FileShareConfigurationType("CreateAndMount")
	// Existing fileshare provided will be mounted by service.
	FileShareConfigurationTypeMount = FileShareConfigurationType("Mount")
)

// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
type ManagedResourcesNetworkAccessType string

const (
	// Managed resources will be deployed with public network access enabled.
	ManagedResourcesNetworkAccessTypePublic = ManagedResourcesNetworkAccessType("Public")
	// Managed resources will be deployed with public network access disabled.
	ManagedResourcesNetworkAccessTypePrivate = ManagedResourcesNetworkAccessType("Private")
)

func (ManagedResourcesNetworkAccessType) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput {
	return pulumi.ToOutput(e).(ManagedResourcesNetworkAccessTypeOutput)
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ManagedResourcesNetworkAccessTypeOutput)
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return e.ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (e ManagedResourcesNetworkAccessType) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return ManagedResourcesNetworkAccessType(e).ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx).ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx)
}

func (e ManagedResourcesNetworkAccessType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedResourcesNetworkAccessType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ManagedResourcesNetworkAccessType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ManagedResourcesNetworkAccessType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ManagedResourcesNetworkAccessTypeOutput struct{ *pulumi.OutputState }

func (ManagedResourcesNetworkAccessTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypeOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypeOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return o.ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourcesNetworkAccessType) *ManagedResourcesNetworkAccessType {
		return &v
	}).(ManagedResourcesNetworkAccessTypePtrOutput)
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedResourcesNetworkAccessType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ManagedResourcesNetworkAccessType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ManagedResourcesNetworkAccessTypePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourcesNetworkAccessTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourcesNetworkAccessType)(nil)).Elem()
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return o
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) Elem() ManagedResourcesNetworkAccessTypeOutput {
	return o.ApplyT(func(v *ManagedResourcesNetworkAccessType) ManagedResourcesNetworkAccessType {
		if v != nil {
			return *v
		}
		var ret ManagedResourcesNetworkAccessType
		return ret
	}).(ManagedResourcesNetworkAccessTypeOutput)
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ManagedResourcesNetworkAccessTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ManagedResourcesNetworkAccessType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ManagedResourcesNetworkAccessTypeInput is an input type that accepts values of the ManagedResourcesNetworkAccessType enum
// A concrete instance of `ManagedResourcesNetworkAccessTypeInput` can be one of the following:
//
//	ManagedResourcesNetworkAccessTypePublic
//	ManagedResourcesNetworkAccessTypePrivate
type ManagedResourcesNetworkAccessTypeInput interface {
	pulumi.Input

	ToManagedResourcesNetworkAccessTypeOutput() ManagedResourcesNetworkAccessTypeOutput
	ToManagedResourcesNetworkAccessTypeOutputWithContext(context.Context) ManagedResourcesNetworkAccessTypeOutput
}

var managedResourcesNetworkAccessTypePtrType = reflect.TypeOf((**ManagedResourcesNetworkAccessType)(nil)).Elem()

type ManagedResourcesNetworkAccessTypePtrInput interface {
	pulumi.Input

	ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput
	ToManagedResourcesNetworkAccessTypePtrOutputWithContext(context.Context) ManagedResourcesNetworkAccessTypePtrOutput
}

type managedResourcesNetworkAccessTypePtr string

func ManagedResourcesNetworkAccessTypePtr(v string) ManagedResourcesNetworkAccessTypePtrInput {
	return (*managedResourcesNetworkAccessTypePtr)(&v)
}

func (*managedResourcesNetworkAccessTypePtr) ElementType() reflect.Type {
	return managedResourcesNetworkAccessTypePtrType
}

func (in *managedResourcesNetworkAccessTypePtr) ToManagedResourcesNetworkAccessTypePtrOutput() ManagedResourcesNetworkAccessTypePtrOutput {
	return pulumi.ToOutput(in).(ManagedResourcesNetworkAccessTypePtrOutput)
}

func (in *managedResourcesNetworkAccessTypePtr) ToManagedResourcesNetworkAccessTypePtrOutputWithContext(ctx context.Context) ManagedResourcesNetworkAccessTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ManagedResourcesNetworkAccessTypePtrOutput)
}

// The pattern type to be used for resource naming.
type NamingPatternType string

const (
	// Full resource names that will be created by service.
	NamingPatternTypeFullResourceName = NamingPatternType("FullResourceName")
)

// The OS Type
type OSType string

const (
	// Linux OS Type.
	OSTypeLinux = OSType("Linux")
	// Windows OS Type.
	OSTypeWindows = OSType("Windows")
)

// The configuration type. Eg: Deployment/Discovery
type SAPConfigurationType string

const (
	// SAP system will be deployed by service. No OS configurations will be done.
	SAPConfigurationTypeDeployment = SAPConfigurationType("Deployment")
	// Existing SAP system will be registered.
	SAPConfigurationTypeDiscovery = SAPConfigurationType("Discovery")
	// SAP system will be deployed by service. OS configurations will be done.
	SAPConfigurationTypeDeploymentWithOSConfig = SAPConfigurationType("DeploymentWithOSConfig")
)

// The DB scale method.
type SAPDatabaseScaleMethod string

const (
	// ScaleUp Hana Database deployment type
	SAPDatabaseScaleMethodScaleUp = SAPDatabaseScaleMethod("ScaleUp")
)

func (SAPDatabaseScaleMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutput(e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return e.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return SAPDatabaseScaleMethod(e).ToSAPDatabaseScaleMethodOutputWithContext(ctx).ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx)
}

func (e SAPDatabaseScaleMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseScaleMethodOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseScaleMethod) *SAPDatabaseScaleMethod {
		return &v
	}).(SAPDatabaseScaleMethodPtrOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseScaleMethodPtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) Elem() SAPDatabaseScaleMethodOutput {
	return o.ApplyT(func(v *SAPDatabaseScaleMethod) SAPDatabaseScaleMethod {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseScaleMethod
		return ret
	}).(SAPDatabaseScaleMethodOutput)
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseScaleMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseScaleMethodInput is an input type that accepts values of the SAPDatabaseScaleMethod enum
// A concrete instance of `SAPDatabaseScaleMethodInput` can be one of the following:
//
//	SAPDatabaseScaleMethodScaleUp
type SAPDatabaseScaleMethodInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput
	ToSAPDatabaseScaleMethodOutputWithContext(context.Context) SAPDatabaseScaleMethodOutput
}

var sapdatabaseScaleMethodPtrType = reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()

type SAPDatabaseScaleMethodPtrInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput
	ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Context) SAPDatabaseScaleMethodPtrOutput
}

type sapdatabaseScaleMethodPtr string

func SAPDatabaseScaleMethodPtr(v string) SAPDatabaseScaleMethodPtrInput {
	return (*sapdatabaseScaleMethodPtr)(&v)
}

func (*sapdatabaseScaleMethodPtr) ElementType() reflect.Type {
	return sapdatabaseScaleMethodPtrType
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseScaleMethodPtrOutput)
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseScaleMethodPtrOutput)
}

// The database type.
type SAPDatabaseType string

const (
	// HANA Database type of SAP system.
	SAPDatabaseTypeHANA = SAPDatabaseType("HANA")
	// DB2 database type of the SAP system.
	SAPDatabaseTypeDB2 = SAPDatabaseType("DB2")
)

func (SAPDatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return pulumi.ToOutput(e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return e.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return SAPDatabaseType(e).ToSAPDatabaseTypeOutputWithContext(ctx).ToSAPDatabaseTypePtrOutputWithContext(ctx)
}

func (e SAPDatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseTypeOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseType) *SAPDatabaseType {
		return &v
	}).(SAPDatabaseTypePtrOutput)
}

func (o SAPDatabaseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) Elem() SAPDatabaseTypeOutput {
	return o.ApplyT(func(v *SAPDatabaseType) SAPDatabaseType {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseType
		return ret
	}).(SAPDatabaseTypeOutput)
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseTypeInput is an input type that accepts values of the SAPDatabaseType enum
// A concrete instance of `SAPDatabaseTypeInput` can be one of the following:
//
//	SAPDatabaseTypeHANA
//	SAPDatabaseTypeDB2
type SAPDatabaseTypeInput interface {
	pulumi.Input

	ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput
	ToSAPDatabaseTypeOutputWithContext(context.Context) SAPDatabaseTypeOutput
}

var sapdatabaseTypePtrType = reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()

type SAPDatabaseTypePtrInput interface {
	pulumi.Input

	ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput
	ToSAPDatabaseTypePtrOutputWithContext(context.Context) SAPDatabaseTypePtrOutput
}

type sapdatabaseTypePtr string

func SAPDatabaseTypePtr(v string) SAPDatabaseTypePtrInput {
	return (*sapdatabaseTypePtr)(&v)
}

func (*sapdatabaseTypePtr) ElementType() reflect.Type {
	return sapdatabaseTypePtrType
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseTypePtrOutput)
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseTypePtrOutput)
}

// The deployment type. Eg: SingleServer/ThreeTier
type SAPDeploymentType string

const (
	// SAP Single server deployment type.
	SAPDeploymentTypeSingleServer = SAPDeploymentType("SingleServer")
	// SAP Distributed deployment type.
	SAPDeploymentTypeThreeTier = SAPDeploymentType("ThreeTier")
)

func (SAPDeploymentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return pulumi.ToOutput(e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return e.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return SAPDeploymentType(e).ToSAPDeploymentTypeOutputWithContext(ctx).ToSAPDeploymentTypePtrOutputWithContext(ctx)
}

func (e SAPDeploymentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDeploymentTypeOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDeploymentType) *SAPDeploymentType {
		return &v
	}).(SAPDeploymentTypePtrOutput)
}

func (o SAPDeploymentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDeploymentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) Elem() SAPDeploymentTypeOutput {
	return o.ApplyT(func(v *SAPDeploymentType) SAPDeploymentType {
		if v != nil {
			return *v
		}
		var ret SAPDeploymentType
		return ret
	}).(SAPDeploymentTypeOutput)
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDeploymentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDeploymentTypeInput is an input type that accepts values of the SAPDeploymentType enum
// A concrete instance of `SAPDeploymentTypeInput` can be one of the following:
//
//	SAPDeploymentTypeSingleServer
//	SAPDeploymentTypeThreeTier
type SAPDeploymentTypeInput interface {
	pulumi.Input

	ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput
	ToSAPDeploymentTypeOutputWithContext(context.Context) SAPDeploymentTypeOutput
}

var sapdeploymentTypePtrType = reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()

type SAPDeploymentTypePtrInput interface {
	pulumi.Input

	ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput
	ToSAPDeploymentTypePtrOutputWithContext(context.Context) SAPDeploymentTypePtrOutput
}

type sapdeploymentTypePtr string

func SAPDeploymentTypePtr(v string) SAPDeploymentTypePtrInput {
	return (*sapdeploymentTypePtr)(&v)
}

func (*sapdeploymentTypePtr) ElementType() reflect.Type {
	return sapdeploymentTypePtrType
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDeploymentTypePtrOutput)
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDeploymentTypePtrOutput)
}

// Defines the environment type - Production/Non Production.
type SAPEnvironmentType string

const (
	// Non Production SAP system.
	SAPEnvironmentTypeNonProd = SAPEnvironmentType("NonProd")
	// Production SAP system.
	SAPEnvironmentTypeProd = SAPEnvironmentType("Prod")
)

func (SAPEnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return pulumi.ToOutput(e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return e.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return SAPEnvironmentType(e).ToSAPEnvironmentTypeOutputWithContext(ctx).ToSAPEnvironmentTypePtrOutputWithContext(ctx)
}

func (e SAPEnvironmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPEnvironmentTypeOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPEnvironmentType) *SAPEnvironmentType {
		return &v
	}).(SAPEnvironmentTypePtrOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPEnvironmentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) Elem() SAPEnvironmentTypeOutput {
	return o.ApplyT(func(v *SAPEnvironmentType) SAPEnvironmentType {
		if v != nil {
			return *v
		}
		var ret SAPEnvironmentType
		return ret
	}).(SAPEnvironmentTypeOutput)
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPEnvironmentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPEnvironmentTypeInput is an input type that accepts values of the SAPEnvironmentType enum
// A concrete instance of `SAPEnvironmentTypeInput` can be one of the following:
//
//	SAPEnvironmentTypeNonProd
//	SAPEnvironmentTypeProd
type SAPEnvironmentTypeInput interface {
	pulumi.Input

	ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput
	ToSAPEnvironmentTypeOutputWithContext(context.Context) SAPEnvironmentTypeOutput
}

var sapenvironmentTypePtrType = reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()

type SAPEnvironmentTypePtrInput interface {
	pulumi.Input

	ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput
	ToSAPEnvironmentTypePtrOutputWithContext(context.Context) SAPEnvironmentTypePtrOutput
}

type sapenvironmentTypePtr string

func SAPEnvironmentTypePtr(v string) SAPEnvironmentTypePtrInput {
	return (*sapenvironmentTypePtr)(&v)
}

func (*sapenvironmentTypePtr) ElementType() reflect.Type {
	return sapenvironmentTypePtrType
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPEnvironmentTypePtrOutput)
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPEnvironmentTypePtrOutput)
}

// The high availability type.
type SAPHighAvailabilityType string

const (
	// HA deployment with availability sets.
	SAPHighAvailabilityTypeAvailabilitySet = SAPHighAvailabilityType("AvailabilitySet")
	// HA deployment with availability zones.
	SAPHighAvailabilityTypeAvailabilityZone = SAPHighAvailabilityType("AvailabilityZone")
)

func (SAPHighAvailabilityType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutput(e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return e.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return SAPHighAvailabilityType(e).ToSAPHighAvailabilityTypeOutputWithContext(ctx).ToSAPHighAvailabilityTypePtrOutputWithContext(ctx)
}

func (e SAPHighAvailabilityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPHighAvailabilityTypeOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPHighAvailabilityType) *SAPHighAvailabilityType {
		return &v
	}).(SAPHighAvailabilityTypePtrOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPHighAvailabilityTypePtrOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) Elem() SAPHighAvailabilityTypeOutput {
	return o.ApplyT(func(v *SAPHighAvailabilityType) SAPHighAvailabilityType {
		if v != nil {
			return *v
		}
		var ret SAPHighAvailabilityType
		return ret
	}).(SAPHighAvailabilityTypeOutput)
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPHighAvailabilityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPHighAvailabilityTypeInput is an input type that accepts values of the SAPHighAvailabilityType enum
// A concrete instance of `SAPHighAvailabilityTypeInput` can be one of the following:
//
//	SAPHighAvailabilityTypeAvailabilitySet
//	SAPHighAvailabilityTypeAvailabilityZone
type SAPHighAvailabilityTypeInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput
	ToSAPHighAvailabilityTypeOutputWithContext(context.Context) SAPHighAvailabilityTypeOutput
}

var saphighAvailabilityTypePtrType = reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()

type SAPHighAvailabilityTypePtrInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput
	ToSAPHighAvailabilityTypePtrOutputWithContext(context.Context) SAPHighAvailabilityTypePtrOutput
}

type saphighAvailabilityTypePtr string

func SAPHighAvailabilityTypePtr(v string) SAPHighAvailabilityTypePtrInput {
	return (*saphighAvailabilityTypePtr)(&v)
}

func (*saphighAvailabilityTypePtr) ElementType() reflect.Type {
	return saphighAvailabilityTypePtrType
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutput(in).(SAPHighAvailabilityTypePtrOutput)
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPHighAvailabilityTypePtrOutput)
}

// Defines the SAP Product type.
type SAPProductType string

const (
	// SAP Product ECC.
	SAPProductTypeECC = SAPProductType("ECC")
	// SAP Product S4HANA.
	SAPProductTypeS4HANA = SAPProductType("S4HANA")
	// SAP Products other than the ones listed.
	SAPProductTypeOther = SAPProductType("Other")
)

func (SAPProductType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (e SAPProductType) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return pulumi.ToOutput(e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return e.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return SAPProductType(e).ToSAPProductTypeOutputWithContext(ctx).ToSAPProductTypePtrOutputWithContext(ctx)
}

func (e SAPProductType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPProductTypeOutput struct{ *pulumi.OutputState }

func (SAPProductTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPProductType) *SAPProductType {
		return &v
	}).(SAPProductTypePtrOutput)
}

func (o SAPProductTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPProductTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPProductTypePtrOutput struct{ *pulumi.OutputState }

func (SAPProductTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPProductType)(nil)).Elem()
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) Elem() SAPProductTypeOutput {
	return o.ApplyT(func(v *SAPProductType) SAPProductType {
		if v != nil {
			return *v
		}
		var ret SAPProductType
		return ret
	}).(SAPProductTypeOutput)
}

func (o SAPProductTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPProductType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPProductTypeInput is an input type that accepts values of the SAPProductType enum
// A concrete instance of `SAPProductTypeInput` can be one of the following:
//
//	SAPProductTypeECC
//	SAPProductTypeS4HANA
//	SAPProductTypeOther
type SAPProductTypeInput interface {
	pulumi.Input

	ToSAPProductTypeOutput() SAPProductTypeOutput
	ToSAPProductTypeOutputWithContext(context.Context) SAPProductTypeOutput
}

var sapproductTypePtrType = reflect.TypeOf((**SAPProductType)(nil)).Elem()

type SAPProductTypePtrInput interface {
	pulumi.Input

	ToSAPProductTypePtrOutput() SAPProductTypePtrOutput
	ToSAPProductTypePtrOutputWithContext(context.Context) SAPProductTypePtrOutput
}

type sapproductTypePtr string

func SAPProductTypePtr(v string) SAPProductTypePtrInput {
	return (*sapproductTypePtr)(&v)
}

func (*sapproductTypePtr) ElementType() reflect.Type {
	return sapproductTypePtrType
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return pulumi.ToOutput(in).(SAPProductTypePtrOutput)
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPProductTypePtrOutput)
}

// The SAP software installation type.
type SAPSoftwareInstallationType string

const (
	// SAP Install managed by service.
	SAPSoftwareInstallationTypeServiceInitiated = SAPSoftwareInstallationType("ServiceInitiated")
	// SAP Install without OS Config.
	SAPSoftwareInstallationTypeSAPInstallWithoutOSConfig = SAPSoftwareInstallationType("SAPInstallWithoutOSConfig")
	// External software installation type.
	SAPSoftwareInstallationTypeExternal = SAPSoftwareInstallationType("External")
)

// The type of managed identity assigned to this resource.
type SAPVirtualInstanceIdentityType string

const (
	// No managed identity.
	SAPVirtualInstanceIdentityTypeNone = SAPVirtualInstanceIdentityType("None")
	// User assigned managed identity.
	SAPVirtualInstanceIdentityTypeUserAssigned = SAPVirtualInstanceIdentityType("UserAssigned")
)

func (SAPVirtualInstanceIdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPVirtualInstanceIdentityType)(nil)).Elem()
}

func (e SAPVirtualInstanceIdentityType) ToSAPVirtualInstanceIdentityTypeOutput() SAPVirtualInstanceIdentityTypeOutput {
	return pulumi.ToOutput(e).(SAPVirtualInstanceIdentityTypeOutput)
}

func (e SAPVirtualInstanceIdentityType) ToSAPVirtualInstanceIdentityTypeOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPVirtualInstanceIdentityTypeOutput)
}

func (e SAPVirtualInstanceIdentityType) ToSAPVirtualInstanceIdentityTypePtrOutput() SAPVirtualInstanceIdentityTypePtrOutput {
	return e.ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(context.Background())
}

func (e SAPVirtualInstanceIdentityType) ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypePtrOutput {
	return SAPVirtualInstanceIdentityType(e).ToSAPVirtualInstanceIdentityTypeOutputWithContext(ctx).ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(ctx)
}

func (e SAPVirtualInstanceIdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPVirtualInstanceIdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPVirtualInstanceIdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPVirtualInstanceIdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPVirtualInstanceIdentityTypeOutput struct{ *pulumi.OutputState }

func (SAPVirtualInstanceIdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPVirtualInstanceIdentityType)(nil)).Elem()
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToSAPVirtualInstanceIdentityTypeOutput() SAPVirtualInstanceIdentityTypeOutput {
	return o
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToSAPVirtualInstanceIdentityTypeOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypeOutput {
	return o
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToSAPVirtualInstanceIdentityTypePtrOutput() SAPVirtualInstanceIdentityTypePtrOutput {
	return o.ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(context.Background())
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPVirtualInstanceIdentityType) *SAPVirtualInstanceIdentityType {
		return &v
	}).(SAPVirtualInstanceIdentityTypePtrOutput)
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPVirtualInstanceIdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPVirtualInstanceIdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPVirtualInstanceIdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPVirtualInstanceIdentityTypePtrOutput struct{ *pulumi.OutputState }

func (SAPVirtualInstanceIdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPVirtualInstanceIdentityType)(nil)).Elem()
}

func (o SAPVirtualInstanceIdentityTypePtrOutput) ToSAPVirtualInstanceIdentityTypePtrOutput() SAPVirtualInstanceIdentityTypePtrOutput {
	return o
}

func (o SAPVirtualInstanceIdentityTypePtrOutput) ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypePtrOutput {
	return o
}

func (o SAPVirtualInstanceIdentityTypePtrOutput) Elem() SAPVirtualInstanceIdentityTypeOutput {
	return o.ApplyT(func(v *SAPVirtualInstanceIdentityType) SAPVirtualInstanceIdentityType {
		if v != nil {
			return *v
		}
		var ret SAPVirtualInstanceIdentityType
		return ret
	}).(SAPVirtualInstanceIdentityTypeOutput)
}

func (o SAPVirtualInstanceIdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPVirtualInstanceIdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPVirtualInstanceIdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPVirtualInstanceIdentityTypeInput is an input type that accepts values of the SAPVirtualInstanceIdentityType enum
// A concrete instance of `SAPVirtualInstanceIdentityTypeInput` can be one of the following:
//
//	SAPVirtualInstanceIdentityTypeNone
//	SAPVirtualInstanceIdentityTypeUserAssigned
type SAPVirtualInstanceIdentityTypeInput interface {
	pulumi.Input

	ToSAPVirtualInstanceIdentityTypeOutput() SAPVirtualInstanceIdentityTypeOutput
	ToSAPVirtualInstanceIdentityTypeOutputWithContext(context.Context) SAPVirtualInstanceIdentityTypeOutput
}

var sapvirtualInstanceIdentityTypePtrType = reflect.TypeOf((**SAPVirtualInstanceIdentityType)(nil)).Elem()

type SAPVirtualInstanceIdentityTypePtrInput interface {
	pulumi.Input

	ToSAPVirtualInstanceIdentityTypePtrOutput() SAPVirtualInstanceIdentityTypePtrOutput
	ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(context.Context) SAPVirtualInstanceIdentityTypePtrOutput
}

type sapvirtualInstanceIdentityTypePtr string

func SAPVirtualInstanceIdentityTypePtr(v string) SAPVirtualInstanceIdentityTypePtrInput {
	return (*sapvirtualInstanceIdentityTypePtr)(&v)
}

func (*sapvirtualInstanceIdentityTypePtr) ElementType() reflect.Type {
	return sapvirtualInstanceIdentityTypePtrType
}

func (in *sapvirtualInstanceIdentityTypePtr) ToSAPVirtualInstanceIdentityTypePtrOutput() SAPVirtualInstanceIdentityTypePtrOutput {
	return pulumi.ToOutput(in).(SAPVirtualInstanceIdentityTypePtrOutput)
}

func (in *sapvirtualInstanceIdentityTypePtr) ToSAPVirtualInstanceIdentityTypePtrOutputWithContext(ctx context.Context) SAPVirtualInstanceIdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPVirtualInstanceIdentityTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DiskSkuNameOutput{})
	pulumi.RegisterOutputType(DiskSkuNamePtrOutput{})
	pulumi.RegisterOutputType(ManagedResourcesNetworkAccessTypeOutput{})
	pulumi.RegisterOutputType(ManagedResourcesNetworkAccessTypePtrOutput{})
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodOutput{})
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodPtrOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypeOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypeOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypeOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypeOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypePtrOutput{})
	pulumi.RegisterOutputType(SAPProductTypeOutput{})
	pulumi.RegisterOutputType(SAPProductTypePtrOutput{})
	pulumi.RegisterOutputType(SAPVirtualInstanceIdentityTypeOutput{})
	pulumi.RegisterOutputType(SAPVirtualInstanceIdentityTypePtrOutput{})
}
