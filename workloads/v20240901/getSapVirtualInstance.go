// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Virtual Instance for SAP solutions resource
func LookupSapVirtualInstance(ctx *pulumi.Context, args *LookupSapVirtualInstanceArgs, opts ...pulumi.InvokeOption) (*LookupSapVirtualInstanceResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSapVirtualInstanceResult
	err := ctx.Invoke("azure-native:workloads/v20240901:getSapVirtualInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSapVirtualInstanceArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName string `pulumi:"sapVirtualInstanceName"`
}

// Define the Virtual Instance for SAP solutions resource.
type LookupSapVirtualInstanceResult struct {
	// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
	Configuration interface{} `pulumi:"configuration"`
	// Defines the environment type - Production/Non Production.
	Environment string `pulumi:"environment"`
	// Indicates any errors on the Virtual Instance for SAP solutions resource.
	Errors SAPVirtualInstanceErrorResponse `pulumi:"errors"`
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The managed service identities assigned to this resource.
	Identity *SAPVirtualInstanceIdentityResponse `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Managed resource group configuration
	ManagedResourceGroupConfiguration *ManagedRGConfigurationResponse `pulumi:"managedResourceGroupConfiguration"`
	// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
	ManagedResourcesNetworkAccessType *string `pulumi:"managedResourcesNetworkAccessType"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Defines the provisioning states.
	ProvisioningState string `pulumi:"provisioningState"`
	// Defines the SAP Product type.
	SapProduct string `pulumi:"sapProduct"`
	// Defines the Virtual Instance for SAP state.
	State string `pulumi:"state"`
	// Defines the SAP Instance status.
	Status string `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupSapVirtualInstanceOutput(ctx *pulumi.Context, args LookupSapVirtualInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupSapVirtualInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSapVirtualInstanceResultOutput, error) {
			args := v.(LookupSapVirtualInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:workloads/v20240901:getSapVirtualInstance", args, LookupSapVirtualInstanceResultOutput{}, options).(LookupSapVirtualInstanceResultOutput), nil
		}).(LookupSapVirtualInstanceResultOutput)
}

type LookupSapVirtualInstanceOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName pulumi.StringInput `pulumi:"sapVirtualInstanceName"`
}

func (LookupSapVirtualInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSapVirtualInstanceArgs)(nil)).Elem()
}

// Define the Virtual Instance for SAP solutions resource.
type LookupSapVirtualInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupSapVirtualInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSapVirtualInstanceResult)(nil)).Elem()
}

func (o LookupSapVirtualInstanceResultOutput) ToLookupSapVirtualInstanceResultOutput() LookupSapVirtualInstanceResultOutput {
	return o
}

func (o LookupSapVirtualInstanceResultOutput) ToLookupSapVirtualInstanceResultOutputWithContext(ctx context.Context) LookupSapVirtualInstanceResultOutput {
	return o
}

// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
func (o LookupSapVirtualInstanceResultOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) interface{} { return v.Configuration }).(pulumi.AnyOutput)
}

// Defines the environment type - Production/Non Production.
func (o LookupSapVirtualInstanceResultOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Environment }).(pulumi.StringOutput)
}

// Indicates any errors on the Virtual Instance for SAP solutions resource.
func (o LookupSapVirtualInstanceResultOutput) Errors() SAPVirtualInstanceErrorResponseOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) SAPVirtualInstanceErrorResponse { return v.Errors }).(SAPVirtualInstanceErrorResponseOutput)
}

// Defines the health of SAP Instances.
func (o LookupSapVirtualInstanceResultOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Health }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupSapVirtualInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The managed service identities assigned to this resource.
func (o LookupSapVirtualInstanceResultOutput) Identity() SAPVirtualInstanceIdentityResponsePtrOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) *SAPVirtualInstanceIdentityResponse { return v.Identity }).(SAPVirtualInstanceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o LookupSapVirtualInstanceResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Location }).(pulumi.StringOutput)
}

// Managed resource group configuration
func (o LookupSapVirtualInstanceResultOutput) ManagedResourceGroupConfiguration() ManagedRGConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) *ManagedRGConfigurationResponse {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedRGConfigurationResponsePtrOutput)
}

// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
func (o LookupSapVirtualInstanceResultOutput) ManagedResourcesNetworkAccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) *string { return v.ManagedResourcesNetworkAccessType }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o LookupSapVirtualInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Defines the provisioning states.
func (o LookupSapVirtualInstanceResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Defines the SAP Product type.
func (o LookupSapVirtualInstanceResultOutput) SapProduct() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.SapProduct }).(pulumi.StringOutput)
}

// Defines the Virtual Instance for SAP state.
func (o LookupSapVirtualInstanceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.State }).(pulumi.StringOutput)
}

// Defines the SAP Instance status.
func (o LookupSapVirtualInstanceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupSapVirtualInstanceResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupSapVirtualInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSapVirtualInstanceResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSapVirtualInstanceResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSapVirtualInstanceResultOutput{})
}
