// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240901

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Define the Database resource.
type SapDatabaseInstance struct {
	pulumi.CustomResourceState

	// Database SID name.
	DatabaseSid pulumi.StringOutput `pulumi:"databaseSid"`
	// Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL Server.
	DatabaseType pulumi.StringOutput `pulumi:"databaseType"`
	// Defines the errors related to Database resource.
	Errors SAPVirtualInstanceErrorResponseOutput `pulumi:"errors"`
	// Database IP Address.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The Load Balancer details such as LoadBalancer ID attached to Database Virtual Machines
	LoadBalancerDetails LoadBalancerDetailsResponseOutput `pulumi:"loadBalancerDetails"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the provisioning states.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Defines the SAP Instance status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Database subnet.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The list of virtual machines corresponding to the Database resource.
	VmDetails DatabaseVmDetailsResponseArrayOutput `pulumi:"vmDetails"`
}

// NewSapDatabaseInstance registers a new resource with the given unique name, arguments, and options.
func NewSapDatabaseInstance(ctx *pulumi.Context,
	name string, args *SapDatabaseInstanceArgs, opts ...pulumi.ResourceOption) (*SapDatabaseInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SapVirtualInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'SapVirtualInstanceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads/v20211201preview:SapDatabaseInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20221101preview:SapDatabaseInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20230401:SapDatabaseInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20231001preview:SapDatabaseInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads:SapDatabaseInstance"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SapDatabaseInstance
	err := ctx.RegisterResource("azure-native:workloads/v20240901:SapDatabaseInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSapDatabaseInstance gets an existing SapDatabaseInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSapDatabaseInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SapDatabaseInstanceState, opts ...pulumi.ResourceOption) (*SapDatabaseInstance, error) {
	var resource SapDatabaseInstance
	err := ctx.ReadResource("azure-native:workloads/v20240901:SapDatabaseInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SapDatabaseInstance resources.
type sapDatabaseInstanceState struct {
}

type SapDatabaseInstanceState struct {
}

func (SapDatabaseInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sapDatabaseInstanceState)(nil)).Elem()
}

type sapDatabaseInstanceArgs struct {
	// Database resource name string modeled as parameter for auto generation to work correctly.
	DatabaseInstanceName *string `pulumi:"databaseInstanceName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName string `pulumi:"sapVirtualInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SapDatabaseInstance resource.
type SapDatabaseInstanceArgs struct {
	// Database resource name string modeled as parameter for auto generation to work correctly.
	DatabaseInstanceName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SapDatabaseInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sapDatabaseInstanceArgs)(nil)).Elem()
}

type SapDatabaseInstanceInput interface {
	pulumi.Input

	ToSapDatabaseInstanceOutput() SapDatabaseInstanceOutput
	ToSapDatabaseInstanceOutputWithContext(ctx context.Context) SapDatabaseInstanceOutput
}

func (*SapDatabaseInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SapDatabaseInstance)(nil)).Elem()
}

func (i *SapDatabaseInstance) ToSapDatabaseInstanceOutput() SapDatabaseInstanceOutput {
	return i.ToSapDatabaseInstanceOutputWithContext(context.Background())
}

func (i *SapDatabaseInstance) ToSapDatabaseInstanceOutputWithContext(ctx context.Context) SapDatabaseInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapDatabaseInstanceOutput)
}

type SapDatabaseInstanceOutput struct{ *pulumi.OutputState }

func (SapDatabaseInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapDatabaseInstance)(nil)).Elem()
}

func (o SapDatabaseInstanceOutput) ToSapDatabaseInstanceOutput() SapDatabaseInstanceOutput {
	return o
}

func (o SapDatabaseInstanceOutput) ToSapDatabaseInstanceOutputWithContext(ctx context.Context) SapDatabaseInstanceOutput {
	return o
}

// Database SID name.
func (o SapDatabaseInstanceOutput) DatabaseSid() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.DatabaseSid }).(pulumi.StringOutput)
}

// Database type, that is if the DB is HANA, DB2, Oracle, SAP ASE, Max DB or MS SQL Server.
func (o SapDatabaseInstanceOutput) DatabaseType() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.DatabaseType }).(pulumi.StringOutput)
}

// Defines the errors related to Database resource.
func (o SapDatabaseInstanceOutput) Errors() SAPVirtualInstanceErrorResponseOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) SAPVirtualInstanceErrorResponseOutput { return v.Errors }).(SAPVirtualInstanceErrorResponseOutput)
}

// Database IP Address.
func (o SapDatabaseInstanceOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The Load Balancer details such as LoadBalancer ID attached to Database Virtual Machines
func (o SapDatabaseInstanceOutput) LoadBalancerDetails() LoadBalancerDetailsResponseOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) LoadBalancerDetailsResponseOutput { return v.LoadBalancerDetails }).(LoadBalancerDetailsResponseOutput)
}

// The geo-location where the resource lives
func (o SapDatabaseInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SapDatabaseInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the provisioning states.
func (o SapDatabaseInstanceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Defines the SAP Instance status.
func (o SapDatabaseInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Database subnet.
func (o SapDatabaseInstanceOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SapDatabaseInstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SapDatabaseInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SapDatabaseInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The list of virtual machines corresponding to the Database resource.
func (o SapDatabaseInstanceOutput) VmDetails() DatabaseVmDetailsResponseArrayOutput {
	return o.ApplyT(func(v *SapDatabaseInstance) DatabaseVmDetailsResponseArrayOutput { return v.VmDetails }).(DatabaseVmDetailsResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(SapDatabaseInstanceOutput{})
}
