// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The DB scale method.
type SAPDatabaseScaleMethod string

const (
	SAPDatabaseScaleMethodScaleUp = SAPDatabaseScaleMethod("ScaleUp")
)

func (SAPDatabaseScaleMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutput(e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseScaleMethodOutput)
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return e.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return SAPDatabaseScaleMethod(e).ToSAPDatabaseScaleMethodOutputWithContext(ctx).ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx)
}

func (e SAPDatabaseScaleMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseScaleMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseScaleMethodOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodOutput {
	return o
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o.ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseScaleMethod) *SAPDatabaseScaleMethod {
		return &v
	}).(SAPDatabaseScaleMethodPtrOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseScaleMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseScaleMethodPtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseScaleMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return o
}

func (o SAPDatabaseScaleMethodPtrOutput) Elem() SAPDatabaseScaleMethodOutput {
	return o.ApplyT(func(v *SAPDatabaseScaleMethod) SAPDatabaseScaleMethod {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseScaleMethod
		return ret
	}).(SAPDatabaseScaleMethodOutput)
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseScaleMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseScaleMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseScaleMethodInput is an input type that accepts values of the SAPDatabaseScaleMethod enum
// A concrete instance of `SAPDatabaseScaleMethodInput` can be one of the following:
//
//	SAPDatabaseScaleMethodScaleUp
type SAPDatabaseScaleMethodInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodOutput() SAPDatabaseScaleMethodOutput
	ToSAPDatabaseScaleMethodOutputWithContext(context.Context) SAPDatabaseScaleMethodOutput
}

var sapdatabaseScaleMethodPtrType = reflect.TypeOf((**SAPDatabaseScaleMethod)(nil)).Elem()

type SAPDatabaseScaleMethodPtrInput interface {
	pulumi.Input

	ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput
	ToSAPDatabaseScaleMethodPtrOutputWithContext(context.Context) SAPDatabaseScaleMethodPtrOutput
}

type sapdatabaseScaleMethodPtr string

func SAPDatabaseScaleMethodPtr(v string) SAPDatabaseScaleMethodPtrInput {
	return (*sapdatabaseScaleMethodPtr)(&v)
}

func (*sapdatabaseScaleMethodPtr) ElementType() reflect.Type {
	return sapdatabaseScaleMethodPtrType
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutput() SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseScaleMethodPtrOutput)
}

func (in *sapdatabaseScaleMethodPtr) ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx context.Context) SAPDatabaseScaleMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseScaleMethodPtrOutput)
}

func (in *sapdatabaseScaleMethodPtr) ToOutput(ctx context.Context) pulumix.Output[*SAPDatabaseScaleMethod] {
	return pulumix.Output[*SAPDatabaseScaleMethod]{
		OutputState: in.ToSAPDatabaseScaleMethodPtrOutputWithContext(ctx).OutputState,
	}
}

// The database type. Eg: HANA, DB2, etc
type SAPDatabaseType string

const (
	SAPDatabaseTypeHANA = SAPDatabaseType("HANA")
	SAPDatabaseTypeDB2  = SAPDatabaseType("DB2")
)

func (SAPDatabaseType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return pulumi.ToOutput(e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDatabaseTypeOutput)
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return e.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return SAPDatabaseType(e).ToSAPDatabaseTypeOutputWithContext(ctx).ToSAPDatabaseTypePtrOutputWithContext(ctx)
}

func (e SAPDatabaseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDatabaseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDatabaseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDatabaseTypeOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypeOutputWithContext(ctx context.Context) SAPDatabaseTypeOutput {
	return o
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o.ToSAPDatabaseTypePtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDatabaseType) *SAPDatabaseType {
		return &v
	}).(SAPDatabaseTypePtrOutput)
}

func (o SAPDatabaseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDatabaseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDatabaseTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDatabaseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return o
}

func (o SAPDatabaseTypePtrOutput) Elem() SAPDatabaseTypeOutput {
	return o.ApplyT(func(v *SAPDatabaseType) SAPDatabaseType {
		if v != nil {
			return *v
		}
		var ret SAPDatabaseType
		return ret
	}).(SAPDatabaseTypeOutput)
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDatabaseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDatabaseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDatabaseTypeInput is an input type that accepts values of the SAPDatabaseType enum
// A concrete instance of `SAPDatabaseTypeInput` can be one of the following:
//
//	SAPDatabaseTypeHANA
//	SAPDatabaseTypeDB2
type SAPDatabaseTypeInput interface {
	pulumi.Input

	ToSAPDatabaseTypeOutput() SAPDatabaseTypeOutput
	ToSAPDatabaseTypeOutputWithContext(context.Context) SAPDatabaseTypeOutput
}

var sapdatabaseTypePtrType = reflect.TypeOf((**SAPDatabaseType)(nil)).Elem()

type SAPDatabaseTypePtrInput interface {
	pulumi.Input

	ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput
	ToSAPDatabaseTypePtrOutputWithContext(context.Context) SAPDatabaseTypePtrOutput
}

type sapdatabaseTypePtr string

func SAPDatabaseTypePtr(v string) SAPDatabaseTypePtrInput {
	return (*sapdatabaseTypePtr)(&v)
}

func (*sapdatabaseTypePtr) ElementType() reflect.Type {
	return sapdatabaseTypePtrType
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutput() SAPDatabaseTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDatabaseTypePtrOutput)
}

func (in *sapdatabaseTypePtr) ToSAPDatabaseTypePtrOutputWithContext(ctx context.Context) SAPDatabaseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDatabaseTypePtrOutput)
}

func (in *sapdatabaseTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SAPDatabaseType] {
	return pulumix.Output[*SAPDatabaseType]{
		OutputState: in.ToSAPDatabaseTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The deployment type. Eg: SingleServer/ThreeTier
type SAPDeploymentType string

const (
	SAPDeploymentTypeSingleServer = SAPDeploymentType("SingleServer")
	SAPDeploymentTypeThreeTier    = SAPDeploymentType("ThreeTier")
)

func (SAPDeploymentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return pulumi.ToOutput(e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPDeploymentTypeOutput)
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return e.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return SAPDeploymentType(e).ToSAPDeploymentTypeOutputWithContext(ctx).ToSAPDeploymentTypePtrOutputWithContext(ctx)
}

func (e SAPDeploymentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPDeploymentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPDeploymentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPDeploymentTypeOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypeOutputWithContext(ctx context.Context) SAPDeploymentTypeOutput {
	return o
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o.ToSAPDeploymentTypePtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPDeploymentType) *SAPDeploymentType {
		return &v
	}).(SAPDeploymentTypePtrOutput)
}

func (o SAPDeploymentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPDeploymentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPDeploymentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPDeploymentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return o
}

func (o SAPDeploymentTypePtrOutput) Elem() SAPDeploymentTypeOutput {
	return o.ApplyT(func(v *SAPDeploymentType) SAPDeploymentType {
		if v != nil {
			return *v
		}
		var ret SAPDeploymentType
		return ret
	}).(SAPDeploymentTypeOutput)
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPDeploymentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPDeploymentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPDeploymentTypeInput is an input type that accepts values of the SAPDeploymentType enum
// A concrete instance of `SAPDeploymentTypeInput` can be one of the following:
//
//	SAPDeploymentTypeSingleServer
//	SAPDeploymentTypeThreeTier
type SAPDeploymentTypeInput interface {
	pulumi.Input

	ToSAPDeploymentTypeOutput() SAPDeploymentTypeOutput
	ToSAPDeploymentTypeOutputWithContext(context.Context) SAPDeploymentTypeOutput
}

var sapdeploymentTypePtrType = reflect.TypeOf((**SAPDeploymentType)(nil)).Elem()

type SAPDeploymentTypePtrInput interface {
	pulumi.Input

	ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput
	ToSAPDeploymentTypePtrOutputWithContext(context.Context) SAPDeploymentTypePtrOutput
}

type sapdeploymentTypePtr string

func SAPDeploymentTypePtr(v string) SAPDeploymentTypePtrInput {
	return (*sapdeploymentTypePtr)(&v)
}

func (*sapdeploymentTypePtr) ElementType() reflect.Type {
	return sapdeploymentTypePtrType
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutput() SAPDeploymentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPDeploymentTypePtrOutput)
}

func (in *sapdeploymentTypePtr) ToSAPDeploymentTypePtrOutputWithContext(ctx context.Context) SAPDeploymentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPDeploymentTypePtrOutput)
}

func (in *sapdeploymentTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SAPDeploymentType] {
	return pulumix.Output[*SAPDeploymentType]{
		OutputState: in.ToSAPDeploymentTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Defines the environment type - Production/Non Production.
type SAPEnvironmentType string

const (
	SAPEnvironmentTypeNonProd = SAPEnvironmentType("NonProd")
	SAPEnvironmentTypeProd    = SAPEnvironmentType("Prod")
)

func (SAPEnvironmentType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return pulumi.ToOutput(e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPEnvironmentTypeOutput)
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return e.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return SAPEnvironmentType(e).ToSAPEnvironmentTypeOutputWithContext(ctx).ToSAPEnvironmentTypePtrOutputWithContext(ctx)
}

func (e SAPEnvironmentType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPEnvironmentType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPEnvironmentType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPEnvironmentTypeOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypeOutputWithContext(ctx context.Context) SAPEnvironmentTypeOutput {
	return o
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o.ToSAPEnvironmentTypePtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPEnvironmentType) *SAPEnvironmentType {
		return &v
	}).(SAPEnvironmentTypePtrOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPEnvironmentType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPEnvironmentTypePtrOutput struct{ *pulumi.OutputState }

func (SAPEnvironmentTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return o
}

func (o SAPEnvironmentTypePtrOutput) Elem() SAPEnvironmentTypeOutput {
	return o.ApplyT(func(v *SAPEnvironmentType) SAPEnvironmentType {
		if v != nil {
			return *v
		}
		var ret SAPEnvironmentType
		return ret
	}).(SAPEnvironmentTypeOutput)
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPEnvironmentTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPEnvironmentType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPEnvironmentTypeInput is an input type that accepts values of the SAPEnvironmentType enum
// A concrete instance of `SAPEnvironmentTypeInput` can be one of the following:
//
//	SAPEnvironmentTypeNonProd
//	SAPEnvironmentTypeProd
type SAPEnvironmentTypeInput interface {
	pulumi.Input

	ToSAPEnvironmentTypeOutput() SAPEnvironmentTypeOutput
	ToSAPEnvironmentTypeOutputWithContext(context.Context) SAPEnvironmentTypeOutput
}

var sapenvironmentTypePtrType = reflect.TypeOf((**SAPEnvironmentType)(nil)).Elem()

type SAPEnvironmentTypePtrInput interface {
	pulumi.Input

	ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput
	ToSAPEnvironmentTypePtrOutputWithContext(context.Context) SAPEnvironmentTypePtrOutput
}

type sapenvironmentTypePtr string

func SAPEnvironmentTypePtr(v string) SAPEnvironmentTypePtrInput {
	return (*sapenvironmentTypePtr)(&v)
}

func (*sapenvironmentTypePtr) ElementType() reflect.Type {
	return sapenvironmentTypePtrType
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutput() SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutput(in).(SAPEnvironmentTypePtrOutput)
}

func (in *sapenvironmentTypePtr) ToSAPEnvironmentTypePtrOutputWithContext(ctx context.Context) SAPEnvironmentTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPEnvironmentTypePtrOutput)
}

func (in *sapenvironmentTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SAPEnvironmentType] {
	return pulumix.Output[*SAPEnvironmentType]{
		OutputState: in.ToSAPEnvironmentTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The high availability type.
type SAPHighAvailabilityType string

const (
	SAPHighAvailabilityTypeAvailabilitySet  = SAPHighAvailabilityType("AvailabilitySet")
	SAPHighAvailabilityTypeAvailabilityZone = SAPHighAvailabilityType("AvailabilityZone")
)

func (SAPHighAvailabilityType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutput(e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPHighAvailabilityTypeOutput)
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return e.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return SAPHighAvailabilityType(e).ToSAPHighAvailabilityTypeOutputWithContext(ctx).ToSAPHighAvailabilityTypePtrOutputWithContext(ctx)
}

func (e SAPHighAvailabilityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPHighAvailabilityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPHighAvailabilityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPHighAvailabilityTypeOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypeOutputWithContext(ctx context.Context) SAPHighAvailabilityTypeOutput {
	return o
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o.ToSAPHighAvailabilityTypePtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPHighAvailabilityType) *SAPHighAvailabilityType {
		return &v
	}).(SAPHighAvailabilityTypePtrOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPHighAvailabilityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPHighAvailabilityTypePtrOutput struct{ *pulumi.OutputState }

func (SAPHighAvailabilityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return o
}

func (o SAPHighAvailabilityTypePtrOutput) Elem() SAPHighAvailabilityTypeOutput {
	return o.ApplyT(func(v *SAPHighAvailabilityType) SAPHighAvailabilityType {
		if v != nil {
			return *v
		}
		var ret SAPHighAvailabilityType
		return ret
	}).(SAPHighAvailabilityTypeOutput)
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPHighAvailabilityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPHighAvailabilityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPHighAvailabilityTypeInput is an input type that accepts values of the SAPHighAvailabilityType enum
// A concrete instance of `SAPHighAvailabilityTypeInput` can be one of the following:
//
//	SAPHighAvailabilityTypeAvailabilitySet
//	SAPHighAvailabilityTypeAvailabilityZone
type SAPHighAvailabilityTypeInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypeOutput() SAPHighAvailabilityTypeOutput
	ToSAPHighAvailabilityTypeOutputWithContext(context.Context) SAPHighAvailabilityTypeOutput
}

var saphighAvailabilityTypePtrType = reflect.TypeOf((**SAPHighAvailabilityType)(nil)).Elem()

type SAPHighAvailabilityTypePtrInput interface {
	pulumi.Input

	ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput
	ToSAPHighAvailabilityTypePtrOutputWithContext(context.Context) SAPHighAvailabilityTypePtrOutput
}

type saphighAvailabilityTypePtr string

func SAPHighAvailabilityTypePtr(v string) SAPHighAvailabilityTypePtrInput {
	return (*saphighAvailabilityTypePtr)(&v)
}

func (*saphighAvailabilityTypePtr) ElementType() reflect.Type {
	return saphighAvailabilityTypePtrType
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutput() SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutput(in).(SAPHighAvailabilityTypePtrOutput)
}

func (in *saphighAvailabilityTypePtr) ToSAPHighAvailabilityTypePtrOutputWithContext(ctx context.Context) SAPHighAvailabilityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPHighAvailabilityTypePtrOutput)
}

func (in *saphighAvailabilityTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SAPHighAvailabilityType] {
	return pulumix.Output[*SAPHighAvailabilityType]{
		OutputState: in.ToSAPHighAvailabilityTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Defines the SAP Product type.
type SAPProductType string

const (
	SAPProductTypeECC    = SAPProductType("ECC")
	SAPProductTypeS4HANA = SAPProductType("S4HANA")
	SAPProductTypeOther  = SAPProductType("Other")
)

func (SAPProductType) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (e SAPProductType) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return pulumi.ToOutput(e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SAPProductTypeOutput)
}

func (e SAPProductType) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return e.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return SAPProductType(e).ToSAPProductTypeOutputWithContext(ctx).ToSAPProductTypePtrOutputWithContext(ctx)
}

func (e SAPProductType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SAPProductType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SAPProductType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SAPProductTypeOutput struct{ *pulumi.OutputState }

func (SAPProductTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPProductType)(nil)).Elem()
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutput() SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypeOutputWithContext(ctx context.Context) SAPProductTypeOutput {
	return o
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o.ToSAPProductTypePtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SAPProductType) *SAPProductType {
		return &v
	}).(SAPProductTypePtrOutput)
}

func (o SAPProductTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SAPProductTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SAPProductType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SAPProductTypePtrOutput struct{ *pulumi.OutputState }

func (SAPProductTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SAPProductType)(nil)).Elem()
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return o
}

func (o SAPProductTypePtrOutput) Elem() SAPProductTypeOutput {
	return o.ApplyT(func(v *SAPProductType) SAPProductType {
		if v != nil {
			return *v
		}
		var ret SAPProductType
		return ret
	}).(SAPProductTypeOutput)
}

func (o SAPProductTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SAPProductTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SAPProductType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SAPProductTypeInput is an input type that accepts values of the SAPProductType enum
// A concrete instance of `SAPProductTypeInput` can be one of the following:
//
//	SAPProductTypeECC
//	SAPProductTypeS4HANA
//	SAPProductTypeOther
type SAPProductTypeInput interface {
	pulumi.Input

	ToSAPProductTypeOutput() SAPProductTypeOutput
	ToSAPProductTypeOutputWithContext(context.Context) SAPProductTypeOutput
}

var sapproductTypePtrType = reflect.TypeOf((**SAPProductType)(nil)).Elem()

type SAPProductTypePtrInput interface {
	pulumi.Input

	ToSAPProductTypePtrOutput() SAPProductTypePtrOutput
	ToSAPProductTypePtrOutputWithContext(context.Context) SAPProductTypePtrOutput
}

type sapproductTypePtr string

func SAPProductTypePtr(v string) SAPProductTypePtrInput {
	return (*sapproductTypePtr)(&v)
}

func (*sapproductTypePtr) ElementType() reflect.Type {
	return sapproductTypePtrType
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutput() SAPProductTypePtrOutput {
	return pulumi.ToOutput(in).(SAPProductTypePtrOutput)
}

func (in *sapproductTypePtr) ToSAPProductTypePtrOutputWithContext(ctx context.Context) SAPProductTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SAPProductTypePtrOutput)
}

func (in *sapproductTypePtr) ToOutput(ctx context.Context) pulumix.Output[*SAPProductType] {
	return pulumix.Output[*SAPProductType]{
		OutputState: in.ToSAPProductTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodOutput{})
	pulumi.RegisterOutputType(SAPDatabaseScaleMethodPtrOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypeOutput{})
	pulumi.RegisterOutputType(SAPDatabaseTypePtrOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypeOutput{})
	pulumi.RegisterOutputType(SAPDeploymentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypeOutput{})
	pulumi.RegisterOutputType(SAPEnvironmentTypePtrOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypeOutput{})
	pulumi.RegisterOutputType(SAPHighAvailabilityTypePtrOutput{})
	pulumi.RegisterOutputType(SAPProductTypeOutput{})
	pulumi.RegisterOutputType(SAPProductTypePtrOutput{})
}
