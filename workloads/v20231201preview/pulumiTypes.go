// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Configuration details of app service plan
type AppServicePlanConfiguration struct {
	// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
	Capacity *int `pulumi:"capacity"`
	// The App Service plan tier.
	Tier *string `pulumi:"tier"`
}

// AppServicePlanConfigurationInput is an input type that accepts AppServicePlanConfigurationArgs and AppServicePlanConfigurationOutput values.
// You can construct a concrete instance of `AppServicePlanConfigurationInput` via:
//
//	AppServicePlanConfigurationArgs{...}
type AppServicePlanConfigurationInput interface {
	pulumi.Input

	ToAppServicePlanConfigurationOutput() AppServicePlanConfigurationOutput
	ToAppServicePlanConfigurationOutputWithContext(context.Context) AppServicePlanConfigurationOutput
}

// Configuration details of app service plan
type AppServicePlanConfigurationArgs struct {
	// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// The App Service plan tier.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
}

func (AppServicePlanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppServicePlanConfiguration)(nil)).Elem()
}

func (i AppServicePlanConfigurationArgs) ToAppServicePlanConfigurationOutput() AppServicePlanConfigurationOutput {
	return i.ToAppServicePlanConfigurationOutputWithContext(context.Background())
}

func (i AppServicePlanConfigurationArgs) ToAppServicePlanConfigurationOutputWithContext(ctx context.Context) AppServicePlanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppServicePlanConfigurationOutput)
}

func (i AppServicePlanConfigurationArgs) ToAppServicePlanConfigurationPtrOutput() AppServicePlanConfigurationPtrOutput {
	return i.ToAppServicePlanConfigurationPtrOutputWithContext(context.Background())
}

func (i AppServicePlanConfigurationArgs) ToAppServicePlanConfigurationPtrOutputWithContext(ctx context.Context) AppServicePlanConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppServicePlanConfigurationOutput).ToAppServicePlanConfigurationPtrOutputWithContext(ctx)
}

// AppServicePlanConfigurationPtrInput is an input type that accepts AppServicePlanConfigurationArgs, AppServicePlanConfigurationPtr and AppServicePlanConfigurationPtrOutput values.
// You can construct a concrete instance of `AppServicePlanConfigurationPtrInput` via:
//
//	        AppServicePlanConfigurationArgs{...}
//
//	or:
//
//	        nil
type AppServicePlanConfigurationPtrInput interface {
	pulumi.Input

	ToAppServicePlanConfigurationPtrOutput() AppServicePlanConfigurationPtrOutput
	ToAppServicePlanConfigurationPtrOutputWithContext(context.Context) AppServicePlanConfigurationPtrOutput
}

type appServicePlanConfigurationPtrType AppServicePlanConfigurationArgs

func AppServicePlanConfigurationPtr(v *AppServicePlanConfigurationArgs) AppServicePlanConfigurationPtrInput {
	return (*appServicePlanConfigurationPtrType)(v)
}

func (*appServicePlanConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppServicePlanConfiguration)(nil)).Elem()
}

func (i *appServicePlanConfigurationPtrType) ToAppServicePlanConfigurationPtrOutput() AppServicePlanConfigurationPtrOutput {
	return i.ToAppServicePlanConfigurationPtrOutputWithContext(context.Background())
}

func (i *appServicePlanConfigurationPtrType) ToAppServicePlanConfigurationPtrOutputWithContext(ctx context.Context) AppServicePlanConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppServicePlanConfigurationPtrOutput)
}

// Configuration details of app service plan
type AppServicePlanConfigurationOutput struct{ *pulumi.OutputState }

func (AppServicePlanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppServicePlanConfiguration)(nil)).Elem()
}

func (o AppServicePlanConfigurationOutput) ToAppServicePlanConfigurationOutput() AppServicePlanConfigurationOutput {
	return o
}

func (o AppServicePlanConfigurationOutput) ToAppServicePlanConfigurationOutputWithContext(ctx context.Context) AppServicePlanConfigurationOutput {
	return o
}

func (o AppServicePlanConfigurationOutput) ToAppServicePlanConfigurationPtrOutput() AppServicePlanConfigurationPtrOutput {
	return o.ToAppServicePlanConfigurationPtrOutputWithContext(context.Background())
}

func (o AppServicePlanConfigurationOutput) ToAppServicePlanConfigurationPtrOutputWithContext(ctx context.Context) AppServicePlanConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppServicePlanConfiguration) *AppServicePlanConfiguration {
		return &v
	}).(AppServicePlanConfigurationPtrOutput)
}

// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
func (o AppServicePlanConfigurationOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppServicePlanConfiguration) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The App Service plan tier.
func (o AppServicePlanConfigurationOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppServicePlanConfiguration) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type AppServicePlanConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AppServicePlanConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppServicePlanConfiguration)(nil)).Elem()
}

func (o AppServicePlanConfigurationPtrOutput) ToAppServicePlanConfigurationPtrOutput() AppServicePlanConfigurationPtrOutput {
	return o
}

func (o AppServicePlanConfigurationPtrOutput) ToAppServicePlanConfigurationPtrOutputWithContext(ctx context.Context) AppServicePlanConfigurationPtrOutput {
	return o
}

func (o AppServicePlanConfigurationPtrOutput) Elem() AppServicePlanConfigurationOutput {
	return o.ApplyT(func(v *AppServicePlanConfiguration) AppServicePlanConfiguration {
		if v != nil {
			return *v
		}
		var ret AppServicePlanConfiguration
		return ret
	}).(AppServicePlanConfigurationOutput)
}

// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
func (o AppServicePlanConfigurationPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppServicePlanConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The App Service plan tier.
func (o AppServicePlanConfigurationPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppServicePlanConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Configuration details of app service plan
type AppServicePlanConfigurationResponse struct {
	// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
	Capacity *int `pulumi:"capacity"`
	// The App Service plan tier.
	Tier *string `pulumi:"tier"`
}

// Configuration details of app service plan
type AppServicePlanConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AppServicePlanConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppServicePlanConfigurationResponse)(nil)).Elem()
}

func (o AppServicePlanConfigurationResponseOutput) ToAppServicePlanConfigurationResponseOutput() AppServicePlanConfigurationResponseOutput {
	return o
}

func (o AppServicePlanConfigurationResponseOutput) ToAppServicePlanConfigurationResponseOutputWithContext(ctx context.Context) AppServicePlanConfigurationResponseOutput {
	return o
}

// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
func (o AppServicePlanConfigurationResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AppServicePlanConfigurationResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// The App Service plan tier.
func (o AppServicePlanConfigurationResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppServicePlanConfigurationResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type AppServicePlanConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AppServicePlanConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppServicePlanConfigurationResponse)(nil)).Elem()
}

func (o AppServicePlanConfigurationResponsePtrOutput) ToAppServicePlanConfigurationResponsePtrOutput() AppServicePlanConfigurationResponsePtrOutput {
	return o
}

func (o AppServicePlanConfigurationResponsePtrOutput) ToAppServicePlanConfigurationResponsePtrOutputWithContext(ctx context.Context) AppServicePlanConfigurationResponsePtrOutput {
	return o
}

func (o AppServicePlanConfigurationResponsePtrOutput) Elem() AppServicePlanConfigurationResponseOutput {
	return o.ApplyT(func(v *AppServicePlanConfigurationResponse) AppServicePlanConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AppServicePlanConfigurationResponse
		return ret
	}).(AppServicePlanConfigurationResponseOutput)
}

// The number of workers in app service plan. If this is not set or set to 0, auto scale will be configured for the app service plan, otherwise, instance count is set to this number.
func (o AppServicePlanConfigurationResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppServicePlanConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// The App Service plan tier.
func (o AppServicePlanConfigurationResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppServicePlanConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DB2 provider properties.
type Db2ProviderInstanceProperties struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Db2ProviderInstancePropertiesInput is an input type that accepts Db2ProviderInstancePropertiesArgs and Db2ProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `Db2ProviderInstancePropertiesInput` via:
//
//	Db2ProviderInstancePropertiesArgs{...}
type Db2ProviderInstancePropertiesInput interface {
	pulumi.Input

	ToDb2ProviderInstancePropertiesOutput() Db2ProviderInstancePropertiesOutput
	ToDb2ProviderInstancePropertiesOutputWithContext(context.Context) Db2ProviderInstancePropertiesOutput
}

// Gets or sets the DB2 provider properties.
type Db2ProviderInstancePropertiesArgs struct {
	// Gets or sets the db2 database name.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort pulumi.StringPtrInput `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (Db2ProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2ProviderInstanceProperties)(nil)).Elem()
}

func (i Db2ProviderInstancePropertiesArgs) ToDb2ProviderInstancePropertiesOutput() Db2ProviderInstancePropertiesOutput {
	return i.ToDb2ProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i Db2ProviderInstancePropertiesArgs) ToDb2ProviderInstancePropertiesOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2ProviderInstancePropertiesOutput)
}

func (i Db2ProviderInstancePropertiesArgs) ToDb2ProviderInstancePropertiesPtrOutput() Db2ProviderInstancePropertiesPtrOutput {
	return i.ToDb2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i Db2ProviderInstancePropertiesArgs) ToDb2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2ProviderInstancePropertiesOutput).ToDb2ProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// Db2ProviderInstancePropertiesPtrInput is an input type that accepts Db2ProviderInstancePropertiesArgs, Db2ProviderInstancePropertiesPtr and Db2ProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `Db2ProviderInstancePropertiesPtrInput` via:
//
//	        Db2ProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type Db2ProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToDb2ProviderInstancePropertiesPtrOutput() Db2ProviderInstancePropertiesPtrOutput
	ToDb2ProviderInstancePropertiesPtrOutputWithContext(context.Context) Db2ProviderInstancePropertiesPtrOutput
}

type db2ProviderInstancePropertiesPtrType Db2ProviderInstancePropertiesArgs

func Db2ProviderInstancePropertiesPtr(v *Db2ProviderInstancePropertiesArgs) Db2ProviderInstancePropertiesPtrInput {
	return (*db2ProviderInstancePropertiesPtrType)(v)
}

func (*db2ProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Db2ProviderInstanceProperties)(nil)).Elem()
}

func (i *db2ProviderInstancePropertiesPtrType) ToDb2ProviderInstancePropertiesPtrOutput() Db2ProviderInstancePropertiesPtrOutput {
	return i.ToDb2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *db2ProviderInstancePropertiesPtrType) ToDb2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Db2ProviderInstancePropertiesPtrOutput)
}

// Gets or sets the DB2 provider properties.
type Db2ProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (Db2ProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2ProviderInstanceProperties)(nil)).Elem()
}

func (o Db2ProviderInstancePropertiesOutput) ToDb2ProviderInstancePropertiesOutput() Db2ProviderInstancePropertiesOutput {
	return o
}

func (o Db2ProviderInstancePropertiesOutput) ToDb2ProviderInstancePropertiesOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesOutput {
	return o
}

func (o Db2ProviderInstancePropertiesOutput) ToDb2ProviderInstancePropertiesPtrOutput() Db2ProviderInstancePropertiesPtrOutput {
	return o.ToDb2ProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o Db2ProviderInstancePropertiesOutput) ToDb2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Db2ProviderInstanceProperties) *Db2ProviderInstanceProperties {
		return &v
	}).(Db2ProviderInstancePropertiesPtrOutput)
}

// Gets or sets the db2 database name.
func (o Db2ProviderInstancePropertiesOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o Db2ProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o Db2ProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o Db2ProviderInstancePropertiesOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o Db2ProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o Db2ProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o Db2ProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o Db2ProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o Db2ProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o Db2ProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type Db2ProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (Db2ProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Db2ProviderInstanceProperties)(nil)).Elem()
}

func (o Db2ProviderInstancePropertiesPtrOutput) ToDb2ProviderInstancePropertiesPtrOutput() Db2ProviderInstancePropertiesPtrOutput {
	return o
}

func (o Db2ProviderInstancePropertiesPtrOutput) ToDb2ProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesPtrOutput {
	return o
}

func (o Db2ProviderInstancePropertiesPtrOutput) Elem() Db2ProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) Db2ProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret Db2ProviderInstanceProperties
		return ret
	}).(Db2ProviderInstancePropertiesOutput)
}

// Gets or sets the db2 database name.
func (o Db2ProviderInstancePropertiesPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o Db2ProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o Db2ProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o Db2ProviderInstancePropertiesPtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o Db2ProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o Db2ProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o Db2ProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o Db2ProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o Db2ProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o Db2ProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the DB2 provider properties.
type Db2ProviderInstancePropertiesResponse struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the DB2 provider properties.
type Db2ProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (Db2ProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Db2ProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o Db2ProviderInstancePropertiesResponseOutput) ToDb2ProviderInstancePropertiesResponseOutput() Db2ProviderInstancePropertiesResponseOutput {
	return o
}

func (o Db2ProviderInstancePropertiesResponseOutput) ToDb2ProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the db2 database name.
func (o Db2ProviderInstancePropertiesResponseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o Db2ProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o Db2ProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o Db2ProviderInstancePropertiesResponseOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o Db2ProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o Db2ProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o Db2ProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o Db2ProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o Db2ProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o Db2ProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Db2ProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type Db2ProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (Db2ProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Db2ProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o Db2ProviderInstancePropertiesResponsePtrOutput) ToDb2ProviderInstancePropertiesResponsePtrOutput() Db2ProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o Db2ProviderInstancePropertiesResponsePtrOutput) ToDb2ProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) Db2ProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o Db2ProviderInstancePropertiesResponsePtrOutput) Elem() Db2ProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) Db2ProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret Db2ProviderInstancePropertiesResponse
		return ret
	}).(Db2ProviderInstancePropertiesResponseOutput)
}

// Gets or sets the db2 database name.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database password.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database sql port.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the db2 database user name.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine name.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'Db2'.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o Db2ProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB2 Database.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o Db2ProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Db2ProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstanceProperties struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// HanaDbProviderInstancePropertiesInput is an input type that accepts HanaDbProviderInstancePropertiesArgs and HanaDbProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `HanaDbProviderInstancePropertiesInput` via:
//
//	HanaDbProviderInstancePropertiesArgs{...}
type HanaDbProviderInstancePropertiesInput interface {
	pulumi.Input

	ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput
	ToHanaDbProviderInstancePropertiesOutputWithContext(context.Context) HanaDbProviderInstancePropertiesOutput
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesArgs struct {
	// Gets or sets the hana database name.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber pulumi.StringPtrInput `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort pulumi.StringPtrInput `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate pulumi.StringPtrInput `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (HanaDbProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput {
	return i.ToHanaDbProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesOutput)
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return i.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i HanaDbProviderInstancePropertiesArgs) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesOutput).ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// HanaDbProviderInstancePropertiesPtrInput is an input type that accepts HanaDbProviderInstancePropertiesArgs, HanaDbProviderInstancePropertiesPtr and HanaDbProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `HanaDbProviderInstancePropertiesPtrInput` via:
//
//	        HanaDbProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type HanaDbProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput
	ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Context) HanaDbProviderInstancePropertiesPtrOutput
}

type hanaDbProviderInstancePropertiesPtrType HanaDbProviderInstancePropertiesArgs

func HanaDbProviderInstancePropertiesPtr(v *HanaDbProviderInstancePropertiesArgs) HanaDbProviderInstancePropertiesPtrInput {
	return (*hanaDbProviderInstancePropertiesPtrType)(v)
}

func (*hanaDbProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (i *hanaDbProviderInstancePropertiesPtrType) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return i.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *hanaDbProviderInstancePropertiesPtrType) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HanaDbProviderInstancePropertiesPtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesOutput() HanaDbProviderInstancePropertiesOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return o.ToHanaDbProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o HanaDbProviderInstancePropertiesOutput) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HanaDbProviderInstanceProperties) *HanaDbProviderInstanceProperties {
		return &v
	}).(HanaDbProviderInstancePropertiesPtrOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SqlPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type HanaDbProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstanceProperties)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesPtrOutput) ToHanaDbProviderInstancePropertiesPtrOutput() HanaDbProviderInstancePropertiesPtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesPtrOutput) ToHanaDbProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesPtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesPtrOutput) Elem() HanaDbProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) HanaDbProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret HanaDbProviderInstanceProperties
		return ret
	}).(HanaDbProviderInstancePropertiesOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesPtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesPtrOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SqlPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesResponse struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HanaDbProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesResponseOutput) ToHanaDbProviderInstancePropertiesResponseOutput() HanaDbProviderInstancePropertiesResponseOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponseOutput) ToHanaDbProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesResponseOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.InstanceNumber }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesResponseOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SqlPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslHostNameInCertificate }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HanaDbProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type HanaDbProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HanaDbProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HanaDbProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ToHanaDbProviderInstancePropertiesResponsePtrOutput() HanaDbProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ToHanaDbProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) HanaDbProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o HanaDbProviderInstancePropertiesResponsePtrOutput) Elem() HanaDbProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) HanaDbProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret HanaDbProviderInstancePropertiesResponse
		return ret
	}).(HanaDbProviderInstancePropertiesResponseOutput)
}

// Gets or sets the hana database name.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database password.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target virtual machine size.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database instance number.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) InstanceNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceNumber
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapHana'.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SqlPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SqlPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the DB.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the hostname(s) in the SSL certificate.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslHostNameInCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslHostNameInCertificate
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o HanaDbProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HanaDbProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Resource health details
type HealthResponse struct {
	// Health state of the resource
	HealthState string `pulumi:"healthState"`
	// Reasons impacting health state
	ImpactingReasons string `pulumi:"impactingReasons"`
}

// Resource health details
type HealthResponseOutput struct{ *pulumi.OutputState }

func (HealthResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthResponse)(nil)).Elem()
}

func (o HealthResponseOutput) ToHealthResponseOutput() HealthResponseOutput {
	return o
}

func (o HealthResponseOutput) ToHealthResponseOutputWithContext(ctx context.Context) HealthResponseOutput {
	return o
}

// Health state of the resource
func (o HealthResponseOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v HealthResponse) string { return v.HealthState }).(pulumi.StringOutput)
}

// Reasons impacting health state
func (o HealthResponseOutput) ImpactingReasons() pulumi.StringOutput {
	return o.ApplyT(func(v HealthResponse) string { return v.ImpactingReasons }).(pulumi.StringOutput)
}

// Managed resource group configuration
type ManagedResourceGroupConfiguration struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// ManagedResourceGroupConfigurationInput is an input type that accepts ManagedResourceGroupConfigurationArgs and ManagedResourceGroupConfigurationOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationInput` via:
//
//	ManagedResourceGroupConfigurationArgs{...}
type ManagedResourceGroupConfigurationInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput
	ToManagedResourceGroupConfigurationOutputWithContext(context.Context) ManagedResourceGroupConfigurationOutput
}

// Managed resource group configuration
type ManagedResourceGroupConfigurationArgs struct {
	// Managed resource group name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedResourceGroupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return i.ToManagedResourceGroupConfigurationOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput)
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput).ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx)
}

// ManagedResourceGroupConfigurationPtrInput is an input type that accepts ManagedResourceGroupConfigurationArgs, ManagedResourceGroupConfigurationPtr and ManagedResourceGroupConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationPtrInput` via:
//
//	        ManagedResourceGroupConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedResourceGroupConfigurationPtrInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput
	ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Context) ManagedResourceGroupConfigurationPtrOutput
}

type managedResourceGroupConfigurationPtrType ManagedResourceGroupConfigurationArgs

func ManagedResourceGroupConfigurationPtr(v *ManagedResourceGroupConfigurationArgs) ManagedResourceGroupConfigurationPtrInput {
	return (*managedResourceGroupConfigurationPtrType)(v)
}

func (*managedResourceGroupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationPtrOutput)
}

// Managed resource group configuration
type ManagedResourceGroupConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourceGroupConfiguration) *ManagedResourceGroupConfiguration {
		return &v
	}).(ManagedResourceGroupConfigurationPtrOutput)
}

// Managed resource group name
func (o ManagedResourceGroupConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) Elem() ManagedResourceGroupConfigurationOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) ManagedResourceGroupConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfiguration
		return ret
	}).(ManagedResourceGroupConfigurationOutput)
}

// Managed resource group name
func (o ManagedResourceGroupConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedResourceGroupConfigurationResponse struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// Managed resource group configuration
type ManagedResourceGroupConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutput() ManagedResourceGroupConfigurationResponseOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponseOutput {
	return o
}

// Managed resource group name
func (o ManagedResourceGroupConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutput() ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) Elem() ManagedResourceGroupConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) ManagedResourceGroupConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfigurationResponse
		return ret
	}).(ManagedResourceGroupConfigurationResponseOutput)
}

// Managed resource group name
func (o ManagedResourceGroupConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstanceProperties struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// MsSqlServerProviderInstancePropertiesInput is an input type that accepts MsSqlServerProviderInstancePropertiesArgs and MsSqlServerProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `MsSqlServerProviderInstancePropertiesInput` via:
//
//	MsSqlServerProviderInstancePropertiesArgs{...}
type MsSqlServerProviderInstancePropertiesInput interface {
	pulumi.Input

	ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput
	ToMsSqlServerProviderInstancePropertiesOutputWithContext(context.Context) MsSqlServerProviderInstancePropertiesOutput
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesArgs struct {
	// Gets or sets the database password.
	DbPassword pulumi.StringPtrInput `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri pulumi.StringPtrInput `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort pulumi.StringPtrInput `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername pulumi.StringPtrInput `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (MsSqlServerProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput {
	return i.ToMsSqlServerProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesOutput)
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return i.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i MsSqlServerProviderInstancePropertiesArgs) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesOutput).ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// MsSqlServerProviderInstancePropertiesPtrInput is an input type that accepts MsSqlServerProviderInstancePropertiesArgs, MsSqlServerProviderInstancePropertiesPtr and MsSqlServerProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `MsSqlServerProviderInstancePropertiesPtrInput` via:
//
//	        MsSqlServerProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type MsSqlServerProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput
	ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Context) MsSqlServerProviderInstancePropertiesPtrOutput
}

type msSqlServerProviderInstancePropertiesPtrType MsSqlServerProviderInstancePropertiesArgs

func MsSqlServerProviderInstancePropertiesPtr(v *MsSqlServerProviderInstancePropertiesArgs) MsSqlServerProviderInstancePropertiesPtrInput {
	return (*msSqlServerProviderInstancePropertiesPtrType)(v)
}

func (*msSqlServerProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (i *msSqlServerProviderInstancePropertiesPtrType) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return i.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *msSqlServerProviderInstancePropertiesPtrType) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsSqlServerProviderInstancePropertiesPtrOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesOutput() MsSqlServerProviderInstancePropertiesOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return o.ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o MsSqlServerProviderInstancePropertiesOutput) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MsSqlServerProviderInstanceProperties) *MsSqlServerProviderInstanceProperties {
		return &v
	}).(MsSqlServerProviderInstancePropertiesPtrOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type MsSqlServerProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstanceProperties)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) ToMsSqlServerProviderInstancePropertiesPtrOutput() MsSqlServerProviderInstancePropertiesPtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) ToMsSqlServerProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesPtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesPtrOutput) Elem() MsSqlServerProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) MsSqlServerProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret MsSqlServerProviderInstanceProperties
		return ret
	}).(MsSqlServerProviderInstancePropertiesOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesResponse struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsSqlServerProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesResponseOutput) ToMsSqlServerProviderInstancePropertiesResponseOutput() MsSqlServerProviderInstancePropertiesResponseOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponseOutput) ToMsSqlServerProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbPort }).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.DbUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsSqlServerProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type MsSqlServerProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MsSqlServerProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MsSqlServerProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ToMsSqlServerProviderInstancePropertiesResponsePtrOutput() MsSqlServerProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ToMsSqlServerProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) MsSqlServerProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) Elem() MsSqlServerProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) MsSqlServerProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MsSqlServerProviderInstancePropertiesResponse
		return ret
	}).(MsSqlServerProviderInstancePropertiesResponseOutput)
}

// Gets or sets the database password.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the database password.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database sql port.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbPort
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the database user name.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) DbUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DbUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SQL server host name.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'MsSqlServer'.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SQL Database.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o MsSqlServerProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MsSqlServerProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstanceProperties struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// PrometheusHaClusterProviderInstancePropertiesInput is an input type that accepts PrometheusHaClusterProviderInstancePropertiesArgs and PrometheusHaClusterProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `PrometheusHaClusterProviderInstancePropertiesInput` via:
//
//	PrometheusHaClusterProviderInstancePropertiesArgs{...}
type PrometheusHaClusterProviderInstancePropertiesInput interface {
	pulumi.Input

	ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput
	ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(context.Context) PrometheusHaClusterProviderInstancePropertiesOutput
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesArgs struct {
	// Gets or sets the clusterName.
	ClusterName pulumi.StringPtrInput `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl pulumi.StringPtrInput `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid pulumi.StringPtrInput `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (PrometheusHaClusterProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesOutput)
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i PrometheusHaClusterProviderInstancePropertiesArgs) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesOutput).ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// PrometheusHaClusterProviderInstancePropertiesPtrInput is an input type that accepts PrometheusHaClusterProviderInstancePropertiesArgs, PrometheusHaClusterProviderInstancePropertiesPtr and PrometheusHaClusterProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `PrometheusHaClusterProviderInstancePropertiesPtrInput` via:
//
//	        PrometheusHaClusterProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type PrometheusHaClusterProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput
	ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput
}

type prometheusHaClusterProviderInstancePropertiesPtrType PrometheusHaClusterProviderInstancePropertiesArgs

func PrometheusHaClusterProviderInstancePropertiesPtr(v *PrometheusHaClusterProviderInstancePropertiesArgs) PrometheusHaClusterProviderInstancePropertiesPtrInput {
	return (*prometheusHaClusterProviderInstancePropertiesPtrType)(v)
}

func (*prometheusHaClusterProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (i *prometheusHaClusterProviderInstancePropertiesPtrType) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *prometheusHaClusterProviderInstancePropertiesPtrType) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusHaClusterProviderInstancePropertiesPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesOutput() PrometheusHaClusterProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o.ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o PrometheusHaClusterProviderInstancePropertiesOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrometheusHaClusterProviderInstanceProperties) *PrometheusHaClusterProviderInstanceProperties {
		return &v
	}).(PrometheusHaClusterProviderInstancePropertiesPtrOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusHaClusterProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutput() PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ToPrometheusHaClusterProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Elem() PrometheusHaClusterProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) PrometheusHaClusterProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret PrometheusHaClusterProviderInstanceProperties
		return ret
	}).(PrometheusHaClusterProviderInstancePropertiesOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.Sid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesResponse struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusHaClusterProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ToPrometheusHaClusterProviderInstancePropertiesResponseOutput() PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ToPrometheusHaClusterProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.Sid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusHaClusterProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusHaClusterProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ToPrometheusHaClusterProviderInstancePropertiesResponsePtrOutput() PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ToPrometheusHaClusterProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Elem() PrometheusHaClusterProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) PrometheusHaClusterProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrometheusHaClusterProviderInstancePropertiesResponse
		return ret
	}).(PrometheusHaClusterProviderInstancePropertiesResponseOutput)
}

// Gets or sets the clusterName.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClusterName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the target machine name.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

// URL of the Node Exporter endpoint.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusHaCluster'.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the cluster sid.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) Sid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusHaClusterProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOsProviderInstanceProperties struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// PrometheusOsProviderInstancePropertiesInput is an input type that accepts PrometheusOsProviderInstancePropertiesArgs and PrometheusOsProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `PrometheusOsProviderInstancePropertiesInput` via:
//
//	PrometheusOsProviderInstancePropertiesArgs{...}
type PrometheusOsProviderInstancePropertiesInput interface {
	pulumi.Input

	ToPrometheusOsProviderInstancePropertiesOutput() PrometheusOsProviderInstancePropertiesOutput
	ToPrometheusOsProviderInstancePropertiesOutputWithContext(context.Context) PrometheusOsProviderInstancePropertiesOutput
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOsProviderInstancePropertiesArgs struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl pulumi.StringPtrInput `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (PrometheusOsProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOsProviderInstanceProperties)(nil)).Elem()
}

func (i PrometheusOsProviderInstancePropertiesArgs) ToPrometheusOsProviderInstancePropertiesOutput() PrometheusOsProviderInstancePropertiesOutput {
	return i.ToPrometheusOsProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i PrometheusOsProviderInstancePropertiesArgs) ToPrometheusOsProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOsProviderInstancePropertiesOutput)
}

func (i PrometheusOsProviderInstancePropertiesArgs) ToPrometheusOsProviderInstancePropertiesPtrOutput() PrometheusOsProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i PrometheusOsProviderInstancePropertiesArgs) ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOsProviderInstancePropertiesOutput).ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// PrometheusOsProviderInstancePropertiesPtrInput is an input type that accepts PrometheusOsProviderInstancePropertiesArgs, PrometheusOsProviderInstancePropertiesPtr and PrometheusOsProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `PrometheusOsProviderInstancePropertiesPtrInput` via:
//
//	        PrometheusOsProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type PrometheusOsProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToPrometheusOsProviderInstancePropertiesPtrOutput() PrometheusOsProviderInstancePropertiesPtrOutput
	ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(context.Context) PrometheusOsProviderInstancePropertiesPtrOutput
}

type prometheusOsProviderInstancePropertiesPtrType PrometheusOsProviderInstancePropertiesArgs

func PrometheusOsProviderInstancePropertiesPtr(v *PrometheusOsProviderInstancePropertiesArgs) PrometheusOsProviderInstancePropertiesPtrInput {
	return (*prometheusOsProviderInstancePropertiesPtrType)(v)
}

func (*prometheusOsProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOsProviderInstanceProperties)(nil)).Elem()
}

func (i *prometheusOsProviderInstancePropertiesPtrType) ToPrometheusOsProviderInstancePropertiesPtrOutput() PrometheusOsProviderInstancePropertiesPtrOutput {
	return i.ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *prometheusOsProviderInstancePropertiesPtrType) ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOsProviderInstancePropertiesPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOsProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (PrometheusOsProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOsProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusOsProviderInstancePropertiesOutput) ToPrometheusOsProviderInstancePropertiesOutput() PrometheusOsProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesOutput) ToPrometheusOsProviderInstancePropertiesOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesOutput) ToPrometheusOsProviderInstancePropertiesPtrOutput() PrometheusOsProviderInstancePropertiesPtrOutput {
	return o.ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o PrometheusOsProviderInstancePropertiesOutput) ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrometheusOsProviderInstanceProperties) *PrometheusOsProviderInstanceProperties {
		return &v
	}).(PrometheusOsProviderInstancePropertiesPtrOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOsProviderInstancePropertiesOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstanceProperties) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOsProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOsProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOsProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOsProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusOsProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrometheusOsProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOsProviderInstanceProperties)(nil)).Elem()
}

func (o PrometheusOsProviderInstancePropertiesPtrOutput) ToPrometheusOsProviderInstancePropertiesPtrOutput() PrometheusOsProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesPtrOutput) ToPrometheusOsProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesPtrOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesPtrOutput) Elem() PrometheusOsProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) PrometheusOsProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret PrometheusOsProviderInstanceProperties
		return ret
	}).(PrometheusOsProviderInstancePropertiesOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOsProviderInstancePropertiesPtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOsProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOsProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOsProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOsProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOsProviderInstancePropertiesResponse struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOsProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrometheusOsProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusOsProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusOsProviderInstancePropertiesResponseOutput) ToPrometheusOsProviderInstancePropertiesResponseOutput() PrometheusOsProviderInstancePropertiesResponseOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesResponseOutput) ToPrometheusOsProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesResponseOutput {
	return o
}

// URL of the Node Exporter endpoint
func (o PrometheusOsProviderInstancePropertiesResponseOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstancePropertiesResponse) *string { return v.PrometheusUrl }).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOsProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOsProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOsProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOsProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusOsProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type PrometheusOsProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrometheusOsProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusOsProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) ToPrometheusOsProviderInstancePropertiesResponsePtrOutput() PrometheusOsProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) ToPrometheusOsProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) PrometheusOsProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) Elem() PrometheusOsProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) PrometheusOsProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrometheusOsProviderInstancePropertiesResponse
		return ret
	}).(PrometheusOsProviderInstancePropertiesResponseOutput)
}

// URL of the Node Exporter endpoint
func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) PrometheusUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrometheusUrl
	}).(pulumi.StringPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'PrometheusOS'.
func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o PrometheusOsProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusOsProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholds struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// SapLandscapeMonitorMetricThresholdsInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArgs and SapLandscapeMonitorMetricThresholdsOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArgs{...}
type SapLandscapeMonitorMetricThresholdsInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput
	ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsOutput
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsArgs struct {
	// Gets or sets the threshold value for Green.
	Green pulumi.Float64PtrInput `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red pulumi.Float64PtrInput `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow pulumi.Float64PtrInput `pulumi:"yellow"`
}

func (SapLandscapeMonitorMetricThresholdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsOutput)
}

// SapLandscapeMonitorMetricThresholdsArrayInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArray and SapLandscapeMonitorMetricThresholdsArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsArrayInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArray{ SapLandscapeMonitorMetricThresholdsArgs{...} }
type SapLandscapeMonitorMetricThresholdsArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput
	ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput
}

type SapLandscapeMonitorMetricThresholdsArray []SapLandscapeMonitorMetricThresholdsInput

func (SapLandscapeMonitorMetricThresholdsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsArrayOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholds {
		return vs[0].([]SapLandscapeMonitorMetricThresholds)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponse struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutput() SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutput() SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholdsResponse {
		return vs[0].([]SapLandscapeMonitorMetricThresholdsResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsResponseOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGrouping struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMapping `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMapping `pulumi:"sapApplication"`
}

// SapLandscapeMonitorPropertiesGroupingInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs and SapLandscapeMonitorPropertiesGroupingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingInput` via:
//
//	SapLandscapeMonitorPropertiesGroupingArgs{...}
type SapLandscapeMonitorPropertiesGroupingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput
	ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingOutput
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingArgs struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape SapLandscapeMonitorSidMappingArrayInput `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication SapLandscapeMonitorSidMappingArrayInput `pulumi:"sapApplication"`
}

func (SapLandscapeMonitorPropertiesGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput)
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput).ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx)
}

// SapLandscapeMonitorPropertiesGroupingPtrInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs, SapLandscapeMonitorPropertiesGroupingPtr and SapLandscapeMonitorPropertiesGroupingPtrOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingPtrInput` via:
//
//	        SapLandscapeMonitorPropertiesGroupingArgs{...}
//
//	or:
//
//	        nil
type SapLandscapeMonitorPropertiesGroupingPtrInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput
	ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput
}

type sapLandscapeMonitorPropertiesGroupingPtrType SapLandscapeMonitorPropertiesGroupingArgs

func SapLandscapeMonitorPropertiesGroupingPtr(v *SapLandscapeMonitorPropertiesGroupingArgs) SapLandscapeMonitorPropertiesGroupingPtrInput {
	return (*sapLandscapeMonitorPropertiesGroupingPtrType)(v)
}

func (*sapLandscapeMonitorPropertiesGroupingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapLandscapeMonitorPropertiesGrouping) *SapLandscapeMonitorPropertiesGrouping {
		return &v
	}).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.Landscape }).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.SapApplication }).(SapLandscapeMonitorSidMappingArrayOutput)
}

type SapLandscapeMonitorPropertiesGroupingPtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Elem() SapLandscapeMonitorPropertiesGroupingOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) SapLandscapeMonitorPropertiesGrouping {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesGrouping
		return ret
	}).(SapLandscapeMonitorPropertiesGroupingOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingResponse struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMappingResponse `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMappingResponse `pulumi:"sapApplication"`
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGroupingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingResponseOutput) ToSapLandscapeMonitorPropertiesGroupingResponseOutput() SapLandscapeMonitorPropertiesGroupingResponseOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingResponseOutput) ToSapLandscapeMonitorPropertiesGroupingResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingResponseOutput {
	return o
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingResponseOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGroupingResponse) []SapLandscapeMonitorSidMappingResponse {
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingResponseOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGroupingResponse) []SapLandscapeMonitorSidMappingResponse {
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

type SapLandscapeMonitorPropertiesGroupingResponsePtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGroupingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) ToSapLandscapeMonitorPropertiesGroupingResponsePtrOutput() SapLandscapeMonitorPropertiesGroupingResponsePtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) ToSapLandscapeMonitorPropertiesGroupingResponsePtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingResponsePtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) Elem() SapLandscapeMonitorPropertiesGroupingResponseOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGroupingResponse) SapLandscapeMonitorPropertiesGroupingResponse {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesGroupingResponse
		return ret
	}).(SapLandscapeMonitorPropertiesGroupingResponseOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGroupingResponse) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingResponsePtrOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGroupingResponse) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMapping struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// SapLandscapeMonitorSidMappingInput is an input type that accepts SapLandscapeMonitorSidMappingArgs and SapLandscapeMonitorSidMappingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingInput` via:
//
//	SapLandscapeMonitorSidMappingArgs{...}
type SapLandscapeMonitorSidMappingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput
	ToSapLandscapeMonitorSidMappingOutputWithContext(context.Context) SapLandscapeMonitorSidMappingOutput
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingArgs struct {
	// Gets or sets the name of the grouping.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid pulumi.StringArrayInput `pulumi:"topSid"`
}

func (SapLandscapeMonitorSidMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return i.ToSapLandscapeMonitorSidMappingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingOutput)
}

// SapLandscapeMonitorSidMappingArrayInput is an input type that accepts SapLandscapeMonitorSidMappingArray and SapLandscapeMonitorSidMappingArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingArrayInput` via:
//
//	SapLandscapeMonitorSidMappingArray{ SapLandscapeMonitorSidMappingArgs{...} }
type SapLandscapeMonitorSidMappingArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput
	ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Context) SapLandscapeMonitorSidMappingArrayOutput
}

type SapLandscapeMonitorSidMappingArray []SapLandscapeMonitorSidMappingInput

func (SapLandscapeMonitorSidMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return i.ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMapping {
		return vs[0].([]SapLandscapeMonitorSidMapping)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponse struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutput() SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingResponseOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutput() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMappingResponse {
		return vs[0].([]SapLandscapeMonitorSidMappingResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingResponseOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstanceProperties struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// SapNetWeaverProviderInstancePropertiesInput is an input type that accepts SapNetWeaverProviderInstancePropertiesArgs and SapNetWeaverProviderInstancePropertiesOutput values.
// You can construct a concrete instance of `SapNetWeaverProviderInstancePropertiesInput` via:
//
//	SapNetWeaverProviderInstancePropertiesArgs{...}
type SapNetWeaverProviderInstancePropertiesInput interface {
	pulumi.Input

	ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput
	ToSapNetWeaverProviderInstancePropertiesOutputWithContext(context.Context) SapNetWeaverProviderInstancePropertiesOutput
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesArgs struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType pulumi.StringInput `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId pulumi.StringPtrInput `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries pulumi.StringArrayInput `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname pulumi.StringPtrInput `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr pulumi.StringPtrInput `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword pulumi.StringPtrInput `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri pulumi.StringPtrInput `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber pulumi.StringPtrInput `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid pulumi.StringPtrInput `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername pulumi.StringPtrInput `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri pulumi.StringPtrInput `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference pulumi.StringPtrInput `pulumi:"sslPreference"`
}

func (SapNetWeaverProviderInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesOutputWithContext(context.Background())
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesOutput)
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i SapNetWeaverProviderInstancePropertiesArgs) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesOutput).ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx)
}

// SapNetWeaverProviderInstancePropertiesPtrInput is an input type that accepts SapNetWeaverProviderInstancePropertiesArgs, SapNetWeaverProviderInstancePropertiesPtr and SapNetWeaverProviderInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `SapNetWeaverProviderInstancePropertiesPtrInput` via:
//
//	        SapNetWeaverProviderInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type SapNetWeaverProviderInstancePropertiesPtrInput interface {
	pulumi.Input

	ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput
	ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput
}

type sapNetWeaverProviderInstancePropertiesPtrType SapNetWeaverProviderInstancePropertiesArgs

func SapNetWeaverProviderInstancePropertiesPtr(v *SapNetWeaverProviderInstancePropertiesArgs) SapNetWeaverProviderInstancePropertiesPtrInput {
	return (*sapNetWeaverProviderInstancePropertiesPtrType)(v)
}

func (*sapNetWeaverProviderInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (i *sapNetWeaverProviderInstancePropertiesPtrType) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return i.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *sapNetWeaverProviderInstancePropertiesPtrType) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapNetWeaverProviderInstancePropertiesPtrOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesOutput() SapNetWeaverProviderInstancePropertiesOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o.ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o SapNetWeaverProviderInstancePropertiesOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapNetWeaverProviderInstanceProperties) *SapNetWeaverProviderInstanceProperties {
		return &v
	}).(SapNetWeaverProviderInstancePropertiesPtrOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapClientId }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) []string { return v.SapHostFileEntries }).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapHostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapInstanceNr }).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapPortNumber }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SapUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstanceProperties) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type SapNetWeaverProviderInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstanceProperties)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutput() SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ToSapNetWeaverProviderInstancePropertiesPtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesPtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesPtrOutput) Elem() SapNetWeaverProviderInstancePropertiesOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) SapNetWeaverProviderInstanceProperties {
		if v != nil {
			return *v
		}
		var ret SapNetWeaverProviderInstanceProperties
		return ret
	}).(SapNetWeaverProviderInstancePropertiesOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapClientId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) []string {
		if v == nil {
			return nil
		}
		return v.SapHostFileEntries
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapHostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapInstanceNr
	}).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapPortNumber
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SapUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesPtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesResponse struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapNetWeaverProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ToSapNetWeaverProviderInstancePropertiesResponseOutput() SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ToSapNetWeaverProviderInstancePropertiesResponseOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) ProviderType() pulumi.StringOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) string { return v.ProviderType }).(pulumi.StringOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapClientId }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) []string { return v.SapHostFileEntries }).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapHostname }).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapInstanceNr }).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPassword }).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPasswordUri }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapPortNumber }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapSid }).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SapUsername }).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SslCertificateUri }).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesResponseOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapNetWeaverProviderInstancePropertiesResponse) *string { return v.SslPreference }).(pulumi.StringPtrOutput)
}

type SapNetWeaverProviderInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapNetWeaverProviderInstancePropertiesResponse)(nil)).Elem()
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ToSapNetWeaverProviderInstancePropertiesResponsePtrOutput() SapNetWeaverProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ToSapNetWeaverProviderInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) SapNetWeaverProviderInstancePropertiesResponsePtrOutput {
	return o
}

func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) Elem() SapNetWeaverProviderInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) SapNetWeaverProviderInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret SapNetWeaverProviderInstancePropertiesResponse
		return ret
	}).(SapNetWeaverProviderInstancePropertiesResponseOutput)
}

// The provider type. For example, the value can be SapHana.
// Expected value is 'SapNetWeaver'.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) ProviderType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderType
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP Client ID.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapClientId
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the list of HostFile Entries
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapHostFileEntries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.SapHostFileEntries
	}).(pulumi.StringArrayOutput)
}

// Gets or sets the target virtual machine IP Address/FQDN.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapHostname
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the instance number of SAP NetWeaver.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapInstanceNr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapInstanceNr
	}).(pulumi.StringPtrOutput)
}

// Sets the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPassword
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the key vault URI to secret with the SAP password.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPasswordUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPasswordUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP HTTP port number.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapPortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapPortNumber
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP System Identifier
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapSid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapSid
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the SAP user name.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SapUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SapUsername
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the blob URI to SSL certificate for the SAP system.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SslCertificateUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslCertificateUri
	}).(pulumi.StringPtrOutput)
}

// Gets or sets certificate preference if secure communication is enabled.
func (o SapNetWeaverProviderInstancePropertiesResponsePtrOutput) SslPreference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapNetWeaverProviderInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SslPreference
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AppServicePlanConfigurationOutput{})
	pulumi.RegisterOutputType(AppServicePlanConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AppServicePlanConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AppServicePlanConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(Db2ProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(Db2ProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(Db2ProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(Db2ProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(HanaDbProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HealthResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(MsSqlServerProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrometheusHaClusterProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrometheusOsProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(PrometheusOsProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrometheusOsProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrometheusOsProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingPtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingResponsePtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SapNetWeaverProviderInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
