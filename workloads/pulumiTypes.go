// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Gets or sets the application server configuration.
type ApplicationServerConfiguration struct {
	// The number of app server instances.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the application server configuration.
type ApplicationServerConfigurationResponse struct {
	// The number of app server instances.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
type ApplicationServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// The Application Server VM Details.
type ApplicationServerVmDetailsResponse struct {
	// Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails []StorageInformationResponse `pulumi:"storageDetails"`
	// Defines the type of application server VM.
	Type             string `pulumi:"type"`
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The Application Server VM Details.
type ApplicationServerVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (ApplicationServerVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationServerVmDetailsResponse)(nil)).Elem()
}

func (o ApplicationServerVmDetailsResponseOutput) ToApplicationServerVmDetailsResponseOutput() ApplicationServerVmDetailsResponseOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseOutput) ToApplicationServerVmDetailsResponseOutputWithContext(ctx context.Context) ApplicationServerVmDetailsResponseOutput {
	return o
}

// Storage details of all the Storage Accounts attached to the App Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o ApplicationServerVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

// Defines the type of application server VM.
func (o ApplicationServerVmDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o ApplicationServerVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationServerVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type ApplicationServerVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (ApplicationServerVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApplicationServerVmDetailsResponse)(nil)).Elem()
}

func (o ApplicationServerVmDetailsResponseArrayOutput) ToApplicationServerVmDetailsResponseArrayOutput() ApplicationServerVmDetailsResponseArrayOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseArrayOutput) ToApplicationServerVmDetailsResponseArrayOutputWithContext(ctx context.Context) ApplicationServerVmDetailsResponseArrayOutput {
	return o
}

func (o ApplicationServerVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) ApplicationServerVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApplicationServerVmDetailsResponse {
		return vs[0].([]ApplicationServerVmDetailsResponse)[vs[1].(int)]
	}).(ApplicationServerVmDetailsResponseOutput)
}

// Gets or sets the central server configuration.
type CentralServerConfiguration struct {
	// The number of central server VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the central server configuration.
type CentralServerConfigurationResponse struct {
	// The number of central server VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNames `pulumi:"loadBalancer"`
	// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// The full resource names object for central server layer resources.
type CentralServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNamesResponse `pulumi:"loadBalancer"`
	// The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// The SAP Central Services Instance VM details.
type CentralServerVmDetailsResponse struct {
	// Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails []StorageInformationResponse `pulumi:"storageDetails"`
	// Defines the type of central server VM.
	Type             string `pulumi:"type"`
	VirtualMachineId string `pulumi:"virtualMachineId"`
}

// The SAP Central Services Instance VM details.
type CentralServerVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (CentralServerVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CentralServerVmDetailsResponse)(nil)).Elem()
}

func (o CentralServerVmDetailsResponseOutput) ToCentralServerVmDetailsResponseOutput() CentralServerVmDetailsResponseOutput {
	return o
}

func (o CentralServerVmDetailsResponseOutput) ToCentralServerVmDetailsResponseOutputWithContext(ctx context.Context) CentralServerVmDetailsResponseOutput {
	return o
}

// Storage details of all the Storage Accounts attached to the ASCS Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o CentralServerVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

// Defines the type of central server VM.
func (o CentralServerVmDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

func (o CentralServerVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v CentralServerVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type CentralServerVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (CentralServerVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CentralServerVmDetailsResponse)(nil)).Elem()
}

func (o CentralServerVmDetailsResponseArrayOutput) ToCentralServerVmDetailsResponseArrayOutput() CentralServerVmDetailsResponseArrayOutput {
	return o
}

func (o CentralServerVmDetailsResponseArrayOutput) ToCentralServerVmDetailsResponseArrayOutputWithContext(ctx context.Context) CentralServerVmDetailsResponseArrayOutput {
	return o
}

func (o CentralServerVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) CentralServerVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CentralServerVmDetailsResponse {
		return vs[0].([]CentralServerVmDetailsResponse)[vs[1].(int)]
	}).(CentralServerVmDetailsResponseOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn’t need to pre-created.
type CreateAndMountFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'CreateAndMount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The name of file share storage account name . A custom name is used in case of missing input.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// Gets or sets the file share configuration where the transport directory fileshare is created and mounted as a part of the create infra flow. Please pre-create the resource group you intend to place the transport directory in. The storage account and fileshare will be auto-created by the ACSS and doesn’t need to pre-created.
type CreateAndMountFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'CreateAndMount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The name of file share storage account name . A custom name is used in case of missing input.
	StorageAccountName *string `pulumi:"storageAccountName"`
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstanceProperties struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the DB2 provider properties.
type DB2ProviderInstancePropertiesResponse struct {
	// Gets or sets the db2 database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the db2 database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the db2 database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the db2 database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'Db2'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the DB2 Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the database configuration.
type DatabaseConfiguration struct {
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DiskConfiguration *DiskConfiguration `pulumi:"diskConfiguration"`
	// The number of database VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// Gets or sets the database configuration.
type DatabaseConfigurationResponse struct {
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DiskConfiguration *DiskConfigurationResponse `pulumi:"diskConfiguration"`
	// The number of database VMs.
	InstanceCount float64 `pulumi:"instanceCount"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNames struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNames `pulumi:"loadBalancer"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNames `pulumi:"virtualMachines"`
}

// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
type DatabaseServerFullResourceNamesResponse struct {
	// The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.
	AvailabilitySetName *string `pulumi:"availabilitySetName"`
	// The resource names object for load balancer and related resources.
	LoadBalancer *LoadBalancerResourceNamesResponse `pulumi:"loadBalancer"`
	// The list of virtual machine naming details.
	VirtualMachines []VirtualMachineResourceNamesResponse `pulumi:"virtualMachines"`
}

// Database VM details.
type DatabaseVmDetailsResponse struct {
	// Defines the SAP Instance status.
	Status string `pulumi:"status"`
	// Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
	StorageDetails   []StorageInformationResponse `pulumi:"storageDetails"`
	VirtualMachineId string                       `pulumi:"virtualMachineId"`
}

// Database VM details.
type DatabaseVmDetailsResponseOutput struct{ *pulumi.OutputState }

func (DatabaseVmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseVmDetailsResponse)(nil)).Elem()
}

func (o DatabaseVmDetailsResponseOutput) ToDatabaseVmDetailsResponseOutput() DatabaseVmDetailsResponseOutput {
	return o
}

func (o DatabaseVmDetailsResponseOutput) ToDatabaseVmDetailsResponseOutputWithContext(ctx context.Context) DatabaseVmDetailsResponseOutput {
	return o
}

// Defines the SAP Instance status.
func (o DatabaseVmDetailsResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Storage details of all the Storage Accounts attached to the Database Virtual Machine. For e.g. NFS on AFS Shared Storage.
func (o DatabaseVmDetailsResponseOutput) StorageDetails() StorageInformationResponseArrayOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) []StorageInformationResponse { return v.StorageDetails }).(StorageInformationResponseArrayOutput)
}

func (o DatabaseVmDetailsResponseOutput) VirtualMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseVmDetailsResponse) string { return v.VirtualMachineId }).(pulumi.StringOutput)
}

type DatabaseVmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseVmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseVmDetailsResponse)(nil)).Elem()
}

func (o DatabaseVmDetailsResponseArrayOutput) ToDatabaseVmDetailsResponseArrayOutput() DatabaseVmDetailsResponseArrayOutput {
	return o
}

func (o DatabaseVmDetailsResponseArrayOutput) ToDatabaseVmDetailsResponseArrayOutputWithContext(ctx context.Context) DatabaseVmDetailsResponseArrayOutput {
	return o
}

func (o DatabaseVmDetailsResponseArrayOutput) Index(i pulumi.IntInput) DatabaseVmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseVmDetailsResponse {
		return vs[0].([]DatabaseVmDetailsResponse)[vs[1].(int)]
	}).(DatabaseVmDetailsResponseOutput)
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackages struct {
	// The deployer VM packages storage account id
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The URL to the deployer VM packages file.
	Url *string `pulumi:"url"`
}

// Defines the url and storage account ID where deployer VM packages are uploaded
type DeployerVmPackagesResponse struct {
	// The deployer VM packages storage account id
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The URL to the deployer VM packages file.
	Url *string `pulumi:"url"`
}

// Deployment Configuration.
type DeploymentConfiguration struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'Deployment'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Deployment Configuration.
type DeploymentConfigurationResponse struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'Deployment'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfiguration struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'DeploymentWithOSConfig'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The OS and SAP configuration.
	OsSapConfiguration *OsSapConfiguration `pulumi:"osSapConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Deployment along with OS Configuration.
type DeploymentWithOSConfigurationResponse struct {
	// The geo-location where the SAP system is to be created.
	AppLocation *string `pulumi:"appLocation"`
	// The configuration Type.
	// Expected value is 'DeploymentWithOSConfig'.
	ConfigurationType string `pulumi:"configurationType"`
	// The infrastructure configuration.
	InfrastructureConfiguration interface{} `pulumi:"infrastructureConfiguration"`
	// The OS and SAP configuration.
	OsSapConfiguration *OsSapConfigurationResponse `pulumi:"osSapConfiguration"`
	// The software configuration.
	SoftwareConfiguration interface{} `pulumi:"softwareConfiguration"`
}

// Discovery Details.
type DiscoveryConfiguration struct {
	// The virtual machine ID of the Central Server.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The configuration Type.
	// Expected value is 'Discovery'.
	ConfigurationType string `pulumi:"configurationType"`
	// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
	ManagedRgStorageAccountName *string `pulumi:"managedRgStorageAccountName"`
}

// Discovery Details.
type DiscoveryConfigurationResponse struct {
	// The geo-location where the SAP system exists.
	AppLocation string `pulumi:"appLocation"`
	// The virtual machine ID of the Central Server.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The configuration Type.
	// Expected value is 'Discovery'.
	ConfigurationType string `pulumi:"configurationType"`
	// The custom storage account name for the storage account created by the service in the managed resource group created as part of VIS deployment.<br><br>Refer to the storage account naming rules [here](https://learn.microsoft.com/azure/azure-resource-manager/management/resource-name-rules#microsoftstorage).<br><br>If not provided, the service will create the storage account with a random name.
	ManagedRgStorageAccountName *string `pulumi:"managedRgStorageAccountName"`
}

// The Disk Configuration Details.
type DiskConfiguration struct {
	// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
	DiskVolumeConfigurations map[string]DiskVolumeConfiguration `pulumi:"diskVolumeConfigurations"`
}

// The Disk Configuration Details.
type DiskConfigurationResponse struct {
	// The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].
	DiskVolumeConfigurations map[string]DiskVolumeConfigurationResponse `pulumi:"diskVolumeConfigurations"`
}

// The supported disk size details for a disk type.
type DiskDetailsResponse struct {
	// The disk tier, e.g. P10, E10.
	DiskTier *string `pulumi:"diskTier"`
	// The disk Iops.
	IopsReadWrite *float64 `pulumi:"iopsReadWrite"`
	// The maximum supported disk count.
	MaximumSupportedDiskCount *float64 `pulumi:"maximumSupportedDiskCount"`
	// The disk provisioned throughput in MBps.
	MbpsReadWrite *float64 `pulumi:"mbpsReadWrite"`
	// The minimum supported disk count.
	MinimumSupportedDiskCount *float64 `pulumi:"minimumSupportedDiskCount"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
	Sku *DiskSkuResponse `pulumi:"sku"`
}

// The supported disk size details for a disk type.
type DiskDetailsResponseOutput struct{ *pulumi.OutputState }

func (DiskDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskDetailsResponse)(nil)).Elem()
}

func (o DiskDetailsResponseOutput) ToDiskDetailsResponseOutput() DiskDetailsResponseOutput {
	return o
}

func (o DiskDetailsResponseOutput) ToDiskDetailsResponseOutputWithContext(ctx context.Context) DiskDetailsResponseOutput {
	return o
}

// The disk tier, e.g. P10, E10.
func (o DiskDetailsResponseOutput) DiskTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *string { return v.DiskTier }).(pulumi.StringPtrOutput)
}

// The disk Iops.
func (o DiskDetailsResponseOutput) IopsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.IopsReadWrite }).(pulumi.Float64PtrOutput)
}

// The maximum supported disk count.
func (o DiskDetailsResponseOutput) MaximumSupportedDiskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MaximumSupportedDiskCount }).(pulumi.Float64PtrOutput)
}

// The disk provisioned throughput in MBps.
func (o DiskDetailsResponseOutput) MbpsReadWrite() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MbpsReadWrite }).(pulumi.Float64PtrOutput)
}

// The minimum supported disk count.
func (o DiskDetailsResponseOutput) MinimumSupportedDiskCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.MinimumSupportedDiskCount }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskDetailsResponseOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
func (o DiskDetailsResponseOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskDetailsResponse) *DiskSkuResponse { return v.Sku }).(DiskSkuResponsePtrOutput)
}

type DiskDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskDetailsResponse)(nil)).Elem()
}

func (o DiskDetailsResponseArrayOutput) ToDiskDetailsResponseArrayOutput() DiskDetailsResponseArrayOutput {
	return o
}

func (o DiskDetailsResponseArrayOutput) ToDiskDetailsResponseArrayOutputWithContext(ctx context.Context) DiskDetailsResponseArrayOutput {
	return o
}

func (o DiskDetailsResponseArrayOutput) Index(i pulumi.IntInput) DiskDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskDetailsResponse {
		return vs[0].([]DiskDetailsResponse)[vs[1].(int)]
	}).(DiskDetailsResponseOutput)
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSku struct {
	// Defines the disk sku name.
	Name *string `pulumi:"name"`
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuResponse struct {
	// Defines the disk sku name.
	Name *string `pulumi:"name"`
}

// The type of disk sku. For example, Standard_LRS, Standard_ZRS, Premium_LRS, Premium_ZRS.
type DiskSkuResponseOutput struct{ *pulumi.OutputState }

func (DiskSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutput() DiskSkuResponseOutput {
	return o
}

func (o DiskSkuResponseOutput) ToDiskSkuResponseOutputWithContext(ctx context.Context) DiskSkuResponseOutput {
	return o
}

// Defines the disk sku name.
func (o DiskSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DiskSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskSkuResponse)(nil)).Elem()
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutput() DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) ToDiskSkuResponsePtrOutputWithContext(ctx context.Context) DiskSkuResponsePtrOutput {
	return o
}

func (o DiskSkuResponsePtrOutput) Elem() DiskSkuResponseOutput {
	return o.ApplyT(func(v *DiskSkuResponse) DiskSkuResponse {
		if v != nil {
			return *v
		}
		var ret DiskSkuResponse
		return ret
	}).(DiskSkuResponseOutput)
}

// Defines the disk sku name.
func (o DiskSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The disk configuration required for the selected volume.
type DiskVolumeConfiguration struct {
	// The total number of disks required for the concerned volume.
	Count *float64 `pulumi:"count"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The disk SKU details.
	Sku *DiskSku `pulumi:"sku"`
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationResponse struct {
	// The total number of disks required for the concerned volume.
	Count *float64 `pulumi:"count"`
	// The disk size in GB.
	SizeGB *float64 `pulumi:"sizeGB"`
	// The disk SKU details.
	Sku *DiskSkuResponse `pulumi:"sku"`
}

// The disk configuration required for the selected volume.
type DiskVolumeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskVolumeConfigurationResponse)(nil)).Elem()
}

func (o DiskVolumeConfigurationResponseOutput) ToDiskVolumeConfigurationResponseOutput() DiskVolumeConfigurationResponseOutput {
	return o
}

func (o DiskVolumeConfigurationResponseOutput) ToDiskVolumeConfigurationResponseOutputWithContext(ctx context.Context) DiskVolumeConfigurationResponseOutput {
	return o
}

// The total number of disks required for the concerned volume.
func (o DiskVolumeConfigurationResponseOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskVolumeConfigurationResponseOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *float64 { return v.SizeGB }).(pulumi.Float64PtrOutput)
}

// The disk SKU details.
func (o DiskVolumeConfigurationResponseOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v DiskVolumeConfigurationResponse) *DiskSkuResponse { return v.Sku }).(DiskSkuResponsePtrOutput)
}

type DiskVolumeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DiskVolumeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskVolumeConfigurationResponse)(nil)).Elem()
}

func (o DiskVolumeConfigurationResponsePtrOutput) ToDiskVolumeConfigurationResponsePtrOutput() DiskVolumeConfigurationResponsePtrOutput {
	return o
}

func (o DiskVolumeConfigurationResponsePtrOutput) ToDiskVolumeConfigurationResponsePtrOutputWithContext(ctx context.Context) DiskVolumeConfigurationResponsePtrOutput {
	return o
}

func (o DiskVolumeConfigurationResponsePtrOutput) Elem() DiskVolumeConfigurationResponseOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) DiskVolumeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DiskVolumeConfigurationResponse
		return ret
	}).(DiskVolumeConfigurationResponseOutput)
}

// The total number of disks required for the concerned volume.
func (o DiskVolumeConfigurationResponsePtrOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.Float64PtrOutput)
}

// The disk size in GB.
func (o DiskVolumeConfigurationResponsePtrOutput) SizeGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SizeGB
	}).(pulumi.Float64PtrOutput)
}

// The disk SKU details.
func (o DiskVolumeConfigurationResponsePtrOutput) Sku() DiskSkuResponsePtrOutput {
	return o.ApplyT(func(v *DiskVolumeConfigurationResponse) *DiskSkuResponse {
		if v == nil {
			return nil
		}
		return v.Sku
	}).(DiskSkuResponsePtrOutput)
}

// Defines the SAP Enqueue Replication Server (ERS) properties.
type EnqueueReplicationServerPropertiesResponse struct {
	// Defines the type of Enqueue Replication Server.
	ErsVersion string `pulumi:"ersVersion"`
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// ERS SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// ERS Instance Number.
	InstanceNo string `pulumi:"instanceNo"`
	// ERS SAP IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// ERS SAP Kernel Patch level.
	KernelPatch string `pulumi:"kernelPatch"`
	// ERS SAP Kernel Version.
	KernelVersion string `pulumi:"kernelVersion"`
}

// Defines the SAP Enqueue Replication Server (ERS) properties.
type EnqueueReplicationServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EnqueueReplicationServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnqueueReplicationServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueReplicationServerPropertiesResponseOutput) ToEnqueueReplicationServerPropertiesResponseOutput() EnqueueReplicationServerPropertiesResponseOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponseOutput) ToEnqueueReplicationServerPropertiesResponseOutputWithContext(ctx context.Context) EnqueueReplicationServerPropertiesResponseOutput {
	return o
}

// Defines the type of Enqueue Replication Server.
func (o EnqueueReplicationServerPropertiesResponseOutput) ErsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.ErsVersion }).(pulumi.StringOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueReplicationServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// ERS SAP Hostname.
func (o EnqueueReplicationServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// ERS Instance Number.
func (o EnqueueReplicationServerPropertiesResponseOutput) InstanceNo() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.InstanceNo }).(pulumi.StringOutput)
}

// ERS SAP IP Address.
func (o EnqueueReplicationServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// ERS SAP Kernel Patch level.
func (o EnqueueReplicationServerPropertiesResponseOutput) KernelPatch() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.KernelPatch }).(pulumi.StringOutput)
}

// ERS SAP Kernel Version.
func (o EnqueueReplicationServerPropertiesResponseOutput) KernelVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueReplicationServerPropertiesResponse) string { return v.KernelVersion }).(pulumi.StringOutput)
}

type EnqueueReplicationServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EnqueueReplicationServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnqueueReplicationServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ToEnqueueReplicationServerPropertiesResponsePtrOutput() EnqueueReplicationServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ToEnqueueReplicationServerPropertiesResponsePtrOutputWithContext(ctx context.Context) EnqueueReplicationServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Elem() EnqueueReplicationServerPropertiesResponseOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) EnqueueReplicationServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EnqueueReplicationServerPropertiesResponse
		return ret
	}).(EnqueueReplicationServerPropertiesResponseOutput)
}

// Defines the type of Enqueue Replication Server.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) ErsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErsVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Hostname.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// ERS Instance Number.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) InstanceNo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InstanceNo
	}).(pulumi.StringPtrOutput)
}

// ERS SAP IP Address.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Kernel Patch level.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) KernelPatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KernelPatch
	}).(pulumi.StringPtrOutput)
}

// ERS SAP Kernel Version.
func (o EnqueueReplicationServerPropertiesResponsePtrOutput) KernelVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueReplicationServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KernelVersion
	}).(pulumi.StringPtrOutput)
}

// Defines the SAP Enqueue Server properties.
type EnqueueServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Enqueue Server SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// Enqueue Server SAP IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Enqueue Server Port.
	Port float64 `pulumi:"port"`
}

// Defines the SAP Enqueue Server properties.
type EnqueueServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EnqueueServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnqueueServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueServerPropertiesResponseOutput) ToEnqueueServerPropertiesResponseOutput() EnqueueServerPropertiesResponseOutput {
	return o
}

func (o EnqueueServerPropertiesResponseOutput) ToEnqueueServerPropertiesResponseOutputWithContext(ctx context.Context) EnqueueServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o EnqueueServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// Enqueue Server SAP Hostname.
func (o EnqueueServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Enqueue Server SAP IP Address.
func (o EnqueueServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Enqueue Server Port.
func (o EnqueueServerPropertiesResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v EnqueueServerPropertiesResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

type EnqueueServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EnqueueServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnqueueServerPropertiesResponse)(nil)).Elem()
}

func (o EnqueueServerPropertiesResponsePtrOutput) ToEnqueueServerPropertiesResponsePtrOutput() EnqueueServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueServerPropertiesResponsePtrOutput) ToEnqueueServerPropertiesResponsePtrOutputWithContext(ctx context.Context) EnqueueServerPropertiesResponsePtrOutput {
	return o
}

func (o EnqueueServerPropertiesResponsePtrOutput) Elem() EnqueueServerPropertiesResponseOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) EnqueueServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EnqueueServerPropertiesResponse
		return ret
	}).(EnqueueServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o EnqueueServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server SAP Hostname.
func (o EnqueueServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server SAP IP Address.
func (o EnqueueServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// Enqueue Server Port.
func (o EnqueueServerPropertiesResponsePtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EnqueueServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// Error definition.
type ErrorDefinitionResponse struct {
	// Service specific error code which serves as the substatus for the HTTP error code.
	Code string `pulumi:"code"`
	// Internal error details.
	Details []ErrorDefinitionResponse `pulumi:"details"`
	// Description of the error.
	Message string `pulumi:"message"`
}

// Error definition.
type ErrorDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutput() ErrorDefinitionResponseOutput {
	return o
}

func (o ErrorDefinitionResponseOutput) ToErrorDefinitionResponseOutputWithContext(ctx context.Context) ErrorDefinitionResponseOutput {
	return o
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Internal error details.
func (o ErrorDefinitionResponseOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) []ErrorDefinitionResponse { return v.Details }).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDefinitionResponse) string { return v.Message }).(pulumi.StringOutput)
}

type ErrorDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutput() ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) ToErrorDefinitionResponsePtrOutputWithContext(ctx context.Context) ErrorDefinitionResponsePtrOutput {
	return o
}

func (o ErrorDefinitionResponsePtrOutput) Elem() ErrorDefinitionResponseOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) ErrorDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDefinitionResponse
		return ret
	}).(ErrorDefinitionResponseOutput)
}

// Service specific error code which serves as the substatus for the HTTP error code.
func (o ErrorDefinitionResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Internal error details.
func (o ErrorDefinitionResponsePtrOutput) Details() ErrorDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) []ErrorDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDefinitionResponseArrayOutput)
}

// Description of the error.
func (o ErrorDefinitionResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

type ErrorDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDefinitionResponse)(nil)).Elem()
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutput() ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) ToErrorDefinitionResponseArrayOutputWithContext(ctx context.Context) ErrorDefinitionResponseArrayOutput {
	return o
}

func (o ErrorDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ErrorDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDefinitionResponse {
		return vs[0].([]ErrorDefinitionResponse)[vs[1].(int)]
	}).(ErrorDefinitionResponseOutput)
}

// Standard error object.
type ErrorResponse struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Standard error object.
type ErrorResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseOutput) ToErrorResponseOutput() ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return o
}

// Server-defined set of error codes.
func (o ErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ErrorResponseOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v ErrorResponse) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ErrorResponseOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v ErrorResponse) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o ErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o ErrorResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponse)(nil)).Elem()
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) Elem() ErrorResponseOutput {
	return o.ApplyT(func(v *ErrorResponse) ErrorResponse {
		if v != nil {
			return *v
		}
		var ret ErrorResponse
		return ret
	}).(ErrorResponseOutput)
}

// Server-defined set of error codes.
func (o ErrorResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ErrorResponsePtrOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v *ErrorResponse) []ErrorResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ErrorResponsePtrOutput) InnerError() ErrorResponseInnerErrorPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *ErrorResponseInnerError {
		if v == nil {
			return nil
		}
		return &v.InnerError
	}).(ErrorResponseInnerErrorPtrOutput)
}

// Human-readable representation of the error.
func (o ErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// Target of the error.
func (o ErrorResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutput() ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutputWithContext(ctx context.Context) ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponse {
		return vs[0].([]ErrorResponse)[vs[1].(int)]
	}).(ErrorResponseOutput)
}

// Object containing more specific information than  the current object about the error.
type ErrorResponseInnerError struct {
	// Standard error object.
	InnerError *ErrorResponse `pulumi:"innerError"`
}

// Object containing more specific information than  the current object about the error.
type ErrorResponseInnerErrorOutput struct{ *pulumi.OutputState }

func (ErrorResponseInnerErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponseInnerError)(nil)).Elem()
}

func (o ErrorResponseInnerErrorOutput) ToErrorResponseInnerErrorOutput() ErrorResponseInnerErrorOutput {
	return o
}

func (o ErrorResponseInnerErrorOutput) ToErrorResponseInnerErrorOutputWithContext(ctx context.Context) ErrorResponseInnerErrorOutput {
	return o
}

// Standard error object.
func (o ErrorResponseInnerErrorOutput) InnerError() ErrorResponsePtrOutput {
	return o.ApplyT(func(v ErrorResponseInnerError) *ErrorResponse { return v.InnerError }).(ErrorResponsePtrOutput)
}

type ErrorResponseInnerErrorPtrOutput struct{ *pulumi.OutputState }

func (ErrorResponseInnerErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponseInnerError)(nil)).Elem()
}

func (o ErrorResponseInnerErrorPtrOutput) ToErrorResponseInnerErrorPtrOutput() ErrorResponseInnerErrorPtrOutput {
	return o
}

func (o ErrorResponseInnerErrorPtrOutput) ToErrorResponseInnerErrorPtrOutputWithContext(ctx context.Context) ErrorResponseInnerErrorPtrOutput {
	return o
}

func (o ErrorResponseInnerErrorPtrOutput) Elem() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v *ErrorResponseInnerError) ErrorResponseInnerError {
		if v != nil {
			return *v
		}
		var ret ErrorResponseInnerError
		return ret
	}).(ErrorResponseInnerErrorOutput)
}

// Standard error object.
func (o ErrorResponseInnerErrorPtrOutput) InnerError() ErrorResponsePtrOutput {
	return o.ApplyT(func(v *ErrorResponseInnerError) *ErrorResponse {
		if v == nil {
			return nil
		}
		return v.InnerError
	}).(ErrorResponsePtrOutput)
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfiguration struct {
	// The resource ID of the virtual machine containing the central server instance.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The SAP software installation Type.
	// Expected value is 'External'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
}

// The SAP Software configuration Input when the software is installed externally outside the service.
type ExternalInstallationSoftwareConfigurationResponse struct {
	// The resource ID of the virtual machine containing the central server instance.
	CentralServerVmId *string `pulumi:"centralServerVmId"`
	// The SAP software installation Type.
	// Expected value is 'External'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
}

// Defines the SAP Gateway Server properties.
type GatewayServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Gateway Port.
	Port float64 `pulumi:"port"`
}

// Defines the SAP Gateway Server properties.
type GatewayServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GatewayServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayServerPropertiesResponse)(nil)).Elem()
}

func (o GatewayServerPropertiesResponseOutput) ToGatewayServerPropertiesResponseOutput() GatewayServerPropertiesResponseOutput {
	return o
}

func (o GatewayServerPropertiesResponseOutput) ToGatewayServerPropertiesResponseOutputWithContext(ctx context.Context) GatewayServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o GatewayServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// Gateway Port.
func (o GatewayServerPropertiesResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v GatewayServerPropertiesResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

type GatewayServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (GatewayServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayServerPropertiesResponse)(nil)).Elem()
}

func (o GatewayServerPropertiesResponsePtrOutput) ToGatewayServerPropertiesResponsePtrOutput() GatewayServerPropertiesResponsePtrOutput {
	return o
}

func (o GatewayServerPropertiesResponsePtrOutput) ToGatewayServerPropertiesResponsePtrOutputWithContext(ctx context.Context) GatewayServerPropertiesResponsePtrOutput {
	return o
}

func (o GatewayServerPropertiesResponsePtrOutput) Elem() GatewayServerPropertiesResponseOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) GatewayServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret GatewayServerPropertiesResponse
		return ret
	}).(GatewayServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o GatewayServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// Gateway Port.
func (o GatewayServerPropertiesResponsePtrOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GatewayServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.Float64PtrOutput)
}

// Gets or sets the provider properties.
type HanaDbProviderInstanceProperties struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type HanaDbProviderInstancePropertiesResponse struct {
	// Gets or sets the hana database name.
	DbName *string `pulumi:"dbName"`
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the target virtual machine size.
	Hostname *string `pulumi:"hostname"`
	// Gets or sets the database instance number.
	InstanceNumber *string `pulumi:"instanceNumber"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapHana'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier.
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the database sql port.
	SqlPort *string `pulumi:"sqlPort"`
	// Gets or sets the blob URI to SSL certificate for the DB.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets the hostname(s) in the SSL certificate.
	SslHostNameInCertificate *string `pulumi:"sslHostNameInCertificate"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfiguration struct {
	// The high availability type.
	HighAvailabilityType string `pulumi:"highAvailabilityType"`
}

// Gets or sets the high availability configuration.
type HighAvailabilityConfigurationResponse struct {
	// The high availability type.
	HighAvailabilityType string `pulumi:"highAvailabilityType"`
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfiguration struct {
	// The fencing client id.
	FencingClientId string `pulumi:"fencingClientId"`
	// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
	FencingClientPassword string `pulumi:"fencingClientPassword"`
}

// Gets or sets the HA software configuration.
type HighAvailabilitySoftwareConfigurationResponse struct {
	// The fencing client id.
	FencingClientId string `pulumi:"fencingClientId"`
	// The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.
	FencingClientPassword string `pulumi:"fencingClientPassword"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReference struct {
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// Specifies information about the image to use. You can specify information about platform images, marketplace images, or virtual machine images. This element is required when you want to use a platform image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference publisher and offer can only be set when you create the scale set.
type ImageReferenceResponse struct {
	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string `pulumi:"offer"`
	// The image publisher.
	Publisher *string `pulumi:"publisher"`
	// The image SKU.
	Sku *string `pulumi:"sku"`
	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.
	Version *string `pulumi:"version"`
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// The OS Type
	// Expected value is 'Linux'.
	OsType string `pulumi:"osType"`
	// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
	Ssh *SshConfiguration `pulumi:"ssh"`
	// The SSH Key-pair used to authenticate with the VM's.
	SshKeyPair *SshKeyPair `pulumi:"sshKeyPair"`
}

// Specifies the Linux operating system settings on the virtual machine. <br><br>For a list of supported Linux distributions, see [Linux on Azure-Endorsed Distributions](https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros).
type LinuxConfigurationResponse struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool `pulumi:"disablePasswordAuthentication"`
	// The OS Type
	// Expected value is 'Linux'.
	OsType string `pulumi:"osType"`
	// Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)
	Ssh *SshConfigurationResponse `pulumi:"ssh"`
	// The SSH Key-pair used to authenticate with the VM's.
	SshKeyPair *SshKeyPairResponse `pulumi:"sshKeyPair"`
}

// The Load Balancer details such as Load Balancer ID.
type LoadBalancerDetailsResponse struct {
	Id string `pulumi:"id"`
}

// The Load Balancer details such as Load Balancer ID.
type LoadBalancerDetailsResponseOutput struct{ *pulumi.OutputState }

func (LoadBalancerDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerDetailsResponse)(nil)).Elem()
}

func (o LoadBalancerDetailsResponseOutput) ToLoadBalancerDetailsResponseOutput() LoadBalancerDetailsResponseOutput {
	return o
}

func (o LoadBalancerDetailsResponseOutput) ToLoadBalancerDetailsResponseOutputWithContext(ctx context.Context) LoadBalancerDetailsResponseOutput {
	return o
}

func (o LoadBalancerDetailsResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerDetailsResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNames struct {
	// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
	BackendPoolNames []string `pulumi:"backendPoolNames"`
	// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	FrontendIpConfigurationNames []string `pulumi:"frontendIpConfigurationNames"`
	// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	HealthProbeNames []string `pulumi:"healthProbeNames"`
	// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
}

// The resource names object for load balancer and related resources.
type LoadBalancerResourceNamesResponse struct {
	// The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1
	BackendPoolNames []string `pulumi:"backendPoolNames"`
	// The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	FrontendIpConfigurationNames []string `pulumi:"frontendIpConfigurationNames"`
	// The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.
	HealthProbeNames []string `pulumi:"healthProbeNames"`
	// The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
}

// Managed resource group configuration
type ManagedRGConfiguration struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// ManagedRGConfigurationInput is an input type that accepts ManagedRGConfigurationArgs and ManagedRGConfigurationOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationInput` via:
//
//	ManagedRGConfigurationArgs{...}
type ManagedRGConfigurationInput interface {
	pulumi.Input

	ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput
	ToManagedRGConfigurationOutputWithContext(context.Context) ManagedRGConfigurationOutput
}

// Managed resource group configuration
type ManagedRGConfigurationArgs struct {
	// Managed resource group name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedRGConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return i.ToManagedRGConfigurationOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput)
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedRGConfigurationArgs) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationOutput).ToManagedRGConfigurationPtrOutputWithContext(ctx)
}

// ManagedRGConfigurationPtrInput is an input type that accepts ManagedRGConfigurationArgs, ManagedRGConfigurationPtr and ManagedRGConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedRGConfigurationPtrInput` via:
//
//	        ManagedRGConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedRGConfigurationPtrInput interface {
	pulumi.Input

	ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput
	ToManagedRGConfigurationPtrOutputWithContext(context.Context) ManagedRGConfigurationPtrOutput
}

type managedRGConfigurationPtrType ManagedRGConfigurationArgs

func ManagedRGConfigurationPtr(v *ManagedRGConfigurationArgs) ManagedRGConfigurationPtrInput {
	return (*managedRGConfigurationPtrType)(v)
}

func (*managedRGConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return i.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedRGConfigurationPtrType) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedRGConfigurationPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutput() ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationOutputWithContext(ctx context.Context) ManagedRGConfigurationOutput {
	return o
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o.ToManagedRGConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedRGConfigurationOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedRGConfiguration) *ManagedRGConfiguration {
		return &v
	}).(ManagedRGConfigurationPtrOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfiguration)(nil)).Elem()
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutput() ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) ToManagedRGConfigurationPtrOutputWithContext(ctx context.Context) ManagedRGConfigurationPtrOutput {
	return o
}

func (o ManagedRGConfigurationPtrOutput) Elem() ManagedRGConfigurationOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) ManagedRGConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfiguration
		return ret
	}).(ManagedRGConfigurationOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Managed resource group configuration
type ManagedRGConfigurationResponse struct {
	// Managed resource group name
	Name *string `pulumi:"name"`
}

// Managed resource group configuration
type ManagedRGConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutput() ManagedRGConfigurationResponseOutput {
	return o
}

func (o ManagedRGConfigurationResponseOutput) ToManagedRGConfigurationResponseOutputWithContext(ctx context.Context) ManagedRGConfigurationResponseOutput {
	return o
}

// Managed resource group name
func (o ManagedRGConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedRGConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedRGConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedRGConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedRGConfigurationResponse)(nil)).Elem()
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutput() ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) ToManagedRGConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedRGConfigurationResponsePtrOutput {
	return o
}

func (o ManagedRGConfigurationResponsePtrOutput) Elem() ManagedRGConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) ManagedRGConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedRGConfigurationResponse
		return ret
	}).(ManagedRGConfigurationResponseOutput)
}

// Managed resource group name
func (o ManagedRGConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedRGConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines the SAP Message Server properties.
type MessageServerPropertiesResponse struct {
	// Defines the health of SAP Instances.
	Health string `pulumi:"health"`
	// Message Server SAP Hostname.
	Hostname string `pulumi:"hostname"`
	// Message Server HTTP Port.
	HttpPort float64 `pulumi:"httpPort"`
	// Message Server HTTPS Port.
	HttpsPort float64 `pulumi:"httpsPort"`
	// Message Server internal MS port.
	InternalMsPort float64 `pulumi:"internalMsPort"`
	// Message server IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Message Server port.
	MsPort float64 `pulumi:"msPort"`
}

// Defines the SAP Message Server properties.
type MessageServerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MessageServerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MessageServerPropertiesResponse)(nil)).Elem()
}

func (o MessageServerPropertiesResponseOutput) ToMessageServerPropertiesResponseOutput() MessageServerPropertiesResponseOutput {
	return o
}

func (o MessageServerPropertiesResponseOutput) ToMessageServerPropertiesResponseOutputWithContext(ctx context.Context) MessageServerPropertiesResponseOutput {
	return o
}

// Defines the health of SAP Instances.
func (o MessageServerPropertiesResponseOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.Health }).(pulumi.StringOutput)
}

// Message Server SAP Hostname.
func (o MessageServerPropertiesResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Message Server HTTP Port.
func (o MessageServerPropertiesResponseOutput) HttpPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.HttpPort }).(pulumi.Float64Output)
}

// Message Server HTTPS Port.
func (o MessageServerPropertiesResponseOutput) HttpsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.HttpsPort }).(pulumi.Float64Output)
}

// Message Server internal MS port.
func (o MessageServerPropertiesResponseOutput) InternalMsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.InternalMsPort }).(pulumi.Float64Output)
}

// Message server IP Address.
func (o MessageServerPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v MessageServerPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Message Server port.
func (o MessageServerPropertiesResponseOutput) MsPort() pulumi.Float64Output {
	return o.ApplyT(func(v MessageServerPropertiesResponse) float64 { return v.MsPort }).(pulumi.Float64Output)
}

type MessageServerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MessageServerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MessageServerPropertiesResponse)(nil)).Elem()
}

func (o MessageServerPropertiesResponsePtrOutput) ToMessageServerPropertiesResponsePtrOutput() MessageServerPropertiesResponsePtrOutput {
	return o
}

func (o MessageServerPropertiesResponsePtrOutput) ToMessageServerPropertiesResponsePtrOutputWithContext(ctx context.Context) MessageServerPropertiesResponsePtrOutput {
	return o
}

func (o MessageServerPropertiesResponsePtrOutput) Elem() MessageServerPropertiesResponseOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) MessageServerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MessageServerPropertiesResponse
		return ret
	}).(MessageServerPropertiesResponseOutput)
}

// Defines the health of SAP Instances.
func (o MessageServerPropertiesResponsePtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Health
	}).(pulumi.StringPtrOutput)
}

// Message Server SAP Hostname.
func (o MessageServerPropertiesResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Message Server HTTP Port.
func (o MessageServerPropertiesResponsePtrOutput) HttpPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.HttpPort
	}).(pulumi.Float64PtrOutput)
}

// Message Server HTTPS Port.
func (o MessageServerPropertiesResponsePtrOutput) HttpsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.HttpsPort
	}).(pulumi.Float64PtrOutput)
}

// Message Server internal MS port.
func (o MessageServerPropertiesResponsePtrOutput) InternalMsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.InternalMsPort
	}).(pulumi.Float64PtrOutput)
}

// Message server IP Address.
func (o MessageServerPropertiesResponsePtrOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IpAddress
	}).(pulumi.StringPtrOutput)
}

// Message Server port.
func (o MessageServerPropertiesResponsePtrOutput) MsPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MessageServerPropertiesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.MsPort
	}).(pulumi.Float64PtrOutput)
}

// Defines the SAP monitor errors.
type MonitorPropertiesResponseErrors struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Defines the SAP monitor errors.
type MonitorPropertiesResponseErrorsOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesResponseErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPropertiesResponseErrors)(nil)).Elem()
}

func (o MonitorPropertiesResponseErrorsOutput) ToMonitorPropertiesResponseErrorsOutput() MonitorPropertiesResponseErrorsOutput {
	return o
}

func (o MonitorPropertiesResponseErrorsOutput) ToMonitorPropertiesResponseErrorsOutputWithContext(ctx context.Context) MonitorPropertiesResponseErrorsOutput {
	return o
}

// Server-defined set of error codes.
func (o MonitorPropertiesResponseErrorsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o MonitorPropertiesResponseErrorsOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o MonitorPropertiesResponseErrorsOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o MonitorPropertiesResponseErrorsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o MonitorPropertiesResponseErrorsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponseErrors) string { return v.Target }).(pulumi.StringOutput)
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'Mount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The fileshare resource ID
	Id string `pulumi:"id"`
	// The private endpoint resource ID
	PrivateEndpointId string `pulumi:"privateEndpointId"`
}

// Gets or sets the file share configuration where the transport directory fileshare already exists, and user wishes to mount the fileshare as a part of the create infra flow.
type MountFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'Mount'.
	ConfigurationType string `pulumi:"configurationType"`
	// The fileshare resource ID
	Id string `pulumi:"id"`
	// The private endpoint resource ID
	PrivateEndpointId string `pulumi:"privateEndpointId"`
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstanceProperties struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the SQL server provider properties.
type MsSqlServerProviderInstancePropertiesResponse struct {
	// Gets or sets the database password.
	DbPassword *string `pulumi:"dbPassword"`
	// Gets or sets the key vault URI to secret with the database password.
	DbPasswordUri *string `pulumi:"dbPasswordUri"`
	// Gets or sets the database sql port.
	DbPort *string `pulumi:"dbPort"`
	// Gets or sets the database user name.
	DbUsername *string `pulumi:"dbUsername"`
	// Gets or sets the SQL server host name.
	Hostname *string `pulumi:"hostname"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'MsSqlServer'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the SQL Database.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfiguration struct {
	// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
	IsSecondaryIpEnabled *bool `pulumi:"isSecondaryIpEnabled"`
}

// Defaults sets the appropriate defaults for NetworkConfiguration
func (val *NetworkConfiguration) Defaults() *NetworkConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecondaryIpEnabled == nil {
		isSecondaryIpEnabled_ := false
		tmp.IsSecondaryIpEnabled = &isSecondaryIpEnabled_
	}
	return &tmp
}

// Defines the network configuration type for SAP system infrastructure that is being deployed
type NetworkConfigurationResponse struct {
	// Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed
	IsSecondaryIpEnabled *bool `pulumi:"isSecondaryIpEnabled"`
}

// Defaults sets the appropriate defaults for NetworkConfigurationResponse
func (val *NetworkConfigurationResponse) Defaults() *NetworkConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsSecondaryIpEnabled == nil {
		isSecondaryIpEnabled_ := false
		tmp.IsSecondaryIpEnabled = &isSecondaryIpEnabled_
	}
	return &tmp
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNames struct {
	// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
}

// The resource names object for network interface and related resources.
type NetworkInterfaceResourceNamesResponse struct {
	// The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies Windows operating system settings on the virtual machine.
	OsConfiguration interface{} `pulumi:"osConfiguration"`
}

// Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once VM is provisioned.
type OSProfileResponse struct {
	// Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)
	AdminPassword *string `pulumi:"adminPassword"`
	// Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in "." <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest", "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.
	AdminUsername *string `pulumi:"adminUsername"`
	// Specifies Windows operating system settings on the virtual machine.
	OsConfiguration interface{} `pulumi:"osConfiguration"`
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfiguration struct {
	// The url and storage account ID where deployer VM packages are uploaded
	DeployerVmPackages *DeployerVmPackages `pulumi:"deployerVmPackages"`
	// The FQDN to set for the SAP system
	SapFqdn *string `pulumi:"sapFqdn"`
}

// Defines the OS and SAP Configurations for Deployment
type OsSapConfigurationResponse struct {
	// The url and storage account ID where deployer VM packages are uploaded
	DeployerVmPackages *DeployerVmPackagesResponse `pulumi:"deployerVmPackages"`
	// The FQDN to set for the SAP system
	SapFqdn *string `pulumi:"sapFqdn"`
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstanceProperties struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusHaCluster provider properties.
type PrometheusHaClusterProviderInstancePropertiesResponse struct {
	// Gets or sets the clusterName.
	ClusterName *string `pulumi:"clusterName"`
	// Gets or sets the target machine name.
	Hostname *string `pulumi:"hostname"`
	// URL of the Node Exporter endpoint.
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusHaCluster'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the cluster sid.
	Sid *string `pulumi:"sid"`
	// Gets or sets the blob URI to SSL certificate for the HA cluster exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstanceProperties struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the PrometheusOS provider properties.
type PrometheusOSProviderInstancePropertiesResponse struct {
	// URL of the Node Exporter endpoint
	PrometheusUrl *string `pulumi:"prometheusUrl"`
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'PrometheusOS'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the blob URI to SSL certificate for the prometheus node exporter.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Defines the provider instance errors.
type ProviderInstancePropertiesResponseErrors struct {
	// Server-defined set of error codes.
	Code string `pulumi:"code"`
	// Array of details about specific errors that led to this reported error.
	Details []ErrorResponse `pulumi:"details"`
	// Object containing more specific information than  the current object about the error.
	InnerError ErrorResponseInnerError `pulumi:"innerError"`
	// Human-readable representation of the error.
	Message string `pulumi:"message"`
	// Target of the error.
	Target string `pulumi:"target"`
}

// Defines the provider instance errors.
type ProviderInstancePropertiesResponseErrorsOutput struct{ *pulumi.OutputState }

func (ProviderInstancePropertiesResponseErrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderInstancePropertiesResponseErrors)(nil)).Elem()
}

func (o ProviderInstancePropertiesResponseErrorsOutput) ToProviderInstancePropertiesResponseErrorsOutput() ProviderInstancePropertiesResponseErrorsOutput {
	return o
}

func (o ProviderInstancePropertiesResponseErrorsOutput) ToProviderInstancePropertiesResponseErrorsOutputWithContext(ctx context.Context) ProviderInstancePropertiesResponseErrorsOutput {
	return o
}

// Server-defined set of error codes.
func (o ProviderInstancePropertiesResponseErrorsOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Code }).(pulumi.StringOutput)
}

// Array of details about specific errors that led to this reported error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Details() ErrorResponseArrayOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) []ErrorResponse { return v.Details }).(ErrorResponseArrayOutput)
}

// Object containing more specific information than  the current object about the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) InnerError() ErrorResponseInnerErrorOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) ErrorResponseInnerError { return v.InnerError }).(ErrorResponseInnerErrorOutput)
}

// Human-readable representation of the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Message }).(pulumi.StringOutput)
}

// Target of the error.
func (o ProviderInstancePropertiesResponseErrorsOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderInstancePropertiesResponseErrors) string { return v.Target }).(pulumi.StringOutput)
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponse struct {
	// The zone A.
	ZoneA *float64 `pulumi:"zoneA"`
	// The zone B.
	ZoneB *float64 `pulumi:"zoneB"`
}

// The SAP Availability Zone Pair.
type SAPAvailabilityZonePairResponseOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutput() SAPAvailabilityZonePairResponseOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseOutput) ToSAPAvailabilityZonePairResponseOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseOutput {
	return o
}

// The zone A.
func (o SAPAvailabilityZonePairResponseOutput) ZoneA() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneA }).(pulumi.Float64PtrOutput)
}

// The zone B.
func (o SAPAvailabilityZonePairResponseOutput) ZoneB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SAPAvailabilityZonePairResponse) *float64 { return v.ZoneB }).(pulumi.Float64PtrOutput)
}

type SAPAvailabilityZonePairResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPAvailabilityZonePairResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPAvailabilityZonePairResponse)(nil)).Elem()
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutput() SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) ToSAPAvailabilityZonePairResponseArrayOutputWithContext(ctx context.Context) SAPAvailabilityZonePairResponseArrayOutput {
	return o
}

func (o SAPAvailabilityZonePairResponseArrayOutput) Index(i pulumi.IntInput) SAPAvailabilityZonePairResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPAvailabilityZonePairResponse {
		return vs[0].([]SAPAvailabilityZonePairResponse)[vs[1].(int)]
	}).(SAPAvailabilityZonePairResponseOutput)
}

// The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
type SAPDiskConfigurationResponse struct {
	// The recommended disk details for a given VM Sku.
	RecommendedConfiguration *DiskVolumeConfigurationResponse `pulumi:"recommendedConfiguration"`
	// The list of supported disks for a given VM Sku.
	SupportedConfigurations []DiskDetailsResponse `pulumi:"supportedConfigurations"`
}

// The SAP Disk Configuration contains 'recommended disk' details and list of supported disks detail for a volume type.
type SAPDiskConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutput() SAPDiskConfigurationResponseOutput {
	return o
}

func (o SAPDiskConfigurationResponseOutput) ToSAPDiskConfigurationResponseOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseOutput {
	return o
}

// The recommended disk details for a given VM Sku.
func (o SAPDiskConfigurationResponseOutput) RecommendedConfiguration() DiskVolumeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) *DiskVolumeConfigurationResponse {
		return v.RecommendedConfiguration
	}).(DiskVolumeConfigurationResponsePtrOutput)
}

// The list of supported disks for a given VM Sku.
func (o SAPDiskConfigurationResponseOutput) SupportedConfigurations() DiskDetailsResponseArrayOutput {
	return o.ApplyT(func(v SAPDiskConfigurationResponse) []DiskDetailsResponse { return v.SupportedConfigurations }).(DiskDetailsResponseArrayOutput)
}

type SAPDiskConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (SAPDiskConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SAPDiskConfigurationResponse)(nil)).Elem()
}

func (o SAPDiskConfigurationResponseMapOutput) ToSAPDiskConfigurationResponseMapOutput() SAPDiskConfigurationResponseMapOutput {
	return o
}

func (o SAPDiskConfigurationResponseMapOutput) ToSAPDiskConfigurationResponseMapOutputWithContext(ctx context.Context) SAPDiskConfigurationResponseMapOutput {
	return o
}

func (o SAPDiskConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) SAPDiskConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SAPDiskConfigurationResponse {
		return vs[0].(map[string]SAPDiskConfigurationResponse)[vs[1].(string)]
	}).(SAPDiskConfigurationResponseOutput)
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfiguration struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfiguration `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The SAP software installation Type.
	// Expected value is 'SAPInstallWithoutOSConfig'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
}

// The SAP Software configuration Input when the software is to be installed by service without OS Configurations
type SAPInstallWithoutOSConfigSoftwareConfigurationResponse struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfigurationResponse `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The SAP software installation Type.
	// Expected value is 'SAPInstallWithoutOSConfig'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
}

// The SAP supported SKU.
type SAPSupportedSkuResponse struct {
	// True if the Sku is certified for App server in the SAP system.
	IsAppServerCertified *bool `pulumi:"isAppServerCertified"`
	// True if the Sku is certified for Database server in the SAP system.
	IsDatabaseCertified *bool `pulumi:"isDatabaseCertified"`
	// The VM Sku.
	VmSku *string `pulumi:"vmSku"`
}

// The SAP supported SKU.
type SAPSupportedSkuResponseOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutput() SAPSupportedSkuResponseOutput {
	return o
}

func (o SAPSupportedSkuResponseOutput) ToSAPSupportedSkuResponseOutputWithContext(ctx context.Context) SAPSupportedSkuResponseOutput {
	return o
}

// True if the Sku is certified for App server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsAppServerCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsAppServerCertified }).(pulumi.BoolPtrOutput)
}

// True if the Sku is certified for Database server in the SAP system.
func (o SAPSupportedSkuResponseOutput) IsDatabaseCertified() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *bool { return v.IsDatabaseCertified }).(pulumi.BoolPtrOutput)
}

// The VM Sku.
func (o SAPSupportedSkuResponseOutput) VmSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SAPSupportedSkuResponse) *string { return v.VmSku }).(pulumi.StringPtrOutput)
}

type SAPSupportedSkuResponseArrayOutput struct{ *pulumi.OutputState }

func (SAPSupportedSkuResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SAPSupportedSkuResponse)(nil)).Elem()
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutput() SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) ToSAPSupportedSkuResponseArrayOutputWithContext(ctx context.Context) SAPSupportedSkuResponseArrayOutput {
	return o
}

func (o SAPSupportedSkuResponseArrayOutput) Index(i pulumi.IntInput) SAPSupportedSkuResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SAPSupportedSkuResponse {
		return vs[0].([]SAPSupportedSkuResponse)[vs[1].(int)]
	}).(SAPSupportedSkuResponseOutput)
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponse struct {
	// The Virtual Instance for SAP error body.
	Properties *ErrorDefinitionResponse `pulumi:"properties"`
}

// An error response from the Virtual Instance for SAP Workload service.
type SAPVirtualInstanceErrorResponseOutput struct{ *pulumi.OutputState }

func (SAPVirtualInstanceErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SAPVirtualInstanceErrorResponse)(nil)).Elem()
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutput() SAPVirtualInstanceErrorResponseOutput {
	return o
}

func (o SAPVirtualInstanceErrorResponseOutput) ToSAPVirtualInstanceErrorResponseOutputWithContext(ctx context.Context) SAPVirtualInstanceErrorResponseOutput {
	return o
}

// The Virtual Instance for SAP error body.
func (o SAPVirtualInstanceErrorResponseOutput) Properties() ErrorDefinitionResponsePtrOutput {
	return o.ApplyT(func(v SAPVirtualInstanceErrorResponse) *ErrorDefinitionResponse { return v.Properties }).(ErrorDefinitionResponsePtrOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholds struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// SapLandscapeMonitorMetricThresholdsInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArgs and SapLandscapeMonitorMetricThresholdsOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArgs{...}
type SapLandscapeMonitorMetricThresholdsInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput
	ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsOutput
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsArgs struct {
	// Gets or sets the threshold value for Green.
	Green pulumi.Float64PtrInput `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red pulumi.Float64PtrInput `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow pulumi.Float64PtrInput `pulumi:"yellow"`
}

func (SapLandscapeMonitorMetricThresholdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArgs) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsOutput)
}

// SapLandscapeMonitorMetricThresholdsArrayInput is an input type that accepts SapLandscapeMonitorMetricThresholdsArray and SapLandscapeMonitorMetricThresholdsArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorMetricThresholdsArrayInput` via:
//
//	SapLandscapeMonitorMetricThresholdsArray{ SapLandscapeMonitorMetricThresholdsArgs{...} }
type SapLandscapeMonitorMetricThresholdsArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput
	ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput
}

type SapLandscapeMonitorMetricThresholdsArray []SapLandscapeMonitorMetricThresholdsInput

func (SapLandscapeMonitorMetricThresholdsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return i.ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorMetricThresholdsArray) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorMetricThresholdsArrayOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutput() SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsOutput) ToSapLandscapeMonitorMetricThresholdsOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholds) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholds)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutput() SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) ToSapLandscapeMonitorMetricThresholdsArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholds {
		return vs[0].([]SapLandscapeMonitorMetricThresholds)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsOutput)
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponse struct {
	// Gets or sets the threshold value for Green.
	Green *float64 `pulumi:"green"`
	// Gets or sets the name of the threshold.
	Name *string `pulumi:"name"`
	// Gets or sets the threshold value for Red.
	Red *float64 `pulumi:"red"`
	// Gets or sets the threshold value for Yellow.
	Yellow *float64 `pulumi:"yellow"`
}

// Gets or sets the Threshold Values for Top Metrics Health.
type SapLandscapeMonitorMetricThresholdsResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutput() SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseOutput) ToSapLandscapeMonitorMetricThresholdsResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return o
}

// Gets or sets the threshold value for Green.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Green() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Green }).(pulumi.Float64PtrOutput)
}

// Gets or sets the name of the threshold.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the threshold value for Red.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Red() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Red }).(pulumi.Float64PtrOutput)
}

// Gets or sets the threshold value for Yellow.
func (o SapLandscapeMonitorMetricThresholdsResponseOutput) Yellow() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorMetricThresholdsResponse) *float64 { return v.Yellow }).(pulumi.Float64PtrOutput)
}

type SapLandscapeMonitorMetricThresholdsResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorMetricThresholdsResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutput() SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) ToSapLandscapeMonitorMetricThresholdsResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorMetricThresholdsResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorMetricThresholdsResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorMetricThresholdsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorMetricThresholdsResponse {
		return vs[0].([]SapLandscapeMonitorMetricThresholdsResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorMetricThresholdsResponseOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGrouping struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMapping `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMapping `pulumi:"sapApplication"`
}

// SapLandscapeMonitorPropertiesGroupingInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs and SapLandscapeMonitorPropertiesGroupingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingInput` via:
//
//	SapLandscapeMonitorPropertiesGroupingArgs{...}
type SapLandscapeMonitorPropertiesGroupingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput
	ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingOutput
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingArgs struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape SapLandscapeMonitorSidMappingArrayInput `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication SapLandscapeMonitorSidMappingArrayInput `pulumi:"sapApplication"`
}

func (SapLandscapeMonitorPropertiesGroupingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput)
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorPropertiesGroupingArgs) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingOutput).ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx)
}

// SapLandscapeMonitorPropertiesGroupingPtrInput is an input type that accepts SapLandscapeMonitorPropertiesGroupingArgs, SapLandscapeMonitorPropertiesGroupingPtr and SapLandscapeMonitorPropertiesGroupingPtrOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorPropertiesGroupingPtrInput` via:
//
//	        SapLandscapeMonitorPropertiesGroupingArgs{...}
//
//	or:
//
//	        nil
type SapLandscapeMonitorPropertiesGroupingPtrInput interface {
	pulumi.Input

	ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput
	ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput
}

type sapLandscapeMonitorPropertiesGroupingPtrType SapLandscapeMonitorPropertiesGroupingArgs

func SapLandscapeMonitorPropertiesGroupingPtr(v *SapLandscapeMonitorPropertiesGroupingArgs) SapLandscapeMonitorPropertiesGroupingPtrInput {
	return (*sapLandscapeMonitorPropertiesGroupingPtrType)(v)
}

func (*sapLandscapeMonitorPropertiesGroupingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return i.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (i *sapLandscapeMonitorPropertiesGroupingPtrType) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesGroupingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutput() SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(context.Background())
}

func (o SapLandscapeMonitorPropertiesGroupingOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SapLandscapeMonitorPropertiesGrouping) *SapLandscapeMonitorPropertiesGrouping {
		return &v
	}).(SapLandscapeMonitorPropertiesGroupingPtrOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.Landscape }).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping { return v.SapApplication }).(SapLandscapeMonitorSidMappingArrayOutput)
}

type SapLandscapeMonitorPropertiesGroupingPtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesGroupingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutput() SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) ToSapLandscapeMonitorPropertiesGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Elem() SapLandscapeMonitorPropertiesGroupingOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) SapLandscapeMonitorPropertiesGrouping {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesGrouping
		return ret
	}).(SapLandscapeMonitorPropertiesGroupingOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) Landscape() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesGroupingPtrOutput) SapApplication() SapLandscapeMonitorSidMappingArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesGrouping) []SapLandscapeMonitorSidMapping {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesResponseGrouping struct {
	// Gets or sets the list of landscape to SID mappings.
	Landscape []SapLandscapeMonitorSidMappingResponse `pulumi:"landscape"`
	// Gets or sets the list of Sap Applications to SID mappings.
	SapApplication []SapLandscapeMonitorSidMappingResponse `pulumi:"sapApplication"`
}

// Gets or sets the SID groupings by landscape and Environment.
type SapLandscapeMonitorPropertiesResponseGroupingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesResponseGroupingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorPropertiesResponseGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) ToSapLandscapeMonitorPropertiesResponseGroupingOutput() SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) ToSapLandscapeMonitorPropertiesResponseGroupingOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

type SapLandscapeMonitorPropertiesResponseGroupingPtrOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapLandscapeMonitorPropertiesResponseGrouping)(nil)).Elem()
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ToSapLandscapeMonitorPropertiesResponseGroupingPtrOutput() SapLandscapeMonitorPropertiesResponseGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) ToSapLandscapeMonitorPropertiesResponseGroupingPtrOutputWithContext(ctx context.Context) SapLandscapeMonitorPropertiesResponseGroupingPtrOutput {
	return o
}

func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) Elem() SapLandscapeMonitorPropertiesResponseGroupingOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) SapLandscapeMonitorPropertiesResponseGrouping {
		if v != nil {
			return *v
		}
		var ret SapLandscapeMonitorPropertiesResponseGrouping
		return ret
	}).(SapLandscapeMonitorPropertiesResponseGroupingOutput)
}

// Gets or sets the list of landscape to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) Landscape() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.Landscape
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the list of Sap Applications to SID mappings.
func (o SapLandscapeMonitorPropertiesResponseGroupingPtrOutput) SapApplication() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o.ApplyT(func(v *SapLandscapeMonitorPropertiesResponseGrouping) []SapLandscapeMonitorSidMappingResponse {
		if v == nil {
			return nil
		}
		return v.SapApplication
	}).(SapLandscapeMonitorSidMappingResponseArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMapping struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// SapLandscapeMonitorSidMappingInput is an input type that accepts SapLandscapeMonitorSidMappingArgs and SapLandscapeMonitorSidMappingOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingInput` via:
//
//	SapLandscapeMonitorSidMappingArgs{...}
type SapLandscapeMonitorSidMappingInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput
	ToSapLandscapeMonitorSidMappingOutputWithContext(context.Context) SapLandscapeMonitorSidMappingOutput
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingArgs struct {
	// Gets or sets the name of the grouping.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid pulumi.StringArrayInput `pulumi:"topSid"`
}

func (SapLandscapeMonitorSidMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return i.ToSapLandscapeMonitorSidMappingOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArgs) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingOutput)
}

// SapLandscapeMonitorSidMappingArrayInput is an input type that accepts SapLandscapeMonitorSidMappingArray and SapLandscapeMonitorSidMappingArrayOutput values.
// You can construct a concrete instance of `SapLandscapeMonitorSidMappingArrayInput` via:
//
//	SapLandscapeMonitorSidMappingArray{ SapLandscapeMonitorSidMappingArgs{...} }
type SapLandscapeMonitorSidMappingArrayInput interface {
	pulumi.Input

	ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput
	ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Context) SapLandscapeMonitorSidMappingArrayOutput
}

type SapLandscapeMonitorSidMappingArray []SapLandscapeMonitorSidMappingInput

func (SapLandscapeMonitorSidMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return i.ToSapLandscapeMonitorSidMappingArrayOutputWithContext(context.Background())
}

func (i SapLandscapeMonitorSidMappingArray) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapLandscapeMonitorSidMappingArrayOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutput() SapLandscapeMonitorSidMappingOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingOutput) ToSapLandscapeMonitorSidMappingOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMapping) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMapping)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutput() SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) ToSapLandscapeMonitorSidMappingArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMapping {
		return vs[0].([]SapLandscapeMonitorSidMapping)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingOutput)
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponse struct {
	// Gets or sets the name of the grouping.
	Name *string `pulumi:"name"`
	// Gets or sets the list of SID's.
	TopSid []string `pulumi:"topSid"`
}

// Gets or sets the mapping for SID to Environment/Applications.
type SapLandscapeMonitorSidMappingResponseOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutput() SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseOutput) ToSapLandscapeMonitorSidMappingResponseOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseOutput {
	return o
}

// Gets or sets the name of the grouping.
func (o SapLandscapeMonitorSidMappingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Gets or sets the list of SID's.
func (o SapLandscapeMonitorSidMappingResponseOutput) TopSid() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SapLandscapeMonitorSidMappingResponse) []string { return v.TopSid }).(pulumi.StringArrayOutput)
}

type SapLandscapeMonitorSidMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (SapLandscapeMonitorSidMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SapLandscapeMonitorSidMappingResponse)(nil)).Elem()
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutput() SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) ToSapLandscapeMonitorSidMappingResponseArrayOutputWithContext(ctx context.Context) SapLandscapeMonitorSidMappingResponseArrayOutput {
	return o
}

func (o SapLandscapeMonitorSidMappingResponseArrayOutput) Index(i pulumi.IntInput) SapLandscapeMonitorSidMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SapLandscapeMonitorSidMappingResponse {
		return vs[0].([]SapLandscapeMonitorSidMappingResponse)[vs[1].(int)]
	}).(SapLandscapeMonitorSidMappingResponseOutput)
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstanceProperties struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// Gets or sets the provider properties.
type SapNetWeaverProviderInstancePropertiesResponse struct {
	// The provider type. For example, the value can be SapHana.
	// Expected value is 'SapNetWeaver'.
	ProviderType string `pulumi:"providerType"`
	// Gets or sets the SAP Client ID.
	SapClientId *string `pulumi:"sapClientId"`
	// Gets or sets the list of HostFile Entries
	SapHostFileEntries []string `pulumi:"sapHostFileEntries"`
	// Gets or sets the target virtual machine IP Address/FQDN.
	SapHostname *string `pulumi:"sapHostname"`
	// Gets or sets the instance number of SAP NetWeaver.
	SapInstanceNr *string `pulumi:"sapInstanceNr"`
	// Sets the SAP password.
	SapPassword *string `pulumi:"sapPassword"`
	// Gets or sets the key vault URI to secret with the SAP password.
	SapPasswordUri *string `pulumi:"sapPasswordUri"`
	// Gets or sets the SAP HTTP port number.
	SapPortNumber *string `pulumi:"sapPortNumber"`
	// Gets or sets the SAP System Identifier
	SapSid *string `pulumi:"sapSid"`
	// Gets or sets the SAP user name.
	SapUsername *string `pulumi:"sapUsername"`
	// Gets or sets the blob URI to SSL certificate for the SAP system.
	SslCertificateUri *string `pulumi:"sslCertificateUri"`
	// Gets or sets certificate preference if secure communication is enabled.
	SslPreference *string `pulumi:"sslPreference"`
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfiguration struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfiguration `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The FQDN to set for the SAP system during install.
	SapFqdn string `pulumi:"sapFqdn"`
	// The SAP software installation Type.
	// Expected value is 'ServiceInitiated'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The SSH private key.
	SshPrivateKey string `pulumi:"sshPrivateKey"`
}

// The SAP Software configuration Input when the software is to be installed by service.
type ServiceInitiatedSoftwareConfigurationResponse struct {
	// The URL to the SAP Build of Materials(BOM) file.
	BomUrl string `pulumi:"bomUrl"`
	// Gets or sets the HA software configuration.
	HighAvailabilitySoftwareConfiguration *HighAvailabilitySoftwareConfigurationResponse `pulumi:"highAvailabilitySoftwareConfiguration"`
	// The SAP bits storage account id.
	SapBitsStorageAccountId string `pulumi:"sapBitsStorageAccountId"`
	// The FQDN to set for the SAP system during install.
	SapFqdn string `pulumi:"sapFqdn"`
	// The SAP software installation Type.
	// Expected value is 'ServiceInitiated'.
	SoftwareInstallationType string `pulumi:"softwareInstallationType"`
	// The software version to install.
	SoftwareVersion string `pulumi:"softwareVersion"`
	// The SSH private key.
	SshPrivateKey string `pulumi:"sshPrivateKey"`
}

// The resource names object for shared storage.
type SharedStorageResourceNames struct {
	// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
	SharedStorageAccountName *string `pulumi:"sharedStorageAccountName"`
	// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
	SharedStorageAccountPrivateEndPointName *string `pulumi:"sharedStorageAccountPrivateEndPointName"`
}

// The resource names object for shared storage.
type SharedStorageResourceNamesResponse struct {
	// The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.
	SharedStorageAccountName *string `pulumi:"sharedStorageAccountName"`
	// The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe
	SharedStorageAccountPrivateEndPointName *string `pulumi:"sharedStorageAccountPrivateEndPointName"`
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfiguration struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *SingleServerFullResourceNames `pulumi:"customResourceNames"`
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DbDiskConfiguration *DiskConfiguration `pulumi:"dbDiskConfiguration"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'SingleServer'.
	DeploymentType string `pulumi:"deploymentType"`
	// Network configuration for the server
	NetworkConfiguration *NetworkConfiguration `pulumi:"networkConfiguration"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfiguration `pulumi:"virtualMachineConfiguration"`
}

// Defaults sets the appropriate defaults for SingleServerConfiguration
func (val *SingleServerConfiguration) Defaults() *SingleServerConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// Gets or sets the single server configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type SingleServerConfigurationResponse struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *SingleServerFullResourceNamesResponse `pulumi:"customResourceNames"`
	// The database type.
	DatabaseType *string `pulumi:"databaseType"`
	// Gets or sets the disk configuration.
	DbDiskConfiguration *DiskConfigurationResponse `pulumi:"dbDiskConfiguration"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'SingleServer'.
	DeploymentType string `pulumi:"deploymentType"`
	// Network configuration for the server
	NetworkConfiguration *NetworkConfigurationResponse `pulumi:"networkConfiguration"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
	// Gets or sets the virtual machine configuration.
	VirtualMachineConfiguration VirtualMachineConfigurationResponse `pulumi:"virtualMachineConfiguration"`
}

// Defaults sets the appropriate defaults for SingleServerConfigurationResponse
func (val *SingleServerConfigurationResponse) Defaults() *SingleServerConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNames struct {
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for virtual machine and related resources.
	VirtualMachine *VirtualMachineResourceNames `pulumi:"virtualMachine"`
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a single server SAP system.
type SingleServerFullResourceNamesResponse struct {
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for virtual machine and related resources.
	VirtualMachine *VirtualMachineResourceNamesResponse `pulumi:"virtualMachine"`
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfiguration struct {
	// The type of file share config.
	// Expected value is 'Skip'.
	ConfigurationType string `pulumi:"configurationType"`
}

// Gets or sets the file share configuration for scenarios where transport directory fileshare is not created or required.
type SkipFileShareConfigurationResponse struct {
	// The type of file share config.
	// Expected value is 'Skip'.
	ConfigurationType string `pulumi:"configurationType"`
}

// SSH configuration for Linux based VMs running on Azure
type SshConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKey `pulumi:"publicKeys"`
}

// SSH configuration for Linux based VMs running on Azure
type SshConfigurationResponse struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SshPublicKeyResponse `pulumi:"publicKeys"`
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPair struct {
	// SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// SSH public key
	PublicKey *string `pulumi:"publicKey"`
}

// The SSH Key-pair used to authenticate with the VM. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
type SshKeyPairResponse struct {
	// SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// SSH public key
	PublicKey *string `pulumi:"publicKey"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
}

// Contains information about SSH certificate public key and the path on the Linux VM where the public key is placed.
type SshPublicKeyResponse struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
	KeyData *string `pulumi:"keyData"`
}

// Gets or sets the storage configuration.
type StorageConfiguration struct {
	// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
	TransportFileShareConfiguration interface{} `pulumi:"transportFileShareConfiguration"`
}

// Gets or sets the storage configuration.
type StorageConfigurationResponse struct {
	// The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.
	TransportFileShareConfiguration interface{} `pulumi:"transportFileShareConfiguration"`
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponse struct {
	Id string `pulumi:"id"`
}

// Storage details of all the Storage accounts attached to the VM. For e.g. NFS on AFS Shared Storage.
type StorageInformationResponseOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutput() StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) ToStorageInformationResponseOutputWithContext(ctx context.Context) StorageInformationResponseOutput {
	return o
}

func (o StorageInformationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v StorageInformationResponse) string { return v.Id }).(pulumi.StringOutput)
}

type StorageInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageInformationResponse)(nil)).Elem()
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutput() StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) ToStorageInformationResponseArrayOutputWithContext(ctx context.Context) StorageInformationResponseArrayOutput {
	return o
}

func (o StorageInformationResponseArrayOutput) Index(i pulumi.IntInput) StorageInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageInformationResponse {
		return vs[0].([]StorageInformationResponse)[vs[1].(int)]
	}).(StorageInformationResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfiguration struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The application server configuration.
	ApplicationServer ApplicationServerConfiguration `pulumi:"applicationServer"`
	// The central server configuration.
	CentralServer CentralServerConfiguration `pulumi:"centralServer"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *ThreeTierFullResourceNames `pulumi:"customResourceNames"`
	// The database configuration.
	DatabaseServer DatabaseConfiguration `pulumi:"databaseServer"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'ThreeTier'.
	DeploymentType string `pulumi:"deploymentType"`
	// The high availability configuration.
	HighAvailabilityConfig *HighAvailabilityConfiguration `pulumi:"highAvailabilityConfig"`
	// Network configuration common to all servers
	NetworkConfiguration *NetworkConfiguration `pulumi:"networkConfiguration"`
	// The storage configuration.
	StorageConfiguration *StorageConfiguration `pulumi:"storageConfiguration"`
}

// Defaults sets the appropriate defaults for ThreeTierConfiguration
func (val *ThreeTierConfiguration) Defaults() *ThreeTierConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// Gets or sets the three tier SAP configuration. For prerequisites for creating the infrastructure, please see [here](https://go.microsoft.com/fwlink/?linkid=2212611&clcid=0x409)
type ThreeTierConfigurationResponse struct {
	// The application resource group where SAP system resources will be deployed.
	AppResourceGroup string `pulumi:"appResourceGroup"`
	// The application server configuration.
	ApplicationServer ApplicationServerConfigurationResponse `pulumi:"applicationServer"`
	// The central server configuration.
	CentralServer CentralServerConfigurationResponse `pulumi:"centralServer"`
	// The set of custom names to be used for underlying azure resources that are part of the SAP system.
	CustomResourceNames *ThreeTierFullResourceNamesResponse `pulumi:"customResourceNames"`
	// The database configuration.
	DatabaseServer DatabaseConfigurationResponse `pulumi:"databaseServer"`
	// The type of SAP deployment, single server or Three tier.
	// Expected value is 'ThreeTier'.
	DeploymentType string `pulumi:"deploymentType"`
	// The high availability configuration.
	HighAvailabilityConfig *HighAvailabilityConfigurationResponse `pulumi:"highAvailabilityConfig"`
	// Network configuration common to all servers
	NetworkConfiguration *NetworkConfigurationResponse `pulumi:"networkConfiguration"`
	// The storage configuration.
	StorageConfiguration *StorageConfigurationResponse `pulumi:"storageConfiguration"`
}

// Defaults sets the appropriate defaults for ThreeTierConfigurationResponse
func (val *ThreeTierConfigurationResponse) Defaults() *ThreeTierConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.NetworkConfiguration = tmp.NetworkConfiguration.Defaults()

	return &tmp
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNames struct {
	// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
	ApplicationServer *ApplicationServerFullResourceNames `pulumi:"applicationServer"`
	// The full resource names object for central server layer resources.
	CentralServer *CentralServerFullResourceNames `pulumi:"centralServer"`
	// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
	DatabaseServer *DatabaseServerFullResourceNames `pulumi:"databaseServer"`
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for shared storage.
	SharedStorage *SharedStorageResourceNames `pulumi:"sharedStorage"`
}

// The resource name object where the specified values will be full resource names of the corresponding resources in a three tier SAP system.
type ThreeTierFullResourceNamesResponse struct {
	// The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.
	ApplicationServer *ApplicationServerFullResourceNamesResponse `pulumi:"applicationServer"`
	// The full resource names object for central server layer resources.
	CentralServer *CentralServerFullResourceNamesResponse `pulumi:"centralServer"`
	// The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.
	DatabaseServer *DatabaseServerFullResourceNamesResponse `pulumi:"databaseServer"`
	// The pattern type to be used for resource naming.
	// Expected value is 'FullResourceName'.
	NamingPatternType string `pulumi:"namingPatternType"`
	// The resource names object for shared storage.
	SharedStorage *SharedStorageResourceNamesResponse `pulumi:"sharedStorage"`
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.
type UserAssignedServiceIdentity struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// UserAssignedServiceIdentityInput is an input type that accepts UserAssignedServiceIdentityArgs and UserAssignedServiceIdentityOutput values.
// You can construct a concrete instance of `UserAssignedServiceIdentityInput` via:
//
//	UserAssignedServiceIdentityArgs{...}
type UserAssignedServiceIdentityInput interface {
	pulumi.Input

	ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput
	ToUserAssignedServiceIdentityOutputWithContext(context.Context) UserAssignedServiceIdentityOutput
}

// A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.
type UserAssignedServiceIdentityArgs struct {
	// Type of manage identity
	Type pulumi.StringInput `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (UserAssignedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentity)(nil)).Elem()
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput {
	return i.ToUserAssignedServiceIdentityOutputWithContext(context.Background())
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityOutputWithContext(ctx context.Context) UserAssignedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityOutput)
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return i.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i UserAssignedServiceIdentityArgs) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityOutput).ToUserAssignedServiceIdentityPtrOutputWithContext(ctx)
}

// UserAssignedServiceIdentityPtrInput is an input type that accepts UserAssignedServiceIdentityArgs, UserAssignedServiceIdentityPtr and UserAssignedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `UserAssignedServiceIdentityPtrInput` via:
//
//	        UserAssignedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type UserAssignedServiceIdentityPtrInput interface {
	pulumi.Input

	ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput
	ToUserAssignedServiceIdentityPtrOutputWithContext(context.Context) UserAssignedServiceIdentityPtrOutput
}

type userAssignedServiceIdentityPtrType UserAssignedServiceIdentityArgs

func UserAssignedServiceIdentityPtr(v *UserAssignedServiceIdentityArgs) UserAssignedServiceIdentityPtrInput {
	return (*userAssignedServiceIdentityPtrType)(v)
}

func (*userAssignedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentity)(nil)).Elem()
}

func (i *userAssignedServiceIdentityPtrType) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return i.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *userAssignedServiceIdentityPtrType) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAssignedServiceIdentityPtrOutput)
}

// A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.
type UserAssignedServiceIdentityOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentity)(nil)).Elem()
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityOutput() UserAssignedServiceIdentityOutput {
	return o
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityOutputWithContext(ctx context.Context) UserAssignedServiceIdentityOutput {
	return o
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return o.ToUserAssignedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o UserAssignedServiceIdentityOutput) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAssignedServiceIdentity) *UserAssignedServiceIdentity {
		return &v
	}).(UserAssignedServiceIdentityPtrOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type UserAssignedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentity)(nil)).Elem()
}

func (o UserAssignedServiceIdentityPtrOutput) ToUserAssignedServiceIdentityPtrOutput() UserAssignedServiceIdentityPtrOutput {
	return o
}

func (o UserAssignedServiceIdentityPtrOutput) ToUserAssignedServiceIdentityPtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityPtrOutput {
	return o
}

func (o UserAssignedServiceIdentityPtrOutput) Elem() UserAssignedServiceIdentityOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) UserAssignedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret UserAssignedServiceIdentity
		return ret
	}).(UserAssignedServiceIdentityOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.
type UserAssignedServiceIdentityResponse struct {
	// Type of manage identity
	Type string `pulumi:"type"`
	// User assigned identities dictionary
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.
type UserAssignedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o UserAssignedServiceIdentityResponseOutput) ToUserAssignedServiceIdentityResponseOutput() UserAssignedServiceIdentityResponseOutput {
	return o
}

func (o UserAssignedServiceIdentityResponseOutput) ToUserAssignedServiceIdentityResponseOutputWithContext(ctx context.Context) UserAssignedServiceIdentityResponseOutput {
	return o
}

// Type of manage identity
func (o UserAssignedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v UserAssignedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type UserAssignedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAssignedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAssignedServiceIdentityResponse)(nil)).Elem()
}

func (o UserAssignedServiceIdentityResponsePtrOutput) ToUserAssignedServiceIdentityResponsePtrOutput() UserAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedServiceIdentityResponsePtrOutput) ToUserAssignedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) UserAssignedServiceIdentityResponsePtrOutput {
	return o
}

func (o UserAssignedServiceIdentityResponsePtrOutput) Elem() UserAssignedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) UserAssignedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserAssignedServiceIdentityResponse
		return ret
	}).(UserAssignedServiceIdentityResponseOutput)
}

// Type of manage identity
func (o UserAssignedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// User assigned identities dictionary
func (o UserAssignedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *UserAssignedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Defines the virtual machine configuration.
type VirtualMachineConfiguration struct {
	// The image reference.
	ImageReference ImageReference `pulumi:"imageReference"`
	// The OS profile.
	OsProfile OSProfile `pulumi:"osProfile"`
	// The virtual machine size.
	VmSize string `pulumi:"vmSize"`
}

// Defines the virtual machine configuration.
type VirtualMachineConfigurationResponse struct {
	// The image reference.
	ImageReference ImageReferenceResponse `pulumi:"imageReference"`
	// The OS profile.
	OsProfile OSProfileResponse `pulumi:"osProfile"`
	// The virtual machine size.
	VmSize string `pulumi:"vmSize"`
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNames struct {
	// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
	DataDiskNames map[string][]string `pulumi:"dataDiskNames"`
	// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
	HostName *string `pulumi:"hostName"`
	// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
	NetworkInterfaces []NetworkInterfaceResourceNames `pulumi:"networkInterfaces"`
	// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
	OsDiskName *string `pulumi:"osDiskName"`
	// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
	VmName *string `pulumi:"vmName"`
}

// The resource names object for virtual machine and related resources.
type VirtualMachineResourceNamesResponse struct {
	// The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported
	DataDiskNames map[string][]string `pulumi:"dataDiskNames"`
	// The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.
	HostName *string `pulumi:"hostName"`
	// The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.
	NetworkInterfaces []NetworkInterfaceResourceNamesResponse `pulumi:"networkInterfaces"`
	// The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.
	OsDiskName *string `pulumi:"osDiskName"`
	// The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.
	VmName *string `pulumi:"vmName"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// The OS Type
	// Expected value is 'Windows'.
	OsType string `pulumi:"osType"`
}

// Specifies Windows operating system settings on the virtual machine.
type WindowsConfigurationResponse struct {
	// The OS Type
	// Expected value is 'Windows'.
	OsType string `pulumi:"osType"`
}

func init() {
	pulumi.RegisterOutputType(ApplicationServerVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(ApplicationServerVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(CentralServerVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(CentralServerVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseVmDetailsResponseOutput{})
	pulumi.RegisterOutputType(DatabaseVmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskDetailsResponseOutput{})
	pulumi.RegisterOutputType(DiskDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskSkuResponseOutput{})
	pulumi.RegisterOutputType(DiskSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskVolumeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EnqueueReplicationServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EnqueueReplicationServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EnqueueServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EnqueueServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseInnerErrorOutput{})
	pulumi.RegisterOutputType(ErrorResponseInnerErrorPtrOutput{})
	pulumi.RegisterOutputType(GatewayServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GatewayServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerDetailsResponseOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedRGConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(MessageServerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MessageServerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesResponseErrorsOutput{})
	pulumi.RegisterOutputType(ProviderInstancePropertiesResponseErrorsOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseOutput{})
	pulumi.RegisterOutputType(SAPAvailabilityZonePairResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SAPDiskConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseOutput{})
	pulumi.RegisterOutputType(SAPSupportedSkuResponseArrayOutput{})
	pulumi.RegisterOutputType(SAPVirtualInstanceErrorResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorMetricThresholdsResponseArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesGroupingPtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesResponseGroupingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorPropertiesResponseGroupingPtrOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingArrayOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseOutput{})
	pulumi.RegisterOutputType(SapLandscapeMonitorSidMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseOutput{})
	pulumi.RegisterOutputType(StorageInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedServiceIdentityResponsePtrOutput{})
}
