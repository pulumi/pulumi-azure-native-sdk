// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Define the Virtual Instance for SAP solutions resource.
// Azure REST API version: 2024-09-01.
type SapVirtualInstance struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
	Configuration pulumi.AnyOutput `pulumi:"configuration"`
	// Defines the environment type - Production/Non Production.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Indicates any errors on the Virtual Instance for SAP solutions resource.
	Errors SAPVirtualInstanceErrorResponseOutput `pulumi:"errors"`
	// Defines the health of SAP Instances.
	Health pulumi.StringOutput `pulumi:"health"`
	// The managed service identities assigned to this resource.
	Identity SAPVirtualInstanceIdentityResponsePtrOutput `pulumi:"identity"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// Managed resource group configuration
	ManagedResourceGroupConfiguration ManagedRGConfigurationResponsePtrOutput `pulumi:"managedResourceGroupConfiguration"`
	// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
	ManagedResourcesNetworkAccessType pulumi.StringPtrOutput `pulumi:"managedResourcesNetworkAccessType"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the provisioning states.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Defines the SAP Product type.
	SapProduct pulumi.StringOutput `pulumi:"sapProduct"`
	// Defines the Virtual Instance for SAP state.
	State pulumi.StringOutput `pulumi:"state"`
	// Defines the SAP Instance status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSapVirtualInstance registers a new resource with the given unique name, arguments, and options.
func NewSapVirtualInstance(ctx *pulumi.Context,
	name string, args *SapVirtualInstanceArgs, opts ...pulumi.ResourceOption) (*SapVirtualInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Configuration == nil {
		return nil, errors.New("invalid value for required argument 'Configuration'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SapProduct == nil {
		return nil, errors.New("invalid value for required argument 'SapProduct'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads/v20211201preview:SapVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20221101preview:SapVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20230401:SAPVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20230401:SapVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20231001preview:SAPVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20231001preview:SapVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads/v20240901:SapVirtualInstance"),
		},
		{
			Type: pulumi.String("azure-native:workloads:SAPVirtualInstance"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SapVirtualInstance
	err := ctx.RegisterResource("azure-native:workloads:SapVirtualInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSapVirtualInstance gets an existing SapVirtualInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSapVirtualInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SapVirtualInstanceState, opts ...pulumi.ResourceOption) (*SapVirtualInstance, error) {
	var resource SapVirtualInstance
	err := ctx.ReadResource("azure-native:workloads:SapVirtualInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SapVirtualInstance resources.
type sapVirtualInstanceState struct {
}

type SapVirtualInstanceState struct {
}

func (SapVirtualInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sapVirtualInstanceState)(nil)).Elem()
}

type sapVirtualInstanceArgs struct {
	// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
	Configuration interface{} `pulumi:"configuration"`
	// Defines the environment type - Production/Non Production.
	Environment string `pulumi:"environment"`
	// The managed service identities assigned to this resource.
	Identity *SAPVirtualInstanceIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Managed resource group configuration
	ManagedResourceGroupConfiguration *ManagedRGConfiguration `pulumi:"managedResourceGroupConfiguration"`
	// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
	ManagedResourcesNetworkAccessType *string `pulumi:"managedResourcesNetworkAccessType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Defines the SAP Product type.
	SapProduct string `pulumi:"sapProduct"`
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName *string `pulumi:"sapVirtualInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SapVirtualInstance resource.
type SapVirtualInstanceArgs struct {
	// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
	Configuration pulumi.Input
	// Defines the environment type - Production/Non Production.
	Environment pulumi.StringInput
	// The managed service identities assigned to this resource.
	Identity SAPVirtualInstanceIdentityPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Managed resource group configuration
	ManagedResourceGroupConfiguration ManagedRGConfigurationPtrInput
	// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
	ManagedResourcesNetworkAccessType pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Defines the SAP Product type.
	SapProduct pulumi.StringInput
	// The name of the Virtual Instances for SAP solutions resource
	SapVirtualInstanceName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SapVirtualInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sapVirtualInstanceArgs)(nil)).Elem()
}

type SapVirtualInstanceInput interface {
	pulumi.Input

	ToSapVirtualInstanceOutput() SapVirtualInstanceOutput
	ToSapVirtualInstanceOutputWithContext(ctx context.Context) SapVirtualInstanceOutput
}

func (*SapVirtualInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SapVirtualInstance)(nil)).Elem()
}

func (i *SapVirtualInstance) ToSapVirtualInstanceOutput() SapVirtualInstanceOutput {
	return i.ToSapVirtualInstanceOutputWithContext(context.Background())
}

func (i *SapVirtualInstance) ToSapVirtualInstanceOutputWithContext(ctx context.Context) SapVirtualInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapVirtualInstanceOutput)
}

type SapVirtualInstanceOutput struct{ *pulumi.OutputState }

func (SapVirtualInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapVirtualInstance)(nil)).Elem()
}

func (o SapVirtualInstanceOutput) ToSapVirtualInstanceOutput() SapVirtualInstanceOutput {
	return o
}

func (o SapVirtualInstanceOutput) ToSapVirtualInstanceOutputWithContext(ctx context.Context) SapVirtualInstanceOutput {
	return o
}

// The Azure API version of the resource.
func (o SapVirtualInstanceOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Defines if the SAP system is being created using Azure Center for SAP solutions (ACSS) or if an existing SAP system is being registered with ACSS
func (o SapVirtualInstanceOutput) Configuration() pulumi.AnyOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.AnyOutput { return v.Configuration }).(pulumi.AnyOutput)
}

// Defines the environment type - Production/Non Production.
func (o SapVirtualInstanceOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Indicates any errors on the Virtual Instance for SAP solutions resource.
func (o SapVirtualInstanceOutput) Errors() SAPVirtualInstanceErrorResponseOutput {
	return o.ApplyT(func(v *SapVirtualInstance) SAPVirtualInstanceErrorResponseOutput { return v.Errors }).(SAPVirtualInstanceErrorResponseOutput)
}

// Defines the health of SAP Instances.
func (o SapVirtualInstanceOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

// The managed service identities assigned to this resource.
func (o SapVirtualInstanceOutput) Identity() SAPVirtualInstanceIdentityResponsePtrOutput {
	return o.ApplyT(func(v *SapVirtualInstance) SAPVirtualInstanceIdentityResponsePtrOutput { return v.Identity }).(SAPVirtualInstanceIdentityResponsePtrOutput)
}

// The geo-location where the resource lives
func (o SapVirtualInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Managed resource group configuration
func (o SapVirtualInstanceOutput) ManagedResourceGroupConfiguration() ManagedRGConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *SapVirtualInstance) ManagedRGConfigurationResponsePtrOutput {
		return v.ManagedResourceGroupConfiguration
	}).(ManagedRGConfigurationResponsePtrOutput)
}

// Specifies the network access configuration for the resources that will be deployed in the Managed Resource Group. The options to choose from are Public and Private. If 'Private' is chosen, the Storage Account service tag should be enabled on the subnets in which the SAP VMs exist. This is required for establishing connectivity between VM extensions and the managed resource group storage account. This setting is currently applicable only to Storage Account. Learn more here https://go.microsoft.com/fwlink/?linkid=2247228
func (o SapVirtualInstanceOutput) ManagedResourcesNetworkAccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringPtrOutput { return v.ManagedResourcesNetworkAccessType }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o SapVirtualInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the provisioning states.
func (o SapVirtualInstanceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Defines the SAP Product type.
func (o SapVirtualInstanceOutput) SapProduct() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.SapProduct }).(pulumi.StringOutput)
}

// Defines the Virtual Instance for SAP state.
func (o SapVirtualInstanceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Defines the SAP Instance status.
func (o SapVirtualInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SapVirtualInstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SapVirtualInstance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SapVirtualInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SapVirtualInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SapVirtualInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SapVirtualInstanceOutput{})
}
