// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workloads

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Define the SAP Instance resource.
// Azure REST API version: 2023-10-01-preview.
type SapInstance struct {
	pulumi.CustomResourceState

	// Enter a business function/department identifier to group multiple SIDs.
	Application pulumi.StringOutput `pulumi:"application"`
	// The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the list of available dropdown values.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Defines the errors related to SAP Instance resource.
	Errors SAPMigrateErrorResponseOutput `pulumi:"errors"`
	// This is the SID of the production system in a landscape.  An SAP system could itself be a production SID or a part of a landscape with a different Production SID. This field can be used to relate non-prod SIDs, other components, SID (WEBDISP) to the prod SID. Enter the value of Production SID.
	LandscapeSid pulumi.StringOutput `pulumi:"landscapeSid"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the provisioning states.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// This is the SID of SAP System. Keeping this not equal to ID as different landscapes can have repeated System SID IDs.
	SystemSid pulumi.StringOutput `pulumi:"systemSid"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSapInstance registers a new resource with the given unique name, arguments, and options.
func NewSapInstance(ctx *pulumi.Context,
	name string, args *SapInstanceArgs, opts ...pulumi.ResourceOption) (*SapInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SapDiscoverySiteName == nil {
		return nil, errors.New("invalid value for required argument 'SapDiscoverySiteName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:workloads/v20231001preview:SapInstance"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SapInstance
	err := ctx.RegisterResource("azure-native:workloads:SapInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSapInstance gets an existing SapInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSapInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SapInstanceState, opts ...pulumi.ResourceOption) (*SapInstance, error) {
	var resource SapInstance
	err := ctx.ReadResource("azure-native:workloads:SapInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SapInstance resources.
type sapInstanceState struct {
}

type SapInstanceState struct {
}

func (SapInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*sapInstanceState)(nil)).Elem()
}

type sapInstanceArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the discovery site resource for SAP Migration.
	SapDiscoverySiteName string `pulumi:"sapDiscoverySiteName"`
	// The name of SAP Instance resource for SAP Migration.
	SapInstanceName *string `pulumi:"sapInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SapInstance resource.
type SapInstanceArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The name of the discovery site resource for SAP Migration.
	SapDiscoverySiteName pulumi.StringInput
	// The name of SAP Instance resource for SAP Migration.
	SapInstanceName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SapInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sapInstanceArgs)(nil)).Elem()
}

type SapInstanceInput interface {
	pulumi.Input

	ToSapInstanceOutput() SapInstanceOutput
	ToSapInstanceOutputWithContext(ctx context.Context) SapInstanceOutput
}

func (*SapInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**SapInstance)(nil)).Elem()
}

func (i *SapInstance) ToSapInstanceOutput() SapInstanceOutput {
	return i.ToSapInstanceOutputWithContext(context.Background())
}

func (i *SapInstance) ToSapInstanceOutputWithContext(ctx context.Context) SapInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SapInstanceOutput)
}

type SapInstanceOutput struct{ *pulumi.OutputState }

func (SapInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SapInstance)(nil)).Elem()
}

func (o SapInstanceOutput) ToSapInstanceOutput() SapInstanceOutput {
	return o
}

func (o SapInstanceOutput) ToSapInstanceOutputWithContext(ctx context.Context) SapInstanceOutput {
	return o
}

// Enter a business function/department identifier to group multiple SIDs.
func (o SapInstanceOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

// The Environment; PRD, QA, DEV, etc to which SAP system belongs to. Select from the list of available dropdown values.
func (o SapInstanceOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Defines the errors related to SAP Instance resource.
func (o SapInstanceOutput) Errors() SAPMigrateErrorResponseOutput {
	return o.ApplyT(func(v *SapInstance) SAPMigrateErrorResponseOutput { return v.Errors }).(SAPMigrateErrorResponseOutput)
}

// This is the SID of the production system in a landscape.  An SAP system could itself be a production SID or a part of a landscape with a different Production SID. This field can be used to relate non-prod SIDs, other components, SID (WEBDISP) to the prod SID. Enter the value of Production SID.
func (o SapInstanceOutput) LandscapeSid() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.LandscapeSid }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o SapInstanceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SapInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the provisioning states.
func (o SapInstanceOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SapInstanceOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SapInstance) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// This is the SID of SAP System. Keeping this not equal to ID as different landscapes can have repeated System SID IDs.
func (o SapInstanceOutput) SystemSid() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.SystemSid }).(pulumi.StringOutput)
}

// Resource tags.
func (o SapInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SapInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SapInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SapInstanceOutput{})
}
