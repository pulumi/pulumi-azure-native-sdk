// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220615preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AcsChat channel definition
type AcsChatChannelResponse struct {
	// The channel name
	// Expected value is 'AcsChatChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for AcsChatChannelResponse
func (val *AcsChatChannelResponse) Defaults() *AcsChatChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Alexa channel.
type AlexaChannelPropertiesResponse struct {
	// The Alexa skill Id
	AlexaSkillId string `pulumi:"alexaSkillId"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Full Uri used to configured the skill in Alexa
	ServiceEndpointUri string `pulumi:"serviceEndpointUri"`
	// Url fragment used in part of the Uri configured in Alexa
	UrlFragment string `pulumi:"urlFragment"`
}

// Alexa channel definition
type AlexaChannelResponse struct {
	// The channel name
	// Expected value is 'AlexaChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Alexa channel resource
	Properties *AlexaChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for AlexaChannelResponse
func (val *AlexaChannelResponse) Defaults() *AlexaChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Channel settings definition
type ChannelSettingsResponse struct {
	// The bot icon url
	BotIconUrl *string `pulumi:"botIconUrl"`
	// The bot id
	BotId *string `pulumi:"botId"`
	// The channel display name
	ChannelDisplayName *string `pulumi:"channelDisplayName"`
	// The channel id
	ChannelId *string `pulumi:"channelId"`
	// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// The extensionKey1
	ExtensionKey1 *string `pulumi:"extensionKey1"`
	// The extensionKey2
	ExtensionKey2 *string `pulumi:"extensionKey2"`
	// Whether this channel is enabled for the bot
	IsEnabled *bool `pulumi:"isEnabled"`
	// Whether customer needs to agree to new terms.
	RequireTermsAgreement *bool `pulumi:"requireTermsAgreement"`
	// The list of sites
	Sites []SiteResponse `pulumi:"sites"`
}

// Defaults sets the appropriate defaults for ChannelSettingsResponse
func (val *ChannelSettingsResponse) Defaults() *ChannelSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExtensionKey1 == nil {
		extensionKey1_ := ""
		tmp.ExtensionKey1 = &extensionKey1_
	}
	if tmp.ExtensionKey2 == nil {
		extensionKey2_ := ""
		tmp.ExtensionKey2 = &extensionKey2_
	}
	return &tmp
}

// Channel settings definition
type ChannelSettingsResponseOutput struct{ *pulumi.OutputState }

func (ChannelSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChannelSettingsResponse)(nil)).Elem()
}

func (o ChannelSettingsResponseOutput) ToChannelSettingsResponseOutput() ChannelSettingsResponseOutput {
	return o
}

func (o ChannelSettingsResponseOutput) ToChannelSettingsResponseOutputWithContext(ctx context.Context) ChannelSettingsResponseOutput {
	return o
}

// The bot icon url
func (o ChannelSettingsResponseOutput) BotIconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.BotIconUrl }).(pulumi.StringPtrOutput)
}

// The bot id
func (o ChannelSettingsResponseOutput) BotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.BotId }).(pulumi.StringPtrOutput)
}

// The channel display name
func (o ChannelSettingsResponseOutput) ChannelDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ChannelDisplayName }).(pulumi.StringPtrOutput)
}

// The channel id
func (o ChannelSettingsResponseOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o ChannelSettingsResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// The extensionKey1
func (o ChannelSettingsResponseOutput) ExtensionKey1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ExtensionKey1 }).(pulumi.StringPtrOutput)
}

// The extensionKey2
func (o ChannelSettingsResponseOutput) ExtensionKey2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *string { return v.ExtensionKey2 }).(pulumi.StringPtrOutput)
}

// Whether this channel is enabled for the bot
func (o ChannelSettingsResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// Whether customer needs to agree to new terms.
func (o ChannelSettingsResponseOutput) RequireTermsAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) *bool { return v.RequireTermsAgreement }).(pulumi.BoolPtrOutput)
}

// The list of sites
func (o ChannelSettingsResponseOutput) Sites() SiteResponseArrayOutput {
	return o.ApplyT(func(v ChannelSettingsResponse) []SiteResponse { return v.Sites }).(SiteResponseArrayOutput)
}

type ChannelSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ChannelSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelSettingsResponse)(nil)).Elem()
}

func (o ChannelSettingsResponsePtrOutput) ToChannelSettingsResponsePtrOutput() ChannelSettingsResponsePtrOutput {
	return o
}

func (o ChannelSettingsResponsePtrOutput) ToChannelSettingsResponsePtrOutputWithContext(ctx context.Context) ChannelSettingsResponsePtrOutput {
	return o
}

func (o ChannelSettingsResponsePtrOutput) Elem() ChannelSettingsResponseOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) ChannelSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ChannelSettingsResponse
		return ret
	}).(ChannelSettingsResponseOutput)
}

// The bot icon url
func (o ChannelSettingsResponsePtrOutput) BotIconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BotIconUrl
	}).(pulumi.StringPtrOutput)
}

// The bot id
func (o ChannelSettingsResponsePtrOutput) BotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.BotId
	}).(pulumi.StringPtrOutput)
}

// The channel display name
func (o ChannelSettingsResponsePtrOutput) ChannelDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChannelDisplayName
	}).(pulumi.StringPtrOutput)
}

// The channel id
func (o ChannelSettingsResponsePtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
func (o ChannelSettingsResponsePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// The extensionKey1
func (o ChannelSettingsResponsePtrOutput) ExtensionKey1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionKey1
	}).(pulumi.StringPtrOutput)
}

// The extensionKey2
func (o ChannelSettingsResponsePtrOutput) ExtensionKey2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionKey2
	}).(pulumi.StringPtrOutput)
}

// Whether this channel is enabled for the bot
func (o ChannelSettingsResponsePtrOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether customer needs to agree to new terms.
func (o ChannelSettingsResponsePtrOutput) RequireTermsAgreement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RequireTermsAgreement
	}).(pulumi.BoolPtrOutput)
}

// The list of sites
func (o ChannelSettingsResponsePtrOutput) Sites() SiteResponseArrayOutput {
	return o.ApplyT(func(v *ChannelSettingsResponse) []SiteResponse {
		if v == nil {
			return nil
		}
		return v.Sites
	}).(SiteResponseArrayOutput)
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterResponse struct {
	// Key for the Connection Setting Parameter.
	Key *string `pulumi:"key"`
	// Value associated with the Connection Setting Parameter.
	Value *string `pulumi:"value"`
}

// Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
type ConnectionSettingParameterResponseOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingParameterResponse)(nil)).Elem()
}

func (o ConnectionSettingParameterResponseOutput) ToConnectionSettingParameterResponseOutput() ConnectionSettingParameterResponseOutput {
	return o
}

func (o ConnectionSettingParameterResponseOutput) ToConnectionSettingParameterResponseOutputWithContext(ctx context.Context) ConnectionSettingParameterResponseOutput {
	return o
}

// Key for the Connection Setting Parameter.
func (o ConnectionSettingParameterResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameterResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Value associated with the Connection Setting Parameter.
func (o ConnectionSettingParameterResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingParameterResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionSettingParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectionSettingParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionSettingParameterResponse)(nil)).Elem()
}

func (o ConnectionSettingParameterResponseArrayOutput) ToConnectionSettingParameterResponseArrayOutput() ConnectionSettingParameterResponseArrayOutput {
	return o
}

func (o ConnectionSettingParameterResponseArrayOutput) ToConnectionSettingParameterResponseArrayOutputWithContext(ctx context.Context) ConnectionSettingParameterResponseArrayOutput {
	return o
}

func (o ConnectionSettingParameterResponseArrayOutput) Index(i pulumi.IntInput) ConnectionSettingParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionSettingParameterResponse {
		return vs[0].([]ConnectionSettingParameterResponse)[vs[1].(int)]
	}).(ConnectionSettingParameterResponseOutput)
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesResponse struct {
	// Client Id associated with the Connection Setting.
	ClientId *string `pulumi:"clientId"`
	// Client Secret associated with the Connection Setting
	ClientSecret *string `pulumi:"clientSecret"`
	// Id of the Connection Setting.
	Id *string `pulumi:"id"`
	// Name of the Connection Setting.
	Name *string `pulumi:"name"`
	// Service Provider Parameters associated with the Connection Setting
	Parameters []ConnectionSettingParameterResponse `pulumi:"parameters"`
	// Provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Scopes associated with the Connection Setting
	Scopes *string `pulumi:"scopes"`
	// Service Provider Display Name associated with the Connection Setting
	ServiceProviderDisplayName *string `pulumi:"serviceProviderDisplayName"`
	// Service Provider Id associated with the Connection Setting
	ServiceProviderId *string `pulumi:"serviceProviderId"`
	// Setting Id set by the service for the Connection Setting.
	SettingId string `pulumi:"settingId"`
}

// Defaults sets the appropriate defaults for ConnectionSettingPropertiesResponse
func (val *ConnectionSettingPropertiesResponse) Defaults() *ConnectionSettingPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Scopes == nil {
		scopes_ := ""
		tmp.Scopes = &scopes_
	}
	return &tmp
}

// Properties for a Connection Setting Item
type ConnectionSettingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ConnectionSettingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionSettingPropertiesResponse)(nil)).Elem()
}

func (o ConnectionSettingPropertiesResponseOutput) ToConnectionSettingPropertiesResponseOutput() ConnectionSettingPropertiesResponseOutput {
	return o
}

func (o ConnectionSettingPropertiesResponseOutput) ToConnectionSettingPropertiesResponseOutputWithContext(ctx context.Context) ConnectionSettingPropertiesResponseOutput {
	return o
}

// Client Id associated with the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Client Secret associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Id of the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service Provider Parameters associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) Parameters() ConnectionSettingParameterResponseArrayOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) []ConnectionSettingParameterResponse { return v.Parameters }).(ConnectionSettingParameterResponseArrayOutput)
}

// Provisioning state of the resource
func (o ConnectionSettingPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Scopes associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// Service Provider Display Name associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ServiceProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ServiceProviderDisplayName }).(pulumi.StringPtrOutput)
}

// Service Provider Id associated with the Connection Setting
func (o ConnectionSettingPropertiesResponseOutput) ServiceProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) *string { return v.ServiceProviderId }).(pulumi.StringPtrOutput)
}

// Setting Id set by the service for the Connection Setting.
func (o ConnectionSettingPropertiesResponseOutput) SettingId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionSettingPropertiesResponse) string { return v.SettingId }).(pulumi.StringOutput)
}

// The parameters to provide for the Direct Line channel.
type DirectLineChannelPropertiesResponse struct {
	// Direct Line embed code of the resource
	DirectLineEmbedCode *string `pulumi:"directLineEmbedCode"`
	// The extensionKey1
	ExtensionKey1 *string `pulumi:"extensionKey1"`
	// The extensionKey2
	ExtensionKey2 *string `pulumi:"extensionKey2"`
	// The list of Direct Line sites
	Sites []DirectLineSiteResponse `pulumi:"sites"`
}

// Defaults sets the appropriate defaults for DirectLineChannelPropertiesResponse
func (val *DirectLineChannelPropertiesResponse) Defaults() *DirectLineChannelPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExtensionKey1 == nil {
		extensionKey1_ := ""
		tmp.ExtensionKey1 = &extensionKey1_
	}
	if tmp.ExtensionKey2 == nil {
		extensionKey2_ := ""
		tmp.ExtensionKey2 = &extensionKey2_
	}
	return &tmp
}

// Direct Line channel definition
type DirectLineChannelResponse struct {
	// The channel name
	// Expected value is 'DirectLineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Direct Line channel resource
	Properties *DirectLineChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for DirectLineChannelResponse
func (val *DirectLineChannelResponse) Defaults() *DirectLineChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A site for the Direct Line channel
type DirectLineSiteResponse struct {
	// DirectLine application id
	AppId *string `pulumi:"appId"`
	// Entity Tag
	ETag *string `pulumi:"eTag"`
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is disabled detailed logging for
	IsDetailedLoggingEnabled *bool `pulumi:"isDetailedLoggingEnabled"`
	// Whether this site is enabled for DirectLine channel
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is EndpointParameters enabled for channel
	IsEndpointParametersEnabled *bool `pulumi:"isEndpointParametersEnabled"`
	// Whether this no-storage site is disabled detailed logging for
	IsNoStorageEnabled *bool `pulumi:"isNoStorageEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is token enabled for channel
	IsTokenEnabled bool `pulumi:"isTokenEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V3 protocol.
	IsV3Enabled bool `pulumi:"isV3Enabled"`
	// Whether this site is enabled for Webchat Speech
	IsWebChatSpeechEnabled *bool `pulumi:"isWebChatSpeechEnabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled *bool `pulumi:"isWebchatPreviewEnabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// Tenant Id
	TenantId *string `pulumi:"tenantId"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// Defaults sets the appropriate defaults for DirectLineSiteResponse
func (val *DirectLineSiteResponse) Defaults() *DirectLineSiteResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsWebChatSpeechEnabled == nil {
		isWebChatSpeechEnabled_ := false
		tmp.IsWebChatSpeechEnabled = &isWebChatSpeechEnabled_
	}
	if tmp.IsWebchatPreviewEnabled == nil {
		isWebchatPreviewEnabled_ := false
		tmp.IsWebchatPreviewEnabled = &isWebchatPreviewEnabled_
	}
	return &tmp
}

// The parameters to provide for the DirectLine Speech channel.
type DirectLineSpeechChannelPropertiesResponse struct {
	// The cognitive service region with this channel registration.
	CognitiveServiceRegion *string `pulumi:"cognitiveServiceRegion"`
	// The cognitive service id with this channel registration.
	CognitiveServiceResourceId *string `pulumi:"cognitiveServiceResourceId"`
	// The cognitive service subscription key to use with this channel registration.
	CognitiveServiceSubscriptionKey *string `pulumi:"cognitiveServiceSubscriptionKey"`
	// Custom voice deployment id (optional).
	CustomSpeechModelId *string `pulumi:"customSpeechModelId"`
	// Custom speech model id (optional).
	CustomVoiceDeploymentId *string `pulumi:"customVoiceDeploymentId"`
	// Make this a default bot for chosen cognitive service account.
	IsDefaultBotForCogSvcAccount *bool `pulumi:"isDefaultBotForCogSvcAccount"`
	// Whether this channel is enabled or not.
	IsEnabled *bool `pulumi:"isEnabled"`
}

// DirectLine Speech channel definition
type DirectLineSpeechChannelResponse struct {
	// The channel name
	// Expected value is 'DirectLineSpeechChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to DirectLine Speech channel resource
	Properties *DirectLineSpeechChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for DirectLineSpeechChannelResponse
func (val *DirectLineSpeechChannelResponse) Defaults() *DirectLineSpeechChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Email channel.
type EmailChannelPropertiesResponse struct {
	// Email channel auth method. 0 Password (Default); 1 Graph.
	AuthMethod *float64 `pulumi:"authMethod"`
	// The email address
	EmailAddress string `pulumi:"emailAddress"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The magic code for setting up the modern authentication.
	MagicCode *string `pulumi:"magicCode"`
	// The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
	Password *string `pulumi:"password"`
}

// Email channel definition
type EmailChannelResponse struct {
	// The channel name
	// Expected value is 'EmailChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to email channel resource
	Properties *EmailChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for EmailChannelResponse
func (val *EmailChannelResponse) Defaults() *EmailChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Facebook channel.
type FacebookChannelPropertiesResponse struct {
	// Facebook application id
	AppId string `pulumi:"appId"`
	// Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
	AppSecret *string `pulumi:"appSecret"`
	// Callback Url
	CallbackUrl string `pulumi:"callbackUrl"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// The list of Facebook pages
	Pages []FacebookPageResponse `pulumi:"pages"`
	// Verify token. Value only returned through POST to the action Channel List API, otherwise empty.
	VerifyToken string `pulumi:"verifyToken"`
}

// Facebook channel definition
type FacebookChannelResponse struct {
	// The channel name
	// Expected value is 'FacebookChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to bot facebook channel
	Properties *FacebookChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for FacebookChannelResponse
func (val *FacebookChannelResponse) Defaults() *FacebookChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A Facebook page for Facebook channel registration
type FacebookPageResponse struct {
	// Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Page id
	Id string `pulumi:"id"`
}

// The parameters to provide for the Kik channel.
type KikChannelPropertiesResponse struct {
	// Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
	ApiKey *string `pulumi:"apiKey"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Kik user name
	UserName string `pulumi:"userName"`
}

// Kik channel definition
type KikChannelResponse struct {
	// The channel name
	// Expected value is 'KikChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Kik channel resource
	Properties *KikChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for KikChannelResponse
func (val *KikChannelResponse) Defaults() *KikChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Line channel.
type LineChannelPropertiesResponse struct {
	// Callback Url to enter in line registration.
	CallbackUrl string `pulumi:"callbackUrl"`
	// Whether this channel is validated for the bot
	IsValidated bool `pulumi:"isValidated"`
	// The list of line channel registrations
	LineRegistrations []LineRegistrationResponse `pulumi:"lineRegistrations"`
}

// Line channel definition
type LineChannelResponse struct {
	// The channel name
	// Expected value is 'LineChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to line channel resource
	Properties *LineChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for LineChannelResponse
func (val *LineChannelResponse) Defaults() *LineChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The properties corresponding to a line channel registration
type LineRegistrationResponse struct {
	// Access token for the line channel registration
	ChannelAccessToken *string `pulumi:"channelAccessToken"`
	// Secret for the line channel registration
	ChannelSecret *string `pulumi:"channelSecret"`
	// Id generated for the line channel registration
	GeneratedId string `pulumi:"generatedId"`
}

// M365 Extensions definition
type M365ExtensionsResponse struct {
	// The channel name
	// Expected value is 'M365Extensions'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for M365ExtensionsResponse
func (val *M365ExtensionsResponse) Defaults() *M365ExtensionsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Microsoft Teams channel.
type MsTeamsChannelPropertiesResponse struct {
	// Whether this channel accepted terms
	AcceptedTerms *bool `pulumi:"acceptedTerms"`
	// Webhook for Microsoft Teams channel calls
	CallingWebhook *string `pulumi:"callingWebhook"`
	// Deployment environment for Microsoft Teams channel calls
	DeploymentEnvironment *string `pulumi:"deploymentEnvironment"`
	// Enable calling for Microsoft Teams channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Webhook for Microsoft Teams channel calls
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// Defaults sets the appropriate defaults for MsTeamsChannelPropertiesResponse
func (val *MsTeamsChannelPropertiesResponse) Defaults() *MsTeamsChannelPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DeploymentEnvironment == nil {
		deploymentEnvironment_ := "FallbackDeploymentEnvironment"
		tmp.DeploymentEnvironment = &deploymentEnvironment_
	}
	if tmp.EnableCalling == nil {
		enableCalling_ := false
		tmp.EnableCalling = &enableCalling_
	}
	return &tmp
}

// Microsoft Teams channel definition
type MsTeamsChannelResponse struct {
	// The channel name
	// Expected value is 'MsTeamsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Microsoft Teams channel resource
	Properties *MsTeamsChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for MsTeamsChannelResponse
func (val *MsTeamsChannelResponse) Defaults() *MsTeamsChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Omnichannel channel definition
type OmnichannelResponse struct {
	// The channel name
	// Expected value is 'Omnichannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for OmnichannelResponse
func (val *OmnichannelResponse) Defaults() *OmnichannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Outlook channel definition
type OutlookChannelResponse struct {
	// The channel name
	// Expected value is 'OutlookChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for OutlookChannelResponse
func (val *OutlookChannelResponse) Defaults() *OutlookChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// SearchAssistant definition
type SearchAssistantResponse struct {
	// The channel name
	// Expected value is 'SearchAssistant'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SearchAssistantResponse
func (val *SearchAssistantResponse) Defaults() *SearchAssistantResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// Extra Parameters specific to each Service Provider
type ServiceProviderParameterResponse struct {
	// Default Name for the Service Provider
	Default string `pulumi:"default"`
	// Description of the Service Provider
	Description string `pulumi:"description"`
	// Display Name of the Service Provider
	DisplayName string `pulumi:"displayName"`
	// Help Url for the  Service Provider
	HelpUrl string `pulumi:"helpUrl"`
	// Meta data for the Service Provider
	Metadata ServiceProviderParameterResponseMetadata `pulumi:"metadata"`
	// Name of the Service Provider
	Name string `pulumi:"name"`
	// Type of the Service Provider
	Type string `pulumi:"type"`
}

// the constraints of the bot meta data.
type ServiceProviderParameterResponseConstraints struct {
	// Whether required the constraints of the bot meta data.
	Required *bool `pulumi:"required"`
}

// Meta data for the Service Provider
type ServiceProviderParameterResponseMetadata struct {
	// the constraints of the bot meta data.
	Constraints *ServiceProviderParameterResponseConstraints `pulumi:"constraints"`
}

// The Object used to describe a Service Provider supported by Bot Service
type ServiceProviderPropertiesResponse struct {
	// URL of Dev Portal
	DevPortalUrl string `pulumi:"devPortalUrl"`
	// Display Name of the Service Provider
	DisplayName string `pulumi:"displayName"`
	// The URL of icon
	IconUrl *string `pulumi:"iconUrl"`
	// Id for Service Provider
	Id string `pulumi:"id"`
	// The list of parameters for the Service Provider
	Parameters []ServiceProviderParameterResponse `pulumi:"parameters"`
	// Name of the Service Provider
	ServiceProviderName string `pulumi:"serviceProviderName"`
}

// Defaults sets the appropriate defaults for ServiceProviderPropertiesResponse
func (val *ServiceProviderPropertiesResponse) Defaults() *ServiceProviderPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IconUrl == nil {
		iconUrl_ := ""
		tmp.IconUrl = &iconUrl_
	}
	return &tmp
}

// Service Provider Definition
type ServiceProviderResponse struct {
	// The Properties of a Service Provider Object
	Properties *ServiceProviderPropertiesResponse `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for ServiceProviderResponse
func (val *ServiceProviderResponse) Defaults() *ServiceProviderResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A site for the channel
type SiteResponse struct {
	// DirectLine application id
	AppId *string `pulumi:"appId"`
	// Entity Tag
	ETag *string `pulumi:"eTag"`
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is disabled detailed logging for
	IsDetailedLoggingEnabled *bool `pulumi:"isDetailedLoggingEnabled"`
	// Whether this site is enabled for DirectLine channel
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is EndpointParameters enabled for channel
	IsEndpointParametersEnabled *bool `pulumi:"isEndpointParametersEnabled"`
	// Whether this no-storage site is disabled detailed logging for
	IsNoStorageEnabled *bool `pulumi:"isNoStorageEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is token enabled for channel
	IsTokenEnabled bool `pulumi:"isTokenEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled *bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V3 protocol.
	IsV3Enabled *bool `pulumi:"isV3Enabled"`
	// Whether this site is enabled for Webchat Speech
	IsWebChatSpeechEnabled *bool `pulumi:"isWebChatSpeechEnabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled *bool `pulumi:"isWebchatPreviewEnabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// Tenant Id
	TenantId *string `pulumi:"tenantId"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// Defaults sets the appropriate defaults for SiteResponse
func (val *SiteResponse) Defaults() *SiteResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsWebChatSpeechEnabled == nil {
		isWebChatSpeechEnabled_ := false
		tmp.IsWebChatSpeechEnabled = &isWebChatSpeechEnabled_
	}
	if tmp.IsWebchatPreviewEnabled == nil {
		isWebchatPreviewEnabled_ := false
		tmp.IsWebchatPreviewEnabled = &isWebchatPreviewEnabled_
	}
	return &tmp
}

// A site for the channel
type SiteResponseOutput struct{ *pulumi.OutputState }

func (SiteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteResponse)(nil)).Elem()
}

func (o SiteResponseOutput) ToSiteResponseOutput() SiteResponseOutput {
	return o
}

func (o SiteResponseOutput) ToSiteResponseOutputWithContext(ctx context.Context) SiteResponseOutput {
	return o
}

// DirectLine application id
func (o SiteResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Entity Tag
func (o SiteResponseOutput) ETag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteResponse) *string { return v.ETag }).(pulumi.StringPtrOutput)
}

// Whether this site is enabled for block user upload.
func (o SiteResponseOutput) IsBlockUserUploadEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsBlockUserUploadEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is disabled detailed logging for
func (o SiteResponseOutput) IsDetailedLoggingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsDetailedLoggingEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for DirectLine channel
func (o SiteResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

// Whether this site is EndpointParameters enabled for channel
func (o SiteResponseOutput) IsEndpointParametersEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsEndpointParametersEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this no-storage site is disabled detailed logging for
func (o SiteResponseOutput) IsNoStorageEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsNoStorageEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for authentication with Bot Framework.
func (o SiteResponseOutput) IsSecureSiteEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsSecureSiteEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is token enabled for channel
func (o SiteResponseOutput) IsTokenEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SiteResponse) bool { return v.IsTokenEnabled }).(pulumi.BoolOutput)
}

// Whether this site is enabled for Bot Framework V1 protocol.
func (o SiteResponseOutput) IsV1Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsV1Enabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for Bot Framework V3 protocol.
func (o SiteResponseOutput) IsV3Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsV3Enabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for Webchat Speech
func (o SiteResponseOutput) IsWebChatSpeechEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsWebChatSpeechEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this site is enabled for preview versions of Webchat
func (o SiteResponseOutput) IsWebchatPreviewEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SiteResponse) *bool { return v.IsWebchatPreviewEnabled }).(pulumi.BoolPtrOutput)
}

// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
func (o SiteResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
func (o SiteResponseOutput) Key2() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.Key2 }).(pulumi.StringOutput)
}

// Site Id
func (o SiteResponseOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.SiteId }).(pulumi.StringOutput)
}

// Site name
func (o SiteResponseOutput) SiteName() pulumi.StringOutput {
	return o.ApplyT(func(v SiteResponse) string { return v.SiteName }).(pulumi.StringOutput)
}

// Tenant Id
func (o SiteResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SiteResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
func (o SiteResponseOutput) TrustedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SiteResponse) []string { return v.TrustedOrigins }).(pulumi.StringArrayOutput)
}

type SiteResponseArrayOutput struct{ *pulumi.OutputState }

func (SiteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SiteResponse)(nil)).Elem()
}

func (o SiteResponseArrayOutput) ToSiteResponseArrayOutput() SiteResponseArrayOutput {
	return o
}

func (o SiteResponseArrayOutput) ToSiteResponseArrayOutputWithContext(ctx context.Context) SiteResponseArrayOutput {
	return o
}

func (o SiteResponseArrayOutput) Index(i pulumi.IntInput) SiteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SiteResponse {
		return vs[0].([]SiteResponse)[vs[1].(int)]
	}).(SiteResponseOutput)
}

// The SKU of the cognitive services account.
type SkuResponse struct {
	// The sku name
	Name string `pulumi:"name"`
	// Gets the sku tier. This is based on the SKU name.
	Tier string `pulumi:"tier"`
}

// The SKU of the cognitive services account.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The sku name
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the sku tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The sku name
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Gets the sku tier. This is based on the SKU name.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The parameters to provide for the Microsoft Teams channel.
type SkypeChannelPropertiesResponse struct {
	// Calling web hook for Skype channel
	CallingWebHook *string `pulumi:"callingWebHook"`
	// Enable calling for Skype channel
	EnableCalling *bool `pulumi:"enableCalling"`
	// Enable groups for Skype channel
	EnableGroups *bool `pulumi:"enableGroups"`
	// Enable media cards for Skype channel
	EnableMediaCards *bool `pulumi:"enableMediaCards"`
	// Enable messaging for Skype channel
	EnableMessaging *bool `pulumi:"enableMessaging"`
	// Enable screen sharing for Skype channel
	EnableScreenSharing *bool `pulumi:"enableScreenSharing"`
	// Enable video for Skype channel
	EnableVideo *bool `pulumi:"enableVideo"`
	// Group mode for Skype channel
	GroupsMode *string `pulumi:"groupsMode"`
	// Incoming call route for Skype channel
	IncomingCallRoute *string `pulumi:"incomingCallRoute"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
}

// Defaults sets the appropriate defaults for SkypeChannelPropertiesResponse
func (val *SkypeChannelPropertiesResponse) Defaults() *SkypeChannelPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableCalling == nil {
		enableCalling_ := false
		tmp.EnableCalling = &enableCalling_
	}
	return &tmp
}

// Skype channel definition
type SkypeChannelResponse struct {
	// The channel name
	// Expected value is 'SkypeChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Skype channel resource
	Properties *SkypeChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SkypeChannelResponse
func (val *SkypeChannelResponse) Defaults() *SkypeChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// The parameters to provide for the Slack channel.
type SlackChannelPropertiesResponse struct {
	// The Slack client id
	ClientId *string `pulumi:"clientId"`
	// The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
	ClientSecret *string `pulumi:"clientSecret"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated bool `pulumi:"isValidated"`
	// The Slack landing page Url
	LandingPageUrl *string `pulumi:"landingPageUrl"`
	// The Sms auth token
	LastSubmissionId string `pulumi:"lastSubmissionId"`
	// The Slack redirect action
	RedirectAction string `pulumi:"redirectAction"`
	// Whether to register the settings before OAuth validation is performed. Recommended to True.
	RegisterBeforeOAuthFlow bool `pulumi:"registerBeforeOAuthFlow"`
	// The Slack permission scopes.
	Scopes *string `pulumi:"scopes"`
	// The Slack signing secret.
	SigningSecret *string `pulumi:"signingSecret"`
	// The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
	VerificationToken *string `pulumi:"verificationToken"`
}

// Slack channel definition
type SlackChannelResponse struct {
	// The channel name
	// Expected value is 'SlackChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Slack channel resource
	Properties *SlackChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SlackChannelResponse
func (val *SlackChannelResponse) Defaults() *SlackChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Sms channel.
type SmsChannelPropertiesResponse struct {
	// The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
	AccountSID string `pulumi:"accountSID"`
	// The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
	AuthToken *string `pulumi:"authToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
	// The Sms phone
	Phone string `pulumi:"phone"`
}

// Sms channel definition
type SmsChannelResponse struct {
	// The channel name
	// Expected value is 'SmsChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Sms channel resource
	Properties *SmsChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for SmsChannelResponse
func (val *SmsChannelResponse) Defaults() *SmsChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Telegram channel.
type TelegramChannelPropertiesResponse struct {
	// The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
	AccessToken *string `pulumi:"accessToken"`
	// Whether this channel is enabled for the bot
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this channel is validated for the bot
	IsValidated *bool `pulumi:"isValidated"`
}

// Telegram channel definition
type TelegramChannelResponse struct {
	// The channel name
	// Expected value is 'TelegramChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Telegram channel resource
	Properties *TelegramChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for TelegramChannelResponse
func (val *TelegramChannelResponse) Defaults() *TelegramChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// The parameters to provide for the Direct Line channel.
type TelephonyChannelPropertiesResponse struct {
	// The list of Telephony api configuration
	ApiConfigurations []TelephonyChannelResourceApiConfigurationResponse `pulumi:"apiConfigurations"`
	// The extensionKey2
	CognitiveServiceRegion *string `pulumi:"cognitiveServiceRegion"`
	// The extensionKey1
	CognitiveServiceSubscriptionKey *string `pulumi:"cognitiveServiceSubscriptionKey"`
	// The default locale of the channel
	DefaultLocale *string `pulumi:"defaultLocale"`
	// Whether the channel is enabled
	IsEnabled *bool `pulumi:"isEnabled"`
	// The list of Telephony phone numbers
	PhoneNumbers []TelephonyPhoneNumbersResponse `pulumi:"phoneNumbers"`
	// The premium SKU applied to the channel
	PremiumSKU *string `pulumi:"premiumSKU"`
}

// A resource Api configuration for the Telephony channel
type TelephonyChannelResourceApiConfigurationResponse struct {
	// The cognitive service region.
	CognitiveServiceRegion *string `pulumi:"cognitiveServiceRegion"`
	// The cognitive service resourceId.
	CognitiveServiceResourceId *string `pulumi:"cognitiveServiceResourceId"`
	// The cognitive service subscription key.
	CognitiveServiceSubscriptionKey *string `pulumi:"cognitiveServiceSubscriptionKey"`
	// The default locale.
	DefaultLocale *string `pulumi:"defaultLocale"`
	// The id of config.
	Id *string `pulumi:"id"`
	// The provider name.
	ProviderName *string `pulumi:"providerName"`
}

// Telephony channel definition
type TelephonyChannelResponse struct {
	// The channel name
	// Expected value is 'TelephonyChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Telephony channel resource
	Properties *TelephonyChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for TelephonyChannelResponse
func (val *TelephonyChannelResponse) Defaults() *TelephonyChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A telephone number for the Telephony channel
type TelephonyPhoneNumbersResponse struct {
	// The endpoint of ACS.
	AcsEndpoint *string `pulumi:"acsEndpoint"`
	// The resource id of ACS.
	AcsResourceId *string `pulumi:"acsResourceId"`
	// The secret of ACS.
	AcsSecret *string `pulumi:"acsSecret"`
	// The service region of cognitive service.
	CognitiveServiceRegion *string `pulumi:"cognitiveServiceRegion"`
	// The resource id of cognitive service.
	CognitiveServiceResourceId *string `pulumi:"cognitiveServiceResourceId"`
	// The subscription key of cognitive service.
	CognitiveServiceSubscriptionKey *string `pulumi:"cognitiveServiceSubscriptionKey"`
	// The default locale of the phone number.
	DefaultLocale *string `pulumi:"defaultLocale"`
	// The element id.
	Id *string `pulumi:"id"`
	// Optional Property that will determine the offering type of the phone.
	OfferType *string `pulumi:"offerType"`
	// The phone number.
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// The parameters to provide for the Web Chat channel.
type WebChatChannelPropertiesResponse struct {
	// The list of Web Chat sites
	Sites []WebChatSiteResponse `pulumi:"sites"`
	// Web chat control embed code
	WebChatEmbedCode string `pulumi:"webChatEmbedCode"`
}

// Web Chat channel definition
type WebChatChannelResponse struct {
	// The channel name
	// Expected value is 'WebChatChannel'.
	ChannelName string `pulumi:"channelName"`
	// Entity Tag of the resource
	Etag *string `pulumi:"etag"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The set of properties specific to Web Chat channel resource
	Properties *WebChatChannelPropertiesResponse `pulumi:"properties"`
	// Provisioning state of the resource
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for WebChatChannelResponse
func (val *WebChatChannelResponse) Defaults() *WebChatChannelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Location == nil {
		location_ := "global"
		tmp.Location = &location_
	}
	return &tmp
}

// A site for the Webchat channel
type WebChatSiteResponse struct {
	// DirectLine application id
	AppId *string `pulumi:"appId"`
	// Entity Tag
	ETag *string `pulumi:"eTag"`
	// Whether this site is enabled for block user upload.
	IsBlockUserUploadEnabled *bool `pulumi:"isBlockUserUploadEnabled"`
	// Whether this site is disabled detailed logging for
	IsDetailedLoggingEnabled *bool `pulumi:"isDetailedLoggingEnabled"`
	// Whether this site is enabled for DirectLine channel
	IsEnabled bool `pulumi:"isEnabled"`
	// Whether this site is EndpointParameters enabled for channel
	IsEndpointParametersEnabled *bool `pulumi:"isEndpointParametersEnabled"`
	// Whether this no-storage site is disabled detailed logging for
	IsNoStorageEnabled *bool `pulumi:"isNoStorageEnabled"`
	// Whether this site is enabled for authentication with Bot Framework.
	IsSecureSiteEnabled *bool `pulumi:"isSecureSiteEnabled"`
	// Whether this site is token enabled for channel
	IsTokenEnabled bool `pulumi:"isTokenEnabled"`
	// Whether this site is enabled for Bot Framework V1 protocol.
	IsV1Enabled *bool `pulumi:"isV1Enabled"`
	// Whether this site is enabled for Bot Framework V3 protocol.
	IsV3Enabled *bool `pulumi:"isV3Enabled"`
	// Whether this site is enabled for Webchat Speech
	IsWebChatSpeechEnabled *bool `pulumi:"isWebChatSpeechEnabled"`
	// Whether this site is enabled for preview versions of Webchat
	IsWebchatPreviewEnabled bool `pulumi:"isWebchatPreviewEnabled"`
	// Primary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key string `pulumi:"key"`
	// Secondary key. Value only returned through POST to the action Channel List API, otherwise empty.
	Key2 string `pulumi:"key2"`
	// Site Id
	SiteId string `pulumi:"siteId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	// Tenant Id
	TenantId *string `pulumi:"tenantId"`
	// List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
	TrustedOrigins []string `pulumi:"trustedOrigins"`
}

// Defaults sets the appropriate defaults for WebChatSiteResponse
func (val *WebChatSiteResponse) Defaults() *WebChatSiteResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsWebChatSpeechEnabled == nil {
		isWebChatSpeechEnabled_ := false
		tmp.IsWebChatSpeechEnabled = &isWebChatSpeechEnabled_
	}
	if isZero(tmp.IsWebchatPreviewEnabled) {
		tmp.IsWebchatPreviewEnabled = false
	}
	return &tmp
}
func init() {
	pulumi.RegisterOutputType(ChannelSettingsResponseOutput{})
	pulumi.RegisterOutputType(ChannelSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterResponseOutput{})
	pulumi.RegisterOutputType(ConnectionSettingParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionSettingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SiteResponseOutput{})
	pulumi.RegisterOutputType(SiteResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
}
