// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hybridconnectivity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Solution Configuration
// Azure REST API version: 2024-12-01. Prior API version in Azure Native 2.x: 2024-12-01.
type SolutionConfiguration struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The last time resources were inventoried
	LastSyncTime pulumi.StringOutput `pulumi:"lastSyncTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Solution settings
	SolutionSettings pulumi.StringMapOutput `pulumi:"solutionSettings"`
	// The type of the solution
	SolutionType pulumi.StringOutput `pulumi:"solutionType"`
	// The status of solution configurations
	Status pulumi.StringOutput `pulumi:"status"`
	// The detailed message of status details
	StatusDetails pulumi.StringOutput `pulumi:"statusDetails"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSolutionConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSolutionConfiguration(ctx *pulumi.Context,
	name string, args *SolutionConfigurationArgs, opts ...pulumi.ResourceOption) (*SolutionConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	if args.SolutionType == nil {
		return nil, errors.New("invalid value for required argument 'SolutionType'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridconnectivity/v20241201:SolutionConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolutionConfiguration
	err := ctx.RegisterResource("azure-native:hybridconnectivity:SolutionConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionConfiguration gets an existing SolutionConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionConfigurationState, opts ...pulumi.ResourceOption) (*SolutionConfiguration, error) {
	var resource SolutionConfiguration
	err := ctx.ReadResource("azure-native:hybridconnectivity:SolutionConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionConfiguration resources.
type solutionConfigurationState struct {
}

type SolutionConfigurationState struct {
}

func (SolutionConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionConfigurationState)(nil)).Elem()
}

type solutionConfigurationArgs struct {
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
	// Represent Solution Configuration Resource.
	SolutionConfiguration *string `pulumi:"solutionConfiguration"`
	// Solution settings
	SolutionSettings map[string]string `pulumi:"solutionSettings"`
	// The type of the solution
	SolutionType string `pulumi:"solutionType"`
}

// The set of arguments for constructing a SolutionConfiguration resource.
type SolutionConfigurationArgs struct {
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
	// Represent Solution Configuration Resource.
	SolutionConfiguration pulumi.StringPtrInput
	// Solution settings
	SolutionSettings pulumi.StringMapInput
	// The type of the solution
	SolutionType pulumi.StringInput
}

func (SolutionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionConfigurationArgs)(nil)).Elem()
}

type SolutionConfigurationInput interface {
	pulumi.Input

	ToSolutionConfigurationOutput() SolutionConfigurationOutput
	ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput
}

func (*SolutionConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionConfiguration)(nil)).Elem()
}

func (i *SolutionConfiguration) ToSolutionConfigurationOutput() SolutionConfigurationOutput {
	return i.ToSolutionConfigurationOutputWithContext(context.Background())
}

func (i *SolutionConfiguration) ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionConfigurationOutput)
}

type SolutionConfigurationOutput struct{ *pulumi.OutputState }

func (SolutionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionConfiguration)(nil)).Elem()
}

func (o SolutionConfigurationOutput) ToSolutionConfigurationOutput() SolutionConfigurationOutput {
	return o
}

func (o SolutionConfigurationOutput) ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput {
	return o
}

// The Azure API version of the resource.
func (o SolutionConfigurationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The last time resources were inventoried
func (o SolutionConfigurationOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.LastSyncTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o SolutionConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource provisioning state.
func (o SolutionConfigurationOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Solution settings
func (o SolutionConfigurationOutput) SolutionSettings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringMapOutput { return v.SolutionSettings }).(pulumi.StringMapOutput)
}

// The type of the solution
func (o SolutionConfigurationOutput) SolutionType() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.SolutionType }).(pulumi.StringOutput)
}

// The status of solution configurations
func (o SolutionConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The detailed message of status details
func (o SolutionConfigurationOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.StatusDetails }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SolutionConfigurationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SolutionConfiguration) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SolutionConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SolutionConfigurationOutput{})
}
