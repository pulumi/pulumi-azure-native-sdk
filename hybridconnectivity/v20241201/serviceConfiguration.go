// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241201

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The service configuration details associated with the target resource.
type ServiceConfiguration struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The port on which service is enabled.
	Port pulumi.Float64PtrOutput `pulumi:"port"`
	// The resource provisioning state.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The resource Id of the connectivity endpoint (optional).
	ResourceId pulumi.StringPtrOutput `pulumi:"resourceId"`
	// Name of the service.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewServiceConfiguration registers a new resource with the given unique name, arguments, and options.
func NewServiceConfiguration(ctx *pulumi.Context,
	name string, args *ServiceConfigurationArgs, opts ...pulumi.ResourceOption) (*ServiceConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointName == nil {
		return nil, errors.New("invalid value for required argument 'EndpointName'")
	}
	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridconnectivity/v20230315:ServiceConfiguration"),
		},
		{
			Type: pulumi.String("azure-native:hybridconnectivity:ServiceConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceConfiguration
	err := ctx.RegisterResource("azure-native:hybridconnectivity/v20241201:ServiceConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceConfiguration gets an existing ServiceConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceConfigurationState, opts ...pulumi.ResourceOption) (*ServiceConfiguration, error) {
	var resource ServiceConfiguration
	err := ctx.ReadResource("azure-native:hybridconnectivity/v20241201:ServiceConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceConfiguration resources.
type serviceConfigurationState struct {
}

type ServiceConfigurationState struct {
}

func (ServiceConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConfigurationState)(nil)).Elem()
}

type serviceConfigurationArgs struct {
	// The endpoint name.
	EndpointName string `pulumi:"endpointName"`
	// The port on which service is enabled.
	Port *float64 `pulumi:"port"`
	// The resource Id of the connectivity endpoint (optional).
	ResourceId *string `pulumi:"resourceId"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
	// The service name.
	ServiceConfigurationName *string `pulumi:"serviceConfigurationName"`
	// Name of the service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ServiceConfiguration resource.
type ServiceConfigurationArgs struct {
	// The endpoint name.
	EndpointName pulumi.StringInput
	// The port on which service is enabled.
	Port pulumi.Float64PtrInput
	// The resource Id of the connectivity endpoint (optional).
	ResourceId pulumi.StringPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
	// The service name.
	ServiceConfigurationName pulumi.StringPtrInput
	// Name of the service.
	ServiceName pulumi.StringInput
}

func (ServiceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceConfigurationArgs)(nil)).Elem()
}

type ServiceConfigurationInput interface {
	pulumi.Input

	ToServiceConfigurationOutput() ServiceConfigurationOutput
	ToServiceConfigurationOutputWithContext(ctx context.Context) ServiceConfigurationOutput
}

func (*ServiceConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConfiguration)(nil)).Elem()
}

func (i *ServiceConfiguration) ToServiceConfigurationOutput() ServiceConfigurationOutput {
	return i.ToServiceConfigurationOutputWithContext(context.Background())
}

func (i *ServiceConfiguration) ToServiceConfigurationOutputWithContext(ctx context.Context) ServiceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceConfigurationOutput)
}

type ServiceConfigurationOutput struct{ *pulumi.OutputState }

func (ServiceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceConfiguration)(nil)).Elem()
}

func (o ServiceConfigurationOutput) ToServiceConfigurationOutput() ServiceConfigurationOutput {
	return o
}

func (o ServiceConfigurationOutput) ToServiceConfigurationOutputWithContext(ctx context.Context) ServiceConfigurationOutput {
	return o
}

// The name of the resource
func (o ServiceConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port on which service is enabled.
func (o ServiceConfigurationOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.Float64PtrOutput { return v.Port }).(pulumi.Float64PtrOutput)
}

// The resource provisioning state.
func (o ServiceConfigurationOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The resource Id of the connectivity endpoint (optional).
func (o ServiceConfigurationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.StringPtrOutput { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Name of the service.
func (o ServiceConfigurationOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ServiceConfigurationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ServiceConfiguration) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ServiceConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceConfigurationOutput{})
}
