// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241201

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Solution Configuration
type SolutionConfiguration struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties SolutionConfigurationPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSolutionConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSolutionConfiguration(ctx *pulumi.Context,
	name string, args *SolutionConfigurationArgs, opts ...pulumi.ResourceOption) (*SolutionConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:hybridconnectivity:SolutionConfiguration"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolutionConfiguration
	err := ctx.RegisterResource("azure-native:hybridconnectivity/v20241201:SolutionConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolutionConfiguration gets an existing SolutionConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolutionConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolutionConfigurationState, opts ...pulumi.ResourceOption) (*SolutionConfiguration, error) {
	var resource SolutionConfiguration
	err := ctx.ReadResource("azure-native:hybridconnectivity/v20241201:SolutionConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolutionConfiguration resources.
type solutionConfigurationState struct {
}

type SolutionConfigurationState struct {
}

func (SolutionConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionConfigurationState)(nil)).Elem()
}

type solutionConfigurationArgs struct {
	// The resource-specific properties for this resource.
	Properties *SolutionConfigurationProperties `pulumi:"properties"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
	// Represent Solution Configuration Resource.
	SolutionConfiguration *string `pulumi:"solutionConfiguration"`
}

// The set of arguments for constructing a SolutionConfiguration resource.
type SolutionConfigurationArgs struct {
	// The resource-specific properties for this resource.
	Properties SolutionConfigurationPropertiesPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
	// Represent Solution Configuration Resource.
	SolutionConfiguration pulumi.StringPtrInput
}

func (SolutionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solutionConfigurationArgs)(nil)).Elem()
}

type SolutionConfigurationInput interface {
	pulumi.Input

	ToSolutionConfigurationOutput() SolutionConfigurationOutput
	ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput
}

func (*SolutionConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionConfiguration)(nil)).Elem()
}

func (i *SolutionConfiguration) ToSolutionConfigurationOutput() SolutionConfigurationOutput {
	return i.ToSolutionConfigurationOutputWithContext(context.Background())
}

func (i *SolutionConfiguration) ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolutionConfigurationOutput)
}

type SolutionConfigurationOutput struct{ *pulumi.OutputState }

func (SolutionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolutionConfiguration)(nil)).Elem()
}

func (o SolutionConfigurationOutput) ToSolutionConfigurationOutput() SolutionConfigurationOutput {
	return o
}

func (o SolutionConfigurationOutput) ToSolutionConfigurationOutputWithContext(ctx context.Context) SolutionConfigurationOutput {
	return o
}

// The name of the resource
func (o SolutionConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o SolutionConfigurationOutput) Properties() SolutionConfigurationPropertiesResponseOutput {
	return o.ApplyT(func(v *SolutionConfiguration) SolutionConfigurationPropertiesResponseOutput { return v.Properties }).(SolutionConfigurationPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SolutionConfigurationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SolutionConfiguration) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SolutionConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SolutionConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SolutionConfigurationOutput{})
}
