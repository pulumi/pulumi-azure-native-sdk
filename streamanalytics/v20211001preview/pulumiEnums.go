// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Authentication Mode.
type AuthenticationMode string

const (
	AuthenticationModeMsi              = AuthenticationMode("Msi")
	AuthenticationModeUserToken        = AuthenticationMode("UserToken")
	AuthenticationModeConnectionString = AuthenticationMode("ConnectionString")
)

func (AuthenticationMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationMode)(nil)).Elem()
}

func (e AuthenticationMode) ToAuthenticationModeOutput() AuthenticationModeOutput {
	return pulumi.ToOutput(e).(AuthenticationModeOutput)
}

func (e AuthenticationMode) ToAuthenticationModeOutputWithContext(ctx context.Context) AuthenticationModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AuthenticationModeOutput)
}

func (e AuthenticationMode) ToAuthenticationModePtrOutput() AuthenticationModePtrOutput {
	return e.ToAuthenticationModePtrOutputWithContext(context.Background())
}

func (e AuthenticationMode) ToAuthenticationModePtrOutputWithContext(ctx context.Context) AuthenticationModePtrOutput {
	return AuthenticationMode(e).ToAuthenticationModeOutputWithContext(ctx).ToAuthenticationModePtrOutputWithContext(ctx)
}

func (e AuthenticationMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthenticationMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AuthenticationMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AuthenticationMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AuthenticationModeOutput struct{ *pulumi.OutputState }

func (AuthenticationModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthenticationMode)(nil)).Elem()
}

func (o AuthenticationModeOutput) ToAuthenticationModeOutput() AuthenticationModeOutput {
	return o
}

func (o AuthenticationModeOutput) ToAuthenticationModeOutputWithContext(ctx context.Context) AuthenticationModeOutput {
	return o
}

func (o AuthenticationModeOutput) ToAuthenticationModePtrOutput() AuthenticationModePtrOutput {
	return o.ToAuthenticationModePtrOutputWithContext(context.Background())
}

func (o AuthenticationModeOutput) ToAuthenticationModePtrOutputWithContext(ctx context.Context) AuthenticationModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuthenticationMode) *AuthenticationMode {
		return &v
	}).(AuthenticationModePtrOutput)
}

func (o AuthenticationModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AuthenticationModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthenticationMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AuthenticationModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthenticationModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AuthenticationMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AuthenticationModePtrOutput struct{ *pulumi.OutputState }

func (AuthenticationModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticationMode)(nil)).Elem()
}

func (o AuthenticationModePtrOutput) ToAuthenticationModePtrOutput() AuthenticationModePtrOutput {
	return o
}

func (o AuthenticationModePtrOutput) ToAuthenticationModePtrOutputWithContext(ctx context.Context) AuthenticationModePtrOutput {
	return o
}

func (o AuthenticationModePtrOutput) Elem() AuthenticationModeOutput {
	return o.ApplyT(func(v *AuthenticationMode) AuthenticationMode {
		if v != nil {
			return *v
		}
		var ret AuthenticationMode
		return ret
	}).(AuthenticationModeOutput)
}

func (o AuthenticationModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AuthenticationModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AuthenticationMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AuthenticationModeInput is an input type that accepts values of the AuthenticationMode enum
// A concrete instance of `AuthenticationModeInput` can be one of the following:
//
//	AuthenticationModeMsi
//	AuthenticationModeUserToken
//	AuthenticationModeConnectionString
type AuthenticationModeInput interface {
	pulumi.Input

	ToAuthenticationModeOutput() AuthenticationModeOutput
	ToAuthenticationModeOutputWithContext(context.Context) AuthenticationModeOutput
}

var authenticationModePtrType = reflect.TypeOf((**AuthenticationMode)(nil)).Elem()

type AuthenticationModePtrInput interface {
	pulumi.Input

	ToAuthenticationModePtrOutput() AuthenticationModePtrOutput
	ToAuthenticationModePtrOutputWithContext(context.Context) AuthenticationModePtrOutput
}

type authenticationModePtr string

func AuthenticationModePtr(v string) AuthenticationModePtrInput {
	return (*authenticationModePtr)(&v)
}

func (*authenticationModePtr) ElementType() reflect.Type {
	return authenticationModePtrType
}

func (in *authenticationModePtr) ToAuthenticationModePtrOutput() AuthenticationModePtrOutput {
	return pulumi.ToOutput(in).(AuthenticationModePtrOutput)
}

func (in *authenticationModePtr) ToAuthenticationModePtrOutputWithContext(ctx context.Context) AuthenticationModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AuthenticationModePtrOutput)
}

func (in *authenticationModePtr) ToOutput(ctx context.Context) pulumix.Output[*AuthenticationMode] {
	return pulumix.Output[*AuthenticationMode]{
		OutputState: in.ToAuthenticationModePtrOutputWithContext(ctx).OutputState,
	}
}

// Blob write mode.
type BlobWriteMode string

const (
	BlobWriteModeAppend = BlobWriteMode("Append")
	BlobWriteModeOnce   = BlobWriteMode("Once")
)

func (BlobWriteMode) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobWriteMode)(nil)).Elem()
}

func (e BlobWriteMode) ToBlobWriteModeOutput() BlobWriteModeOutput {
	return pulumi.ToOutput(e).(BlobWriteModeOutput)
}

func (e BlobWriteMode) ToBlobWriteModeOutputWithContext(ctx context.Context) BlobWriteModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BlobWriteModeOutput)
}

func (e BlobWriteMode) ToBlobWriteModePtrOutput() BlobWriteModePtrOutput {
	return e.ToBlobWriteModePtrOutputWithContext(context.Background())
}

func (e BlobWriteMode) ToBlobWriteModePtrOutputWithContext(ctx context.Context) BlobWriteModePtrOutput {
	return BlobWriteMode(e).ToBlobWriteModeOutputWithContext(ctx).ToBlobWriteModePtrOutputWithContext(ctx)
}

func (e BlobWriteMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobWriteMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BlobWriteMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BlobWriteMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BlobWriteModeOutput struct{ *pulumi.OutputState }

func (BlobWriteModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobWriteMode)(nil)).Elem()
}

func (o BlobWriteModeOutput) ToBlobWriteModeOutput() BlobWriteModeOutput {
	return o
}

func (o BlobWriteModeOutput) ToBlobWriteModeOutputWithContext(ctx context.Context) BlobWriteModeOutput {
	return o
}

func (o BlobWriteModeOutput) ToBlobWriteModePtrOutput() BlobWriteModePtrOutput {
	return o.ToBlobWriteModePtrOutputWithContext(context.Background())
}

func (o BlobWriteModeOutput) ToBlobWriteModePtrOutputWithContext(ctx context.Context) BlobWriteModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobWriteMode) *BlobWriteMode {
		return &v
	}).(BlobWriteModePtrOutput)
}

func (o BlobWriteModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BlobWriteModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobWriteMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BlobWriteModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobWriteModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BlobWriteMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BlobWriteModePtrOutput struct{ *pulumi.OutputState }

func (BlobWriteModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobWriteMode)(nil)).Elem()
}

func (o BlobWriteModePtrOutput) ToBlobWriteModePtrOutput() BlobWriteModePtrOutput {
	return o
}

func (o BlobWriteModePtrOutput) ToBlobWriteModePtrOutputWithContext(ctx context.Context) BlobWriteModePtrOutput {
	return o
}

func (o BlobWriteModePtrOutput) Elem() BlobWriteModeOutput {
	return o.ApplyT(func(v *BlobWriteMode) BlobWriteMode {
		if v != nil {
			return *v
		}
		var ret BlobWriteMode
		return ret
	}).(BlobWriteModeOutput)
}

func (o BlobWriteModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BlobWriteModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BlobWriteMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BlobWriteModeInput is an input type that accepts values of the BlobWriteMode enum
// A concrete instance of `BlobWriteModeInput` can be one of the following:
//
//	BlobWriteModeAppend
//	BlobWriteModeOnce
type BlobWriteModeInput interface {
	pulumi.Input

	ToBlobWriteModeOutput() BlobWriteModeOutput
	ToBlobWriteModeOutputWithContext(context.Context) BlobWriteModeOutput
}

var blobWriteModePtrType = reflect.TypeOf((**BlobWriteMode)(nil)).Elem()

type BlobWriteModePtrInput interface {
	pulumi.Input

	ToBlobWriteModePtrOutput() BlobWriteModePtrOutput
	ToBlobWriteModePtrOutputWithContext(context.Context) BlobWriteModePtrOutput
}

type blobWriteModePtr string

func BlobWriteModePtr(v string) BlobWriteModePtrInput {
	return (*blobWriteModePtr)(&v)
}

func (*blobWriteModePtr) ElementType() reflect.Type {
	return blobWriteModePtrType
}

func (in *blobWriteModePtr) ToBlobWriteModePtrOutput() BlobWriteModePtrOutput {
	return pulumi.ToOutput(in).(BlobWriteModePtrOutput)
}

func (in *blobWriteModePtr) ToBlobWriteModePtrOutputWithContext(ctx context.Context) BlobWriteModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BlobWriteModePtrOutput)
}

func (in *blobWriteModePtr) ToOutput(ctx context.Context) pulumix.Output[*BlobWriteMode] {
	return pulumix.Output[*BlobWriteMode]{
		OutputState: in.ToBlobWriteModePtrOutputWithContext(ctx).OutputState,
	}
}

// Controls certain runtime behaviors of the streaming job.
type CompatibilityLevel string

const (
	CompatibilityLevel_1_0 = CompatibilityLevel("1.0")
	CompatibilityLevel_1_2 = CompatibilityLevel("1.2")
)

func (CompatibilityLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*CompatibilityLevel)(nil)).Elem()
}

func (e CompatibilityLevel) ToCompatibilityLevelOutput() CompatibilityLevelOutput {
	return pulumi.ToOutput(e).(CompatibilityLevelOutput)
}

func (e CompatibilityLevel) ToCompatibilityLevelOutputWithContext(ctx context.Context) CompatibilityLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CompatibilityLevelOutput)
}

func (e CompatibilityLevel) ToCompatibilityLevelPtrOutput() CompatibilityLevelPtrOutput {
	return e.ToCompatibilityLevelPtrOutputWithContext(context.Background())
}

func (e CompatibilityLevel) ToCompatibilityLevelPtrOutputWithContext(ctx context.Context) CompatibilityLevelPtrOutput {
	return CompatibilityLevel(e).ToCompatibilityLevelOutputWithContext(ctx).ToCompatibilityLevelPtrOutputWithContext(ctx)
}

func (e CompatibilityLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompatibilityLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompatibilityLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CompatibilityLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CompatibilityLevelOutput struct{ *pulumi.OutputState }

func (CompatibilityLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompatibilityLevel)(nil)).Elem()
}

func (o CompatibilityLevelOutput) ToCompatibilityLevelOutput() CompatibilityLevelOutput {
	return o
}

func (o CompatibilityLevelOutput) ToCompatibilityLevelOutputWithContext(ctx context.Context) CompatibilityLevelOutput {
	return o
}

func (o CompatibilityLevelOutput) ToCompatibilityLevelPtrOutput() CompatibilityLevelPtrOutput {
	return o.ToCompatibilityLevelPtrOutputWithContext(context.Background())
}

func (o CompatibilityLevelOutput) ToCompatibilityLevelPtrOutputWithContext(ctx context.Context) CompatibilityLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CompatibilityLevel) *CompatibilityLevel {
		return &v
	}).(CompatibilityLevelPtrOutput)
}

func (o CompatibilityLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CompatibilityLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompatibilityLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CompatibilityLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompatibilityLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompatibilityLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CompatibilityLevelPtrOutput struct{ *pulumi.OutputState }

func (CompatibilityLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompatibilityLevel)(nil)).Elem()
}

func (o CompatibilityLevelPtrOutput) ToCompatibilityLevelPtrOutput() CompatibilityLevelPtrOutput {
	return o
}

func (o CompatibilityLevelPtrOutput) ToCompatibilityLevelPtrOutputWithContext(ctx context.Context) CompatibilityLevelPtrOutput {
	return o
}

func (o CompatibilityLevelPtrOutput) Elem() CompatibilityLevelOutput {
	return o.ApplyT(func(v *CompatibilityLevel) CompatibilityLevel {
		if v != nil {
			return *v
		}
		var ret CompatibilityLevel
		return ret
	}).(CompatibilityLevelOutput)
}

func (o CompatibilityLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompatibilityLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CompatibilityLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CompatibilityLevelInput is an input type that accepts values of the CompatibilityLevel enum
// A concrete instance of `CompatibilityLevelInput` can be one of the following:
//
//	CompatibilityLevel_1_0
//	CompatibilityLevel_1_2
type CompatibilityLevelInput interface {
	pulumi.Input

	ToCompatibilityLevelOutput() CompatibilityLevelOutput
	ToCompatibilityLevelOutputWithContext(context.Context) CompatibilityLevelOutput
}

var compatibilityLevelPtrType = reflect.TypeOf((**CompatibilityLevel)(nil)).Elem()

type CompatibilityLevelPtrInput interface {
	pulumi.Input

	ToCompatibilityLevelPtrOutput() CompatibilityLevelPtrOutput
	ToCompatibilityLevelPtrOutputWithContext(context.Context) CompatibilityLevelPtrOutput
}

type compatibilityLevelPtr string

func CompatibilityLevelPtr(v string) CompatibilityLevelPtrInput {
	return (*compatibilityLevelPtr)(&v)
}

func (*compatibilityLevelPtr) ElementType() reflect.Type {
	return compatibilityLevelPtrType
}

func (in *compatibilityLevelPtr) ToCompatibilityLevelPtrOutput() CompatibilityLevelPtrOutput {
	return pulumi.ToOutput(in).(CompatibilityLevelPtrOutput)
}

func (in *compatibilityLevelPtr) ToCompatibilityLevelPtrOutputWithContext(ctx context.Context) CompatibilityLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CompatibilityLevelPtrOutput)
}

func (in *compatibilityLevelPtr) ToOutput(ctx context.Context) pulumix.Output[*CompatibilityLevel] {
	return pulumix.Output[*CompatibilityLevel]{
		OutputState: in.ToCompatibilityLevelPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
type CompressionType string

const (
	CompressionTypeNone    = CompressionType("None")
	CompressionTypeGZip    = CompressionType("GZip")
	CompressionTypeDeflate = CompressionType("Deflate")
)

func (CompressionType) ElementType() reflect.Type {
	return reflect.TypeOf((*CompressionType)(nil)).Elem()
}

func (e CompressionType) ToCompressionTypeOutput() CompressionTypeOutput {
	return pulumi.ToOutput(e).(CompressionTypeOutput)
}

func (e CompressionType) ToCompressionTypeOutputWithContext(ctx context.Context) CompressionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CompressionTypeOutput)
}

func (e CompressionType) ToCompressionTypePtrOutput() CompressionTypePtrOutput {
	return e.ToCompressionTypePtrOutputWithContext(context.Background())
}

func (e CompressionType) ToCompressionTypePtrOutputWithContext(ctx context.Context) CompressionTypePtrOutput {
	return CompressionType(e).ToCompressionTypeOutputWithContext(ctx).ToCompressionTypePtrOutputWithContext(ctx)
}

func (e CompressionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompressionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CompressionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CompressionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CompressionTypeOutput struct{ *pulumi.OutputState }

func (CompressionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompressionType)(nil)).Elem()
}

func (o CompressionTypeOutput) ToCompressionTypeOutput() CompressionTypeOutput {
	return o
}

func (o CompressionTypeOutput) ToCompressionTypeOutputWithContext(ctx context.Context) CompressionTypeOutput {
	return o
}

func (o CompressionTypeOutput) ToCompressionTypePtrOutput() CompressionTypePtrOutput {
	return o.ToCompressionTypePtrOutputWithContext(context.Background())
}

func (o CompressionTypeOutput) ToCompressionTypePtrOutputWithContext(ctx context.Context) CompressionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CompressionType) *CompressionType {
		return &v
	}).(CompressionTypePtrOutput)
}

func (o CompressionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CompressionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompressionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CompressionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompressionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CompressionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CompressionTypePtrOutput struct{ *pulumi.OutputState }

func (CompressionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompressionType)(nil)).Elem()
}

func (o CompressionTypePtrOutput) ToCompressionTypePtrOutput() CompressionTypePtrOutput {
	return o
}

func (o CompressionTypePtrOutput) ToCompressionTypePtrOutputWithContext(ctx context.Context) CompressionTypePtrOutput {
	return o
}

func (o CompressionTypePtrOutput) Elem() CompressionTypeOutput {
	return o.ApplyT(func(v *CompressionType) CompressionType {
		if v != nil {
			return *v
		}
		var ret CompressionType
		return ret
	}).(CompressionTypeOutput)
}

func (o CompressionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CompressionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CompressionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CompressionTypeInput is an input type that accepts values of the CompressionType enum
// A concrete instance of `CompressionTypeInput` can be one of the following:
//
//	CompressionTypeNone
//	CompressionTypeGZip
//	CompressionTypeDeflate
type CompressionTypeInput interface {
	pulumi.Input

	ToCompressionTypeOutput() CompressionTypeOutput
	ToCompressionTypeOutputWithContext(context.Context) CompressionTypeOutput
}

var compressionTypePtrType = reflect.TypeOf((**CompressionType)(nil)).Elem()

type CompressionTypePtrInput interface {
	pulumi.Input

	ToCompressionTypePtrOutput() CompressionTypePtrOutput
	ToCompressionTypePtrOutputWithContext(context.Context) CompressionTypePtrOutput
}

type compressionTypePtr string

func CompressionTypePtr(v string) CompressionTypePtrInput {
	return (*compressionTypePtr)(&v)
}

func (*compressionTypePtr) ElementType() reflect.Type {
	return compressionTypePtrType
}

func (in *compressionTypePtr) ToCompressionTypePtrOutput() CompressionTypePtrOutput {
	return pulumi.ToOutput(in).(CompressionTypePtrOutput)
}

func (in *compressionTypePtr) ToCompressionTypePtrOutputWithContext(ctx context.Context) CompressionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CompressionTypePtrOutput)
}

func (in *compressionTypePtr) ToOutput(ctx context.Context) pulumix.Output[*CompressionType] {
	return pulumix.Output[*CompressionType]{
		OutputState: in.ToCompressionTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Valid values are JobStorageAccount and SystemAccount. If set to JobStorageAccount, this requires the user to also specify jobStorageAccount property. .
type ContentStoragePolicy string

const (
	ContentStoragePolicySystemAccount     = ContentStoragePolicy("SystemAccount")
	ContentStoragePolicyJobStorageAccount = ContentStoragePolicy("JobStorageAccount")
)

func (ContentStoragePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentStoragePolicy)(nil)).Elem()
}

func (e ContentStoragePolicy) ToContentStoragePolicyOutput() ContentStoragePolicyOutput {
	return pulumi.ToOutput(e).(ContentStoragePolicyOutput)
}

func (e ContentStoragePolicy) ToContentStoragePolicyOutputWithContext(ctx context.Context) ContentStoragePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ContentStoragePolicyOutput)
}

func (e ContentStoragePolicy) ToContentStoragePolicyPtrOutput() ContentStoragePolicyPtrOutput {
	return e.ToContentStoragePolicyPtrOutputWithContext(context.Background())
}

func (e ContentStoragePolicy) ToContentStoragePolicyPtrOutputWithContext(ctx context.Context) ContentStoragePolicyPtrOutput {
	return ContentStoragePolicy(e).ToContentStoragePolicyOutputWithContext(ctx).ToContentStoragePolicyPtrOutputWithContext(ctx)
}

func (e ContentStoragePolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentStoragePolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ContentStoragePolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ContentStoragePolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ContentStoragePolicyOutput struct{ *pulumi.OutputState }

func (ContentStoragePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentStoragePolicy)(nil)).Elem()
}

func (o ContentStoragePolicyOutput) ToContentStoragePolicyOutput() ContentStoragePolicyOutput {
	return o
}

func (o ContentStoragePolicyOutput) ToContentStoragePolicyOutputWithContext(ctx context.Context) ContentStoragePolicyOutput {
	return o
}

func (o ContentStoragePolicyOutput) ToContentStoragePolicyPtrOutput() ContentStoragePolicyPtrOutput {
	return o.ToContentStoragePolicyPtrOutputWithContext(context.Background())
}

func (o ContentStoragePolicyOutput) ToContentStoragePolicyPtrOutputWithContext(ctx context.Context) ContentStoragePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContentStoragePolicy) *ContentStoragePolicy {
		return &v
	}).(ContentStoragePolicyPtrOutput)
}

func (o ContentStoragePolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ContentStoragePolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentStoragePolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ContentStoragePolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentStoragePolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ContentStoragePolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ContentStoragePolicyPtrOutput struct{ *pulumi.OutputState }

func (ContentStoragePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContentStoragePolicy)(nil)).Elem()
}

func (o ContentStoragePolicyPtrOutput) ToContentStoragePolicyPtrOutput() ContentStoragePolicyPtrOutput {
	return o
}

func (o ContentStoragePolicyPtrOutput) ToContentStoragePolicyPtrOutputWithContext(ctx context.Context) ContentStoragePolicyPtrOutput {
	return o
}

func (o ContentStoragePolicyPtrOutput) Elem() ContentStoragePolicyOutput {
	return o.ApplyT(func(v *ContentStoragePolicy) ContentStoragePolicy {
		if v != nil {
			return *v
		}
		var ret ContentStoragePolicy
		return ret
	}).(ContentStoragePolicyOutput)
}

func (o ContentStoragePolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ContentStoragePolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ContentStoragePolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ContentStoragePolicyInput is an input type that accepts values of the ContentStoragePolicy enum
// A concrete instance of `ContentStoragePolicyInput` can be one of the following:
//
//	ContentStoragePolicySystemAccount
//	ContentStoragePolicyJobStorageAccount
type ContentStoragePolicyInput interface {
	pulumi.Input

	ToContentStoragePolicyOutput() ContentStoragePolicyOutput
	ToContentStoragePolicyOutputWithContext(context.Context) ContentStoragePolicyOutput
}

var contentStoragePolicyPtrType = reflect.TypeOf((**ContentStoragePolicy)(nil)).Elem()

type ContentStoragePolicyPtrInput interface {
	pulumi.Input

	ToContentStoragePolicyPtrOutput() ContentStoragePolicyPtrOutput
	ToContentStoragePolicyPtrOutputWithContext(context.Context) ContentStoragePolicyPtrOutput
}

type contentStoragePolicyPtr string

func ContentStoragePolicyPtr(v string) ContentStoragePolicyPtrInput {
	return (*contentStoragePolicyPtr)(&v)
}

func (*contentStoragePolicyPtr) ElementType() reflect.Type {
	return contentStoragePolicyPtrType
}

func (in *contentStoragePolicyPtr) ToContentStoragePolicyPtrOutput() ContentStoragePolicyPtrOutput {
	return pulumi.ToOutput(in).(ContentStoragePolicyPtrOutput)
}

func (in *contentStoragePolicyPtr) ToContentStoragePolicyPtrOutputWithContext(ctx context.Context) ContentStoragePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ContentStoragePolicyPtrOutput)
}

func (in *contentStoragePolicyPtr) ToOutput(ctx context.Context) pulumix.Output[*ContentStoragePolicy] {
	return pulumix.Output[*ContentStoragePolicy]{
		OutputState: in.ToContentStoragePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
type Encoding string

const (
	EncodingUTF8 = Encoding("UTF8")
)

func (Encoding) ElementType() reflect.Type {
	return reflect.TypeOf((*Encoding)(nil)).Elem()
}

func (e Encoding) ToEncodingOutput() EncodingOutput {
	return pulumi.ToOutput(e).(EncodingOutput)
}

func (e Encoding) ToEncodingOutputWithContext(ctx context.Context) EncodingOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EncodingOutput)
}

func (e Encoding) ToEncodingPtrOutput() EncodingPtrOutput {
	return e.ToEncodingPtrOutputWithContext(context.Background())
}

func (e Encoding) ToEncodingPtrOutputWithContext(ctx context.Context) EncodingPtrOutput {
	return Encoding(e).ToEncodingOutputWithContext(ctx).ToEncodingPtrOutputWithContext(ctx)
}

func (e Encoding) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Encoding) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Encoding) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Encoding) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EncodingOutput struct{ *pulumi.OutputState }

func (EncodingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encoding)(nil)).Elem()
}

func (o EncodingOutput) ToEncodingOutput() EncodingOutput {
	return o
}

func (o EncodingOutput) ToEncodingOutputWithContext(ctx context.Context) EncodingOutput {
	return o
}

func (o EncodingOutput) ToEncodingPtrOutput() EncodingPtrOutput {
	return o.ToEncodingPtrOutputWithContext(context.Background())
}

func (o EncodingOutput) ToEncodingPtrOutputWithContext(ctx context.Context) EncodingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encoding) *Encoding {
		return &v
	}).(EncodingPtrOutput)
}

func (o EncodingOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EncodingOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Encoding) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EncodingOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncodingOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Encoding) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EncodingPtrOutput struct{ *pulumi.OutputState }

func (EncodingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encoding)(nil)).Elem()
}

func (o EncodingPtrOutput) ToEncodingPtrOutput() EncodingPtrOutput {
	return o
}

func (o EncodingPtrOutput) ToEncodingPtrOutputWithContext(ctx context.Context) EncodingPtrOutput {
	return o
}

func (o EncodingPtrOutput) Elem() EncodingOutput {
	return o.ApplyT(func(v *Encoding) Encoding {
		if v != nil {
			return *v
		}
		var ret Encoding
		return ret
	}).(EncodingOutput)
}

func (o EncodingPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EncodingPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Encoding) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EncodingInput is an input type that accepts values of the Encoding enum
// A concrete instance of `EncodingInput` can be one of the following:
//
//	EncodingUTF8
type EncodingInput interface {
	pulumi.Input

	ToEncodingOutput() EncodingOutput
	ToEncodingOutputWithContext(context.Context) EncodingOutput
}

var encodingPtrType = reflect.TypeOf((**Encoding)(nil)).Elem()

type EncodingPtrInput interface {
	pulumi.Input

	ToEncodingPtrOutput() EncodingPtrOutput
	ToEncodingPtrOutputWithContext(context.Context) EncodingPtrOutput
}

type encodingPtr string

func EncodingPtr(v string) EncodingPtrInput {
	return (*encodingPtr)(&v)
}

func (*encodingPtr) ElementType() reflect.Type {
	return encodingPtrType
}

func (in *encodingPtr) ToEncodingPtrOutput() EncodingPtrOutput {
	return pulumi.ToOutput(in).(EncodingPtrOutput)
}

func (in *encodingPtr) ToEncodingPtrOutputWithContext(ctx context.Context) EncodingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EncodingPtrOutput)
}

func (in *encodingPtr) ToOutput(ctx context.Context) pulumix.Output[*Encoding] {
	return pulumix.Output[*Encoding]{
		OutputState: in.ToEncodingPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the Event Grid schema type.
type EventGridEventSchemaType string

const (
	EventGridEventSchemaTypeEventGridEventSchema = EventGridEventSchemaType("EventGridEventSchema")
	EventGridEventSchemaTypeCloudEventSchema     = EventGridEventSchemaType("CloudEventSchema")
)

func (EventGridEventSchemaType) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridEventSchemaType)(nil)).Elem()
}

func (e EventGridEventSchemaType) ToEventGridEventSchemaTypeOutput() EventGridEventSchemaTypeOutput {
	return pulumi.ToOutput(e).(EventGridEventSchemaTypeOutput)
}

func (e EventGridEventSchemaType) ToEventGridEventSchemaTypeOutputWithContext(ctx context.Context) EventGridEventSchemaTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventGridEventSchemaTypeOutput)
}

func (e EventGridEventSchemaType) ToEventGridEventSchemaTypePtrOutput() EventGridEventSchemaTypePtrOutput {
	return e.ToEventGridEventSchemaTypePtrOutputWithContext(context.Background())
}

func (e EventGridEventSchemaType) ToEventGridEventSchemaTypePtrOutputWithContext(ctx context.Context) EventGridEventSchemaTypePtrOutput {
	return EventGridEventSchemaType(e).ToEventGridEventSchemaTypeOutputWithContext(ctx).ToEventGridEventSchemaTypePtrOutputWithContext(ctx)
}

func (e EventGridEventSchemaType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventGridEventSchemaType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventGridEventSchemaType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventGridEventSchemaType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventGridEventSchemaTypeOutput struct{ *pulumi.OutputState }

func (EventGridEventSchemaTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGridEventSchemaType)(nil)).Elem()
}

func (o EventGridEventSchemaTypeOutput) ToEventGridEventSchemaTypeOutput() EventGridEventSchemaTypeOutput {
	return o
}

func (o EventGridEventSchemaTypeOutput) ToEventGridEventSchemaTypeOutputWithContext(ctx context.Context) EventGridEventSchemaTypeOutput {
	return o
}

func (o EventGridEventSchemaTypeOutput) ToEventGridEventSchemaTypePtrOutput() EventGridEventSchemaTypePtrOutput {
	return o.ToEventGridEventSchemaTypePtrOutputWithContext(context.Background())
}

func (o EventGridEventSchemaTypeOutput) ToEventGridEventSchemaTypePtrOutputWithContext(ctx context.Context) EventGridEventSchemaTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGridEventSchemaType) *EventGridEventSchemaType {
		return &v
	}).(EventGridEventSchemaTypePtrOutput)
}

func (o EventGridEventSchemaTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventGridEventSchemaTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventGridEventSchemaType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventGridEventSchemaTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventGridEventSchemaTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventGridEventSchemaType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventGridEventSchemaTypePtrOutput struct{ *pulumi.OutputState }

func (EventGridEventSchemaTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGridEventSchemaType)(nil)).Elem()
}

func (o EventGridEventSchemaTypePtrOutput) ToEventGridEventSchemaTypePtrOutput() EventGridEventSchemaTypePtrOutput {
	return o
}

func (o EventGridEventSchemaTypePtrOutput) ToEventGridEventSchemaTypePtrOutputWithContext(ctx context.Context) EventGridEventSchemaTypePtrOutput {
	return o
}

func (o EventGridEventSchemaTypePtrOutput) Elem() EventGridEventSchemaTypeOutput {
	return o.ApplyT(func(v *EventGridEventSchemaType) EventGridEventSchemaType {
		if v != nil {
			return *v
		}
		var ret EventGridEventSchemaType
		return ret
	}).(EventGridEventSchemaTypeOutput)
}

func (o EventGridEventSchemaTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventGridEventSchemaTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventGridEventSchemaType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventGridEventSchemaTypeInput is an input type that accepts values of the EventGridEventSchemaType enum
// A concrete instance of `EventGridEventSchemaTypeInput` can be one of the following:
//
//	EventGridEventSchemaTypeEventGridEventSchema
//	EventGridEventSchemaTypeCloudEventSchema
type EventGridEventSchemaTypeInput interface {
	pulumi.Input

	ToEventGridEventSchemaTypeOutput() EventGridEventSchemaTypeOutput
	ToEventGridEventSchemaTypeOutputWithContext(context.Context) EventGridEventSchemaTypeOutput
}

var eventGridEventSchemaTypePtrType = reflect.TypeOf((**EventGridEventSchemaType)(nil)).Elem()

type EventGridEventSchemaTypePtrInput interface {
	pulumi.Input

	ToEventGridEventSchemaTypePtrOutput() EventGridEventSchemaTypePtrOutput
	ToEventGridEventSchemaTypePtrOutputWithContext(context.Context) EventGridEventSchemaTypePtrOutput
}

type eventGridEventSchemaTypePtr string

func EventGridEventSchemaTypePtr(v string) EventGridEventSchemaTypePtrInput {
	return (*eventGridEventSchemaTypePtr)(&v)
}

func (*eventGridEventSchemaTypePtr) ElementType() reflect.Type {
	return eventGridEventSchemaTypePtrType
}

func (in *eventGridEventSchemaTypePtr) ToEventGridEventSchemaTypePtrOutput() EventGridEventSchemaTypePtrOutput {
	return pulumi.ToOutput(in).(EventGridEventSchemaTypePtrOutput)
}

func (in *eventGridEventSchemaTypePtr) ToEventGridEventSchemaTypePtrOutputWithContext(ctx context.Context) EventGridEventSchemaTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventGridEventSchemaTypePtrOutput)
}

func (in *eventGridEventSchemaTypePtr) ToOutput(ctx context.Context) pulumix.Output[*EventGridEventSchemaType] {
	return pulumix.Output[*EventGridEventSchemaType]{
		OutputState: in.ToEventGridEventSchemaTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
type EventSerializationType string

const (
	EventSerializationTypeCsv       = EventSerializationType("Csv")
	EventSerializationTypeAvro      = EventSerializationType("Avro")
	EventSerializationTypeJson      = EventSerializationType("Json")
	EventSerializationTypeCustomClr = EventSerializationType("CustomClr")
	EventSerializationTypeParquet   = EventSerializationType("Parquet")
	EventSerializationTypeDelta     = EventSerializationType("Delta")
)

// Indicates the policy to apply to events that arrive out of order in the input event stream.
type EventsOutOfOrderPolicy string

const (
	EventsOutOfOrderPolicyAdjust = EventsOutOfOrderPolicy("Adjust")
	EventsOutOfOrderPolicyDrop   = EventsOutOfOrderPolicy("Drop")
)

func (EventsOutOfOrderPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*EventsOutOfOrderPolicy)(nil)).Elem()
}

func (e EventsOutOfOrderPolicy) ToEventsOutOfOrderPolicyOutput() EventsOutOfOrderPolicyOutput {
	return pulumi.ToOutput(e).(EventsOutOfOrderPolicyOutput)
}

func (e EventsOutOfOrderPolicy) ToEventsOutOfOrderPolicyOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EventsOutOfOrderPolicyOutput)
}

func (e EventsOutOfOrderPolicy) ToEventsOutOfOrderPolicyPtrOutput() EventsOutOfOrderPolicyPtrOutput {
	return e.ToEventsOutOfOrderPolicyPtrOutputWithContext(context.Background())
}

func (e EventsOutOfOrderPolicy) ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyPtrOutput {
	return EventsOutOfOrderPolicy(e).ToEventsOutOfOrderPolicyOutputWithContext(ctx).ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx)
}

func (e EventsOutOfOrderPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventsOutOfOrderPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EventsOutOfOrderPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EventsOutOfOrderPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EventsOutOfOrderPolicyOutput struct{ *pulumi.OutputState }

func (EventsOutOfOrderPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventsOutOfOrderPolicy)(nil)).Elem()
}

func (o EventsOutOfOrderPolicyOutput) ToEventsOutOfOrderPolicyOutput() EventsOutOfOrderPolicyOutput {
	return o
}

func (o EventsOutOfOrderPolicyOutput) ToEventsOutOfOrderPolicyOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyOutput {
	return o
}

func (o EventsOutOfOrderPolicyOutput) ToEventsOutOfOrderPolicyPtrOutput() EventsOutOfOrderPolicyPtrOutput {
	return o.ToEventsOutOfOrderPolicyPtrOutputWithContext(context.Background())
}

func (o EventsOutOfOrderPolicyOutput) ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventsOutOfOrderPolicy) *EventsOutOfOrderPolicy {
		return &v
	}).(EventsOutOfOrderPolicyPtrOutput)
}

func (o EventsOutOfOrderPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EventsOutOfOrderPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventsOutOfOrderPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EventsOutOfOrderPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventsOutOfOrderPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EventsOutOfOrderPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EventsOutOfOrderPolicyPtrOutput struct{ *pulumi.OutputState }

func (EventsOutOfOrderPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventsOutOfOrderPolicy)(nil)).Elem()
}

func (o EventsOutOfOrderPolicyPtrOutput) ToEventsOutOfOrderPolicyPtrOutput() EventsOutOfOrderPolicyPtrOutput {
	return o
}

func (o EventsOutOfOrderPolicyPtrOutput) ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyPtrOutput {
	return o
}

func (o EventsOutOfOrderPolicyPtrOutput) Elem() EventsOutOfOrderPolicyOutput {
	return o.ApplyT(func(v *EventsOutOfOrderPolicy) EventsOutOfOrderPolicy {
		if v != nil {
			return *v
		}
		var ret EventsOutOfOrderPolicy
		return ret
	}).(EventsOutOfOrderPolicyOutput)
}

func (o EventsOutOfOrderPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EventsOutOfOrderPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EventsOutOfOrderPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EventsOutOfOrderPolicyInput is an input type that accepts values of the EventsOutOfOrderPolicy enum
// A concrete instance of `EventsOutOfOrderPolicyInput` can be one of the following:
//
//	EventsOutOfOrderPolicyAdjust
//	EventsOutOfOrderPolicyDrop
type EventsOutOfOrderPolicyInput interface {
	pulumi.Input

	ToEventsOutOfOrderPolicyOutput() EventsOutOfOrderPolicyOutput
	ToEventsOutOfOrderPolicyOutputWithContext(context.Context) EventsOutOfOrderPolicyOutput
}

var eventsOutOfOrderPolicyPtrType = reflect.TypeOf((**EventsOutOfOrderPolicy)(nil)).Elem()

type EventsOutOfOrderPolicyPtrInput interface {
	pulumi.Input

	ToEventsOutOfOrderPolicyPtrOutput() EventsOutOfOrderPolicyPtrOutput
	ToEventsOutOfOrderPolicyPtrOutputWithContext(context.Context) EventsOutOfOrderPolicyPtrOutput
}

type eventsOutOfOrderPolicyPtr string

func EventsOutOfOrderPolicyPtr(v string) EventsOutOfOrderPolicyPtrInput {
	return (*eventsOutOfOrderPolicyPtr)(&v)
}

func (*eventsOutOfOrderPolicyPtr) ElementType() reflect.Type {
	return eventsOutOfOrderPolicyPtrType
}

func (in *eventsOutOfOrderPolicyPtr) ToEventsOutOfOrderPolicyPtrOutput() EventsOutOfOrderPolicyPtrOutput {
	return pulumi.ToOutput(in).(EventsOutOfOrderPolicyPtrOutput)
}

func (in *eventsOutOfOrderPolicyPtr) ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx context.Context) EventsOutOfOrderPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EventsOutOfOrderPolicyPtrOutput)
}

func (in *eventsOutOfOrderPolicyPtr) ToOutput(ctx context.Context) pulumix.Output[*EventsOutOfOrderPolicy] {
	return pulumix.Output[*EventsOutOfOrderPolicy]{
		OutputState: in.ToEventsOutOfOrderPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// The input watermark mode.
type InputWatermarkMode string

const (
	InputWatermarkModeNone          = InputWatermarkMode("None")
	InputWatermarkModeReadWatermark = InputWatermarkMode("ReadWatermark")
)

func (InputWatermarkMode) ElementType() reflect.Type {
	return reflect.TypeOf((*InputWatermarkMode)(nil)).Elem()
}

func (e InputWatermarkMode) ToInputWatermarkModeOutput() InputWatermarkModeOutput {
	return pulumi.ToOutput(e).(InputWatermarkModeOutput)
}

func (e InputWatermarkMode) ToInputWatermarkModeOutputWithContext(ctx context.Context) InputWatermarkModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InputWatermarkModeOutput)
}

func (e InputWatermarkMode) ToInputWatermarkModePtrOutput() InputWatermarkModePtrOutput {
	return e.ToInputWatermarkModePtrOutputWithContext(context.Background())
}

func (e InputWatermarkMode) ToInputWatermarkModePtrOutputWithContext(ctx context.Context) InputWatermarkModePtrOutput {
	return InputWatermarkMode(e).ToInputWatermarkModeOutputWithContext(ctx).ToInputWatermarkModePtrOutputWithContext(ctx)
}

func (e InputWatermarkMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InputWatermarkMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InputWatermarkMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InputWatermarkMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InputWatermarkModeOutput struct{ *pulumi.OutputState }

func (InputWatermarkModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputWatermarkMode)(nil)).Elem()
}

func (o InputWatermarkModeOutput) ToInputWatermarkModeOutput() InputWatermarkModeOutput {
	return o
}

func (o InputWatermarkModeOutput) ToInputWatermarkModeOutputWithContext(ctx context.Context) InputWatermarkModeOutput {
	return o
}

func (o InputWatermarkModeOutput) ToInputWatermarkModePtrOutput() InputWatermarkModePtrOutput {
	return o.ToInputWatermarkModePtrOutputWithContext(context.Background())
}

func (o InputWatermarkModeOutput) ToInputWatermarkModePtrOutputWithContext(ctx context.Context) InputWatermarkModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InputWatermarkMode) *InputWatermarkMode {
		return &v
	}).(InputWatermarkModePtrOutput)
}

func (o InputWatermarkModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InputWatermarkModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InputWatermarkMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InputWatermarkModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InputWatermarkModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InputWatermarkMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InputWatermarkModePtrOutput struct{ *pulumi.OutputState }

func (InputWatermarkModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InputWatermarkMode)(nil)).Elem()
}

func (o InputWatermarkModePtrOutput) ToInputWatermarkModePtrOutput() InputWatermarkModePtrOutput {
	return o
}

func (o InputWatermarkModePtrOutput) ToInputWatermarkModePtrOutputWithContext(ctx context.Context) InputWatermarkModePtrOutput {
	return o
}

func (o InputWatermarkModePtrOutput) Elem() InputWatermarkModeOutput {
	return o.ApplyT(func(v *InputWatermarkMode) InputWatermarkMode {
		if v != nil {
			return *v
		}
		var ret InputWatermarkMode
		return ret
	}).(InputWatermarkModeOutput)
}

func (o InputWatermarkModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InputWatermarkModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InputWatermarkMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InputWatermarkModeInput is an input type that accepts values of the InputWatermarkMode enum
// A concrete instance of `InputWatermarkModeInput` can be one of the following:
//
//	InputWatermarkModeNone
//	InputWatermarkModeReadWatermark
type InputWatermarkModeInput interface {
	pulumi.Input

	ToInputWatermarkModeOutput() InputWatermarkModeOutput
	ToInputWatermarkModeOutputWithContext(context.Context) InputWatermarkModeOutput
}

var inputWatermarkModePtrType = reflect.TypeOf((**InputWatermarkMode)(nil)).Elem()

type InputWatermarkModePtrInput interface {
	pulumi.Input

	ToInputWatermarkModePtrOutput() InputWatermarkModePtrOutput
	ToInputWatermarkModePtrOutputWithContext(context.Context) InputWatermarkModePtrOutput
}

type inputWatermarkModePtr string

func InputWatermarkModePtr(v string) InputWatermarkModePtrInput {
	return (*inputWatermarkModePtr)(&v)
}

func (*inputWatermarkModePtr) ElementType() reflect.Type {
	return inputWatermarkModePtrType
}

func (in *inputWatermarkModePtr) ToInputWatermarkModePtrOutput() InputWatermarkModePtrOutput {
	return pulumi.ToOutput(in).(InputWatermarkModePtrOutput)
}

func (in *inputWatermarkModePtr) ToInputWatermarkModePtrOutputWithContext(ctx context.Context) InputWatermarkModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InputWatermarkModePtrOutput)
}

func (in *inputWatermarkModePtr) ToOutput(ctx context.Context) pulumix.Output[*InputWatermarkMode] {
	return pulumix.Output[*InputWatermarkMode]{
		OutputState: in.ToInputWatermarkModePtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the type of the job. Valid modes are `Cloud` and 'Edge'.
type JobType string

const (
	JobTypeCloud = JobType("Cloud")
	JobTypeEdge  = JobType("Edge")
)

func (JobType) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (e JobType) ToJobTypeOutput() JobTypeOutput {
	return pulumi.ToOutput(e).(JobTypeOutput)
}

func (e JobType) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JobTypeOutput)
}

func (e JobType) ToJobTypePtrOutput() JobTypePtrOutput {
	return e.ToJobTypePtrOutputWithContext(context.Background())
}

func (e JobType) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return JobType(e).ToJobTypeOutputWithContext(ctx).ToJobTypePtrOutputWithContext(ctx)
}

func (e JobType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JobType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JobTypeOutput struct{ *pulumi.OutputState }

func (JobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (o JobTypeOutput) ToJobTypeOutput() JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypePtrOutput() JobTypePtrOutput {
	return o.ToJobTypePtrOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobType) *JobType {
		return &v
	}).(JobTypePtrOutput)
}

func (o JobTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JobType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JobTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JobType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JobTypePtrOutput struct{ *pulumi.OutputState }

func (JobTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobType)(nil)).Elem()
}

func (o JobTypePtrOutput) ToJobTypePtrOutput() JobTypePtrOutput {
	return o
}

func (o JobTypePtrOutput) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return o
}

func (o JobTypePtrOutput) Elem() JobTypeOutput {
	return o.ApplyT(func(v *JobType) JobType {
		if v != nil {
			return *v
		}
		var ret JobType
		return ret
	}).(JobTypeOutput)
}

func (o JobTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JobTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JobType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JobTypeInput is an input type that accepts values of the JobType enum
// A concrete instance of `JobTypeInput` can be one of the following:
//
//	JobTypeCloud
//	JobTypeEdge
type JobTypeInput interface {
	pulumi.Input

	ToJobTypeOutput() JobTypeOutput
	ToJobTypeOutputWithContext(context.Context) JobTypeOutput
}

var jobTypePtrType = reflect.TypeOf((**JobType)(nil)).Elem()

type JobTypePtrInput interface {
	pulumi.Input

	ToJobTypePtrOutput() JobTypePtrOutput
	ToJobTypePtrOutputWithContext(context.Context) JobTypePtrOutput
}

type jobTypePtr string

func JobTypePtr(v string) JobTypePtrInput {
	return (*jobTypePtr)(&v)
}

func (*jobTypePtr) ElementType() reflect.Type {
	return jobTypePtrType
}

func (in *jobTypePtr) ToJobTypePtrOutput() JobTypePtrOutput {
	return pulumi.ToOutput(in).(JobTypePtrOutput)
}

func (in *jobTypePtr) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JobTypePtrOutput)
}

func (in *jobTypePtr) ToOutput(ctx context.Context) pulumix.Output[*JobType] {
	return pulumix.Output[*JobType]{
		OutputState: in.ToJobTypePtrOutputWithContext(ctx).OutputState,
	}
}

// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
type JsonOutputSerializationFormat string

const (
	JsonOutputSerializationFormatLineSeparated = JsonOutputSerializationFormat("LineSeparated")
	JsonOutputSerializationFormatArray         = JsonOutputSerializationFormat("Array")
)

func (JsonOutputSerializationFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOutputSerializationFormat)(nil)).Elem()
}

func (e JsonOutputSerializationFormat) ToJsonOutputSerializationFormatOutput() JsonOutputSerializationFormatOutput {
	return pulumi.ToOutput(e).(JsonOutputSerializationFormatOutput)
}

func (e JsonOutputSerializationFormat) ToJsonOutputSerializationFormatOutputWithContext(ctx context.Context) JsonOutputSerializationFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JsonOutputSerializationFormatOutput)
}

func (e JsonOutputSerializationFormat) ToJsonOutputSerializationFormatPtrOutput() JsonOutputSerializationFormatPtrOutput {
	return e.ToJsonOutputSerializationFormatPtrOutputWithContext(context.Background())
}

func (e JsonOutputSerializationFormat) ToJsonOutputSerializationFormatPtrOutputWithContext(ctx context.Context) JsonOutputSerializationFormatPtrOutput {
	return JsonOutputSerializationFormat(e).ToJsonOutputSerializationFormatOutputWithContext(ctx).ToJsonOutputSerializationFormatPtrOutputWithContext(ctx)
}

func (e JsonOutputSerializationFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonOutputSerializationFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonOutputSerializationFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JsonOutputSerializationFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JsonOutputSerializationFormatOutput struct{ *pulumi.OutputState }

func (JsonOutputSerializationFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOutputSerializationFormat)(nil)).Elem()
}

func (o JsonOutputSerializationFormatOutput) ToJsonOutputSerializationFormatOutput() JsonOutputSerializationFormatOutput {
	return o
}

func (o JsonOutputSerializationFormatOutput) ToJsonOutputSerializationFormatOutputWithContext(ctx context.Context) JsonOutputSerializationFormatOutput {
	return o
}

func (o JsonOutputSerializationFormatOutput) ToJsonOutputSerializationFormatPtrOutput() JsonOutputSerializationFormatPtrOutput {
	return o.ToJsonOutputSerializationFormatPtrOutputWithContext(context.Background())
}

func (o JsonOutputSerializationFormatOutput) ToJsonOutputSerializationFormatPtrOutputWithContext(ctx context.Context) JsonOutputSerializationFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonOutputSerializationFormat) *JsonOutputSerializationFormat {
		return &v
	}).(JsonOutputSerializationFormatPtrOutput)
}

func (o JsonOutputSerializationFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JsonOutputSerializationFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonOutputSerializationFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JsonOutputSerializationFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonOutputSerializationFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonOutputSerializationFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JsonOutputSerializationFormatPtrOutput struct{ *pulumi.OutputState }

func (JsonOutputSerializationFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonOutputSerializationFormat)(nil)).Elem()
}

func (o JsonOutputSerializationFormatPtrOutput) ToJsonOutputSerializationFormatPtrOutput() JsonOutputSerializationFormatPtrOutput {
	return o
}

func (o JsonOutputSerializationFormatPtrOutput) ToJsonOutputSerializationFormatPtrOutputWithContext(ctx context.Context) JsonOutputSerializationFormatPtrOutput {
	return o
}

func (o JsonOutputSerializationFormatPtrOutput) Elem() JsonOutputSerializationFormatOutput {
	return o.ApplyT(func(v *JsonOutputSerializationFormat) JsonOutputSerializationFormat {
		if v != nil {
			return *v
		}
		var ret JsonOutputSerializationFormat
		return ret
	}).(JsonOutputSerializationFormatOutput)
}

func (o JsonOutputSerializationFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonOutputSerializationFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JsonOutputSerializationFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JsonOutputSerializationFormatInput is an input type that accepts values of the JsonOutputSerializationFormat enum
// A concrete instance of `JsonOutputSerializationFormatInput` can be one of the following:
//
//	JsonOutputSerializationFormatLineSeparated
//	JsonOutputSerializationFormatArray
type JsonOutputSerializationFormatInput interface {
	pulumi.Input

	ToJsonOutputSerializationFormatOutput() JsonOutputSerializationFormatOutput
	ToJsonOutputSerializationFormatOutputWithContext(context.Context) JsonOutputSerializationFormatOutput
}

var jsonOutputSerializationFormatPtrType = reflect.TypeOf((**JsonOutputSerializationFormat)(nil)).Elem()

type JsonOutputSerializationFormatPtrInput interface {
	pulumi.Input

	ToJsonOutputSerializationFormatPtrOutput() JsonOutputSerializationFormatPtrOutput
	ToJsonOutputSerializationFormatPtrOutputWithContext(context.Context) JsonOutputSerializationFormatPtrOutput
}

type jsonOutputSerializationFormatPtr string

func JsonOutputSerializationFormatPtr(v string) JsonOutputSerializationFormatPtrInput {
	return (*jsonOutputSerializationFormatPtr)(&v)
}

func (*jsonOutputSerializationFormatPtr) ElementType() reflect.Type {
	return jsonOutputSerializationFormatPtrType
}

func (in *jsonOutputSerializationFormatPtr) ToJsonOutputSerializationFormatPtrOutput() JsonOutputSerializationFormatPtrOutput {
	return pulumi.ToOutput(in).(JsonOutputSerializationFormatPtrOutput)
}

func (in *jsonOutputSerializationFormatPtr) ToJsonOutputSerializationFormatPtrOutputWithContext(ctx context.Context) JsonOutputSerializationFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JsonOutputSerializationFormatPtrOutput)
}

func (in *jsonOutputSerializationFormatPtr) ToOutput(ctx context.Context) pulumix.Output[*JsonOutputSerializationFormat] {
	return pulumix.Output[*JsonOutputSerializationFormat]{
		OutputState: in.ToJsonOutputSerializationFormatPtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the policy to apply to events that arrive at the output and cannot be written to the external storage due to being malformed (missing column values, column values of wrong type or size).
type OutputErrorPolicy string

const (
	OutputErrorPolicyStop = OutputErrorPolicy("Stop")
	OutputErrorPolicyDrop = OutputErrorPolicy("Drop")
)

func (OutputErrorPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputErrorPolicy)(nil)).Elem()
}

func (e OutputErrorPolicy) ToOutputErrorPolicyOutput() OutputErrorPolicyOutput {
	return pulumi.ToOutput(e).(OutputErrorPolicyOutput)
}

func (e OutputErrorPolicy) ToOutputErrorPolicyOutputWithContext(ctx context.Context) OutputErrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OutputErrorPolicyOutput)
}

func (e OutputErrorPolicy) ToOutputErrorPolicyPtrOutput() OutputErrorPolicyPtrOutput {
	return e.ToOutputErrorPolicyPtrOutputWithContext(context.Background())
}

func (e OutputErrorPolicy) ToOutputErrorPolicyPtrOutputWithContext(ctx context.Context) OutputErrorPolicyPtrOutput {
	return OutputErrorPolicy(e).ToOutputErrorPolicyOutputWithContext(ctx).ToOutputErrorPolicyPtrOutputWithContext(ctx)
}

func (e OutputErrorPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputErrorPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputErrorPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutputErrorPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OutputErrorPolicyOutput struct{ *pulumi.OutputState }

func (OutputErrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputErrorPolicy)(nil)).Elem()
}

func (o OutputErrorPolicyOutput) ToOutputErrorPolicyOutput() OutputErrorPolicyOutput {
	return o
}

func (o OutputErrorPolicyOutput) ToOutputErrorPolicyOutputWithContext(ctx context.Context) OutputErrorPolicyOutput {
	return o
}

func (o OutputErrorPolicyOutput) ToOutputErrorPolicyPtrOutput() OutputErrorPolicyPtrOutput {
	return o.ToOutputErrorPolicyPtrOutputWithContext(context.Background())
}

func (o OutputErrorPolicyOutput) ToOutputErrorPolicyPtrOutputWithContext(ctx context.Context) OutputErrorPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputErrorPolicy) *OutputErrorPolicy {
		return &v
	}).(OutputErrorPolicyPtrOutput)
}

func (o OutputErrorPolicyOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OutputErrorPolicyOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputErrorPolicy) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OutputErrorPolicyOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputErrorPolicyOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputErrorPolicy) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OutputErrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (OutputErrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputErrorPolicy)(nil)).Elem()
}

func (o OutputErrorPolicyPtrOutput) ToOutputErrorPolicyPtrOutput() OutputErrorPolicyPtrOutput {
	return o
}

func (o OutputErrorPolicyPtrOutput) ToOutputErrorPolicyPtrOutputWithContext(ctx context.Context) OutputErrorPolicyPtrOutput {
	return o
}

func (o OutputErrorPolicyPtrOutput) Elem() OutputErrorPolicyOutput {
	return o.ApplyT(func(v *OutputErrorPolicy) OutputErrorPolicy {
		if v != nil {
			return *v
		}
		var ret OutputErrorPolicy
		return ret
	}).(OutputErrorPolicyOutput)
}

func (o OutputErrorPolicyPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputErrorPolicyPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OutputErrorPolicy) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OutputErrorPolicyInput is an input type that accepts values of the OutputErrorPolicy enum
// A concrete instance of `OutputErrorPolicyInput` can be one of the following:
//
//	OutputErrorPolicyStop
//	OutputErrorPolicyDrop
type OutputErrorPolicyInput interface {
	pulumi.Input

	ToOutputErrorPolicyOutput() OutputErrorPolicyOutput
	ToOutputErrorPolicyOutputWithContext(context.Context) OutputErrorPolicyOutput
}

var outputErrorPolicyPtrType = reflect.TypeOf((**OutputErrorPolicy)(nil)).Elem()

type OutputErrorPolicyPtrInput interface {
	pulumi.Input

	ToOutputErrorPolicyPtrOutput() OutputErrorPolicyPtrOutput
	ToOutputErrorPolicyPtrOutputWithContext(context.Context) OutputErrorPolicyPtrOutput
}

type outputErrorPolicyPtr string

func OutputErrorPolicyPtr(v string) OutputErrorPolicyPtrInput {
	return (*outputErrorPolicyPtr)(&v)
}

func (*outputErrorPolicyPtr) ElementType() reflect.Type {
	return outputErrorPolicyPtrType
}

func (in *outputErrorPolicyPtr) ToOutputErrorPolicyPtrOutput() OutputErrorPolicyPtrOutput {
	return pulumi.ToOutput(in).(OutputErrorPolicyPtrOutput)
}

func (in *outputErrorPolicyPtr) ToOutputErrorPolicyPtrOutputWithContext(ctx context.Context) OutputErrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OutputErrorPolicyPtrOutput)
}

func (in *outputErrorPolicyPtr) ToOutput(ctx context.Context) pulumix.Output[*OutputErrorPolicy] {
	return pulumix.Output[*OutputErrorPolicy]{
		OutputState: in.ToOutputErrorPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// This property should only be utilized when it is desired that the job be started immediately upon creation. Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate whether the starting point of the output event stream should start whenever the job is started, start at a custom user time stamp specified via the outputStartTime property, or start from the last event output time.
type OutputStartMode string

const (
	OutputStartModeJobStartTime        = OutputStartMode("JobStartTime")
	OutputStartModeCustomTime          = OutputStartMode("CustomTime")
	OutputStartModeLastOutputEventTime = OutputStartMode("LastOutputEventTime")
)

func (OutputStartMode) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputStartMode)(nil)).Elem()
}

func (e OutputStartMode) ToOutputStartModeOutput() OutputStartModeOutput {
	return pulumi.ToOutput(e).(OutputStartModeOutput)
}

func (e OutputStartMode) ToOutputStartModeOutputWithContext(ctx context.Context) OutputStartModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OutputStartModeOutput)
}

func (e OutputStartMode) ToOutputStartModePtrOutput() OutputStartModePtrOutput {
	return e.ToOutputStartModePtrOutputWithContext(context.Background())
}

func (e OutputStartMode) ToOutputStartModePtrOutputWithContext(ctx context.Context) OutputStartModePtrOutput {
	return OutputStartMode(e).ToOutputStartModeOutputWithContext(ctx).ToOutputStartModePtrOutputWithContext(ctx)
}

func (e OutputStartMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputStartMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputStartMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutputStartMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OutputStartModeOutput struct{ *pulumi.OutputState }

func (OutputStartModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputStartMode)(nil)).Elem()
}

func (o OutputStartModeOutput) ToOutputStartModeOutput() OutputStartModeOutput {
	return o
}

func (o OutputStartModeOutput) ToOutputStartModeOutputWithContext(ctx context.Context) OutputStartModeOutput {
	return o
}

func (o OutputStartModeOutput) ToOutputStartModePtrOutput() OutputStartModePtrOutput {
	return o.ToOutputStartModePtrOutputWithContext(context.Background())
}

func (o OutputStartModeOutput) ToOutputStartModePtrOutputWithContext(ctx context.Context) OutputStartModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputStartMode) *OutputStartMode {
		return &v
	}).(OutputStartModePtrOutput)
}

func (o OutputStartModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OutputStartModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputStartMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OutputStartModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputStartModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputStartMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OutputStartModePtrOutput struct{ *pulumi.OutputState }

func (OutputStartModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputStartMode)(nil)).Elem()
}

func (o OutputStartModePtrOutput) ToOutputStartModePtrOutput() OutputStartModePtrOutput {
	return o
}

func (o OutputStartModePtrOutput) ToOutputStartModePtrOutputWithContext(ctx context.Context) OutputStartModePtrOutput {
	return o
}

func (o OutputStartModePtrOutput) Elem() OutputStartModeOutput {
	return o.ApplyT(func(v *OutputStartMode) OutputStartMode {
		if v != nil {
			return *v
		}
		var ret OutputStartMode
		return ret
	}).(OutputStartModeOutput)
}

func (o OutputStartModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputStartModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OutputStartMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OutputStartModeInput is an input type that accepts values of the OutputStartMode enum
// A concrete instance of `OutputStartModeInput` can be one of the following:
//
//	OutputStartModeJobStartTime
//	OutputStartModeCustomTime
//	OutputStartModeLastOutputEventTime
type OutputStartModeInput interface {
	pulumi.Input

	ToOutputStartModeOutput() OutputStartModeOutput
	ToOutputStartModeOutputWithContext(context.Context) OutputStartModeOutput
}

var outputStartModePtrType = reflect.TypeOf((**OutputStartMode)(nil)).Elem()

type OutputStartModePtrInput interface {
	pulumi.Input

	ToOutputStartModePtrOutput() OutputStartModePtrOutput
	ToOutputStartModePtrOutputWithContext(context.Context) OutputStartModePtrOutput
}

type outputStartModePtr string

func OutputStartModePtr(v string) OutputStartModePtrInput {
	return (*outputStartModePtr)(&v)
}

func (*outputStartModePtr) ElementType() reflect.Type {
	return outputStartModePtrType
}

func (in *outputStartModePtr) ToOutputStartModePtrOutput() OutputStartModePtrOutput {
	return pulumi.ToOutput(in).(OutputStartModePtrOutput)
}

func (in *outputStartModePtr) ToOutputStartModePtrOutputWithContext(ctx context.Context) OutputStartModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OutputStartModePtrOutput)
}

func (in *outputStartModePtr) ToOutput(ctx context.Context) pulumix.Output[*OutputStartMode] {
	return pulumix.Output[*OutputStartMode]{
		OutputState: in.ToOutputStartModePtrOutputWithContext(ctx).OutputState,
	}
}

// The output watermark mode.
type OutputWatermarkMode string

const (
	OutputWatermarkModeNone                                = OutputWatermarkMode("None")
	OutputWatermarkModeSendCurrentPartitionWatermark       = OutputWatermarkMode("SendCurrentPartitionWatermark")
	OutputWatermarkModeSendLowestWatermarkAcrossPartitions = OutputWatermarkMode("SendLowestWatermarkAcrossPartitions")
)

func (OutputWatermarkMode) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputWatermarkMode)(nil)).Elem()
}

func (e OutputWatermarkMode) ToOutputWatermarkModeOutput() OutputWatermarkModeOutput {
	return pulumi.ToOutput(e).(OutputWatermarkModeOutput)
}

func (e OutputWatermarkMode) ToOutputWatermarkModeOutputWithContext(ctx context.Context) OutputWatermarkModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OutputWatermarkModeOutput)
}

func (e OutputWatermarkMode) ToOutputWatermarkModePtrOutput() OutputWatermarkModePtrOutput {
	return e.ToOutputWatermarkModePtrOutputWithContext(context.Background())
}

func (e OutputWatermarkMode) ToOutputWatermarkModePtrOutputWithContext(ctx context.Context) OutputWatermarkModePtrOutput {
	return OutputWatermarkMode(e).ToOutputWatermarkModeOutputWithContext(ctx).ToOutputWatermarkModePtrOutputWithContext(ctx)
}

func (e OutputWatermarkMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputWatermarkMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OutputWatermarkMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OutputWatermarkMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OutputWatermarkModeOutput struct{ *pulumi.OutputState }

func (OutputWatermarkModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputWatermarkMode)(nil)).Elem()
}

func (o OutputWatermarkModeOutput) ToOutputWatermarkModeOutput() OutputWatermarkModeOutput {
	return o
}

func (o OutputWatermarkModeOutput) ToOutputWatermarkModeOutputWithContext(ctx context.Context) OutputWatermarkModeOutput {
	return o
}

func (o OutputWatermarkModeOutput) ToOutputWatermarkModePtrOutput() OutputWatermarkModePtrOutput {
	return o.ToOutputWatermarkModePtrOutputWithContext(context.Background())
}

func (o OutputWatermarkModeOutput) ToOutputWatermarkModePtrOutputWithContext(ctx context.Context) OutputWatermarkModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputWatermarkMode) *OutputWatermarkMode {
		return &v
	}).(OutputWatermarkModePtrOutput)
}

func (o OutputWatermarkModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OutputWatermarkModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputWatermarkMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OutputWatermarkModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputWatermarkModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OutputWatermarkMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OutputWatermarkModePtrOutput struct{ *pulumi.OutputState }

func (OutputWatermarkModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputWatermarkMode)(nil)).Elem()
}

func (o OutputWatermarkModePtrOutput) ToOutputWatermarkModePtrOutput() OutputWatermarkModePtrOutput {
	return o
}

func (o OutputWatermarkModePtrOutput) ToOutputWatermarkModePtrOutputWithContext(ctx context.Context) OutputWatermarkModePtrOutput {
	return o
}

func (o OutputWatermarkModePtrOutput) Elem() OutputWatermarkModeOutput {
	return o.ApplyT(func(v *OutputWatermarkMode) OutputWatermarkMode {
		if v != nil {
			return *v
		}
		var ret OutputWatermarkMode
		return ret
	}).(OutputWatermarkModeOutput)
}

func (o OutputWatermarkModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OutputWatermarkModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OutputWatermarkMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OutputWatermarkModeInput is an input type that accepts values of the OutputWatermarkMode enum
// A concrete instance of `OutputWatermarkModeInput` can be one of the following:
//
//	OutputWatermarkModeNone
//	OutputWatermarkModeSendCurrentPartitionWatermark
//	OutputWatermarkModeSendLowestWatermarkAcrossPartitions
type OutputWatermarkModeInput interface {
	pulumi.Input

	ToOutputWatermarkModeOutput() OutputWatermarkModeOutput
	ToOutputWatermarkModeOutputWithContext(context.Context) OutputWatermarkModeOutput
}

var outputWatermarkModePtrType = reflect.TypeOf((**OutputWatermarkMode)(nil)).Elem()

type OutputWatermarkModePtrInput interface {
	pulumi.Input

	ToOutputWatermarkModePtrOutput() OutputWatermarkModePtrOutput
	ToOutputWatermarkModePtrOutputWithContext(context.Context) OutputWatermarkModePtrOutput
}

type outputWatermarkModePtr string

func OutputWatermarkModePtr(v string) OutputWatermarkModePtrInput {
	return (*outputWatermarkModePtr)(&v)
}

func (*outputWatermarkModePtr) ElementType() reflect.Type {
	return outputWatermarkModePtrType
}

func (in *outputWatermarkModePtr) ToOutputWatermarkModePtrOutput() OutputWatermarkModePtrOutput {
	return pulumi.ToOutput(in).(OutputWatermarkModePtrOutput)
}

func (in *outputWatermarkModePtr) ToOutputWatermarkModePtrOutputWithContext(ctx context.Context) OutputWatermarkModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OutputWatermarkModePtrOutput)
}

func (in *outputWatermarkModePtr) ToOutput(ctx context.Context) pulumix.Output[*OutputWatermarkMode] {
	return pulumix.Output[*OutputWatermarkMode]{
		OutputState: in.ToOutputWatermarkModePtrOutputWithContext(ctx).OutputState,
	}
}

// Indicates the type of data refresh option.
type RefreshType string

const (
	RefreshTypeStatic                       = RefreshType("Static")
	RefreshTypeRefreshPeriodicallyWithFull  = RefreshType("RefreshPeriodicallyWithFull")
	RefreshTypeRefreshPeriodicallyWithDelta = RefreshType("RefreshPeriodicallyWithDelta")
)

func (RefreshType) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshType)(nil)).Elem()
}

func (e RefreshType) ToRefreshTypeOutput() RefreshTypeOutput {
	return pulumi.ToOutput(e).(RefreshTypeOutput)
}

func (e RefreshType) ToRefreshTypeOutputWithContext(ctx context.Context) RefreshTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RefreshTypeOutput)
}

func (e RefreshType) ToRefreshTypePtrOutput() RefreshTypePtrOutput {
	return e.ToRefreshTypePtrOutputWithContext(context.Background())
}

func (e RefreshType) ToRefreshTypePtrOutputWithContext(ctx context.Context) RefreshTypePtrOutput {
	return RefreshType(e).ToRefreshTypeOutputWithContext(ctx).ToRefreshTypePtrOutputWithContext(ctx)
}

func (e RefreshType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RefreshType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RefreshType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RefreshType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RefreshTypeOutput struct{ *pulumi.OutputState }

func (RefreshTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RefreshType)(nil)).Elem()
}

func (o RefreshTypeOutput) ToRefreshTypeOutput() RefreshTypeOutput {
	return o
}

func (o RefreshTypeOutput) ToRefreshTypeOutputWithContext(ctx context.Context) RefreshTypeOutput {
	return o
}

func (o RefreshTypeOutput) ToRefreshTypePtrOutput() RefreshTypePtrOutput {
	return o.ToRefreshTypePtrOutputWithContext(context.Background())
}

func (o RefreshTypeOutput) ToRefreshTypePtrOutputWithContext(ctx context.Context) RefreshTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RefreshType) *RefreshType {
		return &v
	}).(RefreshTypePtrOutput)
}

func (o RefreshTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RefreshTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RefreshType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RefreshTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RefreshTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RefreshType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RefreshTypePtrOutput struct{ *pulumi.OutputState }

func (RefreshTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RefreshType)(nil)).Elem()
}

func (o RefreshTypePtrOutput) ToRefreshTypePtrOutput() RefreshTypePtrOutput {
	return o
}

func (o RefreshTypePtrOutput) ToRefreshTypePtrOutputWithContext(ctx context.Context) RefreshTypePtrOutput {
	return o
}

func (o RefreshTypePtrOutput) Elem() RefreshTypeOutput {
	return o.ApplyT(func(v *RefreshType) RefreshType {
		if v != nil {
			return *v
		}
		var ret RefreshType
		return ret
	}).(RefreshTypeOutput)
}

func (o RefreshTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RefreshTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RefreshType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RefreshTypeInput is an input type that accepts values of the RefreshType enum
// A concrete instance of `RefreshTypeInput` can be one of the following:
//
//	RefreshTypeStatic
//	RefreshTypeRefreshPeriodicallyWithFull
//	RefreshTypeRefreshPeriodicallyWithDelta
type RefreshTypeInput interface {
	pulumi.Input

	ToRefreshTypeOutput() RefreshTypeOutput
	ToRefreshTypeOutputWithContext(context.Context) RefreshTypeOutput
}

var refreshTypePtrType = reflect.TypeOf((**RefreshType)(nil)).Elem()

type RefreshTypePtrInput interface {
	pulumi.Input

	ToRefreshTypePtrOutput() RefreshTypePtrOutput
	ToRefreshTypePtrOutputWithContext(context.Context) RefreshTypePtrOutput
}

type refreshTypePtr string

func RefreshTypePtr(v string) RefreshTypePtrInput {
	return (*refreshTypePtr)(&v)
}

func (*refreshTypePtr) ElementType() reflect.Type {
	return refreshTypePtrType
}

func (in *refreshTypePtr) ToRefreshTypePtrOutput() RefreshTypePtrOutput {
	return pulumi.ToOutput(in).(RefreshTypePtrOutput)
}

func (in *refreshTypePtr) ToRefreshTypePtrOutputWithContext(ctx context.Context) RefreshTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RefreshTypePtrOutput)
}

func (in *refreshTypePtr) ToOutput(ctx context.Context) pulumix.Output[*RefreshType] {
	return pulumix.Output[*RefreshType]{
		OutputState: in.ToRefreshTypePtrOutputWithContext(ctx).OutputState,
	}
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
type SkuName string

const (
	SkuNameStandard = SkuName("Standard")
)

func (SkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (e SkuName) ToSkuNameOutput() SkuNameOutput {
	return pulumi.ToOutput(e).(SkuNameOutput)
}

func (e SkuName) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SkuNameOutput)
}

func (e SkuName) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return e.ToSkuNamePtrOutputWithContext(context.Background())
}

func (e SkuName) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return SkuName(e).ToSkuNameOutputWithContext(ctx).ToSkuNamePtrOutputWithContext(ctx)
}

func (e SkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SkuNameOutput struct{ *pulumi.OutputState }

func (SkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuName)(nil)).Elem()
}

func (o SkuNameOutput) ToSkuNameOutput() SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNameOutputWithContext(ctx context.Context) SkuNameOutput {
	return o
}

func (o SkuNameOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o.ToSkuNamePtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SkuName) *SkuName {
		return &v
	}).(SkuNamePtrOutput)
}

func (o SkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SkuNamePtrOutput struct{ *pulumi.OutputState }

func (SkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuName)(nil)).Elem()
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return o
}

func (o SkuNamePtrOutput) Elem() SkuNameOutput {
	return o.ApplyT(func(v *SkuName) SkuName {
		if v != nil {
			return *v
		}
		var ret SkuName
		return ret
	}).(SkuNameOutput)
}

func (o SkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SkuNameInput is an input type that accepts values of the SkuName enum
// A concrete instance of `SkuNameInput` can be one of the following:
//
//	SkuNameStandard
type SkuNameInput interface {
	pulumi.Input

	ToSkuNameOutput() SkuNameOutput
	ToSkuNameOutputWithContext(context.Context) SkuNameOutput
}

var skuNamePtrType = reflect.TypeOf((**SkuName)(nil)).Elem()

type SkuNamePtrInput interface {
	pulumi.Input

	ToSkuNamePtrOutput() SkuNamePtrOutput
	ToSkuNamePtrOutputWithContext(context.Context) SkuNamePtrOutput
}

type skuNamePtr string

func SkuNamePtr(v string) SkuNamePtrInput {
	return (*skuNamePtr)(&v)
}

func (*skuNamePtr) ElementType() reflect.Type {
	return skuNamePtrType
}

func (in *skuNamePtr) ToSkuNamePtrOutput() SkuNamePtrOutput {
	return pulumi.ToOutput(in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToSkuNamePtrOutputWithContext(ctx context.Context) SkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SkuNamePtrOutput)
}

func (in *skuNamePtr) ToOutput(ctx context.Context) pulumix.Output[*SkuName] {
	return pulumix.Output[*SkuName]{
		OutputState: in.ToSkuNamePtrOutputWithContext(ctx).OutputState,
	}
}

// This property indicates which data refresh option to use, Blocking or Nonblocking.
type UpdatableUdfRefreshType string

const (
	UpdatableUdfRefreshTypeBlocking    = UpdatableUdfRefreshType("Blocking")
	UpdatableUdfRefreshTypeNonblocking = UpdatableUdfRefreshType("Nonblocking")
)

func (UpdatableUdfRefreshType) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdatableUdfRefreshType)(nil)).Elem()
}

func (e UpdatableUdfRefreshType) ToUpdatableUdfRefreshTypeOutput() UpdatableUdfRefreshTypeOutput {
	return pulumi.ToOutput(e).(UpdatableUdfRefreshTypeOutput)
}

func (e UpdatableUdfRefreshType) ToUpdatableUdfRefreshTypeOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UpdatableUdfRefreshTypeOutput)
}

func (e UpdatableUdfRefreshType) ToUpdatableUdfRefreshTypePtrOutput() UpdatableUdfRefreshTypePtrOutput {
	return e.ToUpdatableUdfRefreshTypePtrOutputWithContext(context.Background())
}

func (e UpdatableUdfRefreshType) ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypePtrOutput {
	return UpdatableUdfRefreshType(e).ToUpdatableUdfRefreshTypeOutputWithContext(ctx).ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx)
}

func (e UpdatableUdfRefreshType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpdatableUdfRefreshType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpdatableUdfRefreshType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UpdatableUdfRefreshType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UpdatableUdfRefreshTypeOutput struct{ *pulumi.OutputState }

func (UpdatableUdfRefreshTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdatableUdfRefreshType)(nil)).Elem()
}

func (o UpdatableUdfRefreshTypeOutput) ToUpdatableUdfRefreshTypeOutput() UpdatableUdfRefreshTypeOutput {
	return o
}

func (o UpdatableUdfRefreshTypeOutput) ToUpdatableUdfRefreshTypeOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypeOutput {
	return o
}

func (o UpdatableUdfRefreshTypeOutput) ToUpdatableUdfRefreshTypePtrOutput() UpdatableUdfRefreshTypePtrOutput {
	return o.ToUpdatableUdfRefreshTypePtrOutputWithContext(context.Background())
}

func (o UpdatableUdfRefreshTypeOutput) ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpdatableUdfRefreshType) *UpdatableUdfRefreshType {
		return &v
	}).(UpdatableUdfRefreshTypePtrOutput)
}

func (o UpdatableUdfRefreshTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UpdatableUdfRefreshTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpdatableUdfRefreshType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UpdatableUdfRefreshTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpdatableUdfRefreshTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpdatableUdfRefreshType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UpdatableUdfRefreshTypePtrOutput struct{ *pulumi.OutputState }

func (UpdatableUdfRefreshTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdatableUdfRefreshType)(nil)).Elem()
}

func (o UpdatableUdfRefreshTypePtrOutput) ToUpdatableUdfRefreshTypePtrOutput() UpdatableUdfRefreshTypePtrOutput {
	return o
}

func (o UpdatableUdfRefreshTypePtrOutput) ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypePtrOutput {
	return o
}

func (o UpdatableUdfRefreshTypePtrOutput) Elem() UpdatableUdfRefreshTypeOutput {
	return o.ApplyT(func(v *UpdatableUdfRefreshType) UpdatableUdfRefreshType {
		if v != nil {
			return *v
		}
		var ret UpdatableUdfRefreshType
		return ret
	}).(UpdatableUdfRefreshTypeOutput)
}

func (o UpdatableUdfRefreshTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpdatableUdfRefreshTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UpdatableUdfRefreshType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UpdatableUdfRefreshTypeInput is an input type that accepts values of the UpdatableUdfRefreshType enum
// A concrete instance of `UpdatableUdfRefreshTypeInput` can be one of the following:
//
//	UpdatableUdfRefreshTypeBlocking
//	UpdatableUdfRefreshTypeNonblocking
type UpdatableUdfRefreshTypeInput interface {
	pulumi.Input

	ToUpdatableUdfRefreshTypeOutput() UpdatableUdfRefreshTypeOutput
	ToUpdatableUdfRefreshTypeOutputWithContext(context.Context) UpdatableUdfRefreshTypeOutput
}

var updatableUdfRefreshTypePtrType = reflect.TypeOf((**UpdatableUdfRefreshType)(nil)).Elem()

type UpdatableUdfRefreshTypePtrInput interface {
	pulumi.Input

	ToUpdatableUdfRefreshTypePtrOutput() UpdatableUdfRefreshTypePtrOutput
	ToUpdatableUdfRefreshTypePtrOutputWithContext(context.Context) UpdatableUdfRefreshTypePtrOutput
}

type updatableUdfRefreshTypePtr string

func UpdatableUdfRefreshTypePtr(v string) UpdatableUdfRefreshTypePtrInput {
	return (*updatableUdfRefreshTypePtr)(&v)
}

func (*updatableUdfRefreshTypePtr) ElementType() reflect.Type {
	return updatableUdfRefreshTypePtrType
}

func (in *updatableUdfRefreshTypePtr) ToUpdatableUdfRefreshTypePtrOutput() UpdatableUdfRefreshTypePtrOutput {
	return pulumi.ToOutput(in).(UpdatableUdfRefreshTypePtrOutput)
}

func (in *updatableUdfRefreshTypePtr) ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx context.Context) UpdatableUdfRefreshTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UpdatableUdfRefreshTypePtrOutput)
}

func (in *updatableUdfRefreshTypePtr) ToOutput(ctx context.Context) pulumix.Output[*UpdatableUdfRefreshType] {
	return pulumix.Output[*UpdatableUdfRefreshType]{
		OutputState: in.ToUpdatableUdfRefreshTypePtrOutputWithContext(ctx).OutputState,
	}
}

// Refresh modes for Stream Analytics functions.
type UpdateMode string

const (
	UpdateModeStatic      = UpdateMode("Static")
	UpdateModeRefreshable = UpdateMode("Refreshable")
)

func (UpdateMode) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateMode)(nil)).Elem()
}

func (e UpdateMode) ToUpdateModeOutput() UpdateModeOutput {
	return pulumi.ToOutput(e).(UpdateModeOutput)
}

func (e UpdateMode) ToUpdateModeOutputWithContext(ctx context.Context) UpdateModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(UpdateModeOutput)
}

func (e UpdateMode) ToUpdateModePtrOutput() UpdateModePtrOutput {
	return e.ToUpdateModePtrOutputWithContext(context.Background())
}

func (e UpdateMode) ToUpdateModePtrOutputWithContext(ctx context.Context) UpdateModePtrOutput {
	return UpdateMode(e).ToUpdateModeOutputWithContext(ctx).ToUpdateModePtrOutputWithContext(ctx)
}

func (e UpdateMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpdateMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e UpdateMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e UpdateMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type UpdateModeOutput struct{ *pulumi.OutputState }

func (UpdateModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateMode)(nil)).Elem()
}

func (o UpdateModeOutput) ToUpdateModeOutput() UpdateModeOutput {
	return o
}

func (o UpdateModeOutput) ToUpdateModeOutputWithContext(ctx context.Context) UpdateModeOutput {
	return o
}

func (o UpdateModeOutput) ToUpdateModePtrOutput() UpdateModePtrOutput {
	return o.ToUpdateModePtrOutputWithContext(context.Background())
}

func (o UpdateModeOutput) ToUpdateModePtrOutputWithContext(ctx context.Context) UpdateModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpdateMode) *UpdateMode {
		return &v
	}).(UpdateModePtrOutput)
}

func (o UpdateModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o UpdateModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpdateMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o UpdateModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpdateModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e UpdateMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type UpdateModePtrOutput struct{ *pulumi.OutputState }

func (UpdateModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateMode)(nil)).Elem()
}

func (o UpdateModePtrOutput) ToUpdateModePtrOutput() UpdateModePtrOutput {
	return o
}

func (o UpdateModePtrOutput) ToUpdateModePtrOutputWithContext(ctx context.Context) UpdateModePtrOutput {
	return o
}

func (o UpdateModePtrOutput) Elem() UpdateModeOutput {
	return o.ApplyT(func(v *UpdateMode) UpdateMode {
		if v != nil {
			return *v
		}
		var ret UpdateMode
		return ret
	}).(UpdateModeOutput)
}

func (o UpdateModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o UpdateModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *UpdateMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// UpdateModeInput is an input type that accepts values of the UpdateMode enum
// A concrete instance of `UpdateModeInput` can be one of the following:
//
//	UpdateModeStatic
//	UpdateModeRefreshable
type UpdateModeInput interface {
	pulumi.Input

	ToUpdateModeOutput() UpdateModeOutput
	ToUpdateModeOutputWithContext(context.Context) UpdateModeOutput
}

var updateModePtrType = reflect.TypeOf((**UpdateMode)(nil)).Elem()

type UpdateModePtrInput interface {
	pulumi.Input

	ToUpdateModePtrOutput() UpdateModePtrOutput
	ToUpdateModePtrOutputWithContext(context.Context) UpdateModePtrOutput
}

type updateModePtr string

func UpdateModePtr(v string) UpdateModePtrInput {
	return (*updateModePtr)(&v)
}

func (*updateModePtr) ElementType() reflect.Type {
	return updateModePtrType
}

func (in *updateModePtr) ToUpdateModePtrOutput() UpdateModePtrOutput {
	return pulumi.ToOutput(in).(UpdateModePtrOutput)
}

func (in *updateModePtr) ToUpdateModePtrOutputWithContext(ctx context.Context) UpdateModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(UpdateModePtrOutput)
}

func (in *updateModePtr) ToOutput(ctx context.Context) pulumix.Output[*UpdateMode] {
	return pulumix.Output[*UpdateMode]{
		OutputState: in.ToUpdateModePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(AuthenticationModeOutput{})
	pulumi.RegisterOutputType(AuthenticationModePtrOutput{})
	pulumi.RegisterOutputType(BlobWriteModeOutput{})
	pulumi.RegisterOutputType(BlobWriteModePtrOutput{})
	pulumi.RegisterOutputType(CompatibilityLevelOutput{})
	pulumi.RegisterOutputType(CompatibilityLevelPtrOutput{})
	pulumi.RegisterOutputType(CompressionTypeOutput{})
	pulumi.RegisterOutputType(CompressionTypePtrOutput{})
	pulumi.RegisterOutputType(ContentStoragePolicyOutput{})
	pulumi.RegisterOutputType(ContentStoragePolicyPtrOutput{})
	pulumi.RegisterOutputType(EncodingOutput{})
	pulumi.RegisterOutputType(EncodingPtrOutput{})
	pulumi.RegisterOutputType(EventGridEventSchemaTypeOutput{})
	pulumi.RegisterOutputType(EventGridEventSchemaTypePtrOutput{})
	pulumi.RegisterOutputType(EventsOutOfOrderPolicyOutput{})
	pulumi.RegisterOutputType(EventsOutOfOrderPolicyPtrOutput{})
	pulumi.RegisterOutputType(InputWatermarkModeOutput{})
	pulumi.RegisterOutputType(InputWatermarkModePtrOutput{})
	pulumi.RegisterOutputType(JobTypeOutput{})
	pulumi.RegisterOutputType(JobTypePtrOutput{})
	pulumi.RegisterOutputType(JsonOutputSerializationFormatOutput{})
	pulumi.RegisterOutputType(JsonOutputSerializationFormatPtrOutput{})
	pulumi.RegisterOutputType(OutputErrorPolicyOutput{})
	pulumi.RegisterOutputType(OutputErrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(OutputStartModeOutput{})
	pulumi.RegisterOutputType(OutputStartModePtrOutput{})
	pulumi.RegisterOutputType(OutputWatermarkModeOutput{})
	pulumi.RegisterOutputType(OutputWatermarkModePtrOutput{})
	pulumi.RegisterOutputType(RefreshTypeOutput{})
	pulumi.RegisterOutputType(RefreshTypePtrOutput{})
	pulumi.RegisterOutputType(SkuNameOutput{})
	pulumi.RegisterOutputType(SkuNamePtrOutput{})
	pulumi.RegisterOutputType(UpdatableUdfRefreshTypeOutput{})
	pulumi.RegisterOutputType(UpdatableUdfRefreshTypePtrOutput{})
	pulumi.RegisterOutputType(UpdateModeOutput{})
	pulumi.RegisterOutputType(UpdateModePtrOutput{})
}
