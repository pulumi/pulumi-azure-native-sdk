// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The properties that are associated with an aggregate function.
type AggregateFunctionProperties struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding interface{}         `pulumi:"binding"`
	Inputs  []FunctionInputType `pulumi:"inputs"`
	// Describes the output of a function.
	Output *FunctionOutputType `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Aggregate'.
	Type string `pulumi:"type"`
}

// AggregateFunctionPropertiesInput is an input type that accepts AggregateFunctionPropertiesArgs and AggregateFunctionPropertiesOutput values.
// You can construct a concrete instance of `AggregateFunctionPropertiesInput` via:
//
//	AggregateFunctionPropertiesArgs{...}
type AggregateFunctionPropertiesInput interface {
	pulumi.Input

	ToAggregateFunctionPropertiesOutput() AggregateFunctionPropertiesOutput
	ToAggregateFunctionPropertiesOutputWithContext(context.Context) AggregateFunctionPropertiesOutput
}

// The properties that are associated with an aggregate function.
type AggregateFunctionPropertiesArgs struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding pulumi.Input                `pulumi:"binding"`
	Inputs  FunctionInputTypeArrayInput `pulumi:"inputs"`
	// Describes the output of a function.
	Output FunctionOutputTypePtrInput `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Aggregate'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AggregateFunctionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateFunctionProperties)(nil)).Elem()
}

func (i AggregateFunctionPropertiesArgs) ToAggregateFunctionPropertiesOutput() AggregateFunctionPropertiesOutput {
	return i.ToAggregateFunctionPropertiesOutputWithContext(context.Background())
}

func (i AggregateFunctionPropertiesArgs) ToAggregateFunctionPropertiesOutputWithContext(ctx context.Context) AggregateFunctionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateFunctionPropertiesOutput)
}

func (i AggregateFunctionPropertiesArgs) ToAggregateFunctionPropertiesPtrOutput() AggregateFunctionPropertiesPtrOutput {
	return i.ToAggregateFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i AggregateFunctionPropertiesArgs) ToAggregateFunctionPropertiesPtrOutputWithContext(ctx context.Context) AggregateFunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateFunctionPropertiesOutput).ToAggregateFunctionPropertiesPtrOutputWithContext(ctx)
}

// AggregateFunctionPropertiesPtrInput is an input type that accepts AggregateFunctionPropertiesArgs, AggregateFunctionPropertiesPtr and AggregateFunctionPropertiesPtrOutput values.
// You can construct a concrete instance of `AggregateFunctionPropertiesPtrInput` via:
//
//	        AggregateFunctionPropertiesArgs{...}
//
//	or:
//
//	        nil
type AggregateFunctionPropertiesPtrInput interface {
	pulumi.Input

	ToAggregateFunctionPropertiesPtrOutput() AggregateFunctionPropertiesPtrOutput
	ToAggregateFunctionPropertiesPtrOutputWithContext(context.Context) AggregateFunctionPropertiesPtrOutput
}

type aggregateFunctionPropertiesPtrType AggregateFunctionPropertiesArgs

func AggregateFunctionPropertiesPtr(v *AggregateFunctionPropertiesArgs) AggregateFunctionPropertiesPtrInput {
	return (*aggregateFunctionPropertiesPtrType)(v)
}

func (*aggregateFunctionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateFunctionProperties)(nil)).Elem()
}

func (i *aggregateFunctionPropertiesPtrType) ToAggregateFunctionPropertiesPtrOutput() AggregateFunctionPropertiesPtrOutput {
	return i.ToAggregateFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i *aggregateFunctionPropertiesPtrType) ToAggregateFunctionPropertiesPtrOutputWithContext(ctx context.Context) AggregateFunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateFunctionPropertiesPtrOutput)
}

// The properties that are associated with an aggregate function.
type AggregateFunctionPropertiesOutput struct{ *pulumi.OutputState }

func (AggregateFunctionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateFunctionProperties)(nil)).Elem()
}

func (o AggregateFunctionPropertiesOutput) ToAggregateFunctionPropertiesOutput() AggregateFunctionPropertiesOutput {
	return o
}

func (o AggregateFunctionPropertiesOutput) ToAggregateFunctionPropertiesOutputWithContext(ctx context.Context) AggregateFunctionPropertiesOutput {
	return o
}

func (o AggregateFunctionPropertiesOutput) ToAggregateFunctionPropertiesPtrOutput() AggregateFunctionPropertiesPtrOutput {
	return o.ToAggregateFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (o AggregateFunctionPropertiesOutput) ToAggregateFunctionPropertiesPtrOutputWithContext(ctx context.Context) AggregateFunctionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregateFunctionProperties) *AggregateFunctionProperties {
		return &v
	}).(AggregateFunctionPropertiesPtrOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o AggregateFunctionPropertiesOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v AggregateFunctionProperties) interface{} { return v.Binding }).(pulumi.AnyOutput)
}

func (o AggregateFunctionPropertiesOutput) Inputs() FunctionInputTypeArrayOutput {
	return o.ApplyT(func(v AggregateFunctionProperties) []FunctionInputType { return v.Inputs }).(FunctionInputTypeArrayOutput)
}

// Describes the output of a function.
func (o AggregateFunctionPropertiesOutput) Output() FunctionOutputTypePtrOutput {
	return o.ApplyT(func(v AggregateFunctionProperties) *FunctionOutputType { return v.Output }).(FunctionOutputTypePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Aggregate'.
func (o AggregateFunctionPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AggregateFunctionProperties) string { return v.Type }).(pulumi.StringOutput)
}

type AggregateFunctionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AggregateFunctionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateFunctionProperties)(nil)).Elem()
}

func (o AggregateFunctionPropertiesPtrOutput) ToAggregateFunctionPropertiesPtrOutput() AggregateFunctionPropertiesPtrOutput {
	return o
}

func (o AggregateFunctionPropertiesPtrOutput) ToAggregateFunctionPropertiesPtrOutputWithContext(ctx context.Context) AggregateFunctionPropertiesPtrOutput {
	return o
}

func (o AggregateFunctionPropertiesPtrOutput) Elem() AggregateFunctionPropertiesOutput {
	return o.ApplyT(func(v *AggregateFunctionProperties) AggregateFunctionProperties {
		if v != nil {
			return *v
		}
		var ret AggregateFunctionProperties
		return ret
	}).(AggregateFunctionPropertiesOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o AggregateFunctionPropertiesPtrOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v *AggregateFunctionProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Binding
	}).(pulumi.AnyOutput)
}

func (o AggregateFunctionPropertiesPtrOutput) Inputs() FunctionInputTypeArrayOutput {
	return o.ApplyT(func(v *AggregateFunctionProperties) []FunctionInputType {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(FunctionInputTypeArrayOutput)
}

// Describes the output of a function.
func (o AggregateFunctionPropertiesPtrOutput) Output() FunctionOutputTypePtrOutput {
	return o.ApplyT(func(v *AggregateFunctionProperties) *FunctionOutputType {
		if v == nil {
			return nil
		}
		return v.Output
	}).(FunctionOutputTypePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Aggregate'.
func (o AggregateFunctionPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregateFunctionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an aggregate function.
type AggregateFunctionPropertiesResponse struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding interface{} `pulumi:"binding"`
	// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag   string                  `pulumi:"etag"`
	Inputs []FunctionInputResponse `pulumi:"inputs"`
	// Describes the output of a function.
	Output *FunctionOutputResponse `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Aggregate'.
	Type string `pulumi:"type"`
}

// The properties that are associated with an aggregate function.
type AggregateFunctionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AggregateFunctionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateFunctionPropertiesResponse)(nil)).Elem()
}

func (o AggregateFunctionPropertiesResponseOutput) ToAggregateFunctionPropertiesResponseOutput() AggregateFunctionPropertiesResponseOutput {
	return o
}

func (o AggregateFunctionPropertiesResponseOutput) ToAggregateFunctionPropertiesResponseOutputWithContext(ctx context.Context) AggregateFunctionPropertiesResponseOutput {
	return o
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o AggregateFunctionPropertiesResponseOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v AggregateFunctionPropertiesResponse) interface{} { return v.Binding }).(pulumi.AnyOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o AggregateFunctionPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v AggregateFunctionPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

func (o AggregateFunctionPropertiesResponseOutput) Inputs() FunctionInputResponseArrayOutput {
	return o.ApplyT(func(v AggregateFunctionPropertiesResponse) []FunctionInputResponse { return v.Inputs }).(FunctionInputResponseArrayOutput)
}

// Describes the output of a function.
func (o AggregateFunctionPropertiesResponseOutput) Output() FunctionOutputResponsePtrOutput {
	return o.ApplyT(func(v AggregateFunctionPropertiesResponse) *FunctionOutputResponse { return v.Output }).(FunctionOutputResponsePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Aggregate'.
func (o AggregateFunctionPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AggregateFunctionPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AggregateFunctionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AggregateFunctionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregateFunctionPropertiesResponse)(nil)).Elem()
}

func (o AggregateFunctionPropertiesResponsePtrOutput) ToAggregateFunctionPropertiesResponsePtrOutput() AggregateFunctionPropertiesResponsePtrOutput {
	return o
}

func (o AggregateFunctionPropertiesResponsePtrOutput) ToAggregateFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) AggregateFunctionPropertiesResponsePtrOutput {
	return o
}

func (o AggregateFunctionPropertiesResponsePtrOutput) Elem() AggregateFunctionPropertiesResponseOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) AggregateFunctionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AggregateFunctionPropertiesResponse
		return ret
	}).(AggregateFunctionPropertiesResponseOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o AggregateFunctionPropertiesResponsePtrOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Binding
	}).(pulumi.AnyOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o AggregateFunctionPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

func (o AggregateFunctionPropertiesResponsePtrOutput) Inputs() FunctionInputResponseArrayOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) []FunctionInputResponse {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(FunctionInputResponseArrayOutput)
}

// Describes the output of a function.
func (o AggregateFunctionPropertiesResponsePtrOutput) Output() FunctionOutputResponsePtrOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) *FunctionOutputResponse {
		if v == nil {
			return nil
		}
		return v.Output
	}).(FunctionOutputResponsePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Aggregate'.
func (o AggregateFunctionPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregateFunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
type AvroSerialization struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// AvroSerializationInput is an input type that accepts AvroSerializationArgs and AvroSerializationOutput values.
// You can construct a concrete instance of `AvroSerializationInput` via:
//
//	AvroSerializationArgs{...}
type AvroSerializationInput interface {
	pulumi.Input

	ToAvroSerializationOutput() AvroSerializationOutput
	ToAvroSerializationOutputWithContext(context.Context) AvroSerializationOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
type AvroSerializationArgs struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Avro'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvroSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSerialization)(nil)).Elem()
}

func (i AvroSerializationArgs) ToAvroSerializationOutput() AvroSerializationOutput {
	return i.ToAvroSerializationOutputWithContext(context.Background())
}

func (i AvroSerializationArgs) ToAvroSerializationOutputWithContext(ctx context.Context) AvroSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroSerializationOutput)
}

func (i AvroSerializationArgs) ToAvroSerializationPtrOutput() AvroSerializationPtrOutput {
	return i.ToAvroSerializationPtrOutputWithContext(context.Background())
}

func (i AvroSerializationArgs) ToAvroSerializationPtrOutputWithContext(ctx context.Context) AvroSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroSerializationOutput).ToAvroSerializationPtrOutputWithContext(ctx)
}

// AvroSerializationPtrInput is an input type that accepts AvroSerializationArgs, AvroSerializationPtr and AvroSerializationPtrOutput values.
// You can construct a concrete instance of `AvroSerializationPtrInput` via:
//
//	        AvroSerializationArgs{...}
//
//	or:
//
//	        nil
type AvroSerializationPtrInput interface {
	pulumi.Input

	ToAvroSerializationPtrOutput() AvroSerializationPtrOutput
	ToAvroSerializationPtrOutputWithContext(context.Context) AvroSerializationPtrOutput
}

type avroSerializationPtrType AvroSerializationArgs

func AvroSerializationPtr(v *AvroSerializationArgs) AvroSerializationPtrInput {
	return (*avroSerializationPtrType)(v)
}

func (*avroSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroSerialization)(nil)).Elem()
}

func (i *avroSerializationPtrType) ToAvroSerializationPtrOutput() AvroSerializationPtrOutput {
	return i.ToAvroSerializationPtrOutputWithContext(context.Background())
}

func (i *avroSerializationPtrType) ToAvroSerializationPtrOutputWithContext(ctx context.Context) AvroSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroSerializationPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
type AvroSerializationOutput struct{ *pulumi.OutputState }

func (AvroSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSerialization)(nil)).Elem()
}

func (o AvroSerializationOutput) ToAvroSerializationOutput() AvroSerializationOutput {
	return o
}

func (o AvroSerializationOutput) ToAvroSerializationOutputWithContext(ctx context.Context) AvroSerializationOutput {
	return o
}

func (o AvroSerializationOutput) ToAvroSerializationPtrOutput() AvroSerializationPtrOutput {
	return o.ToAvroSerializationPtrOutputWithContext(context.Background())
}

func (o AvroSerializationOutput) ToAvroSerializationPtrOutputWithContext(ctx context.Context) AvroSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroSerialization) *AvroSerialization {
		return &v
	}).(AvroSerializationPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Avro'.
func (o AvroSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type AvroSerializationPtrOutput struct{ *pulumi.OutputState }

func (AvroSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroSerialization)(nil)).Elem()
}

func (o AvroSerializationPtrOutput) ToAvroSerializationPtrOutput() AvroSerializationPtrOutput {
	return o
}

func (o AvroSerializationPtrOutput) ToAvroSerializationPtrOutputWithContext(ctx context.Context) AvroSerializationPtrOutput {
	return o
}

func (o AvroSerializationPtrOutput) Elem() AvroSerializationOutput {
	return o.ApplyT(func(v *AvroSerialization) AvroSerialization {
		if v != nil {
			return *v
		}
		var ret AvroSerialization
		return ret
	}).(AvroSerializationOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Avro'.
func (o AvroSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
type AvroSerializationResponse struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Avro'.
	Type string `pulumi:"type"`
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.
type AvroSerializationResponseOutput struct{ *pulumi.OutputState }

func (AvroSerializationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroSerializationResponse)(nil)).Elem()
}

func (o AvroSerializationResponseOutput) ToAvroSerializationResponseOutput() AvroSerializationResponseOutput {
	return o
}

func (o AvroSerializationResponseOutput) ToAvroSerializationResponseOutputWithContext(ctx context.Context) AvroSerializationResponseOutput {
	return o
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Avro'.
func (o AvroSerializationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvroSerializationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AvroSerializationResponsePtrOutput struct{ *pulumi.OutputState }

func (AvroSerializationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroSerializationResponse)(nil)).Elem()
}

func (o AvroSerializationResponsePtrOutput) ToAvroSerializationResponsePtrOutput() AvroSerializationResponsePtrOutput {
	return o
}

func (o AvroSerializationResponsePtrOutput) ToAvroSerializationResponsePtrOutputWithContext(ctx context.Context) AvroSerializationResponsePtrOutput {
	return o
}

func (o AvroSerializationResponsePtrOutput) Elem() AvroSerializationResponseOutput {
	return o.ApplyT(func(v *AvroSerializationResponse) AvroSerializationResponse {
		if v != nil {
			return *v
		}
		var ret AvroSerializationResponse
		return ret
	}).(AvroSerializationResponseOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Avro'.
func (o AvroSerializationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AvroSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Data Lake Store output data source.
type AzureDataLakeStoreOutputDataSource struct {
	// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
	FilePathPrefix *string `pulumi:"filePathPrefix"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken *string `pulumi:"refreshToken"`
	// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
	TenantId *string `pulumi:"tenantId"`
	// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName *string `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName *string `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.DataLake/Accounts'.
	Type string `pulumi:"type"`
}

// AzureDataLakeStoreOutputDataSourceInput is an input type that accepts AzureDataLakeStoreOutputDataSourceArgs and AzureDataLakeStoreOutputDataSourceOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreOutputDataSourceInput` via:
//
//	AzureDataLakeStoreOutputDataSourceArgs{...}
type AzureDataLakeStoreOutputDataSourceInput interface {
	pulumi.Input

	ToAzureDataLakeStoreOutputDataSourceOutput() AzureDataLakeStoreOutputDataSourceOutput
	ToAzureDataLakeStoreOutputDataSourceOutputWithContext(context.Context) AzureDataLakeStoreOutputDataSourceOutput
}

// Describes an Azure Data Lake Store output data source.
type AzureDataLakeStoreOutputDataSourceArgs struct {
	// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
	FilePathPrefix pulumi.StringPtrInput `pulumi:"filePathPrefix"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName pulumi.StringPtrInput `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName pulumi.StringPtrInput `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.DataLake/Accounts'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureDataLakeStoreOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreOutputDataSource)(nil)).Elem()
}

func (i AzureDataLakeStoreOutputDataSourceArgs) ToAzureDataLakeStoreOutputDataSourceOutput() AzureDataLakeStoreOutputDataSourceOutput {
	return i.ToAzureDataLakeStoreOutputDataSourceOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreOutputDataSourceArgs) ToAzureDataLakeStoreOutputDataSourceOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreOutputDataSourceOutput)
}

func (i AzureDataLakeStoreOutputDataSourceArgs) ToAzureDataLakeStoreOutputDataSourcePtrOutput() AzureDataLakeStoreOutputDataSourcePtrOutput {
	return i.ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureDataLakeStoreOutputDataSourceArgs) ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreOutputDataSourceOutput).ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(ctx)
}

// AzureDataLakeStoreOutputDataSourcePtrInput is an input type that accepts AzureDataLakeStoreOutputDataSourceArgs, AzureDataLakeStoreOutputDataSourcePtr and AzureDataLakeStoreOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureDataLakeStoreOutputDataSourcePtrInput` via:
//
//	        AzureDataLakeStoreOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureDataLakeStoreOutputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureDataLakeStoreOutputDataSourcePtrOutput() AzureDataLakeStoreOutputDataSourcePtrOutput
	ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(context.Context) AzureDataLakeStoreOutputDataSourcePtrOutput
}

type azureDataLakeStoreOutputDataSourcePtrType AzureDataLakeStoreOutputDataSourceArgs

func AzureDataLakeStoreOutputDataSourcePtr(v *AzureDataLakeStoreOutputDataSourceArgs) AzureDataLakeStoreOutputDataSourcePtrInput {
	return (*azureDataLakeStoreOutputDataSourcePtrType)(v)
}

func (*azureDataLakeStoreOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreOutputDataSource)(nil)).Elem()
}

func (i *azureDataLakeStoreOutputDataSourcePtrType) ToAzureDataLakeStoreOutputDataSourcePtrOutput() AzureDataLakeStoreOutputDataSourcePtrOutput {
	return i.ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureDataLakeStoreOutputDataSourcePtrType) ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeStoreOutputDataSourcePtrOutput)
}

// Describes an Azure Data Lake Store output data source.
type AzureDataLakeStoreOutputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreOutputDataSource)(nil)).Elem()
}

func (o AzureDataLakeStoreOutputDataSourceOutput) ToAzureDataLakeStoreOutputDataSourceOutput() AzureDataLakeStoreOutputDataSourceOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourceOutput) ToAzureDataLakeStoreOutputDataSourceOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourceOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourceOutput) ToAzureDataLakeStoreOutputDataSourcePtrOutput() AzureDataLakeStoreOutputDataSourcePtrOutput {
	return o.ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureDataLakeStoreOutputDataSourceOutput) ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureDataLakeStoreOutputDataSource) *AzureDataLakeStoreOutputDataSource {
		return &v
	}).(AzureDataLakeStoreOutputDataSourcePtrOutput)
}

// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o AzureDataLakeStoreOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
func (o AzureDataLakeStoreOutputDataSourceOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceOutput) FilePathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.FilePathPrefix }).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
func (o AzureDataLakeStoreOutputDataSourceOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.TokenUserDisplayName }).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) *string { return v.TokenUserPrincipalName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.DataLake/Accounts'.
func (o AzureDataLakeStoreOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDataLakeStoreOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreOutputDataSource)(nil)).Elem()
}

func (o AzureDataLakeStoreOutputDataSourcePtrOutput) ToAzureDataLakeStoreOutputDataSourcePtrOutput() AzureDataLakeStoreOutputDataSourcePtrOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourcePtrOutput) ToAzureDataLakeStoreOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourcePtrOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourcePtrOutput) Elem() AzureDataLakeStoreOutputDataSourceOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) AzureDataLakeStoreOutputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreOutputDataSource
		return ret
	}).(AzureDataLakeStoreOutputDataSourceOutput)
}

// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) FilePathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.FilePathPrefix
	}).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserDisplayName
	}).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.DataLake/Accounts'.
func (o AzureDataLakeStoreOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Data Lake Store output data source.
type AzureDataLakeStoreOutputDataSourceResponse struct {
	// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
	FilePathPrefix *string `pulumi:"filePathPrefix"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken *string `pulumi:"refreshToken"`
	// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
	TenantId *string `pulumi:"tenantId"`
	// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName *string `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName *string `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.DataLake/Accounts'.
	Type string `pulumi:"type"`
}

// Describes an Azure Data Lake Store output data source.
type AzureDataLakeStoreOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeStoreOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreOutputDataSourceResponseOutput) ToAzureDataLakeStoreOutputDataSourceResponseOutput() AzureDataLakeStoreOutputDataSourceResponseOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourceResponseOutput) ToAzureDataLakeStoreOutputDataSourceResponseOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourceResponseOutput {
	return o
}

// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) FilePathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.FilePathPrefix }).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.TokenUserDisplayName }).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) *string { return v.TokenUserPrincipalName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.DataLake/Accounts'.
func (o AzureDataLakeStoreOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeStoreOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureDataLakeStoreOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeStoreOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeStoreOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) ToAzureDataLakeStoreOutputDataSourceResponsePtrOutput() AzureDataLakeStoreOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) ToAzureDataLakeStoreOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureDataLakeStoreOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) Elem() AzureDataLakeStoreOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) AzureDataLakeStoreOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeStoreOutputDataSourceResponse
		return ret
	}).(AzureDataLakeStoreOutputDataSourceResponseOutput)
}

// The name of the Azure Data Lake Store account. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in filePathPrefix, the value of this property is used as the date format instead.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The location of the file to which the output should be written to. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) FilePathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.FilePathPrefix
	}).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The tenant id of the user used to obtain the refresh token. Required on PUT (CreateOrReplace) requests.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The time format. Wherever {time} appears in filePathPrefix, the value of this property is used as the time format instead.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserDisplayName
	}).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.DataLake/Accounts'.
func (o AzureDataLakeStoreOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeStoreOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Defines the metadata of AzureFunctionOutputDataSource
type AzureFunctionOutputDataSource struct {
	// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
	ApiKey *string `pulumi:"apiKey"`
	// The name of your Azure Functions app.
	FunctionAppName *string `pulumi:"functionAppName"`
	// The name of the function in your Azure Functions app.
	FunctionName *string `pulumi:"functionName"`
	// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
	MaxBatchSize *float64 `pulumi:"maxBatchSize"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.AzureFunction'.
	Type string `pulumi:"type"`
}

// AzureFunctionOutputDataSourceInput is an input type that accepts AzureFunctionOutputDataSourceArgs and AzureFunctionOutputDataSourceOutput values.
// You can construct a concrete instance of `AzureFunctionOutputDataSourceInput` via:
//
//	AzureFunctionOutputDataSourceArgs{...}
type AzureFunctionOutputDataSourceInput interface {
	pulumi.Input

	ToAzureFunctionOutputDataSourceOutput() AzureFunctionOutputDataSourceOutput
	ToAzureFunctionOutputDataSourceOutputWithContext(context.Context) AzureFunctionOutputDataSourceOutput
}

// Defines the metadata of AzureFunctionOutputDataSource
type AzureFunctionOutputDataSourceArgs struct {
	// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// The name of your Azure Functions app.
	FunctionAppName pulumi.StringPtrInput `pulumi:"functionAppName"`
	// The name of the function in your Azure Functions app.
	FunctionName pulumi.StringPtrInput `pulumi:"functionName"`
	// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
	MaxBatchCount pulumi.Float64PtrInput `pulumi:"maxBatchCount"`
	// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
	MaxBatchSize pulumi.Float64PtrInput `pulumi:"maxBatchSize"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.AzureFunction'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureFunctionOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionOutputDataSource)(nil)).Elem()
}

func (i AzureFunctionOutputDataSourceArgs) ToAzureFunctionOutputDataSourceOutput() AzureFunctionOutputDataSourceOutput {
	return i.ToAzureFunctionOutputDataSourceOutputWithContext(context.Background())
}

func (i AzureFunctionOutputDataSourceArgs) ToAzureFunctionOutputDataSourceOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionOutputDataSourceOutput)
}

func (i AzureFunctionOutputDataSourceArgs) ToAzureFunctionOutputDataSourcePtrOutput() AzureFunctionOutputDataSourcePtrOutput {
	return i.ToAzureFunctionOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureFunctionOutputDataSourceArgs) ToAzureFunctionOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionOutputDataSourceOutput).ToAzureFunctionOutputDataSourcePtrOutputWithContext(ctx)
}

// AzureFunctionOutputDataSourcePtrInput is an input type that accepts AzureFunctionOutputDataSourceArgs, AzureFunctionOutputDataSourcePtr and AzureFunctionOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureFunctionOutputDataSourcePtrInput` via:
//
//	        AzureFunctionOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureFunctionOutputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureFunctionOutputDataSourcePtrOutput() AzureFunctionOutputDataSourcePtrOutput
	ToAzureFunctionOutputDataSourcePtrOutputWithContext(context.Context) AzureFunctionOutputDataSourcePtrOutput
}

type azureFunctionOutputDataSourcePtrType AzureFunctionOutputDataSourceArgs

func AzureFunctionOutputDataSourcePtr(v *AzureFunctionOutputDataSourceArgs) AzureFunctionOutputDataSourcePtrInput {
	return (*azureFunctionOutputDataSourcePtrType)(v)
}

func (*azureFunctionOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionOutputDataSource)(nil)).Elem()
}

func (i *azureFunctionOutputDataSourcePtrType) ToAzureFunctionOutputDataSourcePtrOutput() AzureFunctionOutputDataSourcePtrOutput {
	return i.ToAzureFunctionOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureFunctionOutputDataSourcePtrType) ToAzureFunctionOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionOutputDataSourcePtrOutput)
}

// Defines the metadata of AzureFunctionOutputDataSource
type AzureFunctionOutputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureFunctionOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionOutputDataSource)(nil)).Elem()
}

func (o AzureFunctionOutputDataSourceOutput) ToAzureFunctionOutputDataSourceOutput() AzureFunctionOutputDataSourceOutput {
	return o
}

func (o AzureFunctionOutputDataSourceOutput) ToAzureFunctionOutputDataSourceOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourceOutput {
	return o
}

func (o AzureFunctionOutputDataSourceOutput) ToAzureFunctionOutputDataSourcePtrOutput() AzureFunctionOutputDataSourcePtrOutput {
	return o.ToAzureFunctionOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureFunctionOutputDataSourceOutput) ToAzureFunctionOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFunctionOutputDataSource) *AzureFunctionOutputDataSource {
		return &v
	}).(AzureFunctionOutputDataSourcePtrOutput)
}

// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
func (o AzureFunctionOutputDataSourceOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The name of your Azure Functions app.
func (o AzureFunctionOutputDataSourceOutput) FunctionAppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) *string { return v.FunctionAppName }).(pulumi.StringPtrOutput)
}

// The name of the function in your Azure Functions app.
func (o AzureFunctionOutputDataSourceOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) *string { return v.FunctionName }).(pulumi.StringPtrOutput)
}

// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
func (o AzureFunctionOutputDataSourceOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) *float64 { return v.MaxBatchCount }).(pulumi.Float64PtrOutput)
}

// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
func (o AzureFunctionOutputDataSourceOutput) MaxBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) *float64 { return v.MaxBatchSize }).(pulumi.Float64PtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.AzureFunction'.
func (o AzureFunctionOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type AzureFunctionOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureFunctionOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionOutputDataSource)(nil)).Elem()
}

func (o AzureFunctionOutputDataSourcePtrOutput) ToAzureFunctionOutputDataSourcePtrOutput() AzureFunctionOutputDataSourcePtrOutput {
	return o
}

func (o AzureFunctionOutputDataSourcePtrOutput) ToAzureFunctionOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourcePtrOutput {
	return o
}

func (o AzureFunctionOutputDataSourcePtrOutput) Elem() AzureFunctionOutputDataSourceOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) AzureFunctionOutputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureFunctionOutputDataSource
		return ret
	}).(AzureFunctionOutputDataSourceOutput)
}

// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
func (o AzureFunctionOutputDataSourcePtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// The name of your Azure Functions app.
func (o AzureFunctionOutputDataSourcePtrOutput) FunctionAppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.FunctionAppName
	}).(pulumi.StringPtrOutput)
}

// The name of the function in your Azure Functions app.
func (o AzureFunctionOutputDataSourcePtrOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.FunctionName
	}).(pulumi.StringPtrOutput)
}

// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
func (o AzureFunctionOutputDataSourcePtrOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchCount
	}).(pulumi.Float64PtrOutput)
}

// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
func (o AzureFunctionOutputDataSourcePtrOutput) MaxBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchSize
	}).(pulumi.Float64PtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.AzureFunction'.
func (o AzureFunctionOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Defines the metadata of AzureFunctionOutputDataSource
type AzureFunctionOutputDataSourceResponse struct {
	// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
	ApiKey *string `pulumi:"apiKey"`
	// The name of your Azure Functions app.
	FunctionAppName *string `pulumi:"functionAppName"`
	// The name of the function in your Azure Functions app.
	FunctionName *string `pulumi:"functionName"`
	// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
	MaxBatchSize *float64 `pulumi:"maxBatchSize"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.AzureFunction'.
	Type string `pulumi:"type"`
}

// Defines the metadata of AzureFunctionOutputDataSource
type AzureFunctionOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureFunctionOutputDataSourceResponseOutput) ToAzureFunctionOutputDataSourceResponseOutput() AzureFunctionOutputDataSourceResponseOutput {
	return o
}

func (o AzureFunctionOutputDataSourceResponseOutput) ToAzureFunctionOutputDataSourceResponseOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourceResponseOutput {
	return o
}

// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
func (o AzureFunctionOutputDataSourceResponseOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// The name of your Azure Functions app.
func (o AzureFunctionOutputDataSourceResponseOutput) FunctionAppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) *string { return v.FunctionAppName }).(pulumi.StringPtrOutput)
}

// The name of the function in your Azure Functions app.
func (o AzureFunctionOutputDataSourceResponseOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) *string { return v.FunctionName }).(pulumi.StringPtrOutput)
}

// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
func (o AzureFunctionOutputDataSourceResponseOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) *float64 { return v.MaxBatchCount }).(pulumi.Float64PtrOutput)
}

// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
func (o AzureFunctionOutputDataSourceResponseOutput) MaxBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) *float64 { return v.MaxBatchSize }).(pulumi.Float64PtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.AzureFunction'.
func (o AzureFunctionOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureFunctionOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFunctionOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFunctionOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureFunctionOutputDataSourceResponsePtrOutput) ToAzureFunctionOutputDataSourceResponsePtrOutput() AzureFunctionOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureFunctionOutputDataSourceResponsePtrOutput) ToAzureFunctionOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureFunctionOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureFunctionOutputDataSourceResponsePtrOutput) Elem() AzureFunctionOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) AzureFunctionOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureFunctionOutputDataSourceResponse
		return ret
	}).(AzureFunctionOutputDataSourceResponseOutput)
}

// If you want to use an Azure Function from another subscription, you can do so by providing the key to access your function.
func (o AzureFunctionOutputDataSourceResponsePtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// The name of your Azure Functions app.
func (o AzureFunctionOutputDataSourceResponsePtrOutput) FunctionAppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionAppName
	}).(pulumi.StringPtrOutput)
}

// The name of the function in your Azure Functions app.
func (o AzureFunctionOutputDataSourceResponsePtrOutput) FunctionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.FunctionName
	}).(pulumi.StringPtrOutput)
}

// A property that lets you specify the maximum number of events in each batch that's sent to Azure Functions. The default value is 100.
func (o AzureFunctionOutputDataSourceResponsePtrOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchCount
	}).(pulumi.Float64PtrOutput)
}

// A property that lets you set the maximum size for each output batch that's sent to your Azure function. The input unit is in bytes. By default, this value is 262,144 bytes (256 KB).
func (o AzureFunctionOutputDataSourceResponsePtrOutput) MaxBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchSize
	}).(pulumi.Float64PtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.AzureFunction'.
func (o AzureFunctionOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFunctionOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The binding to an Azure Machine Learning web service.
type AzureMachineLearningWebServiceFunctionBinding struct {
	// The API key used to authenticate with Request-Response endpoint.
	ApiKey *string `pulumi:"apiKey"`
	// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
	BatchSize *int `pulumi:"batchSize"`
	// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
	Endpoint *string `pulumi:"endpoint"`
	// The inputs for the Azure Machine Learning web service endpoint.
	Inputs *AzureMachineLearningWebServiceInputs `pulumi:"inputs"`
	// A list of outputs from the Azure Machine Learning web service endpoint execution.
	Outputs []AzureMachineLearningWebServiceOutputColumn `pulumi:"outputs"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.MachineLearning/WebService'.
	Type string `pulumi:"type"`
}

// AzureMachineLearningWebServiceFunctionBindingInput is an input type that accepts AzureMachineLearningWebServiceFunctionBindingArgs and AzureMachineLearningWebServiceFunctionBindingOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceFunctionBindingInput` via:
//
//	AzureMachineLearningWebServiceFunctionBindingArgs{...}
type AzureMachineLearningWebServiceFunctionBindingInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceFunctionBindingOutput() AzureMachineLearningWebServiceFunctionBindingOutput
	ToAzureMachineLearningWebServiceFunctionBindingOutputWithContext(context.Context) AzureMachineLearningWebServiceFunctionBindingOutput
}

// The binding to an Azure Machine Learning web service.
type AzureMachineLearningWebServiceFunctionBindingArgs struct {
	// The API key used to authenticate with Request-Response endpoint.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The inputs for the Azure Machine Learning web service endpoint.
	Inputs AzureMachineLearningWebServiceInputsPtrInput `pulumi:"inputs"`
	// A list of outputs from the Azure Machine Learning web service endpoint execution.
	Outputs AzureMachineLearningWebServiceOutputColumnArrayInput `pulumi:"outputs"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.MachineLearning/WebService'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureMachineLearningWebServiceFunctionBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceFunctionBinding)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceFunctionBindingArgs) ToAzureMachineLearningWebServiceFunctionBindingOutput() AzureMachineLearningWebServiceFunctionBindingOutput {
	return i.ToAzureMachineLearningWebServiceFunctionBindingOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceFunctionBindingArgs) ToAzureMachineLearningWebServiceFunctionBindingOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceFunctionBindingOutput)
}

func (i AzureMachineLearningWebServiceFunctionBindingArgs) ToAzureMachineLearningWebServiceFunctionBindingPtrOutput() AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return i.ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceFunctionBindingArgs) ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceFunctionBindingOutput).ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(ctx)
}

// AzureMachineLearningWebServiceFunctionBindingPtrInput is an input type that accepts AzureMachineLearningWebServiceFunctionBindingArgs, AzureMachineLearningWebServiceFunctionBindingPtr and AzureMachineLearningWebServiceFunctionBindingPtrOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceFunctionBindingPtrInput` via:
//
//	        AzureMachineLearningWebServiceFunctionBindingArgs{...}
//
//	or:
//
//	        nil
type AzureMachineLearningWebServiceFunctionBindingPtrInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceFunctionBindingPtrOutput() AzureMachineLearningWebServiceFunctionBindingPtrOutput
	ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(context.Context) AzureMachineLearningWebServiceFunctionBindingPtrOutput
}

type azureMachineLearningWebServiceFunctionBindingPtrType AzureMachineLearningWebServiceFunctionBindingArgs

func AzureMachineLearningWebServiceFunctionBindingPtr(v *AzureMachineLearningWebServiceFunctionBindingArgs) AzureMachineLearningWebServiceFunctionBindingPtrInput {
	return (*azureMachineLearningWebServiceFunctionBindingPtrType)(v)
}

func (*azureMachineLearningWebServiceFunctionBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceFunctionBinding)(nil)).Elem()
}

func (i *azureMachineLearningWebServiceFunctionBindingPtrType) ToAzureMachineLearningWebServiceFunctionBindingPtrOutput() AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return i.ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(context.Background())
}

func (i *azureMachineLearningWebServiceFunctionBindingPtrType) ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceFunctionBindingPtrOutput)
}

// The binding to an Azure Machine Learning web service.
type AzureMachineLearningWebServiceFunctionBindingOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceFunctionBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceFunctionBinding)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceFunctionBindingOutput) ToAzureMachineLearningWebServiceFunctionBindingOutput() AzureMachineLearningWebServiceFunctionBindingOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingOutput) ToAzureMachineLearningWebServiceFunctionBindingOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingOutput) ToAzureMachineLearningWebServiceFunctionBindingPtrOutput() AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return o.ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(context.Background())
}

func (o AzureMachineLearningWebServiceFunctionBindingOutput) ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMachineLearningWebServiceFunctionBinding) *AzureMachineLearningWebServiceFunctionBinding {
		return &v
	}).(AzureMachineLearningWebServiceFunctionBindingPtrOutput)
}

// The API key used to authenticate with Request-Response endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
func (o AzureMachineLearningWebServiceFunctionBindingOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
func (o AzureMachineLearningWebServiceFunctionBindingOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingOutput) Inputs() AzureMachineLearningWebServiceInputsPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) *AzureMachineLearningWebServiceInputs {
		return v.Inputs
	}).(AzureMachineLearningWebServiceInputsPtrOutput)
}

// A list of outputs from the Azure Machine Learning web service endpoint execution.
func (o AzureMachineLearningWebServiceFunctionBindingOutput) Outputs() AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) []AzureMachineLearningWebServiceOutputColumn {
		return v.Outputs
	}).(AzureMachineLearningWebServiceOutputColumnArrayOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.MachineLearning/WebService'.
func (o AzureMachineLearningWebServiceFunctionBindingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBinding) string { return v.Type }).(pulumi.StringOutput)
}

type AzureMachineLearningWebServiceFunctionBindingPtrOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceFunctionBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceFunctionBinding)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) ToAzureMachineLearningWebServiceFunctionBindingPtrOutput() AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) ToAzureMachineLearningWebServiceFunctionBindingPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingPtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) Elem() AzureMachineLearningWebServiceFunctionBindingOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) AzureMachineLearningWebServiceFunctionBinding {
		if v != nil {
			return *v
		}
		var ret AzureMachineLearningWebServiceFunctionBinding
		return ret
	}).(AzureMachineLearningWebServiceFunctionBindingOutput)
}

// The API key used to authenticate with Request-Response endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) Inputs() AzureMachineLearningWebServiceInputsPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) *AzureMachineLearningWebServiceInputs {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(AzureMachineLearningWebServiceInputsPtrOutput)
}

// A list of outputs from the Azure Machine Learning web service endpoint execution.
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) Outputs() AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) []AzureMachineLearningWebServiceOutputColumn {
		if v == nil {
			return nil
		}
		return v.Outputs
	}).(AzureMachineLearningWebServiceOutputColumnArrayOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.MachineLearning/WebService'.
func (o AzureMachineLearningWebServiceFunctionBindingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBinding) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The binding to an Azure Machine Learning web service.
type AzureMachineLearningWebServiceFunctionBindingResponse struct {
	// The API key used to authenticate with Request-Response endpoint.
	ApiKey *string `pulumi:"apiKey"`
	// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
	BatchSize *int `pulumi:"batchSize"`
	// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
	Endpoint *string `pulumi:"endpoint"`
	// The inputs for the Azure Machine Learning web service endpoint.
	Inputs *AzureMachineLearningWebServiceInputsResponse `pulumi:"inputs"`
	// A list of outputs from the Azure Machine Learning web service endpoint execution.
	Outputs []AzureMachineLearningWebServiceOutputColumnResponse `pulumi:"outputs"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.MachineLearning/WebService'.
	Type string `pulumi:"type"`
}

// The binding to an Azure Machine Learning web service.
type AzureMachineLearningWebServiceFunctionBindingResponseOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceFunctionBindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceFunctionBindingResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) ToAzureMachineLearningWebServiceFunctionBindingResponseOutput() AzureMachineLearningWebServiceFunctionBindingResponseOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) ToAzureMachineLearningWebServiceFunctionBindingResponseOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingResponseOutput {
	return o
}

// The API key used to authenticate with Request-Response endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) Inputs() AzureMachineLearningWebServiceInputsResponsePtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) *AzureMachineLearningWebServiceInputsResponse {
		return v.Inputs
	}).(AzureMachineLearningWebServiceInputsResponsePtrOutput)
}

// A list of outputs from the Azure Machine Learning web service endpoint execution.
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) Outputs() AzureMachineLearningWebServiceOutputColumnResponseArrayOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) []AzureMachineLearningWebServiceOutputColumnResponse {
		return v.Outputs
	}).(AzureMachineLearningWebServiceOutputColumnResponseArrayOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.MachineLearning/WebService'.
func (o AzureMachineLearningWebServiceFunctionBindingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceFunctionBindingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceFunctionBindingResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) ToAzureMachineLearningWebServiceFunctionBindingResponsePtrOutput() AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) ToAzureMachineLearningWebServiceFunctionBindingResponsePtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) Elem() AzureMachineLearningWebServiceFunctionBindingResponseOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) AzureMachineLearningWebServiceFunctionBindingResponse {
		if v != nil {
			return *v
		}
		var ret AzureMachineLearningWebServiceFunctionBindingResponse
		return ret
	}).(AzureMachineLearningWebServiceFunctionBindingResponseOutput)
}

// The API key used to authenticate with Request-Response endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Number between 1 and 10000 describing maximum number of rows for every Azure ML RRS execute request. Default is 1000.
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// The Request-Response execute endpoint of the Azure Machine Learning web service. Find out more here: https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) Inputs() AzureMachineLearningWebServiceInputsResponsePtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) *AzureMachineLearningWebServiceInputsResponse {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(AzureMachineLearningWebServiceInputsResponsePtrOutput)
}

// A list of outputs from the Azure Machine Learning web service endpoint execution.
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) Outputs() AzureMachineLearningWebServiceOutputColumnResponseArrayOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) []AzureMachineLearningWebServiceOutputColumnResponse {
		if v == nil {
			return nil
		}
		return v.Outputs
	}).(AzureMachineLearningWebServiceOutputColumnResponseArrayOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.MachineLearning/WebService'.
func (o AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceFunctionBindingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an input column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputColumn struct {
	// The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType *string `pulumi:"dataType"`
	// The zero based index of the function parameter this input maps to.
	MapTo *int `pulumi:"mapTo"`
	// The name of the input column.
	Name *string `pulumi:"name"`
}

// AzureMachineLearningWebServiceInputColumnInput is an input type that accepts AzureMachineLearningWebServiceInputColumnArgs and AzureMachineLearningWebServiceInputColumnOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceInputColumnInput` via:
//
//	AzureMachineLearningWebServiceInputColumnArgs{...}
type AzureMachineLearningWebServiceInputColumnInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceInputColumnOutput() AzureMachineLearningWebServiceInputColumnOutput
	ToAzureMachineLearningWebServiceInputColumnOutputWithContext(context.Context) AzureMachineLearningWebServiceInputColumnOutput
}

// Describes an input column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputColumnArgs struct {
	// The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// The zero based index of the function parameter this input maps to.
	MapTo pulumi.IntPtrInput `pulumi:"mapTo"`
	// The name of the input column.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AzureMachineLearningWebServiceInputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputColumn)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceInputColumnArgs) ToAzureMachineLearningWebServiceInputColumnOutput() AzureMachineLearningWebServiceInputColumnOutput {
	return i.ToAzureMachineLearningWebServiceInputColumnOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceInputColumnArgs) ToAzureMachineLearningWebServiceInputColumnOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceInputColumnOutput)
}

// AzureMachineLearningWebServiceInputColumnArrayInput is an input type that accepts AzureMachineLearningWebServiceInputColumnArray and AzureMachineLearningWebServiceInputColumnArrayOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceInputColumnArrayInput` via:
//
//	AzureMachineLearningWebServiceInputColumnArray{ AzureMachineLearningWebServiceInputColumnArgs{...} }
type AzureMachineLearningWebServiceInputColumnArrayInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceInputColumnArrayOutput() AzureMachineLearningWebServiceInputColumnArrayOutput
	ToAzureMachineLearningWebServiceInputColumnArrayOutputWithContext(context.Context) AzureMachineLearningWebServiceInputColumnArrayOutput
}

type AzureMachineLearningWebServiceInputColumnArray []AzureMachineLearningWebServiceInputColumnInput

func (AzureMachineLearningWebServiceInputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceInputColumn)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceInputColumnArray) ToAzureMachineLearningWebServiceInputColumnArrayOutput() AzureMachineLearningWebServiceInputColumnArrayOutput {
	return i.ToAzureMachineLearningWebServiceInputColumnArrayOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceInputColumnArray) ToAzureMachineLearningWebServiceInputColumnArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceInputColumnArrayOutput)
}

// Describes an input column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputColumnOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputColumn)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputColumnOutput) ToAzureMachineLearningWebServiceInputColumnOutput() AzureMachineLearningWebServiceInputColumnOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnOutput) ToAzureMachineLearningWebServiceInputColumnOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnOutput {
	return o
}

// The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
func (o AzureMachineLearningWebServiceInputColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The zero based index of the function parameter this input maps to.
func (o AzureMachineLearningWebServiceInputColumnOutput) MapTo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumn) *int { return v.MapTo }).(pulumi.IntPtrOutput)
}

// The name of the input column.
func (o AzureMachineLearningWebServiceInputColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceInputColumnArrayOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceInputColumn)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputColumnArrayOutput) ToAzureMachineLearningWebServiceInputColumnArrayOutput() AzureMachineLearningWebServiceInputColumnArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnArrayOutput) ToAzureMachineLearningWebServiceInputColumnArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnArrayOutput) Index(i pulumi.IntInput) AzureMachineLearningWebServiceInputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureMachineLearningWebServiceInputColumn {
		return vs[0].([]AzureMachineLearningWebServiceInputColumn)[vs[1].(int)]
	}).(AzureMachineLearningWebServiceInputColumnOutput)
}

// Describes an input column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputColumnResponse struct {
	// The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType *string `pulumi:"dataType"`
	// The zero based index of the function parameter this input maps to.
	MapTo *int `pulumi:"mapTo"`
	// The name of the input column.
	Name *string `pulumi:"name"`
}

// Describes an input column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputColumnResponseOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputColumnResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputColumnResponseOutput) ToAzureMachineLearningWebServiceInputColumnResponseOutput() AzureMachineLearningWebServiceInputColumnResponseOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnResponseOutput) ToAzureMachineLearningWebServiceInputColumnResponseOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnResponseOutput {
	return o
}

// The (Azure Machine Learning supported) data type of the input column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
func (o AzureMachineLearningWebServiceInputColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The zero based index of the function parameter this input maps to.
func (o AzureMachineLearningWebServiceInputColumnResponseOutput) MapTo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumnResponse) *int { return v.MapTo }).(pulumi.IntPtrOutput)
}

// The name of the input column.
func (o AzureMachineLearningWebServiceInputColumnResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputColumnResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceInputColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceInputColumnResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputColumnResponseArrayOutput) ToAzureMachineLearningWebServiceInputColumnResponseArrayOutput() AzureMachineLearningWebServiceInputColumnResponseArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnResponseArrayOutput) ToAzureMachineLearningWebServiceInputColumnResponseArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputColumnResponseArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputColumnResponseArrayOutput) Index(i pulumi.IntInput) AzureMachineLearningWebServiceInputColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureMachineLearningWebServiceInputColumnResponse {
		return vs[0].([]AzureMachineLearningWebServiceInputColumnResponse)[vs[1].(int)]
	}).(AzureMachineLearningWebServiceInputColumnResponseOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputs struct {
	// A list of input columns for the Azure Machine Learning web service endpoint.
	ColumnNames []AzureMachineLearningWebServiceInputColumn `pulumi:"columnNames"`
	// The name of the input. This is the name provided while authoring the endpoint.
	Name *string `pulumi:"name"`
}

// AzureMachineLearningWebServiceInputsInput is an input type that accepts AzureMachineLearningWebServiceInputsArgs and AzureMachineLearningWebServiceInputsOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceInputsInput` via:
//
//	AzureMachineLearningWebServiceInputsArgs{...}
type AzureMachineLearningWebServiceInputsInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceInputsOutput() AzureMachineLearningWebServiceInputsOutput
	ToAzureMachineLearningWebServiceInputsOutputWithContext(context.Context) AzureMachineLearningWebServiceInputsOutput
}

// The inputs for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputsArgs struct {
	// A list of input columns for the Azure Machine Learning web service endpoint.
	ColumnNames AzureMachineLearningWebServiceInputColumnArrayInput `pulumi:"columnNames"`
	// The name of the input. This is the name provided while authoring the endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AzureMachineLearningWebServiceInputsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputs)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceInputsArgs) ToAzureMachineLearningWebServiceInputsOutput() AzureMachineLearningWebServiceInputsOutput {
	return i.ToAzureMachineLearningWebServiceInputsOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceInputsArgs) ToAzureMachineLearningWebServiceInputsOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceInputsOutput)
}

func (i AzureMachineLearningWebServiceInputsArgs) ToAzureMachineLearningWebServiceInputsPtrOutput() AzureMachineLearningWebServiceInputsPtrOutput {
	return i.ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceInputsArgs) ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceInputsOutput).ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(ctx)
}

// AzureMachineLearningWebServiceInputsPtrInput is an input type that accepts AzureMachineLearningWebServiceInputsArgs, AzureMachineLearningWebServiceInputsPtr and AzureMachineLearningWebServiceInputsPtrOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceInputsPtrInput` via:
//
//	        AzureMachineLearningWebServiceInputsArgs{...}
//
//	or:
//
//	        nil
type AzureMachineLearningWebServiceInputsPtrInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceInputsPtrOutput() AzureMachineLearningWebServiceInputsPtrOutput
	ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(context.Context) AzureMachineLearningWebServiceInputsPtrOutput
}

type azureMachineLearningWebServiceInputsPtrType AzureMachineLearningWebServiceInputsArgs

func AzureMachineLearningWebServiceInputsPtr(v *AzureMachineLearningWebServiceInputsArgs) AzureMachineLearningWebServiceInputsPtrInput {
	return (*azureMachineLearningWebServiceInputsPtrType)(v)
}

func (*azureMachineLearningWebServiceInputsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceInputs)(nil)).Elem()
}

func (i *azureMachineLearningWebServiceInputsPtrType) ToAzureMachineLearningWebServiceInputsPtrOutput() AzureMachineLearningWebServiceInputsPtrOutput {
	return i.ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(context.Background())
}

func (i *azureMachineLearningWebServiceInputsPtrType) ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceInputsPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputsOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputs)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputsOutput) ToAzureMachineLearningWebServiceInputsOutput() AzureMachineLearningWebServiceInputsOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsOutput) ToAzureMachineLearningWebServiceInputsOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsOutput) ToAzureMachineLearningWebServiceInputsPtrOutput() AzureMachineLearningWebServiceInputsPtrOutput {
	return o.ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(context.Background())
}

func (o AzureMachineLearningWebServiceInputsOutput) ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMachineLearningWebServiceInputs) *AzureMachineLearningWebServiceInputs {
		return &v
	}).(AzureMachineLearningWebServiceInputsPtrOutput)
}

// A list of input columns for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceInputsOutput) ColumnNames() AzureMachineLearningWebServiceInputColumnArrayOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputs) []AzureMachineLearningWebServiceInputColumn {
		return v.ColumnNames
	}).(AzureMachineLearningWebServiceInputColumnArrayOutput)
}

// The name of the input. This is the name provided while authoring the endpoint.
func (o AzureMachineLearningWebServiceInputsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceInputsPtrOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceInputs)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputsPtrOutput) ToAzureMachineLearningWebServiceInputsPtrOutput() AzureMachineLearningWebServiceInputsPtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsPtrOutput) ToAzureMachineLearningWebServiceInputsPtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsPtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsPtrOutput) Elem() AzureMachineLearningWebServiceInputsOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputs) AzureMachineLearningWebServiceInputs {
		if v != nil {
			return *v
		}
		var ret AzureMachineLearningWebServiceInputs
		return ret
	}).(AzureMachineLearningWebServiceInputsOutput)
}

// A list of input columns for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceInputsPtrOutput) ColumnNames() AzureMachineLearningWebServiceInputColumnArrayOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputs) []AzureMachineLearningWebServiceInputColumn {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(AzureMachineLearningWebServiceInputColumnArrayOutput)
}

// The name of the input. This is the name provided while authoring the endpoint.
func (o AzureMachineLearningWebServiceInputsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputs) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The inputs for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputsResponse struct {
	// A list of input columns for the Azure Machine Learning web service endpoint.
	ColumnNames []AzureMachineLearningWebServiceInputColumnResponse `pulumi:"columnNames"`
	// The name of the input. This is the name provided while authoring the endpoint.
	Name *string `pulumi:"name"`
}

// The inputs for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceInputsResponseOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceInputsResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputsResponseOutput) ToAzureMachineLearningWebServiceInputsResponseOutput() AzureMachineLearningWebServiceInputsResponseOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsResponseOutput) ToAzureMachineLearningWebServiceInputsResponseOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsResponseOutput {
	return o
}

// A list of input columns for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceInputsResponseOutput) ColumnNames() AzureMachineLearningWebServiceInputColumnResponseArrayOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputsResponse) []AzureMachineLearningWebServiceInputColumnResponse {
		return v.ColumnNames
	}).(AzureMachineLearningWebServiceInputColumnResponseArrayOutput)
}

// The name of the input. This is the name provided while authoring the endpoint.
func (o AzureMachineLearningWebServiceInputsResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceInputsResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceInputsResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceInputsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMachineLearningWebServiceInputsResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceInputsResponsePtrOutput) ToAzureMachineLearningWebServiceInputsResponsePtrOutput() AzureMachineLearningWebServiceInputsResponsePtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsResponsePtrOutput) ToAzureMachineLearningWebServiceInputsResponsePtrOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceInputsResponsePtrOutput {
	return o
}

func (o AzureMachineLearningWebServiceInputsResponsePtrOutput) Elem() AzureMachineLearningWebServiceInputsResponseOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputsResponse) AzureMachineLearningWebServiceInputsResponse {
		if v != nil {
			return *v
		}
		var ret AzureMachineLearningWebServiceInputsResponse
		return ret
	}).(AzureMachineLearningWebServiceInputsResponseOutput)
}

// A list of input columns for the Azure Machine Learning web service endpoint.
func (o AzureMachineLearningWebServiceInputsResponsePtrOutput) ColumnNames() AzureMachineLearningWebServiceInputColumnResponseArrayOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputsResponse) []AzureMachineLearningWebServiceInputColumnResponse {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(AzureMachineLearningWebServiceInputColumnResponseArrayOutput)
}

// The name of the input. This is the name provided while authoring the endpoint.
func (o AzureMachineLearningWebServiceInputsResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMachineLearningWebServiceInputsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes an output column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceOutputColumn struct {
	// The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType *string `pulumi:"dataType"`
	// The name of the output column.
	Name *string `pulumi:"name"`
}

// AzureMachineLearningWebServiceOutputColumnInput is an input type that accepts AzureMachineLearningWebServiceOutputColumnArgs and AzureMachineLearningWebServiceOutputColumnOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceOutputColumnInput` via:
//
//	AzureMachineLearningWebServiceOutputColumnArgs{...}
type AzureMachineLearningWebServiceOutputColumnInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceOutputColumnOutput() AzureMachineLearningWebServiceOutputColumnOutput
	ToAzureMachineLearningWebServiceOutputColumnOutputWithContext(context.Context) AzureMachineLearningWebServiceOutputColumnOutput
}

// Describes an output column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceOutputColumnArgs struct {
	// The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// The name of the output column.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (AzureMachineLearningWebServiceOutputColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceOutputColumn)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceOutputColumnArgs) ToAzureMachineLearningWebServiceOutputColumnOutput() AzureMachineLearningWebServiceOutputColumnOutput {
	return i.ToAzureMachineLearningWebServiceOutputColumnOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceOutputColumnArgs) ToAzureMachineLearningWebServiceOutputColumnOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceOutputColumnOutput)
}

// AzureMachineLearningWebServiceOutputColumnArrayInput is an input type that accepts AzureMachineLearningWebServiceOutputColumnArray and AzureMachineLearningWebServiceOutputColumnArrayOutput values.
// You can construct a concrete instance of `AzureMachineLearningWebServiceOutputColumnArrayInput` via:
//
//	AzureMachineLearningWebServiceOutputColumnArray{ AzureMachineLearningWebServiceOutputColumnArgs{...} }
type AzureMachineLearningWebServiceOutputColumnArrayInput interface {
	pulumi.Input

	ToAzureMachineLearningWebServiceOutputColumnArrayOutput() AzureMachineLearningWebServiceOutputColumnArrayOutput
	ToAzureMachineLearningWebServiceOutputColumnArrayOutputWithContext(context.Context) AzureMachineLearningWebServiceOutputColumnArrayOutput
}

type AzureMachineLearningWebServiceOutputColumnArray []AzureMachineLearningWebServiceOutputColumnInput

func (AzureMachineLearningWebServiceOutputColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceOutputColumn)(nil)).Elem()
}

func (i AzureMachineLearningWebServiceOutputColumnArray) ToAzureMachineLearningWebServiceOutputColumnArrayOutput() AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return i.ToAzureMachineLearningWebServiceOutputColumnArrayOutputWithContext(context.Background())
}

func (i AzureMachineLearningWebServiceOutputColumnArray) ToAzureMachineLearningWebServiceOutputColumnArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMachineLearningWebServiceOutputColumnArrayOutput)
}

// Describes an output column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceOutputColumnOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceOutputColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceOutputColumn)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceOutputColumnOutput) ToAzureMachineLearningWebServiceOutputColumnOutput() AzureMachineLearningWebServiceOutputColumnOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnOutput) ToAzureMachineLearningWebServiceOutputColumnOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnOutput {
	return o
}

// The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
func (o AzureMachineLearningWebServiceOutputColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceOutputColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The name of the output column.
func (o AzureMachineLearningWebServiceOutputColumnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceOutputColumn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceOutputColumnArrayOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceOutputColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceOutputColumn)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceOutputColumnArrayOutput) ToAzureMachineLearningWebServiceOutputColumnArrayOutput() AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnArrayOutput) ToAzureMachineLearningWebServiceOutputColumnArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnArrayOutput) Index(i pulumi.IntInput) AzureMachineLearningWebServiceOutputColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureMachineLearningWebServiceOutputColumn {
		return vs[0].([]AzureMachineLearningWebServiceOutputColumn)[vs[1].(int)]
	}).(AzureMachineLearningWebServiceOutputColumnOutput)
}

// Describes an output column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceOutputColumnResponse struct {
	// The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
	DataType *string `pulumi:"dataType"`
	// The name of the output column.
	Name *string `pulumi:"name"`
}

// Describes an output column for the Azure Machine Learning web service endpoint.
type AzureMachineLearningWebServiceOutputColumnResponseOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceOutputColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMachineLearningWebServiceOutputColumnResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceOutputColumnResponseOutput) ToAzureMachineLearningWebServiceOutputColumnResponseOutput() AzureMachineLearningWebServiceOutputColumnResponseOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnResponseOutput) ToAzureMachineLearningWebServiceOutputColumnResponseOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnResponseOutput {
	return o
}

// The (Azure Machine Learning supported) data type of the output column. A list of valid  Azure Machine Learning data types are described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
func (o AzureMachineLearningWebServiceOutputColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceOutputColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// The name of the output column.
func (o AzureMachineLearningWebServiceOutputColumnResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMachineLearningWebServiceOutputColumnResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type AzureMachineLearningWebServiceOutputColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureMachineLearningWebServiceOutputColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureMachineLearningWebServiceOutputColumnResponse)(nil)).Elem()
}

func (o AzureMachineLearningWebServiceOutputColumnResponseArrayOutput) ToAzureMachineLearningWebServiceOutputColumnResponseArrayOutput() AzureMachineLearningWebServiceOutputColumnResponseArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnResponseArrayOutput) ToAzureMachineLearningWebServiceOutputColumnResponseArrayOutputWithContext(ctx context.Context) AzureMachineLearningWebServiceOutputColumnResponseArrayOutput {
	return o
}

func (o AzureMachineLearningWebServiceOutputColumnResponseArrayOutput) Index(i pulumi.IntInput) AzureMachineLearningWebServiceOutputColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureMachineLearningWebServiceOutputColumnResponse {
		return vs[0].([]AzureMachineLearningWebServiceOutputColumnResponse)[vs[1].(int)]
	}).(AzureMachineLearningWebServiceOutputColumnResponseOutput)
}

// Describes an Azure SQL database output data source.
type AzureSqlDatabaseOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
	MaxWriterCount *float64 `pulumi:"maxWriterCount"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password *string `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server *string `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type string `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User *string `pulumi:"user"`
}

// AzureSqlDatabaseOutputDataSourceInput is an input type that accepts AzureSqlDatabaseOutputDataSourceArgs and AzureSqlDatabaseOutputDataSourceOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseOutputDataSourceInput` via:
//
//	AzureSqlDatabaseOutputDataSourceArgs{...}
type AzureSqlDatabaseOutputDataSourceInput interface {
	pulumi.Input

	ToAzureSqlDatabaseOutputDataSourceOutput() AzureSqlDatabaseOutputDataSourceOutput
	ToAzureSqlDatabaseOutputDataSourceOutputWithContext(context.Context) AzureSqlDatabaseOutputDataSourceOutput
}

// Describes an Azure SQL database output data source.
type AzureSqlDatabaseOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
	MaxBatchCount pulumi.Float64PtrInput `pulumi:"maxBatchCount"`
	// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
	MaxWriterCount pulumi.Float64PtrInput `pulumi:"maxWriterCount"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table pulumi.StringPtrInput `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AzureSqlDatabaseOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseOutputDataSource)(nil)).Elem()
}

func (i AzureSqlDatabaseOutputDataSourceArgs) ToAzureSqlDatabaseOutputDataSourceOutput() AzureSqlDatabaseOutputDataSourceOutput {
	return i.ToAzureSqlDatabaseOutputDataSourceOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseOutputDataSourceArgs) ToAzureSqlDatabaseOutputDataSourceOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseOutputDataSourceOutput)
}

func (i AzureSqlDatabaseOutputDataSourceArgs) ToAzureSqlDatabaseOutputDataSourcePtrOutput() AzureSqlDatabaseOutputDataSourcePtrOutput {
	return i.ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureSqlDatabaseOutputDataSourceArgs) ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseOutputDataSourceOutput).ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(ctx)
}

// AzureSqlDatabaseOutputDataSourcePtrInput is an input type that accepts AzureSqlDatabaseOutputDataSourceArgs, AzureSqlDatabaseOutputDataSourcePtr and AzureSqlDatabaseOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureSqlDatabaseOutputDataSourcePtrInput` via:
//
//	        AzureSqlDatabaseOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureSqlDatabaseOutputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureSqlDatabaseOutputDataSourcePtrOutput() AzureSqlDatabaseOutputDataSourcePtrOutput
	ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(context.Context) AzureSqlDatabaseOutputDataSourcePtrOutput
}

type azureSqlDatabaseOutputDataSourcePtrType AzureSqlDatabaseOutputDataSourceArgs

func AzureSqlDatabaseOutputDataSourcePtr(v *AzureSqlDatabaseOutputDataSourceArgs) AzureSqlDatabaseOutputDataSourcePtrInput {
	return (*azureSqlDatabaseOutputDataSourcePtrType)(v)
}

func (*azureSqlDatabaseOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlDatabaseOutputDataSource)(nil)).Elem()
}

func (i *azureSqlDatabaseOutputDataSourcePtrType) ToAzureSqlDatabaseOutputDataSourcePtrOutput() AzureSqlDatabaseOutputDataSourcePtrOutput {
	return i.ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureSqlDatabaseOutputDataSourcePtrType) ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlDatabaseOutputDataSourcePtrOutput)
}

// Describes an Azure SQL database output data source.
type AzureSqlDatabaseOutputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseOutputDataSource)(nil)).Elem()
}

func (o AzureSqlDatabaseOutputDataSourceOutput) ToAzureSqlDatabaseOutputDataSourceOutput() AzureSqlDatabaseOutputDataSourceOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourceOutput) ToAzureSqlDatabaseOutputDataSourceOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourceOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourceOutput) ToAzureSqlDatabaseOutputDataSourcePtrOutput() AzureSqlDatabaseOutputDataSourcePtrOutput {
	return o.ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureSqlDatabaseOutputDataSourceOutput) ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureSqlDatabaseOutputDataSource) *AzureSqlDatabaseOutputDataSource {
		return &v
	}).(AzureSqlDatabaseOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o AzureSqlDatabaseOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *float64 { return v.MaxBatchCount }).(pulumi.Float64PtrOutput)
}

// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) MaxWriterCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *float64 { return v.MaxWriterCount }).(pulumi.Float64PtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlDatabaseOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlDatabaseOutputDataSource)(nil)).Elem()
}

func (o AzureSqlDatabaseOutputDataSourcePtrOutput) ToAzureSqlDatabaseOutputDataSourcePtrOutput() AzureSqlDatabaseOutputDataSourcePtrOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourcePtrOutput) ToAzureSqlDatabaseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourcePtrOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Elem() AzureSqlDatabaseOutputDataSourceOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) AzureSqlDatabaseOutputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureSqlDatabaseOutputDataSource
		return ret
	}).(AzureSqlDatabaseOutputDataSourceOutput)
}

// Authentication Mode.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchCount
	}).(pulumi.Float64PtrOutput)
}

// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) MaxWriterCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxWriterCount
	}).(pulumi.Float64PtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure SQL database output data source.
type AzureSqlDatabaseOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
	MaxBatchCount *float64 `pulumi:"maxBatchCount"`
	// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
	MaxWriterCount *float64 `pulumi:"maxWriterCount"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password *string `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server *string `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type string `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User *string `pulumi:"user"`
}

// Describes an Azure SQL database output data source.
type AzureSqlDatabaseOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseOutputDataSourceResponseOutput) ToAzureSqlDatabaseOutputDataSourceResponseOutput() AzureSqlDatabaseOutputDataSourceResponseOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourceResponseOutput) ToAzureSqlDatabaseOutputDataSourceResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *float64 { return v.MaxBatchCount }).(pulumi.Float64PtrOutput)
}

// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) MaxWriterCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *float64 { return v.MaxWriterCount }).(pulumi.Float64PtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponseOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseOutputDataSourceResponse) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlDatabaseOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) ToAzureSqlDatabaseOutputDataSourceResponsePtrOutput() AzureSqlDatabaseOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) ToAzureSqlDatabaseOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Elem() AzureSqlDatabaseOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) AzureSqlDatabaseOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureSqlDatabaseOutputDataSourceResponse
		return ret
	}).(AzureSqlDatabaseOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Max Batch count for write to Sql database, the default value is 10,000. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) MaxBatchCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxBatchCount
	}).(pulumi.Float64PtrOutput)
}

// Max Writer count, currently only 1(single writer) and 0(based on query partition) are available. Optional on PUT requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) MaxWriterCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxWriterCount
	}).(pulumi.Float64PtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSqlDatabaseOutputDataSourceResponsePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure SQL database reference input data source.
type AzureSqlReferenceInputDataSource struct {
	// This element is associated with the datasource element. This is the name of the database that output will be written to.
	Database *string `pulumi:"database"`
	// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
	DeltaSnapshotQuery *string `pulumi:"deltaSnapshotQuery"`
	// This element is associated with the datasource element. This query is used to fetch data from the sql database.
	FullSnapshotQuery *string `pulumi:"fullSnapshotQuery"`
	// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
	Password *string `pulumi:"password"`
	// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
	RefreshRate *string `pulumi:"refreshRate"`
	// Indicates the type of data refresh option.
	RefreshType *string `pulumi:"refreshType"`
	// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
	Server *string `pulumi:"server"`
	// This element is associated with the datasource element. The name of the table in the Azure SQL database..
	Table *string `pulumi:"table"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type string `pulumi:"type"`
	// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
	User *string `pulumi:"user"`
}

// AzureSqlReferenceInputDataSourceInput is an input type that accepts AzureSqlReferenceInputDataSourceArgs and AzureSqlReferenceInputDataSourceOutput values.
// You can construct a concrete instance of `AzureSqlReferenceInputDataSourceInput` via:
//
//	AzureSqlReferenceInputDataSourceArgs{...}
type AzureSqlReferenceInputDataSourceInput interface {
	pulumi.Input

	ToAzureSqlReferenceInputDataSourceOutput() AzureSqlReferenceInputDataSourceOutput
	ToAzureSqlReferenceInputDataSourceOutputWithContext(context.Context) AzureSqlReferenceInputDataSourceOutput
}

// Describes an Azure SQL database reference input data source.
type AzureSqlReferenceInputDataSourceArgs struct {
	// This element is associated with the datasource element. This is the name of the database that output will be written to.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
	DeltaSnapshotQuery pulumi.StringPtrInput `pulumi:"deltaSnapshotQuery"`
	// This element is associated with the datasource element. This query is used to fetch data from the sql database.
	FullSnapshotQuery pulumi.StringPtrInput `pulumi:"fullSnapshotQuery"`
	// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
	RefreshRate pulumi.StringPtrInput `pulumi:"refreshRate"`
	// Indicates the type of data refresh option.
	RefreshType pulumi.StringPtrInput `pulumi:"refreshType"`
	// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// This element is associated with the datasource element. The name of the table in the Azure SQL database..
	Table pulumi.StringPtrInput `pulumi:"table"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type pulumi.StringInput `pulumi:"type"`
	// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AzureSqlReferenceInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlReferenceInputDataSource)(nil)).Elem()
}

func (i AzureSqlReferenceInputDataSourceArgs) ToAzureSqlReferenceInputDataSourceOutput() AzureSqlReferenceInputDataSourceOutput {
	return i.ToAzureSqlReferenceInputDataSourceOutputWithContext(context.Background())
}

func (i AzureSqlReferenceInputDataSourceArgs) ToAzureSqlReferenceInputDataSourceOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlReferenceInputDataSourceOutput)
}

func (i AzureSqlReferenceInputDataSourceArgs) ToAzureSqlReferenceInputDataSourcePtrOutput() AzureSqlReferenceInputDataSourcePtrOutput {
	return i.ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureSqlReferenceInputDataSourceArgs) ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlReferenceInputDataSourceOutput).ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(ctx)
}

// AzureSqlReferenceInputDataSourcePtrInput is an input type that accepts AzureSqlReferenceInputDataSourceArgs, AzureSqlReferenceInputDataSourcePtr and AzureSqlReferenceInputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureSqlReferenceInputDataSourcePtrInput` via:
//
//	        AzureSqlReferenceInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureSqlReferenceInputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureSqlReferenceInputDataSourcePtrOutput() AzureSqlReferenceInputDataSourcePtrOutput
	ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(context.Context) AzureSqlReferenceInputDataSourcePtrOutput
}

type azureSqlReferenceInputDataSourcePtrType AzureSqlReferenceInputDataSourceArgs

func AzureSqlReferenceInputDataSourcePtr(v *AzureSqlReferenceInputDataSourceArgs) AzureSqlReferenceInputDataSourcePtrInput {
	return (*azureSqlReferenceInputDataSourcePtrType)(v)
}

func (*azureSqlReferenceInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlReferenceInputDataSource)(nil)).Elem()
}

func (i *azureSqlReferenceInputDataSourcePtrType) ToAzureSqlReferenceInputDataSourcePtrOutput() AzureSqlReferenceInputDataSourcePtrOutput {
	return i.ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureSqlReferenceInputDataSourcePtrType) ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSqlReferenceInputDataSourcePtrOutput)
}

// Describes an Azure SQL database reference input data source.
type AzureSqlReferenceInputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureSqlReferenceInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlReferenceInputDataSource)(nil)).Elem()
}

func (o AzureSqlReferenceInputDataSourceOutput) ToAzureSqlReferenceInputDataSourceOutput() AzureSqlReferenceInputDataSourceOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourceOutput) ToAzureSqlReferenceInputDataSourceOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourceOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourceOutput) ToAzureSqlReferenceInputDataSourcePtrOutput() AzureSqlReferenceInputDataSourcePtrOutput {
	return o.ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureSqlReferenceInputDataSourceOutput) ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureSqlReferenceInputDataSource) *AzureSqlReferenceInputDataSource {
		return &v
	}).(AzureSqlReferenceInputDataSourcePtrOutput)
}

// This element is associated with the datasource element. This is the name of the database that output will be written to.
func (o AzureSqlReferenceInputDataSourceOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
func (o AzureSqlReferenceInputDataSourceOutput) DeltaSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.DeltaSnapshotQuery }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch data from the sql database.
func (o AzureSqlReferenceInputDataSourceOutput) FullSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.FullSnapshotQuery }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
func (o AzureSqlReferenceInputDataSourceOutput) RefreshRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.RefreshRate }).(pulumi.StringPtrOutput)
}

// Indicates the type of data refresh option.
func (o AzureSqlReferenceInputDataSourceOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.RefreshType }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
func (o AzureSqlReferenceInputDataSourceOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. The name of the table in the Azure SQL database..
func (o AzureSqlReferenceInputDataSourceOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlReferenceInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSqlReferenceInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlReferenceInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlReferenceInputDataSource)(nil)).Elem()
}

func (o AzureSqlReferenceInputDataSourcePtrOutput) ToAzureSqlReferenceInputDataSourcePtrOutput() AzureSqlReferenceInputDataSourcePtrOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourcePtrOutput) ToAzureSqlReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourcePtrOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourcePtrOutput) Elem() AzureSqlReferenceInputDataSourceOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) AzureSqlReferenceInputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureSqlReferenceInputDataSource
		return ret
	}).(AzureSqlReferenceInputDataSourceOutput)
}

// This element is associated with the datasource element. This is the name of the database that output will be written to.
func (o AzureSqlReferenceInputDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
func (o AzureSqlReferenceInputDataSourcePtrOutput) DeltaSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DeltaSnapshotQuery
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch data from the sql database.
func (o AzureSqlReferenceInputDataSourcePtrOutput) FullSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.FullSnapshotQuery
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourcePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
func (o AzureSqlReferenceInputDataSourcePtrOutput) RefreshRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.RefreshRate
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data refresh option.
func (o AzureSqlReferenceInputDataSourcePtrOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.RefreshType
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
func (o AzureSqlReferenceInputDataSourcePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. The name of the table in the Azure SQL database..
func (o AzureSqlReferenceInputDataSourcePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlReferenceInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure SQL database reference input data source.
type AzureSqlReferenceInputDataSourceResponse struct {
	// This element is associated with the datasource element. This is the name of the database that output will be written to.
	Database *string `pulumi:"database"`
	// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
	DeltaSnapshotQuery *string `pulumi:"deltaSnapshotQuery"`
	// This element is associated with the datasource element. This query is used to fetch data from the sql database.
	FullSnapshotQuery *string `pulumi:"fullSnapshotQuery"`
	// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
	Password *string `pulumi:"password"`
	// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
	RefreshRate *string `pulumi:"refreshRate"`
	// Indicates the type of data refresh option.
	RefreshType *string `pulumi:"refreshType"`
	// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
	Server *string `pulumi:"server"`
	// This element is associated with the datasource element. The name of the table in the Azure SQL database..
	Table *string `pulumi:"table"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/Database'.
	Type string `pulumi:"type"`
	// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
	User *string `pulumi:"user"`
}

// Describes an Azure SQL database reference input data source.
type AzureSqlReferenceInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlReferenceInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o AzureSqlReferenceInputDataSourceResponseOutput) ToAzureSqlReferenceInputDataSourceResponseOutput() AzureSqlReferenceInputDataSourceResponseOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourceResponseOutput) ToAzureSqlReferenceInputDataSourceResponseOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourceResponseOutput {
	return o
}

// This element is associated with the datasource element. This is the name of the database that output will be written to.
func (o AzureSqlReferenceInputDataSourceResponseOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
func (o AzureSqlReferenceInputDataSourceResponseOutput) DeltaSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.DeltaSnapshotQuery }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch data from the sql database.
func (o AzureSqlReferenceInputDataSourceResponseOutput) FullSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.FullSnapshotQuery }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
func (o AzureSqlReferenceInputDataSourceResponseOutput) RefreshRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.RefreshRate }).(pulumi.StringPtrOutput)
}

// Indicates the type of data refresh option.
func (o AzureSqlReferenceInputDataSourceResponseOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.RefreshType }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
func (o AzureSqlReferenceInputDataSourceResponseOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. The name of the table in the Azure SQL database..
func (o AzureSqlReferenceInputDataSourceResponseOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlReferenceInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceResponseOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlReferenceInputDataSourceResponse) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSqlReferenceInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlReferenceInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) ToAzureSqlReferenceInputDataSourceResponsePtrOutput() AzureSqlReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) ToAzureSqlReferenceInputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureSqlReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Elem() AzureSqlReferenceInputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) AzureSqlReferenceInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureSqlReferenceInputDataSourceResponse
		return ret
	}).(AzureSqlReferenceInputDataSourceResponseOutput)
}

// This element is associated with the datasource element. This is the name of the database that output will be written to.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch incremental changes from the SQL database. To use this option, we recommend using temporal tables in Azure SQL Database.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) DeltaSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeltaSnapshotQuery
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This query is used to fetch data from the sql database.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) FullSnapshotQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.FullSnapshotQuery
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the password that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This indicates how frequently the data will be fetched from the database. It is of DateTime format.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) RefreshRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshRate
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data refresh option.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) RefreshType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshType
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the name of the server that contains the database that will be written to.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. The name of the table in the Azure SQL database..
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/Database'.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// This element is associated with the datasource element. This is the user name that will be used to connect to the SQL Database instance.
func (o AzureSqlReferenceInputDataSourceResponsePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Synapse output data source.
type AzureSynapseOutputDataSource struct {
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password *string `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server *string `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
	Type string `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User *string `pulumi:"user"`
}

// AzureSynapseOutputDataSourceInput is an input type that accepts AzureSynapseOutputDataSourceArgs and AzureSynapseOutputDataSourceOutput values.
// You can construct a concrete instance of `AzureSynapseOutputDataSourceInput` via:
//
//	AzureSynapseOutputDataSourceArgs{...}
type AzureSynapseOutputDataSourceInput interface {
	pulumi.Input

	ToAzureSynapseOutputDataSourceOutput() AzureSynapseOutputDataSourceOutput
	ToAzureSynapseOutputDataSourceOutputWithContext(context.Context) AzureSynapseOutputDataSourceOutput
}

// Describes an Azure Synapse output data source.
type AzureSynapseOutputDataSourceArgs struct {
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table pulumi.StringPtrInput `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
	Type pulumi.StringInput `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (AzureSynapseOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseOutputDataSource)(nil)).Elem()
}

func (i AzureSynapseOutputDataSourceArgs) ToAzureSynapseOutputDataSourceOutput() AzureSynapseOutputDataSourceOutput {
	return i.ToAzureSynapseOutputDataSourceOutputWithContext(context.Background())
}

func (i AzureSynapseOutputDataSourceArgs) ToAzureSynapseOutputDataSourceOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSynapseOutputDataSourceOutput)
}

func (i AzureSynapseOutputDataSourceArgs) ToAzureSynapseOutputDataSourcePtrOutput() AzureSynapseOutputDataSourcePtrOutput {
	return i.ToAzureSynapseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureSynapseOutputDataSourceArgs) ToAzureSynapseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSynapseOutputDataSourceOutput).ToAzureSynapseOutputDataSourcePtrOutputWithContext(ctx)
}

// AzureSynapseOutputDataSourcePtrInput is an input type that accepts AzureSynapseOutputDataSourceArgs, AzureSynapseOutputDataSourcePtr and AzureSynapseOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureSynapseOutputDataSourcePtrInput` via:
//
//	        AzureSynapseOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureSynapseOutputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureSynapseOutputDataSourcePtrOutput() AzureSynapseOutputDataSourcePtrOutput
	ToAzureSynapseOutputDataSourcePtrOutputWithContext(context.Context) AzureSynapseOutputDataSourcePtrOutput
}

type azureSynapseOutputDataSourcePtrType AzureSynapseOutputDataSourceArgs

func AzureSynapseOutputDataSourcePtr(v *AzureSynapseOutputDataSourceArgs) AzureSynapseOutputDataSourcePtrInput {
	return (*azureSynapseOutputDataSourcePtrType)(v)
}

func (*azureSynapseOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSynapseOutputDataSource)(nil)).Elem()
}

func (i *azureSynapseOutputDataSourcePtrType) ToAzureSynapseOutputDataSourcePtrOutput() AzureSynapseOutputDataSourcePtrOutput {
	return i.ToAzureSynapseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureSynapseOutputDataSourcePtrType) ToAzureSynapseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureSynapseOutputDataSourcePtrOutput)
}

// Describes an Azure Synapse output data source.
type AzureSynapseOutputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureSynapseOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseOutputDataSource)(nil)).Elem()
}

func (o AzureSynapseOutputDataSourceOutput) ToAzureSynapseOutputDataSourceOutput() AzureSynapseOutputDataSourceOutput {
	return o
}

func (o AzureSynapseOutputDataSourceOutput) ToAzureSynapseOutputDataSourceOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourceOutput {
	return o
}

func (o AzureSynapseOutputDataSourceOutput) ToAzureSynapseOutputDataSourcePtrOutput() AzureSynapseOutputDataSourcePtrOutput {
	return o.ToAzureSynapseOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureSynapseOutputDataSourceOutput) ToAzureSynapseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureSynapseOutputDataSource) *AzureSynapseOutputDataSource {
		return &v
	}).(AzureSynapseOutputDataSourcePtrOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
func (o AzureSynapseOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSource) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSynapseOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureSynapseOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSynapseOutputDataSource)(nil)).Elem()
}

func (o AzureSynapseOutputDataSourcePtrOutput) ToAzureSynapseOutputDataSourcePtrOutput() AzureSynapseOutputDataSourcePtrOutput {
	return o
}

func (o AzureSynapseOutputDataSourcePtrOutput) ToAzureSynapseOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourcePtrOutput {
	return o
}

func (o AzureSynapseOutputDataSourcePtrOutput) Elem() AzureSynapseOutputDataSourceOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) AzureSynapseOutputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureSynapseOutputDataSource
		return ret
	}).(AzureSynapseOutputDataSourceOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourcePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourcePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourcePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
func (o AzureSynapseOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourcePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Synapse output data source.
type AzureSynapseOutputDataSourceResponse struct {
	// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Password *string `pulumi:"password"`
	// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Server *string `pulumi:"server"`
	// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
	Type string `pulumi:"type"`
	// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
	User *string `pulumi:"user"`
}

// Describes an Azure Synapse output data source.
type AzureSynapseOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureSynapseOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSynapseOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureSynapseOutputDataSourceResponseOutput) ToAzureSynapseOutputDataSourceResponseOutput() AzureSynapseOutputDataSourceResponseOutput {
	return o
}

func (o AzureSynapseOutputDataSourceResponseOutput) ToAzureSynapseOutputDataSourceResponseOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourceResponseOutput {
	return o
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponseOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponseOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponseOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
func (o AzureSynapseOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponseOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSynapseOutputDataSourceResponse) *string { return v.User }).(pulumi.StringPtrOutput)
}

type AzureSynapseOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureSynapseOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSynapseOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureSynapseOutputDataSourceResponsePtrOutput) ToAzureSynapseOutputDataSourceResponsePtrOutput() AzureSynapseOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSynapseOutputDataSourceResponsePtrOutput) ToAzureSynapseOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureSynapseOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureSynapseOutputDataSourceResponsePtrOutput) Elem() AzureSynapseOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) AzureSynapseOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureSynapseOutputDataSourceResponse
		return ret
	}).(AzureSynapseOutputDataSourceResponseOutput)
}

// The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The password that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The name of the SQL server containing the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Sql/Server/DataWarehouse'.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The user name that will be used to connect to the Azure SQL database. Required on PUT (CreateOrReplace) requests.
func (o AzureSynapseOutputDataSourceResponsePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSynapseOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Table output data source.
type AzureTableOutputDataSource struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// The number of rows to write to the Azure Table at a time.
	BatchSize *int `pulumi:"batchSize"`
	// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
	ColumnsToRemove []string `pulumi:"columnsToRemove"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	PartitionKey *string `pulumi:"partitionKey"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	RowKey *string `pulumi:"rowKey"`
	// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Table'.
	Type string `pulumi:"type"`
}

// AzureTableOutputDataSourceInput is an input type that accepts AzureTableOutputDataSourceArgs and AzureTableOutputDataSourceOutput values.
// You can construct a concrete instance of `AzureTableOutputDataSourceInput` via:
//
//	AzureTableOutputDataSourceArgs{...}
type AzureTableOutputDataSourceInput interface {
	pulumi.Input

	ToAzureTableOutputDataSourceOutput() AzureTableOutputDataSourceOutput
	ToAzureTableOutputDataSourceOutputWithContext(context.Context) AzureTableOutputDataSourceOutput
}

// Describes an Azure Table output data source.
type AzureTableOutputDataSourceArgs struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The number of rows to write to the Azure Table at a time.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
	ColumnsToRemove pulumi.StringArrayInput `pulumi:"columnsToRemove"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	RowKey pulumi.StringPtrInput `pulumi:"rowKey"`
	// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
	Table pulumi.StringPtrInput `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Table'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureTableOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableOutputDataSource)(nil)).Elem()
}

func (i AzureTableOutputDataSourceArgs) ToAzureTableOutputDataSourceOutput() AzureTableOutputDataSourceOutput {
	return i.ToAzureTableOutputDataSourceOutputWithContext(context.Background())
}

func (i AzureTableOutputDataSourceArgs) ToAzureTableOutputDataSourceOutputWithContext(ctx context.Context) AzureTableOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableOutputDataSourceOutput)
}

func (i AzureTableOutputDataSourceArgs) ToAzureTableOutputDataSourcePtrOutput() AzureTableOutputDataSourcePtrOutput {
	return i.ToAzureTableOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i AzureTableOutputDataSourceArgs) ToAzureTableOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureTableOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableOutputDataSourceOutput).ToAzureTableOutputDataSourcePtrOutputWithContext(ctx)
}

// AzureTableOutputDataSourcePtrInput is an input type that accepts AzureTableOutputDataSourceArgs, AzureTableOutputDataSourcePtr and AzureTableOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `AzureTableOutputDataSourcePtrInput` via:
//
//	        AzureTableOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type AzureTableOutputDataSourcePtrInput interface {
	pulumi.Input

	ToAzureTableOutputDataSourcePtrOutput() AzureTableOutputDataSourcePtrOutput
	ToAzureTableOutputDataSourcePtrOutputWithContext(context.Context) AzureTableOutputDataSourcePtrOutput
}

type azureTableOutputDataSourcePtrType AzureTableOutputDataSourceArgs

func AzureTableOutputDataSourcePtr(v *AzureTableOutputDataSourceArgs) AzureTableOutputDataSourcePtrInput {
	return (*azureTableOutputDataSourcePtrType)(v)
}

func (*azureTableOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTableOutputDataSource)(nil)).Elem()
}

func (i *azureTableOutputDataSourcePtrType) ToAzureTableOutputDataSourcePtrOutput() AzureTableOutputDataSourcePtrOutput {
	return i.ToAzureTableOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *azureTableOutputDataSourcePtrType) ToAzureTableOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureTableOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureTableOutputDataSourcePtrOutput)
}

// Describes an Azure Table output data source.
type AzureTableOutputDataSourceOutput struct{ *pulumi.OutputState }

func (AzureTableOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableOutputDataSource)(nil)).Elem()
}

func (o AzureTableOutputDataSourceOutput) ToAzureTableOutputDataSourceOutput() AzureTableOutputDataSourceOutput {
	return o
}

func (o AzureTableOutputDataSourceOutput) ToAzureTableOutputDataSourceOutputWithContext(ctx context.Context) AzureTableOutputDataSourceOutput {
	return o
}

func (o AzureTableOutputDataSourceOutput) ToAzureTableOutputDataSourcePtrOutput() AzureTableOutputDataSourcePtrOutput {
	return o.ToAzureTableOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o AzureTableOutputDataSourceOutput) ToAzureTableOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureTableOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureTableOutputDataSource) *AzureTableOutputDataSource {
		return &v
	}).(AzureTableOutputDataSourcePtrOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The number of rows to write to the Azure Table at a time.
func (o AzureTableOutputDataSourceOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
func (o AzureTableOutputDataSourceOutput) ColumnsToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) []string { return v.ColumnsToRemove }).(pulumi.StringArrayOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceOutput) RowKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *string { return v.RowKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Table'.
func (o AzureTableOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type AzureTableOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AzureTableOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTableOutputDataSource)(nil)).Elem()
}

func (o AzureTableOutputDataSourcePtrOutput) ToAzureTableOutputDataSourcePtrOutput() AzureTableOutputDataSourcePtrOutput {
	return o
}

func (o AzureTableOutputDataSourcePtrOutput) ToAzureTableOutputDataSourcePtrOutputWithContext(ctx context.Context) AzureTableOutputDataSourcePtrOutput {
	return o
}

func (o AzureTableOutputDataSourcePtrOutput) Elem() AzureTableOutputDataSourceOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) AzureTableOutputDataSource {
		if v != nil {
			return *v
		}
		var ret AzureTableOutputDataSource
		return ret
	}).(AzureTableOutputDataSourceOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourcePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourcePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// The number of rows to write to the Azure Table at a time.
func (o AzureTableOutputDataSourcePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
func (o AzureTableOutputDataSourcePtrOutput) ColumnsToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) []string {
		if v == nil {
			return nil
		}
		return v.ColumnsToRemove
	}).(pulumi.StringArrayOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourcePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourcePtrOutput) RowKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.RowKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourcePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Table'.
func (o AzureTableOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Azure Table output data source.
type AzureTableOutputDataSourceResponse struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// The number of rows to write to the Azure Table at a time.
	BatchSize *int `pulumi:"batchSize"`
	// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
	ColumnsToRemove []string `pulumi:"columnsToRemove"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	PartitionKey *string `pulumi:"partitionKey"`
	// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
	RowKey *string `pulumi:"rowKey"`
	// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Table'.
	Type string `pulumi:"type"`
}

// Describes an Azure Table output data source.
type AzureTableOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (AzureTableOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureTableOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureTableOutputDataSourceResponseOutput) ToAzureTableOutputDataSourceResponseOutput() AzureTableOutputDataSourceResponseOutput {
	return o
}

func (o AzureTableOutputDataSourceResponseOutput) ToAzureTableOutputDataSourceResponseOutputWithContext(ctx context.Context) AzureTableOutputDataSourceResponseOutput {
	return o
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The number of rows to write to the Azure Table at a time.
func (o AzureTableOutputDataSourceResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
func (o AzureTableOutputDataSourceResponseOutput) ColumnsToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) []string { return v.ColumnsToRemove }).(pulumi.StringArrayOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponseOutput) RowKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *string { return v.RowKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponseOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Table'.
func (o AzureTableOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureTableOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureTableOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureTableOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureTableOutputDataSourceResponse)(nil)).Elem()
}

func (o AzureTableOutputDataSourceResponsePtrOutput) ToAzureTableOutputDataSourceResponsePtrOutput() AzureTableOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureTableOutputDataSourceResponsePtrOutput) ToAzureTableOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) AzureTableOutputDataSourceResponsePtrOutput {
	return o
}

func (o AzureTableOutputDataSourceResponsePtrOutput) Elem() AzureTableOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) AzureTableOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret AzureTableOutputDataSourceResponse
		return ret
	}).(AzureTableOutputDataSourceResponseOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// The number of rows to write to the Azure Table at a time.
func (o AzureTableOutputDataSourceResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// If specified, each item in the array is the name of a column to remove (if present) from output event entities.
func (o AzureTableOutputDataSourceResponsePtrOutput) ColumnsToRemove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.ColumnsToRemove
	}).(pulumi.StringArrayOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the partition key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// This element indicates the name of a column from the SELECT statement in the query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponsePtrOutput) RowKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RowKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
func (o AzureTableOutputDataSourceResponsePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Table'.
func (o AzureTableOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureTableOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob output data source.
type BlobOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// Blob path prefix.
	BlobPathPrefix *string `pulumi:"blobPathPrefix"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccount `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// BlobOutputDataSourceInput is an input type that accepts BlobOutputDataSourceArgs and BlobOutputDataSourceOutput values.
// You can construct a concrete instance of `BlobOutputDataSourceInput` via:
//
//	BlobOutputDataSourceArgs{...}
type BlobOutputDataSourceInput interface {
	pulumi.Input

	ToBlobOutputDataSourceOutput() BlobOutputDataSourceOutput
	ToBlobOutputDataSourceOutputWithContext(context.Context) BlobOutputDataSourceOutput
}

// Describes a blob output data source.
type BlobOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// Blob path prefix.
	BlobPathPrefix pulumi.StringPtrInput `pulumi:"blobPathPrefix"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern pulumi.StringPtrInput `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts StorageAccountArrayInput `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobOutputDataSource)(nil)).Elem()
}

func (i BlobOutputDataSourceArgs) ToBlobOutputDataSourceOutput() BlobOutputDataSourceOutput {
	return i.ToBlobOutputDataSourceOutputWithContext(context.Background())
}

func (i BlobOutputDataSourceArgs) ToBlobOutputDataSourceOutputWithContext(ctx context.Context) BlobOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobOutputDataSourceOutput)
}

func (i BlobOutputDataSourceArgs) ToBlobOutputDataSourcePtrOutput() BlobOutputDataSourcePtrOutput {
	return i.ToBlobOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i BlobOutputDataSourceArgs) ToBlobOutputDataSourcePtrOutputWithContext(ctx context.Context) BlobOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobOutputDataSourceOutput).ToBlobOutputDataSourcePtrOutputWithContext(ctx)
}

// BlobOutputDataSourcePtrInput is an input type that accepts BlobOutputDataSourceArgs, BlobOutputDataSourcePtr and BlobOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `BlobOutputDataSourcePtrInput` via:
//
//	        BlobOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type BlobOutputDataSourcePtrInput interface {
	pulumi.Input

	ToBlobOutputDataSourcePtrOutput() BlobOutputDataSourcePtrOutput
	ToBlobOutputDataSourcePtrOutputWithContext(context.Context) BlobOutputDataSourcePtrOutput
}

type blobOutputDataSourcePtrType BlobOutputDataSourceArgs

func BlobOutputDataSourcePtr(v *BlobOutputDataSourceArgs) BlobOutputDataSourcePtrInput {
	return (*blobOutputDataSourcePtrType)(v)
}

func (*blobOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobOutputDataSource)(nil)).Elem()
}

func (i *blobOutputDataSourcePtrType) ToBlobOutputDataSourcePtrOutput() BlobOutputDataSourcePtrOutput {
	return i.ToBlobOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *blobOutputDataSourcePtrType) ToBlobOutputDataSourcePtrOutputWithContext(ctx context.Context) BlobOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobOutputDataSourcePtrOutput)
}

// Describes a blob output data source.
type BlobOutputDataSourceOutput struct{ *pulumi.OutputState }

func (BlobOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobOutputDataSource)(nil)).Elem()
}

func (o BlobOutputDataSourceOutput) ToBlobOutputDataSourceOutput() BlobOutputDataSourceOutput {
	return o
}

func (o BlobOutputDataSourceOutput) ToBlobOutputDataSourceOutputWithContext(ctx context.Context) BlobOutputDataSourceOutput {
	return o
}

func (o BlobOutputDataSourceOutput) ToBlobOutputDataSourcePtrOutput() BlobOutputDataSourcePtrOutput {
	return o.ToBlobOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o BlobOutputDataSourceOutput) ToBlobOutputDataSourcePtrOutputWithContext(ctx context.Context) BlobOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobOutputDataSource) *BlobOutputDataSource {
		return &v
	}).(BlobOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o BlobOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// Blob path prefix.
func (o BlobOutputDataSourceOutput) BlobPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.BlobPathPrefix }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobOutputDataSourceOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobOutputDataSourceOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v BlobOutputDataSource) []StorageAccount { return v.StorageAccounts }).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobOutputDataSourceOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSource) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type BlobOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (BlobOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobOutputDataSource)(nil)).Elem()
}

func (o BlobOutputDataSourcePtrOutput) ToBlobOutputDataSourcePtrOutput() BlobOutputDataSourcePtrOutput {
	return o
}

func (o BlobOutputDataSourcePtrOutput) ToBlobOutputDataSourcePtrOutputWithContext(ctx context.Context) BlobOutputDataSourcePtrOutput {
	return o
}

func (o BlobOutputDataSourcePtrOutput) Elem() BlobOutputDataSourceOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) BlobOutputDataSource {
		if v != nil {
			return *v
		}
		var ret BlobOutputDataSource
		return ret
	}).(BlobOutputDataSourceOutput)
}

// Authentication Mode.
func (o BlobOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Blob path prefix.
func (o BlobOutputDataSourcePtrOutput) BlobPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.BlobPathPrefix
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourcePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobOutputDataSourcePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobOutputDataSourcePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourcePtrOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) []StorageAccount {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobOutputDataSourcePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob output data source.
type BlobOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// Blob path prefix.
	BlobPathPrefix *string `pulumi:"blobPathPrefix"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccountResponse `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// Describes a blob output data source.
type BlobOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (BlobOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobOutputDataSourceResponse)(nil)).Elem()
}

func (o BlobOutputDataSourceResponseOutput) ToBlobOutputDataSourceResponseOutput() BlobOutputDataSourceResponseOutput {
	return o
}

func (o BlobOutputDataSourceResponseOutput) ToBlobOutputDataSourceResponseOutputWithContext(ctx context.Context) BlobOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o BlobOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// Blob path prefix.
func (o BlobOutputDataSourceResponseOutput) BlobPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.BlobPathPrefix }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceResponseOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobOutputDataSourceResponseOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobOutputDataSourceResponseOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceResponseOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) []StorageAccountResponse { return v.StorageAccounts }).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobOutputDataSourceResponseOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BlobOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobOutputDataSourceResponse)(nil)).Elem()
}

func (o BlobOutputDataSourceResponsePtrOutput) ToBlobOutputDataSourceResponsePtrOutput() BlobOutputDataSourceResponsePtrOutput {
	return o
}

func (o BlobOutputDataSourceResponsePtrOutput) ToBlobOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) BlobOutputDataSourceResponsePtrOutput {
	return o
}

func (o BlobOutputDataSourceResponsePtrOutput) Elem() BlobOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) BlobOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret BlobOutputDataSourceResponse
		return ret
	}).(BlobOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o BlobOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Blob path prefix.
func (o BlobOutputDataSourceResponsePtrOutput) BlobPathPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.BlobPathPrefix
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobOutputDataSourceResponsePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobOutputDataSourceResponsePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobOutputDataSourceResponsePtrOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) []StorageAccountResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobOutputDataSourceResponsePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains reference data.
type BlobReferenceInputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccount `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// BlobReferenceInputDataSourceInput is an input type that accepts BlobReferenceInputDataSourceArgs and BlobReferenceInputDataSourceOutput values.
// You can construct a concrete instance of `BlobReferenceInputDataSourceInput` via:
//
//	BlobReferenceInputDataSourceArgs{...}
type BlobReferenceInputDataSourceInput interface {
	pulumi.Input

	ToBlobReferenceInputDataSourceOutput() BlobReferenceInputDataSourceOutput
	ToBlobReferenceInputDataSourceOutputWithContext(context.Context) BlobReferenceInputDataSourceOutput
}

// Describes a blob input data source that contains reference data.
type BlobReferenceInputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern pulumi.StringPtrInput `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts StorageAccountArrayInput `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobReferenceInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobReferenceInputDataSource)(nil)).Elem()
}

func (i BlobReferenceInputDataSourceArgs) ToBlobReferenceInputDataSourceOutput() BlobReferenceInputDataSourceOutput {
	return i.ToBlobReferenceInputDataSourceOutputWithContext(context.Background())
}

func (i BlobReferenceInputDataSourceArgs) ToBlobReferenceInputDataSourceOutputWithContext(ctx context.Context) BlobReferenceInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobReferenceInputDataSourceOutput)
}

func (i BlobReferenceInputDataSourceArgs) ToBlobReferenceInputDataSourcePtrOutput() BlobReferenceInputDataSourcePtrOutput {
	return i.ToBlobReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i BlobReferenceInputDataSourceArgs) ToBlobReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) BlobReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobReferenceInputDataSourceOutput).ToBlobReferenceInputDataSourcePtrOutputWithContext(ctx)
}

// BlobReferenceInputDataSourcePtrInput is an input type that accepts BlobReferenceInputDataSourceArgs, BlobReferenceInputDataSourcePtr and BlobReferenceInputDataSourcePtrOutput values.
// You can construct a concrete instance of `BlobReferenceInputDataSourcePtrInput` via:
//
//	        BlobReferenceInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type BlobReferenceInputDataSourcePtrInput interface {
	pulumi.Input

	ToBlobReferenceInputDataSourcePtrOutput() BlobReferenceInputDataSourcePtrOutput
	ToBlobReferenceInputDataSourcePtrOutputWithContext(context.Context) BlobReferenceInputDataSourcePtrOutput
}

type blobReferenceInputDataSourcePtrType BlobReferenceInputDataSourceArgs

func BlobReferenceInputDataSourcePtr(v *BlobReferenceInputDataSourceArgs) BlobReferenceInputDataSourcePtrInput {
	return (*blobReferenceInputDataSourcePtrType)(v)
}

func (*blobReferenceInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobReferenceInputDataSource)(nil)).Elem()
}

func (i *blobReferenceInputDataSourcePtrType) ToBlobReferenceInputDataSourcePtrOutput() BlobReferenceInputDataSourcePtrOutput {
	return i.ToBlobReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *blobReferenceInputDataSourcePtrType) ToBlobReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) BlobReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobReferenceInputDataSourcePtrOutput)
}

// Describes a blob input data source that contains reference data.
type BlobReferenceInputDataSourceOutput struct{ *pulumi.OutputState }

func (BlobReferenceInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobReferenceInputDataSource)(nil)).Elem()
}

func (o BlobReferenceInputDataSourceOutput) ToBlobReferenceInputDataSourceOutput() BlobReferenceInputDataSourceOutput {
	return o
}

func (o BlobReferenceInputDataSourceOutput) ToBlobReferenceInputDataSourceOutputWithContext(ctx context.Context) BlobReferenceInputDataSourceOutput {
	return o
}

func (o BlobReferenceInputDataSourceOutput) ToBlobReferenceInputDataSourcePtrOutput() BlobReferenceInputDataSourcePtrOutput {
	return o.ToBlobReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (o BlobReferenceInputDataSourceOutput) ToBlobReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) BlobReferenceInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobReferenceInputDataSource) *BlobReferenceInputDataSource {
		return &v
	}).(BlobReferenceInputDataSourcePtrOutput)
}

// Authentication Mode.
func (o BlobReferenceInputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobReferenceInputDataSourceOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobReferenceInputDataSourceOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) []StorageAccount { return v.StorageAccounts }).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobReferenceInputDataSourceOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobReferenceInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type BlobReferenceInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (BlobReferenceInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobReferenceInputDataSource)(nil)).Elem()
}

func (o BlobReferenceInputDataSourcePtrOutput) ToBlobReferenceInputDataSourcePtrOutput() BlobReferenceInputDataSourcePtrOutput {
	return o
}

func (o BlobReferenceInputDataSourcePtrOutput) ToBlobReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) BlobReferenceInputDataSourcePtrOutput {
	return o
}

func (o BlobReferenceInputDataSourcePtrOutput) Elem() BlobReferenceInputDataSourceOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) BlobReferenceInputDataSource {
		if v != nil {
			return *v
		}
		var ret BlobReferenceInputDataSource
		return ret
	}).(BlobReferenceInputDataSourceOutput)
}

// Authentication Mode.
func (o BlobReferenceInputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourcePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobReferenceInputDataSourcePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobReferenceInputDataSourcePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourcePtrOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) []StorageAccount {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobReferenceInputDataSourcePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobReferenceInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains reference data.
type BlobReferenceInputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccountResponse `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// Describes a blob input data source that contains reference data.
type BlobReferenceInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (BlobReferenceInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o BlobReferenceInputDataSourceResponseOutput) ToBlobReferenceInputDataSourceResponseOutput() BlobReferenceInputDataSourceResponseOutput {
	return o
}

func (o BlobReferenceInputDataSourceResponseOutput) ToBlobReferenceInputDataSourceResponseOutputWithContext(ctx context.Context) BlobReferenceInputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o BlobReferenceInputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceResponseOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobReferenceInputDataSourceResponseOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobReferenceInputDataSourceResponseOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceResponseOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) []StorageAccountResponse { return v.StorageAccounts }).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobReferenceInputDataSourceResponseOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobReferenceInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobReferenceInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BlobReferenceInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobReferenceInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o BlobReferenceInputDataSourceResponsePtrOutput) ToBlobReferenceInputDataSourceResponsePtrOutput() BlobReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o BlobReferenceInputDataSourceResponsePtrOutput) ToBlobReferenceInputDataSourceResponsePtrOutputWithContext(ctx context.Context) BlobReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o BlobReferenceInputDataSourceResponsePtrOutput) Elem() BlobReferenceInputDataSourceResponseOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) BlobReferenceInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret BlobReferenceInputDataSourceResponse
		return ret
	}).(BlobReferenceInputDataSourceResponseOutput)
}

// Authentication Mode.
func (o BlobReferenceInputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobReferenceInputDataSourceResponsePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobReferenceInputDataSourceResponsePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobReferenceInputDataSourceResponsePtrOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) []StorageAccountResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobReferenceInputDataSourceResponsePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobReferenceInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains stream data.
type BlobStreamInputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// The partition count of the blob input data source. Range 1 - 1024.
	SourcePartitionCount *int `pulumi:"sourcePartitionCount"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccount `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// BlobStreamInputDataSourceInput is an input type that accepts BlobStreamInputDataSourceArgs and BlobStreamInputDataSourceOutput values.
// You can construct a concrete instance of `BlobStreamInputDataSourceInput` via:
//
//	BlobStreamInputDataSourceArgs{...}
type BlobStreamInputDataSourceInput interface {
	pulumi.Input

	ToBlobStreamInputDataSourceOutput() BlobStreamInputDataSourceOutput
	ToBlobStreamInputDataSourceOutputWithContext(context.Context) BlobStreamInputDataSourceOutput
}

// Describes a blob input data source that contains stream data.
type BlobStreamInputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container pulumi.StringPtrInput `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat pulumi.StringPtrInput `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern pulumi.StringPtrInput `pulumi:"pathPattern"`
	// The partition count of the blob input data source. Range 1 - 1024.
	SourcePartitionCount pulumi.IntPtrInput `pulumi:"sourcePartitionCount"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts StorageAccountArrayInput `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat pulumi.StringPtrInput `pulumi:"timeFormat"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (BlobStreamInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStreamInputDataSource)(nil)).Elem()
}

func (i BlobStreamInputDataSourceArgs) ToBlobStreamInputDataSourceOutput() BlobStreamInputDataSourceOutput {
	return i.ToBlobStreamInputDataSourceOutputWithContext(context.Background())
}

func (i BlobStreamInputDataSourceArgs) ToBlobStreamInputDataSourceOutputWithContext(ctx context.Context) BlobStreamInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStreamInputDataSourceOutput)
}

func (i BlobStreamInputDataSourceArgs) ToBlobStreamInputDataSourcePtrOutput() BlobStreamInputDataSourcePtrOutput {
	return i.ToBlobStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i BlobStreamInputDataSourceArgs) ToBlobStreamInputDataSourcePtrOutputWithContext(ctx context.Context) BlobStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStreamInputDataSourceOutput).ToBlobStreamInputDataSourcePtrOutputWithContext(ctx)
}

// BlobStreamInputDataSourcePtrInput is an input type that accepts BlobStreamInputDataSourceArgs, BlobStreamInputDataSourcePtr and BlobStreamInputDataSourcePtrOutput values.
// You can construct a concrete instance of `BlobStreamInputDataSourcePtrInput` via:
//
//	        BlobStreamInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type BlobStreamInputDataSourcePtrInput interface {
	pulumi.Input

	ToBlobStreamInputDataSourcePtrOutput() BlobStreamInputDataSourcePtrOutput
	ToBlobStreamInputDataSourcePtrOutputWithContext(context.Context) BlobStreamInputDataSourcePtrOutput
}

type blobStreamInputDataSourcePtrType BlobStreamInputDataSourceArgs

func BlobStreamInputDataSourcePtr(v *BlobStreamInputDataSourceArgs) BlobStreamInputDataSourcePtrInput {
	return (*blobStreamInputDataSourcePtrType)(v)
}

func (*blobStreamInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStreamInputDataSource)(nil)).Elem()
}

func (i *blobStreamInputDataSourcePtrType) ToBlobStreamInputDataSourcePtrOutput() BlobStreamInputDataSourcePtrOutput {
	return i.ToBlobStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *blobStreamInputDataSourcePtrType) ToBlobStreamInputDataSourcePtrOutputWithContext(ctx context.Context) BlobStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlobStreamInputDataSourcePtrOutput)
}

// Describes a blob input data source that contains stream data.
type BlobStreamInputDataSourceOutput struct{ *pulumi.OutputState }

func (BlobStreamInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStreamInputDataSource)(nil)).Elem()
}

func (o BlobStreamInputDataSourceOutput) ToBlobStreamInputDataSourceOutput() BlobStreamInputDataSourceOutput {
	return o
}

func (o BlobStreamInputDataSourceOutput) ToBlobStreamInputDataSourceOutputWithContext(ctx context.Context) BlobStreamInputDataSourceOutput {
	return o
}

func (o BlobStreamInputDataSourceOutput) ToBlobStreamInputDataSourcePtrOutput() BlobStreamInputDataSourcePtrOutput {
	return o.ToBlobStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (o BlobStreamInputDataSourceOutput) ToBlobStreamInputDataSourcePtrOutputWithContext(ctx context.Context) BlobStreamInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BlobStreamInputDataSource) *BlobStreamInputDataSource {
		return &v
	}).(BlobStreamInputDataSourcePtrOutput)
}

// Authentication Mode.
func (o BlobStreamInputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobStreamInputDataSourceOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobStreamInputDataSourceOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// The partition count of the blob input data source. Range 1 - 1024.
func (o BlobStreamInputDataSourceOutput) SourcePartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *int { return v.SourcePartitionCount }).(pulumi.IntPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) []StorageAccount { return v.StorageAccounts }).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobStreamInputDataSourceOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobStreamInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobStreamInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type BlobStreamInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (BlobStreamInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStreamInputDataSource)(nil)).Elem()
}

func (o BlobStreamInputDataSourcePtrOutput) ToBlobStreamInputDataSourcePtrOutput() BlobStreamInputDataSourcePtrOutput {
	return o
}

func (o BlobStreamInputDataSourcePtrOutput) ToBlobStreamInputDataSourcePtrOutputWithContext(ctx context.Context) BlobStreamInputDataSourcePtrOutput {
	return o
}

func (o BlobStreamInputDataSourcePtrOutput) Elem() BlobStreamInputDataSourceOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) BlobStreamInputDataSource {
		if v != nil {
			return *v
		}
		var ret BlobStreamInputDataSource
		return ret
	}).(BlobStreamInputDataSourceOutput)
}

// Authentication Mode.
func (o BlobStreamInputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourcePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobStreamInputDataSourcePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobStreamInputDataSourcePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// The partition count of the blob input data source. Range 1 - 1024.
func (o BlobStreamInputDataSourcePtrOutput) SourcePartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *int {
		if v == nil {
			return nil
		}
		return v.SourcePartitionCount
	}).(pulumi.IntPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourcePtrOutput) StorageAccounts() StorageAccountArrayOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) []StorageAccount {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobStreamInputDataSourcePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobStreamInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains stream data.
type BlobStreamInputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
	Container *string `pulumi:"container"`
	// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
	DateFormat *string `pulumi:"dateFormat"`
	// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
	PathPattern *string `pulumi:"pathPattern"`
	// The partition count of the blob input data source. Range 1 - 1024.
	SourcePartitionCount *int `pulumi:"sourcePartitionCount"`
	// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
	StorageAccounts []StorageAccountResponse `pulumi:"storageAccounts"`
	// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
	TimeFormat *string `pulumi:"timeFormat"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/Blob'.
	Type string `pulumi:"type"`
}

// Describes a blob input data source that contains stream data.
type BlobStreamInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (BlobStreamInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlobStreamInputDataSourceResponse)(nil)).Elem()
}

func (o BlobStreamInputDataSourceResponseOutput) ToBlobStreamInputDataSourceResponseOutput() BlobStreamInputDataSourceResponseOutput {
	return o
}

func (o BlobStreamInputDataSourceResponseOutput) ToBlobStreamInputDataSourceResponseOutputWithContext(ctx context.Context) BlobStreamInputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o BlobStreamInputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceResponseOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobStreamInputDataSourceResponseOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *string { return v.DateFormat }).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobStreamInputDataSourceResponseOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *string { return v.PathPattern }).(pulumi.StringPtrOutput)
}

// The partition count of the blob input data source. Range 1 - 1024.
func (o BlobStreamInputDataSourceResponseOutput) SourcePartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *int { return v.SourcePartitionCount }).(pulumi.IntPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceResponseOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) []StorageAccountResponse { return v.StorageAccounts }).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobStreamInputDataSourceResponseOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) *string { return v.TimeFormat }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobStreamInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BlobStreamInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BlobStreamInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (BlobStreamInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlobStreamInputDataSourceResponse)(nil)).Elem()
}

func (o BlobStreamInputDataSourceResponsePtrOutput) ToBlobStreamInputDataSourceResponsePtrOutput() BlobStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o BlobStreamInputDataSourceResponsePtrOutput) ToBlobStreamInputDataSourceResponsePtrOutputWithContext(ctx context.Context) BlobStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o BlobStreamInputDataSourceResponsePtrOutput) Elem() BlobStreamInputDataSourceResponseOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) BlobStreamInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret BlobStreamInputDataSourceResponse
		return ret
	}).(BlobStreamInputDataSourceResponseOutput)
}

// Authentication Mode.
func (o BlobStreamInputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceResponsePtrOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Container
	}).(pulumi.StringPtrOutput)
}

// The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
func (o BlobStreamInputDataSourceResponsePtrOutput) DateFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DateFormat
	}).(pulumi.StringPtrOutput)
}

// The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
func (o BlobStreamInputDataSourceResponsePtrOutput) PathPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathPattern
	}).(pulumi.StringPtrOutput)
}

// The partition count of the blob input data source. Range 1 - 1024.
func (o BlobStreamInputDataSourceResponsePtrOutput) SourcePartitionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *int {
		if v == nil {
			return nil
		}
		return v.SourcePartitionCount
	}).(pulumi.IntPtrOutput)
}

// A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
func (o BlobStreamInputDataSourceResponsePtrOutput) StorageAccounts() StorageAccountResponseArrayOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) []StorageAccountResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageAccountResponseArrayOutput)
}

// The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
func (o BlobStreamInputDataSourceResponsePtrOutput) TimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeFormat
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/Blob'.
func (o BlobStreamInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlobStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties associated with a Stream Analytics cluster.
type ClusterInfo struct {
	// The resource id of cluster.
	Id *string `pulumi:"id"`
}

// ClusterInfoInput is an input type that accepts ClusterInfoArgs and ClusterInfoOutput values.
// You can construct a concrete instance of `ClusterInfoInput` via:
//
//	ClusterInfoArgs{...}
type ClusterInfoInput interface {
	pulumi.Input

	ToClusterInfoOutput() ClusterInfoOutput
	ToClusterInfoOutputWithContext(context.Context) ClusterInfoOutput
}

// The properties associated with a Stream Analytics cluster.
type ClusterInfoArgs struct {
	// The resource id of cluster.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (ClusterInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInfo)(nil)).Elem()
}

func (i ClusterInfoArgs) ToClusterInfoOutput() ClusterInfoOutput {
	return i.ToClusterInfoOutputWithContext(context.Background())
}

func (i ClusterInfoArgs) ToClusterInfoOutputWithContext(ctx context.Context) ClusterInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInfoOutput)
}

func (i ClusterInfoArgs) ToClusterInfoPtrOutput() ClusterInfoPtrOutput {
	return i.ToClusterInfoPtrOutputWithContext(context.Background())
}

func (i ClusterInfoArgs) ToClusterInfoPtrOutputWithContext(ctx context.Context) ClusterInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInfoOutput).ToClusterInfoPtrOutputWithContext(ctx)
}

// ClusterInfoPtrInput is an input type that accepts ClusterInfoArgs, ClusterInfoPtr and ClusterInfoPtrOutput values.
// You can construct a concrete instance of `ClusterInfoPtrInput` via:
//
//	        ClusterInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterInfoPtrInput interface {
	pulumi.Input

	ToClusterInfoPtrOutput() ClusterInfoPtrOutput
	ToClusterInfoPtrOutputWithContext(context.Context) ClusterInfoPtrOutput
}

type clusterInfoPtrType ClusterInfoArgs

func ClusterInfoPtr(v *ClusterInfoArgs) ClusterInfoPtrInput {
	return (*clusterInfoPtrType)(v)
}

func (*clusterInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInfo)(nil)).Elem()
}

func (i *clusterInfoPtrType) ToClusterInfoPtrOutput() ClusterInfoPtrOutput {
	return i.ToClusterInfoPtrOutputWithContext(context.Background())
}

func (i *clusterInfoPtrType) ToClusterInfoPtrOutputWithContext(ctx context.Context) ClusterInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInfoPtrOutput)
}

// The properties associated with a Stream Analytics cluster.
type ClusterInfoOutput struct{ *pulumi.OutputState }

func (ClusterInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInfo)(nil)).Elem()
}

func (o ClusterInfoOutput) ToClusterInfoOutput() ClusterInfoOutput {
	return o
}

func (o ClusterInfoOutput) ToClusterInfoOutputWithContext(ctx context.Context) ClusterInfoOutput {
	return o
}

func (o ClusterInfoOutput) ToClusterInfoPtrOutput() ClusterInfoPtrOutput {
	return o.ToClusterInfoPtrOutputWithContext(context.Background())
}

func (o ClusterInfoOutput) ToClusterInfoPtrOutputWithContext(ctx context.Context) ClusterInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterInfo) *ClusterInfo {
		return &v
	}).(ClusterInfoPtrOutput)
}

// The resource id of cluster.
func (o ClusterInfoOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterInfo) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ClusterInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInfo)(nil)).Elem()
}

func (o ClusterInfoPtrOutput) ToClusterInfoPtrOutput() ClusterInfoPtrOutput {
	return o
}

func (o ClusterInfoPtrOutput) ToClusterInfoPtrOutputWithContext(ctx context.Context) ClusterInfoPtrOutput {
	return o
}

func (o ClusterInfoPtrOutput) Elem() ClusterInfoOutput {
	return o.ApplyT(func(v *ClusterInfo) ClusterInfo {
		if v != nil {
			return *v
		}
		var ret ClusterInfo
		return ret
	}).(ClusterInfoOutput)
}

// The resource id of cluster.
func (o ClusterInfoPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInfo) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The properties associated with a Stream Analytics cluster.
type ClusterInfoResponse struct {
	// The resource id of cluster.
	Id *string `pulumi:"id"`
}

// The properties associated with a Stream Analytics cluster.
type ClusterInfoResponseOutput struct{ *pulumi.OutputState }

func (ClusterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInfoResponse)(nil)).Elem()
}

func (o ClusterInfoResponseOutput) ToClusterInfoResponseOutput() ClusterInfoResponseOutput {
	return o
}

func (o ClusterInfoResponseOutput) ToClusterInfoResponseOutputWithContext(ctx context.Context) ClusterInfoResponseOutput {
	return o
}

// The resource id of cluster.
func (o ClusterInfoResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterInfoResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type ClusterInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInfoResponse)(nil)).Elem()
}

func (o ClusterInfoResponsePtrOutput) ToClusterInfoResponsePtrOutput() ClusterInfoResponsePtrOutput {
	return o
}

func (o ClusterInfoResponsePtrOutput) ToClusterInfoResponsePtrOutputWithContext(ctx context.Context) ClusterInfoResponsePtrOutput {
	return o
}

func (o ClusterInfoResponsePtrOutput) Elem() ClusterInfoResponseOutput {
	return o.ApplyT(func(v *ClusterInfoResponse) ClusterInfoResponse {
		if v != nil {
			return *v
		}
		var ret ClusterInfoResponse
		return ret
	}).(ClusterInfoResponseOutput)
}

// The resource id of cluster.
func (o ClusterInfoResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A streaming job.
type ClusterJobResponse struct {
	// Resource ID of the streaming job.
	Id string `pulumi:"id"`
	// The current execution state of the streaming job.
	JobState string `pulumi:"jobState"`
	// The number of streaming units that are used by the streaming job.
	StreamingUnits int `pulumi:"streamingUnits"`
}

// A streaming job.
type ClusterJobResponseOutput struct{ *pulumi.OutputState }

func (ClusterJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterJobResponse)(nil)).Elem()
}

func (o ClusterJobResponseOutput) ToClusterJobResponseOutput() ClusterJobResponseOutput {
	return o
}

func (o ClusterJobResponseOutput) ToClusterJobResponseOutputWithContext(ctx context.Context) ClusterJobResponseOutput {
	return o
}

// Resource ID of the streaming job.
func (o ClusterJobResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterJobResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The current execution state of the streaming job.
func (o ClusterJobResponseOutput) JobState() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterJobResponse) string { return v.JobState }).(pulumi.StringOutput)
}

// The number of streaming units that are used by the streaming job.
func (o ClusterJobResponseOutput) StreamingUnits() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterJobResponse) int { return v.StreamingUnits }).(pulumi.IntOutput)
}

type ClusterJobResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterJobResponse)(nil)).Elem()
}

func (o ClusterJobResponseArrayOutput) ToClusterJobResponseArrayOutput() ClusterJobResponseArrayOutput {
	return o
}

func (o ClusterJobResponseArrayOutput) ToClusterJobResponseArrayOutputWithContext(ctx context.Context) ClusterJobResponseArrayOutput {
	return o
}

func (o ClusterJobResponseArrayOutput) Index(i pulumi.IntInput) ClusterJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterJobResponse {
		return vs[0].([]ClusterJobResponse)[vs[1].(int)]
	}).(ClusterJobResponseOutput)
}

// The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.
type ClusterSku struct {
	// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
	Capacity *int `pulumi:"capacity"`
	// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
	Name *string `pulumi:"name"`
}

// ClusterSkuInput is an input type that accepts ClusterSkuArgs and ClusterSkuOutput values.
// You can construct a concrete instance of `ClusterSkuInput` via:
//
//	ClusterSkuArgs{...}
type ClusterSkuInput interface {
	pulumi.Input

	ToClusterSkuOutput() ClusterSkuOutput
	ToClusterSkuOutputWithContext(context.Context) ClusterSkuOutput
}

// The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.
type ClusterSkuArgs struct {
	// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSku)(nil)).Elem()
}

func (i ClusterSkuArgs) ToClusterSkuOutput() ClusterSkuOutput {
	return i.ToClusterSkuOutputWithContext(context.Background())
}

func (i ClusterSkuArgs) ToClusterSkuOutputWithContext(ctx context.Context) ClusterSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSkuOutput)
}

func (i ClusterSkuArgs) ToClusterSkuPtrOutput() ClusterSkuPtrOutput {
	return i.ToClusterSkuPtrOutputWithContext(context.Background())
}

func (i ClusterSkuArgs) ToClusterSkuPtrOutputWithContext(ctx context.Context) ClusterSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSkuOutput).ToClusterSkuPtrOutputWithContext(ctx)
}

// ClusterSkuPtrInput is an input type that accepts ClusterSkuArgs, ClusterSkuPtr and ClusterSkuPtrOutput values.
// You can construct a concrete instance of `ClusterSkuPtrInput` via:
//
//	        ClusterSkuArgs{...}
//
//	or:
//
//	        nil
type ClusterSkuPtrInput interface {
	pulumi.Input

	ToClusterSkuPtrOutput() ClusterSkuPtrOutput
	ToClusterSkuPtrOutputWithContext(context.Context) ClusterSkuPtrOutput
}

type clusterSkuPtrType ClusterSkuArgs

func ClusterSkuPtr(v *ClusterSkuArgs) ClusterSkuPtrInput {
	return (*clusterSkuPtrType)(v)
}

func (*clusterSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSku)(nil)).Elem()
}

func (i *clusterSkuPtrType) ToClusterSkuPtrOutput() ClusterSkuPtrOutput {
	return i.ToClusterSkuPtrOutputWithContext(context.Background())
}

func (i *clusterSkuPtrType) ToClusterSkuPtrOutputWithContext(ctx context.Context) ClusterSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSkuPtrOutput)
}

// The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.
type ClusterSkuOutput struct{ *pulumi.OutputState }

func (ClusterSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSku)(nil)).Elem()
}

func (o ClusterSkuOutput) ToClusterSkuOutput() ClusterSkuOutput {
	return o
}

func (o ClusterSkuOutput) ToClusterSkuOutputWithContext(ctx context.Context) ClusterSkuOutput {
	return o
}

func (o ClusterSkuOutput) ToClusterSkuPtrOutput() ClusterSkuPtrOutput {
	return o.ToClusterSkuPtrOutputWithContext(context.Background())
}

func (o ClusterSkuOutput) ToClusterSkuPtrOutputWithContext(ctx context.Context) ClusterSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterSku) *ClusterSku {
		return &v
	}).(ClusterSkuPtrOutput)
}

// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterSkuPtrOutput struct{ *pulumi.OutputState }

func (ClusterSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSku)(nil)).Elem()
}

func (o ClusterSkuPtrOutput) ToClusterSkuPtrOutput() ClusterSkuPtrOutput {
	return o
}

func (o ClusterSkuPtrOutput) ToClusterSkuPtrOutputWithContext(ctx context.Context) ClusterSkuPtrOutput {
	return o
}

func (o ClusterSkuPtrOutput) Elem() ClusterSkuOutput {
	return o.ApplyT(func(v *ClusterSku) ClusterSku {
		if v != nil {
			return *v
		}
		var ret ClusterSku
		return ret
	}).(ClusterSkuOutput)
}

// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.
type ClusterSkuResponse struct {
	// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
	Capacity *int `pulumi:"capacity"`
	// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
	Name *string `pulumi:"name"`
}

// The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.
type ClusterSkuResponseOutput struct{ *pulumi.OutputState }

func (ClusterSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSkuResponse)(nil)).Elem()
}

func (o ClusterSkuResponseOutput) ToClusterSkuResponseOutput() ClusterSkuResponseOutput {
	return o
}

func (o ClusterSkuResponseOutput) ToClusterSkuResponseOutputWithContext(ctx context.Context) ClusterSkuResponseOutput {
	return o
}

// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ClusterSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSkuResponse)(nil)).Elem()
}

func (o ClusterSkuResponsePtrOutput) ToClusterSkuResponsePtrOutput() ClusterSkuResponsePtrOutput {
	return o
}

func (o ClusterSkuResponsePtrOutput) ToClusterSkuResponsePtrOutputWithContext(ctx context.Context) ClusterSkuResponsePtrOutput {
	return o
}

func (o ClusterSkuResponsePtrOutput) Elem() ClusterSkuResponseOutput {
	return o.ApplyT(func(v *ClusterSkuResponse) ClusterSkuResponse {
		if v != nil {
			return *v
		}
		var ret ClusterSkuResponse
		return ret
	}).(ClusterSkuResponseOutput)
}

// Denotes the number of streaming units the cluster can support. Valid values for this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
func (o ClusterSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Describes how input data is compressed
type Compression struct {
	// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
	Type string `pulumi:"type"`
}

// CompressionInput is an input type that accepts CompressionArgs and CompressionOutput values.
// You can construct a concrete instance of `CompressionInput` via:
//
//	CompressionArgs{...}
type CompressionInput interface {
	pulumi.Input

	ToCompressionOutput() CompressionOutput
	ToCompressionOutputWithContext(context.Context) CompressionOutput
}

// Describes how input data is compressed
type CompressionArgs struct {
	// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CompressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Compression)(nil)).Elem()
}

func (i CompressionArgs) ToCompressionOutput() CompressionOutput {
	return i.ToCompressionOutputWithContext(context.Background())
}

func (i CompressionArgs) ToCompressionOutputWithContext(ctx context.Context) CompressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionOutput)
}

func (i CompressionArgs) ToCompressionPtrOutput() CompressionPtrOutput {
	return i.ToCompressionPtrOutputWithContext(context.Background())
}

func (i CompressionArgs) ToCompressionPtrOutputWithContext(ctx context.Context) CompressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionOutput).ToCompressionPtrOutputWithContext(ctx)
}

// CompressionPtrInput is an input type that accepts CompressionArgs, CompressionPtr and CompressionPtrOutput values.
// You can construct a concrete instance of `CompressionPtrInput` via:
//
//	        CompressionArgs{...}
//
//	or:
//
//	        nil
type CompressionPtrInput interface {
	pulumi.Input

	ToCompressionPtrOutput() CompressionPtrOutput
	ToCompressionPtrOutputWithContext(context.Context) CompressionPtrOutput
}

type compressionPtrType CompressionArgs

func CompressionPtr(v *CompressionArgs) CompressionPtrInput {
	return (*compressionPtrType)(v)
}

func (*compressionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Compression)(nil)).Elem()
}

func (i *compressionPtrType) ToCompressionPtrOutput() CompressionPtrOutput {
	return i.ToCompressionPtrOutputWithContext(context.Background())
}

func (i *compressionPtrType) ToCompressionPtrOutputWithContext(ctx context.Context) CompressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CompressionPtrOutput)
}

// Describes how input data is compressed
type CompressionOutput struct{ *pulumi.OutputState }

func (CompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Compression)(nil)).Elem()
}

func (o CompressionOutput) ToCompressionOutput() CompressionOutput {
	return o
}

func (o CompressionOutput) ToCompressionOutputWithContext(ctx context.Context) CompressionOutput {
	return o
}

func (o CompressionOutput) ToCompressionPtrOutput() CompressionPtrOutput {
	return o.ToCompressionPtrOutputWithContext(context.Background())
}

func (o CompressionOutput) ToCompressionPtrOutputWithContext(ctx context.Context) CompressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Compression) *Compression {
		return &v
	}).(CompressionPtrOutput)
}

// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
func (o CompressionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Compression) string { return v.Type }).(pulumi.StringOutput)
}

type CompressionPtrOutput struct{ *pulumi.OutputState }

func (CompressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Compression)(nil)).Elem()
}

func (o CompressionPtrOutput) ToCompressionPtrOutput() CompressionPtrOutput {
	return o
}

func (o CompressionPtrOutput) ToCompressionPtrOutputWithContext(ctx context.Context) CompressionPtrOutput {
	return o
}

func (o CompressionPtrOutput) Elem() CompressionOutput {
	return o.ApplyT(func(v *Compression) Compression {
		if v != nil {
			return *v
		}
		var ret Compression
		return ret
	}).(CompressionOutput)
}

// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
func (o CompressionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Compression) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how input data is compressed
type CompressionResponse struct {
	// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
	Type string `pulumi:"type"`
}

// Describes how input data is compressed
type CompressionResponseOutput struct{ *pulumi.OutputState }

func (CompressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompressionResponse)(nil)).Elem()
}

func (o CompressionResponseOutput) ToCompressionResponseOutput() CompressionResponseOutput {
	return o
}

func (o CompressionResponseOutput) ToCompressionResponseOutputWithContext(ctx context.Context) CompressionResponseOutput {
	return o
}

// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
func (o CompressionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CompressionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type CompressionResponsePtrOutput struct{ *pulumi.OutputState }

func (CompressionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CompressionResponse)(nil)).Elem()
}

func (o CompressionResponsePtrOutput) ToCompressionResponsePtrOutput() CompressionResponsePtrOutput {
	return o
}

func (o CompressionResponsePtrOutput) ToCompressionResponsePtrOutputWithContext(ctx context.Context) CompressionResponsePtrOutput {
	return o
}

func (o CompressionResponsePtrOutput) Elem() CompressionResponseOutput {
	return o.ApplyT(func(v *CompressionResponse) CompressionResponse {
		if v != nil {
			return *v
		}
		var ret CompressionResponse
		return ret
	}).(CompressionResponseOutput)
}

// Indicates the type of compression that the input uses. Required on PUT (CreateOrReplace) requests.
func (o CompressionResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CompressionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
type CsvSerialization struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding *string `pulumi:"encoding"`
	// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Csv'.
	Type string `pulumi:"type"`
}

// CsvSerializationInput is an input type that accepts CsvSerializationArgs and CsvSerializationOutput values.
// You can construct a concrete instance of `CsvSerializationInput` via:
//
//	CsvSerializationArgs{...}
type CsvSerializationInput interface {
	pulumi.Input

	ToCsvSerializationOutput() CsvSerializationOutput
	ToCsvSerializationOutputWithContext(context.Context) CsvSerializationOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
type CsvSerializationArgs struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Csv'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CsvSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvSerialization)(nil)).Elem()
}

func (i CsvSerializationArgs) ToCsvSerializationOutput() CsvSerializationOutput {
	return i.ToCsvSerializationOutputWithContext(context.Background())
}

func (i CsvSerializationArgs) ToCsvSerializationOutputWithContext(ctx context.Context) CsvSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvSerializationOutput)
}

func (i CsvSerializationArgs) ToCsvSerializationPtrOutput() CsvSerializationPtrOutput {
	return i.ToCsvSerializationPtrOutputWithContext(context.Background())
}

func (i CsvSerializationArgs) ToCsvSerializationPtrOutputWithContext(ctx context.Context) CsvSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvSerializationOutput).ToCsvSerializationPtrOutputWithContext(ctx)
}

// CsvSerializationPtrInput is an input type that accepts CsvSerializationArgs, CsvSerializationPtr and CsvSerializationPtrOutput values.
// You can construct a concrete instance of `CsvSerializationPtrInput` via:
//
//	        CsvSerializationArgs{...}
//
//	or:
//
//	        nil
type CsvSerializationPtrInput interface {
	pulumi.Input

	ToCsvSerializationPtrOutput() CsvSerializationPtrOutput
	ToCsvSerializationPtrOutputWithContext(context.Context) CsvSerializationPtrOutput
}

type csvSerializationPtrType CsvSerializationArgs

func CsvSerializationPtr(v *CsvSerializationArgs) CsvSerializationPtrInput {
	return (*csvSerializationPtrType)(v)
}

func (*csvSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvSerialization)(nil)).Elem()
}

func (i *csvSerializationPtrType) ToCsvSerializationPtrOutput() CsvSerializationPtrOutput {
	return i.ToCsvSerializationPtrOutputWithContext(context.Background())
}

func (i *csvSerializationPtrType) ToCsvSerializationPtrOutputWithContext(ctx context.Context) CsvSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvSerializationPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
type CsvSerializationOutput struct{ *pulumi.OutputState }

func (CsvSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvSerialization)(nil)).Elem()
}

func (o CsvSerializationOutput) ToCsvSerializationOutput() CsvSerializationOutput {
	return o
}

func (o CsvSerializationOutput) ToCsvSerializationOutputWithContext(ctx context.Context) CsvSerializationOutput {
	return o
}

func (o CsvSerializationOutput) ToCsvSerializationPtrOutput() CsvSerializationPtrOutput {
	return o.ToCsvSerializationPtrOutputWithContext(context.Background())
}

func (o CsvSerializationOutput) ToCsvSerializationPtrOutputWithContext(ctx context.Context) CsvSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsvSerialization) *CsvSerialization {
		return &v
	}).(CsvSerializationPtrOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvSerialization) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Csv'.
func (o CsvSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CsvSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type CsvSerializationPtrOutput struct{ *pulumi.OutputState }

func (CsvSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvSerialization)(nil)).Elem()
}

func (o CsvSerializationPtrOutput) ToCsvSerializationPtrOutput() CsvSerializationPtrOutput {
	return o
}

func (o CsvSerializationPtrOutput) ToCsvSerializationPtrOutputWithContext(ctx context.Context) CsvSerializationPtrOutput {
	return o
}

func (o CsvSerializationPtrOutput) Elem() CsvSerializationOutput {
	return o.ApplyT(func(v *CsvSerialization) CsvSerialization {
		if v != nil {
			return *v
		}
		var ret CsvSerialization
		return ret
	}).(CsvSerializationOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerialization) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Csv'.
func (o CsvSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
type CsvSerializationResponse struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding *string `pulumi:"encoding"`
	// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Csv'.
	Type string `pulumi:"type"`
}

// Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.
type CsvSerializationResponseOutput struct{ *pulumi.OutputState }

func (CsvSerializationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvSerializationResponse)(nil)).Elem()
}

func (o CsvSerializationResponseOutput) ToCsvSerializationResponseOutput() CsvSerializationResponseOutput {
	return o
}

func (o CsvSerializationResponseOutput) ToCsvSerializationResponseOutputWithContext(ctx context.Context) CsvSerializationResponseOutput {
	return o
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvSerializationResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationResponseOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvSerializationResponse) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Csv'.
func (o CsvSerializationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CsvSerializationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type CsvSerializationResponsePtrOutput struct{ *pulumi.OutputState }

func (CsvSerializationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvSerializationResponse)(nil)).Elem()
}

func (o CsvSerializationResponsePtrOutput) ToCsvSerializationResponsePtrOutput() CsvSerializationResponsePtrOutput {
	return o
}

func (o CsvSerializationResponsePtrOutput) ToCsvSerializationResponsePtrOutputWithContext(ctx context.Context) CsvSerializationResponsePtrOutput {
	return o
}

func (o CsvSerializationResponsePtrOutput) Elem() CsvSerializationResponseOutput {
	return o.ApplyT(func(v *CsvSerializationResponse) CsvSerializationResponse {
		if v != nil {
			return *v
		}
		var ret CsvSerializationResponse
		return ret
	}).(CsvSerializationResponseOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationResponsePtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Specifies the delimiter that will be used to separate comma-separated value (CSV) records. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of supported values. Required on PUT (CreateOrReplace) requests.
func (o CsvSerializationResponsePtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Csv'.
func (o CsvSerializationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Condition applicable to the resource, or to the job overall, that warrant customer attention.
type DiagnosticConditionResponse struct {
	// The opaque diagnostic code.
	Code string `pulumi:"code"`
	// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
	Message string `pulumi:"message"`
	// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
	Since string `pulumi:"since"`
}

// Condition applicable to the resource, or to the job overall, that warrant customer attention.
type DiagnosticConditionResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticConditionResponse)(nil)).Elem()
}

func (o DiagnosticConditionResponseOutput) ToDiagnosticConditionResponseOutput() DiagnosticConditionResponseOutput {
	return o
}

func (o DiagnosticConditionResponseOutput) ToDiagnosticConditionResponseOutputWithContext(ctx context.Context) DiagnosticConditionResponseOutput {
	return o
}

// The opaque diagnostic code.
func (o DiagnosticConditionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The human-readable message describing the condition in detail. Localized in the Accept-Language of the client request.
func (o DiagnosticConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The UTC timestamp of when the condition started. Customers should be able to find a corresponding event in the ops log around this time.
func (o DiagnosticConditionResponseOutput) Since() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticConditionResponse) string { return v.Since }).(pulumi.StringOutput)
}

type DiagnosticConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticConditionResponse)(nil)).Elem()
}

func (o DiagnosticConditionResponseArrayOutput) ToDiagnosticConditionResponseArrayOutput() DiagnosticConditionResponseArrayOutput {
	return o
}

func (o DiagnosticConditionResponseArrayOutput) ToDiagnosticConditionResponseArrayOutputWithContext(ctx context.Context) DiagnosticConditionResponseArrayOutput {
	return o
}

func (o DiagnosticConditionResponseArrayOutput) Index(i pulumi.IntInput) DiagnosticConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticConditionResponse {
		return vs[0].([]DiagnosticConditionResponse)[vs[1].(int)]
	}).(DiagnosticConditionResponseOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
type DiagnosticsResponse struct {
	// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
	Conditions []DiagnosticConditionResponse `pulumi:"conditions"`
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
type DiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutput() DiagnosticsResponseOutput {
	return o
}

func (o DiagnosticsResponseOutput) ToDiagnosticsResponseOutputWithContext(ctx context.Context) DiagnosticsResponseOutput {
	return o
}

// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
func (o DiagnosticsResponseOutput) Conditions() DiagnosticConditionResponseArrayOutput {
	return o.ApplyT(func(v DiagnosticsResponse) []DiagnosticConditionResponse { return v.Conditions }).(DiagnosticConditionResponseArrayOutput)
}

type DiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (DiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiagnosticsResponse)(nil)).Elem()
}

func (o DiagnosticsResponsePtrOutput) ToDiagnosticsResponsePtrOutput() DiagnosticsResponsePtrOutput {
	return o
}

func (o DiagnosticsResponsePtrOutput) ToDiagnosticsResponsePtrOutputWithContext(ctx context.Context) DiagnosticsResponsePtrOutput {
	return o
}

func (o DiagnosticsResponsePtrOutput) Elem() DiagnosticsResponseOutput {
	return o.ApplyT(func(v *DiagnosticsResponse) DiagnosticsResponse {
		if v != nil {
			return *v
		}
		var ret DiagnosticsResponse
		return ret
	}).(DiagnosticsResponseOutput)
}

// A collection of zero or more conditions applicable to the resource, or to the job overall, that warrant customer attention.
func (o DiagnosticsResponsePtrOutput) Conditions() DiagnosticConditionResponseArrayOutput {
	return o.ApplyT(func(v *DiagnosticsResponse) []DiagnosticConditionResponse {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(DiagnosticConditionResponseArrayOutput)
}

// Describes a DocumentDB output data source.
type DocumentDbOutputDataSource struct {
	// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
	AccountId *string `pulumi:"accountId"`
	// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
	CollectionNamePattern *string `pulumi:"collectionNamePattern"`
	// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// The name of the field in output events used to specify the primary key which insert or update operations are based on.
	DocumentId *string `pulumi:"documentId"`
	// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
	PartitionKey *string `pulumi:"partitionKey"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/DocumentDB'.
	Type string `pulumi:"type"`
}

// DocumentDbOutputDataSourceInput is an input type that accepts DocumentDbOutputDataSourceArgs and DocumentDbOutputDataSourceOutput values.
// You can construct a concrete instance of `DocumentDbOutputDataSourceInput` via:
//
//	DocumentDbOutputDataSourceArgs{...}
type DocumentDbOutputDataSourceInput interface {
	pulumi.Input

	ToDocumentDbOutputDataSourceOutput() DocumentDbOutputDataSourceOutput
	ToDocumentDbOutputDataSourceOutputWithContext(context.Context) DocumentDbOutputDataSourceOutput
}

// Describes a DocumentDB output data source.
type DocumentDbOutputDataSourceArgs struct {
	// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
	CollectionNamePattern pulumi.StringPtrInput `pulumi:"collectionNamePattern"`
	// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// The name of the field in output events used to specify the primary key which insert or update operations are based on.
	DocumentId pulumi.StringPtrInput `pulumi:"documentId"`
	// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/DocumentDB'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (DocumentDbOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbOutputDataSource)(nil)).Elem()
}

func (i DocumentDbOutputDataSourceArgs) ToDocumentDbOutputDataSourceOutput() DocumentDbOutputDataSourceOutput {
	return i.ToDocumentDbOutputDataSourceOutputWithContext(context.Background())
}

func (i DocumentDbOutputDataSourceArgs) ToDocumentDbOutputDataSourceOutputWithContext(ctx context.Context) DocumentDbOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbOutputDataSourceOutput)
}

func (i DocumentDbOutputDataSourceArgs) ToDocumentDbOutputDataSourcePtrOutput() DocumentDbOutputDataSourcePtrOutput {
	return i.ToDocumentDbOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i DocumentDbOutputDataSourceArgs) ToDocumentDbOutputDataSourcePtrOutputWithContext(ctx context.Context) DocumentDbOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbOutputDataSourceOutput).ToDocumentDbOutputDataSourcePtrOutputWithContext(ctx)
}

// DocumentDbOutputDataSourcePtrInput is an input type that accepts DocumentDbOutputDataSourceArgs, DocumentDbOutputDataSourcePtr and DocumentDbOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `DocumentDbOutputDataSourcePtrInput` via:
//
//	        DocumentDbOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type DocumentDbOutputDataSourcePtrInput interface {
	pulumi.Input

	ToDocumentDbOutputDataSourcePtrOutput() DocumentDbOutputDataSourcePtrOutput
	ToDocumentDbOutputDataSourcePtrOutputWithContext(context.Context) DocumentDbOutputDataSourcePtrOutput
}

type documentDbOutputDataSourcePtrType DocumentDbOutputDataSourceArgs

func DocumentDbOutputDataSourcePtr(v *DocumentDbOutputDataSourceArgs) DocumentDbOutputDataSourcePtrInput {
	return (*documentDbOutputDataSourcePtrType)(v)
}

func (*documentDbOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDbOutputDataSource)(nil)).Elem()
}

func (i *documentDbOutputDataSourcePtrType) ToDocumentDbOutputDataSourcePtrOutput() DocumentDbOutputDataSourcePtrOutput {
	return i.ToDocumentDbOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *documentDbOutputDataSourcePtrType) ToDocumentDbOutputDataSourcePtrOutputWithContext(ctx context.Context) DocumentDbOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentDbOutputDataSourcePtrOutput)
}

// Describes a DocumentDB output data source.
type DocumentDbOutputDataSourceOutput struct{ *pulumi.OutputState }

func (DocumentDbOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbOutputDataSource)(nil)).Elem()
}

func (o DocumentDbOutputDataSourceOutput) ToDocumentDbOutputDataSourceOutput() DocumentDbOutputDataSourceOutput {
	return o
}

func (o DocumentDbOutputDataSourceOutput) ToDocumentDbOutputDataSourceOutputWithContext(ctx context.Context) DocumentDbOutputDataSourceOutput {
	return o
}

func (o DocumentDbOutputDataSourceOutput) ToDocumentDbOutputDataSourcePtrOutput() DocumentDbOutputDataSourcePtrOutput {
	return o.ToDocumentDbOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o DocumentDbOutputDataSourceOutput) ToDocumentDbOutputDataSourcePtrOutputWithContext(ctx context.Context) DocumentDbOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DocumentDbOutputDataSource) *DocumentDbOutputDataSource {
		return &v
	}).(DocumentDbOutputDataSourcePtrOutput)
}

// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceOutput) CollectionNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.CollectionNamePattern }).(pulumi.StringPtrOutput)
}

// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the primary key which insert or update operations are based on.
func (o DocumentDbOutputDataSourceOutput) DocumentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.DocumentId }).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
func (o DocumentDbOutputDataSourceOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/DocumentDB'.
func (o DocumentDbOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type DocumentDbOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (DocumentDbOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDbOutputDataSource)(nil)).Elem()
}

func (o DocumentDbOutputDataSourcePtrOutput) ToDocumentDbOutputDataSourcePtrOutput() DocumentDbOutputDataSourcePtrOutput {
	return o
}

func (o DocumentDbOutputDataSourcePtrOutput) ToDocumentDbOutputDataSourcePtrOutputWithContext(ctx context.Context) DocumentDbOutputDataSourcePtrOutput {
	return o
}

func (o DocumentDbOutputDataSourcePtrOutput) Elem() DocumentDbOutputDataSourceOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) DocumentDbOutputDataSource {
		if v != nil {
			return *v
		}
		var ret DocumentDbOutputDataSource
		return ret
	}).(DocumentDbOutputDataSourceOutput)
}

// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourcePtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourcePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourcePtrOutput) CollectionNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.CollectionNamePattern
	}).(pulumi.StringPtrOutput)
}

// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourcePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the primary key which insert or update operations are based on.
func (o DocumentDbOutputDataSourcePtrOutput) DocumentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.DocumentId
	}).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
func (o DocumentDbOutputDataSourcePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/DocumentDB'.
func (o DocumentDbOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a DocumentDB output data source.
type DocumentDbOutputDataSourceResponse struct {
	// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
	AccountId *string `pulumi:"accountId"`
	// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
	CollectionNamePattern *string `pulumi:"collectionNamePattern"`
	// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
	Database *string `pulumi:"database"`
	// The name of the field in output events used to specify the primary key which insert or update operations are based on.
	DocumentId *string `pulumi:"documentId"`
	// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
	PartitionKey *string `pulumi:"partitionKey"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Storage/DocumentDB'.
	Type string `pulumi:"type"`
}

// Describes a DocumentDB output data source.
type DocumentDbOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (DocumentDbOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DocumentDbOutputDataSourceResponse)(nil)).Elem()
}

func (o DocumentDbOutputDataSourceResponseOutput) ToDocumentDbOutputDataSourceResponseOutput() DocumentDbOutputDataSourceResponseOutput {
	return o
}

func (o DocumentDbOutputDataSourceResponseOutput) ToDocumentDbOutputDataSourceResponseOutputWithContext(ctx context.Context) DocumentDbOutputDataSourceResponseOutput {
	return o
}

// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponseOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponseOutput) CollectionNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.CollectionNamePattern }).(pulumi.StringPtrOutput)
}

// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponseOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the primary key which insert or update operations are based on.
func (o DocumentDbOutputDataSourceResponseOutput) DocumentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.DocumentId }).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
func (o DocumentDbOutputDataSourceResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/DocumentDB'.
func (o DocumentDbOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DocumentDbOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DocumentDbOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (DocumentDbOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DocumentDbOutputDataSourceResponse)(nil)).Elem()
}

func (o DocumentDbOutputDataSourceResponsePtrOutput) ToDocumentDbOutputDataSourceResponsePtrOutput() DocumentDbOutputDataSourceResponsePtrOutput {
	return o
}

func (o DocumentDbOutputDataSourceResponsePtrOutput) ToDocumentDbOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) DocumentDbOutputDataSourceResponsePtrOutput {
	return o
}

func (o DocumentDbOutputDataSourceResponsePtrOutput) Elem() DocumentDbOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) DocumentDbOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret DocumentDbOutputDataSourceResponse
		return ret
	}).(DocumentDbOutputDataSourceResponseOutput)
}

// The DocumentDB account name or ID. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponsePtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountId
	}).(pulumi.StringPtrOutput)
}

// The account key for the DocumentDB account. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The collection name pattern for the collections to be used. The collection name format can be constructed using the optional {partition} token, where partitions start from 0. See the DocumentDB section of https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more information. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponsePtrOutput) CollectionNamePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.CollectionNamePattern
	}).(pulumi.StringPtrOutput)
}

// The name of the DocumentDB database. Required on PUT (CreateOrReplace) requests.
func (o DocumentDbOutputDataSourceResponsePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the primary key which insert or update operations are based on.
func (o DocumentDbOutputDataSourceResponsePtrOutput) DocumentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DocumentId
	}).(pulumi.StringPtrOutput)
}

// The name of the field in output events used to specify the key for partitioning output across collections. If 'collectionNamePattern' contains the {partition} token, this property is required to be specified.
func (o DocumentDbOutputDataSourceResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Storage/DocumentDB'.
func (o DocumentDbOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DocumentDbOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub output data source.
type EventHubOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey *string `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type string `pulumi:"type"`
}

// EventHubOutputDataSourceInput is an input type that accepts EventHubOutputDataSourceArgs and EventHubOutputDataSourceOutput values.
// You can construct a concrete instance of `EventHubOutputDataSourceInput` via:
//
//	EventHubOutputDataSourceArgs{...}
type EventHubOutputDataSourceInput interface {
	pulumi.Input

	ToEventHubOutputDataSourceOutput() EventHubOutputDataSourceOutput
	ToEventHubOutputDataSourceOutputWithContext(context.Context) EventHubOutputDataSourceOutput
}

// Describes an Event Hub output data source.
type EventHubOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName pulumi.StringPtrInput `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns pulumi.StringArrayInput `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubOutputDataSource)(nil)).Elem()
}

func (i EventHubOutputDataSourceArgs) ToEventHubOutputDataSourceOutput() EventHubOutputDataSourceOutput {
	return i.ToEventHubOutputDataSourceOutputWithContext(context.Background())
}

func (i EventHubOutputDataSourceArgs) ToEventHubOutputDataSourceOutputWithContext(ctx context.Context) EventHubOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutputDataSourceOutput)
}

func (i EventHubOutputDataSourceArgs) ToEventHubOutputDataSourcePtrOutput() EventHubOutputDataSourcePtrOutput {
	return i.ToEventHubOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i EventHubOutputDataSourceArgs) ToEventHubOutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutputDataSourceOutput).ToEventHubOutputDataSourcePtrOutputWithContext(ctx)
}

// EventHubOutputDataSourcePtrInput is an input type that accepts EventHubOutputDataSourceArgs, EventHubOutputDataSourcePtr and EventHubOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `EventHubOutputDataSourcePtrInput` via:
//
//	        EventHubOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type EventHubOutputDataSourcePtrInput interface {
	pulumi.Input

	ToEventHubOutputDataSourcePtrOutput() EventHubOutputDataSourcePtrOutput
	ToEventHubOutputDataSourcePtrOutputWithContext(context.Context) EventHubOutputDataSourcePtrOutput
}

type eventHubOutputDataSourcePtrType EventHubOutputDataSourceArgs

func EventHubOutputDataSourcePtr(v *EventHubOutputDataSourceArgs) EventHubOutputDataSourcePtrInput {
	return (*eventHubOutputDataSourcePtrType)(v)
}

func (*eventHubOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubOutputDataSource)(nil)).Elem()
}

func (i *eventHubOutputDataSourcePtrType) ToEventHubOutputDataSourcePtrOutput() EventHubOutputDataSourcePtrOutput {
	return i.ToEventHubOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *eventHubOutputDataSourcePtrType) ToEventHubOutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubOutputDataSourcePtrOutput)
}

// Describes an Event Hub output data source.
type EventHubOutputDataSourceOutput struct{ *pulumi.OutputState }

func (EventHubOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubOutputDataSource)(nil)).Elem()
}

func (o EventHubOutputDataSourceOutput) ToEventHubOutputDataSourceOutput() EventHubOutputDataSourceOutput {
	return o
}

func (o EventHubOutputDataSourceOutput) ToEventHubOutputDataSourceOutputWithContext(ctx context.Context) EventHubOutputDataSourceOutput {
	return o
}

func (o EventHubOutputDataSourceOutput) ToEventHubOutputDataSourcePtrOutput() EventHubOutputDataSourcePtrOutput {
	return o.ToEventHubOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o EventHubOutputDataSourceOutput) ToEventHubOutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubOutputDataSource) *EventHubOutputDataSource {
		return &v
	}).(EventHubOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o EventHubOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubOutputDataSourceOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubOutputDataSourceOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (EventHubOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubOutputDataSource)(nil)).Elem()
}

func (o EventHubOutputDataSourcePtrOutput) ToEventHubOutputDataSourcePtrOutput() EventHubOutputDataSourcePtrOutput {
	return o
}

func (o EventHubOutputDataSourcePtrOutput) ToEventHubOutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubOutputDataSourcePtrOutput {
	return o
}

func (o EventHubOutputDataSourcePtrOutput) Elem() EventHubOutputDataSourceOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) EventHubOutputDataSource {
		if v != nil {
			return *v
		}
		var ret EventHubOutputDataSource
		return ret
	}).(EventHubOutputDataSourceOutput)
}

// Authentication Mode.
func (o EventHubOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourcePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubOutputDataSourcePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubOutputDataSourcePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub output data source.
type EventHubOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey *string `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type string `pulumi:"type"`
}

// Describes an Event Hub output data source.
type EventHubOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (EventHubOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubOutputDataSourceResponse)(nil)).Elem()
}

func (o EventHubOutputDataSourceResponseOutput) ToEventHubOutputDataSourceResponseOutput() EventHubOutputDataSourceResponseOutput {
	return o
}

func (o EventHubOutputDataSourceResponseOutput) ToEventHubOutputDataSourceResponseOutputWithContext(ctx context.Context) EventHubOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o EventHubOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponseOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubOutputDataSourceResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubOutputDataSourceResponseOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (EventHubOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubOutputDataSourceResponse)(nil)).Elem()
}

func (o EventHubOutputDataSourceResponsePtrOutput) ToEventHubOutputDataSourceResponsePtrOutput() EventHubOutputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubOutputDataSourceResponsePtrOutput) ToEventHubOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) EventHubOutputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubOutputDataSourceResponsePtrOutput) Elem() EventHubOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) EventHubOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret EventHubOutputDataSourceResponse
		return ret
	}).(EventHubOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o EventHubOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponsePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubOutputDataSourceResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubOutputDataSourceResponsePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubOutputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubStreamInputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type string `pulumi:"type"`
}

// EventHubStreamInputDataSourceInput is an input type that accepts EventHubStreamInputDataSourceArgs and EventHubStreamInputDataSourceOutput values.
// You can construct a concrete instance of `EventHubStreamInputDataSourceInput` via:
//
//	EventHubStreamInputDataSourceArgs{...}
type EventHubStreamInputDataSourceInput interface {
	pulumi.Input

	ToEventHubStreamInputDataSourceOutput() EventHubStreamInputDataSourceOutput
	ToEventHubStreamInputDataSourceOutputWithContext(context.Context) EventHubStreamInputDataSourceOutput
}

// Describes an Event Hub input data source that contains stream data.
type EventHubStreamInputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName pulumi.StringPtrInput `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName pulumi.StringPtrInput `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubStreamInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubStreamInputDataSource)(nil)).Elem()
}

func (i EventHubStreamInputDataSourceArgs) ToEventHubStreamInputDataSourceOutput() EventHubStreamInputDataSourceOutput {
	return i.ToEventHubStreamInputDataSourceOutputWithContext(context.Background())
}

func (i EventHubStreamInputDataSourceArgs) ToEventHubStreamInputDataSourceOutputWithContext(ctx context.Context) EventHubStreamInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubStreamInputDataSourceOutput)
}

func (i EventHubStreamInputDataSourceArgs) ToEventHubStreamInputDataSourcePtrOutput() EventHubStreamInputDataSourcePtrOutput {
	return i.ToEventHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i EventHubStreamInputDataSourceArgs) ToEventHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubStreamInputDataSourceOutput).ToEventHubStreamInputDataSourcePtrOutputWithContext(ctx)
}

// EventHubStreamInputDataSourcePtrInput is an input type that accepts EventHubStreamInputDataSourceArgs, EventHubStreamInputDataSourcePtr and EventHubStreamInputDataSourcePtrOutput values.
// You can construct a concrete instance of `EventHubStreamInputDataSourcePtrInput` via:
//
//	        EventHubStreamInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type EventHubStreamInputDataSourcePtrInput interface {
	pulumi.Input

	ToEventHubStreamInputDataSourcePtrOutput() EventHubStreamInputDataSourcePtrOutput
	ToEventHubStreamInputDataSourcePtrOutputWithContext(context.Context) EventHubStreamInputDataSourcePtrOutput
}

type eventHubStreamInputDataSourcePtrType EventHubStreamInputDataSourceArgs

func EventHubStreamInputDataSourcePtr(v *EventHubStreamInputDataSourceArgs) EventHubStreamInputDataSourcePtrInput {
	return (*eventHubStreamInputDataSourcePtrType)(v)
}

func (*eventHubStreamInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubStreamInputDataSource)(nil)).Elem()
}

func (i *eventHubStreamInputDataSourcePtrType) ToEventHubStreamInputDataSourcePtrOutput() EventHubStreamInputDataSourcePtrOutput {
	return i.ToEventHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *eventHubStreamInputDataSourcePtrType) ToEventHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubStreamInputDataSourcePtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubStreamInputDataSourceOutput struct{ *pulumi.OutputState }

func (EventHubStreamInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubStreamInputDataSource)(nil)).Elem()
}

func (o EventHubStreamInputDataSourceOutput) ToEventHubStreamInputDataSourceOutput() EventHubStreamInputDataSourceOutput {
	return o
}

func (o EventHubStreamInputDataSourceOutput) ToEventHubStreamInputDataSourceOutputWithContext(ctx context.Context) EventHubStreamInputDataSourceOutput {
	return o
}

func (o EventHubStreamInputDataSourceOutput) ToEventHubStreamInputDataSourcePtrOutput() EventHubStreamInputDataSourcePtrOutput {
	return o.ToEventHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (o EventHubStreamInputDataSourceOutput) ToEventHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubStreamInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubStreamInputDataSource) *EventHubStreamInputDataSource {
		return &v
	}).(EventHubStreamInputDataSourcePtrOutput)
}

// Authentication Mode.
func (o EventHubStreamInputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubStreamInputDataSourceOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubStreamInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubStreamInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (EventHubStreamInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubStreamInputDataSource)(nil)).Elem()
}

func (o EventHubStreamInputDataSourcePtrOutput) ToEventHubStreamInputDataSourcePtrOutput() EventHubStreamInputDataSourcePtrOutput {
	return o
}

func (o EventHubStreamInputDataSourcePtrOutput) ToEventHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubStreamInputDataSourcePtrOutput {
	return o
}

func (o EventHubStreamInputDataSourcePtrOutput) Elem() EventHubStreamInputDataSourceOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) EventHubStreamInputDataSource {
		if v != nil {
			return *v
		}
		var ret EventHubStreamInputDataSource
		return ret
	}).(EventHubStreamInputDataSourceOutput)
}

// Authentication Mode.
func (o EventHubStreamInputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubStreamInputDataSourcePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourcePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubStreamInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubStreamInputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/EventHub'.
	Type string `pulumi:"type"`
}

// Describes an Event Hub input data source that contains stream data.
type EventHubStreamInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (EventHubStreamInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubStreamInputDataSourceResponse)(nil)).Elem()
}

func (o EventHubStreamInputDataSourceResponseOutput) ToEventHubStreamInputDataSourceResponseOutput() EventHubStreamInputDataSourceResponseOutput {
	return o
}

func (o EventHubStreamInputDataSourceResponseOutput) ToEventHubStreamInputDataSourceResponseOutputWithContext(ctx context.Context) EventHubStreamInputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o EventHubStreamInputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubStreamInputDataSourceResponseOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponseOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubStreamInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubStreamInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubStreamInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (EventHubStreamInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubStreamInputDataSourceResponse)(nil)).Elem()
}

func (o EventHubStreamInputDataSourceResponsePtrOutput) ToEventHubStreamInputDataSourceResponsePtrOutput() EventHubStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubStreamInputDataSourceResponsePtrOutput) ToEventHubStreamInputDataSourceResponsePtrOutputWithContext(ctx context.Context) EventHubStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubStreamInputDataSourceResponsePtrOutput) Elem() EventHubStreamInputDataSourceResponseOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) EventHubStreamInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret EventHubStreamInputDataSourceResponse
		return ret
	}).(EventHubStreamInputDataSourceResponseOutput)
}

// Authentication Mode.
func (o EventHubStreamInputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubStreamInputDataSourceResponsePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponsePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubStreamInputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/EventHub'.
func (o EventHubStreamInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub output data source.
type EventHubV2OutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey *string `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type string `pulumi:"type"`
}

// EventHubV2OutputDataSourceInput is an input type that accepts EventHubV2OutputDataSourceArgs and EventHubV2OutputDataSourceOutput values.
// You can construct a concrete instance of `EventHubV2OutputDataSourceInput` via:
//
//	EventHubV2OutputDataSourceArgs{...}
type EventHubV2OutputDataSourceInput interface {
	pulumi.Input

	ToEventHubV2OutputDataSourceOutput() EventHubV2OutputDataSourceOutput
	ToEventHubV2OutputDataSourceOutputWithContext(context.Context) EventHubV2OutputDataSourceOutput
}

// Describes an Event Hub output data source.
type EventHubV2OutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName pulumi.StringPtrInput `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns pulumi.StringArrayInput `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubV2OutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2OutputDataSource)(nil)).Elem()
}

func (i EventHubV2OutputDataSourceArgs) ToEventHubV2OutputDataSourceOutput() EventHubV2OutputDataSourceOutput {
	return i.ToEventHubV2OutputDataSourceOutputWithContext(context.Background())
}

func (i EventHubV2OutputDataSourceArgs) ToEventHubV2OutputDataSourceOutputWithContext(ctx context.Context) EventHubV2OutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2OutputDataSourceOutput)
}

func (i EventHubV2OutputDataSourceArgs) ToEventHubV2OutputDataSourcePtrOutput() EventHubV2OutputDataSourcePtrOutput {
	return i.ToEventHubV2OutputDataSourcePtrOutputWithContext(context.Background())
}

func (i EventHubV2OutputDataSourceArgs) ToEventHubV2OutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2OutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2OutputDataSourceOutput).ToEventHubV2OutputDataSourcePtrOutputWithContext(ctx)
}

// EventHubV2OutputDataSourcePtrInput is an input type that accepts EventHubV2OutputDataSourceArgs, EventHubV2OutputDataSourcePtr and EventHubV2OutputDataSourcePtrOutput values.
// You can construct a concrete instance of `EventHubV2OutputDataSourcePtrInput` via:
//
//	        EventHubV2OutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type EventHubV2OutputDataSourcePtrInput interface {
	pulumi.Input

	ToEventHubV2OutputDataSourcePtrOutput() EventHubV2OutputDataSourcePtrOutput
	ToEventHubV2OutputDataSourcePtrOutputWithContext(context.Context) EventHubV2OutputDataSourcePtrOutput
}

type eventHubV2OutputDataSourcePtrType EventHubV2OutputDataSourceArgs

func EventHubV2OutputDataSourcePtr(v *EventHubV2OutputDataSourceArgs) EventHubV2OutputDataSourcePtrInput {
	return (*eventHubV2OutputDataSourcePtrType)(v)
}

func (*eventHubV2OutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2OutputDataSource)(nil)).Elem()
}

func (i *eventHubV2OutputDataSourcePtrType) ToEventHubV2OutputDataSourcePtrOutput() EventHubV2OutputDataSourcePtrOutput {
	return i.ToEventHubV2OutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *eventHubV2OutputDataSourcePtrType) ToEventHubV2OutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2OutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2OutputDataSourcePtrOutput)
}

// Describes an Event Hub output data source.
type EventHubV2OutputDataSourceOutput struct{ *pulumi.OutputState }

func (EventHubV2OutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2OutputDataSource)(nil)).Elem()
}

func (o EventHubV2OutputDataSourceOutput) ToEventHubV2OutputDataSourceOutput() EventHubV2OutputDataSourceOutput {
	return o
}

func (o EventHubV2OutputDataSourceOutput) ToEventHubV2OutputDataSourceOutputWithContext(ctx context.Context) EventHubV2OutputDataSourceOutput {
	return o
}

func (o EventHubV2OutputDataSourceOutput) ToEventHubV2OutputDataSourcePtrOutput() EventHubV2OutputDataSourcePtrOutput {
	return o.ToEventHubV2OutputDataSourcePtrOutputWithContext(context.Background())
}

func (o EventHubV2OutputDataSourceOutput) ToEventHubV2OutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2OutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubV2OutputDataSource) *EventHubV2OutputDataSource {
		return &v
	}).(EventHubV2OutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o EventHubV2OutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubV2OutputDataSourceOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubV2OutputDataSourceOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2OutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubV2OutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (EventHubV2OutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2OutputDataSource)(nil)).Elem()
}

func (o EventHubV2OutputDataSourcePtrOutput) ToEventHubV2OutputDataSourcePtrOutput() EventHubV2OutputDataSourcePtrOutput {
	return o
}

func (o EventHubV2OutputDataSourcePtrOutput) ToEventHubV2OutputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2OutputDataSourcePtrOutput {
	return o
}

func (o EventHubV2OutputDataSourcePtrOutput) Elem() EventHubV2OutputDataSourceOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) EventHubV2OutputDataSource {
		if v != nil {
			return *v
		}
		var ret EventHubV2OutputDataSource
		return ret
	}).(EventHubV2OutputDataSourceOutput)
}

// Authentication Mode.
func (o EventHubV2OutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourcePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubV2OutputDataSourcePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubV2OutputDataSourcePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2OutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub output data source.
type EventHubV2OutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The key/column that is used to determine to which partition to send event data.
	PartitionKey *string `pulumi:"partitionKey"`
	// The properties associated with this Event Hub output.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type string `pulumi:"type"`
}

// Describes an Event Hub output data source.
type EventHubV2OutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (EventHubV2OutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2OutputDataSourceResponse)(nil)).Elem()
}

func (o EventHubV2OutputDataSourceResponseOutput) ToEventHubV2OutputDataSourceResponseOutput() EventHubV2OutputDataSourceResponseOutput {
	return o
}

func (o EventHubV2OutputDataSourceResponseOutput) ToEventHubV2OutputDataSourceResponseOutputWithContext(ctx context.Context) EventHubV2OutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o EventHubV2OutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponseOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubV2OutputDataSourceResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubV2OutputDataSourceResponseOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2OutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubV2OutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubV2OutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (EventHubV2OutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2OutputDataSourceResponse)(nil)).Elem()
}

func (o EventHubV2OutputDataSourceResponsePtrOutput) ToEventHubV2OutputDataSourceResponsePtrOutput() EventHubV2OutputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubV2OutputDataSourceResponsePtrOutput) ToEventHubV2OutputDataSourceResponsePtrOutputWithContext(ctx context.Context) EventHubV2OutputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubV2OutputDataSourceResponsePtrOutput) Elem() EventHubV2OutputDataSourceResponseOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) EventHubV2OutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret EventHubV2OutputDataSourceResponse
		return ret
	}).(EventHubV2OutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o EventHubV2OutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponsePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The key/column that is used to determine to which partition to send event data.
func (o EventHubV2OutputDataSourceResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// The properties associated with this Event Hub output.
func (o EventHubV2OutputDataSourceResponsePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2OutputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2OutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2OutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubV2StreamInputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type string `pulumi:"type"`
}

// EventHubV2StreamInputDataSourceInput is an input type that accepts EventHubV2StreamInputDataSourceArgs and EventHubV2StreamInputDataSourceOutput values.
// You can construct a concrete instance of `EventHubV2StreamInputDataSourceInput` via:
//
//	EventHubV2StreamInputDataSourceArgs{...}
type EventHubV2StreamInputDataSourceInput interface {
	pulumi.Input

	ToEventHubV2StreamInputDataSourceOutput() EventHubV2StreamInputDataSourceOutput
	ToEventHubV2StreamInputDataSourceOutputWithContext(context.Context) EventHubV2StreamInputDataSourceOutput
}

// Describes an Event Hub input data source that contains stream data.
type EventHubV2StreamInputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName pulumi.StringPtrInput `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName pulumi.StringPtrInput `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (EventHubV2StreamInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2StreamInputDataSource)(nil)).Elem()
}

func (i EventHubV2StreamInputDataSourceArgs) ToEventHubV2StreamInputDataSourceOutput() EventHubV2StreamInputDataSourceOutput {
	return i.ToEventHubV2StreamInputDataSourceOutputWithContext(context.Background())
}

func (i EventHubV2StreamInputDataSourceArgs) ToEventHubV2StreamInputDataSourceOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2StreamInputDataSourceOutput)
}

func (i EventHubV2StreamInputDataSourceArgs) ToEventHubV2StreamInputDataSourcePtrOutput() EventHubV2StreamInputDataSourcePtrOutput {
	return i.ToEventHubV2StreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i EventHubV2StreamInputDataSourceArgs) ToEventHubV2StreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2StreamInputDataSourceOutput).ToEventHubV2StreamInputDataSourcePtrOutputWithContext(ctx)
}

// EventHubV2StreamInputDataSourcePtrInput is an input type that accepts EventHubV2StreamInputDataSourceArgs, EventHubV2StreamInputDataSourcePtr and EventHubV2StreamInputDataSourcePtrOutput values.
// You can construct a concrete instance of `EventHubV2StreamInputDataSourcePtrInput` via:
//
//	        EventHubV2StreamInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type EventHubV2StreamInputDataSourcePtrInput interface {
	pulumi.Input

	ToEventHubV2StreamInputDataSourcePtrOutput() EventHubV2StreamInputDataSourcePtrOutput
	ToEventHubV2StreamInputDataSourcePtrOutputWithContext(context.Context) EventHubV2StreamInputDataSourcePtrOutput
}

type eventHubV2StreamInputDataSourcePtrType EventHubV2StreamInputDataSourceArgs

func EventHubV2StreamInputDataSourcePtr(v *EventHubV2StreamInputDataSourceArgs) EventHubV2StreamInputDataSourcePtrInput {
	return (*eventHubV2StreamInputDataSourcePtrType)(v)
}

func (*eventHubV2StreamInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2StreamInputDataSource)(nil)).Elem()
}

func (i *eventHubV2StreamInputDataSourcePtrType) ToEventHubV2StreamInputDataSourcePtrOutput() EventHubV2StreamInputDataSourcePtrOutput {
	return i.ToEventHubV2StreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *eventHubV2StreamInputDataSourcePtrType) ToEventHubV2StreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubV2StreamInputDataSourcePtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubV2StreamInputDataSourceOutput struct{ *pulumi.OutputState }

func (EventHubV2StreamInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2StreamInputDataSource)(nil)).Elem()
}

func (o EventHubV2StreamInputDataSourceOutput) ToEventHubV2StreamInputDataSourceOutput() EventHubV2StreamInputDataSourceOutput {
	return o
}

func (o EventHubV2StreamInputDataSourceOutput) ToEventHubV2StreamInputDataSourceOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourceOutput {
	return o
}

func (o EventHubV2StreamInputDataSourceOutput) ToEventHubV2StreamInputDataSourcePtrOutput() EventHubV2StreamInputDataSourcePtrOutput {
	return o.ToEventHubV2StreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (o EventHubV2StreamInputDataSourceOutput) ToEventHubV2StreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventHubV2StreamInputDataSource) *EventHubV2StreamInputDataSource {
		return &v
	}).(EventHubV2StreamInputDataSourcePtrOutput)
}

// Authentication Mode.
func (o EventHubV2StreamInputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubV2StreamInputDataSourceOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2StreamInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubV2StreamInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (EventHubV2StreamInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2StreamInputDataSource)(nil)).Elem()
}

func (o EventHubV2StreamInputDataSourcePtrOutput) ToEventHubV2StreamInputDataSourcePtrOutput() EventHubV2StreamInputDataSourcePtrOutput {
	return o
}

func (o EventHubV2StreamInputDataSourcePtrOutput) ToEventHubV2StreamInputDataSourcePtrOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourcePtrOutput {
	return o
}

func (o EventHubV2StreamInputDataSourcePtrOutput) Elem() EventHubV2StreamInputDataSourceOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) EventHubV2StreamInputDataSource {
		if v != nil {
			return *v
		}
		var ret EventHubV2StreamInputDataSource
		return ret
	}).(EventHubV2StreamInputDataSourceOutput)
}

// Authentication Mode.
func (o EventHubV2StreamInputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubV2StreamInputDataSourcePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourcePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2StreamInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an Event Hub input data source that contains stream data.
type EventHubV2StreamInputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
	EventHubName *string `pulumi:"eventHubName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.EventHub/EventHub'.
	Type string `pulumi:"type"`
}

// Describes an Event Hub input data source that contains stream data.
type EventHubV2StreamInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (EventHubV2StreamInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubV2StreamInputDataSourceResponse)(nil)).Elem()
}

func (o EventHubV2StreamInputDataSourceResponseOutput) ToEventHubV2StreamInputDataSourceResponseOutput() EventHubV2StreamInputDataSourceResponseOutput {
	return o
}

func (o EventHubV2StreamInputDataSourceResponseOutput) ToEventHubV2StreamInputDataSourceResponseOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o EventHubV2StreamInputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubV2StreamInputDataSourceResponseOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponseOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.EventHubName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2StreamInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubV2StreamInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type EventHubV2StreamInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (EventHubV2StreamInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventHubV2StreamInputDataSourceResponse)(nil)).Elem()
}

func (o EventHubV2StreamInputDataSourceResponsePtrOutput) ToEventHubV2StreamInputDataSourceResponsePtrOutput() EventHubV2StreamInputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubV2StreamInputDataSourceResponsePtrOutput) ToEventHubV2StreamInputDataSourceResponsePtrOutputWithContext(ctx context.Context) EventHubV2StreamInputDataSourceResponsePtrOutput {
	return o
}

func (o EventHubV2StreamInputDataSourceResponsePtrOutput) Elem() EventHubV2StreamInputDataSourceResponseOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) EventHubV2StreamInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret EventHubV2StreamInputDataSourceResponse
		return ret
	}).(EventHubV2StreamInputDataSourceResponseOutput)
}

// Authentication Mode.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of an Event Hub Consumer Group that should be used to read events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows each of those inputs to receive the same events from the Event Hub. If not specified, the input uses the Event Hub’s default consumer group.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) EventHubName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.EventHubName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.EventHub/EventHub'.
func (o EventHubV2StreamInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventHubV2StreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a file input data source that contains reference data.
type FileReferenceInputDataSource struct {
	// The path of the file.
	Path *string `pulumi:"path"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'File'.
	Type string `pulumi:"type"`
}

// FileReferenceInputDataSourceInput is an input type that accepts FileReferenceInputDataSourceArgs and FileReferenceInputDataSourceOutput values.
// You can construct a concrete instance of `FileReferenceInputDataSourceInput` via:
//
//	FileReferenceInputDataSourceArgs{...}
type FileReferenceInputDataSourceInput interface {
	pulumi.Input

	ToFileReferenceInputDataSourceOutput() FileReferenceInputDataSourceOutput
	ToFileReferenceInputDataSourceOutputWithContext(context.Context) FileReferenceInputDataSourceOutput
}

// Describes a file input data source that contains reference data.
type FileReferenceInputDataSourceArgs struct {
	// The path of the file.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'File'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FileReferenceInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileReferenceInputDataSource)(nil)).Elem()
}

func (i FileReferenceInputDataSourceArgs) ToFileReferenceInputDataSourceOutput() FileReferenceInputDataSourceOutput {
	return i.ToFileReferenceInputDataSourceOutputWithContext(context.Background())
}

func (i FileReferenceInputDataSourceArgs) ToFileReferenceInputDataSourceOutputWithContext(ctx context.Context) FileReferenceInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceInputDataSourceOutput)
}

func (i FileReferenceInputDataSourceArgs) ToFileReferenceInputDataSourcePtrOutput() FileReferenceInputDataSourcePtrOutput {
	return i.ToFileReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i FileReferenceInputDataSourceArgs) ToFileReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) FileReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceInputDataSourceOutput).ToFileReferenceInputDataSourcePtrOutputWithContext(ctx)
}

// FileReferenceInputDataSourcePtrInput is an input type that accepts FileReferenceInputDataSourceArgs, FileReferenceInputDataSourcePtr and FileReferenceInputDataSourcePtrOutput values.
// You can construct a concrete instance of `FileReferenceInputDataSourcePtrInput` via:
//
//	        FileReferenceInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type FileReferenceInputDataSourcePtrInput interface {
	pulumi.Input

	ToFileReferenceInputDataSourcePtrOutput() FileReferenceInputDataSourcePtrOutput
	ToFileReferenceInputDataSourcePtrOutputWithContext(context.Context) FileReferenceInputDataSourcePtrOutput
}

type fileReferenceInputDataSourcePtrType FileReferenceInputDataSourceArgs

func FileReferenceInputDataSourcePtr(v *FileReferenceInputDataSourceArgs) FileReferenceInputDataSourcePtrInput {
	return (*fileReferenceInputDataSourcePtrType)(v)
}

func (*fileReferenceInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileReferenceInputDataSource)(nil)).Elem()
}

func (i *fileReferenceInputDataSourcePtrType) ToFileReferenceInputDataSourcePtrOutput() FileReferenceInputDataSourcePtrOutput {
	return i.ToFileReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *fileReferenceInputDataSourcePtrType) ToFileReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) FileReferenceInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileReferenceInputDataSourcePtrOutput)
}

// Describes a file input data source that contains reference data.
type FileReferenceInputDataSourceOutput struct{ *pulumi.OutputState }

func (FileReferenceInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileReferenceInputDataSource)(nil)).Elem()
}

func (o FileReferenceInputDataSourceOutput) ToFileReferenceInputDataSourceOutput() FileReferenceInputDataSourceOutput {
	return o
}

func (o FileReferenceInputDataSourceOutput) ToFileReferenceInputDataSourceOutputWithContext(ctx context.Context) FileReferenceInputDataSourceOutput {
	return o
}

func (o FileReferenceInputDataSourceOutput) ToFileReferenceInputDataSourcePtrOutput() FileReferenceInputDataSourcePtrOutput {
	return o.ToFileReferenceInputDataSourcePtrOutputWithContext(context.Background())
}

func (o FileReferenceInputDataSourceOutput) ToFileReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) FileReferenceInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileReferenceInputDataSource) *FileReferenceInputDataSource {
		return &v
	}).(FileReferenceInputDataSourcePtrOutput)
}

// The path of the file.
func (o FileReferenceInputDataSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileReferenceInputDataSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'File'.
func (o FileReferenceInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileReferenceInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type FileReferenceInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (FileReferenceInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileReferenceInputDataSource)(nil)).Elem()
}

func (o FileReferenceInputDataSourcePtrOutput) ToFileReferenceInputDataSourcePtrOutput() FileReferenceInputDataSourcePtrOutput {
	return o
}

func (o FileReferenceInputDataSourcePtrOutput) ToFileReferenceInputDataSourcePtrOutputWithContext(ctx context.Context) FileReferenceInputDataSourcePtrOutput {
	return o
}

func (o FileReferenceInputDataSourcePtrOutput) Elem() FileReferenceInputDataSourceOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSource) FileReferenceInputDataSource {
		if v != nil {
			return *v
		}
		var ret FileReferenceInputDataSource
		return ret
	}).(FileReferenceInputDataSourceOutput)
}

// The path of the file.
func (o FileReferenceInputDataSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'File'.
func (o FileReferenceInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a file input data source that contains reference data.
type FileReferenceInputDataSourceResponse struct {
	// The path of the file.
	Path *string `pulumi:"path"`
	// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'File'.
	Type string `pulumi:"type"`
}

// Describes a file input data source that contains reference data.
type FileReferenceInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (FileReferenceInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o FileReferenceInputDataSourceResponseOutput) ToFileReferenceInputDataSourceResponseOutput() FileReferenceInputDataSourceResponseOutput {
	return o
}

func (o FileReferenceInputDataSourceResponseOutput) ToFileReferenceInputDataSourceResponseOutputWithContext(ctx context.Context) FileReferenceInputDataSourceResponseOutput {
	return o
}

// The path of the file.
func (o FileReferenceInputDataSourceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileReferenceInputDataSourceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'File'.
func (o FileReferenceInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FileReferenceInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FileReferenceInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (FileReferenceInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileReferenceInputDataSourceResponse)(nil)).Elem()
}

func (o FileReferenceInputDataSourceResponsePtrOutput) ToFileReferenceInputDataSourceResponsePtrOutput() FileReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o FileReferenceInputDataSourceResponsePtrOutput) ToFileReferenceInputDataSourceResponsePtrOutputWithContext(ctx context.Context) FileReferenceInputDataSourceResponsePtrOutput {
	return o
}

func (o FileReferenceInputDataSourceResponsePtrOutput) Elem() FileReferenceInputDataSourceResponseOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSourceResponse) FileReferenceInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret FileReferenceInputDataSourceResponse
		return ret
	}).(FileReferenceInputDataSourceResponseOutput)
}

// The path of the file.
func (o FileReferenceInputDataSourceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'File'.
func (o FileReferenceInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileReferenceInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionType struct {
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with a function.
	Properties interface{} `pulumi:"properties"`
}

// FunctionTypeInput is an input type that accepts FunctionTypeArgs and FunctionTypeOutput values.
// You can construct a concrete instance of `FunctionTypeInput` via:
//
//	FunctionTypeArgs{...}
type FunctionTypeInput interface {
	pulumi.Input

	ToFunctionTypeOutput() FunctionTypeOutput
	ToFunctionTypeOutputWithContext(context.Context) FunctionTypeOutput
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionTypeArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with a function.
	Properties pulumi.Input `pulumi:"properties"`
}

func (FunctionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (i FunctionTypeArgs) ToFunctionTypeOutput() FunctionTypeOutput {
	return i.ToFunctionTypeOutputWithContext(context.Background())
}

func (i FunctionTypeArgs) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTypeOutput)
}

// FunctionTypeArrayInput is an input type that accepts FunctionTypeArray and FunctionTypeArrayOutput values.
// You can construct a concrete instance of `FunctionTypeArrayInput` via:
//
//	FunctionTypeArray{ FunctionTypeArgs{...} }
type FunctionTypeArrayInput interface {
	pulumi.Input

	ToFunctionTypeArrayOutput() FunctionTypeArrayOutput
	ToFunctionTypeArrayOutputWithContext(context.Context) FunctionTypeArrayOutput
}

type FunctionTypeArray []FunctionTypeInput

func (FunctionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionType)(nil)).Elem()
}

func (i FunctionTypeArray) ToFunctionTypeArrayOutput() FunctionTypeArrayOutput {
	return i.ToFunctionTypeArrayOutputWithContext(context.Background())
}

func (i FunctionTypeArray) ToFunctionTypeArrayOutputWithContext(ctx context.Context) FunctionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionTypeArrayOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionTypeOutput struct{ *pulumi.OutputState }

func (FunctionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionType)(nil)).Elem()
}

func (o FunctionTypeOutput) ToFunctionTypeOutput() FunctionTypeOutput {
	return o
}

func (o FunctionTypeOutput) ToFunctionTypeOutputWithContext(ctx context.Context) FunctionTypeOutput {
	return o
}

// Resource name
func (o FunctionTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with a function.
func (o FunctionTypeOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v FunctionType) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

type FunctionTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionType)(nil)).Elem()
}

func (o FunctionTypeArrayOutput) ToFunctionTypeArrayOutput() FunctionTypeArrayOutput {
	return o
}

func (o FunctionTypeArrayOutput) ToFunctionTypeArrayOutputWithContext(ctx context.Context) FunctionTypeArrayOutput {
	return o
}

func (o FunctionTypeArrayOutput) Index(i pulumi.IntInput) FunctionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionType {
		return vs[0].([]FunctionType)[vs[1].(int)]
	}).(FunctionTypeOutput)
}

// Describes one input parameter of a function.
type FunctionInputType struct {
	// The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType *string `pulumi:"dataType"`
	// A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false.
	IsConfigurationParameter *bool `pulumi:"isConfigurationParameter"`
}

// FunctionInputTypeInput is an input type that accepts FunctionInputTypeArgs and FunctionInputTypeOutput values.
// You can construct a concrete instance of `FunctionInputTypeInput` via:
//
//	FunctionInputTypeArgs{...}
type FunctionInputTypeInput interface {
	pulumi.Input

	ToFunctionInputTypeOutput() FunctionInputTypeOutput
	ToFunctionInputTypeOutputWithContext(context.Context) FunctionInputTypeOutput
}

// Describes one input parameter of a function.
type FunctionInputTypeArgs struct {
	// The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false.
	IsConfigurationParameter pulumi.BoolPtrInput `pulumi:"isConfigurationParameter"`
}

func (FunctionInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionInputType)(nil)).Elem()
}

func (i FunctionInputTypeArgs) ToFunctionInputTypeOutput() FunctionInputTypeOutput {
	return i.ToFunctionInputTypeOutputWithContext(context.Background())
}

func (i FunctionInputTypeArgs) ToFunctionInputTypeOutputWithContext(ctx context.Context) FunctionInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionInputTypeOutput)
}

// FunctionInputTypeArrayInput is an input type that accepts FunctionInputTypeArray and FunctionInputTypeArrayOutput values.
// You can construct a concrete instance of `FunctionInputTypeArrayInput` via:
//
//	FunctionInputTypeArray{ FunctionInputTypeArgs{...} }
type FunctionInputTypeArrayInput interface {
	pulumi.Input

	ToFunctionInputTypeArrayOutput() FunctionInputTypeArrayOutput
	ToFunctionInputTypeArrayOutputWithContext(context.Context) FunctionInputTypeArrayOutput
}

type FunctionInputTypeArray []FunctionInputTypeInput

func (FunctionInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionInputType)(nil)).Elem()
}

func (i FunctionInputTypeArray) ToFunctionInputTypeArrayOutput() FunctionInputTypeArrayOutput {
	return i.ToFunctionInputTypeArrayOutputWithContext(context.Background())
}

func (i FunctionInputTypeArray) ToFunctionInputTypeArrayOutputWithContext(ctx context.Context) FunctionInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionInputTypeArrayOutput)
}

// Describes one input parameter of a function.
type FunctionInputTypeOutput struct{ *pulumi.OutputState }

func (FunctionInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionInputType)(nil)).Elem()
}

func (o FunctionInputTypeOutput) ToFunctionInputTypeOutput() FunctionInputTypeOutput {
	return o
}

func (o FunctionInputTypeOutput) ToFunctionInputTypeOutputWithContext(ctx context.Context) FunctionInputTypeOutput {
	return o
}

// The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionInputTypeOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionInputType) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false.
func (o FunctionInputTypeOutput) IsConfigurationParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionInputType) *bool { return v.IsConfigurationParameter }).(pulumi.BoolPtrOutput)
}

type FunctionInputTypeArrayOutput struct{ *pulumi.OutputState }

func (FunctionInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionInputType)(nil)).Elem()
}

func (o FunctionInputTypeArrayOutput) ToFunctionInputTypeArrayOutput() FunctionInputTypeArrayOutput {
	return o
}

func (o FunctionInputTypeArrayOutput) ToFunctionInputTypeArrayOutputWithContext(ctx context.Context) FunctionInputTypeArrayOutput {
	return o
}

func (o FunctionInputTypeArrayOutput) Index(i pulumi.IntInput) FunctionInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionInputType {
		return vs[0].([]FunctionInputType)[vs[1].(int)]
	}).(FunctionInputTypeOutput)
}

// Describes one input parameter of a function.
type FunctionInputResponse struct {
	// The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType *string `pulumi:"dataType"`
	// A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false.
	IsConfigurationParameter *bool `pulumi:"isConfigurationParameter"`
}

// Describes one input parameter of a function.
type FunctionInputResponseOutput struct{ *pulumi.OutputState }

func (FunctionInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionInputResponse)(nil)).Elem()
}

func (o FunctionInputResponseOutput) ToFunctionInputResponseOutput() FunctionInputResponseOutput {
	return o
}

func (o FunctionInputResponseOutput) ToFunctionInputResponseOutputWithContext(ctx context.Context) FunctionInputResponseOutput {
	return o
}

// The (Azure Stream Analytics supported) data type of the function input parameter. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionInputResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionInputResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// A flag indicating if the parameter is a configuration parameter. True if this input parameter is expected to be a constant. Default is false.
func (o FunctionInputResponseOutput) IsConfigurationParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FunctionInputResponse) *bool { return v.IsConfigurationParameter }).(pulumi.BoolPtrOutput)
}

type FunctionInputResponseArrayOutput struct{ *pulumi.OutputState }

func (FunctionInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionInputResponse)(nil)).Elem()
}

func (o FunctionInputResponseArrayOutput) ToFunctionInputResponseArrayOutput() FunctionInputResponseArrayOutput {
	return o
}

func (o FunctionInputResponseArrayOutput) ToFunctionInputResponseArrayOutputWithContext(ctx context.Context) FunctionInputResponseArrayOutput {
	return o
}

func (o FunctionInputResponseArrayOutput) Index(i pulumi.IntInput) FunctionInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionInputResponse {
		return vs[0].([]FunctionInputResponse)[vs[1].(int)]
	}).(FunctionInputResponseOutput)
}

// Describes the output of a function.
type FunctionOutputType struct {
	// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType *string `pulumi:"dataType"`
}

// FunctionOutputTypeInput is an input type that accepts FunctionOutputTypeArgs and FunctionOutputTypeOutput values.
// You can construct a concrete instance of `FunctionOutputTypeInput` via:
//
//	FunctionOutputTypeArgs{...}
type FunctionOutputTypeInput interface {
	pulumi.Input

	ToFunctionOutputTypeOutput() FunctionOutputTypeOutput
	ToFunctionOutputTypeOutputWithContext(context.Context) FunctionOutputTypeOutput
}

// Describes the output of a function.
type FunctionOutputTypeArgs struct {
	// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
}

func (FunctionOutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionOutputType)(nil)).Elem()
}

func (i FunctionOutputTypeArgs) ToFunctionOutputTypeOutput() FunctionOutputTypeOutput {
	return i.ToFunctionOutputTypeOutputWithContext(context.Background())
}

func (i FunctionOutputTypeArgs) ToFunctionOutputTypeOutputWithContext(ctx context.Context) FunctionOutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutputTypeOutput)
}

func (i FunctionOutputTypeArgs) ToFunctionOutputTypePtrOutput() FunctionOutputTypePtrOutput {
	return i.ToFunctionOutputTypePtrOutputWithContext(context.Background())
}

func (i FunctionOutputTypeArgs) ToFunctionOutputTypePtrOutputWithContext(ctx context.Context) FunctionOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutputTypeOutput).ToFunctionOutputTypePtrOutputWithContext(ctx)
}

// FunctionOutputTypePtrInput is an input type that accepts FunctionOutputTypeArgs, FunctionOutputTypePtr and FunctionOutputTypePtrOutput values.
// You can construct a concrete instance of `FunctionOutputTypePtrInput` via:
//
//	        FunctionOutputTypeArgs{...}
//
//	or:
//
//	        nil
type FunctionOutputTypePtrInput interface {
	pulumi.Input

	ToFunctionOutputTypePtrOutput() FunctionOutputTypePtrOutput
	ToFunctionOutputTypePtrOutputWithContext(context.Context) FunctionOutputTypePtrOutput
}

type functionOutputTypePtrType FunctionOutputTypeArgs

func FunctionOutputTypePtr(v *FunctionOutputTypeArgs) FunctionOutputTypePtrInput {
	return (*functionOutputTypePtrType)(v)
}

func (*functionOutputTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionOutputType)(nil)).Elem()
}

func (i *functionOutputTypePtrType) ToFunctionOutputTypePtrOutput() FunctionOutputTypePtrOutput {
	return i.ToFunctionOutputTypePtrOutputWithContext(context.Background())
}

func (i *functionOutputTypePtrType) ToFunctionOutputTypePtrOutputWithContext(ctx context.Context) FunctionOutputTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutputTypePtrOutput)
}

// Describes the output of a function.
type FunctionOutputTypeOutput struct{ *pulumi.OutputState }

func (FunctionOutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionOutputType)(nil)).Elem()
}

func (o FunctionOutputTypeOutput) ToFunctionOutputTypeOutput() FunctionOutputTypeOutput {
	return o
}

func (o FunctionOutputTypeOutput) ToFunctionOutputTypeOutputWithContext(ctx context.Context) FunctionOutputTypeOutput {
	return o
}

func (o FunctionOutputTypeOutput) ToFunctionOutputTypePtrOutput() FunctionOutputTypePtrOutput {
	return o.ToFunctionOutputTypePtrOutputWithContext(context.Background())
}

func (o FunctionOutputTypeOutput) ToFunctionOutputTypePtrOutputWithContext(ctx context.Context) FunctionOutputTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FunctionOutputType) *FunctionOutputType {
		return &v
	}).(FunctionOutputTypePtrOutput)
}

// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionOutputTypeOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionOutputType) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type FunctionOutputTypePtrOutput struct{ *pulumi.OutputState }

func (FunctionOutputTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionOutputType)(nil)).Elem()
}

func (o FunctionOutputTypePtrOutput) ToFunctionOutputTypePtrOutput() FunctionOutputTypePtrOutput {
	return o
}

func (o FunctionOutputTypePtrOutput) ToFunctionOutputTypePtrOutputWithContext(ctx context.Context) FunctionOutputTypePtrOutput {
	return o
}

func (o FunctionOutputTypePtrOutput) Elem() FunctionOutputTypeOutput {
	return o.ApplyT(func(v *FunctionOutputType) FunctionOutputType {
		if v != nil {
			return *v
		}
		var ret FunctionOutputType
		return ret
	}).(FunctionOutputTypeOutput)
}

// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionOutputTypePtrOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionOutputType) *string {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// Describes the output of a function.
type FunctionOutputResponse struct {
	// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
	DataType *string `pulumi:"dataType"`
}

// Describes the output of a function.
type FunctionOutputResponseOutput struct{ *pulumi.OutputState }

func (FunctionOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionOutputResponse)(nil)).Elem()
}

func (o FunctionOutputResponseOutput) ToFunctionOutputResponseOutput() FunctionOutputResponseOutput {
	return o
}

func (o FunctionOutputResponseOutput) ToFunctionOutputResponseOutputWithContext(ctx context.Context) FunctionOutputResponseOutput {
	return o
}

// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionOutputResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionOutputResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type FunctionOutputResponsePtrOutput struct{ *pulumi.OutputState }

func (FunctionOutputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionOutputResponse)(nil)).Elem()
}

func (o FunctionOutputResponsePtrOutput) ToFunctionOutputResponsePtrOutput() FunctionOutputResponsePtrOutput {
	return o
}

func (o FunctionOutputResponsePtrOutput) ToFunctionOutputResponsePtrOutputWithContext(ctx context.Context) FunctionOutputResponsePtrOutput {
	return o
}

func (o FunctionOutputResponsePtrOutput) Elem() FunctionOutputResponseOutput {
	return o.ApplyT(func(v *FunctionOutputResponse) FunctionOutputResponse {
		if v != nil {
			return *v
		}
		var ret FunctionOutputResponse
		return ret
	}).(FunctionOutputResponseOutput)
}

// The (Azure Stream Analytics supported) data type of the function output. A list of valid Azure Stream Analytics data types are described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
func (o FunctionOutputResponsePtrOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionOutputResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataType
	}).(pulumi.StringPtrOutput)
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with a function.
	Properties interface{} `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// A function object, containing all information associated with the named function. All functions are contained under a streaming job.
type FunctionResponseOutput struct{ *pulumi.OutputState }

func (FunctionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionResponse)(nil)).Elem()
}

func (o FunctionResponseOutput) ToFunctionResponseOutput() FunctionResponseOutput {
	return o
}

func (o FunctionResponseOutput) ToFunctionResponseOutputWithContext(ctx context.Context) FunctionResponseOutput {
	return o
}

// Resource Id
func (o FunctionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o FunctionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with a function.
func (o FunctionResponseOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v FunctionResponse) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Resource type
func (o FunctionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type FunctionResponseArrayOutput struct{ *pulumi.OutputState }

func (FunctionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FunctionResponse)(nil)).Elem()
}

func (o FunctionResponseArrayOutput) ToFunctionResponseArrayOutput() FunctionResponseArrayOutput {
	return o
}

func (o FunctionResponseArrayOutput) ToFunctionResponseArrayOutputWithContext(ctx context.Context) FunctionResponseArrayOutput {
	return o
}

func (o FunctionResponseArrayOutput) Index(i pulumi.IntInput) FunctionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FunctionResponse {
		return vs[0].([]FunctionResponse)[vs[1].(int)]
	}).(FunctionResponseOutput)
}

// Describes a Gateway Message Bus output data source.
type GatewayMessageBusOutputDataSource struct {
	// The name of the Service Bus topic.
	Topic *string `pulumi:"topic"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type string `pulumi:"type"`
}

// GatewayMessageBusOutputDataSourceInput is an input type that accepts GatewayMessageBusOutputDataSourceArgs and GatewayMessageBusOutputDataSourceOutput values.
// You can construct a concrete instance of `GatewayMessageBusOutputDataSourceInput` via:
//
//	GatewayMessageBusOutputDataSourceArgs{...}
type GatewayMessageBusOutputDataSourceInput interface {
	pulumi.Input

	ToGatewayMessageBusOutputDataSourceOutput() GatewayMessageBusOutputDataSourceOutput
	ToGatewayMessageBusOutputDataSourceOutputWithContext(context.Context) GatewayMessageBusOutputDataSourceOutput
}

// Describes a Gateway Message Bus output data source.
type GatewayMessageBusOutputDataSourceArgs struct {
	// The name of the Service Bus topic.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GatewayMessageBusOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusOutputDataSource)(nil)).Elem()
}

func (i GatewayMessageBusOutputDataSourceArgs) ToGatewayMessageBusOutputDataSourceOutput() GatewayMessageBusOutputDataSourceOutput {
	return i.ToGatewayMessageBusOutputDataSourceOutputWithContext(context.Background())
}

func (i GatewayMessageBusOutputDataSourceArgs) ToGatewayMessageBusOutputDataSourceOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusOutputDataSourceOutput)
}

func (i GatewayMessageBusOutputDataSourceArgs) ToGatewayMessageBusOutputDataSourcePtrOutput() GatewayMessageBusOutputDataSourcePtrOutput {
	return i.ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i GatewayMessageBusOutputDataSourceArgs) ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusOutputDataSourceOutput).ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(ctx)
}

// GatewayMessageBusOutputDataSourcePtrInput is an input type that accepts GatewayMessageBusOutputDataSourceArgs, GatewayMessageBusOutputDataSourcePtr and GatewayMessageBusOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `GatewayMessageBusOutputDataSourcePtrInput` via:
//
//	        GatewayMessageBusOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type GatewayMessageBusOutputDataSourcePtrInput interface {
	pulumi.Input

	ToGatewayMessageBusOutputDataSourcePtrOutput() GatewayMessageBusOutputDataSourcePtrOutput
	ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(context.Context) GatewayMessageBusOutputDataSourcePtrOutput
}

type gatewayMessageBusOutputDataSourcePtrType GatewayMessageBusOutputDataSourceArgs

func GatewayMessageBusOutputDataSourcePtr(v *GatewayMessageBusOutputDataSourceArgs) GatewayMessageBusOutputDataSourcePtrInput {
	return (*gatewayMessageBusOutputDataSourcePtrType)(v)
}

func (*gatewayMessageBusOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusOutputDataSource)(nil)).Elem()
}

func (i *gatewayMessageBusOutputDataSourcePtrType) ToGatewayMessageBusOutputDataSourcePtrOutput() GatewayMessageBusOutputDataSourcePtrOutput {
	return i.ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *gatewayMessageBusOutputDataSourcePtrType) ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusOutputDataSourcePtrOutput)
}

// Describes a Gateway Message Bus output data source.
type GatewayMessageBusOutputDataSourceOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusOutputDataSource)(nil)).Elem()
}

func (o GatewayMessageBusOutputDataSourceOutput) ToGatewayMessageBusOutputDataSourceOutput() GatewayMessageBusOutputDataSourceOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourceOutput) ToGatewayMessageBusOutputDataSourceOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourceOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourceOutput) ToGatewayMessageBusOutputDataSourcePtrOutput() GatewayMessageBusOutputDataSourcePtrOutput {
	return o.ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o GatewayMessageBusOutputDataSourceOutput) ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayMessageBusOutputDataSource) *GatewayMessageBusOutputDataSource {
		return &v
	}).(GatewayMessageBusOutputDataSourcePtrOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusOutputDataSourceOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewayMessageBusOutputDataSource) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayMessageBusOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type GatewayMessageBusOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusOutputDataSource)(nil)).Elem()
}

func (o GatewayMessageBusOutputDataSourcePtrOutput) ToGatewayMessageBusOutputDataSourcePtrOutput() GatewayMessageBusOutputDataSourcePtrOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourcePtrOutput) ToGatewayMessageBusOutputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourcePtrOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourcePtrOutput) Elem() GatewayMessageBusOutputDataSourceOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSource) GatewayMessageBusOutputDataSource {
		if v != nil {
			return *v
		}
		var ret GatewayMessageBusOutputDataSource
		return ret
	}).(GatewayMessageBusOutputDataSourceOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusOutputDataSourcePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Gateway Message Bus output data source.
type GatewayMessageBusOutputDataSourceResponse struct {
	// The name of the Service Bus topic.
	Topic *string `pulumi:"topic"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type string `pulumi:"type"`
}

// Describes a Gateway Message Bus output data source.
type GatewayMessageBusOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusOutputDataSourceResponse)(nil)).Elem()
}

func (o GatewayMessageBusOutputDataSourceResponseOutput) ToGatewayMessageBusOutputDataSourceResponseOutput() GatewayMessageBusOutputDataSourceResponseOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourceResponseOutput) ToGatewayMessageBusOutputDataSourceResponseOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourceResponseOutput {
	return o
}

// The name of the Service Bus topic.
func (o GatewayMessageBusOutputDataSourceResponseOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewayMessageBusOutputDataSourceResponse) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayMessageBusOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GatewayMessageBusOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusOutputDataSourceResponse)(nil)).Elem()
}

func (o GatewayMessageBusOutputDataSourceResponsePtrOutput) ToGatewayMessageBusOutputDataSourceResponsePtrOutput() GatewayMessageBusOutputDataSourceResponsePtrOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourceResponsePtrOutput) ToGatewayMessageBusOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) GatewayMessageBusOutputDataSourceResponsePtrOutput {
	return o
}

func (o GatewayMessageBusOutputDataSourceResponsePtrOutput) Elem() GatewayMessageBusOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSourceResponse) GatewayMessageBusOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret GatewayMessageBusOutputDataSourceResponse
		return ret
	}).(GatewayMessageBusOutputDataSourceResponseOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusOutputDataSourceResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains stream data.
type GatewayMessageBusStreamInputDataSource struct {
	// The name of the Service Bus topic.
	Topic *string `pulumi:"topic"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type string `pulumi:"type"`
}

// GatewayMessageBusStreamInputDataSourceInput is an input type that accepts GatewayMessageBusStreamInputDataSourceArgs and GatewayMessageBusStreamInputDataSourceOutput values.
// You can construct a concrete instance of `GatewayMessageBusStreamInputDataSourceInput` via:
//
//	GatewayMessageBusStreamInputDataSourceArgs{...}
type GatewayMessageBusStreamInputDataSourceInput interface {
	pulumi.Input

	ToGatewayMessageBusStreamInputDataSourceOutput() GatewayMessageBusStreamInputDataSourceOutput
	ToGatewayMessageBusStreamInputDataSourceOutputWithContext(context.Context) GatewayMessageBusStreamInputDataSourceOutput
}

// Describes a blob input data source that contains stream data.
type GatewayMessageBusStreamInputDataSourceArgs struct {
	// The name of the Service Bus topic.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GatewayMessageBusStreamInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusStreamInputDataSource)(nil)).Elem()
}

func (i GatewayMessageBusStreamInputDataSourceArgs) ToGatewayMessageBusStreamInputDataSourceOutput() GatewayMessageBusStreamInputDataSourceOutput {
	return i.ToGatewayMessageBusStreamInputDataSourceOutputWithContext(context.Background())
}

func (i GatewayMessageBusStreamInputDataSourceArgs) ToGatewayMessageBusStreamInputDataSourceOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusStreamInputDataSourceOutput)
}

func (i GatewayMessageBusStreamInputDataSourceArgs) ToGatewayMessageBusStreamInputDataSourcePtrOutput() GatewayMessageBusStreamInputDataSourcePtrOutput {
	return i.ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i GatewayMessageBusStreamInputDataSourceArgs) ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusStreamInputDataSourceOutput).ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(ctx)
}

// GatewayMessageBusStreamInputDataSourcePtrInput is an input type that accepts GatewayMessageBusStreamInputDataSourceArgs, GatewayMessageBusStreamInputDataSourcePtr and GatewayMessageBusStreamInputDataSourcePtrOutput values.
// You can construct a concrete instance of `GatewayMessageBusStreamInputDataSourcePtrInput` via:
//
//	        GatewayMessageBusStreamInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type GatewayMessageBusStreamInputDataSourcePtrInput interface {
	pulumi.Input

	ToGatewayMessageBusStreamInputDataSourcePtrOutput() GatewayMessageBusStreamInputDataSourcePtrOutput
	ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(context.Context) GatewayMessageBusStreamInputDataSourcePtrOutput
}

type gatewayMessageBusStreamInputDataSourcePtrType GatewayMessageBusStreamInputDataSourceArgs

func GatewayMessageBusStreamInputDataSourcePtr(v *GatewayMessageBusStreamInputDataSourceArgs) GatewayMessageBusStreamInputDataSourcePtrInput {
	return (*gatewayMessageBusStreamInputDataSourcePtrType)(v)
}

func (*gatewayMessageBusStreamInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusStreamInputDataSource)(nil)).Elem()
}

func (i *gatewayMessageBusStreamInputDataSourcePtrType) ToGatewayMessageBusStreamInputDataSourcePtrOutput() GatewayMessageBusStreamInputDataSourcePtrOutput {
	return i.ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *gatewayMessageBusStreamInputDataSourcePtrType) ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMessageBusStreamInputDataSourcePtrOutput)
}

// Describes a blob input data source that contains stream data.
type GatewayMessageBusStreamInputDataSourceOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusStreamInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusStreamInputDataSource)(nil)).Elem()
}

func (o GatewayMessageBusStreamInputDataSourceOutput) ToGatewayMessageBusStreamInputDataSourceOutput() GatewayMessageBusStreamInputDataSourceOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourceOutput) ToGatewayMessageBusStreamInputDataSourceOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourceOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourceOutput) ToGatewayMessageBusStreamInputDataSourcePtrOutput() GatewayMessageBusStreamInputDataSourcePtrOutput {
	return o.ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (o GatewayMessageBusStreamInputDataSourceOutput) ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewayMessageBusStreamInputDataSource) *GatewayMessageBusStreamInputDataSource {
		return &v
	}).(GatewayMessageBusStreamInputDataSourcePtrOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusStreamInputDataSourceOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewayMessageBusStreamInputDataSource) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusStreamInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayMessageBusStreamInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type GatewayMessageBusStreamInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusStreamInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusStreamInputDataSource)(nil)).Elem()
}

func (o GatewayMessageBusStreamInputDataSourcePtrOutput) ToGatewayMessageBusStreamInputDataSourcePtrOutput() GatewayMessageBusStreamInputDataSourcePtrOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourcePtrOutput) ToGatewayMessageBusStreamInputDataSourcePtrOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourcePtrOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourcePtrOutput) Elem() GatewayMessageBusStreamInputDataSourceOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSource) GatewayMessageBusStreamInputDataSource {
		if v != nil {
			return *v
		}
		var ret GatewayMessageBusStreamInputDataSource
		return ret
	}).(GatewayMessageBusStreamInputDataSourceOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusStreamInputDataSourcePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusStreamInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a blob input data source that contains stream data.
type GatewayMessageBusStreamInputDataSourceResponse struct {
	// The name of the Service Bus topic.
	Topic *string `pulumi:"topic"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'GatewayMessageBus'.
	Type string `pulumi:"type"`
}

// Describes a blob input data source that contains stream data.
type GatewayMessageBusStreamInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusStreamInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayMessageBusStreamInputDataSourceResponse)(nil)).Elem()
}

func (o GatewayMessageBusStreamInputDataSourceResponseOutput) ToGatewayMessageBusStreamInputDataSourceResponseOutput() GatewayMessageBusStreamInputDataSourceResponseOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourceResponseOutput) ToGatewayMessageBusStreamInputDataSourceResponseOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourceResponseOutput {
	return o
}

// The name of the Service Bus topic.
func (o GatewayMessageBusStreamInputDataSourceResponseOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewayMessageBusStreamInputDataSourceResponse) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusStreamInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayMessageBusStreamInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type GatewayMessageBusStreamInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GatewayMessageBusStreamInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayMessageBusStreamInputDataSourceResponse)(nil)).Elem()
}

func (o GatewayMessageBusStreamInputDataSourceResponsePtrOutput) ToGatewayMessageBusStreamInputDataSourceResponsePtrOutput() GatewayMessageBusStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourceResponsePtrOutput) ToGatewayMessageBusStreamInputDataSourceResponsePtrOutputWithContext(ctx context.Context) GatewayMessageBusStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o GatewayMessageBusStreamInputDataSourceResponsePtrOutput) Elem() GatewayMessageBusStreamInputDataSourceResponseOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSourceResponse) GatewayMessageBusStreamInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret GatewayMessageBusStreamInputDataSourceResponse
		return ret
	}).(GatewayMessageBusStreamInputDataSourceResponseOutput)
}

// The name of the Service Bus topic.
func (o GatewayMessageBusStreamInputDataSourceResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'GatewayMessageBus'.
func (o GatewayMessageBusStreamInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayMessageBusStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how identity is verified
type Identity struct {
	// The identity type
	Type *string `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Describes how identity is verified
type IdentityArgs struct {
	// The identity type
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Describes how identity is verified
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type
func (o IdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Identity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how identity is verified
type IdentityResponse struct {
	// The identity principal ID
	PrincipalId string `pulumi:"principalId"`
	// The identity tenantId
	TenantId string `pulumi:"tenantId"`
	// The identity type
	Type *string `pulumi:"type"`
}

// Describes how identity is verified
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The identity principal ID
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The identity tenantId
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The identity principal ID
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The identity tenantId
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputType struct {
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties interface{} `pulumi:"properties"`
}

// InputTypeInput is an input type that accepts InputTypeArgs and InputTypeOutput values.
// You can construct a concrete instance of `InputTypeInput` via:
//
//	InputTypeArgs{...}
type InputTypeInput interface {
	pulumi.Input

	ToInputTypeOutput() InputTypeOutput
	ToInputTypeOutputWithContext(context.Context) InputTypeOutput
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputTypeArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties pulumi.Input `pulumi:"properties"`
}

func (InputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputType)(nil)).Elem()
}

func (i InputTypeArgs) ToInputTypeOutput() InputTypeOutput {
	return i.ToInputTypeOutputWithContext(context.Background())
}

func (i InputTypeArgs) ToInputTypeOutputWithContext(ctx context.Context) InputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputTypeOutput)
}

// InputTypeArrayInput is an input type that accepts InputTypeArray and InputTypeArrayOutput values.
// You can construct a concrete instance of `InputTypeArrayInput` via:
//
//	InputTypeArray{ InputTypeArgs{...} }
type InputTypeArrayInput interface {
	pulumi.Input

	ToInputTypeArrayOutput() InputTypeArrayOutput
	ToInputTypeArrayOutputWithContext(context.Context) InputTypeArrayOutput
}

type InputTypeArray []InputTypeInput

func (InputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputType)(nil)).Elem()
}

func (i InputTypeArray) ToInputTypeArrayOutput() InputTypeArrayOutput {
	return i.ToInputTypeArrayOutputWithContext(context.Background())
}

func (i InputTypeArray) ToInputTypeArrayOutputWithContext(ctx context.Context) InputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputTypeArrayOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputTypeOutput struct{ *pulumi.OutputState }

func (InputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputType)(nil)).Elem()
}

func (o InputTypeOutput) ToInputTypeOutput() InputTypeOutput {
	return o
}

func (o InputTypeOutput) ToInputTypeOutputWithContext(ctx context.Context) InputTypeOutput {
	return o
}

// Resource name
func (o InputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
func (o InputTypeOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v InputType) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

type InputTypeArrayOutput struct{ *pulumi.OutputState }

func (InputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputType)(nil)).Elem()
}

func (o InputTypeArrayOutput) ToInputTypeArrayOutput() InputTypeArrayOutput {
	return o
}

func (o InputTypeArrayOutput) ToInputTypeArrayOutputWithContext(ctx context.Context) InputTypeArrayOutput {
	return o
}

func (o InputTypeArrayOutput) Index(i pulumi.IntInput) InputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputType {
		return vs[0].([]InputType)[vs[1].(int)]
	}).(InputTypeOutput)
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputResponse struct {
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
	Properties interface{} `pulumi:"properties"`
	// Resource type
	Type string `pulumi:"type"`
}

// An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
type InputResponseOutput struct{ *pulumi.OutputState }

func (InputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (o InputResponseOutput) ToInputResponseOutput() InputResponseOutput {
	return o
}

func (o InputResponseOutput) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return o
}

// Resource Id
func (o InputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o InputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
func (o InputResponseOutput) Properties() pulumi.AnyOutput {
	return o.ApplyT(func(v InputResponse) interface{} { return v.Properties }).(pulumi.AnyOutput)
}

// Resource type
func (o InputResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Type }).(pulumi.StringOutput)
}

type InputResponseArrayOutput struct{ *pulumi.OutputState }

func (InputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) Index(i pulumi.IntInput) InputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputResponse {
		return vs[0].([]InputResponse)[vs[1].(int)]
	}).(InputResponseOutput)
}

// Describes an IoT Hub input data source that contains stream data.
type IoTHubStreamInputDataSource struct {
	// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint *string `pulumi:"endpoint"`
	// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
	IotHubNamespace *string `pulumi:"iotHubNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Devices/IotHubs'.
	Type string `pulumi:"type"`
}

// IoTHubStreamInputDataSourceInput is an input type that accepts IoTHubStreamInputDataSourceArgs and IoTHubStreamInputDataSourceOutput values.
// You can construct a concrete instance of `IoTHubStreamInputDataSourceInput` via:
//
//	IoTHubStreamInputDataSourceArgs{...}
type IoTHubStreamInputDataSourceInput interface {
	pulumi.Input

	ToIoTHubStreamInputDataSourceOutput() IoTHubStreamInputDataSourceOutput
	ToIoTHubStreamInputDataSourceOutputWithContext(context.Context) IoTHubStreamInputDataSourceOutput
}

// Describes an IoT Hub input data source that contains stream data.
type IoTHubStreamInputDataSourceArgs struct {
	// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
	ConsumerGroupName pulumi.StringPtrInput `pulumi:"consumerGroupName"`
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
	IotHubNamespace pulumi.StringPtrInput `pulumi:"iotHubNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Devices/IotHubs'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IoTHubStreamInputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTHubStreamInputDataSource)(nil)).Elem()
}

func (i IoTHubStreamInputDataSourceArgs) ToIoTHubStreamInputDataSourceOutput() IoTHubStreamInputDataSourceOutput {
	return i.ToIoTHubStreamInputDataSourceOutputWithContext(context.Background())
}

func (i IoTHubStreamInputDataSourceArgs) ToIoTHubStreamInputDataSourceOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTHubStreamInputDataSourceOutput)
}

func (i IoTHubStreamInputDataSourceArgs) ToIoTHubStreamInputDataSourcePtrOutput() IoTHubStreamInputDataSourcePtrOutput {
	return i.ToIoTHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i IoTHubStreamInputDataSourceArgs) ToIoTHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTHubStreamInputDataSourceOutput).ToIoTHubStreamInputDataSourcePtrOutputWithContext(ctx)
}

// IoTHubStreamInputDataSourcePtrInput is an input type that accepts IoTHubStreamInputDataSourceArgs, IoTHubStreamInputDataSourcePtr and IoTHubStreamInputDataSourcePtrOutput values.
// You can construct a concrete instance of `IoTHubStreamInputDataSourcePtrInput` via:
//
//	        IoTHubStreamInputDataSourceArgs{...}
//
//	or:
//
//	        nil
type IoTHubStreamInputDataSourcePtrInput interface {
	pulumi.Input

	ToIoTHubStreamInputDataSourcePtrOutput() IoTHubStreamInputDataSourcePtrOutput
	ToIoTHubStreamInputDataSourcePtrOutputWithContext(context.Context) IoTHubStreamInputDataSourcePtrOutput
}

type ioTHubStreamInputDataSourcePtrType IoTHubStreamInputDataSourceArgs

func IoTHubStreamInputDataSourcePtr(v *IoTHubStreamInputDataSourceArgs) IoTHubStreamInputDataSourcePtrInput {
	return (*ioTHubStreamInputDataSourcePtrType)(v)
}

func (*ioTHubStreamInputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTHubStreamInputDataSource)(nil)).Elem()
}

func (i *ioTHubStreamInputDataSourcePtrType) ToIoTHubStreamInputDataSourcePtrOutput() IoTHubStreamInputDataSourcePtrOutput {
	return i.ToIoTHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (i *ioTHubStreamInputDataSourcePtrType) ToIoTHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IoTHubStreamInputDataSourcePtrOutput)
}

// Describes an IoT Hub input data source that contains stream data.
type IoTHubStreamInputDataSourceOutput struct{ *pulumi.OutputState }

func (IoTHubStreamInputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTHubStreamInputDataSource)(nil)).Elem()
}

func (o IoTHubStreamInputDataSourceOutput) ToIoTHubStreamInputDataSourceOutput() IoTHubStreamInputDataSourceOutput {
	return o
}

func (o IoTHubStreamInputDataSourceOutput) ToIoTHubStreamInputDataSourceOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourceOutput {
	return o
}

func (o IoTHubStreamInputDataSourceOutput) ToIoTHubStreamInputDataSourcePtrOutput() IoTHubStreamInputDataSourcePtrOutput {
	return o.ToIoTHubStreamInputDataSourcePtrOutputWithContext(context.Background())
}

func (o IoTHubStreamInputDataSourceOutput) ToIoTHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IoTHubStreamInputDataSource) *IoTHubStreamInputDataSource {
		return &v
	}).(IoTHubStreamInputDataSourcePtrOutput)
}

// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
func (o IoTHubStreamInputDataSourceOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
func (o IoTHubStreamInputDataSourceOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceOutput) IotHubNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) *string { return v.IotHubNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Devices/IotHubs'.
func (o IoTHubStreamInputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type IoTHubStreamInputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (IoTHubStreamInputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTHubStreamInputDataSource)(nil)).Elem()
}

func (o IoTHubStreamInputDataSourcePtrOutput) ToIoTHubStreamInputDataSourcePtrOutput() IoTHubStreamInputDataSourcePtrOutput {
	return o
}

func (o IoTHubStreamInputDataSourcePtrOutput) ToIoTHubStreamInputDataSourcePtrOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourcePtrOutput {
	return o
}

func (o IoTHubStreamInputDataSourcePtrOutput) Elem() IoTHubStreamInputDataSourceOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) IoTHubStreamInputDataSource {
		if v != nil {
			return *v
		}
		var ret IoTHubStreamInputDataSource
		return ret
	}).(IoTHubStreamInputDataSourceOutput)
}

// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
func (o IoTHubStreamInputDataSourcePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
func (o IoTHubStreamInputDataSourcePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourcePtrOutput) IotHubNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.IotHubNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Devices/IotHubs'.
func (o IoTHubStreamInputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes an IoT Hub input data source that contains stream data.
type IoTHubStreamInputDataSourceResponse struct {
	// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
	Endpoint *string `pulumi:"endpoint"`
	// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
	IotHubNamespace *string `pulumi:"iotHubNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.Devices/IotHubs'.
	Type string `pulumi:"type"`
}

// Describes an IoT Hub input data source that contains stream data.
type IoTHubStreamInputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (IoTHubStreamInputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IoTHubStreamInputDataSourceResponse)(nil)).Elem()
}

func (o IoTHubStreamInputDataSourceResponseOutput) ToIoTHubStreamInputDataSourceResponseOutput() IoTHubStreamInputDataSourceResponseOutput {
	return o
}

func (o IoTHubStreamInputDataSourceResponseOutput) ToIoTHubStreamInputDataSourceResponseOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourceResponseOutput {
	return o
}

// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
func (o IoTHubStreamInputDataSourceResponseOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
func (o IoTHubStreamInputDataSourceResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponseOutput) IotHubNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) *string { return v.IotHubNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Devices/IotHubs'.
func (o IoTHubStreamInputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IoTHubStreamInputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IoTHubStreamInputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (IoTHubStreamInputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IoTHubStreamInputDataSourceResponse)(nil)).Elem()
}

func (o IoTHubStreamInputDataSourceResponsePtrOutput) ToIoTHubStreamInputDataSourceResponsePtrOutput() IoTHubStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o IoTHubStreamInputDataSourceResponsePtrOutput) ToIoTHubStreamInputDataSourceResponsePtrOutputWithContext(ctx context.Context) IoTHubStreamInputDataSourceResponsePtrOutput {
	return o
}

func (o IoTHubStreamInputDataSourceResponsePtrOutput) Elem() IoTHubStreamInputDataSourceResponseOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) IoTHubStreamInputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret IoTHubStreamInputDataSourceResponse
		return ret
	}).(IoTHubStreamInputDataSourceResponseOutput)
}

// The name of an IoT Hub Consumer Group that should be used to read events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
func (o IoTHubStreamInputDataSourceResponsePtrOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroupName
	}).(pulumi.StringPtrOutput)
}

// The IoT Hub endpoint to connect to (ie. messages/events, messages/operationsMonitoringEvents, etc.).
func (o IoTHubStreamInputDataSourceResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponsePtrOutput) IotHubNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.IotHubNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the IoT Hub. This policy must contain at least the Service connect permission. Required on PUT (CreateOrReplace) requests.
func (o IoTHubStreamInputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of input data source containing stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.Devices/IotHubs'.
func (o IoTHubStreamInputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IoTHubStreamInputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The binding to a JavaScript function.
type JavaScriptFunctionBinding struct {
	// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
	Script *string `pulumi:"script"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
	Type string `pulumi:"type"`
}

// JavaScriptFunctionBindingInput is an input type that accepts JavaScriptFunctionBindingArgs and JavaScriptFunctionBindingOutput values.
// You can construct a concrete instance of `JavaScriptFunctionBindingInput` via:
//
//	JavaScriptFunctionBindingArgs{...}
type JavaScriptFunctionBindingInput interface {
	pulumi.Input

	ToJavaScriptFunctionBindingOutput() JavaScriptFunctionBindingOutput
	ToJavaScriptFunctionBindingOutputWithContext(context.Context) JavaScriptFunctionBindingOutput
}

// The binding to a JavaScript function.
type JavaScriptFunctionBindingArgs struct {
	// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
	Script pulumi.StringPtrInput `pulumi:"script"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JavaScriptFunctionBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaScriptFunctionBinding)(nil)).Elem()
}

func (i JavaScriptFunctionBindingArgs) ToJavaScriptFunctionBindingOutput() JavaScriptFunctionBindingOutput {
	return i.ToJavaScriptFunctionBindingOutputWithContext(context.Background())
}

func (i JavaScriptFunctionBindingArgs) ToJavaScriptFunctionBindingOutputWithContext(ctx context.Context) JavaScriptFunctionBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaScriptFunctionBindingOutput)
}

func (i JavaScriptFunctionBindingArgs) ToJavaScriptFunctionBindingPtrOutput() JavaScriptFunctionBindingPtrOutput {
	return i.ToJavaScriptFunctionBindingPtrOutputWithContext(context.Background())
}

func (i JavaScriptFunctionBindingArgs) ToJavaScriptFunctionBindingPtrOutputWithContext(ctx context.Context) JavaScriptFunctionBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaScriptFunctionBindingOutput).ToJavaScriptFunctionBindingPtrOutputWithContext(ctx)
}

// JavaScriptFunctionBindingPtrInput is an input type that accepts JavaScriptFunctionBindingArgs, JavaScriptFunctionBindingPtr and JavaScriptFunctionBindingPtrOutput values.
// You can construct a concrete instance of `JavaScriptFunctionBindingPtrInput` via:
//
//	        JavaScriptFunctionBindingArgs{...}
//
//	or:
//
//	        nil
type JavaScriptFunctionBindingPtrInput interface {
	pulumi.Input

	ToJavaScriptFunctionBindingPtrOutput() JavaScriptFunctionBindingPtrOutput
	ToJavaScriptFunctionBindingPtrOutputWithContext(context.Context) JavaScriptFunctionBindingPtrOutput
}

type javaScriptFunctionBindingPtrType JavaScriptFunctionBindingArgs

func JavaScriptFunctionBindingPtr(v *JavaScriptFunctionBindingArgs) JavaScriptFunctionBindingPtrInput {
	return (*javaScriptFunctionBindingPtrType)(v)
}

func (*javaScriptFunctionBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JavaScriptFunctionBinding)(nil)).Elem()
}

func (i *javaScriptFunctionBindingPtrType) ToJavaScriptFunctionBindingPtrOutput() JavaScriptFunctionBindingPtrOutput {
	return i.ToJavaScriptFunctionBindingPtrOutputWithContext(context.Background())
}

func (i *javaScriptFunctionBindingPtrType) ToJavaScriptFunctionBindingPtrOutputWithContext(ctx context.Context) JavaScriptFunctionBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JavaScriptFunctionBindingPtrOutput)
}

// The binding to a JavaScript function.
type JavaScriptFunctionBindingOutput struct{ *pulumi.OutputState }

func (JavaScriptFunctionBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaScriptFunctionBinding)(nil)).Elem()
}

func (o JavaScriptFunctionBindingOutput) ToJavaScriptFunctionBindingOutput() JavaScriptFunctionBindingOutput {
	return o
}

func (o JavaScriptFunctionBindingOutput) ToJavaScriptFunctionBindingOutputWithContext(ctx context.Context) JavaScriptFunctionBindingOutput {
	return o
}

func (o JavaScriptFunctionBindingOutput) ToJavaScriptFunctionBindingPtrOutput() JavaScriptFunctionBindingPtrOutput {
	return o.ToJavaScriptFunctionBindingPtrOutputWithContext(context.Background())
}

func (o JavaScriptFunctionBindingOutput) ToJavaScriptFunctionBindingPtrOutputWithContext(ctx context.Context) JavaScriptFunctionBindingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JavaScriptFunctionBinding) *JavaScriptFunctionBinding {
		return &v
	}).(JavaScriptFunctionBindingPtrOutput)
}

// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
func (o JavaScriptFunctionBindingOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaScriptFunctionBinding) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
func (o JavaScriptFunctionBindingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JavaScriptFunctionBinding) string { return v.Type }).(pulumi.StringOutput)
}

type JavaScriptFunctionBindingPtrOutput struct{ *pulumi.OutputState }

func (JavaScriptFunctionBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JavaScriptFunctionBinding)(nil)).Elem()
}

func (o JavaScriptFunctionBindingPtrOutput) ToJavaScriptFunctionBindingPtrOutput() JavaScriptFunctionBindingPtrOutput {
	return o
}

func (o JavaScriptFunctionBindingPtrOutput) ToJavaScriptFunctionBindingPtrOutputWithContext(ctx context.Context) JavaScriptFunctionBindingPtrOutput {
	return o
}

func (o JavaScriptFunctionBindingPtrOutput) Elem() JavaScriptFunctionBindingOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBinding) JavaScriptFunctionBinding {
		if v != nil {
			return *v
		}
		var ret JavaScriptFunctionBinding
		return ret
	}).(JavaScriptFunctionBindingOutput)
}

// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
func (o JavaScriptFunctionBindingPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBinding) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
func (o JavaScriptFunctionBindingPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBinding) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The binding to a JavaScript function.
type JavaScriptFunctionBindingResponse struct {
	// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
	Script *string `pulumi:"script"`
	// Indicates the function binding type.
	// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
	Type string `pulumi:"type"`
}

// The binding to a JavaScript function.
type JavaScriptFunctionBindingResponseOutput struct{ *pulumi.OutputState }

func (JavaScriptFunctionBindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JavaScriptFunctionBindingResponse)(nil)).Elem()
}

func (o JavaScriptFunctionBindingResponseOutput) ToJavaScriptFunctionBindingResponseOutput() JavaScriptFunctionBindingResponseOutput {
	return o
}

func (o JavaScriptFunctionBindingResponseOutput) ToJavaScriptFunctionBindingResponseOutputWithContext(ctx context.Context) JavaScriptFunctionBindingResponseOutput {
	return o
}

// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
func (o JavaScriptFunctionBindingResponseOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JavaScriptFunctionBindingResponse) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
func (o JavaScriptFunctionBindingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JavaScriptFunctionBindingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JavaScriptFunctionBindingResponsePtrOutput struct{ *pulumi.OutputState }

func (JavaScriptFunctionBindingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JavaScriptFunctionBindingResponse)(nil)).Elem()
}

func (o JavaScriptFunctionBindingResponsePtrOutput) ToJavaScriptFunctionBindingResponsePtrOutput() JavaScriptFunctionBindingResponsePtrOutput {
	return o
}

func (o JavaScriptFunctionBindingResponsePtrOutput) ToJavaScriptFunctionBindingResponsePtrOutputWithContext(ctx context.Context) JavaScriptFunctionBindingResponsePtrOutput {
	return o
}

func (o JavaScriptFunctionBindingResponsePtrOutput) Elem() JavaScriptFunctionBindingResponseOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBindingResponse) JavaScriptFunctionBindingResponse {
		if v != nil {
			return *v
		}
		var ret JavaScriptFunctionBindingResponse
		return ret
	}).(JavaScriptFunctionBindingResponseOutput)
}

// The JavaScript code containing a single function definition. For example: 'function (x, y) { return x + y; }'
func (o JavaScriptFunctionBindingResponsePtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBindingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Script
	}).(pulumi.StringPtrOutput)
}

// Indicates the function binding type.
// Expected value is 'Microsoft.StreamAnalytics/JavascriptUdf'.
func (o JavaScriptFunctionBindingResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JavaScriptFunctionBindingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an Azure Storage account with MSI
type JobStorageAccount struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
}

// JobStorageAccountInput is an input type that accepts JobStorageAccountArgs and JobStorageAccountOutput values.
// You can construct a concrete instance of `JobStorageAccountInput` via:
//
//	JobStorageAccountArgs{...}
type JobStorageAccountInput interface {
	pulumi.Input

	ToJobStorageAccountOutput() JobStorageAccountOutput
	ToJobStorageAccountOutputWithContext(context.Context) JobStorageAccountOutput
}

// The properties that are associated with an Azure Storage account with MSI
type JobStorageAccountArgs struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
}

func (JobStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStorageAccount)(nil)).Elem()
}

func (i JobStorageAccountArgs) ToJobStorageAccountOutput() JobStorageAccountOutput {
	return i.ToJobStorageAccountOutputWithContext(context.Background())
}

func (i JobStorageAccountArgs) ToJobStorageAccountOutputWithContext(ctx context.Context) JobStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStorageAccountOutput)
}

func (i JobStorageAccountArgs) ToJobStorageAccountPtrOutput() JobStorageAccountPtrOutput {
	return i.ToJobStorageAccountPtrOutputWithContext(context.Background())
}

func (i JobStorageAccountArgs) ToJobStorageAccountPtrOutputWithContext(ctx context.Context) JobStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStorageAccountOutput).ToJobStorageAccountPtrOutputWithContext(ctx)
}

// JobStorageAccountPtrInput is an input type that accepts JobStorageAccountArgs, JobStorageAccountPtr and JobStorageAccountPtrOutput values.
// You can construct a concrete instance of `JobStorageAccountPtrInput` via:
//
//	        JobStorageAccountArgs{...}
//
//	or:
//
//	        nil
type JobStorageAccountPtrInput interface {
	pulumi.Input

	ToJobStorageAccountPtrOutput() JobStorageAccountPtrOutput
	ToJobStorageAccountPtrOutputWithContext(context.Context) JobStorageAccountPtrOutput
}

type jobStorageAccountPtrType JobStorageAccountArgs

func JobStorageAccountPtr(v *JobStorageAccountArgs) JobStorageAccountPtrInput {
	return (*jobStorageAccountPtrType)(v)
}

func (*jobStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStorageAccount)(nil)).Elem()
}

func (i *jobStorageAccountPtrType) ToJobStorageAccountPtrOutput() JobStorageAccountPtrOutput {
	return i.ToJobStorageAccountPtrOutputWithContext(context.Background())
}

func (i *jobStorageAccountPtrType) ToJobStorageAccountPtrOutputWithContext(ctx context.Context) JobStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobStorageAccountPtrOutput)
}

// The properties that are associated with an Azure Storage account with MSI
type JobStorageAccountOutput struct{ *pulumi.OutputState }

func (JobStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStorageAccount)(nil)).Elem()
}

func (o JobStorageAccountOutput) ToJobStorageAccountOutput() JobStorageAccountOutput {
	return o
}

func (o JobStorageAccountOutput) ToJobStorageAccountOutputWithContext(ctx context.Context) JobStorageAccountOutput {
	return o
}

func (o JobStorageAccountOutput) ToJobStorageAccountPtrOutput() JobStorageAccountPtrOutput {
	return o.ToJobStorageAccountPtrOutputWithContext(context.Background())
}

func (o JobStorageAccountOutput) ToJobStorageAccountPtrOutputWithContext(ctx context.Context) JobStorageAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobStorageAccount) *JobStorageAccount {
		return &v
	}).(JobStorageAccountPtrOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccount) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccount) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o JobStorageAccountOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccount) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

type JobStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (JobStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStorageAccount)(nil)).Elem()
}

func (o JobStorageAccountPtrOutput) ToJobStorageAccountPtrOutput() JobStorageAccountPtrOutput {
	return o
}

func (o JobStorageAccountPtrOutput) ToJobStorageAccountPtrOutputWithContext(ctx context.Context) JobStorageAccountPtrOutput {
	return o
}

func (o JobStorageAccountPtrOutput) Elem() JobStorageAccountOutput {
	return o.ApplyT(func(v *JobStorageAccount) JobStorageAccount {
		if v != nil {
			return *v
		}
		var ret JobStorageAccount
		return ret
	}).(JobStorageAccountOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountPtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o JobStorageAccountPtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an Azure Storage account with MSI
type JobStorageAccountResponse struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
}

// The properties that are associated with an Azure Storage account with MSI
type JobStorageAccountResponseOutput struct{ *pulumi.OutputState }

func (JobStorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStorageAccountResponse)(nil)).Elem()
}

func (o JobStorageAccountResponseOutput) ToJobStorageAccountResponseOutput() JobStorageAccountResponseOutput {
	return o
}

func (o JobStorageAccountResponseOutput) ToJobStorageAccountResponseOutputWithContext(ctx context.Context) JobStorageAccountResponseOutput {
	return o
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccountResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccountResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o JobStorageAccountResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobStorageAccountResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

type JobStorageAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (JobStorageAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobStorageAccountResponse)(nil)).Elem()
}

func (o JobStorageAccountResponsePtrOutput) ToJobStorageAccountResponsePtrOutput() JobStorageAccountResponsePtrOutput {
	return o
}

func (o JobStorageAccountResponsePtrOutput) ToJobStorageAccountResponsePtrOutputWithContext(ctx context.Context) JobStorageAccountResponsePtrOutput {
	return o
}

func (o JobStorageAccountResponsePtrOutput) Elem() JobStorageAccountResponseOutput {
	return o.ApplyT(func(v *JobStorageAccountResponse) JobStorageAccountResponse {
		if v != nil {
			return *v
		}
		var ret JobStorageAccountResponse
		return ret
	}).(JobStorageAccountResponseOutput)
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o JobStorageAccountResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Authentication Mode.
func (o JobStorageAccountResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
type JsonSerialization struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding *string `pulumi:"encoding"`
	// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
	Format *string `pulumi:"format"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// JsonSerializationInput is an input type that accepts JsonSerializationArgs and JsonSerializationOutput values.
// You can construct a concrete instance of `JsonSerializationInput` via:
//
//	JsonSerializationArgs{...}
type JsonSerializationInput interface {
	pulumi.Input

	ToJsonSerializationOutput() JsonSerializationOutput
	ToJsonSerializationOutputWithContext(context.Context) JsonSerializationOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
type JsonSerializationArgs struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Json'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (JsonSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSerialization)(nil)).Elem()
}

func (i JsonSerializationArgs) ToJsonSerializationOutput() JsonSerializationOutput {
	return i.ToJsonSerializationOutputWithContext(context.Background())
}

func (i JsonSerializationArgs) ToJsonSerializationOutputWithContext(ctx context.Context) JsonSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonSerializationOutput)
}

func (i JsonSerializationArgs) ToJsonSerializationPtrOutput() JsonSerializationPtrOutput {
	return i.ToJsonSerializationPtrOutputWithContext(context.Background())
}

func (i JsonSerializationArgs) ToJsonSerializationPtrOutputWithContext(ctx context.Context) JsonSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonSerializationOutput).ToJsonSerializationPtrOutputWithContext(ctx)
}

// JsonSerializationPtrInput is an input type that accepts JsonSerializationArgs, JsonSerializationPtr and JsonSerializationPtrOutput values.
// You can construct a concrete instance of `JsonSerializationPtrInput` via:
//
//	        JsonSerializationArgs{...}
//
//	or:
//
//	        nil
type JsonSerializationPtrInput interface {
	pulumi.Input

	ToJsonSerializationPtrOutput() JsonSerializationPtrOutput
	ToJsonSerializationPtrOutputWithContext(context.Context) JsonSerializationPtrOutput
}

type jsonSerializationPtrType JsonSerializationArgs

func JsonSerializationPtr(v *JsonSerializationArgs) JsonSerializationPtrInput {
	return (*jsonSerializationPtrType)(v)
}

func (*jsonSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonSerialization)(nil)).Elem()
}

func (i *jsonSerializationPtrType) ToJsonSerializationPtrOutput() JsonSerializationPtrOutput {
	return i.ToJsonSerializationPtrOutputWithContext(context.Background())
}

func (i *jsonSerializationPtrType) ToJsonSerializationPtrOutputWithContext(ctx context.Context) JsonSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonSerializationPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
type JsonSerializationOutput struct{ *pulumi.OutputState }

func (JsonSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSerialization)(nil)).Elem()
}

func (o JsonSerializationOutput) ToJsonSerializationOutput() JsonSerializationOutput {
	return o
}

func (o JsonSerializationOutput) ToJsonSerializationOutputWithContext(ctx context.Context) JsonSerializationOutput {
	return o
}

func (o JsonSerializationOutput) ToJsonSerializationPtrOutput() JsonSerializationPtrOutput {
	return o.ToJsonSerializationPtrOutputWithContext(context.Background())
}

func (o JsonSerializationOutput) ToJsonSerializationPtrOutputWithContext(ctx context.Context) JsonSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonSerialization) *JsonSerialization {
		return &v
	}).(JsonSerializationPtrOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o JsonSerializationOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonSerialization) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
func (o JsonSerializationOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonSerialization) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Json'.
func (o JsonSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type JsonSerializationPtrOutput struct{ *pulumi.OutputState }

func (JsonSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonSerialization)(nil)).Elem()
}

func (o JsonSerializationPtrOutput) ToJsonSerializationPtrOutput() JsonSerializationPtrOutput {
	return o
}

func (o JsonSerializationPtrOutput) ToJsonSerializationPtrOutputWithContext(ctx context.Context) JsonSerializationPtrOutput {
	return o
}

func (o JsonSerializationPtrOutput) Elem() JsonSerializationOutput {
	return o.ApplyT(func(v *JsonSerialization) JsonSerialization {
		if v != nil {
			return *v
		}
		var ret JsonSerialization
		return ret
	}).(JsonSerializationOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o JsonSerializationPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
func (o JsonSerializationPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerialization) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Json'.
func (o JsonSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
type JsonSerializationResponse struct {
	// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
	Encoding *string `pulumi:"encoding"`
	// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
	Format *string `pulumi:"format"`
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Json'.
	Type string `pulumi:"type"`
}

// Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
type JsonSerializationResponseOutput struct{ *pulumi.OutputState }

func (JsonSerializationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonSerializationResponse)(nil)).Elem()
}

func (o JsonSerializationResponseOutput) ToJsonSerializationResponseOutput() JsonSerializationResponseOutput {
	return o
}

func (o JsonSerializationResponseOutput) ToJsonSerializationResponseOutputWithContext(ctx context.Context) JsonSerializationResponseOutput {
	return o
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o JsonSerializationResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonSerializationResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
func (o JsonSerializationResponseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonSerializationResponse) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Json'.
func (o JsonSerializationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v JsonSerializationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type JsonSerializationResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonSerializationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonSerializationResponse)(nil)).Elem()
}

func (o JsonSerializationResponsePtrOutput) ToJsonSerializationResponsePtrOutput() JsonSerializationResponsePtrOutput {
	return o
}

func (o JsonSerializationResponsePtrOutput) ToJsonSerializationResponsePtrOutputWithContext(ctx context.Context) JsonSerializationResponsePtrOutput {
	return o
}

func (o JsonSerializationResponsePtrOutput) Elem() JsonSerializationResponseOutput {
	return o.ApplyT(func(v *JsonSerializationResponse) JsonSerializationResponse {
		if v != nil {
			return *v
		}
		var ret JsonSerializationResponse
		return ret
	}).(JsonSerializationResponseOutput)
}

// Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
func (o JsonSerializationResponsePtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are 'lineSeparated' indicating the output will be formatted by having each JSON object separated by a new line and 'array' indicating the output will be formatted as an array of JSON objects. Default value is 'lineSeparated' if left null.
func (o JsonSerializationResponsePtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Format
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Json'.
func (o JsonSerializationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputType struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// Resource name
	Name *string `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// The size window to constrain a Stream Analytics output to.
	SizeWindow *int `pulumi:"sizeWindow"`
	// The time frame for filtering Stream Analytics job outputs.
	TimeWindow *string `pulumi:"timeWindow"`
}

// OutputTypeInput is an input type that accepts OutputTypeArgs and OutputTypeOutput values.
// You can construct a concrete instance of `OutputTypeInput` via:
//
//	OutputTypeArgs{...}
type OutputTypeInput interface {
	pulumi.Input

	ToOutputTypeOutput() OutputTypeOutput
	ToOutputTypeOutputWithContext(context.Context) OutputTypeOutput
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputTypeArgs struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource pulumi.Input `pulumi:"datasource"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization pulumi.Input `pulumi:"serialization"`
	// The size window to constrain a Stream Analytics output to.
	SizeWindow pulumi.IntPtrInput `pulumi:"sizeWindow"`
	// The time frame for filtering Stream Analytics job outputs.
	TimeWindow pulumi.StringPtrInput `pulumi:"timeWindow"`
}

func (OutputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputType)(nil)).Elem()
}

func (i OutputTypeArgs) ToOutputTypeOutput() OutputTypeOutput {
	return i.ToOutputTypeOutputWithContext(context.Background())
}

func (i OutputTypeArgs) ToOutputTypeOutputWithContext(ctx context.Context) OutputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputTypeOutput)
}

// OutputTypeArrayInput is an input type that accepts OutputTypeArray and OutputTypeArrayOutput values.
// You can construct a concrete instance of `OutputTypeArrayInput` via:
//
//	OutputTypeArray{ OutputTypeArgs{...} }
type OutputTypeArrayInput interface {
	pulumi.Input

	ToOutputTypeArrayOutput() OutputTypeArrayOutput
	ToOutputTypeArrayOutputWithContext(context.Context) OutputTypeArrayOutput
}

type OutputTypeArray []OutputTypeInput

func (OutputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputType)(nil)).Elem()
}

func (i OutputTypeArray) ToOutputTypeArrayOutput() OutputTypeArrayOutput {
	return i.ToOutputTypeArrayOutputWithContext(context.Background())
}

func (i OutputTypeArray) ToOutputTypeArrayOutputWithContext(ctx context.Context) OutputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputTypeArrayOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputTypeOutput struct{ *pulumi.OutputState }

func (OutputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputType)(nil)).Elem()
}

func (o OutputTypeOutput) ToOutputTypeOutput() OutputTypeOutput {
	return o
}

func (o OutputTypeOutput) ToOutputTypeOutputWithContext(ctx context.Context) OutputTypeOutput {
	return o
}

// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputTypeOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v OutputType) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// Resource name
func (o OutputTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o OutputTypeOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v OutputType) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// The size window to constrain a Stream Analytics output to.
func (o OutputTypeOutput) SizeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutputType) *int { return v.SizeWindow }).(pulumi.IntPtrOutput)
}

// The time frame for filtering Stream Analytics job outputs.
func (o OutputTypeOutput) TimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputType) *string { return v.TimeWindow }).(pulumi.StringPtrOutput)
}

type OutputTypeArrayOutput struct{ *pulumi.OutputState }

func (OutputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputType)(nil)).Elem()
}

func (o OutputTypeArrayOutput) ToOutputTypeArrayOutput() OutputTypeArrayOutput {
	return o
}

func (o OutputTypeArrayOutput) ToOutputTypeArrayOutputWithContext(ctx context.Context) OutputTypeArrayOutput {
	return o
}

func (o OutputTypeArrayOutput) Index(i pulumi.IntInput) OutputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputType {
		return vs[0].([]OutputType)[vs[1].(int)]
	}).(OutputTypeOutput)
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputResponse struct {
	// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponse `pulumi:"diagnostics"`
	// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// The size window to constrain a Stream Analytics output to.
	SizeWindow *int `pulumi:"sizeWindow"`
	// The time frame for filtering Stream Analytics job outputs.
	TimeWindow *string `pulumi:"timeWindow"`
	// Resource type
	Type string `pulumi:"type"`
}

// An output object, containing all information associated with the named output. All outputs are contained under a streaming job.
type OutputResponseOutput struct{ *pulumi.OutputState }

func (OutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (o OutputResponseOutput) ToOutputResponseOutput() OutputResponseOutput {
	return o
}

func (o OutputResponseOutput) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return o
}

// Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.
func (o OutputResponseOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v OutputResponse) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o OutputResponseOutput) Diagnostics() DiagnosticsResponseOutput {
	return o.ApplyT(func(v OutputResponse) DiagnosticsResponse { return v.Diagnostics }).(DiagnosticsResponseOutput)
}

// The current entity tag for the output. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o OutputResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Resource Id
func (o OutputResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o OutputResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o OutputResponseOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v OutputResponse) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// The size window to constrain a Stream Analytics output to.
func (o OutputResponseOutput) SizeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OutputResponse) *int { return v.SizeWindow }).(pulumi.IntPtrOutput)
}

// The time frame for filtering Stream Analytics job outputs.
func (o OutputResponseOutput) TimeWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputResponse) *string { return v.TimeWindow }).(pulumi.StringPtrOutput)
}

// Resource type
func (o OutputResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Type }).(pulumi.StringOutput)
}

type OutputResponseArrayOutput struct{ *pulumi.OutputState }

func (OutputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OutputResponse)(nil)).Elem()
}

func (o OutputResponseArrayOutput) ToOutputResponseArrayOutput() OutputResponseArrayOutput {
	return o
}

func (o OutputResponseArrayOutput) ToOutputResponseArrayOutputWithContext(ctx context.Context) OutputResponseArrayOutput {
	return o
}

func (o OutputResponseArrayOutput) Index(i pulumi.IntInput) OutputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OutputResponse {
		return vs[0].([]OutputResponse)[vs[1].(int)]
	}).(OutputResponseOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.
type ParquetSerialization struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// ParquetSerializationInput is an input type that accepts ParquetSerializationArgs and ParquetSerializationOutput values.
// You can construct a concrete instance of `ParquetSerializationInput` via:
//
//	ParquetSerializationArgs{...}
type ParquetSerializationInput interface {
	pulumi.Input

	ToParquetSerializationOutput() ParquetSerializationOutput
	ToParquetSerializationOutputWithContext(context.Context) ParquetSerializationOutput
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.
type ParquetSerializationArgs struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Parquet'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ParquetSerializationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSerialization)(nil)).Elem()
}

func (i ParquetSerializationArgs) ToParquetSerializationOutput() ParquetSerializationOutput {
	return i.ToParquetSerializationOutputWithContext(context.Background())
}

func (i ParquetSerializationArgs) ToParquetSerializationOutputWithContext(ctx context.Context) ParquetSerializationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetSerializationOutput)
}

func (i ParquetSerializationArgs) ToParquetSerializationPtrOutput() ParquetSerializationPtrOutput {
	return i.ToParquetSerializationPtrOutputWithContext(context.Background())
}

func (i ParquetSerializationArgs) ToParquetSerializationPtrOutputWithContext(ctx context.Context) ParquetSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetSerializationOutput).ToParquetSerializationPtrOutputWithContext(ctx)
}

// ParquetSerializationPtrInput is an input type that accepts ParquetSerializationArgs, ParquetSerializationPtr and ParquetSerializationPtrOutput values.
// You can construct a concrete instance of `ParquetSerializationPtrInput` via:
//
//	        ParquetSerializationArgs{...}
//
//	or:
//
//	        nil
type ParquetSerializationPtrInput interface {
	pulumi.Input

	ToParquetSerializationPtrOutput() ParquetSerializationPtrOutput
	ToParquetSerializationPtrOutputWithContext(context.Context) ParquetSerializationPtrOutput
}

type parquetSerializationPtrType ParquetSerializationArgs

func ParquetSerializationPtr(v *ParquetSerializationArgs) ParquetSerializationPtrInput {
	return (*parquetSerializationPtrType)(v)
}

func (*parquetSerializationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetSerialization)(nil)).Elem()
}

func (i *parquetSerializationPtrType) ToParquetSerializationPtrOutput() ParquetSerializationPtrOutput {
	return i.ToParquetSerializationPtrOutputWithContext(context.Background())
}

func (i *parquetSerializationPtrType) ToParquetSerializationPtrOutputWithContext(ctx context.Context) ParquetSerializationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetSerializationPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.
type ParquetSerializationOutput struct{ *pulumi.OutputState }

func (ParquetSerializationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSerialization)(nil)).Elem()
}

func (o ParquetSerializationOutput) ToParquetSerializationOutput() ParquetSerializationOutput {
	return o
}

func (o ParquetSerializationOutput) ToParquetSerializationOutputWithContext(ctx context.Context) ParquetSerializationOutput {
	return o
}

func (o ParquetSerializationOutput) ToParquetSerializationPtrOutput() ParquetSerializationPtrOutput {
	return o.ToParquetSerializationPtrOutputWithContext(context.Background())
}

func (o ParquetSerializationOutput) ToParquetSerializationPtrOutputWithContext(ctx context.Context) ParquetSerializationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetSerialization) *ParquetSerialization {
		return &v
	}).(ParquetSerializationPtrOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Parquet'.
func (o ParquetSerializationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSerialization) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetSerializationPtrOutput struct{ *pulumi.OutputState }

func (ParquetSerializationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetSerialization)(nil)).Elem()
}

func (o ParquetSerializationPtrOutput) ToParquetSerializationPtrOutput() ParquetSerializationPtrOutput {
	return o
}

func (o ParquetSerializationPtrOutput) ToParquetSerializationPtrOutputWithContext(ctx context.Context) ParquetSerializationPtrOutput {
	return o
}

func (o ParquetSerializationPtrOutput) Elem() ParquetSerializationOutput {
	return o.ApplyT(func(v *ParquetSerialization) ParquetSerialization {
		if v != nil {
			return *v
		}
		var ret ParquetSerialization
		return ret
	}).(ParquetSerializationOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Parquet'.
func (o ParquetSerializationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetSerialization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.
type ParquetSerializationResponse struct {
	// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Parquet'.
	Type string `pulumi:"type"`
}

// Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.
type ParquetSerializationResponseOutput struct{ *pulumi.OutputState }

func (ParquetSerializationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetSerializationResponse)(nil)).Elem()
}

func (o ParquetSerializationResponseOutput) ToParquetSerializationResponseOutput() ParquetSerializationResponseOutput {
	return o
}

func (o ParquetSerializationResponseOutput) ToParquetSerializationResponseOutputWithContext(ctx context.Context) ParquetSerializationResponseOutput {
	return o
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Parquet'.
func (o ParquetSerializationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ParquetSerializationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ParquetSerializationResponsePtrOutput struct{ *pulumi.OutputState }

func (ParquetSerializationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetSerializationResponse)(nil)).Elem()
}

func (o ParquetSerializationResponsePtrOutput) ToParquetSerializationResponsePtrOutput() ParquetSerializationResponsePtrOutput {
	return o
}

func (o ParquetSerializationResponsePtrOutput) ToParquetSerializationResponsePtrOutputWithContext(ctx context.Context) ParquetSerializationResponsePtrOutput {
	return o
}

func (o ParquetSerializationResponsePtrOutput) Elem() ParquetSerializationResponseOutput {
	return o.ApplyT(func(v *ParquetSerializationResponse) ParquetSerializationResponse {
		if v != nil {
			return *v
		}
		var ret ParquetSerializationResponse
		return ret
	}).(ParquetSerializationResponseOutput)
}

// Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Parquet'.
func (o ParquetSerializationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParquetSerializationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Power BI output data source.
type PowerBIOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
	Dataset *string `pulumi:"dataset"`
	// The ID of the Power BI group.
	GroupId *string `pulumi:"groupId"`
	// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
	GroupName *string `pulumi:"groupName"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken *string `pulumi:"refreshToken"`
	// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName *string `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName *string `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'PowerBI'.
	Type string `pulumi:"type"`
}

// PowerBIOutputDataSourceInput is an input type that accepts PowerBIOutputDataSourceArgs and PowerBIOutputDataSourceOutput values.
// You can construct a concrete instance of `PowerBIOutputDataSourceInput` via:
//
//	PowerBIOutputDataSourceArgs{...}
type PowerBIOutputDataSourceInput interface {
	pulumi.Input

	ToPowerBIOutputDataSourceOutput() PowerBIOutputDataSourceOutput
	ToPowerBIOutputDataSourceOutputWithContext(context.Context) PowerBIOutputDataSourceOutput
}

// Describes a Power BI output data source.
type PowerBIOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
	// The ID of the Power BI group.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
	GroupName pulumi.StringPtrInput `pulumi:"groupName"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
	Table pulumi.StringPtrInput `pulumi:"table"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName pulumi.StringPtrInput `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName pulumi.StringPtrInput `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'PowerBI'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PowerBIOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerBIOutputDataSource)(nil)).Elem()
}

func (i PowerBIOutputDataSourceArgs) ToPowerBIOutputDataSourceOutput() PowerBIOutputDataSourceOutput {
	return i.ToPowerBIOutputDataSourceOutputWithContext(context.Background())
}

func (i PowerBIOutputDataSourceArgs) ToPowerBIOutputDataSourceOutputWithContext(ctx context.Context) PowerBIOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerBIOutputDataSourceOutput)
}

func (i PowerBIOutputDataSourceArgs) ToPowerBIOutputDataSourcePtrOutput() PowerBIOutputDataSourcePtrOutput {
	return i.ToPowerBIOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i PowerBIOutputDataSourceArgs) ToPowerBIOutputDataSourcePtrOutputWithContext(ctx context.Context) PowerBIOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerBIOutputDataSourceOutput).ToPowerBIOutputDataSourcePtrOutputWithContext(ctx)
}

// PowerBIOutputDataSourcePtrInput is an input type that accepts PowerBIOutputDataSourceArgs, PowerBIOutputDataSourcePtr and PowerBIOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `PowerBIOutputDataSourcePtrInput` via:
//
//	        PowerBIOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type PowerBIOutputDataSourcePtrInput interface {
	pulumi.Input

	ToPowerBIOutputDataSourcePtrOutput() PowerBIOutputDataSourcePtrOutput
	ToPowerBIOutputDataSourcePtrOutputWithContext(context.Context) PowerBIOutputDataSourcePtrOutput
}

type powerBIOutputDataSourcePtrType PowerBIOutputDataSourceArgs

func PowerBIOutputDataSourcePtr(v *PowerBIOutputDataSourceArgs) PowerBIOutputDataSourcePtrInput {
	return (*powerBIOutputDataSourcePtrType)(v)
}

func (*powerBIOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerBIOutputDataSource)(nil)).Elem()
}

func (i *powerBIOutputDataSourcePtrType) ToPowerBIOutputDataSourcePtrOutput() PowerBIOutputDataSourcePtrOutput {
	return i.ToPowerBIOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *powerBIOutputDataSourcePtrType) ToPowerBIOutputDataSourcePtrOutputWithContext(ctx context.Context) PowerBIOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PowerBIOutputDataSourcePtrOutput)
}

// Describes a Power BI output data source.
type PowerBIOutputDataSourceOutput struct{ *pulumi.OutputState }

func (PowerBIOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerBIOutputDataSource)(nil)).Elem()
}

func (o PowerBIOutputDataSourceOutput) ToPowerBIOutputDataSourceOutput() PowerBIOutputDataSourceOutput {
	return o
}

func (o PowerBIOutputDataSourceOutput) ToPowerBIOutputDataSourceOutputWithContext(ctx context.Context) PowerBIOutputDataSourceOutput {
	return o
}

func (o PowerBIOutputDataSourceOutput) ToPowerBIOutputDataSourcePtrOutput() PowerBIOutputDataSourcePtrOutput {
	return o.ToPowerBIOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o PowerBIOutputDataSourceOutput) ToPowerBIOutputDataSourcePtrOutputWithContext(ctx context.Context) PowerBIOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PowerBIOutputDataSource) *PowerBIOutputDataSource {
		return &v
	}).(PowerBIOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o PowerBIOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// The ID of the Power BI group.
func (o PowerBIOutputDataSourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
func (o PowerBIOutputDataSourceOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.TokenUserDisplayName }).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) *string { return v.TokenUserPrincipalName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'PowerBI'.
func (o PowerBIOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PowerBIOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type PowerBIOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (PowerBIOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerBIOutputDataSource)(nil)).Elem()
}

func (o PowerBIOutputDataSourcePtrOutput) ToPowerBIOutputDataSourcePtrOutput() PowerBIOutputDataSourcePtrOutput {
	return o
}

func (o PowerBIOutputDataSourcePtrOutput) ToPowerBIOutputDataSourcePtrOutputWithContext(ctx context.Context) PowerBIOutputDataSourcePtrOutput {
	return o
}

func (o PowerBIOutputDataSourcePtrOutput) Elem() PowerBIOutputDataSourceOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) PowerBIOutputDataSource {
		if v != nil {
			return *v
		}
		var ret PowerBIOutputDataSource
		return ret
	}).(PowerBIOutputDataSourceOutput)
}

// Authentication Mode.
func (o PowerBIOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourcePtrOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(pulumi.StringPtrOutput)
}

// The ID of the Power BI group.
func (o PowerBIOutputDataSourcePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
func (o PowerBIOutputDataSourcePtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourcePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourcePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourcePtrOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserDisplayName
	}).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourcePtrOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'PowerBI'.
func (o PowerBIOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Power BI output data source.
type PowerBIOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
	Dataset *string `pulumi:"dataset"`
	// The ID of the Power BI group.
	GroupId *string `pulumi:"groupId"`
	// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
	GroupName *string `pulumi:"groupName"`
	// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
	RefreshToken *string `pulumi:"refreshToken"`
	// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
	Table *string `pulumi:"table"`
	// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserDisplayName *string `pulumi:"tokenUserDisplayName"`
	// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
	TokenUserPrincipalName *string `pulumi:"tokenUserPrincipalName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'PowerBI'.
	Type string `pulumi:"type"`
}

// Describes a Power BI output data source.
type PowerBIOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PowerBIOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowerBIOutputDataSourceResponse)(nil)).Elem()
}

func (o PowerBIOutputDataSourceResponseOutput) ToPowerBIOutputDataSourceResponseOutput() PowerBIOutputDataSourceResponseOutput {
	return o
}

func (o PowerBIOutputDataSourceResponseOutput) ToPowerBIOutputDataSourceResponseOutputWithContext(ctx context.Context) PowerBIOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o PowerBIOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponseOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// The ID of the Power BI group.
func (o PowerBIOutputDataSourceResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
func (o PowerBIOutputDataSourceResponseOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.GroupName }).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponseOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.Table }).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceResponseOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.TokenUserDisplayName }).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceResponseOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) *string { return v.TokenUserPrincipalName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'PowerBI'.
func (o PowerBIOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PowerBIOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PowerBIOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (PowerBIOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PowerBIOutputDataSourceResponse)(nil)).Elem()
}

func (o PowerBIOutputDataSourceResponsePtrOutput) ToPowerBIOutputDataSourceResponsePtrOutput() PowerBIOutputDataSourceResponsePtrOutput {
	return o
}

func (o PowerBIOutputDataSourceResponsePtrOutput) ToPowerBIOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) PowerBIOutputDataSourceResponsePtrOutput {
	return o
}

func (o PowerBIOutputDataSourceResponsePtrOutput) Elem() PowerBIOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) PowerBIOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret PowerBIOutputDataSourceResponse
		return ret
	}).(PowerBIOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o PowerBIOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponsePtrOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(pulumi.StringPtrOutput)
}

// The ID of the Power BI group.
func (o PowerBIOutputDataSourceResponsePtrOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupId
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI group. Use this property to help remember which specific Power BI group id was used.
func (o PowerBIOutputDataSourceResponsePtrOutput) GroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupName
	}).(pulumi.StringPtrOutput)
}

// A refresh token that can be used to obtain a valid access token that can then be used to authenticate with the data source. A valid refresh token is currently only obtainable via the Azure Portal. It is recommended to put a dummy string value here when creating the data source and then going to the Azure Portal to authenticate the data source which will update this property with a valid refresh token. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// The name of the Power BI table under the specified dataset. Required on PUT (CreateOrReplace) requests.
func (o PowerBIOutputDataSourceResponsePtrOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Table
	}).(pulumi.StringPtrOutput)
}

// The user display name of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceResponsePtrOutput) TokenUserDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserDisplayName
	}).(pulumi.StringPtrOutput)
}

// The user principal name (UPN) of the user that was used to obtain the refresh token. Use this property to help remember which user was used to obtain the refresh token.
func (o PowerBIOutputDataSourceResponsePtrOutput) TokenUserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenUserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'PowerBI'.
func (o PowerBIOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PowerBIOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A collection of read-only information about the state of the connection to the private remote resource.
type PrivateLinkConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the remote resource/service.
	Status string `pulumi:"status"`
}

// A collection of read-only information about the state of the connection to the private remote resource.
type PrivateLinkConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutput() PrivateLinkConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkConnectionStateResponseOutput) ToPrivateLinkConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkConnectionStateResponseOutput) ActionsRequired() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) string { return v.ActionsRequired }).(pulumi.StringOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkConnectionStateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the remote resource/service.
func (o PrivateLinkConnectionStateResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkConnectionStateResponse) string { return v.Status }).(pulumi.StringOutput)
}

type PrivateLinkConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutput() PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) ToPrivateLinkConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkConnectionStateResponsePtrOutput) Elem() PrivateLinkConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) PrivateLinkConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkConnectionStateResponse
		return ret
	}).(PrivateLinkConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the remote resource/service.
func (o PrivateLinkConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// A grouping of information about the connection to the remote resource.
type PrivateLinkServiceConnection struct {
	// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
	GroupIds []string `pulumi:"groupIds"`
	// The resource id of the private link service. Required on PUT (CreateOrUpdate) requests.
	PrivateLinkServiceId *string `pulumi:"privateLinkServiceId"`
}

// PrivateLinkServiceConnectionInput is an input type that accepts PrivateLinkServiceConnectionArgs and PrivateLinkServiceConnectionOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionInput` via:
//
//	PrivateLinkServiceConnectionArgs{...}
type PrivateLinkServiceConnectionInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionOutput() PrivateLinkServiceConnectionOutput
	ToPrivateLinkServiceConnectionOutputWithContext(context.Context) PrivateLinkServiceConnectionOutput
}

// A grouping of information about the connection to the remote resource.
type PrivateLinkServiceConnectionArgs struct {
	// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The resource id of the private link service. Required on PUT (CreateOrUpdate) requests.
	PrivateLinkServiceId pulumi.StringPtrInput `pulumi:"privateLinkServiceId"`
}

func (PrivateLinkServiceConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnection)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionArgs) ToPrivateLinkServiceConnectionOutput() PrivateLinkServiceConnectionOutput {
	return i.ToPrivateLinkServiceConnectionOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionArgs) ToPrivateLinkServiceConnectionOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionOutput)
}

// PrivateLinkServiceConnectionArrayInput is an input type that accepts PrivateLinkServiceConnectionArray and PrivateLinkServiceConnectionArrayOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionArrayInput` via:
//
//	PrivateLinkServiceConnectionArray{ PrivateLinkServiceConnectionArgs{...} }
type PrivateLinkServiceConnectionArrayInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionArrayOutput() PrivateLinkServiceConnectionArrayOutput
	ToPrivateLinkServiceConnectionArrayOutputWithContext(context.Context) PrivateLinkServiceConnectionArrayOutput
}

type PrivateLinkServiceConnectionArray []PrivateLinkServiceConnectionInput

func (PrivateLinkServiceConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkServiceConnection)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionArray) ToPrivateLinkServiceConnectionArrayOutput() PrivateLinkServiceConnectionArrayOutput {
	return i.ToPrivateLinkServiceConnectionArrayOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionArray) ToPrivateLinkServiceConnectionArrayOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionArrayOutput)
}

// A grouping of information about the connection to the remote resource.
type PrivateLinkServiceConnectionOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnection)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionOutput) ToPrivateLinkServiceConnectionOutput() PrivateLinkServiceConnectionOutput {
	return o
}

func (o PrivateLinkServiceConnectionOutput) ToPrivateLinkServiceConnectionOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionOutput {
	return o
}

// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
func (o PrivateLinkServiceConnectionOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnection) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The resource id of the private link service. Required on PUT (CreateOrUpdate) requests.
func (o PrivateLinkServiceConnectionOutput) PrivateLinkServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnection) *string { return v.PrivateLinkServiceId }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkServiceConnection)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionArrayOutput) ToPrivateLinkServiceConnectionArrayOutput() PrivateLinkServiceConnectionArrayOutput {
	return o
}

func (o PrivateLinkServiceConnectionArrayOutput) ToPrivateLinkServiceConnectionArrayOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionArrayOutput {
	return o
}

func (o PrivateLinkServiceConnectionArrayOutput) Index(i pulumi.IntInput) PrivateLinkServiceConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkServiceConnection {
		return vs[0].([]PrivateLinkServiceConnection)[vs[1].(int)]
	}).(PrivateLinkServiceConnectionOutput)
}

// A grouping of information about the connection to the remote resource.
type PrivateLinkServiceConnectionResponse struct {
	// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
	GroupIds []string `pulumi:"groupIds"`
	// A collection of read-only information about the state of the connection to the private remote resource.
	PrivateLinkServiceConnectionState *PrivateLinkConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The resource id of the private link service. Required on PUT (CreateOrUpdate) requests.
	PrivateLinkServiceId *string `pulumi:"privateLinkServiceId"`
	// A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
	RequestMessage string `pulumi:"requestMessage"`
}

// A grouping of information about the connection to the remote resource.
type PrivateLinkServiceConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionResponseOutput) ToPrivateLinkServiceConnectionResponseOutput() PrivateLinkServiceConnectionResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionResponseOutput) ToPrivateLinkServiceConnectionResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionResponseOutput {
	return o
}

// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
func (o PrivateLinkServiceConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// A collection of read-only information about the state of the connection to the private remote resource.
func (o PrivateLinkServiceConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionResponse) *PrivateLinkConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkConnectionStateResponsePtrOutput)
}

// The resource id of the private link service. Required on PUT (CreateOrUpdate) requests.
func (o PrivateLinkServiceConnectionResponseOutput) PrivateLinkServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionResponse) *string { return v.PrivateLinkServiceId }).(pulumi.StringPtrOutput)
}

// A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
func (o PrivateLinkServiceConnectionResponseOutput) RequestMessage() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionResponse) string { return v.RequestMessage }).(pulumi.StringOutput)
}

type PrivateLinkServiceConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkServiceConnectionResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionResponseArrayOutput) ToPrivateLinkServiceConnectionResponseArrayOutput() PrivateLinkServiceConnectionResponseArrayOutput {
	return o
}

func (o PrivateLinkServiceConnectionResponseArrayOutput) ToPrivateLinkServiceConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionResponseArrayOutput {
	return o
}

func (o PrivateLinkServiceConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkServiceConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkServiceConnectionResponse {
		return vs[0].([]PrivateLinkServiceConnectionResponse)[vs[1].(int)]
	}).(PrivateLinkServiceConnectionResponseOutput)
}

// The properties that are associated with an input containing reference data.
type ReferenceInputProperties struct {
	// Describes how input data is compressed
	Compression *Compression `pulumi:"compression"`
	// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey *string `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Reference'.
	Type string `pulumi:"type"`
}

// ReferenceInputPropertiesInput is an input type that accepts ReferenceInputPropertiesArgs and ReferenceInputPropertiesOutput values.
// You can construct a concrete instance of `ReferenceInputPropertiesInput` via:
//
//	ReferenceInputPropertiesArgs{...}
type ReferenceInputPropertiesInput interface {
	pulumi.Input

	ToReferenceInputPropertiesOutput() ReferenceInputPropertiesOutput
	ToReferenceInputPropertiesOutputWithContext(context.Context) ReferenceInputPropertiesOutput
}

// The properties that are associated with an input containing reference data.
type ReferenceInputPropertiesArgs struct {
	// Describes how input data is compressed
	Compression CompressionPtrInput `pulumi:"compression"`
	// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
	Datasource pulumi.Input `pulumi:"datasource"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization pulumi.Input `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Reference'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ReferenceInputPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputProperties)(nil)).Elem()
}

func (i ReferenceInputPropertiesArgs) ToReferenceInputPropertiesOutput() ReferenceInputPropertiesOutput {
	return i.ToReferenceInputPropertiesOutputWithContext(context.Background())
}

func (i ReferenceInputPropertiesArgs) ToReferenceInputPropertiesOutputWithContext(ctx context.Context) ReferenceInputPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputPropertiesOutput)
}

func (i ReferenceInputPropertiesArgs) ToReferenceInputPropertiesPtrOutput() ReferenceInputPropertiesPtrOutput {
	return i.ToReferenceInputPropertiesPtrOutputWithContext(context.Background())
}

func (i ReferenceInputPropertiesArgs) ToReferenceInputPropertiesPtrOutputWithContext(ctx context.Context) ReferenceInputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputPropertiesOutput).ToReferenceInputPropertiesPtrOutputWithContext(ctx)
}

// ReferenceInputPropertiesPtrInput is an input type that accepts ReferenceInputPropertiesArgs, ReferenceInputPropertiesPtr and ReferenceInputPropertiesPtrOutput values.
// You can construct a concrete instance of `ReferenceInputPropertiesPtrInput` via:
//
//	        ReferenceInputPropertiesArgs{...}
//
//	or:
//
//	        nil
type ReferenceInputPropertiesPtrInput interface {
	pulumi.Input

	ToReferenceInputPropertiesPtrOutput() ReferenceInputPropertiesPtrOutput
	ToReferenceInputPropertiesPtrOutputWithContext(context.Context) ReferenceInputPropertiesPtrOutput
}

type referenceInputPropertiesPtrType ReferenceInputPropertiesArgs

func ReferenceInputPropertiesPtr(v *ReferenceInputPropertiesArgs) ReferenceInputPropertiesPtrInput {
	return (*referenceInputPropertiesPtrType)(v)
}

func (*referenceInputPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputProperties)(nil)).Elem()
}

func (i *referenceInputPropertiesPtrType) ToReferenceInputPropertiesPtrOutput() ReferenceInputPropertiesPtrOutput {
	return i.ToReferenceInputPropertiesPtrOutputWithContext(context.Background())
}

func (i *referenceInputPropertiesPtrType) ToReferenceInputPropertiesPtrOutputWithContext(ctx context.Context) ReferenceInputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceInputPropertiesPtrOutput)
}

// The properties that are associated with an input containing reference data.
type ReferenceInputPropertiesOutput struct{ *pulumi.OutputState }

func (ReferenceInputPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputProperties)(nil)).Elem()
}

func (o ReferenceInputPropertiesOutput) ToReferenceInputPropertiesOutput() ReferenceInputPropertiesOutput {
	return o
}

func (o ReferenceInputPropertiesOutput) ToReferenceInputPropertiesOutputWithContext(ctx context.Context) ReferenceInputPropertiesOutput {
	return o
}

func (o ReferenceInputPropertiesOutput) ToReferenceInputPropertiesPtrOutput() ReferenceInputPropertiesPtrOutput {
	return o.ToReferenceInputPropertiesPtrOutputWithContext(context.Background())
}

func (o ReferenceInputPropertiesOutput) ToReferenceInputPropertiesPtrOutputWithContext(ctx context.Context) ReferenceInputPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceInputProperties) *ReferenceInputProperties {
		return &v
	}).(ReferenceInputPropertiesPtrOutput)
}

// Describes how input data is compressed
func (o ReferenceInputPropertiesOutput) Compression() CompressionPtrOutput {
	return o.ApplyT(func(v ReferenceInputProperties) *Compression { return v.Compression }).(CompressionPtrOutput)
}

// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v ReferenceInputProperties) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o ReferenceInputPropertiesOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputProperties) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v ReferenceInputProperties) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Reference'.
func (o ReferenceInputPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputProperties) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ReferenceInputPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputProperties)(nil)).Elem()
}

func (o ReferenceInputPropertiesPtrOutput) ToReferenceInputPropertiesPtrOutput() ReferenceInputPropertiesPtrOutput {
	return o
}

func (o ReferenceInputPropertiesPtrOutput) ToReferenceInputPropertiesPtrOutputWithContext(ctx context.Context) ReferenceInputPropertiesPtrOutput {
	return o
}

func (o ReferenceInputPropertiesPtrOutput) Elem() ReferenceInputPropertiesOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) ReferenceInputProperties {
		if v != nil {
			return *v
		}
		var ret ReferenceInputProperties
		return ret
	}).(ReferenceInputPropertiesOutput)
}

// Describes how input data is compressed
func (o ReferenceInputPropertiesPtrOutput) Compression() CompressionPtrOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) *Compression {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(CompressionPtrOutput)
}

// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesPtrOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Datasource
	}).(pulumi.AnyOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o ReferenceInputPropertiesPtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesPtrOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Reference'.
func (o ReferenceInputPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input containing reference data.
type ReferenceInputPropertiesResponse struct {
	// Describes how input data is compressed
	Compression *CompressionResponse `pulumi:"compression"`
	// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponse `pulumi:"diagnostics"`
	// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey *string `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Reference'.
	Type string `pulumi:"type"`
}

// The properties that are associated with an input containing reference data.
type ReferenceInputPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ReferenceInputPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceInputPropertiesResponse)(nil)).Elem()
}

func (o ReferenceInputPropertiesResponseOutput) ToReferenceInputPropertiesResponseOutput() ReferenceInputPropertiesResponseOutput {
	return o
}

func (o ReferenceInputPropertiesResponseOutput) ToReferenceInputPropertiesResponseOutputWithContext(ctx context.Context) ReferenceInputPropertiesResponseOutput {
	return o
}

// Describes how input data is compressed
func (o ReferenceInputPropertiesResponseOutput) Compression() CompressionResponsePtrOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) *CompressionResponse { return v.Compression }).(CompressionResponsePtrOutput)
}

// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesResponseOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o ReferenceInputPropertiesResponseOutput) Diagnostics() DiagnosticsResponseOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) DiagnosticsResponse { return v.Diagnostics }).(DiagnosticsResponseOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o ReferenceInputPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o ReferenceInputPropertiesResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesResponseOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Reference'.
func (o ReferenceInputPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceInputPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ReferenceInputPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ReferenceInputPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceInputPropertiesResponse)(nil)).Elem()
}

func (o ReferenceInputPropertiesResponsePtrOutput) ToReferenceInputPropertiesResponsePtrOutput() ReferenceInputPropertiesResponsePtrOutput {
	return o
}

func (o ReferenceInputPropertiesResponsePtrOutput) ToReferenceInputPropertiesResponsePtrOutputWithContext(ctx context.Context) ReferenceInputPropertiesResponsePtrOutput {
	return o
}

func (o ReferenceInputPropertiesResponsePtrOutput) Elem() ReferenceInputPropertiesResponseOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) ReferenceInputPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ReferenceInputPropertiesResponse
		return ret
	}).(ReferenceInputPropertiesResponseOutput)
}

// Describes how input data is compressed
func (o ReferenceInputPropertiesResponsePtrOutput) Compression() CompressionResponsePtrOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) *CompressionResponse {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(CompressionResponsePtrOutput)
}

// Describes an input data source that contains reference data. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesResponsePtrOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Datasource
	}).(pulumi.AnyOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o ReferenceInputPropertiesResponsePtrOutput) Diagnostics() DiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) *DiagnosticsResponse {
		if v == nil {
			return nil
		}
		return &v.Diagnostics
	}).(DiagnosticsResponsePtrOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o ReferenceInputPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o ReferenceInputPropertiesResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o ReferenceInputPropertiesResponsePtrOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Reference'.
func (o ReferenceInputPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a scalar function.
type ScalarFunctionProperties struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding interface{}         `pulumi:"binding"`
	Inputs  []FunctionInputType `pulumi:"inputs"`
	// Describes the output of a function.
	Output *FunctionOutputType `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Scalar'.
	Type string `pulumi:"type"`
}

// ScalarFunctionPropertiesInput is an input type that accepts ScalarFunctionPropertiesArgs and ScalarFunctionPropertiesOutput values.
// You can construct a concrete instance of `ScalarFunctionPropertiesInput` via:
//
//	ScalarFunctionPropertiesArgs{...}
type ScalarFunctionPropertiesInput interface {
	pulumi.Input

	ToScalarFunctionPropertiesOutput() ScalarFunctionPropertiesOutput
	ToScalarFunctionPropertiesOutputWithContext(context.Context) ScalarFunctionPropertiesOutput
}

// The properties that are associated with a scalar function.
type ScalarFunctionPropertiesArgs struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding pulumi.Input                `pulumi:"binding"`
	Inputs  FunctionInputTypeArrayInput `pulumi:"inputs"`
	// Describes the output of a function.
	Output FunctionOutputTypePtrInput `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Scalar'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScalarFunctionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalarFunctionProperties)(nil)).Elem()
}

func (i ScalarFunctionPropertiesArgs) ToScalarFunctionPropertiesOutput() ScalarFunctionPropertiesOutput {
	return i.ToScalarFunctionPropertiesOutputWithContext(context.Background())
}

func (i ScalarFunctionPropertiesArgs) ToScalarFunctionPropertiesOutputWithContext(ctx context.Context) ScalarFunctionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalarFunctionPropertiesOutput)
}

func (i ScalarFunctionPropertiesArgs) ToScalarFunctionPropertiesPtrOutput() ScalarFunctionPropertiesPtrOutput {
	return i.ToScalarFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i ScalarFunctionPropertiesArgs) ToScalarFunctionPropertiesPtrOutputWithContext(ctx context.Context) ScalarFunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalarFunctionPropertiesOutput).ToScalarFunctionPropertiesPtrOutputWithContext(ctx)
}

// ScalarFunctionPropertiesPtrInput is an input type that accepts ScalarFunctionPropertiesArgs, ScalarFunctionPropertiesPtr and ScalarFunctionPropertiesPtrOutput values.
// You can construct a concrete instance of `ScalarFunctionPropertiesPtrInput` via:
//
//	        ScalarFunctionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ScalarFunctionPropertiesPtrInput interface {
	pulumi.Input

	ToScalarFunctionPropertiesPtrOutput() ScalarFunctionPropertiesPtrOutput
	ToScalarFunctionPropertiesPtrOutputWithContext(context.Context) ScalarFunctionPropertiesPtrOutput
}

type scalarFunctionPropertiesPtrType ScalarFunctionPropertiesArgs

func ScalarFunctionPropertiesPtr(v *ScalarFunctionPropertiesArgs) ScalarFunctionPropertiesPtrInput {
	return (*scalarFunctionPropertiesPtrType)(v)
}

func (*scalarFunctionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalarFunctionProperties)(nil)).Elem()
}

func (i *scalarFunctionPropertiesPtrType) ToScalarFunctionPropertiesPtrOutput() ScalarFunctionPropertiesPtrOutput {
	return i.ToScalarFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (i *scalarFunctionPropertiesPtrType) ToScalarFunctionPropertiesPtrOutputWithContext(ctx context.Context) ScalarFunctionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalarFunctionPropertiesPtrOutput)
}

// The properties that are associated with a scalar function.
type ScalarFunctionPropertiesOutput struct{ *pulumi.OutputState }

func (ScalarFunctionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalarFunctionProperties)(nil)).Elem()
}

func (o ScalarFunctionPropertiesOutput) ToScalarFunctionPropertiesOutput() ScalarFunctionPropertiesOutput {
	return o
}

func (o ScalarFunctionPropertiesOutput) ToScalarFunctionPropertiesOutputWithContext(ctx context.Context) ScalarFunctionPropertiesOutput {
	return o
}

func (o ScalarFunctionPropertiesOutput) ToScalarFunctionPropertiesPtrOutput() ScalarFunctionPropertiesPtrOutput {
	return o.ToScalarFunctionPropertiesPtrOutputWithContext(context.Background())
}

func (o ScalarFunctionPropertiesOutput) ToScalarFunctionPropertiesPtrOutputWithContext(ctx context.Context) ScalarFunctionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScalarFunctionProperties) *ScalarFunctionProperties {
		return &v
	}).(ScalarFunctionPropertiesPtrOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o ScalarFunctionPropertiesOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v ScalarFunctionProperties) interface{} { return v.Binding }).(pulumi.AnyOutput)
}

func (o ScalarFunctionPropertiesOutput) Inputs() FunctionInputTypeArrayOutput {
	return o.ApplyT(func(v ScalarFunctionProperties) []FunctionInputType { return v.Inputs }).(FunctionInputTypeArrayOutput)
}

// Describes the output of a function.
func (o ScalarFunctionPropertiesOutput) Output() FunctionOutputTypePtrOutput {
	return o.ApplyT(func(v ScalarFunctionProperties) *FunctionOutputType { return v.Output }).(FunctionOutputTypePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Scalar'.
func (o ScalarFunctionPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScalarFunctionProperties) string { return v.Type }).(pulumi.StringOutput)
}

type ScalarFunctionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ScalarFunctionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalarFunctionProperties)(nil)).Elem()
}

func (o ScalarFunctionPropertiesPtrOutput) ToScalarFunctionPropertiesPtrOutput() ScalarFunctionPropertiesPtrOutput {
	return o
}

func (o ScalarFunctionPropertiesPtrOutput) ToScalarFunctionPropertiesPtrOutputWithContext(ctx context.Context) ScalarFunctionPropertiesPtrOutput {
	return o
}

func (o ScalarFunctionPropertiesPtrOutput) Elem() ScalarFunctionPropertiesOutput {
	return o.ApplyT(func(v *ScalarFunctionProperties) ScalarFunctionProperties {
		if v != nil {
			return *v
		}
		var ret ScalarFunctionProperties
		return ret
	}).(ScalarFunctionPropertiesOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o ScalarFunctionPropertiesPtrOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v *ScalarFunctionProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Binding
	}).(pulumi.AnyOutput)
}

func (o ScalarFunctionPropertiesPtrOutput) Inputs() FunctionInputTypeArrayOutput {
	return o.ApplyT(func(v *ScalarFunctionProperties) []FunctionInputType {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(FunctionInputTypeArrayOutput)
}

// Describes the output of a function.
func (o ScalarFunctionPropertiesPtrOutput) Output() FunctionOutputTypePtrOutput {
	return o.ApplyT(func(v *ScalarFunctionProperties) *FunctionOutputType {
		if v == nil {
			return nil
		}
		return v.Output
	}).(FunctionOutputTypePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Scalar'.
func (o ScalarFunctionPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalarFunctionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a scalar function.
type ScalarFunctionPropertiesResponse struct {
	// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
	Binding interface{} `pulumi:"binding"`
	// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag   string                  `pulumi:"etag"`
	Inputs []FunctionInputResponse `pulumi:"inputs"`
	// Describes the output of a function.
	Output *FunctionOutputResponse `pulumi:"output"`
	// Indicates the type of function.
	// Expected value is 'Scalar'.
	Type string `pulumi:"type"`
}

// The properties that are associated with a scalar function.
type ScalarFunctionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ScalarFunctionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalarFunctionPropertiesResponse)(nil)).Elem()
}

func (o ScalarFunctionPropertiesResponseOutput) ToScalarFunctionPropertiesResponseOutput() ScalarFunctionPropertiesResponseOutput {
	return o
}

func (o ScalarFunctionPropertiesResponseOutput) ToScalarFunctionPropertiesResponseOutputWithContext(ctx context.Context) ScalarFunctionPropertiesResponseOutput {
	return o
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o ScalarFunctionPropertiesResponseOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v ScalarFunctionPropertiesResponse) interface{} { return v.Binding }).(pulumi.AnyOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o ScalarFunctionPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v ScalarFunctionPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

func (o ScalarFunctionPropertiesResponseOutput) Inputs() FunctionInputResponseArrayOutput {
	return o.ApplyT(func(v ScalarFunctionPropertiesResponse) []FunctionInputResponse { return v.Inputs }).(FunctionInputResponseArrayOutput)
}

// Describes the output of a function.
func (o ScalarFunctionPropertiesResponseOutput) Output() FunctionOutputResponsePtrOutput {
	return o.ApplyT(func(v ScalarFunctionPropertiesResponse) *FunctionOutputResponse { return v.Output }).(FunctionOutputResponsePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Scalar'.
func (o ScalarFunctionPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScalarFunctionPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ScalarFunctionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ScalarFunctionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalarFunctionPropertiesResponse)(nil)).Elem()
}

func (o ScalarFunctionPropertiesResponsePtrOutput) ToScalarFunctionPropertiesResponsePtrOutput() ScalarFunctionPropertiesResponsePtrOutput {
	return o
}

func (o ScalarFunctionPropertiesResponsePtrOutput) ToScalarFunctionPropertiesResponsePtrOutputWithContext(ctx context.Context) ScalarFunctionPropertiesResponsePtrOutput {
	return o
}

func (o ScalarFunctionPropertiesResponsePtrOutput) Elem() ScalarFunctionPropertiesResponseOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) ScalarFunctionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ScalarFunctionPropertiesResponse
		return ret
	}).(ScalarFunctionPropertiesResponseOutput)
}

// The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.
func (o ScalarFunctionPropertiesResponsePtrOutput) Binding() pulumi.AnyOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Binding
	}).(pulumi.AnyOutput)
}

// The current entity tag for the function. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o ScalarFunctionPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

func (o ScalarFunctionPropertiesResponsePtrOutput) Inputs() FunctionInputResponseArrayOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) []FunctionInputResponse {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(FunctionInputResponseArrayOutput)
}

// Describes the output of a function.
func (o ScalarFunctionPropertiesResponsePtrOutput) Output() FunctionOutputResponsePtrOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) *FunctionOutputResponse {
		if v == nil {
			return nil
		}
		return v.Output
	}).(FunctionOutputResponsePtrOutput)
}

// Indicates the type of function.
// Expected value is 'Scalar'.
func (o ScalarFunctionPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalarFunctionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Service Bus Queue output data source.
type ServiceBusQueueOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
	QueueName *string `pulumi:"queueName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns interface{} `pulumi:"systemPropertyColumns"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Queue'.
	Type string `pulumi:"type"`
}

// ServiceBusQueueOutputDataSourceInput is an input type that accepts ServiceBusQueueOutputDataSourceArgs and ServiceBusQueueOutputDataSourceOutput values.
// You can construct a concrete instance of `ServiceBusQueueOutputDataSourceInput` via:
//
//	ServiceBusQueueOutputDataSourceArgs{...}
type ServiceBusQueueOutputDataSourceInput interface {
	pulumi.Input

	ToServiceBusQueueOutputDataSourceOutput() ServiceBusQueueOutputDataSourceOutput
	ToServiceBusQueueOutputDataSourceOutputWithContext(context.Context) ServiceBusQueueOutputDataSourceOutput
}

// Describes a Service Bus Queue output data source.
type ServiceBusQueueOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns pulumi.StringArrayInput `pulumi:"propertyColumns"`
	// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
	QueueName pulumi.StringPtrInput `pulumi:"queueName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns pulumi.Input `pulumi:"systemPropertyColumns"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Queue'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceBusQueueOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueOutputDataSource)(nil)).Elem()
}

func (i ServiceBusQueueOutputDataSourceArgs) ToServiceBusQueueOutputDataSourceOutput() ServiceBusQueueOutputDataSourceOutput {
	return i.ToServiceBusQueueOutputDataSourceOutputWithContext(context.Background())
}

func (i ServiceBusQueueOutputDataSourceArgs) ToServiceBusQueueOutputDataSourceOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueOutputDataSourceOutput)
}

func (i ServiceBusQueueOutputDataSourceArgs) ToServiceBusQueueOutputDataSourcePtrOutput() ServiceBusQueueOutputDataSourcePtrOutput {
	return i.ToServiceBusQueueOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i ServiceBusQueueOutputDataSourceArgs) ToServiceBusQueueOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueOutputDataSourceOutput).ToServiceBusQueueOutputDataSourcePtrOutputWithContext(ctx)
}

// ServiceBusQueueOutputDataSourcePtrInput is an input type that accepts ServiceBusQueueOutputDataSourceArgs, ServiceBusQueueOutputDataSourcePtr and ServiceBusQueueOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `ServiceBusQueueOutputDataSourcePtrInput` via:
//
//	        ServiceBusQueueOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type ServiceBusQueueOutputDataSourcePtrInput interface {
	pulumi.Input

	ToServiceBusQueueOutputDataSourcePtrOutput() ServiceBusQueueOutputDataSourcePtrOutput
	ToServiceBusQueueOutputDataSourcePtrOutputWithContext(context.Context) ServiceBusQueueOutputDataSourcePtrOutput
}

type serviceBusQueueOutputDataSourcePtrType ServiceBusQueueOutputDataSourceArgs

func ServiceBusQueueOutputDataSourcePtr(v *ServiceBusQueueOutputDataSourceArgs) ServiceBusQueueOutputDataSourcePtrInput {
	return (*serviceBusQueueOutputDataSourcePtrType)(v)
}

func (*serviceBusQueueOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueOutputDataSource)(nil)).Elem()
}

func (i *serviceBusQueueOutputDataSourcePtrType) ToServiceBusQueueOutputDataSourcePtrOutput() ServiceBusQueueOutputDataSourcePtrOutput {
	return i.ToServiceBusQueueOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *serviceBusQueueOutputDataSourcePtrType) ToServiceBusQueueOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusQueueOutputDataSourcePtrOutput)
}

// Describes a Service Bus Queue output data source.
type ServiceBusQueueOutputDataSourceOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueOutputDataSource)(nil)).Elem()
}

func (o ServiceBusQueueOutputDataSourceOutput) ToServiceBusQueueOutputDataSourceOutput() ServiceBusQueueOutputDataSourceOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourceOutput) ToServiceBusQueueOutputDataSourceOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourceOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourceOutput) ToServiceBusQueueOutputDataSourcePtrOutput() ServiceBusQueueOutputDataSourcePtrOutput {
	return o.ToServiceBusQueueOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o ServiceBusQueueOutputDataSourceOutput) ToServiceBusQueueOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceBusQueueOutputDataSource) *ServiceBusQueueOutputDataSource {
		return &v
	}).(ServiceBusQueueOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o ServiceBusQueueOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusQueueOutputDataSourceOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusQueueOutputDataSourceOutput) SystemPropertyColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) interface{} { return v.SystemPropertyColumns }).(pulumi.AnyOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Queue'.
func (o ServiceBusQueueOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceBusQueueOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueOutputDataSource)(nil)).Elem()
}

func (o ServiceBusQueueOutputDataSourcePtrOutput) ToServiceBusQueueOutputDataSourcePtrOutput() ServiceBusQueueOutputDataSourcePtrOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourcePtrOutput) ToServiceBusQueueOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourcePtrOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourcePtrOutput) Elem() ServiceBusQueueOutputDataSourceOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) ServiceBusQueueOutputDataSource {
		if v != nil {
			return *v
		}
		var ret ServiceBusQueueOutputDataSource
		return ret
	}).(ServiceBusQueueOutputDataSourceOutput)
}

// Authentication Mode.
func (o ServiceBusQueueOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusQueueOutputDataSourcePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourcePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusQueueOutputDataSourcePtrOutput) SystemPropertyColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) interface{} {
		if v == nil {
			return nil
		}
		return v.SystemPropertyColumns
	}).(pulumi.AnyOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Queue'.
func (o ServiceBusQueueOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Service Bus Queue output data source.
type ServiceBusQueueOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
	QueueName *string `pulumi:"queueName"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns interface{} `pulumi:"systemPropertyColumns"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Queue'.
	Type string `pulumi:"type"`
}

// Describes a Service Bus Queue output data source.
type ServiceBusQueueOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusQueueOutputDataSourceResponse)(nil)).Elem()
}

func (o ServiceBusQueueOutputDataSourceResponseOutput) ToServiceBusQueueOutputDataSourceResponseOutput() ServiceBusQueueOutputDataSourceResponseOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourceResponseOutput) ToServiceBusQueueOutputDataSourceResponseOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o ServiceBusQueueOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusQueueOutputDataSourceResponseOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponseOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) *string { return v.QueueName }).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusQueueOutputDataSourceResponseOutput) SystemPropertyColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) interface{} { return v.SystemPropertyColumns }).(pulumi.AnyOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Queue'.
func (o ServiceBusQueueOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusQueueOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceBusQueueOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusQueueOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusQueueOutputDataSourceResponse)(nil)).Elem()
}

func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) ToServiceBusQueueOutputDataSourceResponsePtrOutput() ServiceBusQueueOutputDataSourceResponsePtrOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) ToServiceBusQueueOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) ServiceBusQueueOutputDataSourceResponsePtrOutput {
	return o
}

func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) Elem() ServiceBusQueueOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) ServiceBusQueueOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret ServiceBusQueueOutputDataSourceResponse
		return ret
	}).(ServiceBusQueueOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The name of the Service Bus Queue. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) QueueName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueueName
	}).(pulumi.StringPtrOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Queue. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) SystemPropertyColumns() pulumi.AnyOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.SystemPropertyColumns
	}).(pulumi.AnyOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Queue'.
func (o ServiceBusQueueOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusQueueOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Service Bus Topic output data source.
type ServiceBusTopicOutputDataSource struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns map[string]string `pulumi:"systemPropertyColumns"`
	// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
	TopicName *string `pulumi:"topicName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Topic'.
	Type string `pulumi:"type"`
}

// ServiceBusTopicOutputDataSourceInput is an input type that accepts ServiceBusTopicOutputDataSourceArgs and ServiceBusTopicOutputDataSourceOutput values.
// You can construct a concrete instance of `ServiceBusTopicOutputDataSourceInput` via:
//
//	ServiceBusTopicOutputDataSourceArgs{...}
type ServiceBusTopicOutputDataSourceInput interface {
	pulumi.Input

	ToServiceBusTopicOutputDataSourceOutput() ServiceBusTopicOutputDataSourceOutput
	ToServiceBusTopicOutputDataSourceOutputWithContext(context.Context) ServiceBusTopicOutputDataSourceOutput
}

// Describes a Service Bus Topic output data source.
type ServiceBusTopicOutputDataSourceArgs struct {
	// Authentication Mode.
	AuthenticationMode pulumi.StringPtrInput `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns pulumi.StringArrayInput `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace pulumi.StringPtrInput `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey pulumi.StringPtrInput `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName pulumi.StringPtrInput `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns pulumi.StringMapInput `pulumi:"systemPropertyColumns"`
	// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Topic'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceBusTopicOutputDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicOutputDataSource)(nil)).Elem()
}

func (i ServiceBusTopicOutputDataSourceArgs) ToServiceBusTopicOutputDataSourceOutput() ServiceBusTopicOutputDataSourceOutput {
	return i.ToServiceBusTopicOutputDataSourceOutputWithContext(context.Background())
}

func (i ServiceBusTopicOutputDataSourceArgs) ToServiceBusTopicOutputDataSourceOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicOutputDataSourceOutput)
}

func (i ServiceBusTopicOutputDataSourceArgs) ToServiceBusTopicOutputDataSourcePtrOutput() ServiceBusTopicOutputDataSourcePtrOutput {
	return i.ToServiceBusTopicOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i ServiceBusTopicOutputDataSourceArgs) ToServiceBusTopicOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicOutputDataSourceOutput).ToServiceBusTopicOutputDataSourcePtrOutputWithContext(ctx)
}

// ServiceBusTopicOutputDataSourcePtrInput is an input type that accepts ServiceBusTopicOutputDataSourceArgs, ServiceBusTopicOutputDataSourcePtr and ServiceBusTopicOutputDataSourcePtrOutput values.
// You can construct a concrete instance of `ServiceBusTopicOutputDataSourcePtrInput` via:
//
//	        ServiceBusTopicOutputDataSourceArgs{...}
//
//	or:
//
//	        nil
type ServiceBusTopicOutputDataSourcePtrInput interface {
	pulumi.Input

	ToServiceBusTopicOutputDataSourcePtrOutput() ServiceBusTopicOutputDataSourcePtrOutput
	ToServiceBusTopicOutputDataSourcePtrOutputWithContext(context.Context) ServiceBusTopicOutputDataSourcePtrOutput
}

type serviceBusTopicOutputDataSourcePtrType ServiceBusTopicOutputDataSourceArgs

func ServiceBusTopicOutputDataSourcePtr(v *ServiceBusTopicOutputDataSourceArgs) ServiceBusTopicOutputDataSourcePtrInput {
	return (*serviceBusTopicOutputDataSourcePtrType)(v)
}

func (*serviceBusTopicOutputDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicOutputDataSource)(nil)).Elem()
}

func (i *serviceBusTopicOutputDataSourcePtrType) ToServiceBusTopicOutputDataSourcePtrOutput() ServiceBusTopicOutputDataSourcePtrOutput {
	return i.ToServiceBusTopicOutputDataSourcePtrOutputWithContext(context.Background())
}

func (i *serviceBusTopicOutputDataSourcePtrType) ToServiceBusTopicOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceBusTopicOutputDataSourcePtrOutput)
}

// Describes a Service Bus Topic output data source.
type ServiceBusTopicOutputDataSourceOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicOutputDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicOutputDataSource)(nil)).Elem()
}

func (o ServiceBusTopicOutputDataSourceOutput) ToServiceBusTopicOutputDataSourceOutput() ServiceBusTopicOutputDataSourceOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourceOutput) ToServiceBusTopicOutputDataSourceOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourceOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourceOutput) ToServiceBusTopicOutputDataSourcePtrOutput() ServiceBusTopicOutputDataSourcePtrOutput {
	return o.ToServiceBusTopicOutputDataSourcePtrOutputWithContext(context.Background())
}

func (o ServiceBusTopicOutputDataSourceOutput) ToServiceBusTopicOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceBusTopicOutputDataSource) *ServiceBusTopicOutputDataSource {
		return &v
	}).(ServiceBusTopicOutputDataSourcePtrOutput)
}

// Authentication Mode.
func (o ServiceBusTopicOutputDataSourceOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusTopicOutputDataSourceOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusTopicOutputDataSourceOutput) SystemPropertyColumns() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) map[string]string { return v.SystemPropertyColumns }).(pulumi.StringMapOutput)
}

// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Topic'.
func (o ServiceBusTopicOutputDataSourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSource) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceBusTopicOutputDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicOutputDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicOutputDataSource)(nil)).Elem()
}

func (o ServiceBusTopicOutputDataSourcePtrOutput) ToServiceBusTopicOutputDataSourcePtrOutput() ServiceBusTopicOutputDataSourcePtrOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourcePtrOutput) ToServiceBusTopicOutputDataSourcePtrOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourcePtrOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourcePtrOutput) Elem() ServiceBusTopicOutputDataSourceOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) ServiceBusTopicOutputDataSource {
		if v != nil {
			return *v
		}
		var ret ServiceBusTopicOutputDataSource
		return ret
	}).(ServiceBusTopicOutputDataSourceOutput)
}

// Authentication Mode.
func (o ServiceBusTopicOutputDataSourcePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusTopicOutputDataSourcePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourcePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourcePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourcePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusTopicOutputDataSourcePtrOutput) SystemPropertyColumns() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.SystemPropertyColumns
	}).(pulumi.StringMapOutput)
}

// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourcePtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Topic'.
func (o ServiceBusTopicOutputDataSourcePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Describes a Service Bus Topic output data source.
type ServiceBusTopicOutputDataSourceResponse struct {
	// Authentication Mode.
	AuthenticationMode *string `pulumi:"authenticationMode"`
	// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
	PropertyColumns []string `pulumi:"propertyColumns"`
	// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	ServiceBusNamespace *string `pulumi:"serviceBusNamespace"`
	// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyKey *string `pulumi:"sharedAccessPolicyKey"`
	// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
	SharedAccessPolicyName *string `pulumi:"sharedAccessPolicyName"`
	// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
	SystemPropertyColumns map[string]string `pulumi:"systemPropertyColumns"`
	// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
	TopicName *string `pulumi:"topicName"`
	// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Microsoft.ServiceBus/Topic'.
	Type string `pulumi:"type"`
}

// Describes a Service Bus Topic output data source.
type ServiceBusTopicOutputDataSourceResponseOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicOutputDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceBusTopicOutputDataSourceResponse)(nil)).Elem()
}

func (o ServiceBusTopicOutputDataSourceResponseOutput) ToServiceBusTopicOutputDataSourceResponseOutput() ServiceBusTopicOutputDataSourceResponseOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourceResponseOutput) ToServiceBusTopicOutputDataSourceResponseOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourceResponseOutput {
	return o
}

// Authentication Mode.
func (o ServiceBusTopicOutputDataSourceResponseOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) *string { return v.AuthenticationMode }).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusTopicOutputDataSourceResponseOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) []string { return v.PropertyColumns }).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponseOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) *string { return v.ServiceBusNamespace }).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponseOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) *string { return v.SharedAccessPolicyKey }).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponseOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) *string { return v.SharedAccessPolicyName }).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusTopicOutputDataSourceResponseOutput) SystemPropertyColumns() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) map[string]string { return v.SystemPropertyColumns }).(pulumi.StringMapOutput)
}

// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponseOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Topic'.
func (o ServiceBusTopicOutputDataSourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceBusTopicOutputDataSourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceBusTopicOutputDataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceBusTopicOutputDataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceBusTopicOutputDataSourceResponse)(nil)).Elem()
}

func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) ToServiceBusTopicOutputDataSourceResponsePtrOutput() ServiceBusTopicOutputDataSourceResponsePtrOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) ToServiceBusTopicOutputDataSourceResponsePtrOutputWithContext(ctx context.Context) ServiceBusTopicOutputDataSourceResponsePtrOutput {
	return o
}

func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) Elem() ServiceBusTopicOutputDataSourceResponseOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) ServiceBusTopicOutputDataSourceResponse {
		if v != nil {
			return *v
		}
		var ret ServiceBusTopicOutputDataSourceResponse
		return ret
	}).(ServiceBusTopicOutputDataSourceResponseOutput)
}

// Authentication Mode.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) AuthenticationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthenticationMode
	}).(pulumi.StringPtrOutput)
}

// A string array of the names of output columns to be attached to Service Bus messages as custom properties.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) PropertyColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) []string {
		if v == nil {
			return nil
		}
		return v.PropertyColumns
	}).(pulumi.StringArrayOutput)
}

// The namespace that is associated with the desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) ServiceBusNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusNamespace
	}).(pulumi.StringPtrOutput)
}

// The shared access policy key for the specified shared access policy. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) SharedAccessPolicyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyKey
	}).(pulumi.StringPtrOutput)
}

// The shared access policy name for the Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) SharedAccessPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SharedAccessPolicyName
	}).(pulumi.StringPtrOutput)
}

// The system properties associated with the Service Bus Topic Output. The following system properties are supported: ReplyToSessionId, ContentType, To, Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo, Label, ScheduledEnqueueTimeUtc.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) SystemPropertyColumns() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.SystemPropertyColumns
	}).(pulumi.StringMapOutput)
}

// The name of the Service Bus Topic. Required on PUT (CreateOrReplace) requests.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of data source output will be written to. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Microsoft.ServiceBus/Topic'.
func (o ServiceBusTopicOutputDataSourceResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceBusTopicOutputDataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a SKU.
type Sku struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name *string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The properties that are associated with a SKU.
type SkuArgs struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The properties that are associated with a SKU.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with a SKU.
type SkuResponse struct {
	// The name of the SKU. Required on PUT (CreateOrReplace) requests.
	Name *string `pulumi:"name"`
}

// The properties that are associated with a SKU.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// The name of the SKU. Required on PUT (CreateOrReplace) requests.
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an Azure Storage account
type StorageAccount struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
}

// StorageAccountInput is an input type that accepts StorageAccountArgs and StorageAccountOutput values.
// You can construct a concrete instance of `StorageAccountInput` via:
//
//	StorageAccountArgs{...}
type StorageAccountInput interface {
	pulumi.Input

	ToStorageAccountOutput() StorageAccountOutput
	ToStorageAccountOutputWithContext(context.Context) StorageAccountOutput
}

// The properties that are associated with an Azure Storage account
type StorageAccountArgs struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
}

func (StorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (i StorageAccountArgs) ToStorageAccountOutput() StorageAccountOutput {
	return i.ToStorageAccountOutputWithContext(context.Background())
}

func (i StorageAccountArgs) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountOutput)
}

// StorageAccountArrayInput is an input type that accepts StorageAccountArray and StorageAccountArrayOutput values.
// You can construct a concrete instance of `StorageAccountArrayInput` via:
//
//	StorageAccountArray{ StorageAccountArgs{...} }
type StorageAccountArrayInput interface {
	pulumi.Input

	ToStorageAccountArrayOutput() StorageAccountArrayOutput
	ToStorageAccountArrayOutputWithContext(context.Context) StorageAccountArrayOutput
}

type StorageAccountArray []StorageAccountInput

func (StorageAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (i StorageAccountArray) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return i.ToStorageAccountArrayOutputWithContext(context.Background())
}

func (i StorageAccountArray) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountArrayOutput)
}

// The properties that are associated with an Azure Storage account
type StorageAccountOutput struct{ *pulumi.OutputState }

func (StorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccount)(nil)).Elem()
}

func (o StorageAccountOutput) ToStorageAccountOutput() StorageAccountOutput {
	return o
}

func (o StorageAccountOutput) ToStorageAccountOutputWithContext(ctx context.Context) StorageAccountOutput {
	return o
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o StorageAccountOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o StorageAccountOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccount) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

type StorageAccountArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccount)(nil)).Elem()
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutput() StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) ToStorageAccountArrayOutputWithContext(ctx context.Context) StorageAccountArrayOutput {
	return o
}

func (o StorageAccountArrayOutput) Index(i pulumi.IntInput) StorageAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccount {
		return vs[0].([]StorageAccount)[vs[1].(int)]
	}).(StorageAccountOutput)
}

// The properties that are associated with an Azure Storage account
type StorageAccountResponse struct {
	// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountKey *string `pulumi:"accountKey"`
	// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
	AccountName *string `pulumi:"accountName"`
}

// The properties that are associated with an Azure Storage account
type StorageAccountResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutput() StorageAccountResponseOutput {
	return o
}

func (o StorageAccountResponseOutput) ToStorageAccountResponseOutputWithContext(ctx context.Context) StorageAccountResponseOutput {
	return o
}

// The account key for the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o StorageAccountResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The name of the Azure Storage account. Required on PUT (CreateOrReplace) requests.
func (o StorageAccountResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageAccountResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

type StorageAccountResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountResponse)(nil)).Elem()
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutput() StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) ToStorageAccountResponseArrayOutputWithContext(ctx context.Context) StorageAccountResponseArrayOutput {
	return o
}

func (o StorageAccountResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountResponse {
		return vs[0].([]StorageAccountResponse)[vs[1].(int)]
	}).(StorageAccountResponseOutput)
}

// The properties that are associated with an input containing stream data.
type StreamInputProperties struct {
	// Describes how input data is compressed
	Compression *Compression `pulumi:"compression"`
	// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey *string `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Stream'.
	Type string `pulumi:"type"`
}

// StreamInputPropertiesInput is an input type that accepts StreamInputPropertiesArgs and StreamInputPropertiesOutput values.
// You can construct a concrete instance of `StreamInputPropertiesInput` via:
//
//	StreamInputPropertiesArgs{...}
type StreamInputPropertiesInput interface {
	pulumi.Input

	ToStreamInputPropertiesOutput() StreamInputPropertiesOutput
	ToStreamInputPropertiesOutputWithContext(context.Context) StreamInputPropertiesOutput
}

// The properties that are associated with an input containing stream data.
type StreamInputPropertiesArgs struct {
	// Describes how input data is compressed
	Compression CompressionPtrInput `pulumi:"compression"`
	// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
	Datasource pulumi.Input `pulumi:"datasource"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey pulumi.StringPtrInput `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization pulumi.Input `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Stream'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (StreamInputPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputProperties)(nil)).Elem()
}

func (i StreamInputPropertiesArgs) ToStreamInputPropertiesOutput() StreamInputPropertiesOutput {
	return i.ToStreamInputPropertiesOutputWithContext(context.Background())
}

func (i StreamInputPropertiesArgs) ToStreamInputPropertiesOutputWithContext(ctx context.Context) StreamInputPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputPropertiesOutput)
}

func (i StreamInputPropertiesArgs) ToStreamInputPropertiesPtrOutput() StreamInputPropertiesPtrOutput {
	return i.ToStreamInputPropertiesPtrOutputWithContext(context.Background())
}

func (i StreamInputPropertiesArgs) ToStreamInputPropertiesPtrOutputWithContext(ctx context.Context) StreamInputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputPropertiesOutput).ToStreamInputPropertiesPtrOutputWithContext(ctx)
}

// StreamInputPropertiesPtrInput is an input type that accepts StreamInputPropertiesArgs, StreamInputPropertiesPtr and StreamInputPropertiesPtrOutput values.
// You can construct a concrete instance of `StreamInputPropertiesPtrInput` via:
//
//	        StreamInputPropertiesArgs{...}
//
//	or:
//
//	        nil
type StreamInputPropertiesPtrInput interface {
	pulumi.Input

	ToStreamInputPropertiesPtrOutput() StreamInputPropertiesPtrOutput
	ToStreamInputPropertiesPtrOutputWithContext(context.Context) StreamInputPropertiesPtrOutput
}

type streamInputPropertiesPtrType StreamInputPropertiesArgs

func StreamInputPropertiesPtr(v *StreamInputPropertiesArgs) StreamInputPropertiesPtrInput {
	return (*streamInputPropertiesPtrType)(v)
}

func (*streamInputPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputProperties)(nil)).Elem()
}

func (i *streamInputPropertiesPtrType) ToStreamInputPropertiesPtrOutput() StreamInputPropertiesPtrOutput {
	return i.ToStreamInputPropertiesPtrOutputWithContext(context.Background())
}

func (i *streamInputPropertiesPtrType) ToStreamInputPropertiesPtrOutputWithContext(ctx context.Context) StreamInputPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInputPropertiesPtrOutput)
}

// The properties that are associated with an input containing stream data.
type StreamInputPropertiesOutput struct{ *pulumi.OutputState }

func (StreamInputPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputProperties)(nil)).Elem()
}

func (o StreamInputPropertiesOutput) ToStreamInputPropertiesOutput() StreamInputPropertiesOutput {
	return o
}

func (o StreamInputPropertiesOutput) ToStreamInputPropertiesOutputWithContext(ctx context.Context) StreamInputPropertiesOutput {
	return o
}

func (o StreamInputPropertiesOutput) ToStreamInputPropertiesPtrOutput() StreamInputPropertiesPtrOutput {
	return o.ToStreamInputPropertiesPtrOutputWithContext(context.Background())
}

func (o StreamInputPropertiesOutput) ToStreamInputPropertiesPtrOutputWithContext(ctx context.Context) StreamInputPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamInputProperties) *StreamInputProperties {
		return &v
	}).(StreamInputPropertiesPtrOutput)
}

// Describes how input data is compressed
func (o StreamInputPropertiesOutput) Compression() CompressionPtrOutput {
	return o.ApplyT(func(v StreamInputProperties) *Compression { return v.Compression }).(CompressionPtrOutput)
}

// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v StreamInputProperties) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o StreamInputPropertiesOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputProperties) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v StreamInputProperties) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Stream'.
func (o StreamInputPropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputProperties) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputPropertiesPtrOutput struct{ *pulumi.OutputState }

func (StreamInputPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputProperties)(nil)).Elem()
}

func (o StreamInputPropertiesPtrOutput) ToStreamInputPropertiesPtrOutput() StreamInputPropertiesPtrOutput {
	return o
}

func (o StreamInputPropertiesPtrOutput) ToStreamInputPropertiesPtrOutputWithContext(ctx context.Context) StreamInputPropertiesPtrOutput {
	return o
}

func (o StreamInputPropertiesPtrOutput) Elem() StreamInputPropertiesOutput {
	return o.ApplyT(func(v *StreamInputProperties) StreamInputProperties {
		if v != nil {
			return *v
		}
		var ret StreamInputProperties
		return ret
	}).(StreamInputPropertiesOutput)
}

// Describes how input data is compressed
func (o StreamInputPropertiesPtrOutput) Compression() CompressionPtrOutput {
	return o.ApplyT(func(v *StreamInputProperties) *Compression {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(CompressionPtrOutput)
}

// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesPtrOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v *StreamInputProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Datasource
	}).(pulumi.AnyOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o StreamInputPropertiesPtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputProperties) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesPtrOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v *StreamInputProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Stream'.
func (o StreamInputPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The properties that are associated with an input containing stream data.
type StreamInputPropertiesResponse struct {
	// Describes how input data is compressed
	Compression *CompressionResponse `pulumi:"compression"`
	// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
	Datasource interface{} `pulumi:"datasource"`
	// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
	Diagnostics DiagnosticsResponse `pulumi:"diagnostics"`
	// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// partitionKey Describes a key in the input data which is used for partitioning the input data
	PartitionKey *string `pulumi:"partitionKey"`
	// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
	Serialization interface{} `pulumi:"serialization"`
	// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
	// Expected value is 'Stream'.
	Type string `pulumi:"type"`
}

// The properties that are associated with an input containing stream data.
type StreamInputPropertiesResponseOutput struct{ *pulumi.OutputState }

func (StreamInputPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamInputPropertiesResponse)(nil)).Elem()
}

func (o StreamInputPropertiesResponseOutput) ToStreamInputPropertiesResponseOutput() StreamInputPropertiesResponseOutput {
	return o
}

func (o StreamInputPropertiesResponseOutput) ToStreamInputPropertiesResponseOutputWithContext(ctx context.Context) StreamInputPropertiesResponseOutput {
	return o
}

// Describes how input data is compressed
func (o StreamInputPropertiesResponseOutput) Compression() CompressionResponsePtrOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) *CompressionResponse { return v.Compression }).(CompressionResponsePtrOutput)
}

// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesResponseOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) interface{} { return v.Datasource }).(pulumi.AnyOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o StreamInputPropertiesResponseOutput) Diagnostics() DiagnosticsResponseOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) DiagnosticsResponse { return v.Diagnostics }).(DiagnosticsResponseOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o StreamInputPropertiesResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o StreamInputPropertiesResponseOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) *string { return v.PartitionKey }).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesResponseOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) interface{} { return v.Serialization }).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Stream'.
func (o StreamInputPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v StreamInputPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

type StreamInputPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (StreamInputPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInputPropertiesResponse)(nil)).Elem()
}

func (o StreamInputPropertiesResponsePtrOutput) ToStreamInputPropertiesResponsePtrOutput() StreamInputPropertiesResponsePtrOutput {
	return o
}

func (o StreamInputPropertiesResponsePtrOutput) ToStreamInputPropertiesResponsePtrOutputWithContext(ctx context.Context) StreamInputPropertiesResponsePtrOutput {
	return o
}

func (o StreamInputPropertiesResponsePtrOutput) Elem() StreamInputPropertiesResponseOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) StreamInputPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret StreamInputPropertiesResponse
		return ret
	}).(StreamInputPropertiesResponseOutput)
}

// Describes how input data is compressed
func (o StreamInputPropertiesResponsePtrOutput) Compression() CompressionResponsePtrOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) *CompressionResponse {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(CompressionResponsePtrOutput)
}

// Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesResponsePtrOutput) Datasource() pulumi.AnyOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Datasource
	}).(pulumi.AnyOutput)
}

// Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
func (o StreamInputPropertiesResponsePtrOutput) Diagnostics() DiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) *DiagnosticsResponse {
		if v == nil {
			return nil
		}
		return &v.Diagnostics
	}).(DiagnosticsResponsePtrOutput)
}

// The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o StreamInputPropertiesResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// partitionKey Describes a key in the input data which is used for partitioning the input data
func (o StreamInputPropertiesResponsePtrOutput) PartitionKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PartitionKey
	}).(pulumi.StringPtrOutput)
}

// Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
func (o StreamInputPropertiesResponsePtrOutput) Serialization() pulumi.AnyOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Serialization
	}).(pulumi.AnyOutput)
}

// Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
// Expected value is 'Stream'.
func (o StreamInputPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamInputPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type Transformation struct {
	// Resource name
	Name *string `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query *string `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits *int `pulumi:"streamingUnits"`
	// Specifies the valid streaming units a streaming job can scale to.
	ValidStreamingUnits []int `pulumi:"validStreamingUnits"`
}

// Defaults sets the appropriate defaults for Transformation
func (val *Transformation) Defaults() *Transformation {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StreamingUnits == nil {
		streamingUnits_ := 3
		tmp.StreamingUnits = &streamingUnits_
	}
	return &tmp
}

// TransformationInput is an input type that accepts TransformationArgs and TransformationOutput values.
// You can construct a concrete instance of `TransformationInput` via:
//
//	TransformationArgs{...}
type TransformationInput interface {
	pulumi.Input

	ToTransformationOutput() TransformationOutput
	ToTransformationOutputWithContext(context.Context) TransformationOutput
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationArgs struct {
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits pulumi.IntPtrInput `pulumi:"streamingUnits"`
	// Specifies the valid streaming units a streaming job can scale to.
	ValidStreamingUnits pulumi.IntArrayInput `pulumi:"validStreamingUnits"`
}

// Defaults sets the appropriate defaults for TransformationArgs
func (val *TransformationArgs) Defaults() *TransformationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StreamingUnits == nil {
		tmp.StreamingUnits = pulumi.IntPtr(3)
	}
	return &tmp
}
func (TransformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (i TransformationArgs) ToTransformationOutput() TransformationOutput {
	return i.ToTransformationOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput)
}

func (i TransformationArgs) ToTransformationPtrOutput() TransformationPtrOutput {
	return i.ToTransformationPtrOutputWithContext(context.Background())
}

func (i TransformationArgs) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationOutput).ToTransformationPtrOutputWithContext(ctx)
}

// TransformationPtrInput is an input type that accepts TransformationArgs, TransformationPtr and TransformationPtrOutput values.
// You can construct a concrete instance of `TransformationPtrInput` via:
//
//	        TransformationArgs{...}
//
//	or:
//
//	        nil
type TransformationPtrInput interface {
	pulumi.Input

	ToTransformationPtrOutput() TransformationPtrOutput
	ToTransformationPtrOutputWithContext(context.Context) TransformationPtrOutput
}

type transformationPtrType TransformationArgs

func TransformationPtr(v *TransformationArgs) TransformationPtrInput {
	return (*transformationPtrType)(v)
}

func (*transformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformation)(nil)).Elem()
}

func (i *transformationPtrType) ToTransformationPtrOutput() TransformationPtrOutput {
	return i.ToTransformationPtrOutputWithContext(context.Background())
}

func (i *transformationPtrType) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformationPtrOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationOutput struct{ *pulumi.OutputState }

func (TransformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transformation)(nil)).Elem()
}

func (o TransformationOutput) ToTransformationOutput() TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationOutputWithContext(ctx context.Context) TransformationOutput {
	return o
}

func (o TransformationOutput) ToTransformationPtrOutput() TransformationPtrOutput {
	return o.ToTransformationPtrOutputWithContext(context.Background())
}

func (o TransformationOutput) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Transformation) *Transformation {
		return &v
	}).(TransformationPtrOutput)
}

// Resource name
func (o TransformationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Transformation) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Transformation) *int { return v.StreamingUnits }).(pulumi.IntPtrOutput)
}

// Specifies the valid streaming units a streaming job can scale to.
func (o TransformationOutput) ValidStreamingUnits() pulumi.IntArrayOutput {
	return o.ApplyT(func(v Transformation) []int { return v.ValidStreamingUnits }).(pulumi.IntArrayOutput)
}

type TransformationPtrOutput struct{ *pulumi.OutputState }

func (TransformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transformation)(nil)).Elem()
}

func (o TransformationPtrOutput) ToTransformationPtrOutput() TransformationPtrOutput {
	return o
}

func (o TransformationPtrOutput) ToTransformationPtrOutputWithContext(ctx context.Context) TransformationPtrOutput {
	return o
}

func (o TransformationPtrOutput) Elem() TransformationOutput {
	return o.ApplyT(func(v *Transformation) Transformation {
		if v != nil {
			return *v
		}
		var ret Transformation
		return ret
	}).(TransformationOutput)
}

// Resource name
func (o TransformationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformation) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Transformation) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationPtrOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Transformation) *int {
		if v == nil {
			return nil
		}
		return v.StreamingUnits
	}).(pulumi.IntPtrOutput)
}

// Specifies the valid streaming units a streaming job can scale to.
func (o TransformationPtrOutput) ValidStreamingUnits() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Transformation) []int {
		if v == nil {
			return nil
		}
		return v.ValidStreamingUnits
	}).(pulumi.IntArrayOutput)
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationResponse struct {
	// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
	Etag string `pulumi:"etag"`
	// Resource Id
	Id string `pulumi:"id"`
	// Resource name
	Name *string `pulumi:"name"`
	// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
	Query *string `pulumi:"query"`
	// Specifies the number of streaming units that the streaming job uses.
	StreamingUnits *int `pulumi:"streamingUnits"`
	// Resource type
	Type string `pulumi:"type"`
	// Specifies the valid streaming units a streaming job can scale to.
	ValidStreamingUnits []int `pulumi:"validStreamingUnits"`
}

// Defaults sets the appropriate defaults for TransformationResponse
func (val *TransformationResponse) Defaults() *TransformationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StreamingUnits == nil {
		streamingUnits_ := 3
		tmp.StreamingUnits = &streamingUnits_
	}
	return &tmp
}

// A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.
type TransformationResponseOutput struct{ *pulumi.OutputState }

func (TransformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformationResponse)(nil)).Elem()
}

func (o TransformationResponseOutput) ToTransformationResponseOutput() TransformationResponseOutput {
	return o
}

func (o TransformationResponseOutput) ToTransformationResponseOutputWithContext(ctx context.Context) TransformationResponseOutput {
	return o
}

// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o TransformationResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Resource Id
func (o TransformationResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Resource name
func (o TransformationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationResponseOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TransformationResponse) *int { return v.StreamingUnits }).(pulumi.IntPtrOutput)
}

// Resource type
func (o TransformationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TransformationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the valid streaming units a streaming job can scale to.
func (o TransformationResponseOutput) ValidStreamingUnits() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TransformationResponse) []int { return v.ValidStreamingUnits }).(pulumi.IntArrayOutput)
}

type TransformationResponsePtrOutput struct{ *pulumi.OutputState }

func (TransformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransformationResponse)(nil)).Elem()
}

func (o TransformationResponsePtrOutput) ToTransformationResponsePtrOutput() TransformationResponsePtrOutput {
	return o
}

func (o TransformationResponsePtrOutput) ToTransformationResponsePtrOutputWithContext(ctx context.Context) TransformationResponsePtrOutput {
	return o
}

func (o TransformationResponsePtrOutput) Elem() TransformationResponseOutput {
	return o.ApplyT(func(v *TransformationResponse) TransformationResponse {
		if v != nil {
			return *v
		}
		var ret TransformationResponse
		return ret
	}).(TransformationResponseOutput)
}

// The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
func (o TransformationResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Resource Id
func (o TransformationResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Resource name
func (o TransformationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
func (o TransformationResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of streaming units that the streaming job uses.
func (o TransformationResponsePtrOutput) StreamingUnits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *int {
		if v == nil {
			return nil
		}
		return v.StreamingUnits
	}).(pulumi.IntPtrOutput)
}

// Resource type
func (o TransformationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specifies the valid streaming units a streaming job can scale to.
func (o TransformationResponsePtrOutput) ValidStreamingUnits() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *TransformationResponse) []int {
		if v == nil {
			return nil
		}
		return v.ValidStreamingUnits
	}).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AggregateFunctionPropertiesOutput{})
	pulumi.RegisterOutputType(AggregateFunctionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AggregateFunctionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AggregateFunctionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AvroSerializationOutput{})
	pulumi.RegisterOutputType(AvroSerializationPtrOutput{})
	pulumi.RegisterOutputType(AvroSerializationResponseOutput{})
	pulumi.RegisterOutputType(AvroSerializationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreOutputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeStoreOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureFunctionOutputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureFunctionOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureFunctionOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceFunctionBindingOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceFunctionBindingPtrOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceFunctionBindingResponseOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceFunctionBindingResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputColumnOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputColumnArrayOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputColumnResponseOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputsOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputsPtrOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputsResponseOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceInputsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceOutputColumnOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceOutputColumnArrayOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceOutputColumnResponseOutput{})
	pulumi.RegisterOutputType(AzureMachineLearningWebServiceOutputColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseOutputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureSqlReferenceInputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureSqlReferenceInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureSqlReferenceInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlReferenceInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureSynapseOutputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureSynapseOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureSynapseOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureSynapseOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureTableOutputDataSourceOutput{})
	pulumi.RegisterOutputType(AzureTableOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AzureTableOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(AzureTableOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobOutputDataSourceOutput{})
	pulumi.RegisterOutputType(BlobOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(BlobOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(BlobOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobReferenceInputDataSourceOutput{})
	pulumi.RegisterOutputType(BlobReferenceInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(BlobReferenceInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(BlobReferenceInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(BlobStreamInputDataSourceOutput{})
	pulumi.RegisterOutputType(BlobStreamInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(BlobStreamInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(BlobStreamInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterInfoOutput{})
	pulumi.RegisterOutputType(ClusterInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterInfoResponseOutput{})
	pulumi.RegisterOutputType(ClusterInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterJobResponseOutput{})
	pulumi.RegisterOutputType(ClusterJobResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterSkuOutput{})
	pulumi.RegisterOutputType(ClusterSkuPtrOutput{})
	pulumi.RegisterOutputType(ClusterSkuResponseOutput{})
	pulumi.RegisterOutputType(ClusterSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(CompressionOutput{})
	pulumi.RegisterOutputType(CompressionPtrOutput{})
	pulumi.RegisterOutputType(CompressionResponseOutput{})
	pulumi.RegisterOutputType(CompressionResponsePtrOutput{})
	pulumi.RegisterOutputType(CsvSerializationOutput{})
	pulumi.RegisterOutputType(CsvSerializationPtrOutput{})
	pulumi.RegisterOutputType(CsvSerializationResponseOutput{})
	pulumi.RegisterOutputType(CsvSerializationResponsePtrOutput{})
	pulumi.RegisterOutputType(DiagnosticConditionResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(DocumentDbOutputDataSourceOutput{})
	pulumi.RegisterOutputType(DocumentDbOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(DocumentDbOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(DocumentDbOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(EventHubOutputDataSourceOutput{})
	pulumi.RegisterOutputType(EventHubOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(EventHubOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(EventHubOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(EventHubStreamInputDataSourceOutput{})
	pulumi.RegisterOutputType(EventHubStreamInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(EventHubStreamInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(EventHubStreamInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(EventHubV2OutputDataSourceOutput{})
	pulumi.RegisterOutputType(EventHubV2OutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(EventHubV2OutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(EventHubV2OutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(EventHubV2StreamInputDataSourceOutput{})
	pulumi.RegisterOutputType(EventHubV2StreamInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(EventHubV2StreamInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(EventHubV2StreamInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(FileReferenceInputDataSourceOutput{})
	pulumi.RegisterOutputType(FileReferenceInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(FileReferenceInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(FileReferenceInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(FunctionTypeOutput{})
	pulumi.RegisterOutputType(FunctionTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionInputTypeOutput{})
	pulumi.RegisterOutputType(FunctionInputTypeArrayOutput{})
	pulumi.RegisterOutputType(FunctionInputResponseOutput{})
	pulumi.RegisterOutputType(FunctionInputResponseArrayOutput{})
	pulumi.RegisterOutputType(FunctionOutputTypeOutput{})
	pulumi.RegisterOutputType(FunctionOutputTypePtrOutput{})
	pulumi.RegisterOutputType(FunctionOutputResponseOutput{})
	pulumi.RegisterOutputType(FunctionOutputResponsePtrOutput{})
	pulumi.RegisterOutputType(FunctionResponseOutput{})
	pulumi.RegisterOutputType(FunctionResponseArrayOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusOutputDataSourceOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusStreamInputDataSourceOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusStreamInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusStreamInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(GatewayMessageBusStreamInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(InputTypeOutput{})
	pulumi.RegisterOutputType(InputTypeArrayOutput{})
	pulumi.RegisterOutputType(InputResponseOutput{})
	pulumi.RegisterOutputType(InputResponseArrayOutput{})
	pulumi.RegisterOutputType(IoTHubStreamInputDataSourceOutput{})
	pulumi.RegisterOutputType(IoTHubStreamInputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(IoTHubStreamInputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(IoTHubStreamInputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(JavaScriptFunctionBindingOutput{})
	pulumi.RegisterOutputType(JavaScriptFunctionBindingPtrOutput{})
	pulumi.RegisterOutputType(JavaScriptFunctionBindingResponseOutput{})
	pulumi.RegisterOutputType(JavaScriptFunctionBindingResponsePtrOutput{})
	pulumi.RegisterOutputType(JobStorageAccountOutput{})
	pulumi.RegisterOutputType(JobStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(JobStorageAccountResponseOutput{})
	pulumi.RegisterOutputType(JobStorageAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonSerializationOutput{})
	pulumi.RegisterOutputType(JsonSerializationPtrOutput{})
	pulumi.RegisterOutputType(JsonSerializationResponseOutput{})
	pulumi.RegisterOutputType(JsonSerializationResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputTypeOutput{})
	pulumi.RegisterOutputType(OutputTypeArrayOutput{})
	pulumi.RegisterOutputType(OutputResponseOutput{})
	pulumi.RegisterOutputType(OutputResponseArrayOutput{})
	pulumi.RegisterOutputType(ParquetSerializationOutput{})
	pulumi.RegisterOutputType(ParquetSerializationPtrOutput{})
	pulumi.RegisterOutputType(ParquetSerializationResponseOutput{})
	pulumi.RegisterOutputType(ParquetSerializationResponsePtrOutput{})
	pulumi.RegisterOutputType(PowerBIOutputDataSourceOutput{})
	pulumi.RegisterOutputType(PowerBIOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(PowerBIOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PowerBIOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ReferenceInputPropertiesOutput{})
	pulumi.RegisterOutputType(ReferenceInputPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ReferenceInputPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ReferenceInputPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ScalarFunctionPropertiesOutput{})
	pulumi.RegisterOutputType(ScalarFunctionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ScalarFunctionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ScalarFunctionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueOutputDataSourceOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusQueueOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicOutputDataSourceOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicOutputDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicOutputDataSourceResponseOutput{})
	pulumi.RegisterOutputType(ServiceBusTopicOutputDataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StorageAccountOutput{})
	pulumi.RegisterOutputType(StorageAccountArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamInputPropertiesOutput{})
	pulumi.RegisterOutputType(StreamInputPropertiesPtrOutput{})
	pulumi.RegisterOutputType(StreamInputPropertiesResponseOutput{})
	pulumi.RegisterOutputType(StreamInputPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(TransformationOutput{})
	pulumi.RegisterOutputType(TransformationPtrOutput{})
	pulumi.RegisterOutputType(TransformationResponseOutput{})
	pulumi.RegisterOutputType(TransformationResponsePtrOutput{})
}
