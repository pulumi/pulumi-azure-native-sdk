// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get an app attach package.
//
// Uses Azure REST API version 2024-04-03.
//
// Other available API versions: 2023-10-04-preview, 2023-11-01-preview, 2024-01-16-preview, 2024-03-06-preview, 2024-04-08-preview, 2024-08-08-preview, 2024-11-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native desktopvirtualization [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupAppAttachPackage(ctx *pulumi.Context, args *LookupAppAttachPackageArgs, opts ...pulumi.InvokeOption) (*LookupAppAttachPackageResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupAppAttachPackageResult
	err := ctx.Invoke("azure-native:desktopvirtualization:getAppAttachPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAppAttachPackageArgs struct {
	// The name of the App Attach package
	AppAttachPackageName string `pulumi:"appAttachPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Schema for App Attach Package properties.
type LookupAppAttachPackageResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Detailed properties for App Attach Package
	Properties AppAttachPackagePropertiesResponse `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupAppAttachPackageOutput(ctx *pulumi.Context, args LookupAppAttachPackageOutputArgs, opts ...pulumi.InvokeOption) LookupAppAttachPackageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAppAttachPackageResultOutput, error) {
			args := v.(LookupAppAttachPackageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:desktopvirtualization:getAppAttachPackage", args, LookupAppAttachPackageResultOutput{}, options).(LookupAppAttachPackageResultOutput), nil
		}).(LookupAppAttachPackageResultOutput)
}

type LookupAppAttachPackageOutputArgs struct {
	// The name of the App Attach package
	AppAttachPackageName pulumi.StringInput `pulumi:"appAttachPackageName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupAppAttachPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppAttachPackageArgs)(nil)).Elem()
}

// Schema for App Attach Package properties.
type LookupAppAttachPackageResultOutput struct{ *pulumi.OutputState }

func (LookupAppAttachPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppAttachPackageResult)(nil)).Elem()
}

func (o LookupAppAttachPackageResultOutput) ToLookupAppAttachPackageResultOutput() LookupAppAttachPackageResultOutput {
	return o
}

func (o LookupAppAttachPackageResultOutput) ToLookupAppAttachPackageResultOutputWithContext(ctx context.Context) LookupAppAttachPackageResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupAppAttachPackageResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupAppAttachPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupAppAttachPackageResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupAppAttachPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// Detailed properties for App Attach Package
func (o LookupAppAttachPackageResultOutput) Properties() AppAttachPackagePropertiesResponseOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) AppAttachPackagePropertiesResponse { return v.Properties }).(AppAttachPackagePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupAppAttachPackageResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupAppAttachPackageResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupAppAttachPackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppAttachPackageResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppAttachPackageResultOutput{})
}
