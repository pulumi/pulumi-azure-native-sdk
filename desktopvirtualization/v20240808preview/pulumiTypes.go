// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240808preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The session host configuration for updating agent, monitoring agent, and stack component.
type AgentUpdateProperties struct {
	// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
	MaintenanceWindowTimeZone *string `pulumi:"maintenanceWindowTimeZone"`
	// List of maintenance windows. Maintenance windows are 2 hours long.
	MaintenanceWindows []MaintenanceWindowProperties `pulumi:"maintenanceWindows"`
	// The type of maintenance for session host components.
	Type *string `pulumi:"type"`
	// Whether to use localTime of the virtual machine.
	UseSessionHostLocalTime *bool `pulumi:"useSessionHostLocalTime"`
}

// AgentUpdatePropertiesInput is an input type that accepts AgentUpdatePropertiesArgs and AgentUpdatePropertiesOutput values.
// You can construct a concrete instance of `AgentUpdatePropertiesInput` via:
//
//	AgentUpdatePropertiesArgs{...}
type AgentUpdatePropertiesInput interface {
	pulumi.Input

	ToAgentUpdatePropertiesOutput() AgentUpdatePropertiesOutput
	ToAgentUpdatePropertiesOutputWithContext(context.Context) AgentUpdatePropertiesOutput
}

// The session host configuration for updating agent, monitoring agent, and stack component.
type AgentUpdatePropertiesArgs struct {
	// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
	MaintenanceWindowTimeZone pulumi.StringPtrInput `pulumi:"maintenanceWindowTimeZone"`
	// List of maintenance windows. Maintenance windows are 2 hours long.
	MaintenanceWindows MaintenanceWindowPropertiesArrayInput `pulumi:"maintenanceWindows"`
	// The type of maintenance for session host components.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Whether to use localTime of the virtual machine.
	UseSessionHostLocalTime pulumi.BoolPtrInput `pulumi:"useSessionHostLocalTime"`
}

func (AgentUpdatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentUpdateProperties)(nil)).Elem()
}

func (i AgentUpdatePropertiesArgs) ToAgentUpdatePropertiesOutput() AgentUpdatePropertiesOutput {
	return i.ToAgentUpdatePropertiesOutputWithContext(context.Background())
}

func (i AgentUpdatePropertiesArgs) ToAgentUpdatePropertiesOutputWithContext(ctx context.Context) AgentUpdatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentUpdatePropertiesOutput)
}

func (i AgentUpdatePropertiesArgs) ToAgentUpdatePropertiesPtrOutput() AgentUpdatePropertiesPtrOutput {
	return i.ToAgentUpdatePropertiesPtrOutputWithContext(context.Background())
}

func (i AgentUpdatePropertiesArgs) ToAgentUpdatePropertiesPtrOutputWithContext(ctx context.Context) AgentUpdatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentUpdatePropertiesOutput).ToAgentUpdatePropertiesPtrOutputWithContext(ctx)
}

// AgentUpdatePropertiesPtrInput is an input type that accepts AgentUpdatePropertiesArgs, AgentUpdatePropertiesPtr and AgentUpdatePropertiesPtrOutput values.
// You can construct a concrete instance of `AgentUpdatePropertiesPtrInput` via:
//
//	        AgentUpdatePropertiesArgs{...}
//
//	or:
//
//	        nil
type AgentUpdatePropertiesPtrInput interface {
	pulumi.Input

	ToAgentUpdatePropertiesPtrOutput() AgentUpdatePropertiesPtrOutput
	ToAgentUpdatePropertiesPtrOutputWithContext(context.Context) AgentUpdatePropertiesPtrOutput
}

type agentUpdatePropertiesPtrType AgentUpdatePropertiesArgs

func AgentUpdatePropertiesPtr(v *AgentUpdatePropertiesArgs) AgentUpdatePropertiesPtrInput {
	return (*agentUpdatePropertiesPtrType)(v)
}

func (*agentUpdatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentUpdateProperties)(nil)).Elem()
}

func (i *agentUpdatePropertiesPtrType) ToAgentUpdatePropertiesPtrOutput() AgentUpdatePropertiesPtrOutput {
	return i.ToAgentUpdatePropertiesPtrOutputWithContext(context.Background())
}

func (i *agentUpdatePropertiesPtrType) ToAgentUpdatePropertiesPtrOutputWithContext(ctx context.Context) AgentUpdatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentUpdatePropertiesPtrOutput)
}

// The session host configuration for updating agent, monitoring agent, and stack component.
type AgentUpdatePropertiesOutput struct{ *pulumi.OutputState }

func (AgentUpdatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentUpdateProperties)(nil)).Elem()
}

func (o AgentUpdatePropertiesOutput) ToAgentUpdatePropertiesOutput() AgentUpdatePropertiesOutput {
	return o
}

func (o AgentUpdatePropertiesOutput) ToAgentUpdatePropertiesOutputWithContext(ctx context.Context) AgentUpdatePropertiesOutput {
	return o
}

func (o AgentUpdatePropertiesOutput) ToAgentUpdatePropertiesPtrOutput() AgentUpdatePropertiesPtrOutput {
	return o.ToAgentUpdatePropertiesPtrOutputWithContext(context.Background())
}

func (o AgentUpdatePropertiesOutput) ToAgentUpdatePropertiesPtrOutputWithContext(ctx context.Context) AgentUpdatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentUpdateProperties) *AgentUpdateProperties {
		return &v
	}).(AgentUpdatePropertiesPtrOutput)
}

// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
func (o AgentUpdatePropertiesOutput) MaintenanceWindowTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentUpdateProperties) *string { return v.MaintenanceWindowTimeZone }).(pulumi.StringPtrOutput)
}

// List of maintenance windows. Maintenance windows are 2 hours long.
func (o AgentUpdatePropertiesOutput) MaintenanceWindows() MaintenanceWindowPropertiesArrayOutput {
	return o.ApplyT(func(v AgentUpdateProperties) []MaintenanceWindowProperties { return v.MaintenanceWindows }).(MaintenanceWindowPropertiesArrayOutput)
}

// The type of maintenance for session host components.
func (o AgentUpdatePropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentUpdateProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Whether to use localTime of the virtual machine.
func (o AgentUpdatePropertiesOutput) UseSessionHostLocalTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentUpdateProperties) *bool { return v.UseSessionHostLocalTime }).(pulumi.BoolPtrOutput)
}

type AgentUpdatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AgentUpdatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentUpdateProperties)(nil)).Elem()
}

func (o AgentUpdatePropertiesPtrOutput) ToAgentUpdatePropertiesPtrOutput() AgentUpdatePropertiesPtrOutput {
	return o
}

func (o AgentUpdatePropertiesPtrOutput) ToAgentUpdatePropertiesPtrOutputWithContext(ctx context.Context) AgentUpdatePropertiesPtrOutput {
	return o
}

func (o AgentUpdatePropertiesPtrOutput) Elem() AgentUpdatePropertiesOutput {
	return o.ApplyT(func(v *AgentUpdateProperties) AgentUpdateProperties {
		if v != nil {
			return *v
		}
		var ret AgentUpdateProperties
		return ret
	}).(AgentUpdatePropertiesOutput)
}

// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
func (o AgentUpdatePropertiesPtrOutput) MaintenanceWindowTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentUpdateProperties) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowTimeZone
	}).(pulumi.StringPtrOutput)
}

// List of maintenance windows. Maintenance windows are 2 hours long.
func (o AgentUpdatePropertiesPtrOutput) MaintenanceWindows() MaintenanceWindowPropertiesArrayOutput {
	return o.ApplyT(func(v *AgentUpdateProperties) []MaintenanceWindowProperties {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindows
	}).(MaintenanceWindowPropertiesArrayOutput)
}

// The type of maintenance for session host components.
func (o AgentUpdatePropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentUpdateProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Whether to use localTime of the virtual machine.
func (o AgentUpdatePropertiesPtrOutput) UseSessionHostLocalTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentUpdateProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UseSessionHostLocalTime
	}).(pulumi.BoolPtrOutput)
}

// The session host configuration for updating agent, monitoring agent, and stack component.
type AgentUpdatePropertiesResponse struct {
	// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
	MaintenanceWindowTimeZone *string `pulumi:"maintenanceWindowTimeZone"`
	// List of maintenance windows. Maintenance windows are 2 hours long.
	MaintenanceWindows []MaintenanceWindowPropertiesResponse `pulumi:"maintenanceWindows"`
	// The type of maintenance for session host components.
	Type *string `pulumi:"type"`
	// Whether to use localTime of the virtual machine.
	UseSessionHostLocalTime *bool `pulumi:"useSessionHostLocalTime"`
}

// The session host configuration for updating agent, monitoring agent, and stack component.
type AgentUpdatePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AgentUpdatePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentUpdatePropertiesResponse)(nil)).Elem()
}

func (o AgentUpdatePropertiesResponseOutput) ToAgentUpdatePropertiesResponseOutput() AgentUpdatePropertiesResponseOutput {
	return o
}

func (o AgentUpdatePropertiesResponseOutput) ToAgentUpdatePropertiesResponseOutputWithContext(ctx context.Context) AgentUpdatePropertiesResponseOutput {
	return o
}

// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
func (o AgentUpdatePropertiesResponseOutput) MaintenanceWindowTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentUpdatePropertiesResponse) *string { return v.MaintenanceWindowTimeZone }).(pulumi.StringPtrOutput)
}

// List of maintenance windows. Maintenance windows are 2 hours long.
func (o AgentUpdatePropertiesResponseOutput) MaintenanceWindows() MaintenanceWindowPropertiesResponseArrayOutput {
	return o.ApplyT(func(v AgentUpdatePropertiesResponse) []MaintenanceWindowPropertiesResponse {
		return v.MaintenanceWindows
	}).(MaintenanceWindowPropertiesResponseArrayOutput)
}

// The type of maintenance for session host components.
func (o AgentUpdatePropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentUpdatePropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Whether to use localTime of the virtual machine.
func (o AgentUpdatePropertiesResponseOutput) UseSessionHostLocalTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AgentUpdatePropertiesResponse) *bool { return v.UseSessionHostLocalTime }).(pulumi.BoolPtrOutput)
}

type AgentUpdatePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentUpdatePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentUpdatePropertiesResponse)(nil)).Elem()
}

func (o AgentUpdatePropertiesResponsePtrOutput) ToAgentUpdatePropertiesResponsePtrOutput() AgentUpdatePropertiesResponsePtrOutput {
	return o
}

func (o AgentUpdatePropertiesResponsePtrOutput) ToAgentUpdatePropertiesResponsePtrOutputWithContext(ctx context.Context) AgentUpdatePropertiesResponsePtrOutput {
	return o
}

func (o AgentUpdatePropertiesResponsePtrOutput) Elem() AgentUpdatePropertiesResponseOutput {
	return o.ApplyT(func(v *AgentUpdatePropertiesResponse) AgentUpdatePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AgentUpdatePropertiesResponse
		return ret
	}).(AgentUpdatePropertiesResponseOutput)
}

// Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true.
func (o AgentUpdatePropertiesResponsePtrOutput) MaintenanceWindowTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentUpdatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindowTimeZone
	}).(pulumi.StringPtrOutput)
}

// List of maintenance windows. Maintenance windows are 2 hours long.
func (o AgentUpdatePropertiesResponsePtrOutput) MaintenanceWindows() MaintenanceWindowPropertiesResponseArrayOutput {
	return o.ApplyT(func(v *AgentUpdatePropertiesResponse) []MaintenanceWindowPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindows
	}).(MaintenanceWindowPropertiesResponseArrayOutput)
}

// The type of maintenance for session host components.
func (o AgentUpdatePropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentUpdatePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Whether to use localTime of the virtual machine.
func (o AgentUpdatePropertiesResponsePtrOutput) UseSessionHostLocalTime() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AgentUpdatePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.UseSessionHostLocalTime
	}).(pulumi.BoolPtrOutput)
}

// Schema for Import Package Information properties.
type AppAttachPackageInfoProperties struct {
	// Date certificate expires, found in the appxmanifest.xml.
	CertificateExpiry *string `pulumi:"certificateExpiry"`
	// Certificate name found in the appxmanifest.xml.
	CertificateName *string `pulumi:"certificateName"`
	// User friendly Name to be displayed in the portal.
	DisplayName *string `pulumi:"displayName"`
	// VHD/CIM image path on Network Share.
	ImagePath *string `pulumi:"imagePath"`
	// Make this version of the package the active one across the hostpool.
	IsActive *bool `pulumi:"isActive"`
	// Is package timestamped so it can ignore the certificate expiry date
	IsPackageTimestamped *string `pulumi:"isPackageTimestamped"`
	// Specifies how to register Package in feed.
	IsRegularRegistration *bool `pulumi:"isRegularRegistration"`
	// Date Package was last updated, found in the appxmanifest.xml.
	LastUpdated *string `pulumi:"lastUpdated"`
	// Alias of App Attach Package. Assigned at import time
	PackageAlias *string `pulumi:"packageAlias"`
	// List of package applications.
	PackageApplications []MsixPackageApplications `pulumi:"packageApplications"`
	// List of package dependencies.
	PackageDependencies []MsixPackageDependencies `pulumi:"packageDependencies"`
	// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
	PackageFamilyName *string `pulumi:"packageFamilyName"`
	// Package Full Name from appxmanifest.xml.
	PackageFullName *string `pulumi:"packageFullName"`
	// Package Name from appxmanifest.xml.
	PackageName *string `pulumi:"packageName"`
	// Relative Path to the package inside the image.
	PackageRelativePath *string `pulumi:"packageRelativePath"`
	// Package version found in the appxmanifest.xml.
	Version *string `pulumi:"version"`
}

// AppAttachPackageInfoPropertiesInput is an input type that accepts AppAttachPackageInfoPropertiesArgs and AppAttachPackageInfoPropertiesOutput values.
// You can construct a concrete instance of `AppAttachPackageInfoPropertiesInput` via:
//
//	AppAttachPackageInfoPropertiesArgs{...}
type AppAttachPackageInfoPropertiesInput interface {
	pulumi.Input

	ToAppAttachPackageInfoPropertiesOutput() AppAttachPackageInfoPropertiesOutput
	ToAppAttachPackageInfoPropertiesOutputWithContext(context.Context) AppAttachPackageInfoPropertiesOutput
}

// Schema for Import Package Information properties.
type AppAttachPackageInfoPropertiesArgs struct {
	// Date certificate expires, found in the appxmanifest.xml.
	CertificateExpiry pulumi.StringPtrInput `pulumi:"certificateExpiry"`
	// Certificate name found in the appxmanifest.xml.
	CertificateName pulumi.StringPtrInput `pulumi:"certificateName"`
	// User friendly Name to be displayed in the portal.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// VHD/CIM image path on Network Share.
	ImagePath pulumi.StringPtrInput `pulumi:"imagePath"`
	// Make this version of the package the active one across the hostpool.
	IsActive pulumi.BoolPtrInput `pulumi:"isActive"`
	// Is package timestamped so it can ignore the certificate expiry date
	IsPackageTimestamped pulumi.StringPtrInput `pulumi:"isPackageTimestamped"`
	// Specifies how to register Package in feed.
	IsRegularRegistration pulumi.BoolPtrInput `pulumi:"isRegularRegistration"`
	// Date Package was last updated, found in the appxmanifest.xml.
	LastUpdated pulumi.StringPtrInput `pulumi:"lastUpdated"`
	// Alias of App Attach Package. Assigned at import time
	PackageAlias pulumi.StringPtrInput `pulumi:"packageAlias"`
	// List of package applications.
	PackageApplications MsixPackageApplicationsArrayInput `pulumi:"packageApplications"`
	// List of package dependencies.
	PackageDependencies MsixPackageDependenciesArrayInput `pulumi:"packageDependencies"`
	// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
	PackageFamilyName pulumi.StringPtrInput `pulumi:"packageFamilyName"`
	// Package Full Name from appxmanifest.xml.
	PackageFullName pulumi.StringPtrInput `pulumi:"packageFullName"`
	// Package Name from appxmanifest.xml.
	PackageName pulumi.StringPtrInput `pulumi:"packageName"`
	// Relative Path to the package inside the image.
	PackageRelativePath pulumi.StringPtrInput `pulumi:"packageRelativePath"`
	// Package version found in the appxmanifest.xml.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AppAttachPackageInfoPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAttachPackageInfoProperties)(nil)).Elem()
}

func (i AppAttachPackageInfoPropertiesArgs) ToAppAttachPackageInfoPropertiesOutput() AppAttachPackageInfoPropertiesOutput {
	return i.ToAppAttachPackageInfoPropertiesOutputWithContext(context.Background())
}

func (i AppAttachPackageInfoPropertiesArgs) ToAppAttachPackageInfoPropertiesOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppAttachPackageInfoPropertiesOutput)
}

func (i AppAttachPackageInfoPropertiesArgs) ToAppAttachPackageInfoPropertiesPtrOutput() AppAttachPackageInfoPropertiesPtrOutput {
	return i.ToAppAttachPackageInfoPropertiesPtrOutputWithContext(context.Background())
}

func (i AppAttachPackageInfoPropertiesArgs) ToAppAttachPackageInfoPropertiesPtrOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppAttachPackageInfoPropertiesOutput).ToAppAttachPackageInfoPropertiesPtrOutputWithContext(ctx)
}

// AppAttachPackageInfoPropertiesPtrInput is an input type that accepts AppAttachPackageInfoPropertiesArgs, AppAttachPackageInfoPropertiesPtr and AppAttachPackageInfoPropertiesPtrOutput values.
// You can construct a concrete instance of `AppAttachPackageInfoPropertiesPtrInput` via:
//
//	        AppAttachPackageInfoPropertiesArgs{...}
//
//	or:
//
//	        nil
type AppAttachPackageInfoPropertiesPtrInput interface {
	pulumi.Input

	ToAppAttachPackageInfoPropertiesPtrOutput() AppAttachPackageInfoPropertiesPtrOutput
	ToAppAttachPackageInfoPropertiesPtrOutputWithContext(context.Context) AppAttachPackageInfoPropertiesPtrOutput
}

type appAttachPackageInfoPropertiesPtrType AppAttachPackageInfoPropertiesArgs

func AppAttachPackageInfoPropertiesPtr(v *AppAttachPackageInfoPropertiesArgs) AppAttachPackageInfoPropertiesPtrInput {
	return (*appAttachPackageInfoPropertiesPtrType)(v)
}

func (*appAttachPackageInfoPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppAttachPackageInfoProperties)(nil)).Elem()
}

func (i *appAttachPackageInfoPropertiesPtrType) ToAppAttachPackageInfoPropertiesPtrOutput() AppAttachPackageInfoPropertiesPtrOutput {
	return i.ToAppAttachPackageInfoPropertiesPtrOutputWithContext(context.Background())
}

func (i *appAttachPackageInfoPropertiesPtrType) ToAppAttachPackageInfoPropertiesPtrOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppAttachPackageInfoPropertiesPtrOutput)
}

// Schema for Import Package Information properties.
type AppAttachPackageInfoPropertiesOutput struct{ *pulumi.OutputState }

func (AppAttachPackageInfoPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAttachPackageInfoProperties)(nil)).Elem()
}

func (o AppAttachPackageInfoPropertiesOutput) ToAppAttachPackageInfoPropertiesOutput() AppAttachPackageInfoPropertiesOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesOutput) ToAppAttachPackageInfoPropertiesOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesOutput) ToAppAttachPackageInfoPropertiesPtrOutput() AppAttachPackageInfoPropertiesPtrOutput {
	return o.ToAppAttachPackageInfoPropertiesPtrOutputWithContext(context.Background())
}

func (o AppAttachPackageInfoPropertiesOutput) ToAppAttachPackageInfoPropertiesPtrOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppAttachPackageInfoProperties) *AppAttachPackageInfoProperties {
		return &v
	}).(AppAttachPackageInfoPropertiesPtrOutput)
}

// Date certificate expires, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) CertificateExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.CertificateExpiry }).(pulumi.StringPtrOutput)
}

// Certificate name found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// User friendly Name to be displayed in the portal.
func (o AppAttachPackageInfoPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// VHD/CIM image path on Network Share.
func (o AppAttachPackageInfoPropertiesOutput) ImagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.ImagePath }).(pulumi.StringPtrOutput)
}

// Make this version of the package the active one across the hostpool.
func (o AppAttachPackageInfoPropertiesOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Is package timestamped so it can ignore the certificate expiry date
func (o AppAttachPackageInfoPropertiesOutput) IsPackageTimestamped() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.IsPackageTimestamped }).(pulumi.StringPtrOutput)
}

// Specifies how to register Package in feed.
func (o AppAttachPackageInfoPropertiesOutput) IsRegularRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *bool { return v.IsRegularRegistration }).(pulumi.BoolPtrOutput)
}

// Date Package was last updated, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.LastUpdated }).(pulumi.StringPtrOutput)
}

// Alias of App Attach Package. Assigned at import time
func (o AppAttachPackageInfoPropertiesOutput) PackageAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.PackageAlias }).(pulumi.StringPtrOutput)
}

// List of package applications.
func (o AppAttachPackageInfoPropertiesOutput) PackageApplications() MsixPackageApplicationsArrayOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) []MsixPackageApplications { return v.PackageApplications }).(MsixPackageApplicationsArrayOutput)
}

// List of package dependencies.
func (o AppAttachPackageInfoPropertiesOutput) PackageDependencies() MsixPackageDependenciesArrayOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) []MsixPackageDependencies { return v.PackageDependencies }).(MsixPackageDependenciesArrayOutput)
}

// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
func (o AppAttachPackageInfoPropertiesOutput) PackageFamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.PackageFamilyName }).(pulumi.StringPtrOutput)
}

// Package Full Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) PackageFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.PackageFullName }).(pulumi.StringPtrOutput)
}

// Package Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Relative Path to the package inside the image.
func (o AppAttachPackageInfoPropertiesOutput) PackageRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.PackageRelativePath }).(pulumi.StringPtrOutput)
}

// Package version found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoProperties) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppAttachPackageInfoPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AppAttachPackageInfoPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppAttachPackageInfoProperties)(nil)).Elem()
}

func (o AppAttachPackageInfoPropertiesPtrOutput) ToAppAttachPackageInfoPropertiesPtrOutput() AppAttachPackageInfoPropertiesPtrOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesPtrOutput) ToAppAttachPackageInfoPropertiesPtrOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesPtrOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesPtrOutput) Elem() AppAttachPackageInfoPropertiesOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) AppAttachPackageInfoProperties {
		if v != nil {
			return *v
		}
		var ret AppAttachPackageInfoProperties
		return ret
	}).(AppAttachPackageInfoPropertiesOutput)
}

// Date certificate expires, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) CertificateExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.CertificateExpiry
	}).(pulumi.StringPtrOutput)
}

// Certificate name found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.CertificateName
	}).(pulumi.StringPtrOutput)
}

// User friendly Name to be displayed in the portal.
func (o AppAttachPackageInfoPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// VHD/CIM image path on Network Share.
func (o AppAttachPackageInfoPropertiesPtrOutput) ImagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.ImagePath
	}).(pulumi.StringPtrOutput)
}

// Make this version of the package the active one across the hostpool.
func (o AppAttachPackageInfoPropertiesPtrOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsActive
	}).(pulumi.BoolPtrOutput)
}

// Is package timestamped so it can ignore the certificate expiry date
func (o AppAttachPackageInfoPropertiesPtrOutput) IsPackageTimestamped() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.IsPackageTimestamped
	}).(pulumi.StringPtrOutput)
}

// Specifies how to register Package in feed.
func (o AppAttachPackageInfoPropertiesPtrOutput) IsRegularRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsRegularRegistration
	}).(pulumi.BoolPtrOutput)
}

// Date Package was last updated, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdated
	}).(pulumi.StringPtrOutput)
}

// Alias of App Attach Package. Assigned at import time
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageAlias
	}).(pulumi.StringPtrOutput)
}

// List of package applications.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageApplications() MsixPackageApplicationsArrayOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) []MsixPackageApplications {
		if v == nil {
			return nil
		}
		return v.PackageApplications
	}).(MsixPackageApplicationsArrayOutput)
}

// List of package dependencies.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageDependencies() MsixPackageDependenciesArrayOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) []MsixPackageDependencies {
		if v == nil {
			return nil
		}
		return v.PackageDependencies
	}).(MsixPackageDependenciesArrayOutput)
}

// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageFamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageFamilyName
	}).(pulumi.StringPtrOutput)
}

// Package Full Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageFullName
	}).(pulumi.StringPtrOutput)
}

// Package Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageName
	}).(pulumi.StringPtrOutput)
}

// Relative Path to the package inside the image.
func (o AppAttachPackageInfoPropertiesPtrOutput) PackageRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.PackageRelativePath
	}).(pulumi.StringPtrOutput)
}

// Package version found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoProperties) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Schema for Import Package Information properties.
type AppAttachPackageInfoPropertiesResponse struct {
	// Date certificate expires, found in the appxmanifest.xml.
	CertificateExpiry *string `pulumi:"certificateExpiry"`
	// Certificate name found in the appxmanifest.xml.
	CertificateName *string `pulumi:"certificateName"`
	// User friendly Name to be displayed in the portal.
	DisplayName *string `pulumi:"displayName"`
	// VHD/CIM image path on Network Share.
	ImagePath *string `pulumi:"imagePath"`
	// Make this version of the package the active one across the hostpool.
	IsActive *bool `pulumi:"isActive"`
	// Is package timestamped so it can ignore the certificate expiry date
	IsPackageTimestamped *string `pulumi:"isPackageTimestamped"`
	// Specifies how to register Package in feed.
	IsRegularRegistration *bool `pulumi:"isRegularRegistration"`
	// Date Package was last updated, found in the appxmanifest.xml.
	LastUpdated *string `pulumi:"lastUpdated"`
	// Alias of App Attach Package. Assigned at import time
	PackageAlias *string `pulumi:"packageAlias"`
	// List of package applications.
	PackageApplications []MsixPackageApplicationsResponse `pulumi:"packageApplications"`
	// List of package dependencies.
	PackageDependencies []MsixPackageDependenciesResponse `pulumi:"packageDependencies"`
	// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
	PackageFamilyName *string `pulumi:"packageFamilyName"`
	// Package Full Name from appxmanifest.xml.
	PackageFullName *string `pulumi:"packageFullName"`
	// Package Name from appxmanifest.xml.
	PackageName *string `pulumi:"packageName"`
	// Relative Path to the package inside the image.
	PackageRelativePath *string `pulumi:"packageRelativePath"`
	// Package version found in the appxmanifest.xml.
	Version *string `pulumi:"version"`
}

// Schema for Import Package Information properties.
type AppAttachPackageInfoPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AppAttachPackageInfoPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppAttachPackageInfoPropertiesResponse)(nil)).Elem()
}

func (o AppAttachPackageInfoPropertiesResponseOutput) ToAppAttachPackageInfoPropertiesResponseOutput() AppAttachPackageInfoPropertiesResponseOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesResponseOutput) ToAppAttachPackageInfoPropertiesResponseOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesResponseOutput {
	return o
}

// Date certificate expires, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) CertificateExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.CertificateExpiry }).(pulumi.StringPtrOutput)
}

// Certificate name found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// User friendly Name to be displayed in the portal.
func (o AppAttachPackageInfoPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// VHD/CIM image path on Network Share.
func (o AppAttachPackageInfoPropertiesResponseOutput) ImagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.ImagePath }).(pulumi.StringPtrOutput)
}

// Make this version of the package the active one across the hostpool.
func (o AppAttachPackageInfoPropertiesResponseOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Is package timestamped so it can ignore the certificate expiry date
func (o AppAttachPackageInfoPropertiesResponseOutput) IsPackageTimestamped() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.IsPackageTimestamped }).(pulumi.StringPtrOutput)
}

// Specifies how to register Package in feed.
func (o AppAttachPackageInfoPropertiesResponseOutput) IsRegularRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *bool { return v.IsRegularRegistration }).(pulumi.BoolPtrOutput)
}

// Date Package was last updated, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.LastUpdated }).(pulumi.StringPtrOutput)
}

// Alias of App Attach Package. Assigned at import time
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.PackageAlias }).(pulumi.StringPtrOutput)
}

// List of package applications.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageApplications() MsixPackageApplicationsResponseArrayOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) []MsixPackageApplicationsResponse {
		return v.PackageApplications
	}).(MsixPackageApplicationsResponseArrayOutput)
}

// List of package dependencies.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageDependencies() MsixPackageDependenciesResponseArrayOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) []MsixPackageDependenciesResponse {
		return v.PackageDependencies
	}).(MsixPackageDependenciesResponseArrayOutput)
}

// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageFamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.PackageFamilyName }).(pulumi.StringPtrOutput)
}

// Package Full Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.PackageFullName }).(pulumi.StringPtrOutput)
}

// Package Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.PackageName }).(pulumi.StringPtrOutput)
}

// Relative Path to the package inside the image.
func (o AppAttachPackageInfoPropertiesResponseOutput) PackageRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.PackageRelativePath }).(pulumi.StringPtrOutput)
}

// Package version found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppAttachPackageInfoPropertiesResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppAttachPackageInfoPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AppAttachPackageInfoPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppAttachPackageInfoPropertiesResponse)(nil)).Elem()
}

func (o AppAttachPackageInfoPropertiesResponsePtrOutput) ToAppAttachPackageInfoPropertiesResponsePtrOutput() AppAttachPackageInfoPropertiesResponsePtrOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesResponsePtrOutput) ToAppAttachPackageInfoPropertiesResponsePtrOutputWithContext(ctx context.Context) AppAttachPackageInfoPropertiesResponsePtrOutput {
	return o
}

func (o AppAttachPackageInfoPropertiesResponsePtrOutput) Elem() AppAttachPackageInfoPropertiesResponseOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) AppAttachPackageInfoPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AppAttachPackageInfoPropertiesResponse
		return ret
	}).(AppAttachPackageInfoPropertiesResponseOutput)
}

// Date certificate expires, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) CertificateExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificateExpiry
	}).(pulumi.StringPtrOutput)
}

// Certificate name found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CertificateName
	}).(pulumi.StringPtrOutput)
}

// User friendly Name to be displayed in the portal.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// VHD/CIM image path on Network Share.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) ImagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ImagePath
	}).(pulumi.StringPtrOutput)
}

// Make this version of the package the active one across the hostpool.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsActive
	}).(pulumi.BoolPtrOutput)
}

// Is package timestamped so it can ignore the certificate expiry date
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) IsPackageTimestamped() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IsPackageTimestamped
	}).(pulumi.StringPtrOutput)
}

// Specifies how to register Package in feed.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) IsRegularRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsRegularRegistration
	}).(pulumi.BoolPtrOutput)
}

// Date Package was last updated, found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) LastUpdated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdated
	}).(pulumi.StringPtrOutput)
}

// Alias of App Attach Package. Assigned at import time
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageAlias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageAlias
	}).(pulumi.StringPtrOutput)
}

// List of package applications.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageApplications() MsixPackageApplicationsResponseArrayOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) []MsixPackageApplicationsResponse {
		if v == nil {
			return nil
		}
		return v.PackageApplications
	}).(MsixPackageApplicationsResponseArrayOutput)
}

// List of package dependencies.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageDependencies() MsixPackageDependenciesResponseArrayOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) []MsixPackageDependenciesResponse {
		if v == nil {
			return nil
		}
		return v.PackageDependencies
	}).(MsixPackageDependenciesResponseArrayOutput)
}

// Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageFamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageFamilyName
	}).(pulumi.StringPtrOutput)
}

// Package Full Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageFullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageFullName
	}).(pulumi.StringPtrOutput)
}

// Package Name from appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageName
	}).(pulumi.StringPtrOutput)
}

// Relative Path to the package inside the image.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) PackageRelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PackageRelativePath
	}).(pulumi.StringPtrOutput)
}

// Package version found in the appxmanifest.xml.
func (o AppAttachPackageInfoPropertiesResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppAttachPackageInfoPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Maintenance window starting hour and day of week.
type MaintenanceWindowProperties struct {
	// Day of the week.
	DayOfWeek *DayOfWeek `pulumi:"dayOfWeek"`
	// The update start hour of the day. (0 - 23)
	Hour *int `pulumi:"hour"`
}

// MaintenanceWindowPropertiesInput is an input type that accepts MaintenanceWindowPropertiesArgs and MaintenanceWindowPropertiesOutput values.
// You can construct a concrete instance of `MaintenanceWindowPropertiesInput` via:
//
//	MaintenanceWindowPropertiesArgs{...}
type MaintenanceWindowPropertiesInput interface {
	pulumi.Input

	ToMaintenanceWindowPropertiesOutput() MaintenanceWindowPropertiesOutput
	ToMaintenanceWindowPropertiesOutputWithContext(context.Context) MaintenanceWindowPropertiesOutput
}

// Maintenance window starting hour and day of week.
type MaintenanceWindowPropertiesArgs struct {
	// Day of the week.
	DayOfWeek DayOfWeekPtrInput `pulumi:"dayOfWeek"`
	// The update start hour of the day. (0 - 23)
	Hour pulumi.IntPtrInput `pulumi:"hour"`
}

func (MaintenanceWindowPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowProperties)(nil)).Elem()
}

func (i MaintenanceWindowPropertiesArgs) ToMaintenanceWindowPropertiesOutput() MaintenanceWindowPropertiesOutput {
	return i.ToMaintenanceWindowPropertiesOutputWithContext(context.Background())
}

func (i MaintenanceWindowPropertiesArgs) ToMaintenanceWindowPropertiesOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPropertiesOutput)
}

// MaintenanceWindowPropertiesArrayInput is an input type that accepts MaintenanceWindowPropertiesArray and MaintenanceWindowPropertiesArrayOutput values.
// You can construct a concrete instance of `MaintenanceWindowPropertiesArrayInput` via:
//
//	MaintenanceWindowPropertiesArray{ MaintenanceWindowPropertiesArgs{...} }
type MaintenanceWindowPropertiesArrayInput interface {
	pulumi.Input

	ToMaintenanceWindowPropertiesArrayOutput() MaintenanceWindowPropertiesArrayOutput
	ToMaintenanceWindowPropertiesArrayOutputWithContext(context.Context) MaintenanceWindowPropertiesArrayOutput
}

type MaintenanceWindowPropertiesArray []MaintenanceWindowPropertiesInput

func (MaintenanceWindowPropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceWindowProperties)(nil)).Elem()
}

func (i MaintenanceWindowPropertiesArray) ToMaintenanceWindowPropertiesArrayOutput() MaintenanceWindowPropertiesArrayOutput {
	return i.ToMaintenanceWindowPropertiesArrayOutputWithContext(context.Background())
}

func (i MaintenanceWindowPropertiesArray) ToMaintenanceWindowPropertiesArrayOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPropertiesArrayOutput)
}

// Maintenance window starting hour and day of week.
type MaintenanceWindowPropertiesOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowProperties)(nil)).Elem()
}

func (o MaintenanceWindowPropertiesOutput) ToMaintenanceWindowPropertiesOutput() MaintenanceWindowPropertiesOutput {
	return o
}

func (o MaintenanceWindowPropertiesOutput) ToMaintenanceWindowPropertiesOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesOutput {
	return o
}

// Day of the week.
func (o MaintenanceWindowPropertiesOutput) DayOfWeek() DayOfWeekPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowProperties) *DayOfWeek { return v.DayOfWeek }).(DayOfWeekPtrOutput)
}

// The update start hour of the day. (0 - 23)
func (o MaintenanceWindowPropertiesOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowProperties) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowPropertiesArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceWindowProperties)(nil)).Elem()
}

func (o MaintenanceWindowPropertiesArrayOutput) ToMaintenanceWindowPropertiesArrayOutput() MaintenanceWindowPropertiesArrayOutput {
	return o
}

func (o MaintenanceWindowPropertiesArrayOutput) ToMaintenanceWindowPropertiesArrayOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesArrayOutput {
	return o
}

func (o MaintenanceWindowPropertiesArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowPropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaintenanceWindowProperties {
		return vs[0].([]MaintenanceWindowProperties)[vs[1].(int)]
	}).(MaintenanceWindowPropertiesOutput)
}

// Maintenance window starting hour and day of week.
type MaintenanceWindowPropertiesResponse struct {
	// Day of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// The update start hour of the day. (0 - 23)
	Hour *int `pulumi:"hour"`
}

// Maintenance window starting hour and day of week.
type MaintenanceWindowPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowPropertiesResponse)(nil)).Elem()
}

func (o MaintenanceWindowPropertiesResponseOutput) ToMaintenanceWindowPropertiesResponseOutput() MaintenanceWindowPropertiesResponseOutput {
	return o
}

func (o MaintenanceWindowPropertiesResponseOutput) ToMaintenanceWindowPropertiesResponseOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesResponseOutput {
	return o
}

// Day of the week.
func (o MaintenanceWindowPropertiesResponseOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowPropertiesResponse) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// The update start hour of the day. (0 - 23)
func (o MaintenanceWindowPropertiesResponseOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindowPropertiesResponse) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

type MaintenanceWindowPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceWindowPropertiesResponse)(nil)).Elem()
}

func (o MaintenanceWindowPropertiesResponseArrayOutput) ToMaintenanceWindowPropertiesResponseArrayOutput() MaintenanceWindowPropertiesResponseArrayOutput {
	return o
}

func (o MaintenanceWindowPropertiesResponseArrayOutput) ToMaintenanceWindowPropertiesResponseArrayOutputWithContext(ctx context.Context) MaintenanceWindowPropertiesResponseArrayOutput {
	return o
}

func (o MaintenanceWindowPropertiesResponseArrayOutput) Index(i pulumi.IntInput) MaintenanceWindowPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaintenanceWindowPropertiesResponse {
		return vs[0].([]MaintenanceWindowPropertiesResponse)[vs[1].(int)]
	}).(MaintenanceWindowPropertiesResponseOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplications struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// MsixPackageApplicationsInput is an input type that accepts MsixPackageApplicationsArgs and MsixPackageApplicationsOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsInput` via:
//
//	MsixPackageApplicationsArgs{...}
type MsixPackageApplicationsInput interface {
	pulumi.Input

	ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput
	ToMsixPackageApplicationsOutputWithContext(context.Context) MsixPackageApplicationsOutput
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsArgs struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID pulumi.StringPtrInput `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// User friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName pulumi.StringPtrInput `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon pulumi.StringPtrInput `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng pulumi.StringPtrInput `pulumi:"rawPng"`
}

func (MsixPackageApplicationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return i.ToMsixPackageApplicationsOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArgs) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsOutput)
}

// MsixPackageApplicationsArrayInput is an input type that accepts MsixPackageApplicationsArray and MsixPackageApplicationsArrayOutput values.
// You can construct a concrete instance of `MsixPackageApplicationsArrayInput` via:
//
//	MsixPackageApplicationsArray{ MsixPackageApplicationsArgs{...} }
type MsixPackageApplicationsArrayInput interface {
	pulumi.Input

	ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput
	ToMsixPackageApplicationsArrayOutputWithContext(context.Context) MsixPackageApplicationsArrayOutput
}

type MsixPackageApplicationsArray []MsixPackageApplicationsInput

func (MsixPackageApplicationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return i.ToMsixPackageApplicationsArrayOutputWithContext(context.Background())
}

func (i MsixPackageApplicationsArray) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageApplicationsArrayOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutput() MsixPackageApplicationsOutput {
	return o
}

func (o MsixPackageApplicationsOutput) ToMsixPackageApplicationsOutputWithContext(ctx context.Context) MsixPackageApplicationsOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplications) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplications)(nil)).Elem()
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutput() MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) ToMsixPackageApplicationsArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsArrayOutput {
	return o
}

func (o MsixPackageApplicationsArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplications {
		return vs[0].([]MsixPackageApplications)[vs[1].(int)]
	}).(MsixPackageApplicationsOutput)
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponse struct {
	// Package Application Id, found in appxmanifest.xml.
	AppId *string `pulumi:"appId"`
	// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
	AppUserModelID *string `pulumi:"appUserModelID"`
	// Description of Package Application.
	Description *string `pulumi:"description"`
	// User friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// User friendly name.
	IconImageName *string `pulumi:"iconImageName"`
	// the icon a 64 bit string as a byte array.
	RawIcon *string `pulumi:"rawIcon"`
	// the icon a 64 bit string as a byte array.
	RawPng *string `pulumi:"rawPng"`
}

// Schema for MSIX Package Application properties.
type MsixPackageApplicationsResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutput() MsixPackageApplicationsResponseOutput {
	return o
}

func (o MsixPackageApplicationsResponseOutput) ToMsixPackageApplicationsResponseOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseOutput {
	return o
}

// Package Application Id, found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml.
func (o MsixPackageApplicationsResponseOutput) AppUserModelID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.AppUserModelID }).(pulumi.StringPtrOutput)
}

// Description of Package Application.
func (o MsixPackageApplicationsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// User friendly name.
func (o MsixPackageApplicationsResponseOutput) IconImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.IconImageName }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawIcon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawIcon }).(pulumi.StringPtrOutput)
}

// the icon a 64 bit string as a byte array.
func (o MsixPackageApplicationsResponseOutput) RawPng() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageApplicationsResponse) *string { return v.RawPng }).(pulumi.StringPtrOutput)
}

type MsixPackageApplicationsResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageApplicationsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageApplicationsResponse)(nil)).Elem()
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutput() MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) ToMsixPackageApplicationsResponseArrayOutputWithContext(ctx context.Context) MsixPackageApplicationsResponseArrayOutput {
	return o
}

func (o MsixPackageApplicationsResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageApplicationsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageApplicationsResponse {
		return vs[0].([]MsixPackageApplicationsResponse)[vs[1].(int)]
	}).(MsixPackageApplicationsResponseOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependencies struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// MsixPackageDependenciesInput is an input type that accepts MsixPackageDependenciesArgs and MsixPackageDependenciesOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesInput` via:
//
//	MsixPackageDependenciesArgs{...}
type MsixPackageDependenciesInput interface {
	pulumi.Input

	ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput
	ToMsixPackageDependenciesOutputWithContext(context.Context) MsixPackageDependenciesOutput
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesArgs struct {
	// Name of package dependency.
	DependencyName pulumi.StringPtrInput `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher pulumi.StringPtrInput `pulumi:"publisher"`
}

func (MsixPackageDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return i.ToMsixPackageDependenciesOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArgs) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesOutput)
}

// MsixPackageDependenciesArrayInput is an input type that accepts MsixPackageDependenciesArray and MsixPackageDependenciesArrayOutput values.
// You can construct a concrete instance of `MsixPackageDependenciesArrayInput` via:
//
//	MsixPackageDependenciesArray{ MsixPackageDependenciesArgs{...} }
type MsixPackageDependenciesArrayInput interface {
	pulumi.Input

	ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput
	ToMsixPackageDependenciesArrayOutputWithContext(context.Context) MsixPackageDependenciesArrayOutput
}

type MsixPackageDependenciesArray []MsixPackageDependenciesInput

func (MsixPackageDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return i.ToMsixPackageDependenciesArrayOutputWithContext(context.Background())
}

func (i MsixPackageDependenciesArray) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsixPackageDependenciesArrayOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutput() MsixPackageDependenciesOutput {
	return o
}

func (o MsixPackageDependenciesOutput) ToMsixPackageDependenciesOutputWithContext(ctx context.Context) MsixPackageDependenciesOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependencies) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependencies)(nil)).Elem()
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutput() MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) ToMsixPackageDependenciesArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesArrayOutput {
	return o
}

func (o MsixPackageDependenciesArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependencies {
		return vs[0].([]MsixPackageDependencies)[vs[1].(int)]
	}).(MsixPackageDependenciesOutput)
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponse struct {
	// Name of package dependency.
	DependencyName *string `pulumi:"dependencyName"`
	// Dependency version required.
	MinVersion *string `pulumi:"minVersion"`
	// Name of dependency publisher.
	Publisher *string `pulumi:"publisher"`
}

// Schema for MSIX Package Dependencies properties.
type MsixPackageDependenciesResponseOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutput() MsixPackageDependenciesResponseOutput {
	return o
}

func (o MsixPackageDependenciesResponseOutput) ToMsixPackageDependenciesResponseOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseOutput {
	return o
}

// Name of package dependency.
func (o MsixPackageDependenciesResponseOutput) DependencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.DependencyName }).(pulumi.StringPtrOutput)
}

// Dependency version required.
func (o MsixPackageDependenciesResponseOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Name of dependency publisher.
func (o MsixPackageDependenciesResponseOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MsixPackageDependenciesResponse) *string { return v.Publisher }).(pulumi.StringPtrOutput)
}

type MsixPackageDependenciesResponseArrayOutput struct{ *pulumi.OutputState }

func (MsixPackageDependenciesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsixPackageDependenciesResponse)(nil)).Elem()
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutput() MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) ToMsixPackageDependenciesResponseArrayOutputWithContext(ctx context.Context) MsixPackageDependenciesResponseArrayOutput {
	return o
}

func (o MsixPackageDependenciesResponseArrayOutput) Index(i pulumi.IntInput) MsixPackageDependenciesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsixPackageDependenciesResponse {
		return vs[0].([]MsixPackageDependenciesResponse)[vs[1].(int)]
	}).(MsixPackageDependenciesResponseOutput)
}

// Plan for the resource.
type Plan struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Plan for the resource.
type PlanArgs struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name pulumi.StringInput `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product pulumi.StringInput `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

// Plan for the resource.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Plan for the resource.
type PlanResponse struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// Plan for the resource.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Properties of the private endpoint connection.
type PrivateEndpointConnectionPropertiesResponse struct {
	// The group ids for the private endpoint resource.
	GroupIds []string `pulumi:"groupIds"`
	// The private endpoint resource.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Properties of the private endpoint connection.
type PrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() PrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) PrivateEndpointConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointConnectionPropertiesResponse
		return ret
	}).(PrivateEndpointConnectionPropertiesResponseOutput)
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The private endpoint connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Resource properties.
	Properties *PrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The private endpoint connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Resource properties.
func (o PrivateEndpointConnectionResponseOutput) Properties() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The private endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for private endpoint.
	Id string `pulumi:"id"`
}

// The private endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStateResponse
		return ret
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfo struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// RegistrationInfoInput is an input type that accepts RegistrationInfoArgs and RegistrationInfoOutput values.
// You can construct a concrete instance of `RegistrationInfoInput` via:
//
//	RegistrationInfoArgs{...}
type RegistrationInfoInput interface {
	pulumi.Input

	ToRegistrationInfoOutput() RegistrationInfoOutput
	ToRegistrationInfoOutputWithContext(context.Context) RegistrationInfoOutput
}

// Represents a RegistrationInfo definition.
type RegistrationInfoArgs struct {
	// Expiration time of registration token.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation pulumi.StringPtrInput `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (RegistrationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return i.ToRegistrationInfoOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput)
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i RegistrationInfoArgs) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoOutput).ToRegistrationInfoPtrOutputWithContext(ctx)
}

// RegistrationInfoPtrInput is an input type that accepts RegistrationInfoArgs, RegistrationInfoPtr and RegistrationInfoPtrOutput values.
// You can construct a concrete instance of `RegistrationInfoPtrInput` via:
//
//	        RegistrationInfoArgs{...}
//
//	or:
//
//	        nil
type RegistrationInfoPtrInput interface {
	pulumi.Input

	ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput
	ToRegistrationInfoPtrOutputWithContext(context.Context) RegistrationInfoPtrOutput
}

type registrationInfoPtrType RegistrationInfoArgs

func RegistrationInfoPtr(v *RegistrationInfoArgs) RegistrationInfoPtrInput {
	return (*registrationInfoPtrType)(v)
}

func (*registrationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return i.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (i *registrationInfoPtrType) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationInfoPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoOutput struct{ *pulumi.OutputState }

func (RegistrationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutput() RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoOutputWithContext(ctx context.Context) RegistrationInfoOutput {
	return o
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o.ToRegistrationInfoPtrOutputWithContext(context.Background())
}

func (o RegistrationInfoOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistrationInfo) *RegistrationInfo {
		return &v
	}).(RegistrationInfoPtrOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfo) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoPtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfo)(nil)).Elem()
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutput() RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) ToRegistrationInfoPtrOutputWithContext(ctx context.Context) RegistrationInfoPtrOutput {
	return o
}

func (o RegistrationInfoPtrOutput) Elem() RegistrationInfoOutput {
	return o.ApplyT(func(v *RegistrationInfo) RegistrationInfo {
		if v != nil {
			return *v
		}
		var ret RegistrationInfo
		return ret
	}).(RegistrationInfoOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoPtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfo) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponse struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The type of resetting the token.
	RegistrationTokenOperation *string `pulumi:"registrationTokenOperation"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// Represents a RegistrationInfo definition.
type RegistrationInfoResponseOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutput() RegistrationInfoResponseOutput {
	return o
}

func (o RegistrationInfoResponseOutput) ToRegistrationInfoResponseOutputWithContext(ctx context.Context) RegistrationInfoResponseOutput {
	return o
}

// Expiration time of registration token.
func (o RegistrationInfoResponseOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponseOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.RegistrationTokenOperation }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationInfoResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistrationInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationInfoResponse)(nil)).Elem()
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutput() RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) ToRegistrationInfoResponsePtrOutputWithContext(ctx context.Context) RegistrationInfoResponsePtrOutput {
	return o
}

func (o RegistrationInfoResponsePtrOutput) Elem() RegistrationInfoResponseOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) RegistrationInfoResponse {
		if v != nil {
			return *v
		}
		var ret RegistrationInfoResponse
		return ret
	}).(RegistrationInfoResponseOutput)
}

// Expiration time of registration token.
func (o RegistrationInfoResponsePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// The type of resetting the token.
func (o RegistrationInfoResponsePtrOutput) RegistrationTokenOperation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RegistrationTokenOperation
	}).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationInfoResponsePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Represents a Minimal set of properties for RegistrationToken definition.
type RegistrationTokenMinimalResponse struct {
	// Expiration time of registration token.
	ExpirationTime *string `pulumi:"expirationTime"`
	// The registration token base64 encoded string.
	Token *string `pulumi:"token"`
}

// Represents a Minimal set of properties for RegistrationToken definition.
type RegistrationTokenMinimalResponseOutput struct{ *pulumi.OutputState }

func (RegistrationTokenMinimalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationTokenMinimalResponse)(nil)).Elem()
}

func (o RegistrationTokenMinimalResponseOutput) ToRegistrationTokenMinimalResponseOutput() RegistrationTokenMinimalResponseOutput {
	return o
}

func (o RegistrationTokenMinimalResponseOutput) ToRegistrationTokenMinimalResponseOutputWithContext(ctx context.Context) RegistrationTokenMinimalResponseOutput {
	return o
}

// Expiration time of registration token.
func (o RegistrationTokenMinimalResponseOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationTokenMinimalResponse) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// The registration token base64 encoded string.
func (o RegistrationTokenMinimalResponseOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistrationTokenMinimalResponse) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type RegistrationTokenMinimalResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistrationTokenMinimalResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistrationTokenMinimalResponse)(nil)).Elem()
}

func (o RegistrationTokenMinimalResponseArrayOutput) ToRegistrationTokenMinimalResponseArrayOutput() RegistrationTokenMinimalResponseArrayOutput {
	return o
}

func (o RegistrationTokenMinimalResponseArrayOutput) ToRegistrationTokenMinimalResponseArrayOutputWithContext(ctx context.Context) RegistrationTokenMinimalResponseArrayOutput {
	return o
}

func (o RegistrationTokenMinimalResponseArrayOutput) Index(i pulumi.IntInput) RegistrationTokenMinimalResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistrationTokenMinimalResponse {
		return vs[0].([]RegistrationTokenMinimalResponse)[vs[1].(int)]
	}).(RegistrationTokenMinimalResponseOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReference struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath *string `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled *bool `pulumi:"scalingPlanEnabled"`
}

// ScalingHostPoolReferenceInput is an input type that accepts ScalingHostPoolReferenceArgs and ScalingHostPoolReferenceOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceInput` via:
//
//	ScalingHostPoolReferenceArgs{...}
type ScalingHostPoolReferenceInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput
	ToScalingHostPoolReferenceOutputWithContext(context.Context) ScalingHostPoolReferenceOutput
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceArgs struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath pulumi.StringPtrInput `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled pulumi.BoolPtrInput `pulumi:"scalingPlanEnabled"`
}

func (ScalingHostPoolReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReference)(nil)).Elem()
}

func (i ScalingHostPoolReferenceArgs) ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput {
	return i.ToScalingHostPoolReferenceOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceArgs) ToScalingHostPoolReferenceOutputWithContext(ctx context.Context) ScalingHostPoolReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceOutput)
}

// ScalingHostPoolReferenceArrayInput is an input type that accepts ScalingHostPoolReferenceArray and ScalingHostPoolReferenceArrayOutput values.
// You can construct a concrete instance of `ScalingHostPoolReferenceArrayInput` via:
//
//	ScalingHostPoolReferenceArray{ ScalingHostPoolReferenceArgs{...} }
type ScalingHostPoolReferenceArrayInput interface {
	pulumi.Input

	ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput
	ToScalingHostPoolReferenceArrayOutputWithContext(context.Context) ScalingHostPoolReferenceArrayOutput
}

type ScalingHostPoolReferenceArray []ScalingHostPoolReferenceInput

func (ScalingHostPoolReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReference)(nil)).Elem()
}

func (i ScalingHostPoolReferenceArray) ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput {
	return i.ToScalingHostPoolReferenceArrayOutputWithContext(context.Background())
}

func (i ScalingHostPoolReferenceArray) ToScalingHostPoolReferenceArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingHostPoolReferenceArrayOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReference)(nil)).Elem()
}

func (o ScalingHostPoolReferenceOutput) ToScalingHostPoolReferenceOutput() ScalingHostPoolReferenceOutput {
	return o
}

func (o ScalingHostPoolReferenceOutput) ToScalingHostPoolReferenceOutputWithContext(ctx context.Context) ScalingHostPoolReferenceOutput {
	return o
}

// Arm path of referenced hostpool.
func (o ScalingHostPoolReferenceOutput) HostPoolArmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReference) *string { return v.HostPoolArmPath }).(pulumi.StringPtrOutput)
}

// Is the scaling plan enabled for this hostpool.
func (o ScalingHostPoolReferenceOutput) ScalingPlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReference) *bool { return v.ScalingPlanEnabled }).(pulumi.BoolPtrOutput)
}

type ScalingHostPoolReferenceArrayOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReference)(nil)).Elem()
}

func (o ScalingHostPoolReferenceArrayOutput) ToScalingHostPoolReferenceArrayOutput() ScalingHostPoolReferenceArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceArrayOutput) ToScalingHostPoolReferenceArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceArrayOutput) Index(i pulumi.IntInput) ScalingHostPoolReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingHostPoolReference {
		return vs[0].([]ScalingHostPoolReference)[vs[1].(int)]
	}).(ScalingHostPoolReferenceOutput)
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceResponse struct {
	// Arm path of referenced hostpool.
	HostPoolArmPath *string `pulumi:"hostPoolArmPath"`
	// Is the scaling plan enabled for this hostpool.
	ScalingPlanEnabled *bool `pulumi:"scalingPlanEnabled"`
}

// Scaling plan reference to hostpool.
type ScalingHostPoolReferenceResponseOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceResponseOutput) ToScalingHostPoolReferenceResponseOutput() ScalingHostPoolReferenceResponseOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseOutput) ToScalingHostPoolReferenceResponseOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseOutput {
	return o
}

// Arm path of referenced hostpool.
func (o ScalingHostPoolReferenceResponseOutput) HostPoolArmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceResponse) *string { return v.HostPoolArmPath }).(pulumi.StringPtrOutput)
}

// Is the scaling plan enabled for this hostpool.
func (o ScalingHostPoolReferenceResponseOutput) ScalingPlanEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingHostPoolReferenceResponse) *bool { return v.ScalingPlanEnabled }).(pulumi.BoolPtrOutput)
}

type ScalingHostPoolReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingHostPoolReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingHostPoolReferenceResponse)(nil)).Elem()
}

func (o ScalingHostPoolReferenceResponseArrayOutput) ToScalingHostPoolReferenceResponseArrayOutput() ScalingHostPoolReferenceResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseArrayOutput) ToScalingHostPoolReferenceResponseArrayOutputWithContext(ctx context.Context) ScalingHostPoolReferenceResponseArrayOutput {
	return o
}

func (o ScalingHostPoolReferenceResponseArrayOutput) Index(i pulumi.IntInput) ScalingHostPoolReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingHostPoolReferenceResponse {
		return vs[0].([]ScalingHostPoolReferenceResponse)[vs[1].(int)]
	}).(ScalingHostPoolReferenceResponseOutput)
}

// A ScalingPlanPooledSchedule.
type ScalingSchedule struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []DayOfWeek `pulumi:"daysOfWeek"`
	// Name of the ScalingPlanPooledSchedule.
	Name *string `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm *string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime *Time `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm *string `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime *Time `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct *int `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers *bool `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm *string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct *int `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage *string `pulumi:"rampDownNotificationMessage"`
	// Starting time for ramp down period.
	RampDownStartTime *Time `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen *string `pulumi:"rampDownStopHostsWhen"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownWaitTimeMinutes *int `pulumi:"rampDownWaitTimeMinutes"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct *int `pulumi:"rampUpCapacityThresholdPct"`
	// Load balancing algorithm for ramp up period.
	RampUpLoadBalancingAlgorithm *string `pulumi:"rampUpLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostsPct *int `pulumi:"rampUpMinimumHostsPct"`
	// Starting time for ramp up period.
	RampUpStartTime *Time `pulumi:"rampUpStartTime"`
}

// ScalingScheduleInput is an input type that accepts ScalingScheduleArgs and ScalingScheduleOutput values.
// You can construct a concrete instance of `ScalingScheduleInput` via:
//
//	ScalingScheduleArgs{...}
type ScalingScheduleInput interface {
	pulumi.Input

	ToScalingScheduleOutput() ScalingScheduleOutput
	ToScalingScheduleOutputWithContext(context.Context) ScalingScheduleOutput
}

// A ScalingPlanPooledSchedule.
type ScalingScheduleArgs struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek DayOfWeekArrayInput `pulumi:"daysOfWeek"`
	// Name of the ScalingPlanPooledSchedule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime TimePtrInput `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime TimePtrInput `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers pulumi.BoolPtrInput `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct pulumi.IntPtrInput `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage pulumi.StringPtrInput `pulumi:"rampDownNotificationMessage"`
	// Starting time for ramp down period.
	RampDownStartTime TimePtrInput `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen pulumi.StringPtrInput `pulumi:"rampDownStopHostsWhen"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownWaitTimeMinutes pulumi.IntPtrInput `pulumi:"rampDownWaitTimeMinutes"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct pulumi.IntPtrInput `pulumi:"rampUpCapacityThresholdPct"`
	// Load balancing algorithm for ramp up period.
	RampUpLoadBalancingAlgorithm pulumi.StringPtrInput `pulumi:"rampUpLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostsPct pulumi.IntPtrInput `pulumi:"rampUpMinimumHostsPct"`
	// Starting time for ramp up period.
	RampUpStartTime TimePtrInput `pulumi:"rampUpStartTime"`
}

func (ScalingScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingSchedule)(nil)).Elem()
}

func (i ScalingScheduleArgs) ToScalingScheduleOutput() ScalingScheduleOutput {
	return i.ToScalingScheduleOutputWithContext(context.Background())
}

func (i ScalingScheduleArgs) ToScalingScheduleOutputWithContext(ctx context.Context) ScalingScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleOutput)
}

// ScalingScheduleArrayInput is an input type that accepts ScalingScheduleArray and ScalingScheduleArrayOutput values.
// You can construct a concrete instance of `ScalingScheduleArrayInput` via:
//
//	ScalingScheduleArray{ ScalingScheduleArgs{...} }
type ScalingScheduleArrayInput interface {
	pulumi.Input

	ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput
	ToScalingScheduleArrayOutputWithContext(context.Context) ScalingScheduleArrayOutput
}

type ScalingScheduleArray []ScalingScheduleInput

func (ScalingScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingSchedule)(nil)).Elem()
}

func (i ScalingScheduleArray) ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput {
	return i.ToScalingScheduleArrayOutputWithContext(context.Background())
}

func (i ScalingScheduleArray) ToScalingScheduleArrayOutputWithContext(ctx context.Context) ScalingScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingScheduleArrayOutput)
}

// A ScalingPlanPooledSchedule.
type ScalingScheduleOutput struct{ *pulumi.OutputState }

func (ScalingScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingSchedule)(nil)).Elem()
}

func (o ScalingScheduleOutput) ToScalingScheduleOutput() ScalingScheduleOutput {
	return o
}

func (o ScalingScheduleOutput) ToScalingScheduleOutputWithContext(ctx context.Context) ScalingScheduleOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o ScalingScheduleOutput) DaysOfWeek() DayOfWeekArrayOutput {
	return o.ApplyT(func(v ScalingSchedule) []DayOfWeek { return v.DaysOfWeek }).(DayOfWeekArrayOutput)
}

// Name of the ScalingPlanPooledSchedule.
func (o ScalingScheduleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for off-peak period.
func (o ScalingScheduleOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for off-peak period.
func (o ScalingScheduleOutput) OffPeakStartTime() TimePtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *Time { return v.OffPeakStartTime }).(TimePtrOutput)
}

// Load balancing algorithm for peak period.
func (o ScalingScheduleOutput) PeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for peak period.
func (o ScalingScheduleOutput) PeakStartTime() TimePtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *Time { return v.PeakStartTime }).(TimePtrOutput)
}

// Capacity threshold for ramp down period.
func (o ScalingScheduleOutput) RampDownCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Should users be logged off forcefully from hosts.
func (o ScalingScheduleOutput) RampDownForceLogoffUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolPtrOutput)
}

// Load balancing algorithm for ramp down period.
func (o ScalingScheduleOutput) RampDownLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp down period.
func (o ScalingScheduleOutput) RampDownMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Notification message for users during ramp down period.
func (o ScalingScheduleOutput) RampDownNotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownNotificationMessage }).(pulumi.StringPtrOutput)
}

// Starting time for ramp down period.
func (o ScalingScheduleOutput) RampDownStartTime() TimePtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *Time { return v.RampDownStartTime }).(TimePtrOutput)
}

// Specifies when to stop hosts during ramp down period.
func (o ScalingScheduleOutput) RampDownStopHostsWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampDownStopHostsWhen }).(pulumi.StringPtrOutput)
}

// Number of minutes to wait to stop hosts during ramp down period.
func (o ScalingScheduleOutput) RampDownWaitTimeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampDownWaitTimeMinutes }).(pulumi.IntPtrOutput)
}

// Capacity threshold for ramp up period.
func (o ScalingScheduleOutput) RampUpCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampUpCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Load balancing algorithm for ramp up period.
func (o ScalingScheduleOutput) RampUpLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *string { return v.RampUpLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp up period.
func (o ScalingScheduleOutput) RampUpMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *int { return v.RampUpMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o ScalingScheduleOutput) RampUpStartTime() TimePtrOutput {
	return o.ApplyT(func(v ScalingSchedule) *Time { return v.RampUpStartTime }).(TimePtrOutput)
}

type ScalingScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScalingScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingSchedule)(nil)).Elem()
}

func (o ScalingScheduleArrayOutput) ToScalingScheduleArrayOutput() ScalingScheduleArrayOutput {
	return o
}

func (o ScalingScheduleArrayOutput) ToScalingScheduleArrayOutputWithContext(ctx context.Context) ScalingScheduleArrayOutput {
	return o
}

func (o ScalingScheduleArrayOutput) Index(i pulumi.IntInput) ScalingScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingSchedule {
		return vs[0].([]ScalingSchedule)[vs[1].(int)]
	}).(ScalingScheduleOutput)
}

// A ScalingPlanPooledSchedule.
type ScalingScheduleResponse struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// Name of the ScalingPlanPooledSchedule.
	Name *string `pulumi:"name"`
	// Load balancing algorithm for off-peak period.
	OffPeakLoadBalancingAlgorithm *string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// Starting time for off-peak period.
	OffPeakStartTime *TimeResponse `pulumi:"offPeakStartTime"`
	// Load balancing algorithm for peak period.
	PeakLoadBalancingAlgorithm *string `pulumi:"peakLoadBalancingAlgorithm"`
	// Starting time for peak period.
	PeakStartTime *TimeResponse `pulumi:"peakStartTime"`
	// Capacity threshold for ramp down period.
	RampDownCapacityThresholdPct *int `pulumi:"rampDownCapacityThresholdPct"`
	// Should users be logged off forcefully from hosts.
	RampDownForceLogoffUsers *bool `pulumi:"rampDownForceLogoffUsers"`
	// Load balancing algorithm for ramp down period.
	RampDownLoadBalancingAlgorithm *string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp down period.
	RampDownMinimumHostsPct *int `pulumi:"rampDownMinimumHostsPct"`
	// Notification message for users during ramp down period.
	RampDownNotificationMessage *string `pulumi:"rampDownNotificationMessage"`
	// Starting time for ramp down period.
	RampDownStartTime *TimeResponse `pulumi:"rampDownStartTime"`
	// Specifies when to stop hosts during ramp down period.
	RampDownStopHostsWhen *string `pulumi:"rampDownStopHostsWhen"`
	// Number of minutes to wait to stop hosts during ramp down period.
	RampDownWaitTimeMinutes *int `pulumi:"rampDownWaitTimeMinutes"`
	// Capacity threshold for ramp up period.
	RampUpCapacityThresholdPct *int `pulumi:"rampUpCapacityThresholdPct"`
	// Load balancing algorithm for ramp up period.
	RampUpLoadBalancingAlgorithm *string `pulumi:"rampUpLoadBalancingAlgorithm"`
	// Minimum host percentage for ramp up period.
	RampUpMinimumHostsPct *int `pulumi:"rampUpMinimumHostsPct"`
	// Starting time for ramp up period.
	RampUpStartTime *TimeResponse `pulumi:"rampUpStartTime"`
}

// A ScalingPlanPooledSchedule.
type ScalingScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScalingScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingScheduleResponse)(nil)).Elem()
}

func (o ScalingScheduleResponseOutput) ToScalingScheduleResponseOutput() ScalingScheduleResponseOutput {
	return o
}

func (o ScalingScheduleResponseOutput) ToScalingScheduleResponseOutputWithContext(ctx context.Context) ScalingScheduleResponseOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o ScalingScheduleResponseOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// Name of the ScalingPlanPooledSchedule.
func (o ScalingScheduleResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Load balancing algorithm for off-peak period.
func (o ScalingScheduleResponseOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for off-peak period.
func (o ScalingScheduleResponseOutput) OffPeakStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *TimeResponse { return v.OffPeakStartTime }).(TimeResponsePtrOutput)
}

// Load balancing algorithm for peak period.
func (o ScalingScheduleResponseOutput) PeakLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Starting time for peak period.
func (o ScalingScheduleResponseOutput) PeakStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *TimeResponse { return v.PeakStartTime }).(TimeResponsePtrOutput)
}

// Capacity threshold for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Should users be logged off forcefully from hosts.
func (o ScalingScheduleResponseOutput) RampDownForceLogoffUsers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolPtrOutput)
}

// Load balancing algorithm for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Notification message for users during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownNotificationMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownNotificationMessage }).(pulumi.StringPtrOutput)
}

// Starting time for ramp down period.
func (o ScalingScheduleResponseOutput) RampDownStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *TimeResponse { return v.RampDownStartTime }).(TimeResponsePtrOutput)
}

// Specifies when to stop hosts during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownStopHostsWhen() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampDownStopHostsWhen }).(pulumi.StringPtrOutput)
}

// Number of minutes to wait to stop hosts during ramp down period.
func (o ScalingScheduleResponseOutput) RampDownWaitTimeMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampDownWaitTimeMinutes }).(pulumi.IntPtrOutput)
}

// Capacity threshold for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpCapacityThresholdPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampUpCapacityThresholdPct }).(pulumi.IntPtrOutput)
}

// Load balancing algorithm for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpLoadBalancingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *string { return v.RampUpLoadBalancingAlgorithm }).(pulumi.StringPtrOutput)
}

// Minimum host percentage for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpMinimumHostsPct() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *int { return v.RampUpMinimumHostsPct }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o ScalingScheduleResponseOutput) RampUpStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v ScalingScheduleResponse) *TimeResponse { return v.RampUpStartTime }).(TimeResponsePtrOutput)
}

type ScalingScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScalingScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingScheduleResponse)(nil)).Elem()
}

func (o ScalingScheduleResponseArrayOutput) ToScalingScheduleResponseArrayOutput() ScalingScheduleResponseArrayOutput {
	return o
}

func (o ScalingScheduleResponseArrayOutput) ToScalingScheduleResponseArrayOutputWithContext(ctx context.Context) ScalingScheduleResponseArrayOutput {
	return o
}

func (o ScalingScheduleResponseArrayOutput) Index(i pulumi.IntInput) ScalingScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingScheduleResponse {
		return vs[0].([]ScalingScheduleResponse)[vs[1].(int)]
	}).(ScalingScheduleResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. E.g. P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. E.g. P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The time for a scaling action to occur.
type Time struct {
	// The hour.
	Hour int `pulumi:"hour"`
	// The minute.
	Minute int `pulumi:"minute"`
}

// TimeInput is an input type that accepts TimeArgs and TimeOutput values.
// You can construct a concrete instance of `TimeInput` via:
//
//	TimeArgs{...}
type TimeInput interface {
	pulumi.Input

	ToTimeOutput() TimeOutput
	ToTimeOutputWithContext(context.Context) TimeOutput
}

// The time for a scaling action to occur.
type TimeArgs struct {
	// The hour.
	Hour pulumi.IntInput `pulumi:"hour"`
	// The minute.
	Minute pulumi.IntInput `pulumi:"minute"`
}

func (TimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Time)(nil)).Elem()
}

func (i TimeArgs) ToTimeOutput() TimeOutput {
	return i.ToTimeOutputWithContext(context.Background())
}

func (i TimeArgs) ToTimeOutputWithContext(ctx context.Context) TimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOutput)
}

func (i TimeArgs) ToTimePtrOutput() TimePtrOutput {
	return i.ToTimePtrOutputWithContext(context.Background())
}

func (i TimeArgs) ToTimePtrOutputWithContext(ctx context.Context) TimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOutput).ToTimePtrOutputWithContext(ctx)
}

// TimePtrInput is an input type that accepts TimeArgs, TimePtr and TimePtrOutput values.
// You can construct a concrete instance of `TimePtrInput` via:
//
//	        TimeArgs{...}
//
//	or:
//
//	        nil
type TimePtrInput interface {
	pulumi.Input

	ToTimePtrOutput() TimePtrOutput
	ToTimePtrOutputWithContext(context.Context) TimePtrOutput
}

type timePtrType TimeArgs

func TimePtr(v *TimeArgs) TimePtrInput {
	return (*timePtrType)(v)
}

func (*timePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Time)(nil)).Elem()
}

func (i *timePtrType) ToTimePtrOutput() TimePtrOutput {
	return i.ToTimePtrOutputWithContext(context.Background())
}

func (i *timePtrType) ToTimePtrOutputWithContext(ctx context.Context) TimePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePtrOutput)
}

// The time for a scaling action to occur.
type TimeOutput struct{ *pulumi.OutputState }

func (TimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Time)(nil)).Elem()
}

func (o TimeOutput) ToTimeOutput() TimeOutput {
	return o
}

func (o TimeOutput) ToTimeOutputWithContext(ctx context.Context) TimeOutput {
	return o
}

func (o TimeOutput) ToTimePtrOutput() TimePtrOutput {
	return o.ToTimePtrOutputWithContext(context.Background())
}

func (o TimeOutput) ToTimePtrOutputWithContext(ctx context.Context) TimePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Time) *Time {
		return &v
	}).(TimePtrOutput)
}

// The hour.
func (o TimeOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v Time) int { return v.Hour }).(pulumi.IntOutput)
}

// The minute.
func (o TimeOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v Time) int { return v.Minute }).(pulumi.IntOutput)
}

type TimePtrOutput struct{ *pulumi.OutputState }

func (TimePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Time)(nil)).Elem()
}

func (o TimePtrOutput) ToTimePtrOutput() TimePtrOutput {
	return o
}

func (o TimePtrOutput) ToTimePtrOutputWithContext(ctx context.Context) TimePtrOutput {
	return o
}

func (o TimePtrOutput) Elem() TimeOutput {
	return o.ApplyT(func(v *Time) Time {
		if v != nil {
			return *v
		}
		var ret Time
		return ret
	}).(TimeOutput)
}

// The hour.
func (o TimePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Time) *int {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.IntPtrOutput)
}

// The minute.
func (o TimePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Time) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// The time for a scaling action to occur.
type TimeResponse struct {
	// The hour.
	Hour int `pulumi:"hour"`
	// The minute.
	Minute int `pulumi:"minute"`
}

// The time for a scaling action to occur.
type TimeResponseOutput struct{ *pulumi.OutputState }

func (TimeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeResponse)(nil)).Elem()
}

func (o TimeResponseOutput) ToTimeResponseOutput() TimeResponseOutput {
	return o
}

func (o TimeResponseOutput) ToTimeResponseOutputWithContext(ctx context.Context) TimeResponseOutput {
	return o
}

// The hour.
func (o TimeResponseOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v TimeResponse) int { return v.Hour }).(pulumi.IntOutput)
}

// The minute.
func (o TimeResponseOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v TimeResponse) int { return v.Minute }).(pulumi.IntOutput)
}

type TimeResponsePtrOutput struct{ *pulumi.OutputState }

func (TimeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeResponse)(nil)).Elem()
}

func (o TimeResponsePtrOutput) ToTimeResponsePtrOutput() TimeResponsePtrOutput {
	return o
}

func (o TimeResponsePtrOutput) ToTimeResponsePtrOutputWithContext(ctx context.Context) TimeResponsePtrOutput {
	return o
}

func (o TimeResponsePtrOutput) Elem() TimeResponseOutput {
	return o.ApplyT(func(v *TimeResponse) TimeResponse {
		if v != nil {
			return *v
		}
		var ret TimeResponse
		return ret
	}).(TimeResponseOutput)
}

// The hour.
func (o TimeResponsePtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Hour
	}).(pulumi.IntPtrOutput)
}

// The minute.
func (o TimeResponsePtrOutput) Minute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Minute
	}).(pulumi.IntPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AgentUpdatePropertiesOutput{})
	pulumi.RegisterOutputType(AgentUpdatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AgentUpdatePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AgentUpdatePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AppAttachPackageInfoPropertiesOutput{})
	pulumi.RegisterOutputType(AppAttachPackageInfoPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AppAttachPackageInfoPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AppAttachPackageInfoPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPropertiesOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPropertiesArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageApplicationsResponseArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesArrayOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseOutput{})
	pulumi.RegisterOutputType(MsixPackageDependenciesResponseArrayOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistrationInfoOutput{})
	pulumi.RegisterOutputType(RegistrationInfoPtrOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponseOutput{})
	pulumi.RegisterOutputType(RegistrationInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistrationTokenMinimalResponseOutput{})
	pulumi.RegisterOutputType(RegistrationTokenMinimalResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceArrayOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceResponseOutput{})
	pulumi.RegisterOutputType(ScalingHostPoolReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(ScalingScheduleOutput{})
	pulumi.RegisterOutputType(ScalingScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScalingScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScalingScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TimeOutput{})
	pulumi.RegisterOutputType(TimePtrOutput{})
	pulumi.RegisterOutputType(TimeResponseOutput{})
	pulumi.RegisterOutputType(TimeResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
