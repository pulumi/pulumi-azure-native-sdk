// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240306preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a ScalingPlanPersonalSchedule.
func LookupScalingPlanPersonalSchedule(ctx *pulumi.Context, args *LookupScalingPlanPersonalScheduleArgs, opts ...pulumi.InvokeOption) (*LookupScalingPlanPersonalScheduleResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupScalingPlanPersonalScheduleResult
	err := ctx.Invoke("azure-native:desktopvirtualization/v20240306preview:getScalingPlanPersonalSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupScalingPlanPersonalScheduleArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the scaling plan.
	ScalingPlanName string `pulumi:"scalingPlanName"`
	// The name of the ScalingPlanSchedule
	ScalingPlanScheduleName string `pulumi:"scalingPlanScheduleName"`
}

// Represents a ScalingPlanPersonalSchedule definition.
type LookupScalingPlanPersonalScheduleResult struct {
	// Set of days of the week on which this schedule is active.
	DaysOfWeek []string `pulumi:"daysOfWeek"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Action to be taken after a user disconnect during the off-peak period.
	OffPeakActionOnDisconnect *string `pulumi:"offPeakActionOnDisconnect"`
	// Action to be taken after a logoff during the off-peak period.
	OffPeakActionOnLogoff *string `pulumi:"offPeakActionOnLogoff"`
	// The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
	OffPeakMinutesToWaitOnDisconnect *int `pulumi:"offPeakMinutesToWaitOnDisconnect"`
	// The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
	OffPeakMinutesToWaitOnLogoff *int `pulumi:"offPeakMinutesToWaitOnLogoff"`
	// Starting time for off-peak period.
	OffPeakStartTime *TimeResponse `pulumi:"offPeakStartTime"`
	// The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
	OffPeakStartVMOnConnect *string `pulumi:"offPeakStartVMOnConnect"`
	// Action to be taken after a user disconnect during the peak period.
	PeakActionOnDisconnect *string `pulumi:"peakActionOnDisconnect"`
	// Action to be taken after a logoff during the peak period.
	PeakActionOnLogoff *string `pulumi:"peakActionOnLogoff"`
	// The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
	PeakMinutesToWaitOnDisconnect *int `pulumi:"peakMinutesToWaitOnDisconnect"`
	// The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
	PeakMinutesToWaitOnLogoff *int `pulumi:"peakMinutesToWaitOnLogoff"`
	// Starting time for peak period.
	PeakStartTime *TimeResponse `pulumi:"peakStartTime"`
	// The desired configuration of Start VM On Connect for the hostpool during the peak phase.
	PeakStartVMOnConnect *string `pulumi:"peakStartVMOnConnect"`
	// Action to be taken after a user disconnect during the ramp down period.
	RampDownActionOnDisconnect *string `pulumi:"rampDownActionOnDisconnect"`
	// Action to be taken after a logoff during the ramp down period.
	RampDownActionOnLogoff *string `pulumi:"rampDownActionOnLogoff"`
	// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
	RampDownMinutesToWaitOnDisconnect *int `pulumi:"rampDownMinutesToWaitOnDisconnect"`
	// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
	RampDownMinutesToWaitOnLogoff *int `pulumi:"rampDownMinutesToWaitOnLogoff"`
	// Starting time for ramp down period.
	RampDownStartTime *TimeResponse `pulumi:"rampDownStartTime"`
	// The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
	RampDownStartVMOnConnect *string `pulumi:"rampDownStartVMOnConnect"`
	// Action to be taken after a user disconnect during the ramp up period.
	RampUpActionOnDisconnect *string `pulumi:"rampUpActionOnDisconnect"`
	// Action to be taken after a logoff during the ramp up period.
	RampUpActionOnLogoff *string `pulumi:"rampUpActionOnLogoff"`
	// The desired startup behavior during the ramp up period for personal vms in the hostpool.
	RampUpAutoStartHosts *string `pulumi:"rampUpAutoStartHosts"`
	// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
	RampUpMinutesToWaitOnDisconnect *int `pulumi:"rampUpMinutesToWaitOnDisconnect"`
	// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
	RampUpMinutesToWaitOnLogoff *int `pulumi:"rampUpMinutesToWaitOnLogoff"`
	// Starting time for ramp up period.
	RampUpStartTime *TimeResponse `pulumi:"rampUpStartTime"`
	// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
	RampUpStartVMOnConnect *string `pulumi:"rampUpStartVMOnConnect"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupScalingPlanPersonalScheduleResult
func (val *LookupScalingPlanPersonalScheduleResult) Defaults() *LookupScalingPlanPersonalScheduleResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OffPeakStartVMOnConnect == nil {
		offPeakStartVMOnConnect_ := "Enable"
		tmp.OffPeakStartVMOnConnect = &offPeakStartVMOnConnect_
	}
	if tmp.PeakStartVMOnConnect == nil {
		peakStartVMOnConnect_ := "Enable"
		tmp.PeakStartVMOnConnect = &peakStartVMOnConnect_
	}
	if tmp.RampDownStartVMOnConnect == nil {
		rampDownStartVMOnConnect_ := "Enable"
		tmp.RampDownStartVMOnConnect = &rampDownStartVMOnConnect_
	}
	if tmp.RampUpStartVMOnConnect == nil {
		rampUpStartVMOnConnect_ := "Enable"
		tmp.RampUpStartVMOnConnect = &rampUpStartVMOnConnect_
	}
	return &tmp
}

func LookupScalingPlanPersonalScheduleOutput(ctx *pulumi.Context, args LookupScalingPlanPersonalScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupScalingPlanPersonalScheduleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupScalingPlanPersonalScheduleResult, error) {
			args := v.(LookupScalingPlanPersonalScheduleArgs)
			r, err := LookupScalingPlanPersonalSchedule(ctx, &args, opts...)
			var s LookupScalingPlanPersonalScheduleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupScalingPlanPersonalScheduleResultOutput)
}

type LookupScalingPlanPersonalScheduleOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the scaling plan.
	ScalingPlanName pulumi.StringInput `pulumi:"scalingPlanName"`
	// The name of the ScalingPlanSchedule
	ScalingPlanScheduleName pulumi.StringInput `pulumi:"scalingPlanScheduleName"`
}

func (LookupScalingPlanPersonalScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalingPlanPersonalScheduleArgs)(nil)).Elem()
}

// Represents a ScalingPlanPersonalSchedule definition.
type LookupScalingPlanPersonalScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupScalingPlanPersonalScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScalingPlanPersonalScheduleResult)(nil)).Elem()
}

func (o LookupScalingPlanPersonalScheduleResultOutput) ToLookupScalingPlanPersonalScheduleResultOutput() LookupScalingPlanPersonalScheduleResultOutput {
	return o
}

func (o LookupScalingPlanPersonalScheduleResultOutput) ToLookupScalingPlanPersonalScheduleResultOutputWithContext(ctx context.Context) LookupScalingPlanPersonalScheduleResultOutput {
	return o
}

// Set of days of the week on which this schedule is active.
func (o LookupScalingPlanPersonalScheduleResultOutput) DaysOfWeek() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) []string { return v.DaysOfWeek }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupScalingPlanPersonalScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupScalingPlanPersonalScheduleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Action to be taken after a user disconnect during the off-peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakActionOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.OffPeakActionOnDisconnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a logoff during the off-peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakActionOnLogoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.OffPeakActionOnLogoff }).(pulumi.StringPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakMinutesToWaitOnDisconnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.OffPeakMinutesToWaitOnDisconnect }).(pulumi.IntPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakMinutesToWaitOnLogoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.OffPeakMinutesToWaitOnLogoff }).(pulumi.IntPtrOutput)
}

// Starting time for off-peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *TimeResponse { return v.OffPeakStartTime }).(TimeResponsePtrOutput)
}

// The desired configuration of Start VM On Connect for the hostpool during the off-peak phase.
func (o LookupScalingPlanPersonalScheduleResultOutput) OffPeakStartVMOnConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.OffPeakStartVMOnConnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a user disconnect during the peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakActionOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.PeakActionOnDisconnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a logoff during the peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakActionOnLogoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.PeakActionOnLogoff }).(pulumi.StringPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakMinutesToWaitOnDisconnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.PeakMinutesToWaitOnDisconnect }).(pulumi.IntPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakMinutesToWaitOnLogoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.PeakMinutesToWaitOnLogoff }).(pulumi.IntPtrOutput)
}

// Starting time for peak period.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *TimeResponse { return v.PeakStartTime }).(TimeResponsePtrOutput)
}

// The desired configuration of Start VM On Connect for the hostpool during the peak phase.
func (o LookupScalingPlanPersonalScheduleResultOutput) PeakStartVMOnConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.PeakStartVMOnConnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a user disconnect during the ramp down period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownActionOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampDownActionOnDisconnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a logoff during the ramp down period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownActionOnLogoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampDownActionOnLogoff }).(pulumi.StringPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownMinutesToWaitOnDisconnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.RampDownMinutesToWaitOnDisconnect }).(pulumi.IntPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownMinutesToWaitOnLogoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.RampDownMinutesToWaitOnLogoff }).(pulumi.IntPtrOutput)
}

// Starting time for ramp down period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *TimeResponse { return v.RampDownStartTime }).(TimeResponsePtrOutput)
}

// The desired configuration of Start VM On Connect for the hostpool during the ramp down phase.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampDownStartVMOnConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampDownStartVMOnConnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a user disconnect during the ramp up period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpActionOnDisconnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampUpActionOnDisconnect }).(pulumi.StringPtrOutput)
}

// Action to be taken after a logoff during the ramp up period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpActionOnLogoff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampUpActionOnLogoff }).(pulumi.StringPtrOutput)
}

// The desired startup behavior during the ramp up period for personal vms in the hostpool.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpAutoStartHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampUpAutoStartHosts }).(pulumi.StringPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpMinutesToWaitOnDisconnect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.RampUpMinutesToWaitOnDisconnect }).(pulumi.IntPtrOutput)
}

// The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpMinutesToWaitOnLogoff() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *int { return v.RampUpMinutesToWaitOnLogoff }).(pulumi.IntPtrOutput)
}

// Starting time for ramp up period.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpStartTime() TimeResponsePtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *TimeResponse { return v.RampUpStartTime }).(TimeResponsePtrOutput)
}

// The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually.
func (o LookupScalingPlanPersonalScheduleResultOutput) RampUpStartVMOnConnect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) *string { return v.RampUpStartVMOnConnect }).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o LookupScalingPlanPersonalScheduleResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupScalingPlanPersonalScheduleResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScalingPlanPersonalScheduleResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScalingPlanPersonalScheduleResultOutput{})
}
