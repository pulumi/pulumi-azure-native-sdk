// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// The diagnostic settings category resource.
type DiagnosticSettingsCategoryResourceResponse struct {
	// The type of the diagnostic settings category.
	CategoryType *string `pulumi:"categoryType"`
	// Azure resource Id
	Id string `pulumi:"id"`
	// Azure resource name
	Name string `pulumi:"name"`
	// Azure resource type
	Type string `pulumi:"type"`
}

// The diagnostic settings category resource.
type DiagnosticSettingsCategoryResourceResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingsCategoryResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingsCategoryResourceResponse)(nil)).Elem()
}

func (o DiagnosticSettingsCategoryResourceResponseOutput) ToDiagnosticSettingsCategoryResourceResponseOutput() DiagnosticSettingsCategoryResourceResponseOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseOutput) ToDiagnosticSettingsCategoryResourceResponseOutputWithContext(ctx context.Context) DiagnosticSettingsCategoryResourceResponseOutput {
	return o
}

// The type of the diagnostic settings category.
func (o DiagnosticSettingsCategoryResourceResponseOutput) CategoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) *string { return v.CategoryType }).(pulumi.StringPtrOutput)
}

// Azure resource Id
func (o DiagnosticSettingsCategoryResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Azure resource name
func (o DiagnosticSettingsCategoryResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Azure resource type
func (o DiagnosticSettingsCategoryResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DiagnosticSettingsCategoryResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingsCategoryResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingsCategoryResourceResponse)(nil)).Elem()
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) ToDiagnosticSettingsCategoryResourceResponseArrayOutput() DiagnosticSettingsCategoryResourceResponseArrayOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) ToDiagnosticSettingsCategoryResourceResponseArrayOutputWithContext(ctx context.Context) DiagnosticSettingsCategoryResourceResponseArrayOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingsCategoryResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticSettingsCategoryResourceResponse {
		return vs[0].([]DiagnosticSettingsCategoryResourceResponse)[vs[1].(int)]
	}).(DiagnosticSettingsCategoryResourceResponseOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettings struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// SubscriptionLogSettingsInput is an input type that accepts SubscriptionLogSettingsArgs and SubscriptionLogSettingsOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsInput` via:
//
//	SubscriptionLogSettingsArgs{...}
type SubscriptionLogSettingsInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput
	ToSubscriptionLogSettingsOutputWithContext(context.Context) SubscriptionLogSettingsOutput
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsArgs struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (SubscriptionLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return i.ToSubscriptionLogSettingsOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsOutput)
}

// SubscriptionLogSettingsArrayInput is an input type that accepts SubscriptionLogSettingsArray and SubscriptionLogSettingsArrayOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsArrayInput` via:
//
//	SubscriptionLogSettingsArray{ SubscriptionLogSettingsArgs{...} }
type SubscriptionLogSettingsArrayInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput
	ToSubscriptionLogSettingsArrayOutputWithContext(context.Context) SubscriptionLogSettingsArrayOutput
}

type SubscriptionLogSettingsArray []SubscriptionLogSettingsInput

func (SubscriptionLogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return i.ToSubscriptionLogSettingsArrayOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsArrayOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return o
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return o
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettings {
		return vs[0].([]SubscriptionLogSettings)[vs[1].(int)]
	}).(SubscriptionLogSettingsOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponse struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutput() SubscriptionLogSettingsResponseOutput {
	return o
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseOutput {
	return o
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutput() SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettingsResponse {
		return vs[0].([]SubscriptionLogSettingsResponse)[vs[1].(int)]
	}).(SubscriptionLogSettingsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(DiagnosticSettingsCategoryResourceResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingsCategoryResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseArrayOutput{})
}
