// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220615

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Actions to invoke when the alert fires.
type Actions struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups []string `pulumi:"actionGroups"`
	// The properties of an alert payload.
	CustomProperties map[string]string `pulumi:"customProperties"`
}

// ActionsInput is an input type that accepts ActionsArgs and ActionsOutput values.
// You can construct a concrete instance of `ActionsInput` via:
//
//	ActionsArgs{...}
type ActionsInput interface {
	pulumi.Input

	ToActionsOutput() ActionsOutput
	ToActionsOutputWithContext(context.Context) ActionsOutput
}

// Actions to invoke when the alert fires.
type ActionsArgs struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// The properties of an alert payload.
	CustomProperties pulumi.StringMapInput `pulumi:"customProperties"`
}

func (ActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Actions)(nil)).Elem()
}

func (i ActionsArgs) ToActionsOutput() ActionsOutput {
	return i.ToActionsOutputWithContext(context.Background())
}

func (i ActionsArgs) ToActionsOutputWithContext(ctx context.Context) ActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOutput)
}

func (i ActionsArgs) ToActionsPtrOutput() ActionsPtrOutput {
	return i.ToActionsPtrOutputWithContext(context.Background())
}

func (i ActionsArgs) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOutput).ToActionsPtrOutputWithContext(ctx)
}

// ActionsPtrInput is an input type that accepts ActionsArgs, ActionsPtr and ActionsPtrOutput values.
// You can construct a concrete instance of `ActionsPtrInput` via:
//
//	        ActionsArgs{...}
//
//	or:
//
//	        nil
type ActionsPtrInput interface {
	pulumi.Input

	ToActionsPtrOutput() ActionsPtrOutput
	ToActionsPtrOutputWithContext(context.Context) ActionsPtrOutput
}

type actionsPtrType ActionsArgs

func ActionsPtr(v *ActionsArgs) ActionsPtrInput {
	return (*actionsPtrType)(v)
}

func (*actionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Actions)(nil)).Elem()
}

func (i *actionsPtrType) ToActionsPtrOutput() ActionsPtrOutput {
	return i.ToActionsPtrOutputWithContext(context.Background())
}

func (i *actionsPtrType) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsPtrOutput)
}

// Actions to invoke when the alert fires.
type ActionsOutput struct{ *pulumi.OutputState }

func (ActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Actions)(nil)).Elem()
}

func (o ActionsOutput) ToActionsOutput() ActionsOutput {
	return o
}

func (o ActionsOutput) ToActionsOutputWithContext(ctx context.Context) ActionsOutput {
	return o
}

func (o ActionsOutput) ToActionsPtrOutput() ActionsPtrOutput {
	return o.ToActionsPtrOutputWithContext(context.Background())
}

func (o ActionsOutput) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Actions) *Actions {
		return &v
	}).(ActionsPtrOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Actions) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The properties of an alert payload.
func (o ActionsOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v Actions) map[string]string { return v.CustomProperties }).(pulumi.StringMapOutput)
}

type ActionsPtrOutput struct{ *pulumi.OutputState }

func (ActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Actions)(nil)).Elem()
}

func (o ActionsPtrOutput) ToActionsPtrOutput() ActionsPtrOutput {
	return o
}

func (o ActionsPtrOutput) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return o
}

func (o ActionsPtrOutput) Elem() ActionsOutput {
	return o.ApplyT(func(v *Actions) Actions {
		if v != nil {
			return *v
		}
		var ret Actions
		return ret
	}).(ActionsOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsPtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Actions) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The properties of an alert payload.
func (o ActionsPtrOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Actions) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(pulumi.StringMapOutput)
}

// Actions to invoke when the alert fires.
type ActionsResponse struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups []string `pulumi:"actionGroups"`
	// The properties of an alert payload.
	CustomProperties map[string]string `pulumi:"customProperties"`
}

// Actions to invoke when the alert fires.
type ActionsResponseOutput struct{ *pulumi.OutputState }

func (ActionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsResponse)(nil)).Elem()
}

func (o ActionsResponseOutput) ToActionsResponseOutput() ActionsResponseOutput {
	return o
}

func (o ActionsResponseOutput) ToActionsResponseOutputWithContext(ctx context.Context) ActionsResponseOutput {
	return o
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsResponseOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionsResponse) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The properties of an alert payload.
func (o ActionsResponseOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActionsResponse) map[string]string { return v.CustomProperties }).(pulumi.StringMapOutput)
}

type ActionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsResponse)(nil)).Elem()
}

func (o ActionsResponsePtrOutput) ToActionsResponsePtrOutput() ActionsResponsePtrOutput {
	return o
}

func (o ActionsResponsePtrOutput) ToActionsResponsePtrOutputWithContext(ctx context.Context) ActionsResponsePtrOutput {
	return o
}

func (o ActionsResponsePtrOutput) Elem() ActionsResponseOutput {
	return o.ApplyT(func(v *ActionsResponse) ActionsResponse {
		if v != nil {
			return *v
		}
		var ret ActionsResponse
		return ret
	}).(ActionsResponseOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsResponsePtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The properties of an alert payload.
func (o ActionsResponsePtrOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActionsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(pulumi.StringMapOutput)
}

// A condition of the scheduled query rule.
type Condition struct {
	// List of Dimensions conditions
	Dimensions []Dimension `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods *ConditionFailingPeriods `pulumi:"failingPeriods"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string `pulumi:"metricName"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *string `pulumi:"operator"`
	// Log query alert
	Query *string `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn *string `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
	Threshold *float64 `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *string `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for Condition
func (val *Condition) Defaults() *Condition {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FailingPeriods = tmp.FailingPeriods.Defaults()

	return &tmp
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//	ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// A condition of the scheduled query rule.
type ConditionArgs struct {
	// List of Dimensions conditions
	Dimensions DimensionArrayInput `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods ConditionFailingPeriodsPtrInput `pulumi:"failingPeriods"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn pulumi.StringPtrInput `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Log query alert
	Query pulumi.StringPtrInput `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn pulumi.StringPtrInput `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation pulumi.StringPtrInput `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for ConditionArgs
func (val *ConditionArgs) Defaults() *ConditionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//	ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// A condition of the scheduled query rule.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// List of Dimensions conditions
func (o ConditionOutput) Dimensions() DimensionArrayOutput {
	return o.ApplyT(func(v Condition) []Dimension { return v.Dimensions }).(DimensionArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) FailingPeriods() ConditionFailingPeriodsPtrOutput {
	return o.ApplyT(func(v Condition) *ConditionFailingPeriods { return v.FailingPeriods }).(ConditionFailingPeriodsPtrOutput)
}

// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) MetricMeasureColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.MetricMeasureColumn }).(pulumi.StringPtrOutput)
}

// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
func (o ConditionOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The criteria operator. Relevant and required only for rules of the kind LogAlert.
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Log query alert
func (o ConditionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) ResourceIdColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.ResourceIdColumn }).(pulumi.StringPtrOutput)
}

// the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
func (o ConditionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Condition) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Aggregation type. Relevant and required only for rules of the kind LogAlert.
func (o ConditionOutput) TimeAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.TimeAggregation }).(pulumi.StringPtrOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Condition {
		return vs[0].([]Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert *float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *float64 `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionFailingPeriods
func (val *ConditionFailingPeriods) Defaults() *ConditionFailingPeriods {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MinFailingPeriodsToAlert) {
		minFailingPeriodsToAlert_ := 1.0
		tmp.MinFailingPeriodsToAlert = &minFailingPeriodsToAlert_
	}
	if isZero(tmp.NumberOfEvaluationPeriods) {
		numberOfEvaluationPeriods_ := 1.0
		tmp.NumberOfEvaluationPeriods = &numberOfEvaluationPeriods_
	}
	return &tmp
}

// ConditionFailingPeriodsInput is an input type that accepts ConditionFailingPeriodsArgs and ConditionFailingPeriodsOutput values.
// You can construct a concrete instance of `ConditionFailingPeriodsInput` via:
//
//	ConditionFailingPeriodsArgs{...}
type ConditionFailingPeriodsInput interface {
	pulumi.Input

	ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput
	ToConditionFailingPeriodsOutputWithContext(context.Context) ConditionFailingPeriodsOutput
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriodsArgs struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert pulumi.Float64PtrInput `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods pulumi.Float64PtrInput `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionFailingPeriodsArgs
func (val *ConditionFailingPeriodsArgs) Defaults() *ConditionFailingPeriodsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MinFailingPeriodsToAlert) {
		tmp.MinFailingPeriodsToAlert = pulumi.Float64Ptr(1.0)
	}
	if isZero(tmp.NumberOfEvaluationPeriods) {
		tmp.NumberOfEvaluationPeriods = pulumi.Float64Ptr(1.0)
	}
	return &tmp
}
func (ConditionFailingPeriodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionFailingPeriods)(nil)).Elem()
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput {
	return i.ToConditionFailingPeriodsOutputWithContext(context.Background())
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsOutputWithContext(ctx context.Context) ConditionFailingPeriodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsOutput)
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return i.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsOutput).ToConditionFailingPeriodsPtrOutputWithContext(ctx)
}

// ConditionFailingPeriodsPtrInput is an input type that accepts ConditionFailingPeriodsArgs, ConditionFailingPeriodsPtr and ConditionFailingPeriodsPtrOutput values.
// You can construct a concrete instance of `ConditionFailingPeriodsPtrInput` via:
//
//	        ConditionFailingPeriodsArgs{...}
//
//	or:
//
//	        nil
type ConditionFailingPeriodsPtrInput interface {
	pulumi.Input

	ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput
	ToConditionFailingPeriodsPtrOutputWithContext(context.Context) ConditionFailingPeriodsPtrOutput
}

type conditionFailingPeriodsPtrType ConditionFailingPeriodsArgs

func ConditionFailingPeriodsPtr(v *ConditionFailingPeriodsArgs) ConditionFailingPeriodsPtrInput {
	return (*conditionFailingPeriodsPtrType)(v)
}

func (*conditionFailingPeriodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionFailingPeriods)(nil)).Elem()
}

func (i *conditionFailingPeriodsPtrType) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return i.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i *conditionFailingPeriodsPtrType) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsPtrOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriodsOutput struct{ *pulumi.OutputState }

func (ConditionFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionFailingPeriods)(nil)).Elem()
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput {
	return o
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsOutputWithContext(ctx context.Context) ConditionFailingPeriodsOutput {
	return o
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return o.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionFailingPeriods) *ConditionFailingPeriods {
		return &v
	}).(ConditionFailingPeriodsPtrOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionFailingPeriods) *float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionFailingPeriods) *float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64PtrOutput)
}

type ConditionFailingPeriodsPtrOutput struct{ *pulumi.OutputState }

func (ConditionFailingPeriodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionFailingPeriods)(nil)).Elem()
}

func (o ConditionFailingPeriodsPtrOutput) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return o
}

func (o ConditionFailingPeriodsPtrOutput) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return o
}

func (o ConditionFailingPeriodsPtrOutput) Elem() ConditionFailingPeriodsOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) ConditionFailingPeriods {
		if v != nil {
			return *v
		}
		var ret ConditionFailingPeriods
		return ret
	}).(ConditionFailingPeriodsOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionFailingPeriodsPtrOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.MinFailingPeriodsToAlert
	}).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionFailingPeriodsPtrOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfEvaluationPeriods
	}).(pulumi.Float64PtrOutput)
}

// A condition of the scheduled query rule.
type ConditionResponse struct {
	// List of Dimensions conditions
	Dimensions []DimensionResponse `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods *ConditionResponseFailingPeriods `pulumi:"failingPeriods"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string `pulumi:"metricName"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *string `pulumi:"operator"`
	// Log query alert
	Query *string `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn *string `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
	Threshold *float64 `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *string `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for ConditionResponse
func (val *ConditionResponse) Defaults() *ConditionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FailingPeriods = tmp.FailingPeriods.Defaults()

	return &tmp
}

// A condition of the scheduled query rule.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// List of Dimensions conditions
func (o ConditionResponseOutput) Dimensions() DimensionResponseArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []DimensionResponse { return v.Dimensions }).(DimensionResponseArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) FailingPeriods() ConditionResponseFailingPeriodsPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponseFailingPeriods { return v.FailingPeriods }).(ConditionResponseFailingPeriodsPtrOutput)
}

// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) MetricMeasureColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.MetricMeasureColumn }).(pulumi.StringPtrOutput)
}

// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
func (o ConditionResponseOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The criteria operator. Relevant and required only for rules of the kind LogAlert.
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Log query alert
func (o ConditionResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) ResourceIdColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.ResourceIdColumn }).(pulumi.StringPtrOutput)
}

// the criteria threshold value that activates the alert. Relevant and required only for rules of the kind LogAlert.
func (o ConditionResponseOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponse) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Aggregation type. Relevant and required only for rules of the kind LogAlert.
func (o ConditionResponseOutput) TimeAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.TimeAggregation }).(pulumi.StringPtrOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionResponseFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert *float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *float64 `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionResponseFailingPeriods
func (val *ConditionResponseFailingPeriods) Defaults() *ConditionResponseFailingPeriods {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.MinFailingPeriodsToAlert) {
		minFailingPeriodsToAlert_ := 1.0
		tmp.MinFailingPeriodsToAlert = &minFailingPeriodsToAlert_
	}
	if isZero(tmp.NumberOfEvaluationPeriods) {
		numberOfEvaluationPeriods_ := 1.0
		tmp.NumberOfEvaluationPeriods = &numberOfEvaluationPeriods_
	}
	return &tmp
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionResponseFailingPeriodsOutput struct{ *pulumi.OutputState }

func (ConditionResponseFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponseFailingPeriods)(nil)).Elem()
}

func (o ConditionResponseFailingPeriodsOutput) ToConditionResponseFailingPeriodsOutput() ConditionResponseFailingPeriodsOutput {
	return o
}

func (o ConditionResponseFailingPeriodsOutput) ToConditionResponseFailingPeriodsOutputWithContext(ctx context.Context) ConditionResponseFailingPeriodsOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionResponseFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponseFailingPeriods) *float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionResponseFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponseFailingPeriods) *float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64PtrOutput)
}

type ConditionResponseFailingPeriodsPtrOutput struct{ *pulumi.OutputState }

func (ConditionResponseFailingPeriodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponseFailingPeriods)(nil)).Elem()
}

func (o ConditionResponseFailingPeriodsPtrOutput) ToConditionResponseFailingPeriodsPtrOutput() ConditionResponseFailingPeriodsPtrOutput {
	return o
}

func (o ConditionResponseFailingPeriodsPtrOutput) ToConditionResponseFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionResponseFailingPeriodsPtrOutput {
	return o
}

func (o ConditionResponseFailingPeriodsPtrOutput) Elem() ConditionResponseFailingPeriodsOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) ConditionResponseFailingPeriods {
		if v != nil {
			return *v
		}
		var ret ConditionResponseFailingPeriods
		return ret
	}).(ConditionResponseFailingPeriodsOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionResponseFailingPeriodsPtrOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.MinFailingPeriodsToAlert
	}).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionResponseFailingPeriodsPtrOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfEvaluationPeriods
	}).(pulumi.Float64PtrOutput)
}

// Dimension splitting and filtering definition
type Dimension struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionInput is an input type that accepts DimensionArgs and DimensionOutput values.
// You can construct a concrete instance of `DimensionInput` via:
//
//	DimensionArgs{...}
type DimensionInput interface {
	pulumi.Input

	ToDimensionOutput() DimensionOutput
	ToDimensionOutputWithContext(context.Context) DimensionOutput
}

// Dimension splitting and filtering definition
type DimensionArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (i DimensionArgs) ToDimensionOutput() DimensionOutput {
	return i.ToDimensionOutputWithContext(context.Background())
}

func (i DimensionArgs) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionOutput)
}

// DimensionArrayInput is an input type that accepts DimensionArray and DimensionArrayOutput values.
// You can construct a concrete instance of `DimensionArrayInput` via:
//
//	DimensionArray{ DimensionArgs{...} }
type DimensionArrayInput interface {
	pulumi.Input

	ToDimensionArrayOutput() DimensionArrayOutput
	ToDimensionArrayOutputWithContext(context.Context) DimensionArrayOutput
}

type DimensionArray []DimensionInput

func (DimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (i DimensionArray) ToDimensionArrayOutput() DimensionArrayOutput {
	return i.ToDimensionArrayOutputWithContext(context.Background())
}

func (i DimensionArray) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionArrayOutput)
}

// Dimension splitting and filtering definition
type DimensionOutput struct{ *pulumi.OutputState }

func (DimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (o DimensionOutput) ToDimensionOutput() DimensionOutput {
	return o
}

func (o DimensionOutput) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return o
}

// Name of the dimension
func (o DimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Dimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionArrayOutput struct{ *pulumi.OutputState }

func (DimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (o DimensionArrayOutput) ToDimensionArrayOutput() DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) Index(i pulumi.IntInput) DimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dimension {
		return vs[0].([]Dimension)[vs[1].(int)]
	}).(DimensionOutput)
}

// Dimension splitting and filtering definition
type DimensionResponse struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// Dimension splitting and filtering definition
type DimensionResponseOutput struct{ *pulumi.OutputState }

func (DimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseOutput) ToDimensionResponseOutput() DimensionResponseOutput {
	return o
}

func (o DimensionResponseOutput) ToDimensionResponseOutputWithContext(ctx context.Context) DimensionResponseOutput {
	return o
}

// Name of the dimension
func (o DimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (DimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutput() DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutputWithContext(ctx context.Context) DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) Index(i pulumi.IntInput) DimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DimensionResponse {
		return vs[0].([]DimensionResponse)[vs[1].(int)]
	}).(DimensionResponseOutput)
}

// A header to add to the WebTest.
type HeaderField struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// HeaderFieldInput is an input type that accepts HeaderFieldArgs and HeaderFieldOutput values.
// You can construct a concrete instance of `HeaderFieldInput` via:
//
//	HeaderFieldArgs{...}
type HeaderFieldInput interface {
	pulumi.Input

	ToHeaderFieldOutput() HeaderFieldOutput
	ToHeaderFieldOutputWithContext(context.Context) HeaderFieldOutput
}

// A header to add to the WebTest.
type HeaderFieldArgs struct {
	// The name of the header.
	HeaderFieldName pulumi.StringPtrInput `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue pulumi.StringPtrInput `pulumi:"headerFieldValue"`
}

func (HeaderFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (i HeaderFieldArgs) ToHeaderFieldOutput() HeaderFieldOutput {
	return i.ToHeaderFieldOutputWithContext(context.Background())
}

func (i HeaderFieldArgs) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldOutput)
}

// HeaderFieldArrayInput is an input type that accepts HeaderFieldArray and HeaderFieldArrayOutput values.
// You can construct a concrete instance of `HeaderFieldArrayInput` via:
//
//	HeaderFieldArray{ HeaderFieldArgs{...} }
type HeaderFieldArrayInput interface {
	pulumi.Input

	ToHeaderFieldArrayOutput() HeaderFieldArrayOutput
	ToHeaderFieldArrayOutputWithContext(context.Context) HeaderFieldArrayOutput
}

type HeaderFieldArray []HeaderFieldInput

func (HeaderFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return i.ToHeaderFieldArrayOutputWithContext(context.Background())
}

func (i HeaderFieldArray) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderFieldArrayOutput)
}

// A header to add to the WebTest.
type HeaderFieldOutput struct{ *pulumi.OutputState }

func (HeaderFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderField)(nil)).Elem()
}

func (o HeaderFieldOutput) ToHeaderFieldOutput() HeaderFieldOutput {
	return o
}

func (o HeaderFieldOutput) ToHeaderFieldOutputWithContext(ctx context.Context) HeaderFieldOutput {
	return o
}

// The name of the header.
func (o HeaderFieldOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderField) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderField)(nil)).Elem()
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutput() HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) ToHeaderFieldArrayOutputWithContext(ctx context.Context) HeaderFieldArrayOutput {
	return o
}

func (o HeaderFieldArrayOutput) Index(i pulumi.IntInput) HeaderFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderField {
		return vs[0].([]HeaderField)[vs[1].(int)]
	}).(HeaderFieldOutput)
}

// A header to add to the WebTest.
type HeaderFieldResponse struct {
	// The name of the header.
	HeaderFieldName *string `pulumi:"headerFieldName"`
	// The value of the header.
	HeaderFieldValue *string `pulumi:"headerFieldValue"`
}

// A header to add to the WebTest.
type HeaderFieldResponseOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutput() HeaderFieldResponseOutput {
	return o
}

func (o HeaderFieldResponseOutput) ToHeaderFieldResponseOutputWithContext(ctx context.Context) HeaderFieldResponseOutput {
	return o
}

// The name of the header.
func (o HeaderFieldResponseOutput) HeaderFieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldName }).(pulumi.StringPtrOutput)
}

// The value of the header.
func (o HeaderFieldResponseOutput) HeaderFieldValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HeaderFieldResponse) *string { return v.HeaderFieldValue }).(pulumi.StringPtrOutput)
}

type HeaderFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderFieldResponse)(nil)).Elem()
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutput() HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) ToHeaderFieldResponseArrayOutputWithContext(ctx context.Context) HeaderFieldResponseArrayOutput {
	return o
}

func (o HeaderFieldResponseArrayOutput) Index(i pulumi.IntInput) HeaderFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderFieldResponse {
		return vs[0].([]HeaderFieldResponse)[vs[1].(int)]
	}).(HeaderFieldResponseOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteria struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf []Condition `pulumi:"allOf"`
}

// ScheduledQueryRuleCriteriaInput is an input type that accepts ScheduledQueryRuleCriteriaArgs and ScheduledQueryRuleCriteriaOutput values.
// You can construct a concrete instance of `ScheduledQueryRuleCriteriaInput` via:
//
//	ScheduledQueryRuleCriteriaArgs{...}
type ScheduledQueryRuleCriteriaInput interface {
	pulumi.Input

	ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput
	ToScheduledQueryRuleCriteriaOutputWithContext(context.Context) ScheduledQueryRuleCriteriaOutput
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaArgs struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf ConditionArrayInput `pulumi:"allOf"`
}

func (ScheduledQueryRuleCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteria)(nil)).Elem()
}

func (i ScheduledQueryRuleCriteriaArgs) ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput {
	return i.ToScheduledQueryRuleCriteriaOutputWithContext(context.Background())
}

func (i ScheduledQueryRuleCriteriaArgs) ToScheduledQueryRuleCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRuleCriteriaOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRuleCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteria)(nil)).Elem()
}

func (o ScheduledQueryRuleCriteriaOutput) ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput {
	return o
}

func (o ScheduledQueryRuleCriteriaOutput) ToScheduledQueryRuleCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaOutput {
	return o
}

// A list of conditions to evaluate against the specified scopes
func (o ScheduledQueryRuleCriteriaOutput) AllOf() ConditionArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRuleCriteria) []Condition { return v.AllOf }).(ConditionArrayOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaResponse struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf []ConditionResponse `pulumi:"allOf"`
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaResponseOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRuleCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteriaResponse)(nil)).Elem()
}

func (o ScheduledQueryRuleCriteriaResponseOutput) ToScheduledQueryRuleCriteriaResponseOutput() ScheduledQueryRuleCriteriaResponseOutput {
	return o
}

func (o ScheduledQueryRuleCriteriaResponseOutput) ToScheduledQueryRuleCriteriaResponseOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaResponseOutput {
	return o
}

// A list of conditions to evaluate against the specified scopes
func (o ScheduledQueryRuleCriteriaResponseOutput) AllOf() ConditionResponseArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRuleCriteriaResponse) []ConditionResponse { return v.AllOf }).(ConditionResponseArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocation struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// WebTestGeolocationInput is an input type that accepts WebTestGeolocationArgs and WebTestGeolocationOutput values.
// You can construct a concrete instance of `WebTestGeolocationInput` via:
//
//	WebTestGeolocationArgs{...}
type WebTestGeolocationInput interface {
	pulumi.Input

	ToWebTestGeolocationOutput() WebTestGeolocationOutput
	ToWebTestGeolocationOutputWithContext(context.Context) WebTestGeolocationOutput
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationArgs struct {
	// Location ID for the WebTest to run from.
	Location pulumi.StringPtrInput `pulumi:"location"`
}

func (WebTestGeolocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return i.ToWebTestGeolocationOutputWithContext(context.Background())
}

func (i WebTestGeolocationArgs) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationOutput)
}

// WebTestGeolocationArrayInput is an input type that accepts WebTestGeolocationArray and WebTestGeolocationArrayOutput values.
// You can construct a concrete instance of `WebTestGeolocationArrayInput` via:
//
//	WebTestGeolocationArray{ WebTestGeolocationArgs{...} }
type WebTestGeolocationArrayInput interface {
	pulumi.Input

	ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput
	ToWebTestGeolocationArrayOutputWithContext(context.Context) WebTestGeolocationArrayOutput
}

type WebTestGeolocationArray []WebTestGeolocationInput

func (WebTestGeolocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return i.ToWebTestGeolocationArrayOutputWithContext(context.Background())
}

func (i WebTestGeolocationArray) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestGeolocationArrayOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutput() WebTestGeolocationOutput {
	return o
}

func (o WebTestGeolocationOutput) ToWebTestGeolocationOutputWithContext(ctx context.Context) WebTestGeolocationOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocation) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocation)(nil)).Elem()
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutput() WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) ToWebTestGeolocationArrayOutputWithContext(ctx context.Context) WebTestGeolocationArrayOutput {
	return o
}

func (o WebTestGeolocationArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocation {
		return vs[0].([]WebTestGeolocation)[vs[1].(int)]
	}).(WebTestGeolocationOutput)
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponse struct {
	// Location ID for the WebTest to run from.
	Location *string `pulumi:"location"`
}

// Geo-physical location to run a WebTest from. You must specify one or more locations for the test to run from.
type WebTestGeolocationResponseOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutput() WebTestGeolocationResponseOutput {
	return o
}

func (o WebTestGeolocationResponseOutput) ToWebTestGeolocationResponseOutputWithContext(ctx context.Context) WebTestGeolocationResponseOutput {
	return o
}

// Location ID for the WebTest to run from.
func (o WebTestGeolocationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestGeolocationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

type WebTestGeolocationResponseArrayOutput struct{ *pulumi.OutputState }

func (WebTestGeolocationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebTestGeolocationResponse)(nil)).Elem()
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutput() WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) ToWebTestGeolocationResponseArrayOutputWithContext(ctx context.Context) WebTestGeolocationResponseArrayOutput {
	return o
}

func (o WebTestGeolocationResponseArrayOutput) Index(i pulumi.IntInput) WebTestGeolocationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebTestGeolocationResponse {
		return vs[0].([]WebTestGeolocationResponse)[vs[1].(int)]
	}).(WebTestGeolocationResponseOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// WebTestPropertiesConfigurationInput is an input type that accepts WebTestPropertiesConfigurationArgs and WebTestPropertiesConfigurationOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationInput` via:
//
//	WebTestPropertiesConfigurationArgs{...}
type WebTestPropertiesConfigurationInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput
	ToWebTestPropertiesConfigurationOutputWithContext(context.Context) WebTestPropertiesConfigurationOutput
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationArgs struct {
	// The XML specification of a WebTest to run against an application.
	WebTest pulumi.StringPtrInput `pulumi:"webTest"`
}

func (WebTestPropertiesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return i.ToWebTestPropertiesConfigurationOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput)
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesConfigurationArgs) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationOutput).ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx)
}

// WebTestPropertiesConfigurationPtrInput is an input type that accepts WebTestPropertiesConfigurationArgs, WebTestPropertiesConfigurationPtr and WebTestPropertiesConfigurationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesConfigurationPtrInput` via:
//
//	        WebTestPropertiesConfigurationArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesConfigurationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput
	ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Context) WebTestPropertiesConfigurationPtrOutput
}

type webTestPropertiesConfigurationPtrType WebTestPropertiesConfigurationArgs

func WebTestPropertiesConfigurationPtr(v *WebTestPropertiesConfigurationArgs) WebTestPropertiesConfigurationPtrInput {
	return (*webTestPropertiesConfigurationPtrType)(v)
}

func (*webTestPropertiesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return i.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesConfigurationPtrType) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesConfigurationPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutput() WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationOutput {
	return o
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o.ToWebTestPropertiesConfigurationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesConfigurationOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesConfiguration) *WebTestPropertiesConfiguration {
		return &v
	}).(WebTestPropertiesConfigurationPtrOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutput() WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) ToWebTestPropertiesConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesConfigurationPtrOutput) Elem() WebTestPropertiesConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) WebTestPropertiesConfiguration {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesConfiguration
		return ret
	}).(WebTestPropertiesConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidation struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// WebTestPropertiesContentValidationInput is an input type that accepts WebTestPropertiesContentValidationArgs and WebTestPropertiesContentValidationOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationInput` via:
//
//	WebTestPropertiesContentValidationArgs{...}
type WebTestPropertiesContentValidationInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput
	ToWebTestPropertiesContentValidationOutputWithContext(context.Context) WebTestPropertiesContentValidationOutput
}

// The collection of content validation properties
type WebTestPropertiesContentValidationArgs struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch pulumi.StringPtrInput `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound pulumi.BoolPtrInput `pulumi:"passIfTextFound"`
}

func (WebTestPropertiesContentValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return i.ToWebTestPropertiesContentValidationOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput)
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesContentValidationArgs) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationOutput).ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx)
}

// WebTestPropertiesContentValidationPtrInput is an input type that accepts WebTestPropertiesContentValidationArgs, WebTestPropertiesContentValidationPtr and WebTestPropertiesContentValidationPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesContentValidationPtrInput` via:
//
//	        WebTestPropertiesContentValidationArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesContentValidationPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput
	ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Context) WebTestPropertiesContentValidationPtrOutput
}

type webTestPropertiesContentValidationPtrType WebTestPropertiesContentValidationArgs

func WebTestPropertiesContentValidationPtr(v *WebTestPropertiesContentValidationArgs) WebTestPropertiesContentValidationPtrInput {
	return (*webTestPropertiesContentValidationPtrType)(v)
}

func (*webTestPropertiesContentValidationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return i.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesContentValidationPtrType) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesContentValidationPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutput() WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationOutput {
	return o
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o.ToWebTestPropertiesContentValidationPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesContentValidationOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesContentValidation) *WebTestPropertiesContentValidation {
		return &v
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutput() WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) ToWebTestPropertiesContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesContentValidationPtrOutput) Elem() WebTestPropertiesContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) WebTestPropertiesContentValidation {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesContentValidation
		return ret
	}).(WebTestPropertiesContentValidationOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderField `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// WebTestPropertiesRequestInput is an input type that accepts WebTestPropertiesRequestArgs and WebTestPropertiesRequestOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestInput` via:
//
//	WebTestPropertiesRequestArgs{...}
type WebTestPropertiesRequestInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput
	ToWebTestPropertiesRequestOutputWithContext(context.Context) WebTestPropertiesRequestOutput
}

// The collection of request properties
type WebTestPropertiesRequestArgs struct {
	// Follow redirects for this web test.
	FollowRedirects pulumi.BoolPtrInput `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers HeaderFieldArrayInput `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb pulumi.StringPtrInput `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests pulumi.BoolPtrInput `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody pulumi.StringPtrInput `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl pulumi.StringPtrInput `pulumi:"requestUrl"`
}

func (WebTestPropertiesRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return i.ToWebTestPropertiesRequestOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput)
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesRequestArgs) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestOutput).ToWebTestPropertiesRequestPtrOutputWithContext(ctx)
}

// WebTestPropertiesRequestPtrInput is an input type that accepts WebTestPropertiesRequestArgs, WebTestPropertiesRequestPtr and WebTestPropertiesRequestPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesRequestPtrInput` via:
//
//	        WebTestPropertiesRequestArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesRequestPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput
	ToWebTestPropertiesRequestPtrOutputWithContext(context.Context) WebTestPropertiesRequestPtrOutput
}

type webTestPropertiesRequestPtrType WebTestPropertiesRequestArgs

func WebTestPropertiesRequestPtr(v *WebTestPropertiesRequestArgs) WebTestPropertiesRequestPtrInput {
	return (*webTestPropertiesRequestPtrType)(v)
}

func (*webTestPropertiesRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return i.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesRequestPtrType) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesRequestPtrOutput)
}

// The collection of request properties
type WebTestPropertiesRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutput() WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestOutputWithContext(ctx context.Context) WebTestPropertiesRequestOutput {
	return o
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o.ToWebTestPropertiesRequestPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesRequestOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesRequest) *WebTestPropertiesRequest {
		return &v
	}).(WebTestPropertiesRequestPtrOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) []HeaderField { return v.Headers }).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesRequest)(nil)).Elem()
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutput() WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) ToWebTestPropertiesRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesRequestPtrOutput {
	return o
}

func (o WebTestPropertiesRequestPtrOutput) Elem() WebTestPropertiesRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) WebTestPropertiesRequest {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesRequest
		return ret
	}).(WebTestPropertiesRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesRequestPtrOutput) Headers() HeaderFieldArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) []HeaderField {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfiguration struct {
	// The XML specification of a WebTest to run against an application.
	WebTest *string `pulumi:"webTest"`
}

// An XML configuration specification for a WebTest.
type WebTestPropertiesResponseConfigurationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutput() WebTestPropertiesResponseConfigurationOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationOutput) ToWebTestPropertiesResponseConfigurationOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationOutput {
	return o
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseConfiguration) *string { return v.WebTest }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseConfigurationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseConfiguration)(nil)).Elem()
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutput() WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) ToWebTestPropertiesResponseConfigurationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseConfigurationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseConfigurationPtrOutput) Elem() WebTestPropertiesResponseConfigurationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) WebTestPropertiesResponseConfiguration {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseConfiguration
		return ret
	}).(WebTestPropertiesResponseConfigurationOutput)
}

// The XML specification of a WebTest to run against an application.
func (o WebTestPropertiesResponseConfigurationPtrOutput) WebTest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.WebTest
	}).(pulumi.StringPtrOutput)
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidation struct {
	// Content to look for in the return of the WebTest.  Must not be null or empty.
	ContentMatch *string `pulumi:"contentMatch"`
	// When set, this value makes the ContentMatch validation case insensitive.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
	PassIfTextFound *bool `pulumi:"passIfTextFound"`
}

// The collection of content validation properties
type WebTestPropertiesResponseContentValidationOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutput() WebTestPropertiesResponseContentValidationOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationOutput) ToWebTestPropertiesResponseContentValidationOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationOutput {
	return o
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesResponseContentValidationOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *string { return v.ContentMatch }).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseContentValidation) *bool { return v.PassIfTextFound }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesResponseContentValidationPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseContentValidationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseContentValidation)(nil)).Elem()
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutput() WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) ToWebTestPropertiesResponseContentValidationPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseContentValidationPtrOutput {
	return o
}

func (o WebTestPropertiesResponseContentValidationPtrOutput) Elem() WebTestPropertiesResponseContentValidationOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) WebTestPropertiesResponseContentValidation {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseContentValidation
		return ret
	}).(WebTestPropertiesResponseContentValidationOutput)
}

// Content to look for in the return of the WebTest.  Must not be null or empty.
func (o WebTestPropertiesResponseContentValidationPtrOutput) ContentMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *string {
		if v == nil {
			return nil
		}
		return v.ContentMatch
	}).(pulumi.StringPtrOutput)
}

// When set, this value makes the ContentMatch validation case insensitive.
func (o WebTestPropertiesResponseContentValidationPtrOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreCase
	}).(pulumi.BoolPtrOutput)
}

// When true, validation will pass if there is a match for the ContentMatch string.  If false, validation will fail if there is a match
func (o WebTestPropertiesResponseContentValidationPtrOutput) PassIfTextFound() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseContentValidation) *bool {
		if v == nil {
			return nil
		}
		return v.PassIfTextFound
	}).(pulumi.BoolPtrOutput)
}

// The collection of request properties
type WebTestPropertiesResponseRequest struct {
	// Follow redirects for this web test.
	FollowRedirects *bool `pulumi:"followRedirects"`
	// List of headers and their values to add to the WebTest call.
	Headers []HeaderFieldResponse `pulumi:"headers"`
	// Http verb to use for this web test.
	HttpVerb *string `pulumi:"httpVerb"`
	// Parse Dependent request for this WebTest.
	ParseDependentRequests *bool `pulumi:"parseDependentRequests"`
	// Base64 encoded string body to send with this web test.
	RequestBody *string `pulumi:"requestBody"`
	// Url location to test.
	RequestUrl *string `pulumi:"requestUrl"`
}

// The collection of request properties
type WebTestPropertiesResponseRequestOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutput() WebTestPropertiesResponseRequestOutput {
	return o
}

func (o WebTestPropertiesResponseRequestOutput) ToWebTestPropertiesResponseRequestOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestOutput {
	return o
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.FollowRedirects }).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) []HeaderFieldResponse { return v.Headers }).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.HttpVerb }).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *bool { return v.ParseDependentRequests }).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseRequest) *string { return v.RequestUrl }).(pulumi.StringPtrOutput)
}

type WebTestPropertiesResponseRequestPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseRequest)(nil)).Elem()
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutput() WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) ToWebTestPropertiesResponseRequestPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseRequestPtrOutput {
	return o
}

func (o WebTestPropertiesResponseRequestPtrOutput) Elem() WebTestPropertiesResponseRequestOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) WebTestPropertiesResponseRequest {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseRequest
		return ret
	}).(WebTestPropertiesResponseRequestOutput)
}

// Follow redirects for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) FollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.FollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// List of headers and their values to add to the WebTest call.
func (o WebTestPropertiesResponseRequestPtrOutput) Headers() HeaderFieldResponseArrayOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) []HeaderFieldResponse {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderFieldResponseArrayOutput)
}

// Http verb to use for this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) HttpVerb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.HttpVerb
	}).(pulumi.StringPtrOutput)
}

// Parse Dependent request for this WebTest.
func (o WebTestPropertiesResponseRequestPtrOutput) ParseDependentRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *bool {
		if v == nil {
			return nil
		}
		return v.ParseDependentRequests
	}).(pulumi.BoolPtrOutput)
}

// Base64 encoded string body to send with this web test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestBody
	}).(pulumi.StringPtrOutput)
}

// Url location to test.
func (o WebTestPropertiesResponseRequestPtrOutput) RequestUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseRequest) *string {
		if v == nil {
			return nil
		}
		return v.RequestUrl
	}).(pulumi.StringPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesResponseValidationRules struct {
	// The collection of content validation properties
	ContentValidation *WebTestPropertiesResponseContentValidation `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode *int `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpStatusCode *bool `pulumi:"ignoreHttpStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck *int `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck *bool `pulumi:"sSLCheck"`
}

// The collection of validation rule properties
type WebTestPropertiesResponseValidationRulesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseValidationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesResponseValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesResponseValidationRulesOutput) ToWebTestPropertiesResponseValidationRulesOutput() WebTestPropertiesResponseValidationRulesOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesOutput) ToWebTestPropertiesResponseValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesResponseValidationRulesOutput {
	return o
}

// The collection of content validation properties
func (o WebTestPropertiesResponseValidationRulesOutput) ContentValidation() WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *WebTestPropertiesResponseContentValidation {
		return v.ContentValidation
	}).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesResponseValidationRulesOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *int { return v.ExpectedHttpStatusCode }).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesResponseValidationRulesOutput) IgnoreHttpStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *bool { return v.IgnoreHttpStatusCode }).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesResponseValidationRulesOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *int { return v.SSLCertRemainingLifetimeCheck }).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesResponseValidationRulesOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesResponseValidationRules) *bool { return v.SSLCheck }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesResponseValidationRulesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesResponseValidationRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesResponseValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) ToWebTestPropertiesResponseValidationRulesPtrOutput() WebTestPropertiesResponseValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) ToWebTestPropertiesResponseValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesResponseValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesResponseValidationRulesPtrOutput) Elem() WebTestPropertiesResponseValidationRulesOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) WebTestPropertiesResponseValidationRules {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesResponseValidationRules
		return ret
	}).(WebTestPropertiesResponseValidationRulesOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesResponseValidationRulesPtrOutput) ContentValidation() WebTestPropertiesResponseContentValidationPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *WebTestPropertiesResponseContentValidation {
		if v == nil {
			return nil
		}
		return v.ContentValidation
	}).(WebTestPropertiesResponseContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedHttpStatusCode
	}).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) IgnoreHttpStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreHttpStatusCode
	}).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.SSLCertRemainingLifetimeCheck
	}).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesResponseValidationRulesPtrOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesResponseValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.SSLCheck
	}).(pulumi.BoolPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesValidationRules struct {
	// The collection of content validation properties
	ContentValidation *WebTestPropertiesContentValidation `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode *int `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpStatusCode *bool `pulumi:"ignoreHttpStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck *int `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck *bool `pulumi:"sSLCheck"`
}

// WebTestPropertiesValidationRulesInput is an input type that accepts WebTestPropertiesValidationRulesArgs and WebTestPropertiesValidationRulesOutput values.
// You can construct a concrete instance of `WebTestPropertiesValidationRulesInput` via:
//
//	WebTestPropertiesValidationRulesArgs{...}
type WebTestPropertiesValidationRulesInput interface {
	pulumi.Input

	ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput
	ToWebTestPropertiesValidationRulesOutputWithContext(context.Context) WebTestPropertiesValidationRulesOutput
}

// The collection of validation rule properties
type WebTestPropertiesValidationRulesArgs struct {
	// The collection of content validation properties
	ContentValidation WebTestPropertiesContentValidationPtrInput `pulumi:"contentValidation"`
	// Validate that the WebTest returns the http status code provided.
	ExpectedHttpStatusCode pulumi.IntPtrInput `pulumi:"expectedHttpStatusCode"`
	// When set, validation will ignore the status code.
	IgnoreHttpStatusCode pulumi.BoolPtrInput `pulumi:"ignoreHttpStatusCode"`
	// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
	SSLCertRemainingLifetimeCheck pulumi.IntPtrInput `pulumi:"sSLCertRemainingLifetimeCheck"`
	// Checks to see if the SSL cert is still valid.
	SSLCheck pulumi.BoolPtrInput `pulumi:"sSLCheck"`
}

func (WebTestPropertiesValidationRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesValidationRules)(nil)).Elem()
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput {
	return i.ToWebTestPropertiesValidationRulesOutputWithContext(context.Background())
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesOutput)
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return i.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (i WebTestPropertiesValidationRulesArgs) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesOutput).ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx)
}

// WebTestPropertiesValidationRulesPtrInput is an input type that accepts WebTestPropertiesValidationRulesArgs, WebTestPropertiesValidationRulesPtr and WebTestPropertiesValidationRulesPtrOutput values.
// You can construct a concrete instance of `WebTestPropertiesValidationRulesPtrInput` via:
//
//	        WebTestPropertiesValidationRulesArgs{...}
//
//	or:
//
//	        nil
type WebTestPropertiesValidationRulesPtrInput interface {
	pulumi.Input

	ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput
	ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Context) WebTestPropertiesValidationRulesPtrOutput
}

type webTestPropertiesValidationRulesPtrType WebTestPropertiesValidationRulesArgs

func WebTestPropertiesValidationRulesPtr(v *WebTestPropertiesValidationRulesArgs) WebTestPropertiesValidationRulesPtrInput {
	return (*webTestPropertiesValidationRulesPtrType)(v)
}

func (*webTestPropertiesValidationRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesValidationRules)(nil)).Elem()
}

func (i *webTestPropertiesValidationRulesPtrType) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return i.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (i *webTestPropertiesValidationRulesPtrType) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebTestPropertiesValidationRulesPtrOutput)
}

// The collection of validation rule properties
type WebTestPropertiesValidationRulesOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesValidationRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebTestPropertiesValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesOutput() WebTestPropertiesValidationRulesOutput {
	return o
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesOutput {
	return o
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return o.ToWebTestPropertiesValidationRulesPtrOutputWithContext(context.Background())
}

func (o WebTestPropertiesValidationRulesOutput) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebTestPropertiesValidationRules) *WebTestPropertiesValidationRules {
		return &v
	}).(WebTestPropertiesValidationRulesPtrOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesValidationRulesOutput) ContentValidation() WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *WebTestPropertiesContentValidation {
		return v.ContentValidation
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesValidationRulesOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *int { return v.ExpectedHttpStatusCode }).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesValidationRulesOutput) IgnoreHttpStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *bool { return v.IgnoreHttpStatusCode }).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesValidationRulesOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *int { return v.SSLCertRemainingLifetimeCheck }).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesValidationRulesOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebTestPropertiesValidationRules) *bool { return v.SSLCheck }).(pulumi.BoolPtrOutput)
}

type WebTestPropertiesValidationRulesPtrOutput struct{ *pulumi.OutputState }

func (WebTestPropertiesValidationRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebTestPropertiesValidationRules)(nil)).Elem()
}

func (o WebTestPropertiesValidationRulesPtrOutput) ToWebTestPropertiesValidationRulesPtrOutput() WebTestPropertiesValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesValidationRulesPtrOutput) ToWebTestPropertiesValidationRulesPtrOutputWithContext(ctx context.Context) WebTestPropertiesValidationRulesPtrOutput {
	return o
}

func (o WebTestPropertiesValidationRulesPtrOutput) Elem() WebTestPropertiesValidationRulesOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) WebTestPropertiesValidationRules {
		if v != nil {
			return *v
		}
		var ret WebTestPropertiesValidationRules
		return ret
	}).(WebTestPropertiesValidationRulesOutput)
}

// The collection of content validation properties
func (o WebTestPropertiesValidationRulesPtrOutput) ContentValidation() WebTestPropertiesContentValidationPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *WebTestPropertiesContentValidation {
		if v == nil {
			return nil
		}
		return v.ContentValidation
	}).(WebTestPropertiesContentValidationPtrOutput)
}

// Validate that the WebTest returns the http status code provided.
func (o WebTestPropertiesValidationRulesPtrOutput) ExpectedHttpStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.ExpectedHttpStatusCode
	}).(pulumi.IntPtrOutput)
}

// When set, validation will ignore the status code.
func (o WebTestPropertiesValidationRulesPtrOutput) IgnoreHttpStatusCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreHttpStatusCode
	}).(pulumi.BoolPtrOutput)
}

// A number of days to check still remain before the the existing SSL cert expires.  Value must be positive and the SSLCheck must be set to true.
func (o WebTestPropertiesValidationRulesPtrOutput) SSLCertRemainingLifetimeCheck() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *int {
		if v == nil {
			return nil
		}
		return v.SSLCertRemainingLifetimeCheck
	}).(pulumi.IntPtrOutput)
}

// Checks to see if the SSL cert is still valid.
func (o WebTestPropertiesValidationRulesPtrOutput) SSLCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WebTestPropertiesValidationRules) *bool {
		if v == nil {
			return nil
		}
		return v.SSLCheck
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActionsOutput{})
	pulumi.RegisterOutputType(ActionsPtrOutput{})
	pulumi.RegisterOutputType(ActionsResponseOutput{})
	pulumi.RegisterOutputType(ActionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionFailingPeriodsOutput{})
	pulumi.RegisterOutputType(ConditionFailingPeriodsPtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ConditionResponseFailingPeriodsOutput{})
	pulumi.RegisterOutputType(ConditionResponseFailingPeriodsPtrOutput{})
	pulumi.RegisterOutputType(DimensionOutput{})
	pulumi.RegisterOutputType(DimensionArrayOutput{})
	pulumi.RegisterOutputType(DimensionResponseOutput{})
	pulumi.RegisterOutputType(DimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(HeaderFieldOutput{})
	pulumi.RegisterOutputType(HeaderFieldArrayOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseOutput{})
	pulumi.RegisterOutputType(HeaderFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRuleCriteriaOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRuleCriteriaResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationArrayOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseOutput{})
	pulumi.RegisterOutputType(WebTestGeolocationResponseArrayOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesRequestPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseConfigurationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseContentValidationPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseRequestPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseValidationRulesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesResponseValidationRulesPtrOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesValidationRulesOutput{})
	pulumi.RegisterOutputType(WebTestPropertiesValidationRulesPtrOutput{})
}
