// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20180301

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Criterion for dynamic threshold.
type DynamicMetricCriteria struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	// Expected value is 'DynamicThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriods `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponse struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	// Expected value is 'DynamicThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsResponse `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponse struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// An alert action.
type MetricAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionInput is an input type that accepts MetricAlertActionArgs and MetricAlertActionOutput values.
// You can construct a concrete instance of `MetricAlertActionInput` via:
//
//	MetricAlertActionArgs{...}
type MetricAlertActionInput interface {
	pulumi.Input

	ToMetricAlertActionOutput() MetricAlertActionOutput
	ToMetricAlertActionOutputWithContext(context.Context) MetricAlertActionOutput
}

// An alert action.
type MetricAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return i.ToMetricAlertActionOutputWithContext(context.Background())
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionOutput)
}

// MetricAlertActionArrayInput is an input type that accepts MetricAlertActionArray and MetricAlertActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionArrayInput` via:
//
//	MetricAlertActionArray{ MetricAlertActionArgs{...} }
type MetricAlertActionArrayInput interface {
	pulumi.Input

	ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput
	ToMetricAlertActionArrayOutputWithContext(context.Context) MetricAlertActionArrayOutput
}

type MetricAlertActionArray []MetricAlertActionInput

func (MetricAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return i.ToMetricAlertActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionArrayOutput)
}

// An alert action.
type MetricAlertActionOutput struct{ *pulumi.OutputState }

func (MetricAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
func (o MetricAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) Index(i pulumi.IntInput) MetricAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertAction {
		return vs[0].([]MetricAlertAction)[vs[1].(int)]
	}).(MetricAlertActionOutput)
}

// An alert action.
type MetricAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// An alert action.
type MetricAlertActionResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return o
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
func (o MetricAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) Index(i pulumi.IntInput) MetricAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertActionResponse {
		return vs[0].([]MetricAlertActionResponse)[vs[1].(int)]
	}).(MetricAlertActionResponseOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteria struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponse struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteria struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteria `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponse struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteriaResponse `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Criterion to filter metrics.
type MetricCriteria struct {
	// Specifies the type of threshold criteria
	// Expected value is 'StaticThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// Criterion to filter metrics.
type MetricCriteriaResponse struct {
	// Specifies the type of threshold criteria
	// Expected value is 'StaticThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// Specifies a metric dimension.
type MetricDimension struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// Specifies a metric dimension.
type MetricDimensionResponse struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteria struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponse struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

func init() {
	pulumi.RegisterOutputType(MetricAlertActionOutput{})
	pulumi.RegisterOutputType(MetricAlertActionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseArrayOutput{})
}
