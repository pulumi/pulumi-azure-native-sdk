// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230311

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure Data Explorer (Adx) destination.
type AdxDestination struct {
	// The name of the database to which data will be ingested.
	DatabaseName *string `pulumi:"databaseName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The ARM resource id of the Adx resource.
	ResourceId *string `pulumi:"resourceId"`
}

// AdxDestinationInput is an input type that accepts AdxDestinationArgs and AdxDestinationOutput values.
// You can construct a concrete instance of `AdxDestinationInput` via:
//
//	AdxDestinationArgs{...}
type AdxDestinationInput interface {
	pulumi.Input

	ToAdxDestinationOutput() AdxDestinationOutput
	ToAdxDestinationOutputWithContext(context.Context) AdxDestinationOutput
}

// Azure Data Explorer (Adx) destination.
type AdxDestinationArgs struct {
	// The name of the database to which data will be ingested.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ARM resource id of the Adx resource.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (AdxDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdxDestination)(nil)).Elem()
}

func (i AdxDestinationArgs) ToAdxDestinationOutput() AdxDestinationOutput {
	return i.ToAdxDestinationOutputWithContext(context.Background())
}

func (i AdxDestinationArgs) ToAdxDestinationOutputWithContext(ctx context.Context) AdxDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdxDestinationOutput)
}

// AdxDestinationArrayInput is an input type that accepts AdxDestinationArray and AdxDestinationArrayOutput values.
// You can construct a concrete instance of `AdxDestinationArrayInput` via:
//
//	AdxDestinationArray{ AdxDestinationArgs{...} }
type AdxDestinationArrayInput interface {
	pulumi.Input

	ToAdxDestinationArrayOutput() AdxDestinationArrayOutput
	ToAdxDestinationArrayOutputWithContext(context.Context) AdxDestinationArrayOutput
}

type AdxDestinationArray []AdxDestinationInput

func (AdxDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdxDestination)(nil)).Elem()
}

func (i AdxDestinationArray) ToAdxDestinationArrayOutput() AdxDestinationArrayOutput {
	return i.ToAdxDestinationArrayOutputWithContext(context.Background())
}

func (i AdxDestinationArray) ToAdxDestinationArrayOutputWithContext(ctx context.Context) AdxDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdxDestinationArrayOutput)
}

// Azure Data Explorer (Adx) destination.
type AdxDestinationOutput struct{ *pulumi.OutputState }

func (AdxDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdxDestination)(nil)).Elem()
}

func (o AdxDestinationOutput) ToAdxDestinationOutput() AdxDestinationOutput {
	return o
}

func (o AdxDestinationOutput) ToAdxDestinationOutputWithContext(ctx context.Context) AdxDestinationOutput {
	return o
}

// The name of the database to which data will be ingested.
func (o AdxDestinationOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestination) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o AdxDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ARM resource id of the Adx resource.
func (o AdxDestinationOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestination) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AdxDestinationArrayOutput struct{ *pulumi.OutputState }

func (AdxDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdxDestination)(nil)).Elem()
}

func (o AdxDestinationArrayOutput) ToAdxDestinationArrayOutput() AdxDestinationArrayOutput {
	return o
}

func (o AdxDestinationArrayOutput) ToAdxDestinationArrayOutputWithContext(ctx context.Context) AdxDestinationArrayOutput {
	return o
}

func (o AdxDestinationArrayOutput) Index(i pulumi.IntInput) AdxDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdxDestination {
		return vs[0].([]AdxDestination)[vs[1].(int)]
	}).(AdxDestinationOutput)
}

// Azure Data Explorer (Adx) destination.
type AdxDestinationResponse struct {
	// The name of the database to which data will be ingested.
	DatabaseName *string `pulumi:"databaseName"`
	// The ingestion uri of the Adx resource.
	IngestionUri string `pulumi:"ingestionUri"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The ARM resource id of the Adx resource.
	ResourceId *string `pulumi:"resourceId"`
}

// Azure Data Explorer (Adx) destination.
type AdxDestinationResponseOutput struct{ *pulumi.OutputState }

func (AdxDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdxDestinationResponse)(nil)).Elem()
}

func (o AdxDestinationResponseOutput) ToAdxDestinationResponseOutput() AdxDestinationResponseOutput {
	return o
}

func (o AdxDestinationResponseOutput) ToAdxDestinationResponseOutputWithContext(ctx context.Context) AdxDestinationResponseOutput {
	return o
}

// The name of the database to which data will be ingested.
func (o AdxDestinationResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestinationResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The ingestion uri of the Adx resource.
func (o AdxDestinationResponseOutput) IngestionUri() pulumi.StringOutput {
	return o.ApplyT(func(v AdxDestinationResponse) string { return v.IngestionUri }).(pulumi.StringOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o AdxDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The ARM resource id of the Adx resource.
func (o AdxDestinationResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdxDestinationResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AdxDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (AdxDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdxDestinationResponse)(nil)).Elem()
}

func (o AdxDestinationResponseArrayOutput) ToAdxDestinationResponseArrayOutput() AdxDestinationResponseArrayOutput {
	return o
}

func (o AdxDestinationResponseArrayOutput) ToAdxDestinationResponseArrayOutputWithContext(ctx context.Context) AdxDestinationResponseArrayOutput {
	return o
}

func (o AdxDestinationResponseArrayOutput) Index(i pulumi.IntInput) AdxDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdxDestinationResponse {
		return vs[0].([]AdxDestinationResponse)[vs[1].(int)]
	}).(AdxDestinationResponseOutput)
}

// A setting used to control an agent behavior on a host machine
type AgentSetting struct {
	// The name of the setting.
	// Must be part of the list of supported settings
	Name *string `pulumi:"name"`
	// The value of the setting
	Value *string `pulumi:"value"`
}

// AgentSettingInput is an input type that accepts AgentSettingArgs and AgentSettingOutput values.
// You can construct a concrete instance of `AgentSettingInput` via:
//
//	AgentSettingArgs{...}
type AgentSettingInput interface {
	pulumi.Input

	ToAgentSettingOutput() AgentSettingOutput
	ToAgentSettingOutputWithContext(context.Context) AgentSettingOutput
}

// A setting used to control an agent behavior on a host machine
type AgentSettingArgs struct {
	// The name of the setting.
	// Must be part of the list of supported settings
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the setting
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AgentSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentSetting)(nil)).Elem()
}

func (i AgentSettingArgs) ToAgentSettingOutput() AgentSettingOutput {
	return i.ToAgentSettingOutputWithContext(context.Background())
}

func (i AgentSettingArgs) ToAgentSettingOutputWithContext(ctx context.Context) AgentSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentSettingOutput)
}

// AgentSettingArrayInput is an input type that accepts AgentSettingArray and AgentSettingArrayOutput values.
// You can construct a concrete instance of `AgentSettingArrayInput` via:
//
//	AgentSettingArray{ AgentSettingArgs{...} }
type AgentSettingArrayInput interface {
	pulumi.Input

	ToAgentSettingArrayOutput() AgentSettingArrayOutput
	ToAgentSettingArrayOutputWithContext(context.Context) AgentSettingArrayOutput
}

type AgentSettingArray []AgentSettingInput

func (AgentSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentSetting)(nil)).Elem()
}

func (i AgentSettingArray) ToAgentSettingArrayOutput() AgentSettingArrayOutput {
	return i.ToAgentSettingArrayOutputWithContext(context.Background())
}

func (i AgentSettingArray) ToAgentSettingArrayOutputWithContext(ctx context.Context) AgentSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentSettingArrayOutput)
}

// A setting used to control an agent behavior on a host machine
type AgentSettingOutput struct{ *pulumi.OutputState }

func (AgentSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentSetting)(nil)).Elem()
}

func (o AgentSettingOutput) ToAgentSettingOutput() AgentSettingOutput {
	return o
}

func (o AgentSettingOutput) ToAgentSettingOutputWithContext(ctx context.Context) AgentSettingOutput {
	return o
}

// The name of the setting.
// Must be part of the list of supported settings
func (o AgentSettingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentSetting) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the setting
func (o AgentSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AgentSettingArrayOutput struct{ *pulumi.OutputState }

func (AgentSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentSetting)(nil)).Elem()
}

func (o AgentSettingArrayOutput) ToAgentSettingArrayOutput() AgentSettingArrayOutput {
	return o
}

func (o AgentSettingArrayOutput) ToAgentSettingArrayOutputWithContext(ctx context.Context) AgentSettingArrayOutput {
	return o
}

func (o AgentSettingArrayOutput) Index(i pulumi.IntInput) AgentSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgentSetting {
		return vs[0].([]AgentSetting)[vs[1].(int)]
	}).(AgentSettingOutput)
}

// A setting used to control an agent behavior on a host machine
type AgentSettingResponse struct {
	// The name of the setting.
	// Must be part of the list of supported settings
	Name *string `pulumi:"name"`
	// The value of the setting
	Value *string `pulumi:"value"`
}

// A setting used to control an agent behavior on a host machine
type AgentSettingResponseOutput struct{ *pulumi.OutputState }

func (AgentSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentSettingResponse)(nil)).Elem()
}

func (o AgentSettingResponseOutput) ToAgentSettingResponseOutput() AgentSettingResponseOutput {
	return o
}

func (o AgentSettingResponseOutput) ToAgentSettingResponseOutputWithContext(ctx context.Context) AgentSettingResponseOutput {
	return o
}

// The name of the setting.
// Must be part of the list of supported settings
func (o AgentSettingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentSettingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the setting
func (o AgentSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AgentSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (AgentSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgentSettingResponse)(nil)).Elem()
}

func (o AgentSettingResponseArrayOutput) ToAgentSettingResponseArrayOutput() AgentSettingResponseArrayOutput {
	return o
}

func (o AgentSettingResponseArrayOutput) ToAgentSettingResponseArrayOutputWithContext(ctx context.Context) AgentSettingResponseArrayOutput {
	return o
}

func (o AgentSettingResponseArrayOutput) Index(i pulumi.IntInput) AgentSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgentSettingResponse {
		return vs[0].([]AgentSettingResponse)[vs[1].(int)]
	}).(AgentSettingResponseOutput)
}

// Definition of custom data column.
type ColumnDefinition struct {
	// The name of the column.
	Name *string `pulumi:"name"`
	// The type of the column data.
	Type *string `pulumi:"type"`
}

// ColumnDefinitionInput is an input type that accepts ColumnDefinitionArgs and ColumnDefinitionOutput values.
// You can construct a concrete instance of `ColumnDefinitionInput` via:
//
//	ColumnDefinitionArgs{...}
type ColumnDefinitionInput interface {
	pulumi.Input

	ToColumnDefinitionOutput() ColumnDefinitionOutput
	ToColumnDefinitionOutputWithContext(context.Context) ColumnDefinitionOutput
}

// Definition of custom data column.
type ColumnDefinitionArgs struct {
	// The name of the column.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the column data.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ColumnDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinition)(nil)).Elem()
}

func (i ColumnDefinitionArgs) ToColumnDefinitionOutput() ColumnDefinitionOutput {
	return i.ToColumnDefinitionOutputWithContext(context.Background())
}

func (i ColumnDefinitionArgs) ToColumnDefinitionOutputWithContext(ctx context.Context) ColumnDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnDefinitionOutput)
}

// ColumnDefinitionArrayInput is an input type that accepts ColumnDefinitionArray and ColumnDefinitionArrayOutput values.
// You can construct a concrete instance of `ColumnDefinitionArrayInput` via:
//
//	ColumnDefinitionArray{ ColumnDefinitionArgs{...} }
type ColumnDefinitionArrayInput interface {
	pulumi.Input

	ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput
	ToColumnDefinitionArrayOutputWithContext(context.Context) ColumnDefinitionArrayOutput
}

type ColumnDefinitionArray []ColumnDefinitionInput

func (ColumnDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinition)(nil)).Elem()
}

func (i ColumnDefinitionArray) ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput {
	return i.ToColumnDefinitionArrayOutputWithContext(context.Background())
}

func (i ColumnDefinitionArray) ToColumnDefinitionArrayOutputWithContext(ctx context.Context) ColumnDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnDefinitionArrayOutput)
}

// Definition of custom data column.
type ColumnDefinitionOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinition)(nil)).Elem()
}

func (o ColumnDefinitionOutput) ToColumnDefinitionOutput() ColumnDefinitionOutput {
	return o
}

func (o ColumnDefinitionOutput) ToColumnDefinitionOutputWithContext(ctx context.Context) ColumnDefinitionOutput {
	return o
}

// The name of the column.
func (o ColumnDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the column data.
func (o ColumnDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnDefinitionArrayOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinition)(nil)).Elem()
}

func (o ColumnDefinitionArrayOutput) ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput {
	return o
}

func (o ColumnDefinitionArrayOutput) ToColumnDefinitionArrayOutputWithContext(ctx context.Context) ColumnDefinitionArrayOutput {
	return o
}

func (o ColumnDefinitionArrayOutput) Index(i pulumi.IntInput) ColumnDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnDefinition {
		return vs[0].([]ColumnDefinition)[vs[1].(int)]
	}).(ColumnDefinitionOutput)
}

// Definition of custom data column.
type ColumnDefinitionResponse struct {
	// The name of the column.
	Name *string `pulumi:"name"`
	// The type of the column data.
	Type *string `pulumi:"type"`
}

// Definition of custom data column.
type ColumnDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinitionResponse)(nil)).Elem()
}

func (o ColumnDefinitionResponseOutput) ToColumnDefinitionResponseOutput() ColumnDefinitionResponseOutput {
	return o
}

func (o ColumnDefinitionResponseOutput) ToColumnDefinitionResponseOutputWithContext(ctx context.Context) ColumnDefinitionResponseOutput {
	return o
}

// The name of the column.
func (o ColumnDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the column data.
func (o ColumnDefinitionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinitionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinitionResponse)(nil)).Elem()
}

func (o ColumnDefinitionResponseArrayOutput) ToColumnDefinitionResponseArrayOutput() ColumnDefinitionResponseArrayOutput {
	return o
}

func (o ColumnDefinitionResponseArrayOutput) ToColumnDefinitionResponseArrayOutputWithContext(ctx context.Context) ColumnDefinitionResponseArrayOutput {
	return o
}

func (o ColumnDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ColumnDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnDefinitionResponse {
		return vs[0].([]ColumnDefinitionResponse)[vs[1].(int)]
	}).(ColumnDefinitionResponseOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAcls struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// DataCollectionEndpointNetworkAclsInput is an input type that accepts DataCollectionEndpointNetworkAclsArgs and DataCollectionEndpointNetworkAclsOutput values.
// You can construct a concrete instance of `DataCollectionEndpointNetworkAclsInput` via:
//
//	DataCollectionEndpointNetworkAclsArgs{...}
type DataCollectionEndpointNetworkAclsInput interface {
	pulumi.Input

	ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput
	ToDataCollectionEndpointNetworkAclsOutputWithContext(context.Context) DataCollectionEndpointNetworkAclsOutput
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAclsArgs struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
}

func (DataCollectionEndpointNetworkAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput {
	return i.ToDataCollectionEndpointNetworkAclsOutputWithContext(context.Background())
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsOutput)
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return i.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsOutput).ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx)
}

// DataCollectionEndpointNetworkAclsPtrInput is an input type that accepts DataCollectionEndpointNetworkAclsArgs, DataCollectionEndpointNetworkAclsPtr and DataCollectionEndpointNetworkAclsPtrOutput values.
// You can construct a concrete instance of `DataCollectionEndpointNetworkAclsPtrInput` via:
//
//	        DataCollectionEndpointNetworkAclsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionEndpointNetworkAclsPtrInput interface {
	pulumi.Input

	ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput
	ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Context) DataCollectionEndpointNetworkAclsPtrOutput
}

type dataCollectionEndpointNetworkAclsPtrType DataCollectionEndpointNetworkAclsArgs

func DataCollectionEndpointNetworkAclsPtr(v *DataCollectionEndpointNetworkAclsArgs) DataCollectionEndpointNetworkAclsPtrInput {
	return (*dataCollectionEndpointNetworkAclsPtrType)(v)
}

func (*dataCollectionEndpointNetworkAclsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (i *dataCollectionEndpointNetworkAclsPtrType) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return i.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionEndpointNetworkAclsPtrType) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsPtrOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAclsOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return o.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionEndpointNetworkAcls) *DataCollectionEndpointNetworkAcls {
		return &v
	}).(DataCollectionEndpointNetworkAclsPtrOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointNetworkAclsOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointNetworkAcls) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type DataCollectionEndpointNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) Elem() DataCollectionEndpointNetworkAclsOutput {
	return o.ApplyT(func(v *DataCollectionEndpointNetworkAcls) DataCollectionEndpointNetworkAcls {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointNetworkAcls
		return ret
	}).(DataCollectionEndpointNetworkAclsOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointNetworkAclsPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// DataCollectionEndpointResourceIdentityInput is an input type that accepts DataCollectionEndpointResourceIdentityArgs and DataCollectionEndpointResourceIdentityOutput values.
// You can construct a concrete instance of `DataCollectionEndpointResourceIdentityInput` via:
//
//	DataCollectionEndpointResourceIdentityArgs{...}
type DataCollectionEndpointResourceIdentityInput interface {
	pulumi.Input

	ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput
	ToDataCollectionEndpointResourceIdentityOutputWithContext(context.Context) DataCollectionEndpointResourceIdentityOutput
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (DataCollectionEndpointResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput {
	return i.ToDataCollectionEndpointResourceIdentityOutputWithContext(context.Background())
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityOutput)
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return i.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityOutput).ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx)
}

// DataCollectionEndpointResourceIdentityPtrInput is an input type that accepts DataCollectionEndpointResourceIdentityArgs, DataCollectionEndpointResourceIdentityPtr and DataCollectionEndpointResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DataCollectionEndpointResourceIdentityPtrInput` via:
//
//	        DataCollectionEndpointResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DataCollectionEndpointResourceIdentityPtrInput interface {
	pulumi.Input

	ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput
	ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Context) DataCollectionEndpointResourceIdentityPtrOutput
}

type dataCollectionEndpointResourceIdentityPtrType DataCollectionEndpointResourceIdentityArgs

func DataCollectionEndpointResourceIdentityPtr(v *DataCollectionEndpointResourceIdentityArgs) DataCollectionEndpointResourceIdentityPtrInput {
	return (*dataCollectionEndpointResourceIdentityPtrType)(v)
}

func (*dataCollectionEndpointResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (i *dataCollectionEndpointResourceIdentityPtrType) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return i.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *dataCollectionEndpointResourceIdentityPtrType) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return o.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionEndpointResourceIdentity) *DataCollectionEndpointResourceIdentity {
		return &v
	}).(DataCollectionEndpointResourceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type DataCollectionEndpointResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) Elem() DataCollectionEndpointResourceIdentityOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) DataCollectionEndpointResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResourceIdentity
		return ret
	}).(DataCollectionEndpointResourceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceResponseIdentity struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceResponseIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseIdentityOutput) ToDataCollectionEndpointResourceResponseIdentityOutput() DataCollectionEndpointResourceResponseIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityOutput) ToDataCollectionEndpointResourceResponseIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseIdentityOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type DataCollectionEndpointResourceResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) ToDataCollectionEndpointResourceResponseIdentityPtrOutput() DataCollectionEndpointResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) ToDataCollectionEndpointResourceResponseIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) Elem() DataCollectionEndpointResourceResponseIdentityOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) DataCollectionEndpointResourceResponseIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResourceResponseIdentity
		return ret
	}).(DataCollectionEndpointResourceResponseIdentityOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionEndpointResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionEndpointResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseSystemDataOutput) ToDataCollectionEndpointResourceResponseSystemDataOutput() DataCollectionEndpointResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseSystemDataOutput) ToDataCollectionEndpointResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The endpoint used by clients to access their configuration.
type DataCollectionEndpointResponseConfigurationAccess struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to access their configuration.
type DataCollectionEndpointResponseConfigurationAccessOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseConfigurationAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseConfigurationAccess)(nil)).Elem()
}

func (o DataCollectionEndpointResponseConfigurationAccessOutput) ToDataCollectionEndpointResponseConfigurationAccessOutput() DataCollectionEndpointResponseConfigurationAccessOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessOutput) ToDataCollectionEndpointResponseConfigurationAccessOutputWithContext(ctx context.Context) DataCollectionEndpointResponseConfigurationAccessOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseConfigurationAccessOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseConfigurationAccess) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseConfigurationAccessPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseConfigurationAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseConfigurationAccess)(nil)).Elem()
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) ToDataCollectionEndpointResponseConfigurationAccessPtrOutput() DataCollectionEndpointResponseConfigurationAccessPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) ToDataCollectionEndpointResponseConfigurationAccessPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseConfigurationAccessPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) Elem() DataCollectionEndpointResponseConfigurationAccessOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseConfigurationAccess) DataCollectionEndpointResponseConfigurationAccess {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseConfigurationAccess
		return ret
	}).(DataCollectionEndpointResponseConfigurationAccessOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseConfigurationAccess) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Failover configuration on this endpoint. This property is READ-ONLY.
type DataCollectionEndpointResponseFailoverConfiguration struct {
	// Active location where data flow will occur.
	ActiveLocation *string `pulumi:"activeLocation"`
	// Locations that are configured for failover.
	Locations []LocationSpecResponse `pulumi:"locations"`
}

// Failover configuration on this endpoint. This property is READ-ONLY.
type DataCollectionEndpointResponseFailoverConfigurationOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseFailoverConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseFailoverConfiguration)(nil)).Elem()
}

func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ToDataCollectionEndpointResponseFailoverConfigurationOutput() DataCollectionEndpointResponseFailoverConfigurationOutput {
	return o
}

func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ToDataCollectionEndpointResponseFailoverConfigurationOutputWithContext(ctx context.Context) DataCollectionEndpointResponseFailoverConfigurationOutput {
	return o
}

// Active location where data flow will occur.
func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ActiveLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseFailoverConfiguration) *string { return v.ActiveLocation }).(pulumi.StringPtrOutput)
}

// Locations that are configured for failover.
func (o DataCollectionEndpointResponseFailoverConfigurationOutput) Locations() LocationSpecResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseFailoverConfiguration) []LocationSpecResponse { return v.Locations }).(LocationSpecResponseArrayOutput)
}

// The endpoint used by clients to ingest logs.
type DataCollectionEndpointResponseLogsIngestion struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to ingest logs.
type DataCollectionEndpointResponseLogsIngestionOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseLogsIngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseLogsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseLogsIngestionOutput) ToDataCollectionEndpointResponseLogsIngestionOutput() DataCollectionEndpointResponseLogsIngestionOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionOutput) ToDataCollectionEndpointResponseLogsIngestionOutputWithContext(ctx context.Context) DataCollectionEndpointResponseLogsIngestionOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseLogsIngestionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseLogsIngestion) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseLogsIngestionPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseLogsIngestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseLogsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) ToDataCollectionEndpointResponseLogsIngestionPtrOutput() DataCollectionEndpointResponseLogsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) ToDataCollectionEndpointResponseLogsIngestionPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseLogsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) Elem() DataCollectionEndpointResponseLogsIngestionOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseLogsIngestion) DataCollectionEndpointResponseLogsIngestion {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseLogsIngestion
		return ret
	}).(DataCollectionEndpointResponseLogsIngestionOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseLogsIngestion) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Metadata for the resource. This property is READ-ONLY.
type DataCollectionEndpointResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Immutable Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByImmutableId string `pulumi:"provisionedByImmutableId"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata for the resource. This property is READ-ONLY.
type DataCollectionEndpointResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseMetadata)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetadataOutput) ToDataCollectionEndpointResponseMetadataOutput() DataCollectionEndpointResponseMetadataOutput {
	return o
}

func (o DataCollectionEndpointResponseMetadataOutput) ToDataCollectionEndpointResponseMetadataOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionEndpointResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Immutable Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionEndpointResponseMetadataOutput) ProvisionedByImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetadata) string { return v.ProvisionedByImmutableId }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionEndpointResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// The endpoint used by clients to ingest metrics.
type DataCollectionEndpointResponseMetricsIngestion struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to ingest metrics.
type DataCollectionEndpointResponseMetricsIngestionOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetricsIngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseMetricsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetricsIngestionOutput) ToDataCollectionEndpointResponseMetricsIngestionOutput() DataCollectionEndpointResponseMetricsIngestionOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionOutput) ToDataCollectionEndpointResponseMetricsIngestionOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetricsIngestionOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseMetricsIngestionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetricsIngestion) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseMetricsIngestionPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetricsIngestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseMetricsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) ToDataCollectionEndpointResponseMetricsIngestionPtrOutput() DataCollectionEndpointResponseMetricsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) ToDataCollectionEndpointResponseMetricsIngestionPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetricsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) Elem() DataCollectionEndpointResponseMetricsIngestionOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseMetricsIngestion) DataCollectionEndpointResponseMetricsIngestion {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseMetricsIngestion
		return ret
	}).(DataCollectionEndpointResponseMetricsIngestionOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseMetricsIngestion) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointResponseNetworkAcls struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// Network access control rules for the endpoints.
type DataCollectionEndpointResponseNetworkAclsOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointResponseNetworkAclsOutput) ToDataCollectionEndpointResponseNetworkAclsOutput() DataCollectionEndpointResponseNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsOutput) ToDataCollectionEndpointResponseNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointResponseNetworkAclsOutput {
	return o
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointResponseNetworkAclsOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseNetworkAcls) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type DataCollectionEndpointResponseNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) ToDataCollectionEndpointResponseNetworkAclsPtrOutput() DataCollectionEndpointResponseNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) ToDataCollectionEndpointResponseNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) Elem() DataCollectionEndpointResponseNetworkAclsOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseNetworkAcls) DataCollectionEndpointResponseNetworkAcls {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseNetworkAcls
		return ret
	}).(DataCollectionEndpointResponseNetworkAclsOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Agent settings used to modify agent behavior on a given host
type DataCollectionRuleAgentSettings struct {
	// All the settings that are applicable to the logs agent (AMA)
	Logs []AgentSetting `pulumi:"logs"`
}

// DataCollectionRuleAgentSettingsInput is an input type that accepts DataCollectionRuleAgentSettingsArgs and DataCollectionRuleAgentSettingsOutput values.
// You can construct a concrete instance of `DataCollectionRuleAgentSettingsInput` via:
//
//	DataCollectionRuleAgentSettingsArgs{...}
type DataCollectionRuleAgentSettingsInput interface {
	pulumi.Input

	ToDataCollectionRuleAgentSettingsOutput() DataCollectionRuleAgentSettingsOutput
	ToDataCollectionRuleAgentSettingsOutputWithContext(context.Context) DataCollectionRuleAgentSettingsOutput
}

// Agent settings used to modify agent behavior on a given host
type DataCollectionRuleAgentSettingsArgs struct {
	// All the settings that are applicable to the logs agent (AMA)
	Logs AgentSettingArrayInput `pulumi:"logs"`
}

func (DataCollectionRuleAgentSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAgentSettings)(nil)).Elem()
}

func (i DataCollectionRuleAgentSettingsArgs) ToDataCollectionRuleAgentSettingsOutput() DataCollectionRuleAgentSettingsOutput {
	return i.ToDataCollectionRuleAgentSettingsOutputWithContext(context.Background())
}

func (i DataCollectionRuleAgentSettingsArgs) ToDataCollectionRuleAgentSettingsOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleAgentSettingsOutput)
}

func (i DataCollectionRuleAgentSettingsArgs) ToDataCollectionRuleAgentSettingsPtrOutput() DataCollectionRuleAgentSettingsPtrOutput {
	return i.ToDataCollectionRuleAgentSettingsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleAgentSettingsArgs) ToDataCollectionRuleAgentSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleAgentSettingsOutput).ToDataCollectionRuleAgentSettingsPtrOutputWithContext(ctx)
}

// DataCollectionRuleAgentSettingsPtrInput is an input type that accepts DataCollectionRuleAgentSettingsArgs, DataCollectionRuleAgentSettingsPtr and DataCollectionRuleAgentSettingsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleAgentSettingsPtrInput` via:
//
//	        DataCollectionRuleAgentSettingsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleAgentSettingsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleAgentSettingsPtrOutput() DataCollectionRuleAgentSettingsPtrOutput
	ToDataCollectionRuleAgentSettingsPtrOutputWithContext(context.Context) DataCollectionRuleAgentSettingsPtrOutput
}

type dataCollectionRuleAgentSettingsPtrType DataCollectionRuleAgentSettingsArgs

func DataCollectionRuleAgentSettingsPtr(v *DataCollectionRuleAgentSettingsArgs) DataCollectionRuleAgentSettingsPtrInput {
	return (*dataCollectionRuleAgentSettingsPtrType)(v)
}

func (*dataCollectionRuleAgentSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleAgentSettings)(nil)).Elem()
}

func (i *dataCollectionRuleAgentSettingsPtrType) ToDataCollectionRuleAgentSettingsPtrOutput() DataCollectionRuleAgentSettingsPtrOutput {
	return i.ToDataCollectionRuleAgentSettingsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleAgentSettingsPtrType) ToDataCollectionRuleAgentSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleAgentSettingsPtrOutput)
}

// Agent settings used to modify agent behavior on a given host
type DataCollectionRuleAgentSettingsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAgentSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAgentSettings)(nil)).Elem()
}

func (o DataCollectionRuleAgentSettingsOutput) ToDataCollectionRuleAgentSettingsOutput() DataCollectionRuleAgentSettingsOutput {
	return o
}

func (o DataCollectionRuleAgentSettingsOutput) ToDataCollectionRuleAgentSettingsOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsOutput {
	return o
}

func (o DataCollectionRuleAgentSettingsOutput) ToDataCollectionRuleAgentSettingsPtrOutput() DataCollectionRuleAgentSettingsPtrOutput {
	return o.ToDataCollectionRuleAgentSettingsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleAgentSettingsOutput) ToDataCollectionRuleAgentSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleAgentSettings) *DataCollectionRuleAgentSettings {
		return &v
	}).(DataCollectionRuleAgentSettingsPtrOutput)
}

// All the settings that are applicable to the logs agent (AMA)
func (o DataCollectionRuleAgentSettingsOutput) Logs() AgentSettingArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleAgentSettings) []AgentSetting { return v.Logs }).(AgentSettingArrayOutput)
}

type DataCollectionRuleAgentSettingsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAgentSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleAgentSettings)(nil)).Elem()
}

func (o DataCollectionRuleAgentSettingsPtrOutput) ToDataCollectionRuleAgentSettingsPtrOutput() DataCollectionRuleAgentSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleAgentSettingsPtrOutput) ToDataCollectionRuleAgentSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleAgentSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleAgentSettingsPtrOutput) Elem() DataCollectionRuleAgentSettingsOutput {
	return o.ApplyT(func(v *DataCollectionRuleAgentSettings) DataCollectionRuleAgentSettings {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleAgentSettings
		return ret
	}).(DataCollectionRuleAgentSettingsOutput)
}

// All the settings that are applicable to the logs agent (AMA)
func (o DataCollectionRuleAgentSettingsPtrOutput) Logs() AgentSettingArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleAgentSettings) []AgentSetting {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(AgentSettingArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ToDataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput() DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ToDataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// Metadata about the resource
type DataCollectionRuleAssociationResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Immutable Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByImmutableId string `pulumi:"provisionedByImmutableId"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata about the resource
type DataCollectionRuleAssociationResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAssociationResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAssociationResponseMetadata)(nil)).Elem()
}

func (o DataCollectionRuleAssociationResponseMetadataOutput) ToDataCollectionRuleAssociationResponseMetadataOutput() DataCollectionRuleAssociationResponseMetadataOutput {
	return o
}

func (o DataCollectionRuleAssociationResponseMetadataOutput) ToDataCollectionRuleAssociationResponseMetadataOutputWithContext(ctx context.Context) DataCollectionRuleAssociationResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleAssociationResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Immutable Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleAssociationResponseMetadataOutput) ProvisionedByImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationResponseMetadata) string { return v.ProvisionedByImmutableId }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleAssociationResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSources struct {
	// Specifications of pull based data sources
	DataImports *DataSourcesSpecDataImports `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSource `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs []IisLogsDataSource `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles []LogFilesDataSource `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSource `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry []PlatformTelemetryDataSource `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder []PrometheusForwarderDataSource `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSource `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSource `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs []WindowsFirewallLogsDataSource `pulumi:"windowsFirewallLogs"`
}

// DataCollectionRuleDataSourcesInput is an input type that accepts DataCollectionRuleDataSourcesArgs and DataCollectionRuleDataSourcesOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesInput` via:
//
//	DataCollectionRuleDataSourcesArgs{...}
type DataCollectionRuleDataSourcesInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput
	ToDataCollectionRuleDataSourcesOutputWithContext(context.Context) DataCollectionRuleDataSourcesOutput
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesArgs struct {
	// Specifications of pull based data sources
	DataImports DataSourcesSpecDataImportsPtrInput `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions ExtensionDataSourceArrayInput `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs IisLogsDataSourceArrayInput `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles LogFilesDataSourceArrayInput `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters PerfCounterDataSourceArrayInput `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry PlatformTelemetryDataSourceArrayInput `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder PrometheusForwarderDataSourceArrayInput `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog SyslogDataSourceArrayInput `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs WindowsEventLogDataSourceArrayInput `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs WindowsFirewallLogsDataSourceArrayInput `pulumi:"windowsFirewallLogs"`
}

func (DataCollectionRuleDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return i.ToDataCollectionRuleDataSourcesOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput)
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput).ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesPtrInput is an input type that accepts DataCollectionRuleDataSourcesArgs, DataCollectionRuleDataSourcesPtr and DataCollectionRuleDataSourcesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPtrInput` via:
//
//	        DataCollectionRuleDataSourcesArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput
	ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesPtrOutput
}

type dataCollectionRuleDataSourcesPtrType DataCollectionRuleDataSourcesArgs

func DataCollectionRuleDataSourcesPtr(v *DataCollectionRuleDataSourcesArgs) DataCollectionRuleDataSourcesPtrInput {
	return (*dataCollectionRuleDataSourcesPtrType)(v)
}

func (*dataCollectionRuleDataSourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPtrOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSources) *DataCollectionRuleDataSources {
		return &v
	}).(DataCollectionRuleDataSourcesPtrOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleDataSourcesOutput) DataImports() DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) *DataSourcesSpecDataImports { return v.DataImports }).(DataSourcesSpecDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []ExtensionDataSource { return v.Extensions }).(ExtensionDataSourceArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleDataSourcesOutput) IisLogs() IisLogsDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []IisLogsDataSource { return v.IisLogs }).(IisLogsDataSourceArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleDataSourcesOutput) LogFiles() LogFilesDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []LogFilesDataSource { return v.LogFiles }).(LogFilesDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PerfCounterDataSource { return v.PerformanceCounters }).(PerfCounterDataSourceArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleDataSourcesOutput) PlatformTelemetry() PlatformTelemetryDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PlatformTelemetryDataSource { return v.PlatformTelemetry }).(PlatformTelemetryDataSourceArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleDataSourcesOutput) PrometheusForwarder() PrometheusForwarderDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PrometheusForwarderDataSource { return v.PrometheusForwarder }).(PrometheusForwarderDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []SyslogDataSource { return v.Syslog }).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []WindowsEventLogDataSource { return v.WindowsEventLogs }).(WindowsEventLogDataSourceArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleDataSourcesOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []WindowsFirewallLogsDataSource { return v.WindowsFirewallLogs }).(WindowsFirewallLogsDataSourceArrayOutput)
}

type DataCollectionRuleDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) Elem() DataCollectionRuleDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) DataCollectionRuleDataSources {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSources
		return ret
	}).(DataCollectionRuleDataSourcesOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleDataSourcesPtrOutput) DataImports() DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) *DataSourcesSpecDataImports {
		if v == nil {
			return nil
		}
		return v.DataImports
	}).(DataSourcesSpecDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []ExtensionDataSource {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) IisLogs() IisLogsDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []IisLogsDataSource {
		if v == nil {
			return nil
		}
		return v.IisLogs
	}).(IisLogsDataSourceArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) LogFiles() LogFilesDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []LogFilesDataSource {
		if v == nil {
			return nil
		}
		return v.LogFiles
	}).(LogFilesDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PerfCounterDataSource {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleDataSourcesPtrOutput) PlatformTelemetry() PlatformTelemetryDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PlatformTelemetryDataSource {
		if v == nil {
			return nil
		}
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) PrometheusForwarder() PrometheusForwarderDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PrometheusForwarderDataSource {
		if v == nil {
			return nil
		}
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []SyslogDataSource {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []WindowsEventLogDataSource {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []WindowsFirewallLogsDataSource {
		if v == nil {
			return nil
		}
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinations struct {
	// List of Azure Data Explorer destinations.
	AzureDataExplorer []AdxDestination `pulumi:"azureDataExplorer"`
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs []EventHubDestination `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect []EventHubDirectDestination `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestination `pulumi:"logAnalytics"`
	// List of Microsoft Fabric destinations.
	MicrosoftFabric []MicrosoftFabricDestination `pulumi:"microsoftFabric"`
	// List of monitoring account destinations.
	MonitoringAccounts []MonitoringAccountDestination `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts []StorageBlobDestination `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect []StorageBlobDestination `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect []StorageTableDestination `pulumi:"storageTablesDirect"`
}

// DataCollectionRuleDestinationsInput is an input type that accepts DataCollectionRuleDestinationsArgs and DataCollectionRuleDestinationsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsInput` via:
//
//	DataCollectionRuleDestinationsArgs{...}
type DataCollectionRuleDestinationsInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput
	ToDataCollectionRuleDestinationsOutputWithContext(context.Context) DataCollectionRuleDestinationsOutput
}

// The specification of destinations.
type DataCollectionRuleDestinationsArgs struct {
	// List of Azure Data Explorer destinations.
	AzureDataExplorer AdxDestinationArrayInput `pulumi:"azureDataExplorer"`
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics DestinationsSpecAzureMonitorMetricsPtrInput `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs EventHubDestinationArrayInput `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect EventHubDirectDestinationArrayInput `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics LogAnalyticsDestinationArrayInput `pulumi:"logAnalytics"`
	// List of Microsoft Fabric destinations.
	MicrosoftFabric MicrosoftFabricDestinationArrayInput `pulumi:"microsoftFabric"`
	// List of monitoring account destinations.
	MonitoringAccounts MonitoringAccountDestinationArrayInput `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts StorageBlobDestinationArrayInput `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect StorageBlobDestinationArrayInput `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect StorageTableDestinationArrayInput `pulumi:"storageTablesDirect"`
}

func (DataCollectionRuleDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return i.ToDataCollectionRuleDestinationsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput)
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput).ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsPtrInput is an input type that accepts DataCollectionRuleDestinationsArgs, DataCollectionRuleDestinationsPtr and DataCollectionRuleDestinationsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsPtrInput` via:
//
//	        DataCollectionRuleDestinationsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput
	ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsPtrOutput
}

type dataCollectionRuleDestinationsPtrType DataCollectionRuleDestinationsArgs

func DataCollectionRuleDestinationsPtr(v *DataCollectionRuleDestinationsArgs) DataCollectionRuleDestinationsPtrInput {
	return (*dataCollectionRuleDestinationsPtrType)(v)
}

func (*dataCollectionRuleDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsPtrOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinations) *DataCollectionRuleDestinations {
		return &v
	}).(DataCollectionRuleDestinationsPtrOutput)
}

// List of Azure Data Explorer destinations.
func (o DataCollectionRuleDestinationsOutput) AzureDataExplorer() AdxDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []AdxDestination { return v.AzureDataExplorer }).(AdxDestinationArrayOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleDestinationsOutput) EventHubs() EventHubDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []EventHubDestination { return v.EventHubs }).(EventHubDestinationArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleDestinationsOutput) EventHubsDirect() EventHubDirectDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []EventHubDirectDestination { return v.EventHubsDirect }).(EventHubDirectDestinationArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []LogAnalyticsDestination { return v.LogAnalytics }).(LogAnalyticsDestinationArrayOutput)
}

// List of Microsoft Fabric destinations.
func (o DataCollectionRuleDestinationsOutput) MicrosoftFabric() MicrosoftFabricDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []MicrosoftFabricDestination { return v.MicrosoftFabric }).(MicrosoftFabricDestinationArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleDestinationsOutput) MonitoringAccounts() MonitoringAccountDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []MonitoringAccountDestination { return v.MonitoringAccounts }).(MonitoringAccountDestinationArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleDestinationsOutput) StorageAccounts() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageBlobDestination { return v.StorageAccounts }).(StorageBlobDestinationArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleDestinationsOutput) StorageBlobsDirect() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageBlobDestination { return v.StorageBlobsDirect }).(StorageBlobDestinationArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleDestinationsOutput) StorageTablesDirect() StorageTableDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageTableDestination { return v.StorageTablesDirect }).(StorageTableDestinationArrayOutput)
}

type DataCollectionRuleDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) Elem() DataCollectionRuleDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) DataCollectionRuleDestinations {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinations
		return ret
	}).(DataCollectionRuleDestinationsOutput)
}

// List of Azure Data Explorer destinations.
func (o DataCollectionRuleDestinationsPtrOutput) AzureDataExplorer() AdxDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []AdxDestination {
		if v == nil {
			return nil
		}
		return v.AzureDataExplorer
	}).(AdxDestinationArrayOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleDestinationsPtrOutput) EventHubs() EventHubDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []EventHubDestination {
		if v == nil {
			return nil
		}
		return v.EventHubs
	}).(EventHubDestinationArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleDestinationsPtrOutput) EventHubsDirect() EventHubDirectDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []EventHubDirectDestination {
		if v == nil {
			return nil
		}
		return v.EventHubsDirect
	}).(EventHubDirectDestinationArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []LogAnalyticsDestination {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationArrayOutput)
}

// List of Microsoft Fabric destinations.
func (o DataCollectionRuleDestinationsPtrOutput) MicrosoftFabric() MicrosoftFabricDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []MicrosoftFabricDestination {
		if v == nil {
			return nil
		}
		return v.MicrosoftFabric
	}).(MicrosoftFabricDestinationArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleDestinationsPtrOutput) MonitoringAccounts() MonitoringAccountDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []MonitoringAccountDestination {
		if v == nil {
			return nil
		}
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleDestinationsPtrOutput) StorageAccounts() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageBlobDestination {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageBlobDestinationArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleDestinationsPtrOutput) StorageBlobsDirect() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageBlobDestination {
		if v == nil {
			return nil
		}
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleDestinationsPtrOutput) StorageTablesDirect() StorageTableDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageTableDestination {
		if v == nil {
			return nil
		}
		return v.StorageTablesDirect
	}).(StorageTableDestinationArrayOutput)
}

// Defines all the references that may be used in other sections of the DCR
type DataCollectionRuleReferences struct {
	// All the enrichment data sources referenced in data flows
	EnrichmentData *ReferencesSpecEnrichmentData `pulumi:"enrichmentData"`
}

// DataCollectionRuleReferencesInput is an input type that accepts DataCollectionRuleReferencesArgs and DataCollectionRuleReferencesOutput values.
// You can construct a concrete instance of `DataCollectionRuleReferencesInput` via:
//
//	DataCollectionRuleReferencesArgs{...}
type DataCollectionRuleReferencesInput interface {
	pulumi.Input

	ToDataCollectionRuleReferencesOutput() DataCollectionRuleReferencesOutput
	ToDataCollectionRuleReferencesOutputWithContext(context.Context) DataCollectionRuleReferencesOutput
}

// Defines all the references that may be used in other sections of the DCR
type DataCollectionRuleReferencesArgs struct {
	// All the enrichment data sources referenced in data flows
	EnrichmentData ReferencesSpecEnrichmentDataPtrInput `pulumi:"enrichmentData"`
}

func (DataCollectionRuleReferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleReferences)(nil)).Elem()
}

func (i DataCollectionRuleReferencesArgs) ToDataCollectionRuleReferencesOutput() DataCollectionRuleReferencesOutput {
	return i.ToDataCollectionRuleReferencesOutputWithContext(context.Background())
}

func (i DataCollectionRuleReferencesArgs) ToDataCollectionRuleReferencesOutputWithContext(ctx context.Context) DataCollectionRuleReferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleReferencesOutput)
}

func (i DataCollectionRuleReferencesArgs) ToDataCollectionRuleReferencesPtrOutput() DataCollectionRuleReferencesPtrOutput {
	return i.ToDataCollectionRuleReferencesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleReferencesArgs) ToDataCollectionRuleReferencesPtrOutputWithContext(ctx context.Context) DataCollectionRuleReferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleReferencesOutput).ToDataCollectionRuleReferencesPtrOutputWithContext(ctx)
}

// DataCollectionRuleReferencesPtrInput is an input type that accepts DataCollectionRuleReferencesArgs, DataCollectionRuleReferencesPtr and DataCollectionRuleReferencesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleReferencesPtrInput` via:
//
//	        DataCollectionRuleReferencesArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleReferencesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleReferencesPtrOutput() DataCollectionRuleReferencesPtrOutput
	ToDataCollectionRuleReferencesPtrOutputWithContext(context.Context) DataCollectionRuleReferencesPtrOutput
}

type dataCollectionRuleReferencesPtrType DataCollectionRuleReferencesArgs

func DataCollectionRuleReferencesPtr(v *DataCollectionRuleReferencesArgs) DataCollectionRuleReferencesPtrInput {
	return (*dataCollectionRuleReferencesPtrType)(v)
}

func (*dataCollectionRuleReferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleReferences)(nil)).Elem()
}

func (i *dataCollectionRuleReferencesPtrType) ToDataCollectionRuleReferencesPtrOutput() DataCollectionRuleReferencesPtrOutput {
	return i.ToDataCollectionRuleReferencesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleReferencesPtrType) ToDataCollectionRuleReferencesPtrOutputWithContext(ctx context.Context) DataCollectionRuleReferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleReferencesPtrOutput)
}

// Defines all the references that may be used in other sections of the DCR
type DataCollectionRuleReferencesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleReferences)(nil)).Elem()
}

func (o DataCollectionRuleReferencesOutput) ToDataCollectionRuleReferencesOutput() DataCollectionRuleReferencesOutput {
	return o
}

func (o DataCollectionRuleReferencesOutput) ToDataCollectionRuleReferencesOutputWithContext(ctx context.Context) DataCollectionRuleReferencesOutput {
	return o
}

func (o DataCollectionRuleReferencesOutput) ToDataCollectionRuleReferencesPtrOutput() DataCollectionRuleReferencesPtrOutput {
	return o.ToDataCollectionRuleReferencesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleReferencesOutput) ToDataCollectionRuleReferencesPtrOutputWithContext(ctx context.Context) DataCollectionRuleReferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleReferences) *DataCollectionRuleReferences {
		return &v
	}).(DataCollectionRuleReferencesPtrOutput)
}

// All the enrichment data sources referenced in data flows
func (o DataCollectionRuleReferencesOutput) EnrichmentData() ReferencesSpecEnrichmentDataPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleReferences) *ReferencesSpecEnrichmentData { return v.EnrichmentData }).(ReferencesSpecEnrichmentDataPtrOutput)
}

type DataCollectionRuleReferencesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleReferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleReferences)(nil)).Elem()
}

func (o DataCollectionRuleReferencesPtrOutput) ToDataCollectionRuleReferencesPtrOutput() DataCollectionRuleReferencesPtrOutput {
	return o
}

func (o DataCollectionRuleReferencesPtrOutput) ToDataCollectionRuleReferencesPtrOutputWithContext(ctx context.Context) DataCollectionRuleReferencesPtrOutput {
	return o
}

func (o DataCollectionRuleReferencesPtrOutput) Elem() DataCollectionRuleReferencesOutput {
	return o.ApplyT(func(v *DataCollectionRuleReferences) DataCollectionRuleReferences {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleReferences
		return ret
	}).(DataCollectionRuleReferencesOutput)
}

// All the enrichment data sources referenced in data flows
func (o DataCollectionRuleReferencesPtrOutput) EnrichmentData() ReferencesSpecEnrichmentDataPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleReferences) *ReferencesSpecEnrichmentData {
		if v == nil {
			return nil
		}
		return v.EnrichmentData
	}).(ReferencesSpecEnrichmentDataPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// DataCollectionRuleResourceIdentityInput is an input type that accepts DataCollectionRuleResourceIdentityArgs and DataCollectionRuleResourceIdentityOutput values.
// You can construct a concrete instance of `DataCollectionRuleResourceIdentityInput` via:
//
//	DataCollectionRuleResourceIdentityArgs{...}
type DataCollectionRuleResourceIdentityInput interface {
	pulumi.Input

	ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput
	ToDataCollectionRuleResourceIdentityOutputWithContext(context.Context) DataCollectionRuleResourceIdentityOutput
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (DataCollectionRuleResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput {
	return i.ToDataCollectionRuleResourceIdentityOutputWithContext(context.Background())
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityOutput)
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return i.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityOutput).ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx)
}

// DataCollectionRuleResourceIdentityPtrInput is an input type that accepts DataCollectionRuleResourceIdentityArgs, DataCollectionRuleResourceIdentityPtr and DataCollectionRuleResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleResourceIdentityPtrInput` via:
//
//	        DataCollectionRuleResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleResourceIdentityPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput
	ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Context) DataCollectionRuleResourceIdentityPtrOutput
}

type dataCollectionRuleResourceIdentityPtrType DataCollectionRuleResourceIdentityArgs

func DataCollectionRuleResourceIdentityPtr(v *DataCollectionRuleResourceIdentityArgs) DataCollectionRuleResourceIdentityPtrInput {
	return (*dataCollectionRuleResourceIdentityPtrType)(v)
}

func (*dataCollectionRuleResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (i *dataCollectionRuleResourceIdentityPtrType) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return i.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleResourceIdentityPtrType) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return o.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleResourceIdentity) *DataCollectionRuleResourceIdentity {
		return &v
	}).(DataCollectionRuleResourceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceIdentityPtrOutput) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityPtrOutput) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityPtrOutput) Elem() DataCollectionRuleResourceIdentityOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) DataCollectionRuleResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResourceIdentity
		return ret
	}).(DataCollectionRuleResourceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceResponseIdentity struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity of the resource.
type DataCollectionRuleResourceResponseIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseIdentityOutput) ToDataCollectionRuleResourceResponseIdentityOutput() DataCollectionRuleResourceResponseIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityOutput) ToDataCollectionRuleResourceResponseIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseIdentityOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type DataCollectionRuleResourceResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) ToDataCollectionRuleResourceResponseIdentityPtrOutput() DataCollectionRuleResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) ToDataCollectionRuleResourceResponseIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) Elem() DataCollectionRuleResourceResponseIdentityOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) DataCollectionRuleResourceResponseIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResourceResponseIdentity
		return ret
	}).(DataCollectionRuleResourceResponseIdentityOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseSystemDataOutput) ToDataCollectionRuleResourceResponseSystemDataOutput() DataCollectionRuleResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionRuleResourceResponseSystemDataOutput) ToDataCollectionRuleResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Agent settings used to modify agent behavior on a given host
type DataCollectionRuleResponseAgentSettings struct {
	// All the settings that are applicable to the logs agent (AMA)
	Logs []AgentSettingResponse `pulumi:"logs"`
}

// Agent settings used to modify agent behavior on a given host
type DataCollectionRuleResponseAgentSettingsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseAgentSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseAgentSettings)(nil)).Elem()
}

func (o DataCollectionRuleResponseAgentSettingsOutput) ToDataCollectionRuleResponseAgentSettingsOutput() DataCollectionRuleResponseAgentSettingsOutput {
	return o
}

func (o DataCollectionRuleResponseAgentSettingsOutput) ToDataCollectionRuleResponseAgentSettingsOutputWithContext(ctx context.Context) DataCollectionRuleResponseAgentSettingsOutput {
	return o
}

// All the settings that are applicable to the logs agent (AMA)
func (o DataCollectionRuleResponseAgentSettingsOutput) Logs() AgentSettingResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseAgentSettings) []AgentSettingResponse { return v.Logs }).(AgentSettingResponseArrayOutput)
}

type DataCollectionRuleResponseAgentSettingsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseAgentSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseAgentSettings)(nil)).Elem()
}

func (o DataCollectionRuleResponseAgentSettingsPtrOutput) ToDataCollectionRuleResponseAgentSettingsPtrOutput() DataCollectionRuleResponseAgentSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseAgentSettingsPtrOutput) ToDataCollectionRuleResponseAgentSettingsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseAgentSettingsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseAgentSettingsPtrOutput) Elem() DataCollectionRuleResponseAgentSettingsOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseAgentSettings) DataCollectionRuleResponseAgentSettings {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseAgentSettings
		return ret
	}).(DataCollectionRuleResponseAgentSettingsOutput)
}

// All the settings that are applicable to the logs agent (AMA)
func (o DataCollectionRuleResponseAgentSettingsPtrOutput) Logs() AgentSettingResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseAgentSettings) []AgentSettingResponse {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(AgentSettingResponseArrayOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSources struct {
	// Specifications of pull based data sources
	DataImports *DataSourcesSpecResponseDataImports `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSourceResponse `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs []IisLogsDataSourceResponse `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles []LogFilesDataSourceResponse `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSourceResponse `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry []PlatformTelemetryDataSourceResponse `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder []PrometheusForwarderDataSourceResponse `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSourceResponse `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSourceResponse `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs []WindowsFirewallLogsDataSourceResponse `pulumi:"windowsFirewallLogs"`
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutput() DataCollectionRuleResponseDataSourcesOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesOutput {
	return o
}

// Specifications of pull based data sources
func (o DataCollectionRuleResponseDataSourcesOutput) DataImports() DataSourcesSpecResponseDataImportsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) *DataSourcesSpecResponseDataImports {
		return v.DataImports
	}).(DataSourcesSpecResponseDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse { return v.Extensions }).(ExtensionDataSourceResponseArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) IisLogs() IisLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []IisLogsDataSourceResponse { return v.IisLogs }).(IisLogsDataSourceResponseArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) LogFiles() LogFilesDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []LogFilesDataSourceResponse { return v.LogFiles }).(LogFilesDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleResponseDataSourcesOutput) PlatformTelemetry() PlatformTelemetryDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PlatformTelemetryDataSourceResponse {
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceResponseArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) PrometheusForwarder() PrometheusForwarderDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PrometheusForwarderDataSourceResponse {
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse { return v.Syslog }).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []WindowsFirewallLogsDataSourceResponse {
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceResponseArrayOutput)
}

type DataCollectionRuleResponseDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) Elem() DataCollectionRuleResponseDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) DataCollectionRuleResponseDataSources {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseDataSources
		return ret
	}).(DataCollectionRuleResponseDataSourcesOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleResponseDataSourcesPtrOutput) DataImports() DataSourcesSpecResponseDataImportsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) *DataSourcesSpecResponseDataImports {
		if v == nil {
			return nil
		}
		return v.DataImports
	}).(DataSourcesSpecResponseDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceResponseArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) IisLogs() IisLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []IisLogsDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.IisLogs
	}).(IisLogsDataSourceResponseArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) LogFiles() LogFilesDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []LogFilesDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.LogFiles
	}).(LogFilesDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PlatformTelemetry() PlatformTelemetryDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PlatformTelemetryDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceResponseArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PrometheusForwarder() PrometheusForwarderDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PrometheusForwarderDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []WindowsFirewallLogsDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceResponseArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleResponseDestinations struct {
	// List of Azure Data Explorer destinations.
	AzureDataExplorer []AdxDestinationResponse `pulumi:"azureDataExplorer"`
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecResponseAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs []EventHubDestinationResponse `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect []EventHubDirectDestinationResponse `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestinationResponse `pulumi:"logAnalytics"`
	// List of Microsoft Fabric destinations.
	MicrosoftFabric []MicrosoftFabricDestinationResponse `pulumi:"microsoftFabric"`
	// List of monitoring account destinations.
	MonitoringAccounts []MonitoringAccountDestinationResponse `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts []StorageBlobDestinationResponse `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect []StorageBlobDestinationResponse `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect []StorageTableDestinationResponse `pulumi:"storageTablesDirect"`
}

// The specification of destinations.
type DataCollectionRuleResponseDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutput() DataCollectionRuleResponseDestinationsOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsOutput {
	return o
}

// List of Azure Data Explorer destinations.
func (o DataCollectionRuleResponseDestinationsOutput) AzureDataExplorer() AdxDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []AdxDestinationResponse { return v.AzureDataExplorer }).(AdxDestinationResponseArrayOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleResponseDestinationsOutput) EventHubs() EventHubDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []EventHubDestinationResponse { return v.EventHubs }).(EventHubDestinationResponseArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleResponseDestinationsOutput) EventHubsDirect() EventHubDirectDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []EventHubDirectDestinationResponse {
		return v.EventHubsDirect
	}).(EventHubDirectDestinationResponseArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

// List of Microsoft Fabric destinations.
func (o DataCollectionRuleResponseDestinationsOutput) MicrosoftFabric() MicrosoftFabricDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []MicrosoftFabricDestinationResponse {
		return v.MicrosoftFabric
	}).(MicrosoftFabricDestinationResponseArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleResponseDestinationsOutput) MonitoringAccounts() MonitoringAccountDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []MonitoringAccountDestinationResponse {
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationResponseArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleResponseDestinationsOutput) StorageAccounts() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		return v.StorageAccounts
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleResponseDestinationsOutput) StorageBlobsDirect() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleResponseDestinationsOutput) StorageTablesDirect() StorageTableDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageTableDestinationResponse {
		return v.StorageTablesDirect
	}).(StorageTableDestinationResponseArrayOutput)
}

type DataCollectionRuleResponseDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) Elem() DataCollectionRuleResponseDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) DataCollectionRuleResponseDestinations {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseDestinations
		return ret
	}).(DataCollectionRuleResponseDestinationsOutput)
}

// List of Azure Data Explorer destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) AzureDataExplorer() AdxDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []AdxDestinationResponse {
		if v == nil {
			return nil
		}
		return v.AzureDataExplorer
	}).(AdxDestinationResponseArrayOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) EventHubs() EventHubDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []EventHubDestinationResponse {
		if v == nil {
			return nil
		}
		return v.EventHubs
	}).(EventHubDestinationResponseArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) EventHubsDirect() EventHubDirectDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []EventHubDirectDestinationResponse {
		if v == nil {
			return nil
		}
		return v.EventHubsDirect
	}).(EventHubDirectDestinationResponseArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

// List of Microsoft Fabric destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) MicrosoftFabric() MicrosoftFabricDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []MicrosoftFabricDestinationResponse {
		if v == nil {
			return nil
		}
		return v.MicrosoftFabric
	}).(MicrosoftFabricDestinationResponseArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) MonitoringAccounts() MonitoringAccountDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []MonitoringAccountDestinationResponse {
		if v == nil {
			return nil
		}
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationResponseArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageAccounts() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageBlobsDirect() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageTablesDirect() StorageTableDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageTableDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageTablesDirect
	}).(StorageTableDestinationResponseArrayOutput)
}

// Defines the ingestion endpoints to send data to via this rule.
type DataCollectionRuleResponseEndpoints struct {
	// The ingestion endpoint for logs
	LogsIngestion string `pulumi:"logsIngestion"`
	// The ingestion endpoint for metrics
	MetricsIngestion string `pulumi:"metricsIngestion"`
}

// Defines the ingestion endpoints to send data to via this rule.
type DataCollectionRuleResponseEndpointsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseEndpoints)(nil)).Elem()
}

func (o DataCollectionRuleResponseEndpointsOutput) ToDataCollectionRuleResponseEndpointsOutput() DataCollectionRuleResponseEndpointsOutput {
	return o
}

func (o DataCollectionRuleResponseEndpointsOutput) ToDataCollectionRuleResponseEndpointsOutputWithContext(ctx context.Context) DataCollectionRuleResponseEndpointsOutput {
	return o
}

// The ingestion endpoint for logs
func (o DataCollectionRuleResponseEndpointsOutput) LogsIngestion() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseEndpoints) string { return v.LogsIngestion }).(pulumi.StringOutput)
}

// The ingestion endpoint for metrics
func (o DataCollectionRuleResponseEndpointsOutput) MetricsIngestion() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseEndpoints) string { return v.MetricsIngestion }).(pulumi.StringOutput)
}

// Metadata about the resource
type DataCollectionRuleResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Immutable Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByImmutableId string `pulumi:"provisionedByImmutableId"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata about the resource
type DataCollectionRuleResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseMetadata)(nil)).Elem()
}

func (o DataCollectionRuleResponseMetadataOutput) ToDataCollectionRuleResponseMetadataOutput() DataCollectionRuleResponseMetadataOutput {
	return o
}

func (o DataCollectionRuleResponseMetadataOutput) ToDataCollectionRuleResponseMetadataOutputWithContext(ctx context.Context) DataCollectionRuleResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Immutable Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleResponseMetadataOutput) ProvisionedByImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseMetadata) string { return v.ProvisionedByImmutableId }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// Defines all the references that may be used in other sections of the DCR
type DataCollectionRuleResponseReferences struct {
	// All the enrichment data sources referenced in data flows
	EnrichmentData *ReferencesSpecResponseEnrichmentData `pulumi:"enrichmentData"`
}

// Defines all the references that may be used in other sections of the DCR
type DataCollectionRuleResponseReferencesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseReferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseReferences)(nil)).Elem()
}

func (o DataCollectionRuleResponseReferencesOutput) ToDataCollectionRuleResponseReferencesOutput() DataCollectionRuleResponseReferencesOutput {
	return o
}

func (o DataCollectionRuleResponseReferencesOutput) ToDataCollectionRuleResponseReferencesOutputWithContext(ctx context.Context) DataCollectionRuleResponseReferencesOutput {
	return o
}

// All the enrichment data sources referenced in data flows
func (o DataCollectionRuleResponseReferencesOutput) EnrichmentData() ReferencesSpecResponseEnrichmentDataPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseReferences) *ReferencesSpecResponseEnrichmentData {
		return v.EnrichmentData
	}).(ReferencesSpecResponseEnrichmentDataPtrOutput)
}

type DataCollectionRuleResponseReferencesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseReferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseReferences)(nil)).Elem()
}

func (o DataCollectionRuleResponseReferencesPtrOutput) ToDataCollectionRuleResponseReferencesPtrOutput() DataCollectionRuleResponseReferencesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseReferencesPtrOutput) ToDataCollectionRuleResponseReferencesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseReferencesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseReferencesPtrOutput) Elem() DataCollectionRuleResponseReferencesOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseReferences) DataCollectionRuleResponseReferences {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseReferences
		return ret
	}).(DataCollectionRuleResponseReferencesOutput)
}

// All the enrichment data sources referenced in data flows
func (o DataCollectionRuleResponseReferencesPtrOutput) EnrichmentData() ReferencesSpecResponseEnrichmentDataPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseReferences) *ReferencesSpecResponseEnrichmentData {
		if v == nil {
			return nil
		}
		return v.EnrichmentData
	}).(ReferencesSpecResponseEnrichmentDataPtrOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlow struct {
	// The builtIn transform to transform stream data
	BuiltInTransform *string `pulumi:"builtInTransform"`
	// Flag to enable overflow column in LA destinations
	CaptureOverflow *bool `pulumi:"captureOverflow"`
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream *string `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql *string `pulumi:"transformKql"`
}

// DataFlowInput is an input type that accepts DataFlowArgs and DataFlowOutput values.
// You can construct a concrete instance of `DataFlowInput` via:
//
//	DataFlowArgs{...}
type DataFlowInput interface {
	pulumi.Input

	ToDataFlowOutput() DataFlowOutput
	ToDataFlowOutputWithContext(context.Context) DataFlowOutput
}

// Definition of which streams are sent to which destinations.
type DataFlowArgs struct {
	// The builtIn transform to transform stream data
	BuiltInTransform pulumi.StringPtrInput `pulumi:"builtInTransform"`
	// Flag to enable overflow column in LA destinations
	CaptureOverflow pulumi.BoolPtrInput `pulumi:"captureOverflow"`
	// List of destinations for this data flow.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream pulumi.StringPtrInput `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (DataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (i DataFlowArgs) ToDataFlowOutput() DataFlowOutput {
	return i.ToDataFlowOutputWithContext(context.Background())
}

func (i DataFlowArgs) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowOutput)
}

// DataFlowArrayInput is an input type that accepts DataFlowArray and DataFlowArrayOutput values.
// You can construct a concrete instance of `DataFlowArrayInput` via:
//
//	DataFlowArray{ DataFlowArgs{...} }
type DataFlowArrayInput interface {
	pulumi.Input

	ToDataFlowArrayOutput() DataFlowArrayOutput
	ToDataFlowArrayOutputWithContext(context.Context) DataFlowArrayOutput
}

type DataFlowArray []DataFlowInput

func (DataFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (i DataFlowArray) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return i.ToDataFlowArrayOutputWithContext(context.Background())
}

func (i DataFlowArray) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowArrayOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowOutput struct{ *pulumi.OutputState }

func (DataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (o DataFlowOutput) ToDataFlowOutput() DataFlowOutput {
	return o
}

func (o DataFlowOutput) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return o
}

// The builtIn transform to transform stream data
func (o DataFlowOutput) BuiltInTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.BuiltInTransform }).(pulumi.StringPtrOutput)
}

// Flag to enable overflow column in LA destinations
func (o DataFlowOutput) CaptureOverflow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFlow) *bool { return v.CaptureOverflow }).(pulumi.BoolPtrOutput)
}

// List of destinations for this data flow.
func (o DataFlowOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the transform changes data to a different stream.
func (o DataFlowOutput) OutputStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.OutputStream }).(pulumi.StringPtrOutput)
}

// List of streams for this data flow.
func (o DataFlowOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o DataFlowOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type DataFlowArrayOutput struct{ *pulumi.OutputState }

func (DataFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) Index(i pulumi.IntInput) DataFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlow {
		return vs[0].([]DataFlow)[vs[1].(int)]
	}).(DataFlowOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowResponse struct {
	// The builtIn transform to transform stream data
	BuiltInTransform *string `pulumi:"builtInTransform"`
	// Flag to enable overflow column in LA destinations
	CaptureOverflow *bool `pulumi:"captureOverflow"`
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream *string `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql *string `pulumi:"transformKql"`
}

// Definition of which streams are sent to which destinations.
type DataFlowResponseOutput struct{ *pulumi.OutputState }

func (DataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return o
}

// The builtIn transform to transform stream data
func (o DataFlowResponseOutput) BuiltInTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.BuiltInTransform }).(pulumi.StringPtrOutput)
}

// Flag to enable overflow column in LA destinations
func (o DataFlowResponseOutput) CaptureOverflow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *bool { return v.CaptureOverflow }).(pulumi.BoolPtrOutput)
}

// List of destinations for this data flow.
func (o DataFlowResponseOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the transform changes data to a different stream.
func (o DataFlowResponseOutput) OutputStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.OutputStream }).(pulumi.StringPtrOutput)
}

// List of streams for this data flow.
func (o DataFlowResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o DataFlowResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type DataFlowResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutput() DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutputWithContext(ctx context.Context) DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) Index(i pulumi.IntInput) DataFlowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowResponse {
		return vs[0].([]DataFlowResponse)[vs[1].(int)]
	}).(DataFlowResponseOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHub struct {
	// Event Hub consumer group name
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The stream to collect from EventHub
	Stream *string `pulumi:"stream"`
}

// DataImportSourcesEventHubInput is an input type that accepts DataImportSourcesEventHubArgs and DataImportSourcesEventHubOutput values.
// You can construct a concrete instance of `DataImportSourcesEventHubInput` via:
//
//	DataImportSourcesEventHubArgs{...}
type DataImportSourcesEventHubInput interface {
	pulumi.Input

	ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput
	ToDataImportSourcesEventHubOutputWithContext(context.Context) DataImportSourcesEventHubOutput
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHubArgs struct {
	// Event Hub consumer group name
	ConsumerGroup pulumi.StringPtrInput `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The stream to collect from EventHub
	Stream pulumi.StringPtrInput `pulumi:"stream"`
}

func (DataImportSourcesEventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesEventHub)(nil)).Elem()
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput {
	return i.ToDataImportSourcesEventHubOutputWithContext(context.Background())
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubOutputWithContext(ctx context.Context) DataImportSourcesEventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubOutput)
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return i.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubOutput).ToDataImportSourcesEventHubPtrOutputWithContext(ctx)
}

// DataImportSourcesEventHubPtrInput is an input type that accepts DataImportSourcesEventHubArgs, DataImportSourcesEventHubPtr and DataImportSourcesEventHubPtrOutput values.
// You can construct a concrete instance of `DataImportSourcesEventHubPtrInput` via:
//
//	        DataImportSourcesEventHubArgs{...}
//
//	or:
//
//	        nil
type DataImportSourcesEventHubPtrInput interface {
	pulumi.Input

	ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput
	ToDataImportSourcesEventHubPtrOutputWithContext(context.Context) DataImportSourcesEventHubPtrOutput
}

type dataImportSourcesEventHubPtrType DataImportSourcesEventHubArgs

func DataImportSourcesEventHubPtr(v *DataImportSourcesEventHubArgs) DataImportSourcesEventHubPtrInput {
	return (*dataImportSourcesEventHubPtrType)(v)
}

func (*dataImportSourcesEventHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesEventHub)(nil)).Elem()
}

func (i *dataImportSourcesEventHubPtrType) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return i.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (i *dataImportSourcesEventHubPtrType) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubPtrOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHubOutput struct{ *pulumi.OutputState }

func (DataImportSourcesEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesEventHub)(nil)).Elem()
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput {
	return o
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubOutputWithContext(ctx context.Context) DataImportSourcesEventHubOutput {
	return o
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return o.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataImportSourcesEventHub) *DataImportSourcesEventHub {
		return &v
	}).(DataImportSourcesEventHubPtrOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesEventHubOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesEventHubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesEventHubOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.Stream }).(pulumi.StringPtrOutput)
}

type DataImportSourcesEventHubPtrOutput struct{ *pulumi.OutputState }

func (DataImportSourcesEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesEventHub)(nil)).Elem()
}

func (o DataImportSourcesEventHubPtrOutput) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return o
}

func (o DataImportSourcesEventHubPtrOutput) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return o
}

func (o DataImportSourcesEventHubPtrOutput) Elem() DataImportSourcesEventHubOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) DataImportSourcesEventHub {
		if v != nil {
			return *v
		}
		var ret DataImportSourcesEventHub
		return ret
	}).(DataImportSourcesEventHubOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesEventHubPtrOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroup
	}).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesEventHubPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Stream
	}).(pulumi.StringPtrOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesResponseEventHub struct {
	// Event Hub consumer group name
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The stream to collect from EventHub
	Stream *string `pulumi:"stream"`
}

// Definition of Event Hub configuration.
type DataImportSourcesResponseEventHubOutput struct{ *pulumi.OutputState }

func (DataImportSourcesResponseEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesResponseEventHub)(nil)).Elem()
}

func (o DataImportSourcesResponseEventHubOutput) ToDataImportSourcesResponseEventHubOutput() DataImportSourcesResponseEventHubOutput {
	return o
}

func (o DataImportSourcesResponseEventHubOutput) ToDataImportSourcesResponseEventHubOutputWithContext(ctx context.Context) DataImportSourcesResponseEventHubOutput {
	return o
}

// Event Hub consumer group name
func (o DataImportSourcesResponseEventHubOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesResponseEventHubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesResponseEventHubOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.Stream }).(pulumi.StringPtrOutput)
}

type DataImportSourcesResponseEventHubPtrOutput struct{ *pulumi.OutputState }

func (DataImportSourcesResponseEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesResponseEventHub)(nil)).Elem()
}

func (o DataImportSourcesResponseEventHubPtrOutput) ToDataImportSourcesResponseEventHubPtrOutput() DataImportSourcesResponseEventHubPtrOutput {
	return o
}

func (o DataImportSourcesResponseEventHubPtrOutput) ToDataImportSourcesResponseEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesResponseEventHubPtrOutput {
	return o
}

func (o DataImportSourcesResponseEventHubPtrOutput) Elem() DataImportSourcesResponseEventHubOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) DataImportSourcesResponseEventHub {
		if v != nil {
			return *v
		}
		var ret DataImportSourcesResponseEventHub
		return ret
	}).(DataImportSourcesResponseEventHubOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesResponseEventHubPtrOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroup
	}).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesResponseEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesResponseEventHubPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Stream
	}).(pulumi.StringPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecDataImports struct {
	// Definition of Event Hub configuration.
	EventHub *DataImportSourcesEventHub `pulumi:"eventHub"`
}

// DataSourcesSpecDataImportsInput is an input type that accepts DataSourcesSpecDataImportsArgs and DataSourcesSpecDataImportsOutput values.
// You can construct a concrete instance of `DataSourcesSpecDataImportsInput` via:
//
//	DataSourcesSpecDataImportsArgs{...}
type DataSourcesSpecDataImportsInput interface {
	pulumi.Input

	ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput
	ToDataSourcesSpecDataImportsOutputWithContext(context.Context) DataSourcesSpecDataImportsOutput
}

// Specifications of pull based data sources
type DataSourcesSpecDataImportsArgs struct {
	// Definition of Event Hub configuration.
	EventHub DataImportSourcesEventHubPtrInput `pulumi:"eventHub"`
}

func (DataSourcesSpecDataImportsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecDataImports)(nil)).Elem()
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput {
	return i.ToDataSourcesSpecDataImportsOutputWithContext(context.Background())
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsOutput)
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return i.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsOutput).ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx)
}

// DataSourcesSpecDataImportsPtrInput is an input type that accepts DataSourcesSpecDataImportsArgs, DataSourcesSpecDataImportsPtr and DataSourcesSpecDataImportsPtrOutput values.
// You can construct a concrete instance of `DataSourcesSpecDataImportsPtrInput` via:
//
//	        DataSourcesSpecDataImportsArgs{...}
//
//	or:
//
//	        nil
type DataSourcesSpecDataImportsPtrInput interface {
	pulumi.Input

	ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput
	ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Context) DataSourcesSpecDataImportsPtrOutput
}

type dataSourcesSpecDataImportsPtrType DataSourcesSpecDataImportsArgs

func DataSourcesSpecDataImportsPtr(v *DataSourcesSpecDataImportsArgs) DataSourcesSpecDataImportsPtrInput {
	return (*dataSourcesSpecDataImportsPtrType)(v)
}

func (*dataSourcesSpecDataImportsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecDataImports)(nil)).Elem()
}

func (i *dataSourcesSpecDataImportsPtrType) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return i.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (i *dataSourcesSpecDataImportsPtrType) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecDataImportsOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecDataImportsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecDataImports)(nil)).Elem()
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput {
	return o
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsOutput {
	return o
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return o.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcesSpecDataImports) *DataSourcesSpecDataImports {
		return &v
	}).(DataSourcesSpecDataImportsPtrOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecDataImportsOutput) EventHub() DataImportSourcesEventHubPtrOutput {
	return o.ApplyT(func(v DataSourcesSpecDataImports) *DataImportSourcesEventHub { return v.EventHub }).(DataImportSourcesEventHubPtrOutput)
}

type DataSourcesSpecDataImportsPtrOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecDataImportsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecDataImports)(nil)).Elem()
}

func (o DataSourcesSpecDataImportsPtrOutput) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecDataImportsPtrOutput) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecDataImportsPtrOutput) Elem() DataSourcesSpecDataImportsOutput {
	return o.ApplyT(func(v *DataSourcesSpecDataImports) DataSourcesSpecDataImports {
		if v != nil {
			return *v
		}
		var ret DataSourcesSpecDataImports
		return ret
	}).(DataSourcesSpecDataImportsOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecDataImportsPtrOutput) EventHub() DataImportSourcesEventHubPtrOutput {
	return o.ApplyT(func(v *DataSourcesSpecDataImports) *DataImportSourcesEventHub {
		if v == nil {
			return nil
		}
		return v.EventHub
	}).(DataImportSourcesEventHubPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecResponseDataImports struct {
	// Definition of Event Hub configuration.
	EventHub *DataImportSourcesResponseEventHub `pulumi:"eventHub"`
}

// Specifications of pull based data sources
type DataSourcesSpecResponseDataImportsOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecResponseDataImportsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecResponseDataImports)(nil)).Elem()
}

func (o DataSourcesSpecResponseDataImportsOutput) ToDataSourcesSpecResponseDataImportsOutput() DataSourcesSpecResponseDataImportsOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsOutput) ToDataSourcesSpecResponseDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecResponseDataImportsOutput {
	return o
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecResponseDataImportsOutput) EventHub() DataImportSourcesResponseEventHubPtrOutput {
	return o.ApplyT(func(v DataSourcesSpecResponseDataImports) *DataImportSourcesResponseEventHub { return v.EventHub }).(DataImportSourcesResponseEventHubPtrOutput)
}

type DataSourcesSpecResponseDataImportsPtrOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecResponseDataImportsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecResponseDataImports)(nil)).Elem()
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) ToDataSourcesSpecResponseDataImportsPtrOutput() DataSourcesSpecResponseDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) ToDataSourcesSpecResponseDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecResponseDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) Elem() DataSourcesSpecResponseDataImportsOutput {
	return o.ApplyT(func(v *DataSourcesSpecResponseDataImports) DataSourcesSpecResponseDataImports {
		if v != nil {
			return *v
		}
		var ret DataSourcesSpecResponseDataImports
		return ret
	}).(DataSourcesSpecResponseDataImportsOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecResponseDataImportsPtrOutput) EventHub() DataImportSourcesResponseEventHubPtrOutput {
	return o.ApplyT(func(v *DataSourcesSpecResponseDataImports) *DataImportSourcesResponseEventHub {
		if v == nil {
			return nil
		}
		return v.EventHub
	}).(DataImportSourcesResponseEventHubPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// DestinationsSpecAzureMonitorMetricsInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs and DestinationsSpecAzureMonitorMetricsOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsInput` via:
//
//	DestinationsSpecAzureMonitorMetricsArgs{...}
type DestinationsSpecAzureMonitorMetricsInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput
	ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsOutput
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DestinationsSpecAzureMonitorMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput)
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput).ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx)
}

// DestinationsSpecAzureMonitorMetricsPtrInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs, DestinationsSpecAzureMonitorMetricsPtr and DestinationsSpecAzureMonitorMetricsPtrOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsPtrInput` via:
//
//	        DestinationsSpecAzureMonitorMetricsArgs{...}
//
//	or:
//
//	        nil
type DestinationsSpecAzureMonitorMetricsPtrInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput
	ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput
}

type destinationsSpecAzureMonitorMetricsPtrType DestinationsSpecAzureMonitorMetricsArgs

func DestinationsSpecAzureMonitorMetricsPtr(v *DestinationsSpecAzureMonitorMetricsArgs) DestinationsSpecAzureMonitorMetricsPtrInput {
	return (*destinationsSpecAzureMonitorMetricsPtrType)(v)
}

func (*destinationsSpecAzureMonitorMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationsSpecAzureMonitorMetrics) *DestinationsSpecAzureMonitorMetrics {
		return &v
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationsSpecAzureMonitorMetrics) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DestinationsSpecAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) DestinationsSpecAzureMonitorMetrics {
		if v != nil {
			return *v
		}
		var ret DestinationsSpecAzureMonitorMetrics
		return ret
	}).(DestinationsSpecAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutput() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationsSpecResponseAzureMonitorMetrics) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DestinationsSpecResponseAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) DestinationsSpecResponseAzureMonitorMetrics {
		if v != nil {
			return *v
		}
		var ret DestinationsSpecResponseAzureMonitorMetrics
		return ret
	}).(DestinationsSpecResponseAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type EventHubDestination struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// EventHubDestinationInput is an input type that accepts EventHubDestinationArgs and EventHubDestinationOutput values.
// You can construct a concrete instance of `EventHubDestinationInput` via:
//
//	EventHubDestinationArgs{...}
type EventHubDestinationInput interface {
	pulumi.Input

	ToEventHubDestinationOutput() EventHubDestinationOutput
	ToEventHubDestinationOutputWithContext(context.Context) EventHubDestinationOutput
}

type EventHubDestinationArgs struct {
	// The resource ID of the event hub.
	EventHubResourceId pulumi.StringPtrInput `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventHubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestination)(nil)).Elem()
}

func (i EventHubDestinationArgs) ToEventHubDestinationOutput() EventHubDestinationOutput {
	return i.ToEventHubDestinationOutputWithContext(context.Background())
}

func (i EventHubDestinationArgs) ToEventHubDestinationOutputWithContext(ctx context.Context) EventHubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDestinationOutput)
}

// EventHubDestinationArrayInput is an input type that accepts EventHubDestinationArray and EventHubDestinationArrayOutput values.
// You can construct a concrete instance of `EventHubDestinationArrayInput` via:
//
//	EventHubDestinationArray{ EventHubDestinationArgs{...} }
type EventHubDestinationArrayInput interface {
	pulumi.Input

	ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput
	ToEventHubDestinationArrayOutputWithContext(context.Context) EventHubDestinationArrayOutput
}

type EventHubDestinationArray []EventHubDestinationInput

func (EventHubDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestination)(nil)).Elem()
}

func (i EventHubDestinationArray) ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput {
	return i.ToEventHubDestinationArrayOutputWithContext(context.Background())
}

func (i EventHubDestinationArray) ToEventHubDestinationArrayOutputWithContext(ctx context.Context) EventHubDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDestinationArrayOutput)
}

type EventHubDestinationOutput struct{ *pulumi.OutputState }

func (EventHubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestination)(nil)).Elem()
}

func (o EventHubDestinationOutput) ToEventHubDestinationOutput() EventHubDestinationOutput {
	return o
}

func (o EventHubDestinationOutput) ToEventHubDestinationOutputWithContext(ctx context.Context) EventHubDestinationOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDestinationOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestination) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventHubDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestination)(nil)).Elem()
}

func (o EventHubDestinationArrayOutput) ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput {
	return o
}

func (o EventHubDestinationArrayOutput) ToEventHubDestinationArrayOutputWithContext(ctx context.Context) EventHubDestinationArrayOutput {
	return o
}

func (o EventHubDestinationArrayOutput) Index(i pulumi.IntInput) EventHubDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDestination {
		return vs[0].([]EventHubDestination)[vs[1].(int)]
	}).(EventHubDestinationOutput)
}

type EventHubDestinationResponse struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

type EventHubDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestinationResponse)(nil)).Elem()
}

func (o EventHubDestinationResponseOutput) ToEventHubDestinationResponseOutput() EventHubDestinationResponseOutput {
	return o
}

func (o EventHubDestinationResponseOutput) ToEventHubDestinationResponseOutputWithContext(ctx context.Context) EventHubDestinationResponseOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDestinationResponseOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestinationResponse) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHubDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestinationResponse)(nil)).Elem()
}

func (o EventHubDestinationResponseArrayOutput) ToEventHubDestinationResponseArrayOutput() EventHubDestinationResponseArrayOutput {
	return o
}

func (o EventHubDestinationResponseArrayOutput) ToEventHubDestinationResponseArrayOutputWithContext(ctx context.Context) EventHubDestinationResponseArrayOutput {
	return o
}

func (o EventHubDestinationResponseArrayOutput) Index(i pulumi.IntInput) EventHubDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDestinationResponse {
		return vs[0].([]EventHubDestinationResponse)[vs[1].(int)]
	}).(EventHubDestinationResponseOutput)
}

type EventHubDirectDestination struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// EventHubDirectDestinationInput is an input type that accepts EventHubDirectDestinationArgs and EventHubDirectDestinationOutput values.
// You can construct a concrete instance of `EventHubDirectDestinationInput` via:
//
//	EventHubDirectDestinationArgs{...}
type EventHubDirectDestinationInput interface {
	pulumi.Input

	ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput
	ToEventHubDirectDestinationOutputWithContext(context.Context) EventHubDirectDestinationOutput
}

type EventHubDirectDestinationArgs struct {
	// The resource ID of the event hub.
	EventHubResourceId pulumi.StringPtrInput `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventHubDirectDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestination)(nil)).Elem()
}

func (i EventHubDirectDestinationArgs) ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput {
	return i.ToEventHubDirectDestinationOutputWithContext(context.Background())
}

func (i EventHubDirectDestinationArgs) ToEventHubDirectDestinationOutputWithContext(ctx context.Context) EventHubDirectDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDirectDestinationOutput)
}

// EventHubDirectDestinationArrayInput is an input type that accepts EventHubDirectDestinationArray and EventHubDirectDestinationArrayOutput values.
// You can construct a concrete instance of `EventHubDirectDestinationArrayInput` via:
//
//	EventHubDirectDestinationArray{ EventHubDirectDestinationArgs{...} }
type EventHubDirectDestinationArrayInput interface {
	pulumi.Input

	ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput
	ToEventHubDirectDestinationArrayOutputWithContext(context.Context) EventHubDirectDestinationArrayOutput
}

type EventHubDirectDestinationArray []EventHubDirectDestinationInput

func (EventHubDirectDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestination)(nil)).Elem()
}

func (i EventHubDirectDestinationArray) ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput {
	return i.ToEventHubDirectDestinationArrayOutputWithContext(context.Background())
}

func (i EventHubDirectDestinationArray) ToEventHubDirectDestinationArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDirectDestinationArrayOutput)
}

type EventHubDirectDestinationOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestination)(nil)).Elem()
}

func (o EventHubDirectDestinationOutput) ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput {
	return o
}

func (o EventHubDirectDestinationOutput) ToEventHubDirectDestinationOutputWithContext(ctx context.Context) EventHubDirectDestinationOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDirectDestinationOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestination) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDirectDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDirectDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestination)(nil)).Elem()
}

func (o EventHubDirectDestinationArrayOutput) ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput {
	return o
}

func (o EventHubDirectDestinationArrayOutput) ToEventHubDirectDestinationArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationArrayOutput {
	return o
}

func (o EventHubDirectDestinationArrayOutput) Index(i pulumi.IntInput) EventHubDirectDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDirectDestination {
		return vs[0].([]EventHubDirectDestination)[vs[1].(int)]
	}).(EventHubDirectDestinationOutput)
}

type EventHubDirectDestinationResponse struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

type EventHubDirectDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestinationResponse)(nil)).Elem()
}

func (o EventHubDirectDestinationResponseOutput) ToEventHubDirectDestinationResponseOutput() EventHubDirectDestinationResponseOutput {
	return o
}

func (o EventHubDirectDestinationResponseOutput) ToEventHubDirectDestinationResponseOutputWithContext(ctx context.Context) EventHubDirectDestinationResponseOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDirectDestinationResponseOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestinationResponse) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDirectDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDirectDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestinationResponse)(nil)).Elem()
}

func (o EventHubDirectDestinationResponseArrayOutput) ToEventHubDirectDestinationResponseArrayOutput() EventHubDirectDestinationResponseArrayOutput {
	return o
}

func (o EventHubDirectDestinationResponseArrayOutput) ToEventHubDirectDestinationResponseArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationResponseArrayOutput {
	return o
}

func (o EventHubDirectDestinationResponseArrayOutput) Index(i pulumi.IntInput) EventHubDirectDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDirectDestinationResponse {
		return vs[0].([]EventHubDirectDestinationResponse)[vs[1].(int)]
	}).(EventHubDirectDestinationResponseOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSource struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources []string `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// ExtensionDataSourceInput is an input type that accepts ExtensionDataSourceArgs and ExtensionDataSourceOutput values.
// You can construct a concrete instance of `ExtensionDataSourceInput` via:
//
//	ExtensionDataSourceArgs{...}
type ExtensionDataSourceInput interface {
	pulumi.Input

	ToExtensionDataSourceOutput() ExtensionDataSourceOutput
	ToExtensionDataSourceOutputWithContext(context.Context) ExtensionDataSourceOutput
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceArgs struct {
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings pulumi.Input `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources pulumi.StringArrayInput `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (ExtensionDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return i.ToExtensionDataSourceOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceOutput)
}

// ExtensionDataSourceArrayInput is an input type that accepts ExtensionDataSourceArray and ExtensionDataSourceArrayOutput values.
// You can construct a concrete instance of `ExtensionDataSourceArrayInput` via:
//
//	ExtensionDataSourceArray{ ExtensionDataSourceArgs{...} }
type ExtensionDataSourceArrayInput interface {
	pulumi.Input

	ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput
	ToExtensionDataSourceArrayOutputWithContext(context.Context) ExtensionDataSourceArrayOutput
}

type ExtensionDataSourceArray []ExtensionDataSourceInput

func (ExtensionDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return i.ToExtensionDataSourceArrayOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceArrayOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return o
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSource) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSource) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// The list of data sources this extension needs data from.
func (o ExtensionDataSourceOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSource) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSource {
		return vs[0].([]ExtensionDataSource)[vs[1].(int)]
	}).(ExtensionDataSourceOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponse struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources []string `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponseOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutput() ExtensionDataSourceResponseOutput {
	return o
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutputWithContext(ctx context.Context) ExtensionDataSourceResponseOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceResponseOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceResponseOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// The list of data sources this extension needs data from.
func (o ExtensionDataSourceResponseOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutput() ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutputWithContext(ctx context.Context) ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSourceResponse {
		return vs[0].([]ExtensionDataSourceResponse)[vs[1].(int)]
	}).(ExtensionDataSourceResponseOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSource struct {
	// Absolute paths file location
	LogDirectories []string `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// IIS streams
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// IisLogsDataSourceInput is an input type that accepts IisLogsDataSourceArgs and IisLogsDataSourceOutput values.
// You can construct a concrete instance of `IisLogsDataSourceInput` via:
//
//	IisLogsDataSourceArgs{...}
type IisLogsDataSourceInput interface {
	pulumi.Input

	ToIisLogsDataSourceOutput() IisLogsDataSourceOutput
	ToIisLogsDataSourceOutputWithContext(context.Context) IisLogsDataSourceOutput
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceArgs struct {
	// Absolute paths file location
	LogDirectories pulumi.StringArrayInput `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// IIS streams
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (IisLogsDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSource)(nil)).Elem()
}

func (i IisLogsDataSourceArgs) ToIisLogsDataSourceOutput() IisLogsDataSourceOutput {
	return i.ToIisLogsDataSourceOutputWithContext(context.Background())
}

func (i IisLogsDataSourceArgs) ToIisLogsDataSourceOutputWithContext(ctx context.Context) IisLogsDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IisLogsDataSourceOutput)
}

// IisLogsDataSourceArrayInput is an input type that accepts IisLogsDataSourceArray and IisLogsDataSourceArrayOutput values.
// You can construct a concrete instance of `IisLogsDataSourceArrayInput` via:
//
//	IisLogsDataSourceArray{ IisLogsDataSourceArgs{...} }
type IisLogsDataSourceArrayInput interface {
	pulumi.Input

	ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput
	ToIisLogsDataSourceArrayOutputWithContext(context.Context) IisLogsDataSourceArrayOutput
}

type IisLogsDataSourceArray []IisLogsDataSourceInput

func (IisLogsDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSource)(nil)).Elem()
}

func (i IisLogsDataSourceArray) ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput {
	return i.ToIisLogsDataSourceArrayOutputWithContext(context.Background())
}

func (i IisLogsDataSourceArray) ToIisLogsDataSourceArrayOutputWithContext(ctx context.Context) IisLogsDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IisLogsDataSourceArrayOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSource)(nil)).Elem()
}

func (o IisLogsDataSourceOutput) ToIisLogsDataSourceOutput() IisLogsDataSourceOutput {
	return o
}

func (o IisLogsDataSourceOutput) ToIisLogsDataSourceOutputWithContext(ctx context.Context) IisLogsDataSourceOutput {
	return o
}

// Absolute paths file location
func (o IisLogsDataSourceOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSource) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o IisLogsDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IIS streams
func (o IisLogsDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o IisLogsDataSourceOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSource) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type IisLogsDataSourceArrayOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSource)(nil)).Elem()
}

func (o IisLogsDataSourceArrayOutput) ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput {
	return o
}

func (o IisLogsDataSourceArrayOutput) ToIisLogsDataSourceArrayOutputWithContext(ctx context.Context) IisLogsDataSourceArrayOutput {
	return o
}

func (o IisLogsDataSourceArrayOutput) Index(i pulumi.IntInput) IisLogsDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IisLogsDataSource {
		return vs[0].([]IisLogsDataSource)[vs[1].(int)]
	}).(IisLogsDataSourceOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceResponse struct {
	// Absolute paths file location
	LogDirectories []string `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// IIS streams
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceResponseOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSourceResponse)(nil)).Elem()
}

func (o IisLogsDataSourceResponseOutput) ToIisLogsDataSourceResponseOutput() IisLogsDataSourceResponseOutput {
	return o
}

func (o IisLogsDataSourceResponseOutput) ToIisLogsDataSourceResponseOutputWithContext(ctx context.Context) IisLogsDataSourceResponseOutput {
	return o
}

// Absolute paths file location
func (o IisLogsDataSourceResponseOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o IisLogsDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IIS streams
func (o IisLogsDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o IisLogsDataSourceResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type IisLogsDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSourceResponse)(nil)).Elem()
}

func (o IisLogsDataSourceResponseArrayOutput) ToIisLogsDataSourceResponseArrayOutput() IisLogsDataSourceResponseArrayOutput {
	return o
}

func (o IisLogsDataSourceResponseArrayOutput) ToIisLogsDataSourceResponseArrayOutputWithContext(ctx context.Context) IisLogsDataSourceResponseArrayOutput {
	return o
}

func (o IisLogsDataSourceResponseArrayOutput) Index(i pulumi.IntInput) IisLogsDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IisLogsDataSourceResponse {
		return vs[0].([]IisLogsDataSourceResponse)[vs[1].(int)]
	}).(IisLogsDataSourceResponseOutput)
}

type LocationSpecResponse struct {
	// Name of location.
	Location *string `pulumi:"location"`
	// The resource provisioning state in this location.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
}

type LocationSpecResponseOutput struct{ *pulumi.OutputState }

func (LocationSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSpecResponse)(nil)).Elem()
}

func (o LocationSpecResponseOutput) ToLocationSpecResponseOutput() LocationSpecResponseOutput {
	return o
}

func (o LocationSpecResponseOutput) ToLocationSpecResponseOutputWithContext(ctx context.Context) LocationSpecResponseOutput {
	return o
}

// Name of location.
func (o LocationSpecResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationSpecResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource provisioning state in this location.
func (o LocationSpecResponseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationSpecResponse) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

type LocationSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSpecResponse)(nil)).Elem()
}

func (o LocationSpecResponseArrayOutput) ToLocationSpecResponseArrayOutput() LocationSpecResponseArrayOutput {
	return o
}

func (o LocationSpecResponseArrayOutput) ToLocationSpecResponseArrayOutputWithContext(ctx context.Context) LocationSpecResponseArrayOutput {
	return o
}

func (o LocationSpecResponseArrayOutput) Index(i pulumi.IntInput) LocationSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationSpecResponse {
		return vs[0].([]LocationSpecResponse)[vs[1].(int)]
	}).(LocationSpecResponseOutput)
}

// Log Analytics destination.
type LogAnalyticsDestination struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// LogAnalyticsDestinationInput is an input type that accepts LogAnalyticsDestinationArgs and LogAnalyticsDestinationOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationInput` via:
//
//	LogAnalyticsDestinationArgs{...}
type LogAnalyticsDestinationInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput
	ToLogAnalyticsDestinationOutputWithContext(context.Context) LogAnalyticsDestinationOutput
}

// Log Analytics destination.
type LogAnalyticsDestinationArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId pulumi.StringPtrInput `pulumi:"workspaceResourceId"`
}

func (LogAnalyticsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return i.ToLogAnalyticsDestinationOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationOutput)
}

// LogAnalyticsDestinationArrayInput is an input type that accepts LogAnalyticsDestinationArray and LogAnalyticsDestinationArrayOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationArrayInput` via:
//
//	LogAnalyticsDestinationArray{ LogAnalyticsDestinationArgs{...} }
type LogAnalyticsDestinationArrayInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput
	ToLogAnalyticsDestinationArrayOutputWithContext(context.Context) LogAnalyticsDestinationArrayOutput
}

type LogAnalyticsDestinationArray []LogAnalyticsDestinationInput

func (LogAnalyticsDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return i.ToLogAnalyticsDestinationArrayOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationArrayOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return o
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsDestinationArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestination {
		return vs[0].([]LogAnalyticsDestination)[vs[1].(int)]
	}).(LogAnalyticsDestinationOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationResponse struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The Customer ID of the Log Analytics workspace.
	WorkspaceId string `pulumi:"workspaceId"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// Log Analytics destination.
type LogAnalyticsDestinationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutput() LogAnalyticsDestinationResponseOutput {
	return o
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Customer ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationResponseOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutput() LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestinationResponse {
		return vs[0].([]LogAnalyticsDestinationResponse)[vs[1].(int)]
	}).(LogAnalyticsDestinationResponseOutput)
}

// Text settings
type LogFileSettingsResponseText struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// Text settings
type LogFileSettingsResponseTextOutput struct{ *pulumi.OutputState }

func (LogFileSettingsResponseTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsResponseText)(nil)).Elem()
}

func (o LogFileSettingsResponseTextOutput) ToLogFileSettingsResponseTextOutput() LogFileSettingsResponseTextOutput {
	return o
}

func (o LogFileSettingsResponseTextOutput) ToLogFileSettingsResponseTextOutputWithContext(ctx context.Context) LogFileSettingsResponseTextOutput {
	return o
}

// One of the supported timestamp formats
func (o LogFileSettingsResponseTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LogFileSettingsResponseText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type LogFileSettingsResponseTextPtrOutput struct{ *pulumi.OutputState }

func (LogFileSettingsResponseTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsResponseText)(nil)).Elem()
}

func (o LogFileSettingsResponseTextPtrOutput) ToLogFileSettingsResponseTextPtrOutput() LogFileSettingsResponseTextPtrOutput {
	return o
}

func (o LogFileSettingsResponseTextPtrOutput) ToLogFileSettingsResponseTextPtrOutputWithContext(ctx context.Context) LogFileSettingsResponseTextPtrOutput {
	return o
}

func (o LogFileSettingsResponseTextPtrOutput) Elem() LogFileSettingsResponseTextOutput {
	return o.ApplyT(func(v *LogFileSettingsResponseText) LogFileSettingsResponseText {
		if v != nil {
			return *v
		}
		var ret LogFileSettingsResponseText
		return ret
	}).(LogFileSettingsResponseTextOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsResponseTextPtrOutput) RecordStartTimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogFileSettingsResponseText) *string {
		if v == nil {
			return nil
		}
		return &v.RecordStartTimestampFormat
	}).(pulumi.StringPtrOutput)
}

// Text settings
type LogFileSettingsText struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// LogFileSettingsTextInput is an input type that accepts LogFileSettingsTextArgs and LogFileSettingsTextOutput values.
// You can construct a concrete instance of `LogFileSettingsTextInput` via:
//
//	LogFileSettingsTextArgs{...}
type LogFileSettingsTextInput interface {
	pulumi.Input

	ToLogFileSettingsTextOutput() LogFileSettingsTextOutput
	ToLogFileSettingsTextOutputWithContext(context.Context) LogFileSettingsTextOutput
}

// Text settings
type LogFileSettingsTextArgs struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat pulumi.StringInput `pulumi:"recordStartTimestampFormat"`
}

func (LogFileSettingsTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsText)(nil)).Elem()
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextOutput() LogFileSettingsTextOutput {
	return i.ToLogFileSettingsTextOutputWithContext(context.Background())
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextOutputWithContext(ctx context.Context) LogFileSettingsTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextOutput)
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return i.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextOutput).ToLogFileSettingsTextPtrOutputWithContext(ctx)
}

// LogFileSettingsTextPtrInput is an input type that accepts LogFileSettingsTextArgs, LogFileSettingsTextPtr and LogFileSettingsTextPtrOutput values.
// You can construct a concrete instance of `LogFileSettingsTextPtrInput` via:
//
//	        LogFileSettingsTextArgs{...}
//
//	or:
//
//	        nil
type LogFileSettingsTextPtrInput interface {
	pulumi.Input

	ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput
	ToLogFileSettingsTextPtrOutputWithContext(context.Context) LogFileSettingsTextPtrOutput
}

type logFileSettingsTextPtrType LogFileSettingsTextArgs

func LogFileSettingsTextPtr(v *LogFileSettingsTextArgs) LogFileSettingsTextPtrInput {
	return (*logFileSettingsTextPtrType)(v)
}

func (*logFileSettingsTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsText)(nil)).Elem()
}

func (i *logFileSettingsTextPtrType) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return i.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i *logFileSettingsTextPtrType) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextPtrOutput)
}

// Text settings
type LogFileSettingsTextOutput struct{ *pulumi.OutputState }

func (LogFileSettingsTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsText)(nil)).Elem()
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextOutput() LogFileSettingsTextOutput {
	return o
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextOutputWithContext(ctx context.Context) LogFileSettingsTextOutput {
	return o
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return o.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogFileSettingsText) *LogFileSettingsText {
		return &v
	}).(LogFileSettingsTextPtrOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LogFileSettingsText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type LogFileSettingsTextPtrOutput struct{ *pulumi.OutputState }

func (LogFileSettingsTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsText)(nil)).Elem()
}

func (o LogFileSettingsTextPtrOutput) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return o
}

func (o LogFileSettingsTextPtrOutput) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return o
}

func (o LogFileSettingsTextPtrOutput) Elem() LogFileSettingsTextOutput {
	return o.ApplyT(func(v *LogFileSettingsText) LogFileSettingsText {
		if v != nil {
			return *v
		}
		var ret LogFileSettingsText
		return ret
	}).(LogFileSettingsTextOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsTextPtrOutput) RecordStartTimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogFileSettingsText) *string {
		if v == nil {
			return nil
		}
		return &v.RecordStartTimestampFormat
	}).(pulumi.StringPtrOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSource struct {
	// File Patterns where the log files are located
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files
	Format string `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The log files specific settings.
	Settings *LogFilesDataSourceSettings `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// LogFilesDataSourceInput is an input type that accepts LogFilesDataSourceArgs and LogFilesDataSourceOutput values.
// You can construct a concrete instance of `LogFilesDataSourceInput` via:
//
//	LogFilesDataSourceArgs{...}
type LogFilesDataSourceInput interface {
	pulumi.Input

	ToLogFilesDataSourceOutput() LogFilesDataSourceOutput
	ToLogFilesDataSourceOutputWithContext(context.Context) LogFilesDataSourceOutput
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceArgs struct {
	// File Patterns where the log files are located
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// The data format of the log files
	Format pulumi.StringInput `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The log files specific settings.
	Settings LogFilesDataSourceSettingsPtrInput `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (LogFilesDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSource)(nil)).Elem()
}

func (i LogFilesDataSourceArgs) ToLogFilesDataSourceOutput() LogFilesDataSourceOutput {
	return i.ToLogFilesDataSourceOutputWithContext(context.Background())
}

func (i LogFilesDataSourceArgs) ToLogFilesDataSourceOutputWithContext(ctx context.Context) LogFilesDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceOutput)
}

// LogFilesDataSourceArrayInput is an input type that accepts LogFilesDataSourceArray and LogFilesDataSourceArrayOutput values.
// You can construct a concrete instance of `LogFilesDataSourceArrayInput` via:
//
//	LogFilesDataSourceArray{ LogFilesDataSourceArgs{...} }
type LogFilesDataSourceArrayInput interface {
	pulumi.Input

	ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput
	ToLogFilesDataSourceArrayOutputWithContext(context.Context) LogFilesDataSourceArrayOutput
}

type LogFilesDataSourceArray []LogFilesDataSourceInput

func (LogFilesDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSource)(nil)).Elem()
}

func (i LogFilesDataSourceArray) ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput {
	return i.ToLogFilesDataSourceArrayOutputWithContext(context.Background())
}

func (i LogFilesDataSourceArray) ToLogFilesDataSourceArrayOutputWithContext(ctx context.Context) LogFilesDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceArrayOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSource)(nil)).Elem()
}

func (o LogFilesDataSourceOutput) ToLogFilesDataSourceOutput() LogFilesDataSourceOutput {
	return o
}

func (o LogFilesDataSourceOutput) ToLogFilesDataSourceOutputWithContext(ctx context.Context) LogFilesDataSourceOutput {
	return o
}

// File Patterns where the log files are located
func (o LogFilesDataSourceOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSource) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files
func (o LogFilesDataSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LogFilesDataSource) string { return v.Format }).(pulumi.StringOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o LogFilesDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The log files specific settings.
func (o LogFilesDataSourceOutput) Settings() LogFilesDataSourceSettingsPtrOutput {
	return o.ApplyT(func(v LogFilesDataSource) *LogFilesDataSourceSettings { return v.Settings }).(LogFilesDataSourceSettingsPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data source
func (o LogFilesDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o LogFilesDataSourceOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSource) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type LogFilesDataSourceArrayOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSource)(nil)).Elem()
}

func (o LogFilesDataSourceArrayOutput) ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput {
	return o
}

func (o LogFilesDataSourceArrayOutput) ToLogFilesDataSourceArrayOutputWithContext(ctx context.Context) LogFilesDataSourceArrayOutput {
	return o
}

func (o LogFilesDataSourceArrayOutput) Index(i pulumi.IntInput) LogFilesDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogFilesDataSource {
		return vs[0].([]LogFilesDataSource)[vs[1].(int)]
	}).(LogFilesDataSourceOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceResponse struct {
	// File Patterns where the log files are located
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files
	Format string `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The log files specific settings.
	Settings *LogFilesDataSourceResponseSettings `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceResponseOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceResponse)(nil)).Elem()
}

func (o LogFilesDataSourceResponseOutput) ToLogFilesDataSourceResponseOutput() LogFilesDataSourceResponseOutput {
	return o
}

func (o LogFilesDataSourceResponseOutput) ToLogFilesDataSourceResponseOutputWithContext(ctx context.Context) LogFilesDataSourceResponseOutput {
	return o
}

// File Patterns where the log files are located
func (o LogFilesDataSourceResponseOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files
func (o LogFilesDataSourceResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) string { return v.Format }).(pulumi.StringOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o LogFilesDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The log files specific settings.
func (o LogFilesDataSourceResponseOutput) Settings() LogFilesDataSourceResponseSettingsPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) *LogFilesDataSourceResponseSettings { return v.Settings }).(LogFilesDataSourceResponseSettingsPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data source
func (o LogFilesDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o LogFilesDataSourceResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type LogFilesDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSourceResponse)(nil)).Elem()
}

func (o LogFilesDataSourceResponseArrayOutput) ToLogFilesDataSourceResponseArrayOutput() LogFilesDataSourceResponseArrayOutput {
	return o
}

func (o LogFilesDataSourceResponseArrayOutput) ToLogFilesDataSourceResponseArrayOutputWithContext(ctx context.Context) LogFilesDataSourceResponseArrayOutput {
	return o
}

func (o LogFilesDataSourceResponseArrayOutput) Index(i pulumi.IntInput) LogFilesDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogFilesDataSourceResponse {
		return vs[0].([]LogFilesDataSourceResponse)[vs[1].(int)]
	}).(LogFilesDataSourceResponseOutput)
}

// The log files specific settings.
type LogFilesDataSourceResponseSettings struct {
	// Text settings
	Text *LogFileSettingsResponseText `pulumi:"text"`
}

// The log files specific settings.
type LogFilesDataSourceResponseSettingsOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceResponseSettings)(nil)).Elem()
}

func (o LogFilesDataSourceResponseSettingsOutput) ToLogFilesDataSourceResponseSettingsOutput() LogFilesDataSourceResponseSettingsOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsOutput) ToLogFilesDataSourceResponseSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceResponseSettingsOutput {
	return o
}

// Text settings
func (o LogFilesDataSourceResponseSettingsOutput) Text() LogFileSettingsResponseTextPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponseSettings) *LogFileSettingsResponseText { return v.Text }).(LogFileSettingsResponseTextPtrOutput)
}

type LogFilesDataSourceResponseSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceResponseSettings)(nil)).Elem()
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) ToLogFilesDataSourceResponseSettingsPtrOutput() LogFilesDataSourceResponseSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) ToLogFilesDataSourceResponseSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceResponseSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) Elem() LogFilesDataSourceResponseSettingsOutput {
	return o.ApplyT(func(v *LogFilesDataSourceResponseSettings) LogFilesDataSourceResponseSettings {
		if v != nil {
			return *v
		}
		var ret LogFilesDataSourceResponseSettings
		return ret
	}).(LogFilesDataSourceResponseSettingsOutput)
}

// Text settings
func (o LogFilesDataSourceResponseSettingsPtrOutput) Text() LogFileSettingsResponseTextPtrOutput {
	return o.ApplyT(func(v *LogFilesDataSourceResponseSettings) *LogFileSettingsResponseText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(LogFileSettingsResponseTextPtrOutput)
}

// The log files specific settings.
type LogFilesDataSourceSettings struct {
	// Text settings
	Text *LogFileSettingsText `pulumi:"text"`
}

// LogFilesDataSourceSettingsInput is an input type that accepts LogFilesDataSourceSettingsArgs and LogFilesDataSourceSettingsOutput values.
// You can construct a concrete instance of `LogFilesDataSourceSettingsInput` via:
//
//	LogFilesDataSourceSettingsArgs{...}
type LogFilesDataSourceSettingsInput interface {
	pulumi.Input

	ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput
	ToLogFilesDataSourceSettingsOutputWithContext(context.Context) LogFilesDataSourceSettingsOutput
}

// The log files specific settings.
type LogFilesDataSourceSettingsArgs struct {
	// Text settings
	Text LogFileSettingsTextPtrInput `pulumi:"text"`
}

func (LogFilesDataSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceSettings)(nil)).Elem()
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput {
	return i.ToLogFilesDataSourceSettingsOutputWithContext(context.Background())
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsOutput)
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return i.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsOutput).ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx)
}

// LogFilesDataSourceSettingsPtrInput is an input type that accepts LogFilesDataSourceSettingsArgs, LogFilesDataSourceSettingsPtr and LogFilesDataSourceSettingsPtrOutput values.
// You can construct a concrete instance of `LogFilesDataSourceSettingsPtrInput` via:
//
//	        LogFilesDataSourceSettingsArgs{...}
//
//	or:
//
//	        nil
type LogFilesDataSourceSettingsPtrInput interface {
	pulumi.Input

	ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput
	ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Context) LogFilesDataSourceSettingsPtrOutput
}

type logFilesDataSourceSettingsPtrType LogFilesDataSourceSettingsArgs

func LogFilesDataSourceSettingsPtr(v *LogFilesDataSourceSettingsArgs) LogFilesDataSourceSettingsPtrInput {
	return (*logFilesDataSourceSettingsPtrType)(v)
}

func (*logFilesDataSourceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceSettings)(nil)).Elem()
}

func (i *logFilesDataSourceSettingsPtrType) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return i.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (i *logFilesDataSourceSettingsPtrType) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsPtrOutput)
}

// The log files specific settings.
type LogFilesDataSourceSettingsOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceSettings)(nil)).Elem()
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput {
	return o
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsOutput {
	return o
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return o.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogFilesDataSourceSettings) *LogFilesDataSourceSettings {
		return &v
	}).(LogFilesDataSourceSettingsPtrOutput)
}

// Text settings
func (o LogFilesDataSourceSettingsOutput) Text() LogFileSettingsTextPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceSettings) *LogFileSettingsText { return v.Text }).(LogFileSettingsTextPtrOutput)
}

type LogFilesDataSourceSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceSettings)(nil)).Elem()
}

func (o LogFilesDataSourceSettingsPtrOutput) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceSettingsPtrOutput) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceSettingsPtrOutput) Elem() LogFilesDataSourceSettingsOutput {
	return o.ApplyT(func(v *LogFilesDataSourceSettings) LogFilesDataSourceSettings {
		if v != nil {
			return *v
		}
		var ret LogFilesDataSourceSettings
		return ret
	}).(LogFilesDataSourceSettingsOutput)
}

// Text settings
func (o LogFilesDataSourceSettingsPtrOutput) Text() LogFileSettingsTextPtrOutput {
	return o.ApplyT(func(v *LogFilesDataSourceSettings) *LogFileSettingsText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(LogFileSettingsTextPtrOutput)
}

// Microsoft Fabric destination (non-Azure).
type MicrosoftFabricDestination struct {
	// The artifact id of the Microsoft Fabric resource.
	ArtifactId *string `pulumi:"artifactId"`
	// The name of the database to which data will be ingested.
	DatabaseName *string `pulumi:"databaseName"`
	// The ingestion uri of the Microsoft Fabric resource.
	IngestionUri *string `pulumi:"ingestionUri"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The tenant id of the Microsoft Fabric resource.
	TenantId *string `pulumi:"tenantId"`
}

// MicrosoftFabricDestinationInput is an input type that accepts MicrosoftFabricDestinationArgs and MicrosoftFabricDestinationOutput values.
// You can construct a concrete instance of `MicrosoftFabricDestinationInput` via:
//
//	MicrosoftFabricDestinationArgs{...}
type MicrosoftFabricDestinationInput interface {
	pulumi.Input

	ToMicrosoftFabricDestinationOutput() MicrosoftFabricDestinationOutput
	ToMicrosoftFabricDestinationOutputWithContext(context.Context) MicrosoftFabricDestinationOutput
}

// Microsoft Fabric destination (non-Azure).
type MicrosoftFabricDestinationArgs struct {
	// The artifact id of the Microsoft Fabric resource.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// The name of the database to which data will be ingested.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// The ingestion uri of the Microsoft Fabric resource.
	IngestionUri pulumi.StringPtrInput `pulumi:"ingestionUri"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The tenant id of the Microsoft Fabric resource.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (MicrosoftFabricDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftFabricDestination)(nil)).Elem()
}

func (i MicrosoftFabricDestinationArgs) ToMicrosoftFabricDestinationOutput() MicrosoftFabricDestinationOutput {
	return i.ToMicrosoftFabricDestinationOutputWithContext(context.Background())
}

func (i MicrosoftFabricDestinationArgs) ToMicrosoftFabricDestinationOutputWithContext(ctx context.Context) MicrosoftFabricDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftFabricDestinationOutput)
}

// MicrosoftFabricDestinationArrayInput is an input type that accepts MicrosoftFabricDestinationArray and MicrosoftFabricDestinationArrayOutput values.
// You can construct a concrete instance of `MicrosoftFabricDestinationArrayInput` via:
//
//	MicrosoftFabricDestinationArray{ MicrosoftFabricDestinationArgs{...} }
type MicrosoftFabricDestinationArrayInput interface {
	pulumi.Input

	ToMicrosoftFabricDestinationArrayOutput() MicrosoftFabricDestinationArrayOutput
	ToMicrosoftFabricDestinationArrayOutputWithContext(context.Context) MicrosoftFabricDestinationArrayOutput
}

type MicrosoftFabricDestinationArray []MicrosoftFabricDestinationInput

func (MicrosoftFabricDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MicrosoftFabricDestination)(nil)).Elem()
}

func (i MicrosoftFabricDestinationArray) ToMicrosoftFabricDestinationArrayOutput() MicrosoftFabricDestinationArrayOutput {
	return i.ToMicrosoftFabricDestinationArrayOutputWithContext(context.Background())
}

func (i MicrosoftFabricDestinationArray) ToMicrosoftFabricDestinationArrayOutputWithContext(ctx context.Context) MicrosoftFabricDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftFabricDestinationArrayOutput)
}

// Microsoft Fabric destination (non-Azure).
type MicrosoftFabricDestinationOutput struct{ *pulumi.OutputState }

func (MicrosoftFabricDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftFabricDestination)(nil)).Elem()
}

func (o MicrosoftFabricDestinationOutput) ToMicrosoftFabricDestinationOutput() MicrosoftFabricDestinationOutput {
	return o
}

func (o MicrosoftFabricDestinationOutput) ToMicrosoftFabricDestinationOutputWithContext(ctx context.Context) MicrosoftFabricDestinationOutput {
	return o
}

// The artifact id of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestination) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// The name of the database to which data will be ingested.
func (o MicrosoftFabricDestinationOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestination) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The ingestion uri of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationOutput) IngestionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestination) *string { return v.IngestionUri }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MicrosoftFabricDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The tenant id of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestination) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type MicrosoftFabricDestinationArrayOutput struct{ *pulumi.OutputState }

func (MicrosoftFabricDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MicrosoftFabricDestination)(nil)).Elem()
}

func (o MicrosoftFabricDestinationArrayOutput) ToMicrosoftFabricDestinationArrayOutput() MicrosoftFabricDestinationArrayOutput {
	return o
}

func (o MicrosoftFabricDestinationArrayOutput) ToMicrosoftFabricDestinationArrayOutputWithContext(ctx context.Context) MicrosoftFabricDestinationArrayOutput {
	return o
}

func (o MicrosoftFabricDestinationArrayOutput) Index(i pulumi.IntInput) MicrosoftFabricDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MicrosoftFabricDestination {
		return vs[0].([]MicrosoftFabricDestination)[vs[1].(int)]
	}).(MicrosoftFabricDestinationOutput)
}

// Microsoft Fabric destination (non-Azure).
type MicrosoftFabricDestinationResponse struct {
	// The artifact id of the Microsoft Fabric resource.
	ArtifactId *string `pulumi:"artifactId"`
	// The name of the database to which data will be ingested.
	DatabaseName *string `pulumi:"databaseName"`
	// The ingestion uri of the Microsoft Fabric resource.
	IngestionUri *string `pulumi:"ingestionUri"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The tenant id of the Microsoft Fabric resource.
	TenantId *string `pulumi:"tenantId"`
}

// Microsoft Fabric destination (non-Azure).
type MicrosoftFabricDestinationResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftFabricDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftFabricDestinationResponse)(nil)).Elem()
}

func (o MicrosoftFabricDestinationResponseOutput) ToMicrosoftFabricDestinationResponseOutput() MicrosoftFabricDestinationResponseOutput {
	return o
}

func (o MicrosoftFabricDestinationResponseOutput) ToMicrosoftFabricDestinationResponseOutputWithContext(ctx context.Context) MicrosoftFabricDestinationResponseOutput {
	return o
}

// The artifact id of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationResponseOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestinationResponse) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// The name of the database to which data will be ingested.
func (o MicrosoftFabricDestinationResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestinationResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The ingestion uri of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationResponseOutput) IngestionUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestinationResponse) *string { return v.IngestionUri }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MicrosoftFabricDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The tenant id of the Microsoft Fabric resource.
func (o MicrosoftFabricDestinationResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MicrosoftFabricDestinationResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type MicrosoftFabricDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (MicrosoftFabricDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MicrosoftFabricDestinationResponse)(nil)).Elem()
}

func (o MicrosoftFabricDestinationResponseArrayOutput) ToMicrosoftFabricDestinationResponseArrayOutput() MicrosoftFabricDestinationResponseArrayOutput {
	return o
}

func (o MicrosoftFabricDestinationResponseArrayOutput) ToMicrosoftFabricDestinationResponseArrayOutputWithContext(ctx context.Context) MicrosoftFabricDestinationResponseArrayOutput {
	return o
}

func (o MicrosoftFabricDestinationResponseArrayOutput) Index(i pulumi.IntInput) MicrosoftFabricDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MicrosoftFabricDestinationResponse {
		return vs[0].([]MicrosoftFabricDestinationResponse)[vs[1].(int)]
	}).(MicrosoftFabricDestinationResponseOutput)
}

// Monitoring account destination.
type MonitoringAccountDestination struct {
	// The resource ID of the monitoring account.
	AccountResourceId *string `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// MonitoringAccountDestinationInput is an input type that accepts MonitoringAccountDestinationArgs and MonitoringAccountDestinationOutput values.
// You can construct a concrete instance of `MonitoringAccountDestinationInput` via:
//
//	MonitoringAccountDestinationArgs{...}
type MonitoringAccountDestinationInput interface {
	pulumi.Input

	ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput
	ToMonitoringAccountDestinationOutputWithContext(context.Context) MonitoringAccountDestinationOutput
}

// Monitoring account destination.
type MonitoringAccountDestinationArgs struct {
	// The resource ID of the monitoring account.
	AccountResourceId pulumi.StringPtrInput `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MonitoringAccountDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestination)(nil)).Elem()
}

func (i MonitoringAccountDestinationArgs) ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput {
	return i.ToMonitoringAccountDestinationOutputWithContext(context.Background())
}

func (i MonitoringAccountDestinationArgs) ToMonitoringAccountDestinationOutputWithContext(ctx context.Context) MonitoringAccountDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAccountDestinationOutput)
}

// MonitoringAccountDestinationArrayInput is an input type that accepts MonitoringAccountDestinationArray and MonitoringAccountDestinationArrayOutput values.
// You can construct a concrete instance of `MonitoringAccountDestinationArrayInput` via:
//
//	MonitoringAccountDestinationArray{ MonitoringAccountDestinationArgs{...} }
type MonitoringAccountDestinationArrayInput interface {
	pulumi.Input

	ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput
	ToMonitoringAccountDestinationArrayOutputWithContext(context.Context) MonitoringAccountDestinationArrayOutput
}

type MonitoringAccountDestinationArray []MonitoringAccountDestinationInput

func (MonitoringAccountDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestination)(nil)).Elem()
}

func (i MonitoringAccountDestinationArray) ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput {
	return i.ToMonitoringAccountDestinationArrayOutputWithContext(context.Background())
}

func (i MonitoringAccountDestinationArray) ToMonitoringAccountDestinationArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAccountDestinationArrayOutput)
}

// Monitoring account destination.
type MonitoringAccountDestinationOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestination)(nil)).Elem()
}

func (o MonitoringAccountDestinationOutput) ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput {
	return o
}

func (o MonitoringAccountDestinationOutput) ToMonitoringAccountDestinationOutputWithContext(ctx context.Context) MonitoringAccountDestinationOutput {
	return o
}

// The resource ID of the monitoring account.
func (o MonitoringAccountDestinationOutput) AccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestination) *string { return v.AccountResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MonitoringAccountDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MonitoringAccountDestinationArrayOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestination)(nil)).Elem()
}

func (o MonitoringAccountDestinationArrayOutput) ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput {
	return o
}

func (o MonitoringAccountDestinationArrayOutput) ToMonitoringAccountDestinationArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationArrayOutput {
	return o
}

func (o MonitoringAccountDestinationArrayOutput) Index(i pulumi.IntInput) MonitoringAccountDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringAccountDestination {
		return vs[0].([]MonitoringAccountDestination)[vs[1].(int)]
	}).(MonitoringAccountDestinationOutput)
}

// Monitoring account destination.
type MonitoringAccountDestinationResponse struct {
	// The immutable ID  of the account.
	AccountId string `pulumi:"accountId"`
	// The resource ID of the monitoring account.
	AccountResourceId *string `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// Monitoring account destination.
type MonitoringAccountDestinationResponseOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestinationResponse)(nil)).Elem()
}

func (o MonitoringAccountDestinationResponseOutput) ToMonitoringAccountDestinationResponseOutput() MonitoringAccountDestinationResponseOutput {
	return o
}

func (o MonitoringAccountDestinationResponseOutput) ToMonitoringAccountDestinationResponseOutputWithContext(ctx context.Context) MonitoringAccountDestinationResponseOutput {
	return o
}

// The immutable ID  of the account.
func (o MonitoringAccountDestinationResponseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) string { return v.AccountId }).(pulumi.StringOutput)
}

// The resource ID of the monitoring account.
func (o MonitoringAccountDestinationResponseOutput) AccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) *string { return v.AccountResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MonitoringAccountDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MonitoringAccountDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestinationResponse)(nil)).Elem()
}

func (o MonitoringAccountDestinationResponseArrayOutput) ToMonitoringAccountDestinationResponseArrayOutput() MonitoringAccountDestinationResponseArrayOutput {
	return o
}

func (o MonitoringAccountDestinationResponseArrayOutput) ToMonitoringAccountDestinationResponseArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationResponseArrayOutput {
	return o
}

func (o MonitoringAccountDestinationResponseArrayOutput) Index(i pulumi.IntInput) MonitoringAccountDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringAccountDestinationResponse {
		return vs[0].([]MonitoringAccountDestinationResponse)[vs[1].(int)]
	}).(MonitoringAccountDestinationResponseOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSource struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds *int `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// PerfCounterDataSourceInput is an input type that accepts PerfCounterDataSourceArgs and PerfCounterDataSourceOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceInput` via:
//
//	PerfCounterDataSourceArgs{...}
type PerfCounterDataSourceInput interface {
	pulumi.Input

	ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput
	ToPerfCounterDataSourceOutputWithContext(context.Context) PerfCounterDataSourceOutput
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceArgs struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds pulumi.IntPtrInput `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (PerfCounterDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return i.ToPerfCounterDataSourceOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceOutput)
}

// PerfCounterDataSourceArrayInput is an input type that accepts PerfCounterDataSourceArray and PerfCounterDataSourceArrayOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceArrayInput` via:
//
//	PerfCounterDataSourceArray{ PerfCounterDataSourceArgs{...} }
type PerfCounterDataSourceArrayInput interface {
	pulumi.Input

	ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput
	ToPerfCounterDataSourceArrayOutputWithContext(context.Context) PerfCounterDataSourceArrayOutput
}

type PerfCounterDataSourceArray []PerfCounterDataSourceInput

func (PerfCounterDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return i.ToPerfCounterDataSourceArrayOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceArrayOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return o
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceOutput) SamplingFrequencyInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSource) *int { return v.SamplingFrequencyInSeconds }).(pulumi.IntPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o PerfCounterDataSourceOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSource) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type PerfCounterDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSource {
		return vs[0].([]PerfCounterDataSource)[vs[1].(int)]
	}).(PerfCounterDataSourceOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponse struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds *int `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutput() PerfCounterDataSourceResponseOutput {
	return o
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceResponseOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceResponseOutput) SamplingFrequencyInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) *int { return v.SamplingFrequencyInSeconds }).(pulumi.IntPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o PerfCounterDataSourceResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type PerfCounterDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutput() PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSourceResponse {
		return vs[0].([]PerfCounterDataSourceResponse)[vs[1].(int)]
	}).(PerfCounterDataSourceResponseOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams []string `pulumi:"streams"`
}

// PlatformTelemetryDataSourceInput is an input type that accepts PlatformTelemetryDataSourceArgs and PlatformTelemetryDataSourceOutput values.
// You can construct a concrete instance of `PlatformTelemetryDataSourceInput` via:
//
//	PlatformTelemetryDataSourceArgs{...}
type PlatformTelemetryDataSourceInput interface {
	pulumi.Input

	ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput
	ToPlatformTelemetryDataSourceOutputWithContext(context.Context) PlatformTelemetryDataSourceOutput
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PlatformTelemetryDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSource)(nil)).Elem()
}

func (i PlatformTelemetryDataSourceArgs) ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput {
	return i.ToPlatformTelemetryDataSourceOutputWithContext(context.Background())
}

func (i PlatformTelemetryDataSourceArgs) ToPlatformTelemetryDataSourceOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformTelemetryDataSourceOutput)
}

// PlatformTelemetryDataSourceArrayInput is an input type that accepts PlatformTelemetryDataSourceArray and PlatformTelemetryDataSourceArrayOutput values.
// You can construct a concrete instance of `PlatformTelemetryDataSourceArrayInput` via:
//
//	PlatformTelemetryDataSourceArray{ PlatformTelemetryDataSourceArgs{...} }
type PlatformTelemetryDataSourceArrayInput interface {
	pulumi.Input

	ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput
	ToPlatformTelemetryDataSourceArrayOutputWithContext(context.Context) PlatformTelemetryDataSourceArrayOutput
}

type PlatformTelemetryDataSourceArray []PlatformTelemetryDataSourceInput

func (PlatformTelemetryDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSource)(nil)).Elem()
}

func (i PlatformTelemetryDataSourceArray) ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput {
	return i.ToPlatformTelemetryDataSourceArrayOutputWithContext(context.Background())
}

func (i PlatformTelemetryDataSourceArray) ToPlatformTelemetryDataSourceArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformTelemetryDataSourceArrayOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSource)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceOutput) ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput {
	return o
}

func (o PlatformTelemetryDataSourceOutput) ToPlatformTelemetryDataSourceOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PlatformTelemetryDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of platform telemetry streams to collect
func (o PlatformTelemetryDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PlatformTelemetryDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSource)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceArrayOutput) ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceArrayOutput) ToPlatformTelemetryDataSourceArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceArrayOutput) Index(i pulumi.IntInput) PlatformTelemetryDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlatformTelemetryDataSource {
		return vs[0].([]PlatformTelemetryDataSource)[vs[1].(int)]
	}).(PlatformTelemetryDataSourceOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams []string `pulumi:"streams"`
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSourceResponse)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceResponseOutput) ToPlatformTelemetryDataSourceResponseOutput() PlatformTelemetryDataSourceResponseOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseOutput) ToPlatformTelemetryDataSourceResponseOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PlatformTelemetryDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of platform telemetry streams to collect
func (o PlatformTelemetryDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PlatformTelemetryDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSourceResponse)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) ToPlatformTelemetryDataSourceResponseArrayOutput() PlatformTelemetryDataSourceResponseArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) ToPlatformTelemetryDataSourceResponseArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceResponseArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PlatformTelemetryDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlatformTelemetryDataSourceResponse {
		return vs[0].([]PlatformTelemetryDataSourceResponse)[vs[1].(int)]
	}).(PlatformTelemetryDataSourceResponseOutput)
}

type PrivateLinkScopedResourceResponse struct {
	// The resourceId of the Azure Monitor Private Link Scope Scoped Resource through which this DCE is associated with a Azure Monitor Private Link Scope.
	ResourceId *string `pulumi:"resourceId"`
	// The immutableId of the Azure Monitor Private Link Scope Resource to which the association is.
	ScopeId *string `pulumi:"scopeId"`
}

type PrivateLinkScopedResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseOutput {
	return o
}

// The resourceId of the Azure Monitor Private Link Scope Scoped Resource through which this DCE is associated with a Azure Monitor Private Link Scope.
func (o PrivateLinkScopedResourceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The immutableId of the Azure Monitor Private Link Scope Resource to which the association is.
func (o PrivateLinkScopedResourceResponseOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

type PrivateLinkScopedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkScopedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkScopedResourceResponse {
		return vs[0].([]PrivateLinkScopedResourceResponse)[vs[1].(int)]
	}).(PrivateLinkScopedResourceResponseOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSource struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter map[string]string `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams []string `pulumi:"streams"`
}

// PrometheusForwarderDataSourceInput is an input type that accepts PrometheusForwarderDataSourceArgs and PrometheusForwarderDataSourceOutput values.
// You can construct a concrete instance of `PrometheusForwarderDataSourceInput` via:
//
//	PrometheusForwarderDataSourceArgs{...}
type PrometheusForwarderDataSourceInput interface {
	pulumi.Input

	ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput
	ToPrometheusForwarderDataSourceOutputWithContext(context.Context) PrometheusForwarderDataSourceOutput
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceArgs struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter pulumi.StringMapInput `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PrometheusForwarderDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSource)(nil)).Elem()
}

func (i PrometheusForwarderDataSourceArgs) ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput {
	return i.ToPrometheusForwarderDataSourceOutputWithContext(context.Background())
}

func (i PrometheusForwarderDataSourceArgs) ToPrometheusForwarderDataSourceOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusForwarderDataSourceOutput)
}

// PrometheusForwarderDataSourceArrayInput is an input type that accepts PrometheusForwarderDataSourceArray and PrometheusForwarderDataSourceArrayOutput values.
// You can construct a concrete instance of `PrometheusForwarderDataSourceArrayInput` via:
//
//	PrometheusForwarderDataSourceArray{ PrometheusForwarderDataSourceArgs{...} }
type PrometheusForwarderDataSourceArrayInput interface {
	pulumi.Input

	ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput
	ToPrometheusForwarderDataSourceArrayOutputWithContext(context.Context) PrometheusForwarderDataSourceArrayOutput
}

type PrometheusForwarderDataSourceArray []PrometheusForwarderDataSourceInput

func (PrometheusForwarderDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSource)(nil)).Elem()
}

func (i PrometheusForwarderDataSourceArray) ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput {
	return i.ToPrometheusForwarderDataSourceArrayOutputWithContext(context.Background())
}

func (i PrometheusForwarderDataSourceArray) ToPrometheusForwarderDataSourceArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusForwarderDataSourceArrayOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSource)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceOutput) ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput {
	return o
}

func (o PrometheusForwarderDataSourceOutput) ToPrometheusForwarderDataSourceOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceOutput {
	return o
}

// The list of label inclusion filters in the form of label "name-value" pairs.
// Currently only one label is supported: 'microsoft_metrics_include_label'.
// Label values are matched case-insensitively.
func (o PrometheusForwarderDataSourceOutput) LabelIncludeFilter() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) map[string]string { return v.LabelIncludeFilter }).(pulumi.StringMapOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PrometheusForwarderDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
func (o PrometheusForwarderDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PrometheusForwarderDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSource)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceArrayOutput) ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceArrayOutput) ToPrometheusForwarderDataSourceArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceArrayOutput) Index(i pulumi.IntInput) PrometheusForwarderDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusForwarderDataSource {
		return vs[0].([]PrometheusForwarderDataSource)[vs[1].(int)]
	}).(PrometheusForwarderDataSourceOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceResponse struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter map[string]string `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSourceResponse)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceResponseOutput) ToPrometheusForwarderDataSourceResponseOutput() PrometheusForwarderDataSourceResponseOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseOutput) ToPrometheusForwarderDataSourceResponseOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceResponseOutput {
	return o
}

// The list of label inclusion filters in the form of label "name-value" pairs.
// Currently only one label is supported: 'microsoft_metrics_include_label'.
// Label values are matched case-insensitively.
func (o PrometheusForwarderDataSourceResponseOutput) LabelIncludeFilter() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) map[string]string { return v.LabelIncludeFilter }).(pulumi.StringMapOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PrometheusForwarderDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
func (o PrometheusForwarderDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PrometheusForwarderDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSourceResponse)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) ToPrometheusForwarderDataSourceResponseArrayOutput() PrometheusForwarderDataSourceResponseArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) ToPrometheusForwarderDataSourceResponseArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceResponseArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PrometheusForwarderDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusForwarderDataSourceResponse {
		return vs[0].([]PrometheusForwarderDataSourceResponse)[vs[1].(int)]
	}).(PrometheusForwarderDataSourceResponseOutput)
}

// All the enrichment data sources referenced in data flows
type ReferencesSpecEnrichmentData struct {
	// All the storage blobs used as enrichment data sources
	StorageBlobs []StorageBlob `pulumi:"storageBlobs"`
}

// ReferencesSpecEnrichmentDataInput is an input type that accepts ReferencesSpecEnrichmentDataArgs and ReferencesSpecEnrichmentDataOutput values.
// You can construct a concrete instance of `ReferencesSpecEnrichmentDataInput` via:
//
//	ReferencesSpecEnrichmentDataArgs{...}
type ReferencesSpecEnrichmentDataInput interface {
	pulumi.Input

	ToReferencesSpecEnrichmentDataOutput() ReferencesSpecEnrichmentDataOutput
	ToReferencesSpecEnrichmentDataOutputWithContext(context.Context) ReferencesSpecEnrichmentDataOutput
}

// All the enrichment data sources referenced in data flows
type ReferencesSpecEnrichmentDataArgs struct {
	// All the storage blobs used as enrichment data sources
	StorageBlobs StorageBlobArrayInput `pulumi:"storageBlobs"`
}

func (ReferencesSpecEnrichmentDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferencesSpecEnrichmentData)(nil)).Elem()
}

func (i ReferencesSpecEnrichmentDataArgs) ToReferencesSpecEnrichmentDataOutput() ReferencesSpecEnrichmentDataOutput {
	return i.ToReferencesSpecEnrichmentDataOutputWithContext(context.Background())
}

func (i ReferencesSpecEnrichmentDataArgs) ToReferencesSpecEnrichmentDataOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferencesSpecEnrichmentDataOutput)
}

func (i ReferencesSpecEnrichmentDataArgs) ToReferencesSpecEnrichmentDataPtrOutput() ReferencesSpecEnrichmentDataPtrOutput {
	return i.ToReferencesSpecEnrichmentDataPtrOutputWithContext(context.Background())
}

func (i ReferencesSpecEnrichmentDataArgs) ToReferencesSpecEnrichmentDataPtrOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferencesSpecEnrichmentDataOutput).ToReferencesSpecEnrichmentDataPtrOutputWithContext(ctx)
}

// ReferencesSpecEnrichmentDataPtrInput is an input type that accepts ReferencesSpecEnrichmentDataArgs, ReferencesSpecEnrichmentDataPtr and ReferencesSpecEnrichmentDataPtrOutput values.
// You can construct a concrete instance of `ReferencesSpecEnrichmentDataPtrInput` via:
//
//	        ReferencesSpecEnrichmentDataArgs{...}
//
//	or:
//
//	        nil
type ReferencesSpecEnrichmentDataPtrInput interface {
	pulumi.Input

	ToReferencesSpecEnrichmentDataPtrOutput() ReferencesSpecEnrichmentDataPtrOutput
	ToReferencesSpecEnrichmentDataPtrOutputWithContext(context.Context) ReferencesSpecEnrichmentDataPtrOutput
}

type referencesSpecEnrichmentDataPtrType ReferencesSpecEnrichmentDataArgs

func ReferencesSpecEnrichmentDataPtr(v *ReferencesSpecEnrichmentDataArgs) ReferencesSpecEnrichmentDataPtrInput {
	return (*referencesSpecEnrichmentDataPtrType)(v)
}

func (*referencesSpecEnrichmentDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferencesSpecEnrichmentData)(nil)).Elem()
}

func (i *referencesSpecEnrichmentDataPtrType) ToReferencesSpecEnrichmentDataPtrOutput() ReferencesSpecEnrichmentDataPtrOutput {
	return i.ToReferencesSpecEnrichmentDataPtrOutputWithContext(context.Background())
}

func (i *referencesSpecEnrichmentDataPtrType) ToReferencesSpecEnrichmentDataPtrOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferencesSpecEnrichmentDataPtrOutput)
}

// All the enrichment data sources referenced in data flows
type ReferencesSpecEnrichmentDataOutput struct{ *pulumi.OutputState }

func (ReferencesSpecEnrichmentDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferencesSpecEnrichmentData)(nil)).Elem()
}

func (o ReferencesSpecEnrichmentDataOutput) ToReferencesSpecEnrichmentDataOutput() ReferencesSpecEnrichmentDataOutput {
	return o
}

func (o ReferencesSpecEnrichmentDataOutput) ToReferencesSpecEnrichmentDataOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataOutput {
	return o
}

func (o ReferencesSpecEnrichmentDataOutput) ToReferencesSpecEnrichmentDataPtrOutput() ReferencesSpecEnrichmentDataPtrOutput {
	return o.ToReferencesSpecEnrichmentDataPtrOutputWithContext(context.Background())
}

func (o ReferencesSpecEnrichmentDataOutput) ToReferencesSpecEnrichmentDataPtrOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferencesSpecEnrichmentData) *ReferencesSpecEnrichmentData {
		return &v
	}).(ReferencesSpecEnrichmentDataPtrOutput)
}

// All the storage blobs used as enrichment data sources
func (o ReferencesSpecEnrichmentDataOutput) StorageBlobs() StorageBlobArrayOutput {
	return o.ApplyT(func(v ReferencesSpecEnrichmentData) []StorageBlob { return v.StorageBlobs }).(StorageBlobArrayOutput)
}

type ReferencesSpecEnrichmentDataPtrOutput struct{ *pulumi.OutputState }

func (ReferencesSpecEnrichmentDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferencesSpecEnrichmentData)(nil)).Elem()
}

func (o ReferencesSpecEnrichmentDataPtrOutput) ToReferencesSpecEnrichmentDataPtrOutput() ReferencesSpecEnrichmentDataPtrOutput {
	return o
}

func (o ReferencesSpecEnrichmentDataPtrOutput) ToReferencesSpecEnrichmentDataPtrOutputWithContext(ctx context.Context) ReferencesSpecEnrichmentDataPtrOutput {
	return o
}

func (o ReferencesSpecEnrichmentDataPtrOutput) Elem() ReferencesSpecEnrichmentDataOutput {
	return o.ApplyT(func(v *ReferencesSpecEnrichmentData) ReferencesSpecEnrichmentData {
		if v != nil {
			return *v
		}
		var ret ReferencesSpecEnrichmentData
		return ret
	}).(ReferencesSpecEnrichmentDataOutput)
}

// All the storage blobs used as enrichment data sources
func (o ReferencesSpecEnrichmentDataPtrOutput) StorageBlobs() StorageBlobArrayOutput {
	return o.ApplyT(func(v *ReferencesSpecEnrichmentData) []StorageBlob {
		if v == nil {
			return nil
		}
		return v.StorageBlobs
	}).(StorageBlobArrayOutput)
}

// All the enrichment data sources referenced in data flows
type ReferencesSpecResponseEnrichmentData struct {
	// All the storage blobs used as enrichment data sources
	StorageBlobs []StorageBlobResponse `pulumi:"storageBlobs"`
}

// All the enrichment data sources referenced in data flows
type ReferencesSpecResponseEnrichmentDataOutput struct{ *pulumi.OutputState }

func (ReferencesSpecResponseEnrichmentDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferencesSpecResponseEnrichmentData)(nil)).Elem()
}

func (o ReferencesSpecResponseEnrichmentDataOutput) ToReferencesSpecResponseEnrichmentDataOutput() ReferencesSpecResponseEnrichmentDataOutput {
	return o
}

func (o ReferencesSpecResponseEnrichmentDataOutput) ToReferencesSpecResponseEnrichmentDataOutputWithContext(ctx context.Context) ReferencesSpecResponseEnrichmentDataOutput {
	return o
}

// All the storage blobs used as enrichment data sources
func (o ReferencesSpecResponseEnrichmentDataOutput) StorageBlobs() StorageBlobResponseArrayOutput {
	return o.ApplyT(func(v ReferencesSpecResponseEnrichmentData) []StorageBlobResponse { return v.StorageBlobs }).(StorageBlobResponseArrayOutput)
}

type ReferencesSpecResponseEnrichmentDataPtrOutput struct{ *pulumi.OutputState }

func (ReferencesSpecResponseEnrichmentDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferencesSpecResponseEnrichmentData)(nil)).Elem()
}

func (o ReferencesSpecResponseEnrichmentDataPtrOutput) ToReferencesSpecResponseEnrichmentDataPtrOutput() ReferencesSpecResponseEnrichmentDataPtrOutput {
	return o
}

func (o ReferencesSpecResponseEnrichmentDataPtrOutput) ToReferencesSpecResponseEnrichmentDataPtrOutputWithContext(ctx context.Context) ReferencesSpecResponseEnrichmentDataPtrOutput {
	return o
}

func (o ReferencesSpecResponseEnrichmentDataPtrOutput) Elem() ReferencesSpecResponseEnrichmentDataOutput {
	return o.ApplyT(func(v *ReferencesSpecResponseEnrichmentData) ReferencesSpecResponseEnrichmentData {
		if v != nil {
			return *v
		}
		var ret ReferencesSpecResponseEnrichmentData
		return ret
	}).(ReferencesSpecResponseEnrichmentDataOutput)
}

// All the storage blobs used as enrichment data sources
func (o ReferencesSpecResponseEnrichmentDataPtrOutput) StorageBlobs() StorageBlobResponseArrayOutput {
	return o.ApplyT(func(v *ReferencesSpecResponseEnrichmentData) []StorageBlobResponse {
		if v == nil {
			return nil
		}
		return v.StorageBlobs
	}).(StorageBlobResponseArrayOutput)
}

type StorageBlob struct {
	// Url of the storage blob
	BlobUrl *string `pulumi:"blobUrl"`
	// The type of lookup to perform on the blob
	LookupType *string `pulumi:"lookupType"`
	// The name of the enrichment data source used as an alias when referencing this data source in data flows
	Name *string `pulumi:"name"`
	// Resource Id of the storage account that hosts the blob
	ResourceId *string `pulumi:"resourceId"`
}

// StorageBlobInput is an input type that accepts StorageBlobArgs and StorageBlobOutput values.
// You can construct a concrete instance of `StorageBlobInput` via:
//
//	StorageBlobArgs{...}
type StorageBlobInput interface {
	pulumi.Input

	ToStorageBlobOutput() StorageBlobOutput
	ToStorageBlobOutputWithContext(context.Context) StorageBlobOutput
}

type StorageBlobArgs struct {
	// Url of the storage blob
	BlobUrl pulumi.StringPtrInput `pulumi:"blobUrl"`
	// The type of lookup to perform on the blob
	LookupType pulumi.StringPtrInput `pulumi:"lookupType"`
	// The name of the enrichment data source used as an alias when referencing this data source in data flows
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Resource Id of the storage account that hosts the blob
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (StorageBlobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlob)(nil)).Elem()
}

func (i StorageBlobArgs) ToStorageBlobOutput() StorageBlobOutput {
	return i.ToStorageBlobOutputWithContext(context.Background())
}

func (i StorageBlobArgs) ToStorageBlobOutputWithContext(ctx context.Context) StorageBlobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobOutput)
}

// StorageBlobArrayInput is an input type that accepts StorageBlobArray and StorageBlobArrayOutput values.
// You can construct a concrete instance of `StorageBlobArrayInput` via:
//
//	StorageBlobArray{ StorageBlobArgs{...} }
type StorageBlobArrayInput interface {
	pulumi.Input

	ToStorageBlobArrayOutput() StorageBlobArrayOutput
	ToStorageBlobArrayOutputWithContext(context.Context) StorageBlobArrayOutput
}

type StorageBlobArray []StorageBlobInput

func (StorageBlobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlob)(nil)).Elem()
}

func (i StorageBlobArray) ToStorageBlobArrayOutput() StorageBlobArrayOutput {
	return i.ToStorageBlobArrayOutputWithContext(context.Background())
}

func (i StorageBlobArray) ToStorageBlobArrayOutputWithContext(ctx context.Context) StorageBlobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobArrayOutput)
}

type StorageBlobOutput struct{ *pulumi.OutputState }

func (StorageBlobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlob)(nil)).Elem()
}

func (o StorageBlobOutput) ToStorageBlobOutput() StorageBlobOutput {
	return o
}

func (o StorageBlobOutput) ToStorageBlobOutputWithContext(ctx context.Context) StorageBlobOutput {
	return o
}

// Url of the storage blob
func (o StorageBlobOutput) BlobUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlob) *string { return v.BlobUrl }).(pulumi.StringPtrOutput)
}

// The type of lookup to perform on the blob
func (o StorageBlobOutput) LookupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlob) *string { return v.LookupType }).(pulumi.StringPtrOutput)
}

// The name of the enrichment data source used as an alias when referencing this data source in data flows
func (o StorageBlobOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlob) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource Id of the storage account that hosts the blob
func (o StorageBlobOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlob) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlob)(nil)).Elem()
}

func (o StorageBlobArrayOutput) ToStorageBlobArrayOutput() StorageBlobArrayOutput {
	return o
}

func (o StorageBlobArrayOutput) ToStorageBlobArrayOutputWithContext(ctx context.Context) StorageBlobArrayOutput {
	return o
}

func (o StorageBlobArrayOutput) Index(i pulumi.IntInput) StorageBlobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlob {
		return vs[0].([]StorageBlob)[vs[1].(int)]
	}).(StorageBlobOutput)
}

type StorageBlobDestination struct {
	// The container name of the Storage Blob.
	ContainerName *string `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

// StorageBlobDestinationInput is an input type that accepts StorageBlobDestinationArgs and StorageBlobDestinationOutput values.
// You can construct a concrete instance of `StorageBlobDestinationInput` via:
//
//	StorageBlobDestinationArgs{...}
type StorageBlobDestinationInput interface {
	pulumi.Input

	ToStorageBlobDestinationOutput() StorageBlobDestinationOutput
	ToStorageBlobDestinationOutputWithContext(context.Context) StorageBlobDestinationOutput
}

type StorageBlobDestinationArgs struct {
	// The container name of the Storage Blob.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
}

func (StorageBlobDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestination)(nil)).Elem()
}

func (i StorageBlobDestinationArgs) ToStorageBlobDestinationOutput() StorageBlobDestinationOutput {
	return i.ToStorageBlobDestinationOutputWithContext(context.Background())
}

func (i StorageBlobDestinationArgs) ToStorageBlobDestinationOutputWithContext(ctx context.Context) StorageBlobDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDestinationOutput)
}

// StorageBlobDestinationArrayInput is an input type that accepts StorageBlobDestinationArray and StorageBlobDestinationArrayOutput values.
// You can construct a concrete instance of `StorageBlobDestinationArrayInput` via:
//
//	StorageBlobDestinationArray{ StorageBlobDestinationArgs{...} }
type StorageBlobDestinationArrayInput interface {
	pulumi.Input

	ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput
	ToStorageBlobDestinationArrayOutputWithContext(context.Context) StorageBlobDestinationArrayOutput
}

type StorageBlobDestinationArray []StorageBlobDestinationInput

func (StorageBlobDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestination)(nil)).Elem()
}

func (i StorageBlobDestinationArray) ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput {
	return i.ToStorageBlobDestinationArrayOutputWithContext(context.Background())
}

func (i StorageBlobDestinationArray) ToStorageBlobDestinationArrayOutputWithContext(ctx context.Context) StorageBlobDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDestinationArrayOutput)
}

type StorageBlobDestinationOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestination)(nil)).Elem()
}

func (o StorageBlobDestinationOutput) ToStorageBlobDestinationOutput() StorageBlobDestinationOutput {
	return o
}

func (o StorageBlobDestinationOutput) ToStorageBlobDestinationOutputWithContext(ctx context.Context) StorageBlobDestinationOutput {
	return o
}

// The container name of the Storage Blob.
func (o StorageBlobDestinationOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageBlobDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageBlobDestinationOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDestinationArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestination)(nil)).Elem()
}

func (o StorageBlobDestinationArrayOutput) ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput {
	return o
}

func (o StorageBlobDestinationArrayOutput) ToStorageBlobDestinationArrayOutputWithContext(ctx context.Context) StorageBlobDestinationArrayOutput {
	return o
}

func (o StorageBlobDestinationArrayOutput) Index(i pulumi.IntInput) StorageBlobDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlobDestination {
		return vs[0].([]StorageBlobDestination)[vs[1].(int)]
	}).(StorageBlobDestinationOutput)
}

type StorageBlobDestinationResponse struct {
	// The container name of the Storage Blob.
	ContainerName *string `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

type StorageBlobDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDestinationResponseOutput) ToStorageBlobDestinationResponseOutput() StorageBlobDestinationResponseOutput {
	return o
}

func (o StorageBlobDestinationResponseOutput) ToStorageBlobDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDestinationResponseOutput {
	return o
}

// The container name of the Storage Blob.
func (o StorageBlobDestinationResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageBlobDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageBlobDestinationResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDestinationResponseArrayOutput) ToStorageBlobDestinationResponseArrayOutput() StorageBlobDestinationResponseArrayOutput {
	return o
}

func (o StorageBlobDestinationResponseArrayOutput) ToStorageBlobDestinationResponseArrayOutputWithContext(ctx context.Context) StorageBlobDestinationResponseArrayOutput {
	return o
}

func (o StorageBlobDestinationResponseArrayOutput) Index(i pulumi.IntInput) StorageBlobDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlobDestinationResponse {
		return vs[0].([]StorageBlobDestinationResponse)[vs[1].(int)]
	}).(StorageBlobDestinationResponseOutput)
}

type StorageBlobResponse struct {
	// Url of the storage blob
	BlobUrl *string `pulumi:"blobUrl"`
	// The type of lookup to perform on the blob
	LookupType *string `pulumi:"lookupType"`
	// The name of the enrichment data source used as an alias when referencing this data source in data flows
	Name *string `pulumi:"name"`
	// Resource Id of the storage account that hosts the blob
	ResourceId *string `pulumi:"resourceId"`
}

type StorageBlobResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobResponse)(nil)).Elem()
}

func (o StorageBlobResponseOutput) ToStorageBlobResponseOutput() StorageBlobResponseOutput {
	return o
}

func (o StorageBlobResponseOutput) ToStorageBlobResponseOutputWithContext(ctx context.Context) StorageBlobResponseOutput {
	return o
}

// Url of the storage blob
func (o StorageBlobResponseOutput) BlobUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobResponse) *string { return v.BlobUrl }).(pulumi.StringPtrOutput)
}

// The type of lookup to perform on the blob
func (o StorageBlobResponseOutput) LookupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobResponse) *string { return v.LookupType }).(pulumi.StringPtrOutput)
}

// The name of the enrichment data source used as an alias when referencing this data source in data flows
func (o StorageBlobResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Resource Id of the storage account that hosts the blob
func (o StorageBlobResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobResponse)(nil)).Elem()
}

func (o StorageBlobResponseArrayOutput) ToStorageBlobResponseArrayOutput() StorageBlobResponseArrayOutput {
	return o
}

func (o StorageBlobResponseArrayOutput) ToStorageBlobResponseArrayOutputWithContext(ctx context.Context) StorageBlobResponseArrayOutput {
	return o
}

func (o StorageBlobResponseArrayOutput) Index(i pulumi.IntInput) StorageBlobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlobResponse {
		return vs[0].([]StorageBlobResponse)[vs[1].(int)]
	}).(StorageBlobResponseOutput)
}

type StorageTableDestination struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName *string `pulumi:"tableName"`
}

// StorageTableDestinationInput is an input type that accepts StorageTableDestinationArgs and StorageTableDestinationOutput values.
// You can construct a concrete instance of `StorageTableDestinationInput` via:
//
//	StorageTableDestinationArgs{...}
type StorageTableDestinationInput interface {
	pulumi.Input

	ToStorageTableDestinationOutput() StorageTableDestinationOutput
	ToStorageTableDestinationOutputWithContext(context.Context) StorageTableDestinationOutput
}

type StorageTableDestinationArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
}

func (StorageTableDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestination)(nil)).Elem()
}

func (i StorageTableDestinationArgs) ToStorageTableDestinationOutput() StorageTableDestinationOutput {
	return i.ToStorageTableDestinationOutputWithContext(context.Background())
}

func (i StorageTableDestinationArgs) ToStorageTableDestinationOutputWithContext(ctx context.Context) StorageTableDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageTableDestinationOutput)
}

// StorageTableDestinationArrayInput is an input type that accepts StorageTableDestinationArray and StorageTableDestinationArrayOutput values.
// You can construct a concrete instance of `StorageTableDestinationArrayInput` via:
//
//	StorageTableDestinationArray{ StorageTableDestinationArgs{...} }
type StorageTableDestinationArrayInput interface {
	pulumi.Input

	ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput
	ToStorageTableDestinationArrayOutputWithContext(context.Context) StorageTableDestinationArrayOutput
}

type StorageTableDestinationArray []StorageTableDestinationInput

func (StorageTableDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestination)(nil)).Elem()
}

func (i StorageTableDestinationArray) ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput {
	return i.ToStorageTableDestinationArrayOutputWithContext(context.Background())
}

func (i StorageTableDestinationArray) ToStorageTableDestinationArrayOutputWithContext(ctx context.Context) StorageTableDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageTableDestinationArrayOutput)
}

type StorageTableDestinationOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestination)(nil)).Elem()
}

func (o StorageTableDestinationOutput) ToStorageTableDestinationOutput() StorageTableDestinationOutput {
	return o
}

func (o StorageTableDestinationOutput) ToStorageTableDestinationOutputWithContext(ctx context.Context) StorageTableDestinationOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageTableDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageTableDestinationOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

// The name of the Storage Table.
func (o StorageTableDestinationOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type StorageTableDestinationArrayOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestination)(nil)).Elem()
}

func (o StorageTableDestinationArrayOutput) ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput {
	return o
}

func (o StorageTableDestinationArrayOutput) ToStorageTableDestinationArrayOutputWithContext(ctx context.Context) StorageTableDestinationArrayOutput {
	return o
}

func (o StorageTableDestinationArrayOutput) Index(i pulumi.IntInput) StorageTableDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageTableDestination {
		return vs[0].([]StorageTableDestination)[vs[1].(int)]
	}).(StorageTableDestinationOutput)
}

type StorageTableDestinationResponse struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName *string `pulumi:"tableName"`
}

type StorageTableDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestinationResponse)(nil)).Elem()
}

func (o StorageTableDestinationResponseOutput) ToStorageTableDestinationResponseOutput() StorageTableDestinationResponseOutput {
	return o
}

func (o StorageTableDestinationResponseOutput) ToStorageTableDestinationResponseOutputWithContext(ctx context.Context) StorageTableDestinationResponseOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageTableDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageTableDestinationResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

// The name of the Storage Table.
func (o StorageTableDestinationResponseOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type StorageTableDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestinationResponse)(nil)).Elem()
}

func (o StorageTableDestinationResponseArrayOutput) ToStorageTableDestinationResponseArrayOutput() StorageTableDestinationResponseArrayOutput {
	return o
}

func (o StorageTableDestinationResponseArrayOutput) ToStorageTableDestinationResponseArrayOutputWithContext(ctx context.Context) StorageTableDestinationResponseArrayOutput {
	return o
}

func (o StorageTableDestinationResponseArrayOutput) Index(i pulumi.IntInput) StorageTableDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageTableDestinationResponse {
		return vs[0].([]StorageTableDestinationResponse)[vs[1].(int)]
	}).(StorageTableDestinationResponseOutput)
}

// Declaration of a custom stream.
type StreamDeclaration struct {
	// List of columns used by data in this stream.
	Columns []ColumnDefinition `pulumi:"columns"`
}

// StreamDeclarationInput is an input type that accepts StreamDeclarationArgs and StreamDeclarationOutput values.
// You can construct a concrete instance of `StreamDeclarationInput` via:
//
//	StreamDeclarationArgs{...}
type StreamDeclarationInput interface {
	pulumi.Input

	ToStreamDeclarationOutput() StreamDeclarationOutput
	ToStreamDeclarationOutputWithContext(context.Context) StreamDeclarationOutput
}

// Declaration of a custom stream.
type StreamDeclarationArgs struct {
	// List of columns used by data in this stream.
	Columns ColumnDefinitionArrayInput `pulumi:"columns"`
}

func (StreamDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclaration)(nil)).Elem()
}

func (i StreamDeclarationArgs) ToStreamDeclarationOutput() StreamDeclarationOutput {
	return i.ToStreamDeclarationOutputWithContext(context.Background())
}

func (i StreamDeclarationArgs) ToStreamDeclarationOutputWithContext(ctx context.Context) StreamDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDeclarationOutput)
}

// StreamDeclarationMapInput is an input type that accepts StreamDeclarationMap and StreamDeclarationMapOutput values.
// You can construct a concrete instance of `StreamDeclarationMapInput` via:
//
//	StreamDeclarationMap{ "key": StreamDeclarationArgs{...} }
type StreamDeclarationMapInput interface {
	pulumi.Input

	ToStreamDeclarationMapOutput() StreamDeclarationMapOutput
	ToStreamDeclarationMapOutputWithContext(context.Context) StreamDeclarationMapOutput
}

type StreamDeclarationMap map[string]StreamDeclarationInput

func (StreamDeclarationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclaration)(nil)).Elem()
}

func (i StreamDeclarationMap) ToStreamDeclarationMapOutput() StreamDeclarationMapOutput {
	return i.ToStreamDeclarationMapOutputWithContext(context.Background())
}

func (i StreamDeclarationMap) ToStreamDeclarationMapOutputWithContext(ctx context.Context) StreamDeclarationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDeclarationMapOutput)
}

// Declaration of a custom stream.
type StreamDeclarationOutput struct{ *pulumi.OutputState }

func (StreamDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclaration)(nil)).Elem()
}

func (o StreamDeclarationOutput) ToStreamDeclarationOutput() StreamDeclarationOutput {
	return o
}

func (o StreamDeclarationOutput) ToStreamDeclarationOutputWithContext(ctx context.Context) StreamDeclarationOutput {
	return o
}

// List of columns used by data in this stream.
func (o StreamDeclarationOutput) Columns() ColumnDefinitionArrayOutput {
	return o.ApplyT(func(v StreamDeclaration) []ColumnDefinition { return v.Columns }).(ColumnDefinitionArrayOutput)
}

type StreamDeclarationMapOutput struct{ *pulumi.OutputState }

func (StreamDeclarationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclaration)(nil)).Elem()
}

func (o StreamDeclarationMapOutput) ToStreamDeclarationMapOutput() StreamDeclarationMapOutput {
	return o
}

func (o StreamDeclarationMapOutput) ToStreamDeclarationMapOutputWithContext(ctx context.Context) StreamDeclarationMapOutput {
	return o
}

func (o StreamDeclarationMapOutput) MapIndex(k pulumi.StringInput) StreamDeclarationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamDeclaration {
		return vs[0].(map[string]StreamDeclaration)[vs[1].(string)]
	}).(StreamDeclarationOutput)
}

// Declaration of a custom stream.
type StreamDeclarationResponse struct {
	// List of columns used by data in this stream.
	Columns []ColumnDefinitionResponse `pulumi:"columns"`
}

// Declaration of a custom stream.
type StreamDeclarationResponseOutput struct{ *pulumi.OutputState }

func (StreamDeclarationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclarationResponse)(nil)).Elem()
}

func (o StreamDeclarationResponseOutput) ToStreamDeclarationResponseOutput() StreamDeclarationResponseOutput {
	return o
}

func (o StreamDeclarationResponseOutput) ToStreamDeclarationResponseOutputWithContext(ctx context.Context) StreamDeclarationResponseOutput {
	return o
}

// List of columns used by data in this stream.
func (o StreamDeclarationResponseOutput) Columns() ColumnDefinitionResponseArrayOutput {
	return o.ApplyT(func(v StreamDeclarationResponse) []ColumnDefinitionResponse { return v.Columns }).(ColumnDefinitionResponseArrayOutput)
}

type StreamDeclarationResponseMapOutput struct{ *pulumi.OutputState }

func (StreamDeclarationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclarationResponse)(nil)).Elem()
}

func (o StreamDeclarationResponseMapOutput) ToStreamDeclarationResponseMapOutput() StreamDeclarationResponseMapOutput {
	return o
}

func (o StreamDeclarationResponseMapOutput) ToStreamDeclarationResponseMapOutputWithContext(ctx context.Context) StreamDeclarationResponseMapOutput {
	return o
}

func (o StreamDeclarationResponseMapOutput) MapIndex(k pulumi.StringInput) StreamDeclarationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamDeclarationResponse {
		return vs[0].(map[string]StreamDeclarationResponse)[vs[1].(string)]
	}).(StreamDeclarationResponseOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSource struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// SyslogDataSourceInput is an input type that accepts SyslogDataSourceArgs and SyslogDataSourceOutput values.
// You can construct a concrete instance of `SyslogDataSourceInput` via:
//
//	SyslogDataSourceArgs{...}
type SyslogDataSourceInput interface {
	pulumi.Input

	ToSyslogDataSourceOutput() SyslogDataSourceOutput
	ToSyslogDataSourceOutputWithContext(context.Context) SyslogDataSourceOutput
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceArgs struct {
	// The list of facility names.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (SyslogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return i.ToSyslogDataSourceOutputWithContext(context.Background())
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceOutput)
}

// SyslogDataSourceArrayInput is an input type that accepts SyslogDataSourceArray and SyslogDataSourceArrayOutput values.
// You can construct a concrete instance of `SyslogDataSourceArrayInput` via:
//
//	SyslogDataSourceArray{ SyslogDataSourceArgs{...} }
type SyslogDataSourceArrayInput interface {
	pulumi.Input

	ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput
	ToSyslogDataSourceArrayOutputWithContext(context.Context) SyslogDataSourceArrayOutput
}

type SyslogDataSourceArray []SyslogDataSourceInput

func (SyslogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return i.ToSyslogDataSourceArrayOutputWithContext(context.Background())
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceArrayOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return o
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o SyslogDataSourceOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSource) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type SyslogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSource {
		return vs[0].([]SyslogDataSource)[vs[1].(int)]
	}).(SyslogDataSourceOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponse struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutput() SyslogDataSourceResponseOutput {
	return o
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutputWithContext(ctx context.Context) SyslogDataSourceResponseOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceResponseOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceResponseOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o SyslogDataSourceResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type SyslogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutput() SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutputWithContext(ctx context.Context) SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSourceResponse {
		return vs[0].([]SyslogDataSourceResponse)[vs[1].(int)]
	}).(SyslogDataSourceResponseOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// WindowsEventLogDataSourceInput is an input type that accepts WindowsEventLogDataSourceArgs and WindowsEventLogDataSourceOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceInput` via:
//
//	WindowsEventLogDataSourceArgs{...}
type WindowsEventLogDataSourceInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput
	ToWindowsEventLogDataSourceOutputWithContext(context.Context) WindowsEventLogDataSourceOutput
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (WindowsEventLogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return i.ToWindowsEventLogDataSourceOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceOutput)
}

// WindowsEventLogDataSourceArrayInput is an input type that accepts WindowsEventLogDataSourceArray and WindowsEventLogDataSourceArrayOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceArrayInput` via:
//
//	WindowsEventLogDataSourceArray{ WindowsEventLogDataSourceArgs{...} }
type WindowsEventLogDataSourceArrayInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput
	ToWindowsEventLogDataSourceArrayOutputWithContext(context.Context) WindowsEventLogDataSourceArrayOutput
}

type WindowsEventLogDataSourceArray []WindowsEventLogDataSourceInput

func (WindowsEventLogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return i.ToWindowsEventLogDataSourceArrayOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceArrayOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return o
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o WindowsEventLogDataSourceOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSource {
		return vs[0].([]WindowsEventLogDataSource)[vs[1].(int)]
	}).(WindowsEventLogDataSourceOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform the data source.
	TransformKql *string `pulumi:"transformKql"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutput() WindowsEventLogDataSourceResponseOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform the data source.
func (o WindowsEventLogDataSourceResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceResponseOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutput() WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSourceResponse {
		return vs[0].([]WindowsEventLogDataSourceResponse)[vs[1].(int)]
	}).(WindowsEventLogDataSourceResponseOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// Firewall logs profile filter
	ProfileFilter []string `pulumi:"profileFilter"`
	// Firewall logs streams
	Streams []string `pulumi:"streams"`
}

// WindowsFirewallLogsDataSourceInput is an input type that accepts WindowsFirewallLogsDataSourceArgs and WindowsFirewallLogsDataSourceOutput values.
// You can construct a concrete instance of `WindowsFirewallLogsDataSourceInput` via:
//
//	WindowsFirewallLogsDataSourceArgs{...}
type WindowsFirewallLogsDataSourceInput interface {
	pulumi.Input

	ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput
	ToWindowsFirewallLogsDataSourceOutputWithContext(context.Context) WindowsFirewallLogsDataSourceOutput
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Firewall logs profile filter
	ProfileFilter pulumi.StringArrayInput `pulumi:"profileFilter"`
	// Firewall logs streams
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (WindowsFirewallLogsDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (i WindowsFirewallLogsDataSourceArgs) ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput {
	return i.ToWindowsFirewallLogsDataSourceOutputWithContext(context.Background())
}

func (i WindowsFirewallLogsDataSourceArgs) ToWindowsFirewallLogsDataSourceOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsFirewallLogsDataSourceOutput)
}

// WindowsFirewallLogsDataSourceArrayInput is an input type that accepts WindowsFirewallLogsDataSourceArray and WindowsFirewallLogsDataSourceArrayOutput values.
// You can construct a concrete instance of `WindowsFirewallLogsDataSourceArrayInput` via:
//
//	WindowsFirewallLogsDataSourceArray{ WindowsFirewallLogsDataSourceArgs{...} }
type WindowsFirewallLogsDataSourceArrayInput interface {
	pulumi.Input

	ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput
	ToWindowsFirewallLogsDataSourceArrayOutputWithContext(context.Context) WindowsFirewallLogsDataSourceArrayOutput
}

type WindowsFirewallLogsDataSourceArray []WindowsFirewallLogsDataSourceInput

func (WindowsFirewallLogsDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (i WindowsFirewallLogsDataSourceArray) ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput {
	return i.ToWindowsFirewallLogsDataSourceArrayOutputWithContext(context.Background())
}

func (i WindowsFirewallLogsDataSourceArray) ToWindowsFirewallLogsDataSourceArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsFirewallLogsDataSourceArrayOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceOutput) ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceOutput) ToWindowsFirewallLogsDataSourceOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsFirewallLogsDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Firewall logs profile filter
func (o WindowsFirewallLogsDataSourceOutput) ProfileFilter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSource) []string { return v.ProfileFilter }).(pulumi.StringArrayOutput)
}

// Firewall logs streams
func (o WindowsFirewallLogsDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type WindowsFirewallLogsDataSourceArrayOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceArrayOutput) ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceArrayOutput) ToWindowsFirewallLogsDataSourceArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceArrayOutput) Index(i pulumi.IntInput) WindowsFirewallLogsDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsFirewallLogsDataSource {
		return vs[0].([]WindowsFirewallLogsDataSource)[vs[1].(int)]
	}).(WindowsFirewallLogsDataSourceOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// Firewall logs profile filter
	ProfileFilter []string `pulumi:"profileFilter"`
	// Firewall logs streams
	Streams []string `pulumi:"streams"`
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceResponseOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSourceResponse)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceResponseOutput) ToWindowsFirewallLogsDataSourceResponseOutput() WindowsFirewallLogsDataSourceResponseOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseOutput) ToWindowsFirewallLogsDataSourceResponseOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsFirewallLogsDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Firewall logs profile filter
func (o WindowsFirewallLogsDataSourceResponseOutput) ProfileFilter() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSourceResponse) []string { return v.ProfileFilter }).(pulumi.StringArrayOutput)
}

// Firewall logs streams
func (o WindowsFirewallLogsDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type WindowsFirewallLogsDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSourceResponse)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) ToWindowsFirewallLogsDataSourceResponseArrayOutput() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) ToWindowsFirewallLogsDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) Index(i pulumi.IntInput) WindowsFirewallLogsDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsFirewallLogsDataSourceResponse {
		return vs[0].([]WindowsFirewallLogsDataSourceResponse)[vs[1].(int)]
	}).(WindowsFirewallLogsDataSourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AdxDestinationOutput{})
	pulumi.RegisterOutputType(AdxDestinationArrayOutput{})
	pulumi.RegisterOutputType(AdxDestinationResponseOutput{})
	pulumi.RegisterOutputType(AdxDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(AgentSettingOutput{})
	pulumi.RegisterOutputType(AgentSettingArrayOutput{})
	pulumi.RegisterOutputType(AgentSettingResponseOutput{})
	pulumi.RegisterOutputType(AgentSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionArrayOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointNetworkAclsOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseConfigurationAccessOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseConfigurationAccessPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseFailoverConfigurationOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseLogsIngestionOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseLogsIngestionPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetricsIngestionOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetricsIngestionPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseNetworkAclsOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAgentSettingsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAgentSettingsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAssociationResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleReferencesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleReferencesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseAgentSettingsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseAgentSettingsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseEndpointsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseReferencesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseReferencesPtrOutput{})
	pulumi.RegisterOutputType(DataFlowOutput{})
	pulumi.RegisterOutputType(DataFlowArrayOutput{})
	pulumi.RegisterOutputType(DataFlowResponseOutput{})
	pulumi.RegisterOutputType(DataFlowResponseArrayOutput{})
	pulumi.RegisterOutputType(DataImportSourcesEventHubOutput{})
	pulumi.RegisterOutputType(DataImportSourcesEventHubPtrOutput{})
	pulumi.RegisterOutputType(DataImportSourcesResponseEventHubOutput{})
	pulumi.RegisterOutputType(DataImportSourcesResponseEventHubPtrOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecDataImportsOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecDataImportsPtrOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecResponseDataImportsOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecResponseDataImportsPtrOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(EventHubDestinationOutput{})
	pulumi.RegisterOutputType(EventHubDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventHubDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventHubDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceArrayOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceArrayOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceResponseOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(LocationSpecResponseOutput{})
	pulumi.RegisterOutputType(LocationSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(LogFileSettingsResponseTextOutput{})
	pulumi.RegisterOutputType(LogFileSettingsResponseTextPtrOutput{})
	pulumi.RegisterOutputType(LogFileSettingsTextOutput{})
	pulumi.RegisterOutputType(LogFileSettingsTextPtrOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceArrayOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseSettingsOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceSettingsOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceSettingsPtrOutput{})
	pulumi.RegisterOutputType(MicrosoftFabricDestinationOutput{})
	pulumi.RegisterOutputType(MicrosoftFabricDestinationArrayOutput{})
	pulumi.RegisterOutputType(MicrosoftFabricDestinationResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftFabricDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationArrayOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationResponseOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ReferencesSpecEnrichmentDataOutput{})
	pulumi.RegisterOutputType(ReferencesSpecEnrichmentDataPtrOutput{})
	pulumi.RegisterOutputType(ReferencesSpecResponseEnrichmentDataOutput{})
	pulumi.RegisterOutputType(ReferencesSpecResponseEnrichmentDataPtrOutput{})
	pulumi.RegisterOutputType(StorageBlobOutput{})
	pulumi.RegisterOutputType(StorageBlobArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationArrayOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamDeclarationOutput{})
	pulumi.RegisterOutputType(StreamDeclarationMapOutput{})
	pulumi.RegisterOutputType(StreamDeclarationResponseOutput{})
	pulumi.RegisterOutputType(StreamDeclarationResponseMapOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceArrayOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceResponseOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceResponseArrayOutput{})
}
