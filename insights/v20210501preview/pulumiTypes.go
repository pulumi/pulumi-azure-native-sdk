// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettings struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
}

// LogSettingsInput is an input type that accepts LogSettingsArgs and LogSettingsOutput values.
// You can construct a concrete instance of `LogSettingsInput` via:
//
//	LogSettingsArgs{...}
type LogSettingsInput interface {
	pulumi.Input

	ToLogSettingsOutput() LogSettingsOutput
	ToLogSettingsOutputWithContext(context.Context) LogSettingsOutput
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsArgs struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy RetentionPolicyPtrInput `pulumi:"retentionPolicy"`
}

func (LogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (i LogSettingsArgs) ToLogSettingsOutput() LogSettingsOutput {
	return i.ToLogSettingsOutputWithContext(context.Background())
}

func (i LogSettingsArgs) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsOutput)
}

func (i LogSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[LogSettings] {
	return pulumix.Output[LogSettings]{
		OutputState: i.ToLogSettingsOutputWithContext(ctx).OutputState,
	}
}

// LogSettingsArrayInput is an input type that accepts LogSettingsArray and LogSettingsArrayOutput values.
// You can construct a concrete instance of `LogSettingsArrayInput` via:
//
//	LogSettingsArray{ LogSettingsArgs{...} }
type LogSettingsArrayInput interface {
	pulumi.Input

	ToLogSettingsArrayOutput() LogSettingsArrayOutput
	ToLogSettingsArrayOutputWithContext(context.Context) LogSettingsArrayOutput
}

type LogSettingsArray []LogSettingsInput

func (LogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettings)(nil)).Elem()
}

func (i LogSettingsArray) ToLogSettingsArrayOutput() LogSettingsArrayOutput {
	return i.ToLogSettingsArrayOutputWithContext(context.Background())
}

func (i LogSettingsArray) ToLogSettingsArrayOutputWithContext(ctx context.Context) LogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsArrayOutput)
}

func (i LogSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]LogSettings] {
	return pulumix.Output[[]LogSettings]{
		OutputState: i.ToLogSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsOutput struct{ *pulumi.OutputState }

func (LogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (o LogSettingsOutput) ToLogSettingsOutput() LogSettingsOutput {
	return o
}

func (o LogSettingsOutput) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return o
}

func (o LogSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[LogSettings] {
	return pulumix.Output[LogSettings]{
		OutputState: o.OutputState,
	}
}

// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o LogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this log.
func (o LogSettingsOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v LogSettings) *RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyPtrOutput)
}

type LogSettingsArrayOutput struct{ *pulumi.OutputState }

func (LogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettings)(nil)).Elem()
}

func (o LogSettingsArrayOutput) ToLogSettingsArrayOutput() LogSettingsArrayOutput {
	return o
}

func (o LogSettingsArrayOutput) ToLogSettingsArrayOutputWithContext(ctx context.Context) LogSettingsArrayOutput {
	return o
}

func (o LogSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LogSettings] {
	return pulumix.Output[[]LogSettings]{
		OutputState: o.OutputState,
	}
}

func (o LogSettingsArrayOutput) Index(i pulumi.IntInput) LogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogSettings {
		return vs[0].([]LogSettings)[vs[1].(int)]
	}).(LogSettingsOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsResponse struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsResponseOutput struct{ *pulumi.OutputState }

func (LogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutput() LogSettingsResponseOutput {
	return o
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutputWithContext(ctx context.Context) LogSettingsResponseOutput {
	return o
}

func (o LogSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LogSettingsResponse] {
	return pulumix.Output[LogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o LogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this log.
func (o LogSettingsResponseOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponsePtrOutput)
}

type LogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (LogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponseArrayOutput) ToLogSettingsResponseArrayOutput() LogSettingsResponseArrayOutput {
	return o
}

func (o LogSettingsResponseArrayOutput) ToLogSettingsResponseArrayOutputWithContext(ctx context.Context) LogSettingsResponseArrayOutput {
	return o
}

func (o LogSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LogSettingsResponse] {
	return pulumix.Output[[]LogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o LogSettingsResponseArrayOutput) Index(i pulumi.IntInput) LogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogSettingsResponse {
		return vs[0].([]LogSettingsResponse)[vs[1].(int)]
	}).(LogSettingsResponseOutput)
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettings struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// ManagementGroupLogSettingsInput is an input type that accepts ManagementGroupLogSettingsArgs and ManagementGroupLogSettingsOutput values.
// You can construct a concrete instance of `ManagementGroupLogSettingsInput` via:
//
//	ManagementGroupLogSettingsArgs{...}
type ManagementGroupLogSettingsInput interface {
	pulumi.Input

	ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput
	ToManagementGroupLogSettingsOutputWithContext(context.Context) ManagementGroupLogSettingsOutput
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsArgs struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ManagementGroupLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettings)(nil)).Elem()
}

func (i ManagementGroupLogSettingsArgs) ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput {
	return i.ToManagementGroupLogSettingsOutputWithContext(context.Background())
}

func (i ManagementGroupLogSettingsArgs) ToManagementGroupLogSettingsOutputWithContext(ctx context.Context) ManagementGroupLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupLogSettingsOutput)
}

func (i ManagementGroupLogSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[ManagementGroupLogSettings] {
	return pulumix.Output[ManagementGroupLogSettings]{
		OutputState: i.ToManagementGroupLogSettingsOutputWithContext(ctx).OutputState,
	}
}

// ManagementGroupLogSettingsArrayInput is an input type that accepts ManagementGroupLogSettingsArray and ManagementGroupLogSettingsArrayOutput values.
// You can construct a concrete instance of `ManagementGroupLogSettingsArrayInput` via:
//
//	ManagementGroupLogSettingsArray{ ManagementGroupLogSettingsArgs{...} }
type ManagementGroupLogSettingsArrayInput interface {
	pulumi.Input

	ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput
	ToManagementGroupLogSettingsArrayOutputWithContext(context.Context) ManagementGroupLogSettingsArrayOutput
}

type ManagementGroupLogSettingsArray []ManagementGroupLogSettingsInput

func (ManagementGroupLogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettings)(nil)).Elem()
}

func (i ManagementGroupLogSettingsArray) ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput {
	return i.ToManagementGroupLogSettingsArrayOutputWithContext(context.Background())
}

func (i ManagementGroupLogSettingsArray) ToManagementGroupLogSettingsArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupLogSettingsArrayOutput)
}

func (i ManagementGroupLogSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]ManagementGroupLogSettings] {
	return pulumix.Output[[]ManagementGroupLogSettings]{
		OutputState: i.ToManagementGroupLogSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettings)(nil)).Elem()
}

func (o ManagementGroupLogSettingsOutput) ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput {
	return o
}

func (o ManagementGroupLogSettingsOutput) ToManagementGroupLogSettingsOutputWithContext(ctx context.Context) ManagementGroupLogSettingsOutput {
	return o
}

func (o ManagementGroupLogSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[ManagementGroupLogSettings] {
	return pulumix.Output[ManagementGroupLogSettings]{
		OutputState: o.OutputState,
	}
}

// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o ManagementGroupLogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagementGroupLogSettingsArrayOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettings)(nil)).Elem()
}

func (o ManagementGroupLogSettingsArrayOutput) ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsArrayOutput) ToManagementGroupLogSettingsArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ManagementGroupLogSettings] {
	return pulumix.Output[[]ManagementGroupLogSettings]{
		OutputState: o.OutputState,
	}
}

func (o ManagementGroupLogSettingsArrayOutput) Index(i pulumi.IntInput) ManagementGroupLogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementGroupLogSettings {
		return vs[0].([]ManagementGroupLogSettings)[vs[1].(int)]
	}).(ManagementGroupLogSettingsOutput)
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsResponse struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettingsResponse)(nil)).Elem()
}

func (o ManagementGroupLogSettingsResponseOutput) ToManagementGroupLogSettingsResponseOutput() ManagementGroupLogSettingsResponseOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseOutput) ToManagementGroupLogSettingsResponseOutputWithContext(ctx context.Context) ManagementGroupLogSettingsResponseOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagementGroupLogSettingsResponse] {
	return pulumix.Output[ManagementGroupLogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o ManagementGroupLogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagementGroupLogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettingsResponse)(nil)).Elem()
}

func (o ManagementGroupLogSettingsResponseArrayOutput) ToManagementGroupLogSettingsResponseArrayOutput() ManagementGroupLogSettingsResponseArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseArrayOutput) ToManagementGroupLogSettingsResponseArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsResponseArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ManagementGroupLogSettingsResponse] {
	return pulumix.Output[[]ManagementGroupLogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagementGroupLogSettingsResponseArrayOutput) Index(i pulumi.IntInput) ManagementGroupLogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementGroupLogSettingsResponse {
		return vs[0].([]ManagementGroupLogSettingsResponse)[vs[1].(int)]
	}).(ManagementGroupLogSettingsResponseOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettings struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain *string `pulumi:"timeGrain"`
}

// MetricSettingsInput is an input type that accepts MetricSettingsArgs and MetricSettingsOutput values.
// You can construct a concrete instance of `MetricSettingsInput` via:
//
//	MetricSettingsArgs{...}
type MetricSettingsInput interface {
	pulumi.Input

	ToMetricSettingsOutput() MetricSettingsOutput
	ToMetricSettingsOutputWithContext(context.Context) MetricSettingsOutput
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsArgs struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy RetentionPolicyPtrInput `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain pulumi.StringPtrInput `pulumi:"timeGrain"`
}

func (MetricSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettings)(nil)).Elem()
}

func (i MetricSettingsArgs) ToMetricSettingsOutput() MetricSettingsOutput {
	return i.ToMetricSettingsOutputWithContext(context.Background())
}

func (i MetricSettingsArgs) ToMetricSettingsOutputWithContext(ctx context.Context) MetricSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSettingsOutput)
}

func (i MetricSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[MetricSettings] {
	return pulumix.Output[MetricSettings]{
		OutputState: i.ToMetricSettingsOutputWithContext(ctx).OutputState,
	}
}

// MetricSettingsArrayInput is an input type that accepts MetricSettingsArray and MetricSettingsArrayOutput values.
// You can construct a concrete instance of `MetricSettingsArrayInput` via:
//
//	MetricSettingsArray{ MetricSettingsArgs{...} }
type MetricSettingsArrayInput interface {
	pulumi.Input

	ToMetricSettingsArrayOutput() MetricSettingsArrayOutput
	ToMetricSettingsArrayOutputWithContext(context.Context) MetricSettingsArrayOutput
}

type MetricSettingsArray []MetricSettingsInput

func (MetricSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettings)(nil)).Elem()
}

func (i MetricSettingsArray) ToMetricSettingsArrayOutput() MetricSettingsArrayOutput {
	return i.ToMetricSettingsArrayOutputWithContext(context.Background())
}

func (i MetricSettingsArray) ToMetricSettingsArrayOutputWithContext(ctx context.Context) MetricSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSettingsArrayOutput)
}

func (i MetricSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]MetricSettings] {
	return pulumix.Output[[]MetricSettings]{
		OutputState: i.ToMetricSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsOutput struct{ *pulumi.OutputState }

func (MetricSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettings)(nil)).Elem()
}

func (o MetricSettingsOutput) ToMetricSettingsOutput() MetricSettingsOutput {
	return o
}

func (o MetricSettingsOutput) ToMetricSettingsOutputWithContext(ctx context.Context) MetricSettingsOutput {
	return o
}

func (o MetricSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[MetricSettings] {
	return pulumix.Output[MetricSettings]{
		OutputState: o.OutputState,
	}
}

// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
func (o MetricSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this category is enabled.
func (o MetricSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this category.
func (o MetricSettingsOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v MetricSettings) *RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyPtrOutput)
}

// the timegrain of the metric in ISO8601 format.
func (o MetricSettingsOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettings) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

type MetricSettingsArrayOutput struct{ *pulumi.OutputState }

func (MetricSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettings)(nil)).Elem()
}

func (o MetricSettingsArrayOutput) ToMetricSettingsArrayOutput() MetricSettingsArrayOutput {
	return o
}

func (o MetricSettingsArrayOutput) ToMetricSettingsArrayOutputWithContext(ctx context.Context) MetricSettingsArrayOutput {
	return o
}

func (o MetricSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricSettings] {
	return pulumix.Output[[]MetricSettings]{
		OutputState: o.OutputState,
	}
}

func (o MetricSettingsArrayOutput) Index(i pulumi.IntInput) MetricSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSettings {
		return vs[0].([]MetricSettings)[vs[1].(int)]
	}).(MetricSettingsOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsResponse struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain *string `pulumi:"timeGrain"`
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsResponseOutput struct{ *pulumi.OutputState }

func (MetricSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettingsResponse)(nil)).Elem()
}

func (o MetricSettingsResponseOutput) ToMetricSettingsResponseOutput() MetricSettingsResponseOutput {
	return o
}

func (o MetricSettingsResponseOutput) ToMetricSettingsResponseOutputWithContext(ctx context.Context) MetricSettingsResponseOutput {
	return o
}

func (o MetricSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetricSettingsResponse] {
	return pulumix.Output[MetricSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
func (o MetricSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this category is enabled.
func (o MetricSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this category.
func (o MetricSettingsResponseOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponsePtrOutput)
}

// the timegrain of the metric in ISO8601 format.
func (o MetricSettingsResponseOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

type MetricSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettingsResponse)(nil)).Elem()
}

func (o MetricSettingsResponseArrayOutput) ToMetricSettingsResponseArrayOutput() MetricSettingsResponseArrayOutput {
	return o
}

func (o MetricSettingsResponseArrayOutput) ToMetricSettingsResponseArrayOutputWithContext(ctx context.Context) MetricSettingsResponseArrayOutput {
	return o
}

func (o MetricSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetricSettingsResponse] {
	return pulumix.Output[[]MetricSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetricSettingsResponseArrayOutput) Index(i pulumi.IntInput) MetricSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSettingsResponse {
		return vs[0].([]MetricSettingsResponse)[vs[1].(int)]
	}).(MetricSettingsResponseOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicy struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyInput is an input type that accepts RetentionPolicyArgs and RetentionPolicyOutput values.
// You can construct a concrete instance of `RetentionPolicyInput` via:
//
//	RetentionPolicyArgs{...}
type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(context.Context) RetentionPolicyOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

func (i RetentionPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[RetentionPolicy] {
	return pulumix.Output[RetentionPolicy]{
		OutputState: i.ToRetentionPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput).ToRetentionPolicyPtrOutputWithContext(ctx)
}

// RetentionPolicyPtrInput is an input type that accepts RetentionPolicyArgs, RetentionPolicyPtr and RetentionPolicyPtrOutput values.
// You can construct a concrete instance of `RetentionPolicyPtrInput` via:
//
//	        RetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type RetentionPolicyPtrInput interface {
	pulumi.Input

	ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput
	ToRetentionPolicyPtrOutputWithContext(context.Context) RetentionPolicyPtrOutput
}

type retentionPolicyPtrType RetentionPolicyArgs

func RetentionPolicyPtr(v *RetentionPolicyArgs) RetentionPolicyPtrInput {
	return (*retentionPolicyPtrType)(v)
}

func (*retentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyPtrOutput)
}

func (i *retentionPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*RetentionPolicy] {
	return pulumix.Output[*RetentionPolicy]{
		OutputState: i.ToRetentionPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies the retention policy for the log.
type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionPolicy) *RetentionPolicy {
		return &v
	}).(RetentionPolicyPtrOutput)
}

func (o RetentionPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[RetentionPolicy] {
	return pulumix.Output[RetentionPolicy]{
		OutputState: o.OutputState,
	}
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicy) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RetentionPolicy] {
	return pulumix.Output[*RetentionPolicy]{
		OutputState: o.OutputState,
	}
}

func (o RetentionPolicyPtrOutput) Elem() RetentionPolicyOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicy {
		if v != nil {
			return *v
		}
		var ret RetentionPolicy
		return ret
	}).(RetentionPolicyOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponse struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RetentionPolicyResponse] {
	return pulumix.Output[RetentionPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponseOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RetentionPolicyResponse] {
	return pulumix.Output[*RetentionPolicyResponse]{
		OutputState: o.OutputState,
	}
}

func (o RetentionPolicyResponsePtrOutput) Elem() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) RetentionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RetentionPolicyResponse
		return ret
	}).(RetentionPolicyResponseOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponsePtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettings struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// SubscriptionLogSettingsInput is an input type that accepts SubscriptionLogSettingsArgs and SubscriptionLogSettingsOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsInput` via:
//
//	SubscriptionLogSettingsArgs{...}
type SubscriptionLogSettingsInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput
	ToSubscriptionLogSettingsOutputWithContext(context.Context) SubscriptionLogSettingsOutput
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsArgs struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (SubscriptionLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return i.ToSubscriptionLogSettingsOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsOutput)
}

func (i SubscriptionLogSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionLogSettings] {
	return pulumix.Output[SubscriptionLogSettings]{
		OutputState: i.ToSubscriptionLogSettingsOutputWithContext(ctx).OutputState,
	}
}

// SubscriptionLogSettingsArrayInput is an input type that accepts SubscriptionLogSettingsArray and SubscriptionLogSettingsArrayOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsArrayInput` via:
//
//	SubscriptionLogSettingsArray{ SubscriptionLogSettingsArgs{...} }
type SubscriptionLogSettingsArrayInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput
	ToSubscriptionLogSettingsArrayOutputWithContext(context.Context) SubscriptionLogSettingsArrayOutput
}

type SubscriptionLogSettingsArray []SubscriptionLogSettingsInput

func (SubscriptionLogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return i.ToSubscriptionLogSettingsArrayOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsArrayOutput)
}

func (i SubscriptionLogSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]SubscriptionLogSettings] {
	return pulumix.Output[[]SubscriptionLogSettings]{
		OutputState: i.ToSubscriptionLogSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return o
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return o
}

func (o SubscriptionLogSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionLogSettings] {
	return pulumix.Output[SubscriptionLogSettings]{
		OutputState: o.OutputState,
	}
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
func (o SubscriptionLogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SubscriptionLogSettings] {
	return pulumix.Output[[]SubscriptionLogSettings]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionLogSettingsArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettings {
		return vs[0].([]SubscriptionLogSettings)[vs[1].(int)]
	}).(SubscriptionLogSettingsOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponse struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutput() SubscriptionLogSettingsResponseOutput {
	return o
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseOutput {
	return o
}

func (o SubscriptionLogSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionLogSettingsResponse] {
	return pulumix.Output[SubscriptionLogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
func (o SubscriptionLogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutput() SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SubscriptionLogSettingsResponse] {
	return pulumix.Output[[]SubscriptionLogSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionLogSettingsResponseArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettingsResponse {
		return vs[0].([]SubscriptionLogSettingsResponse)[vs[1].(int)]
	}).(SubscriptionLogSettingsResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LogSettingsOutput{})
	pulumi.RegisterOutputType(LogSettingsArrayOutput{})
	pulumi.RegisterOutputType(LogSettingsResponseOutput{})
	pulumi.RegisterOutputType(LogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsArrayOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricSettingsOutput{})
	pulumi.RegisterOutputType(MetricSettingsArrayOutput{})
	pulumi.RegisterOutputType(MetricSettingsResponseOutput{})
	pulumi.RegisterOutputType(MetricSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
