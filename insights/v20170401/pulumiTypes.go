// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20170401

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// A pointer to an Azure Action Group.
type ActivityLogAlertActionGroup struct {
	// The resourceId of the action group. This cannot be null or empty.
	ActionGroupId string `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// ActivityLogAlertActionGroupInput is an input type that accepts ActivityLogAlertActionGroupArgs and ActivityLogAlertActionGroupOutput values.
// You can construct a concrete instance of `ActivityLogAlertActionGroupInput` via:
//
//	ActivityLogAlertActionGroupArgs{...}
type ActivityLogAlertActionGroupInput interface {
	pulumi.Input

	ToActivityLogAlertActionGroupOutput() ActivityLogAlertActionGroupOutput
	ToActivityLogAlertActionGroupOutputWithContext(context.Context) ActivityLogAlertActionGroupOutput
}

// A pointer to an Azure Action Group.
type ActivityLogAlertActionGroupArgs struct {
	// The resourceId of the action group. This cannot be null or empty.
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties pulumi.StringMapInput `pulumi:"webhookProperties"`
}

func (ActivityLogAlertActionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionGroup)(nil)).Elem()
}

func (i ActivityLogAlertActionGroupArgs) ToActivityLogAlertActionGroupOutput() ActivityLogAlertActionGroupOutput {
	return i.ToActivityLogAlertActionGroupOutputWithContext(context.Background())
}

func (i ActivityLogAlertActionGroupArgs) ToActivityLogAlertActionGroupOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertActionGroupOutput)
}

func (i ActivityLogAlertActionGroupArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionGroup] {
	return pulumix.Output[ActivityLogAlertActionGroup]{
		OutputState: i.ToActivityLogAlertActionGroupOutputWithContext(ctx).OutputState,
	}
}

// ActivityLogAlertActionGroupArrayInput is an input type that accepts ActivityLogAlertActionGroupArray and ActivityLogAlertActionGroupArrayOutput values.
// You can construct a concrete instance of `ActivityLogAlertActionGroupArrayInput` via:
//
//	ActivityLogAlertActionGroupArray{ ActivityLogAlertActionGroupArgs{...} }
type ActivityLogAlertActionGroupArrayInput interface {
	pulumi.Input

	ToActivityLogAlertActionGroupArrayOutput() ActivityLogAlertActionGroupArrayOutput
	ToActivityLogAlertActionGroupArrayOutputWithContext(context.Context) ActivityLogAlertActionGroupArrayOutput
}

type ActivityLogAlertActionGroupArray []ActivityLogAlertActionGroupInput

func (ActivityLogAlertActionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertActionGroup)(nil)).Elem()
}

func (i ActivityLogAlertActionGroupArray) ToActivityLogAlertActionGroupArrayOutput() ActivityLogAlertActionGroupArrayOutput {
	return i.ToActivityLogAlertActionGroupArrayOutputWithContext(context.Background())
}

func (i ActivityLogAlertActionGroupArray) ToActivityLogAlertActionGroupArrayOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertActionGroupArrayOutput)
}

func (i ActivityLogAlertActionGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertActionGroup] {
	return pulumix.Output[[]ActivityLogAlertActionGroup]{
		OutputState: i.ToActivityLogAlertActionGroupArrayOutputWithContext(ctx).OutputState,
	}
}

// A pointer to an Azure Action Group.
type ActivityLogAlertActionGroupOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionGroup)(nil)).Elem()
}

func (o ActivityLogAlertActionGroupOutput) ToActivityLogAlertActionGroupOutput() ActivityLogAlertActionGroupOutput {
	return o
}

func (o ActivityLogAlertActionGroupOutput) ToActivityLogAlertActionGroupOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupOutput {
	return o
}

func (o ActivityLogAlertActionGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionGroup] {
	return pulumix.Output[ActivityLogAlertActionGroup]{
		OutputState: o.OutputState,
	}
}

// The resourceId of the action group. This cannot be null or empty.
func (o ActivityLogAlertActionGroupOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertActionGroup) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
func (o ActivityLogAlertActionGroupOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActivityLogAlertActionGroup) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type ActivityLogAlertActionGroupArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertActionGroup)(nil)).Elem()
}

func (o ActivityLogAlertActionGroupArrayOutput) ToActivityLogAlertActionGroupArrayOutput() ActivityLogAlertActionGroupArrayOutput {
	return o
}

func (o ActivityLogAlertActionGroupArrayOutput) ToActivityLogAlertActionGroupArrayOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupArrayOutput {
	return o
}

func (o ActivityLogAlertActionGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertActionGroup] {
	return pulumix.Output[[]ActivityLogAlertActionGroup]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertActionGroupArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertActionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertActionGroup {
		return vs[0].([]ActivityLogAlertActionGroup)[vs[1].(int)]
	}).(ActivityLogAlertActionGroupOutput)
}

// A pointer to an Azure Action Group.
type ActivityLogAlertActionGroupResponse struct {
	// The resourceId of the action group. This cannot be null or empty.
	ActionGroupId string `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// A pointer to an Azure Action Group.
type ActivityLogAlertActionGroupResponseOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionGroupResponse)(nil)).Elem()
}

func (o ActivityLogAlertActionGroupResponseOutput) ToActivityLogAlertActionGroupResponseOutput() ActivityLogAlertActionGroupResponseOutput {
	return o
}

func (o ActivityLogAlertActionGroupResponseOutput) ToActivityLogAlertActionGroupResponseOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupResponseOutput {
	return o
}

func (o ActivityLogAlertActionGroupResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionGroupResponse] {
	return pulumix.Output[ActivityLogAlertActionGroupResponse]{
		OutputState: o.OutputState,
	}
}

// The resourceId of the action group. This cannot be null or empty.
func (o ActivityLogAlertActionGroupResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertActionGroupResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
func (o ActivityLogAlertActionGroupResponseOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActivityLogAlertActionGroupResponse) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type ActivityLogAlertActionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertActionGroupResponse)(nil)).Elem()
}

func (o ActivityLogAlertActionGroupResponseArrayOutput) ToActivityLogAlertActionGroupResponseArrayOutput() ActivityLogAlertActionGroupResponseArrayOutput {
	return o
}

func (o ActivityLogAlertActionGroupResponseArrayOutput) ToActivityLogAlertActionGroupResponseArrayOutputWithContext(ctx context.Context) ActivityLogAlertActionGroupResponseArrayOutput {
	return o
}

func (o ActivityLogAlertActionGroupResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertActionGroupResponse] {
	return pulumix.Output[[]ActivityLogAlertActionGroupResponse]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertActionGroupResponseArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertActionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertActionGroupResponse {
		return vs[0].([]ActivityLogAlertActionGroupResponse)[vs[1].(int)]
	}).(ActivityLogAlertActionGroupResponseOutput)
}

// A list of activity log alert actions.
type ActivityLogAlertActionList struct {
	// The list of activity log alerts.
	ActionGroups []ActivityLogAlertActionGroup `pulumi:"actionGroups"`
}

// ActivityLogAlertActionListInput is an input type that accepts ActivityLogAlertActionListArgs and ActivityLogAlertActionListOutput values.
// You can construct a concrete instance of `ActivityLogAlertActionListInput` via:
//
//	ActivityLogAlertActionListArgs{...}
type ActivityLogAlertActionListInput interface {
	pulumi.Input

	ToActivityLogAlertActionListOutput() ActivityLogAlertActionListOutput
	ToActivityLogAlertActionListOutputWithContext(context.Context) ActivityLogAlertActionListOutput
}

// A list of activity log alert actions.
type ActivityLogAlertActionListArgs struct {
	// The list of activity log alerts.
	ActionGroups ActivityLogAlertActionGroupArrayInput `pulumi:"actionGroups"`
}

func (ActivityLogAlertActionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionList)(nil)).Elem()
}

func (i ActivityLogAlertActionListArgs) ToActivityLogAlertActionListOutput() ActivityLogAlertActionListOutput {
	return i.ToActivityLogAlertActionListOutputWithContext(context.Background())
}

func (i ActivityLogAlertActionListArgs) ToActivityLogAlertActionListOutputWithContext(ctx context.Context) ActivityLogAlertActionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertActionListOutput)
}

func (i ActivityLogAlertActionListArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionList] {
	return pulumix.Output[ActivityLogAlertActionList]{
		OutputState: i.ToActivityLogAlertActionListOutputWithContext(ctx).OutputState,
	}
}

// A list of activity log alert actions.
type ActivityLogAlertActionListOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionList)(nil)).Elem()
}

func (o ActivityLogAlertActionListOutput) ToActivityLogAlertActionListOutput() ActivityLogAlertActionListOutput {
	return o
}

func (o ActivityLogAlertActionListOutput) ToActivityLogAlertActionListOutputWithContext(ctx context.Context) ActivityLogAlertActionListOutput {
	return o
}

func (o ActivityLogAlertActionListOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionList] {
	return pulumix.Output[ActivityLogAlertActionList]{
		OutputState: o.OutputState,
	}
}

// The list of activity log alerts.
func (o ActivityLogAlertActionListOutput) ActionGroups() ActivityLogAlertActionGroupArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertActionList) []ActivityLogAlertActionGroup { return v.ActionGroups }).(ActivityLogAlertActionGroupArrayOutput)
}

// A list of activity log alert actions.
type ActivityLogAlertActionListResponse struct {
	// The list of activity log alerts.
	ActionGroups []ActivityLogAlertActionGroupResponse `pulumi:"actionGroups"`
}

// A list of activity log alert actions.
type ActivityLogAlertActionListResponseOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertActionListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertActionListResponse)(nil)).Elem()
}

func (o ActivityLogAlertActionListResponseOutput) ToActivityLogAlertActionListResponseOutput() ActivityLogAlertActionListResponseOutput {
	return o
}

func (o ActivityLogAlertActionListResponseOutput) ToActivityLogAlertActionListResponseOutputWithContext(ctx context.Context) ActivityLogAlertActionListResponseOutput {
	return o
}

func (o ActivityLogAlertActionListResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertActionListResponse] {
	return pulumix.Output[ActivityLogAlertActionListResponse]{
		OutputState: o.OutputState,
	}
}

// The list of activity log alerts.
func (o ActivityLogAlertActionListResponseOutput) ActionGroups() ActivityLogAlertActionGroupResponseArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertActionListResponse) []ActivityLogAlertActionGroupResponse {
		return v.ActionGroups
	}).(ActivityLogAlertActionGroupResponseArrayOutput)
}

// An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfCondition struct {
	// The list of activity log alert conditions.
	AllOf []ActivityLogAlertLeafCondition `pulumi:"allOf"`
}

// ActivityLogAlertAllOfConditionInput is an input type that accepts ActivityLogAlertAllOfConditionArgs and ActivityLogAlertAllOfConditionOutput values.
// You can construct a concrete instance of `ActivityLogAlertAllOfConditionInput` via:
//
//	ActivityLogAlertAllOfConditionArgs{...}
type ActivityLogAlertAllOfConditionInput interface {
	pulumi.Input

	ToActivityLogAlertAllOfConditionOutput() ActivityLogAlertAllOfConditionOutput
	ToActivityLogAlertAllOfConditionOutputWithContext(context.Context) ActivityLogAlertAllOfConditionOutput
}

// An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfConditionArgs struct {
	// The list of activity log alert conditions.
	AllOf ActivityLogAlertLeafConditionArrayInput `pulumi:"allOf"`
}

func (ActivityLogAlertAllOfConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertAllOfCondition)(nil)).Elem()
}

func (i ActivityLogAlertAllOfConditionArgs) ToActivityLogAlertAllOfConditionOutput() ActivityLogAlertAllOfConditionOutput {
	return i.ToActivityLogAlertAllOfConditionOutputWithContext(context.Background())
}

func (i ActivityLogAlertAllOfConditionArgs) ToActivityLogAlertAllOfConditionOutputWithContext(ctx context.Context) ActivityLogAlertAllOfConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertAllOfConditionOutput)
}

func (i ActivityLogAlertAllOfConditionArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertAllOfCondition] {
	return pulumix.Output[ActivityLogAlertAllOfCondition]{
		OutputState: i.ToActivityLogAlertAllOfConditionOutputWithContext(ctx).OutputState,
	}
}

// An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfConditionOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertAllOfConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertAllOfCondition)(nil)).Elem()
}

func (o ActivityLogAlertAllOfConditionOutput) ToActivityLogAlertAllOfConditionOutput() ActivityLogAlertAllOfConditionOutput {
	return o
}

func (o ActivityLogAlertAllOfConditionOutput) ToActivityLogAlertAllOfConditionOutputWithContext(ctx context.Context) ActivityLogAlertAllOfConditionOutput {
	return o
}

func (o ActivityLogAlertAllOfConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertAllOfCondition] {
	return pulumix.Output[ActivityLogAlertAllOfCondition]{
		OutputState: o.OutputState,
	}
}

// The list of activity log alert conditions.
func (o ActivityLogAlertAllOfConditionOutput) AllOf() ActivityLogAlertLeafConditionArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertAllOfCondition) []ActivityLogAlertLeafCondition { return v.AllOf }).(ActivityLogAlertLeafConditionArrayOutput)
}

// An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfConditionResponse struct {
	// The list of activity log alert conditions.
	AllOf []ActivityLogAlertLeafConditionResponse `pulumi:"allOf"`
}

// An Activity Log alert condition that is met when all its member conditions are met.
type ActivityLogAlertAllOfConditionResponseOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertAllOfConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertAllOfConditionResponse)(nil)).Elem()
}

func (o ActivityLogAlertAllOfConditionResponseOutput) ToActivityLogAlertAllOfConditionResponseOutput() ActivityLogAlertAllOfConditionResponseOutput {
	return o
}

func (o ActivityLogAlertAllOfConditionResponseOutput) ToActivityLogAlertAllOfConditionResponseOutputWithContext(ctx context.Context) ActivityLogAlertAllOfConditionResponseOutput {
	return o
}

func (o ActivityLogAlertAllOfConditionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertAllOfConditionResponse] {
	return pulumix.Output[ActivityLogAlertAllOfConditionResponse]{
		OutputState: o.OutputState,
	}
}

// The list of activity log alert conditions.
func (o ActivityLogAlertAllOfConditionResponseOutput) AllOf() ActivityLogAlertLeafConditionResponseArrayOutput {
	return o.ApplyT(func(v ActivityLogAlertAllOfConditionResponse) []ActivityLogAlertLeafConditionResponse { return v.AllOf }).(ActivityLogAlertLeafConditionResponseArrayOutput)
}

// An Activity Log alert condition that is met by comparing an activity log field and value.
type ActivityLogAlertLeafCondition struct {
	// The field value will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals string `pulumi:"equals"`
	// The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
	Field string `pulumi:"field"`
}

// ActivityLogAlertLeafConditionInput is an input type that accepts ActivityLogAlertLeafConditionArgs and ActivityLogAlertLeafConditionOutput values.
// You can construct a concrete instance of `ActivityLogAlertLeafConditionInput` via:
//
//	ActivityLogAlertLeafConditionArgs{...}
type ActivityLogAlertLeafConditionInput interface {
	pulumi.Input

	ToActivityLogAlertLeafConditionOutput() ActivityLogAlertLeafConditionOutput
	ToActivityLogAlertLeafConditionOutputWithContext(context.Context) ActivityLogAlertLeafConditionOutput
}

// An Activity Log alert condition that is met by comparing an activity log field and value.
type ActivityLogAlertLeafConditionArgs struct {
	// The field value will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals pulumi.StringInput `pulumi:"equals"`
	// The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
	Field pulumi.StringInput `pulumi:"field"`
}

func (ActivityLogAlertLeafConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertLeafCondition)(nil)).Elem()
}

func (i ActivityLogAlertLeafConditionArgs) ToActivityLogAlertLeafConditionOutput() ActivityLogAlertLeafConditionOutput {
	return i.ToActivityLogAlertLeafConditionOutputWithContext(context.Background())
}

func (i ActivityLogAlertLeafConditionArgs) ToActivityLogAlertLeafConditionOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertLeafConditionOutput)
}

func (i ActivityLogAlertLeafConditionArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertLeafCondition] {
	return pulumix.Output[ActivityLogAlertLeafCondition]{
		OutputState: i.ToActivityLogAlertLeafConditionOutputWithContext(ctx).OutputState,
	}
}

// ActivityLogAlertLeafConditionArrayInput is an input type that accepts ActivityLogAlertLeafConditionArray and ActivityLogAlertLeafConditionArrayOutput values.
// You can construct a concrete instance of `ActivityLogAlertLeafConditionArrayInput` via:
//
//	ActivityLogAlertLeafConditionArray{ ActivityLogAlertLeafConditionArgs{...} }
type ActivityLogAlertLeafConditionArrayInput interface {
	pulumi.Input

	ToActivityLogAlertLeafConditionArrayOutput() ActivityLogAlertLeafConditionArrayOutput
	ToActivityLogAlertLeafConditionArrayOutputWithContext(context.Context) ActivityLogAlertLeafConditionArrayOutput
}

type ActivityLogAlertLeafConditionArray []ActivityLogAlertLeafConditionInput

func (ActivityLogAlertLeafConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertLeafCondition)(nil)).Elem()
}

func (i ActivityLogAlertLeafConditionArray) ToActivityLogAlertLeafConditionArrayOutput() ActivityLogAlertLeafConditionArrayOutput {
	return i.ToActivityLogAlertLeafConditionArrayOutputWithContext(context.Background())
}

func (i ActivityLogAlertLeafConditionArray) ToActivityLogAlertLeafConditionArrayOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityLogAlertLeafConditionArrayOutput)
}

func (i ActivityLogAlertLeafConditionArray) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertLeafCondition] {
	return pulumix.Output[[]ActivityLogAlertLeafCondition]{
		OutputState: i.ToActivityLogAlertLeafConditionArrayOutputWithContext(ctx).OutputState,
	}
}

// An Activity Log alert condition that is met by comparing an activity log field and value.
type ActivityLogAlertLeafConditionOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertLeafConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertLeafCondition)(nil)).Elem()
}

func (o ActivityLogAlertLeafConditionOutput) ToActivityLogAlertLeafConditionOutput() ActivityLogAlertLeafConditionOutput {
	return o
}

func (o ActivityLogAlertLeafConditionOutput) ToActivityLogAlertLeafConditionOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionOutput {
	return o
}

func (o ActivityLogAlertLeafConditionOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertLeafCondition] {
	return pulumix.Output[ActivityLogAlertLeafCondition]{
		OutputState: o.OutputState,
	}
}

// The field value will be compared to this value (case-insensitive) to determine if the condition is met.
func (o ActivityLogAlertLeafConditionOutput) Equals() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertLeafCondition) string { return v.Equals }).(pulumi.StringOutput)
}

// The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
func (o ActivityLogAlertLeafConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertLeafCondition) string { return v.Field }).(pulumi.StringOutput)
}

type ActivityLogAlertLeafConditionArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertLeafConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertLeafCondition)(nil)).Elem()
}

func (o ActivityLogAlertLeafConditionArrayOutput) ToActivityLogAlertLeafConditionArrayOutput() ActivityLogAlertLeafConditionArrayOutput {
	return o
}

func (o ActivityLogAlertLeafConditionArrayOutput) ToActivityLogAlertLeafConditionArrayOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionArrayOutput {
	return o
}

func (o ActivityLogAlertLeafConditionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertLeafCondition] {
	return pulumix.Output[[]ActivityLogAlertLeafCondition]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertLeafConditionArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertLeafConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertLeafCondition {
		return vs[0].([]ActivityLogAlertLeafCondition)[vs[1].(int)]
	}).(ActivityLogAlertLeafConditionOutput)
}

// An Activity Log alert condition that is met by comparing an activity log field and value.
type ActivityLogAlertLeafConditionResponse struct {
	// The field value will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals string `pulumi:"equals"`
	// The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
	Field string `pulumi:"field"`
}

// An Activity Log alert condition that is met by comparing an activity log field and value.
type ActivityLogAlertLeafConditionResponseOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertLeafConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityLogAlertLeafConditionResponse)(nil)).Elem()
}

func (o ActivityLogAlertLeafConditionResponseOutput) ToActivityLogAlertLeafConditionResponseOutput() ActivityLogAlertLeafConditionResponseOutput {
	return o
}

func (o ActivityLogAlertLeafConditionResponseOutput) ToActivityLogAlertLeafConditionResponseOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionResponseOutput {
	return o
}

func (o ActivityLogAlertLeafConditionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityLogAlertLeafConditionResponse] {
	return pulumix.Output[ActivityLogAlertLeafConditionResponse]{
		OutputState: o.OutputState,
	}
}

// The field value will be compared to this value (case-insensitive) to determine if the condition is met.
func (o ActivityLogAlertLeafConditionResponseOutput) Equals() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertLeafConditionResponse) string { return v.Equals }).(pulumi.StringOutput)
}

// The name of the field that this condition will examine. The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties.'.
func (o ActivityLogAlertLeafConditionResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ActivityLogAlertLeafConditionResponse) string { return v.Field }).(pulumi.StringOutput)
}

type ActivityLogAlertLeafConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ActivityLogAlertLeafConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActivityLogAlertLeafConditionResponse)(nil)).Elem()
}

func (o ActivityLogAlertLeafConditionResponseArrayOutput) ToActivityLogAlertLeafConditionResponseArrayOutput() ActivityLogAlertLeafConditionResponseArrayOutput {
	return o
}

func (o ActivityLogAlertLeafConditionResponseArrayOutput) ToActivityLogAlertLeafConditionResponseArrayOutputWithContext(ctx context.Context) ActivityLogAlertLeafConditionResponseArrayOutput {
	return o
}

func (o ActivityLogAlertLeafConditionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ActivityLogAlertLeafConditionResponse] {
	return pulumix.Output[[]ActivityLogAlertLeafConditionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ActivityLogAlertLeafConditionResponseArrayOutput) Index(i pulumi.IntInput) ActivityLogAlertLeafConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActivityLogAlertLeafConditionResponse {
		return vs[0].([]ActivityLogAlertLeafConditionResponse)[vs[1].(int)]
	}).(ActivityLogAlertLeafConditionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityLogAlertActionGroupOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionGroupArrayOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionGroupResponseOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionListOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertActionListResponseOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertAllOfConditionOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertAllOfConditionResponseOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertLeafConditionOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertLeafConditionArrayOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertLeafConditionResponseOutput{})
	pulumi.RegisterOutputType(ActivityLogAlertLeafConditionResponseArrayOutput{})
}
