// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure REST API version: 2025-02-01. Prior API version in Azure Native 2.x: 2024-06-01-preview.
type KubernetesClusterFeature struct {
	pulumi.CustomResourceState

	// The lifecycle indicator of the feature.
	AvailabilityLifecycle pulumi.StringOutput `pulumi:"availabilityLifecycle"`
	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The detailed status of the feature.
	DetailedStatus pulumi.StringOutput `pulumi:"detailedStatus"`
	// The descriptive message for the detailed status of the feature.
	DetailedStatusMessage pulumi.StringOutput `pulumi:"detailedStatusMessage"`
	// Resource ETag.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The configured options for the feature.
	Options StringKeyValuePairResponseArrayOutput `pulumi:"options"`
	// The provisioning state of the Kubernetes cluster feature.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The indicator of if the feature is required or optional. Optional features may be deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
	Required pulumi.StringOutput `pulumi:"required"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the feature.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewKubernetesClusterFeature registers a new resource with the given unique name, arguments, and options.
func NewKubernetesClusterFeature(ctx *pulumi.Context,
	name string, args *KubernetesClusterFeatureArgs, opts ...pulumi.ResourceOption) (*KubernetesClusterFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KubernetesClusterName == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesClusterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:networkcloud/v20240601preview:KubernetesClusterFeature"),
		},
		{
			Type: pulumi.String("azure-native:networkcloud/v20240701:KubernetesClusterFeature"),
		},
		{
			Type: pulumi.String("azure-native:networkcloud/v20241001preview:KubernetesClusterFeature"),
		},
		{
			Type: pulumi.String("azure-native:networkcloud/v20250201:KubernetesClusterFeature"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KubernetesClusterFeature
	err := ctx.RegisterResource("azure-native:networkcloud:KubernetesClusterFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesClusterFeature gets an existing KubernetesClusterFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesClusterFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesClusterFeatureState, opts ...pulumi.ResourceOption) (*KubernetesClusterFeature, error) {
	var resource KubernetesClusterFeature
	err := ctx.ReadResource("azure-native:networkcloud:KubernetesClusterFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesClusterFeature resources.
type kubernetesClusterFeatureState struct {
}

type KubernetesClusterFeatureState struct {
}

func (KubernetesClusterFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesClusterFeatureState)(nil)).Elem()
}

type kubernetesClusterFeatureArgs struct {
	// The name of the feature.
	FeatureName *string `pulumi:"featureName"`
	// The name of the Kubernetes cluster.
	KubernetesClusterName string `pulumi:"kubernetesClusterName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The configured options for the feature.
	Options []StringKeyValuePair `pulumi:"options"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KubernetesClusterFeature resource.
type KubernetesClusterFeatureArgs struct {
	// The name of the feature.
	FeatureName pulumi.StringPtrInput
	// The name of the Kubernetes cluster.
	KubernetesClusterName pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The configured options for the feature.
	Options StringKeyValuePairArrayInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (KubernetesClusterFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesClusterFeatureArgs)(nil)).Elem()
}

type KubernetesClusterFeatureInput interface {
	pulumi.Input

	ToKubernetesClusterFeatureOutput() KubernetesClusterFeatureOutput
	ToKubernetesClusterFeatureOutputWithContext(ctx context.Context) KubernetesClusterFeatureOutput
}

func (*KubernetesClusterFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterFeature)(nil)).Elem()
}

func (i *KubernetesClusterFeature) ToKubernetesClusterFeatureOutput() KubernetesClusterFeatureOutput {
	return i.ToKubernetesClusterFeatureOutputWithContext(context.Background())
}

func (i *KubernetesClusterFeature) ToKubernetesClusterFeatureOutputWithContext(ctx context.Context) KubernetesClusterFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesClusterFeatureOutput)
}

type KubernetesClusterFeatureOutput struct{ *pulumi.OutputState }

func (KubernetesClusterFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesClusterFeature)(nil)).Elem()
}

func (o KubernetesClusterFeatureOutput) ToKubernetesClusterFeatureOutput() KubernetesClusterFeatureOutput {
	return o
}

func (o KubernetesClusterFeatureOutput) ToKubernetesClusterFeatureOutputWithContext(ctx context.Context) KubernetesClusterFeatureOutput {
	return o
}

// The lifecycle indicator of the feature.
func (o KubernetesClusterFeatureOutput) AvailabilityLifecycle() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.AvailabilityLifecycle }).(pulumi.StringOutput)
}

// The Azure API version of the resource.
func (o KubernetesClusterFeatureOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The detailed status of the feature.
func (o KubernetesClusterFeatureOutput) DetailedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.DetailedStatus }).(pulumi.StringOutput)
}

// The descriptive message for the detailed status of the feature.
func (o KubernetesClusterFeatureOutput) DetailedStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.DetailedStatusMessage }).(pulumi.StringOutput)
}

// Resource ETag.
func (o KubernetesClusterFeatureOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o KubernetesClusterFeatureOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o KubernetesClusterFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The configured options for the feature.
func (o KubernetesClusterFeatureOutput) Options() StringKeyValuePairResponseArrayOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) StringKeyValuePairResponseArrayOutput { return v.Options }).(StringKeyValuePairResponseArrayOutput)
}

// The provisioning state of the Kubernetes cluster feature.
func (o KubernetesClusterFeatureOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The indicator of if the feature is required or optional. Optional features may be deleted by the user, while required features are managed with the kubernetes cluster lifecycle.
func (o KubernetesClusterFeatureOutput) Required() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Required }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o KubernetesClusterFeatureOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o KubernetesClusterFeatureOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o KubernetesClusterFeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the feature.
func (o KubernetesClusterFeatureOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesClusterFeature) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KubernetesClusterFeatureOutput{})
}
