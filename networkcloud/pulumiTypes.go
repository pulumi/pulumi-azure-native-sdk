// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

type AadConfiguration struct {
	// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
	AdminGroupObjectIds []string `pulumi:"adminGroupObjectIds"`
}

// AadConfigurationInput is an input type that accepts AadConfigurationArgs and AadConfigurationOutput values.
// You can construct a concrete instance of `AadConfigurationInput` via:
//
//	AadConfigurationArgs{...}
type AadConfigurationInput interface {
	pulumi.Input

	ToAadConfigurationOutput() AadConfigurationOutput
	ToAadConfigurationOutputWithContext(context.Context) AadConfigurationOutput
}

type AadConfigurationArgs struct {
	// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
	AdminGroupObjectIds pulumi.StringArrayInput `pulumi:"adminGroupObjectIds"`
}

func (AadConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AadConfiguration)(nil)).Elem()
}

func (i AadConfigurationArgs) ToAadConfigurationOutput() AadConfigurationOutput {
	return i.ToAadConfigurationOutputWithContext(context.Background())
}

func (i AadConfigurationArgs) ToAadConfigurationOutputWithContext(ctx context.Context) AadConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadConfigurationOutput)
}

func (i AadConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AadConfiguration] {
	return pulumix.Output[AadConfiguration]{
		OutputState: i.ToAadConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AadConfigurationArgs) ToAadConfigurationPtrOutput() AadConfigurationPtrOutput {
	return i.ToAadConfigurationPtrOutputWithContext(context.Background())
}

func (i AadConfigurationArgs) ToAadConfigurationPtrOutputWithContext(ctx context.Context) AadConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadConfigurationOutput).ToAadConfigurationPtrOutputWithContext(ctx)
}

// AadConfigurationPtrInput is an input type that accepts AadConfigurationArgs, AadConfigurationPtr and AadConfigurationPtrOutput values.
// You can construct a concrete instance of `AadConfigurationPtrInput` via:
//
//	        AadConfigurationArgs{...}
//
//	or:
//
//	        nil
type AadConfigurationPtrInput interface {
	pulumi.Input

	ToAadConfigurationPtrOutput() AadConfigurationPtrOutput
	ToAadConfigurationPtrOutputWithContext(context.Context) AadConfigurationPtrOutput
}

type aadConfigurationPtrType AadConfigurationArgs

func AadConfigurationPtr(v *AadConfigurationArgs) AadConfigurationPtrInput {
	return (*aadConfigurationPtrType)(v)
}

func (*aadConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AadConfiguration)(nil)).Elem()
}

func (i *aadConfigurationPtrType) ToAadConfigurationPtrOutput() AadConfigurationPtrOutput {
	return i.ToAadConfigurationPtrOutputWithContext(context.Background())
}

func (i *aadConfigurationPtrType) ToAadConfigurationPtrOutputWithContext(ctx context.Context) AadConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AadConfigurationPtrOutput)
}

func (i *aadConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AadConfiguration] {
	return pulumix.Output[*AadConfiguration]{
		OutputState: i.ToAadConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type AadConfigurationOutput struct{ *pulumi.OutputState }

func (AadConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadConfiguration)(nil)).Elem()
}

func (o AadConfigurationOutput) ToAadConfigurationOutput() AadConfigurationOutput {
	return o
}

func (o AadConfigurationOutput) ToAadConfigurationOutputWithContext(ctx context.Context) AadConfigurationOutput {
	return o
}

func (o AadConfigurationOutput) ToAadConfigurationPtrOutput() AadConfigurationPtrOutput {
	return o.ToAadConfigurationPtrOutputWithContext(context.Background())
}

func (o AadConfigurationOutput) ToAadConfigurationPtrOutputWithContext(ctx context.Context) AadConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AadConfiguration) *AadConfiguration {
		return &v
	}).(AadConfigurationPtrOutput)
}

func (o AadConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AadConfiguration] {
	return pulumix.Output[AadConfiguration]{
		OutputState: o.OutputState,
	}
}

// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
func (o AadConfigurationOutput) AdminGroupObjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AadConfiguration) []string { return v.AdminGroupObjectIds }).(pulumi.StringArrayOutput)
}

type AadConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AadConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AadConfiguration)(nil)).Elem()
}

func (o AadConfigurationPtrOutput) ToAadConfigurationPtrOutput() AadConfigurationPtrOutput {
	return o
}

func (o AadConfigurationPtrOutput) ToAadConfigurationPtrOutputWithContext(ctx context.Context) AadConfigurationPtrOutput {
	return o
}

func (o AadConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AadConfiguration] {
	return pulumix.Output[*AadConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AadConfigurationPtrOutput) Elem() AadConfigurationOutput {
	return o.ApplyT(func(v *AadConfiguration) AadConfiguration {
		if v != nil {
			return *v
		}
		var ret AadConfiguration
		return ret
	}).(AadConfigurationOutput)
}

// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
func (o AadConfigurationPtrOutput) AdminGroupObjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AadConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIds
	}).(pulumi.StringArrayOutput)
}

type AadConfigurationResponse struct {
	// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
	AdminGroupObjectIds []string `pulumi:"adminGroupObjectIds"`
}

type AadConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AadConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AadConfigurationResponse)(nil)).Elem()
}

func (o AadConfigurationResponseOutput) ToAadConfigurationResponseOutput() AadConfigurationResponseOutput {
	return o
}

func (o AadConfigurationResponseOutput) ToAadConfigurationResponseOutputWithContext(ctx context.Context) AadConfigurationResponseOutput {
	return o
}

func (o AadConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AadConfigurationResponse] {
	return pulumix.Output[AadConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
func (o AadConfigurationResponseOutput) AdminGroupObjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AadConfigurationResponse) []string { return v.AdminGroupObjectIds }).(pulumi.StringArrayOutput)
}

type AadConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AadConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AadConfigurationResponse)(nil)).Elem()
}

func (o AadConfigurationResponsePtrOutput) ToAadConfigurationResponsePtrOutput() AadConfigurationResponsePtrOutput {
	return o
}

func (o AadConfigurationResponsePtrOutput) ToAadConfigurationResponsePtrOutputWithContext(ctx context.Context) AadConfigurationResponsePtrOutput {
	return o
}

func (o AadConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AadConfigurationResponse] {
	return pulumix.Output[*AadConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AadConfigurationResponsePtrOutput) Elem() AadConfigurationResponseOutput {
	return o.ApplyT(func(v *AadConfigurationResponse) AadConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AadConfigurationResponse
		return ret
	}).(AadConfigurationResponseOutput)
}

// The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
func (o AadConfigurationResponsePtrOutput) AdminGroupObjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AadConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdminGroupObjectIds
	}).(pulumi.StringArrayOutput)
}

type AdministrativeCredentials struct {
	// The password of the administrator of the device used during initialization.
	Password string `pulumi:"password"`
	// The username of the administrator of the device used during initialization.
	Username string `pulumi:"username"`
}

// AdministrativeCredentialsInput is an input type that accepts AdministrativeCredentialsArgs and AdministrativeCredentialsOutput values.
// You can construct a concrete instance of `AdministrativeCredentialsInput` via:
//
//	AdministrativeCredentialsArgs{...}
type AdministrativeCredentialsInput interface {
	pulumi.Input

	ToAdministrativeCredentialsOutput() AdministrativeCredentialsOutput
	ToAdministrativeCredentialsOutputWithContext(context.Context) AdministrativeCredentialsOutput
}

type AdministrativeCredentialsArgs struct {
	// The password of the administrator of the device used during initialization.
	Password pulumi.StringInput `pulumi:"password"`
	// The username of the administrator of the device used during initialization.
	Username pulumi.StringInput `pulumi:"username"`
}

func (AdministrativeCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministrativeCredentials)(nil)).Elem()
}

func (i AdministrativeCredentialsArgs) ToAdministrativeCredentialsOutput() AdministrativeCredentialsOutput {
	return i.ToAdministrativeCredentialsOutputWithContext(context.Background())
}

func (i AdministrativeCredentialsArgs) ToAdministrativeCredentialsOutputWithContext(ctx context.Context) AdministrativeCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdministrativeCredentialsOutput)
}

func (i AdministrativeCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[AdministrativeCredentials] {
	return pulumix.Output[AdministrativeCredentials]{
		OutputState: i.ToAdministrativeCredentialsOutputWithContext(ctx).OutputState,
	}
}

type AdministrativeCredentialsOutput struct{ *pulumi.OutputState }

func (AdministrativeCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministrativeCredentials)(nil)).Elem()
}

func (o AdministrativeCredentialsOutput) ToAdministrativeCredentialsOutput() AdministrativeCredentialsOutput {
	return o
}

func (o AdministrativeCredentialsOutput) ToAdministrativeCredentialsOutputWithContext(ctx context.Context) AdministrativeCredentialsOutput {
	return o
}

func (o AdministrativeCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[AdministrativeCredentials] {
	return pulumix.Output[AdministrativeCredentials]{
		OutputState: o.OutputState,
	}
}

// The password of the administrator of the device used during initialization.
func (o AdministrativeCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v AdministrativeCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the administrator of the device used during initialization.
func (o AdministrativeCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AdministrativeCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type AdministrativeCredentialsResponse struct {
	// The password of the administrator of the device used during initialization.
	Password string `pulumi:"password"`
	// The username of the administrator of the device used during initialization.
	Username string `pulumi:"username"`
}

type AdministrativeCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AdministrativeCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministrativeCredentialsResponse)(nil)).Elem()
}

func (o AdministrativeCredentialsResponseOutput) ToAdministrativeCredentialsResponseOutput() AdministrativeCredentialsResponseOutput {
	return o
}

func (o AdministrativeCredentialsResponseOutput) ToAdministrativeCredentialsResponseOutputWithContext(ctx context.Context) AdministrativeCredentialsResponseOutput {
	return o
}

func (o AdministrativeCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AdministrativeCredentialsResponse] {
	return pulumix.Output[AdministrativeCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// The password of the administrator of the device used during initialization.
func (o AdministrativeCredentialsResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v AdministrativeCredentialsResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The username of the administrator of the device used during initialization.
func (o AdministrativeCredentialsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AdministrativeCredentialsResponse) string { return v.Username }).(pulumi.StringOutput)
}

type AdministratorConfiguration struct {
	// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
	AdminUsername *string `pulumi:"adminUsername"`
	// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
	SshPublicKeys []SshPublicKey `pulumi:"sshPublicKeys"`
}

// AdministratorConfigurationInput is an input type that accepts AdministratorConfigurationArgs and AdministratorConfigurationOutput values.
// You can construct a concrete instance of `AdministratorConfigurationInput` via:
//
//	AdministratorConfigurationArgs{...}
type AdministratorConfigurationInput interface {
	pulumi.Input

	ToAdministratorConfigurationOutput() AdministratorConfigurationOutput
	ToAdministratorConfigurationOutputWithContext(context.Context) AdministratorConfigurationOutput
}

type AdministratorConfigurationArgs struct {
	// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
	AdminUsername pulumi.StringPtrInput `pulumi:"adminUsername"`
	// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
	SshPublicKeys SshPublicKeyArrayInput `pulumi:"sshPublicKeys"`
}

func (AdministratorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministratorConfiguration)(nil)).Elem()
}

func (i AdministratorConfigurationArgs) ToAdministratorConfigurationOutput() AdministratorConfigurationOutput {
	return i.ToAdministratorConfigurationOutputWithContext(context.Background())
}

func (i AdministratorConfigurationArgs) ToAdministratorConfigurationOutputWithContext(ctx context.Context) AdministratorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdministratorConfigurationOutput)
}

func (i AdministratorConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AdministratorConfiguration] {
	return pulumix.Output[AdministratorConfiguration]{
		OutputState: i.ToAdministratorConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AdministratorConfigurationArgs) ToAdministratorConfigurationPtrOutput() AdministratorConfigurationPtrOutput {
	return i.ToAdministratorConfigurationPtrOutputWithContext(context.Background())
}

func (i AdministratorConfigurationArgs) ToAdministratorConfigurationPtrOutputWithContext(ctx context.Context) AdministratorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdministratorConfigurationOutput).ToAdministratorConfigurationPtrOutputWithContext(ctx)
}

// AdministratorConfigurationPtrInput is an input type that accepts AdministratorConfigurationArgs, AdministratorConfigurationPtr and AdministratorConfigurationPtrOutput values.
// You can construct a concrete instance of `AdministratorConfigurationPtrInput` via:
//
//	        AdministratorConfigurationArgs{...}
//
//	or:
//
//	        nil
type AdministratorConfigurationPtrInput interface {
	pulumi.Input

	ToAdministratorConfigurationPtrOutput() AdministratorConfigurationPtrOutput
	ToAdministratorConfigurationPtrOutputWithContext(context.Context) AdministratorConfigurationPtrOutput
}

type administratorConfigurationPtrType AdministratorConfigurationArgs

func AdministratorConfigurationPtr(v *AdministratorConfigurationArgs) AdministratorConfigurationPtrInput {
	return (*administratorConfigurationPtrType)(v)
}

func (*administratorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdministratorConfiguration)(nil)).Elem()
}

func (i *administratorConfigurationPtrType) ToAdministratorConfigurationPtrOutput() AdministratorConfigurationPtrOutput {
	return i.ToAdministratorConfigurationPtrOutputWithContext(context.Background())
}

func (i *administratorConfigurationPtrType) ToAdministratorConfigurationPtrOutputWithContext(ctx context.Context) AdministratorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdministratorConfigurationPtrOutput)
}

func (i *administratorConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AdministratorConfiguration] {
	return pulumix.Output[*AdministratorConfiguration]{
		OutputState: i.ToAdministratorConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type AdministratorConfigurationOutput struct{ *pulumi.OutputState }

func (AdministratorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministratorConfiguration)(nil)).Elem()
}

func (o AdministratorConfigurationOutput) ToAdministratorConfigurationOutput() AdministratorConfigurationOutput {
	return o
}

func (o AdministratorConfigurationOutput) ToAdministratorConfigurationOutputWithContext(ctx context.Context) AdministratorConfigurationOutput {
	return o
}

func (o AdministratorConfigurationOutput) ToAdministratorConfigurationPtrOutput() AdministratorConfigurationPtrOutput {
	return o.ToAdministratorConfigurationPtrOutputWithContext(context.Background())
}

func (o AdministratorConfigurationOutput) ToAdministratorConfigurationPtrOutputWithContext(ctx context.Context) AdministratorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdministratorConfiguration) *AdministratorConfiguration {
		return &v
	}).(AdministratorConfigurationPtrOutput)
}

func (o AdministratorConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AdministratorConfiguration] {
	return pulumix.Output[AdministratorConfiguration]{
		OutputState: o.OutputState,
	}
}

// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
func (o AdministratorConfigurationOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdministratorConfiguration) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
func (o AdministratorConfigurationOutput) SshPublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v AdministratorConfiguration) []SshPublicKey { return v.SshPublicKeys }).(SshPublicKeyArrayOutput)
}

type AdministratorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AdministratorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdministratorConfiguration)(nil)).Elem()
}

func (o AdministratorConfigurationPtrOutput) ToAdministratorConfigurationPtrOutput() AdministratorConfigurationPtrOutput {
	return o
}

func (o AdministratorConfigurationPtrOutput) ToAdministratorConfigurationPtrOutputWithContext(ctx context.Context) AdministratorConfigurationPtrOutput {
	return o
}

func (o AdministratorConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AdministratorConfiguration] {
	return pulumix.Output[*AdministratorConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AdministratorConfigurationPtrOutput) Elem() AdministratorConfigurationOutput {
	return o.ApplyT(func(v *AdministratorConfiguration) AdministratorConfiguration {
		if v != nil {
			return *v
		}
		var ret AdministratorConfiguration
		return ret
	}).(AdministratorConfigurationOutput)
}

// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
func (o AdministratorConfigurationPtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdministratorConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
func (o AdministratorConfigurationPtrOutput) SshPublicKeys() SshPublicKeyArrayOutput {
	return o.ApplyT(func(v *AdministratorConfiguration) []SshPublicKey {
		if v == nil {
			return nil
		}
		return v.SshPublicKeys
	}).(SshPublicKeyArrayOutput)
}

type AdministratorConfigurationResponse struct {
	// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
	AdminUsername *string `pulumi:"adminUsername"`
	// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
	SshPublicKeys []SshPublicKeyResponse `pulumi:"sshPublicKeys"`
}

type AdministratorConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AdministratorConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdministratorConfigurationResponse)(nil)).Elem()
}

func (o AdministratorConfigurationResponseOutput) ToAdministratorConfigurationResponseOutput() AdministratorConfigurationResponseOutput {
	return o
}

func (o AdministratorConfigurationResponseOutput) ToAdministratorConfigurationResponseOutputWithContext(ctx context.Context) AdministratorConfigurationResponseOutput {
	return o
}

func (o AdministratorConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AdministratorConfigurationResponse] {
	return pulumix.Output[AdministratorConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
func (o AdministratorConfigurationResponseOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdministratorConfigurationResponse) *string { return v.AdminUsername }).(pulumi.StringPtrOutput)
}

// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
func (o AdministratorConfigurationResponseOutput) SshPublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v AdministratorConfigurationResponse) []SshPublicKeyResponse { return v.SshPublicKeys }).(SshPublicKeyResponseArrayOutput)
}

type AdministratorConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AdministratorConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdministratorConfigurationResponse)(nil)).Elem()
}

func (o AdministratorConfigurationResponsePtrOutput) ToAdministratorConfigurationResponsePtrOutput() AdministratorConfigurationResponsePtrOutput {
	return o
}

func (o AdministratorConfigurationResponsePtrOutput) ToAdministratorConfigurationResponsePtrOutputWithContext(ctx context.Context) AdministratorConfigurationResponsePtrOutput {
	return o
}

func (o AdministratorConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AdministratorConfigurationResponse] {
	return pulumix.Output[*AdministratorConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AdministratorConfigurationResponsePtrOutput) Elem() AdministratorConfigurationResponseOutput {
	return o.ApplyT(func(v *AdministratorConfigurationResponse) AdministratorConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AdministratorConfigurationResponse
		return ret
	}).(AdministratorConfigurationResponseOutput)
}

// The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
func (o AdministratorConfigurationResponsePtrOutput) AdminUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdministratorConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUsername
	}).(pulumi.StringPtrOutput)
}

// The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
func (o AdministratorConfigurationResponsePtrOutput) SshPublicKeys() SshPublicKeyResponseArrayOutput {
	return o.ApplyT(func(v *AdministratorConfigurationResponse) []SshPublicKeyResponse {
		if v == nil {
			return nil
		}
		return v.SshPublicKeys
	}).(SshPublicKeyResponseArrayOutput)
}

type AgentOptions struct {
	// The number of hugepages to allocate.
	HugepagesCount float64 `pulumi:"hugepagesCount"`
	// The size of the hugepages to allocate.
	HugepagesSize *string `pulumi:"hugepagesSize"`
}

// Defaults sets the appropriate defaults for AgentOptions
func (val *AgentOptions) Defaults() *AgentOptions {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HugepagesSize == nil {
		hugepagesSize_ := "2M"
		tmp.HugepagesSize = &hugepagesSize_
	}
	return &tmp
}

// AgentOptionsInput is an input type that accepts AgentOptionsArgs and AgentOptionsOutput values.
// You can construct a concrete instance of `AgentOptionsInput` via:
//
//	AgentOptionsArgs{...}
type AgentOptionsInput interface {
	pulumi.Input

	ToAgentOptionsOutput() AgentOptionsOutput
	ToAgentOptionsOutputWithContext(context.Context) AgentOptionsOutput
}

type AgentOptionsArgs struct {
	// The number of hugepages to allocate.
	HugepagesCount pulumi.Float64Input `pulumi:"hugepagesCount"`
	// The size of the hugepages to allocate.
	HugepagesSize pulumi.StringPtrInput `pulumi:"hugepagesSize"`
}

// Defaults sets the appropriate defaults for AgentOptionsArgs
func (val *AgentOptionsArgs) Defaults() *AgentOptionsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HugepagesSize == nil {
		tmp.HugepagesSize = pulumi.StringPtr("2M")
	}
	return &tmp
}
func (AgentOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentOptions)(nil)).Elem()
}

func (i AgentOptionsArgs) ToAgentOptionsOutput() AgentOptionsOutput {
	return i.ToAgentOptionsOutputWithContext(context.Background())
}

func (i AgentOptionsArgs) ToAgentOptionsOutputWithContext(ctx context.Context) AgentOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentOptionsOutput)
}

func (i AgentOptionsArgs) ToOutput(ctx context.Context) pulumix.Output[AgentOptions] {
	return pulumix.Output[AgentOptions]{
		OutputState: i.ToAgentOptionsOutputWithContext(ctx).OutputState,
	}
}

func (i AgentOptionsArgs) ToAgentOptionsPtrOutput() AgentOptionsPtrOutput {
	return i.ToAgentOptionsPtrOutputWithContext(context.Background())
}

func (i AgentOptionsArgs) ToAgentOptionsPtrOutputWithContext(ctx context.Context) AgentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentOptionsOutput).ToAgentOptionsPtrOutputWithContext(ctx)
}

// AgentOptionsPtrInput is an input type that accepts AgentOptionsArgs, AgentOptionsPtr and AgentOptionsPtrOutput values.
// You can construct a concrete instance of `AgentOptionsPtrInput` via:
//
//	        AgentOptionsArgs{...}
//
//	or:
//
//	        nil
type AgentOptionsPtrInput interface {
	pulumi.Input

	ToAgentOptionsPtrOutput() AgentOptionsPtrOutput
	ToAgentOptionsPtrOutputWithContext(context.Context) AgentOptionsPtrOutput
}

type agentOptionsPtrType AgentOptionsArgs

func AgentOptionsPtr(v *AgentOptionsArgs) AgentOptionsPtrInput {
	return (*agentOptionsPtrType)(v)
}

func (*agentOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentOptions)(nil)).Elem()
}

func (i *agentOptionsPtrType) ToAgentOptionsPtrOutput() AgentOptionsPtrOutput {
	return i.ToAgentOptionsPtrOutputWithContext(context.Background())
}

func (i *agentOptionsPtrType) ToAgentOptionsPtrOutputWithContext(ctx context.Context) AgentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentOptionsPtrOutput)
}

func (i *agentOptionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AgentOptions] {
	return pulumix.Output[*AgentOptions]{
		OutputState: i.ToAgentOptionsPtrOutputWithContext(ctx).OutputState,
	}
}

type AgentOptionsOutput struct{ *pulumi.OutputState }

func (AgentOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentOptions)(nil)).Elem()
}

func (o AgentOptionsOutput) ToAgentOptionsOutput() AgentOptionsOutput {
	return o
}

func (o AgentOptionsOutput) ToAgentOptionsOutputWithContext(ctx context.Context) AgentOptionsOutput {
	return o
}

func (o AgentOptionsOutput) ToAgentOptionsPtrOutput() AgentOptionsPtrOutput {
	return o.ToAgentOptionsPtrOutputWithContext(context.Background())
}

func (o AgentOptionsOutput) ToAgentOptionsPtrOutputWithContext(ctx context.Context) AgentOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentOptions) *AgentOptions {
		return &v
	}).(AgentOptionsPtrOutput)
}

func (o AgentOptionsOutput) ToOutput(ctx context.Context) pulumix.Output[AgentOptions] {
	return pulumix.Output[AgentOptions]{
		OutputState: o.OutputState,
	}
}

// The number of hugepages to allocate.
func (o AgentOptionsOutput) HugepagesCount() pulumi.Float64Output {
	return o.ApplyT(func(v AgentOptions) float64 { return v.HugepagesCount }).(pulumi.Float64Output)
}

// The size of the hugepages to allocate.
func (o AgentOptionsOutput) HugepagesSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentOptions) *string { return v.HugepagesSize }).(pulumi.StringPtrOutput)
}

type AgentOptionsPtrOutput struct{ *pulumi.OutputState }

func (AgentOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentOptions)(nil)).Elem()
}

func (o AgentOptionsPtrOutput) ToAgentOptionsPtrOutput() AgentOptionsPtrOutput {
	return o
}

func (o AgentOptionsPtrOutput) ToAgentOptionsPtrOutputWithContext(ctx context.Context) AgentOptionsPtrOutput {
	return o
}

func (o AgentOptionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AgentOptions] {
	return pulumix.Output[*AgentOptions]{
		OutputState: o.OutputState,
	}
}

func (o AgentOptionsPtrOutput) Elem() AgentOptionsOutput {
	return o.ApplyT(func(v *AgentOptions) AgentOptions {
		if v != nil {
			return *v
		}
		var ret AgentOptions
		return ret
	}).(AgentOptionsOutput)
}

// The number of hugepages to allocate.
func (o AgentOptionsPtrOutput) HugepagesCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AgentOptions) *float64 {
		if v == nil {
			return nil
		}
		return &v.HugepagesCount
	}).(pulumi.Float64PtrOutput)
}

// The size of the hugepages to allocate.
func (o AgentOptionsPtrOutput) HugepagesSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentOptions) *string {
		if v == nil {
			return nil
		}
		return v.HugepagesSize
	}).(pulumi.StringPtrOutput)
}

type AgentOptionsResponse struct {
	// The number of hugepages to allocate.
	HugepagesCount float64 `pulumi:"hugepagesCount"`
	// The size of the hugepages to allocate.
	HugepagesSize *string `pulumi:"hugepagesSize"`
}

// Defaults sets the appropriate defaults for AgentOptionsResponse
func (val *AgentOptionsResponse) Defaults() *AgentOptionsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HugepagesSize == nil {
		hugepagesSize_ := "2M"
		tmp.HugepagesSize = &hugepagesSize_
	}
	return &tmp
}

type AgentOptionsResponseOutput struct{ *pulumi.OutputState }

func (AgentOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentOptionsResponse)(nil)).Elem()
}

func (o AgentOptionsResponseOutput) ToAgentOptionsResponseOutput() AgentOptionsResponseOutput {
	return o
}

func (o AgentOptionsResponseOutput) ToAgentOptionsResponseOutputWithContext(ctx context.Context) AgentOptionsResponseOutput {
	return o
}

func (o AgentOptionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AgentOptionsResponse] {
	return pulumix.Output[AgentOptionsResponse]{
		OutputState: o.OutputState,
	}
}

// The number of hugepages to allocate.
func (o AgentOptionsResponseOutput) HugepagesCount() pulumi.Float64Output {
	return o.ApplyT(func(v AgentOptionsResponse) float64 { return v.HugepagesCount }).(pulumi.Float64Output)
}

// The size of the hugepages to allocate.
func (o AgentOptionsResponseOutput) HugepagesSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentOptionsResponse) *string { return v.HugepagesSize }).(pulumi.StringPtrOutput)
}

type AgentOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentOptionsResponse)(nil)).Elem()
}

func (o AgentOptionsResponsePtrOutput) ToAgentOptionsResponsePtrOutput() AgentOptionsResponsePtrOutput {
	return o
}

func (o AgentOptionsResponsePtrOutput) ToAgentOptionsResponsePtrOutputWithContext(ctx context.Context) AgentOptionsResponsePtrOutput {
	return o
}

func (o AgentOptionsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AgentOptionsResponse] {
	return pulumix.Output[*AgentOptionsResponse]{
		OutputState: o.OutputState,
	}
}

func (o AgentOptionsResponsePtrOutput) Elem() AgentOptionsResponseOutput {
	return o.ApplyT(func(v *AgentOptionsResponse) AgentOptionsResponse {
		if v != nil {
			return *v
		}
		var ret AgentOptionsResponse
		return ret
	}).(AgentOptionsResponseOutput)
}

// The number of hugepages to allocate.
func (o AgentOptionsResponsePtrOutput) HugepagesCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AgentOptionsResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.HugepagesCount
	}).(pulumi.Float64PtrOutput)
}

// The size of the hugepages to allocate.
func (o AgentOptionsResponsePtrOutput) HugepagesSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.HugepagesSize
	}).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettings struct {
	// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
	MaxSurge *string `pulumi:"maxSurge"`
}

// Defaults sets the appropriate defaults for AgentPoolUpgradeSettings
func (val *AgentPoolUpgradeSettings) Defaults() *AgentPoolUpgradeSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxSurge == nil {
		maxSurge_ := "1"
		tmp.MaxSurge = &maxSurge_
	}
	return &tmp
}

// AgentPoolUpgradeSettingsInput is an input type that accepts AgentPoolUpgradeSettingsArgs and AgentPoolUpgradeSettingsOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsInput` via:
//
//	AgentPoolUpgradeSettingsArgs{...}
type AgentPoolUpgradeSettingsInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput
	ToAgentPoolUpgradeSettingsOutputWithContext(context.Context) AgentPoolUpgradeSettingsOutput
}

type AgentPoolUpgradeSettingsArgs struct {
	// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
	MaxSurge pulumi.StringPtrInput `pulumi:"maxSurge"`
}

// Defaults sets the appropriate defaults for AgentPoolUpgradeSettingsArgs
func (val *AgentPoolUpgradeSettingsArgs) Defaults() *AgentPoolUpgradeSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxSurge == nil {
		tmp.MaxSurge = pulumi.StringPtr("1")
	}
	return &tmp
}
func (AgentPoolUpgradeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return i.ToAgentPoolUpgradeSettingsOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput)
}

func (i AgentPoolUpgradeSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[AgentPoolUpgradeSettings] {
	return pulumix.Output[AgentPoolUpgradeSettings]{
		OutputState: i.ToAgentPoolUpgradeSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i AgentPoolUpgradeSettingsArgs) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsOutput).ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx)
}

// AgentPoolUpgradeSettingsPtrInput is an input type that accepts AgentPoolUpgradeSettingsArgs, AgentPoolUpgradeSettingsPtr and AgentPoolUpgradeSettingsPtrOutput values.
// You can construct a concrete instance of `AgentPoolUpgradeSettingsPtrInput` via:
//
//	        AgentPoolUpgradeSettingsArgs{...}
//
//	or:
//
//	        nil
type AgentPoolUpgradeSettingsPtrInput interface {
	pulumi.Input

	ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput
	ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Context) AgentPoolUpgradeSettingsPtrOutput
}

type agentPoolUpgradeSettingsPtrType AgentPoolUpgradeSettingsArgs

func AgentPoolUpgradeSettingsPtr(v *AgentPoolUpgradeSettingsArgs) AgentPoolUpgradeSettingsPtrInput {
	return (*agentPoolUpgradeSettingsPtrType)(v)
}

func (*agentPoolUpgradeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (i *agentPoolUpgradeSettingsPtrType) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgentPoolUpgradeSettingsPtrOutput)
}

func (i *agentPoolUpgradeSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*AgentPoolUpgradeSettings] {
	return pulumix.Output[*AgentPoolUpgradeSettings]{
		OutputState: i.ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

type AgentPoolUpgradeSettingsOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutput() AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsOutput {
	return o
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o.ToAgentPoolUpgradeSettingsPtrOutputWithContext(context.Background())
}

func (o AgentPoolUpgradeSettingsOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AgentPoolUpgradeSettings) *AgentPoolUpgradeSettings {
		return &v
	}).(AgentPoolUpgradeSettingsPtrOutput)
}

func (o AgentPoolUpgradeSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[AgentPoolUpgradeSettings] {
	return pulumix.Output[AgentPoolUpgradeSettings]{
		OutputState: o.OutputState,
	}
}

// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
func (o AgentPoolUpgradeSettingsOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettings) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettingsPtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettings)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutput() AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToAgentPoolUpgradeSettingsPtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsPtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AgentPoolUpgradeSettings] {
	return pulumix.Output[*AgentPoolUpgradeSettings]{
		OutputState: o.OutputState,
	}
}

func (o AgentPoolUpgradeSettingsPtrOutput) Elem() AgentPoolUpgradeSettingsOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) AgentPoolUpgradeSettings {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettings
		return ret
	}).(AgentPoolUpgradeSettingsOutput)
}

// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
func (o AgentPoolUpgradeSettingsPtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettingsResponse struct {
	// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
	MaxSurge *string `pulumi:"maxSurge"`
}

// Defaults sets the appropriate defaults for AgentPoolUpgradeSettingsResponse
func (val *AgentPoolUpgradeSettingsResponse) Defaults() *AgentPoolUpgradeSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxSurge == nil {
		maxSurge_ := "1"
		tmp.MaxSurge = &maxSurge_
	}
	return &tmp
}

type AgentPoolUpgradeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutput() AgentPoolUpgradeSettingsResponseOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToAgentPoolUpgradeSettingsResponseOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponseOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AgentPoolUpgradeSettingsResponse] {
	return pulumix.Output[AgentPoolUpgradeSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
func (o AgentPoolUpgradeSettingsResponseOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AgentPoolUpgradeSettingsResponse) *string { return v.MaxSurge }).(pulumi.StringPtrOutput)
}

type AgentPoolUpgradeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AgentPoolUpgradeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AgentPoolUpgradeSettingsResponse)(nil)).Elem()
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutput() AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToAgentPoolUpgradeSettingsResponsePtrOutputWithContext(ctx context.Context) AgentPoolUpgradeSettingsResponsePtrOutput {
	return o
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AgentPoolUpgradeSettingsResponse] {
	return pulumix.Output[*AgentPoolUpgradeSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o AgentPoolUpgradeSettingsResponsePtrOutput) Elem() AgentPoolUpgradeSettingsResponseOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) AgentPoolUpgradeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AgentPoolUpgradeSettingsResponse
		return ret
	}).(AgentPoolUpgradeSettingsResponseOutput)
}

// The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.
func (o AgentPoolUpgradeSettingsResponsePtrOutput) MaxSurge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AgentPoolUpgradeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.StringPtrOutput)
}

type AttachedNetworkConfiguration struct {
	// The list of Layer 2 Networks and related configuration for attachment.
	L2Networks []L2NetworkAttachmentConfiguration `pulumi:"l2Networks"`
	// The list of Layer 3 Networks and related configuration for attachment.
	L3Networks []L3NetworkAttachmentConfiguration `pulumi:"l3Networks"`
	// The list of Trunked Networks and related configuration for attachment.
	TrunkedNetworks []TrunkedNetworkAttachmentConfiguration `pulumi:"trunkedNetworks"`
}

// AttachedNetworkConfigurationInput is an input type that accepts AttachedNetworkConfigurationArgs and AttachedNetworkConfigurationOutput values.
// You can construct a concrete instance of `AttachedNetworkConfigurationInput` via:
//
//	AttachedNetworkConfigurationArgs{...}
type AttachedNetworkConfigurationInput interface {
	pulumi.Input

	ToAttachedNetworkConfigurationOutput() AttachedNetworkConfigurationOutput
	ToAttachedNetworkConfigurationOutputWithContext(context.Context) AttachedNetworkConfigurationOutput
}

type AttachedNetworkConfigurationArgs struct {
	// The list of Layer 2 Networks and related configuration for attachment.
	L2Networks L2NetworkAttachmentConfigurationArrayInput `pulumi:"l2Networks"`
	// The list of Layer 3 Networks and related configuration for attachment.
	L3Networks L3NetworkAttachmentConfigurationArrayInput `pulumi:"l3Networks"`
	// The list of Trunked Networks and related configuration for attachment.
	TrunkedNetworks TrunkedNetworkAttachmentConfigurationArrayInput `pulumi:"trunkedNetworks"`
}

func (AttachedNetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedNetworkConfiguration)(nil)).Elem()
}

func (i AttachedNetworkConfigurationArgs) ToAttachedNetworkConfigurationOutput() AttachedNetworkConfigurationOutput {
	return i.ToAttachedNetworkConfigurationOutputWithContext(context.Background())
}

func (i AttachedNetworkConfigurationArgs) ToAttachedNetworkConfigurationOutputWithContext(ctx context.Context) AttachedNetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkConfigurationOutput)
}

func (i AttachedNetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[AttachedNetworkConfiguration] {
	return pulumix.Output[AttachedNetworkConfiguration]{
		OutputState: i.ToAttachedNetworkConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i AttachedNetworkConfigurationArgs) ToAttachedNetworkConfigurationPtrOutput() AttachedNetworkConfigurationPtrOutput {
	return i.ToAttachedNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i AttachedNetworkConfigurationArgs) ToAttachedNetworkConfigurationPtrOutputWithContext(ctx context.Context) AttachedNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkConfigurationOutput).ToAttachedNetworkConfigurationPtrOutputWithContext(ctx)
}

// AttachedNetworkConfigurationPtrInput is an input type that accepts AttachedNetworkConfigurationArgs, AttachedNetworkConfigurationPtr and AttachedNetworkConfigurationPtrOutput values.
// You can construct a concrete instance of `AttachedNetworkConfigurationPtrInput` via:
//
//	        AttachedNetworkConfigurationArgs{...}
//
//	or:
//
//	        nil
type AttachedNetworkConfigurationPtrInput interface {
	pulumi.Input

	ToAttachedNetworkConfigurationPtrOutput() AttachedNetworkConfigurationPtrOutput
	ToAttachedNetworkConfigurationPtrOutputWithContext(context.Context) AttachedNetworkConfigurationPtrOutput
}

type attachedNetworkConfigurationPtrType AttachedNetworkConfigurationArgs

func AttachedNetworkConfigurationPtr(v *AttachedNetworkConfigurationArgs) AttachedNetworkConfigurationPtrInput {
	return (*attachedNetworkConfigurationPtrType)(v)
}

func (*attachedNetworkConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedNetworkConfiguration)(nil)).Elem()
}

func (i *attachedNetworkConfigurationPtrType) ToAttachedNetworkConfigurationPtrOutput() AttachedNetworkConfigurationPtrOutput {
	return i.ToAttachedNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (i *attachedNetworkConfigurationPtrType) ToAttachedNetworkConfigurationPtrOutputWithContext(ctx context.Context) AttachedNetworkConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachedNetworkConfigurationPtrOutput)
}

func (i *attachedNetworkConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*AttachedNetworkConfiguration] {
	return pulumix.Output[*AttachedNetworkConfiguration]{
		OutputState: i.ToAttachedNetworkConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type AttachedNetworkConfigurationOutput struct{ *pulumi.OutputState }

func (AttachedNetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedNetworkConfiguration)(nil)).Elem()
}

func (o AttachedNetworkConfigurationOutput) ToAttachedNetworkConfigurationOutput() AttachedNetworkConfigurationOutput {
	return o
}

func (o AttachedNetworkConfigurationOutput) ToAttachedNetworkConfigurationOutputWithContext(ctx context.Context) AttachedNetworkConfigurationOutput {
	return o
}

func (o AttachedNetworkConfigurationOutput) ToAttachedNetworkConfigurationPtrOutput() AttachedNetworkConfigurationPtrOutput {
	return o.ToAttachedNetworkConfigurationPtrOutputWithContext(context.Background())
}

func (o AttachedNetworkConfigurationOutput) ToAttachedNetworkConfigurationPtrOutputWithContext(ctx context.Context) AttachedNetworkConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttachedNetworkConfiguration) *AttachedNetworkConfiguration {
		return &v
	}).(AttachedNetworkConfigurationPtrOutput)
}

func (o AttachedNetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[AttachedNetworkConfiguration] {
	return pulumix.Output[AttachedNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// The list of Layer 2 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationOutput) L2Networks() L2NetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfiguration) []L2NetworkAttachmentConfiguration { return v.L2Networks }).(L2NetworkAttachmentConfigurationArrayOutput)
}

// The list of Layer 3 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationOutput) L3Networks() L3NetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfiguration) []L3NetworkAttachmentConfiguration { return v.L3Networks }).(L3NetworkAttachmentConfigurationArrayOutput)
}

// The list of Trunked Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationOutput) TrunkedNetworks() TrunkedNetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfiguration) []TrunkedNetworkAttachmentConfiguration { return v.TrunkedNetworks }).(TrunkedNetworkAttachmentConfigurationArrayOutput)
}

type AttachedNetworkConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AttachedNetworkConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedNetworkConfiguration)(nil)).Elem()
}

func (o AttachedNetworkConfigurationPtrOutput) ToAttachedNetworkConfigurationPtrOutput() AttachedNetworkConfigurationPtrOutput {
	return o
}

func (o AttachedNetworkConfigurationPtrOutput) ToAttachedNetworkConfigurationPtrOutputWithContext(ctx context.Context) AttachedNetworkConfigurationPtrOutput {
	return o
}

func (o AttachedNetworkConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AttachedNetworkConfiguration] {
	return pulumix.Output[*AttachedNetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o AttachedNetworkConfigurationPtrOutput) Elem() AttachedNetworkConfigurationOutput {
	return o.ApplyT(func(v *AttachedNetworkConfiguration) AttachedNetworkConfiguration {
		if v != nil {
			return *v
		}
		var ret AttachedNetworkConfiguration
		return ret
	}).(AttachedNetworkConfigurationOutput)
}

// The list of Layer 2 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationPtrOutput) L2Networks() L2NetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfiguration) []L2NetworkAttachmentConfiguration {
		if v == nil {
			return nil
		}
		return v.L2Networks
	}).(L2NetworkAttachmentConfigurationArrayOutput)
}

// The list of Layer 3 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationPtrOutput) L3Networks() L3NetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfiguration) []L3NetworkAttachmentConfiguration {
		if v == nil {
			return nil
		}
		return v.L3Networks
	}).(L3NetworkAttachmentConfigurationArrayOutput)
}

// The list of Trunked Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationPtrOutput) TrunkedNetworks() TrunkedNetworkAttachmentConfigurationArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfiguration) []TrunkedNetworkAttachmentConfiguration {
		if v == nil {
			return nil
		}
		return v.TrunkedNetworks
	}).(TrunkedNetworkAttachmentConfigurationArrayOutput)
}

type AttachedNetworkConfigurationResponse struct {
	// The list of Layer 2 Networks and related configuration for attachment.
	L2Networks []L2NetworkAttachmentConfigurationResponse `pulumi:"l2Networks"`
	// The list of Layer 3 Networks and related configuration for attachment.
	L3Networks []L3NetworkAttachmentConfigurationResponse `pulumi:"l3Networks"`
	// The list of Trunked Networks and related configuration for attachment.
	TrunkedNetworks []TrunkedNetworkAttachmentConfigurationResponse `pulumi:"trunkedNetworks"`
}

type AttachedNetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AttachedNetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttachedNetworkConfigurationResponse)(nil)).Elem()
}

func (o AttachedNetworkConfigurationResponseOutput) ToAttachedNetworkConfigurationResponseOutput() AttachedNetworkConfigurationResponseOutput {
	return o
}

func (o AttachedNetworkConfigurationResponseOutput) ToAttachedNetworkConfigurationResponseOutputWithContext(ctx context.Context) AttachedNetworkConfigurationResponseOutput {
	return o
}

func (o AttachedNetworkConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AttachedNetworkConfigurationResponse] {
	return pulumix.Output[AttachedNetworkConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The list of Layer 2 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponseOutput) L2Networks() L2NetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfigurationResponse) []L2NetworkAttachmentConfigurationResponse {
		return v.L2Networks
	}).(L2NetworkAttachmentConfigurationResponseArrayOutput)
}

// The list of Layer 3 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponseOutput) L3Networks() L3NetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfigurationResponse) []L3NetworkAttachmentConfigurationResponse {
		return v.L3Networks
	}).(L3NetworkAttachmentConfigurationResponseArrayOutput)
}

// The list of Trunked Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponseOutput) TrunkedNetworks() TrunkedNetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v AttachedNetworkConfigurationResponse) []TrunkedNetworkAttachmentConfigurationResponse {
		return v.TrunkedNetworks
	}).(TrunkedNetworkAttachmentConfigurationResponseArrayOutput)
}

type AttachedNetworkConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AttachedNetworkConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachedNetworkConfigurationResponse)(nil)).Elem()
}

func (o AttachedNetworkConfigurationResponsePtrOutput) ToAttachedNetworkConfigurationResponsePtrOutput() AttachedNetworkConfigurationResponsePtrOutput {
	return o
}

func (o AttachedNetworkConfigurationResponsePtrOutput) ToAttachedNetworkConfigurationResponsePtrOutputWithContext(ctx context.Context) AttachedNetworkConfigurationResponsePtrOutput {
	return o
}

func (o AttachedNetworkConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AttachedNetworkConfigurationResponse] {
	return pulumix.Output[*AttachedNetworkConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o AttachedNetworkConfigurationResponsePtrOutput) Elem() AttachedNetworkConfigurationResponseOutput {
	return o.ApplyT(func(v *AttachedNetworkConfigurationResponse) AttachedNetworkConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AttachedNetworkConfigurationResponse
		return ret
	}).(AttachedNetworkConfigurationResponseOutput)
}

// The list of Layer 2 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponsePtrOutput) L2Networks() L2NetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfigurationResponse) []L2NetworkAttachmentConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.L2Networks
	}).(L2NetworkAttachmentConfigurationResponseArrayOutput)
}

// The list of Layer 3 Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponsePtrOutput) L3Networks() L3NetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfigurationResponse) []L3NetworkAttachmentConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.L3Networks
	}).(L3NetworkAttachmentConfigurationResponseArrayOutput)
}

// The list of Trunked Networks and related configuration for attachment.
func (o AttachedNetworkConfigurationResponsePtrOutput) TrunkedNetworks() TrunkedNetworkAttachmentConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *AttachedNetworkConfigurationResponse) []TrunkedNetworkAttachmentConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.TrunkedNetworks
	}).(TrunkedNetworkAttachmentConfigurationResponseArrayOutput)
}

type AvailableUpgradeResponse struct {
	// The version lifecycle indicator.
	AvailabilityLifecycle string `pulumi:"availabilityLifecycle"`
	// The version available for upgrading.
	Version string `pulumi:"version"`
}

type AvailableUpgradeResponseOutput struct{ *pulumi.OutputState }

func (AvailableUpgradeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableUpgradeResponse)(nil)).Elem()
}

func (o AvailableUpgradeResponseOutput) ToAvailableUpgradeResponseOutput() AvailableUpgradeResponseOutput {
	return o
}

func (o AvailableUpgradeResponseOutput) ToAvailableUpgradeResponseOutputWithContext(ctx context.Context) AvailableUpgradeResponseOutput {
	return o
}

func (o AvailableUpgradeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AvailableUpgradeResponse] {
	return pulumix.Output[AvailableUpgradeResponse]{
		OutputState: o.OutputState,
	}
}

// The version lifecycle indicator.
func (o AvailableUpgradeResponseOutput) AvailabilityLifecycle() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableUpgradeResponse) string { return v.AvailabilityLifecycle }).(pulumi.StringOutput)
}

// The version available for upgrading.
func (o AvailableUpgradeResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableUpgradeResponse) string { return v.Version }).(pulumi.StringOutput)
}

type AvailableUpgradeResponseArrayOutput struct{ *pulumi.OutputState }

func (AvailableUpgradeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableUpgradeResponse)(nil)).Elem()
}

func (o AvailableUpgradeResponseArrayOutput) ToAvailableUpgradeResponseArrayOutput() AvailableUpgradeResponseArrayOutput {
	return o
}

func (o AvailableUpgradeResponseArrayOutput) ToAvailableUpgradeResponseArrayOutputWithContext(ctx context.Context) AvailableUpgradeResponseArrayOutput {
	return o
}

func (o AvailableUpgradeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AvailableUpgradeResponse] {
	return pulumix.Output[[]AvailableUpgradeResponse]{
		OutputState: o.OutputState,
	}
}

func (o AvailableUpgradeResponseArrayOutput) Index(i pulumi.IntInput) AvailableUpgradeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableUpgradeResponse {
		return vs[0].([]AvailableUpgradeResponse)[vs[1].(int)]
	}).(AvailableUpgradeResponseOutput)
}

type BareMetalMachineConfigurationData struct {
	// The credentials of the baseboard management controller on this bare metal machine.
	BmcCredentials AdministrativeCredentials `pulumi:"bmcCredentials"`
	// The MAC address of the BMC for this machine.
	BmcMacAddress string `pulumi:"bmcMacAddress"`
	// The MAC address associated with the PXE NIC card.
	BootMacAddress string `pulumi:"bootMacAddress"`
	// The free-form additional information about the machine, e.g. an asset tag.
	MachineDetails *string `pulumi:"machineDetails"`
	// The user-provided name for the bare metal machine created from this specification.
	// If not provided, the machine name will be generated programmatically.
	MachineName *string `pulumi:"machineName"`
	// The slot the physical machine is in the rack based on the BOM configuration.
	RackSlot float64 `pulumi:"rackSlot"`
	// The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
	SerialNumber string `pulumi:"serialNumber"`
}

// BareMetalMachineConfigurationDataInput is an input type that accepts BareMetalMachineConfigurationDataArgs and BareMetalMachineConfigurationDataOutput values.
// You can construct a concrete instance of `BareMetalMachineConfigurationDataInput` via:
//
//	BareMetalMachineConfigurationDataArgs{...}
type BareMetalMachineConfigurationDataInput interface {
	pulumi.Input

	ToBareMetalMachineConfigurationDataOutput() BareMetalMachineConfigurationDataOutput
	ToBareMetalMachineConfigurationDataOutputWithContext(context.Context) BareMetalMachineConfigurationDataOutput
}

type BareMetalMachineConfigurationDataArgs struct {
	// The credentials of the baseboard management controller on this bare metal machine.
	BmcCredentials AdministrativeCredentialsInput `pulumi:"bmcCredentials"`
	// The MAC address of the BMC for this machine.
	BmcMacAddress pulumi.StringInput `pulumi:"bmcMacAddress"`
	// The MAC address associated with the PXE NIC card.
	BootMacAddress pulumi.StringInput `pulumi:"bootMacAddress"`
	// The free-form additional information about the machine, e.g. an asset tag.
	MachineDetails pulumi.StringPtrInput `pulumi:"machineDetails"`
	// The user-provided name for the bare metal machine created from this specification.
	// If not provided, the machine name will be generated programmatically.
	MachineName pulumi.StringPtrInput `pulumi:"machineName"`
	// The slot the physical machine is in the rack based on the BOM configuration.
	RackSlot pulumi.Float64Input `pulumi:"rackSlot"`
	// The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
	SerialNumber pulumi.StringInput `pulumi:"serialNumber"`
}

func (BareMetalMachineConfigurationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMachineConfigurationData)(nil)).Elem()
}

func (i BareMetalMachineConfigurationDataArgs) ToBareMetalMachineConfigurationDataOutput() BareMetalMachineConfigurationDataOutput {
	return i.ToBareMetalMachineConfigurationDataOutputWithContext(context.Background())
}

func (i BareMetalMachineConfigurationDataArgs) ToBareMetalMachineConfigurationDataOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMachineConfigurationDataOutput)
}

func (i BareMetalMachineConfigurationDataArgs) ToOutput(ctx context.Context) pulumix.Output[BareMetalMachineConfigurationData] {
	return pulumix.Output[BareMetalMachineConfigurationData]{
		OutputState: i.ToBareMetalMachineConfigurationDataOutputWithContext(ctx).OutputState,
	}
}

// BareMetalMachineConfigurationDataArrayInput is an input type that accepts BareMetalMachineConfigurationDataArray and BareMetalMachineConfigurationDataArrayOutput values.
// You can construct a concrete instance of `BareMetalMachineConfigurationDataArrayInput` via:
//
//	BareMetalMachineConfigurationDataArray{ BareMetalMachineConfigurationDataArgs{...} }
type BareMetalMachineConfigurationDataArrayInput interface {
	pulumi.Input

	ToBareMetalMachineConfigurationDataArrayOutput() BareMetalMachineConfigurationDataArrayOutput
	ToBareMetalMachineConfigurationDataArrayOutputWithContext(context.Context) BareMetalMachineConfigurationDataArrayOutput
}

type BareMetalMachineConfigurationDataArray []BareMetalMachineConfigurationDataInput

func (BareMetalMachineConfigurationDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalMachineConfigurationData)(nil)).Elem()
}

func (i BareMetalMachineConfigurationDataArray) ToBareMetalMachineConfigurationDataArrayOutput() BareMetalMachineConfigurationDataArrayOutput {
	return i.ToBareMetalMachineConfigurationDataArrayOutputWithContext(context.Background())
}

func (i BareMetalMachineConfigurationDataArray) ToBareMetalMachineConfigurationDataArrayOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BareMetalMachineConfigurationDataArrayOutput)
}

func (i BareMetalMachineConfigurationDataArray) ToOutput(ctx context.Context) pulumix.Output[[]BareMetalMachineConfigurationData] {
	return pulumix.Output[[]BareMetalMachineConfigurationData]{
		OutputState: i.ToBareMetalMachineConfigurationDataArrayOutputWithContext(ctx).OutputState,
	}
}

type BareMetalMachineConfigurationDataOutput struct{ *pulumi.OutputState }

func (BareMetalMachineConfigurationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMachineConfigurationData)(nil)).Elem()
}

func (o BareMetalMachineConfigurationDataOutput) ToBareMetalMachineConfigurationDataOutput() BareMetalMachineConfigurationDataOutput {
	return o
}

func (o BareMetalMachineConfigurationDataOutput) ToBareMetalMachineConfigurationDataOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataOutput {
	return o
}

func (o BareMetalMachineConfigurationDataOutput) ToOutput(ctx context.Context) pulumix.Output[BareMetalMachineConfigurationData] {
	return pulumix.Output[BareMetalMachineConfigurationData]{
		OutputState: o.OutputState,
	}
}

// The credentials of the baseboard management controller on this bare metal machine.
func (o BareMetalMachineConfigurationDataOutput) BmcCredentials() AdministrativeCredentialsOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) AdministrativeCredentials { return v.BmcCredentials }).(AdministrativeCredentialsOutput)
}

// The MAC address of the BMC for this machine.
func (o BareMetalMachineConfigurationDataOutput) BmcMacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) string { return v.BmcMacAddress }).(pulumi.StringOutput)
}

// The MAC address associated with the PXE NIC card.
func (o BareMetalMachineConfigurationDataOutput) BootMacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) string { return v.BootMacAddress }).(pulumi.StringOutput)
}

// The free-form additional information about the machine, e.g. an asset tag.
func (o BareMetalMachineConfigurationDataOutput) MachineDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) *string { return v.MachineDetails }).(pulumi.StringPtrOutput)
}

// The user-provided name for the bare metal machine created from this specification.
// If not provided, the machine name will be generated programmatically.
func (o BareMetalMachineConfigurationDataOutput) MachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) *string { return v.MachineName }).(pulumi.StringPtrOutput)
}

// The slot the physical machine is in the rack based on the BOM configuration.
func (o BareMetalMachineConfigurationDataOutput) RackSlot() pulumi.Float64Output {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) float64 { return v.RackSlot }).(pulumi.Float64Output)
}

// The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
func (o BareMetalMachineConfigurationDataOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationData) string { return v.SerialNumber }).(pulumi.StringOutput)
}

type BareMetalMachineConfigurationDataArrayOutput struct{ *pulumi.OutputState }

func (BareMetalMachineConfigurationDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalMachineConfigurationData)(nil)).Elem()
}

func (o BareMetalMachineConfigurationDataArrayOutput) ToBareMetalMachineConfigurationDataArrayOutput() BareMetalMachineConfigurationDataArrayOutput {
	return o
}

func (o BareMetalMachineConfigurationDataArrayOutput) ToBareMetalMachineConfigurationDataArrayOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataArrayOutput {
	return o
}

func (o BareMetalMachineConfigurationDataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BareMetalMachineConfigurationData] {
	return pulumix.Output[[]BareMetalMachineConfigurationData]{
		OutputState: o.OutputState,
	}
}

func (o BareMetalMachineConfigurationDataArrayOutput) Index(i pulumi.IntInput) BareMetalMachineConfigurationDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalMachineConfigurationData {
		return vs[0].([]BareMetalMachineConfigurationData)[vs[1].(int)]
	}).(BareMetalMachineConfigurationDataOutput)
}

type BareMetalMachineConfigurationDataResponse struct {
	// The connection string for the baseboard management controller including IP address and protocol.
	BmcConnectionString string `pulumi:"bmcConnectionString"`
	// The credentials of the baseboard management controller on this bare metal machine.
	BmcCredentials AdministrativeCredentialsResponse `pulumi:"bmcCredentials"`
	// The MAC address of the BMC for this machine.
	BmcMacAddress string `pulumi:"bmcMacAddress"`
	// The MAC address associated with the PXE NIC card.
	BootMacAddress string `pulumi:"bootMacAddress"`
	// The free-form additional information about the machine, e.g. an asset tag.
	MachineDetails *string `pulumi:"machineDetails"`
	// The user-provided name for the bare metal machine created from this specification.
	// If not provided, the machine name will be generated programmatically.
	MachineName *string `pulumi:"machineName"`
	// The slot the physical machine is in the rack based on the BOM configuration.
	RackSlot float64 `pulumi:"rackSlot"`
	// The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
	SerialNumber string `pulumi:"serialNumber"`
}

type BareMetalMachineConfigurationDataResponseOutput struct{ *pulumi.OutputState }

func (BareMetalMachineConfigurationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BareMetalMachineConfigurationDataResponse)(nil)).Elem()
}

func (o BareMetalMachineConfigurationDataResponseOutput) ToBareMetalMachineConfigurationDataResponseOutput() BareMetalMachineConfigurationDataResponseOutput {
	return o
}

func (o BareMetalMachineConfigurationDataResponseOutput) ToBareMetalMachineConfigurationDataResponseOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataResponseOutput {
	return o
}

func (o BareMetalMachineConfigurationDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BareMetalMachineConfigurationDataResponse] {
	return pulumix.Output[BareMetalMachineConfigurationDataResponse]{
		OutputState: o.OutputState,
	}
}

// The connection string for the baseboard management controller including IP address and protocol.
func (o BareMetalMachineConfigurationDataResponseOutput) BmcConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) string { return v.BmcConnectionString }).(pulumi.StringOutput)
}

// The credentials of the baseboard management controller on this bare metal machine.
func (o BareMetalMachineConfigurationDataResponseOutput) BmcCredentials() AdministrativeCredentialsResponseOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) AdministrativeCredentialsResponse {
		return v.BmcCredentials
	}).(AdministrativeCredentialsResponseOutput)
}

// The MAC address of the BMC for this machine.
func (o BareMetalMachineConfigurationDataResponseOutput) BmcMacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) string { return v.BmcMacAddress }).(pulumi.StringOutput)
}

// The MAC address associated with the PXE NIC card.
func (o BareMetalMachineConfigurationDataResponseOutput) BootMacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) string { return v.BootMacAddress }).(pulumi.StringOutput)
}

// The free-form additional information about the machine, e.g. an asset tag.
func (o BareMetalMachineConfigurationDataResponseOutput) MachineDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) *string { return v.MachineDetails }).(pulumi.StringPtrOutput)
}

// The user-provided name for the bare metal machine created from this specification.
// If not provided, the machine name will be generated programmatically.
func (o BareMetalMachineConfigurationDataResponseOutput) MachineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) *string { return v.MachineName }).(pulumi.StringPtrOutput)
}

// The slot the physical machine is in the rack based on the BOM configuration.
func (o BareMetalMachineConfigurationDataResponseOutput) RackSlot() pulumi.Float64Output {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) float64 { return v.RackSlot }).(pulumi.Float64Output)
}

// The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.
func (o BareMetalMachineConfigurationDataResponseOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v BareMetalMachineConfigurationDataResponse) string { return v.SerialNumber }).(pulumi.StringOutput)
}

type BareMetalMachineConfigurationDataResponseArrayOutput struct{ *pulumi.OutputState }

func (BareMetalMachineConfigurationDataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BareMetalMachineConfigurationDataResponse)(nil)).Elem()
}

func (o BareMetalMachineConfigurationDataResponseArrayOutput) ToBareMetalMachineConfigurationDataResponseArrayOutput() BareMetalMachineConfigurationDataResponseArrayOutput {
	return o
}

func (o BareMetalMachineConfigurationDataResponseArrayOutput) ToBareMetalMachineConfigurationDataResponseArrayOutputWithContext(ctx context.Context) BareMetalMachineConfigurationDataResponseArrayOutput {
	return o
}

func (o BareMetalMachineConfigurationDataResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BareMetalMachineConfigurationDataResponse] {
	return pulumix.Output[[]BareMetalMachineConfigurationDataResponse]{
		OutputState: o.OutputState,
	}
}

func (o BareMetalMachineConfigurationDataResponseArrayOutput) Index(i pulumi.IntInput) BareMetalMachineConfigurationDataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BareMetalMachineConfigurationDataResponse {
		return vs[0].([]BareMetalMachineConfigurationDataResponse)[vs[1].(int)]
	}).(BareMetalMachineConfigurationDataResponseOutput)
}

type BgpAdvertisement struct {
	// The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
	AdvertiseToFabric *string `pulumi:"advertiseToFabric"`
	// The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
	Communities []string `pulumi:"communities"`
	// The names of the IP address pools associated with this announcement.
	IpAddressPools []string `pulumi:"ipAddressPools"`
	// The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.
	Peers []string `pulumi:"peers"`
}

// Defaults sets the appropriate defaults for BgpAdvertisement
func (val *BgpAdvertisement) Defaults() *BgpAdvertisement {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AdvertiseToFabric == nil {
		advertiseToFabric_ := "True"
		tmp.AdvertiseToFabric = &advertiseToFabric_
	}
	return &tmp
}

// BgpAdvertisementInput is an input type that accepts BgpAdvertisementArgs and BgpAdvertisementOutput values.
// You can construct a concrete instance of `BgpAdvertisementInput` via:
//
//	BgpAdvertisementArgs{...}
type BgpAdvertisementInput interface {
	pulumi.Input

	ToBgpAdvertisementOutput() BgpAdvertisementOutput
	ToBgpAdvertisementOutputWithContext(context.Context) BgpAdvertisementOutput
}

type BgpAdvertisementArgs struct {
	// The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
	AdvertiseToFabric pulumi.StringPtrInput `pulumi:"advertiseToFabric"`
	// The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	// The names of the IP address pools associated with this announcement.
	IpAddressPools pulumi.StringArrayInput `pulumi:"ipAddressPools"`
	// The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.
	Peers pulumi.StringArrayInput `pulumi:"peers"`
}

// Defaults sets the appropriate defaults for BgpAdvertisementArgs
func (val *BgpAdvertisementArgs) Defaults() *BgpAdvertisementArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AdvertiseToFabric == nil {
		tmp.AdvertiseToFabric = pulumi.StringPtr("True")
	}
	return &tmp
}
func (BgpAdvertisementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAdvertisement)(nil)).Elem()
}

func (i BgpAdvertisementArgs) ToBgpAdvertisementOutput() BgpAdvertisementOutput {
	return i.ToBgpAdvertisementOutputWithContext(context.Background())
}

func (i BgpAdvertisementArgs) ToBgpAdvertisementOutputWithContext(ctx context.Context) BgpAdvertisementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAdvertisementOutput)
}

func (i BgpAdvertisementArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAdvertisement] {
	return pulumix.Output[BgpAdvertisement]{
		OutputState: i.ToBgpAdvertisementOutputWithContext(ctx).OutputState,
	}
}

// BgpAdvertisementArrayInput is an input type that accepts BgpAdvertisementArray and BgpAdvertisementArrayOutput values.
// You can construct a concrete instance of `BgpAdvertisementArrayInput` via:
//
//	BgpAdvertisementArray{ BgpAdvertisementArgs{...} }
type BgpAdvertisementArrayInput interface {
	pulumi.Input

	ToBgpAdvertisementArrayOutput() BgpAdvertisementArrayOutput
	ToBgpAdvertisementArrayOutputWithContext(context.Context) BgpAdvertisementArrayOutput
}

type BgpAdvertisementArray []BgpAdvertisementInput

func (BgpAdvertisementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAdvertisement)(nil)).Elem()
}

func (i BgpAdvertisementArray) ToBgpAdvertisementArrayOutput() BgpAdvertisementArrayOutput {
	return i.ToBgpAdvertisementArrayOutputWithContext(context.Background())
}

func (i BgpAdvertisementArray) ToBgpAdvertisementArrayOutputWithContext(ctx context.Context) BgpAdvertisementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAdvertisementArrayOutput)
}

func (i BgpAdvertisementArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAdvertisement] {
	return pulumix.Output[[]BgpAdvertisement]{
		OutputState: i.ToBgpAdvertisementArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAdvertisementOutput struct{ *pulumi.OutputState }

func (BgpAdvertisementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAdvertisement)(nil)).Elem()
}

func (o BgpAdvertisementOutput) ToBgpAdvertisementOutput() BgpAdvertisementOutput {
	return o
}

func (o BgpAdvertisementOutput) ToBgpAdvertisementOutputWithContext(ctx context.Context) BgpAdvertisementOutput {
	return o
}

func (o BgpAdvertisementOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAdvertisement] {
	return pulumix.Output[BgpAdvertisement]{
		OutputState: o.OutputState,
	}
}

// The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
func (o BgpAdvertisementOutput) AdvertiseToFabric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAdvertisement) *string { return v.AdvertiseToFabric }).(pulumi.StringPtrOutput)
}

// The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
func (o BgpAdvertisementOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisement) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// The names of the IP address pools associated with this announcement.
func (o BgpAdvertisementOutput) IpAddressPools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisement) []string { return v.IpAddressPools }).(pulumi.StringArrayOutput)
}

// The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.
func (o BgpAdvertisementOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisement) []string { return v.Peers }).(pulumi.StringArrayOutput)
}

type BgpAdvertisementArrayOutput struct{ *pulumi.OutputState }

func (BgpAdvertisementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAdvertisement)(nil)).Elem()
}

func (o BgpAdvertisementArrayOutput) ToBgpAdvertisementArrayOutput() BgpAdvertisementArrayOutput {
	return o
}

func (o BgpAdvertisementArrayOutput) ToBgpAdvertisementArrayOutputWithContext(ctx context.Context) BgpAdvertisementArrayOutput {
	return o
}

func (o BgpAdvertisementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAdvertisement] {
	return pulumix.Output[[]BgpAdvertisement]{
		OutputState: o.OutputState,
	}
}

func (o BgpAdvertisementArrayOutput) Index(i pulumi.IntInput) BgpAdvertisementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAdvertisement {
		return vs[0].([]BgpAdvertisement)[vs[1].(int)]
	}).(BgpAdvertisementOutput)
}

type BgpAdvertisementResponse struct {
	// The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
	AdvertiseToFabric *string `pulumi:"advertiseToFabric"`
	// The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
	Communities []string `pulumi:"communities"`
	// The names of the IP address pools associated with this announcement.
	IpAddressPools []string `pulumi:"ipAddressPools"`
	// The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.
	Peers []string `pulumi:"peers"`
}

// Defaults sets the appropriate defaults for BgpAdvertisementResponse
func (val *BgpAdvertisementResponse) Defaults() *BgpAdvertisementResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AdvertiseToFabric == nil {
		advertiseToFabric_ := "True"
		tmp.AdvertiseToFabric = &advertiseToFabric_
	}
	return &tmp
}

type BgpAdvertisementResponseOutput struct{ *pulumi.OutputState }

func (BgpAdvertisementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAdvertisementResponse)(nil)).Elem()
}

func (o BgpAdvertisementResponseOutput) ToBgpAdvertisementResponseOutput() BgpAdvertisementResponseOutput {
	return o
}

func (o BgpAdvertisementResponseOutput) ToBgpAdvertisementResponseOutputWithContext(ctx context.Context) BgpAdvertisementResponseOutput {
	return o
}

func (o BgpAdvertisementResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAdvertisementResponse] {
	return pulumix.Output[BgpAdvertisementResponse]{
		OutputState: o.OutputState,
	}
}

// The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
func (o BgpAdvertisementResponseOutput) AdvertiseToFabric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAdvertisementResponse) *string { return v.AdvertiseToFabric }).(pulumi.StringPtrOutput)
}

// The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
func (o BgpAdvertisementResponseOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisementResponse) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// The names of the IP address pools associated with this announcement.
func (o BgpAdvertisementResponseOutput) IpAddressPools() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisementResponse) []string { return v.IpAddressPools }).(pulumi.StringArrayOutput)
}

// The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.
func (o BgpAdvertisementResponseOutput) Peers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BgpAdvertisementResponse) []string { return v.Peers }).(pulumi.StringArrayOutput)
}

type BgpAdvertisementResponseArrayOutput struct{ *pulumi.OutputState }

func (BgpAdvertisementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAdvertisementResponse)(nil)).Elem()
}

func (o BgpAdvertisementResponseArrayOutput) ToBgpAdvertisementResponseArrayOutput() BgpAdvertisementResponseArrayOutput {
	return o
}

func (o BgpAdvertisementResponseArrayOutput) ToBgpAdvertisementResponseArrayOutputWithContext(ctx context.Context) BgpAdvertisementResponseArrayOutput {
	return o
}

func (o BgpAdvertisementResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAdvertisementResponse] {
	return pulumix.Output[[]BgpAdvertisementResponse]{
		OutputState: o.OutputState,
	}
}

func (o BgpAdvertisementResponseArrayOutput) Index(i pulumi.IntInput) BgpAdvertisementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAdvertisementResponse {
		return vs[0].([]BgpAdvertisementResponse)[vs[1].(int)]
	}).(BgpAdvertisementResponseOutput)
}

type BgpPeer struct {
	// The ASN (Autonomous System Number) of the BGP peer.
	AsNumber float64 `pulumi:"asNumber"`
	// The password for this peering neighbor. It defaults to no password if not specified.
	Password *string `pulumi:"password"`
	// The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
	PeerIp string `pulumi:"peerIp"`
}

// BgpPeerInput is an input type that accepts BgpPeerArgs and BgpPeerOutput values.
// You can construct a concrete instance of `BgpPeerInput` via:
//
//	BgpPeerArgs{...}
type BgpPeerInput interface {
	pulumi.Input

	ToBgpPeerOutput() BgpPeerOutput
	ToBgpPeerOutputWithContext(context.Context) BgpPeerOutput
}

type BgpPeerArgs struct {
	// The ASN (Autonomous System Number) of the BGP peer.
	AsNumber pulumi.Float64Input `pulumi:"asNumber"`
	// The password for this peering neighbor. It defaults to no password if not specified.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
	PeerIp pulumi.StringInput `pulumi:"peerIp"`
}

func (BgpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpPeer)(nil)).Elem()
}

func (i BgpPeerArgs) ToBgpPeerOutput() BgpPeerOutput {
	return i.ToBgpPeerOutputWithContext(context.Background())
}

func (i BgpPeerArgs) ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpPeerOutput)
}

func (i BgpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[BgpPeer] {
	return pulumix.Output[BgpPeer]{
		OutputState: i.ToBgpPeerOutputWithContext(ctx).OutputState,
	}
}

// BgpPeerArrayInput is an input type that accepts BgpPeerArray and BgpPeerArrayOutput values.
// You can construct a concrete instance of `BgpPeerArrayInput` via:
//
//	BgpPeerArray{ BgpPeerArgs{...} }
type BgpPeerArrayInput interface {
	pulumi.Input

	ToBgpPeerArrayOutput() BgpPeerArrayOutput
	ToBgpPeerArrayOutputWithContext(context.Context) BgpPeerArrayOutput
}

type BgpPeerArray []BgpPeerInput

func (BgpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpPeer)(nil)).Elem()
}

func (i BgpPeerArray) ToBgpPeerArrayOutput() BgpPeerArrayOutput {
	return i.ToBgpPeerArrayOutputWithContext(context.Background())
}

func (i BgpPeerArray) ToBgpPeerArrayOutputWithContext(ctx context.Context) BgpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpPeerArrayOutput)
}

func (i BgpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpPeer] {
	return pulumix.Output[[]BgpPeer]{
		OutputState: i.ToBgpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpPeerOutput struct{ *pulumi.OutputState }

func (BgpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpPeer)(nil)).Elem()
}

func (o BgpPeerOutput) ToBgpPeerOutput() BgpPeerOutput {
	return o
}

func (o BgpPeerOutput) ToBgpPeerOutputWithContext(ctx context.Context) BgpPeerOutput {
	return o
}

func (o BgpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[BgpPeer] {
	return pulumix.Output[BgpPeer]{
		OutputState: o.OutputState,
	}
}

// The ASN (Autonomous System Number) of the BGP peer.
func (o BgpPeerOutput) AsNumber() pulumi.Float64Output {
	return o.ApplyT(func(v BgpPeer) float64 { return v.AsNumber }).(pulumi.Float64Output)
}

// The password for this peering neighbor. It defaults to no password if not specified.
func (o BgpPeerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpPeer) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
func (o BgpPeerOutput) PeerIp() pulumi.StringOutput {
	return o.ApplyT(func(v BgpPeer) string { return v.PeerIp }).(pulumi.StringOutput)
}

type BgpPeerArrayOutput struct{ *pulumi.OutputState }

func (BgpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpPeer)(nil)).Elem()
}

func (o BgpPeerArrayOutput) ToBgpPeerArrayOutput() BgpPeerArrayOutput {
	return o
}

func (o BgpPeerArrayOutput) ToBgpPeerArrayOutputWithContext(ctx context.Context) BgpPeerArrayOutput {
	return o
}

func (o BgpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpPeer] {
	return pulumix.Output[[]BgpPeer]{
		OutputState: o.OutputState,
	}
}

func (o BgpPeerArrayOutput) Index(i pulumi.IntInput) BgpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpPeer {
		return vs[0].([]BgpPeer)[vs[1].(int)]
	}).(BgpPeerOutput)
}

type BgpPeerResponse struct {
	// The ASN (Autonomous System Number) of the BGP peer.
	AsNumber float64 `pulumi:"asNumber"`
	// The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
	PeerIp string `pulumi:"peerIp"`
}

type BgpPeerResponseOutput struct{ *pulumi.OutputState }

func (BgpPeerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpPeerResponse)(nil)).Elem()
}

func (o BgpPeerResponseOutput) ToBgpPeerResponseOutput() BgpPeerResponseOutput {
	return o
}

func (o BgpPeerResponseOutput) ToBgpPeerResponseOutputWithContext(ctx context.Context) BgpPeerResponseOutput {
	return o
}

func (o BgpPeerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BgpPeerResponse] {
	return pulumix.Output[BgpPeerResponse]{
		OutputState: o.OutputState,
	}
}

// The ASN (Autonomous System Number) of the BGP peer.
func (o BgpPeerResponseOutput) AsNumber() pulumi.Float64Output {
	return o.ApplyT(func(v BgpPeerResponse) float64 { return v.AsNumber }).(pulumi.Float64Output)
}

// The IPv4 or IPv6 address to peer with the associated CNI Network. The IP version type will drive a peering with the same version type from the Default CNI Network. For example, IPv4 to IPv4 or IPv6 to IPv6.
func (o BgpPeerResponseOutput) PeerIp() pulumi.StringOutput {
	return o.ApplyT(func(v BgpPeerResponse) string { return v.PeerIp }).(pulumi.StringOutput)
}

type BgpPeerResponseArrayOutput struct{ *pulumi.OutputState }

func (BgpPeerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpPeerResponse)(nil)).Elem()
}

func (o BgpPeerResponseArrayOutput) ToBgpPeerResponseArrayOutput() BgpPeerResponseArrayOutput {
	return o
}

func (o BgpPeerResponseArrayOutput) ToBgpPeerResponseArrayOutputWithContext(ctx context.Context) BgpPeerResponseArrayOutput {
	return o
}

func (o BgpPeerResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpPeerResponse] {
	return pulumix.Output[[]BgpPeerResponse]{
		OutputState: o.OutputState,
	}
}

func (o BgpPeerResponseArrayOutput) Index(i pulumi.IntInput) BgpPeerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpPeerResponse {
		return vs[0].([]BgpPeerResponse)[vs[1].(int)]
	}).(BgpPeerResponseOutput)
}

type BgpServiceLoadBalancerConfiguration struct {
	// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
	BgpAdvertisements []BgpAdvertisement `pulumi:"bgpAdvertisements"`
	// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
	BgpPeers []ServiceLoadBalancerBgpPeer `pulumi:"bgpPeers"`
	// The indicator to specify if the load balancer peers with the network fabric.
	FabricPeeringEnabled *string `pulumi:"fabricPeeringEnabled"`
	// The list of pools of IP addresses that can be allocated to Load Balancer services.
	IpAddressPools []IpAddressPool `pulumi:"ipAddressPools"`
}

// Defaults sets the appropriate defaults for BgpServiceLoadBalancerConfiguration
func (val *BgpServiceLoadBalancerConfiguration) Defaults() *BgpServiceLoadBalancerConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FabricPeeringEnabled == nil {
		fabricPeeringEnabled_ := "True"
		tmp.FabricPeeringEnabled = &fabricPeeringEnabled_
	}
	return &tmp
}

// BgpServiceLoadBalancerConfigurationInput is an input type that accepts BgpServiceLoadBalancerConfigurationArgs and BgpServiceLoadBalancerConfigurationOutput values.
// You can construct a concrete instance of `BgpServiceLoadBalancerConfigurationInput` via:
//
//	BgpServiceLoadBalancerConfigurationArgs{...}
type BgpServiceLoadBalancerConfigurationInput interface {
	pulumi.Input

	ToBgpServiceLoadBalancerConfigurationOutput() BgpServiceLoadBalancerConfigurationOutput
	ToBgpServiceLoadBalancerConfigurationOutputWithContext(context.Context) BgpServiceLoadBalancerConfigurationOutput
}

type BgpServiceLoadBalancerConfigurationArgs struct {
	// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
	BgpAdvertisements BgpAdvertisementArrayInput `pulumi:"bgpAdvertisements"`
	// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
	BgpPeers ServiceLoadBalancerBgpPeerArrayInput `pulumi:"bgpPeers"`
	// The indicator to specify if the load balancer peers with the network fabric.
	FabricPeeringEnabled pulumi.StringPtrInput `pulumi:"fabricPeeringEnabled"`
	// The list of pools of IP addresses that can be allocated to Load Balancer services.
	IpAddressPools IpAddressPoolArrayInput `pulumi:"ipAddressPools"`
}

// Defaults sets the appropriate defaults for BgpServiceLoadBalancerConfigurationArgs
func (val *BgpServiceLoadBalancerConfigurationArgs) Defaults() *BgpServiceLoadBalancerConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FabricPeeringEnabled == nil {
		tmp.FabricPeeringEnabled = pulumi.StringPtr("True")
	}
	return &tmp
}
func (BgpServiceLoadBalancerConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpServiceLoadBalancerConfiguration)(nil)).Elem()
}

func (i BgpServiceLoadBalancerConfigurationArgs) ToBgpServiceLoadBalancerConfigurationOutput() BgpServiceLoadBalancerConfigurationOutput {
	return i.ToBgpServiceLoadBalancerConfigurationOutputWithContext(context.Background())
}

func (i BgpServiceLoadBalancerConfigurationArgs) ToBgpServiceLoadBalancerConfigurationOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpServiceLoadBalancerConfigurationOutput)
}

func (i BgpServiceLoadBalancerConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[BgpServiceLoadBalancerConfiguration] {
	return pulumix.Output[BgpServiceLoadBalancerConfiguration]{
		OutputState: i.ToBgpServiceLoadBalancerConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i BgpServiceLoadBalancerConfigurationArgs) ToBgpServiceLoadBalancerConfigurationPtrOutput() BgpServiceLoadBalancerConfigurationPtrOutput {
	return i.ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(context.Background())
}

func (i BgpServiceLoadBalancerConfigurationArgs) ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpServiceLoadBalancerConfigurationOutput).ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx)
}

// BgpServiceLoadBalancerConfigurationPtrInput is an input type that accepts BgpServiceLoadBalancerConfigurationArgs, BgpServiceLoadBalancerConfigurationPtr and BgpServiceLoadBalancerConfigurationPtrOutput values.
// You can construct a concrete instance of `BgpServiceLoadBalancerConfigurationPtrInput` via:
//
//	        BgpServiceLoadBalancerConfigurationArgs{...}
//
//	or:
//
//	        nil
type BgpServiceLoadBalancerConfigurationPtrInput interface {
	pulumi.Input

	ToBgpServiceLoadBalancerConfigurationPtrOutput() BgpServiceLoadBalancerConfigurationPtrOutput
	ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(context.Context) BgpServiceLoadBalancerConfigurationPtrOutput
}

type bgpServiceLoadBalancerConfigurationPtrType BgpServiceLoadBalancerConfigurationArgs

func BgpServiceLoadBalancerConfigurationPtr(v *BgpServiceLoadBalancerConfigurationArgs) BgpServiceLoadBalancerConfigurationPtrInput {
	return (*bgpServiceLoadBalancerConfigurationPtrType)(v)
}

func (*bgpServiceLoadBalancerConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpServiceLoadBalancerConfiguration)(nil)).Elem()
}

func (i *bgpServiceLoadBalancerConfigurationPtrType) ToBgpServiceLoadBalancerConfigurationPtrOutput() BgpServiceLoadBalancerConfigurationPtrOutput {
	return i.ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(context.Background())
}

func (i *bgpServiceLoadBalancerConfigurationPtrType) ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpServiceLoadBalancerConfigurationPtrOutput)
}

func (i *bgpServiceLoadBalancerConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*BgpServiceLoadBalancerConfiguration] {
	return pulumix.Output[*BgpServiceLoadBalancerConfiguration]{
		OutputState: i.ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type BgpServiceLoadBalancerConfigurationOutput struct{ *pulumi.OutputState }

func (BgpServiceLoadBalancerConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpServiceLoadBalancerConfiguration)(nil)).Elem()
}

func (o BgpServiceLoadBalancerConfigurationOutput) ToBgpServiceLoadBalancerConfigurationOutput() BgpServiceLoadBalancerConfigurationOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationOutput) ToBgpServiceLoadBalancerConfigurationOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationOutput) ToBgpServiceLoadBalancerConfigurationPtrOutput() BgpServiceLoadBalancerConfigurationPtrOutput {
	return o.ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(context.Background())
}

func (o BgpServiceLoadBalancerConfigurationOutput) ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BgpServiceLoadBalancerConfiguration) *BgpServiceLoadBalancerConfiguration {
		return &v
	}).(BgpServiceLoadBalancerConfigurationPtrOutput)
}

func (o BgpServiceLoadBalancerConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BgpServiceLoadBalancerConfiguration] {
	return pulumix.Output[BgpServiceLoadBalancerConfiguration]{
		OutputState: o.OutputState,
	}
}

// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
func (o BgpServiceLoadBalancerConfigurationOutput) BgpAdvertisements() BgpAdvertisementArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfiguration) []BgpAdvertisement { return v.BgpAdvertisements }).(BgpAdvertisementArrayOutput)
}

// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
func (o BgpServiceLoadBalancerConfigurationOutput) BgpPeers() ServiceLoadBalancerBgpPeerArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfiguration) []ServiceLoadBalancerBgpPeer { return v.BgpPeers }).(ServiceLoadBalancerBgpPeerArrayOutput)
}

// The indicator to specify if the load balancer peers with the network fabric.
func (o BgpServiceLoadBalancerConfigurationOutput) FabricPeeringEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfiguration) *string { return v.FabricPeeringEnabled }).(pulumi.StringPtrOutput)
}

// The list of pools of IP addresses that can be allocated to Load Balancer services.
func (o BgpServiceLoadBalancerConfigurationOutput) IpAddressPools() IpAddressPoolArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfiguration) []IpAddressPool { return v.IpAddressPools }).(IpAddressPoolArrayOutput)
}

type BgpServiceLoadBalancerConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BgpServiceLoadBalancerConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpServiceLoadBalancerConfiguration)(nil)).Elem()
}

func (o BgpServiceLoadBalancerConfigurationPtrOutput) ToBgpServiceLoadBalancerConfigurationPtrOutput() BgpServiceLoadBalancerConfigurationPtrOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationPtrOutput) ToBgpServiceLoadBalancerConfigurationPtrOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationPtrOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BgpServiceLoadBalancerConfiguration] {
	return pulumix.Output[*BgpServiceLoadBalancerConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o BgpServiceLoadBalancerConfigurationPtrOutput) Elem() BgpServiceLoadBalancerConfigurationOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfiguration) BgpServiceLoadBalancerConfiguration {
		if v != nil {
			return *v
		}
		var ret BgpServiceLoadBalancerConfiguration
		return ret
	}).(BgpServiceLoadBalancerConfigurationOutput)
}

// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
func (o BgpServiceLoadBalancerConfigurationPtrOutput) BgpAdvertisements() BgpAdvertisementArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfiguration) []BgpAdvertisement {
		if v == nil {
			return nil
		}
		return v.BgpAdvertisements
	}).(BgpAdvertisementArrayOutput)
}

// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
func (o BgpServiceLoadBalancerConfigurationPtrOutput) BgpPeers() ServiceLoadBalancerBgpPeerArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfiguration) []ServiceLoadBalancerBgpPeer {
		if v == nil {
			return nil
		}
		return v.BgpPeers
	}).(ServiceLoadBalancerBgpPeerArrayOutput)
}

// The indicator to specify if the load balancer peers with the network fabric.
func (o BgpServiceLoadBalancerConfigurationPtrOutput) FabricPeeringEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FabricPeeringEnabled
	}).(pulumi.StringPtrOutput)
}

// The list of pools of IP addresses that can be allocated to Load Balancer services.
func (o BgpServiceLoadBalancerConfigurationPtrOutput) IpAddressPools() IpAddressPoolArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfiguration) []IpAddressPool {
		if v == nil {
			return nil
		}
		return v.IpAddressPools
	}).(IpAddressPoolArrayOutput)
}

type BgpServiceLoadBalancerConfigurationResponse struct {
	// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
	BgpAdvertisements []BgpAdvertisementResponse `pulumi:"bgpAdvertisements"`
	// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
	BgpPeers []ServiceLoadBalancerBgpPeerResponse `pulumi:"bgpPeers"`
	// The indicator to specify if the load balancer peers with the network fabric.
	FabricPeeringEnabled *string `pulumi:"fabricPeeringEnabled"`
	// The list of pools of IP addresses that can be allocated to Load Balancer services.
	IpAddressPools []IpAddressPoolResponse `pulumi:"ipAddressPools"`
}

// Defaults sets the appropriate defaults for BgpServiceLoadBalancerConfigurationResponse
func (val *BgpServiceLoadBalancerConfigurationResponse) Defaults() *BgpServiceLoadBalancerConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FabricPeeringEnabled == nil {
		fabricPeeringEnabled_ := "True"
		tmp.FabricPeeringEnabled = &fabricPeeringEnabled_
	}
	return &tmp
}

type BgpServiceLoadBalancerConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BgpServiceLoadBalancerConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpServiceLoadBalancerConfigurationResponse)(nil)).Elem()
}

func (o BgpServiceLoadBalancerConfigurationResponseOutput) ToBgpServiceLoadBalancerConfigurationResponseOutput() BgpServiceLoadBalancerConfigurationResponseOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationResponseOutput) ToBgpServiceLoadBalancerConfigurationResponseOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationResponseOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BgpServiceLoadBalancerConfigurationResponse] {
	return pulumix.Output[BgpServiceLoadBalancerConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
func (o BgpServiceLoadBalancerConfigurationResponseOutput) BgpAdvertisements() BgpAdvertisementResponseArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfigurationResponse) []BgpAdvertisementResponse {
		return v.BgpAdvertisements
	}).(BgpAdvertisementResponseArrayOutput)
}

// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
func (o BgpServiceLoadBalancerConfigurationResponseOutput) BgpPeers() ServiceLoadBalancerBgpPeerResponseArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfigurationResponse) []ServiceLoadBalancerBgpPeerResponse {
		return v.BgpPeers
	}).(ServiceLoadBalancerBgpPeerResponseArrayOutput)
}

// The indicator to specify if the load balancer peers with the network fabric.
func (o BgpServiceLoadBalancerConfigurationResponseOutput) FabricPeeringEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfigurationResponse) *string { return v.FabricPeeringEnabled }).(pulumi.StringPtrOutput)
}

// The list of pools of IP addresses that can be allocated to Load Balancer services.
func (o BgpServiceLoadBalancerConfigurationResponseOutput) IpAddressPools() IpAddressPoolResponseArrayOutput {
	return o.ApplyT(func(v BgpServiceLoadBalancerConfigurationResponse) []IpAddressPoolResponse { return v.IpAddressPools }).(IpAddressPoolResponseArrayOutput)
}

type BgpServiceLoadBalancerConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (BgpServiceLoadBalancerConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BgpServiceLoadBalancerConfigurationResponse)(nil)).Elem()
}

func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) ToBgpServiceLoadBalancerConfigurationResponsePtrOutput() BgpServiceLoadBalancerConfigurationResponsePtrOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) ToBgpServiceLoadBalancerConfigurationResponsePtrOutputWithContext(ctx context.Context) BgpServiceLoadBalancerConfigurationResponsePtrOutput {
	return o
}

func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BgpServiceLoadBalancerConfigurationResponse] {
	return pulumix.Output[*BgpServiceLoadBalancerConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) Elem() BgpServiceLoadBalancerConfigurationResponseOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfigurationResponse) BgpServiceLoadBalancerConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret BgpServiceLoadBalancerConfigurationResponse
		return ret
	}).(BgpServiceLoadBalancerConfigurationResponseOutput)
}

// The association of IP address pools to the communities and peers, allowing for announcement of IPs.
func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) BgpAdvertisements() BgpAdvertisementResponseArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfigurationResponse) []BgpAdvertisementResponse {
		if v == nil {
			return nil
		}
		return v.BgpAdvertisements
	}).(BgpAdvertisementResponseArrayOutput)
}

// The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) BgpPeers() ServiceLoadBalancerBgpPeerResponseArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfigurationResponse) []ServiceLoadBalancerBgpPeerResponse {
		if v == nil {
			return nil
		}
		return v.BgpPeers
	}).(ServiceLoadBalancerBgpPeerResponseArrayOutput)
}

// The indicator to specify if the load balancer peers with the network fabric.
func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) FabricPeeringEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.FabricPeeringEnabled
	}).(pulumi.StringPtrOutput)
}

// The list of pools of IP addresses that can be allocated to Load Balancer services.
func (o BgpServiceLoadBalancerConfigurationResponsePtrOutput) IpAddressPools() IpAddressPoolResponseArrayOutput {
	return o.ApplyT(func(v *BgpServiceLoadBalancerConfigurationResponse) []IpAddressPoolResponse {
		if v == nil {
			return nil
		}
		return v.IpAddressPools
	}).(IpAddressPoolResponseArrayOutput)
}

type ClusterAvailableUpgradeVersionResponse struct {
	// The indicator of whether the control plane will be impacted during the upgrade.
	ControlImpact string `pulumi:"controlImpact"`
	// The expected duration needed for this upgrade.
	ExpectedDuration string `pulumi:"expectedDuration"`
	// The impact description including the specific details and release notes.
	ImpactDescription string `pulumi:"impactDescription"`
	// The last date the version of the platform is supported.
	SupportExpiryDate string `pulumi:"supportExpiryDate"`
	// The target version this cluster will be upgraded to.
	TargetClusterVersion string `pulumi:"targetClusterVersion"`
	// The indicator of whether the workload will be impacted during the upgrade.
	WorkloadImpact string `pulumi:"workloadImpact"`
}

type ClusterAvailableUpgradeVersionResponseOutput struct{ *pulumi.OutputState }

func (ClusterAvailableUpgradeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAvailableUpgradeVersionResponse)(nil)).Elem()
}

func (o ClusterAvailableUpgradeVersionResponseOutput) ToClusterAvailableUpgradeVersionResponseOutput() ClusterAvailableUpgradeVersionResponseOutput {
	return o
}

func (o ClusterAvailableUpgradeVersionResponseOutput) ToClusterAvailableUpgradeVersionResponseOutputWithContext(ctx context.Context) ClusterAvailableUpgradeVersionResponseOutput {
	return o
}

func (o ClusterAvailableUpgradeVersionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterAvailableUpgradeVersionResponse] {
	return pulumix.Output[ClusterAvailableUpgradeVersionResponse]{
		OutputState: o.OutputState,
	}
}

// The indicator of whether the control plane will be impacted during the upgrade.
func (o ClusterAvailableUpgradeVersionResponseOutput) ControlImpact() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.ControlImpact }).(pulumi.StringOutput)
}

// The expected duration needed for this upgrade.
func (o ClusterAvailableUpgradeVersionResponseOutput) ExpectedDuration() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.ExpectedDuration }).(pulumi.StringOutput)
}

// The impact description including the specific details and release notes.
func (o ClusterAvailableUpgradeVersionResponseOutput) ImpactDescription() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.ImpactDescription }).(pulumi.StringOutput)
}

// The last date the version of the platform is supported.
func (o ClusterAvailableUpgradeVersionResponseOutput) SupportExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.SupportExpiryDate }).(pulumi.StringOutput)
}

// The target version this cluster will be upgraded to.
func (o ClusterAvailableUpgradeVersionResponseOutput) TargetClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.TargetClusterVersion }).(pulumi.StringOutput)
}

// The indicator of whether the workload will be impacted during the upgrade.
func (o ClusterAvailableUpgradeVersionResponseOutput) WorkloadImpact() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableUpgradeVersionResponse) string { return v.WorkloadImpact }).(pulumi.StringOutput)
}

type ClusterAvailableUpgradeVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterAvailableUpgradeVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterAvailableUpgradeVersionResponse)(nil)).Elem()
}

func (o ClusterAvailableUpgradeVersionResponseArrayOutput) ToClusterAvailableUpgradeVersionResponseArrayOutput() ClusterAvailableUpgradeVersionResponseArrayOutput {
	return o
}

func (o ClusterAvailableUpgradeVersionResponseArrayOutput) ToClusterAvailableUpgradeVersionResponseArrayOutputWithContext(ctx context.Context) ClusterAvailableUpgradeVersionResponseArrayOutput {
	return o
}

func (o ClusterAvailableUpgradeVersionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ClusterAvailableUpgradeVersionResponse] {
	return pulumix.Output[[]ClusterAvailableUpgradeVersionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ClusterAvailableUpgradeVersionResponseArrayOutput) Index(i pulumi.IntInput) ClusterAvailableUpgradeVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterAvailableUpgradeVersionResponse {
		return vs[0].([]ClusterAvailableUpgradeVersionResponse)[vs[1].(int)]
	}).(ClusterAvailableUpgradeVersionResponseOutput)
}

type ClusterAvailableVersionResponse struct {
	// The last date the version of the platform is supported.
	SupportExpiryDate string `pulumi:"supportExpiryDate"`
	// The version of the cluster to be deployed.
	TargetClusterVersion string `pulumi:"targetClusterVersion"`
}

type ClusterAvailableVersionResponseOutput struct{ *pulumi.OutputState }

func (ClusterAvailableVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterAvailableVersionResponse)(nil)).Elem()
}

func (o ClusterAvailableVersionResponseOutput) ToClusterAvailableVersionResponseOutput() ClusterAvailableVersionResponseOutput {
	return o
}

func (o ClusterAvailableVersionResponseOutput) ToClusterAvailableVersionResponseOutputWithContext(ctx context.Context) ClusterAvailableVersionResponseOutput {
	return o
}

func (o ClusterAvailableVersionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterAvailableVersionResponse] {
	return pulumix.Output[ClusterAvailableVersionResponse]{
		OutputState: o.OutputState,
	}
}

// The last date the version of the platform is supported.
func (o ClusterAvailableVersionResponseOutput) SupportExpiryDate() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableVersionResponse) string { return v.SupportExpiryDate }).(pulumi.StringOutput)
}

// The version of the cluster to be deployed.
func (o ClusterAvailableVersionResponseOutput) TargetClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterAvailableVersionResponse) string { return v.TargetClusterVersion }).(pulumi.StringOutput)
}

type ClusterAvailableVersionResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterAvailableVersionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterAvailableVersionResponse)(nil)).Elem()
}

func (o ClusterAvailableVersionResponseArrayOutput) ToClusterAvailableVersionResponseArrayOutput() ClusterAvailableVersionResponseArrayOutput {
	return o
}

func (o ClusterAvailableVersionResponseArrayOutput) ToClusterAvailableVersionResponseArrayOutputWithContext(ctx context.Context) ClusterAvailableVersionResponseArrayOutput {
	return o
}

func (o ClusterAvailableVersionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ClusterAvailableVersionResponse] {
	return pulumix.Output[[]ClusterAvailableVersionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ClusterAvailableVersionResponseArrayOutput) Index(i pulumi.IntInput) ClusterAvailableVersionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterAvailableVersionResponse {
		return vs[0].([]ClusterAvailableVersionResponse)[vs[1].(int)]
	}).(ClusterAvailableVersionResponseOutput)
}

type ClusterCapacityResponse struct {
	// The remaining appliance-based storage in GB available for workload use.
	AvailableApplianceStorageGB *float64 `pulumi:"availableApplianceStorageGB"`
	// The remaining number of cores that are available in this cluster for workload use.
	AvailableCoreCount *float64 `pulumi:"availableCoreCount"`
	// The remaining machine or host-based storage in GB available for workload use.
	AvailableHostStorageGB *float64 `pulumi:"availableHostStorageGB"`
	// The remaining memory in GB that are available in this cluster for workload use.
	AvailableMemoryGB *float64 `pulumi:"availableMemoryGB"`
	// The total appliance-based storage in GB supported by this cluster for workload use.
	TotalApplianceStorageGB *float64 `pulumi:"totalApplianceStorageGB"`
	// The total number of cores that are supported by this cluster for workload use.
	TotalCoreCount *float64 `pulumi:"totalCoreCount"`
	// The total machine or host-based storage in GB supported by this cluster for workload use.
	TotalHostStorageGB *float64 `pulumi:"totalHostStorageGB"`
	// The total memory supported by this cluster for workload use.
	TotalMemoryGB *float64 `pulumi:"totalMemoryGB"`
}

type ClusterCapacityResponseOutput struct{ *pulumi.OutputState }

func (ClusterCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCapacityResponse)(nil)).Elem()
}

func (o ClusterCapacityResponseOutput) ToClusterCapacityResponseOutput() ClusterCapacityResponseOutput {
	return o
}

func (o ClusterCapacityResponseOutput) ToClusterCapacityResponseOutputWithContext(ctx context.Context) ClusterCapacityResponseOutput {
	return o
}

func (o ClusterCapacityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClusterCapacityResponse] {
	return pulumix.Output[ClusterCapacityResponse]{
		OutputState: o.OutputState,
	}
}

// The remaining appliance-based storage in GB available for workload use.
func (o ClusterCapacityResponseOutput) AvailableApplianceStorageGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.AvailableApplianceStorageGB }).(pulumi.Float64PtrOutput)
}

// The remaining number of cores that are available in this cluster for workload use.
func (o ClusterCapacityResponseOutput) AvailableCoreCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.AvailableCoreCount }).(pulumi.Float64PtrOutput)
}

// The remaining machine or host-based storage in GB available for workload use.
func (o ClusterCapacityResponseOutput) AvailableHostStorageGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.AvailableHostStorageGB }).(pulumi.Float64PtrOutput)
}

// The remaining memory in GB that are available in this cluster for workload use.
func (o ClusterCapacityResponseOutput) AvailableMemoryGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.AvailableMemoryGB }).(pulumi.Float64PtrOutput)
}

// The total appliance-based storage in GB supported by this cluster for workload use.
func (o ClusterCapacityResponseOutput) TotalApplianceStorageGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.TotalApplianceStorageGB }).(pulumi.Float64PtrOutput)
}

// The total number of cores that are supported by this cluster for workload use.
func (o ClusterCapacityResponseOutput) TotalCoreCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.TotalCoreCount }).(pulumi.Float64PtrOutput)
}

// The total machine or host-based storage in GB supported by this cluster for workload use.
func (o ClusterCapacityResponseOutput) TotalHostStorageGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.TotalHostStorageGB }).(pulumi.Float64PtrOutput)
}

// The total memory supported by this cluster for workload use.
func (o ClusterCapacityResponseOutput) TotalMemoryGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClusterCapacityResponse) *float64 { return v.TotalMemoryGB }).(pulumi.Float64PtrOutput)
}

type CniBgpConfiguration struct {
	// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
	BgpPeers []BgpPeer `pulumi:"bgpPeers"`
	// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
	// communities that should be associated with that prefix when it is announced.
	CommunityAdvertisements []CommunityAdvertisement `pulumi:"communityAdvertisements"`
	// The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
	NodeMeshPassword *string `pulumi:"nodeMeshPassword"`
	// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
	ServiceExternalPrefixes []string `pulumi:"serviceExternalPrefixes"`
	// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
	// are within one of these blocks.
	ServiceLoadBalancerPrefixes []string `pulumi:"serviceLoadBalancerPrefixes"`
}

// CniBgpConfigurationInput is an input type that accepts CniBgpConfigurationArgs and CniBgpConfigurationOutput values.
// You can construct a concrete instance of `CniBgpConfigurationInput` via:
//
//	CniBgpConfigurationArgs{...}
type CniBgpConfigurationInput interface {
	pulumi.Input

	ToCniBgpConfigurationOutput() CniBgpConfigurationOutput
	ToCniBgpConfigurationOutputWithContext(context.Context) CniBgpConfigurationOutput
}

type CniBgpConfigurationArgs struct {
	// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
	BgpPeers BgpPeerArrayInput `pulumi:"bgpPeers"`
	// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
	// communities that should be associated with that prefix when it is announced.
	CommunityAdvertisements CommunityAdvertisementArrayInput `pulumi:"communityAdvertisements"`
	// The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
	NodeMeshPassword pulumi.StringPtrInput `pulumi:"nodeMeshPassword"`
	// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
	ServiceExternalPrefixes pulumi.StringArrayInput `pulumi:"serviceExternalPrefixes"`
	// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
	// are within one of these blocks.
	ServiceLoadBalancerPrefixes pulumi.StringArrayInput `pulumi:"serviceLoadBalancerPrefixes"`
}

func (CniBgpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBgpConfiguration)(nil)).Elem()
}

func (i CniBgpConfigurationArgs) ToCniBgpConfigurationOutput() CniBgpConfigurationOutput {
	return i.ToCniBgpConfigurationOutputWithContext(context.Background())
}

func (i CniBgpConfigurationArgs) ToCniBgpConfigurationOutputWithContext(ctx context.Context) CniBgpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBgpConfigurationOutput)
}

func (i CniBgpConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[CniBgpConfiguration] {
	return pulumix.Output[CniBgpConfiguration]{
		OutputState: i.ToCniBgpConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i CniBgpConfigurationArgs) ToCniBgpConfigurationPtrOutput() CniBgpConfigurationPtrOutput {
	return i.ToCniBgpConfigurationPtrOutputWithContext(context.Background())
}

func (i CniBgpConfigurationArgs) ToCniBgpConfigurationPtrOutputWithContext(ctx context.Context) CniBgpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBgpConfigurationOutput).ToCniBgpConfigurationPtrOutputWithContext(ctx)
}

// CniBgpConfigurationPtrInput is an input type that accepts CniBgpConfigurationArgs, CniBgpConfigurationPtr and CniBgpConfigurationPtrOutput values.
// You can construct a concrete instance of `CniBgpConfigurationPtrInput` via:
//
//	        CniBgpConfigurationArgs{...}
//
//	or:
//
//	        nil
type CniBgpConfigurationPtrInput interface {
	pulumi.Input

	ToCniBgpConfigurationPtrOutput() CniBgpConfigurationPtrOutput
	ToCniBgpConfigurationPtrOutputWithContext(context.Context) CniBgpConfigurationPtrOutput
}

type cniBgpConfigurationPtrType CniBgpConfigurationArgs

func CniBgpConfigurationPtr(v *CniBgpConfigurationArgs) CniBgpConfigurationPtrInput {
	return (*cniBgpConfigurationPtrType)(v)
}

func (*cniBgpConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBgpConfiguration)(nil)).Elem()
}

func (i *cniBgpConfigurationPtrType) ToCniBgpConfigurationPtrOutput() CniBgpConfigurationPtrOutput {
	return i.ToCniBgpConfigurationPtrOutputWithContext(context.Background())
}

func (i *cniBgpConfigurationPtrType) ToCniBgpConfigurationPtrOutputWithContext(ctx context.Context) CniBgpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CniBgpConfigurationPtrOutput)
}

func (i *cniBgpConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*CniBgpConfiguration] {
	return pulumix.Output[*CniBgpConfiguration]{
		OutputState: i.ToCniBgpConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type CniBgpConfigurationOutput struct{ *pulumi.OutputState }

func (CniBgpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBgpConfiguration)(nil)).Elem()
}

func (o CniBgpConfigurationOutput) ToCniBgpConfigurationOutput() CniBgpConfigurationOutput {
	return o
}

func (o CniBgpConfigurationOutput) ToCniBgpConfigurationOutputWithContext(ctx context.Context) CniBgpConfigurationOutput {
	return o
}

func (o CniBgpConfigurationOutput) ToCniBgpConfigurationPtrOutput() CniBgpConfigurationPtrOutput {
	return o.ToCniBgpConfigurationPtrOutputWithContext(context.Background())
}

func (o CniBgpConfigurationOutput) ToCniBgpConfigurationPtrOutputWithContext(ctx context.Context) CniBgpConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CniBgpConfiguration) *CniBgpConfiguration {
		return &v
	}).(CniBgpConfigurationPtrOutput)
}

func (o CniBgpConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[CniBgpConfiguration] {
	return pulumix.Output[CniBgpConfiguration]{
		OutputState: o.OutputState,
	}
}

// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
func (o CniBgpConfigurationOutput) BgpPeers() BgpPeerArrayOutput {
	return o.ApplyT(func(v CniBgpConfiguration) []BgpPeer { return v.BgpPeers }).(BgpPeerArrayOutput)
}

// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
// communities that should be associated with that prefix when it is announced.
func (o CniBgpConfigurationOutput) CommunityAdvertisements() CommunityAdvertisementArrayOutput {
	return o.ApplyT(func(v CniBgpConfiguration) []CommunityAdvertisement { return v.CommunityAdvertisements }).(CommunityAdvertisementArrayOutput)
}

// The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
func (o CniBgpConfigurationOutput) NodeMeshPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CniBgpConfiguration) *string { return v.NodeMeshPassword }).(pulumi.StringPtrOutput)
}

// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
func (o CniBgpConfigurationOutput) ServiceExternalPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CniBgpConfiguration) []string { return v.ServiceExternalPrefixes }).(pulumi.StringArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
// are within one of these blocks.
func (o CniBgpConfigurationOutput) ServiceLoadBalancerPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CniBgpConfiguration) []string { return v.ServiceLoadBalancerPrefixes }).(pulumi.StringArrayOutput)
}

type CniBgpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CniBgpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBgpConfiguration)(nil)).Elem()
}

func (o CniBgpConfigurationPtrOutput) ToCniBgpConfigurationPtrOutput() CniBgpConfigurationPtrOutput {
	return o
}

func (o CniBgpConfigurationPtrOutput) ToCniBgpConfigurationPtrOutputWithContext(ctx context.Context) CniBgpConfigurationPtrOutput {
	return o
}

func (o CniBgpConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CniBgpConfiguration] {
	return pulumix.Output[*CniBgpConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o CniBgpConfigurationPtrOutput) Elem() CniBgpConfigurationOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) CniBgpConfiguration {
		if v != nil {
			return *v
		}
		var ret CniBgpConfiguration
		return ret
	}).(CniBgpConfigurationOutput)
}

// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
func (o CniBgpConfigurationPtrOutput) BgpPeers() BgpPeerArrayOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) []BgpPeer {
		if v == nil {
			return nil
		}
		return v.BgpPeers
	}).(BgpPeerArrayOutput)
}

// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
// communities that should be associated with that prefix when it is announced.
func (o CniBgpConfigurationPtrOutput) CommunityAdvertisements() CommunityAdvertisementArrayOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) []CommunityAdvertisement {
		if v == nil {
			return nil
		}
		return v.CommunityAdvertisements
	}).(CommunityAdvertisementArrayOutput)
}

// The password of the Calico node mesh. It defaults to a randomly-generated string when not provided.
func (o CniBgpConfigurationPtrOutput) NodeMeshPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.NodeMeshPassword
	}).(pulumi.StringPtrOutput)
}

// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
func (o CniBgpConfigurationPtrOutput) ServiceExternalPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ServiceExternalPrefixes
	}).(pulumi.StringArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
// are within one of these blocks.
func (o CniBgpConfigurationPtrOutput) ServiceLoadBalancerPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CniBgpConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ServiceLoadBalancerPrefixes
	}).(pulumi.StringArrayOutput)
}

type CniBgpConfigurationResponse struct {
	// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
	BgpPeers []BgpPeerResponse `pulumi:"bgpPeers"`
	// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
	// communities that should be associated with that prefix when it is announced.
	CommunityAdvertisements []CommunityAdvertisementResponse `pulumi:"communityAdvertisements"`
	// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
	ServiceExternalPrefixes []string `pulumi:"serviceExternalPrefixes"`
	// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
	// are within one of these blocks.
	ServiceLoadBalancerPrefixes []string `pulumi:"serviceLoadBalancerPrefixes"`
}

type CniBgpConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CniBgpConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CniBgpConfigurationResponse)(nil)).Elem()
}

func (o CniBgpConfigurationResponseOutput) ToCniBgpConfigurationResponseOutput() CniBgpConfigurationResponseOutput {
	return o
}

func (o CniBgpConfigurationResponseOutput) ToCniBgpConfigurationResponseOutputWithContext(ctx context.Context) CniBgpConfigurationResponseOutput {
	return o
}

func (o CniBgpConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CniBgpConfigurationResponse] {
	return pulumix.Output[CniBgpConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
func (o CniBgpConfigurationResponseOutput) BgpPeers() BgpPeerResponseArrayOutput {
	return o.ApplyT(func(v CniBgpConfigurationResponse) []BgpPeerResponse { return v.BgpPeers }).(BgpPeerResponseArrayOutput)
}

// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
// communities that should be associated with that prefix when it is announced.
func (o CniBgpConfigurationResponseOutput) CommunityAdvertisements() CommunityAdvertisementResponseArrayOutput {
	return o.ApplyT(func(v CniBgpConfigurationResponse) []CommunityAdvertisementResponse { return v.CommunityAdvertisements }).(CommunityAdvertisementResponseArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
func (o CniBgpConfigurationResponseOutput) ServiceExternalPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CniBgpConfigurationResponse) []string { return v.ServiceExternalPrefixes }).(pulumi.StringArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
// are within one of these blocks.
func (o CniBgpConfigurationResponseOutput) ServiceLoadBalancerPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CniBgpConfigurationResponse) []string { return v.ServiceLoadBalancerPrefixes }).(pulumi.StringArrayOutput)
}

type CniBgpConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CniBgpConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CniBgpConfigurationResponse)(nil)).Elem()
}

func (o CniBgpConfigurationResponsePtrOutput) ToCniBgpConfigurationResponsePtrOutput() CniBgpConfigurationResponsePtrOutput {
	return o
}

func (o CniBgpConfigurationResponsePtrOutput) ToCniBgpConfigurationResponsePtrOutputWithContext(ctx context.Context) CniBgpConfigurationResponsePtrOutput {
	return o
}

func (o CniBgpConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CniBgpConfigurationResponse] {
	return pulumix.Output[*CniBgpConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o CniBgpConfigurationResponsePtrOutput) Elem() CniBgpConfigurationResponseOutput {
	return o.ApplyT(func(v *CniBgpConfigurationResponse) CniBgpConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CniBgpConfigurationResponse
		return ret
	}).(CniBgpConfigurationResponseOutput)
}

// The list of BgpPeer entities that the Hybrid AKS cluster will peer with in addition to peering that occurs automatically with the switch fabric.
func (o CniBgpConfigurationResponsePtrOutput) BgpPeers() BgpPeerResponseArrayOutput {
	return o.ApplyT(func(v *CniBgpConfigurationResponse) []BgpPeerResponse {
		if v == nil {
			return nil
		}
		return v.BgpPeers
	}).(BgpPeerResponseArrayOutput)
}

// The list of prefix community advertisement properties. Each prefix community specifies a prefix, and the
// communities that should be associated with that prefix when it is announced.
func (o CniBgpConfigurationResponsePtrOutput) CommunityAdvertisements() CommunityAdvertisementResponseArrayOutput {
	return o.ApplyT(func(v *CniBgpConfigurationResponse) []CommunityAdvertisementResponse {
		if v == nil {
			return nil
		}
		return v.CommunityAdvertisements
	}).(CommunityAdvertisementResponseArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes service external IPs to be advertised over BGP.
func (o CniBgpConfigurationResponsePtrOutput) ServiceExternalPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CniBgpConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ServiceExternalPrefixes
	}).(pulumi.StringArrayOutput)
}

// The subnet blocks in CIDR format for Kubernetes load balancers. Load balancer IPs will only be advertised if they
// are within one of these blocks.
func (o CniBgpConfigurationResponsePtrOutput) ServiceLoadBalancerPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CniBgpConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ServiceLoadBalancerPrefixes
	}).(pulumi.StringArrayOutput)
}

type CommunityAdvertisement struct {
	// The list of community strings to announce with this prefix.
	Communities []string `pulumi:"communities"`
	// The subnet in CIDR format for which properties should be advertised.
	SubnetPrefix string `pulumi:"subnetPrefix"`
}

// CommunityAdvertisementInput is an input type that accepts CommunityAdvertisementArgs and CommunityAdvertisementOutput values.
// You can construct a concrete instance of `CommunityAdvertisementInput` via:
//
//	CommunityAdvertisementArgs{...}
type CommunityAdvertisementInput interface {
	pulumi.Input

	ToCommunityAdvertisementOutput() CommunityAdvertisementOutput
	ToCommunityAdvertisementOutputWithContext(context.Context) CommunityAdvertisementOutput
}

type CommunityAdvertisementArgs struct {
	// The list of community strings to announce with this prefix.
	Communities pulumi.StringArrayInput `pulumi:"communities"`
	// The subnet in CIDR format for which properties should be advertised.
	SubnetPrefix pulumi.StringInput `pulumi:"subnetPrefix"`
}

func (CommunityAdvertisementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityAdvertisement)(nil)).Elem()
}

func (i CommunityAdvertisementArgs) ToCommunityAdvertisementOutput() CommunityAdvertisementOutput {
	return i.ToCommunityAdvertisementOutputWithContext(context.Background())
}

func (i CommunityAdvertisementArgs) ToCommunityAdvertisementOutputWithContext(ctx context.Context) CommunityAdvertisementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommunityAdvertisementOutput)
}

func (i CommunityAdvertisementArgs) ToOutput(ctx context.Context) pulumix.Output[CommunityAdvertisement] {
	return pulumix.Output[CommunityAdvertisement]{
		OutputState: i.ToCommunityAdvertisementOutputWithContext(ctx).OutputState,
	}
}

// CommunityAdvertisementArrayInput is an input type that accepts CommunityAdvertisementArray and CommunityAdvertisementArrayOutput values.
// You can construct a concrete instance of `CommunityAdvertisementArrayInput` via:
//
//	CommunityAdvertisementArray{ CommunityAdvertisementArgs{...} }
type CommunityAdvertisementArrayInput interface {
	pulumi.Input

	ToCommunityAdvertisementArrayOutput() CommunityAdvertisementArrayOutput
	ToCommunityAdvertisementArrayOutputWithContext(context.Context) CommunityAdvertisementArrayOutput
}

type CommunityAdvertisementArray []CommunityAdvertisementInput

func (CommunityAdvertisementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommunityAdvertisement)(nil)).Elem()
}

func (i CommunityAdvertisementArray) ToCommunityAdvertisementArrayOutput() CommunityAdvertisementArrayOutput {
	return i.ToCommunityAdvertisementArrayOutputWithContext(context.Background())
}

func (i CommunityAdvertisementArray) ToCommunityAdvertisementArrayOutputWithContext(ctx context.Context) CommunityAdvertisementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommunityAdvertisementArrayOutput)
}

func (i CommunityAdvertisementArray) ToOutput(ctx context.Context) pulumix.Output[[]CommunityAdvertisement] {
	return pulumix.Output[[]CommunityAdvertisement]{
		OutputState: i.ToCommunityAdvertisementArrayOutputWithContext(ctx).OutputState,
	}
}

type CommunityAdvertisementOutput struct{ *pulumi.OutputState }

func (CommunityAdvertisementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityAdvertisement)(nil)).Elem()
}

func (o CommunityAdvertisementOutput) ToCommunityAdvertisementOutput() CommunityAdvertisementOutput {
	return o
}

func (o CommunityAdvertisementOutput) ToCommunityAdvertisementOutputWithContext(ctx context.Context) CommunityAdvertisementOutput {
	return o
}

func (o CommunityAdvertisementOutput) ToOutput(ctx context.Context) pulumix.Output[CommunityAdvertisement] {
	return pulumix.Output[CommunityAdvertisement]{
		OutputState: o.OutputState,
	}
}

// The list of community strings to announce with this prefix.
func (o CommunityAdvertisementOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommunityAdvertisement) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// The subnet in CIDR format for which properties should be advertised.
func (o CommunityAdvertisementOutput) SubnetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v CommunityAdvertisement) string { return v.SubnetPrefix }).(pulumi.StringOutput)
}

type CommunityAdvertisementArrayOutput struct{ *pulumi.OutputState }

func (CommunityAdvertisementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommunityAdvertisement)(nil)).Elem()
}

func (o CommunityAdvertisementArrayOutput) ToCommunityAdvertisementArrayOutput() CommunityAdvertisementArrayOutput {
	return o
}

func (o CommunityAdvertisementArrayOutput) ToCommunityAdvertisementArrayOutputWithContext(ctx context.Context) CommunityAdvertisementArrayOutput {
	return o
}

func (o CommunityAdvertisementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CommunityAdvertisement] {
	return pulumix.Output[[]CommunityAdvertisement]{
		OutputState: o.OutputState,
	}
}

func (o CommunityAdvertisementArrayOutput) Index(i pulumi.IntInput) CommunityAdvertisementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommunityAdvertisement {
		return vs[0].([]CommunityAdvertisement)[vs[1].(int)]
	}).(CommunityAdvertisementOutput)
}

type CommunityAdvertisementResponse struct {
	// The list of community strings to announce with this prefix.
	Communities []string `pulumi:"communities"`
	// The subnet in CIDR format for which properties should be advertised.
	SubnetPrefix string `pulumi:"subnetPrefix"`
}

type CommunityAdvertisementResponseOutput struct{ *pulumi.OutputState }

func (CommunityAdvertisementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommunityAdvertisementResponse)(nil)).Elem()
}

func (o CommunityAdvertisementResponseOutput) ToCommunityAdvertisementResponseOutput() CommunityAdvertisementResponseOutput {
	return o
}

func (o CommunityAdvertisementResponseOutput) ToCommunityAdvertisementResponseOutputWithContext(ctx context.Context) CommunityAdvertisementResponseOutput {
	return o
}

func (o CommunityAdvertisementResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CommunityAdvertisementResponse] {
	return pulumix.Output[CommunityAdvertisementResponse]{
		OutputState: o.OutputState,
	}
}

// The list of community strings to announce with this prefix.
func (o CommunityAdvertisementResponseOutput) Communities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CommunityAdvertisementResponse) []string { return v.Communities }).(pulumi.StringArrayOutput)
}

// The subnet in CIDR format for which properties should be advertised.
func (o CommunityAdvertisementResponseOutput) SubnetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v CommunityAdvertisementResponse) string { return v.SubnetPrefix }).(pulumi.StringOutput)
}

type CommunityAdvertisementResponseArrayOutput struct{ *pulumi.OutputState }

func (CommunityAdvertisementResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommunityAdvertisementResponse)(nil)).Elem()
}

func (o CommunityAdvertisementResponseArrayOutput) ToCommunityAdvertisementResponseArrayOutput() CommunityAdvertisementResponseArrayOutput {
	return o
}

func (o CommunityAdvertisementResponseArrayOutput) ToCommunityAdvertisementResponseArrayOutputWithContext(ctx context.Context) CommunityAdvertisementResponseArrayOutput {
	return o
}

func (o CommunityAdvertisementResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CommunityAdvertisementResponse] {
	return pulumix.Output[[]CommunityAdvertisementResponse]{
		OutputState: o.OutputState,
	}
}

func (o CommunityAdvertisementResponseArrayOutput) Index(i pulumi.IntInput) CommunityAdvertisementResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommunityAdvertisementResponse {
		return vs[0].([]CommunityAdvertisementResponse)[vs[1].(int)]
	}).(CommunityAdvertisementResponseOutput)
}

type ControlPlaneNodeConfiguration struct {
	// The administrator credentials to be used for the nodes in the control plane.
	AdministratorConfiguration *AdministratorConfiguration `pulumi:"administratorConfiguration"`
	// The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count float64 `pulumi:"count"`
	// The name of the VM SKU supplied during creation.
	VmSkuName string `pulumi:"vmSkuName"`
}

// ControlPlaneNodeConfigurationInput is an input type that accepts ControlPlaneNodeConfigurationArgs and ControlPlaneNodeConfigurationOutput values.
// You can construct a concrete instance of `ControlPlaneNodeConfigurationInput` via:
//
//	ControlPlaneNodeConfigurationArgs{...}
type ControlPlaneNodeConfigurationInput interface {
	pulumi.Input

	ToControlPlaneNodeConfigurationOutput() ControlPlaneNodeConfigurationOutput
	ToControlPlaneNodeConfigurationOutputWithContext(context.Context) ControlPlaneNodeConfigurationOutput
}

type ControlPlaneNodeConfigurationArgs struct {
	// The administrator credentials to be used for the nodes in the control plane.
	AdministratorConfiguration AdministratorConfigurationPtrInput `pulumi:"administratorConfiguration"`
	// The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count pulumi.Float64Input `pulumi:"count"`
	// The name of the VM SKU supplied during creation.
	VmSkuName pulumi.StringInput `pulumi:"vmSkuName"`
}

func (ControlPlaneNodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneNodeConfiguration)(nil)).Elem()
}

func (i ControlPlaneNodeConfigurationArgs) ToControlPlaneNodeConfigurationOutput() ControlPlaneNodeConfigurationOutput {
	return i.ToControlPlaneNodeConfigurationOutputWithContext(context.Background())
}

func (i ControlPlaneNodeConfigurationArgs) ToControlPlaneNodeConfigurationOutputWithContext(ctx context.Context) ControlPlaneNodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ControlPlaneNodeConfigurationOutput)
}

func (i ControlPlaneNodeConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ControlPlaneNodeConfiguration] {
	return pulumix.Output[ControlPlaneNodeConfiguration]{
		OutputState: i.ToControlPlaneNodeConfigurationOutputWithContext(ctx).OutputState,
	}
}

type ControlPlaneNodeConfigurationOutput struct{ *pulumi.OutputState }

func (ControlPlaneNodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneNodeConfiguration)(nil)).Elem()
}

func (o ControlPlaneNodeConfigurationOutput) ToControlPlaneNodeConfigurationOutput() ControlPlaneNodeConfigurationOutput {
	return o
}

func (o ControlPlaneNodeConfigurationOutput) ToControlPlaneNodeConfigurationOutputWithContext(ctx context.Context) ControlPlaneNodeConfigurationOutput {
	return o
}

func (o ControlPlaneNodeConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ControlPlaneNodeConfiguration] {
	return pulumix.Output[ControlPlaneNodeConfiguration]{
		OutputState: o.OutputState,
	}
}

// The administrator credentials to be used for the nodes in the control plane.
func (o ControlPlaneNodeConfigurationOutput) AdministratorConfiguration() AdministratorConfigurationPtrOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfiguration) *AdministratorConfiguration { return v.AdministratorConfiguration }).(AdministratorConfigurationPtrOutput)
}

// The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.
func (o ControlPlaneNodeConfigurationOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfiguration) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of virtual machines that use this configuration.
func (o ControlPlaneNodeConfigurationOutput) Count() pulumi.Float64Output {
	return o.ApplyT(func(v ControlPlaneNodeConfiguration) float64 { return v.Count }).(pulumi.Float64Output)
}

// The name of the VM SKU supplied during creation.
func (o ControlPlaneNodeConfigurationOutput) VmSkuName() pulumi.StringOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfiguration) string { return v.VmSkuName }).(pulumi.StringOutput)
}

type ControlPlaneNodeConfigurationResponse struct {
	// The administrator credentials to be used for the nodes in the control plane.
	AdministratorConfiguration *AdministratorConfigurationResponse `pulumi:"administratorConfiguration"`
	// The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count float64 `pulumi:"count"`
	// The name of the VM SKU supplied during creation.
	VmSkuName string `pulumi:"vmSkuName"`
}

type ControlPlaneNodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ControlPlaneNodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ControlPlaneNodeConfigurationResponse)(nil)).Elem()
}

func (o ControlPlaneNodeConfigurationResponseOutput) ToControlPlaneNodeConfigurationResponseOutput() ControlPlaneNodeConfigurationResponseOutput {
	return o
}

func (o ControlPlaneNodeConfigurationResponseOutput) ToControlPlaneNodeConfigurationResponseOutputWithContext(ctx context.Context) ControlPlaneNodeConfigurationResponseOutput {
	return o
}

func (o ControlPlaneNodeConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ControlPlaneNodeConfigurationResponse] {
	return pulumix.Output[ControlPlaneNodeConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The administrator credentials to be used for the nodes in the control plane.
func (o ControlPlaneNodeConfigurationResponseOutput) AdministratorConfiguration() AdministratorConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfigurationResponse) *AdministratorConfigurationResponse {
		return v.AdministratorConfiguration
	}).(AdministratorConfigurationResponsePtrOutput)
}

// The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.
func (o ControlPlaneNodeConfigurationResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfigurationResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of virtual machines that use this configuration.
func (o ControlPlaneNodeConfigurationResponseOutput) Count() pulumi.Float64Output {
	return o.ApplyT(func(v ControlPlaneNodeConfigurationResponse) float64 { return v.Count }).(pulumi.Float64Output)
}

// The name of the VM SKU supplied during creation.
func (o ControlPlaneNodeConfigurationResponseOutput) VmSkuName() pulumi.StringOutput {
	return o.ApplyT(func(v ControlPlaneNodeConfigurationResponse) string { return v.VmSkuName }).(pulumi.StringOutput)
}

type EgressEndpoint struct {
	// The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
	Category string `pulumi:"category"`
	// The list of endpoint dependencies.
	Endpoints []EndpointDependency `pulumi:"endpoints"`
}

// EgressEndpointInput is an input type that accepts EgressEndpointArgs and EgressEndpointOutput values.
// You can construct a concrete instance of `EgressEndpointInput` via:
//
//	EgressEndpointArgs{...}
type EgressEndpointInput interface {
	pulumi.Input

	ToEgressEndpointOutput() EgressEndpointOutput
	ToEgressEndpointOutputWithContext(context.Context) EgressEndpointOutput
}

type EgressEndpointArgs struct {
	// The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
	Category pulumi.StringInput `pulumi:"category"`
	// The list of endpoint dependencies.
	Endpoints EndpointDependencyArrayInput `pulumi:"endpoints"`
}

func (EgressEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EgressEndpoint)(nil)).Elem()
}

func (i EgressEndpointArgs) ToEgressEndpointOutput() EgressEndpointOutput {
	return i.ToEgressEndpointOutputWithContext(context.Background())
}

func (i EgressEndpointArgs) ToEgressEndpointOutputWithContext(ctx context.Context) EgressEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EgressEndpointOutput)
}

func (i EgressEndpointArgs) ToOutput(ctx context.Context) pulumix.Output[EgressEndpoint] {
	return pulumix.Output[EgressEndpoint]{
		OutputState: i.ToEgressEndpointOutputWithContext(ctx).OutputState,
	}
}

// EgressEndpointArrayInput is an input type that accepts EgressEndpointArray and EgressEndpointArrayOutput values.
// You can construct a concrete instance of `EgressEndpointArrayInput` via:
//
//	EgressEndpointArray{ EgressEndpointArgs{...} }
type EgressEndpointArrayInput interface {
	pulumi.Input

	ToEgressEndpointArrayOutput() EgressEndpointArrayOutput
	ToEgressEndpointArrayOutputWithContext(context.Context) EgressEndpointArrayOutput
}

type EgressEndpointArray []EgressEndpointInput

func (EgressEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EgressEndpoint)(nil)).Elem()
}

func (i EgressEndpointArray) ToEgressEndpointArrayOutput() EgressEndpointArrayOutput {
	return i.ToEgressEndpointArrayOutputWithContext(context.Background())
}

func (i EgressEndpointArray) ToEgressEndpointArrayOutputWithContext(ctx context.Context) EgressEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EgressEndpointArrayOutput)
}

func (i EgressEndpointArray) ToOutput(ctx context.Context) pulumix.Output[[]EgressEndpoint] {
	return pulumix.Output[[]EgressEndpoint]{
		OutputState: i.ToEgressEndpointArrayOutputWithContext(ctx).OutputState,
	}
}

type EgressEndpointOutput struct{ *pulumi.OutputState }

func (EgressEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EgressEndpoint)(nil)).Elem()
}

func (o EgressEndpointOutput) ToEgressEndpointOutput() EgressEndpointOutput {
	return o
}

func (o EgressEndpointOutput) ToEgressEndpointOutputWithContext(ctx context.Context) EgressEndpointOutput {
	return o
}

func (o EgressEndpointOutput) ToOutput(ctx context.Context) pulumix.Output[EgressEndpoint] {
	return pulumix.Output[EgressEndpoint]{
		OutputState: o.OutputState,
	}
}

// The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
func (o EgressEndpointOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v EgressEndpoint) string { return v.Category }).(pulumi.StringOutput)
}

// The list of endpoint dependencies.
func (o EgressEndpointOutput) Endpoints() EndpointDependencyArrayOutput {
	return o.ApplyT(func(v EgressEndpoint) []EndpointDependency { return v.Endpoints }).(EndpointDependencyArrayOutput)
}

type EgressEndpointArrayOutput struct{ *pulumi.OutputState }

func (EgressEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EgressEndpoint)(nil)).Elem()
}

func (o EgressEndpointArrayOutput) ToEgressEndpointArrayOutput() EgressEndpointArrayOutput {
	return o
}

func (o EgressEndpointArrayOutput) ToEgressEndpointArrayOutputWithContext(ctx context.Context) EgressEndpointArrayOutput {
	return o
}

func (o EgressEndpointArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EgressEndpoint] {
	return pulumix.Output[[]EgressEndpoint]{
		OutputState: o.OutputState,
	}
}

func (o EgressEndpointArrayOutput) Index(i pulumi.IntInput) EgressEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EgressEndpoint {
		return vs[0].([]EgressEndpoint)[vs[1].(int)]
	}).(EgressEndpointOutput)
}

type EgressEndpointResponse struct {
	// The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
	Category string `pulumi:"category"`
	// The list of endpoint dependencies.
	Endpoints []EndpointDependencyResponse `pulumi:"endpoints"`
}

type EgressEndpointResponseOutput struct{ *pulumi.OutputState }

func (EgressEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EgressEndpointResponse)(nil)).Elem()
}

func (o EgressEndpointResponseOutput) ToEgressEndpointResponseOutput() EgressEndpointResponseOutput {
	return o
}

func (o EgressEndpointResponseOutput) ToEgressEndpointResponseOutputWithContext(ctx context.Context) EgressEndpointResponseOutput {
	return o
}

func (o EgressEndpointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EgressEndpointResponse] {
	return pulumix.Output[EgressEndpointResponse]{
		OutputState: o.OutputState,
	}
}

// The descriptive category name of endpoints accessible by the AKS agent node. For example, azure-resource-management, API server, etc. The platform egress endpoints provided by default will use the category 'default'.
func (o EgressEndpointResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v EgressEndpointResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The list of endpoint dependencies.
func (o EgressEndpointResponseOutput) Endpoints() EndpointDependencyResponseArrayOutput {
	return o.ApplyT(func(v EgressEndpointResponse) []EndpointDependencyResponse { return v.Endpoints }).(EndpointDependencyResponseArrayOutput)
}

type EgressEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (EgressEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EgressEndpointResponse)(nil)).Elem()
}

func (o EgressEndpointResponseArrayOutput) ToEgressEndpointResponseArrayOutput() EgressEndpointResponseArrayOutput {
	return o
}

func (o EgressEndpointResponseArrayOutput) ToEgressEndpointResponseArrayOutputWithContext(ctx context.Context) EgressEndpointResponseArrayOutput {
	return o
}

func (o EgressEndpointResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EgressEndpointResponse] {
	return pulumix.Output[[]EgressEndpointResponse]{
		OutputState: o.OutputState,
	}
}

func (o EgressEndpointResponseArrayOutput) Index(i pulumi.IntInput) EgressEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EgressEndpointResponse {
		return vs[0].([]EgressEndpointResponse)[vs[1].(int)]
	}).(EgressEndpointResponseOutput)
}

type EndpointDependency struct {
	// The domain name of the dependency.
	DomainName string `pulumi:"domainName"`
	// The port of this endpoint.
	Port *float64 `pulumi:"port"`
}

// EndpointDependencyInput is an input type that accepts EndpointDependencyArgs and EndpointDependencyOutput values.
// You can construct a concrete instance of `EndpointDependencyInput` via:
//
//	EndpointDependencyArgs{...}
type EndpointDependencyInput interface {
	pulumi.Input

	ToEndpointDependencyOutput() EndpointDependencyOutput
	ToEndpointDependencyOutputWithContext(context.Context) EndpointDependencyOutput
}

type EndpointDependencyArgs struct {
	// The domain name of the dependency.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The port of this endpoint.
	Port pulumi.Float64PtrInput `pulumi:"port"`
}

func (EndpointDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDependency)(nil)).Elem()
}

func (i EndpointDependencyArgs) ToEndpointDependencyOutput() EndpointDependencyOutput {
	return i.ToEndpointDependencyOutputWithContext(context.Background())
}

func (i EndpointDependencyArgs) ToEndpointDependencyOutputWithContext(ctx context.Context) EndpointDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointDependencyOutput)
}

func (i EndpointDependencyArgs) ToOutput(ctx context.Context) pulumix.Output[EndpointDependency] {
	return pulumix.Output[EndpointDependency]{
		OutputState: i.ToEndpointDependencyOutputWithContext(ctx).OutputState,
	}
}

// EndpointDependencyArrayInput is an input type that accepts EndpointDependencyArray and EndpointDependencyArrayOutput values.
// You can construct a concrete instance of `EndpointDependencyArrayInput` via:
//
//	EndpointDependencyArray{ EndpointDependencyArgs{...} }
type EndpointDependencyArrayInput interface {
	pulumi.Input

	ToEndpointDependencyArrayOutput() EndpointDependencyArrayOutput
	ToEndpointDependencyArrayOutputWithContext(context.Context) EndpointDependencyArrayOutput
}

type EndpointDependencyArray []EndpointDependencyInput

func (EndpointDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointDependency)(nil)).Elem()
}

func (i EndpointDependencyArray) ToEndpointDependencyArrayOutput() EndpointDependencyArrayOutput {
	return i.ToEndpointDependencyArrayOutputWithContext(context.Background())
}

func (i EndpointDependencyArray) ToEndpointDependencyArrayOutputWithContext(ctx context.Context) EndpointDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointDependencyArrayOutput)
}

func (i EndpointDependencyArray) ToOutput(ctx context.Context) pulumix.Output[[]EndpointDependency] {
	return pulumix.Output[[]EndpointDependency]{
		OutputState: i.ToEndpointDependencyArrayOutputWithContext(ctx).OutputState,
	}
}

type EndpointDependencyOutput struct{ *pulumi.OutputState }

func (EndpointDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDependency)(nil)).Elem()
}

func (o EndpointDependencyOutput) ToEndpointDependencyOutput() EndpointDependencyOutput {
	return o
}

func (o EndpointDependencyOutput) ToEndpointDependencyOutputWithContext(ctx context.Context) EndpointDependencyOutput {
	return o
}

func (o EndpointDependencyOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointDependency] {
	return pulumix.Output[EndpointDependency]{
		OutputState: o.OutputState,
	}
}

// The domain name of the dependency.
func (o EndpointDependencyOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointDependency) string { return v.DomainName }).(pulumi.StringOutput)
}

// The port of this endpoint.
func (o EndpointDependencyOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EndpointDependency) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

type EndpointDependencyArrayOutput struct{ *pulumi.OutputState }

func (EndpointDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointDependency)(nil)).Elem()
}

func (o EndpointDependencyArrayOutput) ToEndpointDependencyArrayOutput() EndpointDependencyArrayOutput {
	return o
}

func (o EndpointDependencyArrayOutput) ToEndpointDependencyArrayOutputWithContext(ctx context.Context) EndpointDependencyArrayOutput {
	return o
}

func (o EndpointDependencyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EndpointDependency] {
	return pulumix.Output[[]EndpointDependency]{
		OutputState: o.OutputState,
	}
}

func (o EndpointDependencyArrayOutput) Index(i pulumi.IntInput) EndpointDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointDependency {
		return vs[0].([]EndpointDependency)[vs[1].(int)]
	}).(EndpointDependencyOutput)
}

type EndpointDependencyResponse struct {
	// The domain name of the dependency.
	DomainName string `pulumi:"domainName"`
	// The port of this endpoint.
	Port *float64 `pulumi:"port"`
}

type EndpointDependencyResponseOutput struct{ *pulumi.OutputState }

func (EndpointDependencyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDependencyResponse)(nil)).Elem()
}

func (o EndpointDependencyResponseOutput) ToEndpointDependencyResponseOutput() EndpointDependencyResponseOutput {
	return o
}

func (o EndpointDependencyResponseOutput) ToEndpointDependencyResponseOutputWithContext(ctx context.Context) EndpointDependencyResponseOutput {
	return o
}

func (o EndpointDependencyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EndpointDependencyResponse] {
	return pulumix.Output[EndpointDependencyResponse]{
		OutputState: o.OutputState,
	}
}

// The domain name of the dependency.
func (o EndpointDependencyResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointDependencyResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The port of this endpoint.
func (o EndpointDependencyResponseOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EndpointDependencyResponse) *float64 { return v.Port }).(pulumi.Float64PtrOutput)
}

type EndpointDependencyResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointDependencyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointDependencyResponse)(nil)).Elem()
}

func (o EndpointDependencyResponseArrayOutput) ToEndpointDependencyResponseArrayOutput() EndpointDependencyResponseArrayOutput {
	return o
}

func (o EndpointDependencyResponseArrayOutput) ToEndpointDependencyResponseArrayOutputWithContext(ctx context.Context) EndpointDependencyResponseArrayOutput {
	return o
}

func (o EndpointDependencyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EndpointDependencyResponse] {
	return pulumix.Output[[]EndpointDependencyResponse]{
		OutputState: o.OutputState,
	}
}

func (o EndpointDependencyResponseArrayOutput) Index(i pulumi.IntInput) EndpointDependencyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointDependencyResponse {
		return vs[0].([]EndpointDependencyResponse)[vs[1].(int)]
	}).(EndpointDependencyResponseOutput)
}

type ExtendedLocation struct {
	// The resource ID of the extended location on which the resource will be created.
	Name string `pulumi:"name"`
	// The extended location type, for example, CustomLocation.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

type ExtendedLocationArgs struct {
	// The resource ID of the extended location on which the resource will be created.
	Name pulumi.StringInput `pulumi:"name"`
	// The extended location type, for example, CustomLocation.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: i.ToExtendedLocationOutputWithContext(ctx).OutputState,
	}
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

func (i *extendedLocationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: i.ToExtendedLocationPtrOutputWithContext(ctx).OutputState,
	}
}

type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

func (o ExtendedLocationOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocation] {
	return pulumix.Output[ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the extended location on which the resource will be created.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type, for example, CustomLocation.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocation] {
	return pulumix.Output[*ExtendedLocation]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The resource ID of the extended location on which the resource will be created.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type, for example, CustomLocation.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ExtendedLocationResponse struct {
	// The resource ID of the extended location on which the resource will be created.
	Name string `pulumi:"name"`
	// The extended location type, for example, CustomLocation.
	Type string `pulumi:"type"`
}

type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExtendedLocationResponse] {
	return pulumix.Output[ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the extended location on which the resource will be created.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The extended location type, for example, CustomLocation.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtendedLocationResponse] {
	return pulumix.Output[*ExtendedLocationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The resource ID of the extended location on which the resource will be created.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The extended location type, for example, CustomLocation.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FeatureStatusResponse struct {
	// The status representing the state of this feature.
	DetailedStatus string `pulumi:"detailedStatus"`
	// The descriptive message about the current detailed status.
	DetailedStatusMessage string `pulumi:"detailedStatusMessage"`
	// The name of the feature.
	Name string `pulumi:"name"`
	// The version of the feature.
	Version string `pulumi:"version"`
}

type FeatureStatusResponseOutput struct{ *pulumi.OutputState }

func (FeatureStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStatusResponse)(nil)).Elem()
}

func (o FeatureStatusResponseOutput) ToFeatureStatusResponseOutput() FeatureStatusResponseOutput {
	return o
}

func (o FeatureStatusResponseOutput) ToFeatureStatusResponseOutputWithContext(ctx context.Context) FeatureStatusResponseOutput {
	return o
}

func (o FeatureStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FeatureStatusResponse] {
	return pulumix.Output[FeatureStatusResponse]{
		OutputState: o.OutputState,
	}
}

// The status representing the state of this feature.
func (o FeatureStatusResponseOutput) DetailedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStatusResponse) string { return v.DetailedStatus }).(pulumi.StringOutput)
}

// The descriptive message about the current detailed status.
func (o FeatureStatusResponseOutput) DetailedStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStatusResponse) string { return v.DetailedStatusMessage }).(pulumi.StringOutput)
}

// The name of the feature.
func (o FeatureStatusResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStatusResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The version of the feature.
func (o FeatureStatusResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStatusResponse) string { return v.Version }).(pulumi.StringOutput)
}

type FeatureStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (FeatureStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureStatusResponse)(nil)).Elem()
}

func (o FeatureStatusResponseArrayOutput) ToFeatureStatusResponseArrayOutput() FeatureStatusResponseArrayOutput {
	return o
}

func (o FeatureStatusResponseArrayOutput) ToFeatureStatusResponseArrayOutputWithContext(ctx context.Context) FeatureStatusResponseArrayOutput {
	return o
}

func (o FeatureStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FeatureStatusResponse] {
	return pulumix.Output[[]FeatureStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o FeatureStatusResponseArrayOutput) Index(i pulumi.IntInput) FeatureStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureStatusResponse {
		return vs[0].([]FeatureStatusResponse)[vs[1].(int)]
	}).(FeatureStatusResponseOutput)
}

type HardwareInventoryNetworkInterfaceResponse struct {
	// The current status of the link.
	LinkStatus string `pulumi:"linkStatus"`
	// The MAC address associated with this interface.
	MacAddress string `pulumi:"macAddress"`
	// The name of the interface.
	Name string `pulumi:"name"`
	// The resource ID of the network interface for the port on the switch that this machine's interface is connected to.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

type HardwareInventoryNetworkInterfaceResponseOutput struct{ *pulumi.OutputState }

func (HardwareInventoryNetworkInterfaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareInventoryNetworkInterfaceResponse)(nil)).Elem()
}

func (o HardwareInventoryNetworkInterfaceResponseOutput) ToHardwareInventoryNetworkInterfaceResponseOutput() HardwareInventoryNetworkInterfaceResponseOutput {
	return o
}

func (o HardwareInventoryNetworkInterfaceResponseOutput) ToHardwareInventoryNetworkInterfaceResponseOutputWithContext(ctx context.Context) HardwareInventoryNetworkInterfaceResponseOutput {
	return o
}

func (o HardwareInventoryNetworkInterfaceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HardwareInventoryNetworkInterfaceResponse] {
	return pulumix.Output[HardwareInventoryNetworkInterfaceResponse]{
		OutputState: o.OutputState,
	}
}

// The current status of the link.
func (o HardwareInventoryNetworkInterfaceResponseOutput) LinkStatus() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareInventoryNetworkInterfaceResponse) string { return v.LinkStatus }).(pulumi.StringOutput)
}

// The MAC address associated with this interface.
func (o HardwareInventoryNetworkInterfaceResponseOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareInventoryNetworkInterfaceResponse) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The name of the interface.
func (o HardwareInventoryNetworkInterfaceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareInventoryNetworkInterfaceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource ID of the network interface for the port on the switch that this machine's interface is connected to.
func (o HardwareInventoryNetworkInterfaceResponseOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareInventoryNetworkInterfaceResponse) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

type HardwareInventoryNetworkInterfaceResponseArrayOutput struct{ *pulumi.OutputState }

func (HardwareInventoryNetworkInterfaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HardwareInventoryNetworkInterfaceResponse)(nil)).Elem()
}

func (o HardwareInventoryNetworkInterfaceResponseArrayOutput) ToHardwareInventoryNetworkInterfaceResponseArrayOutput() HardwareInventoryNetworkInterfaceResponseArrayOutput {
	return o
}

func (o HardwareInventoryNetworkInterfaceResponseArrayOutput) ToHardwareInventoryNetworkInterfaceResponseArrayOutputWithContext(ctx context.Context) HardwareInventoryNetworkInterfaceResponseArrayOutput {
	return o
}

func (o HardwareInventoryNetworkInterfaceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]HardwareInventoryNetworkInterfaceResponse] {
	return pulumix.Output[[]HardwareInventoryNetworkInterfaceResponse]{
		OutputState: o.OutputState,
	}
}

func (o HardwareInventoryNetworkInterfaceResponseArrayOutput) Index(i pulumi.IntInput) HardwareInventoryNetworkInterfaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HardwareInventoryNetworkInterfaceResponse {
		return vs[0].([]HardwareInventoryNetworkInterfaceResponse)[vs[1].(int)]
	}).(HardwareInventoryNetworkInterfaceResponseOutput)
}

type HardwareInventoryResponse struct {
	// Freeform data extracted from the environment about this machine. This information varies depending on the specific hardware and configuration.
	AdditionalHostInformation string `pulumi:"additionalHostInformation"`
	// The list of network interfaces and associated details for the bare metal machine.
	Interfaces []HardwareInventoryNetworkInterfaceResponse `pulumi:"interfaces"`
	// Field Deprecated. Will be removed in an upcoming version. The list of network interface cards and associated details for the bare metal machine.
	Nics []NicResponse `pulumi:"nics"`
}

type HardwareInventoryResponseOutput struct{ *pulumi.OutputState }

func (HardwareInventoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareInventoryResponse)(nil)).Elem()
}

func (o HardwareInventoryResponseOutput) ToHardwareInventoryResponseOutput() HardwareInventoryResponseOutput {
	return o
}

func (o HardwareInventoryResponseOutput) ToHardwareInventoryResponseOutputWithContext(ctx context.Context) HardwareInventoryResponseOutput {
	return o
}

func (o HardwareInventoryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HardwareInventoryResponse] {
	return pulumix.Output[HardwareInventoryResponse]{
		OutputState: o.OutputState,
	}
}

// Freeform data extracted from the environment about this machine. This information varies depending on the specific hardware and configuration.
func (o HardwareInventoryResponseOutput) AdditionalHostInformation() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareInventoryResponse) string { return v.AdditionalHostInformation }).(pulumi.StringOutput)
}

// The list of network interfaces and associated details for the bare metal machine.
func (o HardwareInventoryResponseOutput) Interfaces() HardwareInventoryNetworkInterfaceResponseArrayOutput {
	return o.ApplyT(func(v HardwareInventoryResponse) []HardwareInventoryNetworkInterfaceResponse { return v.Interfaces }).(HardwareInventoryNetworkInterfaceResponseArrayOutput)
}

// Field Deprecated. Will be removed in an upcoming version. The list of network interface cards and associated details for the bare metal machine.
func (o HardwareInventoryResponseOutput) Nics() NicResponseArrayOutput {
	return o.ApplyT(func(v HardwareInventoryResponse) []NicResponse { return v.Nics }).(NicResponseArrayOutput)
}

type HardwareValidationStatusResponse struct {
	// The timestamp of the hardware validation execution.
	LastValidationTime string `pulumi:"lastValidationTime"`
	// The outcome of the hardware validation.
	Result string `pulumi:"result"`
}

type HardwareValidationStatusResponseOutput struct{ *pulumi.OutputState }

func (HardwareValidationStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HardwareValidationStatusResponse)(nil)).Elem()
}

func (o HardwareValidationStatusResponseOutput) ToHardwareValidationStatusResponseOutput() HardwareValidationStatusResponseOutput {
	return o
}

func (o HardwareValidationStatusResponseOutput) ToHardwareValidationStatusResponseOutputWithContext(ctx context.Context) HardwareValidationStatusResponseOutput {
	return o
}

func (o HardwareValidationStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HardwareValidationStatusResponse] {
	return pulumix.Output[HardwareValidationStatusResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of the hardware validation execution.
func (o HardwareValidationStatusResponseOutput) LastValidationTime() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareValidationStatusResponse) string { return v.LastValidationTime }).(pulumi.StringOutput)
}

// The outcome of the hardware validation.
func (o HardwareValidationStatusResponseOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v HardwareValidationStatusResponse) string { return v.Result }).(pulumi.StringOutput)
}

type ImageRepositoryCredentials struct {
	// The password or token used to access an image in the target repository.
	Password string `pulumi:"password"`
	// The URL of the authentication server used to validate the repository credentials.
	RegistryUrl string `pulumi:"registryUrl"`
	// The username used to access an image in the target repository.
	Username string `pulumi:"username"`
}

// ImageRepositoryCredentialsInput is an input type that accepts ImageRepositoryCredentialsArgs and ImageRepositoryCredentialsOutput values.
// You can construct a concrete instance of `ImageRepositoryCredentialsInput` via:
//
//	ImageRepositoryCredentialsArgs{...}
type ImageRepositoryCredentialsInput interface {
	pulumi.Input

	ToImageRepositoryCredentialsOutput() ImageRepositoryCredentialsOutput
	ToImageRepositoryCredentialsOutputWithContext(context.Context) ImageRepositoryCredentialsOutput
}

type ImageRepositoryCredentialsArgs struct {
	// The password or token used to access an image in the target repository.
	Password pulumi.StringInput `pulumi:"password"`
	// The URL of the authentication server used to validate the repository credentials.
	RegistryUrl pulumi.StringInput `pulumi:"registryUrl"`
	// The username used to access an image in the target repository.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ImageRepositoryCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredentials)(nil)).Elem()
}

func (i ImageRepositoryCredentialsArgs) ToImageRepositoryCredentialsOutput() ImageRepositoryCredentialsOutput {
	return i.ToImageRepositoryCredentialsOutputWithContext(context.Background())
}

func (i ImageRepositoryCredentialsArgs) ToImageRepositoryCredentialsOutputWithContext(ctx context.Context) ImageRepositoryCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialsOutput)
}

func (i ImageRepositoryCredentialsArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRepositoryCredentials] {
	return pulumix.Output[ImageRepositoryCredentials]{
		OutputState: i.ToImageRepositoryCredentialsOutputWithContext(ctx).OutputState,
	}
}

func (i ImageRepositoryCredentialsArgs) ToImageRepositoryCredentialsPtrOutput() ImageRepositoryCredentialsPtrOutput {
	return i.ToImageRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i ImageRepositoryCredentialsArgs) ToImageRepositoryCredentialsPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialsOutput).ToImageRepositoryCredentialsPtrOutputWithContext(ctx)
}

// ImageRepositoryCredentialsPtrInput is an input type that accepts ImageRepositoryCredentialsArgs, ImageRepositoryCredentialsPtr and ImageRepositoryCredentialsPtrOutput values.
// You can construct a concrete instance of `ImageRepositoryCredentialsPtrInput` via:
//
//	        ImageRepositoryCredentialsArgs{...}
//
//	or:
//
//	        nil
type ImageRepositoryCredentialsPtrInput interface {
	pulumi.Input

	ToImageRepositoryCredentialsPtrOutput() ImageRepositoryCredentialsPtrOutput
	ToImageRepositoryCredentialsPtrOutputWithContext(context.Context) ImageRepositoryCredentialsPtrOutput
}

type imageRepositoryCredentialsPtrType ImageRepositoryCredentialsArgs

func ImageRepositoryCredentialsPtr(v *ImageRepositoryCredentialsArgs) ImageRepositoryCredentialsPtrInput {
	return (*imageRepositoryCredentialsPtrType)(v)
}

func (*imageRepositoryCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredentials)(nil)).Elem()
}

func (i *imageRepositoryCredentialsPtrType) ToImageRepositoryCredentialsPtrOutput() ImageRepositoryCredentialsPtrOutput {
	return i.ToImageRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (i *imageRepositoryCredentialsPtrType) ToImageRepositoryCredentialsPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRepositoryCredentialsPtrOutput)
}

func (i *imageRepositoryCredentialsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ImageRepositoryCredentials] {
	return pulumix.Output[*ImageRepositoryCredentials]{
		OutputState: i.ToImageRepositoryCredentialsPtrOutputWithContext(ctx).OutputState,
	}
}

type ImageRepositoryCredentialsOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredentials)(nil)).Elem()
}

func (o ImageRepositoryCredentialsOutput) ToImageRepositoryCredentialsOutput() ImageRepositoryCredentialsOutput {
	return o
}

func (o ImageRepositoryCredentialsOutput) ToImageRepositoryCredentialsOutputWithContext(ctx context.Context) ImageRepositoryCredentialsOutput {
	return o
}

func (o ImageRepositoryCredentialsOutput) ToImageRepositoryCredentialsPtrOutput() ImageRepositoryCredentialsPtrOutput {
	return o.ToImageRepositoryCredentialsPtrOutputWithContext(context.Background())
}

func (o ImageRepositoryCredentialsOutput) ToImageRepositoryCredentialsPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageRepositoryCredentials) *ImageRepositoryCredentials {
		return &v
	}).(ImageRepositoryCredentialsPtrOutput)
}

func (o ImageRepositoryCredentialsOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRepositoryCredentials] {
	return pulumix.Output[ImageRepositoryCredentials]{
		OutputState: o.OutputState,
	}
}

// The password or token used to access an image in the target repository.
func (o ImageRepositoryCredentialsOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentials) string { return v.Password }).(pulumi.StringOutput)
}

// The URL of the authentication server used to validate the repository credentials.
func (o ImageRepositoryCredentialsOutput) RegistryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentials) string { return v.RegistryUrl }).(pulumi.StringOutput)
}

// The username used to access an image in the target repository.
func (o ImageRepositoryCredentialsOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentials) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRepositoryCredentialsPtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredentials)(nil)).Elem()
}

func (o ImageRepositoryCredentialsPtrOutput) ToImageRepositoryCredentialsPtrOutput() ImageRepositoryCredentialsPtrOutput {
	return o
}

func (o ImageRepositoryCredentialsPtrOutput) ToImageRepositoryCredentialsPtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialsPtrOutput {
	return o
}

func (o ImageRepositoryCredentialsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageRepositoryCredentials] {
	return pulumix.Output[*ImageRepositoryCredentials]{
		OutputState: o.OutputState,
	}
}

func (o ImageRepositoryCredentialsPtrOutput) Elem() ImageRepositoryCredentialsOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentials) ImageRepositoryCredentials {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryCredentials
		return ret
	}).(ImageRepositoryCredentialsOutput)
}

// The password or token used to access an image in the target repository.
func (o ImageRepositoryCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The URL of the authentication server used to validate the repository credentials.
func (o ImageRepositoryCredentialsPtrOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.RegistryUrl
	}).(pulumi.StringPtrOutput)
}

// The username used to access an image in the target repository.
func (o ImageRepositoryCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type ImageRepositoryCredentialsResponse struct {
	// The password or token used to access an image in the target repository.
	Password string `pulumi:"password"`
	// The URL of the authentication server used to validate the repository credentials.
	RegistryUrl string `pulumi:"registryUrl"`
	// The username used to access an image in the target repository.
	Username string `pulumi:"username"`
}

type ImageRepositoryCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRepositoryCredentialsResponse)(nil)).Elem()
}

func (o ImageRepositoryCredentialsResponseOutput) ToImageRepositoryCredentialsResponseOutput() ImageRepositoryCredentialsResponseOutput {
	return o
}

func (o ImageRepositoryCredentialsResponseOutput) ToImageRepositoryCredentialsResponseOutputWithContext(ctx context.Context) ImageRepositoryCredentialsResponseOutput {
	return o
}

func (o ImageRepositoryCredentialsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRepositoryCredentialsResponse] {
	return pulumix.Output[ImageRepositoryCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

// The password or token used to access an image in the target repository.
func (o ImageRepositoryCredentialsResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialsResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The URL of the authentication server used to validate the repository credentials.
func (o ImageRepositoryCredentialsResponseOutput) RegistryUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialsResponse) string { return v.RegistryUrl }).(pulumi.StringOutput)
}

// The username used to access an image in the target repository.
func (o ImageRepositoryCredentialsResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRepositoryCredentialsResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ImageRepositoryCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageRepositoryCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRepositoryCredentialsResponse)(nil)).Elem()
}

func (o ImageRepositoryCredentialsResponsePtrOutput) ToImageRepositoryCredentialsResponsePtrOutput() ImageRepositoryCredentialsResponsePtrOutput {
	return o
}

func (o ImageRepositoryCredentialsResponsePtrOutput) ToImageRepositoryCredentialsResponsePtrOutputWithContext(ctx context.Context) ImageRepositoryCredentialsResponsePtrOutput {
	return o
}

func (o ImageRepositoryCredentialsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageRepositoryCredentialsResponse] {
	return pulumix.Output[*ImageRepositoryCredentialsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ImageRepositoryCredentialsResponsePtrOutput) Elem() ImageRepositoryCredentialsResponseOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialsResponse) ImageRepositoryCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret ImageRepositoryCredentialsResponse
		return ret
	}).(ImageRepositoryCredentialsResponseOutput)
}

// The password or token used to access an image in the target repository.
func (o ImageRepositoryCredentialsResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The URL of the authentication server used to validate the repository credentials.
func (o ImageRepositoryCredentialsResponsePtrOutput) RegistryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RegistryUrl
	}).(pulumi.StringPtrOutput)
}

// The username used to access an image in the target repository.
func (o ImageRepositoryCredentialsResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRepositoryCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type InitialAgentPoolConfiguration struct {
	// The administrator credentials to be used for the nodes in this agent pool.
	AdministratorConfiguration *AdministratorConfiguration `pulumi:"administratorConfiguration"`
	// The configurations that will be applied to each agent in this agent pool.
	AgentOptions *AgentOptions `pulumi:"agentOptions"`
	// The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration *AttachedNetworkConfiguration `pulumi:"attachedNetworkConfiguration"`
	// The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count float64 `pulumi:"count"`
	// The labels applied to the nodes in this agent pool.
	Labels []KubernetesLabel `pulumi:"labels"`
	// The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
	Mode string `pulumi:"mode"`
	// The name that will be used for the agent pool resource representing this agent pool.
	Name string `pulumi:"name"`
	// The taints applied to the nodes in this agent pool.
	Taints []KubernetesLabel `pulumi:"taints"`
	// The configuration of the agent pool.
	UpgradeSettings *AgentPoolUpgradeSettings `pulumi:"upgradeSettings"`
	// The name of the VM SKU that determines the size of resources allocated for node VMs.
	VmSkuName string `pulumi:"vmSkuName"`
}

// Defaults sets the appropriate defaults for InitialAgentPoolConfiguration
func (val *InitialAgentPoolConfiguration) Defaults() *InitialAgentPoolConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AgentOptions = tmp.AgentOptions.Defaults()

	tmp.UpgradeSettings = tmp.UpgradeSettings.Defaults()

	return &tmp
}

// InitialAgentPoolConfigurationInput is an input type that accepts InitialAgentPoolConfigurationArgs and InitialAgentPoolConfigurationOutput values.
// You can construct a concrete instance of `InitialAgentPoolConfigurationInput` via:
//
//	InitialAgentPoolConfigurationArgs{...}
type InitialAgentPoolConfigurationInput interface {
	pulumi.Input

	ToInitialAgentPoolConfigurationOutput() InitialAgentPoolConfigurationOutput
	ToInitialAgentPoolConfigurationOutputWithContext(context.Context) InitialAgentPoolConfigurationOutput
}

type InitialAgentPoolConfigurationArgs struct {
	// The administrator credentials to be used for the nodes in this agent pool.
	AdministratorConfiguration AdministratorConfigurationPtrInput `pulumi:"administratorConfiguration"`
	// The configurations that will be applied to each agent in this agent pool.
	AgentOptions AgentOptionsPtrInput `pulumi:"agentOptions"`
	// The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration AttachedNetworkConfigurationPtrInput `pulumi:"attachedNetworkConfiguration"`
	// The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
	AvailabilityZones pulumi.StringArrayInput `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count pulumi.Float64Input `pulumi:"count"`
	// The labels applied to the nodes in this agent pool.
	Labels KubernetesLabelArrayInput `pulumi:"labels"`
	// The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
	Mode pulumi.StringInput `pulumi:"mode"`
	// The name that will be used for the agent pool resource representing this agent pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The taints applied to the nodes in this agent pool.
	Taints KubernetesLabelArrayInput `pulumi:"taints"`
	// The configuration of the agent pool.
	UpgradeSettings AgentPoolUpgradeSettingsPtrInput `pulumi:"upgradeSettings"`
	// The name of the VM SKU that determines the size of resources allocated for node VMs.
	VmSkuName pulumi.StringInput `pulumi:"vmSkuName"`
}

// Defaults sets the appropriate defaults for InitialAgentPoolConfigurationArgs
func (val *InitialAgentPoolConfigurationArgs) Defaults() *InitialAgentPoolConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (InitialAgentPoolConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialAgentPoolConfiguration)(nil)).Elem()
}

func (i InitialAgentPoolConfigurationArgs) ToInitialAgentPoolConfigurationOutput() InitialAgentPoolConfigurationOutput {
	return i.ToInitialAgentPoolConfigurationOutputWithContext(context.Background())
}

func (i InitialAgentPoolConfigurationArgs) ToInitialAgentPoolConfigurationOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialAgentPoolConfigurationOutput)
}

func (i InitialAgentPoolConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[InitialAgentPoolConfiguration] {
	return pulumix.Output[InitialAgentPoolConfiguration]{
		OutputState: i.ToInitialAgentPoolConfigurationOutputWithContext(ctx).OutputState,
	}
}

// InitialAgentPoolConfigurationArrayInput is an input type that accepts InitialAgentPoolConfigurationArray and InitialAgentPoolConfigurationArrayOutput values.
// You can construct a concrete instance of `InitialAgentPoolConfigurationArrayInput` via:
//
//	InitialAgentPoolConfigurationArray{ InitialAgentPoolConfigurationArgs{...} }
type InitialAgentPoolConfigurationArrayInput interface {
	pulumi.Input

	ToInitialAgentPoolConfigurationArrayOutput() InitialAgentPoolConfigurationArrayOutput
	ToInitialAgentPoolConfigurationArrayOutputWithContext(context.Context) InitialAgentPoolConfigurationArrayOutput
}

type InitialAgentPoolConfigurationArray []InitialAgentPoolConfigurationInput

func (InitialAgentPoolConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitialAgentPoolConfiguration)(nil)).Elem()
}

func (i InitialAgentPoolConfigurationArray) ToInitialAgentPoolConfigurationArrayOutput() InitialAgentPoolConfigurationArrayOutput {
	return i.ToInitialAgentPoolConfigurationArrayOutputWithContext(context.Background())
}

func (i InitialAgentPoolConfigurationArray) ToInitialAgentPoolConfigurationArrayOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitialAgentPoolConfigurationArrayOutput)
}

func (i InitialAgentPoolConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]InitialAgentPoolConfiguration] {
	return pulumix.Output[[]InitialAgentPoolConfiguration]{
		OutputState: i.ToInitialAgentPoolConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type InitialAgentPoolConfigurationOutput struct{ *pulumi.OutputState }

func (InitialAgentPoolConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialAgentPoolConfiguration)(nil)).Elem()
}

func (o InitialAgentPoolConfigurationOutput) ToInitialAgentPoolConfigurationOutput() InitialAgentPoolConfigurationOutput {
	return o
}

func (o InitialAgentPoolConfigurationOutput) ToInitialAgentPoolConfigurationOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationOutput {
	return o
}

func (o InitialAgentPoolConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[InitialAgentPoolConfiguration] {
	return pulumix.Output[InitialAgentPoolConfiguration]{
		OutputState: o.OutputState,
	}
}

// The administrator credentials to be used for the nodes in this agent pool.
func (o InitialAgentPoolConfigurationOutput) AdministratorConfiguration() AdministratorConfigurationPtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) *AdministratorConfiguration { return v.AdministratorConfiguration }).(AdministratorConfigurationPtrOutput)
}

// The configurations that will be applied to each agent in this agent pool.
func (o InitialAgentPoolConfigurationOutput) AgentOptions() AgentOptionsPtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) *AgentOptions { return v.AgentOptions }).(AgentOptionsPtrOutput)
}

// The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster.
func (o InitialAgentPoolConfigurationOutput) AttachedNetworkConfiguration() AttachedNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) *AttachedNetworkConfiguration {
		return v.AttachedNetworkConfiguration
	}).(AttachedNetworkConfigurationPtrOutput)
}

// The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
func (o InitialAgentPoolConfigurationOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of virtual machines that use this configuration.
func (o InitialAgentPoolConfigurationOutput) Count() pulumi.Float64Output {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) float64 { return v.Count }).(pulumi.Float64Output)
}

// The labels applied to the nodes in this agent pool.
func (o InitialAgentPoolConfigurationOutput) Labels() KubernetesLabelArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) []KubernetesLabel { return v.Labels }).(KubernetesLabelArrayOutput)
}

// The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
func (o InitialAgentPoolConfigurationOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) string { return v.Mode }).(pulumi.StringOutput)
}

// The name that will be used for the agent pool resource representing this agent pool.
func (o InitialAgentPoolConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

// The taints applied to the nodes in this agent pool.
func (o InitialAgentPoolConfigurationOutput) Taints() KubernetesLabelArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) []KubernetesLabel { return v.Taints }).(KubernetesLabelArrayOutput)
}

// The configuration of the agent pool.
func (o InitialAgentPoolConfigurationOutput) UpgradeSettings() AgentPoolUpgradeSettingsPtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) *AgentPoolUpgradeSettings { return v.UpgradeSettings }).(AgentPoolUpgradeSettingsPtrOutput)
}

// The name of the VM SKU that determines the size of resources allocated for node VMs.
func (o InitialAgentPoolConfigurationOutput) VmSkuName() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfiguration) string { return v.VmSkuName }).(pulumi.StringOutput)
}

type InitialAgentPoolConfigurationArrayOutput struct{ *pulumi.OutputState }

func (InitialAgentPoolConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitialAgentPoolConfiguration)(nil)).Elem()
}

func (o InitialAgentPoolConfigurationArrayOutput) ToInitialAgentPoolConfigurationArrayOutput() InitialAgentPoolConfigurationArrayOutput {
	return o
}

func (o InitialAgentPoolConfigurationArrayOutput) ToInitialAgentPoolConfigurationArrayOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationArrayOutput {
	return o
}

func (o InitialAgentPoolConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitialAgentPoolConfiguration] {
	return pulumix.Output[[]InitialAgentPoolConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o InitialAgentPoolConfigurationArrayOutput) Index(i pulumi.IntInput) InitialAgentPoolConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitialAgentPoolConfiguration {
		return vs[0].([]InitialAgentPoolConfiguration)[vs[1].(int)]
	}).(InitialAgentPoolConfigurationOutput)
}

type InitialAgentPoolConfigurationResponse struct {
	// The administrator credentials to be used for the nodes in this agent pool.
	AdministratorConfiguration *AdministratorConfigurationResponse `pulumi:"administratorConfiguration"`
	// The configurations that will be applied to each agent in this agent pool.
	AgentOptions *AgentOptionsResponse `pulumi:"agentOptions"`
	// The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration *AttachedNetworkConfigurationResponse `pulumi:"attachedNetworkConfiguration"`
	// The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The number of virtual machines that use this configuration.
	Count float64 `pulumi:"count"`
	// The labels applied to the nodes in this agent pool.
	Labels []KubernetesLabelResponse `pulumi:"labels"`
	// The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
	Mode string `pulumi:"mode"`
	// The name that will be used for the agent pool resource representing this agent pool.
	Name string `pulumi:"name"`
	// The taints applied to the nodes in this agent pool.
	Taints []KubernetesLabelResponse `pulumi:"taints"`
	// The configuration of the agent pool.
	UpgradeSettings *AgentPoolUpgradeSettingsResponse `pulumi:"upgradeSettings"`
	// The name of the VM SKU that determines the size of resources allocated for node VMs.
	VmSkuName string `pulumi:"vmSkuName"`
}

// Defaults sets the appropriate defaults for InitialAgentPoolConfigurationResponse
func (val *InitialAgentPoolConfigurationResponse) Defaults() *InitialAgentPoolConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AgentOptions = tmp.AgentOptions.Defaults()

	tmp.UpgradeSettings = tmp.UpgradeSettings.Defaults()

	return &tmp
}

type InitialAgentPoolConfigurationResponseOutput struct{ *pulumi.OutputState }

func (InitialAgentPoolConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitialAgentPoolConfigurationResponse)(nil)).Elem()
}

func (o InitialAgentPoolConfigurationResponseOutput) ToInitialAgentPoolConfigurationResponseOutput() InitialAgentPoolConfigurationResponseOutput {
	return o
}

func (o InitialAgentPoolConfigurationResponseOutput) ToInitialAgentPoolConfigurationResponseOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationResponseOutput {
	return o
}

func (o InitialAgentPoolConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InitialAgentPoolConfigurationResponse] {
	return pulumix.Output[InitialAgentPoolConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The administrator credentials to be used for the nodes in this agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) AdministratorConfiguration() AdministratorConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) *AdministratorConfigurationResponse {
		return v.AdministratorConfiguration
	}).(AdministratorConfigurationResponsePtrOutput)
}

// The configurations that will be applied to each agent in this agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) AgentOptions() AgentOptionsResponsePtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) *AgentOptionsResponse { return v.AgentOptions }).(AgentOptionsResponsePtrOutput)
}

// The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster.
func (o InitialAgentPoolConfigurationResponseOutput) AttachedNetworkConfiguration() AttachedNetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) *AttachedNetworkConfigurationResponse {
		return v.AttachedNetworkConfiguration
	}).(AttachedNetworkConfigurationResponsePtrOutput)
}

// The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
func (o InitialAgentPoolConfigurationResponseOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The number of virtual machines that use this configuration.
func (o InitialAgentPoolConfigurationResponseOutput) Count() pulumi.Float64Output {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) float64 { return v.Count }).(pulumi.Float64Output)
}

// The labels applied to the nodes in this agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) Labels() KubernetesLabelResponseArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) []KubernetesLabelResponse { return v.Labels }).(KubernetesLabelResponseArrayOutput)
}

// The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
func (o InitialAgentPoolConfigurationResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The name that will be used for the agent pool resource representing this agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The taints applied to the nodes in this agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) Taints() KubernetesLabelResponseArrayOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) []KubernetesLabelResponse { return v.Taints }).(KubernetesLabelResponseArrayOutput)
}

// The configuration of the agent pool.
func (o InitialAgentPoolConfigurationResponseOutput) UpgradeSettings() AgentPoolUpgradeSettingsResponsePtrOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) *AgentPoolUpgradeSettingsResponse {
		return v.UpgradeSettings
	}).(AgentPoolUpgradeSettingsResponsePtrOutput)
}

// The name of the VM SKU that determines the size of resources allocated for node VMs.
func (o InitialAgentPoolConfigurationResponseOutput) VmSkuName() pulumi.StringOutput {
	return o.ApplyT(func(v InitialAgentPoolConfigurationResponse) string { return v.VmSkuName }).(pulumi.StringOutput)
}

type InitialAgentPoolConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (InitialAgentPoolConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitialAgentPoolConfigurationResponse)(nil)).Elem()
}

func (o InitialAgentPoolConfigurationResponseArrayOutput) ToInitialAgentPoolConfigurationResponseArrayOutput() InitialAgentPoolConfigurationResponseArrayOutput {
	return o
}

func (o InitialAgentPoolConfigurationResponseArrayOutput) ToInitialAgentPoolConfigurationResponseArrayOutputWithContext(ctx context.Context) InitialAgentPoolConfigurationResponseArrayOutput {
	return o
}

func (o InitialAgentPoolConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitialAgentPoolConfigurationResponse] {
	return pulumix.Output[[]InitialAgentPoolConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o InitialAgentPoolConfigurationResponseArrayOutput) Index(i pulumi.IntInput) InitialAgentPoolConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitialAgentPoolConfigurationResponse {
		return vs[0].([]InitialAgentPoolConfigurationResponse)[vs[1].(int)]
	}).(InitialAgentPoolConfigurationResponseOutput)
}

type IpAddressPool struct {
	// The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
	Addresses []string `pulumi:"addresses"`
	// The indicator to determine if automatic allocation from the pool should occur.
	AutoAssign *string `pulumi:"autoAssign"`
	// The name used to identify this IP address pool for association with a BGP advertisement.
	Name string `pulumi:"name"`
	// The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.
	OnlyUseHostIps *string `pulumi:"onlyUseHostIps"`
}

// Defaults sets the appropriate defaults for IpAddressPool
func (val *IpAddressPool) Defaults() *IpAddressPool {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoAssign == nil {
		autoAssign_ := "True"
		tmp.AutoAssign = &autoAssign_
	}
	if tmp.OnlyUseHostIps == nil {
		onlyUseHostIps_ := "True"
		tmp.OnlyUseHostIps = &onlyUseHostIps_
	}
	return &tmp
}

// IpAddressPoolInput is an input type that accepts IpAddressPoolArgs and IpAddressPoolOutput values.
// You can construct a concrete instance of `IpAddressPoolInput` via:
//
//	IpAddressPoolArgs{...}
type IpAddressPoolInput interface {
	pulumi.Input

	ToIpAddressPoolOutput() IpAddressPoolOutput
	ToIpAddressPoolOutputWithContext(context.Context) IpAddressPoolOutput
}

type IpAddressPoolArgs struct {
	// The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// The indicator to determine if automatic allocation from the pool should occur.
	AutoAssign pulumi.StringPtrInput `pulumi:"autoAssign"`
	// The name used to identify this IP address pool for association with a BGP advertisement.
	Name pulumi.StringInput `pulumi:"name"`
	// The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.
	OnlyUseHostIps pulumi.StringPtrInput `pulumi:"onlyUseHostIps"`
}

// Defaults sets the appropriate defaults for IpAddressPoolArgs
func (val *IpAddressPoolArgs) Defaults() *IpAddressPoolArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoAssign == nil {
		tmp.AutoAssign = pulumi.StringPtr("True")
	}
	if tmp.OnlyUseHostIps == nil {
		tmp.OnlyUseHostIps = pulumi.StringPtr("True")
	}
	return &tmp
}
func (IpAddressPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressPool)(nil)).Elem()
}

func (i IpAddressPoolArgs) ToIpAddressPoolOutput() IpAddressPoolOutput {
	return i.ToIpAddressPoolOutputWithContext(context.Background())
}

func (i IpAddressPoolArgs) ToIpAddressPoolOutputWithContext(ctx context.Context) IpAddressPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressPoolOutput)
}

func (i IpAddressPoolArgs) ToOutput(ctx context.Context) pulumix.Output[IpAddressPool] {
	return pulumix.Output[IpAddressPool]{
		OutputState: i.ToIpAddressPoolOutputWithContext(ctx).OutputState,
	}
}

// IpAddressPoolArrayInput is an input type that accepts IpAddressPoolArray and IpAddressPoolArrayOutput values.
// You can construct a concrete instance of `IpAddressPoolArrayInput` via:
//
//	IpAddressPoolArray{ IpAddressPoolArgs{...} }
type IpAddressPoolArrayInput interface {
	pulumi.Input

	ToIpAddressPoolArrayOutput() IpAddressPoolArrayOutput
	ToIpAddressPoolArrayOutputWithContext(context.Context) IpAddressPoolArrayOutput
}

type IpAddressPoolArray []IpAddressPoolInput

func (IpAddressPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpAddressPool)(nil)).Elem()
}

func (i IpAddressPoolArray) ToIpAddressPoolArrayOutput() IpAddressPoolArrayOutput {
	return i.ToIpAddressPoolArrayOutputWithContext(context.Background())
}

func (i IpAddressPoolArray) ToIpAddressPoolArrayOutputWithContext(ctx context.Context) IpAddressPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressPoolArrayOutput)
}

func (i IpAddressPoolArray) ToOutput(ctx context.Context) pulumix.Output[[]IpAddressPool] {
	return pulumix.Output[[]IpAddressPool]{
		OutputState: i.ToIpAddressPoolArrayOutputWithContext(ctx).OutputState,
	}
}

type IpAddressPoolOutput struct{ *pulumi.OutputState }

func (IpAddressPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressPool)(nil)).Elem()
}

func (o IpAddressPoolOutput) ToIpAddressPoolOutput() IpAddressPoolOutput {
	return o
}

func (o IpAddressPoolOutput) ToIpAddressPoolOutputWithContext(ctx context.Context) IpAddressPoolOutput {
	return o
}

func (o IpAddressPoolOutput) ToOutput(ctx context.Context) pulumix.Output[IpAddressPool] {
	return pulumix.Output[IpAddressPool]{
		OutputState: o.OutputState,
	}
}

// The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
func (o IpAddressPoolOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpAddressPool) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// The indicator to determine if automatic allocation from the pool should occur.
func (o IpAddressPoolOutput) AutoAssign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressPool) *string { return v.AutoAssign }).(pulumi.StringPtrOutput)
}

// The name used to identify this IP address pool for association with a BGP advertisement.
func (o IpAddressPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressPool) string { return v.Name }).(pulumi.StringOutput)
}

// The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.
func (o IpAddressPoolOutput) OnlyUseHostIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressPool) *string { return v.OnlyUseHostIps }).(pulumi.StringPtrOutput)
}

type IpAddressPoolArrayOutput struct{ *pulumi.OutputState }

func (IpAddressPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpAddressPool)(nil)).Elem()
}

func (o IpAddressPoolArrayOutput) ToIpAddressPoolArrayOutput() IpAddressPoolArrayOutput {
	return o
}

func (o IpAddressPoolArrayOutput) ToIpAddressPoolArrayOutputWithContext(ctx context.Context) IpAddressPoolArrayOutput {
	return o
}

func (o IpAddressPoolArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpAddressPool] {
	return pulumix.Output[[]IpAddressPool]{
		OutputState: o.OutputState,
	}
}

func (o IpAddressPoolArrayOutput) Index(i pulumi.IntInput) IpAddressPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpAddressPool {
		return vs[0].([]IpAddressPool)[vs[1].(int)]
	}).(IpAddressPoolOutput)
}

type IpAddressPoolResponse struct {
	// The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
	Addresses []string `pulumi:"addresses"`
	// The indicator to determine if automatic allocation from the pool should occur.
	AutoAssign *string `pulumi:"autoAssign"`
	// The name used to identify this IP address pool for association with a BGP advertisement.
	Name string `pulumi:"name"`
	// The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.
	OnlyUseHostIps *string `pulumi:"onlyUseHostIps"`
}

// Defaults sets the appropriate defaults for IpAddressPoolResponse
func (val *IpAddressPoolResponse) Defaults() *IpAddressPoolResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoAssign == nil {
		autoAssign_ := "True"
		tmp.AutoAssign = &autoAssign_
	}
	if tmp.OnlyUseHostIps == nil {
		onlyUseHostIps_ := "True"
		tmp.OnlyUseHostIps = &onlyUseHostIps_
	}
	return &tmp
}

type IpAddressPoolResponseOutput struct{ *pulumi.OutputState }

func (IpAddressPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressPoolResponse)(nil)).Elem()
}

func (o IpAddressPoolResponseOutput) ToIpAddressPoolResponseOutput() IpAddressPoolResponseOutput {
	return o
}

func (o IpAddressPoolResponseOutput) ToIpAddressPoolResponseOutputWithContext(ctx context.Context) IpAddressPoolResponseOutput {
	return o
}

func (o IpAddressPoolResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IpAddressPoolResponse] {
	return pulumix.Output[IpAddressPoolResponse]{
		OutputState: o.OutputState,
	}
}

// The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
func (o IpAddressPoolResponseOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IpAddressPoolResponse) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// The indicator to determine if automatic allocation from the pool should occur.
func (o IpAddressPoolResponseOutput) AutoAssign() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressPoolResponse) *string { return v.AutoAssign }).(pulumi.StringPtrOutput)
}

// The name used to identify this IP address pool for association with a BGP advertisement.
func (o IpAddressPoolResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressPoolResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.
func (o IpAddressPoolResponseOutput) OnlyUseHostIps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressPoolResponse) *string { return v.OnlyUseHostIps }).(pulumi.StringPtrOutput)
}

type IpAddressPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (IpAddressPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpAddressPoolResponse)(nil)).Elem()
}

func (o IpAddressPoolResponseArrayOutput) ToIpAddressPoolResponseArrayOutput() IpAddressPoolResponseArrayOutput {
	return o
}

func (o IpAddressPoolResponseArrayOutput) ToIpAddressPoolResponseArrayOutputWithContext(ctx context.Context) IpAddressPoolResponseArrayOutput {
	return o
}

func (o IpAddressPoolResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpAddressPoolResponse] {
	return pulumix.Output[[]IpAddressPoolResponse]{
		OutputState: o.OutputState,
	}
}

func (o IpAddressPoolResponseArrayOutput) Index(i pulumi.IntInput) IpAddressPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpAddressPoolResponse {
		return vs[0].([]IpAddressPoolResponse)[vs[1].(int)]
	}).(IpAddressPoolResponseOutput)
}

type KeySetUser struct {
	// The user name that will be used for access.
	AzureUserName string `pulumi:"azureUserName"`
	// The free-form description for this user.
	Description *string `pulumi:"description"`
	// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
	SshPublicKey SshPublicKey `pulumi:"sshPublicKey"`
}

// KeySetUserInput is an input type that accepts KeySetUserArgs and KeySetUserOutput values.
// You can construct a concrete instance of `KeySetUserInput` via:
//
//	KeySetUserArgs{...}
type KeySetUserInput interface {
	pulumi.Input

	ToKeySetUserOutput() KeySetUserOutput
	ToKeySetUserOutputWithContext(context.Context) KeySetUserOutput
}

type KeySetUserArgs struct {
	// The user name that will be used for access.
	AzureUserName pulumi.StringInput `pulumi:"azureUserName"`
	// The free-form description for this user.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
	SshPublicKey SshPublicKeyInput `pulumi:"sshPublicKey"`
}

func (KeySetUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeySetUser)(nil)).Elem()
}

func (i KeySetUserArgs) ToKeySetUserOutput() KeySetUserOutput {
	return i.ToKeySetUserOutputWithContext(context.Background())
}

func (i KeySetUserArgs) ToKeySetUserOutputWithContext(ctx context.Context) KeySetUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeySetUserOutput)
}

func (i KeySetUserArgs) ToOutput(ctx context.Context) pulumix.Output[KeySetUser] {
	return pulumix.Output[KeySetUser]{
		OutputState: i.ToKeySetUserOutputWithContext(ctx).OutputState,
	}
}

// KeySetUserArrayInput is an input type that accepts KeySetUserArray and KeySetUserArrayOutput values.
// You can construct a concrete instance of `KeySetUserArrayInput` via:
//
//	KeySetUserArray{ KeySetUserArgs{...} }
type KeySetUserArrayInput interface {
	pulumi.Input

	ToKeySetUserArrayOutput() KeySetUserArrayOutput
	ToKeySetUserArrayOutputWithContext(context.Context) KeySetUserArrayOutput
}

type KeySetUserArray []KeySetUserInput

func (KeySetUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeySetUser)(nil)).Elem()
}

func (i KeySetUserArray) ToKeySetUserArrayOutput() KeySetUserArrayOutput {
	return i.ToKeySetUserArrayOutputWithContext(context.Background())
}

func (i KeySetUserArray) ToKeySetUserArrayOutputWithContext(ctx context.Context) KeySetUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeySetUserArrayOutput)
}

func (i KeySetUserArray) ToOutput(ctx context.Context) pulumix.Output[[]KeySetUser] {
	return pulumix.Output[[]KeySetUser]{
		OutputState: i.ToKeySetUserArrayOutputWithContext(ctx).OutputState,
	}
}

type KeySetUserOutput struct{ *pulumi.OutputState }

func (KeySetUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeySetUser)(nil)).Elem()
}

func (o KeySetUserOutput) ToKeySetUserOutput() KeySetUserOutput {
	return o
}

func (o KeySetUserOutput) ToKeySetUserOutputWithContext(ctx context.Context) KeySetUserOutput {
	return o
}

func (o KeySetUserOutput) ToOutput(ctx context.Context) pulumix.Output[KeySetUser] {
	return pulumix.Output[KeySetUser]{
		OutputState: o.OutputState,
	}
}

// The user name that will be used for access.
func (o KeySetUserOutput) AzureUserName() pulumi.StringOutput {
	return o.ApplyT(func(v KeySetUser) string { return v.AzureUserName }).(pulumi.StringOutput)
}

// The free-form description for this user.
func (o KeySetUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeySetUser) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
func (o KeySetUserOutput) SshPublicKey() SshPublicKeyOutput {
	return o.ApplyT(func(v KeySetUser) SshPublicKey { return v.SshPublicKey }).(SshPublicKeyOutput)
}

type KeySetUserArrayOutput struct{ *pulumi.OutputState }

func (KeySetUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeySetUser)(nil)).Elem()
}

func (o KeySetUserArrayOutput) ToKeySetUserArrayOutput() KeySetUserArrayOutput {
	return o
}

func (o KeySetUserArrayOutput) ToKeySetUserArrayOutputWithContext(ctx context.Context) KeySetUserArrayOutput {
	return o
}

func (o KeySetUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KeySetUser] {
	return pulumix.Output[[]KeySetUser]{
		OutputState: o.OutputState,
	}
}

func (o KeySetUserArrayOutput) Index(i pulumi.IntInput) KeySetUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeySetUser {
		return vs[0].([]KeySetUser)[vs[1].(int)]
	}).(KeySetUserOutput)
}

type KeySetUserResponse struct {
	// The user name that will be used for access.
	AzureUserName string `pulumi:"azureUserName"`
	// The free-form description for this user.
	Description *string `pulumi:"description"`
	// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
	SshPublicKey SshPublicKeyResponse `pulumi:"sshPublicKey"`
}

type KeySetUserResponseOutput struct{ *pulumi.OutputState }

func (KeySetUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeySetUserResponse)(nil)).Elem()
}

func (o KeySetUserResponseOutput) ToKeySetUserResponseOutput() KeySetUserResponseOutput {
	return o
}

func (o KeySetUserResponseOutput) ToKeySetUserResponseOutputWithContext(ctx context.Context) KeySetUserResponseOutput {
	return o
}

func (o KeySetUserResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KeySetUserResponse] {
	return pulumix.Output[KeySetUserResponse]{
		OutputState: o.OutputState,
	}
}

// The user name that will be used for access.
func (o KeySetUserResponseOutput) AzureUserName() pulumi.StringOutput {
	return o.ApplyT(func(v KeySetUserResponse) string { return v.AzureUserName }).(pulumi.StringOutput)
}

// The free-form description for this user.
func (o KeySetUserResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeySetUserResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The SSH public key that will be provisioned for user access. The user is expected to have the corresponding SSH private key for logging in.
func (o KeySetUserResponseOutput) SshPublicKey() SshPublicKeyResponseOutput {
	return o.ApplyT(func(v KeySetUserResponse) SshPublicKeyResponse { return v.SshPublicKey }).(SshPublicKeyResponseOutput)
}

type KeySetUserResponseArrayOutput struct{ *pulumi.OutputState }

func (KeySetUserResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeySetUserResponse)(nil)).Elem()
}

func (o KeySetUserResponseArrayOutput) ToKeySetUserResponseArrayOutput() KeySetUserResponseArrayOutput {
	return o
}

func (o KeySetUserResponseArrayOutput) ToKeySetUserResponseArrayOutputWithContext(ctx context.Context) KeySetUserResponseArrayOutput {
	return o
}

func (o KeySetUserResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KeySetUserResponse] {
	return pulumix.Output[[]KeySetUserResponse]{
		OutputState: o.OutputState,
	}
}

func (o KeySetUserResponseArrayOutput) Index(i pulumi.IntInput) KeySetUserResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeySetUserResponse {
		return vs[0].([]KeySetUserResponse)[vs[1].(int)]
	}).(KeySetUserResponseOutput)
}

type KeySetUserStatusResponse struct {
	// The user name that will be used for access.
	AzureUserName string `pulumi:"azureUserName"`
	// The indicator of whether the user is currently deployed for access.
	Status string `pulumi:"status"`
	// The additional information describing the current status of this user, if any available.
	StatusMessage string `pulumi:"statusMessage"`
}

type KeySetUserStatusResponseOutput struct{ *pulumi.OutputState }

func (KeySetUserStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeySetUserStatusResponse)(nil)).Elem()
}

func (o KeySetUserStatusResponseOutput) ToKeySetUserStatusResponseOutput() KeySetUserStatusResponseOutput {
	return o
}

func (o KeySetUserStatusResponseOutput) ToKeySetUserStatusResponseOutputWithContext(ctx context.Context) KeySetUserStatusResponseOutput {
	return o
}

func (o KeySetUserStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KeySetUserStatusResponse] {
	return pulumix.Output[KeySetUserStatusResponse]{
		OutputState: o.OutputState,
	}
}

// The user name that will be used for access.
func (o KeySetUserStatusResponseOutput) AzureUserName() pulumi.StringOutput {
	return o.ApplyT(func(v KeySetUserStatusResponse) string { return v.AzureUserName }).(pulumi.StringOutput)
}

// The indicator of whether the user is currently deployed for access.
func (o KeySetUserStatusResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KeySetUserStatusResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The additional information describing the current status of this user, if any available.
func (o KeySetUserStatusResponseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v KeySetUserStatusResponse) string { return v.StatusMessage }).(pulumi.StringOutput)
}

type KeySetUserStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (KeySetUserStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeySetUserStatusResponse)(nil)).Elem()
}

func (o KeySetUserStatusResponseArrayOutput) ToKeySetUserStatusResponseArrayOutput() KeySetUserStatusResponseArrayOutput {
	return o
}

func (o KeySetUserStatusResponseArrayOutput) ToKeySetUserStatusResponseArrayOutputWithContext(ctx context.Context) KeySetUserStatusResponseArrayOutput {
	return o
}

func (o KeySetUserStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KeySetUserStatusResponse] {
	return pulumix.Output[[]KeySetUserStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o KeySetUserStatusResponseArrayOutput) Index(i pulumi.IntInput) KeySetUserStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeySetUserStatusResponse {
		return vs[0].([]KeySetUserStatusResponse)[vs[1].(int)]
	}).(KeySetUserStatusResponseOutput)
}

type KubernetesClusterNodeResponse struct {
	// The resource ID of the agent pool that this node belongs to. This value is not represented on control plane nodes.
	AgentPoolId string `pulumi:"agentPoolId"`
	// The availability zone this node is running within.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The resource ID of the bare metal machine that hosts this node.
	BareMetalMachineId string `pulumi:"bareMetalMachineId"`
	// The number of CPU cores configured for this node, derived from the VM SKU specified.
	CpuCores float64 `pulumi:"cpuCores"`
	// The detailed state of this node.
	DetailedStatus string `pulumi:"detailedStatus"`
	// The descriptive message about the current detailed status.
	DetailedStatusMessage string `pulumi:"detailedStatusMessage"`
	// The size of the disk configured for this node.
	DiskSizeGB float64 `pulumi:"diskSizeGB"`
	// The machine image used to deploy this node.
	Image string `pulumi:"image"`
	// The currently running version of Kubernetes and bundled features running on this node.
	KubernetesVersion string `pulumi:"kubernetesVersion"`
	// The list of labels on this node that have been assigned to the agent pool containing this node.
	Labels []KubernetesLabelResponse `pulumi:"labels"`
	// The amount of memory configured for this node, derived from the vm SKU specified.
	MemorySizeGB float64 `pulumi:"memorySizeGB"`
	// The mode of the agent pool containing this node. Not applicable for control plane nodes.
	Mode string `pulumi:"mode"`
	// The name of this node, as realized in the Kubernetes cluster.
	Name string `pulumi:"name"`
	// The NetworkAttachments made to this node.
	NetworkAttachments []NetworkAttachmentResponse `pulumi:"networkAttachments"`
	// The power state of this node.
	PowerState string `pulumi:"powerState"`
	// The role of this node in the cluster.
	Role string `pulumi:"role"`
	// The list of taints that have been assigned to the agent pool containing this node.
	Taints []KubernetesLabelResponse `pulumi:"taints"`
	// The VM SKU name that was used to create this cluster node.
	VmSkuName string `pulumi:"vmSkuName"`
}

type KubernetesClusterNodeResponseOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesClusterNodeResponse)(nil)).Elem()
}

func (o KubernetesClusterNodeResponseOutput) ToKubernetesClusterNodeResponseOutput() KubernetesClusterNodeResponseOutput {
	return o
}

func (o KubernetesClusterNodeResponseOutput) ToKubernetesClusterNodeResponseOutputWithContext(ctx context.Context) KubernetesClusterNodeResponseOutput {
	return o
}

func (o KubernetesClusterNodeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KubernetesClusterNodeResponse] {
	return pulumix.Output[KubernetesClusterNodeResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the agent pool that this node belongs to. This value is not represented on control plane nodes.
func (o KubernetesClusterNodeResponseOutput) AgentPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.AgentPoolId }).(pulumi.StringOutput)
}

// The availability zone this node is running within.
func (o KubernetesClusterNodeResponseOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The resource ID of the bare metal machine that hosts this node.
func (o KubernetesClusterNodeResponseOutput) BareMetalMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.BareMetalMachineId }).(pulumi.StringOutput)
}

// The number of CPU cores configured for this node, derived from the VM SKU specified.
func (o KubernetesClusterNodeResponseOutput) CpuCores() pulumi.Float64Output {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) float64 { return v.CpuCores }).(pulumi.Float64Output)
}

// The detailed state of this node.
func (o KubernetesClusterNodeResponseOutput) DetailedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.DetailedStatus }).(pulumi.StringOutput)
}

// The descriptive message about the current detailed status.
func (o KubernetesClusterNodeResponseOutput) DetailedStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.DetailedStatusMessage }).(pulumi.StringOutput)
}

// The size of the disk configured for this node.
func (o KubernetesClusterNodeResponseOutput) DiskSizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) float64 { return v.DiskSizeGB }).(pulumi.Float64Output)
}

// The machine image used to deploy this node.
func (o KubernetesClusterNodeResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The currently running version of Kubernetes and bundled features running on this node.
func (o KubernetesClusterNodeResponseOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// The list of labels on this node that have been assigned to the agent pool containing this node.
func (o KubernetesClusterNodeResponseOutput) Labels() KubernetesLabelResponseArrayOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) []KubernetesLabelResponse { return v.Labels }).(KubernetesLabelResponseArrayOutput)
}

// The amount of memory configured for this node, derived from the vm SKU specified.
func (o KubernetesClusterNodeResponseOutput) MemorySizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) float64 { return v.MemorySizeGB }).(pulumi.Float64Output)
}

// The mode of the agent pool containing this node. Not applicable for control plane nodes.
func (o KubernetesClusterNodeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The name of this node, as realized in the Kubernetes cluster.
func (o KubernetesClusterNodeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The NetworkAttachments made to this node.
func (o KubernetesClusterNodeResponseOutput) NetworkAttachments() NetworkAttachmentResponseArrayOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) []NetworkAttachmentResponse { return v.NetworkAttachments }).(NetworkAttachmentResponseArrayOutput)
}

// The power state of this node.
func (o KubernetesClusterNodeResponseOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.PowerState }).(pulumi.StringOutput)
}

// The role of this node in the cluster.
func (o KubernetesClusterNodeResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.Role }).(pulumi.StringOutput)
}

// The list of taints that have been assigned to the agent pool containing this node.
func (o KubernetesClusterNodeResponseOutput) Taints() KubernetesLabelResponseArrayOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) []KubernetesLabelResponse { return v.Taints }).(KubernetesLabelResponseArrayOutput)
}

// The VM SKU name that was used to create this cluster node.
func (o KubernetesClusterNodeResponseOutput) VmSkuName() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesClusterNodeResponse) string { return v.VmSkuName }).(pulumi.StringOutput)
}

type KubernetesClusterNodeResponseArrayOutput struct{ *pulumi.OutputState }

func (KubernetesClusterNodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesClusterNodeResponse)(nil)).Elem()
}

func (o KubernetesClusterNodeResponseArrayOutput) ToKubernetesClusterNodeResponseArrayOutput() KubernetesClusterNodeResponseArrayOutput {
	return o
}

func (o KubernetesClusterNodeResponseArrayOutput) ToKubernetesClusterNodeResponseArrayOutputWithContext(ctx context.Context) KubernetesClusterNodeResponseArrayOutput {
	return o
}

func (o KubernetesClusterNodeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KubernetesClusterNodeResponse] {
	return pulumix.Output[[]KubernetesClusterNodeResponse]{
		OutputState: o.OutputState,
	}
}

func (o KubernetesClusterNodeResponseArrayOutput) Index(i pulumi.IntInput) KubernetesClusterNodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesClusterNodeResponse {
		return vs[0].([]KubernetesClusterNodeResponse)[vs[1].(int)]
	}).(KubernetesClusterNodeResponseOutput)
}

type KubernetesLabel struct {
	// The name of the label or taint.
	Key string `pulumi:"key"`
	// The value of the label or taint.
	Value string `pulumi:"value"`
}

// KubernetesLabelInput is an input type that accepts KubernetesLabelArgs and KubernetesLabelOutput values.
// You can construct a concrete instance of `KubernetesLabelInput` via:
//
//	KubernetesLabelArgs{...}
type KubernetesLabelInput interface {
	pulumi.Input

	ToKubernetesLabelOutput() KubernetesLabelOutput
	ToKubernetesLabelOutputWithContext(context.Context) KubernetesLabelOutput
}

type KubernetesLabelArgs struct {
	// The name of the label or taint.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of the label or taint.
	Value pulumi.StringInput `pulumi:"value"`
}

func (KubernetesLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesLabel)(nil)).Elem()
}

func (i KubernetesLabelArgs) ToKubernetesLabelOutput() KubernetesLabelOutput {
	return i.ToKubernetesLabelOutputWithContext(context.Background())
}

func (i KubernetesLabelArgs) ToKubernetesLabelOutputWithContext(ctx context.Context) KubernetesLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLabelOutput)
}

func (i KubernetesLabelArgs) ToOutput(ctx context.Context) pulumix.Output[KubernetesLabel] {
	return pulumix.Output[KubernetesLabel]{
		OutputState: i.ToKubernetesLabelOutputWithContext(ctx).OutputState,
	}
}

// KubernetesLabelArrayInput is an input type that accepts KubernetesLabelArray and KubernetesLabelArrayOutput values.
// You can construct a concrete instance of `KubernetesLabelArrayInput` via:
//
//	KubernetesLabelArray{ KubernetesLabelArgs{...} }
type KubernetesLabelArrayInput interface {
	pulumi.Input

	ToKubernetesLabelArrayOutput() KubernetesLabelArrayOutput
	ToKubernetesLabelArrayOutputWithContext(context.Context) KubernetesLabelArrayOutput
}

type KubernetesLabelArray []KubernetesLabelInput

func (KubernetesLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesLabel)(nil)).Elem()
}

func (i KubernetesLabelArray) ToKubernetesLabelArrayOutput() KubernetesLabelArrayOutput {
	return i.ToKubernetesLabelArrayOutputWithContext(context.Background())
}

func (i KubernetesLabelArray) ToKubernetesLabelArrayOutputWithContext(ctx context.Context) KubernetesLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesLabelArrayOutput)
}

func (i KubernetesLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]KubernetesLabel] {
	return pulumix.Output[[]KubernetesLabel]{
		OutputState: i.ToKubernetesLabelArrayOutputWithContext(ctx).OutputState,
	}
}

type KubernetesLabelOutput struct{ *pulumi.OutputState }

func (KubernetesLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesLabel)(nil)).Elem()
}

func (o KubernetesLabelOutput) ToKubernetesLabelOutput() KubernetesLabelOutput {
	return o
}

func (o KubernetesLabelOutput) ToKubernetesLabelOutputWithContext(ctx context.Context) KubernetesLabelOutput {
	return o
}

func (o KubernetesLabelOutput) ToOutput(ctx context.Context) pulumix.Output[KubernetesLabel] {
	return pulumix.Output[KubernetesLabel]{
		OutputState: o.OutputState,
	}
}

// The name of the label or taint.
func (o KubernetesLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesLabel) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the label or taint.
func (o KubernetesLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesLabel) string { return v.Value }).(pulumi.StringOutput)
}

type KubernetesLabelArrayOutput struct{ *pulumi.OutputState }

func (KubernetesLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesLabel)(nil)).Elem()
}

func (o KubernetesLabelArrayOutput) ToKubernetesLabelArrayOutput() KubernetesLabelArrayOutput {
	return o
}

func (o KubernetesLabelArrayOutput) ToKubernetesLabelArrayOutputWithContext(ctx context.Context) KubernetesLabelArrayOutput {
	return o
}

func (o KubernetesLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KubernetesLabel] {
	return pulumix.Output[[]KubernetesLabel]{
		OutputState: o.OutputState,
	}
}

func (o KubernetesLabelArrayOutput) Index(i pulumi.IntInput) KubernetesLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesLabel {
		return vs[0].([]KubernetesLabel)[vs[1].(int)]
	}).(KubernetesLabelOutput)
}

type KubernetesLabelResponse struct {
	// The name of the label or taint.
	Key string `pulumi:"key"`
	// The value of the label or taint.
	Value string `pulumi:"value"`
}

type KubernetesLabelResponseOutput struct{ *pulumi.OutputState }

func (KubernetesLabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesLabelResponse)(nil)).Elem()
}

func (o KubernetesLabelResponseOutput) ToKubernetesLabelResponseOutput() KubernetesLabelResponseOutput {
	return o
}

func (o KubernetesLabelResponseOutput) ToKubernetesLabelResponseOutputWithContext(ctx context.Context) KubernetesLabelResponseOutput {
	return o
}

func (o KubernetesLabelResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KubernetesLabelResponse] {
	return pulumix.Output[KubernetesLabelResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the label or taint.
func (o KubernetesLabelResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesLabelResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the label or taint.
func (o KubernetesLabelResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesLabelResponse) string { return v.Value }).(pulumi.StringOutput)
}

type KubernetesLabelResponseArrayOutput struct{ *pulumi.OutputState }

func (KubernetesLabelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KubernetesLabelResponse)(nil)).Elem()
}

func (o KubernetesLabelResponseArrayOutput) ToKubernetesLabelResponseArrayOutput() KubernetesLabelResponseArrayOutput {
	return o
}

func (o KubernetesLabelResponseArrayOutput) ToKubernetesLabelResponseArrayOutputWithContext(ctx context.Context) KubernetesLabelResponseArrayOutput {
	return o
}

func (o KubernetesLabelResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]KubernetesLabelResponse] {
	return pulumix.Output[[]KubernetesLabelResponse]{
		OutputState: o.OutputState,
	}
}

func (o KubernetesLabelResponseArrayOutput) Index(i pulumi.IntInput) KubernetesLabelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KubernetesLabelResponse {
		return vs[0].([]KubernetesLabelResponse)[vs[1].(int)]
	}).(KubernetesLabelResponseOutput)
}

type L2NetworkAttachmentConfiguration struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L2NetworkAttachmentConfiguration
func (val *L2NetworkAttachmentConfiguration) Defaults() *L2NetworkAttachmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

// L2NetworkAttachmentConfigurationInput is an input type that accepts L2NetworkAttachmentConfigurationArgs and L2NetworkAttachmentConfigurationOutput values.
// You can construct a concrete instance of `L2NetworkAttachmentConfigurationInput` via:
//
//	L2NetworkAttachmentConfigurationArgs{...}
type L2NetworkAttachmentConfigurationInput interface {
	pulumi.Input

	ToL2NetworkAttachmentConfigurationOutput() L2NetworkAttachmentConfigurationOutput
	ToL2NetworkAttachmentConfigurationOutputWithContext(context.Context) L2NetworkAttachmentConfigurationOutput
}

type L2NetworkAttachmentConfigurationArgs struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType pulumi.StringPtrInput `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L2NetworkAttachmentConfigurationArgs
func (val *L2NetworkAttachmentConfigurationArgs) Defaults() *L2NetworkAttachmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		tmp.PluginType = pulumi.StringPtr("SRIOV")
	}
	return &tmp
}
func (L2NetworkAttachmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L2NetworkAttachmentConfiguration)(nil)).Elem()
}

func (i L2NetworkAttachmentConfigurationArgs) ToL2NetworkAttachmentConfigurationOutput() L2NetworkAttachmentConfigurationOutput {
	return i.ToL2NetworkAttachmentConfigurationOutputWithContext(context.Background())
}

func (i L2NetworkAttachmentConfigurationArgs) ToL2NetworkAttachmentConfigurationOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L2NetworkAttachmentConfigurationOutput)
}

func (i L2NetworkAttachmentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[L2NetworkAttachmentConfiguration] {
	return pulumix.Output[L2NetworkAttachmentConfiguration]{
		OutputState: i.ToL2NetworkAttachmentConfigurationOutputWithContext(ctx).OutputState,
	}
}

// L2NetworkAttachmentConfigurationArrayInput is an input type that accepts L2NetworkAttachmentConfigurationArray and L2NetworkAttachmentConfigurationArrayOutput values.
// You can construct a concrete instance of `L2NetworkAttachmentConfigurationArrayInput` via:
//
//	L2NetworkAttachmentConfigurationArray{ L2NetworkAttachmentConfigurationArgs{...} }
type L2NetworkAttachmentConfigurationArrayInput interface {
	pulumi.Input

	ToL2NetworkAttachmentConfigurationArrayOutput() L2NetworkAttachmentConfigurationArrayOutput
	ToL2NetworkAttachmentConfigurationArrayOutputWithContext(context.Context) L2NetworkAttachmentConfigurationArrayOutput
}

type L2NetworkAttachmentConfigurationArray []L2NetworkAttachmentConfigurationInput

func (L2NetworkAttachmentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L2NetworkAttachmentConfiguration)(nil)).Elem()
}

func (i L2NetworkAttachmentConfigurationArray) ToL2NetworkAttachmentConfigurationArrayOutput() L2NetworkAttachmentConfigurationArrayOutput {
	return i.ToL2NetworkAttachmentConfigurationArrayOutputWithContext(context.Background())
}

func (i L2NetworkAttachmentConfigurationArray) ToL2NetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L2NetworkAttachmentConfigurationArrayOutput)
}

func (i L2NetworkAttachmentConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]L2NetworkAttachmentConfiguration] {
	return pulumix.Output[[]L2NetworkAttachmentConfiguration]{
		OutputState: i.ToL2NetworkAttachmentConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type L2NetworkAttachmentConfigurationOutput struct{ *pulumi.OutputState }

func (L2NetworkAttachmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L2NetworkAttachmentConfiguration)(nil)).Elem()
}

func (o L2NetworkAttachmentConfigurationOutput) ToL2NetworkAttachmentConfigurationOutput() L2NetworkAttachmentConfigurationOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationOutput) ToL2NetworkAttachmentConfigurationOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[L2NetworkAttachmentConfiguration] {
	return pulumix.Output[L2NetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the network that is being configured for attachment.
func (o L2NetworkAttachmentConfigurationOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v L2NetworkAttachmentConfiguration) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o L2NetworkAttachmentConfigurationOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L2NetworkAttachmentConfiguration) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type L2NetworkAttachmentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (L2NetworkAttachmentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L2NetworkAttachmentConfiguration)(nil)).Elem()
}

func (o L2NetworkAttachmentConfigurationArrayOutput) ToL2NetworkAttachmentConfigurationArrayOutput() L2NetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationArrayOutput) ToL2NetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]L2NetworkAttachmentConfiguration] {
	return pulumix.Output[[]L2NetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o L2NetworkAttachmentConfigurationArrayOutput) Index(i pulumi.IntInput) L2NetworkAttachmentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L2NetworkAttachmentConfiguration {
		return vs[0].([]L2NetworkAttachmentConfiguration)[vs[1].(int)]
	}).(L2NetworkAttachmentConfigurationOutput)
}

type L2NetworkAttachmentConfigurationResponse struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L2NetworkAttachmentConfigurationResponse
func (val *L2NetworkAttachmentConfigurationResponse) Defaults() *L2NetworkAttachmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

type L2NetworkAttachmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (L2NetworkAttachmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L2NetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o L2NetworkAttachmentConfigurationResponseOutput) ToL2NetworkAttachmentConfigurationResponseOutput() L2NetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationResponseOutput) ToL2NetworkAttachmentConfigurationResponseOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[L2NetworkAttachmentConfigurationResponse] {
	return pulumix.Output[L2NetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the network that is being configured for attachment.
func (o L2NetworkAttachmentConfigurationResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v L2NetworkAttachmentConfigurationResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o L2NetworkAttachmentConfigurationResponseOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L2NetworkAttachmentConfigurationResponse) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type L2NetworkAttachmentConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (L2NetworkAttachmentConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L2NetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o L2NetworkAttachmentConfigurationResponseArrayOutput) ToL2NetworkAttachmentConfigurationResponseArrayOutput() L2NetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationResponseArrayOutput) ToL2NetworkAttachmentConfigurationResponseArrayOutputWithContext(ctx context.Context) L2NetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o L2NetworkAttachmentConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]L2NetworkAttachmentConfigurationResponse] {
	return pulumix.Output[[]L2NetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o L2NetworkAttachmentConfigurationResponseArrayOutput) Index(i pulumi.IntInput) L2NetworkAttachmentConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L2NetworkAttachmentConfigurationResponse {
		return vs[0].([]L2NetworkAttachmentConfigurationResponse)[vs[1].(int)]
	}).(L2NetworkAttachmentConfigurationResponseOutput)
}

type L3NetworkAttachmentConfiguration struct {
	// The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
	IpamEnabled *string `pulumi:"ipamEnabled"`
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L3NetworkAttachmentConfiguration
func (val *L3NetworkAttachmentConfiguration) Defaults() *L3NetworkAttachmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IpamEnabled == nil {
		ipamEnabled_ := "False"
		tmp.IpamEnabled = &ipamEnabled_
	}
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

// L3NetworkAttachmentConfigurationInput is an input type that accepts L3NetworkAttachmentConfigurationArgs and L3NetworkAttachmentConfigurationOutput values.
// You can construct a concrete instance of `L3NetworkAttachmentConfigurationInput` via:
//
//	L3NetworkAttachmentConfigurationArgs{...}
type L3NetworkAttachmentConfigurationInput interface {
	pulumi.Input

	ToL3NetworkAttachmentConfigurationOutput() L3NetworkAttachmentConfigurationOutput
	ToL3NetworkAttachmentConfigurationOutputWithContext(context.Context) L3NetworkAttachmentConfigurationOutput
}

type L3NetworkAttachmentConfigurationArgs struct {
	// The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
	IpamEnabled pulumi.StringPtrInput `pulumi:"ipamEnabled"`
	// The resource ID of the network that is being configured for attachment.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType pulumi.StringPtrInput `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L3NetworkAttachmentConfigurationArgs
func (val *L3NetworkAttachmentConfigurationArgs) Defaults() *L3NetworkAttachmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IpamEnabled == nil {
		tmp.IpamEnabled = pulumi.StringPtr("False")
	}
	if tmp.PluginType == nil {
		tmp.PluginType = pulumi.StringPtr("SRIOV")
	}
	return &tmp
}
func (L3NetworkAttachmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L3NetworkAttachmentConfiguration)(nil)).Elem()
}

func (i L3NetworkAttachmentConfigurationArgs) ToL3NetworkAttachmentConfigurationOutput() L3NetworkAttachmentConfigurationOutput {
	return i.ToL3NetworkAttachmentConfigurationOutputWithContext(context.Background())
}

func (i L3NetworkAttachmentConfigurationArgs) ToL3NetworkAttachmentConfigurationOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3NetworkAttachmentConfigurationOutput)
}

func (i L3NetworkAttachmentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[L3NetworkAttachmentConfiguration] {
	return pulumix.Output[L3NetworkAttachmentConfiguration]{
		OutputState: i.ToL3NetworkAttachmentConfigurationOutputWithContext(ctx).OutputState,
	}
}

// L3NetworkAttachmentConfigurationArrayInput is an input type that accepts L3NetworkAttachmentConfigurationArray and L3NetworkAttachmentConfigurationArrayOutput values.
// You can construct a concrete instance of `L3NetworkAttachmentConfigurationArrayInput` via:
//
//	L3NetworkAttachmentConfigurationArray{ L3NetworkAttachmentConfigurationArgs{...} }
type L3NetworkAttachmentConfigurationArrayInput interface {
	pulumi.Input

	ToL3NetworkAttachmentConfigurationArrayOutput() L3NetworkAttachmentConfigurationArrayOutput
	ToL3NetworkAttachmentConfigurationArrayOutputWithContext(context.Context) L3NetworkAttachmentConfigurationArrayOutput
}

type L3NetworkAttachmentConfigurationArray []L3NetworkAttachmentConfigurationInput

func (L3NetworkAttachmentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L3NetworkAttachmentConfiguration)(nil)).Elem()
}

func (i L3NetworkAttachmentConfigurationArray) ToL3NetworkAttachmentConfigurationArrayOutput() L3NetworkAttachmentConfigurationArrayOutput {
	return i.ToL3NetworkAttachmentConfigurationArrayOutputWithContext(context.Background())
}

func (i L3NetworkAttachmentConfigurationArray) ToL3NetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L3NetworkAttachmentConfigurationArrayOutput)
}

func (i L3NetworkAttachmentConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]L3NetworkAttachmentConfiguration] {
	return pulumix.Output[[]L3NetworkAttachmentConfiguration]{
		OutputState: i.ToL3NetworkAttachmentConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type L3NetworkAttachmentConfigurationOutput struct{ *pulumi.OutputState }

func (L3NetworkAttachmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3NetworkAttachmentConfiguration)(nil)).Elem()
}

func (o L3NetworkAttachmentConfigurationOutput) ToL3NetworkAttachmentConfigurationOutput() L3NetworkAttachmentConfigurationOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationOutput) ToL3NetworkAttachmentConfigurationOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[L3NetworkAttachmentConfiguration] {
	return pulumix.Output[L3NetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

// The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
func (o L3NetworkAttachmentConfigurationOutput) IpamEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfiguration) *string { return v.IpamEnabled }).(pulumi.StringPtrOutput)
}

// The resource ID of the network that is being configured for attachment.
func (o L3NetworkAttachmentConfigurationOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfiguration) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o L3NetworkAttachmentConfigurationOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfiguration) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type L3NetworkAttachmentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (L3NetworkAttachmentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L3NetworkAttachmentConfiguration)(nil)).Elem()
}

func (o L3NetworkAttachmentConfigurationArrayOutput) ToL3NetworkAttachmentConfigurationArrayOutput() L3NetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationArrayOutput) ToL3NetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]L3NetworkAttachmentConfiguration] {
	return pulumix.Output[[]L3NetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o L3NetworkAttachmentConfigurationArrayOutput) Index(i pulumi.IntInput) L3NetworkAttachmentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L3NetworkAttachmentConfiguration {
		return vs[0].([]L3NetworkAttachmentConfiguration)[vs[1].(int)]
	}).(L3NetworkAttachmentConfigurationOutput)
}

type L3NetworkAttachmentConfigurationResponse struct {
	// The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
	IpamEnabled *string `pulumi:"ipamEnabled"`
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for L3NetworkAttachmentConfigurationResponse
func (val *L3NetworkAttachmentConfigurationResponse) Defaults() *L3NetworkAttachmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IpamEnabled == nil {
		ipamEnabled_ := "False"
		tmp.IpamEnabled = &ipamEnabled_
	}
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

type L3NetworkAttachmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (L3NetworkAttachmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L3NetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o L3NetworkAttachmentConfigurationResponseOutput) ToL3NetworkAttachmentConfigurationResponseOutput() L3NetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationResponseOutput) ToL3NetworkAttachmentConfigurationResponseOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[L3NetworkAttachmentConfigurationResponse] {
	return pulumix.Output[L3NetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
func (o L3NetworkAttachmentConfigurationResponseOutput) IpamEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfigurationResponse) *string { return v.IpamEnabled }).(pulumi.StringPtrOutput)
}

// The resource ID of the network that is being configured for attachment.
func (o L3NetworkAttachmentConfigurationResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfigurationResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o L3NetworkAttachmentConfigurationResponseOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L3NetworkAttachmentConfigurationResponse) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type L3NetworkAttachmentConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (L3NetworkAttachmentConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L3NetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o L3NetworkAttachmentConfigurationResponseArrayOutput) ToL3NetworkAttachmentConfigurationResponseArrayOutput() L3NetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationResponseArrayOutput) ToL3NetworkAttachmentConfigurationResponseArrayOutputWithContext(ctx context.Context) L3NetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o L3NetworkAttachmentConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]L3NetworkAttachmentConfigurationResponse] {
	return pulumix.Output[[]L3NetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o L3NetworkAttachmentConfigurationResponseArrayOutput) Index(i pulumi.IntInput) L3NetworkAttachmentConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L3NetworkAttachmentConfigurationResponse {
		return vs[0].([]L3NetworkAttachmentConfigurationResponse)[vs[1].(int)]
	}).(L3NetworkAttachmentConfigurationResponseOutput)
}

type LldpNeighborResponse struct {
	// The descriptive information about the port on the connected device.
	PortDescription string `pulumi:"portDescription"`
	// The system-assigned name of the port on the connected device.
	PortName string `pulumi:"portName"`
	// The descriptive information about the connected device.
	SystemDescription string `pulumi:"systemDescription"`
	// The system-assigned name of the connected device.
	SystemName string `pulumi:"systemName"`
}

type LldpNeighborResponseOutput struct{ *pulumi.OutputState }

func (LldpNeighborResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LldpNeighborResponse)(nil)).Elem()
}

func (o LldpNeighborResponseOutput) ToLldpNeighborResponseOutput() LldpNeighborResponseOutput {
	return o
}

func (o LldpNeighborResponseOutput) ToLldpNeighborResponseOutputWithContext(ctx context.Context) LldpNeighborResponseOutput {
	return o
}

func (o LldpNeighborResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LldpNeighborResponse] {
	return pulumix.Output[LldpNeighborResponse]{
		OutputState: o.OutputState,
	}
}

// The descriptive information about the port on the connected device.
func (o LldpNeighborResponseOutput) PortDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LldpNeighborResponse) string { return v.PortDescription }).(pulumi.StringOutput)
}

// The system-assigned name of the port on the connected device.
func (o LldpNeighborResponseOutput) PortName() pulumi.StringOutput {
	return o.ApplyT(func(v LldpNeighborResponse) string { return v.PortName }).(pulumi.StringOutput)
}

// The descriptive information about the connected device.
func (o LldpNeighborResponseOutput) SystemDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LldpNeighborResponse) string { return v.SystemDescription }).(pulumi.StringOutput)
}

// The system-assigned name of the connected device.
func (o LldpNeighborResponseOutput) SystemName() pulumi.StringOutput {
	return o.ApplyT(func(v LldpNeighborResponse) string { return v.SystemName }).(pulumi.StringOutput)
}

type ManagedResourceGroupConfiguration struct {
	// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
	Location *string `pulumi:"location"`
	// The name for the managed resource group. If not specified, the unique name is automatically generated.
	Name *string `pulumi:"name"`
}

// ManagedResourceGroupConfigurationInput is an input type that accepts ManagedResourceGroupConfigurationArgs and ManagedResourceGroupConfigurationOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationInput` via:
//
//	ManagedResourceGroupConfigurationArgs{...}
type ManagedResourceGroupConfigurationInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput
	ToManagedResourceGroupConfigurationOutputWithContext(context.Context) ManagedResourceGroupConfigurationOutput
}

type ManagedResourceGroupConfigurationArgs struct {
	// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name for the managed resource group. If not specified, the unique name is automatically generated.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ManagedResourceGroupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return i.ToManagedResourceGroupConfigurationOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput)
}

func (i ManagedResourceGroupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceGroupConfiguration] {
	return pulumix.Output[ManagedResourceGroupConfiguration]{
		OutputState: i.ToManagedResourceGroupConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i ManagedResourceGroupConfigurationArgs) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationOutput).ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx)
}

// ManagedResourceGroupConfigurationPtrInput is an input type that accepts ManagedResourceGroupConfigurationArgs, ManagedResourceGroupConfigurationPtr and ManagedResourceGroupConfigurationPtrOutput values.
// You can construct a concrete instance of `ManagedResourceGroupConfigurationPtrInput` via:
//
//	        ManagedResourceGroupConfigurationArgs{...}
//
//	or:
//
//	        nil
type ManagedResourceGroupConfigurationPtrInput interface {
	pulumi.Input

	ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput
	ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Context) ManagedResourceGroupConfigurationPtrOutput
}

type managedResourceGroupConfigurationPtrType ManagedResourceGroupConfigurationArgs

func ManagedResourceGroupConfigurationPtr(v *ManagedResourceGroupConfigurationArgs) ManagedResourceGroupConfigurationPtrInput {
	return (*managedResourceGroupConfigurationPtrType)(v)
}

func (*managedResourceGroupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return i.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (i *managedResourceGroupConfigurationPtrType) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupConfigurationPtrOutput)
}

func (i *managedResourceGroupConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedResourceGroupConfiguration] {
	return pulumix.Output[*ManagedResourceGroupConfiguration]{
		OutputState: i.ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

type ManagedResourceGroupConfigurationOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutput() ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationOutput {
	return o
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o.ToManagedResourceGroupConfigurationPtrOutputWithContext(context.Background())
}

func (o ManagedResourceGroupConfigurationOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourceGroupConfiguration) *ManagedResourceGroupConfiguration {
		return &v
	}).(ManagedResourceGroupConfigurationPtrOutput)
}

func (o ManagedResourceGroupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceGroupConfiguration] {
	return pulumix.Output[ManagedResourceGroupConfiguration]{
		OutputState: o.OutputState,
	}
}

// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
func (o ManagedResourceGroupConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name for the managed resource group. If not specified, the unique name is automatically generated.
func (o ManagedResourceGroupConfigurationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfiguration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfiguration)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutput() ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToManagedResourceGroupConfigurationPtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationPtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedResourceGroupConfiguration] {
	return pulumix.Output[*ManagedResourceGroupConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ManagedResourceGroupConfigurationPtrOutput) Elem() ManagedResourceGroupConfigurationOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) ManagedResourceGroupConfiguration {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfiguration
		return ret
	}).(ManagedResourceGroupConfigurationOutput)
}

// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
func (o ManagedResourceGroupConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The name for the managed resource group. If not specified, the unique name is automatically generated.
func (o ManagedResourceGroupConfigurationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationResponse struct {
	// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
	Location *string `pulumi:"location"`
	// The name for the managed resource group. If not specified, the unique name is automatically generated.
	Name *string `pulumi:"name"`
}

type ManagedResourceGroupConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutput() ManagedResourceGroupConfigurationResponseOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToManagedResourceGroupConfigurationResponseOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponseOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedResourceGroupConfigurationResponse] {
	return pulumix.Output[ManagedResourceGroupConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
func (o ManagedResourceGroupConfigurationResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfigurationResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name for the managed resource group. If not specified, the unique name is automatically generated.
func (o ManagedResourceGroupConfigurationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupConfigurationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupConfigurationResponse)(nil)).Elem()
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutput() ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToManagedResourceGroupConfigurationResponsePtrOutputWithContext(ctx context.Context) ManagedResourceGroupConfigurationResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedResourceGroupConfigurationResponse] {
	return pulumix.Output[*ManagedResourceGroupConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedResourceGroupConfigurationResponsePtrOutput) Elem() ManagedResourceGroupConfigurationResponseOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) ManagedResourceGroupConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupConfigurationResponse
		return ret
	}).(ManagedResourceGroupConfigurationResponseOutput)
}

// The location of the managed resource group. If not specified, the location of the parent resource is chosen.
func (o ManagedResourceGroupConfigurationResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The name for the managed resource group. If not specified, the unique name is automatically generated.
func (o ManagedResourceGroupConfigurationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedResourceGroupConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type NetworkAttachment struct {
	// The resource ID of the associated network attached to the virtual machine.
	// It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
	AttachedNetworkId string `pulumi:"attachedNetworkId"`
	// The indicator of whether this is the default gateway.
	// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// The IP allocation mechanism for the virtual machine.
	// Dynamic and Static are only valid for l3Network which may also specify Disabled.
	// Otherwise, Disabled is the only permitted value.
	IpAllocationMethod string `pulumi:"ipAllocationMethod"`
	// The IPv4 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// The IPv6 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain an IPv6 address range from within the range specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The associated network's interface name.
	// If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
	// If the user doesn’t specify this value, the default interface name of the network resource will be used.
	// For a CloudServicesNetwork resource, this name will be ignored.
	NetworkAttachmentName *string `pulumi:"networkAttachmentName"`
}

// NetworkAttachmentInput is an input type that accepts NetworkAttachmentArgs and NetworkAttachmentOutput values.
// You can construct a concrete instance of `NetworkAttachmentInput` via:
//
//	NetworkAttachmentArgs{...}
type NetworkAttachmentInput interface {
	pulumi.Input

	ToNetworkAttachmentOutput() NetworkAttachmentOutput
	ToNetworkAttachmentOutputWithContext(context.Context) NetworkAttachmentOutput
}

type NetworkAttachmentArgs struct {
	// The resource ID of the associated network attached to the virtual machine.
	// It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
	AttachedNetworkId pulumi.StringInput `pulumi:"attachedNetworkId"`
	// The indicator of whether this is the default gateway.
	// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
	DefaultGateway pulumi.StringPtrInput `pulumi:"defaultGateway"`
	// The IP allocation mechanism for the virtual machine.
	// Dynamic and Static are only valid for l3Network which may also specify Disabled.
	// Otherwise, Disabled is the only permitted value.
	IpAllocationMethod pulumi.StringInput `pulumi:"ipAllocationMethod"`
	// The IPv4 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// The IPv6 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain an IPv6 address range from within the range specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	// The associated network's interface name.
	// If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
	// If the user doesn’t specify this value, the default interface name of the network resource will be used.
	// For a CloudServicesNetwork resource, this name will be ignored.
	NetworkAttachmentName pulumi.StringPtrInput `pulumi:"networkAttachmentName"`
}

func (NetworkAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAttachment)(nil)).Elem()
}

func (i NetworkAttachmentArgs) ToNetworkAttachmentOutput() NetworkAttachmentOutput {
	return i.ToNetworkAttachmentOutputWithContext(context.Background())
}

func (i NetworkAttachmentArgs) ToNetworkAttachmentOutputWithContext(ctx context.Context) NetworkAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachmentOutput)
}

func (i NetworkAttachmentArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkAttachment] {
	return pulumix.Output[NetworkAttachment]{
		OutputState: i.ToNetworkAttachmentOutputWithContext(ctx).OutputState,
	}
}

// NetworkAttachmentArrayInput is an input type that accepts NetworkAttachmentArray and NetworkAttachmentArrayOutput values.
// You can construct a concrete instance of `NetworkAttachmentArrayInput` via:
//
//	NetworkAttachmentArray{ NetworkAttachmentArgs{...} }
type NetworkAttachmentArrayInput interface {
	pulumi.Input

	ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput
	ToNetworkAttachmentArrayOutputWithContext(context.Context) NetworkAttachmentArrayOutput
}

type NetworkAttachmentArray []NetworkAttachmentInput

func (NetworkAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAttachment)(nil)).Elem()
}

func (i NetworkAttachmentArray) ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput {
	return i.ToNetworkAttachmentArrayOutputWithContext(context.Background())
}

func (i NetworkAttachmentArray) ToNetworkAttachmentArrayOutputWithContext(ctx context.Context) NetworkAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAttachmentArrayOutput)
}

func (i NetworkAttachmentArray) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAttachment] {
	return pulumix.Output[[]NetworkAttachment]{
		OutputState: i.ToNetworkAttachmentArrayOutputWithContext(ctx).OutputState,
	}
}

type NetworkAttachmentOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAttachment)(nil)).Elem()
}

func (o NetworkAttachmentOutput) ToNetworkAttachmentOutput() NetworkAttachmentOutput {
	return o
}

func (o NetworkAttachmentOutput) ToNetworkAttachmentOutputWithContext(ctx context.Context) NetworkAttachmentOutput {
	return o
}

func (o NetworkAttachmentOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAttachment] {
	return pulumix.Output[NetworkAttachment]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the associated network attached to the virtual machine.
// It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
func (o NetworkAttachmentOutput) AttachedNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAttachment) string { return v.AttachedNetworkId }).(pulumi.StringOutput)
}

// The indicator of whether this is the default gateway.
// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
func (o NetworkAttachmentOutput) DefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachment) *string { return v.DefaultGateway }).(pulumi.StringPtrOutput)
}

// The IP allocation mechanism for the virtual machine.
// Dynamic and Static are only valid for l3Network which may also specify Disabled.
// Otherwise, Disabled is the only permitted value.
func (o NetworkAttachmentOutput) IpAllocationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAttachment) string { return v.IpAllocationMethod }).(pulumi.StringOutput)
}

// The IPv4 address of the virtual machine.
//
// This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
//
// If IPAllocationMethod is:
// Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
// Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
// Disabled - this field will be empty.
func (o NetworkAttachmentOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachment) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 address of the virtual machine.
//
// This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
//
// If IPAllocationMethod is:
// Static - this field must contain an IPv6 address range from within the range specified in the attached network.
// Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
// Disabled - this field will be empty.
func (o NetworkAttachmentOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachment) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// The associated network's interface name.
// If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
// If the user doesn’t specify this value, the default interface name of the network resource will be used.
// For a CloudServicesNetwork resource, this name will be ignored.
func (o NetworkAttachmentOutput) NetworkAttachmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachment) *string { return v.NetworkAttachmentName }).(pulumi.StringPtrOutput)
}

type NetworkAttachmentArrayOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAttachment)(nil)).Elem()
}

func (o NetworkAttachmentArrayOutput) ToNetworkAttachmentArrayOutput() NetworkAttachmentArrayOutput {
	return o
}

func (o NetworkAttachmentArrayOutput) ToNetworkAttachmentArrayOutputWithContext(ctx context.Context) NetworkAttachmentArrayOutput {
	return o
}

func (o NetworkAttachmentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAttachment] {
	return pulumix.Output[[]NetworkAttachment]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAttachmentArrayOutput) Index(i pulumi.IntInput) NetworkAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAttachment {
		return vs[0].([]NetworkAttachment)[vs[1].(int)]
	}).(NetworkAttachmentOutput)
}

type NetworkAttachmentResponse struct {
	// The resource ID of the associated network attached to the virtual machine.
	// It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
	AttachedNetworkId string `pulumi:"attachedNetworkId"`
	// The indicator of whether this is the default gateway.
	// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
	DefaultGateway *string `pulumi:"defaultGateway"`
	// The IP allocation mechanism for the virtual machine.
	// Dynamic and Static are only valid for l3Network which may also specify Disabled.
	// Otherwise, Disabled is the only permitted value.
	IpAllocationMethod string `pulumi:"ipAllocationMethod"`
	// The IPv4 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv4Address *string `pulumi:"ipv4Address"`
	// The IPv6 address of the virtual machine.
	//
	// This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
	//
	// If IPAllocationMethod is:
	// Static - this field must contain an IPv6 address range from within the range specified in the attached network.
	// Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
	// Disabled - this field will be empty.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The MAC address of the interface for the virtual machine that corresponds to this network attachment.
	MacAddress string `pulumi:"macAddress"`
	// The associated network's interface name.
	// If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
	// If the user doesn’t specify this value, the default interface name of the network resource will be used.
	// For a CloudServicesNetwork resource, this name will be ignored.
	NetworkAttachmentName *string `pulumi:"networkAttachmentName"`
}

type NetworkAttachmentResponseOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAttachmentResponse)(nil)).Elem()
}

func (o NetworkAttachmentResponseOutput) ToNetworkAttachmentResponseOutput() NetworkAttachmentResponseOutput {
	return o
}

func (o NetworkAttachmentResponseOutput) ToNetworkAttachmentResponseOutputWithContext(ctx context.Context) NetworkAttachmentResponseOutput {
	return o
}

func (o NetworkAttachmentResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkAttachmentResponse] {
	return pulumix.Output[NetworkAttachmentResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the associated network attached to the virtual machine.
// It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.
func (o NetworkAttachmentResponseOutput) AttachedNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) string { return v.AttachedNetworkId }).(pulumi.StringOutput)
}

// The indicator of whether this is the default gateway.
// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
func (o NetworkAttachmentResponseOutput) DefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) *string { return v.DefaultGateway }).(pulumi.StringPtrOutput)
}

// The IP allocation mechanism for the virtual machine.
// Dynamic and Static are only valid for l3Network which may also specify Disabled.
// Otherwise, Disabled is the only permitted value.
func (o NetworkAttachmentResponseOutput) IpAllocationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) string { return v.IpAllocationMethod }).(pulumi.StringOutput)
}

// The IPv4 address of the virtual machine.
//
// This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.
//
// If IPAllocationMethod is:
// Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network.
// Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network.
// Disabled - this field will be empty.
func (o NetworkAttachmentResponseOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// The IPv6 address of the virtual machine.
//
// This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.
//
// If IPAllocationMethod is:
// Static - this field must contain an IPv6 address range from within the range specified in the attached network.
// Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network.
// Disabled - this field will be empty.
func (o NetworkAttachmentResponseOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// The MAC address of the interface for the virtual machine that corresponds to this network attachment.
func (o NetworkAttachmentResponseOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The associated network's interface name.
// If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine.
// If the user doesn’t specify this value, the default interface name of the network resource will be used.
// For a CloudServicesNetwork resource, this name will be ignored.
func (o NetworkAttachmentResponseOutput) NetworkAttachmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAttachmentResponse) *string { return v.NetworkAttachmentName }).(pulumi.StringPtrOutput)
}

type NetworkAttachmentResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkAttachmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAttachmentResponse)(nil)).Elem()
}

func (o NetworkAttachmentResponseArrayOutput) ToNetworkAttachmentResponseArrayOutput() NetworkAttachmentResponseArrayOutput {
	return o
}

func (o NetworkAttachmentResponseArrayOutput) ToNetworkAttachmentResponseArrayOutputWithContext(ctx context.Context) NetworkAttachmentResponseArrayOutput {
	return o
}

func (o NetworkAttachmentResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NetworkAttachmentResponse] {
	return pulumix.Output[[]NetworkAttachmentResponse]{
		OutputState: o.OutputState,
	}
}

func (o NetworkAttachmentResponseArrayOutput) Index(i pulumi.IntInput) NetworkAttachmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAttachmentResponse {
		return vs[0].([]NetworkAttachmentResponse)[vs[1].(int)]
	}).(NetworkAttachmentResponseOutput)
}

type NetworkConfiguration struct {
	// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration *AttachedNetworkConfiguration `pulumi:"attachedNetworkConfiguration"`
	// The configuration of the BGP service load balancer for this Kubernetes cluster.
	BgpServiceLoadBalancerConfiguration *BgpServiceLoadBalancerConfiguration `pulumi:"bgpServiceLoadBalancerConfiguration"`
	// The resource ID of the associated Cloud Services network.
	CloudServicesNetworkId string `pulumi:"cloudServicesNetworkId"`
	// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
	CniNetworkId string `pulumi:"cniNetworkId"`
	// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.
	DnsServiceIp *string `pulumi:"dnsServiceIp"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkConfiguration
func (val *NetworkConfiguration) Defaults() *NetworkConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BgpServiceLoadBalancerConfiguration = tmp.BgpServiceLoadBalancerConfiguration.Defaults()

	return &tmp
}

// NetworkConfigurationInput is an input type that accepts NetworkConfigurationArgs and NetworkConfigurationOutput values.
// You can construct a concrete instance of `NetworkConfigurationInput` via:
//
//	NetworkConfigurationArgs{...}
type NetworkConfigurationInput interface {
	pulumi.Input

	ToNetworkConfigurationOutput() NetworkConfigurationOutput
	ToNetworkConfigurationOutputWithContext(context.Context) NetworkConfigurationOutput
}

type NetworkConfigurationArgs struct {
	// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration AttachedNetworkConfigurationPtrInput `pulumi:"attachedNetworkConfiguration"`
	// The configuration of the BGP service load balancer for this Kubernetes cluster.
	BgpServiceLoadBalancerConfiguration BgpServiceLoadBalancerConfigurationPtrInput `pulumi:"bgpServiceLoadBalancerConfiguration"`
	// The resource ID of the associated Cloud Services network.
	CloudServicesNetworkId pulumi.StringInput `pulumi:"cloudServicesNetworkId"`
	// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
	CniNetworkId pulumi.StringInput `pulumi:"cniNetworkId"`
	// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.
	DnsServiceIp pulumi.StringPtrInput `pulumi:"dnsServiceIp"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs pulumi.StringArrayInput `pulumi:"podCidrs"`
	// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	ServiceCidrs pulumi.StringArrayInput `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkConfigurationArgs
func (val *NetworkConfigurationArgs) Defaults() *NetworkConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (NetworkConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return i.ToNetworkConfigurationOutputWithContext(context.Background())
}

func (i NetworkConfigurationArgs) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigurationOutput)
}

func (i NetworkConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[NetworkConfiguration] {
	return pulumix.Output[NetworkConfiguration]{
		OutputState: i.ToNetworkConfigurationOutputWithContext(ctx).OutputState,
	}
}

type NetworkConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfiguration)(nil)).Elem()
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutput() NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToNetworkConfigurationOutputWithContext(ctx context.Context) NetworkConfigurationOutput {
	return o
}

func (o NetworkConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkConfiguration] {
	return pulumix.Output[NetworkConfiguration]{
		OutputState: o.OutputState,
	}
}

// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
func (o NetworkConfigurationOutput) AttachedNetworkConfiguration() AttachedNetworkConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *AttachedNetworkConfiguration { return v.AttachedNetworkConfiguration }).(AttachedNetworkConfigurationPtrOutput)
}

// The configuration of the BGP service load balancer for this Kubernetes cluster.
func (o NetworkConfigurationOutput) BgpServiceLoadBalancerConfiguration() BgpServiceLoadBalancerConfigurationPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *BgpServiceLoadBalancerConfiguration {
		return v.BgpServiceLoadBalancerConfiguration
	}).(BgpServiceLoadBalancerConfigurationPtrOutput)
}

// The resource ID of the associated Cloud Services network.
func (o NetworkConfigurationOutput) CloudServicesNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfiguration) string { return v.CloudServicesNetworkId }).(pulumi.StringOutput)
}

// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
func (o NetworkConfigurationOutput) CniNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfiguration) string { return v.CniNetworkId }).(pulumi.StringOutput)
}

// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.
func (o NetworkConfigurationOutput) DnsServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfiguration) *string { return v.DnsServiceIp }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkConfigurationOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfiguration) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkConfigurationOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfiguration) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type NetworkConfigurationResponse struct {
	// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
	AttachedNetworkConfiguration *AttachedNetworkConfigurationResponse `pulumi:"attachedNetworkConfiguration"`
	// The configuration of the BGP service load balancer for this Kubernetes cluster.
	BgpServiceLoadBalancerConfiguration *BgpServiceLoadBalancerConfigurationResponse `pulumi:"bgpServiceLoadBalancerConfiguration"`
	// The resource ID of the associated Cloud Services network.
	CloudServicesNetworkId string `pulumi:"cloudServicesNetworkId"`
	// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
	CniNetworkId string `pulumi:"cniNetworkId"`
	// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.
	DnsServiceIp *string `pulumi:"dnsServiceIp"`
	// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	PodCidrs []string `pulumi:"podCidrs"`
	// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
	ServiceCidrs []string `pulumi:"serviceCidrs"`
}

// Defaults sets the appropriate defaults for NetworkConfigurationResponse
func (val *NetworkConfigurationResponse) Defaults() *NetworkConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BgpServiceLoadBalancerConfiguration = tmp.BgpServiceLoadBalancerConfiguration.Defaults()

	return &tmp
}

type NetworkConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigurationResponse)(nil)).Elem()
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutput() NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToNetworkConfigurationResponseOutputWithContext(ctx context.Context) NetworkConfigurationResponseOutput {
	return o
}

func (o NetworkConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NetworkConfigurationResponse] {
	return pulumix.Output[NetworkConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.
func (o NetworkConfigurationResponseOutput) AttachedNetworkConfiguration() AttachedNetworkConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *AttachedNetworkConfigurationResponse {
		return v.AttachedNetworkConfiguration
	}).(AttachedNetworkConfigurationResponsePtrOutput)
}

// The configuration of the BGP service load balancer for this Kubernetes cluster.
func (o NetworkConfigurationResponseOutput) BgpServiceLoadBalancerConfiguration() BgpServiceLoadBalancerConfigurationResponsePtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *BgpServiceLoadBalancerConfigurationResponse {
		return v.BgpServiceLoadBalancerConfiguration
	}).(BgpServiceLoadBalancerConfigurationResponsePtrOutput)
}

// The resource ID of the associated Cloud Services network.
func (o NetworkConfigurationResponseOutput) CloudServicesNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) string { return v.CloudServicesNetworkId }).(pulumi.StringOutput)
}

// The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
func (o NetworkConfigurationResponseOutput) CniNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) string { return v.CniNetworkId }).(pulumi.StringOutput)
}

// The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.
func (o NetworkConfigurationResponseOutput) DnsServiceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) *string { return v.DnsServiceIp }).(pulumi.StringPtrOutput)
}

// The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkConfigurationResponseOutput) PodCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) []string { return v.PodCidrs }).(pulumi.StringArrayOutput)
}

// The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
func (o NetworkConfigurationResponseOutput) ServiceCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfigurationResponse) []string { return v.ServiceCidrs }).(pulumi.StringArrayOutput)
}

type NicResponse struct {
	// The information about the device connected to this NIC.
	LldpNeighbor LldpNeighborResponse `pulumi:"lldpNeighbor"`
	// The MAC address associated with this NIC.
	MacAddress string `pulumi:"macAddress"`
	// The name of the NIC/interface.
	Name string `pulumi:"name"`
}

type NicResponseOutput struct{ *pulumi.OutputState }

func (NicResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NicResponse)(nil)).Elem()
}

func (o NicResponseOutput) ToNicResponseOutput() NicResponseOutput {
	return o
}

func (o NicResponseOutput) ToNicResponseOutputWithContext(ctx context.Context) NicResponseOutput {
	return o
}

func (o NicResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NicResponse] {
	return pulumix.Output[NicResponse]{
		OutputState: o.OutputState,
	}
}

// The information about the device connected to this NIC.
func (o NicResponseOutput) LldpNeighbor() LldpNeighborResponseOutput {
	return o.ApplyT(func(v NicResponse) LldpNeighborResponse { return v.LldpNeighbor }).(LldpNeighborResponseOutput)
}

// The MAC address associated with this NIC.
func (o NicResponseOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NicResponse) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The name of the NIC/interface.
func (o NicResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NicResponse) string { return v.Name }).(pulumi.StringOutput)
}

type NicResponseArrayOutput struct{ *pulumi.OutputState }

func (NicResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NicResponse)(nil)).Elem()
}

func (o NicResponseArrayOutput) ToNicResponseArrayOutput() NicResponseArrayOutput {
	return o
}

func (o NicResponseArrayOutput) ToNicResponseArrayOutputWithContext(ctx context.Context) NicResponseArrayOutput {
	return o
}

func (o NicResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NicResponse] {
	return pulumix.Output[[]NicResponse]{
		OutputState: o.OutputState,
	}
}

func (o NicResponseArrayOutput) Index(i pulumi.IntInput) NicResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NicResponse {
		return vs[0].([]NicResponse)[vs[1].(int)]
	}).(NicResponseOutput)
}

type NodeConfigurationResponse struct {
	// The resource ID of the agent pool that contains the nodes in this configuration.
	AgentPoolId string `pulumi:"agentPoolId"`
	// The name of the agent pool that contains the nodes in this configuration.
	AgentPoolName string `pulumi:"agentPoolName"`
	// The number of CPU cores in the virtual machine.
	CpuCores float64 `pulumi:"cpuCores"`
	// The root disk size of the virtual machine in GB.
	DiskSizeGB float64 `pulumi:"diskSizeGB"`
	// The memory size of the virtual machine in GB.
	MemorySizeGB float64 `pulumi:"memorySizeGB"`
	// Field deprecated, use agentPoolName instead. This field will be removed in a future version but will reflect the name of the agent pool that contains the nodes in this configuration.
	NodePoolName string `pulumi:"nodePoolName"`
	// The list of nodes that utilize this configuration.
	Nodes []NodeResponse `pulumi:"nodes"`
	// The number of virtual machines that use this configuration.
	VmCount float64 `pulumi:"vmCount"`
	// The name of the VM size supplied during the creation of the cluster.
	VmSize string `pulumi:"vmSize"`
}

type NodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeConfigurationResponse)(nil)).Elem()
}

func (o NodeConfigurationResponseOutput) ToNodeConfigurationResponseOutput() NodeConfigurationResponseOutput {
	return o
}

func (o NodeConfigurationResponseOutput) ToNodeConfigurationResponseOutputWithContext(ctx context.Context) NodeConfigurationResponseOutput {
	return o
}

func (o NodeConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeConfigurationResponse] {
	return pulumix.Output[NodeConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the agent pool that contains the nodes in this configuration.
func (o NodeConfigurationResponseOutput) AgentPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigurationResponse) string { return v.AgentPoolId }).(pulumi.StringOutput)
}

// The name of the agent pool that contains the nodes in this configuration.
func (o NodeConfigurationResponseOutput) AgentPoolName() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigurationResponse) string { return v.AgentPoolName }).(pulumi.StringOutput)
}

// The number of CPU cores in the virtual machine.
func (o NodeConfigurationResponseOutput) CpuCores() pulumi.Float64Output {
	return o.ApplyT(func(v NodeConfigurationResponse) float64 { return v.CpuCores }).(pulumi.Float64Output)
}

// The root disk size of the virtual machine in GB.
func (o NodeConfigurationResponseOutput) DiskSizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v NodeConfigurationResponse) float64 { return v.DiskSizeGB }).(pulumi.Float64Output)
}

// The memory size of the virtual machine in GB.
func (o NodeConfigurationResponseOutput) MemorySizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v NodeConfigurationResponse) float64 { return v.MemorySizeGB }).(pulumi.Float64Output)
}

// Field deprecated, use agentPoolName instead. This field will be removed in a future version but will reflect the name of the agent pool that contains the nodes in this configuration.
func (o NodeConfigurationResponseOutput) NodePoolName() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigurationResponse) string { return v.NodePoolName }).(pulumi.StringOutput)
}

// The list of nodes that utilize this configuration.
func (o NodeConfigurationResponseOutput) Nodes() NodeResponseArrayOutput {
	return o.ApplyT(func(v NodeConfigurationResponse) []NodeResponse { return v.Nodes }).(NodeResponseArrayOutput)
}

// The number of virtual machines that use this configuration.
func (o NodeConfigurationResponseOutput) VmCount() pulumi.Float64Output {
	return o.ApplyT(func(v NodeConfigurationResponse) float64 { return v.VmCount }).(pulumi.Float64Output)
}

// The name of the VM size supplied during the creation of the cluster.
func (o NodeConfigurationResponseOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v NodeConfigurationResponse) string { return v.VmSize }).(pulumi.StringOutput)
}

type NodeConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeConfigurationResponse)(nil)).Elem()
}

func (o NodeConfigurationResponseArrayOutput) ToNodeConfigurationResponseArrayOutput() NodeConfigurationResponseArrayOutput {
	return o
}

func (o NodeConfigurationResponseArrayOutput) ToNodeConfigurationResponseArrayOutputWithContext(ctx context.Context) NodeConfigurationResponseArrayOutput {
	return o
}

func (o NodeConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NodeConfigurationResponse] {
	return pulumix.Output[[]NodeConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o NodeConfigurationResponseArrayOutput) Index(i pulumi.IntInput) NodeConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeConfigurationResponse {
		return vs[0].([]NodeConfigurationResponse)[vs[1].(int)]
	}).(NodeConfigurationResponseOutput)
}

type NodeResponse struct {
	// The resource ID of the bare metal machine that hosts this node.
	BareMetalMachineId string `pulumi:"bareMetalMachineId"`
	// The machine image last used to deploy this node.
	ImageId string `pulumi:"imageId"`
	// The list of network attachments to the virtual machine.
	NetworkAttachments []NetworkAttachmentResponse `pulumi:"networkAttachments"`
	// The name of this node, as realized in the Hybrid AKS cluster.
	NodeName string `pulumi:"nodeName"`
	// The power state (On | Off) of the node.
	PowerState string `pulumi:"powerState"`
}

type NodeResponseOutput struct{ *pulumi.OutputState }

func (NodeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeResponse)(nil)).Elem()
}

func (o NodeResponseOutput) ToNodeResponseOutput() NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToNodeResponseOutputWithContext(ctx context.Context) NodeResponseOutput {
	return o
}

func (o NodeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeResponse] {
	return pulumix.Output[NodeResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the bare metal machine that hosts this node.
func (o NodeResponseOutput) BareMetalMachineId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.BareMetalMachineId }).(pulumi.StringOutput)
}

// The machine image last used to deploy this node.
func (o NodeResponseOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.ImageId }).(pulumi.StringOutput)
}

// The list of network attachments to the virtual machine.
func (o NodeResponseOutput) NetworkAttachments() NetworkAttachmentResponseArrayOutput {
	return o.ApplyT(func(v NodeResponse) []NetworkAttachmentResponse { return v.NetworkAttachments }).(NetworkAttachmentResponseArrayOutput)
}

// The name of this node, as realized in the Hybrid AKS cluster.
func (o NodeResponseOutput) NodeName() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.NodeName }).(pulumi.StringOutput)
}

// The power state (On | Off) of the node.
func (o NodeResponseOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v NodeResponse) string { return v.PowerState }).(pulumi.StringOutput)
}

type NodeResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeResponse)(nil)).Elem()
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutput() NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToNodeResponseArrayOutputWithContext(ctx context.Context) NodeResponseArrayOutput {
	return o
}

func (o NodeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NodeResponse] {
	return pulumix.Output[[]NodeResponse]{
		OutputState: o.OutputState,
	}
}

func (o NodeResponseArrayOutput) Index(i pulumi.IntInput) NodeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeResponse {
		return vs[0].([]NodeResponse)[vs[1].(int)]
	}).(NodeResponseOutput)
}

type OsDisk struct {
	// The strategy for creating the OS disk.
	CreateOption *string `pulumi:"createOption"`
	// The strategy for deleting the OS disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// The size of the disk in gigabytes. Required if the createOption is Ephemeral.
	DiskSizeGB float64 `pulumi:"diskSizeGB"`
}

// Defaults sets the appropriate defaults for OsDisk
func (val *OsDisk) Defaults() *OsDisk {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CreateOption == nil {
		createOption_ := "Ephemeral"
		tmp.CreateOption = &createOption_
	}
	if tmp.DeleteOption == nil {
		deleteOption_ := "Delete"
		tmp.DeleteOption = &deleteOption_
	}
	return &tmp
}

// OsDiskInput is an input type that accepts OsDiskArgs and OsDiskOutput values.
// You can construct a concrete instance of `OsDiskInput` via:
//
//	OsDiskArgs{...}
type OsDiskInput interface {
	pulumi.Input

	ToOsDiskOutput() OsDiskOutput
	ToOsDiskOutputWithContext(context.Context) OsDiskOutput
}

type OsDiskArgs struct {
	// The strategy for creating the OS disk.
	CreateOption pulumi.StringPtrInput `pulumi:"createOption"`
	// The strategy for deleting the OS disk.
	DeleteOption pulumi.StringPtrInput `pulumi:"deleteOption"`
	// The size of the disk in gigabytes. Required if the createOption is Ephemeral.
	DiskSizeGB pulumi.Float64Input `pulumi:"diskSizeGB"`
}

// Defaults sets the appropriate defaults for OsDiskArgs
func (val *OsDiskArgs) Defaults() *OsDiskArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CreateOption == nil {
		tmp.CreateOption = pulumi.StringPtr("Ephemeral")
	}
	if tmp.DeleteOption == nil {
		tmp.DeleteOption = pulumi.StringPtr("Delete")
	}
	return &tmp
}
func (OsDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OsDisk)(nil)).Elem()
}

func (i OsDiskArgs) ToOsDiskOutput() OsDiskOutput {
	return i.ToOsDiskOutputWithContext(context.Background())
}

func (i OsDiskArgs) ToOsDiskOutputWithContext(ctx context.Context) OsDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsDiskOutput)
}

func (i OsDiskArgs) ToOutput(ctx context.Context) pulumix.Output[OsDisk] {
	return pulumix.Output[OsDisk]{
		OutputState: i.ToOsDiskOutputWithContext(ctx).OutputState,
	}
}

type OsDiskOutput struct{ *pulumi.OutputState }

func (OsDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsDisk)(nil)).Elem()
}

func (o OsDiskOutput) ToOsDiskOutput() OsDiskOutput {
	return o
}

func (o OsDiskOutput) ToOsDiskOutputWithContext(ctx context.Context) OsDiskOutput {
	return o
}

func (o OsDiskOutput) ToOutput(ctx context.Context) pulumix.Output[OsDisk] {
	return pulumix.Output[OsDisk]{
		OutputState: o.OutputState,
	}
}

// The strategy for creating the OS disk.
func (o OsDiskOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsDisk) *string { return v.CreateOption }).(pulumi.StringPtrOutput)
}

// The strategy for deleting the OS disk.
func (o OsDiskOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsDisk) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The size of the disk in gigabytes. Required if the createOption is Ephemeral.
func (o OsDiskOutput) DiskSizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v OsDisk) float64 { return v.DiskSizeGB }).(pulumi.Float64Output)
}

type OsDiskResponse struct {
	// The strategy for creating the OS disk.
	CreateOption *string `pulumi:"createOption"`
	// The strategy for deleting the OS disk.
	DeleteOption *string `pulumi:"deleteOption"`
	// The size of the disk in gigabytes. Required if the createOption is Ephemeral.
	DiskSizeGB float64 `pulumi:"diskSizeGB"`
}

// Defaults sets the appropriate defaults for OsDiskResponse
func (val *OsDiskResponse) Defaults() *OsDiskResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.CreateOption == nil {
		createOption_ := "Ephemeral"
		tmp.CreateOption = &createOption_
	}
	if tmp.DeleteOption == nil {
		deleteOption_ := "Delete"
		tmp.DeleteOption = &deleteOption_
	}
	return &tmp
}

type OsDiskResponseOutput struct{ *pulumi.OutputState }

func (OsDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsDiskResponse)(nil)).Elem()
}

func (o OsDiskResponseOutput) ToOsDiskResponseOutput() OsDiskResponseOutput {
	return o
}

func (o OsDiskResponseOutput) ToOsDiskResponseOutputWithContext(ctx context.Context) OsDiskResponseOutput {
	return o
}

func (o OsDiskResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OsDiskResponse] {
	return pulumix.Output[OsDiskResponse]{
		OutputState: o.OutputState,
	}
}

// The strategy for creating the OS disk.
func (o OsDiskResponseOutput) CreateOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsDiskResponse) *string { return v.CreateOption }).(pulumi.StringPtrOutput)
}

// The strategy for deleting the OS disk.
func (o OsDiskResponseOutput) DeleteOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsDiskResponse) *string { return v.DeleteOption }).(pulumi.StringPtrOutput)
}

// The size of the disk in gigabytes. Required if the createOption is Ephemeral.
func (o OsDiskResponseOutput) DiskSizeGB() pulumi.Float64Output {
	return o.ApplyT(func(v OsDiskResponse) float64 { return v.DiskSizeGB }).(pulumi.Float64Output)
}

type RackDefinition struct {
	// The zone name used for this rack when created. Availability zones are used for workload placement.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The unordered list of bare metal machine configuration.
	BareMetalMachineConfigurationData []BareMetalMachineConfigurationData `pulumi:"bareMetalMachineConfigurationData"`
	// The resource ID of the network rack that matches this rack definition.
	NetworkRackId string `pulumi:"networkRackId"`
	// The free-form description of the rack's location.
	RackLocation *string `pulumi:"rackLocation"`
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber string `pulumi:"rackSerialNumber"`
	// The resource ID of the sku for the rack being added.
	RackSkuId string `pulumi:"rackSkuId"`
	// The list of storage appliance configuration data for this rack.
	StorageApplianceConfigurationData []StorageApplianceConfigurationData `pulumi:"storageApplianceConfigurationData"`
}

// RackDefinitionInput is an input type that accepts RackDefinitionArgs and RackDefinitionOutput values.
// You can construct a concrete instance of `RackDefinitionInput` via:
//
//	RackDefinitionArgs{...}
type RackDefinitionInput interface {
	pulumi.Input

	ToRackDefinitionOutput() RackDefinitionOutput
	ToRackDefinitionOutputWithContext(context.Context) RackDefinitionOutput
}

type RackDefinitionArgs struct {
	// The zone name used for this rack when created. Availability zones are used for workload placement.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The unordered list of bare metal machine configuration.
	BareMetalMachineConfigurationData BareMetalMachineConfigurationDataArrayInput `pulumi:"bareMetalMachineConfigurationData"`
	// The resource ID of the network rack that matches this rack definition.
	NetworkRackId pulumi.StringInput `pulumi:"networkRackId"`
	// The free-form description of the rack's location.
	RackLocation pulumi.StringPtrInput `pulumi:"rackLocation"`
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber pulumi.StringInput `pulumi:"rackSerialNumber"`
	// The resource ID of the sku for the rack being added.
	RackSkuId pulumi.StringInput `pulumi:"rackSkuId"`
	// The list of storage appliance configuration data for this rack.
	StorageApplianceConfigurationData StorageApplianceConfigurationDataArrayInput `pulumi:"storageApplianceConfigurationData"`
}

func (RackDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RackDefinition)(nil)).Elem()
}

func (i RackDefinitionArgs) ToRackDefinitionOutput() RackDefinitionOutput {
	return i.ToRackDefinitionOutputWithContext(context.Background())
}

func (i RackDefinitionArgs) ToRackDefinitionOutputWithContext(ctx context.Context) RackDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RackDefinitionOutput)
}

func (i RackDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[RackDefinition] {
	return pulumix.Output[RackDefinition]{
		OutputState: i.ToRackDefinitionOutputWithContext(ctx).OutputState,
	}
}

// RackDefinitionArrayInput is an input type that accepts RackDefinitionArray and RackDefinitionArrayOutput values.
// You can construct a concrete instance of `RackDefinitionArrayInput` via:
//
//	RackDefinitionArray{ RackDefinitionArgs{...} }
type RackDefinitionArrayInput interface {
	pulumi.Input

	ToRackDefinitionArrayOutput() RackDefinitionArrayOutput
	ToRackDefinitionArrayOutputWithContext(context.Context) RackDefinitionArrayOutput
}

type RackDefinitionArray []RackDefinitionInput

func (RackDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RackDefinition)(nil)).Elem()
}

func (i RackDefinitionArray) ToRackDefinitionArrayOutput() RackDefinitionArrayOutput {
	return i.ToRackDefinitionArrayOutputWithContext(context.Background())
}

func (i RackDefinitionArray) ToRackDefinitionArrayOutputWithContext(ctx context.Context) RackDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RackDefinitionArrayOutput)
}

func (i RackDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]RackDefinition] {
	return pulumix.Output[[]RackDefinition]{
		OutputState: i.ToRackDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

type RackDefinitionOutput struct{ *pulumi.OutputState }

func (RackDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RackDefinition)(nil)).Elem()
}

func (o RackDefinitionOutput) ToRackDefinitionOutput() RackDefinitionOutput {
	return o
}

func (o RackDefinitionOutput) ToRackDefinitionOutputWithContext(ctx context.Context) RackDefinitionOutput {
	return o
}

func (o RackDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[RackDefinition] {
	return pulumix.Output[RackDefinition]{
		OutputState: o.OutputState,
	}
}

// The zone name used for this rack when created. Availability zones are used for workload placement.
func (o RackDefinitionOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RackDefinition) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The unordered list of bare metal machine configuration.
func (o RackDefinitionOutput) BareMetalMachineConfigurationData() BareMetalMachineConfigurationDataArrayOutput {
	return o.ApplyT(func(v RackDefinition) []BareMetalMachineConfigurationData { return v.BareMetalMachineConfigurationData }).(BareMetalMachineConfigurationDataArrayOutput)
}

// The resource ID of the network rack that matches this rack definition.
func (o RackDefinitionOutput) NetworkRackId() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinition) string { return v.NetworkRackId }).(pulumi.StringOutput)
}

// The free-form description of the rack's location.
func (o RackDefinitionOutput) RackLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RackDefinition) *string { return v.RackLocation }).(pulumi.StringPtrOutput)
}

// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
func (o RackDefinitionOutput) RackSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinition) string { return v.RackSerialNumber }).(pulumi.StringOutput)
}

// The resource ID of the sku for the rack being added.
func (o RackDefinitionOutput) RackSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinition) string { return v.RackSkuId }).(pulumi.StringOutput)
}

// The list of storage appliance configuration data for this rack.
func (o RackDefinitionOutput) StorageApplianceConfigurationData() StorageApplianceConfigurationDataArrayOutput {
	return o.ApplyT(func(v RackDefinition) []StorageApplianceConfigurationData { return v.StorageApplianceConfigurationData }).(StorageApplianceConfigurationDataArrayOutput)
}

type RackDefinitionArrayOutput struct{ *pulumi.OutputState }

func (RackDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RackDefinition)(nil)).Elem()
}

func (o RackDefinitionArrayOutput) ToRackDefinitionArrayOutput() RackDefinitionArrayOutput {
	return o
}

func (o RackDefinitionArrayOutput) ToRackDefinitionArrayOutputWithContext(ctx context.Context) RackDefinitionArrayOutput {
	return o
}

func (o RackDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RackDefinition] {
	return pulumix.Output[[]RackDefinition]{
		OutputState: o.OutputState,
	}
}

func (o RackDefinitionArrayOutput) Index(i pulumi.IntInput) RackDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RackDefinition {
		return vs[0].([]RackDefinition)[vs[1].(int)]
	}).(RackDefinitionOutput)
}

type RackDefinitionResponse struct {
	// The zone name used for this rack when created. Availability zones are used for workload placement.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The unordered list of bare metal machine configuration.
	BareMetalMachineConfigurationData []BareMetalMachineConfigurationDataResponse `pulumi:"bareMetalMachineConfigurationData"`
	// The resource ID of the network rack that matches this rack definition.
	NetworkRackId string `pulumi:"networkRackId"`
	// The free-form description of the rack's location.
	RackLocation *string `pulumi:"rackLocation"`
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber string `pulumi:"rackSerialNumber"`
	// The resource ID of the sku for the rack being added.
	RackSkuId string `pulumi:"rackSkuId"`
	// The list of storage appliance configuration data for this rack.
	StorageApplianceConfigurationData []StorageApplianceConfigurationDataResponse `pulumi:"storageApplianceConfigurationData"`
}

type RackDefinitionResponseOutput struct{ *pulumi.OutputState }

func (RackDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RackDefinitionResponse)(nil)).Elem()
}

func (o RackDefinitionResponseOutput) ToRackDefinitionResponseOutput() RackDefinitionResponseOutput {
	return o
}

func (o RackDefinitionResponseOutput) ToRackDefinitionResponseOutputWithContext(ctx context.Context) RackDefinitionResponseOutput {
	return o
}

func (o RackDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RackDefinitionResponse] {
	return pulumix.Output[RackDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The zone name used for this rack when created. Availability zones are used for workload placement.
func (o RackDefinitionResponseOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RackDefinitionResponse) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The unordered list of bare metal machine configuration.
func (o RackDefinitionResponseOutput) BareMetalMachineConfigurationData() BareMetalMachineConfigurationDataResponseArrayOutput {
	return o.ApplyT(func(v RackDefinitionResponse) []BareMetalMachineConfigurationDataResponse {
		return v.BareMetalMachineConfigurationData
	}).(BareMetalMachineConfigurationDataResponseArrayOutput)
}

// The resource ID of the network rack that matches this rack definition.
func (o RackDefinitionResponseOutput) NetworkRackId() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinitionResponse) string { return v.NetworkRackId }).(pulumi.StringOutput)
}

// The free-form description of the rack's location.
func (o RackDefinitionResponseOutput) RackLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RackDefinitionResponse) *string { return v.RackLocation }).(pulumi.StringPtrOutput)
}

// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
func (o RackDefinitionResponseOutput) RackSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinitionResponse) string { return v.RackSerialNumber }).(pulumi.StringOutput)
}

// The resource ID of the sku for the rack being added.
func (o RackDefinitionResponseOutput) RackSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v RackDefinitionResponse) string { return v.RackSkuId }).(pulumi.StringOutput)
}

// The list of storage appliance configuration data for this rack.
func (o RackDefinitionResponseOutput) StorageApplianceConfigurationData() StorageApplianceConfigurationDataResponseArrayOutput {
	return o.ApplyT(func(v RackDefinitionResponse) []StorageApplianceConfigurationDataResponse {
		return v.StorageApplianceConfigurationData
	}).(StorageApplianceConfigurationDataResponseArrayOutput)
}

type RackDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (RackDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RackDefinitionResponse)(nil)).Elem()
}

func (o RackDefinitionResponseArrayOutput) ToRackDefinitionResponseArrayOutput() RackDefinitionResponseArrayOutput {
	return o
}

func (o RackDefinitionResponseArrayOutput) ToRackDefinitionResponseArrayOutputWithContext(ctx context.Context) RackDefinitionResponseArrayOutput {
	return o
}

func (o RackDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RackDefinitionResponse] {
	return pulumix.Output[[]RackDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o RackDefinitionResponseArrayOutput) Index(i pulumi.IntInput) RackDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RackDefinitionResponse {
		return vs[0].([]RackDefinitionResponse)[vs[1].(int)]
	}).(RackDefinitionResponseOutput)
}

type ServiceLoadBalancerBgpPeer struct {
	// The indicator of BFD enablement for this BgpPeer.
	BfdEnabled *string `pulumi:"bfdEnabled"`
	// The indicator to enable multi-hop peering support.
	BgpMultiHop *string `pulumi:"bgpMultiHop"`
	// The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
	HoldTime *string `pulumi:"holdTime"`
	// The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
	KeepAliveTime *string `pulumi:"keepAliveTime"`
	// The autonomous system number used for the local end of the BGP session.
	MyAsn *float64 `pulumi:"myAsn"`
	// The name used to identify this BGP peer for association with a BGP advertisement.
	Name string `pulumi:"name"`
	// The authentication password for routers enforcing TCP MD5 authenticated sessions.
	Password *string `pulumi:"password"`
	// The IPv4 or IPv6 address used to connect this BGP session.
	PeerAddress string `pulumi:"peerAddress"`
	// The autonomous system number expected from the remote end of the BGP session.
	PeerAsn float64 `pulumi:"peerAsn"`
	// The port used to connect this BGP session.
	PeerPort *float64 `pulumi:"peerPort"`
}

// Defaults sets the appropriate defaults for ServiceLoadBalancerBgpPeer
func (val *ServiceLoadBalancerBgpPeer) Defaults() *ServiceLoadBalancerBgpPeer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BfdEnabled == nil {
		bfdEnabled_ := "False"
		tmp.BfdEnabled = &bfdEnabled_
	}
	if tmp.BgpMultiHop == nil {
		bgpMultiHop_ := "False"
		tmp.BgpMultiHop = &bgpMultiHop_
	}
	if tmp.PeerPort == nil {
		peerPort_ := 179.0
		tmp.PeerPort = &peerPort_
	}
	return &tmp
}

// ServiceLoadBalancerBgpPeerInput is an input type that accepts ServiceLoadBalancerBgpPeerArgs and ServiceLoadBalancerBgpPeerOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerBgpPeerInput` via:
//
//	ServiceLoadBalancerBgpPeerArgs{...}
type ServiceLoadBalancerBgpPeerInput interface {
	pulumi.Input

	ToServiceLoadBalancerBgpPeerOutput() ServiceLoadBalancerBgpPeerOutput
	ToServiceLoadBalancerBgpPeerOutputWithContext(context.Context) ServiceLoadBalancerBgpPeerOutput
}

type ServiceLoadBalancerBgpPeerArgs struct {
	// The indicator of BFD enablement for this BgpPeer.
	BfdEnabled pulumi.StringPtrInput `pulumi:"bfdEnabled"`
	// The indicator to enable multi-hop peering support.
	BgpMultiHop pulumi.StringPtrInput `pulumi:"bgpMultiHop"`
	// The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
	HoldTime pulumi.StringPtrInput `pulumi:"holdTime"`
	// The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
	KeepAliveTime pulumi.StringPtrInput `pulumi:"keepAliveTime"`
	// The autonomous system number used for the local end of the BGP session.
	MyAsn pulumi.Float64PtrInput `pulumi:"myAsn"`
	// The name used to identify this BGP peer for association with a BGP advertisement.
	Name pulumi.StringInput `pulumi:"name"`
	// The authentication password for routers enforcing TCP MD5 authenticated sessions.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The IPv4 or IPv6 address used to connect this BGP session.
	PeerAddress pulumi.StringInput `pulumi:"peerAddress"`
	// The autonomous system number expected from the remote end of the BGP session.
	PeerAsn pulumi.Float64Input `pulumi:"peerAsn"`
	// The port used to connect this BGP session.
	PeerPort pulumi.Float64PtrInput `pulumi:"peerPort"`
}

// Defaults sets the appropriate defaults for ServiceLoadBalancerBgpPeerArgs
func (val *ServiceLoadBalancerBgpPeerArgs) Defaults() *ServiceLoadBalancerBgpPeerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BfdEnabled == nil {
		tmp.BfdEnabled = pulumi.StringPtr("False")
	}
	if tmp.BgpMultiHop == nil {
		tmp.BgpMultiHop = pulumi.StringPtr("False")
	}
	if tmp.PeerPort == nil {
		tmp.PeerPort = pulumi.Float64Ptr(179.0)
	}
	return &tmp
}
func (ServiceLoadBalancerBgpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancerBgpPeer)(nil)).Elem()
}

func (i ServiceLoadBalancerBgpPeerArgs) ToServiceLoadBalancerBgpPeerOutput() ServiceLoadBalancerBgpPeerOutput {
	return i.ToServiceLoadBalancerBgpPeerOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerBgpPeerArgs) ToServiceLoadBalancerBgpPeerOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerBgpPeerOutput)
}

func (i ServiceLoadBalancerBgpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceLoadBalancerBgpPeer] {
	return pulumix.Output[ServiceLoadBalancerBgpPeer]{
		OutputState: i.ToServiceLoadBalancerBgpPeerOutputWithContext(ctx).OutputState,
	}
}

// ServiceLoadBalancerBgpPeerArrayInput is an input type that accepts ServiceLoadBalancerBgpPeerArray and ServiceLoadBalancerBgpPeerArrayOutput values.
// You can construct a concrete instance of `ServiceLoadBalancerBgpPeerArrayInput` via:
//
//	ServiceLoadBalancerBgpPeerArray{ ServiceLoadBalancerBgpPeerArgs{...} }
type ServiceLoadBalancerBgpPeerArrayInput interface {
	pulumi.Input

	ToServiceLoadBalancerBgpPeerArrayOutput() ServiceLoadBalancerBgpPeerArrayOutput
	ToServiceLoadBalancerBgpPeerArrayOutputWithContext(context.Context) ServiceLoadBalancerBgpPeerArrayOutput
}

type ServiceLoadBalancerBgpPeerArray []ServiceLoadBalancerBgpPeerInput

func (ServiceLoadBalancerBgpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancerBgpPeer)(nil)).Elem()
}

func (i ServiceLoadBalancerBgpPeerArray) ToServiceLoadBalancerBgpPeerArrayOutput() ServiceLoadBalancerBgpPeerArrayOutput {
	return i.ToServiceLoadBalancerBgpPeerArrayOutputWithContext(context.Background())
}

func (i ServiceLoadBalancerBgpPeerArray) ToServiceLoadBalancerBgpPeerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceLoadBalancerBgpPeerArrayOutput)
}

func (i ServiceLoadBalancerBgpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceLoadBalancerBgpPeer] {
	return pulumix.Output[[]ServiceLoadBalancerBgpPeer]{
		OutputState: i.ToServiceLoadBalancerBgpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceLoadBalancerBgpPeerOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerBgpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancerBgpPeer)(nil)).Elem()
}

func (o ServiceLoadBalancerBgpPeerOutput) ToServiceLoadBalancerBgpPeerOutput() ServiceLoadBalancerBgpPeerOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerOutput) ToServiceLoadBalancerBgpPeerOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceLoadBalancerBgpPeer] {
	return pulumix.Output[ServiceLoadBalancerBgpPeer]{
		OutputState: o.OutputState,
	}
}

// The indicator of BFD enablement for this BgpPeer.
func (o ServiceLoadBalancerBgpPeerOutput) BfdEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *string { return v.BfdEnabled }).(pulumi.StringPtrOutput)
}

// The indicator to enable multi-hop peering support.
func (o ServiceLoadBalancerBgpPeerOutput) BgpMultiHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *string { return v.BgpMultiHop }).(pulumi.StringPtrOutput)
}

// The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
func (o ServiceLoadBalancerBgpPeerOutput) HoldTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *string { return v.HoldTime }).(pulumi.StringPtrOutput)
}

// The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
func (o ServiceLoadBalancerBgpPeerOutput) KeepAliveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *string { return v.KeepAliveTime }).(pulumi.StringPtrOutput)
}

// The autonomous system number used for the local end of the BGP session.
func (o ServiceLoadBalancerBgpPeerOutput) MyAsn() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *float64 { return v.MyAsn }).(pulumi.Float64PtrOutput)
}

// The name used to identify this BGP peer for association with a BGP advertisement.
func (o ServiceLoadBalancerBgpPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) string { return v.Name }).(pulumi.StringOutput)
}

// The authentication password for routers enforcing TCP MD5 authenticated sessions.
func (o ServiceLoadBalancerBgpPeerOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The IPv4 or IPv6 address used to connect this BGP session.
func (o ServiceLoadBalancerBgpPeerOutput) PeerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) string { return v.PeerAddress }).(pulumi.StringOutput)
}

// The autonomous system number expected from the remote end of the BGP session.
func (o ServiceLoadBalancerBgpPeerOutput) PeerAsn() pulumi.Float64Output {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) float64 { return v.PeerAsn }).(pulumi.Float64Output)
}

// The port used to connect this BGP session.
func (o ServiceLoadBalancerBgpPeerOutput) PeerPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeer) *float64 { return v.PeerPort }).(pulumi.Float64PtrOutput)
}

type ServiceLoadBalancerBgpPeerArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerBgpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancerBgpPeer)(nil)).Elem()
}

func (o ServiceLoadBalancerBgpPeerArrayOutput) ToServiceLoadBalancerBgpPeerArrayOutput() ServiceLoadBalancerBgpPeerArrayOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerArrayOutput) ToServiceLoadBalancerBgpPeerArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerArrayOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceLoadBalancerBgpPeer] {
	return pulumix.Output[[]ServiceLoadBalancerBgpPeer]{
		OutputState: o.OutputState,
	}
}

func (o ServiceLoadBalancerBgpPeerArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancerBgpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadBalancerBgpPeer {
		return vs[0].([]ServiceLoadBalancerBgpPeer)[vs[1].(int)]
	}).(ServiceLoadBalancerBgpPeerOutput)
}

type ServiceLoadBalancerBgpPeerResponse struct {
	// The indicator of BFD enablement for this BgpPeer.
	BfdEnabled *string `pulumi:"bfdEnabled"`
	// The indicator to enable multi-hop peering support.
	BgpMultiHop *string `pulumi:"bgpMultiHop"`
	// The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
	HoldTime *string `pulumi:"holdTime"`
	// The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
	KeepAliveTime *string `pulumi:"keepAliveTime"`
	// The autonomous system number used for the local end of the BGP session.
	MyAsn *float64 `pulumi:"myAsn"`
	// The name used to identify this BGP peer for association with a BGP advertisement.
	Name string `pulumi:"name"`
	// The IPv4 or IPv6 address used to connect this BGP session.
	PeerAddress string `pulumi:"peerAddress"`
	// The autonomous system number expected from the remote end of the BGP session.
	PeerAsn float64 `pulumi:"peerAsn"`
	// The port used to connect this BGP session.
	PeerPort *float64 `pulumi:"peerPort"`
}

// Defaults sets the appropriate defaults for ServiceLoadBalancerBgpPeerResponse
func (val *ServiceLoadBalancerBgpPeerResponse) Defaults() *ServiceLoadBalancerBgpPeerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BfdEnabled == nil {
		bfdEnabled_ := "False"
		tmp.BfdEnabled = &bfdEnabled_
	}
	if tmp.BgpMultiHop == nil {
		bgpMultiHop_ := "False"
		tmp.BgpMultiHop = &bgpMultiHop_
	}
	if tmp.PeerPort == nil {
		peerPort_ := 179.0
		tmp.PeerPort = &peerPort_
	}
	return &tmp
}

type ServiceLoadBalancerBgpPeerResponseOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerBgpPeerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceLoadBalancerBgpPeerResponse)(nil)).Elem()
}

func (o ServiceLoadBalancerBgpPeerResponseOutput) ToServiceLoadBalancerBgpPeerResponseOutput() ServiceLoadBalancerBgpPeerResponseOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerResponseOutput) ToServiceLoadBalancerBgpPeerResponseOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerResponseOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceLoadBalancerBgpPeerResponse] {
	return pulumix.Output[ServiceLoadBalancerBgpPeerResponse]{
		OutputState: o.OutputState,
	}
}

// The indicator of BFD enablement for this BgpPeer.
func (o ServiceLoadBalancerBgpPeerResponseOutput) BfdEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *string { return v.BfdEnabled }).(pulumi.StringPtrOutput)
}

// The indicator to enable multi-hop peering support.
func (o ServiceLoadBalancerBgpPeerResponseOutput) BgpMultiHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *string { return v.BgpMultiHop }).(pulumi.StringPtrOutput)
}

// The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
func (o ServiceLoadBalancerBgpPeerResponseOutput) HoldTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *string { return v.HoldTime }).(pulumi.StringPtrOutput)
}

// The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
func (o ServiceLoadBalancerBgpPeerResponseOutput) KeepAliveTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *string { return v.KeepAliveTime }).(pulumi.StringPtrOutput)
}

// The autonomous system number used for the local end of the BGP session.
func (o ServiceLoadBalancerBgpPeerResponseOutput) MyAsn() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *float64 { return v.MyAsn }).(pulumi.Float64PtrOutput)
}

// The name used to identify this BGP peer for association with a BGP advertisement.
func (o ServiceLoadBalancerBgpPeerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The IPv4 or IPv6 address used to connect this BGP session.
func (o ServiceLoadBalancerBgpPeerResponseOutput) PeerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) string { return v.PeerAddress }).(pulumi.StringOutput)
}

// The autonomous system number expected from the remote end of the BGP session.
func (o ServiceLoadBalancerBgpPeerResponseOutput) PeerAsn() pulumi.Float64Output {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) float64 { return v.PeerAsn }).(pulumi.Float64Output)
}

// The port used to connect this BGP session.
func (o ServiceLoadBalancerBgpPeerResponseOutput) PeerPort() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ServiceLoadBalancerBgpPeerResponse) *float64 { return v.PeerPort }).(pulumi.Float64PtrOutput)
}

type ServiceLoadBalancerBgpPeerResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceLoadBalancerBgpPeerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceLoadBalancerBgpPeerResponse)(nil)).Elem()
}

func (o ServiceLoadBalancerBgpPeerResponseArrayOutput) ToServiceLoadBalancerBgpPeerResponseArrayOutput() ServiceLoadBalancerBgpPeerResponseArrayOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerResponseArrayOutput) ToServiceLoadBalancerBgpPeerResponseArrayOutputWithContext(ctx context.Context) ServiceLoadBalancerBgpPeerResponseArrayOutput {
	return o
}

func (o ServiceLoadBalancerBgpPeerResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceLoadBalancerBgpPeerResponse] {
	return pulumix.Output[[]ServiceLoadBalancerBgpPeerResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServiceLoadBalancerBgpPeerResponseArrayOutput) Index(i pulumi.IntInput) ServiceLoadBalancerBgpPeerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceLoadBalancerBgpPeerResponse {
		return vs[0].([]ServiceLoadBalancerBgpPeerResponse)[vs[1].(int)]
	}).(ServiceLoadBalancerBgpPeerResponseOutput)
}

type ServicePrincipalInformation struct {
	// The application ID, also known as client ID, of the service principal.
	ApplicationId string `pulumi:"applicationId"`
	// The password of the service principal.
	Password string `pulumi:"password"`
	// The principal ID, also known as the object ID, of the service principal.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
	TenantId string `pulumi:"tenantId"`
}

// ServicePrincipalInformationInput is an input type that accepts ServicePrincipalInformationArgs and ServicePrincipalInformationOutput values.
// You can construct a concrete instance of `ServicePrincipalInformationInput` via:
//
//	ServicePrincipalInformationArgs{...}
type ServicePrincipalInformationInput interface {
	pulumi.Input

	ToServicePrincipalInformationOutput() ServicePrincipalInformationOutput
	ToServicePrincipalInformationOutputWithContext(context.Context) ServicePrincipalInformationOutput
}

type ServicePrincipalInformationArgs struct {
	// The application ID, also known as client ID, of the service principal.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// The password of the service principal.
	Password pulumi.StringInput `pulumi:"password"`
	// The principal ID, also known as the object ID, of the service principal.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
	// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ServicePrincipalInformationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalInformation)(nil)).Elem()
}

func (i ServicePrincipalInformationArgs) ToServicePrincipalInformationOutput() ServicePrincipalInformationOutput {
	return i.ToServicePrincipalInformationOutputWithContext(context.Background())
}

func (i ServicePrincipalInformationArgs) ToServicePrincipalInformationOutputWithContext(ctx context.Context) ServicePrincipalInformationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalInformationOutput)
}

func (i ServicePrincipalInformationArgs) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalInformation] {
	return pulumix.Output[ServicePrincipalInformation]{
		OutputState: i.ToServicePrincipalInformationOutputWithContext(ctx).OutputState,
	}
}

func (i ServicePrincipalInformationArgs) ToServicePrincipalInformationPtrOutput() ServicePrincipalInformationPtrOutput {
	return i.ToServicePrincipalInformationPtrOutputWithContext(context.Background())
}

func (i ServicePrincipalInformationArgs) ToServicePrincipalInformationPtrOutputWithContext(ctx context.Context) ServicePrincipalInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalInformationOutput).ToServicePrincipalInformationPtrOutputWithContext(ctx)
}

// ServicePrincipalInformationPtrInput is an input type that accepts ServicePrincipalInformationArgs, ServicePrincipalInformationPtr and ServicePrincipalInformationPtrOutput values.
// You can construct a concrete instance of `ServicePrincipalInformationPtrInput` via:
//
//	        ServicePrincipalInformationArgs{...}
//
//	or:
//
//	        nil
type ServicePrincipalInformationPtrInput interface {
	pulumi.Input

	ToServicePrincipalInformationPtrOutput() ServicePrincipalInformationPtrOutput
	ToServicePrincipalInformationPtrOutputWithContext(context.Context) ServicePrincipalInformationPtrOutput
}

type servicePrincipalInformationPtrType ServicePrincipalInformationArgs

func ServicePrincipalInformationPtr(v *ServicePrincipalInformationArgs) ServicePrincipalInformationPtrInput {
	return (*servicePrincipalInformationPtrType)(v)
}

func (*servicePrincipalInformationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalInformation)(nil)).Elem()
}

func (i *servicePrincipalInformationPtrType) ToServicePrincipalInformationPtrOutput() ServicePrincipalInformationPtrOutput {
	return i.ToServicePrincipalInformationPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalInformationPtrType) ToServicePrincipalInformationPtrOutputWithContext(ctx context.Context) ServicePrincipalInformationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalInformationPtrOutput)
}

func (i *servicePrincipalInformationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalInformation] {
	return pulumix.Output[*ServicePrincipalInformation]{
		OutputState: i.ToServicePrincipalInformationPtrOutputWithContext(ctx).OutputState,
	}
}

type ServicePrincipalInformationOutput struct{ *pulumi.OutputState }

func (ServicePrincipalInformationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalInformation)(nil)).Elem()
}

func (o ServicePrincipalInformationOutput) ToServicePrincipalInformationOutput() ServicePrincipalInformationOutput {
	return o
}

func (o ServicePrincipalInformationOutput) ToServicePrincipalInformationOutputWithContext(ctx context.Context) ServicePrincipalInformationOutput {
	return o
}

func (o ServicePrincipalInformationOutput) ToServicePrincipalInformationPtrOutput() ServicePrincipalInformationPtrOutput {
	return o.ToServicePrincipalInformationPtrOutputWithContext(context.Background())
}

func (o ServicePrincipalInformationOutput) ToServicePrincipalInformationPtrOutputWithContext(ctx context.Context) ServicePrincipalInformationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicePrincipalInformation) *ServicePrincipalInformation {
		return &v
	}).(ServicePrincipalInformationPtrOutput)
}

func (o ServicePrincipalInformationOutput) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalInformation] {
	return pulumix.Output[ServicePrincipalInformation]{
		OutputState: o.OutputState,
	}
}

// The application ID, also known as client ID, of the service principal.
func (o ServicePrincipalInformationOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformation) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// The password of the service principal.
func (o ServicePrincipalInformationOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformation) string { return v.Password }).(pulumi.StringOutput)
}

// The principal ID, also known as the object ID, of the service principal.
func (o ServicePrincipalInformationOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformation) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
func (o ServicePrincipalInformationOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformation) string { return v.TenantId }).(pulumi.StringOutput)
}

type ServicePrincipalInformationPtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalInformationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalInformation)(nil)).Elem()
}

func (o ServicePrincipalInformationPtrOutput) ToServicePrincipalInformationPtrOutput() ServicePrincipalInformationPtrOutput {
	return o
}

func (o ServicePrincipalInformationPtrOutput) ToServicePrincipalInformationPtrOutputWithContext(ctx context.Context) ServicePrincipalInformationPtrOutput {
	return o
}

func (o ServicePrincipalInformationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalInformation] {
	return pulumix.Output[*ServicePrincipalInformation]{
		OutputState: o.OutputState,
	}
}

func (o ServicePrincipalInformationPtrOutput) Elem() ServicePrincipalInformationOutput {
	return o.ApplyT(func(v *ServicePrincipalInformation) ServicePrincipalInformation {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalInformation
		return ret
	}).(ServicePrincipalInformationOutput)
}

// The application ID, also known as client ID, of the service principal.
func (o ServicePrincipalInformationPtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformation) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// The password of the service principal.
func (o ServicePrincipalInformationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformation) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The principal ID, also known as the object ID, of the service principal.
func (o ServicePrincipalInformationPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformation) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
func (o ServicePrincipalInformationPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformation) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ServicePrincipalInformationResponse struct {
	// The application ID, also known as client ID, of the service principal.
	ApplicationId string `pulumi:"applicationId"`
	// The password of the service principal.
	Password string `pulumi:"password"`
	// The principal ID, also known as the object ID, of the service principal.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
	TenantId string `pulumi:"tenantId"`
}

type ServicePrincipalInformationResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalInformationResponse)(nil)).Elem()
}

func (o ServicePrincipalInformationResponseOutput) ToServicePrincipalInformationResponseOutput() ServicePrincipalInformationResponseOutput {
	return o
}

func (o ServicePrincipalInformationResponseOutput) ToServicePrincipalInformationResponseOutputWithContext(ctx context.Context) ServicePrincipalInformationResponseOutput {
	return o
}

func (o ServicePrincipalInformationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalInformationResponse] {
	return pulumix.Output[ServicePrincipalInformationResponse]{
		OutputState: o.OutputState,
	}
}

// The application ID, also known as client ID, of the service principal.
func (o ServicePrincipalInformationResponseOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformationResponse) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// The password of the service principal.
func (o ServicePrincipalInformationResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformationResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The principal ID, also known as the object ID, of the service principal.
func (o ServicePrincipalInformationResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformationResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
func (o ServicePrincipalInformationResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalInformationResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type ServicePrincipalInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalInformationResponse)(nil)).Elem()
}

func (o ServicePrincipalInformationResponsePtrOutput) ToServicePrincipalInformationResponsePtrOutput() ServicePrincipalInformationResponsePtrOutput {
	return o
}

func (o ServicePrincipalInformationResponsePtrOutput) ToServicePrincipalInformationResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalInformationResponsePtrOutput {
	return o
}

func (o ServicePrincipalInformationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalInformationResponse] {
	return pulumix.Output[*ServicePrincipalInformationResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServicePrincipalInformationResponsePtrOutput) Elem() ServicePrincipalInformationResponseOutput {
	return o.ApplyT(func(v *ServicePrincipalInformationResponse) ServicePrincipalInformationResponse {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalInformationResponse
		return ret
	}).(ServicePrincipalInformationResponseOutput)
}

// The application ID, also known as client ID, of the service principal.
func (o ServicePrincipalInformationResponsePtrOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationId
	}).(pulumi.StringPtrOutput)
}

// The password of the service principal.
func (o ServicePrincipalInformationResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// The principal ID, also known as the object ID, of the service principal.
func (o ServicePrincipalInformationResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.
func (o ServicePrincipalInformationResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type SshPublicKey struct {
	// The SSH public key data.
	KeyData string `pulumi:"keyData"`
}

// SshPublicKeyInput is an input type that accepts SshPublicKeyArgs and SshPublicKeyOutput values.
// You can construct a concrete instance of `SshPublicKeyInput` via:
//
//	SshPublicKeyArgs{...}
type SshPublicKeyInput interface {
	pulumi.Input

	ToSshPublicKeyOutput() SshPublicKeyOutput
	ToSshPublicKeyOutputWithContext(context.Context) SshPublicKeyOutput
}

type SshPublicKeyArgs struct {
	// The SSH public key data.
	KeyData pulumi.StringInput `pulumi:"keyData"`
}

func (SshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return i.ToSshPublicKeyOutputWithContext(context.Background())
}

func (i SshPublicKeyArgs) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyOutput)
}

func (i SshPublicKeyArgs) ToOutput(ctx context.Context) pulumix.Output[SshPublicKey] {
	return pulumix.Output[SshPublicKey]{
		OutputState: i.ToSshPublicKeyOutputWithContext(ctx).OutputState,
	}
}

// SshPublicKeyArrayInput is an input type that accepts SshPublicKeyArray and SshPublicKeyArrayOutput values.
// You can construct a concrete instance of `SshPublicKeyArrayInput` via:
//
//	SshPublicKeyArray{ SshPublicKeyArgs{...} }
type SshPublicKeyArrayInput interface {
	pulumi.Input

	ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput
	ToSshPublicKeyArrayOutputWithContext(context.Context) SshPublicKeyArrayOutput
}

type SshPublicKeyArray []SshPublicKeyInput

func (SshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return i.ToSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i SshPublicKeyArray) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SshPublicKeyArrayOutput)
}

func (i SshPublicKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]SshPublicKey] {
	return pulumix.Output[[]SshPublicKey]{
		OutputState: i.ToSshPublicKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type SshPublicKeyOutput struct{ *pulumi.OutputState }

func (SshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutput() SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToSshPublicKeyOutputWithContext(ctx context.Context) SshPublicKeyOutput {
	return o
}

func (o SshPublicKeyOutput) ToOutput(ctx context.Context) pulumix.Output[SshPublicKey] {
	return pulumix.Output[SshPublicKey]{
		OutputState: o.OutputState,
	}
}

// The SSH public key data.
func (o SshPublicKeyOutput) KeyData() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKey) string { return v.KeyData }).(pulumi.StringOutput)
}

type SshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKey)(nil)).Elem()
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutput() SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) ToSshPublicKeyArrayOutputWithContext(ctx context.Context) SshPublicKeyArrayOutput {
	return o
}

func (o SshPublicKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SshPublicKey] {
	return pulumix.Output[[]SshPublicKey]{
		OutputState: o.OutputState,
	}
}

func (o SshPublicKeyArrayOutput) Index(i pulumi.IntInput) SshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKey {
		return vs[0].([]SshPublicKey)[vs[1].(int)]
	}).(SshPublicKeyOutput)
}

type SshPublicKeyResponse struct {
	// The SSH public key data.
	KeyData string `pulumi:"keyData"`
}

type SshPublicKeyResponseOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutput() SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToSshPublicKeyResponseOutputWithContext(ctx context.Context) SshPublicKeyResponseOutput {
	return o
}

func (o SshPublicKeyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SshPublicKeyResponse] {
	return pulumix.Output[SshPublicKeyResponse]{
		OutputState: o.OutputState,
	}
}

// The SSH public key data.
func (o SshPublicKeyResponseOutput) KeyData() pulumi.StringOutput {
	return o.ApplyT(func(v SshPublicKeyResponse) string { return v.KeyData }).(pulumi.StringOutput)
}

type SshPublicKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (SshPublicKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SshPublicKeyResponse)(nil)).Elem()
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutput() SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToSshPublicKeyResponseArrayOutputWithContext(ctx context.Context) SshPublicKeyResponseArrayOutput {
	return o
}

func (o SshPublicKeyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SshPublicKeyResponse] {
	return pulumix.Output[[]SshPublicKeyResponse]{
		OutputState: o.OutputState,
	}
}

func (o SshPublicKeyResponseArrayOutput) Index(i pulumi.IntInput) SshPublicKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SshPublicKeyResponse {
		return vs[0].([]SshPublicKeyResponse)[vs[1].(int)]
	}).(SshPublicKeyResponseOutput)
}

type StorageApplianceConfigurationData struct {
	// The credentials of the administrative interface on this storage appliance.
	AdminCredentials AdministrativeCredentials `pulumi:"adminCredentials"`
	// The slot that storage appliance is in the rack based on the BOM configuration.
	RackSlot float64 `pulumi:"rackSlot"`
	// The serial number of the appliance.
	SerialNumber string `pulumi:"serialNumber"`
	// The user-provided name for the storage appliance that will be created from this specification.
	StorageApplianceName *string `pulumi:"storageApplianceName"`
}

// StorageApplianceConfigurationDataInput is an input type that accepts StorageApplianceConfigurationDataArgs and StorageApplianceConfigurationDataOutput values.
// You can construct a concrete instance of `StorageApplianceConfigurationDataInput` via:
//
//	StorageApplianceConfigurationDataArgs{...}
type StorageApplianceConfigurationDataInput interface {
	pulumi.Input

	ToStorageApplianceConfigurationDataOutput() StorageApplianceConfigurationDataOutput
	ToStorageApplianceConfigurationDataOutputWithContext(context.Context) StorageApplianceConfigurationDataOutput
}

type StorageApplianceConfigurationDataArgs struct {
	// The credentials of the administrative interface on this storage appliance.
	AdminCredentials AdministrativeCredentialsInput `pulumi:"adminCredentials"`
	// The slot that storage appliance is in the rack based on the BOM configuration.
	RackSlot pulumi.Float64Input `pulumi:"rackSlot"`
	// The serial number of the appliance.
	SerialNumber pulumi.StringInput `pulumi:"serialNumber"`
	// The user-provided name for the storage appliance that will be created from this specification.
	StorageApplianceName pulumi.StringPtrInput `pulumi:"storageApplianceName"`
}

func (StorageApplianceConfigurationDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageApplianceConfigurationData)(nil)).Elem()
}

func (i StorageApplianceConfigurationDataArgs) ToStorageApplianceConfigurationDataOutput() StorageApplianceConfigurationDataOutput {
	return i.ToStorageApplianceConfigurationDataOutputWithContext(context.Background())
}

func (i StorageApplianceConfigurationDataArgs) ToStorageApplianceConfigurationDataOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageApplianceConfigurationDataOutput)
}

func (i StorageApplianceConfigurationDataArgs) ToOutput(ctx context.Context) pulumix.Output[StorageApplianceConfigurationData] {
	return pulumix.Output[StorageApplianceConfigurationData]{
		OutputState: i.ToStorageApplianceConfigurationDataOutputWithContext(ctx).OutputState,
	}
}

// StorageApplianceConfigurationDataArrayInput is an input type that accepts StorageApplianceConfigurationDataArray and StorageApplianceConfigurationDataArrayOutput values.
// You can construct a concrete instance of `StorageApplianceConfigurationDataArrayInput` via:
//
//	StorageApplianceConfigurationDataArray{ StorageApplianceConfigurationDataArgs{...} }
type StorageApplianceConfigurationDataArrayInput interface {
	pulumi.Input

	ToStorageApplianceConfigurationDataArrayOutput() StorageApplianceConfigurationDataArrayOutput
	ToStorageApplianceConfigurationDataArrayOutputWithContext(context.Context) StorageApplianceConfigurationDataArrayOutput
}

type StorageApplianceConfigurationDataArray []StorageApplianceConfigurationDataInput

func (StorageApplianceConfigurationDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageApplianceConfigurationData)(nil)).Elem()
}

func (i StorageApplianceConfigurationDataArray) ToStorageApplianceConfigurationDataArrayOutput() StorageApplianceConfigurationDataArrayOutput {
	return i.ToStorageApplianceConfigurationDataArrayOutputWithContext(context.Background())
}

func (i StorageApplianceConfigurationDataArray) ToStorageApplianceConfigurationDataArrayOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageApplianceConfigurationDataArrayOutput)
}

func (i StorageApplianceConfigurationDataArray) ToOutput(ctx context.Context) pulumix.Output[[]StorageApplianceConfigurationData] {
	return pulumix.Output[[]StorageApplianceConfigurationData]{
		OutputState: i.ToStorageApplianceConfigurationDataArrayOutputWithContext(ctx).OutputState,
	}
}

type StorageApplianceConfigurationDataOutput struct{ *pulumi.OutputState }

func (StorageApplianceConfigurationDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageApplianceConfigurationData)(nil)).Elem()
}

func (o StorageApplianceConfigurationDataOutput) ToStorageApplianceConfigurationDataOutput() StorageApplianceConfigurationDataOutput {
	return o
}

func (o StorageApplianceConfigurationDataOutput) ToStorageApplianceConfigurationDataOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataOutput {
	return o
}

func (o StorageApplianceConfigurationDataOutput) ToOutput(ctx context.Context) pulumix.Output[StorageApplianceConfigurationData] {
	return pulumix.Output[StorageApplianceConfigurationData]{
		OutputState: o.OutputState,
	}
}

// The credentials of the administrative interface on this storage appliance.
func (o StorageApplianceConfigurationDataOutput) AdminCredentials() AdministrativeCredentialsOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationData) AdministrativeCredentials { return v.AdminCredentials }).(AdministrativeCredentialsOutput)
}

// The slot that storage appliance is in the rack based on the BOM configuration.
func (o StorageApplianceConfigurationDataOutput) RackSlot() pulumi.Float64Output {
	return o.ApplyT(func(v StorageApplianceConfigurationData) float64 { return v.RackSlot }).(pulumi.Float64Output)
}

// The serial number of the appliance.
func (o StorageApplianceConfigurationDataOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationData) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The user-provided name for the storage appliance that will be created from this specification.
func (o StorageApplianceConfigurationDataOutput) StorageApplianceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationData) *string { return v.StorageApplianceName }).(pulumi.StringPtrOutput)
}

type StorageApplianceConfigurationDataArrayOutput struct{ *pulumi.OutputState }

func (StorageApplianceConfigurationDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageApplianceConfigurationData)(nil)).Elem()
}

func (o StorageApplianceConfigurationDataArrayOutput) ToStorageApplianceConfigurationDataArrayOutput() StorageApplianceConfigurationDataArrayOutput {
	return o
}

func (o StorageApplianceConfigurationDataArrayOutput) ToStorageApplianceConfigurationDataArrayOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataArrayOutput {
	return o
}

func (o StorageApplianceConfigurationDataArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StorageApplianceConfigurationData] {
	return pulumix.Output[[]StorageApplianceConfigurationData]{
		OutputState: o.OutputState,
	}
}

func (o StorageApplianceConfigurationDataArrayOutput) Index(i pulumi.IntInput) StorageApplianceConfigurationDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageApplianceConfigurationData {
		return vs[0].([]StorageApplianceConfigurationData)[vs[1].(int)]
	}).(StorageApplianceConfigurationDataOutput)
}

type StorageApplianceConfigurationDataResponse struct {
	// The credentials of the administrative interface on this storage appliance.
	AdminCredentials AdministrativeCredentialsResponse `pulumi:"adminCredentials"`
	// The slot that storage appliance is in the rack based on the BOM configuration.
	RackSlot float64 `pulumi:"rackSlot"`
	// The serial number of the appliance.
	SerialNumber string `pulumi:"serialNumber"`
	// The user-provided name for the storage appliance that will be created from this specification.
	StorageApplianceName *string `pulumi:"storageApplianceName"`
}

type StorageApplianceConfigurationDataResponseOutput struct{ *pulumi.OutputState }

func (StorageApplianceConfigurationDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageApplianceConfigurationDataResponse)(nil)).Elem()
}

func (o StorageApplianceConfigurationDataResponseOutput) ToStorageApplianceConfigurationDataResponseOutput() StorageApplianceConfigurationDataResponseOutput {
	return o
}

func (o StorageApplianceConfigurationDataResponseOutput) ToStorageApplianceConfigurationDataResponseOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataResponseOutput {
	return o
}

func (o StorageApplianceConfigurationDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StorageApplianceConfigurationDataResponse] {
	return pulumix.Output[StorageApplianceConfigurationDataResponse]{
		OutputState: o.OutputState,
	}
}

// The credentials of the administrative interface on this storage appliance.
func (o StorageApplianceConfigurationDataResponseOutput) AdminCredentials() AdministrativeCredentialsResponseOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationDataResponse) AdministrativeCredentialsResponse {
		return v.AdminCredentials
	}).(AdministrativeCredentialsResponseOutput)
}

// The slot that storage appliance is in the rack based on the BOM configuration.
func (o StorageApplianceConfigurationDataResponseOutput) RackSlot() pulumi.Float64Output {
	return o.ApplyT(func(v StorageApplianceConfigurationDataResponse) float64 { return v.RackSlot }).(pulumi.Float64Output)
}

// The serial number of the appliance.
func (o StorageApplianceConfigurationDataResponseOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationDataResponse) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The user-provided name for the storage appliance that will be created from this specification.
func (o StorageApplianceConfigurationDataResponseOutput) StorageApplianceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageApplianceConfigurationDataResponse) *string { return v.StorageApplianceName }).(pulumi.StringPtrOutput)
}

type StorageApplianceConfigurationDataResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageApplianceConfigurationDataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageApplianceConfigurationDataResponse)(nil)).Elem()
}

func (o StorageApplianceConfigurationDataResponseArrayOutput) ToStorageApplianceConfigurationDataResponseArrayOutput() StorageApplianceConfigurationDataResponseArrayOutput {
	return o
}

func (o StorageApplianceConfigurationDataResponseArrayOutput) ToStorageApplianceConfigurationDataResponseArrayOutputWithContext(ctx context.Context) StorageApplianceConfigurationDataResponseArrayOutput {
	return o
}

func (o StorageApplianceConfigurationDataResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StorageApplianceConfigurationDataResponse] {
	return pulumix.Output[[]StorageApplianceConfigurationDataResponse]{
		OutputState: o.OutputState,
	}
}

func (o StorageApplianceConfigurationDataResponseArrayOutput) Index(i pulumi.IntInput) StorageApplianceConfigurationDataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageApplianceConfigurationDataResponse {
		return vs[0].([]StorageApplianceConfigurationDataResponse)[vs[1].(int)]
	}).(StorageApplianceConfigurationDataResponseOutput)
}

type StorageProfile struct {
	// The disk to use with this virtual machine.
	OsDisk OsDisk `pulumi:"osDisk"`
	// The resource IDs of volumes that are requested to be attached to the virtual machine.
	VolumeAttachments []string `pulumi:"volumeAttachments"`
}

// Defaults sets the appropriate defaults for StorageProfile
func (val *StorageProfile) Defaults() *StorageProfile {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.OsDisk = *tmp.OsDisk.Defaults()

	return &tmp
}

// StorageProfileInput is an input type that accepts StorageProfileArgs and StorageProfileOutput values.
// You can construct a concrete instance of `StorageProfileInput` via:
//
//	StorageProfileArgs{...}
type StorageProfileInput interface {
	pulumi.Input

	ToStorageProfileOutput() StorageProfileOutput
	ToStorageProfileOutputWithContext(context.Context) StorageProfileOutput
}

type StorageProfileArgs struct {
	// The disk to use with this virtual machine.
	OsDisk OsDiskInput `pulumi:"osDisk"`
	// The resource IDs of volumes that are requested to be attached to the virtual machine.
	VolumeAttachments pulumi.StringArrayInput `pulumi:"volumeAttachments"`
}

// Defaults sets the appropriate defaults for StorageProfileArgs
func (val *StorageProfileArgs) Defaults() *StorageProfileArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (StorageProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (i StorageProfileArgs) ToStorageProfileOutput() StorageProfileOutput {
	return i.ToStorageProfileOutputWithContext(context.Background())
}

func (i StorageProfileArgs) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageProfileOutput)
}

func (i StorageProfileArgs) ToOutput(ctx context.Context) pulumix.Output[StorageProfile] {
	return pulumix.Output[StorageProfile]{
		OutputState: i.ToStorageProfileOutputWithContext(ctx).OutputState,
	}
}

type StorageProfileOutput struct{ *pulumi.OutputState }

func (StorageProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfile)(nil)).Elem()
}

func (o StorageProfileOutput) ToStorageProfileOutput() StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToStorageProfileOutputWithContext(ctx context.Context) StorageProfileOutput {
	return o
}

func (o StorageProfileOutput) ToOutput(ctx context.Context) pulumix.Output[StorageProfile] {
	return pulumix.Output[StorageProfile]{
		OutputState: o.OutputState,
	}
}

// The disk to use with this virtual machine.
func (o StorageProfileOutput) OsDisk() OsDiskOutput {
	return o.ApplyT(func(v StorageProfile) OsDisk { return v.OsDisk }).(OsDiskOutput)
}

// The resource IDs of volumes that are requested to be attached to the virtual machine.
func (o StorageProfileOutput) VolumeAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageProfile) []string { return v.VolumeAttachments }).(pulumi.StringArrayOutput)
}

type StorageProfileResponse struct {
	// The disk to use with this virtual machine.
	OsDisk OsDiskResponse `pulumi:"osDisk"`
	// The resource IDs of volumes that are requested to be attached to the virtual machine.
	VolumeAttachments []string `pulumi:"volumeAttachments"`
}

// Defaults sets the appropriate defaults for StorageProfileResponse
func (val *StorageProfileResponse) Defaults() *StorageProfileResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.OsDisk = *tmp.OsDisk.Defaults()

	return &tmp
}

type StorageProfileResponseOutput struct{ *pulumi.OutputState }

func (StorageProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageProfileResponse)(nil)).Elem()
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutput() StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToStorageProfileResponseOutputWithContext(ctx context.Context) StorageProfileResponseOutput {
	return o
}

func (o StorageProfileResponseOutput) ToOutput(ctx context.Context) pulumix.Output[StorageProfileResponse] {
	return pulumix.Output[StorageProfileResponse]{
		OutputState: o.OutputState,
	}
}

// The disk to use with this virtual machine.
func (o StorageProfileResponseOutput) OsDisk() OsDiskResponseOutput {
	return o.ApplyT(func(v StorageProfileResponse) OsDiskResponse { return v.OsDisk }).(OsDiskResponseOutput)
}

// The resource IDs of volumes that are requested to be attached to the virtual machine.
func (o StorageProfileResponseOutput) VolumeAttachments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StorageProfileResponse) []string { return v.VolumeAttachments }).(pulumi.StringArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type TrunkedNetworkAttachmentConfiguration struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for TrunkedNetworkAttachmentConfiguration
func (val *TrunkedNetworkAttachmentConfiguration) Defaults() *TrunkedNetworkAttachmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

// TrunkedNetworkAttachmentConfigurationInput is an input type that accepts TrunkedNetworkAttachmentConfigurationArgs and TrunkedNetworkAttachmentConfigurationOutput values.
// You can construct a concrete instance of `TrunkedNetworkAttachmentConfigurationInput` via:
//
//	TrunkedNetworkAttachmentConfigurationArgs{...}
type TrunkedNetworkAttachmentConfigurationInput interface {
	pulumi.Input

	ToTrunkedNetworkAttachmentConfigurationOutput() TrunkedNetworkAttachmentConfigurationOutput
	ToTrunkedNetworkAttachmentConfigurationOutputWithContext(context.Context) TrunkedNetworkAttachmentConfigurationOutput
}

type TrunkedNetworkAttachmentConfigurationArgs struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId pulumi.StringInput `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType pulumi.StringPtrInput `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for TrunkedNetworkAttachmentConfigurationArgs
func (val *TrunkedNetworkAttachmentConfigurationArgs) Defaults() *TrunkedNetworkAttachmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		tmp.PluginType = pulumi.StringPtr("SRIOV")
	}
	return &tmp
}
func (TrunkedNetworkAttachmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrunkedNetworkAttachmentConfiguration)(nil)).Elem()
}

func (i TrunkedNetworkAttachmentConfigurationArgs) ToTrunkedNetworkAttachmentConfigurationOutput() TrunkedNetworkAttachmentConfigurationOutput {
	return i.ToTrunkedNetworkAttachmentConfigurationOutputWithContext(context.Background())
}

func (i TrunkedNetworkAttachmentConfigurationArgs) ToTrunkedNetworkAttachmentConfigurationOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrunkedNetworkAttachmentConfigurationOutput)
}

func (i TrunkedNetworkAttachmentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[TrunkedNetworkAttachmentConfiguration] {
	return pulumix.Output[TrunkedNetworkAttachmentConfiguration]{
		OutputState: i.ToTrunkedNetworkAttachmentConfigurationOutputWithContext(ctx).OutputState,
	}
}

// TrunkedNetworkAttachmentConfigurationArrayInput is an input type that accepts TrunkedNetworkAttachmentConfigurationArray and TrunkedNetworkAttachmentConfigurationArrayOutput values.
// You can construct a concrete instance of `TrunkedNetworkAttachmentConfigurationArrayInput` via:
//
//	TrunkedNetworkAttachmentConfigurationArray{ TrunkedNetworkAttachmentConfigurationArgs{...} }
type TrunkedNetworkAttachmentConfigurationArrayInput interface {
	pulumi.Input

	ToTrunkedNetworkAttachmentConfigurationArrayOutput() TrunkedNetworkAttachmentConfigurationArrayOutput
	ToTrunkedNetworkAttachmentConfigurationArrayOutputWithContext(context.Context) TrunkedNetworkAttachmentConfigurationArrayOutput
}

type TrunkedNetworkAttachmentConfigurationArray []TrunkedNetworkAttachmentConfigurationInput

func (TrunkedNetworkAttachmentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrunkedNetworkAttachmentConfiguration)(nil)).Elem()
}

func (i TrunkedNetworkAttachmentConfigurationArray) ToTrunkedNetworkAttachmentConfigurationArrayOutput() TrunkedNetworkAttachmentConfigurationArrayOutput {
	return i.ToTrunkedNetworkAttachmentConfigurationArrayOutputWithContext(context.Background())
}

func (i TrunkedNetworkAttachmentConfigurationArray) ToTrunkedNetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrunkedNetworkAttachmentConfigurationArrayOutput)
}

func (i TrunkedNetworkAttachmentConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]TrunkedNetworkAttachmentConfiguration] {
	return pulumix.Output[[]TrunkedNetworkAttachmentConfiguration]{
		OutputState: i.ToTrunkedNetworkAttachmentConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

type TrunkedNetworkAttachmentConfigurationOutput struct{ *pulumi.OutputState }

func (TrunkedNetworkAttachmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrunkedNetworkAttachmentConfiguration)(nil)).Elem()
}

func (o TrunkedNetworkAttachmentConfigurationOutput) ToTrunkedNetworkAttachmentConfigurationOutput() TrunkedNetworkAttachmentConfigurationOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationOutput) ToTrunkedNetworkAttachmentConfigurationOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[TrunkedNetworkAttachmentConfiguration] {
	return pulumix.Output[TrunkedNetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the network that is being configured for attachment.
func (o TrunkedNetworkAttachmentConfigurationOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v TrunkedNetworkAttachmentConfiguration) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o TrunkedNetworkAttachmentConfigurationOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrunkedNetworkAttachmentConfiguration) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type TrunkedNetworkAttachmentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (TrunkedNetworkAttachmentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrunkedNetworkAttachmentConfiguration)(nil)).Elem()
}

func (o TrunkedNetworkAttachmentConfigurationArrayOutput) ToTrunkedNetworkAttachmentConfigurationArrayOutput() TrunkedNetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationArrayOutput) ToTrunkedNetworkAttachmentConfigurationArrayOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationArrayOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TrunkedNetworkAttachmentConfiguration] {
	return pulumix.Output[[]TrunkedNetworkAttachmentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o TrunkedNetworkAttachmentConfigurationArrayOutput) Index(i pulumi.IntInput) TrunkedNetworkAttachmentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrunkedNetworkAttachmentConfiguration {
		return vs[0].([]TrunkedNetworkAttachmentConfiguration)[vs[1].(int)]
	}).(TrunkedNetworkAttachmentConfigurationOutput)
}

type TrunkedNetworkAttachmentConfigurationResponse struct {
	// The resource ID of the network that is being configured for attachment.
	NetworkId string `pulumi:"networkId"`
	// The indicator of how this network will be utilized by the Kubernetes cluster.
	PluginType *string `pulumi:"pluginType"`
}

// Defaults sets the appropriate defaults for TrunkedNetworkAttachmentConfigurationResponse
func (val *TrunkedNetworkAttachmentConfigurationResponse) Defaults() *TrunkedNetworkAttachmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PluginType == nil {
		pluginType_ := "SRIOV"
		tmp.PluginType = &pluginType_
	}
	return &tmp
}

type TrunkedNetworkAttachmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (TrunkedNetworkAttachmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrunkedNetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o TrunkedNetworkAttachmentConfigurationResponseOutput) ToTrunkedNetworkAttachmentConfigurationResponseOutput() TrunkedNetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationResponseOutput) ToTrunkedNetworkAttachmentConfigurationResponseOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationResponseOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TrunkedNetworkAttachmentConfigurationResponse] {
	return pulumix.Output[TrunkedNetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The resource ID of the network that is being configured for attachment.
func (o TrunkedNetworkAttachmentConfigurationResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v TrunkedNetworkAttachmentConfigurationResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

// The indicator of how this network will be utilized by the Kubernetes cluster.
func (o TrunkedNetworkAttachmentConfigurationResponseOutput) PluginType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrunkedNetworkAttachmentConfigurationResponse) *string { return v.PluginType }).(pulumi.StringPtrOutput)
}

type TrunkedNetworkAttachmentConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (TrunkedNetworkAttachmentConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrunkedNetworkAttachmentConfigurationResponse)(nil)).Elem()
}

func (o TrunkedNetworkAttachmentConfigurationResponseArrayOutput) ToTrunkedNetworkAttachmentConfigurationResponseArrayOutput() TrunkedNetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationResponseArrayOutput) ToTrunkedNetworkAttachmentConfigurationResponseArrayOutputWithContext(ctx context.Context) TrunkedNetworkAttachmentConfigurationResponseArrayOutput {
	return o
}

func (o TrunkedNetworkAttachmentConfigurationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TrunkedNetworkAttachmentConfigurationResponse] {
	return pulumix.Output[[]TrunkedNetworkAttachmentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o TrunkedNetworkAttachmentConfigurationResponseArrayOutput) Index(i pulumi.IntInput) TrunkedNetworkAttachmentConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrunkedNetworkAttachmentConfigurationResponse {
		return vs[0].([]TrunkedNetworkAttachmentConfigurationResponse)[vs[1].(int)]
	}).(TrunkedNetworkAttachmentConfigurationResponseOutput)
}

type ValidationThreshold struct {
	// Selection of how the type evaluation is applied to the cluster calculation.
	Grouping string `pulumi:"grouping"`
	// Selection of how the threshold should be evaluated.
	Type string `pulumi:"type"`
	// The numeric threshold value.
	Value float64 `pulumi:"value"`
}

// ValidationThresholdInput is an input type that accepts ValidationThresholdArgs and ValidationThresholdOutput values.
// You can construct a concrete instance of `ValidationThresholdInput` via:
//
//	ValidationThresholdArgs{...}
type ValidationThresholdInput interface {
	pulumi.Input

	ToValidationThresholdOutput() ValidationThresholdOutput
	ToValidationThresholdOutputWithContext(context.Context) ValidationThresholdOutput
}

type ValidationThresholdArgs struct {
	// Selection of how the type evaluation is applied to the cluster calculation.
	Grouping pulumi.StringInput `pulumi:"grouping"`
	// Selection of how the threshold should be evaluated.
	Type pulumi.StringInput `pulumi:"type"`
	// The numeric threshold value.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (ValidationThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationThreshold)(nil)).Elem()
}

func (i ValidationThresholdArgs) ToValidationThresholdOutput() ValidationThresholdOutput {
	return i.ToValidationThresholdOutputWithContext(context.Background())
}

func (i ValidationThresholdArgs) ToValidationThresholdOutputWithContext(ctx context.Context) ValidationThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationThresholdOutput)
}

func (i ValidationThresholdArgs) ToOutput(ctx context.Context) pulumix.Output[ValidationThreshold] {
	return pulumix.Output[ValidationThreshold]{
		OutputState: i.ToValidationThresholdOutputWithContext(ctx).OutputState,
	}
}

func (i ValidationThresholdArgs) ToValidationThresholdPtrOutput() ValidationThresholdPtrOutput {
	return i.ToValidationThresholdPtrOutputWithContext(context.Background())
}

func (i ValidationThresholdArgs) ToValidationThresholdPtrOutputWithContext(ctx context.Context) ValidationThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationThresholdOutput).ToValidationThresholdPtrOutputWithContext(ctx)
}

// ValidationThresholdPtrInput is an input type that accepts ValidationThresholdArgs, ValidationThresholdPtr and ValidationThresholdPtrOutput values.
// You can construct a concrete instance of `ValidationThresholdPtrInput` via:
//
//	        ValidationThresholdArgs{...}
//
//	or:
//
//	        nil
type ValidationThresholdPtrInput interface {
	pulumi.Input

	ToValidationThresholdPtrOutput() ValidationThresholdPtrOutput
	ToValidationThresholdPtrOutputWithContext(context.Context) ValidationThresholdPtrOutput
}

type validationThresholdPtrType ValidationThresholdArgs

func ValidationThresholdPtr(v *ValidationThresholdArgs) ValidationThresholdPtrInput {
	return (*validationThresholdPtrType)(v)
}

func (*validationThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationThreshold)(nil)).Elem()
}

func (i *validationThresholdPtrType) ToValidationThresholdPtrOutput() ValidationThresholdPtrOutput {
	return i.ToValidationThresholdPtrOutputWithContext(context.Background())
}

func (i *validationThresholdPtrType) ToValidationThresholdPtrOutputWithContext(ctx context.Context) ValidationThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationThresholdPtrOutput)
}

func (i *validationThresholdPtrType) ToOutput(ctx context.Context) pulumix.Output[*ValidationThreshold] {
	return pulumix.Output[*ValidationThreshold]{
		OutputState: i.ToValidationThresholdPtrOutputWithContext(ctx).OutputState,
	}
}

type ValidationThresholdOutput struct{ *pulumi.OutputState }

func (ValidationThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationThreshold)(nil)).Elem()
}

func (o ValidationThresholdOutput) ToValidationThresholdOutput() ValidationThresholdOutput {
	return o
}

func (o ValidationThresholdOutput) ToValidationThresholdOutputWithContext(ctx context.Context) ValidationThresholdOutput {
	return o
}

func (o ValidationThresholdOutput) ToValidationThresholdPtrOutput() ValidationThresholdPtrOutput {
	return o.ToValidationThresholdPtrOutputWithContext(context.Background())
}

func (o ValidationThresholdOutput) ToValidationThresholdPtrOutputWithContext(ctx context.Context) ValidationThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ValidationThreshold) *ValidationThreshold {
		return &v
	}).(ValidationThresholdPtrOutput)
}

func (o ValidationThresholdOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationThreshold] {
	return pulumix.Output[ValidationThreshold]{
		OutputState: o.OutputState,
	}
}

// Selection of how the type evaluation is applied to the cluster calculation.
func (o ValidationThresholdOutput) Grouping() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationThreshold) string { return v.Grouping }).(pulumi.StringOutput)
}

// Selection of how the threshold should be evaluated.
func (o ValidationThresholdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationThreshold) string { return v.Type }).(pulumi.StringOutput)
}

// The numeric threshold value.
func (o ValidationThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v ValidationThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type ValidationThresholdPtrOutput struct{ *pulumi.OutputState }

func (ValidationThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationThreshold)(nil)).Elem()
}

func (o ValidationThresholdPtrOutput) ToValidationThresholdPtrOutput() ValidationThresholdPtrOutput {
	return o
}

func (o ValidationThresholdPtrOutput) ToValidationThresholdPtrOutputWithContext(ctx context.Context) ValidationThresholdPtrOutput {
	return o
}

func (o ValidationThresholdPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ValidationThreshold] {
	return pulumix.Output[*ValidationThreshold]{
		OutputState: o.OutputState,
	}
}

func (o ValidationThresholdPtrOutput) Elem() ValidationThresholdOutput {
	return o.ApplyT(func(v *ValidationThreshold) ValidationThreshold {
		if v != nil {
			return *v
		}
		var ret ValidationThreshold
		return ret
	}).(ValidationThresholdOutput)
}

// Selection of how the type evaluation is applied to the cluster calculation.
func (o ValidationThresholdPtrOutput) Grouping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.Grouping
	}).(pulumi.StringPtrOutput)
}

// Selection of how the threshold should be evaluated.
func (o ValidationThresholdPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The numeric threshold value.
func (o ValidationThresholdPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ValidationThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type ValidationThresholdResponse struct {
	// Selection of how the type evaluation is applied to the cluster calculation.
	Grouping string `pulumi:"grouping"`
	// Selection of how the threshold should be evaluated.
	Type string `pulumi:"type"`
	// The numeric threshold value.
	Value float64 `pulumi:"value"`
}

type ValidationThresholdResponseOutput struct{ *pulumi.OutputState }

func (ValidationThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationThresholdResponse)(nil)).Elem()
}

func (o ValidationThresholdResponseOutput) ToValidationThresholdResponseOutput() ValidationThresholdResponseOutput {
	return o
}

func (o ValidationThresholdResponseOutput) ToValidationThresholdResponseOutputWithContext(ctx context.Context) ValidationThresholdResponseOutput {
	return o
}

func (o ValidationThresholdResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationThresholdResponse] {
	return pulumix.Output[ValidationThresholdResponse]{
		OutputState: o.OutputState,
	}
}

// Selection of how the type evaluation is applied to the cluster calculation.
func (o ValidationThresholdResponseOutput) Grouping() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationThresholdResponse) string { return v.Grouping }).(pulumi.StringOutput)
}

// Selection of how the threshold should be evaluated.
func (o ValidationThresholdResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ValidationThresholdResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The numeric threshold value.
func (o ValidationThresholdResponseOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v ValidationThresholdResponse) float64 { return v.Value }).(pulumi.Float64Output)
}

type ValidationThresholdResponsePtrOutput struct{ *pulumi.OutputState }

func (ValidationThresholdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ValidationThresholdResponse)(nil)).Elem()
}

func (o ValidationThresholdResponsePtrOutput) ToValidationThresholdResponsePtrOutput() ValidationThresholdResponsePtrOutput {
	return o
}

func (o ValidationThresholdResponsePtrOutput) ToValidationThresholdResponsePtrOutputWithContext(ctx context.Context) ValidationThresholdResponsePtrOutput {
	return o
}

func (o ValidationThresholdResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ValidationThresholdResponse] {
	return pulumix.Output[*ValidationThresholdResponse]{
		OutputState: o.OutputState,
	}
}

func (o ValidationThresholdResponsePtrOutput) Elem() ValidationThresholdResponseOutput {
	return o.ApplyT(func(v *ValidationThresholdResponse) ValidationThresholdResponse {
		if v != nil {
			return *v
		}
		var ret ValidationThresholdResponse
		return ret
	}).(ValidationThresholdResponseOutput)
}

// Selection of how the type evaluation is applied to the cluster calculation.
func (o ValidationThresholdResponsePtrOutput) Grouping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationThresholdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Grouping
	}).(pulumi.StringPtrOutput)
}

// Selection of how the threshold should be evaluated.
func (o ValidationThresholdResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ValidationThresholdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The numeric threshold value.
func (o ValidationThresholdResponsePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ValidationThresholdResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

type VirtualMachinePlacementHint struct {
	// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
	HintType string `pulumi:"hintType"`
	// The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
	ResourceId string `pulumi:"resourceId"`
	// The indicator of whether the hint is a hard or soft requirement during scheduling.
	SchedulingExecution string `pulumi:"schedulingExecution"`
	// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
	Scope string `pulumi:"scope"`
}

// VirtualMachinePlacementHintInput is an input type that accepts VirtualMachinePlacementHintArgs and VirtualMachinePlacementHintOutput values.
// You can construct a concrete instance of `VirtualMachinePlacementHintInput` via:
//
//	VirtualMachinePlacementHintArgs{...}
type VirtualMachinePlacementHintInput interface {
	pulumi.Input

	ToVirtualMachinePlacementHintOutput() VirtualMachinePlacementHintOutput
	ToVirtualMachinePlacementHintOutputWithContext(context.Context) VirtualMachinePlacementHintOutput
}

type VirtualMachinePlacementHintArgs struct {
	// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
	HintType pulumi.StringInput `pulumi:"hintType"`
	// The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// The indicator of whether the hint is a hard or soft requirement during scheduling.
	SchedulingExecution pulumi.StringInput `pulumi:"schedulingExecution"`
	// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (VirtualMachinePlacementHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePlacementHint)(nil)).Elem()
}

func (i VirtualMachinePlacementHintArgs) ToVirtualMachinePlacementHintOutput() VirtualMachinePlacementHintOutput {
	return i.ToVirtualMachinePlacementHintOutputWithContext(context.Background())
}

func (i VirtualMachinePlacementHintArgs) ToVirtualMachinePlacementHintOutputWithContext(ctx context.Context) VirtualMachinePlacementHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePlacementHintOutput)
}

func (i VirtualMachinePlacementHintArgs) ToOutput(ctx context.Context) pulumix.Output[VirtualMachinePlacementHint] {
	return pulumix.Output[VirtualMachinePlacementHint]{
		OutputState: i.ToVirtualMachinePlacementHintOutputWithContext(ctx).OutputState,
	}
}

// VirtualMachinePlacementHintArrayInput is an input type that accepts VirtualMachinePlacementHintArray and VirtualMachinePlacementHintArrayOutput values.
// You can construct a concrete instance of `VirtualMachinePlacementHintArrayInput` via:
//
//	VirtualMachinePlacementHintArray{ VirtualMachinePlacementHintArgs{...} }
type VirtualMachinePlacementHintArrayInput interface {
	pulumi.Input

	ToVirtualMachinePlacementHintArrayOutput() VirtualMachinePlacementHintArrayOutput
	ToVirtualMachinePlacementHintArrayOutputWithContext(context.Context) VirtualMachinePlacementHintArrayOutput
}

type VirtualMachinePlacementHintArray []VirtualMachinePlacementHintInput

func (VirtualMachinePlacementHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachinePlacementHint)(nil)).Elem()
}

func (i VirtualMachinePlacementHintArray) ToVirtualMachinePlacementHintArrayOutput() VirtualMachinePlacementHintArrayOutput {
	return i.ToVirtualMachinePlacementHintArrayOutputWithContext(context.Background())
}

func (i VirtualMachinePlacementHintArray) ToVirtualMachinePlacementHintArrayOutputWithContext(ctx context.Context) VirtualMachinePlacementHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePlacementHintArrayOutput)
}

func (i VirtualMachinePlacementHintArray) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachinePlacementHint] {
	return pulumix.Output[[]VirtualMachinePlacementHint]{
		OutputState: i.ToVirtualMachinePlacementHintArrayOutputWithContext(ctx).OutputState,
	}
}

type VirtualMachinePlacementHintOutput struct{ *pulumi.OutputState }

func (VirtualMachinePlacementHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePlacementHint)(nil)).Elem()
}

func (o VirtualMachinePlacementHintOutput) ToVirtualMachinePlacementHintOutput() VirtualMachinePlacementHintOutput {
	return o
}

func (o VirtualMachinePlacementHintOutput) ToVirtualMachinePlacementHintOutputWithContext(ctx context.Context) VirtualMachinePlacementHintOutput {
	return o
}

func (o VirtualMachinePlacementHintOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachinePlacementHint] {
	return pulumix.Output[VirtualMachinePlacementHint]{
		OutputState: o.OutputState,
	}
}

// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
func (o VirtualMachinePlacementHintOutput) HintType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHint) string { return v.HintType }).(pulumi.StringOutput)
}

// The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
func (o VirtualMachinePlacementHintOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHint) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The indicator of whether the hint is a hard or soft requirement during scheduling.
func (o VirtualMachinePlacementHintOutput) SchedulingExecution() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHint) string { return v.SchedulingExecution }).(pulumi.StringOutput)
}

// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
func (o VirtualMachinePlacementHintOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHint) string { return v.Scope }).(pulumi.StringOutput)
}

type VirtualMachinePlacementHintArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachinePlacementHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachinePlacementHint)(nil)).Elem()
}

func (o VirtualMachinePlacementHintArrayOutput) ToVirtualMachinePlacementHintArrayOutput() VirtualMachinePlacementHintArrayOutput {
	return o
}

func (o VirtualMachinePlacementHintArrayOutput) ToVirtualMachinePlacementHintArrayOutputWithContext(ctx context.Context) VirtualMachinePlacementHintArrayOutput {
	return o
}

func (o VirtualMachinePlacementHintArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachinePlacementHint] {
	return pulumix.Output[[]VirtualMachinePlacementHint]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachinePlacementHintArrayOutput) Index(i pulumi.IntInput) VirtualMachinePlacementHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachinePlacementHint {
		return vs[0].([]VirtualMachinePlacementHint)[vs[1].(int)]
	}).(VirtualMachinePlacementHintOutput)
}

type VirtualMachinePlacementHintResponse struct {
	// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
	HintType string `pulumi:"hintType"`
	// The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
	ResourceId string `pulumi:"resourceId"`
	// The indicator of whether the hint is a hard or soft requirement during scheduling.
	SchedulingExecution string `pulumi:"schedulingExecution"`
	// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
	Scope string `pulumi:"scope"`
}

type VirtualMachinePlacementHintResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachinePlacementHintResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachinePlacementHintResponse)(nil)).Elem()
}

func (o VirtualMachinePlacementHintResponseOutput) ToVirtualMachinePlacementHintResponseOutput() VirtualMachinePlacementHintResponseOutput {
	return o
}

func (o VirtualMachinePlacementHintResponseOutput) ToVirtualMachinePlacementHintResponseOutputWithContext(ctx context.Context) VirtualMachinePlacementHintResponseOutput {
	return o
}

func (o VirtualMachinePlacementHintResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VirtualMachinePlacementHintResponse] {
	return pulumix.Output[VirtualMachinePlacementHintResponse]{
		OutputState: o.OutputState,
	}
}

// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
func (o VirtualMachinePlacementHintResponseOutput) HintType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHintResponse) string { return v.HintType }).(pulumi.StringOutput)
}

// The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.
func (o VirtualMachinePlacementHintResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHintResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// The indicator of whether the hint is a hard or soft requirement during scheduling.
func (o VirtualMachinePlacementHintResponseOutput) SchedulingExecution() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHintResponse) string { return v.SchedulingExecution }).(pulumi.StringOutput)
}

// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
func (o VirtualMachinePlacementHintResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachinePlacementHintResponse) string { return v.Scope }).(pulumi.StringOutput)
}

type VirtualMachinePlacementHintResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachinePlacementHintResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachinePlacementHintResponse)(nil)).Elem()
}

func (o VirtualMachinePlacementHintResponseArrayOutput) ToVirtualMachinePlacementHintResponseArrayOutput() VirtualMachinePlacementHintResponseArrayOutput {
	return o
}

func (o VirtualMachinePlacementHintResponseArrayOutput) ToVirtualMachinePlacementHintResponseArrayOutputWithContext(ctx context.Context) VirtualMachinePlacementHintResponseArrayOutput {
	return o
}

func (o VirtualMachinePlacementHintResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VirtualMachinePlacementHintResponse] {
	return pulumix.Output[[]VirtualMachinePlacementHintResponse]{
		OutputState: o.OutputState,
	}
}

func (o VirtualMachinePlacementHintResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachinePlacementHintResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachinePlacementHintResponse {
		return vs[0].([]VirtualMachinePlacementHintResponse)[vs[1].(int)]
	}).(VirtualMachinePlacementHintResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AadConfigurationOutput{})
	pulumi.RegisterOutputType(AadConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AadConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AadConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AdministrativeCredentialsOutput{})
	pulumi.RegisterOutputType(AdministrativeCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AdministratorConfigurationOutput{})
	pulumi.RegisterOutputType(AdministratorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AdministratorConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AdministratorConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentOptionsOutput{})
	pulumi.RegisterOutputType(AgentOptionsPtrOutput{})
	pulumi.RegisterOutputType(AgentOptionsResponseOutput{})
	pulumi.RegisterOutputType(AgentOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsPtrOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponseOutput{})
	pulumi.RegisterOutputType(AgentPoolUpgradeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AttachedNetworkConfigurationOutput{})
	pulumi.RegisterOutputType(AttachedNetworkConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AttachedNetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AttachedNetworkConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AvailableUpgradeResponseOutput{})
	pulumi.RegisterOutputType(AvailableUpgradeResponseArrayOutput{})
	pulumi.RegisterOutputType(BareMetalMachineConfigurationDataOutput{})
	pulumi.RegisterOutputType(BareMetalMachineConfigurationDataArrayOutput{})
	pulumi.RegisterOutputType(BareMetalMachineConfigurationDataResponseOutput{})
	pulumi.RegisterOutputType(BareMetalMachineConfigurationDataResponseArrayOutput{})
	pulumi.RegisterOutputType(BgpAdvertisementOutput{})
	pulumi.RegisterOutputType(BgpAdvertisementArrayOutput{})
	pulumi.RegisterOutputType(BgpAdvertisementResponseOutput{})
	pulumi.RegisterOutputType(BgpAdvertisementResponseArrayOutput{})
	pulumi.RegisterOutputType(BgpPeerOutput{})
	pulumi.RegisterOutputType(BgpPeerArrayOutput{})
	pulumi.RegisterOutputType(BgpPeerResponseOutput{})
	pulumi.RegisterOutputType(BgpPeerResponseArrayOutput{})
	pulumi.RegisterOutputType(BgpServiceLoadBalancerConfigurationOutput{})
	pulumi.RegisterOutputType(BgpServiceLoadBalancerConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BgpServiceLoadBalancerConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BgpServiceLoadBalancerConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ClusterAvailableUpgradeVersionResponseOutput{})
	pulumi.RegisterOutputType(ClusterAvailableUpgradeVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterAvailableVersionResponseOutput{})
	pulumi.RegisterOutputType(ClusterAvailableVersionResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterCapacityResponseOutput{})
	pulumi.RegisterOutputType(CniBgpConfigurationOutput{})
	pulumi.RegisterOutputType(CniBgpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CniBgpConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CniBgpConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CommunityAdvertisementOutput{})
	pulumi.RegisterOutputType(CommunityAdvertisementArrayOutput{})
	pulumi.RegisterOutputType(CommunityAdvertisementResponseOutput{})
	pulumi.RegisterOutputType(CommunityAdvertisementResponseArrayOutput{})
	pulumi.RegisterOutputType(ControlPlaneNodeConfigurationOutput{})
	pulumi.RegisterOutputType(ControlPlaneNodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(EgressEndpointOutput{})
	pulumi.RegisterOutputType(EgressEndpointArrayOutput{})
	pulumi.RegisterOutputType(EgressEndpointResponseOutput{})
	pulumi.RegisterOutputType(EgressEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointDependencyOutput{})
	pulumi.RegisterOutputType(EndpointDependencyArrayOutput{})
	pulumi.RegisterOutputType(EndpointDependencyResponseOutput{})
	pulumi.RegisterOutputType(EndpointDependencyResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureStatusResponseOutput{})
	pulumi.RegisterOutputType(FeatureStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(HardwareInventoryNetworkInterfaceResponseOutput{})
	pulumi.RegisterOutputType(HardwareInventoryNetworkInterfaceResponseArrayOutput{})
	pulumi.RegisterOutputType(HardwareInventoryResponseOutput{})
	pulumi.RegisterOutputType(HardwareValidationStatusResponseOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialsOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialsPtrOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ImageRepositoryCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(InitialAgentPoolConfigurationOutput{})
	pulumi.RegisterOutputType(InitialAgentPoolConfigurationArrayOutput{})
	pulumi.RegisterOutputType(InitialAgentPoolConfigurationResponseOutput{})
	pulumi.RegisterOutputType(InitialAgentPoolConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(IpAddressPoolOutput{})
	pulumi.RegisterOutputType(IpAddressPoolArrayOutput{})
	pulumi.RegisterOutputType(IpAddressPoolResponseOutput{})
	pulumi.RegisterOutputType(IpAddressPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(KeySetUserOutput{})
	pulumi.RegisterOutputType(KeySetUserArrayOutput{})
	pulumi.RegisterOutputType(KeySetUserResponseOutput{})
	pulumi.RegisterOutputType(KeySetUserResponseArrayOutput{})
	pulumi.RegisterOutputType(KeySetUserStatusResponseOutput{})
	pulumi.RegisterOutputType(KeySetUserStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodeResponseOutput{})
	pulumi.RegisterOutputType(KubernetesClusterNodeResponseArrayOutput{})
	pulumi.RegisterOutputType(KubernetesLabelOutput{})
	pulumi.RegisterOutputType(KubernetesLabelArrayOutput{})
	pulumi.RegisterOutputType(KubernetesLabelResponseOutput{})
	pulumi.RegisterOutputType(KubernetesLabelResponseArrayOutput{})
	pulumi.RegisterOutputType(L2NetworkAttachmentConfigurationOutput{})
	pulumi.RegisterOutputType(L2NetworkAttachmentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(L2NetworkAttachmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(L2NetworkAttachmentConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(L3NetworkAttachmentConfigurationOutput{})
	pulumi.RegisterOutputType(L3NetworkAttachmentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(L3NetworkAttachmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(L3NetworkAttachmentConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(LldpNeighborResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentArrayOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentResponseOutput{})
	pulumi.RegisterOutputType(NetworkAttachmentResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NicResponseOutput{})
	pulumi.RegisterOutputType(NicResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NodeConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NodeResponseOutput{})
	pulumi.RegisterOutputType(NodeResponseArrayOutput{})
	pulumi.RegisterOutputType(OsDiskOutput{})
	pulumi.RegisterOutputType(OsDiskResponseOutput{})
	pulumi.RegisterOutputType(RackDefinitionOutput{})
	pulumi.RegisterOutputType(RackDefinitionArrayOutput{})
	pulumi.RegisterOutputType(RackDefinitionResponseOutput{})
	pulumi.RegisterOutputType(RackDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerBgpPeerOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerBgpPeerArrayOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerBgpPeerResponseOutput{})
	pulumi.RegisterOutputType(ServiceLoadBalancerBgpPeerResponseArrayOutput{})
	pulumi.RegisterOutputType(ServicePrincipalInformationOutput{})
	pulumi.RegisterOutputType(ServicePrincipalInformationPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalInformationResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(SshPublicKeyOutput{})
	pulumi.RegisterOutputType(SshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseOutput{})
	pulumi.RegisterOutputType(SshPublicKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageApplianceConfigurationDataOutput{})
	pulumi.RegisterOutputType(StorageApplianceConfigurationDataArrayOutput{})
	pulumi.RegisterOutputType(StorageApplianceConfigurationDataResponseOutput{})
	pulumi.RegisterOutputType(StorageApplianceConfigurationDataResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageProfileOutput{})
	pulumi.RegisterOutputType(StorageProfileResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TrunkedNetworkAttachmentConfigurationOutput{})
	pulumi.RegisterOutputType(TrunkedNetworkAttachmentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TrunkedNetworkAttachmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(TrunkedNetworkAttachmentConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationThresholdOutput{})
	pulumi.RegisterOutputType(ValidationThresholdPtrOutput{})
	pulumi.RegisterOutputType(ValidationThresholdResponseOutput{})
	pulumi.RegisterOutputType(ValidationThresholdResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachinePlacementHintOutput{})
	pulumi.RegisterOutputType(VirtualMachinePlacementHintArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachinePlacementHintResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachinePlacementHintResponseArrayOutput{})
}
