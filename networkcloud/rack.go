// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkcloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Azure REST API version: 2023-05-01-preview. Prior API version in Azure Native 1.x: 2022-12-12-preview
type Rack struct {
	pulumi.CustomResourceState

	// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The resource ID of the cluster the rack is created for. This value is set when the rack is created by the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The more detailed status of the rack.
	DetailedStatus pulumi.StringOutput `pulumi:"detailedStatus"`
	// The descriptive message about the current detailed status.
	DetailedStatusMessage pulumi.StringOutput `pulumi:"detailedStatusMessage"`
	// The extended location of the cluster associated with the resource.
	ExtendedLocation ExtendedLocationResponseOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state of the rack resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
	RackLocation pulumi.StringOutput `pulumi:"rackLocation"`
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber pulumi.StringOutput `pulumi:"rackSerialNumber"`
	// The SKU for the rack.
	RackSkuId pulumi.StringOutput `pulumi:"rackSkuId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRack registers a new resource with the given unique name, arguments, and options.
func NewRack(ctx *pulumi.Context,
	name string, args *RackArgs, opts ...pulumi.ResourceOption) (*Rack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.RackLocation == nil {
		return nil, errors.New("invalid value for required argument 'RackLocation'")
	}
	if args.RackSerialNumber == nil {
		return nil, errors.New("invalid value for required argument 'RackSerialNumber'")
	}
	if args.RackSkuId == nil {
		return nil, errors.New("invalid value for required argument 'RackSkuId'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:networkcloud/v20221212preview:Rack"),
		},
		{
			Type: pulumi.String("azure-native:networkcloud/v20230501preview:Rack"),
		},
		{
			Type: pulumi.String("azure-native:networkcloud/v20230701:Rack"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Rack
	err := ctx.RegisterResource("azure-native:networkcloud:Rack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRack gets an existing Rack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RackState, opts ...pulumi.ResourceOption) (*Rack, error) {
	var resource Rack
	err := ctx.ReadResource("azure-native:networkcloud:Rack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rack resources.
type rackState struct {
}

type RackState struct {
}

func (RackState) ElementType() reflect.Type {
	return reflect.TypeOf((*rackState)(nil)).Elem()
}

type rackArgs struct {
	// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The extended location of the cluster associated with the resource.
	ExtendedLocation ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
	RackLocation string `pulumi:"rackLocation"`
	// The name of the rack.
	RackName *string `pulumi:"rackName"`
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber string `pulumi:"rackSerialNumber"`
	// The SKU for the rack.
	RackSkuId string `pulumi:"rackSkuId"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Rack resource.
type RackArgs struct {
	// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
	AvailabilityZone pulumi.StringInput
	// The extended location of the cluster associated with the resource.
	ExtendedLocation ExtendedLocationInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
	RackLocation pulumi.StringInput
	// The name of the rack.
	RackName pulumi.StringPtrInput
	// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
	RackSerialNumber pulumi.StringInput
	// The SKU for the rack.
	RackSkuId pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (RackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rackArgs)(nil)).Elem()
}

type RackInput interface {
	pulumi.Input

	ToRackOutput() RackOutput
	ToRackOutputWithContext(ctx context.Context) RackOutput
}

func (*Rack) ElementType() reflect.Type {
	return reflect.TypeOf((**Rack)(nil)).Elem()
}

func (i *Rack) ToRackOutput() RackOutput {
	return i.ToRackOutputWithContext(context.Background())
}

func (i *Rack) ToRackOutputWithContext(ctx context.Context) RackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RackOutput)
}

func (i *Rack) ToOutput(ctx context.Context) pulumix.Output[*Rack] {
	return pulumix.Output[*Rack]{
		OutputState: i.ToRackOutputWithContext(ctx).OutputState,
	}
}

type RackOutput struct{ *pulumi.OutputState }

func (RackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rack)(nil)).Elem()
}

func (o RackOutput) ToRackOutput() RackOutput {
	return o
}

func (o RackOutput) ToRackOutputWithContext(ctx context.Context) RackOutput {
	return o
}

func (o RackOutput) ToOutput(ctx context.Context) pulumix.Output[*Rack] {
	return pulumix.Output[*Rack]{
		OutputState: o.OutputState,
	}
}

// The value that will be used for machines in this rack to represent the availability zones that can be referenced by Hybrid AKS Clusters for node arrangement.
func (o RackOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The resource ID of the cluster the rack is created for. This value is set when the rack is created by the cluster.
func (o RackOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The more detailed status of the rack.
func (o RackOutput) DetailedStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.DetailedStatus }).(pulumi.StringOutput)
}

// The descriptive message about the current detailed status.
func (o RackOutput) DetailedStatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.DetailedStatusMessage }).(pulumi.StringOutput)
}

// The extended location of the cluster associated with the resource.
func (o RackOutput) ExtendedLocation() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *Rack) ExtendedLocationResponseOutput { return v.ExtendedLocation }).(ExtendedLocationResponseOutput)
}

// The geo-location where the resource lives
func (o RackOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o RackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the rack resource.
func (o RackOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The free-form description of the rack location. (e.g. “DTN Datacenter, Floor 3, Isle 9, Rack 2B”)
func (o RackOutput) RackLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.RackLocation }).(pulumi.StringOutput)
}

// The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.
func (o RackOutput) RackSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.RackSerialNumber }).(pulumi.StringOutput)
}

// The SKU for the rack.
func (o RackOutput) RackSkuId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.RackSkuId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o RackOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Rack) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o RackOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RackOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Rack) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RackOutput{})
}
