// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221212preview

// The access level allowed for the users in this key set.
type BareMetalMachineKeySetPrivilegeLevel string

const (
	BareMetalMachineKeySetPrivilegeLevelStandard  = BareMetalMachineKeySetPrivilegeLevel("Standard")
	BareMetalMachineKeySetPrivilegeLevelSuperuser = BareMetalMachineKeySetPrivilegeLevel("Superuser")
)

// The access level allowed for the users in this key set.
type BmcKeySetPrivilegeLevel string

const (
	BmcKeySetPrivilegeLevelReadOnly      = BmcKeySetPrivilegeLevel("ReadOnly")
	BmcKeySetPrivilegeLevelAdministrator = BmcKeySetPrivilegeLevel("Administrator")
)

// The indicator of whether the platform default endpoints are allowed for the egress traffic.
type CloudServicesNetworkEnableDefaultEgressEndpoints string

const (
	CloudServicesNetworkEnableDefaultEgressEndpointsTrue  = CloudServicesNetworkEnableDefaultEgressEndpoints("True")
	CloudServicesNetworkEnableDefaultEgressEndpointsFalse = CloudServicesNetworkEnableDefaultEgressEndpoints("False")
)

// The type of rack configuration for the cluster.
type ClusterType string

const (
	ClusterTypeSingleRack = ClusterType("SingleRack")
	ClusterTypeMultiRack  = ClusterType("MultiRack")
)

// The indicator of whether the console access is enabled.
type ConsoleEnabled string

const (
	ConsoleEnabledTrue  = ConsoleEnabled("True")
	ConsoleEnabledFalse = ConsoleEnabled("False")
)

// The indicator of whether this is the default gateway.
// Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.
type DefaultGateway string

const (
	DefaultGatewayTrue  = DefaultGateway("True")
	DefaultGatewayFalse = DefaultGateway("False")
)

// The indicator of whether or not to disable IPAM allocation on the network attachment definition injected into the Hybrid AKS Cluster.
type HybridAksIpamEnabled string

const (
	HybridAksIpamEnabledTrue  = HybridAksIpamEnabled("True")
	HybridAksIpamEnabledFalse = HybridAksIpamEnabled("False")
)

// The network plugin type for Hybrid AKS.
type HybridAksPluginType string

const (
	HybridAksPluginTypeDPDK     = HybridAksPluginType("DPDK")
	HybridAksPluginTypeSRIOV    = HybridAksPluginType("SRIOV")
	HybridAksPluginTypeOSDevice = HybridAksPluginType("OSDevice")
)

// The type of the IP address allocation, defaulted to "DualStack".
type IpAllocationType string

const (
	IpAllocationTypeIPV4      = IpAllocationType("IPV4")
	IpAllocationTypeIPV6      = IpAllocationType("IPV6")
	IpAllocationTypeDualStack = IpAllocationType("DualStack")
)

// The strategy for creating the OS disk.
type OsDiskCreateOption string

const (
	OsDiskCreateOptionEphemeral = OsDiskCreateOption("Ephemeral")
)

// The strategy for deleting the OS disk.
type OsDiskDeleteOption string

const (
	OsDiskDeleteOptionDelete = OsDiskDeleteOption("Delete")
)

// Selection of how the type evaluation is applied to the cluster calculation.
type ValidationThresholdGrouping string

const (
	ValidationThresholdGroupingPerCluster = ValidationThresholdGrouping("PerCluster")
	ValidationThresholdGroupingPerRack    = ValidationThresholdGrouping("PerRack")
)

// Selection of how the threshold should be evaluated.
type ValidationThresholdType string

const (
	ValidationThresholdTypeCountSuccess   = ValidationThresholdType("CountSuccess")
	ValidationThresholdTypePercentSuccess = ValidationThresholdType("PercentSuccess")
)

// Selects the boot method for the virtual machine.
type VirtualMachineBootMethod string

const (
	VirtualMachineBootMethodUEFI = VirtualMachineBootMethod("UEFI")
	VirtualMachineBootMethodBIOS = VirtualMachineBootMethod("BIOS")
)

// The type of the device model to use.
type VirtualMachineDeviceModelType string

const (
	VirtualMachineDeviceModelTypeT1 = VirtualMachineDeviceModelType("T1")
	VirtualMachineDeviceModelTypeT2 = VirtualMachineDeviceModelType("T2")
)

// The IP allocation mechanism for the virtual machine.
// Dynamic and Static are only valid for l3Network which may also specify Disabled.
// Otherwise, Disabled is the only permitted value.
type VirtualMachineIPAllocationMethod string

const (
	VirtualMachineIPAllocationMethodDynamic  = VirtualMachineIPAllocationMethod("Dynamic")
	VirtualMachineIPAllocationMethodStatic   = VirtualMachineIPAllocationMethod("Static")
	VirtualMachineIPAllocationMethodDisabled = VirtualMachineIPAllocationMethod("Disabled")
)

// Field Deprecated, the value will be ignored if provided. The indicator of whether one of the specified CPU cores is isolated to run the emulator thread for this virtual machine.
type VirtualMachineIsolateEmulatorThread string

const (
	VirtualMachineIsolateEmulatorThreadTrue  = VirtualMachineIsolateEmulatorThread("True")
	VirtualMachineIsolateEmulatorThreadFalse = VirtualMachineIsolateEmulatorThread("False")
)

// The scope for the virtual machine affinity or anti-affinity placement hint. It should always be "Machine" in the case of node affinity.
type VirtualMachinePlacementHintPodAffinityScope string

const (
	VirtualMachinePlacementHintPodAffinityScopeRack    = VirtualMachinePlacementHintPodAffinityScope("Rack")
	VirtualMachinePlacementHintPodAffinityScopeMachine = VirtualMachinePlacementHintPodAffinityScope("Machine")
)

// The specification of whether this hint supports affinity or anti-affinity with the referenced resources.
type VirtualMachinePlacementHintType string

const (
	VirtualMachinePlacementHintTypeAffinity     = VirtualMachinePlacementHintType("Affinity")
	VirtualMachinePlacementHintTypeAntiAffinity = VirtualMachinePlacementHintType("AntiAffinity")
)

// The indicator of whether the hint is a hard or soft requirement during scheduling.
type VirtualMachineSchedulingExecution string

const (
	VirtualMachineSchedulingExecutionHard = VirtualMachineSchedulingExecution("Hard")
	VirtualMachineSchedulingExecutionSoft = VirtualMachineSchedulingExecution("Soft")
)

// Field Deprecated, use virtualizationModel instead. The type of the virtio interface.
type VirtualMachineVirtioInterfaceType string

const (
	VirtualMachineVirtioInterfaceTypeModern       = VirtualMachineVirtioInterfaceType("Modern")
	VirtualMachineVirtioInterfaceTypeTransitional = VirtualMachineVirtioInterfaceType("Transitional")
)

func init() {
}
