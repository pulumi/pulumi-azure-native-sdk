// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package offazurespringboot

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The springbootapps envelope resource definition.
// Azure REST API version: 2024-04-01-preview.
type Springbootapp struct {
	pulumi.CustomResourceState

	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The springbootapps resource definition.
	Properties SpringbootappsPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSpringbootapp registers a new resource with the given unique name, arguments, and options.
func NewSpringbootapp(ctx *pulumi.Context,
	name string, args *SpringbootappArgs, opts ...pulumi.ResourceOption) (*Springbootapp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SiteName == nil {
		return nil, errors.New("invalid value for required argument 'SiteName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:offazurespringboot:springbootapp"),
		},
		{
			Type: pulumi.String("azure-native:offazurespringboot/v20240401preview:Springbootapp"),
		},
		{
			Type: pulumi.String("azure-native:offazurespringboot/v20240401preview:springbootapp"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Springbootapp
	err := ctx.RegisterResource("azure-native:offazurespringboot:Springbootapp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpringbootapp gets an existing Springbootapp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpringbootapp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpringbootappState, opts ...pulumi.ResourceOption) (*Springbootapp, error) {
	var resource Springbootapp
	err := ctx.ReadResource("azure-native:offazurespringboot:Springbootapp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Springbootapp resources.
type springbootappState struct {
}

type SpringbootappState struct {
}

func (SpringbootappState) ElementType() reflect.Type {
	return reflect.TypeOf((*springbootappState)(nil)).Elem()
}

type springbootappArgs struct {
	// The springbootapps resource definition.
	Properties *SpringbootappsProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The springbootsites name.
	SiteName string `pulumi:"siteName"`
	// The springbootapps name.
	SpringbootappsName *string `pulumi:"springbootappsName"`
}

// The set of arguments for constructing a Springbootapp resource.
type SpringbootappArgs struct {
	// The springbootapps resource definition.
	Properties SpringbootappsPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The springbootsites name.
	SiteName pulumi.StringInput
	// The springbootapps name.
	SpringbootappsName pulumi.StringPtrInput
}

func (SpringbootappArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*springbootappArgs)(nil)).Elem()
}

type SpringbootappInput interface {
	pulumi.Input

	ToSpringbootappOutput() SpringbootappOutput
	ToSpringbootappOutputWithContext(ctx context.Context) SpringbootappOutput
}

func (*Springbootapp) ElementType() reflect.Type {
	return reflect.TypeOf((**Springbootapp)(nil)).Elem()
}

func (i *Springbootapp) ToSpringbootappOutput() SpringbootappOutput {
	return i.ToSpringbootappOutputWithContext(context.Background())
}

func (i *Springbootapp) ToSpringbootappOutputWithContext(ctx context.Context) SpringbootappOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpringbootappOutput)
}

type SpringbootappOutput struct{ *pulumi.OutputState }

func (SpringbootappOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Springbootapp)(nil)).Elem()
}

func (o SpringbootappOutput) ToSpringbootappOutput() SpringbootappOutput {
	return o
}

func (o SpringbootappOutput) ToSpringbootappOutputWithContext(ctx context.Context) SpringbootappOutput {
	return o
}

// The name of the resource
func (o SpringbootappOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Springbootapp) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The springbootapps resource definition.
func (o SpringbootappOutput) Properties() SpringbootappsPropertiesResponseOutput {
	return o.ApplyT(func(v *Springbootapp) SpringbootappsPropertiesResponseOutput { return v.Properties }).(SpringbootappsPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SpringbootappOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Springbootapp) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SpringbootappOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Springbootapp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SpringbootappOutput{})
}
