// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240501preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A container group profile.
type ContainerGroupProfile struct {
	pulumi.CustomResourceState

	// The properties for confidential container group
	ConfidentialComputeProperties ConfidentialComputePropertiesResponsePtrOutput `pulumi:"confidentialComputeProperties"`
	// The containers within the container group.
	Containers ContainerResponseArrayOutput `pulumi:"containers"`
	// The diagnostic information for a container group.
	Diagnostics ContainerGroupDiagnosticsResponsePtrOutput `pulumi:"diagnostics"`
	// The encryption properties for a container group.
	EncryptionProperties EncryptionPropertiesResponsePtrOutput `pulumi:"encryptionProperties"`
	// extensions used by virtual kubelet
	Extensions DeploymentExtensionSpecResponseArrayOutput `pulumi:"extensions"`
	// The image registry credentials by which the container group is created from.
	ImageRegistryCredentials ImageRegistryCredentialResponseArrayOutput `pulumi:"imageRegistryCredentials"`
	// The init containers for a container group.
	InitContainers InitContainerDefinitionResponseArrayOutput `pulumi:"initContainers"`
	// The IP address type of the container group.
	IpAddress IpAddressResponsePtrOutput `pulumi:"ipAddress"`
	// The resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The operating system type required by the containers in the container group.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// The priority of the container group.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// Restart policy for all containers within the container group.
	// - `Always` Always restart
	// - `OnFailure` Restart on failure
	// - `Never` Never restart
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// The container group profile current revision number. This only appears in the response.
	Revision pulumi.IntOutput `pulumi:"revision"`
	// The SKU for a container group.
	Sku pulumi.StringPtrOutput `pulumi:"sku"`
	// The resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The list of volumes that can be mounted by containers in this container group.
	Volumes VolumeResponseArrayOutput `pulumi:"volumes"`
	// The zones for the container group.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewContainerGroupProfile registers a new resource with the given unique name, arguments, and options.
func NewContainerGroupProfile(ctx *pulumi.Context,
	name string, args *ContainerGroupProfileArgs, opts ...pulumi.ResourceOption) (*ContainerGroupProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Containers == nil {
		return nil, errors.New("invalid value for required argument 'Containers'")
	}
	if args.OsType == nil {
		return nil, errors.New("invalid value for required argument 'OsType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.IpAddress != nil {
		args.IpAddress = args.IpAddress.ToIpAddressPtrOutput().ApplyT(func(v *IpAddress) *IpAddress { return v.Defaults() }).(IpAddressPtrOutput)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerinstance:ContainerGroupProfile"),
		},
		{
			Type: pulumi.String("azure-native:containerinstance/v20241101preview:ContainerGroupProfile"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ContainerGroupProfile
	err := ctx.RegisterResource("azure-native:containerinstance/v20240501preview:ContainerGroupProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerGroupProfile gets an existing ContainerGroupProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerGroupProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerGroupProfileState, opts ...pulumi.ResourceOption) (*ContainerGroupProfile, error) {
	var resource ContainerGroupProfile
	err := ctx.ReadResource("azure-native:containerinstance/v20240501preview:ContainerGroupProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerGroupProfile resources.
type containerGroupProfileState struct {
}

type ContainerGroupProfileState struct {
}

func (ContainerGroupProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerGroupProfileState)(nil)).Elem()
}

type containerGroupProfileArgs struct {
	// The properties for confidential container group
	ConfidentialComputeProperties *ConfidentialComputeProperties `pulumi:"confidentialComputeProperties"`
	// The name of the container group profile.
	ContainerGroupProfileName *string `pulumi:"containerGroupProfileName"`
	// The containers within the container group.
	Containers []Container `pulumi:"containers"`
	// The diagnostic information for a container group.
	Diagnostics *ContainerGroupDiagnostics `pulumi:"diagnostics"`
	// The encryption properties for a container group.
	EncryptionProperties *EncryptionProperties `pulumi:"encryptionProperties"`
	// extensions used by virtual kubelet
	Extensions []DeploymentExtensionSpec `pulumi:"extensions"`
	// The image registry credentials by which the container group is created from.
	ImageRegistryCredentials []ImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	// The init containers for a container group.
	InitContainers []InitContainerDefinition `pulumi:"initContainers"`
	// The IP address type of the container group.
	IpAddress *IpAddress `pulumi:"ipAddress"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The operating system type required by the containers in the container group.
	OsType string `pulumi:"osType"`
	// The priority of the container group.
	Priority *string `pulumi:"priority"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Restart policy for all containers within the container group.
	// - `Always` Always restart
	// - `OnFailure` Restart on failure
	// - `Never` Never restart
	RestartPolicy *string `pulumi:"restartPolicy"`
	// The SKU for a container group.
	Sku *string `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The list of volumes that can be mounted by containers in this container group.
	Volumes []Volume `pulumi:"volumes"`
	// The zones for the container group.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a ContainerGroupProfile resource.
type ContainerGroupProfileArgs struct {
	// The properties for confidential container group
	ConfidentialComputeProperties ConfidentialComputePropertiesPtrInput
	// The name of the container group profile.
	ContainerGroupProfileName pulumi.StringPtrInput
	// The containers within the container group.
	Containers ContainerArrayInput
	// The diagnostic information for a container group.
	Diagnostics ContainerGroupDiagnosticsPtrInput
	// The encryption properties for a container group.
	EncryptionProperties EncryptionPropertiesPtrInput
	// extensions used by virtual kubelet
	Extensions DeploymentExtensionSpecArrayInput
	// The image registry credentials by which the container group is created from.
	ImageRegistryCredentials ImageRegistryCredentialArrayInput
	// The init containers for a container group.
	InitContainers InitContainerDefinitionArrayInput
	// The IP address type of the container group.
	IpAddress IpAddressPtrInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The operating system type required by the containers in the container group.
	OsType pulumi.StringInput
	// The priority of the container group.
	Priority pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Restart policy for all containers within the container group.
	// - `Always` Always restart
	// - `OnFailure` Restart on failure
	// - `Never` Never restart
	RestartPolicy pulumi.StringPtrInput
	// The SKU for a container group.
	Sku pulumi.StringPtrInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The list of volumes that can be mounted by containers in this container group.
	Volumes VolumeArrayInput
	// The zones for the container group.
	Zones pulumi.StringArrayInput
}

func (ContainerGroupProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerGroupProfileArgs)(nil)).Elem()
}

type ContainerGroupProfileInput interface {
	pulumi.Input

	ToContainerGroupProfileOutput() ContainerGroupProfileOutput
	ToContainerGroupProfileOutputWithContext(ctx context.Context) ContainerGroupProfileOutput
}

func (*ContainerGroupProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupProfile)(nil)).Elem()
}

func (i *ContainerGroupProfile) ToContainerGroupProfileOutput() ContainerGroupProfileOutput {
	return i.ToContainerGroupProfileOutputWithContext(context.Background())
}

func (i *ContainerGroupProfile) ToContainerGroupProfileOutputWithContext(ctx context.Context) ContainerGroupProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupProfileOutput)
}

type ContainerGroupProfileOutput struct{ *pulumi.OutputState }

func (ContainerGroupProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupProfile)(nil)).Elem()
}

func (o ContainerGroupProfileOutput) ToContainerGroupProfileOutput() ContainerGroupProfileOutput {
	return o
}

func (o ContainerGroupProfileOutput) ToContainerGroupProfileOutputWithContext(ctx context.Context) ContainerGroupProfileOutput {
	return o
}

// The properties for confidential container group
func (o ContainerGroupProfileOutput) ConfidentialComputeProperties() ConfidentialComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) ConfidentialComputePropertiesResponsePtrOutput {
		return v.ConfidentialComputeProperties
	}).(ConfidentialComputePropertiesResponsePtrOutput)
}

// The containers within the container group.
func (o ContainerGroupProfileOutput) Containers() ContainerResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) ContainerResponseArrayOutput { return v.Containers }).(ContainerResponseArrayOutput)
}

// The diagnostic information for a container group.
func (o ContainerGroupProfileOutput) Diagnostics() ContainerGroupDiagnosticsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) ContainerGroupDiagnosticsResponsePtrOutput { return v.Diagnostics }).(ContainerGroupDiagnosticsResponsePtrOutput)
}

// The encryption properties for a container group.
func (o ContainerGroupProfileOutput) EncryptionProperties() EncryptionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) EncryptionPropertiesResponsePtrOutput { return v.EncryptionProperties }).(EncryptionPropertiesResponsePtrOutput)
}

// extensions used by virtual kubelet
func (o ContainerGroupProfileOutput) Extensions() DeploymentExtensionSpecResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) DeploymentExtensionSpecResponseArrayOutput { return v.Extensions }).(DeploymentExtensionSpecResponseArrayOutput)
}

// The image registry credentials by which the container group is created from.
func (o ContainerGroupProfileOutput) ImageRegistryCredentials() ImageRegistryCredentialResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) ImageRegistryCredentialResponseArrayOutput {
		return v.ImageRegistryCredentials
	}).(ImageRegistryCredentialResponseArrayOutput)
}

// The init containers for a container group.
func (o ContainerGroupProfileOutput) InitContainers() InitContainerDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) InitContainerDefinitionResponseArrayOutput { return v.InitContainers }).(InitContainerDefinitionResponseArrayOutput)
}

// The IP address type of the container group.
func (o ContainerGroupProfileOutput) IpAddress() IpAddressResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) IpAddressResponsePtrOutput { return v.IpAddress }).(IpAddressResponsePtrOutput)
}

// The resource location.
func (o ContainerGroupProfileOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o ContainerGroupProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The operating system type required by the containers in the container group.
func (o ContainerGroupProfileOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// The priority of the container group.
func (o ContainerGroupProfileOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// Restart policy for all containers within the container group.
// - `Always` Always restart
// - `OnFailure` Restart on failure
// - `Never` Never restart
func (o ContainerGroupProfileOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// The container group profile current revision number. This only appears in the response.
func (o ContainerGroupProfileOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// The SKU for a container group.
func (o ContainerGroupProfileOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringPtrOutput { return v.Sku }).(pulumi.StringPtrOutput)
}

// The resource tags.
func (o ContainerGroupProfileOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type.
func (o ContainerGroupProfileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The list of volumes that can be mounted by containers in this container group.
func (o ContainerGroupProfileOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) VolumeResponseArrayOutput { return v.Volumes }).(VolumeResponseArrayOutput)
}

// The zones for the container group.
func (o ContainerGroupProfileOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerGroupProfile) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainerGroupProfileOutput{})
}
