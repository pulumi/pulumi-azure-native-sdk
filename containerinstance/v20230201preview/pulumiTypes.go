// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolume struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// AzureFileVolumeInput is an input type that accepts AzureFileVolumeArgs and AzureFileVolumeOutput values.
// You can construct a concrete instance of `AzureFileVolumeInput` via:
//
//	AzureFileVolumeArgs{...}
type AzureFileVolumeInput interface {
	pulumi.Input

	ToAzureFileVolumeOutput() AzureFileVolumeOutput
	ToAzureFileVolumeOutputWithContext(context.Context) AzureFileVolumeOutput
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeArgs struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName pulumi.StringInput `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey pulumi.StringPtrInput `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName pulumi.StringInput `pulumi:"storageAccountName"`
}

func (AzureFileVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolume)(nil)).Elem()
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutput() AzureFileVolumeOutput {
	return i.ToAzureFileVolumeOutputWithContext(context.Background())
}

func (i AzureFileVolumeArgs) ToAzureFileVolumeOutputWithContext(ctx context.Context) AzureFileVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeOutput)
}

func (i AzureFileVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[AzureFileVolume] {
	return pulumix.Output[AzureFileVolume]{
		OutputState: i.ToAzureFileVolumeOutputWithContext(ctx).OutputState,
	}
}

func (i AzureFileVolumeArgs) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return i.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (i AzureFileVolumeArgs) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumeOutput).ToAzureFileVolumePtrOutputWithContext(ctx)
}

// AzureFileVolumePtrInput is an input type that accepts AzureFileVolumeArgs, AzureFileVolumePtr and AzureFileVolumePtrOutput values.
// You can construct a concrete instance of `AzureFileVolumePtrInput` via:
//
//	        AzureFileVolumeArgs{...}
//
//	or:
//
//	        nil
type AzureFileVolumePtrInput interface {
	pulumi.Input

	ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput
	ToAzureFileVolumePtrOutputWithContext(context.Context) AzureFileVolumePtrOutput
}

type azureFileVolumePtrType AzureFileVolumeArgs

func AzureFileVolumePtr(v *AzureFileVolumeArgs) AzureFileVolumePtrInput {
	return (*azureFileVolumePtrType)(v)
}

func (*azureFileVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolume)(nil)).Elem()
}

func (i *azureFileVolumePtrType) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return i.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (i *azureFileVolumePtrType) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileVolumePtrOutput)
}

func (i *azureFileVolumePtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureFileVolume] {
	return pulumix.Output[*AzureFileVolume]{
		OutputState: i.ToAzureFileVolumePtrOutputWithContext(ctx).OutputState,
	}
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolume)(nil)).Elem()
}

func (o AzureFileVolumeOutput) ToAzureFileVolumeOutput() AzureFileVolumeOutput {
	return o
}

func (o AzureFileVolumeOutput) ToAzureFileVolumeOutputWithContext(ctx context.Context) AzureFileVolumeOutput {
	return o
}

func (o AzureFileVolumeOutput) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return o.ToAzureFileVolumePtrOutputWithContext(context.Background())
}

func (o AzureFileVolumeOutput) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureFileVolume) *AzureFileVolume {
		return &v
	}).(AzureFileVolumePtrOutput)
}

func (o AzureFileVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[AzureFileVolume] {
	return pulumix.Output[AzureFileVolume]{
		OutputState: o.OutputState,
	}
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolume) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolume) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolume) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

type AzureFileVolumePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolume)(nil)).Elem()
}

func (o AzureFileVolumePtrOutput) ToAzureFileVolumePtrOutput() AzureFileVolumePtrOutput {
	return o
}

func (o AzureFileVolumePtrOutput) ToAzureFileVolumePtrOutputWithContext(ctx context.Context) AzureFileVolumePtrOutput {
	return o
}

func (o AzureFileVolumePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureFileVolume] {
	return pulumix.Output[*AzureFileVolume]{
		OutputState: o.OutputState,
	}
}

func (o AzureFileVolumePtrOutput) Elem() AzureFileVolumeOutput {
	return o.ApplyT(func(v *AzureFileVolume) AzureFileVolume {
		if v != nil {
			return *v
		}
		var ret AzureFileVolume
		return ret
	}).(AzureFileVolumeOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolume) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponse struct {
	// The flag indicating whether the Azure File shared mounted as a volume is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
	// The name of the Azure File share to be mounted as a volume.
	ShareName string `pulumi:"shareName"`
	// The storage account access key used to access the Azure File share.
	StorageAccountKey *string `pulumi:"storageAccountKey"`
	// The name of the storage account that contains the Azure File share.
	StorageAccountName string `pulumi:"storageAccountName"`
}

// The properties of the Azure File volume. Azure File shares are mounted as volumes.
type AzureFileVolumeResponseOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileVolumeResponse)(nil)).Elem()
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutput() AzureFileVolumeResponseOutput {
	return o
}

func (o AzureFileVolumeResponseOutput) ToAzureFileVolumeResponseOutputWithContext(ctx context.Context) AzureFileVolumeResponseOutput {
	return o
}

func (o AzureFileVolumeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureFileVolumeResponse] {
	return pulumix.Output[AzureFileVolumeResponse]{
		OutputState: o.OutputState,
	}
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeResponseOutput) ShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.ShareName }).(pulumi.StringOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) *string { return v.StorageAccountKey }).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeResponseOutput) StorageAccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileVolumeResponse) string { return v.StorageAccountName }).(pulumi.StringOutput)
}

type AzureFileVolumeResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureFileVolumeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureFileVolumeResponse)(nil)).Elem()
}

func (o AzureFileVolumeResponsePtrOutput) ToAzureFileVolumeResponsePtrOutput() AzureFileVolumeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeResponsePtrOutput) ToAzureFileVolumeResponsePtrOutputWithContext(ctx context.Context) AzureFileVolumeResponsePtrOutput {
	return o
}

func (o AzureFileVolumeResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureFileVolumeResponse] {
	return pulumix.Output[*AzureFileVolumeResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureFileVolumeResponsePtrOutput) Elem() AzureFileVolumeResponseOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) AzureFileVolumeResponse {
		if v != nil {
			return *v
		}
		var ret AzureFileVolumeResponse
		return ret
	}).(AzureFileVolumeResponseOutput)
}

// The flag indicating whether the Azure File shared mounted as a volume is read-only.
func (o AzureFileVolumeResponsePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// The name of the Azure File share to be mounted as a volume.
func (o AzureFileVolumeResponsePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ShareName
	}).(pulumi.StringPtrOutput)
}

// The storage account access key used to access the Azure File share.
func (o AzureFileVolumeResponsePtrOutput) StorageAccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountKey
	}).(pulumi.StringPtrOutput)
}

// The name of the storage account that contains the Azure File share.
func (o AzureFileVolumeResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureFileVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// A container instance.
type Container struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The liveness probe.
	LivenessProbe *ContainerProbe `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPort `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe *ContainerProbe `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirements `pulumi:"resources"`
	// The container security properties.
	SecurityContext *SecurityContextDefinition `pulumi:"securityContext"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//	ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A container instance.
type ContainerArgs struct {
	// The commands to execute within the container instance in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image pulumi.StringInput `pulumi:"image"`
	// The liveness probe.
	LivenessProbe ContainerProbePtrInput `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name pulumi.StringInput `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports ContainerPortArrayInput `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe ContainerProbePtrInput `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsInput `pulumi:"resources"`
	// The container security properties.
	SecurityContext SecurityContextDefinitionPtrInput `pulumi:"securityContext"`
	// The volume mounts available to the container instance.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

func (i ContainerArgs) ToOutput(ctx context.Context) pulumix.Output[Container] {
	return pulumix.Output[Container]{
		OutputState: i.ToContainerOutputWithContext(ctx).OutputState,
	}
}

// ContainerArrayInput is an input type that accepts ContainerArray and ContainerArrayOutput values.
// You can construct a concrete instance of `ContainerArrayInput` via:
//
//	ContainerArray{ ContainerArgs{...} }
type ContainerArrayInput interface {
	pulumi.Input

	ToContainerArrayOutput() ContainerArrayOutput
	ToContainerArrayOutputWithContext(context.Context) ContainerArrayOutput
}

type ContainerArray []ContainerInput

func (ContainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (i ContainerArray) ToContainerArrayOutput() ContainerArrayOutput {
	return i.ToContainerArrayOutputWithContext(context.Background())
}

func (i ContainerArray) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerArrayOutput)
}

func (i ContainerArray) ToOutput(ctx context.Context) pulumix.Output[[]Container] {
	return pulumix.Output[[]Container]{
		OutputState: i.ToContainerArrayOutputWithContext(ctx).OutputState,
	}
}

// A container instance.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func (o ContainerOutput) ToOutput(ctx context.Context) pulumix.Output[Container] {
	return pulumix.Output[Container]{
		OutputState: o.OutputState,
	}
}

// The commands to execute within the container instance in exec form.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v Container) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Image }).(pulumi.StringOutput)
}

// The liveness probe.
func (o ContainerOutput) LivenessProbe() ContainerProbePtrOutput {
	return o.ApplyT(func(v Container) *ContainerProbe { return v.LivenessProbe }).(ContainerProbePtrOutput)
}

// The user-provided name of the container instance.
func (o ContainerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Container) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerOutput) Ports() ContainerPortArrayOutput {
	return o.ApplyT(func(v Container) []ContainerPort { return v.Ports }).(ContainerPortArrayOutput)
}

// The readiness probe.
func (o ContainerOutput) ReadinessProbe() ContainerProbePtrOutput {
	return o.ApplyT(func(v Container) *ContainerProbe { return v.ReadinessProbe }).(ContainerProbePtrOutput)
}

// The resource requirements of the container instance.
func (o ContainerOutput) Resources() ResourceRequirementsOutput {
	return o.ApplyT(func(v Container) ResourceRequirements { return v.Resources }).(ResourceRequirementsOutput)
}

// The container security properties.
func (o ContainerOutput) SecurityContext() SecurityContextDefinitionPtrOutput {
	return o.ApplyT(func(v Container) *SecurityContextDefinition { return v.SecurityContext }).(SecurityContextDefinitionPtrOutput)
}

// The volume mounts available to the container instance.
func (o ContainerOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v Container) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

type ContainerArrayOutput struct{ *pulumi.OutputState }

func (ContainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Container)(nil)).Elem()
}

func (o ContainerArrayOutput) ToContainerArrayOutput() ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToContainerArrayOutputWithContext(ctx context.Context) ContainerArrayOutput {
	return o
}

func (o ContainerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Container] {
	return pulumix.Output[[]Container]{
		OutputState: o.OutputState,
	}
}

func (o ContainerArrayOutput) Index(i pulumi.IntInput) ContainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Container {
		return vs[0].([]Container)[vs[1].(int)]
	}).(ContainerOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExec struct {
	// The commands to execute within the container.
	Command []string `pulumi:"command"`
}

// ContainerExecInput is an input type that accepts ContainerExecArgs and ContainerExecOutput values.
// You can construct a concrete instance of `ContainerExecInput` via:
//
//	ContainerExecArgs{...}
type ContainerExecInput interface {
	pulumi.Input

	ToContainerExecOutput() ContainerExecOutput
	ToContainerExecOutputWithContext(context.Context) ContainerExecOutput
}

// The container execution command, for liveness or readiness probe
type ContainerExecArgs struct {
	// The commands to execute within the container.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ContainerExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExec)(nil)).Elem()
}

func (i ContainerExecArgs) ToContainerExecOutput() ContainerExecOutput {
	return i.ToContainerExecOutputWithContext(context.Background())
}

func (i ContainerExecArgs) ToContainerExecOutputWithContext(ctx context.Context) ContainerExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecOutput)
}

func (i ContainerExecArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerExec] {
	return pulumix.Output[ContainerExec]{
		OutputState: i.ToContainerExecOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerExecArgs) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return i.ToContainerExecPtrOutputWithContext(context.Background())
}

func (i ContainerExecArgs) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecOutput).ToContainerExecPtrOutputWithContext(ctx)
}

// ContainerExecPtrInput is an input type that accepts ContainerExecArgs, ContainerExecPtr and ContainerExecPtrOutput values.
// You can construct a concrete instance of `ContainerExecPtrInput` via:
//
//	        ContainerExecArgs{...}
//
//	or:
//
//	        nil
type ContainerExecPtrInput interface {
	pulumi.Input

	ToContainerExecPtrOutput() ContainerExecPtrOutput
	ToContainerExecPtrOutputWithContext(context.Context) ContainerExecPtrOutput
}

type containerExecPtrType ContainerExecArgs

func ContainerExecPtr(v *ContainerExecArgs) ContainerExecPtrInput {
	return (*containerExecPtrType)(v)
}

func (*containerExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExec)(nil)).Elem()
}

func (i *containerExecPtrType) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return i.ToContainerExecPtrOutputWithContext(context.Background())
}

func (i *containerExecPtrType) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerExecPtrOutput)
}

func (i *containerExecPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerExec] {
	return pulumix.Output[*ContainerExec]{
		OutputState: i.ToContainerExecPtrOutputWithContext(ctx).OutputState,
	}
}

// The container execution command, for liveness or readiness probe
type ContainerExecOutput struct{ *pulumi.OutputState }

func (ContainerExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExec)(nil)).Elem()
}

func (o ContainerExecOutput) ToContainerExecOutput() ContainerExecOutput {
	return o
}

func (o ContainerExecOutput) ToContainerExecOutputWithContext(ctx context.Context) ContainerExecOutput {
	return o
}

func (o ContainerExecOutput) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return o.ToContainerExecPtrOutputWithContext(context.Background())
}

func (o ContainerExecOutput) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerExec) *ContainerExec {
		return &v
	}).(ContainerExecPtrOutput)
}

func (o ContainerExecOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerExec] {
	return pulumix.Output[ContainerExec]{
		OutputState: o.OutputState,
	}
}

// The commands to execute within the container.
func (o ContainerExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ContainerExecPtrOutput struct{ *pulumi.OutputState }

func (ContainerExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExec)(nil)).Elem()
}

func (o ContainerExecPtrOutput) ToContainerExecPtrOutput() ContainerExecPtrOutput {
	return o
}

func (o ContainerExecPtrOutput) ToContainerExecPtrOutputWithContext(ctx context.Context) ContainerExecPtrOutput {
	return o
}

func (o ContainerExecPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerExec] {
	return pulumix.Output[*ContainerExec]{
		OutputState: o.OutputState,
	}
}

func (o ContainerExecPtrOutput) Elem() ContainerExecOutput {
	return o.ApplyT(func(v *ContainerExec) ContainerExec {
		if v != nil {
			return *v
		}
		var ret ContainerExec
		return ret
	}).(ContainerExecOutput)
}

// The commands to execute within the container.
func (o ContainerExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// The container execution command, for liveness or readiness probe
type ContainerExecResponse struct {
	// The commands to execute within the container.
	Command []string `pulumi:"command"`
}

// The container execution command, for liveness or readiness probe
type ContainerExecResponseOutput struct{ *pulumi.OutputState }

func (ContainerExecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerExecResponse)(nil)).Elem()
}

func (o ContainerExecResponseOutput) ToContainerExecResponseOutput() ContainerExecResponseOutput {
	return o
}

func (o ContainerExecResponseOutput) ToContainerExecResponseOutputWithContext(ctx context.Context) ContainerExecResponseOutput {
	return o
}

func (o ContainerExecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerExecResponse] {
	return pulumix.Output[ContainerExecResponse]{
		OutputState: o.OutputState,
	}
}

// The commands to execute within the container.
func (o ContainerExecResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerExecResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ContainerExecResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerExecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerExecResponse)(nil)).Elem()
}

func (o ContainerExecResponsePtrOutput) ToContainerExecResponsePtrOutput() ContainerExecResponsePtrOutput {
	return o
}

func (o ContainerExecResponsePtrOutput) ToContainerExecResponsePtrOutputWithContext(ctx context.Context) ContainerExecResponsePtrOutput {
	return o
}

func (o ContainerExecResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerExecResponse] {
	return pulumix.Output[*ContainerExecResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerExecResponsePtrOutput) Elem() ContainerExecResponseOutput {
	return o.ApplyT(func(v *ContainerExecResponse) ContainerExecResponse {
		if v != nil {
			return *v
		}
		var ret ContainerExecResponse
		return ret
	}).(ContainerExecResponseOutput)
}

// The commands to execute within the container.
func (o ContainerExecResponsePtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerExecResponse) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnostics struct {
	// Container group log analytics information.
	LogAnalytics *LogAnalytics `pulumi:"logAnalytics"`
}

// ContainerGroupDiagnosticsInput is an input type that accepts ContainerGroupDiagnosticsArgs and ContainerGroupDiagnosticsOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsInput` via:
//
//	ContainerGroupDiagnosticsArgs{...}
type ContainerGroupDiagnosticsInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput
	ToContainerGroupDiagnosticsOutputWithContext(context.Context) ContainerGroupDiagnosticsOutput
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsArgs struct {
	// Container group log analytics information.
	LogAnalytics LogAnalyticsPtrInput `pulumi:"logAnalytics"`
}

func (ContainerGroupDiagnosticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnostics)(nil)).Elem()
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput {
	return i.ToContainerGroupDiagnosticsOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsOutput)
}

func (i ContainerGroupDiagnosticsArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupDiagnostics] {
	return pulumix.Output[ContainerGroupDiagnostics]{
		OutputState: i.ToContainerGroupDiagnosticsOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return i.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (i ContainerGroupDiagnosticsArgs) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsOutput).ToContainerGroupDiagnosticsPtrOutputWithContext(ctx)
}

// ContainerGroupDiagnosticsPtrInput is an input type that accepts ContainerGroupDiagnosticsArgs, ContainerGroupDiagnosticsPtr and ContainerGroupDiagnosticsPtrOutput values.
// You can construct a concrete instance of `ContainerGroupDiagnosticsPtrInput` via:
//
//	        ContainerGroupDiagnosticsArgs{...}
//
//	or:
//
//	        nil
type ContainerGroupDiagnosticsPtrInput interface {
	pulumi.Input

	ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput
	ToContainerGroupDiagnosticsPtrOutputWithContext(context.Context) ContainerGroupDiagnosticsPtrOutput
}

type containerGroupDiagnosticsPtrType ContainerGroupDiagnosticsArgs

func ContainerGroupDiagnosticsPtr(v *ContainerGroupDiagnosticsArgs) ContainerGroupDiagnosticsPtrInput {
	return (*containerGroupDiagnosticsPtrType)(v)
}

func (*containerGroupDiagnosticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnostics)(nil)).Elem()
}

func (i *containerGroupDiagnosticsPtrType) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return i.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (i *containerGroupDiagnosticsPtrType) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupDiagnosticsPtrOutput)
}

func (i *containerGroupDiagnosticsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupDiagnostics] {
	return pulumix.Output[*ContainerGroupDiagnostics]{
		OutputState: i.ToContainerGroupDiagnosticsPtrOutputWithContext(ctx).OutputState,
	}
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnostics)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsOutput() ContainerGroupDiagnosticsOutput {
	return o
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsOutput {
	return o
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return o.ToContainerGroupDiagnosticsPtrOutputWithContext(context.Background())
}

func (o ContainerGroupDiagnosticsOutput) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerGroupDiagnostics) *ContainerGroupDiagnostics {
		return &v
	}).(ContainerGroupDiagnosticsPtrOutput)
}

func (o ContainerGroupDiagnosticsOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupDiagnostics] {
	return pulumix.Output[ContainerGroupDiagnostics]{
		OutputState: o.OutputState,
	}
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsOutput) LogAnalytics() LogAnalyticsPtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnostics) *LogAnalytics { return v.LogAnalytics }).(LogAnalyticsPtrOutput)
}

type ContainerGroupDiagnosticsPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnostics)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsPtrOutput) ToContainerGroupDiagnosticsPtrOutput() ContainerGroupDiagnosticsPtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsPtrOutput) ToContainerGroupDiagnosticsPtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsPtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupDiagnostics] {
	return pulumix.Output[*ContainerGroupDiagnostics]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupDiagnosticsPtrOutput) Elem() ContainerGroupDiagnosticsOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnostics) ContainerGroupDiagnostics {
		if v != nil {
			return *v
		}
		var ret ContainerGroupDiagnostics
		return ret
	}).(ContainerGroupDiagnosticsOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsPtrOutput) LogAnalytics() LogAnalyticsPtrOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnostics) *LogAnalytics {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsPtrOutput)
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsResponse struct {
	// Container group log analytics information.
	LogAnalytics *LogAnalyticsResponse `pulumi:"logAnalytics"`
}

// Container group diagnostic information.
type ContainerGroupDiagnosticsResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponseOutput() ContainerGroupDiagnosticsResponseOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponseOutput) ToContainerGroupDiagnosticsResponseOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponseOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupDiagnosticsResponse] {
	return pulumix.Output[ContainerGroupDiagnosticsResponse]{
		OutputState: o.OutputState,
	}
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsResponseOutput) LogAnalytics() LogAnalyticsResponsePtrOutput {
	return o.ApplyT(func(v ContainerGroupDiagnosticsResponse) *LogAnalyticsResponse { return v.LogAnalytics }).(LogAnalyticsResponsePtrOutput)
}

type ContainerGroupDiagnosticsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupDiagnosticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupDiagnosticsResponse)(nil)).Elem()
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) ToContainerGroupDiagnosticsResponsePtrOutput() ContainerGroupDiagnosticsResponsePtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) ToContainerGroupDiagnosticsResponsePtrOutputWithContext(ctx context.Context) ContainerGroupDiagnosticsResponsePtrOutput {
	return o
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupDiagnosticsResponse] {
	return pulumix.Output[*ContainerGroupDiagnosticsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupDiagnosticsResponsePtrOutput) Elem() ContainerGroupDiagnosticsResponseOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnosticsResponse) ContainerGroupDiagnosticsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerGroupDiagnosticsResponse
		return ret
	}).(ContainerGroupDiagnosticsResponseOutput)
}

// Container group log analytics information.
func (o ContainerGroupDiagnosticsResponsePtrOutput) LogAnalytics() LogAnalyticsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerGroupDiagnosticsResponse) *LogAnalyticsResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsResponsePtrOutput)
}

// Identity for the container group.
type ContainerGroupIdentity struct {
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type *ResourceIdentityType `pulumi:"type"`
	// The list of user identities associated with the container group.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ContainerGroupIdentityInput is an input type that accepts ContainerGroupIdentityArgs and ContainerGroupIdentityOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityInput` via:
//
//	ContainerGroupIdentityArgs{...}
type ContainerGroupIdentityInput interface {
	pulumi.Input

	ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput
	ToContainerGroupIdentityOutputWithContext(context.Context) ContainerGroupIdentityOutput
}

// Identity for the container group.
type ContainerGroupIdentityArgs struct {
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The list of user identities associated with the container group.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ContainerGroupIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentity)(nil)).Elem()
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput {
	return i.ToContainerGroupIdentityOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityOutputWithContext(ctx context.Context) ContainerGroupIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityOutput)
}

func (i ContainerGroupIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupIdentity] {
	return pulumix.Output[ContainerGroupIdentity]{
		OutputState: i.ToContainerGroupIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return i.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (i ContainerGroupIdentityArgs) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityOutput).ToContainerGroupIdentityPtrOutputWithContext(ctx)
}

// ContainerGroupIdentityPtrInput is an input type that accepts ContainerGroupIdentityArgs, ContainerGroupIdentityPtr and ContainerGroupIdentityPtrOutput values.
// You can construct a concrete instance of `ContainerGroupIdentityPtrInput` via:
//
//	        ContainerGroupIdentityArgs{...}
//
//	or:
//
//	        nil
type ContainerGroupIdentityPtrInput interface {
	pulumi.Input

	ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput
	ToContainerGroupIdentityPtrOutputWithContext(context.Context) ContainerGroupIdentityPtrOutput
}

type containerGroupIdentityPtrType ContainerGroupIdentityArgs

func ContainerGroupIdentityPtr(v *ContainerGroupIdentityArgs) ContainerGroupIdentityPtrInput {
	return (*containerGroupIdentityPtrType)(v)
}

func (*containerGroupIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentity)(nil)).Elem()
}

func (i *containerGroupIdentityPtrType) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return i.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (i *containerGroupIdentityPtrType) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupIdentityPtrOutput)
}

func (i *containerGroupIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupIdentity] {
	return pulumix.Output[*ContainerGroupIdentity]{
		OutputState: i.ToContainerGroupIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity for the container group.
type ContainerGroupIdentityOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentity)(nil)).Elem()
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityOutput() ContainerGroupIdentityOutput {
	return o
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityOutputWithContext(ctx context.Context) ContainerGroupIdentityOutput {
	return o
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return o.ToContainerGroupIdentityPtrOutputWithContext(context.Background())
}

func (o ContainerGroupIdentityOutput) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerGroupIdentity) *ContainerGroupIdentity {
		return &v
	}).(ContainerGroupIdentityPtrOutput)
}

func (o ContainerGroupIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupIdentity] {
	return pulumix.Output[ContainerGroupIdentity]{
		OutputState: o.OutputState,
	}
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the container group.
func (o ContainerGroupIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerGroupIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ContainerGroupIdentityPtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentity)(nil)).Elem()
}

func (o ContainerGroupIdentityPtrOutput) ToContainerGroupIdentityPtrOutput() ContainerGroupIdentityPtrOutput {
	return o
}

func (o ContainerGroupIdentityPtrOutput) ToContainerGroupIdentityPtrOutputWithContext(ctx context.Context) ContainerGroupIdentityPtrOutput {
	return o
}

func (o ContainerGroupIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupIdentity] {
	return pulumix.Output[*ContainerGroupIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupIdentityPtrOutput) Elem() ContainerGroupIdentityOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) ContainerGroupIdentity {
		if v != nil {
			return *v
		}
		var ret ContainerGroupIdentity
		return ret
	}).(ContainerGroupIdentityOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The list of user identities associated with the container group.
func (o ContainerGroupIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerGroupIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the container group.
type ContainerGroupIdentityResponse struct {
	// The principal id of the container group identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
	Type *string `pulumi:"type"`
	// The list of user identities associated with the container group.
	UserAssignedIdentities map[string]UserAssignedIdentitiesResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the container group.
type ContainerGroupIdentityResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupIdentityResponse)(nil)).Elem()
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponseOutput() ContainerGroupIdentityResponseOutput {
	return o
}

func (o ContainerGroupIdentityResponseOutput) ToContainerGroupIdentityResponseOutputWithContext(ctx context.Context) ContainerGroupIdentityResponseOutput {
	return o
}

func (o ContainerGroupIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupIdentityResponse] {
	return pulumix.Output[ContainerGroupIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The principal id of the container group identity. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group.
func (o ContainerGroupIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentitiesResponseMapOutput {
	return o.ApplyT(func(v ContainerGroupIdentityResponse) map[string]UserAssignedIdentitiesResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesResponseMapOutput)
}

type ContainerGroupIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerGroupIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerGroupIdentityResponse)(nil)).Elem()
}

func (o ContainerGroupIdentityResponsePtrOutput) ToContainerGroupIdentityResponsePtrOutput() ContainerGroupIdentityResponsePtrOutput {
	return o
}

func (o ContainerGroupIdentityResponsePtrOutput) ToContainerGroupIdentityResponsePtrOutputWithContext(ctx context.Context) ContainerGroupIdentityResponsePtrOutput {
	return o
}

func (o ContainerGroupIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerGroupIdentityResponse] {
	return pulumix.Output[*ContainerGroupIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupIdentityResponsePtrOutput) Elem() ContainerGroupIdentityResponseOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) ContainerGroupIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ContainerGroupIdentityResponse
		return ret
	}).(ContainerGroupIdentityResponseOutput)
}

// The principal id of the container group identity. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant id associated with the container group. This property will only be provided for a system assigned identity.
func (o ContainerGroupIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
func (o ContainerGroupIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group.
func (o ContainerGroupIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentitiesResponseMapOutput {
	return o.ApplyT(func(v *ContainerGroupIdentityResponse) map[string]UserAssignedIdentitiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentitiesResponseMapOutput)
}

// The instance view of the container group. Only valid in response.
type ContainerGroupPropertiesResponseInstanceView struct {
	// The events of this container group.
	Events []EventResponse `pulumi:"events"`
	// The state of the container group. Only valid in response.
	State string `pulumi:"state"`
}

// The instance view of the container group. Only valid in response.
type ContainerGroupPropertiesResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerGroupPropertiesResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupPropertiesResponseInstanceView)(nil)).Elem()
}

func (o ContainerGroupPropertiesResponseInstanceViewOutput) ToContainerGroupPropertiesResponseInstanceViewOutput() ContainerGroupPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerGroupPropertiesResponseInstanceViewOutput) ToContainerGroupPropertiesResponseInstanceViewOutputWithContext(ctx context.Context) ContainerGroupPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerGroupPropertiesResponseInstanceViewOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupPropertiesResponseInstanceView] {
	return pulumix.Output[ContainerGroupPropertiesResponseInstanceView]{
		OutputState: o.OutputState,
	}
}

// The events of this container group.
func (o ContainerGroupPropertiesResponseInstanceViewOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v ContainerGroupPropertiesResponseInstanceView) []EventResponse { return v.Events }).(EventResponseArrayOutput)
}

// The state of the container group. Only valid in response.
func (o ContainerGroupPropertiesResponseInstanceViewOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupPropertiesResponseInstanceView) string { return v.State }).(pulumi.StringOutput)
}

// Container group subnet information.
type ContainerGroupSubnetId struct {
	// Resource ID of virtual network and subnet.
	Id string `pulumi:"id"`
	// Friendly name for the subnet.
	Name *string `pulumi:"name"`
}

// ContainerGroupSubnetIdInput is an input type that accepts ContainerGroupSubnetIdArgs and ContainerGroupSubnetIdOutput values.
// You can construct a concrete instance of `ContainerGroupSubnetIdInput` via:
//
//	ContainerGroupSubnetIdArgs{...}
type ContainerGroupSubnetIdInput interface {
	pulumi.Input

	ToContainerGroupSubnetIdOutput() ContainerGroupSubnetIdOutput
	ToContainerGroupSubnetIdOutputWithContext(context.Context) ContainerGroupSubnetIdOutput
}

// Container group subnet information.
type ContainerGroupSubnetIdArgs struct {
	// Resource ID of virtual network and subnet.
	Id pulumi.StringInput `pulumi:"id"`
	// Friendly name for the subnet.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ContainerGroupSubnetIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSubnetId)(nil)).Elem()
}

func (i ContainerGroupSubnetIdArgs) ToContainerGroupSubnetIdOutput() ContainerGroupSubnetIdOutput {
	return i.ToContainerGroupSubnetIdOutputWithContext(context.Background())
}

func (i ContainerGroupSubnetIdArgs) ToContainerGroupSubnetIdOutputWithContext(ctx context.Context) ContainerGroupSubnetIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSubnetIdOutput)
}

func (i ContainerGroupSubnetIdArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupSubnetId] {
	return pulumix.Output[ContainerGroupSubnetId]{
		OutputState: i.ToContainerGroupSubnetIdOutputWithContext(ctx).OutputState,
	}
}

// ContainerGroupSubnetIdArrayInput is an input type that accepts ContainerGroupSubnetIdArray and ContainerGroupSubnetIdArrayOutput values.
// You can construct a concrete instance of `ContainerGroupSubnetIdArrayInput` via:
//
//	ContainerGroupSubnetIdArray{ ContainerGroupSubnetIdArgs{...} }
type ContainerGroupSubnetIdArrayInput interface {
	pulumi.Input

	ToContainerGroupSubnetIdArrayOutput() ContainerGroupSubnetIdArrayOutput
	ToContainerGroupSubnetIdArrayOutputWithContext(context.Context) ContainerGroupSubnetIdArrayOutput
}

type ContainerGroupSubnetIdArray []ContainerGroupSubnetIdInput

func (ContainerGroupSubnetIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupSubnetId)(nil)).Elem()
}

func (i ContainerGroupSubnetIdArray) ToContainerGroupSubnetIdArrayOutput() ContainerGroupSubnetIdArrayOutput {
	return i.ToContainerGroupSubnetIdArrayOutputWithContext(context.Background())
}

func (i ContainerGroupSubnetIdArray) ToContainerGroupSubnetIdArrayOutputWithContext(ctx context.Context) ContainerGroupSubnetIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerGroupSubnetIdArrayOutput)
}

func (i ContainerGroupSubnetIdArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerGroupSubnetId] {
	return pulumix.Output[[]ContainerGroupSubnetId]{
		OutputState: i.ToContainerGroupSubnetIdArrayOutputWithContext(ctx).OutputState,
	}
}

// Container group subnet information.
type ContainerGroupSubnetIdOutput struct{ *pulumi.OutputState }

func (ContainerGroupSubnetIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSubnetId)(nil)).Elem()
}

func (o ContainerGroupSubnetIdOutput) ToContainerGroupSubnetIdOutput() ContainerGroupSubnetIdOutput {
	return o
}

func (o ContainerGroupSubnetIdOutput) ToContainerGroupSubnetIdOutputWithContext(ctx context.Context) ContainerGroupSubnetIdOutput {
	return o
}

func (o ContainerGroupSubnetIdOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupSubnetId] {
	return pulumix.Output[ContainerGroupSubnetId]{
		OutputState: o.OutputState,
	}
}

// Resource ID of virtual network and subnet.
func (o ContainerGroupSubnetIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupSubnetId) string { return v.Id }).(pulumi.StringOutput)
}

// Friendly name for the subnet.
func (o ContainerGroupSubnetIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupSubnetId) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ContainerGroupSubnetIdArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupSubnetIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupSubnetId)(nil)).Elem()
}

func (o ContainerGroupSubnetIdArrayOutput) ToContainerGroupSubnetIdArrayOutput() ContainerGroupSubnetIdArrayOutput {
	return o
}

func (o ContainerGroupSubnetIdArrayOutput) ToContainerGroupSubnetIdArrayOutputWithContext(ctx context.Context) ContainerGroupSubnetIdArrayOutput {
	return o
}

func (o ContainerGroupSubnetIdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerGroupSubnetId] {
	return pulumix.Output[[]ContainerGroupSubnetId]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupSubnetIdArrayOutput) Index(i pulumi.IntInput) ContainerGroupSubnetIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupSubnetId {
		return vs[0].([]ContainerGroupSubnetId)[vs[1].(int)]
	}).(ContainerGroupSubnetIdOutput)
}

// Container group subnet information.
type ContainerGroupSubnetIdResponse struct {
	// Resource ID of virtual network and subnet.
	Id string `pulumi:"id"`
	// Friendly name for the subnet.
	Name *string `pulumi:"name"`
}

// Container group subnet information.
type ContainerGroupSubnetIdResponseOutput struct{ *pulumi.OutputState }

func (ContainerGroupSubnetIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerGroupSubnetIdResponse)(nil)).Elem()
}

func (o ContainerGroupSubnetIdResponseOutput) ToContainerGroupSubnetIdResponseOutput() ContainerGroupSubnetIdResponseOutput {
	return o
}

func (o ContainerGroupSubnetIdResponseOutput) ToContainerGroupSubnetIdResponseOutputWithContext(ctx context.Context) ContainerGroupSubnetIdResponseOutput {
	return o
}

func (o ContainerGroupSubnetIdResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerGroupSubnetIdResponse] {
	return pulumix.Output[ContainerGroupSubnetIdResponse]{
		OutputState: o.OutputState,
	}
}

// Resource ID of virtual network and subnet.
func (o ContainerGroupSubnetIdResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerGroupSubnetIdResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Friendly name for the subnet.
func (o ContainerGroupSubnetIdResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerGroupSubnetIdResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ContainerGroupSubnetIdResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerGroupSubnetIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerGroupSubnetIdResponse)(nil)).Elem()
}

func (o ContainerGroupSubnetIdResponseArrayOutput) ToContainerGroupSubnetIdResponseArrayOutput() ContainerGroupSubnetIdResponseArrayOutput {
	return o
}

func (o ContainerGroupSubnetIdResponseArrayOutput) ToContainerGroupSubnetIdResponseArrayOutputWithContext(ctx context.Context) ContainerGroupSubnetIdResponseArrayOutput {
	return o
}

func (o ContainerGroupSubnetIdResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerGroupSubnetIdResponse] {
	return pulumix.Output[[]ContainerGroupSubnetIdResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerGroupSubnetIdResponseArrayOutput) Index(i pulumi.IntInput) ContainerGroupSubnetIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerGroupSubnetIdResponse {
		return vs[0].([]ContainerGroupSubnetIdResponse)[vs[1].(int)]
	}).(ContainerGroupSubnetIdResponseOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGet struct {
	// The HTTP headers.
	HttpHeaders []HttpHeader `pulumi:"httpHeaders"`
	// The path to probe.
	Path *string `pulumi:"path"`
	// The port number to probe.
	Port int `pulumi:"port"`
	// The scheme.
	Scheme *string `pulumi:"scheme"`
}

// ContainerHttpGetInput is an input type that accepts ContainerHttpGetArgs and ContainerHttpGetOutput values.
// You can construct a concrete instance of `ContainerHttpGetInput` via:
//
//	ContainerHttpGetArgs{...}
type ContainerHttpGetInput interface {
	pulumi.Input

	ToContainerHttpGetOutput() ContainerHttpGetOutput
	ToContainerHttpGetOutputWithContext(context.Context) ContainerHttpGetOutput
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetArgs struct {
	// The HTTP headers.
	HttpHeaders HttpHeaderArrayInput `pulumi:"httpHeaders"`
	// The path to probe.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port number to probe.
	Port pulumi.IntInput `pulumi:"port"`
	// The scheme.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ContainerHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGet)(nil)).Elem()
}

func (i ContainerHttpGetArgs) ToContainerHttpGetOutput() ContainerHttpGetOutput {
	return i.ToContainerHttpGetOutputWithContext(context.Background())
}

func (i ContainerHttpGetArgs) ToContainerHttpGetOutputWithContext(ctx context.Context) ContainerHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetOutput)
}

func (i ContainerHttpGetArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerHttpGet] {
	return pulumix.Output[ContainerHttpGet]{
		OutputState: i.ToContainerHttpGetOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerHttpGetArgs) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return i.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (i ContainerHttpGetArgs) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetOutput).ToContainerHttpGetPtrOutputWithContext(ctx)
}

// ContainerHttpGetPtrInput is an input type that accepts ContainerHttpGetArgs, ContainerHttpGetPtr and ContainerHttpGetPtrOutput values.
// You can construct a concrete instance of `ContainerHttpGetPtrInput` via:
//
//	        ContainerHttpGetArgs{...}
//
//	or:
//
//	        nil
type ContainerHttpGetPtrInput interface {
	pulumi.Input

	ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput
	ToContainerHttpGetPtrOutputWithContext(context.Context) ContainerHttpGetPtrOutput
}

type containerHttpGetPtrType ContainerHttpGetArgs

func ContainerHttpGetPtr(v *ContainerHttpGetArgs) ContainerHttpGetPtrInput {
	return (*containerHttpGetPtrType)(v)
}

func (*containerHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGet)(nil)).Elem()
}

func (i *containerHttpGetPtrType) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return i.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (i *containerHttpGetPtrType) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerHttpGetPtrOutput)
}

func (i *containerHttpGetPtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerHttpGet] {
	return pulumix.Output[*ContainerHttpGet]{
		OutputState: i.ToContainerHttpGetPtrOutputWithContext(ctx).OutputState,
	}
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGet)(nil)).Elem()
}

func (o ContainerHttpGetOutput) ToContainerHttpGetOutput() ContainerHttpGetOutput {
	return o
}

func (o ContainerHttpGetOutput) ToContainerHttpGetOutputWithContext(ctx context.Context) ContainerHttpGetOutput {
	return o
}

func (o ContainerHttpGetOutput) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return o.ToContainerHttpGetPtrOutputWithContext(context.Background())
}

func (o ContainerHttpGetOutput) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerHttpGet) *ContainerHttpGet {
		return &v
	}).(ContainerHttpGetPtrOutput)
}

func (o ContainerHttpGetOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerHttpGet] {
	return pulumix.Output[ContainerHttpGet]{
		OutputState: o.OutputState,
	}
}

// The HTTP headers.
func (o ContainerHttpGetOutput) HttpHeaders() HttpHeaderArrayOutput {
	return o.ApplyT(func(v ContainerHttpGet) []HttpHeader { return v.HttpHeaders }).(HttpHeaderArrayOutput)
}

// The path to probe.
func (o ContainerHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHttpGet) int { return v.Port }).(pulumi.IntOutput)
}

// The scheme.
func (o ContainerHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGet)(nil)).Elem()
}

func (o ContainerHttpGetPtrOutput) ToContainerHttpGetPtrOutput() ContainerHttpGetPtrOutput {
	return o
}

func (o ContainerHttpGetPtrOutput) ToContainerHttpGetPtrOutputWithContext(ctx context.Context) ContainerHttpGetPtrOutput {
	return o
}

func (o ContainerHttpGetPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerHttpGet] {
	return pulumix.Output[*ContainerHttpGet]{
		OutputState: o.OutputState,
	}
}

func (o ContainerHttpGetPtrOutput) Elem() ContainerHttpGetOutput {
	return o.ApplyT(func(v *ContainerHttpGet) ContainerHttpGet {
		if v != nil {
			return *v
		}
		var ret ContainerHttpGet
		return ret
	}).(ContainerHttpGetOutput)
}

// The HTTP headers.
func (o ContainerHttpGetPtrOutput) HttpHeaders() HttpHeaderArrayOutput {
	return o.ApplyT(func(v *ContainerHttpGet) []HttpHeader {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HttpHeaderArrayOutput)
}

// The path to probe.
func (o ContainerHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The scheme.
func (o ContainerHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetResponse struct {
	// The HTTP headers.
	HttpHeaders []HttpHeaderResponse `pulumi:"httpHeaders"`
	// The path to probe.
	Path *string `pulumi:"path"`
	// The port number to probe.
	Port int `pulumi:"port"`
	// The scheme.
	Scheme *string `pulumi:"scheme"`
}

// The container Http Get settings, for liveness or readiness probe
type ContainerHttpGetResponseOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerHttpGetResponse)(nil)).Elem()
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponseOutput() ContainerHttpGetResponseOutput {
	return o
}

func (o ContainerHttpGetResponseOutput) ToContainerHttpGetResponseOutputWithContext(ctx context.Context) ContainerHttpGetResponseOutput {
	return o
}

func (o ContainerHttpGetResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerHttpGetResponse] {
	return pulumix.Output[ContainerHttpGetResponse]{
		OutputState: o.OutputState,
	}
}

// The HTTP headers.
func (o ContainerHttpGetResponseOutput) HttpHeaders() HttpHeaderResponseArrayOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) []HttpHeaderResponse { return v.HttpHeaders }).(HttpHeaderResponseArrayOutput)
}

// The path to probe.
func (o ContainerHttpGetResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The scheme.
func (o ContainerHttpGetResponseOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerHttpGetResponse) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ContainerHttpGetResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerHttpGetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerHttpGetResponse)(nil)).Elem()
}

func (o ContainerHttpGetResponsePtrOutput) ToContainerHttpGetResponsePtrOutput() ContainerHttpGetResponsePtrOutput {
	return o
}

func (o ContainerHttpGetResponsePtrOutput) ToContainerHttpGetResponsePtrOutputWithContext(ctx context.Context) ContainerHttpGetResponsePtrOutput {
	return o
}

func (o ContainerHttpGetResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerHttpGetResponse] {
	return pulumix.Output[*ContainerHttpGetResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerHttpGetResponsePtrOutput) Elem() ContainerHttpGetResponseOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) ContainerHttpGetResponse {
		if v != nil {
			return *v
		}
		var ret ContainerHttpGetResponse
		return ret
	}).(ContainerHttpGetResponseOutput)
}

// The HTTP headers.
func (o ContainerHttpGetResponsePtrOutput) HttpHeaders() HttpHeaderResponseArrayOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) []HttpHeaderResponse {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(HttpHeaderResponseArrayOutput)
}

// The path to probe.
func (o ContainerHttpGetResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The port number to probe.
func (o ContainerHttpGetResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// The scheme.
func (o ContainerHttpGetResponsePtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerHttpGetResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// The port exposed on the container instance.
type ContainerPort struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// ContainerPortInput is an input type that accepts ContainerPortArgs and ContainerPortOutput values.
// You can construct a concrete instance of `ContainerPortInput` via:
//
//	ContainerPortArgs{...}
type ContainerPortInput interface {
	pulumi.Input

	ToContainerPortOutput() ContainerPortOutput
	ToContainerPortOutputWithContext(context.Context) ContainerPortOutput
}

// The port exposed on the container instance.
type ContainerPortArgs struct {
	// The port number exposed within the container group.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (ContainerPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (i ContainerPortArgs) ToContainerPortOutput() ContainerPortOutput {
	return i.ToContainerPortOutputWithContext(context.Background())
}

func (i ContainerPortArgs) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortOutput)
}

func (i ContainerPortArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerPort] {
	return pulumix.Output[ContainerPort]{
		OutputState: i.ToContainerPortOutputWithContext(ctx).OutputState,
	}
}

// ContainerPortArrayInput is an input type that accepts ContainerPortArray and ContainerPortArrayOutput values.
// You can construct a concrete instance of `ContainerPortArrayInput` via:
//
//	ContainerPortArray{ ContainerPortArgs{...} }
type ContainerPortArrayInput interface {
	pulumi.Input

	ToContainerPortArrayOutput() ContainerPortArrayOutput
	ToContainerPortArrayOutputWithContext(context.Context) ContainerPortArrayOutput
}

type ContainerPortArray []ContainerPortInput

func (ContainerPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (i ContainerPortArray) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return i.ToContainerPortArrayOutputWithContext(context.Background())
}

func (i ContainerPortArray) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPortArrayOutput)
}

func (i ContainerPortArray) ToOutput(ctx context.Context) pulumix.Output[[]ContainerPort] {
	return pulumix.Output[[]ContainerPort]{
		OutputState: i.ToContainerPortArrayOutputWithContext(ctx).OutputState,
	}
}

// The port exposed on the container instance.
type ContainerPortOutput struct{ *pulumi.OutputState }

func (ContainerPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPort)(nil)).Elem()
}

func (o ContainerPortOutput) ToContainerPortOutput() ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToContainerPortOutputWithContext(ctx context.Context) ContainerPortOutput {
	return o
}

func (o ContainerPortOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerPort] {
	return pulumix.Output[ContainerPort]{
		OutputState: o.OutputState,
	}
}

// The port number exposed within the container group.
func (o ContainerPortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPort) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o ContainerPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPort)(nil)).Elem()
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutput() ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToContainerPortArrayOutputWithContext(ctx context.Context) ContainerPortArrayOutput {
	return o
}

func (o ContainerPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerPort] {
	return pulumix.Output[[]ContainerPort]{
		OutputState: o.OutputState,
	}
}

func (o ContainerPortArrayOutput) Index(i pulumi.IntInput) ContainerPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPort {
		return vs[0].([]ContainerPort)[vs[1].(int)]
	}).(ContainerPortOutput)
}

// The port exposed on the container instance.
type ContainerPortResponse struct {
	// The port number exposed within the container group.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// The port exposed on the container instance.
type ContainerPortResponseOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutput() ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToContainerPortResponseOutputWithContext(ctx context.Context) ContainerPortResponseOutput {
	return o
}

func (o ContainerPortResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerPortResponse] {
	return pulumix.Output[ContainerPortResponse]{
		OutputState: o.OutputState,
	}
}

// The port number exposed within the container group.
func (o ContainerPortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPortResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o ContainerPortResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerPortResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type ContainerPortResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerPortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerPortResponse)(nil)).Elem()
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutput() ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToContainerPortResponseArrayOutputWithContext(ctx context.Context) ContainerPortResponseArrayOutput {
	return o
}

func (o ContainerPortResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerPortResponse] {
	return pulumix.Output[[]ContainerPortResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerPortResponseArrayOutput) Index(i pulumi.IntInput) ContainerPortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerPortResponse {
		return vs[0].([]ContainerPortResponse)[vs[1].(int)]
	}).(ContainerPortResponseOutput)
}

// The container probe, for liveness or readiness
type ContainerProbe struct {
	// The execution command to probe
	Exec *ContainerExec `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet *ContainerHttpGet `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ContainerProbeInput is an input type that accepts ContainerProbeArgs and ContainerProbeOutput values.
// You can construct a concrete instance of `ContainerProbeInput` via:
//
//	ContainerProbeArgs{...}
type ContainerProbeInput interface {
	pulumi.Input

	ToContainerProbeOutput() ContainerProbeOutput
	ToContainerProbeOutputWithContext(context.Context) ContainerProbeOutput
}

// The container probe, for liveness or readiness
type ContainerProbeArgs struct {
	// The execution command to probe
	Exec ContainerExecPtrInput `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet ContainerHttpGetPtrInput `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ContainerProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbe)(nil)).Elem()
}

func (i ContainerProbeArgs) ToContainerProbeOutput() ContainerProbeOutput {
	return i.ToContainerProbeOutputWithContext(context.Background())
}

func (i ContainerProbeArgs) ToContainerProbeOutputWithContext(ctx context.Context) ContainerProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeOutput)
}

func (i ContainerProbeArgs) ToOutput(ctx context.Context) pulumix.Output[ContainerProbe] {
	return pulumix.Output[ContainerProbe]{
		OutputState: i.ToContainerProbeOutputWithContext(ctx).OutputState,
	}
}

func (i ContainerProbeArgs) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return i.ToContainerProbePtrOutputWithContext(context.Background())
}

func (i ContainerProbeArgs) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbeOutput).ToContainerProbePtrOutputWithContext(ctx)
}

// ContainerProbePtrInput is an input type that accepts ContainerProbeArgs, ContainerProbePtr and ContainerProbePtrOutput values.
// You can construct a concrete instance of `ContainerProbePtrInput` via:
//
//	        ContainerProbeArgs{...}
//
//	or:
//
//	        nil
type ContainerProbePtrInput interface {
	pulumi.Input

	ToContainerProbePtrOutput() ContainerProbePtrOutput
	ToContainerProbePtrOutputWithContext(context.Context) ContainerProbePtrOutput
}

type containerProbePtrType ContainerProbeArgs

func ContainerProbePtr(v *ContainerProbeArgs) ContainerProbePtrInput {
	return (*containerProbePtrType)(v)
}

func (*containerProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbe)(nil)).Elem()
}

func (i *containerProbePtrType) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return i.ToContainerProbePtrOutputWithContext(context.Background())
}

func (i *containerProbePtrType) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerProbePtrOutput)
}

func (i *containerProbePtrType) ToOutput(ctx context.Context) pulumix.Output[*ContainerProbe] {
	return pulumix.Output[*ContainerProbe]{
		OutputState: i.ToContainerProbePtrOutputWithContext(ctx).OutputState,
	}
}

// The container probe, for liveness or readiness
type ContainerProbeOutput struct{ *pulumi.OutputState }

func (ContainerProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbe)(nil)).Elem()
}

func (o ContainerProbeOutput) ToContainerProbeOutput() ContainerProbeOutput {
	return o
}

func (o ContainerProbeOutput) ToContainerProbeOutputWithContext(ctx context.Context) ContainerProbeOutput {
	return o
}

func (o ContainerProbeOutput) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return o.ToContainerProbePtrOutputWithContext(context.Background())
}

func (o ContainerProbeOutput) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerProbe) *ContainerProbe {
		return &v
	}).(ContainerProbePtrOutput)
}

func (o ContainerProbeOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerProbe] {
	return pulumix.Output[ContainerProbe]{
		OutputState: o.OutputState,
	}
}

// The execution command to probe
func (o ContainerProbeOutput) Exec() ContainerExecPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *ContainerExec { return v.Exec }).(ContainerExecPtrOutput)
}

// The failure threshold.
func (o ContainerProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeOutput) HttpGet() ContainerHttpGetPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *ContainerHttpGet { return v.HttpGet }).(ContainerHttpGetPtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerProbePtrOutput struct{ *pulumi.OutputState }

func (ContainerProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbe)(nil)).Elem()
}

func (o ContainerProbePtrOutput) ToContainerProbePtrOutput() ContainerProbePtrOutput {
	return o
}

func (o ContainerProbePtrOutput) ToContainerProbePtrOutputWithContext(ctx context.Context) ContainerProbePtrOutput {
	return o
}

func (o ContainerProbePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerProbe] {
	return pulumix.Output[*ContainerProbe]{
		OutputState: o.OutputState,
	}
}

func (o ContainerProbePtrOutput) Elem() ContainerProbeOutput {
	return o.ApplyT(func(v *ContainerProbe) ContainerProbe {
		if v != nil {
			return *v
		}
		var ret ContainerProbe
		return ret
	}).(ContainerProbeOutput)
}

// The execution command to probe
func (o ContainerProbePtrOutput) Exec() ContainerExecPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *ContainerExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ContainerExecPtrOutput)
}

// The failure threshold.
func (o ContainerProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbePtrOutput) HttpGet() ContainerHttpGetPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *ContainerHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ContainerHttpGetPtrOutput)
}

// The initial delay seconds.
func (o ContainerProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The container probe, for liveness or readiness
type ContainerProbeResponse struct {
	// The execution command to probe
	Exec *ContainerExecResponse `pulumi:"exec"`
	// The failure threshold.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The Http Get settings to probe
	HttpGet *ContainerHttpGetResponse `pulumi:"httpGet"`
	// The initial delay seconds.
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// The period seconds.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// The success threshold.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The timeout seconds.
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// The container probe, for liveness or readiness
type ContainerProbeResponseOutput struct{ *pulumi.OutputState }

func (ContainerProbeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerProbeResponse)(nil)).Elem()
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponseOutput() ContainerProbeResponseOutput {
	return o
}

func (o ContainerProbeResponseOutput) ToContainerProbeResponseOutputWithContext(ctx context.Context) ContainerProbeResponseOutput {
	return o
}

func (o ContainerProbeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerProbeResponse] {
	return pulumix.Output[ContainerProbeResponse]{
		OutputState: o.OutputState,
	}
}

// The execution command to probe
func (o ContainerProbeResponseOutput) Exec() ContainerExecResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *ContainerExecResponse { return v.Exec }).(ContainerExecResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeResponseOutput) HttpGet() ContainerHttpGetResponsePtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *ContainerHttpGetResponse { return v.HttpGet }).(ContainerHttpGetResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeResponseOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeResponseOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeResponseOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContainerProbeResponse) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ContainerProbeResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerProbeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerProbeResponse)(nil)).Elem()
}

func (o ContainerProbeResponsePtrOutput) ToContainerProbeResponsePtrOutput() ContainerProbeResponsePtrOutput {
	return o
}

func (o ContainerProbeResponsePtrOutput) ToContainerProbeResponsePtrOutputWithContext(ctx context.Context) ContainerProbeResponsePtrOutput {
	return o
}

func (o ContainerProbeResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ContainerProbeResponse] {
	return pulumix.Output[*ContainerProbeResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerProbeResponsePtrOutput) Elem() ContainerProbeResponseOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) ContainerProbeResponse {
		if v != nil {
			return *v
		}
		var ret ContainerProbeResponse
		return ret
	}).(ContainerProbeResponseOutput)
}

// The execution command to probe
func (o ContainerProbeResponsePtrOutput) Exec() ContainerExecResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *ContainerExecResponse {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ContainerExecResponsePtrOutput)
}

// The failure threshold.
func (o ContainerProbeResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The Http Get settings to probe
func (o ContainerProbeResponsePtrOutput) HttpGet() ContainerHttpGetResponsePtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *ContainerHttpGetResponse {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ContainerHttpGetResponsePtrOutput)
}

// The initial delay seconds.
func (o ContainerProbeResponsePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// The period seconds.
func (o ContainerProbeResponsePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// The success threshold.
func (o ContainerProbeResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The timeout seconds.
func (o ContainerProbeResponsePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerProbeResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceView struct {
	// Current container instance state.
	CurrentState ContainerStateResponse `pulumi:"currentState"`
	// The events of the container instance.
	Events []EventResponse `pulumi:"events"`
	// Previous container instance state.
	PreviousState ContainerStateResponse `pulumi:"previousState"`
	// The number of times that the container instance has been restarted.
	RestartCount int `pulumi:"restartCount"`
}

// The instance view of the container instance. Only valid in response.
type ContainerPropertiesResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (ContainerPropertiesResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerPropertiesResponseInstanceView)(nil)).Elem()
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutput() ContainerPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToContainerPropertiesResponseInstanceViewOutputWithContext(ctx context.Context) ContainerPropertiesResponseInstanceViewOutput {
	return o
}

func (o ContainerPropertiesResponseInstanceViewOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerPropertiesResponseInstanceView] {
	return pulumix.Output[ContainerPropertiesResponseInstanceView]{
		OutputState: o.OutputState,
	}
}

// Current container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) CurrentState() ContainerStateResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) ContainerStateResponse { return v.CurrentState }).(ContainerStateResponseOutput)
}

// The events of the container instance.
func (o ContainerPropertiesResponseInstanceViewOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) []EventResponse { return v.Events }).(EventResponseArrayOutput)
}

// Previous container instance state.
func (o ContainerPropertiesResponseInstanceViewOutput) PreviousState() ContainerStateResponseOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) ContainerStateResponse { return v.PreviousState }).(ContainerStateResponseOutput)
}

// The number of times that the container instance has been restarted.
func (o ContainerPropertiesResponseInstanceViewOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerPropertiesResponseInstanceView) int { return v.RestartCount }).(pulumi.IntOutput)
}

// A container instance.
type ContainerResponse struct {
	// The commands to execute within the container instance in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the container instance.
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// The name of the image used to create the container instance.
	Image string `pulumi:"image"`
	// The instance view of the container instance. Only valid in response.
	InstanceView ContainerPropertiesResponseInstanceView `pulumi:"instanceView"`
	// The liveness probe.
	LivenessProbe *ContainerProbeResponse `pulumi:"livenessProbe"`
	// The user-provided name of the container instance.
	Name string `pulumi:"name"`
	// The exposed ports on the container instance.
	Ports []ContainerPortResponse `pulumi:"ports"`
	// The readiness probe.
	ReadinessProbe *ContainerProbeResponse `pulumi:"readinessProbe"`
	// The resource requirements of the container instance.
	Resources ResourceRequirementsResponse `pulumi:"resources"`
	// The container security properties.
	SecurityContext *SecurityContextDefinitionResponse `pulumi:"securityContext"`
	// The volume mounts available to the container instance.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// A container instance.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerResponse] {
	return pulumix.Output[ContainerResponse]{
		OutputState: o.OutputState,
	}
}

// The commands to execute within the container instance in exec form.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the container instance.
func (o ContainerResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseArrayOutput)
}

// The name of the image used to create the container instance.
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// The instance view of the container instance. Only valid in response.
func (o ContainerResponseOutput) InstanceView() ContainerPropertiesResponseInstanceViewOutput {
	return o.ApplyT(func(v ContainerResponse) ContainerPropertiesResponseInstanceView { return v.InstanceView }).(ContainerPropertiesResponseInstanceViewOutput)
}

// The liveness probe.
func (o ContainerResponseOutput) LivenessProbe() ContainerProbeResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *ContainerProbeResponse { return v.LivenessProbe }).(ContainerProbeResponsePtrOutput)
}

// The user-provided name of the container instance.
func (o ContainerResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The exposed ports on the container instance.
func (o ContainerResponseOutput) Ports() ContainerPortResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []ContainerPortResponse { return v.Ports }).(ContainerPortResponseArrayOutput)
}

// The readiness probe.
func (o ContainerResponseOutput) ReadinessProbe() ContainerProbeResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *ContainerProbeResponse { return v.ReadinessProbe }).(ContainerProbeResponsePtrOutput)
}

// The resource requirements of the container instance.
func (o ContainerResponseOutput) Resources() ResourceRequirementsResponseOutput {
	return o.ApplyT(func(v ContainerResponse) ResourceRequirementsResponse { return v.Resources }).(ResourceRequirementsResponseOutput)
}

// The container security properties.
func (o ContainerResponseOutput) SecurityContext() SecurityContextDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ContainerResponse) *SecurityContextDefinitionResponse { return v.SecurityContext }).(SecurityContextDefinitionResponsePtrOutput)
}

// The volume mounts available to the container instance.
func (o ContainerResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type ContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutput() ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToContainerResponseArrayOutputWithContext(ctx context.Context) ContainerResponseArrayOutput {
	return o
}

func (o ContainerResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ContainerResponse] {
	return pulumix.Output[[]ContainerResponse]{
		OutputState: o.OutputState,
	}
}

func (o ContainerResponseArrayOutput) Index(i pulumi.IntInput) ContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContainerResponse {
		return vs[0].([]ContainerResponse)[vs[1].(int)]
	}).(ContainerResponseOutput)
}

// The container instance state.
type ContainerStateResponse struct {
	// The human-readable status of the container instance state.
	DetailStatus string `pulumi:"detailStatus"`
	// The container instance exit codes correspond to those from the `docker run` command.
	ExitCode int `pulumi:"exitCode"`
	// The date-time when the container instance state finished.
	FinishTime string `pulumi:"finishTime"`
	// The date-time when the container instance state started.
	StartTime string `pulumi:"startTime"`
	// The state of the container instance.
	State string `pulumi:"state"`
}

// The container instance state.
type ContainerStateResponseOutput struct{ *pulumi.OutputState }

func (ContainerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerStateResponse)(nil)).Elem()
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutput() ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToContainerStateResponseOutputWithContext(ctx context.Context) ContainerStateResponseOutput {
	return o
}

func (o ContainerStateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ContainerStateResponse] {
	return pulumix.Output[ContainerStateResponse]{
		OutputState: o.OutputState,
	}
}

// The human-readable status of the container instance state.
func (o ContainerStateResponseOutput) DetailStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStateResponse) string { return v.DetailStatus }).(pulumi.StringOutput)
}

// The container instance exit codes correspond to those from the `docker run` command.
func (o ContainerStateResponseOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerStateResponse) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The date-time when the container instance state finished.
func (o ContainerStateResponseOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStateResponse) string { return v.FinishTime }).(pulumi.StringOutput)
}

// The date-time when the container instance state started.
func (o ContainerStateResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStateResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the container instance.
func (o ContainerStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// Extension sidecars to be added to the deployment.
type DeploymentExtensionSpec struct {
	// Type of extension to be added.
	ExtensionType string `pulumi:"extensionType"`
	// Name of the extension.
	Name string `pulumi:"name"`
	// Protected settings for the extension.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// Settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Version of the extension being used.
	Version string `pulumi:"version"`
}

// DeploymentExtensionSpecInput is an input type that accepts DeploymentExtensionSpecArgs and DeploymentExtensionSpecOutput values.
// You can construct a concrete instance of `DeploymentExtensionSpecInput` via:
//
//	DeploymentExtensionSpecArgs{...}
type DeploymentExtensionSpecInput interface {
	pulumi.Input

	ToDeploymentExtensionSpecOutput() DeploymentExtensionSpecOutput
	ToDeploymentExtensionSpecOutputWithContext(context.Context) DeploymentExtensionSpecOutput
}

// Extension sidecars to be added to the deployment.
type DeploymentExtensionSpecArgs struct {
	// Type of extension to be added.
	ExtensionType pulumi.StringInput `pulumi:"extensionType"`
	// Name of the extension.
	Name pulumi.StringInput `pulumi:"name"`
	// Protected settings for the extension.
	ProtectedSettings pulumi.Input `pulumi:"protectedSettings"`
	// Settings for the extension.
	Settings pulumi.Input `pulumi:"settings"`
	// Version of the extension being used.
	Version pulumi.StringInput `pulumi:"version"`
}

func (DeploymentExtensionSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentExtensionSpec)(nil)).Elem()
}

func (i DeploymentExtensionSpecArgs) ToDeploymentExtensionSpecOutput() DeploymentExtensionSpecOutput {
	return i.ToDeploymentExtensionSpecOutputWithContext(context.Background())
}

func (i DeploymentExtensionSpecArgs) ToDeploymentExtensionSpecOutputWithContext(ctx context.Context) DeploymentExtensionSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentExtensionSpecOutput)
}

func (i DeploymentExtensionSpecArgs) ToOutput(ctx context.Context) pulumix.Output[DeploymentExtensionSpec] {
	return pulumix.Output[DeploymentExtensionSpec]{
		OutputState: i.ToDeploymentExtensionSpecOutputWithContext(ctx).OutputState,
	}
}

// DeploymentExtensionSpecArrayInput is an input type that accepts DeploymentExtensionSpecArray and DeploymentExtensionSpecArrayOutput values.
// You can construct a concrete instance of `DeploymentExtensionSpecArrayInput` via:
//
//	DeploymentExtensionSpecArray{ DeploymentExtensionSpecArgs{...} }
type DeploymentExtensionSpecArrayInput interface {
	pulumi.Input

	ToDeploymentExtensionSpecArrayOutput() DeploymentExtensionSpecArrayOutput
	ToDeploymentExtensionSpecArrayOutputWithContext(context.Context) DeploymentExtensionSpecArrayOutput
}

type DeploymentExtensionSpecArray []DeploymentExtensionSpecInput

func (DeploymentExtensionSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentExtensionSpec)(nil)).Elem()
}

func (i DeploymentExtensionSpecArray) ToDeploymentExtensionSpecArrayOutput() DeploymentExtensionSpecArrayOutput {
	return i.ToDeploymentExtensionSpecArrayOutputWithContext(context.Background())
}

func (i DeploymentExtensionSpecArray) ToDeploymentExtensionSpecArrayOutputWithContext(ctx context.Context) DeploymentExtensionSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentExtensionSpecArrayOutput)
}

func (i DeploymentExtensionSpecArray) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentExtensionSpec] {
	return pulumix.Output[[]DeploymentExtensionSpec]{
		OutputState: i.ToDeploymentExtensionSpecArrayOutputWithContext(ctx).OutputState,
	}
}

// Extension sidecars to be added to the deployment.
type DeploymentExtensionSpecOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentExtensionSpec)(nil)).Elem()
}

func (o DeploymentExtensionSpecOutput) ToDeploymentExtensionSpecOutput() DeploymentExtensionSpecOutput {
	return o
}

func (o DeploymentExtensionSpecOutput) ToDeploymentExtensionSpecOutputWithContext(ctx context.Context) DeploymentExtensionSpecOutput {
	return o
}

func (o DeploymentExtensionSpecOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentExtensionSpec] {
	return pulumix.Output[DeploymentExtensionSpec]{
		OutputState: o.OutputState,
	}
}

// Type of extension to be added.
func (o DeploymentExtensionSpecOutput) ExtensionType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpec) string { return v.ExtensionType }).(pulumi.StringOutput)
}

// Name of the extension.
func (o DeploymentExtensionSpecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpec) string { return v.Name }).(pulumi.StringOutput)
}

// Protected settings for the extension.
func (o DeploymentExtensionSpecOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentExtensionSpec) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// Settings for the extension.
func (o DeploymentExtensionSpecOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentExtensionSpec) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Version of the extension being used.
func (o DeploymentExtensionSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpec) string { return v.Version }).(pulumi.StringOutput)
}

type DeploymentExtensionSpecArrayOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentExtensionSpec)(nil)).Elem()
}

func (o DeploymentExtensionSpecArrayOutput) ToDeploymentExtensionSpecArrayOutput() DeploymentExtensionSpecArrayOutput {
	return o
}

func (o DeploymentExtensionSpecArrayOutput) ToDeploymentExtensionSpecArrayOutputWithContext(ctx context.Context) DeploymentExtensionSpecArrayOutput {
	return o
}

func (o DeploymentExtensionSpecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentExtensionSpec] {
	return pulumix.Output[[]DeploymentExtensionSpec]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentExtensionSpecArrayOutput) Index(i pulumi.IntInput) DeploymentExtensionSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentExtensionSpec {
		return vs[0].([]DeploymentExtensionSpec)[vs[1].(int)]
	}).(DeploymentExtensionSpecOutput)
}

// Extension sidecars to be added to the deployment.
type DeploymentExtensionSpecResponse struct {
	// Type of extension to be added.
	ExtensionType string `pulumi:"extensionType"`
	// Name of the extension.
	Name string `pulumi:"name"`
	// Protected settings for the extension.
	ProtectedSettings interface{} `pulumi:"protectedSettings"`
	// Settings for the extension.
	Settings interface{} `pulumi:"settings"`
	// Version of the extension being used.
	Version string `pulumi:"version"`
}

// Extension sidecars to be added to the deployment.
type DeploymentExtensionSpecResponseOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentExtensionSpecResponse)(nil)).Elem()
}

func (o DeploymentExtensionSpecResponseOutput) ToDeploymentExtensionSpecResponseOutput() DeploymentExtensionSpecResponseOutput {
	return o
}

func (o DeploymentExtensionSpecResponseOutput) ToDeploymentExtensionSpecResponseOutputWithContext(ctx context.Context) DeploymentExtensionSpecResponseOutput {
	return o
}

func (o DeploymentExtensionSpecResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DeploymentExtensionSpecResponse] {
	return pulumix.Output[DeploymentExtensionSpecResponse]{
		OutputState: o.OutputState,
	}
}

// Type of extension to be added.
func (o DeploymentExtensionSpecResponseOutput) ExtensionType() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpecResponse) string { return v.ExtensionType }).(pulumi.StringOutput)
}

// Name of the extension.
func (o DeploymentExtensionSpecResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpecResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Protected settings for the extension.
func (o DeploymentExtensionSpecResponseOutput) ProtectedSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentExtensionSpecResponse) interface{} { return v.ProtectedSettings }).(pulumi.AnyOutput)
}

// Settings for the extension.
func (o DeploymentExtensionSpecResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v DeploymentExtensionSpecResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Version of the extension being used.
func (o DeploymentExtensionSpecResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentExtensionSpecResponse) string { return v.Version }).(pulumi.StringOutput)
}

type DeploymentExtensionSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (DeploymentExtensionSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentExtensionSpecResponse)(nil)).Elem()
}

func (o DeploymentExtensionSpecResponseArrayOutput) ToDeploymentExtensionSpecResponseArrayOutput() DeploymentExtensionSpecResponseArrayOutput {
	return o
}

func (o DeploymentExtensionSpecResponseArrayOutput) ToDeploymentExtensionSpecResponseArrayOutputWithContext(ctx context.Context) DeploymentExtensionSpecResponseArrayOutput {
	return o
}

func (o DeploymentExtensionSpecResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DeploymentExtensionSpecResponse] {
	return pulumix.Output[[]DeploymentExtensionSpecResponse]{
		OutputState: o.OutputState,
	}
}

func (o DeploymentExtensionSpecResponseArrayOutput) Index(i pulumi.IntInput) DeploymentExtensionSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentExtensionSpecResponse {
		return vs[0].([]DeploymentExtensionSpecResponse)[vs[1].(int)]
	}).(DeploymentExtensionSpecResponseOutput)
}

// DNS configuration for the container group.
type DnsConfiguration struct {
	// The DNS servers for the container group.
	NameServers []string `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options *string `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains *string `pulumi:"searchDomains"`
}

// DnsConfigurationInput is an input type that accepts DnsConfigurationArgs and DnsConfigurationOutput values.
// You can construct a concrete instance of `DnsConfigurationInput` via:
//
//	DnsConfigurationArgs{...}
type DnsConfigurationInput interface {
	pulumi.Input

	ToDnsConfigurationOutput() DnsConfigurationOutput
	ToDnsConfigurationOutputWithContext(context.Context) DnsConfigurationOutput
}

// DNS configuration for the container group.
type DnsConfigurationArgs struct {
	// The DNS servers for the container group.
	NameServers pulumi.StringArrayInput `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options pulumi.StringPtrInput `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains pulumi.StringPtrInput `pulumi:"searchDomains"`
}

func (DnsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfiguration)(nil)).Elem()
}

func (i DnsConfigurationArgs) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return i.ToDnsConfigurationOutputWithContext(context.Background())
}

func (i DnsConfigurationArgs) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationOutput)
}

func (i DnsConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DnsConfiguration] {
	return pulumix.Output[DnsConfiguration]{
		OutputState: i.ToDnsConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DnsConfigurationArgs) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return i.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (i DnsConfigurationArgs) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationOutput).ToDnsConfigurationPtrOutputWithContext(ctx)
}

// DnsConfigurationPtrInput is an input type that accepts DnsConfigurationArgs, DnsConfigurationPtr and DnsConfigurationPtrOutput values.
// You can construct a concrete instance of `DnsConfigurationPtrInput` via:
//
//	        DnsConfigurationArgs{...}
//
//	or:
//
//	        nil
type DnsConfigurationPtrInput interface {
	pulumi.Input

	ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput
	ToDnsConfigurationPtrOutputWithContext(context.Context) DnsConfigurationPtrOutput
}

type dnsConfigurationPtrType DnsConfigurationArgs

func DnsConfigurationPtr(v *DnsConfigurationArgs) DnsConfigurationPtrInput {
	return (*dnsConfigurationPtrType)(v)
}

func (*dnsConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (i *dnsConfigurationPtrType) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return i.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (i *dnsConfigurationPtrType) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsConfigurationPtrOutput)
}

func (i *dnsConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DnsConfiguration] {
	return pulumix.Output[*DnsConfiguration]{
		OutputState: i.ToDnsConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// DNS configuration for the container group.
type DnsConfigurationOutput struct{ *pulumi.OutputState }

func (DnsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutput() DnsConfigurationOutput {
	return o
}

func (o DnsConfigurationOutput) ToDnsConfigurationOutputWithContext(ctx context.Context) DnsConfigurationOutput {
	return o
}

func (o DnsConfigurationOutput) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return o.ToDnsConfigurationPtrOutputWithContext(context.Background())
}

func (o DnsConfigurationOutput) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DnsConfiguration) *DnsConfiguration {
		return &v
	}).(DnsConfigurationPtrOutput)
}

func (o DnsConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DnsConfiguration] {
	return pulumix.Output[DnsConfiguration]{
		OutputState: o.OutputState,
	}
}

// The DNS servers for the container group.
func (o DnsConfigurationOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsConfiguration) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfiguration) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfiguration) *string { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

type DnsConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DnsConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfiguration)(nil)).Elem()
}

func (o DnsConfigurationPtrOutput) ToDnsConfigurationPtrOutput() DnsConfigurationPtrOutput {
	return o
}

func (o DnsConfigurationPtrOutput) ToDnsConfigurationPtrOutputWithContext(ctx context.Context) DnsConfigurationPtrOutput {
	return o
}

func (o DnsConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DnsConfiguration] {
	return pulumix.Output[*DnsConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DnsConfigurationPtrOutput) Elem() DnsConfigurationOutput {
	return o.ApplyT(func(v *DnsConfiguration) DnsConfiguration {
		if v != nil {
			return *v
		}
		var ret DnsConfiguration
		return ret
	}).(DnsConfigurationOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationPtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationPtrOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationPtrOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SearchDomains
	}).(pulumi.StringPtrOutput)
}

// DNS configuration for the container group.
type DnsConfigurationResponse struct {
	// The DNS servers for the container group.
	NameServers []string `pulumi:"nameServers"`
	// The DNS options for the container group.
	Options *string `pulumi:"options"`
	// The DNS search domains for hostname lookup in the container group.
	SearchDomains *string `pulumi:"searchDomains"`
}

// DNS configuration for the container group.
type DnsConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DnsConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsConfigurationResponse)(nil)).Elem()
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponseOutput() DnsConfigurationResponseOutput {
	return o
}

func (o DnsConfigurationResponseOutput) ToDnsConfigurationResponseOutputWithContext(ctx context.Context) DnsConfigurationResponseOutput {
	return o
}

func (o DnsConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DnsConfigurationResponse] {
	return pulumix.Output[DnsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The DNS servers for the container group.
func (o DnsConfigurationResponseOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) []string { return v.NameServers }).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationResponseOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) *string { return v.Options }).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationResponseOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DnsConfigurationResponse) *string { return v.SearchDomains }).(pulumi.StringPtrOutput)
}

type DnsConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DnsConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsConfigurationResponse)(nil)).Elem()
}

func (o DnsConfigurationResponsePtrOutput) ToDnsConfigurationResponsePtrOutput() DnsConfigurationResponsePtrOutput {
	return o
}

func (o DnsConfigurationResponsePtrOutput) ToDnsConfigurationResponsePtrOutputWithContext(ctx context.Context) DnsConfigurationResponsePtrOutput {
	return o
}

func (o DnsConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DnsConfigurationResponse] {
	return pulumix.Output[*DnsConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o DnsConfigurationResponsePtrOutput) Elem() DnsConfigurationResponseOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) DnsConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DnsConfigurationResponse
		return ret
	}).(DnsConfigurationResponseOutput)
}

// The DNS servers for the container group.
func (o DnsConfigurationResponsePtrOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.NameServers
	}).(pulumi.StringArrayOutput)
}

// The DNS options for the container group.
func (o DnsConfigurationResponsePtrOutput) Options() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringPtrOutput)
}

// The DNS search domains for hostname lookup in the container group.
func (o DnsConfigurationResponsePtrOutput) SearchDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SearchDomains
	}).(pulumi.StringPtrOutput)
}

// The container group encryption properties.
type EncryptionProperties struct {
	// The keyvault managed identity.
	Identity *string `pulumi:"identity"`
	// The encryption key name.
	KeyName string `pulumi:"keyName"`
	// The encryption key version.
	KeyVersion string `pulumi:"keyVersion"`
	// The keyvault base url.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// EncryptionPropertiesInput is an input type that accepts EncryptionPropertiesArgs and EncryptionPropertiesOutput values.
// You can construct a concrete instance of `EncryptionPropertiesInput` via:
//
//	EncryptionPropertiesArgs{...}
type EncryptionPropertiesInput interface {
	pulumi.Input

	ToEncryptionPropertiesOutput() EncryptionPropertiesOutput
	ToEncryptionPropertiesOutputWithContext(context.Context) EncryptionPropertiesOutput
}

// The container group encryption properties.
type EncryptionPropertiesArgs struct {
	// The keyvault managed identity.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The encryption key name.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The encryption key version.
	KeyVersion pulumi.StringInput `pulumi:"keyVersion"`
	// The keyvault base url.
	VaultBaseUrl pulumi.StringInput `pulumi:"vaultBaseUrl"`
}

func (EncryptionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperties)(nil)).Elem()
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesOutput() EncryptionPropertiesOutput {
	return i.ToEncryptionPropertiesOutputWithContext(context.Background())
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesOutputWithContext(ctx context.Context) EncryptionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesOutput)
}

func (i EncryptionPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[EncryptionProperties] {
	return pulumix.Output[EncryptionProperties]{
		OutputState: i.ToEncryptionPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return i.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i EncryptionPropertiesArgs) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesOutput).ToEncryptionPropertiesPtrOutputWithContext(ctx)
}

// EncryptionPropertiesPtrInput is an input type that accepts EncryptionPropertiesArgs, EncryptionPropertiesPtr and EncryptionPropertiesPtrOutput values.
// You can construct a concrete instance of `EncryptionPropertiesPtrInput` via:
//
//	        EncryptionPropertiesArgs{...}
//
//	or:
//
//	        nil
type EncryptionPropertiesPtrInput interface {
	pulumi.Input

	ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput
	ToEncryptionPropertiesPtrOutputWithContext(context.Context) EncryptionPropertiesPtrOutput
}

type encryptionPropertiesPtrType EncryptionPropertiesArgs

func EncryptionPropertiesPtr(v *EncryptionPropertiesArgs) EncryptionPropertiesPtrInput {
	return (*encryptionPropertiesPtrType)(v)
}

func (*encryptionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperties)(nil)).Elem()
}

func (i *encryptionPropertiesPtrType) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return i.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (i *encryptionPropertiesPtrType) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertiesPtrOutput)
}

func (i *encryptionPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*EncryptionProperties] {
	return pulumix.Output[*EncryptionProperties]{
		OutputState: i.ToEncryptionPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// The container group encryption properties.
type EncryptionPropertiesOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperties)(nil)).Elem()
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesOutput() EncryptionPropertiesOutput {
	return o
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesOutputWithContext(ctx context.Context) EncryptionPropertiesOutput {
	return o
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return o.ToEncryptionPropertiesPtrOutputWithContext(context.Background())
}

func (o EncryptionPropertiesOutput) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionProperties) *EncryptionProperties {
		return &v
	}).(EncryptionPropertiesPtrOutput)
}

func (o EncryptionPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionProperties] {
	return pulumix.Output[EncryptionProperties]{
		OutputState: o.OutputState,
	}
}

// The keyvault managed identity.
func (o EncryptionPropertiesOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionProperties) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The encryption key name.
func (o EncryptionPropertiesOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperties) string { return v.KeyName }).(pulumi.StringOutput)
}

// The encryption key version.
func (o EncryptionPropertiesOutput) KeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperties) string { return v.KeyVersion }).(pulumi.StringOutput)
}

// The keyvault base url.
func (o EncryptionPropertiesOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperties) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperties)(nil)).Elem()
}

func (o EncryptionPropertiesPtrOutput) ToEncryptionPropertiesPtrOutput() EncryptionPropertiesPtrOutput {
	return o
}

func (o EncryptionPropertiesPtrOutput) ToEncryptionPropertiesPtrOutputWithContext(ctx context.Context) EncryptionPropertiesPtrOutput {
	return o
}

func (o EncryptionPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionProperties] {
	return pulumix.Output[*EncryptionProperties]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionPropertiesPtrOutput) Elem() EncryptionPropertiesOutput {
	return o.ApplyT(func(v *EncryptionProperties) EncryptionProperties {
		if v != nil {
			return *v
		}
		var ret EncryptionProperties
		return ret
	}).(EncryptionPropertiesOutput)
}

// The keyvault managed identity.
func (o EncryptionPropertiesPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// The encryption key name.
func (o EncryptionPropertiesPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The encryption key version.
func (o EncryptionPropertiesPtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The keyvault base url.
func (o EncryptionPropertiesPtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// The container group encryption properties.
type EncryptionPropertiesResponse struct {
	// The keyvault managed identity.
	Identity *string `pulumi:"identity"`
	// The encryption key name.
	KeyName string `pulumi:"keyName"`
	// The encryption key version.
	KeyVersion string `pulumi:"keyVersion"`
	// The keyvault base url.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// The container group encryption properties.
type EncryptionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertiesResponse)(nil)).Elem()
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponseOutput() EncryptionPropertiesResponseOutput {
	return o
}

func (o EncryptionPropertiesResponseOutput) ToEncryptionPropertiesResponseOutputWithContext(ctx context.Context) EncryptionPropertiesResponseOutput {
	return o
}

func (o EncryptionPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionPropertiesResponse] {
	return pulumix.Output[EncryptionPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The keyvault managed identity.
func (o EncryptionPropertiesResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The encryption key name.
func (o EncryptionPropertiesResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// The encryption key version.
func (o EncryptionPropertiesResponseOutput) KeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) string { return v.KeyVersion }).(pulumi.StringOutput)
}

// The keyvault base url.
func (o EncryptionPropertiesResponseOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertiesResponse) string { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type EncryptionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertiesResponse)(nil)).Elem()
}

func (o EncryptionPropertiesResponsePtrOutput) ToEncryptionPropertiesResponsePtrOutput() EncryptionPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionPropertiesResponsePtrOutput) ToEncryptionPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionPropertiesResponse] {
	return pulumix.Output[*EncryptionPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionPropertiesResponsePtrOutput) Elem() EncryptionPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) EncryptionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionPropertiesResponse
		return ret
	}).(EncryptionPropertiesResponseOutput)
}

// The keyvault managed identity.
func (o EncryptionPropertiesResponsePtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// The encryption key name.
func (o EncryptionPropertiesResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The encryption key version.
func (o EncryptionPropertiesResponsePtrOutput) KeyVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVersion
	}).(pulumi.StringPtrOutput)
}

// The keyvault base url.
func (o EncryptionPropertiesResponsePtrOutput) VaultBaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VaultBaseUrl
	}).(pulumi.StringPtrOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariable struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//	EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// The environment variable to set within the container instance.
type EnvironmentVariableArgs struct {
	// The name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue pulumi.StringPtrInput `pulumi:"secureValue"`
	// The value of the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

func (i EnvironmentVariableArgs) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariable] {
	return pulumix.Output[EnvironmentVariable]{
		OutputState: i.ToEnvironmentVariableOutputWithContext(ctx).OutputState,
	}
}

// EnvironmentVariableArrayInput is an input type that accepts EnvironmentVariableArray and EnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `EnvironmentVariableArrayInput` via:
//
//	EnvironmentVariableArray{ EnvironmentVariableArgs{...} }
type EnvironmentVariableArrayInput interface {
	pulumi.Input

	ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput
	ToEnvironmentVariableArrayOutputWithContext(context.Context) EnvironmentVariableArrayOutput
}

type EnvironmentVariableArray []EnvironmentVariableInput

func (EnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return i.ToEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i EnvironmentVariableArray) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableArrayOutput)
}

func (i EnvironmentVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariable] {
	return pulumix.Output[[]EnvironmentVariable]{
		OutputState: i.ToEnvironmentVariableArrayOutputWithContext(ctx).OutputState,
	}
}

// The environment variable to set within the container instance.
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariable] {
	return pulumix.Output[EnvironmentVariable]{
		OutputState: o.OutputState,
	}
}

// The name of the environment variable.
func (o EnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutput() EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToEnvironmentVariableArrayOutputWithContext(ctx context.Context) EnvironmentVariableArrayOutput {
	return o
}

func (o EnvironmentVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariable] {
	return pulumix.Output[[]EnvironmentVariable]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVariableArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].([]EnvironmentVariable)[vs[1].(int)]
	}).(EnvironmentVariableOutput)
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponse struct {
	// The name of the environment variable.
	Name string `pulumi:"name"`
	// The value of the secure environment variable.
	SecureValue *string `pulumi:"secureValue"`
	// The value of the environment variable.
	Value *string `pulumi:"value"`
}

// The environment variable to set within the container instance.
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EnvironmentVariableResponse] {
	return pulumix.Output[EnvironmentVariableResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the environment variable.
func (o EnvironmentVariableResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the secure environment variable.
func (o EnvironmentVariableResponseOutput) SecureValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.SecureValue }).(pulumi.StringPtrOutput)
}

// The value of the environment variable.
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseArrayOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutput() EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToEnvironmentVariableResponseArrayOutputWithContext(ctx context.Context) EnvironmentVariableResponseArrayOutput {
	return o
}

func (o EnvironmentVariableResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EnvironmentVariableResponse] {
	return pulumix.Output[[]EnvironmentVariableResponse]{
		OutputState: o.OutputState,
	}
}

func (o EnvironmentVariableResponseArrayOutput) Index(i pulumi.IntInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].([]EnvironmentVariableResponse)[vs[1].(int)]
	}).(EnvironmentVariableResponseOutput)
}

// A container group or container instance event.
type EventResponse struct {
	// The count of the event.
	Count int `pulumi:"count"`
	// The date-time of the earliest logged event.
	FirstTimestamp string `pulumi:"firstTimestamp"`
	// The date-time of the latest logged event.
	LastTimestamp string `pulumi:"lastTimestamp"`
	// The event message.
	Message string `pulumi:"message"`
	// The event name.
	Name string `pulumi:"name"`
	// The event type.
	Type string `pulumi:"type"`
}

// A container group or container instance event.
type EventResponseOutput struct{ *pulumi.OutputState }

func (EventResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventResponse)(nil)).Elem()
}

func (o EventResponseOutput) ToEventResponseOutput() EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToEventResponseOutputWithContext(ctx context.Context) EventResponseOutput {
	return o
}

func (o EventResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventResponse] {
	return pulumix.Output[EventResponse]{
		OutputState: o.OutputState,
	}
}

// The count of the event.
func (o EventResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v EventResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The date-time of the earliest logged event.
func (o EventResponseOutput) FirstTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.FirstTimestamp }).(pulumi.StringOutput)
}

// The date-time of the latest logged event.
func (o EventResponseOutput) LastTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.LastTimestamp }).(pulumi.StringOutput)
}

// The event message.
func (o EventResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The event name.
func (o EventResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The event type.
func (o EventResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v EventResponse) string { return v.Type }).(pulumi.StringOutput)
}

type EventResponseArrayOutput struct{ *pulumi.OutputState }

func (EventResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventResponse)(nil)).Elem()
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutput() EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToEventResponseArrayOutputWithContext(ctx context.Context) EventResponseArrayOutput {
	return o
}

func (o EventResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EventResponse] {
	return pulumix.Output[[]EventResponse]{
		OutputState: o.OutputState,
	}
}

func (o EventResponseArrayOutput) Index(i pulumi.IntInput) EventResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventResponse {
		return vs[0].([]EventResponse)[vs[1].(int)]
	}).(EventResponseOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolume struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// GitRepoVolumeInput is an input type that accepts GitRepoVolumeArgs and GitRepoVolumeOutput values.
// You can construct a concrete instance of `GitRepoVolumeInput` via:
//
//	GitRepoVolumeArgs{...}
type GitRepoVolumeInput interface {
	pulumi.Input

	ToGitRepoVolumeOutput() GitRepoVolumeOutput
	ToGitRepoVolumeOutputWithContext(context.Context) GitRepoVolumeOutput
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeArgs struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// Repository URL
	Repository pulumi.StringInput `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (GitRepoVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolume)(nil)).Elem()
}

func (i GitRepoVolumeArgs) ToGitRepoVolumeOutput() GitRepoVolumeOutput {
	return i.ToGitRepoVolumeOutputWithContext(context.Background())
}

func (i GitRepoVolumeArgs) ToGitRepoVolumeOutputWithContext(ctx context.Context) GitRepoVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeOutput)
}

func (i GitRepoVolumeArgs) ToOutput(ctx context.Context) pulumix.Output[GitRepoVolume] {
	return pulumix.Output[GitRepoVolume]{
		OutputState: i.ToGitRepoVolumeOutputWithContext(ctx).OutputState,
	}
}

func (i GitRepoVolumeArgs) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return i.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (i GitRepoVolumeArgs) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumeOutput).ToGitRepoVolumePtrOutputWithContext(ctx)
}

// GitRepoVolumePtrInput is an input type that accepts GitRepoVolumeArgs, GitRepoVolumePtr and GitRepoVolumePtrOutput values.
// You can construct a concrete instance of `GitRepoVolumePtrInput` via:
//
//	        GitRepoVolumeArgs{...}
//
//	or:
//
//	        nil
type GitRepoVolumePtrInput interface {
	pulumi.Input

	ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput
	ToGitRepoVolumePtrOutputWithContext(context.Context) GitRepoVolumePtrOutput
}

type gitRepoVolumePtrType GitRepoVolumeArgs

func GitRepoVolumePtr(v *GitRepoVolumeArgs) GitRepoVolumePtrInput {
	return (*gitRepoVolumePtrType)(v)
}

func (*gitRepoVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolume)(nil)).Elem()
}

func (i *gitRepoVolumePtrType) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return i.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (i *gitRepoVolumePtrType) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoVolumePtrOutput)
}

func (i *gitRepoVolumePtrType) ToOutput(ctx context.Context) pulumix.Output[*GitRepoVolume] {
	return pulumix.Output[*GitRepoVolume]{
		OutputState: i.ToGitRepoVolumePtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolume)(nil)).Elem()
}

func (o GitRepoVolumeOutput) ToGitRepoVolumeOutput() GitRepoVolumeOutput {
	return o
}

func (o GitRepoVolumeOutput) ToGitRepoVolumeOutputWithContext(ctx context.Context) GitRepoVolumeOutput {
	return o
}

func (o GitRepoVolumeOutput) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return o.ToGitRepoVolumePtrOutputWithContext(context.Background())
}

func (o GitRepoVolumeOutput) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepoVolume) *GitRepoVolume {
		return &v
	}).(GitRepoVolumePtrOutput)
}

func (o GitRepoVolumeOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepoVolume] {
	return pulumix.Output[GitRepoVolume]{
		OutputState: o.OutputState,
	}
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolume) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolume) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolume) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolume)(nil)).Elem()
}

func (o GitRepoVolumePtrOutput) ToGitRepoVolumePtrOutput() GitRepoVolumePtrOutput {
	return o
}

func (o GitRepoVolumePtrOutput) ToGitRepoVolumePtrOutputWithContext(ctx context.Context) GitRepoVolumePtrOutput {
	return o
}

func (o GitRepoVolumePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepoVolume] {
	return pulumix.Output[*GitRepoVolume]{
		OutputState: o.OutputState,
	}
}

func (o GitRepoVolumePtrOutput) Elem() GitRepoVolumeOutput {
	return o.ApplyT(func(v *GitRepoVolume) GitRepoVolume {
		if v != nil {
			return *v
		}
		var ret GitRepoVolume
		return ret
	}).(GitRepoVolumeOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolume) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeResponse struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// Repository URL
	Repository string `pulumi:"repository"`
	// Commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// Represents a volume that is populated with the contents of a git repository
type GitRepoVolumeResponseOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoVolumeResponse)(nil)).Elem()
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponseOutput() GitRepoVolumeResponseOutput {
	return o
}

func (o GitRepoVolumeResponseOutput) ToGitRepoVolumeResponseOutputWithContext(ctx context.Context) GitRepoVolumeResponseOutput {
	return o
}

func (o GitRepoVolumeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepoVolumeResponse] {
	return pulumix.Output[GitRepoVolumeResponse]{
		OutputState: o.OutputState,
	}
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeResponseOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeResponseOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoVolumeResponse) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type GitRepoVolumeResponsePtrOutput struct{ *pulumi.OutputState }

func (GitRepoVolumeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoVolumeResponse)(nil)).Elem()
}

func (o GitRepoVolumeResponsePtrOutput) ToGitRepoVolumeResponsePtrOutput() GitRepoVolumeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeResponsePtrOutput) ToGitRepoVolumeResponsePtrOutputWithContext(ctx context.Context) GitRepoVolumeResponsePtrOutput {
	return o
}

func (o GitRepoVolumeResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepoVolumeResponse] {
	return pulumix.Output[*GitRepoVolumeResponse]{
		OutputState: o.OutputState,
	}
}

func (o GitRepoVolumeResponsePtrOutput) Elem() GitRepoVolumeResponseOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) GitRepoVolumeResponse {
		if v != nil {
			return *v
		}
		var ret GitRepoVolumeResponse
		return ret
	}).(GitRepoVolumeResponseOutput)
}

// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
func (o GitRepoVolumeResponsePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// Repository URL
func (o GitRepoVolumeResponsePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// Commit hash for the specified revision.
func (o GitRepoVolumeResponsePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoVolumeResponse) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// The GPU resource.
type GpuResource struct {
	// The count of the GPU resource.
	Count int `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku string `pulumi:"sku"`
}

// GpuResourceInput is an input type that accepts GpuResourceArgs and GpuResourceOutput values.
// You can construct a concrete instance of `GpuResourceInput` via:
//
//	GpuResourceArgs{...}
type GpuResourceInput interface {
	pulumi.Input

	ToGpuResourceOutput() GpuResourceOutput
	ToGpuResourceOutputWithContext(context.Context) GpuResourceOutput
}

// The GPU resource.
type GpuResourceArgs struct {
	// The count of the GPU resource.
	Count pulumi.IntInput `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku pulumi.StringInput `pulumi:"sku"`
}

func (GpuResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResource)(nil)).Elem()
}

func (i GpuResourceArgs) ToGpuResourceOutput() GpuResourceOutput {
	return i.ToGpuResourceOutputWithContext(context.Background())
}

func (i GpuResourceArgs) ToGpuResourceOutputWithContext(ctx context.Context) GpuResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceOutput)
}

func (i GpuResourceArgs) ToOutput(ctx context.Context) pulumix.Output[GpuResource] {
	return pulumix.Output[GpuResource]{
		OutputState: i.ToGpuResourceOutputWithContext(ctx).OutputState,
	}
}

func (i GpuResourceArgs) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return i.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (i GpuResourceArgs) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourceOutput).ToGpuResourcePtrOutputWithContext(ctx)
}

// GpuResourcePtrInput is an input type that accepts GpuResourceArgs, GpuResourcePtr and GpuResourcePtrOutput values.
// You can construct a concrete instance of `GpuResourcePtrInput` via:
//
//	        GpuResourceArgs{...}
//
//	or:
//
//	        nil
type GpuResourcePtrInput interface {
	pulumi.Input

	ToGpuResourcePtrOutput() GpuResourcePtrOutput
	ToGpuResourcePtrOutputWithContext(context.Context) GpuResourcePtrOutput
}

type gpuResourcePtrType GpuResourceArgs

func GpuResourcePtr(v *GpuResourceArgs) GpuResourcePtrInput {
	return (*gpuResourcePtrType)(v)
}

func (*gpuResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResource)(nil)).Elem()
}

func (i *gpuResourcePtrType) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return i.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (i *gpuResourcePtrType) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpuResourcePtrOutput)
}

func (i *gpuResourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*GpuResource] {
	return pulumix.Output[*GpuResource]{
		OutputState: i.ToGpuResourcePtrOutputWithContext(ctx).OutputState,
	}
}

// The GPU resource.
type GpuResourceOutput struct{ *pulumi.OutputState }

func (GpuResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResource)(nil)).Elem()
}

func (o GpuResourceOutput) ToGpuResourceOutput() GpuResourceOutput {
	return o
}

func (o GpuResourceOutput) ToGpuResourceOutputWithContext(ctx context.Context) GpuResourceOutput {
	return o
}

func (o GpuResourceOutput) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return o.ToGpuResourcePtrOutputWithContext(context.Background())
}

func (o GpuResourceOutput) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GpuResource) *GpuResource {
		return &v
	}).(GpuResourcePtrOutput)
}

func (o GpuResourceOutput) ToOutput(ctx context.Context) pulumix.Output[GpuResource] {
	return pulumix.Output[GpuResource]{
		OutputState: o.OutputState,
	}
}

// The count of the GPU resource.
func (o GpuResourceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GpuResource) int { return v.Count }).(pulumi.IntOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GpuResource) string { return v.Sku }).(pulumi.StringOutput)
}

type GpuResourcePtrOutput struct{ *pulumi.OutputState }

func (GpuResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResource)(nil)).Elem()
}

func (o GpuResourcePtrOutput) ToGpuResourcePtrOutput() GpuResourcePtrOutput {
	return o
}

func (o GpuResourcePtrOutput) ToGpuResourcePtrOutputWithContext(ctx context.Context) GpuResourcePtrOutput {
	return o
}

func (o GpuResourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GpuResource] {
	return pulumix.Output[*GpuResource]{
		OutputState: o.OutputState,
	}
}

func (o GpuResourcePtrOutput) Elem() GpuResourceOutput {
	return o.ApplyT(func(v *GpuResource) GpuResource {
		if v != nil {
			return *v
		}
		var ret GpuResource
		return ret
	}).(GpuResourceOutput)
}

// The count of the GPU resource.
func (o GpuResourcePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpuResource) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The SKU of the GPU resource.
func (o GpuResourcePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpuResource) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The GPU resource.
type GpuResourceResponse struct {
	// The count of the GPU resource.
	Count int `pulumi:"count"`
	// The SKU of the GPU resource.
	Sku string `pulumi:"sku"`
}

// The GPU resource.
type GpuResourceResponseOutput struct{ *pulumi.OutputState }

func (GpuResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GpuResourceResponse)(nil)).Elem()
}

func (o GpuResourceResponseOutput) ToGpuResourceResponseOutput() GpuResourceResponseOutput {
	return o
}

func (o GpuResourceResponseOutput) ToGpuResourceResponseOutputWithContext(ctx context.Context) GpuResourceResponseOutput {
	return o
}

func (o GpuResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GpuResourceResponse] {
	return pulumix.Output[GpuResourceResponse]{
		OutputState: o.OutputState,
	}
}

// The count of the GPU resource.
func (o GpuResourceResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GpuResourceResponse) int { return v.Count }).(pulumi.IntOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceResponseOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v GpuResourceResponse) string { return v.Sku }).(pulumi.StringOutput)
}

type GpuResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (GpuResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpuResourceResponse)(nil)).Elem()
}

func (o GpuResourceResponsePtrOutput) ToGpuResourceResponsePtrOutput() GpuResourceResponsePtrOutput {
	return o
}

func (o GpuResourceResponsePtrOutput) ToGpuResourceResponsePtrOutputWithContext(ctx context.Context) GpuResourceResponsePtrOutput {
	return o
}

func (o GpuResourceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GpuResourceResponse] {
	return pulumix.Output[*GpuResourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o GpuResourceResponsePtrOutput) Elem() GpuResourceResponseOutput {
	return o.ApplyT(func(v *GpuResourceResponse) GpuResourceResponse {
		if v != nil {
			return *v
		}
		var ret GpuResourceResponse
		return ret
	}).(GpuResourceResponseOutput)
}

// The count of the GPU resource.
func (o GpuResourceResponsePtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpuResourceResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// The SKU of the GPU resource.
func (o GpuResourceResponsePtrOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpuResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Sku
	}).(pulumi.StringPtrOutput)
}

// The HTTP header.
type HttpHeader struct {
	// The header name.
	Name *string `pulumi:"name"`
	// The header value.
	Value *string `pulumi:"value"`
}

// HttpHeaderInput is an input type that accepts HttpHeaderArgs and HttpHeaderOutput values.
// You can construct a concrete instance of `HttpHeaderInput` via:
//
//	HttpHeaderArgs{...}
type HttpHeaderInput interface {
	pulumi.Input

	ToHttpHeaderOutput() HttpHeaderOutput
	ToHttpHeaderOutputWithContext(context.Context) HttpHeaderOutput
}

// The HTTP header.
type HttpHeaderArgs struct {
	// The header name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (HttpHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeader)(nil)).Elem()
}

func (i HttpHeaderArgs) ToHttpHeaderOutput() HttpHeaderOutput {
	return i.ToHttpHeaderOutputWithContext(context.Background())
}

func (i HttpHeaderArgs) ToHttpHeaderOutputWithContext(ctx context.Context) HttpHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderOutput)
}

func (i HttpHeaderArgs) ToOutput(ctx context.Context) pulumix.Output[HttpHeader] {
	return pulumix.Output[HttpHeader]{
		OutputState: i.ToHttpHeaderOutputWithContext(ctx).OutputState,
	}
}

// HttpHeaderArrayInput is an input type that accepts HttpHeaderArray and HttpHeaderArrayOutput values.
// You can construct a concrete instance of `HttpHeaderArrayInput` via:
//
//	HttpHeaderArray{ HttpHeaderArgs{...} }
type HttpHeaderArrayInput interface {
	pulumi.Input

	ToHttpHeaderArrayOutput() HttpHeaderArrayOutput
	ToHttpHeaderArrayOutputWithContext(context.Context) HttpHeaderArrayOutput
}

type HttpHeaderArray []HttpHeaderInput

func (HttpHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeader)(nil)).Elem()
}

func (i HttpHeaderArray) ToHttpHeaderArrayOutput() HttpHeaderArrayOutput {
	return i.ToHttpHeaderArrayOutputWithContext(context.Background())
}

func (i HttpHeaderArray) ToHttpHeaderArrayOutputWithContext(ctx context.Context) HttpHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderArrayOutput)
}

func (i HttpHeaderArray) ToOutput(ctx context.Context) pulumix.Output[[]HttpHeader] {
	return pulumix.Output[[]HttpHeader]{
		OutputState: i.ToHttpHeaderArrayOutputWithContext(ctx).OutputState,
	}
}

// The HTTP header.
type HttpHeaderOutput struct{ *pulumi.OutputState }

func (HttpHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeader)(nil)).Elem()
}

func (o HttpHeaderOutput) ToHttpHeaderOutput() HttpHeaderOutput {
	return o
}

func (o HttpHeaderOutput) ToHttpHeaderOutputWithContext(ctx context.Context) HttpHeaderOutput {
	return o
}

func (o HttpHeaderOutput) ToOutput(ctx context.Context) pulumix.Output[HttpHeader] {
	return pulumix.Output[HttpHeader]{
		OutputState: o.OutputState,
	}
}

// The header name.
func (o HttpHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header value.
func (o HttpHeaderOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeader) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HttpHeaderArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeader)(nil)).Elem()
}

func (o HttpHeaderArrayOutput) ToHttpHeaderArrayOutput() HttpHeaderArrayOutput {
	return o
}

func (o HttpHeaderArrayOutput) ToHttpHeaderArrayOutputWithContext(ctx context.Context) HttpHeaderArrayOutput {
	return o
}

func (o HttpHeaderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]HttpHeader] {
	return pulumix.Output[[]HttpHeader]{
		OutputState: o.OutputState,
	}
}

func (o HttpHeaderArrayOutput) Index(i pulumi.IntInput) HttpHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeader {
		return vs[0].([]HttpHeader)[vs[1].(int)]
	}).(HttpHeaderOutput)
}

// The HTTP header.
type HttpHeaderResponse struct {
	// The header name.
	Name *string `pulumi:"name"`
	// The header value.
	Value *string `pulumi:"value"`
}

// The HTTP header.
type HttpHeaderResponseOutput struct{ *pulumi.OutputState }

func (HttpHeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderResponse)(nil)).Elem()
}

func (o HttpHeaderResponseOutput) ToHttpHeaderResponseOutput() HttpHeaderResponseOutput {
	return o
}

func (o HttpHeaderResponseOutput) ToHttpHeaderResponseOutputWithContext(ctx context.Context) HttpHeaderResponseOutput {
	return o
}

func (o HttpHeaderResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HttpHeaderResponse] {
	return pulumix.Output[HttpHeaderResponse]{
		OutputState: o.OutputState,
	}
}

// The header name.
func (o HttpHeaderResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header value.
func (o HttpHeaderResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpHeaderResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type HttpHeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpHeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpHeaderResponse)(nil)).Elem()
}

func (o HttpHeaderResponseArrayOutput) ToHttpHeaderResponseArrayOutput() HttpHeaderResponseArrayOutput {
	return o
}

func (o HttpHeaderResponseArrayOutput) ToHttpHeaderResponseArrayOutputWithContext(ctx context.Context) HttpHeaderResponseArrayOutput {
	return o
}

func (o HttpHeaderResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]HttpHeaderResponse] {
	return pulumix.Output[[]HttpHeaderResponse]{
		OutputState: o.OutputState,
	}
}

func (o HttpHeaderResponseArrayOutput) Index(i pulumi.IntInput) HttpHeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpHeaderResponse {
		return vs[0].([]HttpHeaderResponse)[vs[1].(int)]
	}).(HttpHeaderResponseOutput)
}

// Image registry credential.
type ImageRegistryCredential struct {
	// The identity for the private registry.
	Identity *string `pulumi:"identity"`
	// The identity URL for the private registry.
	IdentityUrl *string `pulumi:"identityUrl"`
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username *string `pulumi:"username"`
}

// ImageRegistryCredentialInput is an input type that accepts ImageRegistryCredentialArgs and ImageRegistryCredentialOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialInput` via:
//
//	ImageRegistryCredentialArgs{...}
type ImageRegistryCredentialInput interface {
	pulumi.Input

	ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput
	ToImageRegistryCredentialOutputWithContext(context.Context) ImageRegistryCredentialOutput
}

// Image registry credential.
type ImageRegistryCredentialArgs struct {
	// The identity for the private registry.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The identity URL for the private registry.
	IdentityUrl pulumi.StringPtrInput `pulumi:"identityUrl"`
	// The password for the private registry.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server pulumi.StringInput `pulumi:"server"`
	// The username for the private registry.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ImageRegistryCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return i.ToImageRegistryCredentialOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArgs) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialOutput)
}

func (i ImageRegistryCredentialArgs) ToOutput(ctx context.Context) pulumix.Output[ImageRegistryCredential] {
	return pulumix.Output[ImageRegistryCredential]{
		OutputState: i.ToImageRegistryCredentialOutputWithContext(ctx).OutputState,
	}
}

// ImageRegistryCredentialArrayInput is an input type that accepts ImageRegistryCredentialArray and ImageRegistryCredentialArrayOutput values.
// You can construct a concrete instance of `ImageRegistryCredentialArrayInput` via:
//
//	ImageRegistryCredentialArray{ ImageRegistryCredentialArgs{...} }
type ImageRegistryCredentialArrayInput interface {
	pulumi.Input

	ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput
	ToImageRegistryCredentialArrayOutputWithContext(context.Context) ImageRegistryCredentialArrayOutput
}

type ImageRegistryCredentialArray []ImageRegistryCredentialInput

func (ImageRegistryCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredential)(nil)).Elem()
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput {
	return i.ToImageRegistryCredentialArrayOutputWithContext(context.Background())
}

func (i ImageRegistryCredentialArray) ToImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryCredentialArrayOutput)
}

func (i ImageRegistryCredentialArray) ToOutput(ctx context.Context) pulumix.Output[[]ImageRegistryCredential] {
	return pulumix.Output[[]ImageRegistryCredential]{
		OutputState: i.ToImageRegistryCredentialArrayOutputWithContext(ctx).OutputState,
	}
}

// Image registry credential.
type ImageRegistryCredentialOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutput() ImageRegistryCredentialOutput {
	return o
}

func (o ImageRegistryCredentialOutput) ToImageRegistryCredentialOutputWithContext(ctx context.Context) ImageRegistryCredentialOutput {
	return o
}

func (o ImageRegistryCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRegistryCredential] {
	return pulumix.Output[ImageRegistryCredential]{
		OutputState: o.OutputState,
	}
}

// The identity for the private registry.
func (o ImageRegistryCredentialOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The identity URL for the private registry.
func (o ImageRegistryCredentialOutput) IdentityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.IdentityUrl }).(pulumi.StringPtrOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredential) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ImageRegistryCredentialArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredential)(nil)).Elem()
}

func (o ImageRegistryCredentialArrayOutput) ToImageRegistryCredentialArrayOutput() ImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageRegistryCredentialArrayOutput) ToImageRegistryCredentialArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialArrayOutput {
	return o
}

func (o ImageRegistryCredentialArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageRegistryCredential] {
	return pulumix.Output[[]ImageRegistryCredential]{
		OutputState: o.OutputState,
	}
}

func (o ImageRegistryCredentialArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredential {
		return vs[0].([]ImageRegistryCredential)[vs[1].(int)]
	}).(ImageRegistryCredentialOutput)
}

// Image registry credential.
type ImageRegistryCredentialResponse struct {
	// The identity for the private registry.
	Identity *string `pulumi:"identity"`
	// The identity URL for the private registry.
	IdentityUrl *string `pulumi:"identityUrl"`
	// The password for the private registry.
	Password *string `pulumi:"password"`
	// The Docker image registry server without a protocol such as "http" and "https".
	Server string `pulumi:"server"`
	// The username for the private registry.
	Username *string `pulumi:"username"`
}

// Image registry credential.
type ImageRegistryCredentialResponseOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutput() ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToImageRegistryCredentialResponseOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseOutput {
	return o
}

func (o ImageRegistryCredentialResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ImageRegistryCredentialResponse] {
	return pulumix.Output[ImageRegistryCredentialResponse]{
		OutputState: o.OutputState,
	}
}

// The identity for the private registry.
func (o ImageRegistryCredentialResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The identity URL for the private registry.
func (o ImageRegistryCredentialResponseOutput) IdentityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.IdentityUrl }).(pulumi.StringPtrOutput)
}

// The password for the private registry.
func (o ImageRegistryCredentialResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The Docker image registry server without a protocol such as "http" and "https".
func (o ImageRegistryCredentialResponseOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) string { return v.Server }).(pulumi.StringOutput)
}

// The username for the private registry.
func (o ImageRegistryCredentialResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRegistryCredentialResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ImageRegistryCredentialResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryCredentialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageRegistryCredentialResponse)(nil)).Elem()
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutput() ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) ToImageRegistryCredentialResponseArrayOutputWithContext(ctx context.Context) ImageRegistryCredentialResponseArrayOutput {
	return o
}

func (o ImageRegistryCredentialResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ImageRegistryCredentialResponse] {
	return pulumix.Output[[]ImageRegistryCredentialResponse]{
		OutputState: o.OutputState,
	}
}

func (o ImageRegistryCredentialResponseArrayOutput) Index(i pulumi.IntInput) ImageRegistryCredentialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageRegistryCredentialResponse {
		return vs[0].([]ImageRegistryCredentialResponse)[vs[1].(int)]
	}).(ImageRegistryCredentialResponseOutput)
}

// The init container definition.
type InitContainerDefinition struct {
	// The command to execute within the init container in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the init container.
	EnvironmentVariables []EnvironmentVariable `pulumi:"environmentVariables"`
	// The image of the init container.
	Image *string `pulumi:"image"`
	// The name for the init container.
	Name string `pulumi:"name"`
	// The volume mounts available to the init container.
	VolumeMounts []VolumeMount `pulumi:"volumeMounts"`
}

// InitContainerDefinitionInput is an input type that accepts InitContainerDefinitionArgs and InitContainerDefinitionOutput values.
// You can construct a concrete instance of `InitContainerDefinitionInput` via:
//
//	InitContainerDefinitionArgs{...}
type InitContainerDefinitionInput interface {
	pulumi.Input

	ToInitContainerDefinitionOutput() InitContainerDefinitionOutput
	ToInitContainerDefinitionOutputWithContext(context.Context) InitContainerDefinitionOutput
}

// The init container definition.
type InitContainerDefinitionArgs struct {
	// The command to execute within the init container in exec form.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// The environment variables to set in the init container.
	EnvironmentVariables EnvironmentVariableArrayInput `pulumi:"environmentVariables"`
	// The image of the init container.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// The name for the init container.
	Name pulumi.StringInput `pulumi:"name"`
	// The volume mounts available to the init container.
	VolumeMounts VolumeMountArrayInput `pulumi:"volumeMounts"`
}

func (InitContainerDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainerDefinition)(nil)).Elem()
}

func (i InitContainerDefinitionArgs) ToInitContainerDefinitionOutput() InitContainerDefinitionOutput {
	return i.ToInitContainerDefinitionOutputWithContext(context.Background())
}

func (i InitContainerDefinitionArgs) ToInitContainerDefinitionOutputWithContext(ctx context.Context) InitContainerDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitContainerDefinitionOutput)
}

func (i InitContainerDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[InitContainerDefinition] {
	return pulumix.Output[InitContainerDefinition]{
		OutputState: i.ToInitContainerDefinitionOutputWithContext(ctx).OutputState,
	}
}

// InitContainerDefinitionArrayInput is an input type that accepts InitContainerDefinitionArray and InitContainerDefinitionArrayOutput values.
// You can construct a concrete instance of `InitContainerDefinitionArrayInput` via:
//
//	InitContainerDefinitionArray{ InitContainerDefinitionArgs{...} }
type InitContainerDefinitionArrayInput interface {
	pulumi.Input

	ToInitContainerDefinitionArrayOutput() InitContainerDefinitionArrayOutput
	ToInitContainerDefinitionArrayOutputWithContext(context.Context) InitContainerDefinitionArrayOutput
}

type InitContainerDefinitionArray []InitContainerDefinitionInput

func (InitContainerDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainerDefinition)(nil)).Elem()
}

func (i InitContainerDefinitionArray) ToInitContainerDefinitionArrayOutput() InitContainerDefinitionArrayOutput {
	return i.ToInitContainerDefinitionArrayOutputWithContext(context.Background())
}

func (i InitContainerDefinitionArray) ToInitContainerDefinitionArrayOutputWithContext(ctx context.Context) InitContainerDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InitContainerDefinitionArrayOutput)
}

func (i InitContainerDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]InitContainerDefinition] {
	return pulumix.Output[[]InitContainerDefinition]{
		OutputState: i.ToInitContainerDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

// The init container definition.
type InitContainerDefinitionOutput struct{ *pulumi.OutputState }

func (InitContainerDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainerDefinition)(nil)).Elem()
}

func (o InitContainerDefinitionOutput) ToInitContainerDefinitionOutput() InitContainerDefinitionOutput {
	return o
}

func (o InitContainerDefinitionOutput) ToInitContainerDefinitionOutputWithContext(ctx context.Context) InitContainerDefinitionOutput {
	return o
}

func (o InitContainerDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[InitContainerDefinition] {
	return pulumix.Output[InitContainerDefinition]{
		OutputState: o.OutputState,
	}
}

// The command to execute within the init container in exec form.
func (o InitContainerDefinitionOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainerDefinition) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the init container.
func (o InitContainerDefinitionOutput) EnvironmentVariables() EnvironmentVariableArrayOutput {
	return o.ApplyT(func(v InitContainerDefinition) []EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableArrayOutput)
}

// The image of the init container.
func (o InitContainerDefinitionOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainerDefinition) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// The name for the init container.
func (o InitContainerDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InitContainerDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// The volume mounts available to the init container.
func (o InitContainerDefinitionOutput) VolumeMounts() VolumeMountArrayOutput {
	return o.ApplyT(func(v InitContainerDefinition) []VolumeMount { return v.VolumeMounts }).(VolumeMountArrayOutput)
}

type InitContainerDefinitionArrayOutput struct{ *pulumi.OutputState }

func (InitContainerDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainerDefinition)(nil)).Elem()
}

func (o InitContainerDefinitionArrayOutput) ToInitContainerDefinitionArrayOutput() InitContainerDefinitionArrayOutput {
	return o
}

func (o InitContainerDefinitionArrayOutput) ToInitContainerDefinitionArrayOutputWithContext(ctx context.Context) InitContainerDefinitionArrayOutput {
	return o
}

func (o InitContainerDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitContainerDefinition] {
	return pulumix.Output[[]InitContainerDefinition]{
		OutputState: o.OutputState,
	}
}

func (o InitContainerDefinitionArrayOutput) Index(i pulumi.IntInput) InitContainerDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitContainerDefinition {
		return vs[0].([]InitContainerDefinition)[vs[1].(int)]
	}).(InitContainerDefinitionOutput)
}

// The init container definition.
type InitContainerDefinitionResponse struct {
	// The command to execute within the init container in exec form.
	Command []string `pulumi:"command"`
	// The environment variables to set in the init container.
	EnvironmentVariables []EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// The image of the init container.
	Image *string `pulumi:"image"`
	// The instance view of the init container. Only valid in response.
	InstanceView InitContainerPropertiesDefinitionResponseInstanceView `pulumi:"instanceView"`
	// The name for the init container.
	Name string `pulumi:"name"`
	// The volume mounts available to the init container.
	VolumeMounts []VolumeMountResponse `pulumi:"volumeMounts"`
}

// The init container definition.
type InitContainerDefinitionResponseOutput struct{ *pulumi.OutputState }

func (InitContainerDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainerDefinitionResponse)(nil)).Elem()
}

func (o InitContainerDefinitionResponseOutput) ToInitContainerDefinitionResponseOutput() InitContainerDefinitionResponseOutput {
	return o
}

func (o InitContainerDefinitionResponseOutput) ToInitContainerDefinitionResponseOutputWithContext(ctx context.Context) InitContainerDefinitionResponseOutput {
	return o
}

func (o InitContainerDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InitContainerDefinitionResponse] {
	return pulumix.Output[InitContainerDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The command to execute within the init container in exec form.
func (o InitContainerDefinitionResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// The environment variables to set in the init container.
func (o InitContainerDefinitionResponseOutput) EnvironmentVariables() EnvironmentVariableResponseArrayOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) []EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseArrayOutput)
}

// The image of the init container.
func (o InitContainerDefinitionResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// The instance view of the init container. Only valid in response.
func (o InitContainerDefinitionResponseOutput) InstanceView() InitContainerPropertiesDefinitionResponseInstanceViewOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) InitContainerPropertiesDefinitionResponseInstanceView {
		return v.InstanceView
	}).(InitContainerPropertiesDefinitionResponseInstanceViewOutput)
}

// The name for the init container.
func (o InitContainerDefinitionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The volume mounts available to the init container.
func (o InitContainerDefinitionResponseOutput) VolumeMounts() VolumeMountResponseArrayOutput {
	return o.ApplyT(func(v InitContainerDefinitionResponse) []VolumeMountResponse { return v.VolumeMounts }).(VolumeMountResponseArrayOutput)
}

type InitContainerDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (InitContainerDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InitContainerDefinitionResponse)(nil)).Elem()
}

func (o InitContainerDefinitionResponseArrayOutput) ToInitContainerDefinitionResponseArrayOutput() InitContainerDefinitionResponseArrayOutput {
	return o
}

func (o InitContainerDefinitionResponseArrayOutput) ToInitContainerDefinitionResponseArrayOutputWithContext(ctx context.Context) InitContainerDefinitionResponseArrayOutput {
	return o
}

func (o InitContainerDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InitContainerDefinitionResponse] {
	return pulumix.Output[[]InitContainerDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o InitContainerDefinitionResponseArrayOutput) Index(i pulumi.IntInput) InitContainerDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InitContainerDefinitionResponse {
		return vs[0].([]InitContainerDefinitionResponse)[vs[1].(int)]
	}).(InitContainerDefinitionResponseOutput)
}

// The instance view of the init container. Only valid in response.
type InitContainerPropertiesDefinitionResponseInstanceView struct {
	// The current state of the init container.
	CurrentState ContainerStateResponse `pulumi:"currentState"`
	// The events of the init container.
	Events []EventResponse `pulumi:"events"`
	// The previous state of the init container.
	PreviousState ContainerStateResponse `pulumi:"previousState"`
	// The number of times that the init container has been restarted.
	RestartCount int `pulumi:"restartCount"`
}

// The instance view of the init container. Only valid in response.
type InitContainerPropertiesDefinitionResponseInstanceViewOutput struct{ *pulumi.OutputState }

func (InitContainerPropertiesDefinitionResponseInstanceViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InitContainerPropertiesDefinitionResponseInstanceView)(nil)).Elem()
}

func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) ToInitContainerPropertiesDefinitionResponseInstanceViewOutput() InitContainerPropertiesDefinitionResponseInstanceViewOutput {
	return o
}

func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) ToInitContainerPropertiesDefinitionResponseInstanceViewOutputWithContext(ctx context.Context) InitContainerPropertiesDefinitionResponseInstanceViewOutput {
	return o
}

func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) ToOutput(ctx context.Context) pulumix.Output[InitContainerPropertiesDefinitionResponseInstanceView] {
	return pulumix.Output[InitContainerPropertiesDefinitionResponseInstanceView]{
		OutputState: o.OutputState,
	}
}

// The current state of the init container.
func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) CurrentState() ContainerStateResponseOutput {
	return o.ApplyT(func(v InitContainerPropertiesDefinitionResponseInstanceView) ContainerStateResponse {
		return v.CurrentState
	}).(ContainerStateResponseOutput)
}

// The events of the init container.
func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) Events() EventResponseArrayOutput {
	return o.ApplyT(func(v InitContainerPropertiesDefinitionResponseInstanceView) []EventResponse { return v.Events }).(EventResponseArrayOutput)
}

// The previous state of the init container.
func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) PreviousState() ContainerStateResponseOutput {
	return o.ApplyT(func(v InitContainerPropertiesDefinitionResponseInstanceView) ContainerStateResponse {
		return v.PreviousState
	}).(ContainerStateResponseOutput)
}

// The number of times that the init container has been restarted.
func (o InitContainerPropertiesDefinitionResponseInstanceViewOutput) RestartCount() pulumi.IntOutput {
	return o.ApplyT(func(v InitContainerPropertiesDefinitionResponseInstanceView) int { return v.RestartCount }).(pulumi.IntOutput)
}

// IP address for the container group.
type IpAddress struct {
	// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
	AutoGeneratedDomainNameLabelScope *string `pulumi:"autoGeneratedDomainNameLabelScope"`
	// The Dns name label for the IP.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []Port `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for IpAddress
func (val *IpAddress) Defaults() *IpAddress {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoGeneratedDomainNameLabelScope == nil {
		autoGeneratedDomainNameLabelScope_ := "Unsecure"
		tmp.AutoGeneratedDomainNameLabelScope = &autoGeneratedDomainNameLabelScope_
	}
	return &tmp
}

// IpAddressInput is an input type that accepts IpAddressArgs and IpAddressOutput values.
// You can construct a concrete instance of `IpAddressInput` via:
//
//	IpAddressArgs{...}
type IpAddressInput interface {
	pulumi.Input

	ToIpAddressOutput() IpAddressOutput
	ToIpAddressOutputWithContext(context.Context) IpAddressOutput
}

// IP address for the container group.
type IpAddressArgs struct {
	// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
	AutoGeneratedDomainNameLabelScope pulumi.StringPtrInput `pulumi:"autoGeneratedDomainNameLabelScope"`
	// The Dns name label for the IP.
	DnsNameLabel pulumi.StringPtrInput `pulumi:"dnsNameLabel"`
	// The IP exposed to the public internet.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports PortArrayInput `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for IpAddressArgs
func (val *IpAddressArgs) Defaults() *IpAddressArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoGeneratedDomainNameLabelScope == nil {
		tmp.AutoGeneratedDomainNameLabelScope = pulumi.StringPtr("Unsecure")
	}
	return &tmp
}
func (IpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddress)(nil)).Elem()
}

func (i IpAddressArgs) ToIpAddressOutput() IpAddressOutput {
	return i.ToIpAddressOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput)
}

func (i IpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[IpAddress] {
	return pulumix.Output[IpAddress]{
		OutputState: i.ToIpAddressOutputWithContext(ctx).OutputState,
	}
}

func (i IpAddressArgs) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i IpAddressArgs) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput).ToIpAddressPtrOutputWithContext(ctx)
}

// IpAddressPtrInput is an input type that accepts IpAddressArgs, IpAddressPtr and IpAddressPtrOutput values.
// You can construct a concrete instance of `IpAddressPtrInput` via:
//
//	        IpAddressArgs{...}
//
//	or:
//
//	        nil
type IpAddressPtrInput interface {
	pulumi.Input

	ToIpAddressPtrOutput() IpAddressPtrOutput
	ToIpAddressPtrOutputWithContext(context.Context) IpAddressPtrOutput
}

type ipAddressPtrType IpAddressArgs

func IpAddressPtr(v *IpAddressArgs) IpAddressPtrInput {
	return (*ipAddressPtrType)(v)
}

func (*ipAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (i *ipAddressPtrType) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return i.ToIpAddressPtrOutputWithContext(context.Background())
}

func (i *ipAddressPtrType) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressPtrOutput)
}

func (i *ipAddressPtrType) ToOutput(ctx context.Context) pulumix.Output[*IpAddress] {
	return pulumix.Output[*IpAddress]{
		OutputState: i.ToIpAddressPtrOutputWithContext(ctx).OutputState,
	}
}

// IP address for the container group.
type IpAddressOutput struct{ *pulumi.OutputState }

func (IpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddress)(nil)).Elem()
}

func (o IpAddressOutput) ToIpAddressOutput() IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return o.ToIpAddressPtrOutputWithContext(context.Background())
}

func (o IpAddressOutput) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpAddress) *IpAddress {
		return &v
	}).(IpAddressPtrOutput)
}

func (o IpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[IpAddress] {
	return pulumix.Output[IpAddress]{
		OutputState: o.OutputState,
	}
}

// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
func (o IpAddressOutput) AutoGeneratedDomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddress) *string { return v.AutoGeneratedDomainNameLabelScope }).(pulumi.StringPtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddress) *string { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddress) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressOutput) Ports() PortArrayOutput {
	return o.ApplyT(func(v IpAddress) []Port { return v.Ports }).(PortArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddress) string { return v.Type }).(pulumi.StringOutput)
}

type IpAddressPtrOutput struct{ *pulumi.OutputState }

func (IpAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (o IpAddressPtrOutput) ToIpAddressPtrOutput() IpAddressPtrOutput {
	return o
}

func (o IpAddressPtrOutput) ToIpAddressPtrOutputWithContext(ctx context.Context) IpAddressPtrOutput {
	return o
}

func (o IpAddressPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IpAddress] {
	return pulumix.Output[*IpAddress]{
		OutputState: o.OutputState,
	}
}

func (o IpAddressPtrOutput) Elem() IpAddressOutput {
	return o.ApplyT(func(v *IpAddress) IpAddress {
		if v != nil {
			return *v
		}
		var ret IpAddress
		return ret
	}).(IpAddressOutput)
}

// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
func (o IpAddressPtrOutput) AutoGeneratedDomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return v.AutoGeneratedDomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressPtrOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return v.DnsNameLabel
	}).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressPtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressPtrOutput) Ports() PortArrayOutput {
	return o.ApplyT(func(v *IpAddress) []Port {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(PortArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// IP address for the container group.
type IpAddressResponse struct {
	// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
	AutoGeneratedDomainNameLabelScope *string `pulumi:"autoGeneratedDomainNameLabelScope"`
	// The Dns name label for the IP.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The FQDN for the IP.
	Fqdn string `pulumi:"fqdn"`
	// The IP exposed to the public internet.
	Ip *string `pulumi:"ip"`
	// The list of ports exposed on the container group.
	Ports []PortResponse `pulumi:"ports"`
	// Specifies if the IP is exposed to the public internet or private VNET.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for IpAddressResponse
func (val *IpAddressResponse) Defaults() *IpAddressResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoGeneratedDomainNameLabelScope == nil {
		autoGeneratedDomainNameLabelScope_ := "Unsecure"
		tmp.AutoGeneratedDomainNameLabelScope = &autoGeneratedDomainNameLabelScope_
	}
	return &tmp
}

// IP address for the container group.
type IpAddressResponseOutput struct{ *pulumi.OutputState }

func (IpAddressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutput() IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToIpAddressResponseOutputWithContext(ctx context.Context) IpAddressResponseOutput {
	return o
}

func (o IpAddressResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IpAddressResponse] {
	return pulumix.Output[IpAddressResponse]{
		OutputState: o.OutputState,
	}
}

// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
func (o IpAddressResponseOutput) AutoGeneratedDomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.AutoGeneratedDomainNameLabelScope }).(pulumi.StringPtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressResponseOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The FQDN for the IP.
func (o IpAddressResponseOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressResponse) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponseOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpAddressResponse) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponseOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v IpAddressResponse) []PortResponse { return v.Ports }).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpAddressResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IpAddressResponsePtrOutput struct{ *pulumi.OutputState }

func (IpAddressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddressResponse)(nil)).Elem()
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutput() IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) ToIpAddressResponsePtrOutputWithContext(ctx context.Context) IpAddressResponsePtrOutput {
	return o
}

func (o IpAddressResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IpAddressResponse] {
	return pulumix.Output[*IpAddressResponse]{
		OutputState: o.OutputState,
	}
}

func (o IpAddressResponsePtrOutput) Elem() IpAddressResponseOutput {
	return o.ApplyT(func(v *IpAddressResponse) IpAddressResponse {
		if v != nil {
			return *v
		}
		var ret IpAddressResponse
		return ret
	}).(IpAddressResponseOutput)
}

// The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant.
func (o IpAddressResponsePtrOutput) AutoGeneratedDomainNameLabelScope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.AutoGeneratedDomainNameLabelScope
	}).(pulumi.StringPtrOutput)
}

// The Dns name label for the IP.
func (o IpAddressResponsePtrOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsNameLabel
	}).(pulumi.StringPtrOutput)
}

// The FQDN for the IP.
func (o IpAddressResponsePtrOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Fqdn
	}).(pulumi.StringPtrOutput)
}

// The IP exposed to the public internet.
func (o IpAddressResponsePtrOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return v.Ip
	}).(pulumi.StringPtrOutput)
}

// The list of ports exposed on the container group.
func (o IpAddressResponsePtrOutput) Ports() PortResponseArrayOutput {
	return o.ApplyT(func(v *IpAddressResponse) []PortResponse {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(PortResponseArrayOutput)
}

// Specifies if the IP is exposed to the public internet or private VNET.
func (o IpAddressResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddressResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Container group log analytics information.
type LogAnalytics struct {
	// The log type to be used.
	LogType *string `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata map[string]string `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId string `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey string `pulumi:"workspaceKey"`
	// The workspace resource id for log analytics
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// LogAnalyticsInput is an input type that accepts LogAnalyticsArgs and LogAnalyticsOutput values.
// You can construct a concrete instance of `LogAnalyticsInput` via:
//
//	LogAnalyticsArgs{...}
type LogAnalyticsInput interface {
	pulumi.Input

	ToLogAnalyticsOutput() LogAnalyticsOutput
	ToLogAnalyticsOutputWithContext(context.Context) LogAnalyticsOutput
}

// Container group log analytics information.
type LogAnalyticsArgs struct {
	// The log type to be used.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey pulumi.StringInput `pulumi:"workspaceKey"`
	// The workspace resource id for log analytics
	WorkspaceResourceId pulumi.StringPtrInput `pulumi:"workspaceResourceId"`
}

func (LogAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalytics)(nil)).Elem()
}

func (i LogAnalyticsArgs) ToLogAnalyticsOutput() LogAnalyticsOutput {
	return i.ToLogAnalyticsOutputWithContext(context.Background())
}

func (i LogAnalyticsArgs) ToLogAnalyticsOutputWithContext(ctx context.Context) LogAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsOutput)
}

func (i LogAnalyticsArgs) ToOutput(ctx context.Context) pulumix.Output[LogAnalytics] {
	return pulumix.Output[LogAnalytics]{
		OutputState: i.ToLogAnalyticsOutputWithContext(ctx).OutputState,
	}
}

func (i LogAnalyticsArgs) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return i.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsArgs) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsOutput).ToLogAnalyticsPtrOutputWithContext(ctx)
}

// LogAnalyticsPtrInput is an input type that accepts LogAnalyticsArgs, LogAnalyticsPtr and LogAnalyticsPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsPtrInput` via:
//
//	        LogAnalyticsArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsPtrInput interface {
	pulumi.Input

	ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput
	ToLogAnalyticsPtrOutputWithContext(context.Context) LogAnalyticsPtrOutput
}

type logAnalyticsPtrType LogAnalyticsArgs

func LogAnalyticsPtr(v *LogAnalyticsArgs) LogAnalyticsPtrInput {
	return (*logAnalyticsPtrType)(v)
}

func (*logAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalytics)(nil)).Elem()
}

func (i *logAnalyticsPtrType) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return i.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsPtrType) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsPtrOutput)
}

func (i *logAnalyticsPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogAnalytics] {
	return pulumix.Output[*LogAnalytics]{
		OutputState: i.ToLogAnalyticsPtrOutputWithContext(ctx).OutputState,
	}
}

// Container group log analytics information.
type LogAnalyticsOutput struct{ *pulumi.OutputState }

func (LogAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalytics)(nil)).Elem()
}

func (o LogAnalyticsOutput) ToLogAnalyticsOutput() LogAnalyticsOutput {
	return o
}

func (o LogAnalyticsOutput) ToLogAnalyticsOutputWithContext(ctx context.Context) LogAnalyticsOutput {
	return o
}

func (o LogAnalyticsOutput) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return o.ToLogAnalyticsPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsOutput) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalytics) *LogAnalytics {
		return &v
	}).(LogAnalyticsPtrOutput)
}

func (o LogAnalyticsOutput) ToOutput(ctx context.Context) pulumix.Output[LogAnalytics] {
	return pulumix.Output[LogAnalytics]{
		OutputState: o.OutputState,
	}
}

// The log type to be used.
func (o LogAnalyticsOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalytics) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalytics) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalytics) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsOutput) WorkspaceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalytics) string { return v.WorkspaceKey }).(pulumi.StringOutput)
}

// The workspace resource id for log analytics
func (o LogAnalyticsOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalytics) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalytics)(nil)).Elem()
}

func (o LogAnalyticsPtrOutput) ToLogAnalyticsPtrOutput() LogAnalyticsPtrOutput {
	return o
}

func (o LogAnalyticsPtrOutput) ToLogAnalyticsPtrOutputWithContext(ctx context.Context) LogAnalyticsPtrOutput {
	return o
}

func (o LogAnalyticsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogAnalytics] {
	return pulumix.Output[*LogAnalytics]{
		OutputState: o.OutputState,
	}
}

func (o LogAnalyticsPtrOutput) Elem() LogAnalyticsOutput {
	return o.ApplyT(func(v *LogAnalytics) LogAnalytics {
		if v != nil {
			return *v
		}
		var ret LogAnalytics
		return ret
	}).(LogAnalyticsOutput)
}

// The log type to be used.
func (o LogAnalyticsPtrOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.LogType
	}).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalytics) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsPtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsPtrOutput) WorkspaceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceKey
	}).(pulumi.StringPtrOutput)
}

// The workspace resource id for log analytics
func (o LogAnalyticsPtrOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Container group log analytics information.
type LogAnalyticsResponse struct {
	// The log type to be used.
	LogType *string `pulumi:"logType"`
	// Metadata for log analytics.
	Metadata map[string]string `pulumi:"metadata"`
	// The workspace id for log analytics
	WorkspaceId string `pulumi:"workspaceId"`
	// The workspace key for log analytics
	WorkspaceKey string `pulumi:"workspaceKey"`
	// The workspace resource id for log analytics
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// Container group log analytics information.
type LogAnalyticsResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsResponse)(nil)).Elem()
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponseOutput() LogAnalyticsResponseOutput {
	return o
}

func (o LogAnalyticsResponseOutput) ToLogAnalyticsResponseOutputWithContext(ctx context.Context) LogAnalyticsResponseOutput {
	return o
}

func (o LogAnalyticsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LogAnalyticsResponse] {
	return pulumix.Output[LogAnalyticsResponse]{
		OutputState: o.OutputState,
	}
}

// The log type to be used.
func (o LogAnalyticsResponseOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsResponseOutput) WorkspaceKey() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) string { return v.WorkspaceKey }).(pulumi.StringOutput)
}

// The workspace resource id for log analytics
func (o LogAnalyticsResponseOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsResponse) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsResponse)(nil)).Elem()
}

func (o LogAnalyticsResponsePtrOutput) ToLogAnalyticsResponsePtrOutput() LogAnalyticsResponsePtrOutput {
	return o
}

func (o LogAnalyticsResponsePtrOutput) ToLogAnalyticsResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsResponsePtrOutput {
	return o
}

func (o LogAnalyticsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogAnalyticsResponse] {
	return pulumix.Output[*LogAnalyticsResponse]{
		OutputState: o.OutputState,
	}
}

func (o LogAnalyticsResponsePtrOutput) Elem() LogAnalyticsResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) LogAnalyticsResponse {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsResponse
		return ret
	}).(LogAnalyticsResponseOutput)
}

// The log type to be used.
func (o LogAnalyticsResponsePtrOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogType
	}).(pulumi.StringPtrOutput)
}

// Metadata for log analytics.
func (o LogAnalyticsResponsePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

// The workspace id for log analytics
func (o LogAnalyticsResponsePtrOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceId
	}).(pulumi.StringPtrOutput)
}

// The workspace key for log analytics
func (o LogAnalyticsResponsePtrOutput) WorkspaceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.WorkspaceKey
	}).(pulumi.StringPtrOutput)
}

// The workspace resource id for log analytics
func (o LogAnalyticsResponsePtrOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// The port exposed on the container group.
type Port struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// PortInput is an input type that accepts PortArgs and PortOutput values.
// You can construct a concrete instance of `PortInput` via:
//
//	PortArgs{...}
type PortInput interface {
	pulumi.Input

	ToPortOutput() PortOutput
	ToPortOutputWithContext(context.Context) PortOutput
}

// The port exposed on the container group.
type PortArgs struct {
	// The port number.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol associated with the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (PortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Port)(nil)).Elem()
}

func (i PortArgs) ToPortOutput() PortOutput {
	return i.ToPortOutputWithContext(context.Background())
}

func (i PortArgs) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortOutput)
}

func (i PortArgs) ToOutput(ctx context.Context) pulumix.Output[Port] {
	return pulumix.Output[Port]{
		OutputState: i.ToPortOutputWithContext(ctx).OutputState,
	}
}

// PortArrayInput is an input type that accepts PortArray and PortArrayOutput values.
// You can construct a concrete instance of `PortArrayInput` via:
//
//	PortArray{ PortArgs{...} }
type PortArrayInput interface {
	pulumi.Input

	ToPortArrayOutput() PortArrayOutput
	ToPortArrayOutputWithContext(context.Context) PortArrayOutput
}

type PortArray []PortInput

func (PortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Port)(nil)).Elem()
}

func (i PortArray) ToPortArrayOutput() PortArrayOutput {
	return i.ToPortArrayOutputWithContext(context.Background())
}

func (i PortArray) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortArrayOutput)
}

func (i PortArray) ToOutput(ctx context.Context) pulumix.Output[[]Port] {
	return pulumix.Output[[]Port]{
		OutputState: i.ToPortArrayOutputWithContext(ctx).OutputState,
	}
}

// The port exposed on the container group.
type PortOutput struct{ *pulumi.OutputState }

func (PortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Port)(nil)).Elem()
}

func (o PortOutput) ToPortOutput() PortOutput {
	return o
}

func (o PortOutput) ToPortOutputWithContext(ctx context.Context) PortOutput {
	return o
}

func (o PortOutput) ToOutput(ctx context.Context) pulumix.Output[Port] {
	return pulumix.Output[Port]{
		OutputState: o.OutputState,
	}
}

// The port number.
func (o PortOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Port) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Port) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortArrayOutput struct{ *pulumi.OutputState }

func (PortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Port)(nil)).Elem()
}

func (o PortArrayOutput) ToPortArrayOutput() PortArrayOutput {
	return o
}

func (o PortArrayOutput) ToPortArrayOutputWithContext(ctx context.Context) PortArrayOutput {
	return o
}

func (o PortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Port] {
	return pulumix.Output[[]Port]{
		OutputState: o.OutputState,
	}
}

func (o PortArrayOutput) Index(i pulumi.IntInput) PortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Port {
		return vs[0].([]Port)[vs[1].(int)]
	}).(PortOutput)
}

// The port exposed on the container group.
type PortResponse struct {
	// The port number.
	Port int `pulumi:"port"`
	// The protocol associated with the port.
	Protocol *string `pulumi:"protocol"`
}

// The port exposed on the container group.
type PortResponseOutput struct{ *pulumi.OutputState }

func (PortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PortResponse)(nil)).Elem()
}

func (o PortResponseOutput) ToPortResponseOutput() PortResponseOutput {
	return o
}

func (o PortResponseOutput) ToPortResponseOutputWithContext(ctx context.Context) PortResponseOutput {
	return o
}

func (o PortResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PortResponse] {
	return pulumix.Output[PortResponse]{
		OutputState: o.OutputState,
	}
}

// The port number.
func (o PortResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PortResponse) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol associated with the port.
func (o PortResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PortResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type PortResponseArrayOutput struct{ *pulumi.OutputState }

func (PortResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PortResponse)(nil)).Elem()
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutput() PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) ToPortResponseArrayOutputWithContext(ctx context.Context) PortResponseArrayOutput {
	return o
}

func (o PortResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PortResponse] {
	return pulumix.Output[[]PortResponse]{
		OutputState: o.OutputState,
	}
}

func (o PortResponseArrayOutput) Index(i pulumi.IntInput) PortResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PortResponse {
		return vs[0].([]PortResponse)[vs[1].(int)]
	}).(PortResponseOutput)
}

// The resource limits.
type ResourceLimits struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu *GpuResource `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// ResourceLimitsInput is an input type that accepts ResourceLimitsArgs and ResourceLimitsOutput values.
// You can construct a concrete instance of `ResourceLimitsInput` via:
//
//	ResourceLimitsArgs{...}
type ResourceLimitsInput interface {
	pulumi.Input

	ToResourceLimitsOutput() ResourceLimitsOutput
	ToResourceLimitsOutputWithContext(context.Context) ResourceLimitsOutput
}

// The resource limits.
type ResourceLimitsArgs struct {
	// The CPU limit of this container instance.
	Cpu pulumi.Float64PtrInput `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu GpuResourcePtrInput `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB pulumi.Float64PtrInput `pulumi:"memoryInGB"`
}

func (ResourceLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (i ResourceLimitsArgs) ToResourceLimitsOutput() ResourceLimitsOutput {
	return i.ToResourceLimitsOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput)
}

func (i ResourceLimitsArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceLimits] {
	return pulumix.Output[ResourceLimits]{
		OutputState: i.ToResourceLimitsOutputWithContext(ctx).OutputState,
	}
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i ResourceLimitsArgs) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsOutput).ToResourceLimitsPtrOutputWithContext(ctx)
}

// ResourceLimitsPtrInput is an input type that accepts ResourceLimitsArgs, ResourceLimitsPtr and ResourceLimitsPtrOutput values.
// You can construct a concrete instance of `ResourceLimitsPtrInput` via:
//
//	        ResourceLimitsArgs{...}
//
//	or:
//
//	        nil
type ResourceLimitsPtrInput interface {
	pulumi.Input

	ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput
	ToResourceLimitsPtrOutputWithContext(context.Context) ResourceLimitsPtrOutput
}

type resourceLimitsPtrType ResourceLimitsArgs

func ResourceLimitsPtr(v *ResourceLimitsArgs) ResourceLimitsPtrInput {
	return (*resourceLimitsPtrType)(v)
}

func (*resourceLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return i.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (i *resourceLimitsPtrType) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceLimitsPtrOutput)
}

func (i *resourceLimitsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ResourceLimits] {
	return pulumix.Output[*ResourceLimits]{
		OutputState: i.ToResourceLimitsPtrOutputWithContext(ctx).OutputState,
	}
}

// The resource limits.
type ResourceLimitsOutput struct{ *pulumi.OutputState }

func (ResourceLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsOutput) ToResourceLimitsOutput() ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsOutputWithContext(ctx context.Context) ResourceLimitsOutput {
	return o
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o.ToResourceLimitsPtrOutputWithContext(context.Background())
}

func (o ResourceLimitsOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceLimits) *ResourceLimits {
		return &v
	}).(ResourceLimitsPtrOutput)
}

func (o ResourceLimitsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLimits] {
	return pulumix.Output[ResourceLimits]{
		OutputState: o.OutputState,
	}
}

// The CPU limit of this container instance.
func (o ResourceLimitsOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v ResourceLimits) *GpuResource { return v.Gpu }).(GpuResourcePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimits) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsPtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimits)(nil)).Elem()
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutput() ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) ToResourceLimitsPtrOutputWithContext(ctx context.Context) ResourceLimitsPtrOutput {
	return o
}

func (o ResourceLimitsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceLimits] {
	return pulumix.Output[*ResourceLimits]{
		OutputState: o.OutputState,
	}
}

func (o ResourceLimitsPtrOutput) Elem() ResourceLimitsOutput {
	return o.ApplyT(func(v *ResourceLimits) ResourceLimits {
		if v != nil {
			return *v
		}
		var ret ResourceLimits
		return ret
	}).(ResourceLimitsOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsPtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsPtrOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *GpuResource {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(GpuResourcePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsPtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimits) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource limits.
type ResourceLimitsResponse struct {
	// The CPU limit of this container instance.
	Cpu *float64 `pulumi:"cpu"`
	// The GPU limit of this container instance.
	Gpu *GpuResourceResponse `pulumi:"gpu"`
	// The memory limit in GB of this container instance.
	MemoryInGB *float64 `pulumi:"memoryInGB"`
}

// The resource limits.
type ResourceLimitsResponseOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutput() ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToResourceLimitsResponseOutputWithContext(ctx context.Context) ResourceLimitsResponseOutput {
	return o
}

func (o ResourceLimitsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceLimitsResponse] {
	return pulumix.Output[ResourceLimitsResponse]{
		OutputState: o.OutputState,
	}
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponseOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.Cpu }).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsResponseOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *GpuResourceResponse { return v.Gpu }).(GpuResourceResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponseOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ResourceLimitsResponse) *float64 { return v.MemoryInGB }).(pulumi.Float64PtrOutput)
}

type ResourceLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceLimitsResponse)(nil)).Elem()
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutput() ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) ToResourceLimitsResponsePtrOutputWithContext(ctx context.Context) ResourceLimitsResponsePtrOutput {
	return o
}

func (o ResourceLimitsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceLimitsResponse] {
	return pulumix.Output[*ResourceLimitsResponse]{
		OutputState: o.OutputState,
	}
}

func (o ResourceLimitsResponsePtrOutput) Elem() ResourceLimitsResponseOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) ResourceLimitsResponse {
		if v != nil {
			return *v
		}
		var ret ResourceLimitsResponse
		return ret
	}).(ResourceLimitsResponseOutput)
}

// The CPU limit of this container instance.
func (o ResourceLimitsResponsePtrOutput) Cpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.Float64PtrOutput)
}

// The GPU limit of this container instance.
func (o ResourceLimitsResponsePtrOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *GpuResourceResponse {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(GpuResourceResponsePtrOutput)
}

// The memory limit in GB of this container instance.
func (o ResourceLimitsResponsePtrOutput) MemoryInGB() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ResourceLimitsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MemoryInGB
	}).(pulumi.Float64PtrOutput)
}

// The resource requests.
type ResourceRequests struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu *GpuResource `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// ResourceRequestsInput is an input type that accepts ResourceRequestsArgs and ResourceRequestsOutput values.
// You can construct a concrete instance of `ResourceRequestsInput` via:
//
//	ResourceRequestsArgs{...}
type ResourceRequestsInput interface {
	pulumi.Input

	ToResourceRequestsOutput() ResourceRequestsOutput
	ToResourceRequestsOutputWithContext(context.Context) ResourceRequestsOutput
}

// The resource requests.
type ResourceRequestsArgs struct {
	// The CPU request of this container instance.
	Cpu pulumi.Float64Input `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu GpuResourcePtrInput `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB pulumi.Float64Input `pulumi:"memoryInGB"`
}

func (ResourceRequestsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (i ResourceRequestsArgs) ToResourceRequestsOutput() ResourceRequestsOutput {
	return i.ToResourceRequestsOutputWithContext(context.Background())
}

func (i ResourceRequestsArgs) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequestsOutput)
}

func (i ResourceRequestsArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceRequests] {
	return pulumix.Output[ResourceRequests]{
		OutputState: i.ToResourceRequestsOutputWithContext(ctx).OutputState,
	}
}

// The resource requests.
type ResourceRequestsOutput struct{ *pulumi.OutputState }

func (ResourceRequestsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequests)(nil)).Elem()
}

func (o ResourceRequestsOutput) ToResourceRequestsOutput() ResourceRequestsOutput {
	return o
}

func (o ResourceRequestsOutput) ToResourceRequestsOutputWithContext(ctx context.Context) ResourceRequestsOutput {
	return o
}

func (o ResourceRequestsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceRequests] {
	return pulumix.Output[ResourceRequests]{
		OutputState: o.OutputState,
	}
}

// The CPU request of this container instance.
func (o ResourceRequestsOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The GPU request of this container instance.
func (o ResourceRequestsOutput) Gpu() GpuResourcePtrOutput {
	return o.ApplyT(func(v ResourceRequests) *GpuResource { return v.Gpu }).(GpuResourcePtrOutput)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequests) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requests.
type ResourceRequestsResponse struct {
	// The CPU request of this container instance.
	Cpu float64 `pulumi:"cpu"`
	// The GPU request of this container instance.
	Gpu *GpuResourceResponse `pulumi:"gpu"`
	// The memory request in GB of this container instance.
	MemoryInGB float64 `pulumi:"memoryInGB"`
}

// The resource requests.
type ResourceRequestsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequestsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequestsResponse)(nil)).Elem()
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutput() ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToResourceRequestsResponseOutputWithContext(ctx context.Context) ResourceRequestsResponseOutput {
	return o
}

func (o ResourceRequestsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceRequestsResponse] {
	return pulumix.Output[ResourceRequestsResponse]{
		OutputState: o.OutputState,
	}
}

// The CPU request of this container instance.
func (o ResourceRequestsResponseOutput) Cpu() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.Cpu }).(pulumi.Float64Output)
}

// The GPU request of this container instance.
func (o ResourceRequestsResponseOutput) Gpu() GpuResourceResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequestsResponse) *GpuResourceResponse { return v.Gpu }).(GpuResourceResponsePtrOutput)
}

// The memory request in GB of this container instance.
func (o ResourceRequestsResponseOutput) MemoryInGB() pulumi.Float64Output {
	return o.ApplyT(func(v ResourceRequestsResponse) float64 { return v.MemoryInGB }).(pulumi.Float64Output)
}

// The resource requirements.
type ResourceRequirements struct {
	// The resource limits of this container instance.
	Limits *ResourceLimits `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequests `pulumi:"requests"`
}

// ResourceRequirementsInput is an input type that accepts ResourceRequirementsArgs and ResourceRequirementsOutput values.
// You can construct a concrete instance of `ResourceRequirementsInput` via:
//
//	ResourceRequirementsArgs{...}
type ResourceRequirementsInput interface {
	pulumi.Input

	ToResourceRequirementsOutput() ResourceRequirementsOutput
	ToResourceRequirementsOutputWithContext(context.Context) ResourceRequirementsOutput
}

// The resource requirements.
type ResourceRequirementsArgs struct {
	// The resource limits of this container instance.
	Limits ResourceLimitsPtrInput `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsInput `pulumi:"requests"`
}

func (ResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return i.ToResourceRequirementsOutputWithContext(context.Background())
}

func (i ResourceRequirementsArgs) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceRequirementsOutput)
}

func (i ResourceRequirementsArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceRequirements] {
	return pulumix.Output[ResourceRequirements]{
		OutputState: i.ToResourceRequirementsOutputWithContext(ctx).OutputState,
	}
}

// The resource requirements.
type ResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirements)(nil)).Elem()
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutput() ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToResourceRequirementsOutputWithContext(ctx context.Context) ResourceRequirementsOutput {
	return o
}

func (o ResourceRequirementsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceRequirements] {
	return pulumix.Output[ResourceRequirements]{
		OutputState: o.OutputState,
	}
}

// The resource limits of this container instance.
func (o ResourceRequirementsOutput) Limits() ResourceLimitsPtrOutput {
	return o.ApplyT(func(v ResourceRequirements) *ResourceLimits { return v.Limits }).(ResourceLimitsPtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsOutput) Requests() ResourceRequestsOutput {
	return o.ApplyT(func(v ResourceRequirements) ResourceRequests { return v.Requests }).(ResourceRequestsOutput)
}

// The resource requirements.
type ResourceRequirementsResponse struct {
	// The resource limits of this container instance.
	Limits *ResourceLimitsResponse `pulumi:"limits"`
	// The resource requests of this container instance.
	Requests ResourceRequestsResponse `pulumi:"requests"`
}

// The resource requirements.
type ResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceRequirementsResponse)(nil)).Elem()
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutput() ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToResourceRequirementsResponseOutputWithContext(ctx context.Context) ResourceRequirementsResponseOutput {
	return o
}

func (o ResourceRequirementsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceRequirementsResponse] {
	return pulumix.Output[ResourceRequirementsResponse]{
		OutputState: o.OutputState,
	}
}

// The resource limits of this container instance.
func (o ResourceRequirementsResponseOutput) Limits() ResourceLimitsResponsePtrOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) *ResourceLimitsResponse { return v.Limits }).(ResourceLimitsResponsePtrOutput)
}

// The resource requests of this container instance.
func (o ResourceRequirementsResponseOutput) Requests() ResourceRequestsResponseOutput {
	return o.ApplyT(func(v ResourceRequirementsResponse) ResourceRequestsResponse { return v.Requests }).(ResourceRequestsResponseOutput)
}

// The capabilities to add or drop from a container.
type SecurityContextCapabilitiesDefinition struct {
	// The capabilities to add to the container.
	Add []string `pulumi:"add"`
	// The capabilities to drop from the container.
	Drop []string `pulumi:"drop"`
}

// SecurityContextCapabilitiesDefinitionInput is an input type that accepts SecurityContextCapabilitiesDefinitionArgs and SecurityContextCapabilitiesDefinitionOutput values.
// You can construct a concrete instance of `SecurityContextCapabilitiesDefinitionInput` via:
//
//	SecurityContextCapabilitiesDefinitionArgs{...}
type SecurityContextCapabilitiesDefinitionInput interface {
	pulumi.Input

	ToSecurityContextCapabilitiesDefinitionOutput() SecurityContextCapabilitiesDefinitionOutput
	ToSecurityContextCapabilitiesDefinitionOutputWithContext(context.Context) SecurityContextCapabilitiesDefinitionOutput
}

// The capabilities to add or drop from a container.
type SecurityContextCapabilitiesDefinitionArgs struct {
	// The capabilities to add to the container.
	Add pulumi.StringArrayInput `pulumi:"add"`
	// The capabilities to drop from the container.
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (SecurityContextCapabilitiesDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextCapabilitiesDefinition)(nil)).Elem()
}

func (i SecurityContextCapabilitiesDefinitionArgs) ToSecurityContextCapabilitiesDefinitionOutput() SecurityContextCapabilitiesDefinitionOutput {
	return i.ToSecurityContextCapabilitiesDefinitionOutputWithContext(context.Background())
}

func (i SecurityContextCapabilitiesDefinitionArgs) ToSecurityContextCapabilitiesDefinitionOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextCapabilitiesDefinitionOutput)
}

func (i SecurityContextCapabilitiesDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityContextCapabilitiesDefinition] {
	return pulumix.Output[SecurityContextCapabilitiesDefinition]{
		OutputState: i.ToSecurityContextCapabilitiesDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i SecurityContextCapabilitiesDefinitionArgs) ToSecurityContextCapabilitiesDefinitionPtrOutput() SecurityContextCapabilitiesDefinitionPtrOutput {
	return i.ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(context.Background())
}

func (i SecurityContextCapabilitiesDefinitionArgs) ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextCapabilitiesDefinitionOutput).ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx)
}

// SecurityContextCapabilitiesDefinitionPtrInput is an input type that accepts SecurityContextCapabilitiesDefinitionArgs, SecurityContextCapabilitiesDefinitionPtr and SecurityContextCapabilitiesDefinitionPtrOutput values.
// You can construct a concrete instance of `SecurityContextCapabilitiesDefinitionPtrInput` via:
//
//	        SecurityContextCapabilitiesDefinitionArgs{...}
//
//	or:
//
//	        nil
type SecurityContextCapabilitiesDefinitionPtrInput interface {
	pulumi.Input

	ToSecurityContextCapabilitiesDefinitionPtrOutput() SecurityContextCapabilitiesDefinitionPtrOutput
	ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(context.Context) SecurityContextCapabilitiesDefinitionPtrOutput
}

type securityContextCapabilitiesDefinitionPtrType SecurityContextCapabilitiesDefinitionArgs

func SecurityContextCapabilitiesDefinitionPtr(v *SecurityContextCapabilitiesDefinitionArgs) SecurityContextCapabilitiesDefinitionPtrInput {
	return (*securityContextCapabilitiesDefinitionPtrType)(v)
}

func (*securityContextCapabilitiesDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextCapabilitiesDefinition)(nil)).Elem()
}

func (i *securityContextCapabilitiesDefinitionPtrType) ToSecurityContextCapabilitiesDefinitionPtrOutput() SecurityContextCapabilitiesDefinitionPtrOutput {
	return i.ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(context.Background())
}

func (i *securityContextCapabilitiesDefinitionPtrType) ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextCapabilitiesDefinitionPtrOutput)
}

func (i *securityContextCapabilitiesDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextCapabilitiesDefinition] {
	return pulumix.Output[*SecurityContextCapabilitiesDefinition]{
		OutputState: i.ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// The capabilities to add or drop from a container.
type SecurityContextCapabilitiesDefinitionOutput struct{ *pulumi.OutputState }

func (SecurityContextCapabilitiesDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextCapabilitiesDefinition)(nil)).Elem()
}

func (o SecurityContextCapabilitiesDefinitionOutput) ToSecurityContextCapabilitiesDefinitionOutput() SecurityContextCapabilitiesDefinitionOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionOutput) ToSecurityContextCapabilitiesDefinitionOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionOutput) ToSecurityContextCapabilitiesDefinitionPtrOutput() SecurityContextCapabilitiesDefinitionPtrOutput {
	return o.ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(context.Background())
}

func (o SecurityContextCapabilitiesDefinitionOutput) ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContextCapabilitiesDefinition) *SecurityContextCapabilitiesDefinition {
		return &v
	}).(SecurityContextCapabilitiesDefinitionPtrOutput)
}

func (o SecurityContextCapabilitiesDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityContextCapabilitiesDefinition] {
	return pulumix.Output[SecurityContextCapabilitiesDefinition]{
		OutputState: o.OutputState,
	}
}

// The capabilities to add to the container.
func (o SecurityContextCapabilitiesDefinitionOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityContextCapabilitiesDefinition) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// The capabilities to drop from the container.
func (o SecurityContextCapabilitiesDefinitionOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityContextCapabilitiesDefinition) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type SecurityContextCapabilitiesDefinitionPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextCapabilitiesDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextCapabilitiesDefinition)(nil)).Elem()
}

func (o SecurityContextCapabilitiesDefinitionPtrOutput) ToSecurityContextCapabilitiesDefinitionPtrOutput() SecurityContextCapabilitiesDefinitionPtrOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionPtrOutput) ToSecurityContextCapabilitiesDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionPtrOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextCapabilitiesDefinition] {
	return pulumix.Output[*SecurityContextCapabilitiesDefinition]{
		OutputState: o.OutputState,
	}
}

func (o SecurityContextCapabilitiesDefinitionPtrOutput) Elem() SecurityContextCapabilitiesDefinitionOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinition) SecurityContextCapabilitiesDefinition {
		if v != nil {
			return *v
		}
		var ret SecurityContextCapabilitiesDefinition
		return ret
	}).(SecurityContextCapabilitiesDefinitionOutput)
}

// The capabilities to add to the container.
func (o SecurityContextCapabilitiesDefinitionPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// The capabilities to drop from the container.
func (o SecurityContextCapabilitiesDefinitionPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinition) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The capabilities to add or drop from a container.
type SecurityContextCapabilitiesDefinitionResponse struct {
	// The capabilities to add to the container.
	Add []string `pulumi:"add"`
	// The capabilities to drop from the container.
	Drop []string `pulumi:"drop"`
}

// The capabilities to add or drop from a container.
type SecurityContextCapabilitiesDefinitionResponseOutput struct{ *pulumi.OutputState }

func (SecurityContextCapabilitiesDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextCapabilitiesDefinitionResponse)(nil)).Elem()
}

func (o SecurityContextCapabilitiesDefinitionResponseOutput) ToSecurityContextCapabilitiesDefinitionResponseOutput() SecurityContextCapabilitiesDefinitionResponseOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionResponseOutput) ToSecurityContextCapabilitiesDefinitionResponseOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionResponseOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityContextCapabilitiesDefinitionResponse] {
	return pulumix.Output[SecurityContextCapabilitiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The capabilities to add to the container.
func (o SecurityContextCapabilitiesDefinitionResponseOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityContextCapabilitiesDefinitionResponse) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// The capabilities to drop from the container.
func (o SecurityContextCapabilitiesDefinitionResponseOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityContextCapabilitiesDefinitionResponse) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type SecurityContextCapabilitiesDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityContextCapabilitiesDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextCapabilitiesDefinitionResponse)(nil)).Elem()
}

func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) ToSecurityContextCapabilitiesDefinitionResponsePtrOutput() SecurityContextCapabilitiesDefinitionResponsePtrOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) ToSecurityContextCapabilitiesDefinitionResponsePtrOutputWithContext(ctx context.Context) SecurityContextCapabilitiesDefinitionResponsePtrOutput {
	return o
}

func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextCapabilitiesDefinitionResponse] {
	return pulumix.Output[*SecurityContextCapabilitiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) Elem() SecurityContextCapabilitiesDefinitionResponseOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinitionResponse) SecurityContextCapabilitiesDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret SecurityContextCapabilitiesDefinitionResponse
		return ret
	}).(SecurityContextCapabilitiesDefinitionResponseOutput)
}

// The capabilities to add to the container.
func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinitionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// The capabilities to drop from the container.
func (o SecurityContextCapabilitiesDefinitionResponsePtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SecurityContextCapabilitiesDefinitionResponse) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The security context for the container.
type SecurityContextDefinition struct {
	// A boolean value indicating whether the init process can elevate its privileges
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add or drop from a container.
	Capabilities *SecurityContextCapabilitiesDefinition `pulumi:"capabilities"`
	// The flag to determine if the container permissions is elevated to Privileged.
	Privileged *bool `pulumi:"privileged"`
	// Sets the User GID for the container.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Sets the User UID for the container.
	RunAsUser *int `pulumi:"runAsUser"`
	// a base64 encoded string containing the contents of the JSON in the seccomp profile
	SeccompProfile *string `pulumi:"seccompProfile"`
}

// SecurityContextDefinitionInput is an input type that accepts SecurityContextDefinitionArgs and SecurityContextDefinitionOutput values.
// You can construct a concrete instance of `SecurityContextDefinitionInput` via:
//
//	SecurityContextDefinitionArgs{...}
type SecurityContextDefinitionInput interface {
	pulumi.Input

	ToSecurityContextDefinitionOutput() SecurityContextDefinitionOutput
	ToSecurityContextDefinitionOutputWithContext(context.Context) SecurityContextDefinitionOutput
}

// The security context for the container.
type SecurityContextDefinitionArgs struct {
	// A boolean value indicating whether the init process can elevate its privileges
	AllowPrivilegeEscalation pulumi.BoolPtrInput `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add or drop from a container.
	Capabilities SecurityContextCapabilitiesDefinitionPtrInput `pulumi:"capabilities"`
	// The flag to determine if the container permissions is elevated to Privileged.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// Sets the User GID for the container.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Sets the User UID for the container.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// a base64 encoded string containing the contents of the JSON in the seccomp profile
	SeccompProfile pulumi.StringPtrInput `pulumi:"seccompProfile"`
}

func (SecurityContextDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextDefinition)(nil)).Elem()
}

func (i SecurityContextDefinitionArgs) ToSecurityContextDefinitionOutput() SecurityContextDefinitionOutput {
	return i.ToSecurityContextDefinitionOutputWithContext(context.Background())
}

func (i SecurityContextDefinitionArgs) ToSecurityContextDefinitionOutputWithContext(ctx context.Context) SecurityContextDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextDefinitionOutput)
}

func (i SecurityContextDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityContextDefinition] {
	return pulumix.Output[SecurityContextDefinition]{
		OutputState: i.ToSecurityContextDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i SecurityContextDefinitionArgs) ToSecurityContextDefinitionPtrOutput() SecurityContextDefinitionPtrOutput {
	return i.ToSecurityContextDefinitionPtrOutputWithContext(context.Background())
}

func (i SecurityContextDefinitionArgs) ToSecurityContextDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextDefinitionOutput).ToSecurityContextDefinitionPtrOutputWithContext(ctx)
}

// SecurityContextDefinitionPtrInput is an input type that accepts SecurityContextDefinitionArgs, SecurityContextDefinitionPtr and SecurityContextDefinitionPtrOutput values.
// You can construct a concrete instance of `SecurityContextDefinitionPtrInput` via:
//
//	        SecurityContextDefinitionArgs{...}
//
//	or:
//
//	        nil
type SecurityContextDefinitionPtrInput interface {
	pulumi.Input

	ToSecurityContextDefinitionPtrOutput() SecurityContextDefinitionPtrOutput
	ToSecurityContextDefinitionPtrOutputWithContext(context.Context) SecurityContextDefinitionPtrOutput
}

type securityContextDefinitionPtrType SecurityContextDefinitionArgs

func SecurityContextDefinitionPtr(v *SecurityContextDefinitionArgs) SecurityContextDefinitionPtrInput {
	return (*securityContextDefinitionPtrType)(v)
}

func (*securityContextDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextDefinition)(nil)).Elem()
}

func (i *securityContextDefinitionPtrType) ToSecurityContextDefinitionPtrOutput() SecurityContextDefinitionPtrOutput {
	return i.ToSecurityContextDefinitionPtrOutputWithContext(context.Background())
}

func (i *securityContextDefinitionPtrType) ToSecurityContextDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityContextDefinitionPtrOutput)
}

func (i *securityContextDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextDefinition] {
	return pulumix.Output[*SecurityContextDefinition]{
		OutputState: i.ToSecurityContextDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// The security context for the container.
type SecurityContextDefinitionOutput struct{ *pulumi.OutputState }

func (SecurityContextDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextDefinition)(nil)).Elem()
}

func (o SecurityContextDefinitionOutput) ToSecurityContextDefinitionOutput() SecurityContextDefinitionOutput {
	return o
}

func (o SecurityContextDefinitionOutput) ToSecurityContextDefinitionOutputWithContext(ctx context.Context) SecurityContextDefinitionOutput {
	return o
}

func (o SecurityContextDefinitionOutput) ToSecurityContextDefinitionPtrOutput() SecurityContextDefinitionPtrOutput {
	return o.ToSecurityContextDefinitionPtrOutputWithContext(context.Background())
}

func (o SecurityContextDefinitionOutput) ToSecurityContextDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityContextDefinition) *SecurityContextDefinition {
		return &v
	}).(SecurityContextDefinitionPtrOutput)
}

func (o SecurityContextDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityContextDefinition] {
	return pulumix.Output[SecurityContextDefinition]{
		OutputState: o.OutputState,
	}
}

// A boolean value indicating whether the init process can elevate its privileges
func (o SecurityContextDefinitionOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add or drop from a container.
func (o SecurityContextDefinitionOutput) Capabilities() SecurityContextCapabilitiesDefinitionPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *SecurityContextCapabilitiesDefinition { return v.Capabilities }).(SecurityContextCapabilitiesDefinitionPtrOutput)
}

// The flag to determine if the container permissions is elevated to Privileged.
func (o SecurityContextDefinitionOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// Sets the User GID for the container.
func (o SecurityContextDefinitionOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Sets the User UID for the container.
func (o SecurityContextDefinitionOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// a base64 encoded string containing the contents of the JSON in the seccomp profile
func (o SecurityContextDefinitionOutput) SeccompProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinition) *string { return v.SeccompProfile }).(pulumi.StringPtrOutput)
}

type SecurityContextDefinitionPtrOutput struct{ *pulumi.OutputState }

func (SecurityContextDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextDefinition)(nil)).Elem()
}

func (o SecurityContextDefinitionPtrOutput) ToSecurityContextDefinitionPtrOutput() SecurityContextDefinitionPtrOutput {
	return o
}

func (o SecurityContextDefinitionPtrOutput) ToSecurityContextDefinitionPtrOutputWithContext(ctx context.Context) SecurityContextDefinitionPtrOutput {
	return o
}

func (o SecurityContextDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextDefinition] {
	return pulumix.Output[*SecurityContextDefinition]{
		OutputState: o.OutputState,
	}
}

func (o SecurityContextDefinitionPtrOutput) Elem() SecurityContextDefinitionOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) SecurityContextDefinition {
		if v != nil {
			return *v
		}
		var ret SecurityContextDefinition
		return ret
	}).(SecurityContextDefinitionOutput)
}

// A boolean value indicating whether the init process can elevate its privileges
func (o SecurityContextDefinitionPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add or drop from a container.
func (o SecurityContextDefinitionPtrOutput) Capabilities() SecurityContextCapabilitiesDefinitionPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *SecurityContextCapabilitiesDefinition {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(SecurityContextCapabilitiesDefinitionPtrOutput)
}

// The flag to determine if the container permissions is elevated to Privileged.
func (o SecurityContextDefinitionPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// Sets the User GID for the container.
func (o SecurityContextDefinitionPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Sets the User UID for the container.
func (o SecurityContextDefinitionPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// a base64 encoded string containing the contents of the JSON in the seccomp profile
func (o SecurityContextDefinitionPtrOutput) SeccompProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinition) *string {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(pulumi.StringPtrOutput)
}

// The security context for the container.
type SecurityContextDefinitionResponse struct {
	// A boolean value indicating whether the init process can elevate its privileges
	AllowPrivilegeEscalation *bool `pulumi:"allowPrivilegeEscalation"`
	// The capabilities to add or drop from a container.
	Capabilities *SecurityContextCapabilitiesDefinitionResponse `pulumi:"capabilities"`
	// The flag to determine if the container permissions is elevated to Privileged.
	Privileged *bool `pulumi:"privileged"`
	// Sets the User GID for the container.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Sets the User UID for the container.
	RunAsUser *int `pulumi:"runAsUser"`
	// a base64 encoded string containing the contents of the JSON in the seccomp profile
	SeccompProfile *string `pulumi:"seccompProfile"`
}

// The security context for the container.
type SecurityContextDefinitionResponseOutput struct{ *pulumi.OutputState }

func (SecurityContextDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityContextDefinitionResponse)(nil)).Elem()
}

func (o SecurityContextDefinitionResponseOutput) ToSecurityContextDefinitionResponseOutput() SecurityContextDefinitionResponseOutput {
	return o
}

func (o SecurityContextDefinitionResponseOutput) ToSecurityContextDefinitionResponseOutputWithContext(ctx context.Context) SecurityContextDefinitionResponseOutput {
	return o
}

func (o SecurityContextDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityContextDefinitionResponse] {
	return pulumix.Output[SecurityContextDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// A boolean value indicating whether the init process can elevate its privileges
func (o SecurityContextDefinitionResponseOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

// The capabilities to add or drop from a container.
func (o SecurityContextDefinitionResponseOutput) Capabilities() SecurityContextCapabilitiesDefinitionResponsePtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *SecurityContextCapabilitiesDefinitionResponse {
		return v.Capabilities
	}).(SecurityContextCapabilitiesDefinitionResponsePtrOutput)
}

// The flag to determine if the container permissions is elevated to Privileged.
func (o SecurityContextDefinitionResponseOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// Sets the User GID for the container.
func (o SecurityContextDefinitionResponseOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Sets the User UID for the container.
func (o SecurityContextDefinitionResponseOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// a base64 encoded string containing the contents of the JSON in the seccomp profile
func (o SecurityContextDefinitionResponseOutput) SeccompProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityContextDefinitionResponse) *string { return v.SeccompProfile }).(pulumi.StringPtrOutput)
}

type SecurityContextDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (SecurityContextDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityContextDefinitionResponse)(nil)).Elem()
}

func (o SecurityContextDefinitionResponsePtrOutput) ToSecurityContextDefinitionResponsePtrOutput() SecurityContextDefinitionResponsePtrOutput {
	return o
}

func (o SecurityContextDefinitionResponsePtrOutput) ToSecurityContextDefinitionResponsePtrOutputWithContext(ctx context.Context) SecurityContextDefinitionResponsePtrOutput {
	return o
}

func (o SecurityContextDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SecurityContextDefinitionResponse] {
	return pulumix.Output[*SecurityContextDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecurityContextDefinitionResponsePtrOutput) Elem() SecurityContextDefinitionResponseOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) SecurityContextDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret SecurityContextDefinitionResponse
		return ret
	}).(SecurityContextDefinitionResponseOutput)
}

// A boolean value indicating whether the init process can elevate its privileges
func (o SecurityContextDefinitionResponsePtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

// The capabilities to add or drop from a container.
func (o SecurityContextDefinitionResponsePtrOutput) Capabilities() SecurityContextCapabilitiesDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *SecurityContextCapabilitiesDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(SecurityContextCapabilitiesDefinitionResponsePtrOutput)
}

// The flag to determine if the container permissions is elevated to Privileged.
func (o SecurityContextDefinitionResponsePtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// Sets the User GID for the container.
func (o SecurityContextDefinitionResponsePtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Sets the User UID for the container.
func (o SecurityContextDefinitionResponsePtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// a base64 encoded string containing the contents of the JSON in the seccomp profile
func (o SecurityContextDefinitionResponsePtrOutput) SeccompProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityContextDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentitiesResponse struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
type UserAssignedIdentitiesResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentitiesResponse)(nil)).Elem()
}

func (o UserAssignedIdentitiesResponseOutput) ToUserAssignedIdentitiesResponseOutput() UserAssignedIdentitiesResponseOutput {
	return o
}

func (o UserAssignedIdentitiesResponseOutput) ToUserAssignedIdentitiesResponseOutputWithContext(ctx context.Context) UserAssignedIdentitiesResponseOutput {
	return o
}

func (o UserAssignedIdentitiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentitiesResponse] {
	return pulumix.Output[UserAssignedIdentitiesResponse]{
		OutputState: o.OutputState,
	}
}

// The client id of user assigned identity.
func (o UserAssignedIdentitiesResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentitiesResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o UserAssignedIdentitiesResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentitiesResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentitiesResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentitiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentitiesResponse)(nil)).Elem()
}

func (o UserAssignedIdentitiesResponseMapOutput) ToUserAssignedIdentitiesResponseMapOutput() UserAssignedIdentitiesResponseMapOutput {
	return o
}

func (o UserAssignedIdentitiesResponseMapOutput) ToUserAssignedIdentitiesResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentitiesResponseMapOutput {
	return o
}

func (o UserAssignedIdentitiesResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentitiesResponse] {
	return pulumix.Output[map[string]UserAssignedIdentitiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentitiesResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentitiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentitiesResponse {
		return vs[0].(map[string]UserAssignedIdentitiesResponse)[vs[1].(string)]
	}).(UserAssignedIdentitiesResponseOutput)
}

// The properties of the volume.
type Volume struct {
	// The Azure File volume.
	AzureFile *AzureFileVolume `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir interface{} `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo *GitRepoVolume `pulumi:"gitRepo"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The secret volume.
	Secret map[string]string `pulumi:"secret"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// The properties of the volume.
type VolumeArgs struct {
	// The Azure File volume.
	AzureFile AzureFileVolumePtrInput `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir pulumi.Input `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo GitRepoVolumePtrInput `pulumi:"gitRepo"`
	// The name of the volume.
	Name pulumi.StringInput `pulumi:"name"`
	// The secret volume.
	Secret pulumi.StringMapInput `pulumi:"secret"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

func (i VolumeArgs) ToOutput(ctx context.Context) pulumix.Output[Volume] {
	return pulumix.Output[Volume]{
		OutputState: i.ToVolumeOutputWithContext(ctx).OutputState,
	}
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

func (i VolumeArray) ToOutput(ctx context.Context) pulumix.Output[[]Volume] {
	return pulumix.Output[[]Volume]{
		OutputState: i.ToVolumeArrayOutputWithContext(ctx).OutputState,
	}
}

// The properties of the volume.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) ToOutput(ctx context.Context) pulumix.Output[Volume] {
	return pulumix.Output[Volume]{
		OutputState: o.OutputState,
	}
}

// The Azure File volume.
func (o VolumeOutput) AzureFile() AzureFileVolumePtrOutput {
	return o.ApplyT(func(v Volume) *AzureFileVolume { return v.AzureFile }).(AzureFileVolumePtrOutput)
}

// The empty directory volume.
func (o VolumeOutput) EmptyDir() pulumi.AnyOutput {
	return o.ApplyT(func(v Volume) interface{} { return v.EmptyDir }).(pulumi.AnyOutput)
}

// The git repo volume.
func (o VolumeOutput) GitRepo() GitRepoVolumePtrOutput {
	return o.ApplyT(func(v Volume) *GitRepoVolume { return v.GitRepo }).(GitRepoVolumePtrOutput)
}

// The name of the volume.
func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Volume) string { return v.Name }).(pulumi.StringOutput)
}

// The secret volume.
func (o VolumeOutput) Secret() pulumi.StringMapOutput {
	return o.ApplyT(func(v Volume) map[string]string { return v.Secret }).(pulumi.StringMapOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Volume] {
	return pulumix.Output[[]Volume]{
		OutputState: o.OutputState,
	}
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// The properties of the volume mount.
type VolumeMount struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// VolumeMountInput is an input type that accepts VolumeMountArgs and VolumeMountOutput values.
// You can construct a concrete instance of `VolumeMountInput` via:
//
//	VolumeMountArgs{...}
type VolumeMountInput interface {
	pulumi.Input

	ToVolumeMountOutput() VolumeMountOutput
	ToVolumeMountOutputWithContext(context.Context) VolumeMountOutput
}

// The properties of the volume mount.
type VolumeMountArgs struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// The name of the volume mount.
	Name pulumi.StringInput `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (VolumeMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (i VolumeMountArgs) ToVolumeMountOutput() VolumeMountOutput {
	return i.ToVolumeMountOutputWithContext(context.Background())
}

func (i VolumeMountArgs) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountOutput)
}

func (i VolumeMountArgs) ToOutput(ctx context.Context) pulumix.Output[VolumeMount] {
	return pulumix.Output[VolumeMount]{
		OutputState: i.ToVolumeMountOutputWithContext(ctx).OutputState,
	}
}

// VolumeMountArrayInput is an input type that accepts VolumeMountArray and VolumeMountArrayOutput values.
// You can construct a concrete instance of `VolumeMountArrayInput` via:
//
//	VolumeMountArray{ VolumeMountArgs{...} }
type VolumeMountArrayInput interface {
	pulumi.Input

	ToVolumeMountArrayOutput() VolumeMountArrayOutput
	ToVolumeMountArrayOutputWithContext(context.Context) VolumeMountArrayOutput
}

type VolumeMountArray []VolumeMountInput

func (VolumeMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (i VolumeMountArray) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return i.ToVolumeMountArrayOutputWithContext(context.Background())
}

func (i VolumeMountArray) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMountArrayOutput)
}

func (i VolumeMountArray) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMount] {
	return pulumix.Output[[]VolumeMount]{
		OutputState: i.ToVolumeMountArrayOutputWithContext(ctx).OutputState,
	}
}

// The properties of the volume mount.
type VolumeMountOutput struct{ *pulumi.OutputState }

func (VolumeMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMount)(nil)).Elem()
}

func (o VolumeMountOutput) ToVolumeMountOutput() VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToVolumeMountOutputWithContext(ctx context.Context) VolumeMountOutput {
	return o
}

func (o VolumeMountOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeMount] {
	return pulumix.Output[VolumeMount]{
		OutputState: o.OutputState,
	}
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMount) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMount) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMount)(nil)).Elem()
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutput() VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToVolumeMountArrayOutputWithContext(ctx context.Context) VolumeMountArrayOutput {
	return o
}

func (o VolumeMountArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMount] {
	return pulumix.Output[[]VolumeMount]{
		OutputState: o.OutputState,
	}
}

func (o VolumeMountArrayOutput) Index(i pulumi.IntInput) VolumeMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMount {
		return vs[0].([]VolumeMount)[vs[1].(int)]
	}).(VolumeMountOutput)
}

// The properties of the volume mount.
type VolumeMountResponse struct {
	// The path within the container where the volume should be mounted. Must not contain colon (:).
	MountPath string `pulumi:"mountPath"`
	// The name of the volume mount.
	Name string `pulumi:"name"`
	// The flag indicating whether the volume mount is read-only.
	ReadOnly *bool `pulumi:"readOnly"`
}

// The properties of the volume mount.
type VolumeMountResponseOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutput() VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToVolumeMountResponseOutputWithContext(ctx context.Context) VolumeMountResponseOutput {
	return o
}

func (o VolumeMountResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeMountResponse] {
	return pulumix.Output[VolumeMountResponse]{
		OutputState: o.OutputState,
	}
}

// The path within the container where the volume should be mounted. Must not contain colon (:).
func (o VolumeMountResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

// The name of the volume mount.
func (o VolumeMountResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeMountResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The flag indicating whether the volume mount is read-only.
func (o VolumeMountResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeMountResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type VolumeMountResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeMountResponse)(nil)).Elem()
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutput() VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToVolumeMountResponseArrayOutputWithContext(ctx context.Context) VolumeMountResponseArrayOutput {
	return o
}

func (o VolumeMountResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeMountResponse] {
	return pulumix.Output[[]VolumeMountResponse]{
		OutputState: o.OutputState,
	}
}

func (o VolumeMountResponseArrayOutput) Index(i pulumi.IntInput) VolumeMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeMountResponse {
		return vs[0].([]VolumeMountResponse)[vs[1].(int)]
	}).(VolumeMountResponseOutput)
}

// The properties of the volume.
type VolumeResponse struct {
	// The Azure File volume.
	AzureFile *AzureFileVolumeResponse `pulumi:"azureFile"`
	// The empty directory volume.
	EmptyDir interface{} `pulumi:"emptyDir"`
	// The git repo volume.
	GitRepo *GitRepoVolumeResponse `pulumi:"gitRepo"`
	// The name of the volume.
	Name string `pulumi:"name"`
	// The secret volume.
	Secret map[string]string `pulumi:"secret"`
}

// The properties of the volume.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[VolumeResponse] {
	return pulumix.Output[VolumeResponse]{
		OutputState: o.OutputState,
	}
}

// The Azure File volume.
func (o VolumeResponseOutput) AzureFile() AzureFileVolumeResponsePtrOutput {
	return o.ApplyT(func(v VolumeResponse) *AzureFileVolumeResponse { return v.AzureFile }).(AzureFileVolumeResponsePtrOutput)
}

// The empty directory volume.
func (o VolumeResponseOutput) EmptyDir() pulumi.AnyOutput {
	return o.ApplyT(func(v VolumeResponse) interface{} { return v.EmptyDir }).(pulumi.AnyOutput)
}

// The git repo volume.
func (o VolumeResponseOutput) GitRepo() GitRepoVolumeResponsePtrOutput {
	return o.ApplyT(func(v VolumeResponse) *GitRepoVolumeResponse { return v.GitRepo }).(GitRepoVolumeResponsePtrOutput)
}

// The name of the volume.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The secret volume.
func (o VolumeResponseOutput) Secret() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeResponse) map[string]string { return v.Secret }).(pulumi.StringMapOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VolumeResponse] {
	return pulumix.Output[[]VolumeResponse]{
		OutputState: o.OutputState,
	}
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureFileVolumeOutput{})
	pulumi.RegisterOutputType(AzureFileVolumePtrOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeResponseOutput{})
	pulumi.RegisterOutputType(AzureFileVolumeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerArrayOutput{})
	pulumi.RegisterOutputType(ContainerExecOutput{})
	pulumi.RegisterOutputType(ContainerExecPtrOutput{})
	pulumi.RegisterOutputType(ContainerExecResponseOutput{})
	pulumi.RegisterOutputType(ContainerExecResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupDiagnosticsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityPtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerGroupPropertiesResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerGroupSubnetIdOutput{})
	pulumi.RegisterOutputType(ContainerGroupSubnetIdArrayOutput{})
	pulumi.RegisterOutputType(ContainerGroupSubnetIdResponseOutput{})
	pulumi.RegisterOutputType(ContainerGroupSubnetIdResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetResponseOutput{})
	pulumi.RegisterOutputType(ContainerHttpGetResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerPortOutput{})
	pulumi.RegisterOutputType(ContainerPortArrayOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseOutput{})
	pulumi.RegisterOutputType(ContainerPortResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerProbeOutput{})
	pulumi.RegisterOutputType(ContainerProbePtrOutput{})
	pulumi.RegisterOutputType(ContainerProbeResponseOutput{})
	pulumi.RegisterOutputType(ContainerProbeResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerPropertiesResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(ContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerStateResponseOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionSpecOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionSpecArrayOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionSpecResponseOutput{})
	pulumi.RegisterOutputType(DeploymentExtensionSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(DnsConfigurationOutput{})
	pulumi.RegisterOutputType(DnsConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DnsConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DnsConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseArrayOutput{})
	pulumi.RegisterOutputType(EventResponseOutput{})
	pulumi.RegisterOutputType(EventResponseArrayOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeOutput{})
	pulumi.RegisterOutputType(GitRepoVolumePtrOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeResponseOutput{})
	pulumi.RegisterOutputType(GitRepoVolumeResponsePtrOutput{})
	pulumi.RegisterOutputType(GpuResourceOutput{})
	pulumi.RegisterOutputType(GpuResourcePtrOutput{})
	pulumi.RegisterOutputType(GpuResourceResponseOutput{})
	pulumi.RegisterOutputType(GpuResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpHeaderOutput{})
	pulumi.RegisterOutputType(HttpHeaderArrayOutput{})
	pulumi.RegisterOutputType(HttpHeaderResponseOutput{})
	pulumi.RegisterOutputType(HttpHeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseOutput{})
	pulumi.RegisterOutputType(ImageRegistryCredentialResponseArrayOutput{})
	pulumi.RegisterOutputType(InitContainerDefinitionOutput{})
	pulumi.RegisterOutputType(InitContainerDefinitionArrayOutput{})
	pulumi.RegisterOutputType(InitContainerDefinitionResponseOutput{})
	pulumi.RegisterOutputType(InitContainerDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(InitContainerPropertiesDefinitionResponseInstanceViewOutput{})
	pulumi.RegisterOutputType(IpAddressOutput{})
	pulumi.RegisterOutputType(IpAddressPtrOutput{})
	pulumi.RegisterOutputType(IpAddressResponseOutput{})
	pulumi.RegisterOutputType(IpAddressResponsePtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsOutput{})
	pulumi.RegisterOutputType(LogAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsResponsePtrOutput{})
	pulumi.RegisterOutputType(PortOutput{})
	pulumi.RegisterOutputType(PortArrayOutput{})
	pulumi.RegisterOutputType(PortResponseOutput{})
	pulumi.RegisterOutputType(PortResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceLimitsOutput{})
	pulumi.RegisterOutputType(ResourceLimitsPtrOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponseOutput{})
	pulumi.RegisterOutputType(ResourceLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceRequestsOutput{})
	pulumi.RegisterOutputType(ResourceRequestsResponseOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(SecurityContextCapabilitiesDefinitionOutput{})
	pulumi.RegisterOutputType(SecurityContextCapabilitiesDefinitionPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextCapabilitiesDefinitionResponseOutput{})
	pulumi.RegisterOutputType(SecurityContextCapabilitiesDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(SecurityContextDefinitionOutput{})
	pulumi.RegisterOutputType(SecurityContextDefinitionPtrOutput{})
	pulumi.RegisterOutputType(SecurityContextDefinitionResponseOutput{})
	pulumi.RegisterOutputType(SecurityContextDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentitiesResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentitiesResponseMapOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountOutput{})
	pulumi.RegisterOutputType(VolumeMountArrayOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseOutput{})
	pulumi.RegisterOutputType(VolumeMountResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
}
