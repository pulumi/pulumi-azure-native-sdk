// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes a nGroup.
type NGroup struct {
	pulumi.CustomResourceState

	// The Container Group Profiles that could be used in a nGroup.
	ContainerGroupProfiles ContainerGroupProfileStubResponseArrayOutput `pulumi:"containerGroupProfiles"`
	// The elastic profile.
	ElasticProfile ElasticProfileResponsePtrOutput `pulumi:"elasticProfile"`
	// The identity of the nGroup, if configured.
	Identity NGroupIdentityResponsePtrOutput `pulumi:"identity"`
	// The resource location.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The resource type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The zones for the container group.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewNGroup registers a new resource with the given unique name, arguments, and options.
func NewNGroup(ctx *pulumi.Context,
	name string, args *NGroupArgs, opts ...pulumi.ResourceOption) (*NGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:containerinstance:NGroup"),
		},
		{
			Type: pulumi.String("azure-native:containerinstance/v20241101preview:NGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource NGroup
	err := ctx.RegisterResource("azure-native:containerinstance/v20240901preview:NGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNGroup gets an existing NGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NGroupState, opts ...pulumi.ResourceOption) (*NGroup, error) {
	var resource NGroup
	err := ctx.ReadResource("azure-native:containerinstance/v20240901preview:NGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NGroup resources.
type ngroupState struct {
}

type NGroupState struct {
}

func (NGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngroupState)(nil)).Elem()
}

type ngroupArgs struct {
	// The Container Group Profiles that could be used in a nGroup.
	ContainerGroupProfiles []ContainerGroupProfileStub `pulumi:"containerGroupProfiles"`
	// The elastic profile.
	ElasticProfile *ElasticProfile `pulumi:"elasticProfile"`
	// The identity of the nGroup, if configured.
	Identity *NGroupIdentity `pulumi:"identity"`
	// The resource location.
	Location *string `pulumi:"location"`
	// The N Groups name.
	NgroupsName *string `pulumi:"ngroupsName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The zones for the container group.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a NGroup resource.
type NGroupArgs struct {
	// The Container Group Profiles that could be used in a nGroup.
	ContainerGroupProfiles ContainerGroupProfileStubArrayInput
	// The elastic profile.
	ElasticProfile ElasticProfilePtrInput
	// The identity of the nGroup, if configured.
	Identity NGroupIdentityPtrInput
	// The resource location.
	Location pulumi.StringPtrInput
	// The N Groups name.
	NgroupsName pulumi.StringPtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The zones for the container group.
	Zones pulumi.StringArrayInput
}

func (NGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngroupArgs)(nil)).Elem()
}

type NGroupInput interface {
	pulumi.Input

	ToNGroupOutput() NGroupOutput
	ToNGroupOutputWithContext(ctx context.Context) NGroupOutput
}

func (*NGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NGroup)(nil)).Elem()
}

func (i *NGroup) ToNGroupOutput() NGroupOutput {
	return i.ToNGroupOutputWithContext(context.Background())
}

func (i *NGroup) ToNGroupOutputWithContext(ctx context.Context) NGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NGroupOutput)
}

type NGroupOutput struct{ *pulumi.OutputState }

func (NGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NGroup)(nil)).Elem()
}

func (o NGroupOutput) ToNGroupOutput() NGroupOutput {
	return o
}

func (o NGroupOutput) ToNGroupOutputWithContext(ctx context.Context) NGroupOutput {
	return o
}

// The Container Group Profiles that could be used in a nGroup.
func (o NGroupOutput) ContainerGroupProfiles() ContainerGroupProfileStubResponseArrayOutput {
	return o.ApplyT(func(v *NGroup) ContainerGroupProfileStubResponseArrayOutput { return v.ContainerGroupProfiles }).(ContainerGroupProfileStubResponseArrayOutput)
}

// The elastic profile.
func (o NGroupOutput) ElasticProfile() ElasticProfileResponsePtrOutput {
	return o.ApplyT(func(v *NGroup) ElasticProfileResponsePtrOutput { return v.ElasticProfile }).(ElasticProfileResponsePtrOutput)
}

// The identity of the nGroup, if configured.
func (o NGroupOutput) Identity() NGroupIdentityResponsePtrOutput {
	return o.ApplyT(func(v *NGroup) NGroupIdentityResponsePtrOutput { return v.Identity }).(NGroupIdentityResponsePtrOutput)
}

// The resource location.
func (o NGroupOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource name.
func (o NGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state, which only appears in the response.
func (o NGroupOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o NGroupOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *NGroup) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The resource tags.
func (o NGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource type.
func (o NGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The zones for the container group.
func (o NGroupOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NGroup) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(NGroupOutput{})
}
