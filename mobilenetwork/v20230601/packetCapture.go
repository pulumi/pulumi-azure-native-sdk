// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230601

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Packet capture session resource.
type PacketCapture struct {
	pulumi.CustomResourceState

	// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
	BytesToCapturePerPacket pulumi.Float64PtrOutput `pulumi:"bytesToCapturePerPacket"`
	// The start time of the packet capture session.
	CaptureStartTime pulumi.StringOutput `pulumi:"captureStartTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// List of network interfaces to capture on.
	NetworkInterfaces pulumi.StringArrayOutput `pulumi:"networkInterfaces"`
	// The provisioning state of the packet capture session resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The reason the current packet capture session state.
	Reason pulumi.StringOutput `pulumi:"reason"`
	// The status of the packet capture session.
	Status pulumi.StringOutput `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrOutput `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.Float64PtrOutput `pulumi:"totalBytesPerSession"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPacketCapture registers a new resource with the given unique name, arguments, and options.
func NewPacketCapture(ctx *pulumi.Context,
	name string, args *PacketCaptureArgs, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PacketCoreControlPlaneName == nil {
		return nil, errors.New("invalid value for required argument 'PacketCoreControlPlaneName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.BytesToCapturePerPacket == nil {
		args.BytesToCapturePerPacket = pulumi.Float64Ptr(0.0)
	}
	if args.TimeLimitInSeconds == nil {
		args.TimeLimitInSeconds = pulumi.IntPtr(18000)
	}
	if args.TotalBytesPerSession == nil {
		args.TotalBytesPerSession = pulumi.Float64Ptr(67108864.0)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:mobilenetwork:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:mobilenetwork/v20230901:PacketCapture"),
		},
		{
			Type: pulumi.String("azure-native:mobilenetwork/v20240201:PacketCapture"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PacketCapture
	err := ctx.RegisterResource("azure-native:mobilenetwork/v20230601:PacketCapture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPacketCapture gets an existing PacketCapture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPacketCapture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PacketCaptureState, opts ...pulumi.ResourceOption) (*PacketCapture, error) {
	var resource PacketCapture
	err := ctx.ReadResource("azure-native:mobilenetwork/v20230601:PacketCapture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PacketCapture resources.
type packetCaptureState struct {
}

type PacketCaptureState struct {
}

func (PacketCaptureState) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureState)(nil)).Elem()
}

type packetCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
	BytesToCapturePerPacket *float64 `pulumi:"bytesToCapturePerPacket"`
	// List of network interfaces to capture on.
	NetworkInterfaces []string `pulumi:"networkInterfaces"`
	// The name of the packet capture session.
	PacketCaptureName *string `pulumi:"packetCaptureName"`
	// The name of the packet core control plane.
	PacketCoreControlPlaneName string `pulumi:"packetCoreControlPlaneName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession *float64 `pulumi:"totalBytesPerSession"`
}

// The set of arguments for constructing a PacketCapture resource.
type PacketCaptureArgs struct {
	// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
	BytesToCapturePerPacket pulumi.Float64PtrInput
	// List of network interfaces to capture on.
	NetworkInterfaces pulumi.StringArrayInput
	// The name of the packet capture session.
	PacketCaptureName pulumi.StringPtrInput
	// The name of the packet core control plane.
	PacketCoreControlPlaneName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds pulumi.IntPtrInput
	// Maximum size of the capture output.
	TotalBytesPerSession pulumi.Float64PtrInput
}

func (PacketCaptureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*packetCaptureArgs)(nil)).Elem()
}

type PacketCaptureInput interface {
	pulumi.Input

	ToPacketCaptureOutput() PacketCaptureOutput
	ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput
}

func (*PacketCapture) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (i *PacketCapture) ToPacketCaptureOutput() PacketCaptureOutput {
	return i.ToPacketCaptureOutputWithContext(context.Background())
}

func (i *PacketCapture) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PacketCaptureOutput)
}

type PacketCaptureOutput struct{ *pulumi.OutputState }

func (PacketCaptureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PacketCapture)(nil)).Elem()
}

func (o PacketCaptureOutput) ToPacketCaptureOutput() PacketCaptureOutput {
	return o
}

func (o PacketCaptureOutput) ToPacketCaptureOutputWithContext(ctx context.Context) PacketCaptureOutput {
	return o
}

// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
func (o PacketCaptureOutput) BytesToCapturePerPacket() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.Float64PtrOutput { return v.BytesToCapturePerPacket }).(pulumi.Float64PtrOutput)
}

// The start time of the packet capture session.
func (o PacketCaptureOutput) CaptureStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.CaptureStartTime }).(pulumi.StringOutput)
}

// The name of the resource
func (o PacketCaptureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of network interfaces to capture on.
func (o PacketCaptureOutput) NetworkInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringArrayOutput { return v.NetworkInterfaces }).(pulumi.StringArrayOutput)
}

// The provisioning state of the packet capture session resource.
func (o PacketCaptureOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The reason the current packet capture session state.
func (o PacketCaptureOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Reason }).(pulumi.StringOutput)
}

// The status of the packet capture session.
func (o PacketCaptureOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PacketCaptureOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PacketCapture) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Maximum duration of the capture session in seconds.
func (o PacketCaptureOutput) TimeLimitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.IntPtrOutput { return v.TimeLimitInSeconds }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture output.
func (o PacketCaptureOutput) TotalBytesPerSession() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.Float64PtrOutput { return v.TotalBytesPerSession }).(pulumi.Float64PtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PacketCaptureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PacketCapture) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PacketCaptureOutput{})
}
