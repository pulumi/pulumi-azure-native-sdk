// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about the specified diagnostics package.
func LookupDiagnosticsPackage(ctx *pulumi.Context, args *LookupDiagnosticsPackageArgs, opts ...pulumi.InvokeOption) (*LookupDiagnosticsPackageResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupDiagnosticsPackageResult
	err := ctx.Invoke("azure-native:mobilenetwork/v20230901:getDiagnosticsPackage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDiagnosticsPackageArgs struct {
	// The name of the diagnostics package.
	DiagnosticsPackageName string `pulumi:"diagnosticsPackageName"`
	// The name of the packet core control plane.
	PacketCoreControlPlaneName string `pulumi:"packetCoreControlPlaneName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Diagnostics package resource.
type LookupDiagnosticsPackageResult struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the diagnostics package resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The reason for the current state of the diagnostics package collection.
	Reason string `pulumi:"reason"`
	// The status of the diagnostics package collection.
	Status string `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupDiagnosticsPackageOutput(ctx *pulumi.Context, args LookupDiagnosticsPackageOutputArgs, opts ...pulumi.InvokeOption) LookupDiagnosticsPackageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDiagnosticsPackageResult, error) {
			args := v.(LookupDiagnosticsPackageArgs)
			r, err := LookupDiagnosticsPackage(ctx, &args, opts...)
			var s LookupDiagnosticsPackageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDiagnosticsPackageResultOutput)
}

type LookupDiagnosticsPackageOutputArgs struct {
	// The name of the diagnostics package.
	DiagnosticsPackageName pulumi.StringInput `pulumi:"diagnosticsPackageName"`
	// The name of the packet core control plane.
	PacketCoreControlPlaneName pulumi.StringInput `pulumi:"packetCoreControlPlaneName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupDiagnosticsPackageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiagnosticsPackageArgs)(nil)).Elem()
}

// Diagnostics package resource.
type LookupDiagnosticsPackageResultOutput struct{ *pulumi.OutputState }

func (LookupDiagnosticsPackageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDiagnosticsPackageResult)(nil)).Elem()
}

func (o LookupDiagnosticsPackageResultOutput) ToLookupDiagnosticsPackageResultOutput() LookupDiagnosticsPackageResultOutput {
	return o
}

func (o LookupDiagnosticsPackageResultOutput) ToLookupDiagnosticsPackageResultOutputWithContext(ctx context.Context) LookupDiagnosticsPackageResultOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupDiagnosticsPackageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupDiagnosticsPackageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the diagnostics package resource.
func (o LookupDiagnosticsPackageResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The reason for the current state of the diagnostics package collection.
func (o LookupDiagnosticsPackageResultOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.Reason }).(pulumi.StringOutput)
}

// The status of the diagnostics package collection.
func (o LookupDiagnosticsPackageResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupDiagnosticsPackageResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupDiagnosticsPackageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDiagnosticsPackageResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDiagnosticsPackageResultOutput{})
}
