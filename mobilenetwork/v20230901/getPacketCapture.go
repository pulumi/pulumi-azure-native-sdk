// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230901

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets information about the specified packet capture session.
func LookupPacketCapture(ctx *pulumi.Context, args *LookupPacketCaptureArgs, opts ...pulumi.InvokeOption) (*LookupPacketCaptureResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPacketCaptureResult
	err := ctx.Invoke("azure-native:mobilenetwork/v20230901:getPacketCapture", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupPacketCaptureArgs struct {
	// The name of the packet capture session.
	PacketCaptureName string `pulumi:"packetCaptureName"`
	// The name of the packet core control plane.
	PacketCoreControlPlaneName string `pulumi:"packetCoreControlPlaneName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Packet capture session resource.
type LookupPacketCaptureResult struct {
	// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
	BytesToCapturePerPacket *float64 `pulumi:"bytesToCapturePerPacket"`
	// The start time of the packet capture session.
	CaptureStartTime string `pulumi:"captureStartTime"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// List of network interfaces to capture on.
	NetworkInterfaces []string `pulumi:"networkInterfaces"`
	// The list of output files of a packet capture session.
	OutputFiles []string `pulumi:"outputFiles"`
	// The provisioning state of the packet capture session resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The reason the current packet capture session state.
	Reason string `pulumi:"reason"`
	// The status of the packet capture session.
	Status string `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int `pulumi:"timeLimitInSeconds"`
	// Maximum size of the capture output.
	TotalBytesPerSession *float64 `pulumi:"totalBytesPerSession"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for LookupPacketCaptureResult
func (val *LookupPacketCaptureResult) Defaults() *LookupPacketCaptureResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BytesToCapturePerPacket == nil {
		bytesToCapturePerPacket_ := 0.0
		tmp.BytesToCapturePerPacket = &bytesToCapturePerPacket_
	}
	if tmp.TimeLimitInSeconds == nil {
		timeLimitInSeconds_ := 18000
		tmp.TimeLimitInSeconds = &timeLimitInSeconds_
	}
	if tmp.TotalBytesPerSession == nil {
		totalBytesPerSession_ := 67108864.0
		tmp.TotalBytesPerSession = &totalBytesPerSession_
	}
	return &tmp
}

func LookupPacketCaptureOutput(ctx *pulumi.Context, args LookupPacketCaptureOutputArgs, opts ...pulumi.InvokeOption) LookupPacketCaptureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPacketCaptureResult, error) {
			args := v.(LookupPacketCaptureArgs)
			r, err := LookupPacketCapture(ctx, &args, opts...)
			var s LookupPacketCaptureResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPacketCaptureResultOutput)
}

type LookupPacketCaptureOutputArgs struct {
	// The name of the packet capture session.
	PacketCaptureName pulumi.StringInput `pulumi:"packetCaptureName"`
	// The name of the packet core control plane.
	PacketCoreControlPlaneName pulumi.StringInput `pulumi:"packetCoreControlPlaneName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPacketCaptureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPacketCaptureArgs)(nil)).Elem()
}

// Packet capture session resource.
type LookupPacketCaptureResultOutput struct{ *pulumi.OutputState }

func (LookupPacketCaptureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPacketCaptureResult)(nil)).Elem()
}

func (o LookupPacketCaptureResultOutput) ToLookupPacketCaptureResultOutput() LookupPacketCaptureResultOutput {
	return o
}

func (o LookupPacketCaptureResultOutput) ToLookupPacketCaptureResultOutputWithContext(ctx context.Context) LookupPacketCaptureResultOutput {
	return o
}

func (o LookupPacketCaptureResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPacketCaptureResult] {
	return pulumix.Output[LookupPacketCaptureResult]{
		OutputState: o.OutputState,
	}
}

// Number of bytes captured per packet, the remaining bytes are truncated. The default "0" means the entire packet is captured.
func (o LookupPacketCaptureResultOutput) BytesToCapturePerPacket() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *float64 { return v.BytesToCapturePerPacket }).(pulumi.Float64PtrOutput)
}

// The start time of the packet capture session.
func (o LookupPacketCaptureResultOutput) CaptureStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.CaptureStartTime }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupPacketCaptureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupPacketCaptureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Name }).(pulumi.StringOutput)
}

// List of network interfaces to capture on.
func (o LookupPacketCaptureResultOutput) NetworkInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) []string { return v.NetworkInterfaces }).(pulumi.StringArrayOutput)
}

// The list of output files of a packet capture session.
func (o LookupPacketCaptureResultOutput) OutputFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) []string { return v.OutputFiles }).(pulumi.StringArrayOutput)
}

// The provisioning state of the packet capture session resource.
func (o LookupPacketCaptureResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The reason the current packet capture session state.
func (o LookupPacketCaptureResultOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Reason }).(pulumi.StringOutput)
}

// The status of the packet capture session.
func (o LookupPacketCaptureResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPacketCaptureResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Maximum duration of the capture session in seconds.
func (o LookupPacketCaptureResultOutput) TimeLimitInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *int { return v.TimeLimitInSeconds }).(pulumi.IntPtrOutput)
}

// Maximum size of the capture output.
func (o LookupPacketCaptureResultOutput) TotalBytesPerSession() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) *float64 { return v.TotalBytesPerSession }).(pulumi.Float64PtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPacketCaptureResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPacketCaptureResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPacketCaptureResultOutput{})
}
