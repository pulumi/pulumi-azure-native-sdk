// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mobilenetwork

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about the specified SIM.
// Azure REST API version: 2024-04-01.
func LookupSimGroupSim(ctx *pulumi.Context, args *LookupSimGroupSimArgs, opts ...pulumi.InvokeOption) (*LookupSimGroupSimResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSimGroupSimResult
	err := ctx.Invoke("azure-native:mobilenetwork:getSimGroupSim", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSimGroupSimArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the SIM Group.
	SimGroupName string `pulumi:"simGroupName"`
	// The name of the SIM.
	SimName string `pulumi:"simName"`
}

// SIM resource.
type LookupSimGroupSimResult struct {
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value.
	DeviceType *string `pulumi:"deviceType"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The integrated circuit card ID (ICCID) for the SIM.
	IntegratedCircuitCardIdentifier *string `pulumi:"integratedCircuitCardIdentifier"`
	// The international mobile subscriber identity (IMSI) for the SIM.
	InternationalMobileSubscriberIdentity string `pulumi:"internationalMobileSubscriberIdentity"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The provisioning state of the SIM resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM.
	SimPolicy *SimPolicyResourceIdResponse `pulumi:"simPolicy"`
	// The state of the SIM resource.
	SimState string `pulumi:"simState"`
	// A dictionary of sites to the provisioning state of this SIM on that site.
	SiteProvisioningState map[string]string `pulumi:"siteProvisioningState"`
	// A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}.
	StaticIpConfiguration []SimStaticIpPropertiesResponse `pulumi:"staticIpConfiguration"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// The public key fingerprint of the SIM vendor who provided this SIM, if any.
	VendorKeyFingerprint string `pulumi:"vendorKeyFingerprint"`
	// The name of the SIM vendor who provided this SIM, if any.
	VendorName string `pulumi:"vendorName"`
}

func LookupSimGroupSimOutput(ctx *pulumi.Context, args LookupSimGroupSimOutputArgs, opts ...pulumi.InvokeOption) LookupSimGroupSimResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSimGroupSimResultOutput, error) {
			args := v.(LookupSimGroupSimArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:mobilenetwork:getSimGroupSim", args, LookupSimGroupSimResultOutput{}, options).(LookupSimGroupSimResultOutput), nil
		}).(LookupSimGroupSimResultOutput)
}

type LookupSimGroupSimOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the SIM Group.
	SimGroupName pulumi.StringInput `pulumi:"simGroupName"`
	// The name of the SIM.
	SimName pulumi.StringInput `pulumi:"simName"`
}

func (LookupSimGroupSimOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSimGroupSimArgs)(nil)).Elem()
}

// SIM resource.
type LookupSimGroupSimResultOutput struct{ *pulumi.OutputState }

func (LookupSimGroupSimResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSimGroupSimResult)(nil)).Elem()
}

func (o LookupSimGroupSimResultOutput) ToLookupSimGroupSimResultOutput() LookupSimGroupSimResultOutput {
	return o
}

func (o LookupSimGroupSimResultOutput) ToLookupSimGroupSimResultOutputWithContext(ctx context.Context) LookupSimGroupSimResultOutput {
	return o
}

// The Azure API version of the resource.
func (o LookupSimGroupSimResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value.
func (o LookupSimGroupSimResultOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) *string { return v.DeviceType }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupSimGroupSimResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.Id }).(pulumi.StringOutput)
}

// The integrated circuit card ID (ICCID) for the SIM.
func (o LookupSimGroupSimResultOutput) IntegratedCircuitCardIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) *string { return v.IntegratedCircuitCardIdentifier }).(pulumi.StringPtrOutput)
}

// The international mobile subscriber identity (IMSI) for the SIM.
func (o LookupSimGroupSimResultOutput) InternationalMobileSubscriberIdentity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.InternationalMobileSubscriberIdentity }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSimGroupSimResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisioning state of the SIM resource.
func (o LookupSimGroupSimResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM.
func (o LookupSimGroupSimResultOutput) SimPolicy() SimPolicyResourceIdResponsePtrOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) *SimPolicyResourceIdResponse { return v.SimPolicy }).(SimPolicyResourceIdResponsePtrOutput)
}

// The state of the SIM resource.
func (o LookupSimGroupSimResultOutput) SimState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.SimState }).(pulumi.StringOutput)
}

// A dictionary of sites to the provisioning state of this SIM on that site.
func (o LookupSimGroupSimResultOutput) SiteProvisioningState() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) map[string]string { return v.SiteProvisioningState }).(pulumi.StringMapOutput)
}

// A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}.
func (o LookupSimGroupSimResultOutput) StaticIpConfiguration() SimStaticIpPropertiesResponseArrayOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) []SimStaticIpPropertiesResponse { return v.StaticIpConfiguration }).(SimStaticIpPropertiesResponseArrayOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupSimGroupSimResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSimGroupSimResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.Type }).(pulumi.StringOutput)
}

// The public key fingerprint of the SIM vendor who provided this SIM, if any.
func (o LookupSimGroupSimResultOutput) VendorKeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.VendorKeyFingerprint }).(pulumi.StringOutput)
}

// The name of the SIM vendor who provided this SIM, if any.
func (o LookupSimGroupSimResultOutput) VendorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSimGroupSimResult) string { return v.VendorName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSimGroupSimResultOutput{})
}
