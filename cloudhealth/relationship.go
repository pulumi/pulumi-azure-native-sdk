// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudhealth

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A relationship (aka edge) between two entities in a health model
//
// Uses Azure REST API version 2025-05-01-preview.
type Relationship struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties RelationshipPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRelationship registers a new resource with the given unique name, arguments, and options.
func NewRelationship(ctx *pulumi.Context,
	name string, args *RelationshipArgs, opts ...pulumi.ResourceOption) (*Relationship, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HealthModelName == nil {
		return nil, errors.New("invalid value for required argument 'HealthModelName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:cloudhealth/v20250501preview:Relationship"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Relationship
	err := ctx.RegisterResource("azure-native:cloudhealth:Relationship", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelationship gets an existing Relationship resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelationship(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RelationshipState, opts ...pulumi.ResourceOption) (*Relationship, error) {
	var resource Relationship
	err := ctx.ReadResource("azure-native:cloudhealth:Relationship", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Relationship resources.
type relationshipState struct {
}

type RelationshipState struct {
}

func (RelationshipState) ElementType() reflect.Type {
	return reflect.TypeOf((*relationshipState)(nil)).Elem()
}

type relationshipArgs struct {
	// Name of health model resource
	HealthModelName string `pulumi:"healthModelName"`
	// The resource-specific properties for this resource.
	Properties *RelationshipProperties `pulumi:"properties"`
	// Name of the relationship. Must be unique within a health model. For example, a concatenation of parentEntityName and childEntityName can be used as the name.
	RelationshipName *string `pulumi:"relationshipName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Relationship resource.
type RelationshipArgs struct {
	// Name of health model resource
	HealthModelName pulumi.StringInput
	// The resource-specific properties for this resource.
	Properties RelationshipPropertiesPtrInput
	// Name of the relationship. Must be unique within a health model. For example, a concatenation of parentEntityName and childEntityName can be used as the name.
	RelationshipName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (RelationshipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*relationshipArgs)(nil)).Elem()
}

type RelationshipInput interface {
	pulumi.Input

	ToRelationshipOutput() RelationshipOutput
	ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput
}

func (*Relationship) ElementType() reflect.Type {
	return reflect.TypeOf((**Relationship)(nil)).Elem()
}

func (i *Relationship) ToRelationshipOutput() RelationshipOutput {
	return i.ToRelationshipOutputWithContext(context.Background())
}

func (i *Relationship) ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipOutput)
}

type RelationshipOutput struct{ *pulumi.OutputState }

func (RelationshipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Relationship)(nil)).Elem()
}

func (o RelationshipOutput) ToRelationshipOutput() RelationshipOutput {
	return o
}

func (o RelationshipOutput) ToRelationshipOutputWithContext(ctx context.Context) RelationshipOutput {
	return o
}

// The Azure API version of the resource.
func (o RelationshipOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The name of the resource
func (o RelationshipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o RelationshipOutput) Properties() RelationshipPropertiesResponseOutput {
	return o.ApplyT(func(v *Relationship) RelationshipPropertiesResponseOutput { return v.Properties }).(RelationshipPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o RelationshipOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Relationship) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o RelationshipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Relationship) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(RelationshipOutput{})
}
