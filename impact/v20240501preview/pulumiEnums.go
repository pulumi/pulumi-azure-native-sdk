// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Degree of confidence on the impact being a platform issue
type ConfidenceLevel string

const (
	// Low confidence on azure being the source of impact
	ConfidenceLevelLow = ConfidenceLevel("Low")
	// Medium confidence on azure being the source of impact
	ConfidenceLevelMedium = ConfidenceLevel("Medium")
	// High confidence on azure being the source of impact
	ConfidenceLevelHigh = ConfidenceLevel("High")
)

func (ConfidenceLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidenceLevel)(nil)).Elem()
}

func (e ConfidenceLevel) ToConfidenceLevelOutput() ConfidenceLevelOutput {
	return pulumi.ToOutput(e).(ConfidenceLevelOutput)
}

func (e ConfidenceLevel) ToConfidenceLevelOutputWithContext(ctx context.Context) ConfidenceLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConfidenceLevelOutput)
}

func (e ConfidenceLevel) ToConfidenceLevelPtrOutput() ConfidenceLevelPtrOutput {
	return e.ToConfidenceLevelPtrOutputWithContext(context.Background())
}

func (e ConfidenceLevel) ToConfidenceLevelPtrOutputWithContext(ctx context.Context) ConfidenceLevelPtrOutput {
	return ConfidenceLevel(e).ToConfidenceLevelOutputWithContext(ctx).ToConfidenceLevelPtrOutputWithContext(ctx)
}

func (e ConfidenceLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConfidenceLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConfidenceLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConfidenceLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConfidenceLevelOutput struct{ *pulumi.OutputState }

func (ConfidenceLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfidenceLevel)(nil)).Elem()
}

func (o ConfidenceLevelOutput) ToConfidenceLevelOutput() ConfidenceLevelOutput {
	return o
}

func (o ConfidenceLevelOutput) ToConfidenceLevelOutputWithContext(ctx context.Context) ConfidenceLevelOutput {
	return o
}

func (o ConfidenceLevelOutput) ToConfidenceLevelPtrOutput() ConfidenceLevelPtrOutput {
	return o.ToConfidenceLevelPtrOutputWithContext(context.Background())
}

func (o ConfidenceLevelOutput) ToConfidenceLevelPtrOutputWithContext(ctx context.Context) ConfidenceLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfidenceLevel) *ConfidenceLevel {
		return &v
	}).(ConfidenceLevelPtrOutput)
}

func (o ConfidenceLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConfidenceLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConfidenceLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConfidenceLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfidenceLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConfidenceLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConfidenceLevelPtrOutput struct{ *pulumi.OutputState }

func (ConfidenceLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfidenceLevel)(nil)).Elem()
}

func (o ConfidenceLevelPtrOutput) ToConfidenceLevelPtrOutput() ConfidenceLevelPtrOutput {
	return o
}

func (o ConfidenceLevelPtrOutput) ToConfidenceLevelPtrOutputWithContext(ctx context.Context) ConfidenceLevelPtrOutput {
	return o
}

func (o ConfidenceLevelPtrOutput) Elem() ConfidenceLevelOutput {
	return o.ApplyT(func(v *ConfidenceLevel) ConfidenceLevel {
		if v != nil {
			return *v
		}
		var ret ConfidenceLevel
		return ret
	}).(ConfidenceLevelOutput)
}

func (o ConfidenceLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConfidenceLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConfidenceLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConfidenceLevelInput is an input type that accepts values of the ConfidenceLevel enum
// A concrete instance of `ConfidenceLevelInput` can be one of the following:
//
//	ConfidenceLevelLow
//	ConfidenceLevelMedium
//	ConfidenceLevelHigh
type ConfidenceLevelInput interface {
	pulumi.Input

	ToConfidenceLevelOutput() ConfidenceLevelOutput
	ToConfidenceLevelOutputWithContext(context.Context) ConfidenceLevelOutput
}

var confidenceLevelPtrType = reflect.TypeOf((**ConfidenceLevel)(nil)).Elem()

type ConfidenceLevelPtrInput interface {
	pulumi.Input

	ToConfidenceLevelPtrOutput() ConfidenceLevelPtrOutput
	ToConfidenceLevelPtrOutputWithContext(context.Context) ConfidenceLevelPtrOutput
}

type confidenceLevelPtr string

func ConfidenceLevelPtr(v string) ConfidenceLevelPtrInput {
	return (*confidenceLevelPtr)(&v)
}

func (*confidenceLevelPtr) ElementType() reflect.Type {
	return confidenceLevelPtrType
}

func (in *confidenceLevelPtr) ToConfidenceLevelPtrOutput() ConfidenceLevelPtrOutput {
	return pulumi.ToOutput(in).(ConfidenceLevelPtrOutput)
}

func (in *confidenceLevelPtr) ToConfidenceLevelPtrOutputWithContext(ctx context.Context) ConfidenceLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConfidenceLevelPtrOutput)
}

// Client incident source. ex : source system name where the incident is created
type IncidentSource string

const (
	// When source of Incident is AzureDevops
	IncidentSourceAzureDevops = IncidentSource("AzureDevops")
	// When source of Incident is Microsoft ICM
	IncidentSourceICM = IncidentSource("ICM")
	// When source of Incident is Jira
	IncidentSourceJira = IncidentSource("Jira")
	// When source of Incident is ServiceNow
	IncidentSourceServiceNow = IncidentSource("ServiceNow")
	// When source of Incident is Other
	IncidentSourceOther = IncidentSource("Other")
)

func (IncidentSource) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentSource)(nil)).Elem()
}

func (e IncidentSource) ToIncidentSourceOutput() IncidentSourceOutput {
	return pulumi.ToOutput(e).(IncidentSourceOutput)
}

func (e IncidentSource) ToIncidentSourceOutputWithContext(ctx context.Context) IncidentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IncidentSourceOutput)
}

func (e IncidentSource) ToIncidentSourcePtrOutput() IncidentSourcePtrOutput {
	return e.ToIncidentSourcePtrOutputWithContext(context.Background())
}

func (e IncidentSource) ToIncidentSourcePtrOutputWithContext(ctx context.Context) IncidentSourcePtrOutput {
	return IncidentSource(e).ToIncidentSourceOutputWithContext(ctx).ToIncidentSourcePtrOutputWithContext(ctx)
}

func (e IncidentSource) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IncidentSource) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IncidentSource) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IncidentSource) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IncidentSourceOutput struct{ *pulumi.OutputState }

func (IncidentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentSource)(nil)).Elem()
}

func (o IncidentSourceOutput) ToIncidentSourceOutput() IncidentSourceOutput {
	return o
}

func (o IncidentSourceOutput) ToIncidentSourceOutputWithContext(ctx context.Context) IncidentSourceOutput {
	return o
}

func (o IncidentSourceOutput) ToIncidentSourcePtrOutput() IncidentSourcePtrOutput {
	return o.ToIncidentSourcePtrOutputWithContext(context.Background())
}

func (o IncidentSourceOutput) ToIncidentSourcePtrOutputWithContext(ctx context.Context) IncidentSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IncidentSource) *IncidentSource {
		return &v
	}).(IncidentSourcePtrOutput)
}

func (o IncidentSourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IncidentSourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IncidentSource) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IncidentSourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IncidentSourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IncidentSource) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IncidentSourcePtrOutput struct{ *pulumi.OutputState }

func (IncidentSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentSource)(nil)).Elem()
}

func (o IncidentSourcePtrOutput) ToIncidentSourcePtrOutput() IncidentSourcePtrOutput {
	return o
}

func (o IncidentSourcePtrOutput) ToIncidentSourcePtrOutputWithContext(ctx context.Context) IncidentSourcePtrOutput {
	return o
}

func (o IncidentSourcePtrOutput) Elem() IncidentSourceOutput {
	return o.ApplyT(func(v *IncidentSource) IncidentSource {
		if v != nil {
			return *v
		}
		var ret IncidentSource
		return ret
	}).(IncidentSourceOutput)
}

func (o IncidentSourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IncidentSourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IncidentSource) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IncidentSourceInput is an input type that accepts values of the IncidentSource enum
// A concrete instance of `IncidentSourceInput` can be one of the following:
//
//	IncidentSourceAzureDevops
//	IncidentSourceICM
//	IncidentSourceJira
//	IncidentSourceServiceNow
//	IncidentSourceOther
type IncidentSourceInput interface {
	pulumi.Input

	ToIncidentSourceOutput() IncidentSourceOutput
	ToIncidentSourceOutputWithContext(context.Context) IncidentSourceOutput
}

var incidentSourcePtrType = reflect.TypeOf((**IncidentSource)(nil)).Elem()

type IncidentSourcePtrInput interface {
	pulumi.Input

	ToIncidentSourcePtrOutput() IncidentSourcePtrOutput
	ToIncidentSourcePtrOutputWithContext(context.Context) IncidentSourcePtrOutput
}

type incidentSourcePtr string

func IncidentSourcePtr(v string) IncidentSourcePtrInput {
	return (*incidentSourcePtr)(&v)
}

func (*incidentSourcePtr) ElementType() reflect.Type {
	return incidentSourcePtrType
}

func (in *incidentSourcePtr) ToIncidentSourcePtrOutput() IncidentSourcePtrOutput {
	return pulumi.ToOutput(in).(IncidentSourcePtrOutput)
}

func (in *incidentSourcePtr) ToIncidentSourcePtrOutputWithContext(ctx context.Context) IncidentSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IncidentSourcePtrOutput)
}

// Unit of the metric ex: Bytes, Percentage, Count, Seconds, Milliseconds, Bytes/Second, Count/Second, etc.., Other
type MetricUnit string

const (
	// When measurement is in ByteSeconds
	MetricUnitByteSeconds = MetricUnit("ByteSeconds")
	// When measurement is in Bytes
	MetricUnitBytes = MetricUnit("Bytes")
	// When measurement is in BytesPerSecond
	MetricUnitBytesPerSecond = MetricUnit("BytesPerSecond")
	// When measurement is in Cores
	MetricUnitCores = MetricUnit("Cores")
	// When measurement is in Count
	MetricUnitCount = MetricUnit("Count")
	// When measurement is in CountPerSecond
	MetricUnitCountPerSecond = MetricUnit("CountPerSecond")
	// When measurement is in MilliCores
	MetricUnitMilliCores = MetricUnit("MilliCores")
	// When measurement is in MilliSeconds
	MetricUnitMilliSeconds = MetricUnit("MilliSeconds")
	// When measurement is in NanoCores
	MetricUnitNanoCores = MetricUnit("NanoCores")
	// When measurement is in Percent
	MetricUnitPercent = MetricUnit("Percent")
	// When measurement is in Seconds
	MetricUnitSeconds = MetricUnit("Seconds")
	// When measurement is in Other than listed
	MetricUnitOther = MetricUnit("Other")
)

func (MetricUnit) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricUnit)(nil)).Elem()
}

func (e MetricUnit) ToMetricUnitOutput() MetricUnitOutput {
	return pulumi.ToOutput(e).(MetricUnitOutput)
}

func (e MetricUnit) ToMetricUnitOutputWithContext(ctx context.Context) MetricUnitOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MetricUnitOutput)
}

func (e MetricUnit) ToMetricUnitPtrOutput() MetricUnitPtrOutput {
	return e.ToMetricUnitPtrOutputWithContext(context.Background())
}

func (e MetricUnit) ToMetricUnitPtrOutputWithContext(ctx context.Context) MetricUnitPtrOutput {
	return MetricUnit(e).ToMetricUnitOutputWithContext(ctx).ToMetricUnitPtrOutputWithContext(ctx)
}

func (e MetricUnit) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricUnit) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MetricUnit) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MetricUnit) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MetricUnitOutput struct{ *pulumi.OutputState }

func (MetricUnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricUnit)(nil)).Elem()
}

func (o MetricUnitOutput) ToMetricUnitOutput() MetricUnitOutput {
	return o
}

func (o MetricUnitOutput) ToMetricUnitOutputWithContext(ctx context.Context) MetricUnitOutput {
	return o
}

func (o MetricUnitOutput) ToMetricUnitPtrOutput() MetricUnitPtrOutput {
	return o.ToMetricUnitPtrOutputWithContext(context.Background())
}

func (o MetricUnitOutput) ToMetricUnitPtrOutputWithContext(ctx context.Context) MetricUnitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricUnit) *MetricUnit {
		return &v
	}).(MetricUnitPtrOutput)
}

func (o MetricUnitOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MetricUnitOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricUnit) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MetricUnitOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricUnitOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MetricUnit) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MetricUnitPtrOutput struct{ *pulumi.OutputState }

func (MetricUnitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricUnit)(nil)).Elem()
}

func (o MetricUnitPtrOutput) ToMetricUnitPtrOutput() MetricUnitPtrOutput {
	return o
}

func (o MetricUnitPtrOutput) ToMetricUnitPtrOutputWithContext(ctx context.Context) MetricUnitPtrOutput {
	return o
}

func (o MetricUnitPtrOutput) Elem() MetricUnitOutput {
	return o.ApplyT(func(v *MetricUnit) MetricUnit {
		if v != nil {
			return *v
		}
		var ret MetricUnit
		return ret
	}).(MetricUnitOutput)
}

func (o MetricUnitPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MetricUnitPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MetricUnit) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MetricUnitInput is an input type that accepts values of the MetricUnit enum
// A concrete instance of `MetricUnitInput` can be one of the following:
//
//	MetricUnitByteSeconds
//	MetricUnitBytes
//	MetricUnitBytesPerSecond
//	MetricUnitCores
//	MetricUnitCount
//	MetricUnitCountPerSecond
//	MetricUnitMilliCores
//	MetricUnitMilliSeconds
//	MetricUnitNanoCores
//	MetricUnitPercent
//	MetricUnitSeconds
//	MetricUnitOther
type MetricUnitInput interface {
	pulumi.Input

	ToMetricUnitOutput() MetricUnitOutput
	ToMetricUnitOutputWithContext(context.Context) MetricUnitOutput
}

var metricUnitPtrType = reflect.TypeOf((**MetricUnit)(nil)).Elem()

type MetricUnitPtrInput interface {
	pulumi.Input

	ToMetricUnitPtrOutput() MetricUnitPtrOutput
	ToMetricUnitPtrOutputWithContext(context.Context) MetricUnitPtrOutput
}

type metricUnitPtr string

func MetricUnitPtr(v string) MetricUnitPtrInput {
	return (*metricUnitPtr)(&v)
}

func (*metricUnitPtr) ElementType() reflect.Type {
	return metricUnitPtrType
}

func (in *metricUnitPtr) ToMetricUnitPtrOutput() MetricUnitPtrOutput {
	return pulumi.ToOutput(in).(MetricUnitPtrOutput)
}

func (in *metricUnitPtr) ToMetricUnitPtrOutputWithContext(ctx context.Context) MetricUnitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MetricUnitPtrOutput)
}

// connector type
type Platform string

const (
	// Type of Azure Monitor
	PlatformAzureMonitor = Platform("AzureMonitor")
)

func (Platform) ElementType() reflect.Type {
	return reflect.TypeOf((*Platform)(nil)).Elem()
}

func (e Platform) ToPlatformOutput() PlatformOutput {
	return pulumi.ToOutput(e).(PlatformOutput)
}

func (e Platform) ToPlatformOutputWithContext(ctx context.Context) PlatformOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PlatformOutput)
}

func (e Platform) ToPlatformPtrOutput() PlatformPtrOutput {
	return e.ToPlatformPtrOutputWithContext(context.Background())
}

func (e Platform) ToPlatformPtrOutputWithContext(ctx context.Context) PlatformPtrOutput {
	return Platform(e).ToPlatformOutputWithContext(ctx).ToPlatformPtrOutputWithContext(ctx)
}

func (e Platform) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Platform) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Platform) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Platform) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PlatformOutput struct{ *pulumi.OutputState }

func (PlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Platform)(nil)).Elem()
}

func (o PlatformOutput) ToPlatformOutput() PlatformOutput {
	return o
}

func (o PlatformOutput) ToPlatformOutputWithContext(ctx context.Context) PlatformOutput {
	return o
}

func (o PlatformOutput) ToPlatformPtrOutput() PlatformPtrOutput {
	return o.ToPlatformPtrOutputWithContext(context.Background())
}

func (o PlatformOutput) ToPlatformPtrOutputWithContext(ctx context.Context) PlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Platform) *Platform {
		return &v
	}).(PlatformPtrOutput)
}

func (o PlatformOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PlatformOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Platform) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PlatformOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlatformOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Platform) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PlatformPtrOutput struct{ *pulumi.OutputState }

func (PlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Platform)(nil)).Elem()
}

func (o PlatformPtrOutput) ToPlatformPtrOutput() PlatformPtrOutput {
	return o
}

func (o PlatformPtrOutput) ToPlatformPtrOutputWithContext(ctx context.Context) PlatformPtrOutput {
	return o
}

func (o PlatformPtrOutput) Elem() PlatformOutput {
	return o.ApplyT(func(v *Platform) Platform {
		if v != nil {
			return *v
		}
		var ret Platform
		return ret
	}).(PlatformOutput)
}

func (o PlatformPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PlatformPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Platform) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PlatformInput is an input type that accepts values of the Platform enum
// A concrete instance of `PlatformInput` can be one of the following:
//
//	PlatformAzureMonitor
type PlatformInput interface {
	pulumi.Input

	ToPlatformOutput() PlatformOutput
	ToPlatformOutputWithContext(context.Context) PlatformOutput
}

var platformPtrType = reflect.TypeOf((**Platform)(nil)).Elem()

type PlatformPtrInput interface {
	pulumi.Input

	ToPlatformPtrOutput() PlatformPtrOutput
	ToPlatformPtrOutputWithContext(context.Context) PlatformPtrOutput
}

type platformPtr string

func PlatformPtr(v string) PlatformPtrInput {
	return (*platformPtr)(&v)
}

func (*platformPtr) ElementType() reflect.Type {
	return platformPtrType
}

func (in *platformPtr) ToPlatformPtrOutput() PlatformPtrOutput {
	return pulumi.ToOutput(in).(PlatformPtrOutput)
}

func (in *platformPtr) ToPlatformPtrOutputWithContext(ctx context.Context) PlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PlatformPtrOutput)
}

// Protocol used for the connection
type Protocol string

const (
	// When communication protocol is TCP
	ProtocolTCP = Protocol("TCP")
	// When communication protocol is UDP
	ProtocolUDP = Protocol("UDP")
	// When communication protocol is HTTP
	ProtocolHTTP = Protocol("HTTP")
	// When communication protocol is HTTPS
	ProtocolHTTPS = Protocol("HTTPS")
	// When communication protocol is RDP
	ProtocolRDP = Protocol("RDP")
	// When communication protocol is FTP
	ProtocolFTP = Protocol("FTP")
	// When communication protocol is SSH
	ProtocolSSH = Protocol("SSH")
	// When communication protocol is Other
	ProtocolOther = Protocol("Other")
)

func (Protocol) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (e Protocol) ToProtocolOutput() ProtocolOutput {
	return pulumi.ToOutput(e).(ProtocolOutput)
}

func (e Protocol) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProtocolOutput)
}

func (e Protocol) ToProtocolPtrOutput() ProtocolPtrOutput {
	return e.ToProtocolPtrOutputWithContext(context.Background())
}

func (e Protocol) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return Protocol(e).ToProtocolOutputWithContext(ctx).ToProtocolPtrOutputWithContext(ctx)
}

func (e Protocol) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Protocol) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Protocol) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProtocolOutput struct{ *pulumi.OutputState }

func (ProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Protocol)(nil)).Elem()
}

func (o ProtocolOutput) ToProtocolOutput() ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolOutputWithContext(ctx context.Context) ProtocolOutput {
	return o
}

func (o ProtocolOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o.ToProtocolPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Protocol) *Protocol {
		return &v
	}).(ProtocolPtrOutput)
}

func (o ProtocolOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProtocolOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Protocol) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProtocolPtrOutput struct{ *pulumi.OutputState }

func (ProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Protocol)(nil)).Elem()
}

func (o ProtocolPtrOutput) ToProtocolPtrOutput() ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return o
}

func (o ProtocolPtrOutput) Elem() ProtocolOutput {
	return o.ApplyT(func(v *Protocol) Protocol {
		if v != nil {
			return *v
		}
		var ret Protocol
		return ret
	}).(ProtocolOutput)
}

func (o ProtocolPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProtocolPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Protocol) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProtocolInput is an input type that accepts values of the Protocol enum
// A concrete instance of `ProtocolInput` can be one of the following:
//
//	ProtocolTCP
//	ProtocolUDP
//	ProtocolHTTP
//	ProtocolHTTPS
//	ProtocolRDP
//	ProtocolFTP
//	ProtocolSSH
//	ProtocolOther
type ProtocolInput interface {
	pulumi.Input

	ToProtocolOutput() ProtocolOutput
	ToProtocolOutputWithContext(context.Context) ProtocolOutput
}

var protocolPtrType = reflect.TypeOf((**Protocol)(nil)).Elem()

type ProtocolPtrInput interface {
	pulumi.Input

	ToProtocolPtrOutput() ProtocolPtrOutput
	ToProtocolPtrOutputWithContext(context.Context) ProtocolPtrOutput
}

type protocolPtr string

func ProtocolPtr(v string) ProtocolPtrInput {
	return (*protocolPtr)(&v)
}

func (*protocolPtr) ElementType() reflect.Type {
	return protocolPtrType
}

func (in *protocolPtr) ToProtocolPtrOutput() ProtocolPtrOutput {
	return pulumi.ToOutput(in).(ProtocolPtrOutput)
}

func (in *protocolPtr) ToProtocolPtrOutputWithContext(ctx context.Context) ProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProtocolPtrOutput)
}

// Tool used to interact with Azure. SDK, AzPortal, etc.., Other
type Toolset string

const (
	// If communication toolset is Terraform
	ToolsetTerraform = Toolset("Terraform")
	// If communication toolset is Puppet
	ToolsetPuppet = Toolset("Puppet")
	// If communication toolset is Chef
	ToolsetChef = Toolset("Chef")
	// If communication toolset is SDK
	ToolsetSDK = Toolset("SDK")
	// If communication toolset is Ansible
	ToolsetAnsible = Toolset("Ansible")
	// If communication toolset is ARM
	ToolsetARM = Toolset("ARM")
	// If communication toolset is Portal
	ToolsetPortal = Toolset("Portal")
	// If communication toolset is Shell
	ToolsetShell = Toolset("Shell")
	// If communication toolset is Other
	ToolsetOther = Toolset("Other")
)

func (Toolset) ElementType() reflect.Type {
	return reflect.TypeOf((*Toolset)(nil)).Elem()
}

func (e Toolset) ToToolsetOutput() ToolsetOutput {
	return pulumi.ToOutput(e).(ToolsetOutput)
}

func (e Toolset) ToToolsetOutputWithContext(ctx context.Context) ToolsetOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ToolsetOutput)
}

func (e Toolset) ToToolsetPtrOutput() ToolsetPtrOutput {
	return e.ToToolsetPtrOutputWithContext(context.Background())
}

func (e Toolset) ToToolsetPtrOutputWithContext(ctx context.Context) ToolsetPtrOutput {
	return Toolset(e).ToToolsetOutputWithContext(ctx).ToToolsetPtrOutputWithContext(ctx)
}

func (e Toolset) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Toolset) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Toolset) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Toolset) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ToolsetOutput struct{ *pulumi.OutputState }

func (ToolsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Toolset)(nil)).Elem()
}

func (o ToolsetOutput) ToToolsetOutput() ToolsetOutput {
	return o
}

func (o ToolsetOutput) ToToolsetOutputWithContext(ctx context.Context) ToolsetOutput {
	return o
}

func (o ToolsetOutput) ToToolsetPtrOutput() ToolsetPtrOutput {
	return o.ToToolsetPtrOutputWithContext(context.Background())
}

func (o ToolsetOutput) ToToolsetPtrOutputWithContext(ctx context.Context) ToolsetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Toolset) *Toolset {
		return &v
	}).(ToolsetPtrOutput)
}

func (o ToolsetOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ToolsetOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Toolset) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ToolsetOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ToolsetOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Toolset) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ToolsetPtrOutput struct{ *pulumi.OutputState }

func (ToolsetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Toolset)(nil)).Elem()
}

func (o ToolsetPtrOutput) ToToolsetPtrOutput() ToolsetPtrOutput {
	return o
}

func (o ToolsetPtrOutput) ToToolsetPtrOutputWithContext(ctx context.Context) ToolsetPtrOutput {
	return o
}

func (o ToolsetPtrOutput) Elem() ToolsetOutput {
	return o.ApplyT(func(v *Toolset) Toolset {
		if v != nil {
			return *v
		}
		var ret Toolset
		return ret
	}).(ToolsetOutput)
}

func (o ToolsetPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ToolsetPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Toolset) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ToolsetInput is an input type that accepts values of the Toolset enum
// A concrete instance of `ToolsetInput` can be one of the following:
//
//	ToolsetTerraform
//	ToolsetPuppet
//	ToolsetChef
//	ToolsetSDK
//	ToolsetAnsible
//	ToolsetARM
//	ToolsetPortal
//	ToolsetShell
//	ToolsetOther
type ToolsetInput interface {
	pulumi.Input

	ToToolsetOutput() ToolsetOutput
	ToToolsetOutputWithContext(context.Context) ToolsetOutput
}

var toolsetPtrType = reflect.TypeOf((**Toolset)(nil)).Elem()

type ToolsetPtrInput interface {
	pulumi.Input

	ToToolsetPtrOutput() ToolsetPtrOutput
	ToToolsetPtrOutputWithContext(context.Context) ToolsetPtrOutput
}

type toolsetPtr string

func ToolsetPtr(v string) ToolsetPtrInput {
	return (*toolsetPtr)(&v)
}

func (*toolsetPtr) ElementType() reflect.Type {
	return toolsetPtrType
}

func (in *toolsetPtr) ToToolsetPtrOutput() ToolsetPtrOutput {
	return pulumi.ToOutput(in).(ToolsetPtrOutput)
}

func (in *toolsetPtr) ToToolsetPtrOutputWithContext(ctx context.Context) ToolsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ToolsetPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConfidenceLevelOutput{})
	pulumi.RegisterOutputType(ConfidenceLevelPtrOutput{})
	pulumi.RegisterOutputType(IncidentSourceOutput{})
	pulumi.RegisterOutputType(IncidentSourcePtrOutput{})
	pulumi.RegisterOutputType(MetricUnitOutput{})
	pulumi.RegisterOutputType(MetricUnitPtrOutput{})
	pulumi.RegisterOutputType(PlatformOutput{})
	pulumi.RegisterOutputType(PlatformPtrOutput{})
	pulumi.RegisterOutputType(ProtocolOutput{})
	pulumi.RegisterOutputType(ProtocolPtrOutput{})
	pulumi.RegisterOutputType(ToolsetOutput{})
	pulumi.RegisterOutputType(ToolsetPtrOutput{})
}
