// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Represents Activity timeline item.
type ActivityTimelineItemResponse struct {
	// The grouping bucket end time.
	BucketEndTimeUTC string `pulumi:"bucketEndTimeUTC"`
	// The grouping bucket start time.
	BucketStartTimeUTC string `pulumi:"bucketStartTimeUTC"`
	// The activity timeline content.
	Content string `pulumi:"content"`
	// The time of the first activity in the grouping bucket.
	FirstActivityTimeUTC string `pulumi:"firstActivityTimeUTC"`
	// The entity query kind
	// Expected value is 'Activity'.
	Kind string `pulumi:"kind"`
	// The time of the last activity in the grouping bucket.
	LastActivityTimeUTC string `pulumi:"lastActivityTimeUTC"`
	// The activity query id.
	QueryId string `pulumi:"queryId"`
	// The activity timeline title.
	Title string `pulumi:"title"`
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverride struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat *string `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat *string `pulumi:"alertDisplayNameFormat"`
	// the column name to take the alert severity from
	AlertSeverityColumnName *string `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName *string `pulumi:"alertTacticsColumnName"`
}

// AlertDetailsOverrideInput is an input type that accepts AlertDetailsOverrideArgs and AlertDetailsOverrideOutput values.
// You can construct a concrete instance of `AlertDetailsOverrideInput` via:
//
//	AlertDetailsOverrideArgs{...}
type AlertDetailsOverrideInput interface {
	pulumi.Input

	ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput
	ToAlertDetailsOverrideOutputWithContext(context.Context) AlertDetailsOverrideOutput
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideArgs struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat pulumi.StringPtrInput `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat pulumi.StringPtrInput `pulumi:"alertDisplayNameFormat"`
	// the column name to take the alert severity from
	AlertSeverityColumnName pulumi.StringPtrInput `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName pulumi.StringPtrInput `pulumi:"alertTacticsColumnName"`
}

func (AlertDetailsOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverride)(nil)).Elem()
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput {
	return i.ToAlertDetailsOverrideOutputWithContext(context.Background())
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverrideOutputWithContext(ctx context.Context) AlertDetailsOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverrideOutput)
}

func (i AlertDetailsOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverride] {
	return pulumix.Output[AlertDetailsOverride]{
		OutputState: i.ToAlertDetailsOverrideOutputWithContext(ctx).OutputState,
	}
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return i.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverrideOutput).ToAlertDetailsOverridePtrOutputWithContext(ctx)
}

// AlertDetailsOverridePtrInput is an input type that accepts AlertDetailsOverrideArgs, AlertDetailsOverridePtr and AlertDetailsOverridePtrOutput values.
// You can construct a concrete instance of `AlertDetailsOverridePtrInput` via:
//
//	        AlertDetailsOverrideArgs{...}
//
//	or:
//
//	        nil
type AlertDetailsOverridePtrInput interface {
	pulumi.Input

	ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput
	ToAlertDetailsOverridePtrOutputWithContext(context.Context) AlertDetailsOverridePtrOutput
}

type alertDetailsOverridePtrType AlertDetailsOverrideArgs

func AlertDetailsOverridePtr(v *AlertDetailsOverrideArgs) AlertDetailsOverridePtrInput {
	return (*alertDetailsOverridePtrType)(v)
}

func (*alertDetailsOverridePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverride)(nil)).Elem()
}

func (i *alertDetailsOverridePtrType) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return i.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (i *alertDetailsOverridePtrType) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverridePtrOutput)
}

func (i *alertDetailsOverridePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverride] {
	return pulumix.Output[*AlertDetailsOverride]{
		OutputState: i.ToAlertDetailsOverridePtrOutputWithContext(ctx).OutputState,
	}
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverride)(nil)).Elem()
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput {
	return o
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverrideOutputWithContext(ctx context.Context) AlertDetailsOverrideOutput {
	return o
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return o.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertDetailsOverride) *AlertDetailsOverride {
		return &v
	}).(AlertDetailsOverridePtrOutput)
}

func (o AlertDetailsOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverride] {
	return pulumix.Output[AlertDetailsOverride]{
		OutputState: o.OutputState,
	}
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertDescriptionFormat }).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertDisplayNameFormat }).(pulumi.StringPtrOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertSeverityColumnName }).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertTacticsColumnName }).(pulumi.StringPtrOutput)
}

type AlertDetailsOverridePtrOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverride)(nil)).Elem()
}

func (o AlertDetailsOverridePtrOutput) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return o
}

func (o AlertDetailsOverridePtrOutput) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return o
}

func (o AlertDetailsOverridePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverride] {
	return pulumix.Output[*AlertDetailsOverride]{
		OutputState: o.OutputState,
	}
}

func (o AlertDetailsOverridePtrOutput) Elem() AlertDetailsOverrideOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) AlertDetailsOverride {
		if v != nil {
			return *v
		}
		var ret AlertDetailsOverride
		return ret
	}).(AlertDetailsOverrideOutput)
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverridePtrOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertDescriptionFormat
	}).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverridePtrOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertDisplayNameFormat
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverridePtrOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertSeverityColumnName
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverridePtrOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertTacticsColumnName
	}).(pulumi.StringPtrOutput)
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideResponse struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat *string `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat *string `pulumi:"alertDisplayNameFormat"`
	// the column name to take the alert severity from
	AlertSeverityColumnName *string `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName *string `pulumi:"alertTacticsColumnName"`
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideResponseOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverrideResponse)(nil)).Elem()
}

func (o AlertDetailsOverrideResponseOutput) ToAlertDetailsOverrideResponseOutput() AlertDetailsOverrideResponseOutput {
	return o
}

func (o AlertDetailsOverrideResponseOutput) ToAlertDetailsOverrideResponseOutputWithContext(ctx context.Context) AlertDetailsOverrideResponseOutput {
	return o
}

func (o AlertDetailsOverrideResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverrideResponse] {
	return pulumix.Output[AlertDetailsOverrideResponse]{
		OutputState: o.OutputState,
	}
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideResponseOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertDescriptionFormat }).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideResponseOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertDisplayNameFormat }).(pulumi.StringPtrOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideResponseOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertSeverityColumnName }).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideResponseOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertTacticsColumnName }).(pulumi.StringPtrOutput)
}

type AlertDetailsOverrideResponsePtrOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverrideResponse)(nil)).Elem()
}

func (o AlertDetailsOverrideResponsePtrOutput) ToAlertDetailsOverrideResponsePtrOutput() AlertDetailsOverrideResponsePtrOutput {
	return o
}

func (o AlertDetailsOverrideResponsePtrOutput) ToAlertDetailsOverrideResponsePtrOutputWithContext(ctx context.Context) AlertDetailsOverrideResponsePtrOutput {
	return o
}

func (o AlertDetailsOverrideResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverrideResponse] {
	return pulumix.Output[*AlertDetailsOverrideResponse]{
		OutputState: o.OutputState,
	}
}

func (o AlertDetailsOverrideResponsePtrOutput) Elem() AlertDetailsOverrideResponseOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) AlertDetailsOverrideResponse {
		if v != nil {
			return *v
		}
		var ret AlertDetailsOverrideResponse
		return ret
	}).(AlertDetailsOverrideResponseOutput)
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideResponsePtrOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertDescriptionFormat
	}).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideResponsePtrOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertDisplayNameFormat
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideResponsePtrOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertSeverityColumnName
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideResponsePtrOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertTacticsColumnName
	}).(pulumi.StringPtrOutput)
}

// Represents bookmark timeline item.
type BookmarkTimelineItemResponse struct {
	// The bookmark azure resource id.
	AzureResourceId string `pulumi:"azureResourceId"`
	// Describes a user that created the bookmark
	CreatedBy *UserInfoResponse `pulumi:"createdBy"`
	// The bookmark display name.
	DisplayName *string `pulumi:"displayName"`
	// The bookmark end time.
	EndTimeUtc *string `pulumi:"endTimeUtc"`
	// The bookmark event time.
	EventTime *string `pulumi:"eventTime"`
	// The entity query kind
	// Expected value is 'Bookmark'.
	Kind string `pulumi:"kind"`
	// List of labels relevant to this bookmark
	Labels []string `pulumi:"labels"`
	// The notes of the bookmark
	Notes *string `pulumi:"notes"`
	// The bookmark start time.
	StartTimeUtc *string `pulumi:"startTimeUtc"`
}

// Entity insight Item.
type EntityInsightItemResponse struct {
	// Query results for table insights query.
	ChartQueryResults []InsightsTableResultResponse `pulumi:"chartQueryResults"`
	// The query id of the insight
	QueryId *string `pulumi:"queryId"`
	// The Time interval that the query actually executed on.
	QueryTimeInterval *EntityInsightItemResponseQueryTimeInterval `pulumi:"queryTimeInterval"`
	// Query results for table insights query.
	TableQueryResults *InsightsTableResultResponse `pulumi:"tableQueryResults"`
}

// Entity insight Item.
type EntityInsightItemResponseOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityInsightItemResponse)(nil)).Elem()
}

func (o EntityInsightItemResponseOutput) ToEntityInsightItemResponseOutput() EntityInsightItemResponseOutput {
	return o
}

func (o EntityInsightItemResponseOutput) ToEntityInsightItemResponseOutputWithContext(ctx context.Context) EntityInsightItemResponseOutput {
	return o
}

func (o EntityInsightItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EntityInsightItemResponse] {
	return pulumix.Output[EntityInsightItemResponse]{
		OutputState: o.OutputState,
	}
}

// Query results for table insights query.
func (o EntityInsightItemResponseOutput) ChartQueryResults() InsightsTableResultResponseArrayOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) []InsightsTableResultResponse { return v.ChartQueryResults }).(InsightsTableResultResponseArrayOutput)
}

// The query id of the insight
func (o EntityInsightItemResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

// The Time interval that the query actually executed on.
func (o EntityInsightItemResponseOutput) QueryTimeInterval() EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *EntityInsightItemResponseQueryTimeInterval {
		return v.QueryTimeInterval
	}).(EntityInsightItemResponseQueryTimeIntervalPtrOutput)
}

// Query results for table insights query.
func (o EntityInsightItemResponseOutput) TableQueryResults() InsightsTableResultResponsePtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *InsightsTableResultResponse { return v.TableQueryResults }).(InsightsTableResultResponsePtrOutput)
}

type EntityInsightItemResponseArrayOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityInsightItemResponse)(nil)).Elem()
}

func (o EntityInsightItemResponseArrayOutput) ToEntityInsightItemResponseArrayOutput() EntityInsightItemResponseArrayOutput {
	return o
}

func (o EntityInsightItemResponseArrayOutput) ToEntityInsightItemResponseArrayOutputWithContext(ctx context.Context) EntityInsightItemResponseArrayOutput {
	return o
}

func (o EntityInsightItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityInsightItemResponse] {
	return pulumix.Output[[]EntityInsightItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o EntityInsightItemResponseArrayOutput) Index(i pulumi.IntInput) EntityInsightItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityInsightItemResponse {
		return vs[0].([]EntityInsightItemResponse)[vs[1].(int)]
	}).(EntityInsightItemResponseOutput)
}

// The Time interval that the query actually executed on.
type EntityInsightItemResponseQueryTimeInterval struct {
	// Insight query end time
	EndTime *string `pulumi:"endTime"`
	// Insight query start time
	StartTime *string `pulumi:"startTime"`
}

// The Time interval that the query actually executed on.
type EntityInsightItemResponseQueryTimeIntervalOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseQueryTimeIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityInsightItemResponseQueryTimeInterval)(nil)).Elem()
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToEntityInsightItemResponseQueryTimeIntervalOutput() EntityInsightItemResponseQueryTimeIntervalOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToEntityInsightItemResponseQueryTimeIntervalOutputWithContext(ctx context.Context) EntityInsightItemResponseQueryTimeIntervalOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToOutput(ctx context.Context) pulumix.Output[EntityInsightItemResponseQueryTimeInterval] {
	return pulumix.Output[EntityInsightItemResponseQueryTimeInterval]{
		OutputState: o.OutputState,
	}
}

// Insight query end time
func (o EntityInsightItemResponseQueryTimeIntervalOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponseQueryTimeInterval) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Insight query start time
func (o EntityInsightItemResponseQueryTimeIntervalOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponseQueryTimeInterval) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type EntityInsightItemResponseQueryTimeIntervalPtrOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseQueryTimeIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityInsightItemResponseQueryTimeInterval)(nil)).Elem()
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToEntityInsightItemResponseQueryTimeIntervalPtrOutput() EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToEntityInsightItemResponseQueryTimeIntervalPtrOutputWithContext(ctx context.Context) EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EntityInsightItemResponseQueryTimeInterval] {
	return pulumix.Output[*EntityInsightItemResponseQueryTimeInterval]{
		OutputState: o.OutputState,
	}
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) Elem() EntityInsightItemResponseQueryTimeIntervalOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) EntityInsightItemResponseQueryTimeInterval {
		if v != nil {
			return *v
		}
		var ret EntityInsightItemResponseQueryTimeInterval
		return ret
	}).(EntityInsightItemResponseQueryTimeIntervalOutput)
}

// Insight query end time
func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Insight query start time
func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Single entity mapping for the alert rule
type EntityMapping struct {
	// The V3 type of the mapped entity
	EntityType *string `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings []FieldMapping `pulumi:"fieldMappings"`
}

// EntityMappingInput is an input type that accepts EntityMappingArgs and EntityMappingOutput values.
// You can construct a concrete instance of `EntityMappingInput` via:
//
//	EntityMappingArgs{...}
type EntityMappingInput interface {
	pulumi.Input

	ToEntityMappingOutput() EntityMappingOutput
	ToEntityMappingOutputWithContext(context.Context) EntityMappingOutput
}

// Single entity mapping for the alert rule
type EntityMappingArgs struct {
	// The V3 type of the mapped entity
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings FieldMappingArrayInput `pulumi:"fieldMappings"`
}

func (EntityMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMapping)(nil)).Elem()
}

func (i EntityMappingArgs) ToEntityMappingOutput() EntityMappingOutput {
	return i.ToEntityMappingOutputWithContext(context.Background())
}

func (i EntityMappingArgs) ToEntityMappingOutputWithContext(ctx context.Context) EntityMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMappingOutput)
}

func (i EntityMappingArgs) ToOutput(ctx context.Context) pulumix.Output[EntityMapping] {
	return pulumix.Output[EntityMapping]{
		OutputState: i.ToEntityMappingOutputWithContext(ctx).OutputState,
	}
}

// EntityMappingArrayInput is an input type that accepts EntityMappingArray and EntityMappingArrayOutput values.
// You can construct a concrete instance of `EntityMappingArrayInput` via:
//
//	EntityMappingArray{ EntityMappingArgs{...} }
type EntityMappingArrayInput interface {
	pulumi.Input

	ToEntityMappingArrayOutput() EntityMappingArrayOutput
	ToEntityMappingArrayOutputWithContext(context.Context) EntityMappingArrayOutput
}

type EntityMappingArray []EntityMappingInput

func (EntityMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMapping)(nil)).Elem()
}

func (i EntityMappingArray) ToEntityMappingArrayOutput() EntityMappingArrayOutput {
	return i.ToEntityMappingArrayOutputWithContext(context.Background())
}

func (i EntityMappingArray) ToEntityMappingArrayOutputWithContext(ctx context.Context) EntityMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMappingArrayOutput)
}

func (i EntityMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]EntityMapping] {
	return pulumix.Output[[]EntityMapping]{
		OutputState: i.ToEntityMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Single entity mapping for the alert rule
type EntityMappingOutput struct{ *pulumi.OutputState }

func (EntityMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMapping)(nil)).Elem()
}

func (o EntityMappingOutput) ToEntityMappingOutput() EntityMappingOutput {
	return o
}

func (o EntityMappingOutput) ToEntityMappingOutputWithContext(ctx context.Context) EntityMappingOutput {
	return o
}

func (o EntityMappingOutput) ToOutput(ctx context.Context) pulumix.Output[EntityMapping] {
	return pulumix.Output[EntityMapping]{
		OutputState: o.OutputState,
	}
}

// The V3 type of the mapped entity
func (o EntityMappingOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityMapping) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// array of field mappings for the given entity mapping
func (o EntityMappingOutput) FieldMappings() FieldMappingArrayOutput {
	return o.ApplyT(func(v EntityMapping) []FieldMapping { return v.FieldMappings }).(FieldMappingArrayOutput)
}

type EntityMappingArrayOutput struct{ *pulumi.OutputState }

func (EntityMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMapping)(nil)).Elem()
}

func (o EntityMappingArrayOutput) ToEntityMappingArrayOutput() EntityMappingArrayOutput {
	return o
}

func (o EntityMappingArrayOutput) ToEntityMappingArrayOutputWithContext(ctx context.Context) EntityMappingArrayOutput {
	return o
}

func (o EntityMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityMapping] {
	return pulumix.Output[[]EntityMapping]{
		OutputState: o.OutputState,
	}
}

func (o EntityMappingArrayOutput) Index(i pulumi.IntInput) EntityMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityMapping {
		return vs[0].([]EntityMapping)[vs[1].(int)]
	}).(EntityMappingOutput)
}

// Single entity mapping for the alert rule
type EntityMappingResponse struct {
	// The V3 type of the mapped entity
	EntityType *string `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings []FieldMappingResponse `pulumi:"fieldMappings"`
}

// Single entity mapping for the alert rule
type EntityMappingResponseOutput struct{ *pulumi.OutputState }

func (EntityMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMappingResponse)(nil)).Elem()
}

func (o EntityMappingResponseOutput) ToEntityMappingResponseOutput() EntityMappingResponseOutput {
	return o
}

func (o EntityMappingResponseOutput) ToEntityMappingResponseOutputWithContext(ctx context.Context) EntityMappingResponseOutput {
	return o
}

func (o EntityMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EntityMappingResponse] {
	return pulumix.Output[EntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

// The V3 type of the mapped entity
func (o EntityMappingResponseOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityMappingResponse) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// array of field mappings for the given entity mapping
func (o EntityMappingResponseOutput) FieldMappings() FieldMappingResponseArrayOutput {
	return o.ApplyT(func(v EntityMappingResponse) []FieldMappingResponse { return v.FieldMappings }).(FieldMappingResponseArrayOutput)
}

type EntityMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (EntityMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMappingResponse)(nil)).Elem()
}

func (o EntityMappingResponseArrayOutput) ToEntityMappingResponseArrayOutput() EntityMappingResponseArrayOutput {
	return o
}

func (o EntityMappingResponseArrayOutput) ToEntityMappingResponseArrayOutputWithContext(ctx context.Context) EntityMappingResponseArrayOutput {
	return o
}

func (o EntityMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityMappingResponse] {
	return pulumix.Output[[]EntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o EntityMappingResponseArrayOutput) Index(i pulumi.IntInput) EntityMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityMappingResponse {
		return vs[0].([]EntityMappingResponse)[vs[1].(int)]
	}).(EntityMappingResponseOutput)
}

// A single field mapping of the mapped entity
type FieldMapping struct {
	// the column name to be mapped to the identifier
	ColumnName *string `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier *string `pulumi:"identifier"`
}

// FieldMappingInput is an input type that accepts FieldMappingArgs and FieldMappingOutput values.
// You can construct a concrete instance of `FieldMappingInput` via:
//
//	FieldMappingArgs{...}
type FieldMappingInput interface {
	pulumi.Input

	ToFieldMappingOutput() FieldMappingOutput
	ToFieldMappingOutputWithContext(context.Context) FieldMappingOutput
}

// A single field mapping of the mapped entity
type FieldMappingArgs struct {
	// the column name to be mapped to the identifier
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (FieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMapping)(nil)).Elem()
}

func (i FieldMappingArgs) ToFieldMappingOutput() FieldMappingOutput {
	return i.ToFieldMappingOutputWithContext(context.Background())
}

func (i FieldMappingArgs) ToFieldMappingOutputWithContext(ctx context.Context) FieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMappingOutput)
}

func (i FieldMappingArgs) ToOutput(ctx context.Context) pulumix.Output[FieldMapping] {
	return pulumix.Output[FieldMapping]{
		OutputState: i.ToFieldMappingOutputWithContext(ctx).OutputState,
	}
}

// FieldMappingArrayInput is an input type that accepts FieldMappingArray and FieldMappingArrayOutput values.
// You can construct a concrete instance of `FieldMappingArrayInput` via:
//
//	FieldMappingArray{ FieldMappingArgs{...} }
type FieldMappingArrayInput interface {
	pulumi.Input

	ToFieldMappingArrayOutput() FieldMappingArrayOutput
	ToFieldMappingArrayOutputWithContext(context.Context) FieldMappingArrayOutput
}

type FieldMappingArray []FieldMappingInput

func (FieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMapping)(nil)).Elem()
}

func (i FieldMappingArray) ToFieldMappingArrayOutput() FieldMappingArrayOutput {
	return i.ToFieldMappingArrayOutputWithContext(context.Background())
}

func (i FieldMappingArray) ToFieldMappingArrayOutputWithContext(ctx context.Context) FieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMappingArrayOutput)
}

func (i FieldMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]FieldMapping] {
	return pulumix.Output[[]FieldMapping]{
		OutputState: i.ToFieldMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// A single field mapping of the mapped entity
type FieldMappingOutput struct{ *pulumi.OutputState }

func (FieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMapping)(nil)).Elem()
}

func (o FieldMappingOutput) ToFieldMappingOutput() FieldMappingOutput {
	return o
}

func (o FieldMappingOutput) ToFieldMappingOutputWithContext(ctx context.Context) FieldMappingOutput {
	return o
}

func (o FieldMappingOutput) ToOutput(ctx context.Context) pulumix.Output[FieldMapping] {
	return pulumix.Output[FieldMapping]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the identifier
func (o FieldMappingOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMapping) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// the V3 identifier of the entity
func (o FieldMappingOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMapping) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type FieldMappingArrayOutput struct{ *pulumi.OutputState }

func (FieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMapping)(nil)).Elem()
}

func (o FieldMappingArrayOutput) ToFieldMappingArrayOutput() FieldMappingArrayOutput {
	return o
}

func (o FieldMappingArrayOutput) ToFieldMappingArrayOutputWithContext(ctx context.Context) FieldMappingArrayOutput {
	return o
}

func (o FieldMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FieldMapping] {
	return pulumix.Output[[]FieldMapping]{
		OutputState: o.OutputState,
	}
}

func (o FieldMappingArrayOutput) Index(i pulumi.IntInput) FieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMapping {
		return vs[0].([]FieldMapping)[vs[1].(int)]
	}).(FieldMappingOutput)
}

// A single field mapping of the mapped entity
type FieldMappingResponse struct {
	// the column name to be mapped to the identifier
	ColumnName *string `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier *string `pulumi:"identifier"`
}

// A single field mapping of the mapped entity
type FieldMappingResponseOutput struct{ *pulumi.OutputState }

func (FieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMappingResponse)(nil)).Elem()
}

func (o FieldMappingResponseOutput) ToFieldMappingResponseOutput() FieldMappingResponseOutput {
	return o
}

func (o FieldMappingResponseOutput) ToFieldMappingResponseOutputWithContext(ctx context.Context) FieldMappingResponseOutput {
	return o
}

func (o FieldMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FieldMappingResponse] {
	return pulumix.Output[FieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the identifier
func (o FieldMappingResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMappingResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// the V3 identifier of the entity
func (o FieldMappingResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMappingResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type FieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (FieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMappingResponse)(nil)).Elem()
}

func (o FieldMappingResponseArrayOutput) ToFieldMappingResponseArrayOutput() FieldMappingResponseArrayOutput {
	return o
}

func (o FieldMappingResponseArrayOutput) ToFieldMappingResponseArrayOutputWithContext(ctx context.Context) FieldMappingResponseArrayOutput {
	return o
}

func (o FieldMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FieldMappingResponse] {
	return pulumix.Output[[]FieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o FieldMappingResponseArrayOutput) Index(i pulumi.IntInput) FieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMappingResponse {
		return vs[0].([]FieldMappingResponse)[vs[1].(int)]
	}).(FieldMappingResponseOutput)
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPattern struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC string `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern string `pulumi:"exclusionPattern"`
}

// FusionScenarioExclusionPatternInput is an input type that accepts FusionScenarioExclusionPatternArgs and FusionScenarioExclusionPatternOutput values.
// You can construct a concrete instance of `FusionScenarioExclusionPatternInput` via:
//
//	FusionScenarioExclusionPatternArgs{...}
type FusionScenarioExclusionPatternInput interface {
	pulumi.Input

	ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput
	ToFusionScenarioExclusionPatternOutputWithContext(context.Context) FusionScenarioExclusionPatternOutput
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternArgs struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC pulumi.StringInput `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern pulumi.StringInput `pulumi:"exclusionPattern"`
}

func (FusionScenarioExclusionPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPattern)(nil)).Elem()
}

func (i FusionScenarioExclusionPatternArgs) ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput {
	return i.ToFusionScenarioExclusionPatternOutputWithContext(context.Background())
}

func (i FusionScenarioExclusionPatternArgs) ToFusionScenarioExclusionPatternOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionScenarioExclusionPatternOutput)
}

func (i FusionScenarioExclusionPatternArgs) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPattern] {
	return pulumix.Output[FusionScenarioExclusionPattern]{
		OutputState: i.ToFusionScenarioExclusionPatternOutputWithContext(ctx).OutputState,
	}
}

// FusionScenarioExclusionPatternArrayInput is an input type that accepts FusionScenarioExclusionPatternArray and FusionScenarioExclusionPatternArrayOutput values.
// You can construct a concrete instance of `FusionScenarioExclusionPatternArrayInput` via:
//
//	FusionScenarioExclusionPatternArray{ FusionScenarioExclusionPatternArgs{...} }
type FusionScenarioExclusionPatternArrayInput interface {
	pulumi.Input

	ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput
	ToFusionScenarioExclusionPatternArrayOutputWithContext(context.Context) FusionScenarioExclusionPatternArrayOutput
}

type FusionScenarioExclusionPatternArray []FusionScenarioExclusionPatternInput

func (FusionScenarioExclusionPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPattern)(nil)).Elem()
}

func (i FusionScenarioExclusionPatternArray) ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput {
	return i.ToFusionScenarioExclusionPatternArrayOutputWithContext(context.Background())
}

func (i FusionScenarioExclusionPatternArray) ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionScenarioExclusionPatternArrayOutput)
}

func (i FusionScenarioExclusionPatternArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPattern] {
	return pulumix.Output[[]FusionScenarioExclusionPattern]{
		OutputState: i.ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPattern)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternOutput) ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput {
	return o
}

func (o FusionScenarioExclusionPatternOutput) ToFusionScenarioExclusionPatternOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternOutput {
	return o
}

func (o FusionScenarioExclusionPatternOutput) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPattern] {
	return pulumix.Output[FusionScenarioExclusionPattern]{
		OutputState: o.OutputState,
	}
}

// DateTime when scenario exclusion pattern is added in UTC.
func (o FusionScenarioExclusionPatternOutput) DateAddedInUTC() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPattern) string { return v.DateAddedInUTC }).(pulumi.StringOutput)
}

// Scenario exclusion pattern.
func (o FusionScenarioExclusionPatternOutput) ExclusionPattern() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPattern) string { return v.ExclusionPattern }).(pulumi.StringOutput)
}

type FusionScenarioExclusionPatternArrayOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPattern)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternArrayOutput) ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternArrayOutput) ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPattern] {
	return pulumix.Output[[]FusionScenarioExclusionPattern]{
		OutputState: o.OutputState,
	}
}

func (o FusionScenarioExclusionPatternArrayOutput) Index(i pulumi.IntInput) FusionScenarioExclusionPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionScenarioExclusionPattern {
		return vs[0].([]FusionScenarioExclusionPattern)[vs[1].(int)]
	}).(FusionScenarioExclusionPatternOutput)
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternResponse struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC string `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern string `pulumi:"exclusionPattern"`
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternResponseOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPatternResponse)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternResponseOutput) ToFusionScenarioExclusionPatternResponseOutput() FusionScenarioExclusionPatternResponseOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseOutput) ToFusionScenarioExclusionPatternResponseOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternResponseOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPatternResponse] {
	return pulumix.Output[FusionScenarioExclusionPatternResponse]{
		OutputState: o.OutputState,
	}
}

// DateTime when scenario exclusion pattern is added in UTC.
func (o FusionScenarioExclusionPatternResponseOutput) DateAddedInUTC() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPatternResponse) string { return v.DateAddedInUTC }).(pulumi.StringOutput)
}

// Scenario exclusion pattern.
func (o FusionScenarioExclusionPatternResponseOutput) ExclusionPattern() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPatternResponse) string { return v.ExclusionPattern }).(pulumi.StringOutput)
}

type FusionScenarioExclusionPatternResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPatternResponse)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToFusionScenarioExclusionPatternResponseArrayOutput() FusionScenarioExclusionPatternResponseArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToFusionScenarioExclusionPatternResponseArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternResponseArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPatternResponse] {
	return pulumix.Output[[]FusionScenarioExclusionPatternResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) Index(i pulumi.IntInput) FusionScenarioExclusionPatternResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionScenarioExclusionPatternResponse {
		return vs[0].([]FusionScenarioExclusionPatternResponse)[vs[1].(int)]
	}).(FusionScenarioExclusionPatternResponseOutput)
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettings struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName string `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes []FusionSourceSubTypeSetting `pulumi:"sourceSubTypes"`
}

// FusionSourceSettingsInput is an input type that accepts FusionSourceSettingsArgs and FusionSourceSettingsOutput values.
// You can construct a concrete instance of `FusionSourceSettingsInput` via:
//
//	FusionSourceSettingsArgs{...}
type FusionSourceSettingsInput interface {
	pulumi.Input

	ToFusionSourceSettingsOutput() FusionSourceSettingsOutput
	ToFusionSourceSettingsOutputWithContext(context.Context) FusionSourceSettingsOutput
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsArgs struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName pulumi.StringInput `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes FusionSourceSubTypeSettingArrayInput `pulumi:"sourceSubTypes"`
}

func (FusionSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettings)(nil)).Elem()
}

func (i FusionSourceSettingsArgs) ToFusionSourceSettingsOutput() FusionSourceSettingsOutput {
	return i.ToFusionSourceSettingsOutputWithContext(context.Background())
}

func (i FusionSourceSettingsArgs) ToFusionSourceSettingsOutputWithContext(ctx context.Context) FusionSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSettingsOutput)
}

func (i FusionSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettings] {
	return pulumix.Output[FusionSourceSettings]{
		OutputState: i.ToFusionSourceSettingsOutputWithContext(ctx).OutputState,
	}
}

// FusionSourceSettingsArrayInput is an input type that accepts FusionSourceSettingsArray and FusionSourceSettingsArrayOutput values.
// You can construct a concrete instance of `FusionSourceSettingsArrayInput` via:
//
//	FusionSourceSettingsArray{ FusionSourceSettingsArgs{...} }
type FusionSourceSettingsArrayInput interface {
	pulumi.Input

	ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput
	ToFusionSourceSettingsArrayOutputWithContext(context.Context) FusionSourceSettingsArrayOutput
}

type FusionSourceSettingsArray []FusionSourceSettingsInput

func (FusionSourceSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettings)(nil)).Elem()
}

func (i FusionSourceSettingsArray) ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput {
	return i.ToFusionSourceSettingsArrayOutputWithContext(context.Background())
}

func (i FusionSourceSettingsArray) ToFusionSourceSettingsArrayOutputWithContext(ctx context.Context) FusionSourceSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSettingsArrayOutput)
}

func (i FusionSourceSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettings] {
	return pulumix.Output[[]FusionSourceSettings]{
		OutputState: i.ToFusionSourceSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettings)(nil)).Elem()
}

func (o FusionSourceSettingsOutput) ToFusionSourceSettingsOutput() FusionSourceSettingsOutput {
	return o
}

func (o FusionSourceSettingsOutput) ToFusionSourceSettingsOutputWithContext(ctx context.Context) FusionSourceSettingsOutput {
	return o
}

func (o FusionSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettings] {
	return pulumix.Output[FusionSourceSettings]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSettingsOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSettings) string { return v.SourceName }).(pulumi.StringOutput)
}

// Configuration for all source subtypes under this source signal consumed in fusion detection.
func (o FusionSourceSettingsOutput) SourceSubTypes() FusionSourceSubTypeSettingArrayOutput {
	return o.ApplyT(func(v FusionSourceSettings) []FusionSourceSubTypeSetting { return v.SourceSubTypes }).(FusionSourceSubTypeSettingArrayOutput)
}

type FusionSourceSettingsArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettings)(nil)).Elem()
}

func (o FusionSourceSettingsArrayOutput) ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput {
	return o
}

func (o FusionSourceSettingsArrayOutput) ToFusionSourceSettingsArrayOutputWithContext(ctx context.Context) FusionSourceSettingsArrayOutput {
	return o
}

func (o FusionSourceSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettings] {
	return pulumix.Output[[]FusionSourceSettings]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSettingsArrayOutput) Index(i pulumi.IntInput) FusionSourceSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSettings {
		return vs[0].([]FusionSourceSettings)[vs[1].(int)]
	}).(FusionSourceSettingsOutput)
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsResponse struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName string `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes []FusionSourceSubTypeSettingResponse `pulumi:"sourceSubTypes"`
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettingsResponse)(nil)).Elem()
}

func (o FusionSourceSettingsResponseOutput) ToFusionSourceSettingsResponseOutput() FusionSourceSettingsResponseOutput {
	return o
}

func (o FusionSourceSettingsResponseOutput) ToFusionSourceSettingsResponseOutputWithContext(ctx context.Context) FusionSourceSettingsResponseOutput {
	return o
}

func (o FusionSourceSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettingsResponse] {
	return pulumix.Output[FusionSourceSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSettingsResponseOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) string { return v.SourceName }).(pulumi.StringOutput)
}

// Configuration for all source subtypes under this source signal consumed in fusion detection.
func (o FusionSourceSettingsResponseOutput) SourceSubTypes() FusionSourceSubTypeSettingResponseArrayOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) []FusionSourceSubTypeSettingResponse { return v.SourceSubTypes }).(FusionSourceSubTypeSettingResponseArrayOutput)
}

type FusionSourceSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettingsResponse)(nil)).Elem()
}

func (o FusionSourceSettingsResponseArrayOutput) ToFusionSourceSettingsResponseArrayOutput() FusionSourceSettingsResponseArrayOutput {
	return o
}

func (o FusionSourceSettingsResponseArrayOutput) ToFusionSourceSettingsResponseArrayOutputWithContext(ctx context.Context) FusionSourceSettingsResponseArrayOutput {
	return o
}

func (o FusionSourceSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettingsResponse] {
	return pulumix.Output[[]FusionSourceSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSettingsResponseArrayOutput) Index(i pulumi.IntInput) FusionSourceSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSettingsResponse {
		return vs[0].([]FusionSourceSettingsResponse)[vs[1].(int)]
	}).(FusionSourceSettingsResponseOutput)
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSetting struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilter `pulumi:"severityFilters"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName string `pulumi:"sourceSubTypeName"`
}

// FusionSourceSubTypeSettingInput is an input type that accepts FusionSourceSubTypeSettingArgs and FusionSourceSubTypeSettingOutput values.
// You can construct a concrete instance of `FusionSourceSubTypeSettingInput` via:
//
//	FusionSourceSubTypeSettingArgs{...}
type FusionSourceSubTypeSettingInput interface {
	pulumi.Input

	ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput
	ToFusionSourceSubTypeSettingOutputWithContext(context.Context) FusionSourceSubTypeSettingOutput
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingArgs struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilterInput `pulumi:"severityFilters"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName pulumi.StringInput `pulumi:"sourceSubTypeName"`
}

func (FusionSourceSubTypeSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSetting)(nil)).Elem()
}

func (i FusionSourceSubTypeSettingArgs) ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput {
	return i.ToFusionSourceSubTypeSettingOutputWithContext(context.Background())
}

func (i FusionSourceSubTypeSettingArgs) ToFusionSourceSubTypeSettingOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSubTypeSettingOutput)
}

func (i FusionSourceSubTypeSettingArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSetting] {
	return pulumix.Output[FusionSourceSubTypeSetting]{
		OutputState: i.ToFusionSourceSubTypeSettingOutputWithContext(ctx).OutputState,
	}
}

// FusionSourceSubTypeSettingArrayInput is an input type that accepts FusionSourceSubTypeSettingArray and FusionSourceSubTypeSettingArrayOutput values.
// You can construct a concrete instance of `FusionSourceSubTypeSettingArrayInput` via:
//
//	FusionSourceSubTypeSettingArray{ FusionSourceSubTypeSettingArgs{...} }
type FusionSourceSubTypeSettingArrayInput interface {
	pulumi.Input

	ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput
	ToFusionSourceSubTypeSettingArrayOutputWithContext(context.Context) FusionSourceSubTypeSettingArrayOutput
}

type FusionSourceSubTypeSettingArray []FusionSourceSubTypeSettingInput

func (FusionSourceSubTypeSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSetting)(nil)).Elem()
}

func (i FusionSourceSubTypeSettingArray) ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput {
	return i.ToFusionSourceSubTypeSettingArrayOutputWithContext(context.Background())
}

func (i FusionSourceSubTypeSettingArray) ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSubTypeSettingArrayOutput)
}

func (i FusionSourceSubTypeSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSetting] {
	return pulumix.Output[[]FusionSourceSubTypeSetting]{
		OutputState: i.ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSetting)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingOutput) ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput {
	return o
}

func (o FusionSourceSubTypeSettingOutput) ToFusionSourceSubTypeSettingOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingOutput {
	return o
}

func (o FusionSourceSubTypeSettingOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSetting] {
	return pulumix.Output[FusionSourceSubTypeSetting]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSubTypeSettingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Severity configuration for a source subtype consumed in fusion detection.
func (o FusionSourceSubTypeSettingOutput) SeverityFilters() FusionSubTypeSeverityFilterOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) FusionSubTypeSeverityFilter { return v.SeverityFilters }).(FusionSubTypeSeverityFilterOutput)
}

// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSubTypeSettingOutput) SourceSubTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) string { return v.SourceSubTypeName }).(pulumi.StringOutput)
}

type FusionSourceSubTypeSettingArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSetting)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingArrayOutput) ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingArrayOutput) ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSetting] {
	return pulumix.Output[[]FusionSourceSubTypeSetting]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSubTypeSettingArrayOutput) Index(i pulumi.IntInput) FusionSourceSubTypeSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSubTypeSetting {
		return vs[0].([]FusionSourceSubTypeSetting)[vs[1].(int)]
	}).(FusionSourceSubTypeSettingOutput)
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingResponse struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilterResponse `pulumi:"severityFilters"`
	// The display name of source subtype under a source signal consumed in Fusion detection.
	SourceSubTypeDisplayName string `pulumi:"sourceSubTypeDisplayName"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName string `pulumi:"sourceSubTypeName"`
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingResponseOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSettingResponse)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingResponseOutput) ToFusionSourceSubTypeSettingResponseOutput() FusionSourceSubTypeSettingResponseOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseOutput) ToFusionSourceSubTypeSettingResponseOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingResponseOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSettingResponse] {
	return pulumix.Output[FusionSourceSubTypeSettingResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Severity configuration for a source subtype consumed in fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) SeverityFilters() FusionSubTypeSeverityFilterResponseOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) FusionSubTypeSeverityFilterResponse {
		return v.SeverityFilters
	}).(FusionSubTypeSeverityFilterResponseOutput)
}

// The display name of source subtype under a source signal consumed in Fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) SourceSubTypeDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) string { return v.SourceSubTypeDisplayName }).(pulumi.StringOutput)
}

// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSubTypeSettingResponseOutput) SourceSubTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) string { return v.SourceSubTypeName }).(pulumi.StringOutput)
}

type FusionSourceSubTypeSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSettingResponse)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToFusionSourceSubTypeSettingResponseArrayOutput() FusionSourceSubTypeSettingResponseArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToFusionSourceSubTypeSettingResponseArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingResponseArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSettingResponse] {
	return pulumix.Output[[]FusionSourceSubTypeSettingResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) Index(i pulumi.IntInput) FusionSourceSubTypeSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSubTypeSettingResponse {
		return vs[0].([]FusionSourceSubTypeSettingResponse)[vs[1].(int)]
	}).(FusionSourceSubTypeSettingResponseOutput)
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilter struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters []FusionSubTypeSeverityFiltersItem `pulumi:"filters"`
}

// FusionSubTypeSeverityFilterInput is an input type that accepts FusionSubTypeSeverityFilterArgs and FusionSubTypeSeverityFilterOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFilterInput` via:
//
//	FusionSubTypeSeverityFilterArgs{...}
type FusionSubTypeSeverityFilterInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput
	ToFusionSubTypeSeverityFilterOutputWithContext(context.Context) FusionSubTypeSeverityFilterOutput
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterArgs struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters FusionSubTypeSeverityFiltersItemArrayInput `pulumi:"filters"`
}

func (FusionSubTypeSeverityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilter)(nil)).Elem()
}

func (i FusionSubTypeSeverityFilterArgs) ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput {
	return i.ToFusionSubTypeSeverityFilterOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFilterArgs) ToFusionSubTypeSeverityFilterOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFilterOutput)
}

func (i FusionSubTypeSeverityFilterArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilter] {
	return pulumix.Output[FusionSubTypeSeverityFilter]{
		OutputState: i.ToFusionSubTypeSeverityFilterOutputWithContext(ctx).OutputState,
	}
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilter)(nil)).Elem()
}

func (o FusionSubTypeSeverityFilterOutput) ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput {
	return o
}

func (o FusionSubTypeSeverityFilterOutput) ToFusionSubTypeSeverityFilterOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterOutput {
	return o
}

func (o FusionSubTypeSeverityFilterOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilter] {
	return pulumix.Output[FusionSubTypeSeverityFilter]{
		OutputState: o.OutputState,
	}
}

// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFilterOutput) Filters() FusionSubTypeSeverityFiltersItemArrayOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilter) []FusionSubTypeSeverityFiltersItem { return v.Filters }).(FusionSubTypeSeverityFiltersItemArrayOutput)
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterResponse struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters []FusionSubTypeSeverityFiltersItemResponse `pulumi:"filters"`
	// Determines whether this source subtype supports severity configuration or not.
	IsSupported bool `pulumi:"isSupported"`
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterResponseOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilterResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToFusionSubTypeSeverityFilterResponseOutput() FusionSubTypeSeverityFilterResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToFusionSubTypeSeverityFilterResponseOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilterResponse] {
	return pulumix.Output[FusionSubTypeSeverityFilterResponse]{
		OutputState: o.OutputState,
	}
}

// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFilterResponseOutput) Filters() FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilterResponse) []FusionSubTypeSeverityFiltersItemResponse {
		return v.Filters
	}).(FusionSubTypeSeverityFiltersItemResponseArrayOutput)
}

// Determines whether this source subtype supports severity configuration or not.
func (o FusionSubTypeSeverityFilterResponseOutput) IsSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilterResponse) bool { return v.IsSupported }).(pulumi.BoolOutput)
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItem struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity string `pulumi:"severity"`
}

// FusionSubTypeSeverityFiltersItemInput is an input type that accepts FusionSubTypeSeverityFiltersItemArgs and FusionSubTypeSeverityFiltersItemOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFiltersItemInput` via:
//
//	FusionSubTypeSeverityFiltersItemArgs{...}
type FusionSubTypeSeverityFiltersItemInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput
	ToFusionSubTypeSeverityFiltersItemOutputWithContext(context.Context) FusionSubTypeSeverityFiltersItemOutput
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemArgs struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (FusionSubTypeSeverityFiltersItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput {
	return i.ToFusionSubTypeSeverityFiltersItemOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFiltersItemOutput)
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItem]{
		OutputState: i.ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx).OutputState,
	}
}

// FusionSubTypeSeverityFiltersItemArrayInput is an input type that accepts FusionSubTypeSeverityFiltersItemArray and FusionSubTypeSeverityFiltersItemArrayOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFiltersItemArrayInput` via:
//
//	FusionSubTypeSeverityFiltersItemArray{ FusionSubTypeSeverityFiltersItemArgs{...} }
type FusionSubTypeSeverityFiltersItemArrayInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput
	ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(context.Context) FusionSubTypeSeverityFiltersItemArrayOutput
}

type FusionSubTypeSeverityFiltersItemArray []FusionSubTypeSeverityFiltersItemInput

func (FusionSubTypeSeverityFiltersItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (i FusionSubTypeSeverityFiltersItemArray) ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput {
	return i.ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFiltersItemArray) ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFiltersItemArrayOutput)
}

func (i FusionSubTypeSeverityFiltersItemArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItem]{
		OutputState: i.ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItem]{
		OutputState: o.OutputState,
	}
}

// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItem) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The Severity for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItem) string { return v.Severity }).(pulumi.StringOutput)
}

type FusionSubTypeSeverityFiltersItemArrayOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItem]{
		OutputState: o.OutputState,
	}
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) Index(i pulumi.IntInput) FusionSubTypeSeverityFiltersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSubTypeSeverityFiltersItem {
		return vs[0].([]FusionSubTypeSeverityFiltersItem)[vs[1].(int)]
	}).(FusionSubTypeSeverityFiltersItemOutput)
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemResponse struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity string `pulumi:"severity"`
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemResponseOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItemResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToFusionSubTypeSeverityFiltersItemResponseOutput() FusionSubTypeSeverityFiltersItemResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToFusionSubTypeSeverityFiltersItemResponseOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItemResponse] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItemResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItemResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The Severity for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItemResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type FusionSubTypeSeverityFiltersItemResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItemResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToFusionSubTypeSeverityFiltersItemResponseArrayOutput() FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToFusionSubTypeSeverityFiltersItemResponseArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItemResponse] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) Index(i pulumi.IntInput) FusionSubTypeSeverityFiltersItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSubTypeSeverityFiltersItemResponse {
		return vs[0].([]FusionSubTypeSeverityFiltersItemResponse)[vs[1].(int)]
	}).(FusionSubTypeSeverityFiltersItemResponseOutput)
}

// GetInsights Query Errors.
type GetInsightsErrorResponse struct {
	// the error message
	ErrorMessage string `pulumi:"errorMessage"`
	// the query kind
	Kind string `pulumi:"kind"`
	// the query id
	QueryId *string `pulumi:"queryId"`
}

// GetInsights Query Errors.
type GetInsightsErrorResponseOutput struct{ *pulumi.OutputState }

func (GetInsightsErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInsightsErrorResponse)(nil)).Elem()
}

func (o GetInsightsErrorResponseOutput) ToGetInsightsErrorResponseOutput() GetInsightsErrorResponseOutput {
	return o
}

func (o GetInsightsErrorResponseOutput) ToGetInsightsErrorResponseOutputWithContext(ctx context.Context) GetInsightsErrorResponseOutput {
	return o
}

func (o GetInsightsErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetInsightsErrorResponse] {
	return pulumix.Output[GetInsightsErrorResponse]{
		OutputState: o.OutputState,
	}
}

// the error message
func (o GetInsightsErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetInsightsErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// the query kind
func (o GetInsightsErrorResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetInsightsErrorResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// the query id
func (o GetInsightsErrorResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInsightsErrorResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

type GetInsightsErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (GetInsightsErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInsightsErrorResponse)(nil)).Elem()
}

func (o GetInsightsErrorResponseArrayOutput) ToGetInsightsErrorResponseArrayOutput() GetInsightsErrorResponseArrayOutput {
	return o
}

func (o GetInsightsErrorResponseArrayOutput) ToGetInsightsErrorResponseArrayOutputWithContext(ctx context.Context) GetInsightsErrorResponseArrayOutput {
	return o
}

func (o GetInsightsErrorResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInsightsErrorResponse] {
	return pulumix.Output[[]GetInsightsErrorResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetInsightsErrorResponseArrayOutput) Index(i pulumi.IntInput) GetInsightsErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInsightsErrorResponse {
		return vs[0].([]GetInsightsErrorResponse)[vs[1].(int)]
	}).(GetInsightsErrorResponseOutput)
}

// Get Insights result metadata.
type GetInsightsResultsMetadataResponse struct {
	// information about the failed queries
	Errors []GetInsightsErrorResponse `pulumi:"errors"`
	// the total items found for the insights request
	TotalCount int `pulumi:"totalCount"`
}

// Get Insights result metadata.
type GetInsightsResultsMetadataResponseOutput struct{ *pulumi.OutputState }

func (GetInsightsResultsMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInsightsResultsMetadataResponse)(nil)).Elem()
}

func (o GetInsightsResultsMetadataResponseOutput) ToGetInsightsResultsMetadataResponseOutput() GetInsightsResultsMetadataResponseOutput {
	return o
}

func (o GetInsightsResultsMetadataResponseOutput) ToGetInsightsResultsMetadataResponseOutputWithContext(ctx context.Context) GetInsightsResultsMetadataResponseOutput {
	return o
}

func (o GetInsightsResultsMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetInsightsResultsMetadataResponse] {
	return pulumix.Output[GetInsightsResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// information about the failed queries
func (o GetInsightsResultsMetadataResponseOutput) Errors() GetInsightsErrorResponseArrayOutput {
	return o.ApplyT(func(v GetInsightsResultsMetadataResponse) []GetInsightsErrorResponse { return v.Errors }).(GetInsightsErrorResponseArrayOutput)
}

// the total items found for the insights request
func (o GetInsightsResultsMetadataResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInsightsResultsMetadataResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type GetInsightsResultsMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (GetInsightsResultsMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetInsightsResultsMetadataResponse)(nil)).Elem()
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToGetInsightsResultsMetadataResponsePtrOutput() GetInsightsResultsMetadataResponsePtrOutput {
	return o
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToGetInsightsResultsMetadataResponsePtrOutputWithContext(ctx context.Context) GetInsightsResultsMetadataResponsePtrOutput {
	return o
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetInsightsResultsMetadataResponse] {
	return pulumix.Output[*GetInsightsResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetInsightsResultsMetadataResponsePtrOutput) Elem() GetInsightsResultsMetadataResponseOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) GetInsightsResultsMetadataResponse {
		if v != nil {
			return *v
		}
		var ret GetInsightsResultsMetadataResponse
		return ret
	}).(GetInsightsResultsMetadataResponseOutput)
}

// information about the failed queries
func (o GetInsightsResultsMetadataResponsePtrOutput) Errors() GetInsightsErrorResponseArrayOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) []GetInsightsErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(GetInsightsErrorResponseArrayOutput)
}

// the total items found for the insights request
func (o GetInsightsResultsMetadataResponsePtrOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TotalCount
	}).(pulumi.IntPtrOutput)
}

// Grouping configuration property bag.
type GroupingConfiguration struct {
	// Grouping enabled
	Enabled bool `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails []string `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails []string `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities []string `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration string `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod string `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident bool `pulumi:"reopenClosedIncident"`
}

// GroupingConfigurationInput is an input type that accepts GroupingConfigurationArgs and GroupingConfigurationOutput values.
// You can construct a concrete instance of `GroupingConfigurationInput` via:
//
//	GroupingConfigurationArgs{...}
type GroupingConfigurationInput interface {
	pulumi.Input

	ToGroupingConfigurationOutput() GroupingConfigurationOutput
	ToGroupingConfigurationOutputWithContext(context.Context) GroupingConfigurationOutput
}

// Grouping configuration property bag.
type GroupingConfigurationArgs struct {
	// Grouping enabled
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails pulumi.StringArrayInput `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails pulumi.StringArrayInput `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities pulumi.StringArrayInput `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration pulumi.StringInput `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod pulumi.StringInput `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident pulumi.BoolInput `pulumi:"reopenClosedIncident"`
}

func (GroupingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfiguration)(nil)).Elem()
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return i.ToGroupingConfigurationOutputWithContext(context.Background())
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationOutput)
}

func (i GroupingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GroupingConfiguration] {
	return pulumix.Output[GroupingConfiguration]{
		OutputState: i.ToGroupingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return i.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationOutput).ToGroupingConfigurationPtrOutputWithContext(ctx)
}

// GroupingConfigurationPtrInput is an input type that accepts GroupingConfigurationArgs, GroupingConfigurationPtr and GroupingConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupingConfigurationPtrInput` via:
//
//	        GroupingConfigurationArgs{...}
//
//	or:
//
//	        nil
type GroupingConfigurationPtrInput interface {
	pulumi.Input

	ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput
	ToGroupingConfigurationPtrOutputWithContext(context.Context) GroupingConfigurationPtrOutput
}

type groupingConfigurationPtrType GroupingConfigurationArgs

func GroupingConfigurationPtr(v *GroupingConfigurationArgs) GroupingConfigurationPtrInput {
	return (*groupingConfigurationPtrType)(v)
}

func (*groupingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (i *groupingConfigurationPtrType) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return i.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupingConfigurationPtrType) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationPtrOutput)
}

func (i *groupingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfiguration] {
	return pulumix.Output[*GroupingConfiguration]{
		OutputState: i.ToGroupingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Grouping configuration property bag.
type GroupingConfigurationOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfiguration)(nil)).Elem()
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return o
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return o
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return o.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupingConfiguration) *GroupingConfiguration {
		return &v
	}).(GroupingConfigurationPtrOutput)
}

func (o GroupingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GroupingConfiguration] {
	return pulumix.Output[GroupingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Grouping enabled
func (o GroupingConfigurationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfiguration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByAlertDetails }).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByCustomDetails }).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByEntities }).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationOutput) LookbackDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfiguration) string { return v.LookbackDuration }).(pulumi.StringOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationOutput) MatchingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfiguration) string { return v.MatchingMethod }).(pulumi.StringOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationOutput) ReopenClosedIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfiguration) bool { return v.ReopenClosedIncident }).(pulumi.BoolOutput)
}

type GroupingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (o GroupingConfigurationPtrOutput) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return o
}

func (o GroupingConfigurationPtrOutput) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return o
}

func (o GroupingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfiguration] {
	return pulumix.Output[*GroupingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GroupingConfigurationPtrOutput) Elem() GroupingConfigurationOutput {
	return o.ApplyT(func(v *GroupingConfiguration) GroupingConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupingConfiguration
		return ret
	}).(GroupingConfigurationOutput)
}

// Grouping enabled
func (o GroupingConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationPtrOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByAlertDetails
	}).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationPtrOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByCustomDetails
	}).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationPtrOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByEntities
	}).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationPtrOutput) LookbackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LookbackDuration
	}).(pulumi.StringPtrOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationPtrOutput) MatchingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.MatchingMethod
	}).(pulumi.StringPtrOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationPtrOutput) ReopenClosedIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.ReopenClosedIncident
	}).(pulumi.BoolPtrOutput)
}

// Grouping configuration property bag.
type GroupingConfigurationResponse struct {
	// Grouping enabled
	Enabled bool `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails []string `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails []string `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities []string `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration string `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod string `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident bool `pulumi:"reopenClosedIncident"`
}

// Grouping configuration property bag.
type GroupingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfigurationResponse)(nil)).Elem()
}

func (o GroupingConfigurationResponseOutput) ToGroupingConfigurationResponseOutput() GroupingConfigurationResponseOutput {
	return o
}

func (o GroupingConfigurationResponseOutput) ToGroupingConfigurationResponseOutputWithContext(ctx context.Context) GroupingConfigurationResponseOutput {
	return o
}

func (o GroupingConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GroupingConfigurationResponse] {
	return pulumix.Output[GroupingConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Grouping enabled
func (o GroupingConfigurationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationResponseOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByAlertDetails }).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationResponseOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByCustomDetails }).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationResponseOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByEntities }).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationResponseOutput) LookbackDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) string { return v.LookbackDuration }).(pulumi.StringOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationResponseOutput) MatchingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) string { return v.MatchingMethod }).(pulumi.StringOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationResponseOutput) ReopenClosedIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) bool { return v.ReopenClosedIncident }).(pulumi.BoolOutput)
}

type GroupingConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfigurationResponse)(nil)).Elem()
}

func (o GroupingConfigurationResponsePtrOutput) ToGroupingConfigurationResponsePtrOutput() GroupingConfigurationResponsePtrOutput {
	return o
}

func (o GroupingConfigurationResponsePtrOutput) ToGroupingConfigurationResponsePtrOutputWithContext(ctx context.Context) GroupingConfigurationResponsePtrOutput {
	return o
}

func (o GroupingConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfigurationResponse] {
	return pulumix.Output[*GroupingConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o GroupingConfigurationResponsePtrOutput) Elem() GroupingConfigurationResponseOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) GroupingConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret GroupingConfigurationResponse
		return ret
	}).(GroupingConfigurationResponseOutput)
}

// Grouping enabled
func (o GroupingConfigurationResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationResponsePtrOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByAlertDetails
	}).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationResponsePtrOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByCustomDetails
	}).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationResponsePtrOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByEntities
	}).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationResponsePtrOutput) LookbackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LookbackDuration
	}).(pulumi.StringPtrOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationResponsePtrOutput) MatchingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MatchingMethod
	}).(pulumi.StringPtrOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationResponsePtrOutput) ReopenClosedIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ReopenClosedIncident
	}).(pulumi.BoolPtrOutput)
}

// Incident Configuration property bag.
type IncidentConfiguration struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident bool `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration *GroupingConfiguration `pulumi:"groupingConfiguration"`
}

// IncidentConfigurationInput is an input type that accepts IncidentConfigurationArgs and IncidentConfigurationOutput values.
// You can construct a concrete instance of `IncidentConfigurationInput` via:
//
//	IncidentConfigurationArgs{...}
type IncidentConfigurationInput interface {
	pulumi.Input

	ToIncidentConfigurationOutput() IncidentConfigurationOutput
	ToIncidentConfigurationOutputWithContext(context.Context) IncidentConfigurationOutput
}

// Incident Configuration property bag.
type IncidentConfigurationArgs struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident pulumi.BoolInput `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration GroupingConfigurationPtrInput `pulumi:"groupingConfiguration"`
}

func (IncidentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfiguration)(nil)).Elem()
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationOutput() IncidentConfigurationOutput {
	return i.ToIncidentConfigurationOutputWithContext(context.Background())
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationOutputWithContext(ctx context.Context) IncidentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationOutput)
}

func (i IncidentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[IncidentConfiguration] {
	return pulumix.Output[IncidentConfiguration]{
		OutputState: i.ToIncidentConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return i.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationOutput).ToIncidentConfigurationPtrOutputWithContext(ctx)
}

// IncidentConfigurationPtrInput is an input type that accepts IncidentConfigurationArgs, IncidentConfigurationPtr and IncidentConfigurationPtrOutput values.
// You can construct a concrete instance of `IncidentConfigurationPtrInput` via:
//
//	        IncidentConfigurationArgs{...}
//
//	or:
//
//	        nil
type IncidentConfigurationPtrInput interface {
	pulumi.Input

	ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput
	ToIncidentConfigurationPtrOutputWithContext(context.Context) IncidentConfigurationPtrOutput
}

type incidentConfigurationPtrType IncidentConfigurationArgs

func IncidentConfigurationPtr(v *IncidentConfigurationArgs) IncidentConfigurationPtrInput {
	return (*incidentConfigurationPtrType)(v)
}

func (*incidentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfiguration)(nil)).Elem()
}

func (i *incidentConfigurationPtrType) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return i.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (i *incidentConfigurationPtrType) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationPtrOutput)
}

func (i *incidentConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfiguration] {
	return pulumix.Output[*IncidentConfiguration]{
		OutputState: i.ToIncidentConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Incident Configuration property bag.
type IncidentConfigurationOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfiguration)(nil)).Elem()
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationOutput() IncidentConfigurationOutput {
	return o
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationOutputWithContext(ctx context.Context) IncidentConfigurationOutput {
	return o
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return o.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IncidentConfiguration) *IncidentConfiguration {
		return &v
	}).(IncidentConfigurationPtrOutput)
}

func (o IncidentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentConfiguration] {
	return pulumix.Output[IncidentConfiguration]{
		OutputState: o.OutputState,
	}
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationOutput) CreateIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v IncidentConfiguration) bool { return v.CreateIncident }).(pulumi.BoolOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationOutput) GroupingConfiguration() GroupingConfigurationPtrOutput {
	return o.ApplyT(func(v IncidentConfiguration) *GroupingConfiguration { return v.GroupingConfiguration }).(GroupingConfigurationPtrOutput)
}

type IncidentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfiguration)(nil)).Elem()
}

func (o IncidentConfigurationPtrOutput) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return o
}

func (o IncidentConfigurationPtrOutput) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return o
}

func (o IncidentConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfiguration] {
	return pulumix.Output[*IncidentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o IncidentConfigurationPtrOutput) Elem() IncidentConfigurationOutput {
	return o.ApplyT(func(v *IncidentConfiguration) IncidentConfiguration {
		if v != nil {
			return *v
		}
		var ret IncidentConfiguration
		return ret
	}).(IncidentConfigurationOutput)
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationPtrOutput) CreateIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IncidentConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateIncident
	}).(pulumi.BoolPtrOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationPtrOutput) GroupingConfiguration() GroupingConfigurationPtrOutput {
	return o.ApplyT(func(v *IncidentConfiguration) *GroupingConfiguration {
		if v == nil {
			return nil
		}
		return v.GroupingConfiguration
	}).(GroupingConfigurationPtrOutput)
}

// Incident Configuration property bag.
type IncidentConfigurationResponse struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident bool `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration *GroupingConfigurationResponse `pulumi:"groupingConfiguration"`
}

// Incident Configuration property bag.
type IncidentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfigurationResponse)(nil)).Elem()
}

func (o IncidentConfigurationResponseOutput) ToIncidentConfigurationResponseOutput() IncidentConfigurationResponseOutput {
	return o
}

func (o IncidentConfigurationResponseOutput) ToIncidentConfigurationResponseOutputWithContext(ctx context.Context) IncidentConfigurationResponseOutput {
	return o
}

func (o IncidentConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentConfigurationResponse] {
	return pulumix.Output[IncidentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationResponseOutput) CreateIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v IncidentConfigurationResponse) bool { return v.CreateIncident }).(pulumi.BoolOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationResponseOutput) GroupingConfiguration() GroupingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v IncidentConfigurationResponse) *GroupingConfigurationResponse { return v.GroupingConfiguration }).(GroupingConfigurationResponsePtrOutput)
}

type IncidentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfigurationResponse)(nil)).Elem()
}

func (o IncidentConfigurationResponsePtrOutput) ToIncidentConfigurationResponsePtrOutput() IncidentConfigurationResponsePtrOutput {
	return o
}

func (o IncidentConfigurationResponsePtrOutput) ToIncidentConfigurationResponsePtrOutputWithContext(ctx context.Context) IncidentConfigurationResponsePtrOutput {
	return o
}

func (o IncidentConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfigurationResponse] {
	return pulumix.Output[*IncidentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o IncidentConfigurationResponsePtrOutput) Elem() IncidentConfigurationResponseOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) IncidentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret IncidentConfigurationResponse
		return ret
	}).(IncidentConfigurationResponseOutput)
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationResponsePtrOutput) CreateIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateIncident
	}).(pulumi.BoolPtrOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationResponsePtrOutput) GroupingConfiguration() GroupingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) *GroupingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.GroupingConfiguration
	}).(GroupingConfigurationResponsePtrOutput)
}

// Query results for table insights query.
type InsightsTableResultResponse struct {
	// Columns Metadata of the table
	Columns []InsightsTableResultResponseColumns `pulumi:"columns"`
	// Rows data of the table
	Rows [][]string `pulumi:"rows"`
}

// Query results for table insights query.
type InsightsTableResultResponseOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponseOutput) ToInsightsTableResultResponseOutput() InsightsTableResultResponseOutput {
	return o
}

func (o InsightsTableResultResponseOutput) ToInsightsTableResultResponseOutputWithContext(ctx context.Context) InsightsTableResultResponseOutput {
	return o
}

func (o InsightsTableResultResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsTableResultResponse] {
	return pulumix.Output[InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

// Columns Metadata of the table
func (o InsightsTableResultResponseOutput) Columns() InsightsTableResultResponseColumnsArrayOutput {
	return o.ApplyT(func(v InsightsTableResultResponse) []InsightsTableResultResponseColumns { return v.Columns }).(InsightsTableResultResponseColumnsArrayOutput)
}

// Rows data of the table
func (o InsightsTableResultResponseOutput) Rows() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v InsightsTableResultResponse) [][]string { return v.Rows }).(pulumi.StringArrayArrayOutput)
}

type InsightsTableResultResponsePtrOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponsePtrOutput) ToInsightsTableResultResponsePtrOutput() InsightsTableResultResponsePtrOutput {
	return o
}

func (o InsightsTableResultResponsePtrOutput) ToInsightsTableResultResponsePtrOutputWithContext(ctx context.Context) InsightsTableResultResponsePtrOutput {
	return o
}

func (o InsightsTableResultResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InsightsTableResultResponse] {
	return pulumix.Output[*InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponsePtrOutput) Elem() InsightsTableResultResponseOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) InsightsTableResultResponse {
		if v != nil {
			return *v
		}
		var ret InsightsTableResultResponse
		return ret
	}).(InsightsTableResultResponseOutput)
}

// Columns Metadata of the table
func (o InsightsTableResultResponsePtrOutput) Columns() InsightsTableResultResponseColumnsArrayOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) []InsightsTableResultResponseColumns {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(InsightsTableResultResponseColumnsArrayOutput)
}

// Rows data of the table
func (o InsightsTableResultResponsePtrOutput) Rows() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) [][]string {
		if v == nil {
			return nil
		}
		return v.Rows
	}).(pulumi.StringArrayArrayOutput)
}

type InsightsTableResultResponseArrayOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponseArrayOutput) ToInsightsTableResultResponseArrayOutput() InsightsTableResultResponseArrayOutput {
	return o
}

func (o InsightsTableResultResponseArrayOutput) ToInsightsTableResultResponseArrayOutputWithContext(ctx context.Context) InsightsTableResultResponseArrayOutput {
	return o
}

func (o InsightsTableResultResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InsightsTableResultResponse] {
	return pulumix.Output[[]InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponseArrayOutput) Index(i pulumi.IntInput) InsightsTableResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InsightsTableResultResponse {
		return vs[0].([]InsightsTableResultResponse)[vs[1].(int)]
	}).(InsightsTableResultResponseOutput)
}

type InsightsTableResultResponseColumns struct {
	// the name of the colum
	Name *string `pulumi:"name"`
	// the type of the colum
	Type *string `pulumi:"type"`
}

type InsightsTableResultResponseColumnsOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsTableResultResponseColumns)(nil)).Elem()
}

func (o InsightsTableResultResponseColumnsOutput) ToInsightsTableResultResponseColumnsOutput() InsightsTableResultResponseColumnsOutput {
	return o
}

func (o InsightsTableResultResponseColumnsOutput) ToInsightsTableResultResponseColumnsOutputWithContext(ctx context.Context) InsightsTableResultResponseColumnsOutput {
	return o
}

func (o InsightsTableResultResponseColumnsOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsTableResultResponseColumns] {
	return pulumix.Output[InsightsTableResultResponseColumns]{
		OutputState: o.OutputState,
	}
}

// the name of the colum
func (o InsightsTableResultResponseColumnsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InsightsTableResultResponseColumns) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// the type of the colum
func (o InsightsTableResultResponseColumnsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InsightsTableResultResponseColumns) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InsightsTableResultResponseColumnsArrayOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseColumnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InsightsTableResultResponseColumns)(nil)).Elem()
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToInsightsTableResultResponseColumnsArrayOutput() InsightsTableResultResponseColumnsArrayOutput {
	return o
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToInsightsTableResultResponseColumnsArrayOutputWithContext(ctx context.Context) InsightsTableResultResponseColumnsArrayOutput {
	return o
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InsightsTableResultResponseColumns] {
	return pulumix.Output[[]InsightsTableResultResponseColumns]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponseColumnsArrayOutput) Index(i pulumi.IntInput) InsightsTableResultResponseColumnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InsightsTableResultResponseColumns {
		return vs[0].([]InsightsTableResultResponseColumns)[vs[1].(int)]
	}).(InsightsTableResultResponseColumnsOutput)
}

// Represents a repository.
type RepoResponse struct {
	// Array of branches.
	Branches []string `pulumi:"branches"`
	// The name of the repository.
	FullName *string `pulumi:"fullName"`
	// The url to access the repository.
	Url *string `pulumi:"url"`
}

// Represents a repository.
type RepoResponseOutput struct{ *pulumi.OutputState }

func (RepoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoResponse)(nil)).Elem()
}

func (o RepoResponseOutput) ToRepoResponseOutput() RepoResponseOutput {
	return o
}

func (o RepoResponseOutput) ToRepoResponseOutputWithContext(ctx context.Context) RepoResponseOutput {
	return o
}

func (o RepoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RepoResponse] {
	return pulumix.Output[RepoResponse]{
		OutputState: o.OutputState,
	}
}

// Array of branches.
func (o RepoResponseOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepoResponse) []string { return v.Branches }).(pulumi.StringArrayOutput)
}

// The name of the repository.
func (o RepoResponseOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoResponse) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

// The url to access the repository.
func (o RepoResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RepoResponseArrayOutput struct{ *pulumi.OutputState }

func (RepoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepoResponse)(nil)).Elem()
}

func (o RepoResponseArrayOutput) ToRepoResponseArrayOutput() RepoResponseArrayOutput {
	return o
}

func (o RepoResponseArrayOutput) ToRepoResponseArrayOutputWithContext(ctx context.Context) RepoResponseArrayOutput {
	return o
}

func (o RepoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepoResponse] {
	return pulumix.Output[[]RepoResponse]{
		OutputState: o.OutputState,
	}
}

func (o RepoResponseArrayOutput) Index(i pulumi.IntInput) RepoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepoResponse {
		return vs[0].([]RepoResponse)[vs[1].(int)]
	}).(RepoResponseOutput)
}

// Represents security alert timeline item.
type SecurityAlertTimelineItemResponse struct {
	// The name of the alert type.
	AlertType string `pulumi:"alertType"`
	// The alert azure resource id.
	AzureResourceId string `pulumi:"azureResourceId"`
	// The alert description.
	Description *string `pulumi:"description"`
	// The alert name.
	DisplayName string `pulumi:"displayName"`
	// The alert end time.
	EndTimeUtc string `pulumi:"endTimeUtc"`
	// The entity query kind
	// Expected value is 'SecurityAlert'.
	Kind string `pulumi:"kind"`
	// The alert product name.
	ProductName *string `pulumi:"productName"`
	// The alert severity.
	Severity string `pulumi:"severity"`
	// The alert start time.
	StartTimeUtc string `pulumi:"startTimeUtc"`
	// The alert generated time.
	TimeGenerated string `pulumi:"timeGenerated"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// timeline aggregation information per kind
type TimelineAggregationResponse struct {
	// the total items found for a kind
	Count int `pulumi:"count"`
	// the query kind
	Kind string `pulumi:"kind"`
}

// timeline aggregation information per kind
type TimelineAggregationResponseOutput struct{ *pulumi.OutputState }

func (TimelineAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineAggregationResponse)(nil)).Elem()
}

func (o TimelineAggregationResponseOutput) ToTimelineAggregationResponseOutput() TimelineAggregationResponseOutput {
	return o
}

func (o TimelineAggregationResponseOutput) ToTimelineAggregationResponseOutputWithContext(ctx context.Context) TimelineAggregationResponseOutput {
	return o
}

func (o TimelineAggregationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineAggregationResponse] {
	return pulumix.Output[TimelineAggregationResponse]{
		OutputState: o.OutputState,
	}
}

// the total items found for a kind
func (o TimelineAggregationResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v TimelineAggregationResponse) int { return v.Count }).(pulumi.IntOutput)
}

// the query kind
func (o TimelineAggregationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineAggregationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type TimelineAggregationResponseArrayOutput struct{ *pulumi.OutputState }

func (TimelineAggregationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimelineAggregationResponse)(nil)).Elem()
}

func (o TimelineAggregationResponseArrayOutput) ToTimelineAggregationResponseArrayOutput() TimelineAggregationResponseArrayOutput {
	return o
}

func (o TimelineAggregationResponseArrayOutput) ToTimelineAggregationResponseArrayOutputWithContext(ctx context.Context) TimelineAggregationResponseArrayOutput {
	return o
}

func (o TimelineAggregationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TimelineAggregationResponse] {
	return pulumix.Output[[]TimelineAggregationResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineAggregationResponseArrayOutput) Index(i pulumi.IntInput) TimelineAggregationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimelineAggregationResponse {
		return vs[0].([]TimelineAggregationResponse)[vs[1].(int)]
	}).(TimelineAggregationResponseOutput)
}

// Timeline Query Errors.
type TimelineErrorResponse struct {
	// the error message
	ErrorMessage string `pulumi:"errorMessage"`
	// the query kind
	Kind string `pulumi:"kind"`
	// the query id
	QueryId *string `pulumi:"queryId"`
}

// Timeline Query Errors.
type TimelineErrorResponseOutput struct{ *pulumi.OutputState }

func (TimelineErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineErrorResponse)(nil)).Elem()
}

func (o TimelineErrorResponseOutput) ToTimelineErrorResponseOutput() TimelineErrorResponseOutput {
	return o
}

func (o TimelineErrorResponseOutput) ToTimelineErrorResponseOutputWithContext(ctx context.Context) TimelineErrorResponseOutput {
	return o
}

func (o TimelineErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineErrorResponse] {
	return pulumix.Output[TimelineErrorResponse]{
		OutputState: o.OutputState,
	}
}

// the error message
func (o TimelineErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// the query kind
func (o TimelineErrorResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineErrorResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// the query id
func (o TimelineErrorResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimelineErrorResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

type TimelineErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (TimelineErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimelineErrorResponse)(nil)).Elem()
}

func (o TimelineErrorResponseArrayOutput) ToTimelineErrorResponseArrayOutput() TimelineErrorResponseArrayOutput {
	return o
}

func (o TimelineErrorResponseArrayOutput) ToTimelineErrorResponseArrayOutputWithContext(ctx context.Context) TimelineErrorResponseArrayOutput {
	return o
}

func (o TimelineErrorResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TimelineErrorResponse] {
	return pulumix.Output[[]TimelineErrorResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineErrorResponseArrayOutput) Index(i pulumi.IntInput) TimelineErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimelineErrorResponse {
		return vs[0].([]TimelineErrorResponse)[vs[1].(int)]
	}).(TimelineErrorResponseOutput)
}

// Expansion result metadata.
type TimelineResultsMetadataResponse struct {
	// timeline aggregation per kind
	Aggregations []TimelineAggregationResponse `pulumi:"aggregations"`
	// information about the failure queries
	Errors []TimelineErrorResponse `pulumi:"errors"`
	// the total items found for the timeline request
	TotalCount int `pulumi:"totalCount"`
}

// Expansion result metadata.
type TimelineResultsMetadataResponseOutput struct{ *pulumi.OutputState }

func (TimelineResultsMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineResultsMetadataResponse)(nil)).Elem()
}

func (o TimelineResultsMetadataResponseOutput) ToTimelineResultsMetadataResponseOutput() TimelineResultsMetadataResponseOutput {
	return o
}

func (o TimelineResultsMetadataResponseOutput) ToTimelineResultsMetadataResponseOutputWithContext(ctx context.Context) TimelineResultsMetadataResponseOutput {
	return o
}

func (o TimelineResultsMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineResultsMetadataResponse] {
	return pulumix.Output[TimelineResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// timeline aggregation per kind
func (o TimelineResultsMetadataResponseOutput) Aggregations() TimelineAggregationResponseArrayOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) []TimelineAggregationResponse { return v.Aggregations }).(TimelineAggregationResponseArrayOutput)
}

// information about the failure queries
func (o TimelineResultsMetadataResponseOutput) Errors() TimelineErrorResponseArrayOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) []TimelineErrorResponse { return v.Errors }).(TimelineErrorResponseArrayOutput)
}

// the total items found for the timeline request
func (o TimelineResultsMetadataResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type TimelineResultsMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (TimelineResultsMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimelineResultsMetadataResponse)(nil)).Elem()
}

func (o TimelineResultsMetadataResponsePtrOutput) ToTimelineResultsMetadataResponsePtrOutput() TimelineResultsMetadataResponsePtrOutput {
	return o
}

func (o TimelineResultsMetadataResponsePtrOutput) ToTimelineResultsMetadataResponsePtrOutputWithContext(ctx context.Context) TimelineResultsMetadataResponsePtrOutput {
	return o
}

func (o TimelineResultsMetadataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TimelineResultsMetadataResponse] {
	return pulumix.Output[*TimelineResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineResultsMetadataResponsePtrOutput) Elem() TimelineResultsMetadataResponseOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) TimelineResultsMetadataResponse {
		if v != nil {
			return *v
		}
		var ret TimelineResultsMetadataResponse
		return ret
	}).(TimelineResultsMetadataResponseOutput)
}

// timeline aggregation per kind
func (o TimelineResultsMetadataResponsePtrOutput) Aggregations() TimelineAggregationResponseArrayOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) []TimelineAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregations
	}).(TimelineAggregationResponseArrayOutput)
}

// information about the failure queries
func (o TimelineResultsMetadataResponsePtrOutput) Errors() TimelineErrorResponseArrayOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) []TimelineErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(TimelineErrorResponseArrayOutput)
}

// the total items found for the timeline request
func (o TimelineResultsMetadataResponsePtrOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TotalCount
	}).(pulumi.IntPtrOutput)
}

// User information that made some action
type UserInfoResponse struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// User information that made some action
type WatchlistUserInfo struct {
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// WatchlistUserInfoInput is an input type that accepts WatchlistUserInfoArgs and WatchlistUserInfoOutput values.
// You can construct a concrete instance of `WatchlistUserInfoInput` via:
//
//	WatchlistUserInfoArgs{...}
type WatchlistUserInfoInput interface {
	pulumi.Input

	ToWatchlistUserInfoOutput() WatchlistUserInfoOutput
	ToWatchlistUserInfoOutputWithContext(context.Context) WatchlistUserInfoOutput
}

// User information that made some action
type WatchlistUserInfoArgs struct {
	// The object id of the user.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
}

func (WatchlistUserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfo)(nil)).Elem()
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoOutput() WatchlistUserInfoOutput {
	return i.ToWatchlistUserInfoOutputWithContext(context.Background())
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoOutputWithContext(ctx context.Context) WatchlistUserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoOutput)
}

func (i WatchlistUserInfoArgs) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfo] {
	return pulumix.Output[WatchlistUserInfo]{
		OutputState: i.ToWatchlistUserInfoOutputWithContext(ctx).OutputState,
	}
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return i.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoOutput).ToWatchlistUserInfoPtrOutputWithContext(ctx)
}

// WatchlistUserInfoPtrInput is an input type that accepts WatchlistUserInfoArgs, WatchlistUserInfoPtr and WatchlistUserInfoPtrOutput values.
// You can construct a concrete instance of `WatchlistUserInfoPtrInput` via:
//
//	        WatchlistUserInfoArgs{...}
//
//	or:
//
//	        nil
type WatchlistUserInfoPtrInput interface {
	pulumi.Input

	ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput
	ToWatchlistUserInfoPtrOutputWithContext(context.Context) WatchlistUserInfoPtrOutput
}

type watchlistUserInfoPtrType WatchlistUserInfoArgs

func WatchlistUserInfoPtr(v *WatchlistUserInfoArgs) WatchlistUserInfoPtrInput {
	return (*watchlistUserInfoPtrType)(v)
}

func (*watchlistUserInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfo)(nil)).Elem()
}

func (i *watchlistUserInfoPtrType) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return i.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (i *watchlistUserInfoPtrType) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoPtrOutput)
}

func (i *watchlistUserInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfo] {
	return pulumix.Output[*WatchlistUserInfo]{
		OutputState: i.ToWatchlistUserInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// User information that made some action
type WatchlistUserInfoOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfo)(nil)).Elem()
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoOutput() WatchlistUserInfoOutput {
	return o
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoOutputWithContext(ctx context.Context) WatchlistUserInfoOutput {
	return o
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return o.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WatchlistUserInfo) *WatchlistUserInfo {
		return &v
	}).(WatchlistUserInfoPtrOutput)
}

func (o WatchlistUserInfoOutput) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfo] {
	return pulumix.Output[WatchlistUserInfo]{
		OutputState: o.OutputState,
	}
}

// The object id of the user.
func (o WatchlistUserInfoOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WatchlistUserInfo) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type WatchlistUserInfoPtrOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfo)(nil)).Elem()
}

func (o WatchlistUserInfoPtrOutput) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return o
}

func (o WatchlistUserInfoPtrOutput) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return o
}

func (o WatchlistUserInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfo] {
	return pulumix.Output[*WatchlistUserInfo]{
		OutputState: o.OutputState,
	}
}

func (o WatchlistUserInfoPtrOutput) Elem() WatchlistUserInfoOutput {
	return o.ApplyT(func(v *WatchlistUserInfo) WatchlistUserInfo {
		if v != nil {
			return *v
		}
		var ret WatchlistUserInfo
		return ret
	}).(WatchlistUserInfoOutput)
}

// The object id of the user.
func (o WatchlistUserInfoPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfo) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User information that made some action
type WatchlistUserInfoResponse struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// User information that made some action
type WatchlistUserInfoResponseOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfoResponse)(nil)).Elem()
}

func (o WatchlistUserInfoResponseOutput) ToWatchlistUserInfoResponseOutput() WatchlistUserInfoResponseOutput {
	return o
}

func (o WatchlistUserInfoResponseOutput) ToWatchlistUserInfoResponseOutputWithContext(ctx context.Context) WatchlistUserInfoResponseOutput {
	return o
}

func (o WatchlistUserInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfoResponse] {
	return pulumix.Output[WatchlistUserInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The email of the user.
func (o WatchlistUserInfoResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The name of the user.
func (o WatchlistUserInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The object id of the user.
func (o WatchlistUserInfoResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type WatchlistUserInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfoResponse)(nil)).Elem()
}

func (o WatchlistUserInfoResponsePtrOutput) ToWatchlistUserInfoResponsePtrOutput() WatchlistUserInfoResponsePtrOutput {
	return o
}

func (o WatchlistUserInfoResponsePtrOutput) ToWatchlistUserInfoResponsePtrOutputWithContext(ctx context.Context) WatchlistUserInfoResponsePtrOutput {
	return o
}

func (o WatchlistUserInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfoResponse] {
	return pulumix.Output[*WatchlistUserInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o WatchlistUserInfoResponsePtrOutput) Elem() WatchlistUserInfoResponseOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) WatchlistUserInfoResponse {
		if v != nil {
			return *v
		}
		var ret WatchlistUserInfoResponse
		return ret
	}).(WatchlistUserInfoResponseOutput)
}

// The email of the user.
func (o WatchlistUserInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The name of the user.
func (o WatchlistUserInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o WatchlistUserInfoResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertDetailsOverrideOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverridePtrOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverrideResponseOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverrideResponsePtrOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseArrayOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseQueryTimeIntervalOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseQueryTimeIntervalPtrOutput{})
	pulumi.RegisterOutputType(EntityMappingOutput{})
	pulumi.RegisterOutputType(EntityMappingArrayOutput{})
	pulumi.RegisterOutputType(EntityMappingResponseOutput{})
	pulumi.RegisterOutputType(EntityMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(FieldMappingOutput{})
	pulumi.RegisterOutputType(FieldMappingArrayOutput{})
	pulumi.RegisterOutputType(FieldMappingResponseOutput{})
	pulumi.RegisterOutputType(FieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternArrayOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternResponseOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingResponseOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFilterOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFilterResponseOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemArrayOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemResponseOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemResponseArrayOutput{})
	pulumi.RegisterOutputType(GetInsightsErrorResponseOutput{})
	pulumi.RegisterOutputType(GetInsightsErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(GetInsightsResultsMetadataResponseOutput{})
	pulumi.RegisterOutputType(GetInsightsResultsMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponsePtrOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseArrayOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseColumnsOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseColumnsArrayOutput{})
	pulumi.RegisterOutputType(RepoResponseOutput{})
	pulumi.RegisterOutputType(RepoResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TimelineAggregationResponseOutput{})
	pulumi.RegisterOutputType(TimelineAggregationResponseArrayOutput{})
	pulumi.RegisterOutputType(TimelineErrorResponseOutput{})
	pulumi.RegisterOutputType(TimelineErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(TimelineResultsMetadataResponseOutput{})
	pulumi.RegisterOutputType(TimelineResultsMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoPtrOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoResponseOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoResponsePtrOutput{})
}
