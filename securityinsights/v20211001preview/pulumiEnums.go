// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Alert detail
type AlertDetail string

const (
	// Alert display name
	AlertDetailDisplayName = AlertDetail("DisplayName")
	// Alert severity
	AlertDetailSeverity = AlertDetail("Severity")
)

func (AlertDetail) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetail)(nil)).Elem()
}

func (e AlertDetail) ToAlertDetailOutput() AlertDetailOutput {
	return pulumi.ToOutput(e).(AlertDetailOutput)
}

func (e AlertDetail) ToAlertDetailOutputWithContext(ctx context.Context) AlertDetailOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AlertDetailOutput)
}

func (e AlertDetail) ToAlertDetailPtrOutput() AlertDetailPtrOutput {
	return e.ToAlertDetailPtrOutputWithContext(context.Background())
}

func (e AlertDetail) ToAlertDetailPtrOutputWithContext(ctx context.Context) AlertDetailPtrOutput {
	return AlertDetail(e).ToAlertDetailOutputWithContext(ctx).ToAlertDetailPtrOutputWithContext(ctx)
}

func (e AlertDetail) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertDetail) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertDetail) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AlertDetail) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AlertDetailOutput struct{ *pulumi.OutputState }

func (AlertDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetail)(nil)).Elem()
}

func (o AlertDetailOutput) ToAlertDetailOutput() AlertDetailOutput {
	return o
}

func (o AlertDetailOutput) ToAlertDetailOutputWithContext(ctx context.Context) AlertDetailOutput {
	return o
}

func (o AlertDetailOutput) ToAlertDetailPtrOutput() AlertDetailPtrOutput {
	return o.ToAlertDetailPtrOutputWithContext(context.Background())
}

func (o AlertDetailOutput) ToAlertDetailPtrOutputWithContext(ctx context.Context) AlertDetailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertDetail) *AlertDetail {
		return &v
	}).(AlertDetailPtrOutput)
}

func (o AlertDetailOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AlertDetailOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertDetail) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AlertDetailOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertDetailOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertDetail) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AlertDetailPtrOutput struct{ *pulumi.OutputState }

func (AlertDetailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetail)(nil)).Elem()
}

func (o AlertDetailPtrOutput) ToAlertDetailPtrOutput() AlertDetailPtrOutput {
	return o
}

func (o AlertDetailPtrOutput) ToAlertDetailPtrOutputWithContext(ctx context.Context) AlertDetailPtrOutput {
	return o
}

func (o AlertDetailPtrOutput) Elem() AlertDetailOutput {
	return o.ApplyT(func(v *AlertDetail) AlertDetail {
		if v != nil {
			return *v
		}
		var ret AlertDetail
		return ret
	}).(AlertDetailOutput)
}

func (o AlertDetailPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertDetailPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AlertDetail) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AlertDetailInput is an input type that accepts values of the AlertDetail enum
// A concrete instance of `AlertDetailInput` can be one of the following:
//
//	AlertDetailDisplayName
//	AlertDetailSeverity
type AlertDetailInput interface {
	pulumi.Input

	ToAlertDetailOutput() AlertDetailOutput
	ToAlertDetailOutputWithContext(context.Context) AlertDetailOutput
}

var alertDetailPtrType = reflect.TypeOf((**AlertDetail)(nil)).Elem()

type AlertDetailPtrInput interface {
	pulumi.Input

	ToAlertDetailPtrOutput() AlertDetailPtrOutput
	ToAlertDetailPtrOutputWithContext(context.Context) AlertDetailPtrOutput
}

type alertDetailPtr string

func AlertDetailPtr(v string) AlertDetailPtrInput {
	return (*alertDetailPtr)(&v)
}

func (*alertDetailPtr) ElementType() reflect.Type {
	return alertDetailPtrType
}

func (in *alertDetailPtr) ToAlertDetailPtrOutput() AlertDetailPtrOutput {
	return pulumi.ToOutput(in).(AlertDetailPtrOutput)
}

func (in *alertDetailPtr) ToAlertDetailPtrOutputWithContext(ctx context.Context) AlertDetailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AlertDetailPtrOutput)
}

// The kind of the alert rule
type AlertRuleKind string

const (
	AlertRuleKindScheduled                         = AlertRuleKind("Scheduled")
	AlertRuleKindMicrosoftSecurityIncidentCreation = AlertRuleKind("MicrosoftSecurityIncidentCreation")
	AlertRuleKindFusion                            = AlertRuleKind("Fusion")
	AlertRuleKindMLBehaviorAnalytics               = AlertRuleKind("MLBehaviorAnalytics")
	AlertRuleKindThreatIntelligence                = AlertRuleKind("ThreatIntelligence")
	AlertRuleKindNRT                               = AlertRuleKind("NRT")
)

// The severity for alerts created by this alert rule.
type AlertSeverity string

const (
	// High severity
	AlertSeverityHigh = AlertSeverity("High")
	// Medium severity
	AlertSeverityMedium = AlertSeverity("Medium")
	// Low severity
	AlertSeverityLow = AlertSeverity("Low")
	// Informational severity
	AlertSeverityInformational = AlertSeverity("Informational")
)

func (AlertSeverity) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSeverity)(nil)).Elem()
}

func (e AlertSeverity) ToAlertSeverityOutput() AlertSeverityOutput {
	return pulumi.ToOutput(e).(AlertSeverityOutput)
}

func (e AlertSeverity) ToAlertSeverityOutputWithContext(ctx context.Context) AlertSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AlertSeverityOutput)
}

func (e AlertSeverity) ToAlertSeverityPtrOutput() AlertSeverityPtrOutput {
	return e.ToAlertSeverityPtrOutputWithContext(context.Background())
}

func (e AlertSeverity) ToAlertSeverityPtrOutputWithContext(ctx context.Context) AlertSeverityPtrOutput {
	return AlertSeverity(e).ToAlertSeverityOutputWithContext(ctx).ToAlertSeverityPtrOutputWithContext(ctx)
}

func (e AlertSeverity) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertSeverity) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AlertSeverity) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AlertSeverity) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AlertSeverityOutput struct{ *pulumi.OutputState }

func (AlertSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertSeverity)(nil)).Elem()
}

func (o AlertSeverityOutput) ToAlertSeverityOutput() AlertSeverityOutput {
	return o
}

func (o AlertSeverityOutput) ToAlertSeverityOutputWithContext(ctx context.Context) AlertSeverityOutput {
	return o
}

func (o AlertSeverityOutput) ToAlertSeverityPtrOutput() AlertSeverityPtrOutput {
	return o.ToAlertSeverityPtrOutputWithContext(context.Background())
}

func (o AlertSeverityOutput) ToAlertSeverityPtrOutputWithContext(ctx context.Context) AlertSeverityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertSeverity) *AlertSeverity {
		return &v
	}).(AlertSeverityPtrOutput)
}

func (o AlertSeverityOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AlertSeverityOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertSeverity) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AlertSeverityOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertSeverityOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AlertSeverity) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AlertSeverityPtrOutput struct{ *pulumi.OutputState }

func (AlertSeverityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertSeverity)(nil)).Elem()
}

func (o AlertSeverityPtrOutput) ToAlertSeverityPtrOutput() AlertSeverityPtrOutput {
	return o
}

func (o AlertSeverityPtrOutput) ToAlertSeverityPtrOutputWithContext(ctx context.Context) AlertSeverityPtrOutput {
	return o
}

func (o AlertSeverityPtrOutput) Elem() AlertSeverityOutput {
	return o.ApplyT(func(v *AlertSeverity) AlertSeverity {
		if v != nil {
			return *v
		}
		var ret AlertSeverity
		return ret
	}).(AlertSeverityOutput)
}

func (o AlertSeverityPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AlertSeverityPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AlertSeverity) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AlertSeverityInput is an input type that accepts values of the AlertSeverity enum
// A concrete instance of `AlertSeverityInput` can be one of the following:
//
//	AlertSeverityHigh
//	AlertSeverityMedium
//	AlertSeverityLow
//	AlertSeverityInformational
type AlertSeverityInput interface {
	pulumi.Input

	ToAlertSeverityOutput() AlertSeverityOutput
	ToAlertSeverityOutputWithContext(context.Context) AlertSeverityOutput
}

var alertSeverityPtrType = reflect.TypeOf((**AlertSeverity)(nil)).Elem()

type AlertSeverityPtrInput interface {
	pulumi.Input

	ToAlertSeverityPtrOutput() AlertSeverityPtrOutput
	ToAlertSeverityPtrOutputWithContext(context.Context) AlertSeverityPtrOutput
}

type alertSeverityPtr string

func AlertSeverityPtr(v string) AlertSeverityPtrInput {
	return (*alertSeverityPtr)(&v)
}

func (*alertSeverityPtr) ElementType() reflect.Type {
	return alertSeverityPtrType
}

func (in *alertSeverityPtr) ToAlertSeverityPtrOutput() AlertSeverityPtrOutput {
	return pulumi.ToOutput(in).(AlertSeverityPtrOutput)
}

func (in *alertSeverityPtr) ToAlertSeverityPtrOutputWithContext(ctx context.Context) AlertSeverityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AlertSeverityPtrOutput)
}

// The severity for alerts created by this alert rule.
type AttackTactic string

const (
	AttackTacticReconnaissance          = AttackTactic("Reconnaissance")
	AttackTacticResourceDevelopment     = AttackTactic("ResourceDevelopment")
	AttackTacticInitialAccess           = AttackTactic("InitialAccess")
	AttackTacticExecution               = AttackTactic("Execution")
	AttackTacticPersistence             = AttackTactic("Persistence")
	AttackTacticPrivilegeEscalation     = AttackTactic("PrivilegeEscalation")
	AttackTacticDefenseEvasion          = AttackTactic("DefenseEvasion")
	AttackTacticCredentialAccess        = AttackTactic("CredentialAccess")
	AttackTacticDiscovery               = AttackTactic("Discovery")
	AttackTacticLateralMovement         = AttackTactic("LateralMovement")
	AttackTacticCollection              = AttackTactic("Collection")
	AttackTacticExfiltration            = AttackTactic("Exfiltration")
	AttackTacticCommandAndControl       = AttackTactic("CommandAndControl")
	AttackTacticImpact                  = AttackTactic("Impact")
	AttackTacticPreAttack               = AttackTactic("PreAttack")
	AttackTacticImpairProcessControl    = AttackTactic("ImpairProcessControl")
	AttackTacticInhibitResponseFunction = AttackTactic("InhibitResponseFunction")
)

func (AttackTactic) ElementType() reflect.Type {
	return reflect.TypeOf((*AttackTactic)(nil)).Elem()
}

func (e AttackTactic) ToAttackTacticOutput() AttackTacticOutput {
	return pulumi.ToOutput(e).(AttackTacticOutput)
}

func (e AttackTactic) ToAttackTacticOutputWithContext(ctx context.Context) AttackTacticOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AttackTacticOutput)
}

func (e AttackTactic) ToAttackTacticPtrOutput() AttackTacticPtrOutput {
	return e.ToAttackTacticPtrOutputWithContext(context.Background())
}

func (e AttackTactic) ToAttackTacticPtrOutputWithContext(ctx context.Context) AttackTacticPtrOutput {
	return AttackTactic(e).ToAttackTacticOutputWithContext(ctx).ToAttackTacticPtrOutputWithContext(ctx)
}

func (e AttackTactic) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttackTactic) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AttackTactic) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AttackTactic) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AttackTacticOutput struct{ *pulumi.OutputState }

func (AttackTacticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AttackTactic)(nil)).Elem()
}

func (o AttackTacticOutput) ToAttackTacticOutput() AttackTacticOutput {
	return o
}

func (o AttackTacticOutput) ToAttackTacticOutputWithContext(ctx context.Context) AttackTacticOutput {
	return o
}

func (o AttackTacticOutput) ToAttackTacticPtrOutput() AttackTacticPtrOutput {
	return o.ToAttackTacticPtrOutputWithContext(context.Background())
}

func (o AttackTacticOutput) ToAttackTacticPtrOutputWithContext(ctx context.Context) AttackTacticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AttackTactic) *AttackTactic {
		return &v
	}).(AttackTacticPtrOutput)
}

func (o AttackTacticOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AttackTacticOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttackTactic) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AttackTacticOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttackTacticOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AttackTactic) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AttackTacticPtrOutput struct{ *pulumi.OutputState }

func (AttackTacticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttackTactic)(nil)).Elem()
}

func (o AttackTacticPtrOutput) ToAttackTacticPtrOutput() AttackTacticPtrOutput {
	return o
}

func (o AttackTacticPtrOutput) ToAttackTacticPtrOutputWithContext(ctx context.Context) AttackTacticPtrOutput {
	return o
}

func (o AttackTacticPtrOutput) Elem() AttackTacticOutput {
	return o.ApplyT(func(v *AttackTactic) AttackTactic {
		if v != nil {
			return *v
		}
		var ret AttackTactic
		return ret
	}).(AttackTacticOutput)
}

func (o AttackTacticPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AttackTacticPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AttackTactic) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AttackTacticInput is an input type that accepts values of the AttackTactic enum
// A concrete instance of `AttackTacticInput` can be one of the following:
//
//	AttackTacticReconnaissance
//	AttackTacticResourceDevelopment
//	AttackTacticInitialAccess
//	AttackTacticExecution
//	AttackTacticPersistence
//	AttackTacticPrivilegeEscalation
//	AttackTacticDefenseEvasion
//	AttackTacticCredentialAccess
//	AttackTacticDiscovery
//	AttackTacticLateralMovement
//	AttackTacticCollection
//	AttackTacticExfiltration
//	AttackTacticCommandAndControl
//	AttackTacticImpact
//	AttackTacticPreAttack
//	AttackTacticImpairProcessControl
//	AttackTacticInhibitResponseFunction
type AttackTacticInput interface {
	pulumi.Input

	ToAttackTacticOutput() AttackTacticOutput
	ToAttackTacticOutputWithContext(context.Context) AttackTacticOutput
}

var attackTacticPtrType = reflect.TypeOf((**AttackTactic)(nil)).Elem()

type AttackTacticPtrInput interface {
	pulumi.Input

	ToAttackTacticPtrOutput() AttackTacticPtrOutput
	ToAttackTacticPtrOutputWithContext(context.Context) AttackTacticPtrOutput
}

type attackTacticPtr string

func AttackTacticPtr(v string) AttackTacticPtrInput {
	return (*attackTacticPtr)(&v)
}

func (*attackTacticPtr) ElementType() reflect.Type {
	return attackTacticPtrType
}

func (in *attackTacticPtr) ToAttackTacticPtrOutput() AttackTacticPtrOutput {
	return pulumi.ToOutput(in).(AttackTacticPtrOutput)
}

func (in *attackTacticPtr) ToAttackTacticPtrOutputWithContext(ctx context.Context) AttackTacticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AttackTacticPtrOutput)
}

// The V3 type of the mapped entity
type EntityMappingType string

const (
	// User account entity type
	EntityMappingTypeAccount = EntityMappingType("Account")
	// Host entity type
	EntityMappingTypeHost = EntityMappingType("Host")
	// IP address entity type
	EntityMappingTypeIP = EntityMappingType("IP")
	// Malware entity type
	EntityMappingTypeMalware = EntityMappingType("Malware")
	// System file entity type
	EntityMappingTypeFile = EntityMappingType("File")
	// Process entity type
	EntityMappingTypeProcess = EntityMappingType("Process")
	// Cloud app entity type
	EntityMappingTypeCloudApplication = EntityMappingType("CloudApplication")
	// DNS entity type
	EntityMappingTypeDNS = EntityMappingType("DNS")
	// Azure resource entity type
	EntityMappingTypeAzureResource = EntityMappingType("AzureResource")
	// File-hash entity type
	EntityMappingTypeFileHash = EntityMappingType("FileHash")
	// Registry key entity type
	EntityMappingTypeRegistryKey = EntityMappingType("RegistryKey")
	// Registry value entity type
	EntityMappingTypeRegistryValue = EntityMappingType("RegistryValue")
	// Security group entity type
	EntityMappingTypeSecurityGroup = EntityMappingType("SecurityGroup")
	// URL entity type
	EntityMappingTypeURL = EntityMappingType("URL")
	// Mailbox entity type
	EntityMappingTypeMailbox = EntityMappingType("Mailbox")
	// Mail cluster entity type
	EntityMappingTypeMailCluster = EntityMappingType("MailCluster")
	// Mail message entity type
	EntityMappingTypeMailMessage = EntityMappingType("MailMessage")
	// Submission mail entity type
	EntityMappingTypeSubmissionMail = EntityMappingType("SubmissionMail")
)

func (EntityMappingType) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMappingType)(nil)).Elem()
}

func (e EntityMappingType) ToEntityMappingTypeOutput() EntityMappingTypeOutput {
	return pulumi.ToOutput(e).(EntityMappingTypeOutput)
}

func (e EntityMappingType) ToEntityMappingTypeOutputWithContext(ctx context.Context) EntityMappingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntityMappingTypeOutput)
}

func (e EntityMappingType) ToEntityMappingTypePtrOutput() EntityMappingTypePtrOutput {
	return e.ToEntityMappingTypePtrOutputWithContext(context.Background())
}

func (e EntityMappingType) ToEntityMappingTypePtrOutputWithContext(ctx context.Context) EntityMappingTypePtrOutput {
	return EntityMappingType(e).ToEntityMappingTypeOutputWithContext(ctx).ToEntityMappingTypePtrOutputWithContext(ctx)
}

func (e EntityMappingType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityMappingType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityMappingType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntityMappingType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntityMappingTypeOutput struct{ *pulumi.OutputState }

func (EntityMappingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMappingType)(nil)).Elem()
}

func (o EntityMappingTypeOutput) ToEntityMappingTypeOutput() EntityMappingTypeOutput {
	return o
}

func (o EntityMappingTypeOutput) ToEntityMappingTypeOutputWithContext(ctx context.Context) EntityMappingTypeOutput {
	return o
}

func (o EntityMappingTypeOutput) ToEntityMappingTypePtrOutput() EntityMappingTypePtrOutput {
	return o.ToEntityMappingTypePtrOutputWithContext(context.Background())
}

func (o EntityMappingTypeOutput) ToEntityMappingTypePtrOutputWithContext(ctx context.Context) EntityMappingTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityMappingType) *EntityMappingType {
		return &v
	}).(EntityMappingTypePtrOutput)
}

func (o EntityMappingTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntityMappingTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityMappingType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntityMappingTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityMappingTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityMappingType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntityMappingTypePtrOutput struct{ *pulumi.OutputState }

func (EntityMappingTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityMappingType)(nil)).Elem()
}

func (o EntityMappingTypePtrOutput) ToEntityMappingTypePtrOutput() EntityMappingTypePtrOutput {
	return o
}

func (o EntityMappingTypePtrOutput) ToEntityMappingTypePtrOutputWithContext(ctx context.Context) EntityMappingTypePtrOutput {
	return o
}

func (o EntityMappingTypePtrOutput) Elem() EntityMappingTypeOutput {
	return o.ApplyT(func(v *EntityMappingType) EntityMappingType {
		if v != nil {
			return *v
		}
		var ret EntityMappingType
		return ret
	}).(EntityMappingTypeOutput)
}

func (o EntityMappingTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityMappingTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntityMappingType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntityMappingTypeInput is an input type that accepts values of the EntityMappingType enum
// A concrete instance of `EntityMappingTypeInput` can be one of the following:
//
//	EntityMappingTypeAccount
//	EntityMappingTypeHost
//	EntityMappingTypeIP
//	EntityMappingTypeMalware
//	EntityMappingTypeFile
//	EntityMappingTypeProcess
//	EntityMappingTypeCloudApplication
//	EntityMappingTypeDNS
//	EntityMappingTypeAzureResource
//	EntityMappingTypeFileHash
//	EntityMappingTypeRegistryKey
//	EntityMappingTypeRegistryValue
//	EntityMappingTypeSecurityGroup
//	EntityMappingTypeURL
//	EntityMappingTypeMailbox
//	EntityMappingTypeMailCluster
//	EntityMappingTypeMailMessage
//	EntityMappingTypeSubmissionMail
type EntityMappingTypeInput interface {
	pulumi.Input

	ToEntityMappingTypeOutput() EntityMappingTypeOutput
	ToEntityMappingTypeOutputWithContext(context.Context) EntityMappingTypeOutput
}

var entityMappingTypePtrType = reflect.TypeOf((**EntityMappingType)(nil)).Elem()

type EntityMappingTypePtrInput interface {
	pulumi.Input

	ToEntityMappingTypePtrOutput() EntityMappingTypePtrOutput
	ToEntityMappingTypePtrOutputWithContext(context.Context) EntityMappingTypePtrOutput
}

type entityMappingTypePtr string

func EntityMappingTypePtr(v string) EntityMappingTypePtrInput {
	return (*entityMappingTypePtr)(&v)
}

func (*entityMappingTypePtr) ElementType() reflect.Type {
	return entityMappingTypePtrType
}

func (in *entityMappingTypePtr) ToEntityMappingTypePtrOutput() EntityMappingTypePtrOutput {
	return pulumi.ToOutput(in).(EntityMappingTypePtrOutput)
}

func (in *entityMappingTypePtr) ToEntityMappingTypePtrOutputWithContext(ctx context.Context) EntityMappingTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntityMappingTypePtrOutput)
}

// The entity query kind
type EntityTimelineKind string

const (
	// activity
	EntityTimelineKindActivity = EntityTimelineKind("Activity")
	// bookmarks
	EntityTimelineKindBookmark = EntityTimelineKind("Bookmark")
	// security alerts
	EntityTimelineKindSecurityAlert = EntityTimelineKind("SecurityAlert")
)

func (EntityTimelineKind) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTimelineKind)(nil)).Elem()
}

func (e EntityTimelineKind) ToEntityTimelineKindOutput() EntityTimelineKindOutput {
	return pulumi.ToOutput(e).(EntityTimelineKindOutput)
}

func (e EntityTimelineKind) ToEntityTimelineKindOutputWithContext(ctx context.Context) EntityTimelineKindOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EntityTimelineKindOutput)
}

func (e EntityTimelineKind) ToEntityTimelineKindPtrOutput() EntityTimelineKindPtrOutput {
	return e.ToEntityTimelineKindPtrOutputWithContext(context.Background())
}

func (e EntityTimelineKind) ToEntityTimelineKindPtrOutputWithContext(ctx context.Context) EntityTimelineKindPtrOutput {
	return EntityTimelineKind(e).ToEntityTimelineKindOutputWithContext(ctx).ToEntityTimelineKindPtrOutputWithContext(ctx)
}

func (e EntityTimelineKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityTimelineKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EntityTimelineKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EntityTimelineKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EntityTimelineKindOutput struct{ *pulumi.OutputState }

func (EntityTimelineKindOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityTimelineKind)(nil)).Elem()
}

func (o EntityTimelineKindOutput) ToEntityTimelineKindOutput() EntityTimelineKindOutput {
	return o
}

func (o EntityTimelineKindOutput) ToEntityTimelineKindOutputWithContext(ctx context.Context) EntityTimelineKindOutput {
	return o
}

func (o EntityTimelineKindOutput) ToEntityTimelineKindPtrOutput() EntityTimelineKindPtrOutput {
	return o.ToEntityTimelineKindPtrOutputWithContext(context.Background())
}

func (o EntityTimelineKindOutput) ToEntityTimelineKindPtrOutputWithContext(ctx context.Context) EntityTimelineKindPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityTimelineKind) *EntityTimelineKind {
		return &v
	}).(EntityTimelineKindPtrOutput)
}

func (o EntityTimelineKindOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EntityTimelineKindOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityTimelineKind) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EntityTimelineKindOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityTimelineKindOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EntityTimelineKind) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EntityTimelineKindPtrOutput struct{ *pulumi.OutputState }

func (EntityTimelineKindPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityTimelineKind)(nil)).Elem()
}

func (o EntityTimelineKindPtrOutput) ToEntityTimelineKindPtrOutput() EntityTimelineKindPtrOutput {
	return o
}

func (o EntityTimelineKindPtrOutput) ToEntityTimelineKindPtrOutputWithContext(ctx context.Context) EntityTimelineKindPtrOutput {
	return o
}

func (o EntityTimelineKindPtrOutput) Elem() EntityTimelineKindOutput {
	return o.ApplyT(func(v *EntityTimelineKind) EntityTimelineKind {
		if v != nil {
			return *v
		}
		var ret EntityTimelineKind
		return ret
	}).(EntityTimelineKindOutput)
}

func (o EntityTimelineKindPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EntityTimelineKindPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EntityTimelineKind) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EntityTimelineKindInput is an input type that accepts values of the EntityTimelineKind enum
// A concrete instance of `EntityTimelineKindInput` can be one of the following:
//
//	EntityTimelineKindActivity
//	EntityTimelineKindBookmark
//	EntityTimelineKindSecurityAlert
type EntityTimelineKindInput interface {
	pulumi.Input

	ToEntityTimelineKindOutput() EntityTimelineKindOutput
	ToEntityTimelineKindOutputWithContext(context.Context) EntityTimelineKindOutput
}

var entityTimelineKindPtrType = reflect.TypeOf((**EntityTimelineKind)(nil)).Elem()

type EntityTimelineKindPtrInput interface {
	pulumi.Input

	ToEntityTimelineKindPtrOutput() EntityTimelineKindPtrOutput
	ToEntityTimelineKindPtrOutputWithContext(context.Context) EntityTimelineKindPtrOutput
}

type entityTimelineKindPtr string

func EntityTimelineKindPtr(v string) EntityTimelineKindPtrInput {
	return (*entityTimelineKindPtr)(&v)
}

func (*entityTimelineKindPtr) ElementType() reflect.Type {
	return entityTimelineKindPtrType
}

func (in *entityTimelineKindPtr) ToEntityTimelineKindPtrOutput() EntityTimelineKindPtrOutput {
	return pulumi.ToOutput(in).(EntityTimelineKindPtrOutput)
}

func (in *entityTimelineKindPtr) ToEntityTimelineKindPtrOutputWithContext(ctx context.Context) EntityTimelineKindPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EntityTimelineKindPtrOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
type MatchingMethod string

const (
	// Grouping alerts into a single incident if all the entities match
	MatchingMethodAllEntities = MatchingMethod("AllEntities")
	// Grouping any alerts triggered by this rule into a single incident
	MatchingMethodAnyAlert = MatchingMethod("AnyAlert")
	// Grouping alerts into a single incident if the selected entities, custom details and alert details match
	MatchingMethodSelected = MatchingMethod("Selected")
)

func (MatchingMethod) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingMethod)(nil)).Elem()
}

func (e MatchingMethod) ToMatchingMethodOutput() MatchingMethodOutput {
	return pulumi.ToOutput(e).(MatchingMethodOutput)
}

func (e MatchingMethod) ToMatchingMethodOutputWithContext(ctx context.Context) MatchingMethodOutput {
	return pulumi.ToOutputWithContext(ctx, e).(MatchingMethodOutput)
}

func (e MatchingMethod) ToMatchingMethodPtrOutput() MatchingMethodPtrOutput {
	return e.ToMatchingMethodPtrOutputWithContext(context.Background())
}

func (e MatchingMethod) ToMatchingMethodPtrOutputWithContext(ctx context.Context) MatchingMethodPtrOutput {
	return MatchingMethod(e).ToMatchingMethodOutputWithContext(ctx).ToMatchingMethodPtrOutputWithContext(ctx)
}

func (e MatchingMethod) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchingMethod) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e MatchingMethod) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e MatchingMethod) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type MatchingMethodOutput struct{ *pulumi.OutputState }

func (MatchingMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MatchingMethod)(nil)).Elem()
}

func (o MatchingMethodOutput) ToMatchingMethodOutput() MatchingMethodOutput {
	return o
}

func (o MatchingMethodOutput) ToMatchingMethodOutputWithContext(ctx context.Context) MatchingMethodOutput {
	return o
}

func (o MatchingMethodOutput) ToMatchingMethodPtrOutput() MatchingMethodPtrOutput {
	return o.ToMatchingMethodPtrOutputWithContext(context.Background())
}

func (o MatchingMethodOutput) ToMatchingMethodPtrOutputWithContext(ctx context.Context) MatchingMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MatchingMethod) *MatchingMethod {
		return &v
	}).(MatchingMethodPtrOutput)
}

func (o MatchingMethodOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o MatchingMethodOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchingMethod) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o MatchingMethodOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchingMethodOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e MatchingMethod) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type MatchingMethodPtrOutput struct{ *pulumi.OutputState }

func (MatchingMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchingMethod)(nil)).Elem()
}

func (o MatchingMethodPtrOutput) ToMatchingMethodPtrOutput() MatchingMethodPtrOutput {
	return o
}

func (o MatchingMethodPtrOutput) ToMatchingMethodPtrOutputWithContext(ctx context.Context) MatchingMethodPtrOutput {
	return o
}

func (o MatchingMethodPtrOutput) Elem() MatchingMethodOutput {
	return o.ApplyT(func(v *MatchingMethod) MatchingMethod {
		if v != nil {
			return *v
		}
		var ret MatchingMethod
		return ret
	}).(MatchingMethodOutput)
}

func (o MatchingMethodPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o MatchingMethodPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *MatchingMethod) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// MatchingMethodInput is an input type that accepts values of the MatchingMethod enum
// A concrete instance of `MatchingMethodInput` can be one of the following:
//
//	MatchingMethodAllEntities
//	MatchingMethodAnyAlert
//	MatchingMethodSelected
type MatchingMethodInput interface {
	pulumi.Input

	ToMatchingMethodOutput() MatchingMethodOutput
	ToMatchingMethodOutputWithContext(context.Context) MatchingMethodOutput
}

var matchingMethodPtrType = reflect.TypeOf((**MatchingMethod)(nil)).Elem()

type MatchingMethodPtrInput interface {
	pulumi.Input

	ToMatchingMethodPtrOutput() MatchingMethodPtrOutput
	ToMatchingMethodPtrOutputWithContext(context.Context) MatchingMethodPtrOutput
}

type matchingMethodPtr string

func MatchingMethodPtr(v string) MatchingMethodPtrInput {
	return (*matchingMethodPtr)(&v)
}

func (*matchingMethodPtr) ElementType() reflect.Type {
	return matchingMethodPtrType
}

func (in *matchingMethodPtr) ToMatchingMethodPtrOutput() MatchingMethodPtrOutput {
	return pulumi.ToOutput(in).(MatchingMethodPtrOutput)
}

func (in *matchingMethodPtr) ToMatchingMethodPtrOutputWithContext(ctx context.Context) MatchingMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(MatchingMethodPtrOutput)
}

// The source of the watchlist
type Source string

const (
	Source_Local_file     = Source("Local file")
	Source_Remote_storage = Source("Remote storage")
)

func (Source) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (e Source) ToSourceOutput() SourceOutput {
	return pulumi.ToOutput(e).(SourceOutput)
}

func (e Source) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceOutput)
}

func (e Source) ToSourcePtrOutput() SourcePtrOutput {
	return e.ToSourcePtrOutputWithContext(context.Background())
}

func (e Source) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return Source(e).ToSourceOutputWithContext(ctx).ToSourcePtrOutputWithContext(ctx)
}

func (e Source) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Source) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Source) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Source) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

func (o SourceOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Source) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Source) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

func (o SourcePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourcePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Source) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SourceInput is an input type that accepts values of the Source enum
// A concrete instance of `SourceInput` can be one of the following:
//
//	Source_Local_file
//	Source_Remote_storage
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

var sourcePtrType = reflect.TypeOf((**Source)(nil)).Elem()

type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtr string

func SourcePtr(v string) SourcePtrInput {
	return (*sourcePtr)(&v)
}

func (*sourcePtr) ElementType() reflect.Type {
	return sourcePtrType
}

func (in *sourcePtr) ToSourcePtrOutput() SourcePtrOutput {
	return pulumi.ToOutput(in).(SourcePtrOutput)
}

func (in *sourcePtr) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourcePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertDetailOutput{})
	pulumi.RegisterOutputType(AlertDetailPtrOutput{})
	pulumi.RegisterOutputType(AlertSeverityOutput{})
	pulumi.RegisterOutputType(AlertSeverityPtrOutput{})
	pulumi.RegisterOutputType(AttackTacticOutput{})
	pulumi.RegisterOutputType(AttackTacticPtrOutput{})
	pulumi.RegisterOutputType(EntityMappingTypeOutput{})
	pulumi.RegisterOutputType(EntityMappingTypePtrOutput{})
	pulumi.RegisterOutputType(EntityTimelineKindOutput{})
	pulumi.RegisterOutputType(EntityTimelineKindPtrOutput{})
	pulumi.RegisterOutputType(MatchingMethodOutput{})
	pulumi.RegisterOutputType(MatchingMethodPtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
}
