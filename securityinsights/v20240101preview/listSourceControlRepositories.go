// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a list of repositories metadata.
func ListSourceControlRepositories(ctx *pulumi.Context, args *ListSourceControlRepositoriesArgs, opts ...pulumi.InvokeOption) (*ListSourceControlRepositoriesResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListSourceControlRepositoriesResult
	err := ctx.Invoke("azure-native:securityinsights/v20240101preview:listSourceControlRepositories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListSourceControlRepositoriesArgs struct {
	// OAuth ClientId. Required when `kind` is `OAuth`
	ClientId *string `pulumi:"clientId"`
	// OAuth Code. Required when `kind` is `OAuth`
	Code *string `pulumi:"code"`
	// Application installation ID. Required when `kind` is `App`. Supported by `GitHub` only.
	InstallationId *string `pulumi:"installationId"`
	// The kind of repository access credentials
	Kind string `pulumi:"kind"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// OAuth State. Required when `kind` is `OAuth`
	State *string `pulumi:"state"`
	// Personal Access Token. Required when `kind` is `PAT`
	Token *string `pulumi:"token"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// List all the source controls.
type ListSourceControlRepositoriesResult struct {
	// URL to fetch the next set of repositories.
	NextLink string `pulumi:"nextLink"`
	// Array of repositories.
	Value []RepoResponse `pulumi:"value"`
}

func ListSourceControlRepositoriesOutput(ctx *pulumi.Context, args ListSourceControlRepositoriesOutputArgs, opts ...pulumi.InvokeOption) ListSourceControlRepositoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListSourceControlRepositoriesResult, error) {
			args := v.(ListSourceControlRepositoriesArgs)
			r, err := ListSourceControlRepositories(ctx, &args, opts...)
			var s ListSourceControlRepositoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListSourceControlRepositoriesResultOutput)
}

type ListSourceControlRepositoriesOutputArgs struct {
	// OAuth ClientId. Required when `kind` is `OAuth`
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// OAuth Code. Required when `kind` is `OAuth`
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Application installation ID. Required when `kind` is `App`. Supported by `GitHub` only.
	InstallationId pulumi.StringPtrInput `pulumi:"installationId"`
	// The kind of repository access credentials
	Kind pulumi.StringInput `pulumi:"kind"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// OAuth State. Required when `kind` is `OAuth`
	State pulumi.StringPtrInput `pulumi:"state"`
	// Personal Access Token. Required when `kind` is `PAT`
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The name of the workspace.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (ListSourceControlRepositoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListSourceControlRepositoriesArgs)(nil)).Elem()
}

// List all the source controls.
type ListSourceControlRepositoriesResultOutput struct{ *pulumi.OutputState }

func (ListSourceControlRepositoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListSourceControlRepositoriesResult)(nil)).Elem()
}

func (o ListSourceControlRepositoriesResultOutput) ToListSourceControlRepositoriesResultOutput() ListSourceControlRepositoriesResultOutput {
	return o
}

func (o ListSourceControlRepositoriesResultOutput) ToListSourceControlRepositoriesResultOutputWithContext(ctx context.Context) ListSourceControlRepositoriesResultOutput {
	return o
}

// URL to fetch the next set of repositories.
func (o ListSourceControlRepositoriesResultOutput) NextLink() pulumi.StringOutput {
	return o.ApplyT(func(v ListSourceControlRepositoriesResult) string { return v.NextLink }).(pulumi.StringOutput)
}

// Array of repositories.
func (o ListSourceControlRepositoriesResultOutput) Value() RepoResponseArrayOutput {
	return o.ApplyT(func(v ListSourceControlRepositoriesResult) []RepoResponse { return v.Value }).(RepoResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListSourceControlRepositoriesResultOutput{})
}
