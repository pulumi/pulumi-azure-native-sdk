// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get geodata for a single IP address
func ListGeodataByIp(ctx *pulumi.Context, args *ListGeodataByIpArgs, opts ...pulumi.InvokeOption) (*ListGeodataByIpResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListGeodataByIpResult
	err := ctx.Invoke("azure-native:securityinsights/v20240101preview:listGeodataByIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListGeodataByIpArgs struct {
	// Enrichment type
	EnrichmentType string `pulumi:"enrichmentType"`
	// The dotted-decimal or colon-separated string representation of the IP address
	IpAddress *string `pulumi:"ipAddress"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// Geodata information for a given IP address
type ListGeodataByIpResult struct {
	// The autonomous system number associated with this IP address
	Asn *string `pulumi:"asn"`
	// The name of the carrier for this IP address
	Carrier *string `pulumi:"carrier"`
	// The city this IP address is located in
	City *string `pulumi:"city"`
	// A numeric rating of confidence that the value in the 'city' field is correct, on a scale of 0-100
	CityConfidenceFactor *int `pulumi:"cityConfidenceFactor"`
	// The continent this IP address is located on
	Continent *string `pulumi:"continent"`
	// The county this IP address is located in
	Country *string `pulumi:"country"`
	// A numeric rating of confidence that the value in the 'country' field is correct on a scale of 0-100
	CountryConfidenceFactor *int `pulumi:"countryConfidenceFactor"`
	// The dotted-decimal or colon-separated string representation of the IP address
	IpAddr *string `pulumi:"ipAddr"`
	// A description of the connection type of this IP address
	IpRoutingType *string `pulumi:"ipRoutingType"`
	// The latitude of this IP address
	Latitude *string `pulumi:"latitude"`
	// The longitude of this IP address
	Longitude *string `pulumi:"longitude"`
	// The name of the organization for this IP address
	Organization *string `pulumi:"organization"`
	// The type of the organization for this IP address
	OrganizationType *string `pulumi:"organizationType"`
	// The geographic region this IP address is located in
	Region *string `pulumi:"region"`
	// The state this IP address is located in
	State *string `pulumi:"state"`
	// The abbreviated name for the state this IP address is located in
	StateCode *string `pulumi:"stateCode"`
	// A numeric rating of confidence that the value in the 'state' field is correct on a scale of 0-100
	StateConfidenceFactor *int `pulumi:"stateConfidenceFactor"`
}

func ListGeodataByIpOutput(ctx *pulumi.Context, args ListGeodataByIpOutputArgs, opts ...pulumi.InvokeOption) ListGeodataByIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListGeodataByIpResult, error) {
			args := v.(ListGeodataByIpArgs)
			r, err := ListGeodataByIp(ctx, &args, opts...)
			var s ListGeodataByIpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListGeodataByIpResultOutput)
}

type ListGeodataByIpOutputArgs struct {
	// Enrichment type
	EnrichmentType pulumi.StringInput `pulumi:"enrichmentType"`
	// The dotted-decimal or colon-separated string representation of the IP address
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the workspace.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (ListGeodataByIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListGeodataByIpArgs)(nil)).Elem()
}

// Geodata information for a given IP address
type ListGeodataByIpResultOutput struct{ *pulumi.OutputState }

func (ListGeodataByIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListGeodataByIpResult)(nil)).Elem()
}

func (o ListGeodataByIpResultOutput) ToListGeodataByIpResultOutput() ListGeodataByIpResultOutput {
	return o
}

func (o ListGeodataByIpResultOutput) ToListGeodataByIpResultOutputWithContext(ctx context.Context) ListGeodataByIpResultOutput {
	return o
}

// The autonomous system number associated with this IP address
func (o ListGeodataByIpResultOutput) Asn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Asn }).(pulumi.StringPtrOutput)
}

// The name of the carrier for this IP address
func (o ListGeodataByIpResultOutput) Carrier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Carrier }).(pulumi.StringPtrOutput)
}

// The city this IP address is located in
func (o ListGeodataByIpResultOutput) City() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.City }).(pulumi.StringPtrOutput)
}

// A numeric rating of confidence that the value in the 'city' field is correct, on a scale of 0-100
func (o ListGeodataByIpResultOutput) CityConfidenceFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *int { return v.CityConfidenceFactor }).(pulumi.IntPtrOutput)
}

// The continent this IP address is located on
func (o ListGeodataByIpResultOutput) Continent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Continent }).(pulumi.StringPtrOutput)
}

// The county this IP address is located in
func (o ListGeodataByIpResultOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Country }).(pulumi.StringPtrOutput)
}

// A numeric rating of confidence that the value in the 'country' field is correct on a scale of 0-100
func (o ListGeodataByIpResultOutput) CountryConfidenceFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *int { return v.CountryConfidenceFactor }).(pulumi.IntPtrOutput)
}

// The dotted-decimal or colon-separated string representation of the IP address
func (o ListGeodataByIpResultOutput) IpAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.IpAddr }).(pulumi.StringPtrOutput)
}

// A description of the connection type of this IP address
func (o ListGeodataByIpResultOutput) IpRoutingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.IpRoutingType }).(pulumi.StringPtrOutput)
}

// The latitude of this IP address
func (o ListGeodataByIpResultOutput) Latitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Latitude }).(pulumi.StringPtrOutput)
}

// The longitude of this IP address
func (o ListGeodataByIpResultOutput) Longitude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Longitude }).(pulumi.StringPtrOutput)
}

// The name of the organization for this IP address
func (o ListGeodataByIpResultOutput) Organization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Organization }).(pulumi.StringPtrOutput)
}

// The type of the organization for this IP address
func (o ListGeodataByIpResultOutput) OrganizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.OrganizationType }).(pulumi.StringPtrOutput)
}

// The geographic region this IP address is located in
func (o ListGeodataByIpResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The state this IP address is located in
func (o ListGeodataByIpResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The abbreviated name for the state this IP address is located in
func (o ListGeodataByIpResultOutput) StateCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *string { return v.StateCode }).(pulumi.StringPtrOutput)
}

// A numeric rating of confidence that the value in the 'state' field is correct on a scale of 0-100
func (o ListGeodataByIpResultOutput) StateConfidenceFactor() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListGeodataByIpResult) *int { return v.StateConfidenceFactor }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ListGeodataByIpResultOutput{})
}
