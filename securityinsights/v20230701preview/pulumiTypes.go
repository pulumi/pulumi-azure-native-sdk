// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230701preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// The Activity query definitions
type ActivityEntityQueriesPropertiesQueryDefinitions struct {
	// The Activity query to run on a given entity
	Query *string `pulumi:"query"`
}

// ActivityEntityQueriesPropertiesQueryDefinitionsInput is an input type that accepts ActivityEntityQueriesPropertiesQueryDefinitionsArgs and ActivityEntityQueriesPropertiesQueryDefinitionsOutput values.
// You can construct a concrete instance of `ActivityEntityQueriesPropertiesQueryDefinitionsInput` via:
//
//	ActivityEntityQueriesPropertiesQueryDefinitionsArgs{...}
type ActivityEntityQueriesPropertiesQueryDefinitionsInput interface {
	pulumi.Input

	ToActivityEntityQueriesPropertiesQueryDefinitionsOutput() ActivityEntityQueriesPropertiesQueryDefinitionsOutput
	ToActivityEntityQueriesPropertiesQueryDefinitionsOutputWithContext(context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsOutput
}

// The Activity query definitions
type ActivityEntityQueriesPropertiesQueryDefinitionsArgs struct {
	// The Activity query to run on a given entity
	Query pulumi.StringPtrInput `pulumi:"query"`
}

func (ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityEntityQueriesPropertiesQueryDefinitions)(nil)).Elem()
}

func (i ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ToActivityEntityQueriesPropertiesQueryDefinitionsOutput() ActivityEntityQueriesPropertiesQueryDefinitionsOutput {
	return i.ToActivityEntityQueriesPropertiesQueryDefinitionsOutputWithContext(context.Background())
}

func (i ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ToActivityEntityQueriesPropertiesQueryDefinitionsOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityEntityQueriesPropertiesQueryDefinitionsOutput)
}

func (i ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ToOutput(ctx context.Context) pulumix.Output[ActivityEntityQueriesPropertiesQueryDefinitions] {
	return pulumix.Output[ActivityEntityQueriesPropertiesQueryDefinitions]{
		OutputState: i.ToActivityEntityQueriesPropertiesQueryDefinitionsOutputWithContext(ctx).OutputState,
	}
}

func (i ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return i.ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(context.Background())
}

func (i ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityEntityQueriesPropertiesQueryDefinitionsOutput).ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx)
}

// ActivityEntityQueriesPropertiesQueryDefinitionsPtrInput is an input type that accepts ActivityEntityQueriesPropertiesQueryDefinitionsArgs, ActivityEntityQueriesPropertiesQueryDefinitionsPtr and ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput values.
// You can construct a concrete instance of `ActivityEntityQueriesPropertiesQueryDefinitionsPtrInput` via:
//
//	        ActivityEntityQueriesPropertiesQueryDefinitionsArgs{...}
//
//	or:
//
//	        nil
type ActivityEntityQueriesPropertiesQueryDefinitionsPtrInput interface {
	pulumi.Input

	ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput
	ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput
}

type activityEntityQueriesPropertiesQueryDefinitionsPtrType ActivityEntityQueriesPropertiesQueryDefinitionsArgs

func ActivityEntityQueriesPropertiesQueryDefinitionsPtr(v *ActivityEntityQueriesPropertiesQueryDefinitionsArgs) ActivityEntityQueriesPropertiesQueryDefinitionsPtrInput {
	return (*activityEntityQueriesPropertiesQueryDefinitionsPtrType)(v)
}

func (*activityEntityQueriesPropertiesQueryDefinitionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityEntityQueriesPropertiesQueryDefinitions)(nil)).Elem()
}

func (i *activityEntityQueriesPropertiesQueryDefinitionsPtrType) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return i.ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(context.Background())
}

func (i *activityEntityQueriesPropertiesQueryDefinitionsPtrType) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput)
}

func (i *activityEntityQueriesPropertiesQueryDefinitionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*ActivityEntityQueriesPropertiesQueryDefinitions] {
	return pulumix.Output[*ActivityEntityQueriesPropertiesQueryDefinitions]{
		OutputState: i.ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx).OutputState,
	}
}

// The Activity query definitions
type ActivityEntityQueriesPropertiesQueryDefinitionsOutput struct{ *pulumi.OutputState }

func (ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityEntityQueriesPropertiesQueryDefinitions)(nil)).Elem()
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsOutput() ActivityEntityQueriesPropertiesQueryDefinitionsOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return o.ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(context.Background())
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActivityEntityQueriesPropertiesQueryDefinitions) *ActivityEntityQueriesPropertiesQueryDefinitions {
		return &v
	}).(ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput)
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityEntityQueriesPropertiesQueryDefinitions] {
	return pulumix.Output[ActivityEntityQueriesPropertiesQueryDefinitions]{
		OutputState: o.OutputState,
	}
}

// The Activity query to run on a given entity
func (o ActivityEntityQueriesPropertiesQueryDefinitionsOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityEntityQueriesPropertiesQueryDefinitions) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityEntityQueriesPropertiesQueryDefinitions)(nil)).Elem()
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) ToActivityEntityQueriesPropertiesQueryDefinitionsPtrOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActivityEntityQueriesPropertiesQueryDefinitions] {
	return pulumix.Output[*ActivityEntityQueriesPropertiesQueryDefinitions]{
		OutputState: o.OutputState,
	}
}

func (o ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) Elem() ActivityEntityQueriesPropertiesQueryDefinitionsOutput {
	return o.ApplyT(func(v *ActivityEntityQueriesPropertiesQueryDefinitions) ActivityEntityQueriesPropertiesQueryDefinitions {
		if v != nil {
			return *v
		}
		var ret ActivityEntityQueriesPropertiesQueryDefinitions
		return ret
	}).(ActivityEntityQueriesPropertiesQueryDefinitionsOutput)
}

// The Activity query to run on a given entity
func (o ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityEntityQueriesPropertiesQueryDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// The Activity query definitions
type ActivityEntityQueriesPropertiesResponseQueryDefinitions struct {
	// The Activity query to run on a given entity
	Query *string `pulumi:"query"`
}

// The Activity query definitions
type ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput struct{ *pulumi.OutputState }

func (ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivityEntityQueriesPropertiesResponseQueryDefinitions)(nil)).Elem()
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput() ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput) ToActivityEntityQueriesPropertiesResponseQueryDefinitionsOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput) ToOutput(ctx context.Context) pulumix.Output[ActivityEntityQueriesPropertiesResponseQueryDefinitions] {
	return pulumix.Output[ActivityEntityQueriesPropertiesResponseQueryDefinitions]{
		OutputState: o.OutputState,
	}
}

// The Activity query to run on a given entity
func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActivityEntityQueriesPropertiesResponseQueryDefinitions) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput struct{ *pulumi.OutputState }

func (ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivityEntityQueriesPropertiesResponseQueryDefinitions)(nil)).Elem()
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) ToActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput() ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) ToActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutputWithContext(ctx context.Context) ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput {
	return o
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ActivityEntityQueriesPropertiesResponseQueryDefinitions] {
	return pulumix.Output[*ActivityEntityQueriesPropertiesResponseQueryDefinitions]{
		OutputState: o.OutputState,
	}
}

func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) Elem() ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput {
	return o.ApplyT(func(v *ActivityEntityQueriesPropertiesResponseQueryDefinitions) ActivityEntityQueriesPropertiesResponseQueryDefinitions {
		if v != nil {
			return *v
		}
		var ret ActivityEntityQueriesPropertiesResponseQueryDefinitions
		return ret
	}).(ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput)
}

// The Activity query to run on a given entity
func (o ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActivityEntityQueriesPropertiesResponseQueryDefinitions) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Represents Activity timeline item.
type ActivityTimelineItemResponse struct {
	// The grouping bucket end time.
	BucketEndTimeUTC string `pulumi:"bucketEndTimeUTC"`
	// The grouping bucket start time.
	BucketStartTimeUTC string `pulumi:"bucketStartTimeUTC"`
	// The activity timeline content.
	Content string `pulumi:"content"`
	// The time of the first activity in the grouping bucket.
	FirstActivityTimeUTC string `pulumi:"firstActivityTimeUTC"`
	// The entity query kind
	// Expected value is 'Activity'.
	Kind string `pulumi:"kind"`
	// The time of the last activity in the grouping bucket.
	LastActivityTimeUTC string `pulumi:"lastActivityTimeUTC"`
	// The activity query id.
	QueryId string `pulumi:"queryId"`
	// The activity timeline title.
	Title string `pulumi:"title"`
}

type AddIncidentTaskActionProperties struct {
	// The description of the task.
	Description *string `pulumi:"description"`
	// The title of the task.
	Title string `pulumi:"title"`
}

type AddIncidentTaskActionPropertiesResponse struct {
	// The description of the task.
	Description *string `pulumi:"description"`
	// The title of the task.
	Title string `pulumi:"title"`
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverride struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat *string `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat *string `pulumi:"alertDisplayNameFormat"`
	// List of additional dynamic properties to override
	AlertDynamicProperties []AlertPropertyMapping `pulumi:"alertDynamicProperties"`
	// the column name to take the alert severity from
	AlertSeverityColumnName *string `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName *string `pulumi:"alertTacticsColumnName"`
}

// AlertDetailsOverrideInput is an input type that accepts AlertDetailsOverrideArgs and AlertDetailsOverrideOutput values.
// You can construct a concrete instance of `AlertDetailsOverrideInput` via:
//
//	AlertDetailsOverrideArgs{...}
type AlertDetailsOverrideInput interface {
	pulumi.Input

	ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput
	ToAlertDetailsOverrideOutputWithContext(context.Context) AlertDetailsOverrideOutput
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideArgs struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat pulumi.StringPtrInput `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat pulumi.StringPtrInput `pulumi:"alertDisplayNameFormat"`
	// List of additional dynamic properties to override
	AlertDynamicProperties AlertPropertyMappingArrayInput `pulumi:"alertDynamicProperties"`
	// the column name to take the alert severity from
	AlertSeverityColumnName pulumi.StringPtrInput `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName pulumi.StringPtrInput `pulumi:"alertTacticsColumnName"`
}

func (AlertDetailsOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverride)(nil)).Elem()
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput {
	return i.ToAlertDetailsOverrideOutputWithContext(context.Background())
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverrideOutputWithContext(ctx context.Context) AlertDetailsOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverrideOutput)
}

func (i AlertDetailsOverrideArgs) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverride] {
	return pulumix.Output[AlertDetailsOverride]{
		OutputState: i.ToAlertDetailsOverrideOutputWithContext(ctx).OutputState,
	}
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return i.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (i AlertDetailsOverrideArgs) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverrideOutput).ToAlertDetailsOverridePtrOutputWithContext(ctx)
}

// AlertDetailsOverridePtrInput is an input type that accepts AlertDetailsOverrideArgs, AlertDetailsOverridePtr and AlertDetailsOverridePtrOutput values.
// You can construct a concrete instance of `AlertDetailsOverridePtrInput` via:
//
//	        AlertDetailsOverrideArgs{...}
//
//	or:
//
//	        nil
type AlertDetailsOverridePtrInput interface {
	pulumi.Input

	ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput
	ToAlertDetailsOverridePtrOutputWithContext(context.Context) AlertDetailsOverridePtrOutput
}

type alertDetailsOverridePtrType AlertDetailsOverrideArgs

func AlertDetailsOverridePtr(v *AlertDetailsOverrideArgs) AlertDetailsOverridePtrInput {
	return (*alertDetailsOverridePtrType)(v)
}

func (*alertDetailsOverridePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverride)(nil)).Elem()
}

func (i *alertDetailsOverridePtrType) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return i.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (i *alertDetailsOverridePtrType) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertDetailsOverridePtrOutput)
}

func (i *alertDetailsOverridePtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverride] {
	return pulumix.Output[*AlertDetailsOverride]{
		OutputState: i.ToAlertDetailsOverridePtrOutputWithContext(ctx).OutputState,
	}
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverride)(nil)).Elem()
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverrideOutput() AlertDetailsOverrideOutput {
	return o
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverrideOutputWithContext(ctx context.Context) AlertDetailsOverrideOutput {
	return o
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return o.ToAlertDetailsOverridePtrOutputWithContext(context.Background())
}

func (o AlertDetailsOverrideOutput) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertDetailsOverride) *AlertDetailsOverride {
		return &v
	}).(AlertDetailsOverridePtrOutput)
}

func (o AlertDetailsOverrideOutput) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverride] {
	return pulumix.Output[AlertDetailsOverride]{
		OutputState: o.OutputState,
	}
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertDescriptionFormat }).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertDisplayNameFormat }).(pulumi.StringPtrOutput)
}

// List of additional dynamic properties to override
func (o AlertDetailsOverrideOutput) AlertDynamicProperties() AlertPropertyMappingArrayOutput {
	return o.ApplyT(func(v AlertDetailsOverride) []AlertPropertyMapping { return v.AlertDynamicProperties }).(AlertPropertyMappingArrayOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertSeverityColumnName }).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverride) *string { return v.AlertTacticsColumnName }).(pulumi.StringPtrOutput)
}

type AlertDetailsOverridePtrOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverridePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverride)(nil)).Elem()
}

func (o AlertDetailsOverridePtrOutput) ToAlertDetailsOverridePtrOutput() AlertDetailsOverridePtrOutput {
	return o
}

func (o AlertDetailsOverridePtrOutput) ToAlertDetailsOverridePtrOutputWithContext(ctx context.Context) AlertDetailsOverridePtrOutput {
	return o
}

func (o AlertDetailsOverridePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverride] {
	return pulumix.Output[*AlertDetailsOverride]{
		OutputState: o.OutputState,
	}
}

func (o AlertDetailsOverridePtrOutput) Elem() AlertDetailsOverrideOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) AlertDetailsOverride {
		if v != nil {
			return *v
		}
		var ret AlertDetailsOverride
		return ret
	}).(AlertDetailsOverrideOutput)
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverridePtrOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertDescriptionFormat
	}).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverridePtrOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertDisplayNameFormat
	}).(pulumi.StringPtrOutput)
}

// List of additional dynamic properties to override
func (o AlertDetailsOverridePtrOutput) AlertDynamicProperties() AlertPropertyMappingArrayOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) []AlertPropertyMapping {
		if v == nil {
			return nil
		}
		return v.AlertDynamicProperties
	}).(AlertPropertyMappingArrayOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverridePtrOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertSeverityColumnName
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverridePtrOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverride) *string {
		if v == nil {
			return nil
		}
		return v.AlertTacticsColumnName
	}).(pulumi.StringPtrOutput)
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideResponse struct {
	// the format containing columns name(s) to override the alert description
	AlertDescriptionFormat *string `pulumi:"alertDescriptionFormat"`
	// the format containing columns name(s) to override the alert name
	AlertDisplayNameFormat *string `pulumi:"alertDisplayNameFormat"`
	// List of additional dynamic properties to override
	AlertDynamicProperties []AlertPropertyMappingResponse `pulumi:"alertDynamicProperties"`
	// the column name to take the alert severity from
	AlertSeverityColumnName *string `pulumi:"alertSeverityColumnName"`
	// the column name to take the alert tactics from
	AlertTacticsColumnName *string `pulumi:"alertTacticsColumnName"`
}

// Settings for how to dynamically override alert static details
type AlertDetailsOverrideResponseOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertDetailsOverrideResponse)(nil)).Elem()
}

func (o AlertDetailsOverrideResponseOutput) ToAlertDetailsOverrideResponseOutput() AlertDetailsOverrideResponseOutput {
	return o
}

func (o AlertDetailsOverrideResponseOutput) ToAlertDetailsOverrideResponseOutputWithContext(ctx context.Context) AlertDetailsOverrideResponseOutput {
	return o
}

func (o AlertDetailsOverrideResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AlertDetailsOverrideResponse] {
	return pulumix.Output[AlertDetailsOverrideResponse]{
		OutputState: o.OutputState,
	}
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideResponseOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertDescriptionFormat }).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideResponseOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertDisplayNameFormat }).(pulumi.StringPtrOutput)
}

// List of additional dynamic properties to override
func (o AlertDetailsOverrideResponseOutput) AlertDynamicProperties() AlertPropertyMappingResponseArrayOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) []AlertPropertyMappingResponse { return v.AlertDynamicProperties }).(AlertPropertyMappingResponseArrayOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideResponseOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertSeverityColumnName }).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideResponseOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertDetailsOverrideResponse) *string { return v.AlertTacticsColumnName }).(pulumi.StringPtrOutput)
}

type AlertDetailsOverrideResponsePtrOutput struct{ *pulumi.OutputState }

func (AlertDetailsOverrideResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertDetailsOverrideResponse)(nil)).Elem()
}

func (o AlertDetailsOverrideResponsePtrOutput) ToAlertDetailsOverrideResponsePtrOutput() AlertDetailsOverrideResponsePtrOutput {
	return o
}

func (o AlertDetailsOverrideResponsePtrOutput) ToAlertDetailsOverrideResponsePtrOutputWithContext(ctx context.Context) AlertDetailsOverrideResponsePtrOutput {
	return o
}

func (o AlertDetailsOverrideResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertDetailsOverrideResponse] {
	return pulumix.Output[*AlertDetailsOverrideResponse]{
		OutputState: o.OutputState,
	}
}

func (o AlertDetailsOverrideResponsePtrOutput) Elem() AlertDetailsOverrideResponseOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) AlertDetailsOverrideResponse {
		if v != nil {
			return *v
		}
		var ret AlertDetailsOverrideResponse
		return ret
	}).(AlertDetailsOverrideResponseOutput)
}

// the format containing columns name(s) to override the alert description
func (o AlertDetailsOverrideResponsePtrOutput) AlertDescriptionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertDescriptionFormat
	}).(pulumi.StringPtrOutput)
}

// the format containing columns name(s) to override the alert name
func (o AlertDetailsOverrideResponsePtrOutput) AlertDisplayNameFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertDisplayNameFormat
	}).(pulumi.StringPtrOutput)
}

// List of additional dynamic properties to override
func (o AlertDetailsOverrideResponsePtrOutput) AlertDynamicProperties() AlertPropertyMappingResponseArrayOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) []AlertPropertyMappingResponse {
		if v == nil {
			return nil
		}
		return v.AlertDynamicProperties
	}).(AlertPropertyMappingResponseArrayOutput)
}

// the column name to take the alert severity from
func (o AlertDetailsOverrideResponsePtrOutput) AlertSeverityColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertSeverityColumnName
	}).(pulumi.StringPtrOutput)
}

// the column name to take the alert tactics from
func (o AlertDetailsOverrideResponsePtrOutput) AlertTacticsColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertDetailsOverrideResponse) *string {
		if v == nil {
			return nil
		}
		return v.AlertTacticsColumnName
	}).(pulumi.StringPtrOutput)
}

// A single alert property mapping to override
type AlertPropertyMapping struct {
	// The V3 alert property
	AlertProperty *string `pulumi:"alertProperty"`
	// the column name to use to override this property
	Value *string `pulumi:"value"`
}

// AlertPropertyMappingInput is an input type that accepts AlertPropertyMappingArgs and AlertPropertyMappingOutput values.
// You can construct a concrete instance of `AlertPropertyMappingInput` via:
//
//	AlertPropertyMappingArgs{...}
type AlertPropertyMappingInput interface {
	pulumi.Input

	ToAlertPropertyMappingOutput() AlertPropertyMappingOutput
	ToAlertPropertyMappingOutputWithContext(context.Context) AlertPropertyMappingOutput
}

// A single alert property mapping to override
type AlertPropertyMappingArgs struct {
	// The V3 alert property
	AlertProperty pulumi.StringPtrInput `pulumi:"alertProperty"`
	// the column name to use to override this property
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AlertPropertyMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPropertyMapping)(nil)).Elem()
}

func (i AlertPropertyMappingArgs) ToAlertPropertyMappingOutput() AlertPropertyMappingOutput {
	return i.ToAlertPropertyMappingOutputWithContext(context.Background())
}

func (i AlertPropertyMappingArgs) ToAlertPropertyMappingOutputWithContext(ctx context.Context) AlertPropertyMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPropertyMappingOutput)
}

func (i AlertPropertyMappingArgs) ToOutput(ctx context.Context) pulumix.Output[AlertPropertyMapping] {
	return pulumix.Output[AlertPropertyMapping]{
		OutputState: i.ToAlertPropertyMappingOutputWithContext(ctx).OutputState,
	}
}

// AlertPropertyMappingArrayInput is an input type that accepts AlertPropertyMappingArray and AlertPropertyMappingArrayOutput values.
// You can construct a concrete instance of `AlertPropertyMappingArrayInput` via:
//
//	AlertPropertyMappingArray{ AlertPropertyMappingArgs{...} }
type AlertPropertyMappingArrayInput interface {
	pulumi.Input

	ToAlertPropertyMappingArrayOutput() AlertPropertyMappingArrayOutput
	ToAlertPropertyMappingArrayOutputWithContext(context.Context) AlertPropertyMappingArrayOutput
}

type AlertPropertyMappingArray []AlertPropertyMappingInput

func (AlertPropertyMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPropertyMapping)(nil)).Elem()
}

func (i AlertPropertyMappingArray) ToAlertPropertyMappingArrayOutput() AlertPropertyMappingArrayOutput {
	return i.ToAlertPropertyMappingArrayOutputWithContext(context.Background())
}

func (i AlertPropertyMappingArray) ToAlertPropertyMappingArrayOutputWithContext(ctx context.Context) AlertPropertyMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPropertyMappingArrayOutput)
}

func (i AlertPropertyMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]AlertPropertyMapping] {
	return pulumix.Output[[]AlertPropertyMapping]{
		OutputState: i.ToAlertPropertyMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// A single alert property mapping to override
type AlertPropertyMappingOutput struct{ *pulumi.OutputState }

func (AlertPropertyMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPropertyMapping)(nil)).Elem()
}

func (o AlertPropertyMappingOutput) ToAlertPropertyMappingOutput() AlertPropertyMappingOutput {
	return o
}

func (o AlertPropertyMappingOutput) ToAlertPropertyMappingOutputWithContext(ctx context.Context) AlertPropertyMappingOutput {
	return o
}

func (o AlertPropertyMappingOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPropertyMapping] {
	return pulumix.Output[AlertPropertyMapping]{
		OutputState: o.OutputState,
	}
}

// The V3 alert property
func (o AlertPropertyMappingOutput) AlertProperty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPropertyMapping) *string { return v.AlertProperty }).(pulumi.StringPtrOutput)
}

// the column name to use to override this property
func (o AlertPropertyMappingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPropertyMapping) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AlertPropertyMappingArrayOutput struct{ *pulumi.OutputState }

func (AlertPropertyMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPropertyMapping)(nil)).Elem()
}

func (o AlertPropertyMappingArrayOutput) ToAlertPropertyMappingArrayOutput() AlertPropertyMappingArrayOutput {
	return o
}

func (o AlertPropertyMappingArrayOutput) ToAlertPropertyMappingArrayOutputWithContext(ctx context.Context) AlertPropertyMappingArrayOutput {
	return o
}

func (o AlertPropertyMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertPropertyMapping] {
	return pulumix.Output[[]AlertPropertyMapping]{
		OutputState: o.OutputState,
	}
}

func (o AlertPropertyMappingArrayOutput) Index(i pulumi.IntInput) AlertPropertyMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPropertyMapping {
		return vs[0].([]AlertPropertyMapping)[vs[1].(int)]
	}).(AlertPropertyMappingOutput)
}

// A single alert property mapping to override
type AlertPropertyMappingResponse struct {
	// The V3 alert property
	AlertProperty *string `pulumi:"alertProperty"`
	// the column name to use to override this property
	Value *string `pulumi:"value"`
}

// A single alert property mapping to override
type AlertPropertyMappingResponseOutput struct{ *pulumi.OutputState }

func (AlertPropertyMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPropertyMappingResponse)(nil)).Elem()
}

func (o AlertPropertyMappingResponseOutput) ToAlertPropertyMappingResponseOutput() AlertPropertyMappingResponseOutput {
	return o
}

func (o AlertPropertyMappingResponseOutput) ToAlertPropertyMappingResponseOutputWithContext(ctx context.Context) AlertPropertyMappingResponseOutput {
	return o
}

func (o AlertPropertyMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AlertPropertyMappingResponse] {
	return pulumix.Output[AlertPropertyMappingResponse]{
		OutputState: o.OutputState,
	}
}

// The V3 alert property
func (o AlertPropertyMappingResponseOutput) AlertProperty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPropertyMappingResponse) *string { return v.AlertProperty }).(pulumi.StringPtrOutput)
}

// the column name to use to override this property
func (o AlertPropertyMappingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPropertyMappingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AlertPropertyMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (AlertPropertyMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPropertyMappingResponse)(nil)).Elem()
}

func (o AlertPropertyMappingResponseArrayOutput) ToAlertPropertyMappingResponseArrayOutput() AlertPropertyMappingResponseArrayOutput {
	return o
}

func (o AlertPropertyMappingResponseArrayOutput) ToAlertPropertyMappingResponseArrayOutputWithContext(ctx context.Context) AlertPropertyMappingResponseArrayOutput {
	return o
}

func (o AlertPropertyMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AlertPropertyMappingResponse] {
	return pulumix.Output[[]AlertPropertyMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o AlertPropertyMappingResponseArrayOutput) Index(i pulumi.IntInput) AlertPropertyMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPropertyMappingResponse {
		return vs[0].([]AlertPropertyMappingResponse)[vs[1].(int)]
	}).(AlertPropertyMappingResponseOutput)
}

// Alerts data type for data connectors.
type AlertsDataTypeOfDataConnector struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommon `pulumi:"alerts"`
}

// AlertsDataTypeOfDataConnectorInput is an input type that accepts AlertsDataTypeOfDataConnectorArgs and AlertsDataTypeOfDataConnectorOutput values.
// You can construct a concrete instance of `AlertsDataTypeOfDataConnectorInput` via:
//
//	AlertsDataTypeOfDataConnectorArgs{...}
type AlertsDataTypeOfDataConnectorInput interface {
	pulumi.Input

	ToAlertsDataTypeOfDataConnectorOutput() AlertsDataTypeOfDataConnectorOutput
	ToAlertsDataTypeOfDataConnectorOutputWithContext(context.Context) AlertsDataTypeOfDataConnectorOutput
}

// Alerts data type for data connectors.
type AlertsDataTypeOfDataConnectorArgs struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommonInput `pulumi:"alerts"`
}

func (AlertsDataTypeOfDataConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertsDataTypeOfDataConnector)(nil)).Elem()
}

func (i AlertsDataTypeOfDataConnectorArgs) ToAlertsDataTypeOfDataConnectorOutput() AlertsDataTypeOfDataConnectorOutput {
	return i.ToAlertsDataTypeOfDataConnectorOutputWithContext(context.Background())
}

func (i AlertsDataTypeOfDataConnectorArgs) ToAlertsDataTypeOfDataConnectorOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertsDataTypeOfDataConnectorOutput)
}

func (i AlertsDataTypeOfDataConnectorArgs) ToOutput(ctx context.Context) pulumix.Output[AlertsDataTypeOfDataConnector] {
	return pulumix.Output[AlertsDataTypeOfDataConnector]{
		OutputState: i.ToAlertsDataTypeOfDataConnectorOutputWithContext(ctx).OutputState,
	}
}

func (i AlertsDataTypeOfDataConnectorArgs) ToAlertsDataTypeOfDataConnectorPtrOutput() AlertsDataTypeOfDataConnectorPtrOutput {
	return i.ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(context.Background())
}

func (i AlertsDataTypeOfDataConnectorArgs) ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertsDataTypeOfDataConnectorOutput).ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx)
}

// AlertsDataTypeOfDataConnectorPtrInput is an input type that accepts AlertsDataTypeOfDataConnectorArgs, AlertsDataTypeOfDataConnectorPtr and AlertsDataTypeOfDataConnectorPtrOutput values.
// You can construct a concrete instance of `AlertsDataTypeOfDataConnectorPtrInput` via:
//
//	        AlertsDataTypeOfDataConnectorArgs{...}
//
//	or:
//
//	        nil
type AlertsDataTypeOfDataConnectorPtrInput interface {
	pulumi.Input

	ToAlertsDataTypeOfDataConnectorPtrOutput() AlertsDataTypeOfDataConnectorPtrOutput
	ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(context.Context) AlertsDataTypeOfDataConnectorPtrOutput
}

type alertsDataTypeOfDataConnectorPtrType AlertsDataTypeOfDataConnectorArgs

func AlertsDataTypeOfDataConnectorPtr(v *AlertsDataTypeOfDataConnectorArgs) AlertsDataTypeOfDataConnectorPtrInput {
	return (*alertsDataTypeOfDataConnectorPtrType)(v)
}

func (*alertsDataTypeOfDataConnectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertsDataTypeOfDataConnector)(nil)).Elem()
}

func (i *alertsDataTypeOfDataConnectorPtrType) ToAlertsDataTypeOfDataConnectorPtrOutput() AlertsDataTypeOfDataConnectorPtrOutput {
	return i.ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(context.Background())
}

func (i *alertsDataTypeOfDataConnectorPtrType) ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertsDataTypeOfDataConnectorPtrOutput)
}

func (i *alertsDataTypeOfDataConnectorPtrType) ToOutput(ctx context.Context) pulumix.Output[*AlertsDataTypeOfDataConnector] {
	return pulumix.Output[*AlertsDataTypeOfDataConnector]{
		OutputState: i.ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx).OutputState,
	}
}

// Alerts data type for data connectors.
type AlertsDataTypeOfDataConnectorOutput struct{ *pulumi.OutputState }

func (AlertsDataTypeOfDataConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertsDataTypeOfDataConnector)(nil)).Elem()
}

func (o AlertsDataTypeOfDataConnectorOutput) ToAlertsDataTypeOfDataConnectorOutput() AlertsDataTypeOfDataConnectorOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorOutput) ToAlertsDataTypeOfDataConnectorOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorOutput) ToAlertsDataTypeOfDataConnectorPtrOutput() AlertsDataTypeOfDataConnectorPtrOutput {
	return o.ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(context.Background())
}

func (o AlertsDataTypeOfDataConnectorOutput) ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertsDataTypeOfDataConnector) *AlertsDataTypeOfDataConnector {
		return &v
	}).(AlertsDataTypeOfDataConnectorPtrOutput)
}

func (o AlertsDataTypeOfDataConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[AlertsDataTypeOfDataConnector] {
	return pulumix.Output[AlertsDataTypeOfDataConnector]{
		OutputState: o.OutputState,
	}
}

// Alerts data type connection.
func (o AlertsDataTypeOfDataConnectorOutput) Alerts() DataConnectorDataTypeCommonOutput {
	return o.ApplyT(func(v AlertsDataTypeOfDataConnector) DataConnectorDataTypeCommon { return v.Alerts }).(DataConnectorDataTypeCommonOutput)
}

type AlertsDataTypeOfDataConnectorPtrOutput struct{ *pulumi.OutputState }

func (AlertsDataTypeOfDataConnectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertsDataTypeOfDataConnector)(nil)).Elem()
}

func (o AlertsDataTypeOfDataConnectorPtrOutput) ToAlertsDataTypeOfDataConnectorPtrOutput() AlertsDataTypeOfDataConnectorPtrOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorPtrOutput) ToAlertsDataTypeOfDataConnectorPtrOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorPtrOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertsDataTypeOfDataConnector] {
	return pulumix.Output[*AlertsDataTypeOfDataConnector]{
		OutputState: o.OutputState,
	}
}

func (o AlertsDataTypeOfDataConnectorPtrOutput) Elem() AlertsDataTypeOfDataConnectorOutput {
	return o.ApplyT(func(v *AlertsDataTypeOfDataConnector) AlertsDataTypeOfDataConnector {
		if v != nil {
			return *v
		}
		var ret AlertsDataTypeOfDataConnector
		return ret
	}).(AlertsDataTypeOfDataConnectorOutput)
}

// Alerts data type connection.
func (o AlertsDataTypeOfDataConnectorPtrOutput) Alerts() DataConnectorDataTypeCommonPtrOutput {
	return o.ApplyT(func(v *AlertsDataTypeOfDataConnector) *DataConnectorDataTypeCommon {
		if v == nil {
			return nil
		}
		return &v.Alerts
	}).(DataConnectorDataTypeCommonPtrOutput)
}

// Alerts data type for data connectors.
type AlertsDataTypeOfDataConnectorResponse struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommonResponse `pulumi:"alerts"`
}

// Alerts data type for data connectors.
type AlertsDataTypeOfDataConnectorResponseOutput struct{ *pulumi.OutputState }

func (AlertsDataTypeOfDataConnectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertsDataTypeOfDataConnectorResponse)(nil)).Elem()
}

func (o AlertsDataTypeOfDataConnectorResponseOutput) ToAlertsDataTypeOfDataConnectorResponseOutput() AlertsDataTypeOfDataConnectorResponseOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorResponseOutput) ToAlertsDataTypeOfDataConnectorResponseOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorResponseOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AlertsDataTypeOfDataConnectorResponse] {
	return pulumix.Output[AlertsDataTypeOfDataConnectorResponse]{
		OutputState: o.OutputState,
	}
}

// Alerts data type connection.
func (o AlertsDataTypeOfDataConnectorResponseOutput) Alerts() DataConnectorDataTypeCommonResponseOutput {
	return o.ApplyT(func(v AlertsDataTypeOfDataConnectorResponse) DataConnectorDataTypeCommonResponse { return v.Alerts }).(DataConnectorDataTypeCommonResponseOutput)
}

type AlertsDataTypeOfDataConnectorResponsePtrOutput struct{ *pulumi.OutputState }

func (AlertsDataTypeOfDataConnectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertsDataTypeOfDataConnectorResponse)(nil)).Elem()
}

func (o AlertsDataTypeOfDataConnectorResponsePtrOutput) ToAlertsDataTypeOfDataConnectorResponsePtrOutput() AlertsDataTypeOfDataConnectorResponsePtrOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorResponsePtrOutput) ToAlertsDataTypeOfDataConnectorResponsePtrOutputWithContext(ctx context.Context) AlertsDataTypeOfDataConnectorResponsePtrOutput {
	return o
}

func (o AlertsDataTypeOfDataConnectorResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AlertsDataTypeOfDataConnectorResponse] {
	return pulumix.Output[*AlertsDataTypeOfDataConnectorResponse]{
		OutputState: o.OutputState,
	}
}

func (o AlertsDataTypeOfDataConnectorResponsePtrOutput) Elem() AlertsDataTypeOfDataConnectorResponseOutput {
	return o.ApplyT(func(v *AlertsDataTypeOfDataConnectorResponse) AlertsDataTypeOfDataConnectorResponse {
		if v != nil {
			return *v
		}
		var ret AlertsDataTypeOfDataConnectorResponse
		return ret
	}).(AlertsDataTypeOfDataConnectorResponseOutput)
}

// Alerts data type connection.
func (o AlertsDataTypeOfDataConnectorResponsePtrOutput) Alerts() DataConnectorDataTypeCommonResponsePtrOutput {
	return o.ApplyT(func(v *AlertsDataTypeOfDataConnectorResponse) *DataConnectorDataTypeCommonResponse {
		if v == nil {
			return nil
		}
		return &v.Alerts
	}).(DataConnectorDataTypeCommonResponsePtrOutput)
}

// Represents anomaly timeline item.
type AnomalyTimelineItemResponse struct {
	// The anomaly azure resource id.
	AzureResourceId string `pulumi:"azureResourceId"`
	// The anomaly description.
	Description *string `pulumi:"description"`
	// The anomaly name.
	DisplayName string `pulumi:"displayName"`
	// The anomaly end time.
	EndTimeUtc string `pulumi:"endTimeUtc"`
	// The intent of the anomaly.
	Intent *string `pulumi:"intent"`
	// The entity query kind
	// Expected value is 'Anomaly'.
	Kind string `pulumi:"kind"`
	// The anomaly product name.
	ProductName *string `pulumi:"productName"`
	// The reasons that cause the anomaly.
	Reasons []string `pulumi:"reasons"`
	// The anomaly start time.
	StartTimeUtc string `pulumi:"startTimeUtc"`
	// The techniques of the anomaly.
	Techniques []string `pulumi:"techniques"`
	// The anomaly generated time.
	TimeGenerated string `pulumi:"timeGenerated"`
	// The name of the anomaly vendor.
	Vendor *string `pulumi:"vendor"`
}

// An entity describing a content item.
type AssignmentItem struct {
	// The resource id of the content item
	ResourceId *string `pulumi:"resourceId"`
}

// AssignmentItemInput is an input type that accepts AssignmentItemArgs and AssignmentItemOutput values.
// You can construct a concrete instance of `AssignmentItemInput` via:
//
//	AssignmentItemArgs{...}
type AssignmentItemInput interface {
	pulumi.Input

	ToAssignmentItemOutput() AssignmentItemOutput
	ToAssignmentItemOutputWithContext(context.Context) AssignmentItemOutput
}

// An entity describing a content item.
type AssignmentItemArgs struct {
	// The resource id of the content item
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (AssignmentItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentItem)(nil)).Elem()
}

func (i AssignmentItemArgs) ToAssignmentItemOutput() AssignmentItemOutput {
	return i.ToAssignmentItemOutputWithContext(context.Background())
}

func (i AssignmentItemArgs) ToAssignmentItemOutputWithContext(ctx context.Context) AssignmentItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentItemOutput)
}

func (i AssignmentItemArgs) ToOutput(ctx context.Context) pulumix.Output[AssignmentItem] {
	return pulumix.Output[AssignmentItem]{
		OutputState: i.ToAssignmentItemOutputWithContext(ctx).OutputState,
	}
}

// AssignmentItemArrayInput is an input type that accepts AssignmentItemArray and AssignmentItemArrayOutput values.
// You can construct a concrete instance of `AssignmentItemArrayInput` via:
//
//	AssignmentItemArray{ AssignmentItemArgs{...} }
type AssignmentItemArrayInput interface {
	pulumi.Input

	ToAssignmentItemArrayOutput() AssignmentItemArrayOutput
	ToAssignmentItemArrayOutputWithContext(context.Context) AssignmentItemArrayOutput
}

type AssignmentItemArray []AssignmentItemInput

func (AssignmentItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentItem)(nil)).Elem()
}

func (i AssignmentItemArray) ToAssignmentItemArrayOutput() AssignmentItemArrayOutput {
	return i.ToAssignmentItemArrayOutputWithContext(context.Background())
}

func (i AssignmentItemArray) ToAssignmentItemArrayOutputWithContext(ctx context.Context) AssignmentItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignmentItemArrayOutput)
}

func (i AssignmentItemArray) ToOutput(ctx context.Context) pulumix.Output[[]AssignmentItem] {
	return pulumix.Output[[]AssignmentItem]{
		OutputState: i.ToAssignmentItemArrayOutputWithContext(ctx).OutputState,
	}
}

// An entity describing a content item.
type AssignmentItemOutput struct{ *pulumi.OutputState }

func (AssignmentItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentItem)(nil)).Elem()
}

func (o AssignmentItemOutput) ToAssignmentItemOutput() AssignmentItemOutput {
	return o
}

func (o AssignmentItemOutput) ToAssignmentItemOutputWithContext(ctx context.Context) AssignmentItemOutput {
	return o
}

func (o AssignmentItemOutput) ToOutput(ctx context.Context) pulumix.Output[AssignmentItem] {
	return pulumix.Output[AssignmentItem]{
		OutputState: o.OutputState,
	}
}

// The resource id of the content item
func (o AssignmentItemOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentItem) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AssignmentItemArrayOutput struct{ *pulumi.OutputState }

func (AssignmentItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentItem)(nil)).Elem()
}

func (o AssignmentItemArrayOutput) ToAssignmentItemArrayOutput() AssignmentItemArrayOutput {
	return o
}

func (o AssignmentItemArrayOutput) ToAssignmentItemArrayOutputWithContext(ctx context.Context) AssignmentItemArrayOutput {
	return o
}

func (o AssignmentItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssignmentItem] {
	return pulumix.Output[[]AssignmentItem]{
		OutputState: o.OutputState,
	}
}

func (o AssignmentItemArrayOutput) Index(i pulumi.IntInput) AssignmentItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentItem {
		return vs[0].([]AssignmentItem)[vs[1].(int)]
	}).(AssignmentItemOutput)
}

// An entity describing a content item.
type AssignmentItemResponse struct {
	// The resource id of the content item
	ResourceId *string `pulumi:"resourceId"`
}

// An entity describing a content item.
type AssignmentItemResponseOutput struct{ *pulumi.OutputState }

func (AssignmentItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignmentItemResponse)(nil)).Elem()
}

func (o AssignmentItemResponseOutput) ToAssignmentItemResponseOutput() AssignmentItemResponseOutput {
	return o
}

func (o AssignmentItemResponseOutput) ToAssignmentItemResponseOutputWithContext(ctx context.Context) AssignmentItemResponseOutput {
	return o
}

func (o AssignmentItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AssignmentItemResponse] {
	return pulumix.Output[AssignmentItemResponse]{
		OutputState: o.OutputState,
	}
}

// The resource id of the content item
func (o AssignmentItemResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AssignmentItemResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AssignmentItemResponseArrayOutput struct{ *pulumi.OutputState }

func (AssignmentItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AssignmentItemResponse)(nil)).Elem()
}

func (o AssignmentItemResponseArrayOutput) ToAssignmentItemResponseArrayOutput() AssignmentItemResponseArrayOutput {
	return o
}

func (o AssignmentItemResponseArrayOutput) ToAssignmentItemResponseArrayOutputWithContext(ctx context.Context) AssignmentItemResponseArrayOutput {
	return o
}

func (o AssignmentItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AssignmentItemResponse] {
	return pulumix.Output[[]AssignmentItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o AssignmentItemResponseArrayOutput) Index(i pulumi.IntInput) AssignmentItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AssignmentItemResponse {
		return vs[0].([]AssignmentItemResponse)[vs[1].(int)]
	}).(AssignmentItemResponseOutput)
}

// Describes an automation rule action to add a task to an incident
type AutomationRuleAddIncidentTaskAction struct {
	ActionConfiguration *AddIncidentTaskActionProperties `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'AddIncidentTask'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

// Describes an automation rule action to add a task to an incident
type AutomationRuleAddIncidentTaskActionResponse struct {
	ActionConfiguration *AddIncidentTaskActionPropertiesResponse `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'AddIncidentTask'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

type AutomationRuleBooleanCondition struct {
	InnerConditions []interface{} `pulumi:"innerConditions"`
	Operator        *string       `pulumi:"operator"`
}

type AutomationRuleBooleanConditionResponse struct {
	InnerConditions []interface{} `pulumi:"innerConditions"`
	Operator        *string       `pulumi:"operator"`
}

// Describes an automation rule action to modify an object's properties
type AutomationRuleModifyPropertiesAction struct {
	ActionConfiguration *IncidentPropertiesAction `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'ModifyProperties'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

// Describes an automation rule action to modify an object's properties
type AutomationRuleModifyPropertiesActionResponse struct {
	ActionConfiguration *IncidentPropertiesActionResponse `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'ModifyProperties'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

type AutomationRulePropertyArrayChangedValuesCondition struct {
	ArrayType  *string `pulumi:"arrayType"`
	ChangeType *string `pulumi:"changeType"`
}

type AutomationRulePropertyArrayChangedValuesConditionResponse struct {
	ArrayType  *string `pulumi:"arrayType"`
	ChangeType *string `pulumi:"changeType"`
}

type AutomationRulePropertyArrayValuesCondition struct {
	ArrayConditionType *string       `pulumi:"arrayConditionType"`
	ArrayType          *string       `pulumi:"arrayType"`
	ItemConditions     []interface{} `pulumi:"itemConditions"`
}

type AutomationRulePropertyArrayValuesConditionResponse struct {
	ArrayConditionType *string       `pulumi:"arrayConditionType"`
	ArrayType          *string       `pulumi:"arrayType"`
	ItemConditions     []interface{} `pulumi:"itemConditions"`
}

type AutomationRulePropertyValuesChangedCondition struct {
	ChangeType     *string  `pulumi:"changeType"`
	Operator       *string  `pulumi:"operator"`
	PropertyName   *string  `pulumi:"propertyName"`
	PropertyValues []string `pulumi:"propertyValues"`
}

type AutomationRulePropertyValuesChangedConditionResponse struct {
	ChangeType     *string  `pulumi:"changeType"`
	Operator       *string  `pulumi:"operator"`
	PropertyName   *string  `pulumi:"propertyName"`
	PropertyValues []string `pulumi:"propertyValues"`
}

type AutomationRulePropertyValuesCondition struct {
	Operator *string `pulumi:"operator"`
	// The property to evaluate in an automation rule property condition.
	PropertyName   *string  `pulumi:"propertyName"`
	PropertyValues []string `pulumi:"propertyValues"`
}

type AutomationRulePropertyValuesConditionResponse struct {
	Operator *string `pulumi:"operator"`
	// The property to evaluate in an automation rule property condition.
	PropertyName   *string  `pulumi:"propertyName"`
	PropertyValues []string `pulumi:"propertyValues"`
}

// Describes an automation rule action to run a playbook
type AutomationRuleRunPlaybookAction struct {
	ActionConfiguration *PlaybookActionProperties `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'RunPlaybook'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

// Describes an automation rule action to run a playbook
type AutomationRuleRunPlaybookActionResponse struct {
	ActionConfiguration *PlaybookActionPropertiesResponse `pulumi:"actionConfiguration"`
	// The type of the automation rule action.
	// Expected value is 'RunPlaybook'.
	ActionType string `pulumi:"actionType"`
	Order      int    `pulumi:"order"`
}

// Describes automation rule triggering logic.
type AutomationRuleTriggeringLogic struct {
	// The conditions to evaluate to determine if the automation rule should be triggered on a given object.
	Conditions []interface{} `pulumi:"conditions"`
	// Determines when the automation rule should automatically expire and be disabled.
	ExpirationTimeUtc *string `pulumi:"expirationTimeUtc"`
	// Determines whether the automation rule is enabled or disabled.
	IsEnabled    bool   `pulumi:"isEnabled"`
	TriggersOn   string `pulumi:"triggersOn"`
	TriggersWhen string `pulumi:"triggersWhen"`
}

// AutomationRuleTriggeringLogicInput is an input type that accepts AutomationRuleTriggeringLogicArgs and AutomationRuleTriggeringLogicOutput values.
// You can construct a concrete instance of `AutomationRuleTriggeringLogicInput` via:
//
//	AutomationRuleTriggeringLogicArgs{...}
type AutomationRuleTriggeringLogicInput interface {
	pulumi.Input

	ToAutomationRuleTriggeringLogicOutput() AutomationRuleTriggeringLogicOutput
	ToAutomationRuleTriggeringLogicOutputWithContext(context.Context) AutomationRuleTriggeringLogicOutput
}

// Describes automation rule triggering logic.
type AutomationRuleTriggeringLogicArgs struct {
	// The conditions to evaluate to determine if the automation rule should be triggered on a given object.
	Conditions pulumi.ArrayInput `pulumi:"conditions"`
	// Determines when the automation rule should automatically expire and be disabled.
	ExpirationTimeUtc pulumi.StringPtrInput `pulumi:"expirationTimeUtc"`
	// Determines whether the automation rule is enabled or disabled.
	IsEnabled    pulumi.BoolInput   `pulumi:"isEnabled"`
	TriggersOn   pulumi.StringInput `pulumi:"triggersOn"`
	TriggersWhen pulumi.StringInput `pulumi:"triggersWhen"`
}

func (AutomationRuleTriggeringLogicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleTriggeringLogic)(nil)).Elem()
}

func (i AutomationRuleTriggeringLogicArgs) ToAutomationRuleTriggeringLogicOutput() AutomationRuleTriggeringLogicOutput {
	return i.ToAutomationRuleTriggeringLogicOutputWithContext(context.Background())
}

func (i AutomationRuleTriggeringLogicArgs) ToAutomationRuleTriggeringLogicOutputWithContext(ctx context.Context) AutomationRuleTriggeringLogicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRuleTriggeringLogicOutput)
}

func (i AutomationRuleTriggeringLogicArgs) ToOutput(ctx context.Context) pulumix.Output[AutomationRuleTriggeringLogic] {
	return pulumix.Output[AutomationRuleTriggeringLogic]{
		OutputState: i.ToAutomationRuleTriggeringLogicOutputWithContext(ctx).OutputState,
	}
}

// Describes automation rule triggering logic.
type AutomationRuleTriggeringLogicOutput struct{ *pulumi.OutputState }

func (AutomationRuleTriggeringLogicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleTriggeringLogic)(nil)).Elem()
}

func (o AutomationRuleTriggeringLogicOutput) ToAutomationRuleTriggeringLogicOutput() AutomationRuleTriggeringLogicOutput {
	return o
}

func (o AutomationRuleTriggeringLogicOutput) ToAutomationRuleTriggeringLogicOutputWithContext(ctx context.Context) AutomationRuleTriggeringLogicOutput {
	return o
}

func (o AutomationRuleTriggeringLogicOutput) ToOutput(ctx context.Context) pulumix.Output[AutomationRuleTriggeringLogic] {
	return pulumix.Output[AutomationRuleTriggeringLogic]{
		OutputState: o.OutputState,
	}
}

// The conditions to evaluate to determine if the automation rule should be triggered on a given object.
func (o AutomationRuleTriggeringLogicOutput) Conditions() pulumi.ArrayOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogic) []interface{} { return v.Conditions }).(pulumi.ArrayOutput)
}

// Determines when the automation rule should automatically expire and be disabled.
func (o AutomationRuleTriggeringLogicOutput) ExpirationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogic) *string { return v.ExpirationTimeUtc }).(pulumi.StringPtrOutput)
}

// Determines whether the automation rule is enabled or disabled.
func (o AutomationRuleTriggeringLogicOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogic) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o AutomationRuleTriggeringLogicOutput) TriggersOn() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogic) string { return v.TriggersOn }).(pulumi.StringOutput)
}

func (o AutomationRuleTriggeringLogicOutput) TriggersWhen() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogic) string { return v.TriggersWhen }).(pulumi.StringOutput)
}

// Describes automation rule triggering logic.
type AutomationRuleTriggeringLogicResponse struct {
	// The conditions to evaluate to determine if the automation rule should be triggered on a given object.
	Conditions []interface{} `pulumi:"conditions"`
	// Determines when the automation rule should automatically expire and be disabled.
	ExpirationTimeUtc *string `pulumi:"expirationTimeUtc"`
	// Determines whether the automation rule is enabled or disabled.
	IsEnabled    bool   `pulumi:"isEnabled"`
	TriggersOn   string `pulumi:"triggersOn"`
	TriggersWhen string `pulumi:"triggersWhen"`
}

// Describes automation rule triggering logic.
type AutomationRuleTriggeringLogicResponseOutput struct{ *pulumi.OutputState }

func (AutomationRuleTriggeringLogicResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRuleTriggeringLogicResponse)(nil)).Elem()
}

func (o AutomationRuleTriggeringLogicResponseOutput) ToAutomationRuleTriggeringLogicResponseOutput() AutomationRuleTriggeringLogicResponseOutput {
	return o
}

func (o AutomationRuleTriggeringLogicResponseOutput) ToAutomationRuleTriggeringLogicResponseOutputWithContext(ctx context.Context) AutomationRuleTriggeringLogicResponseOutput {
	return o
}

func (o AutomationRuleTriggeringLogicResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AutomationRuleTriggeringLogicResponse] {
	return pulumix.Output[AutomationRuleTriggeringLogicResponse]{
		OutputState: o.OutputState,
	}
}

// The conditions to evaluate to determine if the automation rule should be triggered on a given object.
func (o AutomationRuleTriggeringLogicResponseOutput) Conditions() pulumi.ArrayOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogicResponse) []interface{} { return v.Conditions }).(pulumi.ArrayOutput)
}

// Determines when the automation rule should automatically expire and be disabled.
func (o AutomationRuleTriggeringLogicResponseOutput) ExpirationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogicResponse) *string { return v.ExpirationTimeUtc }).(pulumi.StringPtrOutput)
}

// Determines whether the automation rule is enabled or disabled.
func (o AutomationRuleTriggeringLogicResponseOutput) IsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogicResponse) bool { return v.IsEnabled }).(pulumi.BoolOutput)
}

func (o AutomationRuleTriggeringLogicResponseOutput) TriggersOn() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogicResponse) string { return v.TriggersOn }).(pulumi.StringOutput)
}

func (o AutomationRuleTriggeringLogicResponseOutput) TriggersWhen() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRuleTriggeringLogicResponse) string { return v.TriggersWhen }).(pulumi.StringOutput)
}

// Connector Availability Status
type Availability struct {
	// Set connector as preview
	IsPreview *bool `pulumi:"isPreview"`
	// The connector Availability Status
	Status *int `pulumi:"status"`
}

// AvailabilityInput is an input type that accepts AvailabilityArgs and AvailabilityOutput values.
// You can construct a concrete instance of `AvailabilityInput` via:
//
//	AvailabilityArgs{...}
type AvailabilityInput interface {
	pulumi.Input

	ToAvailabilityOutput() AvailabilityOutput
	ToAvailabilityOutputWithContext(context.Context) AvailabilityOutput
}

// Connector Availability Status
type AvailabilityArgs struct {
	// Set connector as preview
	IsPreview pulumi.BoolPtrInput `pulumi:"isPreview"`
	// The connector Availability Status
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (AvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Availability)(nil)).Elem()
}

func (i AvailabilityArgs) ToAvailabilityOutput() AvailabilityOutput {
	return i.ToAvailabilityOutputWithContext(context.Background())
}

func (i AvailabilityArgs) ToAvailabilityOutputWithContext(ctx context.Context) AvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityOutput)
}

func (i AvailabilityArgs) ToOutput(ctx context.Context) pulumix.Output[Availability] {
	return pulumix.Output[Availability]{
		OutputState: i.ToAvailabilityOutputWithContext(ctx).OutputState,
	}
}

func (i AvailabilityArgs) ToAvailabilityPtrOutput() AvailabilityPtrOutput {
	return i.ToAvailabilityPtrOutputWithContext(context.Background())
}

func (i AvailabilityArgs) ToAvailabilityPtrOutputWithContext(ctx context.Context) AvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityOutput).ToAvailabilityPtrOutputWithContext(ctx)
}

// AvailabilityPtrInput is an input type that accepts AvailabilityArgs, AvailabilityPtr and AvailabilityPtrOutput values.
// You can construct a concrete instance of `AvailabilityPtrInput` via:
//
//	        AvailabilityArgs{...}
//
//	or:
//
//	        nil
type AvailabilityPtrInput interface {
	pulumi.Input

	ToAvailabilityPtrOutput() AvailabilityPtrOutput
	ToAvailabilityPtrOutputWithContext(context.Context) AvailabilityPtrOutput
}

type availabilityPtrType AvailabilityArgs

func AvailabilityPtr(v *AvailabilityArgs) AvailabilityPtrInput {
	return (*availabilityPtrType)(v)
}

func (*availabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Availability)(nil)).Elem()
}

func (i *availabilityPtrType) ToAvailabilityPtrOutput() AvailabilityPtrOutput {
	return i.ToAvailabilityPtrOutputWithContext(context.Background())
}

func (i *availabilityPtrType) ToAvailabilityPtrOutputWithContext(ctx context.Context) AvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailabilityPtrOutput)
}

func (i *availabilityPtrType) ToOutput(ctx context.Context) pulumix.Output[*Availability] {
	return pulumix.Output[*Availability]{
		OutputState: i.ToAvailabilityPtrOutputWithContext(ctx).OutputState,
	}
}

// Connector Availability Status
type AvailabilityOutput struct{ *pulumi.OutputState }

func (AvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Availability)(nil)).Elem()
}

func (o AvailabilityOutput) ToAvailabilityOutput() AvailabilityOutput {
	return o
}

func (o AvailabilityOutput) ToAvailabilityOutputWithContext(ctx context.Context) AvailabilityOutput {
	return o
}

func (o AvailabilityOutput) ToAvailabilityPtrOutput() AvailabilityPtrOutput {
	return o.ToAvailabilityPtrOutputWithContext(context.Background())
}

func (o AvailabilityOutput) ToAvailabilityPtrOutputWithContext(ctx context.Context) AvailabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Availability) *Availability {
		return &v
	}).(AvailabilityPtrOutput)
}

func (o AvailabilityOutput) ToOutput(ctx context.Context) pulumix.Output[Availability] {
	return pulumix.Output[Availability]{
		OutputState: o.OutputState,
	}
}

// Set connector as preview
func (o AvailabilityOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Availability) *bool { return v.IsPreview }).(pulumi.BoolPtrOutput)
}

// The connector Availability Status
func (o AvailabilityOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Availability) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type AvailabilityPtrOutput struct{ *pulumi.OutputState }

func (AvailabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Availability)(nil)).Elem()
}

func (o AvailabilityPtrOutput) ToAvailabilityPtrOutput() AvailabilityPtrOutput {
	return o
}

func (o AvailabilityPtrOutput) ToAvailabilityPtrOutputWithContext(ctx context.Context) AvailabilityPtrOutput {
	return o
}

func (o AvailabilityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Availability] {
	return pulumix.Output[*Availability]{
		OutputState: o.OutputState,
	}
}

func (o AvailabilityPtrOutput) Elem() AvailabilityOutput {
	return o.ApplyT(func(v *Availability) Availability {
		if v != nil {
			return *v
		}
		var ret Availability
		return ret
	}).(AvailabilityOutput)
}

// Set connector as preview
func (o AvailabilityPtrOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Availability) *bool {
		if v == nil {
			return nil
		}
		return v.IsPreview
	}).(pulumi.BoolPtrOutput)
}

// The connector Availability Status
func (o AvailabilityPtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Availability) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// Connector Availability Status
type AvailabilityResponse struct {
	// Set connector as preview
	IsPreview *bool `pulumi:"isPreview"`
	// The connector Availability Status
	Status *int `pulumi:"status"`
}

// Connector Availability Status
type AvailabilityResponseOutput struct{ *pulumi.OutputState }

func (AvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailabilityResponse)(nil)).Elem()
}

func (o AvailabilityResponseOutput) ToAvailabilityResponseOutput() AvailabilityResponseOutput {
	return o
}

func (o AvailabilityResponseOutput) ToAvailabilityResponseOutputWithContext(ctx context.Context) AvailabilityResponseOutput {
	return o
}

func (o AvailabilityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AvailabilityResponse] {
	return pulumix.Output[AvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

// Set connector as preview
func (o AvailabilityResponseOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AvailabilityResponse) *bool { return v.IsPreview }).(pulumi.BoolPtrOutput)
}

// The connector Availability Status
func (o AvailabilityResponseOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AvailabilityResponse) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type AvailabilityResponsePtrOutput struct{ *pulumi.OutputState }

func (AvailabilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvailabilityResponse)(nil)).Elem()
}

func (o AvailabilityResponsePtrOutput) ToAvailabilityResponsePtrOutput() AvailabilityResponsePtrOutput {
	return o
}

func (o AvailabilityResponsePtrOutput) ToAvailabilityResponsePtrOutputWithContext(ctx context.Context) AvailabilityResponsePtrOutput {
	return o
}

func (o AvailabilityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AvailabilityResponse] {
	return pulumix.Output[*AvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

func (o AvailabilityResponsePtrOutput) Elem() AvailabilityResponseOutput {
	return o.ApplyT(func(v *AvailabilityResponse) AvailabilityResponse {
		if v != nil {
			return *v
		}
		var ret AvailabilityResponse
		return ret
	}).(AvailabilityResponseOutput)
}

// Set connector as preview
func (o AvailabilityResponsePtrOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvailabilityResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPreview
	}).(pulumi.BoolPtrOutput)
}

// The connector Availability Status
func (o AvailabilityResponsePtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AvailabilityResponse) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// The available data types for Amazon Web Services CloudTrail data connector.
type AwsCloudTrailDataConnectorDataTypes struct {
	// Logs data type.
	Logs AwsCloudTrailDataConnectorDataTypesLogs `pulumi:"logs"`
}

// AwsCloudTrailDataConnectorDataTypesInput is an input type that accepts AwsCloudTrailDataConnectorDataTypesArgs and AwsCloudTrailDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `AwsCloudTrailDataConnectorDataTypesInput` via:
//
//	AwsCloudTrailDataConnectorDataTypesArgs{...}
type AwsCloudTrailDataConnectorDataTypesInput interface {
	pulumi.Input

	ToAwsCloudTrailDataConnectorDataTypesOutput() AwsCloudTrailDataConnectorDataTypesOutput
	ToAwsCloudTrailDataConnectorDataTypesOutputWithContext(context.Context) AwsCloudTrailDataConnectorDataTypesOutput
}

// The available data types for Amazon Web Services CloudTrail data connector.
type AwsCloudTrailDataConnectorDataTypesArgs struct {
	// Logs data type.
	Logs AwsCloudTrailDataConnectorDataTypesLogsInput `pulumi:"logs"`
}

func (AwsCloudTrailDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypes)(nil)).Elem()
}

func (i AwsCloudTrailDataConnectorDataTypesArgs) ToAwsCloudTrailDataConnectorDataTypesOutput() AwsCloudTrailDataConnectorDataTypesOutput {
	return i.ToAwsCloudTrailDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i AwsCloudTrailDataConnectorDataTypesArgs) ToAwsCloudTrailDataConnectorDataTypesOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudTrailDataConnectorDataTypesOutput)
}

func (i AwsCloudTrailDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypes] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypes]{
		OutputState: i.ToAwsCloudTrailDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Amazon Web Services CloudTrail data connector.
type AwsCloudTrailDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (AwsCloudTrailDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypes)(nil)).Elem()
}

func (o AwsCloudTrailDataConnectorDataTypesOutput) ToAwsCloudTrailDataConnectorDataTypesOutput() AwsCloudTrailDataConnectorDataTypesOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesOutput) ToAwsCloudTrailDataConnectorDataTypesOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypes] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o AwsCloudTrailDataConnectorDataTypesOutput) Logs() AwsCloudTrailDataConnectorDataTypesLogsOutput {
	return o.ApplyT(func(v AwsCloudTrailDataConnectorDataTypes) AwsCloudTrailDataConnectorDataTypesLogs { return v.Logs }).(AwsCloudTrailDataConnectorDataTypesLogsOutput)
}

// Logs data type.
type AwsCloudTrailDataConnectorDataTypesLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// AwsCloudTrailDataConnectorDataTypesLogsInput is an input type that accepts AwsCloudTrailDataConnectorDataTypesLogsArgs and AwsCloudTrailDataConnectorDataTypesLogsOutput values.
// You can construct a concrete instance of `AwsCloudTrailDataConnectorDataTypesLogsInput` via:
//
//	AwsCloudTrailDataConnectorDataTypesLogsArgs{...}
type AwsCloudTrailDataConnectorDataTypesLogsInput interface {
	pulumi.Input

	ToAwsCloudTrailDataConnectorDataTypesLogsOutput() AwsCloudTrailDataConnectorDataTypesLogsOutput
	ToAwsCloudTrailDataConnectorDataTypesLogsOutputWithContext(context.Context) AwsCloudTrailDataConnectorDataTypesLogsOutput
}

// Logs data type.
type AwsCloudTrailDataConnectorDataTypesLogsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (AwsCloudTrailDataConnectorDataTypesLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypesLogs)(nil)).Elem()
}

func (i AwsCloudTrailDataConnectorDataTypesLogsArgs) ToAwsCloudTrailDataConnectorDataTypesLogsOutput() AwsCloudTrailDataConnectorDataTypesLogsOutput {
	return i.ToAwsCloudTrailDataConnectorDataTypesLogsOutputWithContext(context.Background())
}

func (i AwsCloudTrailDataConnectorDataTypesLogsArgs) ToAwsCloudTrailDataConnectorDataTypesLogsOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudTrailDataConnectorDataTypesLogsOutput)
}

func (i AwsCloudTrailDataConnectorDataTypesLogsArgs) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypesLogs] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypesLogs]{
		OutputState: i.ToAwsCloudTrailDataConnectorDataTypesLogsOutputWithContext(ctx).OutputState,
	}
}

// Logs data type.
type AwsCloudTrailDataConnectorDataTypesLogsOutput struct{ *pulumi.OutputState }

func (AwsCloudTrailDataConnectorDataTypesLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypesLogs)(nil)).Elem()
}

func (o AwsCloudTrailDataConnectorDataTypesLogsOutput) ToAwsCloudTrailDataConnectorDataTypesLogsOutput() AwsCloudTrailDataConnectorDataTypesLogsOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesLogsOutput) ToAwsCloudTrailDataConnectorDataTypesLogsOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesLogsOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesLogsOutput) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypesLogs] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypesLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o AwsCloudTrailDataConnectorDataTypesLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCloudTrailDataConnectorDataTypesLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Amazon Web Services CloudTrail data connector.
type AwsCloudTrailDataConnectorDataTypesResponse struct {
	// Logs data type.
	Logs AwsCloudTrailDataConnectorDataTypesResponseLogs `pulumi:"logs"`
}

// The available data types for Amazon Web Services CloudTrail data connector.
type AwsCloudTrailDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (AwsCloudTrailDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o AwsCloudTrailDataConnectorDataTypesResponseOutput) ToAwsCloudTrailDataConnectorDataTypesResponseOutput() AwsCloudTrailDataConnectorDataTypesResponseOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesResponseOutput) ToAwsCloudTrailDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesResponseOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypesResponse] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o AwsCloudTrailDataConnectorDataTypesResponseOutput) Logs() AwsCloudTrailDataConnectorDataTypesResponseLogsOutput {
	return o.ApplyT(func(v AwsCloudTrailDataConnectorDataTypesResponse) AwsCloudTrailDataConnectorDataTypesResponseLogs {
		return v.Logs
	}).(AwsCloudTrailDataConnectorDataTypesResponseLogsOutput)
}

// Logs data type.
type AwsCloudTrailDataConnectorDataTypesResponseLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Logs data type.
type AwsCloudTrailDataConnectorDataTypesResponseLogsOutput struct{ *pulumi.OutputState }

func (AwsCloudTrailDataConnectorDataTypesResponseLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsCloudTrailDataConnectorDataTypesResponseLogs)(nil)).Elem()
}

func (o AwsCloudTrailDataConnectorDataTypesResponseLogsOutput) ToAwsCloudTrailDataConnectorDataTypesResponseLogsOutput() AwsCloudTrailDataConnectorDataTypesResponseLogsOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesResponseLogsOutput) ToAwsCloudTrailDataConnectorDataTypesResponseLogsOutputWithContext(ctx context.Context) AwsCloudTrailDataConnectorDataTypesResponseLogsOutput {
	return o
}

func (o AwsCloudTrailDataConnectorDataTypesResponseLogsOutput) ToOutput(ctx context.Context) pulumix.Output[AwsCloudTrailDataConnectorDataTypesResponseLogs] {
	return pulumix.Output[AwsCloudTrailDataConnectorDataTypesResponseLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o AwsCloudTrailDataConnectorDataTypesResponseLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AwsCloudTrailDataConnectorDataTypesResponseLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Amazon Web Services S3 data connector.
type AwsS3DataConnectorDataTypes struct {
	// Logs data type.
	Logs AwsS3DataConnectorDataTypesLogs `pulumi:"logs"`
}

// AwsS3DataConnectorDataTypesInput is an input type that accepts AwsS3DataConnectorDataTypesArgs and AwsS3DataConnectorDataTypesOutput values.
// You can construct a concrete instance of `AwsS3DataConnectorDataTypesInput` via:
//
//	AwsS3DataConnectorDataTypesArgs{...}
type AwsS3DataConnectorDataTypesInput interface {
	pulumi.Input

	ToAwsS3DataConnectorDataTypesOutput() AwsS3DataConnectorDataTypesOutput
	ToAwsS3DataConnectorDataTypesOutputWithContext(context.Context) AwsS3DataConnectorDataTypesOutput
}

// The available data types for Amazon Web Services S3 data connector.
type AwsS3DataConnectorDataTypesArgs struct {
	// Logs data type.
	Logs AwsS3DataConnectorDataTypesLogsInput `pulumi:"logs"`
}

func (AwsS3DataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypes)(nil)).Elem()
}

func (i AwsS3DataConnectorDataTypesArgs) ToAwsS3DataConnectorDataTypesOutput() AwsS3DataConnectorDataTypesOutput {
	return i.ToAwsS3DataConnectorDataTypesOutputWithContext(context.Background())
}

func (i AwsS3DataConnectorDataTypesArgs) ToAwsS3DataConnectorDataTypesOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3DataConnectorDataTypesOutput)
}

func (i AwsS3DataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypes] {
	return pulumix.Output[AwsS3DataConnectorDataTypes]{
		OutputState: i.ToAwsS3DataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Amazon Web Services S3 data connector.
type AwsS3DataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (AwsS3DataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypes)(nil)).Elem()
}

func (o AwsS3DataConnectorDataTypesOutput) ToAwsS3DataConnectorDataTypesOutput() AwsS3DataConnectorDataTypesOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesOutput) ToAwsS3DataConnectorDataTypesOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypes] {
	return pulumix.Output[AwsS3DataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o AwsS3DataConnectorDataTypesOutput) Logs() AwsS3DataConnectorDataTypesLogsOutput {
	return o.ApplyT(func(v AwsS3DataConnectorDataTypes) AwsS3DataConnectorDataTypesLogs { return v.Logs }).(AwsS3DataConnectorDataTypesLogsOutput)
}

// Logs data type.
type AwsS3DataConnectorDataTypesLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// AwsS3DataConnectorDataTypesLogsInput is an input type that accepts AwsS3DataConnectorDataTypesLogsArgs and AwsS3DataConnectorDataTypesLogsOutput values.
// You can construct a concrete instance of `AwsS3DataConnectorDataTypesLogsInput` via:
//
//	AwsS3DataConnectorDataTypesLogsArgs{...}
type AwsS3DataConnectorDataTypesLogsInput interface {
	pulumi.Input

	ToAwsS3DataConnectorDataTypesLogsOutput() AwsS3DataConnectorDataTypesLogsOutput
	ToAwsS3DataConnectorDataTypesLogsOutputWithContext(context.Context) AwsS3DataConnectorDataTypesLogsOutput
}

// Logs data type.
type AwsS3DataConnectorDataTypesLogsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (AwsS3DataConnectorDataTypesLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypesLogs)(nil)).Elem()
}

func (i AwsS3DataConnectorDataTypesLogsArgs) ToAwsS3DataConnectorDataTypesLogsOutput() AwsS3DataConnectorDataTypesLogsOutput {
	return i.ToAwsS3DataConnectorDataTypesLogsOutputWithContext(context.Background())
}

func (i AwsS3DataConnectorDataTypesLogsArgs) ToAwsS3DataConnectorDataTypesLogsOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsS3DataConnectorDataTypesLogsOutput)
}

func (i AwsS3DataConnectorDataTypesLogsArgs) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypesLogs] {
	return pulumix.Output[AwsS3DataConnectorDataTypesLogs]{
		OutputState: i.ToAwsS3DataConnectorDataTypesLogsOutputWithContext(ctx).OutputState,
	}
}

// Logs data type.
type AwsS3DataConnectorDataTypesLogsOutput struct{ *pulumi.OutputState }

func (AwsS3DataConnectorDataTypesLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypesLogs)(nil)).Elem()
}

func (o AwsS3DataConnectorDataTypesLogsOutput) ToAwsS3DataConnectorDataTypesLogsOutput() AwsS3DataConnectorDataTypesLogsOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesLogsOutput) ToAwsS3DataConnectorDataTypesLogsOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesLogsOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesLogsOutput) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypesLogs] {
	return pulumix.Output[AwsS3DataConnectorDataTypesLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o AwsS3DataConnectorDataTypesLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AwsS3DataConnectorDataTypesLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Amazon Web Services S3 data connector.
type AwsS3DataConnectorDataTypesResponse struct {
	// Logs data type.
	Logs AwsS3DataConnectorDataTypesResponseLogs `pulumi:"logs"`
}

// The available data types for Amazon Web Services S3 data connector.
type AwsS3DataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (AwsS3DataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypesResponse)(nil)).Elem()
}

func (o AwsS3DataConnectorDataTypesResponseOutput) ToAwsS3DataConnectorDataTypesResponseOutput() AwsS3DataConnectorDataTypesResponseOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesResponseOutput) ToAwsS3DataConnectorDataTypesResponseOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesResponseOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypesResponse] {
	return pulumix.Output[AwsS3DataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o AwsS3DataConnectorDataTypesResponseOutput) Logs() AwsS3DataConnectorDataTypesResponseLogsOutput {
	return o.ApplyT(func(v AwsS3DataConnectorDataTypesResponse) AwsS3DataConnectorDataTypesResponseLogs { return v.Logs }).(AwsS3DataConnectorDataTypesResponseLogsOutput)
}

// Logs data type.
type AwsS3DataConnectorDataTypesResponseLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Logs data type.
type AwsS3DataConnectorDataTypesResponseLogsOutput struct{ *pulumi.OutputState }

func (AwsS3DataConnectorDataTypesResponseLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsS3DataConnectorDataTypesResponseLogs)(nil)).Elem()
}

func (o AwsS3DataConnectorDataTypesResponseLogsOutput) ToAwsS3DataConnectorDataTypesResponseLogsOutput() AwsS3DataConnectorDataTypesResponseLogsOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesResponseLogsOutput) ToAwsS3DataConnectorDataTypesResponseLogsOutputWithContext(ctx context.Context) AwsS3DataConnectorDataTypesResponseLogsOutput {
	return o
}

func (o AwsS3DataConnectorDataTypesResponseLogsOutput) ToOutput(ctx context.Context) pulumix.Output[AwsS3DataConnectorDataTypesResponseLogs] {
	return pulumix.Output[AwsS3DataConnectorDataTypesResponseLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o AwsS3DataConnectorDataTypesResponseLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AwsS3DataConnectorDataTypesResponseLogs) string { return v.State }).(pulumi.StringOutput)
}

// Describes the entity mappings of a single entity
type BookmarkEntityMappings struct {
	// The entity type
	EntityType *string `pulumi:"entityType"`
	// Array of fields mapping for that entity type
	FieldMappings []EntityFieldMapping `pulumi:"fieldMappings"`
}

// BookmarkEntityMappingsInput is an input type that accepts BookmarkEntityMappingsArgs and BookmarkEntityMappingsOutput values.
// You can construct a concrete instance of `BookmarkEntityMappingsInput` via:
//
//	BookmarkEntityMappingsArgs{...}
type BookmarkEntityMappingsInput interface {
	pulumi.Input

	ToBookmarkEntityMappingsOutput() BookmarkEntityMappingsOutput
	ToBookmarkEntityMappingsOutputWithContext(context.Context) BookmarkEntityMappingsOutput
}

// Describes the entity mappings of a single entity
type BookmarkEntityMappingsArgs struct {
	// The entity type
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// Array of fields mapping for that entity type
	FieldMappings EntityFieldMappingArrayInput `pulumi:"fieldMappings"`
}

func (BookmarkEntityMappingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BookmarkEntityMappings)(nil)).Elem()
}

func (i BookmarkEntityMappingsArgs) ToBookmarkEntityMappingsOutput() BookmarkEntityMappingsOutput {
	return i.ToBookmarkEntityMappingsOutputWithContext(context.Background())
}

func (i BookmarkEntityMappingsArgs) ToBookmarkEntityMappingsOutputWithContext(ctx context.Context) BookmarkEntityMappingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BookmarkEntityMappingsOutput)
}

func (i BookmarkEntityMappingsArgs) ToOutput(ctx context.Context) pulumix.Output[BookmarkEntityMappings] {
	return pulumix.Output[BookmarkEntityMappings]{
		OutputState: i.ToBookmarkEntityMappingsOutputWithContext(ctx).OutputState,
	}
}

// BookmarkEntityMappingsArrayInput is an input type that accepts BookmarkEntityMappingsArray and BookmarkEntityMappingsArrayOutput values.
// You can construct a concrete instance of `BookmarkEntityMappingsArrayInput` via:
//
//	BookmarkEntityMappingsArray{ BookmarkEntityMappingsArgs{...} }
type BookmarkEntityMappingsArrayInput interface {
	pulumi.Input

	ToBookmarkEntityMappingsArrayOutput() BookmarkEntityMappingsArrayOutput
	ToBookmarkEntityMappingsArrayOutputWithContext(context.Context) BookmarkEntityMappingsArrayOutput
}

type BookmarkEntityMappingsArray []BookmarkEntityMappingsInput

func (BookmarkEntityMappingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BookmarkEntityMappings)(nil)).Elem()
}

func (i BookmarkEntityMappingsArray) ToBookmarkEntityMappingsArrayOutput() BookmarkEntityMappingsArrayOutput {
	return i.ToBookmarkEntityMappingsArrayOutputWithContext(context.Background())
}

func (i BookmarkEntityMappingsArray) ToBookmarkEntityMappingsArrayOutputWithContext(ctx context.Context) BookmarkEntityMappingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BookmarkEntityMappingsArrayOutput)
}

func (i BookmarkEntityMappingsArray) ToOutput(ctx context.Context) pulumix.Output[[]BookmarkEntityMappings] {
	return pulumix.Output[[]BookmarkEntityMappings]{
		OutputState: i.ToBookmarkEntityMappingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes the entity mappings of a single entity
type BookmarkEntityMappingsOutput struct{ *pulumi.OutputState }

func (BookmarkEntityMappingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BookmarkEntityMappings)(nil)).Elem()
}

func (o BookmarkEntityMappingsOutput) ToBookmarkEntityMappingsOutput() BookmarkEntityMappingsOutput {
	return o
}

func (o BookmarkEntityMappingsOutput) ToBookmarkEntityMappingsOutputWithContext(ctx context.Context) BookmarkEntityMappingsOutput {
	return o
}

func (o BookmarkEntityMappingsOutput) ToOutput(ctx context.Context) pulumix.Output[BookmarkEntityMappings] {
	return pulumix.Output[BookmarkEntityMappings]{
		OutputState: o.OutputState,
	}
}

// The entity type
func (o BookmarkEntityMappingsOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkEntityMappings) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// Array of fields mapping for that entity type
func (o BookmarkEntityMappingsOutput) FieldMappings() EntityFieldMappingArrayOutput {
	return o.ApplyT(func(v BookmarkEntityMappings) []EntityFieldMapping { return v.FieldMappings }).(EntityFieldMappingArrayOutput)
}

type BookmarkEntityMappingsArrayOutput struct{ *pulumi.OutputState }

func (BookmarkEntityMappingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BookmarkEntityMappings)(nil)).Elem()
}

func (o BookmarkEntityMappingsArrayOutput) ToBookmarkEntityMappingsArrayOutput() BookmarkEntityMappingsArrayOutput {
	return o
}

func (o BookmarkEntityMappingsArrayOutput) ToBookmarkEntityMappingsArrayOutputWithContext(ctx context.Context) BookmarkEntityMappingsArrayOutput {
	return o
}

func (o BookmarkEntityMappingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BookmarkEntityMappings] {
	return pulumix.Output[[]BookmarkEntityMappings]{
		OutputState: o.OutputState,
	}
}

func (o BookmarkEntityMappingsArrayOutput) Index(i pulumi.IntInput) BookmarkEntityMappingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BookmarkEntityMappings {
		return vs[0].([]BookmarkEntityMappings)[vs[1].(int)]
	}).(BookmarkEntityMappingsOutput)
}

// Describes the entity mappings of a single entity
type BookmarkEntityMappingsResponse struct {
	// The entity type
	EntityType *string `pulumi:"entityType"`
	// Array of fields mapping for that entity type
	FieldMappings []EntityFieldMappingResponse `pulumi:"fieldMappings"`
}

// Describes the entity mappings of a single entity
type BookmarkEntityMappingsResponseOutput struct{ *pulumi.OutputState }

func (BookmarkEntityMappingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BookmarkEntityMappingsResponse)(nil)).Elem()
}

func (o BookmarkEntityMappingsResponseOutput) ToBookmarkEntityMappingsResponseOutput() BookmarkEntityMappingsResponseOutput {
	return o
}

func (o BookmarkEntityMappingsResponseOutput) ToBookmarkEntityMappingsResponseOutputWithContext(ctx context.Context) BookmarkEntityMappingsResponseOutput {
	return o
}

func (o BookmarkEntityMappingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BookmarkEntityMappingsResponse] {
	return pulumix.Output[BookmarkEntityMappingsResponse]{
		OutputState: o.OutputState,
	}
}

// The entity type
func (o BookmarkEntityMappingsResponseOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BookmarkEntityMappingsResponse) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// Array of fields mapping for that entity type
func (o BookmarkEntityMappingsResponseOutput) FieldMappings() EntityFieldMappingResponseArrayOutput {
	return o.ApplyT(func(v BookmarkEntityMappingsResponse) []EntityFieldMappingResponse { return v.FieldMappings }).(EntityFieldMappingResponseArrayOutput)
}

type BookmarkEntityMappingsResponseArrayOutput struct{ *pulumi.OutputState }

func (BookmarkEntityMappingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BookmarkEntityMappingsResponse)(nil)).Elem()
}

func (o BookmarkEntityMappingsResponseArrayOutput) ToBookmarkEntityMappingsResponseArrayOutput() BookmarkEntityMappingsResponseArrayOutput {
	return o
}

func (o BookmarkEntityMappingsResponseArrayOutput) ToBookmarkEntityMappingsResponseArrayOutputWithContext(ctx context.Context) BookmarkEntityMappingsResponseArrayOutput {
	return o
}

func (o BookmarkEntityMappingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BookmarkEntityMappingsResponse] {
	return pulumix.Output[[]BookmarkEntityMappingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o BookmarkEntityMappingsResponseArrayOutput) Index(i pulumi.IntInput) BookmarkEntityMappingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BookmarkEntityMappingsResponse {
		return vs[0].([]BookmarkEntityMappingsResponse)[vs[1].(int)]
	}).(BookmarkEntityMappingsResponseOutput)
}

// Represents bookmark timeline item.
type BookmarkTimelineItemResponse struct {
	// The bookmark azure resource id.
	AzureResourceId string `pulumi:"azureResourceId"`
	// Describes a user that created the bookmark
	CreatedBy *UserInfoResponse `pulumi:"createdBy"`
	// The bookmark display name.
	DisplayName *string `pulumi:"displayName"`
	// The bookmark end time.
	EndTimeUtc *string `pulumi:"endTimeUtc"`
	// The bookmark event time.
	EventTime *string `pulumi:"eventTime"`
	// The entity query kind
	// Expected value is 'Bookmark'.
	Kind string `pulumi:"kind"`
	// List of labels relevant to this bookmark
	Labels []string `pulumi:"labels"`
	// The notes of the bookmark
	Notes *string `pulumi:"notes"`
	// The bookmark start time.
	StartTimeUtc *string `pulumi:"startTimeUtc"`
}

// Describes an automation rule condition that applies a boolean operator (e.g AND, OR) to conditions
type BooleanConditionProperties struct {
	ConditionProperties *AutomationRuleBooleanCondition `pulumi:"conditionProperties"`
	// Expected value is 'Boolean'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that applies a boolean operator (e.g AND, OR) to conditions
type BooleanConditionPropertiesResponse struct {
	ConditionProperties *AutomationRuleBooleanConditionResponse `pulumi:"conditionProperties"`
	// Expected value is 'Boolean'.
	ConditionType string `pulumi:"conditionType"`
}

// Information on the client (user or application) that made some action
type ClientInfo struct {
	// The email of the client.
	Email *string `pulumi:"email"`
	// The name of the client.
	Name *string `pulumi:"name"`
	// The object id of the client.
	ObjectId *string `pulumi:"objectId"`
	// The user principal name of the client.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// ClientInfoInput is an input type that accepts ClientInfoArgs and ClientInfoOutput values.
// You can construct a concrete instance of `ClientInfoInput` via:
//
//	ClientInfoArgs{...}
type ClientInfoInput interface {
	pulumi.Input

	ToClientInfoOutput() ClientInfoOutput
	ToClientInfoOutputWithContext(context.Context) ClientInfoOutput
}

// Information on the client (user or application) that made some action
type ClientInfoArgs struct {
	// The email of the client.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The name of the client.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The object id of the client.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The user principal name of the client.
	UserPrincipalName pulumi.StringPtrInput `pulumi:"userPrincipalName"`
}

func (ClientInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfo)(nil)).Elem()
}

func (i ClientInfoArgs) ToClientInfoOutput() ClientInfoOutput {
	return i.ToClientInfoOutputWithContext(context.Background())
}

func (i ClientInfoArgs) ToClientInfoOutputWithContext(ctx context.Context) ClientInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoOutput)
}

func (i ClientInfoArgs) ToOutput(ctx context.Context) pulumix.Output[ClientInfo] {
	return pulumix.Output[ClientInfo]{
		OutputState: i.ToClientInfoOutputWithContext(ctx).OutputState,
	}
}

func (i ClientInfoArgs) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return i.ToClientInfoPtrOutputWithContext(context.Background())
}

func (i ClientInfoArgs) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoOutput).ToClientInfoPtrOutputWithContext(ctx)
}

// ClientInfoPtrInput is an input type that accepts ClientInfoArgs, ClientInfoPtr and ClientInfoPtrOutput values.
// You can construct a concrete instance of `ClientInfoPtrInput` via:
//
//	        ClientInfoArgs{...}
//
//	or:
//
//	        nil
type ClientInfoPtrInput interface {
	pulumi.Input

	ToClientInfoPtrOutput() ClientInfoPtrOutput
	ToClientInfoPtrOutputWithContext(context.Context) ClientInfoPtrOutput
}

type clientInfoPtrType ClientInfoArgs

func ClientInfoPtr(v *ClientInfoArgs) ClientInfoPtrInput {
	return (*clientInfoPtrType)(v)
}

func (*clientInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInfo)(nil)).Elem()
}

func (i *clientInfoPtrType) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return i.ToClientInfoPtrOutputWithContext(context.Background())
}

func (i *clientInfoPtrType) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClientInfoPtrOutput)
}

func (i *clientInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*ClientInfo] {
	return pulumix.Output[*ClientInfo]{
		OutputState: i.ToClientInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// Information on the client (user or application) that made some action
type ClientInfoOutput struct{ *pulumi.OutputState }

func (ClientInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfo)(nil)).Elem()
}

func (o ClientInfoOutput) ToClientInfoOutput() ClientInfoOutput {
	return o
}

func (o ClientInfoOutput) ToClientInfoOutputWithContext(ctx context.Context) ClientInfoOutput {
	return o
}

func (o ClientInfoOutput) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return o.ToClientInfoPtrOutputWithContext(context.Background())
}

func (o ClientInfoOutput) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClientInfo) *ClientInfo {
		return &v
	}).(ClientInfoPtrOutput)
}

func (o ClientInfoOutput) ToOutput(ctx context.Context) pulumix.Output[ClientInfo] {
	return pulumix.Output[ClientInfo]{
		OutputState: o.OutputState,
	}
}

// The email of the client.
func (o ClientInfoOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfo) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The name of the client.
func (o ClientInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The object id of the client.
func (o ClientInfoOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfo) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The user principal name of the client.
func (o ClientInfoOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfo) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type ClientInfoPtrOutput struct{ *pulumi.OutputState }

func (ClientInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInfo)(nil)).Elem()
}

func (o ClientInfoPtrOutput) ToClientInfoPtrOutput() ClientInfoPtrOutput {
	return o
}

func (o ClientInfoPtrOutput) ToClientInfoPtrOutputWithContext(ctx context.Context) ClientInfoPtrOutput {
	return o
}

func (o ClientInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientInfo] {
	return pulumix.Output[*ClientInfo]{
		OutputState: o.OutputState,
	}
}

func (o ClientInfoPtrOutput) Elem() ClientInfoOutput {
	return o.ApplyT(func(v *ClientInfo) ClientInfo {
		if v != nil {
			return *v
		}
		var ret ClientInfo
		return ret
	}).(ClientInfoOutput)
}

// The email of the client.
func (o ClientInfoPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfo) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The name of the client.
func (o ClientInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The object id of the client.
func (o ClientInfoPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfo) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the client.
func (o ClientInfoPtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Information on the client (user or application) that made some action
type ClientInfoResponse struct {
	// The email of the client.
	Email *string `pulumi:"email"`
	// The name of the client.
	Name *string `pulumi:"name"`
	// The object id of the client.
	ObjectId *string `pulumi:"objectId"`
	// The user principal name of the client.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// Information on the client (user or application) that made some action
type ClientInfoResponseOutput struct{ *pulumi.OutputState }

func (ClientInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientInfoResponse)(nil)).Elem()
}

func (o ClientInfoResponseOutput) ToClientInfoResponseOutput() ClientInfoResponseOutput {
	return o
}

func (o ClientInfoResponseOutput) ToClientInfoResponseOutputWithContext(ctx context.Context) ClientInfoResponseOutput {
	return o
}

func (o ClientInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ClientInfoResponse] {
	return pulumix.Output[ClientInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The email of the client.
func (o ClientInfoResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The name of the client.
func (o ClientInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The object id of the client.
func (o ClientInfoResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The user principal name of the client.
func (o ClientInfoResponseOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientInfoResponse) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type ClientInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientInfoResponse)(nil)).Elem()
}

func (o ClientInfoResponsePtrOutput) ToClientInfoResponsePtrOutput() ClientInfoResponsePtrOutput {
	return o
}

func (o ClientInfoResponsePtrOutput) ToClientInfoResponsePtrOutputWithContext(ctx context.Context) ClientInfoResponsePtrOutput {
	return o
}

func (o ClientInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ClientInfoResponse] {
	return pulumix.Output[*ClientInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o ClientInfoResponsePtrOutput) Elem() ClientInfoResponseOutput {
	return o.ApplyT(func(v *ClientInfoResponse) ClientInfoResponse {
		if v != nil {
			return *v
		}
		var ret ClientInfoResponse
		return ret
	}).(ClientInfoResponseOutput)
}

// The email of the client.
func (o ClientInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The name of the client.
func (o ClientInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The object id of the client.
func (o ClientInfoResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the client.
func (o ClientInfoResponsePtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Describe the authentication properties needed to successfully authenticate with the server
type CodelessConnectorPollingAuthProperties struct {
	// A prefix send in the header before the actual token
	ApiKeyIdentifier *string `pulumi:"apiKeyIdentifier"`
	// The header name which the token is sent with
	ApiKeyName *string `pulumi:"apiKeyName"`
	// The authentication type
	AuthType string `pulumi:"authType"`
	// The endpoint used to authorize the user, used in Oauth 2.0 flow
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The query parameters used in authorization request, used in Oauth 2.0 flow
	AuthorizationEndpointQueryParameters interface{} `pulumi:"authorizationEndpointQueryParameters"`
	// Describes the flow name, for example 'AuthCode' for Oauth 2.0
	FlowName *string `pulumi:"flowName"`
	// Marks if the key should sent in header
	IsApiKeyInPostPayload *string `pulumi:"isApiKeyInPostPayload"`
	// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
	IsClientSecretInHeader *bool `pulumi:"isClientSecretInHeader"`
	// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
	RedirectionEndpoint *string `pulumi:"redirectionEndpoint"`
	// The OAuth token scope
	Scope *string `pulumi:"scope"`
	// The endpoint used to issue a token, used in Oauth 2.0 flow
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The query headers used in token request, used in Oauth 2.0 flow
	TokenEndpointHeaders interface{} `pulumi:"tokenEndpointHeaders"`
	// The query parameters used in token request, used in Oauth 2.0 flow
	TokenEndpointQueryParameters interface{} `pulumi:"tokenEndpointQueryParameters"`
}

// CodelessConnectorPollingAuthPropertiesInput is an input type that accepts CodelessConnectorPollingAuthPropertiesArgs and CodelessConnectorPollingAuthPropertiesOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingAuthPropertiesInput` via:
//
//	CodelessConnectorPollingAuthPropertiesArgs{...}
type CodelessConnectorPollingAuthPropertiesInput interface {
	pulumi.Input

	ToCodelessConnectorPollingAuthPropertiesOutput() CodelessConnectorPollingAuthPropertiesOutput
	ToCodelessConnectorPollingAuthPropertiesOutputWithContext(context.Context) CodelessConnectorPollingAuthPropertiesOutput
}

// Describe the authentication properties needed to successfully authenticate with the server
type CodelessConnectorPollingAuthPropertiesArgs struct {
	// A prefix send in the header before the actual token
	ApiKeyIdentifier pulumi.StringPtrInput `pulumi:"apiKeyIdentifier"`
	// The header name which the token is sent with
	ApiKeyName pulumi.StringPtrInput `pulumi:"apiKeyName"`
	// The authentication type
	AuthType pulumi.StringInput `pulumi:"authType"`
	// The endpoint used to authorize the user, used in Oauth 2.0 flow
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// The query parameters used in authorization request, used in Oauth 2.0 flow
	AuthorizationEndpointQueryParameters pulumi.Input `pulumi:"authorizationEndpointQueryParameters"`
	// Describes the flow name, for example 'AuthCode' for Oauth 2.0
	FlowName pulumi.StringPtrInput `pulumi:"flowName"`
	// Marks if the key should sent in header
	IsApiKeyInPostPayload pulumi.StringPtrInput `pulumi:"isApiKeyInPostPayload"`
	// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
	IsClientSecretInHeader pulumi.BoolPtrInput `pulumi:"isClientSecretInHeader"`
	// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
	RedirectionEndpoint pulumi.StringPtrInput `pulumi:"redirectionEndpoint"`
	// The OAuth token scope
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The endpoint used to issue a token, used in Oauth 2.0 flow
	TokenEndpoint pulumi.StringPtrInput `pulumi:"tokenEndpoint"`
	// The query headers used in token request, used in Oauth 2.0 flow
	TokenEndpointHeaders pulumi.Input `pulumi:"tokenEndpointHeaders"`
	// The query parameters used in token request, used in Oauth 2.0 flow
	TokenEndpointQueryParameters pulumi.Input `pulumi:"tokenEndpointQueryParameters"`
}

func (CodelessConnectorPollingAuthPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingAuthProperties)(nil)).Elem()
}

func (i CodelessConnectorPollingAuthPropertiesArgs) ToCodelessConnectorPollingAuthPropertiesOutput() CodelessConnectorPollingAuthPropertiesOutput {
	return i.ToCodelessConnectorPollingAuthPropertiesOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingAuthPropertiesArgs) ToCodelessConnectorPollingAuthPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingAuthPropertiesOutput)
}

func (i CodelessConnectorPollingAuthPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingAuthProperties] {
	return pulumix.Output[CodelessConnectorPollingAuthProperties]{
		OutputState: i.ToCodelessConnectorPollingAuthPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessConnectorPollingAuthPropertiesArgs) ToCodelessConnectorPollingAuthPropertiesPtrOutput() CodelessConnectorPollingAuthPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingAuthPropertiesArgs) ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingAuthPropertiesOutput).ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx)
}

// CodelessConnectorPollingAuthPropertiesPtrInput is an input type that accepts CodelessConnectorPollingAuthPropertiesArgs, CodelessConnectorPollingAuthPropertiesPtr and CodelessConnectorPollingAuthPropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingAuthPropertiesPtrInput` via:
//
//	        CodelessConnectorPollingAuthPropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessConnectorPollingAuthPropertiesPtrInput interface {
	pulumi.Input

	ToCodelessConnectorPollingAuthPropertiesPtrOutput() CodelessConnectorPollingAuthPropertiesPtrOutput
	ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(context.Context) CodelessConnectorPollingAuthPropertiesPtrOutput
}

type codelessConnectorPollingAuthPropertiesPtrType CodelessConnectorPollingAuthPropertiesArgs

func CodelessConnectorPollingAuthPropertiesPtr(v *CodelessConnectorPollingAuthPropertiesArgs) CodelessConnectorPollingAuthPropertiesPtrInput {
	return (*codelessConnectorPollingAuthPropertiesPtrType)(v)
}

func (*codelessConnectorPollingAuthPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingAuthProperties)(nil)).Elem()
}

func (i *codelessConnectorPollingAuthPropertiesPtrType) ToCodelessConnectorPollingAuthPropertiesPtrOutput() CodelessConnectorPollingAuthPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessConnectorPollingAuthPropertiesPtrType) ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingAuthPropertiesPtrOutput)
}

func (i *codelessConnectorPollingAuthPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingAuthProperties] {
	return pulumix.Output[*CodelessConnectorPollingAuthProperties]{
		OutputState: i.ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describe the authentication properties needed to successfully authenticate with the server
type CodelessConnectorPollingAuthPropertiesOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingAuthPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingAuthProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingAuthPropertiesOutput) ToCodelessConnectorPollingAuthPropertiesOutput() CodelessConnectorPollingAuthPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesOutput) ToCodelessConnectorPollingAuthPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesOutput) ToCodelessConnectorPollingAuthPropertiesPtrOutput() CodelessConnectorPollingAuthPropertiesPtrOutput {
	return o.ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessConnectorPollingAuthPropertiesOutput) ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessConnectorPollingAuthProperties) *CodelessConnectorPollingAuthProperties {
		return &v
	}).(CodelessConnectorPollingAuthPropertiesPtrOutput)
}

func (o CodelessConnectorPollingAuthPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingAuthProperties] {
	return pulumix.Output[CodelessConnectorPollingAuthProperties]{
		OutputState: o.OutputState,
	}
}

// A prefix send in the header before the actual token
func (o CodelessConnectorPollingAuthPropertiesOutput) ApiKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.ApiKeyIdentifier }).(pulumi.StringPtrOutput)
}

// The header name which the token is sent with
func (o CodelessConnectorPollingAuthPropertiesOutput) ApiKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.ApiKeyName }).(pulumi.StringPtrOutput)
}

// The authentication type
func (o CodelessConnectorPollingAuthPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// The endpoint used to authorize the user, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The query parameters used in authorization request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) AuthorizationEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) interface{} {
		return v.AuthorizationEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Describes the flow name, for example 'AuthCode' for Oauth 2.0
func (o CodelessConnectorPollingAuthPropertiesOutput) FlowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.FlowName }).(pulumi.StringPtrOutput)
}

// Marks if the key should sent in header
func (o CodelessConnectorPollingAuthPropertiesOutput) IsApiKeyInPostPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.IsApiKeyInPostPayload }).(pulumi.StringPtrOutput)
}

// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) IsClientSecretInHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *bool { return v.IsClientSecretInHeader }).(pulumi.BoolPtrOutput)
}

// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) RedirectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.RedirectionEndpoint }).(pulumi.StringPtrOutput)
}

// The OAuth token scope
func (o CodelessConnectorPollingAuthPropertiesOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The endpoint used to issue a token, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The query headers used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) TokenEndpointHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) interface{} { return v.TokenEndpointHeaders }).(pulumi.AnyOutput)
}

// The query parameters used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesOutput) TokenEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthProperties) interface{} { return v.TokenEndpointQueryParameters }).(pulumi.AnyOutput)
}

type CodelessConnectorPollingAuthPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingAuthPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingAuthProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingAuthPropertiesPtrOutput) ToCodelessConnectorPollingAuthPropertiesPtrOutput() CodelessConnectorPollingAuthPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesPtrOutput) ToCodelessConnectorPollingAuthPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingAuthProperties] {
	return pulumix.Output[*CodelessConnectorPollingAuthProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingAuthPropertiesPtrOutput) Elem() CodelessConnectorPollingAuthPropertiesOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) CodelessConnectorPollingAuthProperties {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingAuthProperties
		return ret
	}).(CodelessConnectorPollingAuthPropertiesOutput)
}

// A prefix send in the header before the actual token
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) ApiKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The header name which the token is sent with
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) ApiKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiKeyName
	}).(pulumi.StringPtrOutput)
}

// The authentication type
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// The endpoint used to authorize the user, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The query parameters used in authorization request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) AuthorizationEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Describes the flow name, for example 'AuthCode' for Oauth 2.0
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) FlowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.FlowName
	}).(pulumi.StringPtrOutput)
}

// Marks if the key should sent in header
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) IsApiKeyInPostPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.IsApiKeyInPostPayload
	}).(pulumi.StringPtrOutput)
}

// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) IsClientSecretInHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsClientSecretInHeader
	}).(pulumi.BoolPtrOutput)
}

// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) RedirectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.RedirectionEndpoint
	}).(pulumi.StringPtrOutput)
}

// The OAuth token scope
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The endpoint used to issue a token, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The query headers used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) TokenEndpointHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.TokenEndpointHeaders
	}).(pulumi.AnyOutput)
}

// The query parameters used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesPtrOutput) TokenEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.TokenEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Describe the authentication properties needed to successfully authenticate with the server
type CodelessConnectorPollingAuthPropertiesResponse struct {
	// A prefix send in the header before the actual token
	ApiKeyIdentifier *string `pulumi:"apiKeyIdentifier"`
	// The header name which the token is sent with
	ApiKeyName *string `pulumi:"apiKeyName"`
	// The authentication type
	AuthType string `pulumi:"authType"`
	// The endpoint used to authorize the user, used in Oauth 2.0 flow
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// The query parameters used in authorization request, used in Oauth 2.0 flow
	AuthorizationEndpointQueryParameters interface{} `pulumi:"authorizationEndpointQueryParameters"`
	// Describes the flow name, for example 'AuthCode' for Oauth 2.0
	FlowName *string `pulumi:"flowName"`
	// Marks if the key should sent in header
	IsApiKeyInPostPayload *string `pulumi:"isApiKeyInPostPayload"`
	// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
	IsClientSecretInHeader *bool `pulumi:"isClientSecretInHeader"`
	// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
	RedirectionEndpoint *string `pulumi:"redirectionEndpoint"`
	// The OAuth token scope
	Scope *string `pulumi:"scope"`
	// The endpoint used to issue a token, used in Oauth 2.0 flow
	TokenEndpoint *string `pulumi:"tokenEndpoint"`
	// The query headers used in token request, used in Oauth 2.0 flow
	TokenEndpointHeaders interface{} `pulumi:"tokenEndpointHeaders"`
	// The query parameters used in token request, used in Oauth 2.0 flow
	TokenEndpointQueryParameters interface{} `pulumi:"tokenEndpointQueryParameters"`
}

// Describe the authentication properties needed to successfully authenticate with the server
type CodelessConnectorPollingAuthPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingAuthPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingAuthPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingAuthPropertiesResponseOutput) ToCodelessConnectorPollingAuthPropertiesResponseOutput() CodelessConnectorPollingAuthPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesResponseOutput) ToCodelessConnectorPollingAuthPropertiesResponseOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingAuthPropertiesResponse] {
	return pulumix.Output[CodelessConnectorPollingAuthPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// A prefix send in the header before the actual token
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) ApiKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.ApiKeyIdentifier }).(pulumi.StringPtrOutput)
}

// The header name which the token is sent with
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) ApiKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.ApiKeyName }).(pulumi.StringPtrOutput)
}

// The authentication type
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// The endpoint used to authorize the user, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// The query parameters used in authorization request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) AuthorizationEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) interface{} {
		return v.AuthorizationEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Describes the flow name, for example 'AuthCode' for Oauth 2.0
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) FlowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.FlowName }).(pulumi.StringPtrOutput)
}

// Marks if the key should sent in header
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) IsApiKeyInPostPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.IsApiKeyInPostPayload }).(pulumi.StringPtrOutput)
}

// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) IsClientSecretInHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *bool { return v.IsClientSecretInHeader }).(pulumi.BoolPtrOutput)
}

// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) RedirectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.RedirectionEndpoint }).(pulumi.StringPtrOutput)
}

// The OAuth token scope
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// The endpoint used to issue a token, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) *string { return v.TokenEndpoint }).(pulumi.StringPtrOutput)
}

// The query headers used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) TokenEndpointHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) interface{} { return v.TokenEndpointHeaders }).(pulumi.AnyOutput)
}

// The query parameters used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponseOutput) TokenEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingAuthPropertiesResponse) interface{} {
		return v.TokenEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

type CodelessConnectorPollingAuthPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingAuthPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ToCodelessConnectorPollingAuthPropertiesResponsePtrOutput() CodelessConnectorPollingAuthPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ToCodelessConnectorPollingAuthPropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessConnectorPollingAuthPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingAuthPropertiesResponse] {
	return pulumix.Output[*CodelessConnectorPollingAuthPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) Elem() CodelessConnectorPollingAuthPropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) CodelessConnectorPollingAuthPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingAuthPropertiesResponse
		return ret
	}).(CodelessConnectorPollingAuthPropertiesResponseOutput)
}

// A prefix send in the header before the actual token
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ApiKeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiKeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The header name which the token is sent with
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) ApiKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApiKeyName
	}).(pulumi.StringPtrOutput)
}

// The authentication type
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) AuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthType
	}).(pulumi.StringPtrOutput)
}

// The endpoint used to authorize the user, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// The query parameters used in authorization request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) AuthorizationEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Describes the flow name, for example 'AuthCode' for Oauth 2.0
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) FlowName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.FlowName
	}).(pulumi.StringPtrOutput)
}

// Marks if the key should sent in header
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) IsApiKeyInPostPayload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IsApiKeyInPostPayload
	}).(pulumi.StringPtrOutput)
}

// Marks if we should send the client secret in header or payload, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) IsClientSecretInHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsClientSecretInHeader
	}).(pulumi.BoolPtrOutput)
}

// The redirect endpoint where we will get the authorization code, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) RedirectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RedirectionEndpoint
	}).(pulumi.StringPtrOutput)
}

// The OAuth token scope
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// The endpoint used to issue a token, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) TokenEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.TokenEndpoint
	}).(pulumi.StringPtrOutput)
}

// The query headers used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) TokenEndpointHeaders() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TokenEndpointHeaders
	}).(pulumi.AnyOutput)
}

// The query parameters used in token request, used in Oauth 2.0 flow
func (o CodelessConnectorPollingAuthPropertiesResponsePtrOutput) TokenEndpointQueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingAuthPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TokenEndpointQueryParameters
	}).(pulumi.AnyOutput)
}

// Config to describe the polling config for API poller connector
type CodelessConnectorPollingConfigProperties struct {
	// Describe the authentication type of the poller
	Auth CodelessConnectorPollingAuthProperties `pulumi:"auth"`
	// The poller active status
	IsActive *bool `pulumi:"isActive"`
	// Describe the poll request paging config of the poller
	Paging *CodelessConnectorPollingPagingProperties `pulumi:"paging"`
	// Describe the poll request config parameters of the poller
	Request CodelessConnectorPollingRequestProperties `pulumi:"request"`
	// Describe the response config parameters of the poller
	Response *CodelessConnectorPollingResponseProperties `pulumi:"response"`
}

// CodelessConnectorPollingConfigPropertiesInput is an input type that accepts CodelessConnectorPollingConfigPropertiesArgs and CodelessConnectorPollingConfigPropertiesOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingConfigPropertiesInput` via:
//
//	CodelessConnectorPollingConfigPropertiesArgs{...}
type CodelessConnectorPollingConfigPropertiesInput interface {
	pulumi.Input

	ToCodelessConnectorPollingConfigPropertiesOutput() CodelessConnectorPollingConfigPropertiesOutput
	ToCodelessConnectorPollingConfigPropertiesOutputWithContext(context.Context) CodelessConnectorPollingConfigPropertiesOutput
}

// Config to describe the polling config for API poller connector
type CodelessConnectorPollingConfigPropertiesArgs struct {
	// Describe the authentication type of the poller
	Auth CodelessConnectorPollingAuthPropertiesInput `pulumi:"auth"`
	// The poller active status
	IsActive pulumi.BoolPtrInput `pulumi:"isActive"`
	// Describe the poll request paging config of the poller
	Paging CodelessConnectorPollingPagingPropertiesPtrInput `pulumi:"paging"`
	// Describe the poll request config parameters of the poller
	Request CodelessConnectorPollingRequestPropertiesInput `pulumi:"request"`
	// Describe the response config parameters of the poller
	Response CodelessConnectorPollingResponsePropertiesPtrInput `pulumi:"response"`
}

func (CodelessConnectorPollingConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingConfigProperties)(nil)).Elem()
}

func (i CodelessConnectorPollingConfigPropertiesArgs) ToCodelessConnectorPollingConfigPropertiesOutput() CodelessConnectorPollingConfigPropertiesOutput {
	return i.ToCodelessConnectorPollingConfigPropertiesOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingConfigPropertiesArgs) ToCodelessConnectorPollingConfigPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingConfigPropertiesOutput)
}

func (i CodelessConnectorPollingConfigPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingConfigProperties] {
	return pulumix.Output[CodelessConnectorPollingConfigProperties]{
		OutputState: i.ToCodelessConnectorPollingConfigPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessConnectorPollingConfigPropertiesArgs) ToCodelessConnectorPollingConfigPropertiesPtrOutput() CodelessConnectorPollingConfigPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingConfigPropertiesArgs) ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingConfigPropertiesOutput).ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx)
}

// CodelessConnectorPollingConfigPropertiesPtrInput is an input type that accepts CodelessConnectorPollingConfigPropertiesArgs, CodelessConnectorPollingConfigPropertiesPtr and CodelessConnectorPollingConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingConfigPropertiesPtrInput` via:
//
//	        CodelessConnectorPollingConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessConnectorPollingConfigPropertiesPtrInput interface {
	pulumi.Input

	ToCodelessConnectorPollingConfigPropertiesPtrOutput() CodelessConnectorPollingConfigPropertiesPtrOutput
	ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(context.Context) CodelessConnectorPollingConfigPropertiesPtrOutput
}

type codelessConnectorPollingConfigPropertiesPtrType CodelessConnectorPollingConfigPropertiesArgs

func CodelessConnectorPollingConfigPropertiesPtr(v *CodelessConnectorPollingConfigPropertiesArgs) CodelessConnectorPollingConfigPropertiesPtrInput {
	return (*codelessConnectorPollingConfigPropertiesPtrType)(v)
}

func (*codelessConnectorPollingConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingConfigProperties)(nil)).Elem()
}

func (i *codelessConnectorPollingConfigPropertiesPtrType) ToCodelessConnectorPollingConfigPropertiesPtrOutput() CodelessConnectorPollingConfigPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessConnectorPollingConfigPropertiesPtrType) ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingConfigPropertiesPtrOutput)
}

func (i *codelessConnectorPollingConfigPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingConfigProperties] {
	return pulumix.Output[*CodelessConnectorPollingConfigProperties]{
		OutputState: i.ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Config to describe the polling config for API poller connector
type CodelessConnectorPollingConfigPropertiesOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingConfigProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingConfigPropertiesOutput) ToCodelessConnectorPollingConfigPropertiesOutput() CodelessConnectorPollingConfigPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesOutput) ToCodelessConnectorPollingConfigPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesOutput) ToCodelessConnectorPollingConfigPropertiesPtrOutput() CodelessConnectorPollingConfigPropertiesPtrOutput {
	return o.ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessConnectorPollingConfigPropertiesOutput) ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingConfigProperties {
		return &v
	}).(CodelessConnectorPollingConfigPropertiesPtrOutput)
}

func (o CodelessConnectorPollingConfigPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingConfigProperties] {
	return pulumix.Output[CodelessConnectorPollingConfigProperties]{
		OutputState: o.OutputState,
	}
}

// Describe the authentication type of the poller
func (o CodelessConnectorPollingConfigPropertiesOutput) Auth() CodelessConnectorPollingAuthPropertiesOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigProperties) CodelessConnectorPollingAuthProperties { return v.Auth }).(CodelessConnectorPollingAuthPropertiesOutput)
}

// The poller active status
func (o CodelessConnectorPollingConfigPropertiesOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigProperties) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Describe the poll request paging config of the poller
func (o CodelessConnectorPollingConfigPropertiesOutput) Paging() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingPagingProperties {
		return v.Paging
	}).(CodelessConnectorPollingPagingPropertiesPtrOutput)
}

// Describe the poll request config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesOutput) Request() CodelessConnectorPollingRequestPropertiesOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigProperties) CodelessConnectorPollingRequestProperties {
		return v.Request
	}).(CodelessConnectorPollingRequestPropertiesOutput)
}

// Describe the response config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesOutput) Response() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingResponseProperties {
		return v.Response
	}).(CodelessConnectorPollingResponsePropertiesPtrOutput)
}

type CodelessConnectorPollingConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingConfigProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingConfigPropertiesPtrOutput) ToCodelessConnectorPollingConfigPropertiesPtrOutput() CodelessConnectorPollingConfigPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesPtrOutput) ToCodelessConnectorPollingConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingConfigProperties] {
	return pulumix.Output[*CodelessConnectorPollingConfigProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingConfigPropertiesPtrOutput) Elem() CodelessConnectorPollingConfigPropertiesOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) CodelessConnectorPollingConfigProperties {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingConfigProperties
		return ret
	}).(CodelessConnectorPollingConfigPropertiesOutput)
}

// Describe the authentication type of the poller
func (o CodelessConnectorPollingConfigPropertiesPtrOutput) Auth() CodelessConnectorPollingAuthPropertiesPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingAuthProperties {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(CodelessConnectorPollingAuthPropertiesPtrOutput)
}

// The poller active status
func (o CodelessConnectorPollingConfigPropertiesPtrOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsActive
	}).(pulumi.BoolPtrOutput)
}

// Describe the poll request paging config of the poller
func (o CodelessConnectorPollingConfigPropertiesPtrOutput) Paging() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingPagingProperties {
		if v == nil {
			return nil
		}
		return v.Paging
	}).(CodelessConnectorPollingPagingPropertiesPtrOutput)
}

// Describe the poll request config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesPtrOutput) Request() CodelessConnectorPollingRequestPropertiesPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingRequestProperties {
		if v == nil {
			return nil
		}
		return &v.Request
	}).(CodelessConnectorPollingRequestPropertiesPtrOutput)
}

// Describe the response config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesPtrOutput) Response() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigProperties) *CodelessConnectorPollingResponseProperties {
		if v == nil {
			return nil
		}
		return v.Response
	}).(CodelessConnectorPollingResponsePropertiesPtrOutput)
}

// Config to describe the polling config for API poller connector
type CodelessConnectorPollingConfigPropertiesResponse struct {
	// Describe the authentication type of the poller
	Auth CodelessConnectorPollingAuthPropertiesResponse `pulumi:"auth"`
	// The poller active status
	IsActive *bool `pulumi:"isActive"`
	// Describe the poll request paging config of the poller
	Paging *CodelessConnectorPollingPagingPropertiesResponse `pulumi:"paging"`
	// Describe the poll request config parameters of the poller
	Request CodelessConnectorPollingRequestPropertiesResponse `pulumi:"request"`
	// Describe the response config parameters of the poller
	Response *CodelessConnectorPollingResponsePropertiesResponse `pulumi:"response"`
}

// Config to describe the polling config for API poller connector
type CodelessConnectorPollingConfigPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingConfigPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingConfigPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingConfigPropertiesResponseOutput) ToCodelessConnectorPollingConfigPropertiesResponseOutput() CodelessConnectorPollingConfigPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesResponseOutput) ToCodelessConnectorPollingConfigPropertiesResponseOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingConfigPropertiesResponse] {
	return pulumix.Output[CodelessConnectorPollingConfigPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Describe the authentication type of the poller
func (o CodelessConnectorPollingConfigPropertiesResponseOutput) Auth() CodelessConnectorPollingAuthPropertiesResponseOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigPropertiesResponse) CodelessConnectorPollingAuthPropertiesResponse {
		return v.Auth
	}).(CodelessConnectorPollingAuthPropertiesResponseOutput)
}

// The poller active status
func (o CodelessConnectorPollingConfigPropertiesResponseOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigPropertiesResponse) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Describe the poll request paging config of the poller
func (o CodelessConnectorPollingConfigPropertiesResponseOutput) Paging() CodelessConnectorPollingPagingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingPagingPropertiesResponse {
		return v.Paging
	}).(CodelessConnectorPollingPagingPropertiesResponsePtrOutput)
}

// Describe the poll request config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesResponseOutput) Request() CodelessConnectorPollingRequestPropertiesResponseOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigPropertiesResponse) CodelessConnectorPollingRequestPropertiesResponse {
		return v.Request
	}).(CodelessConnectorPollingRequestPropertiesResponseOutput)
}

// Describe the response config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesResponseOutput) Response() CodelessConnectorPollingResponsePropertiesResponsePtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingResponsePropertiesResponse {
		return v.Response
	}).(CodelessConnectorPollingResponsePropertiesResponsePtrOutput)
}

type CodelessConnectorPollingConfigPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingConfigPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingConfigPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) ToCodelessConnectorPollingConfigPropertiesResponsePtrOutput() CodelessConnectorPollingConfigPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) ToCodelessConnectorPollingConfigPropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessConnectorPollingConfigPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingConfigPropertiesResponse] {
	return pulumix.Output[*CodelessConnectorPollingConfigPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) Elem() CodelessConnectorPollingConfigPropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) CodelessConnectorPollingConfigPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingConfigPropertiesResponse
		return ret
	}).(CodelessConnectorPollingConfigPropertiesResponseOutput)
}

// Describe the authentication type of the poller
func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) Auth() CodelessConnectorPollingAuthPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingAuthPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(CodelessConnectorPollingAuthPropertiesResponsePtrOutput)
}

// The poller active status
func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsActive
	}).(pulumi.BoolPtrOutput)
}

// Describe the poll request paging config of the poller
func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) Paging() CodelessConnectorPollingPagingPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingPagingPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Paging
	}).(CodelessConnectorPollingPagingPropertiesResponsePtrOutput)
}

// Describe the poll request config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) Request() CodelessConnectorPollingRequestPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingRequestPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.Request
	}).(CodelessConnectorPollingRequestPropertiesResponsePtrOutput)
}

// Describe the response config parameters of the poller
func (o CodelessConnectorPollingConfigPropertiesResponsePtrOutput) Response() CodelessConnectorPollingResponsePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingConfigPropertiesResponse) *CodelessConnectorPollingResponsePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(CodelessConnectorPollingResponsePropertiesResponsePtrOutput)
}

// Describe the properties needed to make a pagination call
type CodelessConnectorPollingPagingProperties struct {
	// Defines the name of a next page attribute
	NextPageParaName *string `pulumi:"nextPageParaName"`
	// Defines the path to a next page token JSON
	NextPageTokenJsonPath *string `pulumi:"nextPageTokenJsonPath"`
	// Defines the path to a page count attribute
	PageCountAttributePath *string `pulumi:"pageCountAttributePath"`
	// Defines the paging size
	PageSize *int `pulumi:"pageSize"`
	// Defines the name of the page size parameter
	PageSizeParaName *string `pulumi:"pageSizeParaName"`
	// Defines the path to a paging time stamp attribute
	PageTimeStampAttributePath *string `pulumi:"pageTimeStampAttributePath"`
	// Defines the path to a page total count attribute
	PageTotalCountAttributePath *string `pulumi:"pageTotalCountAttributePath"`
	// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
	PagingType string `pulumi:"pagingType"`
	// Determines whether to search for the latest time stamp in the events list
	SearchTheLatestTimeStampFromEventsList *string `pulumi:"searchTheLatestTimeStampFromEventsList"`
}

// CodelessConnectorPollingPagingPropertiesInput is an input type that accepts CodelessConnectorPollingPagingPropertiesArgs and CodelessConnectorPollingPagingPropertiesOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingPagingPropertiesInput` via:
//
//	CodelessConnectorPollingPagingPropertiesArgs{...}
type CodelessConnectorPollingPagingPropertiesInput interface {
	pulumi.Input

	ToCodelessConnectorPollingPagingPropertiesOutput() CodelessConnectorPollingPagingPropertiesOutput
	ToCodelessConnectorPollingPagingPropertiesOutputWithContext(context.Context) CodelessConnectorPollingPagingPropertiesOutput
}

// Describe the properties needed to make a pagination call
type CodelessConnectorPollingPagingPropertiesArgs struct {
	// Defines the name of a next page attribute
	NextPageParaName pulumi.StringPtrInput `pulumi:"nextPageParaName"`
	// Defines the path to a next page token JSON
	NextPageTokenJsonPath pulumi.StringPtrInput `pulumi:"nextPageTokenJsonPath"`
	// Defines the path to a page count attribute
	PageCountAttributePath pulumi.StringPtrInput `pulumi:"pageCountAttributePath"`
	// Defines the paging size
	PageSize pulumi.IntPtrInput `pulumi:"pageSize"`
	// Defines the name of the page size parameter
	PageSizeParaName pulumi.StringPtrInput `pulumi:"pageSizeParaName"`
	// Defines the path to a paging time stamp attribute
	PageTimeStampAttributePath pulumi.StringPtrInput `pulumi:"pageTimeStampAttributePath"`
	// Defines the path to a page total count attribute
	PageTotalCountAttributePath pulumi.StringPtrInput `pulumi:"pageTotalCountAttributePath"`
	// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
	PagingType pulumi.StringInput `pulumi:"pagingType"`
	// Determines whether to search for the latest time stamp in the events list
	SearchTheLatestTimeStampFromEventsList pulumi.StringPtrInput `pulumi:"searchTheLatestTimeStampFromEventsList"`
}

func (CodelessConnectorPollingPagingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingPagingProperties)(nil)).Elem()
}

func (i CodelessConnectorPollingPagingPropertiesArgs) ToCodelessConnectorPollingPagingPropertiesOutput() CodelessConnectorPollingPagingPropertiesOutput {
	return i.ToCodelessConnectorPollingPagingPropertiesOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingPagingPropertiesArgs) ToCodelessConnectorPollingPagingPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingPagingPropertiesOutput)
}

func (i CodelessConnectorPollingPagingPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingPagingProperties] {
	return pulumix.Output[CodelessConnectorPollingPagingProperties]{
		OutputState: i.ToCodelessConnectorPollingPagingPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessConnectorPollingPagingPropertiesArgs) ToCodelessConnectorPollingPagingPropertiesPtrOutput() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingPagingPropertiesArgs) ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingPagingPropertiesOutput).ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx)
}

// CodelessConnectorPollingPagingPropertiesPtrInput is an input type that accepts CodelessConnectorPollingPagingPropertiesArgs, CodelessConnectorPollingPagingPropertiesPtr and CodelessConnectorPollingPagingPropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingPagingPropertiesPtrInput` via:
//
//	        CodelessConnectorPollingPagingPropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessConnectorPollingPagingPropertiesPtrInput interface {
	pulumi.Input

	ToCodelessConnectorPollingPagingPropertiesPtrOutput() CodelessConnectorPollingPagingPropertiesPtrOutput
	ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(context.Context) CodelessConnectorPollingPagingPropertiesPtrOutput
}

type codelessConnectorPollingPagingPropertiesPtrType CodelessConnectorPollingPagingPropertiesArgs

func CodelessConnectorPollingPagingPropertiesPtr(v *CodelessConnectorPollingPagingPropertiesArgs) CodelessConnectorPollingPagingPropertiesPtrInput {
	return (*codelessConnectorPollingPagingPropertiesPtrType)(v)
}

func (*codelessConnectorPollingPagingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingPagingProperties)(nil)).Elem()
}

func (i *codelessConnectorPollingPagingPropertiesPtrType) ToCodelessConnectorPollingPagingPropertiesPtrOutput() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessConnectorPollingPagingPropertiesPtrType) ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingPagingPropertiesPtrOutput)
}

func (i *codelessConnectorPollingPagingPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingPagingProperties] {
	return pulumix.Output[*CodelessConnectorPollingPagingProperties]{
		OutputState: i.ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describe the properties needed to make a pagination call
type CodelessConnectorPollingPagingPropertiesOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingPagingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingPagingProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingPagingPropertiesOutput) ToCodelessConnectorPollingPagingPropertiesOutput() CodelessConnectorPollingPagingPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesOutput) ToCodelessConnectorPollingPagingPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesOutput) ToCodelessConnectorPollingPagingPropertiesPtrOutput() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o.ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessConnectorPollingPagingPropertiesOutput) ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessConnectorPollingPagingProperties) *CodelessConnectorPollingPagingProperties {
		return &v
	}).(CodelessConnectorPollingPagingPropertiesPtrOutput)
}

func (o CodelessConnectorPollingPagingPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingPagingProperties] {
	return pulumix.Output[CodelessConnectorPollingPagingProperties]{
		OutputState: o.OutputState,
	}
}

// Defines the name of a next page attribute
func (o CodelessConnectorPollingPagingPropertiesOutput) NextPageParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.NextPageParaName }).(pulumi.StringPtrOutput)
}

// Defines the path to a next page token JSON
func (o CodelessConnectorPollingPagingPropertiesOutput) NextPageTokenJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.NextPageTokenJsonPath }).(pulumi.StringPtrOutput)
}

// Defines the path to a page count attribute
func (o CodelessConnectorPollingPagingPropertiesOutput) PageCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.PageCountAttributePath }).(pulumi.StringPtrOutput)
}

// Defines the paging size
func (o CodelessConnectorPollingPagingPropertiesOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

// Defines the name of the page size parameter
func (o CodelessConnectorPollingPagingPropertiesOutput) PageSizeParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.PageSizeParaName }).(pulumi.StringPtrOutput)
}

// Defines the path to a paging time stamp attribute
func (o CodelessConnectorPollingPagingPropertiesOutput) PageTimeStampAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.PageTimeStampAttributePath }).(pulumi.StringPtrOutput)
}

// Defines the path to a page total count attribute
func (o CodelessConnectorPollingPagingPropertiesOutput) PageTotalCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string { return v.PageTotalCountAttributePath }).(pulumi.StringPtrOutput)
}

// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
func (o CodelessConnectorPollingPagingPropertiesOutput) PagingType() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) string { return v.PagingType }).(pulumi.StringOutput)
}

// Determines whether to search for the latest time stamp in the events list
func (o CodelessConnectorPollingPagingPropertiesOutput) SearchTheLatestTimeStampFromEventsList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingProperties) *string {
		return v.SearchTheLatestTimeStampFromEventsList
	}).(pulumi.StringPtrOutput)
}

type CodelessConnectorPollingPagingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingPagingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingPagingProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingPagingPropertiesPtrOutput) ToCodelessConnectorPollingPagingPropertiesPtrOutput() CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesPtrOutput) ToCodelessConnectorPollingPagingPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingPagingProperties] {
	return pulumix.Output[*CodelessConnectorPollingPagingProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingPagingPropertiesPtrOutput) Elem() CodelessConnectorPollingPagingPropertiesOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) CodelessConnectorPollingPagingProperties {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingPagingProperties
		return ret
	}).(CodelessConnectorPollingPagingPropertiesOutput)
}

// Defines the name of a next page attribute
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) NextPageParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.NextPageParaName
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a next page token JSON
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) NextPageTokenJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.NextPageTokenJsonPath
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a page count attribute
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PageCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.PageCountAttributePath
	}).(pulumi.StringPtrOutput)
}

// Defines the paging size
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *int {
		if v == nil {
			return nil
		}
		return v.PageSize
	}).(pulumi.IntPtrOutput)
}

// Defines the name of the page size parameter
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PageSizeParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.PageSizeParaName
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a paging time stamp attribute
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PageTimeStampAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.PageTimeStampAttributePath
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a page total count attribute
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PageTotalCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.PageTotalCountAttributePath
	}).(pulumi.StringPtrOutput)
}

// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) PagingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return &v.PagingType
	}).(pulumi.StringPtrOutput)
}

// Determines whether to search for the latest time stamp in the events list
func (o CodelessConnectorPollingPagingPropertiesPtrOutput) SearchTheLatestTimeStampFromEventsList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingProperties) *string {
		if v == nil {
			return nil
		}
		return v.SearchTheLatestTimeStampFromEventsList
	}).(pulumi.StringPtrOutput)
}

// Describe the properties needed to make a pagination call
type CodelessConnectorPollingPagingPropertiesResponse struct {
	// Defines the name of a next page attribute
	NextPageParaName *string `pulumi:"nextPageParaName"`
	// Defines the path to a next page token JSON
	NextPageTokenJsonPath *string `pulumi:"nextPageTokenJsonPath"`
	// Defines the path to a page count attribute
	PageCountAttributePath *string `pulumi:"pageCountAttributePath"`
	// Defines the paging size
	PageSize *int `pulumi:"pageSize"`
	// Defines the name of the page size parameter
	PageSizeParaName *string `pulumi:"pageSizeParaName"`
	// Defines the path to a paging time stamp attribute
	PageTimeStampAttributePath *string `pulumi:"pageTimeStampAttributePath"`
	// Defines the path to a page total count attribute
	PageTotalCountAttributePath *string `pulumi:"pageTotalCountAttributePath"`
	// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
	PagingType string `pulumi:"pagingType"`
	// Determines whether to search for the latest time stamp in the events list
	SearchTheLatestTimeStampFromEventsList *string `pulumi:"searchTheLatestTimeStampFromEventsList"`
}

// Describe the properties needed to make a pagination call
type CodelessConnectorPollingPagingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingPagingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingPagingPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingPagingPropertiesResponseOutput) ToCodelessConnectorPollingPagingPropertiesResponseOutput() CodelessConnectorPollingPagingPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesResponseOutput) ToCodelessConnectorPollingPagingPropertiesResponseOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingPagingPropertiesResponse] {
	return pulumix.Output[CodelessConnectorPollingPagingPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Defines the name of a next page attribute
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) NextPageParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.NextPageParaName }).(pulumi.StringPtrOutput)
}

// Defines the path to a next page token JSON
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) NextPageTokenJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.NextPageTokenJsonPath }).(pulumi.StringPtrOutput)
}

// Defines the path to a page count attribute
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PageCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.PageCountAttributePath }).(pulumi.StringPtrOutput)
}

// Defines the paging size
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *int { return v.PageSize }).(pulumi.IntPtrOutput)
}

// Defines the name of the page size parameter
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PageSizeParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.PageSizeParaName }).(pulumi.StringPtrOutput)
}

// Defines the path to a paging time stamp attribute
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PageTimeStampAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.PageTimeStampAttributePath }).(pulumi.StringPtrOutput)
}

// Defines the path to a page total count attribute
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PageTotalCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string { return v.PageTotalCountAttributePath }).(pulumi.StringPtrOutput)
}

// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) PagingType() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) string { return v.PagingType }).(pulumi.StringOutput)
}

// Determines whether to search for the latest time stamp in the events list
func (o CodelessConnectorPollingPagingPropertiesResponseOutput) SearchTheLatestTimeStampFromEventsList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingPagingPropertiesResponse) *string {
		return v.SearchTheLatestTimeStampFromEventsList
	}).(pulumi.StringPtrOutput)
}

type CodelessConnectorPollingPagingPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingPagingPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingPagingPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) ToCodelessConnectorPollingPagingPropertiesResponsePtrOutput() CodelessConnectorPollingPagingPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) ToCodelessConnectorPollingPagingPropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessConnectorPollingPagingPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingPagingPropertiesResponse] {
	return pulumix.Output[*CodelessConnectorPollingPagingPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) Elem() CodelessConnectorPollingPagingPropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) CodelessConnectorPollingPagingPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingPagingPropertiesResponse
		return ret
	}).(CodelessConnectorPollingPagingPropertiesResponseOutput)
}

// Defines the name of a next page attribute
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) NextPageParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NextPageParaName
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a next page token JSON
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) NextPageTokenJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.NextPageTokenJsonPath
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a page count attribute
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PageCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PageCountAttributePath
	}).(pulumi.StringPtrOutput)
}

// Defines the paging size
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.PageSize
	}).(pulumi.IntPtrOutput)
}

// Defines the name of the page size parameter
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PageSizeParaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PageSizeParaName
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a paging time stamp attribute
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PageTimeStampAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PageTimeStampAttributePath
	}).(pulumi.StringPtrOutput)
}

// Defines the path to a page total count attribute
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PageTotalCountAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.PageTotalCountAttributePath
	}).(pulumi.StringPtrOutput)
}

// Describes the type. could be 'None', 'PageToken', 'PageCount', 'TimeStamp'
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) PagingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PagingType
	}).(pulumi.StringPtrOutput)
}

// Determines whether to search for the latest time stamp in the events list
func (o CodelessConnectorPollingPagingPropertiesResponsePtrOutput) SearchTheLatestTimeStampFromEventsList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingPagingPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SearchTheLatestTimeStampFromEventsList
	}).(pulumi.StringPtrOutput)
}

// Describe the request properties needed to successfully pull from the server
type CodelessConnectorPollingRequestProperties struct {
	// Describe the endpoint we should pull the data from
	ApiEndpoint string `pulumi:"apiEndpoint"`
	// This will be used the query events from the end of the time window
	EndTimeAttributeName *string `pulumi:"endTimeAttributeName"`
	// Describe the headers sent in the poll request
	Headers interface{} `pulumi:"headers"`
	// The http method type we will use in the poll request, GET or POST
	HttpMethod string `pulumi:"httpMethod"`
	// Describe the query parameters sent in the poll request
	QueryParameters interface{} `pulumi:"queryParameters"`
	// For advanced scenarios for example user name/password embedded in nested JSON payload
	QueryParametersTemplate *string `pulumi:"queryParametersTemplate"`
	// The time format will be used the query events in a specific window
	QueryTimeFormat string `pulumi:"queryTimeFormat"`
	// The window interval we will use the pull the data
	QueryWindowInMin int `pulumi:"queryWindowInMin"`
	// Defines the rate limit QPS
	RateLimitQps *int `pulumi:"rateLimitQps"`
	// Describe the amount of time we should try and poll the data in case of failure
	RetryCount *int `pulumi:"retryCount"`
	// This will be used the query events from a start of the time window
	StartTimeAttributeName *string `pulumi:"startTimeAttributeName"`
	// The number of seconds we will consider as a request timeout
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// CodelessConnectorPollingRequestPropertiesInput is an input type that accepts CodelessConnectorPollingRequestPropertiesArgs and CodelessConnectorPollingRequestPropertiesOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingRequestPropertiesInput` via:
//
//	CodelessConnectorPollingRequestPropertiesArgs{...}
type CodelessConnectorPollingRequestPropertiesInput interface {
	pulumi.Input

	ToCodelessConnectorPollingRequestPropertiesOutput() CodelessConnectorPollingRequestPropertiesOutput
	ToCodelessConnectorPollingRequestPropertiesOutputWithContext(context.Context) CodelessConnectorPollingRequestPropertiesOutput
}

// Describe the request properties needed to successfully pull from the server
type CodelessConnectorPollingRequestPropertiesArgs struct {
	// Describe the endpoint we should pull the data from
	ApiEndpoint pulumi.StringInput `pulumi:"apiEndpoint"`
	// This will be used the query events from the end of the time window
	EndTimeAttributeName pulumi.StringPtrInput `pulumi:"endTimeAttributeName"`
	// Describe the headers sent in the poll request
	Headers pulumi.Input `pulumi:"headers"`
	// The http method type we will use in the poll request, GET or POST
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// Describe the query parameters sent in the poll request
	QueryParameters pulumi.Input `pulumi:"queryParameters"`
	// For advanced scenarios for example user name/password embedded in nested JSON payload
	QueryParametersTemplate pulumi.StringPtrInput `pulumi:"queryParametersTemplate"`
	// The time format will be used the query events in a specific window
	QueryTimeFormat pulumi.StringInput `pulumi:"queryTimeFormat"`
	// The window interval we will use the pull the data
	QueryWindowInMin pulumi.IntInput `pulumi:"queryWindowInMin"`
	// Defines the rate limit QPS
	RateLimitQps pulumi.IntPtrInput `pulumi:"rateLimitQps"`
	// Describe the amount of time we should try and poll the data in case of failure
	RetryCount pulumi.IntPtrInput `pulumi:"retryCount"`
	// This will be used the query events from a start of the time window
	StartTimeAttributeName pulumi.StringPtrInput `pulumi:"startTimeAttributeName"`
	// The number of seconds we will consider as a request timeout
	TimeoutInSeconds pulumi.IntPtrInput `pulumi:"timeoutInSeconds"`
}

func (CodelessConnectorPollingRequestPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingRequestProperties)(nil)).Elem()
}

func (i CodelessConnectorPollingRequestPropertiesArgs) ToCodelessConnectorPollingRequestPropertiesOutput() CodelessConnectorPollingRequestPropertiesOutput {
	return i.ToCodelessConnectorPollingRequestPropertiesOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingRequestPropertiesArgs) ToCodelessConnectorPollingRequestPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingRequestPropertiesOutput)
}

func (i CodelessConnectorPollingRequestPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingRequestProperties] {
	return pulumix.Output[CodelessConnectorPollingRequestProperties]{
		OutputState: i.ToCodelessConnectorPollingRequestPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessConnectorPollingRequestPropertiesArgs) ToCodelessConnectorPollingRequestPropertiesPtrOutput() CodelessConnectorPollingRequestPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingRequestPropertiesArgs) ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingRequestPropertiesOutput).ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx)
}

// CodelessConnectorPollingRequestPropertiesPtrInput is an input type that accepts CodelessConnectorPollingRequestPropertiesArgs, CodelessConnectorPollingRequestPropertiesPtr and CodelessConnectorPollingRequestPropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingRequestPropertiesPtrInput` via:
//
//	        CodelessConnectorPollingRequestPropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessConnectorPollingRequestPropertiesPtrInput interface {
	pulumi.Input

	ToCodelessConnectorPollingRequestPropertiesPtrOutput() CodelessConnectorPollingRequestPropertiesPtrOutput
	ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(context.Context) CodelessConnectorPollingRequestPropertiesPtrOutput
}

type codelessConnectorPollingRequestPropertiesPtrType CodelessConnectorPollingRequestPropertiesArgs

func CodelessConnectorPollingRequestPropertiesPtr(v *CodelessConnectorPollingRequestPropertiesArgs) CodelessConnectorPollingRequestPropertiesPtrInput {
	return (*codelessConnectorPollingRequestPropertiesPtrType)(v)
}

func (*codelessConnectorPollingRequestPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingRequestProperties)(nil)).Elem()
}

func (i *codelessConnectorPollingRequestPropertiesPtrType) ToCodelessConnectorPollingRequestPropertiesPtrOutput() CodelessConnectorPollingRequestPropertiesPtrOutput {
	return i.ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessConnectorPollingRequestPropertiesPtrType) ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingRequestPropertiesPtrOutput)
}

func (i *codelessConnectorPollingRequestPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingRequestProperties] {
	return pulumix.Output[*CodelessConnectorPollingRequestProperties]{
		OutputState: i.ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describe the request properties needed to successfully pull from the server
type CodelessConnectorPollingRequestPropertiesOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingRequestPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingRequestProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingRequestPropertiesOutput) ToCodelessConnectorPollingRequestPropertiesOutput() CodelessConnectorPollingRequestPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesOutput) ToCodelessConnectorPollingRequestPropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesOutput) ToCodelessConnectorPollingRequestPropertiesPtrOutput() CodelessConnectorPollingRequestPropertiesPtrOutput {
	return o.ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessConnectorPollingRequestPropertiesOutput) ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessConnectorPollingRequestProperties) *CodelessConnectorPollingRequestProperties {
		return &v
	}).(CodelessConnectorPollingRequestPropertiesPtrOutput)
}

func (o CodelessConnectorPollingRequestPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingRequestProperties] {
	return pulumix.Output[CodelessConnectorPollingRequestProperties]{
		OutputState: o.OutputState,
	}
}

// Describe the endpoint we should pull the data from
func (o CodelessConnectorPollingRequestPropertiesOutput) ApiEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) string { return v.ApiEndpoint }).(pulumi.StringOutput)
}

// This will be used the query events from the end of the time window
func (o CodelessConnectorPollingRequestPropertiesOutput) EndTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *string { return v.EndTimeAttributeName }).(pulumi.StringPtrOutput)
}

// Describe the headers sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) interface{} { return v.Headers }).(pulumi.AnyOutput)
}

// The http method type we will use in the poll request, GET or POST
func (o CodelessConnectorPollingRequestPropertiesOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// Describe the query parameters sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesOutput) QueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) interface{} { return v.QueryParameters }).(pulumi.AnyOutput)
}

// For advanced scenarios for example user name/password embedded in nested JSON payload
func (o CodelessConnectorPollingRequestPropertiesOutput) QueryParametersTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *string { return v.QueryParametersTemplate }).(pulumi.StringPtrOutput)
}

// The time format will be used the query events in a specific window
func (o CodelessConnectorPollingRequestPropertiesOutput) QueryTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) string { return v.QueryTimeFormat }).(pulumi.StringOutput)
}

// The window interval we will use the pull the data
func (o CodelessConnectorPollingRequestPropertiesOutput) QueryWindowInMin() pulumi.IntOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) int { return v.QueryWindowInMin }).(pulumi.IntOutput)
}

// Defines the rate limit QPS
func (o CodelessConnectorPollingRequestPropertiesOutput) RateLimitQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *int { return v.RateLimitQps }).(pulumi.IntPtrOutput)
}

// Describe the amount of time we should try and poll the data in case of failure
func (o CodelessConnectorPollingRequestPropertiesOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

// This will be used the query events from a start of the time window
func (o CodelessConnectorPollingRequestPropertiesOutput) StartTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *string { return v.StartTimeAttributeName }).(pulumi.StringPtrOutput)
}

// The number of seconds we will consider as a request timeout
func (o CodelessConnectorPollingRequestPropertiesOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestProperties) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

type CodelessConnectorPollingRequestPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingRequestPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingRequestProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingRequestPropertiesPtrOutput) ToCodelessConnectorPollingRequestPropertiesPtrOutput() CodelessConnectorPollingRequestPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesPtrOutput) ToCodelessConnectorPollingRequestPropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingRequestProperties] {
	return pulumix.Output[*CodelessConnectorPollingRequestProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingRequestPropertiesPtrOutput) Elem() CodelessConnectorPollingRequestPropertiesOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) CodelessConnectorPollingRequestProperties {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingRequestProperties
		return ret
	}).(CodelessConnectorPollingRequestPropertiesOutput)
}

// Describe the endpoint we should pull the data from
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) ApiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ApiEndpoint
	}).(pulumi.StringPtrOutput)
}

// This will be used the query events from the end of the time window
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) EndTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return v.EndTimeAttributeName
	}).(pulumi.StringPtrOutput)
}

// Describe the headers sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.AnyOutput)
}

// The http method type we will use in the poll request, GET or POST
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// Describe the query parameters sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) QueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.AnyOutput)
}

// For advanced scenarios for example user name/password embedded in nested JSON payload
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) QueryParametersTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return v.QueryParametersTemplate
	}).(pulumi.StringPtrOutput)
}

// The time format will be used the query events in a specific window
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) QueryTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return &v.QueryTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The window interval we will use the pull the data
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) QueryWindowInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *int {
		if v == nil {
			return nil
		}
		return &v.QueryWindowInMin
	}).(pulumi.IntPtrOutput)
}

// Defines the rate limit QPS
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) RateLimitQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *int {
		if v == nil {
			return nil
		}
		return v.RateLimitQps
	}).(pulumi.IntPtrOutput)
}

// Describe the amount of time we should try and poll the data in case of failure
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *int {
		if v == nil {
			return nil
		}
		return v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// This will be used the query events from a start of the time window
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) StartTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeAttributeName
	}).(pulumi.StringPtrOutput)
}

// The number of seconds we will consider as a request timeout
func (o CodelessConnectorPollingRequestPropertiesPtrOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestProperties) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// Describe the request properties needed to successfully pull from the server
type CodelessConnectorPollingRequestPropertiesResponse struct {
	// Describe the endpoint we should pull the data from
	ApiEndpoint string `pulumi:"apiEndpoint"`
	// This will be used the query events from the end of the time window
	EndTimeAttributeName *string `pulumi:"endTimeAttributeName"`
	// Describe the headers sent in the poll request
	Headers interface{} `pulumi:"headers"`
	// The http method type we will use in the poll request, GET or POST
	HttpMethod string `pulumi:"httpMethod"`
	// Describe the query parameters sent in the poll request
	QueryParameters interface{} `pulumi:"queryParameters"`
	// For advanced scenarios for example user name/password embedded in nested JSON payload
	QueryParametersTemplate *string `pulumi:"queryParametersTemplate"`
	// The time format will be used the query events in a specific window
	QueryTimeFormat string `pulumi:"queryTimeFormat"`
	// The window interval we will use the pull the data
	QueryWindowInMin int `pulumi:"queryWindowInMin"`
	// Defines the rate limit QPS
	RateLimitQps *int `pulumi:"rateLimitQps"`
	// Describe the amount of time we should try and poll the data in case of failure
	RetryCount *int `pulumi:"retryCount"`
	// This will be used the query events from a start of the time window
	StartTimeAttributeName *string `pulumi:"startTimeAttributeName"`
	// The number of seconds we will consider as a request timeout
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
}

// Describe the request properties needed to successfully pull from the server
type CodelessConnectorPollingRequestPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingRequestPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingRequestPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingRequestPropertiesResponseOutput) ToCodelessConnectorPollingRequestPropertiesResponseOutput() CodelessConnectorPollingRequestPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesResponseOutput) ToCodelessConnectorPollingRequestPropertiesResponseOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingRequestPropertiesResponse] {
	return pulumix.Output[CodelessConnectorPollingRequestPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Describe the endpoint we should pull the data from
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) ApiEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) string { return v.ApiEndpoint }).(pulumi.StringOutput)
}

// This will be used the query events from the end of the time window
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) EndTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *string { return v.EndTimeAttributeName }).(pulumi.StringPtrOutput)
}

// Describe the headers sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) interface{} { return v.Headers }).(pulumi.AnyOutput)
}

// The http method type we will use in the poll request, GET or POST
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// Describe the query parameters sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) QueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) interface{} { return v.QueryParameters }).(pulumi.AnyOutput)
}

// For advanced scenarios for example user name/password embedded in nested JSON payload
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) QueryParametersTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *string { return v.QueryParametersTemplate }).(pulumi.StringPtrOutput)
}

// The time format will be used the query events in a specific window
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) QueryTimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) string { return v.QueryTimeFormat }).(pulumi.StringOutput)
}

// The window interval we will use the pull the data
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) QueryWindowInMin() pulumi.IntOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) int { return v.QueryWindowInMin }).(pulumi.IntOutput)
}

// Defines the rate limit QPS
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) RateLimitQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *int { return v.RateLimitQps }).(pulumi.IntPtrOutput)
}

// Describe the amount of time we should try and poll the data in case of failure
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

// This will be used the query events from a start of the time window
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) StartTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *string { return v.StartTimeAttributeName }).(pulumi.StringPtrOutput)
}

// The number of seconds we will consider as a request timeout
func (o CodelessConnectorPollingRequestPropertiesResponseOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingRequestPropertiesResponse) *int { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

type CodelessConnectorPollingRequestPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingRequestPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingRequestPropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) ToCodelessConnectorPollingRequestPropertiesResponsePtrOutput() CodelessConnectorPollingRequestPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) ToCodelessConnectorPollingRequestPropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessConnectorPollingRequestPropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingRequestPropertiesResponse] {
	return pulumix.Output[*CodelessConnectorPollingRequestPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) Elem() CodelessConnectorPollingRequestPropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) CodelessConnectorPollingRequestPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingRequestPropertiesResponse
		return ret
	}).(CodelessConnectorPollingRequestPropertiesResponseOutput)
}

// Describe the endpoint we should pull the data from
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) ApiEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ApiEndpoint
	}).(pulumi.StringPtrOutput)
}

// This will be used the query events from the end of the time window
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) EndTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTimeAttributeName
	}).(pulumi.StringPtrOutput)
}

// Describe the headers sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) Headers() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.AnyOutput)
}

// The http method type we will use in the poll request, GET or POST
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// Describe the query parameters sent in the poll request
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) QueryParameters() pulumi.AnyOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(pulumi.AnyOutput)
}

// For advanced scenarios for example user name/password embedded in nested JSON payload
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) QueryParametersTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.QueryParametersTemplate
	}).(pulumi.StringPtrOutput)
}

// The time format will be used the query events in a specific window
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) QueryTimeFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.QueryTimeFormat
	}).(pulumi.StringPtrOutput)
}

// The window interval we will use the pull the data
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) QueryWindowInMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.QueryWindowInMin
	}).(pulumi.IntPtrOutput)
}

// Defines the rate limit QPS
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) RateLimitQps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.RateLimitQps
	}).(pulumi.IntPtrOutput)
}

// Describe the amount of time we should try and poll the data in case of failure
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// This will be used the query events from a start of the time window
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) StartTimeAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeAttributeName
	}).(pulumi.StringPtrOutput)
}

// The number of seconds we will consider as a request timeout
func (o CodelessConnectorPollingRequestPropertiesResponsePtrOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingRequestPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.IntPtrOutput)
}

// Describes the response from the external server
type CodelessConnectorPollingResponseProperties struct {
	// Describes the path we should extract the data in the response
	EventsJsonPaths []string `pulumi:"eventsJsonPaths"`
	// Describes if the data in the response is Gzip
	IsGzipCompressed *bool `pulumi:"isGzipCompressed"`
	// Describes the path we should extract the status code in the response
	SuccessStatusJsonPath *string `pulumi:"successStatusJsonPath"`
	// Describes the path we should extract the status value in the response
	SuccessStatusValue *string `pulumi:"successStatusValue"`
}

// CodelessConnectorPollingResponsePropertiesInput is an input type that accepts CodelessConnectorPollingResponsePropertiesArgs and CodelessConnectorPollingResponsePropertiesOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingResponsePropertiesInput` via:
//
//	CodelessConnectorPollingResponsePropertiesArgs{...}
type CodelessConnectorPollingResponsePropertiesInput interface {
	pulumi.Input

	ToCodelessConnectorPollingResponsePropertiesOutput() CodelessConnectorPollingResponsePropertiesOutput
	ToCodelessConnectorPollingResponsePropertiesOutputWithContext(context.Context) CodelessConnectorPollingResponsePropertiesOutput
}

// Describes the response from the external server
type CodelessConnectorPollingResponsePropertiesArgs struct {
	// Describes the path we should extract the data in the response
	EventsJsonPaths pulumi.StringArrayInput `pulumi:"eventsJsonPaths"`
	// Describes if the data in the response is Gzip
	IsGzipCompressed pulumi.BoolPtrInput `pulumi:"isGzipCompressed"`
	// Describes the path we should extract the status code in the response
	SuccessStatusJsonPath pulumi.StringPtrInput `pulumi:"successStatusJsonPath"`
	// Describes the path we should extract the status value in the response
	SuccessStatusValue pulumi.StringPtrInput `pulumi:"successStatusValue"`
}

func (CodelessConnectorPollingResponsePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingResponseProperties)(nil)).Elem()
}

func (i CodelessConnectorPollingResponsePropertiesArgs) ToCodelessConnectorPollingResponsePropertiesOutput() CodelessConnectorPollingResponsePropertiesOutput {
	return i.ToCodelessConnectorPollingResponsePropertiesOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingResponsePropertiesArgs) ToCodelessConnectorPollingResponsePropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingResponsePropertiesOutput)
}

func (i CodelessConnectorPollingResponsePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingResponseProperties] {
	return pulumix.Output[CodelessConnectorPollingResponseProperties]{
		OutputState: i.ToCodelessConnectorPollingResponsePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessConnectorPollingResponsePropertiesArgs) ToCodelessConnectorPollingResponsePropertiesPtrOutput() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return i.ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessConnectorPollingResponsePropertiesArgs) ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingResponsePropertiesOutput).ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx)
}

// CodelessConnectorPollingResponsePropertiesPtrInput is an input type that accepts CodelessConnectorPollingResponsePropertiesArgs, CodelessConnectorPollingResponsePropertiesPtr and CodelessConnectorPollingResponsePropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessConnectorPollingResponsePropertiesPtrInput` via:
//
//	        CodelessConnectorPollingResponsePropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessConnectorPollingResponsePropertiesPtrInput interface {
	pulumi.Input

	ToCodelessConnectorPollingResponsePropertiesPtrOutput() CodelessConnectorPollingResponsePropertiesPtrOutput
	ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(context.Context) CodelessConnectorPollingResponsePropertiesPtrOutput
}

type codelessConnectorPollingResponsePropertiesPtrType CodelessConnectorPollingResponsePropertiesArgs

func CodelessConnectorPollingResponsePropertiesPtr(v *CodelessConnectorPollingResponsePropertiesArgs) CodelessConnectorPollingResponsePropertiesPtrInput {
	return (*codelessConnectorPollingResponsePropertiesPtrType)(v)
}

func (*codelessConnectorPollingResponsePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingResponseProperties)(nil)).Elem()
}

func (i *codelessConnectorPollingResponsePropertiesPtrType) ToCodelessConnectorPollingResponsePropertiesPtrOutput() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return i.ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessConnectorPollingResponsePropertiesPtrType) ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessConnectorPollingResponsePropertiesPtrOutput)
}

func (i *codelessConnectorPollingResponsePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingResponseProperties] {
	return pulumix.Output[*CodelessConnectorPollingResponseProperties]{
		OutputState: i.ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes the response from the external server
type CodelessConnectorPollingResponsePropertiesOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingResponseProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingResponsePropertiesOutput) ToCodelessConnectorPollingResponsePropertiesOutput() CodelessConnectorPollingResponsePropertiesOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesOutput) ToCodelessConnectorPollingResponsePropertiesOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesOutput) ToCodelessConnectorPollingResponsePropertiesPtrOutput() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o.ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessConnectorPollingResponsePropertiesOutput) ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessConnectorPollingResponseProperties) *CodelessConnectorPollingResponseProperties {
		return &v
	}).(CodelessConnectorPollingResponsePropertiesPtrOutput)
}

func (o CodelessConnectorPollingResponsePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingResponseProperties] {
	return pulumix.Output[CodelessConnectorPollingResponseProperties]{
		OutputState: o.OutputState,
	}
}

// Describes the path we should extract the data in the response
func (o CodelessConnectorPollingResponsePropertiesOutput) EventsJsonPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponseProperties) []string { return v.EventsJsonPaths }).(pulumi.StringArrayOutput)
}

// Describes if the data in the response is Gzip
func (o CodelessConnectorPollingResponsePropertiesOutput) IsGzipCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponseProperties) *bool { return v.IsGzipCompressed }).(pulumi.BoolPtrOutput)
}

// Describes the path we should extract the status code in the response
func (o CodelessConnectorPollingResponsePropertiesOutput) SuccessStatusJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponseProperties) *string { return v.SuccessStatusJsonPath }).(pulumi.StringPtrOutput)
}

// Describes the path we should extract the status value in the response
func (o CodelessConnectorPollingResponsePropertiesOutput) SuccessStatusValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponseProperties) *string { return v.SuccessStatusValue }).(pulumi.StringPtrOutput)
}

type CodelessConnectorPollingResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingResponseProperties)(nil)).Elem()
}

func (o CodelessConnectorPollingResponsePropertiesPtrOutput) ToCodelessConnectorPollingResponsePropertiesPtrOutput() CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesPtrOutput) ToCodelessConnectorPollingResponsePropertiesPtrOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesPtrOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingResponseProperties] {
	return pulumix.Output[*CodelessConnectorPollingResponseProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingResponsePropertiesPtrOutput) Elem() CodelessConnectorPollingResponsePropertiesOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponseProperties) CodelessConnectorPollingResponseProperties {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingResponseProperties
		return ret
	}).(CodelessConnectorPollingResponsePropertiesOutput)
}

// Describes the path we should extract the data in the response
func (o CodelessConnectorPollingResponsePropertiesPtrOutput) EventsJsonPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponseProperties) []string {
		if v == nil {
			return nil
		}
		return v.EventsJsonPaths
	}).(pulumi.StringArrayOutput)
}

// Describes if the data in the response is Gzip
func (o CodelessConnectorPollingResponsePropertiesPtrOutput) IsGzipCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsGzipCompressed
	}).(pulumi.BoolPtrOutput)
}

// Describes the path we should extract the status code in the response
func (o CodelessConnectorPollingResponsePropertiesPtrOutput) SuccessStatusJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SuccessStatusJsonPath
	}).(pulumi.StringPtrOutput)
}

// Describes the path we should extract the status value in the response
func (o CodelessConnectorPollingResponsePropertiesPtrOutput) SuccessStatusValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SuccessStatusValue
	}).(pulumi.StringPtrOutput)
}

// Describes the response from the external server
type CodelessConnectorPollingResponsePropertiesResponse struct {
	// Describes the path we should extract the data in the response
	EventsJsonPaths []string `pulumi:"eventsJsonPaths"`
	// Describes if the data in the response is Gzip
	IsGzipCompressed *bool `pulumi:"isGzipCompressed"`
	// Describes the path we should extract the status code in the response
	SuccessStatusJsonPath *string `pulumi:"successStatusJsonPath"`
	// Describes the path we should extract the status value in the response
	SuccessStatusValue *string `pulumi:"successStatusValue"`
}

// Describes the response from the external server
type CodelessConnectorPollingResponsePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingResponsePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessConnectorPollingResponsePropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingResponsePropertiesResponseOutput) ToCodelessConnectorPollingResponsePropertiesResponseOutput() CodelessConnectorPollingResponsePropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesResponseOutput) ToCodelessConnectorPollingResponsePropertiesResponseOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesResponseOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessConnectorPollingResponsePropertiesResponse] {
	return pulumix.Output[CodelessConnectorPollingResponsePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Describes the path we should extract the data in the response
func (o CodelessConnectorPollingResponsePropertiesResponseOutput) EventsJsonPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponsePropertiesResponse) []string { return v.EventsJsonPaths }).(pulumi.StringArrayOutput)
}

// Describes if the data in the response is Gzip
func (o CodelessConnectorPollingResponsePropertiesResponseOutput) IsGzipCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponsePropertiesResponse) *bool { return v.IsGzipCompressed }).(pulumi.BoolPtrOutput)
}

// Describes the path we should extract the status code in the response
func (o CodelessConnectorPollingResponsePropertiesResponseOutput) SuccessStatusJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponsePropertiesResponse) *string { return v.SuccessStatusJsonPath }).(pulumi.StringPtrOutput)
}

// Describes the path we should extract the status value in the response
func (o CodelessConnectorPollingResponsePropertiesResponseOutput) SuccessStatusValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessConnectorPollingResponsePropertiesResponse) *string { return v.SuccessStatusValue }).(pulumi.StringPtrOutput)
}

type CodelessConnectorPollingResponsePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessConnectorPollingResponsePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessConnectorPollingResponsePropertiesResponse)(nil)).Elem()
}

func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) ToCodelessConnectorPollingResponsePropertiesResponsePtrOutput() CodelessConnectorPollingResponsePropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) ToCodelessConnectorPollingResponsePropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessConnectorPollingResponsePropertiesResponsePtrOutput {
	return o
}

func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessConnectorPollingResponsePropertiesResponse] {
	return pulumix.Output[*CodelessConnectorPollingResponsePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) Elem() CodelessConnectorPollingResponsePropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponsePropertiesResponse) CodelessConnectorPollingResponsePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessConnectorPollingResponsePropertiesResponse
		return ret
	}).(CodelessConnectorPollingResponsePropertiesResponseOutput)
}

// Describes the path we should extract the data in the response
func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) EventsJsonPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponsePropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.EventsJsonPaths
	}).(pulumi.StringArrayOutput)
}

// Describes if the data in the response is Gzip
func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) IsGzipCompressed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponsePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsGzipCompressed
	}).(pulumi.BoolPtrOutput)
}

// Describes the path we should extract the status code in the response
func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) SuccessStatusJsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponsePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SuccessStatusJsonPath
	}).(pulumi.StringPtrOutput)
}

// Describes the path we should extract the status value in the response
func (o CodelessConnectorPollingResponsePropertiesResponsePtrOutput) SuccessStatusValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessConnectorPollingResponsePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SuccessStatusValue
	}).(pulumi.StringPtrOutput)
}

// Config to describe the instructions blade
type CodelessUiConnectorConfigProperties struct {
	// Connector Availability Status
	Availability Availability `pulumi:"availability"`
	// Define the way the connector check connectivity
	ConnectivityCriteria []CodelessUiConnectorConfigPropertiesConnectivityCriteria `pulumi:"connectivityCriteria"`
	// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
	CustomImage *string `pulumi:"customImage"`
	// Data types to check for last data received
	DataTypes []CodelessUiConnectorConfigPropertiesDataTypes `pulumi:"dataTypes"`
	// Connector description
	DescriptionMarkdown string `pulumi:"descriptionMarkdown"`
	// The graph query to show the current data status
	GraphQueries []CodelessUiConnectorConfigPropertiesGraphQueries `pulumi:"graphQueries"`
	// Name of the table the connector will insert the data to
	GraphQueriesTableName string `pulumi:"graphQueriesTableName"`
	// Instruction steps to enable the connector
	InstructionSteps []CodelessUiConnectorConfigPropertiesInstructionSteps `pulumi:"instructionSteps"`
	// Permissions required for the connector
	Permissions Permissions `pulumi:"permissions"`
	// Connector publisher name
	Publisher string `pulumi:"publisher"`
	// The sample queries for the connector
	SampleQueries []CodelessUiConnectorConfigPropertiesSampleQueries `pulumi:"sampleQueries"`
	// Connector blade title
	Title string `pulumi:"title"`
}

// CodelessUiConnectorConfigPropertiesInput is an input type that accepts CodelessUiConnectorConfigPropertiesArgs and CodelessUiConnectorConfigPropertiesOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesInput` via:
//
//	CodelessUiConnectorConfigPropertiesArgs{...}
type CodelessUiConnectorConfigPropertiesInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesOutput() CodelessUiConnectorConfigPropertiesOutput
	ToCodelessUiConnectorConfigPropertiesOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesOutput
}

// Config to describe the instructions blade
type CodelessUiConnectorConfigPropertiesArgs struct {
	// Connector Availability Status
	Availability AvailabilityInput `pulumi:"availability"`
	// Define the way the connector check connectivity
	ConnectivityCriteria CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayInput `pulumi:"connectivityCriteria"`
	// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
	CustomImage pulumi.StringPtrInput `pulumi:"customImage"`
	// Data types to check for last data received
	DataTypes CodelessUiConnectorConfigPropertiesDataTypesArrayInput `pulumi:"dataTypes"`
	// Connector description
	DescriptionMarkdown pulumi.StringInput `pulumi:"descriptionMarkdown"`
	// The graph query to show the current data status
	GraphQueries CodelessUiConnectorConfigPropertiesGraphQueriesArrayInput `pulumi:"graphQueries"`
	// Name of the table the connector will insert the data to
	GraphQueriesTableName pulumi.StringInput `pulumi:"graphQueriesTableName"`
	// Instruction steps to enable the connector
	InstructionSteps CodelessUiConnectorConfigPropertiesInstructionStepsArrayInput `pulumi:"instructionSteps"`
	// Permissions required for the connector
	Permissions PermissionsInput `pulumi:"permissions"`
	// Connector publisher name
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The sample queries for the connector
	SampleQueries CodelessUiConnectorConfigPropertiesSampleQueriesArrayInput `pulumi:"sampleQueries"`
	// Connector blade title
	Title pulumi.StringInput `pulumi:"title"`
}

func (CodelessUiConnectorConfigPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigProperties)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesArgs) ToCodelessUiConnectorConfigPropertiesOutput() CodelessUiConnectorConfigPropertiesOutput {
	return i.ToCodelessUiConnectorConfigPropertiesOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesArgs) ToCodelessUiConnectorConfigPropertiesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesOutput)
}

func (i CodelessUiConnectorConfigPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigProperties] {
	return pulumix.Output[CodelessUiConnectorConfigProperties]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i CodelessUiConnectorConfigPropertiesArgs) ToCodelessUiConnectorConfigPropertiesPtrOutput() CodelessUiConnectorConfigPropertiesPtrOutput {
	return i.ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesArgs) ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesOutput).ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx)
}

// CodelessUiConnectorConfigPropertiesPtrInput is an input type that accepts CodelessUiConnectorConfigPropertiesArgs, CodelessUiConnectorConfigPropertiesPtr and CodelessUiConnectorConfigPropertiesPtrOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesPtrInput` via:
//
//	        CodelessUiConnectorConfigPropertiesArgs{...}
//
//	or:
//
//	        nil
type CodelessUiConnectorConfigPropertiesPtrInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesPtrOutput() CodelessUiConnectorConfigPropertiesPtrOutput
	ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesPtrOutput
}

type codelessUiConnectorConfigPropertiesPtrType CodelessUiConnectorConfigPropertiesArgs

func CodelessUiConnectorConfigPropertiesPtr(v *CodelessUiConnectorConfigPropertiesArgs) CodelessUiConnectorConfigPropertiesPtrInput {
	return (*codelessUiConnectorConfigPropertiesPtrType)(v)
}

func (*codelessUiConnectorConfigPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessUiConnectorConfigProperties)(nil)).Elem()
}

func (i *codelessUiConnectorConfigPropertiesPtrType) ToCodelessUiConnectorConfigPropertiesPtrOutput() CodelessUiConnectorConfigPropertiesPtrOutput {
	return i.ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(context.Background())
}

func (i *codelessUiConnectorConfigPropertiesPtrType) ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesPtrOutput)
}

func (i *codelessUiConnectorConfigPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CodelessUiConnectorConfigProperties] {
	return pulumix.Output[*CodelessUiConnectorConfigProperties]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Config to describe the instructions blade
type CodelessUiConnectorConfigPropertiesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigProperties)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesOutput) ToCodelessUiConnectorConfigPropertiesOutput() CodelessUiConnectorConfigPropertiesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesOutput) ToCodelessUiConnectorConfigPropertiesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesOutput) ToCodelessUiConnectorConfigPropertiesPtrOutput() CodelessUiConnectorConfigPropertiesPtrOutput {
	return o.ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(context.Background())
}

func (o CodelessUiConnectorConfigPropertiesOutput) ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodelessUiConnectorConfigProperties) *CodelessUiConnectorConfigProperties {
		return &v
	}).(CodelessUiConnectorConfigPropertiesPtrOutput)
}

func (o CodelessUiConnectorConfigPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigProperties] {
	return pulumix.Output[CodelessUiConnectorConfigProperties]{
		OutputState: o.OutputState,
	}
}

// Connector Availability Status
func (o CodelessUiConnectorConfigPropertiesOutput) Availability() AvailabilityOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) Availability { return v.Availability }).(AvailabilityOutput)
}

// Define the way the connector check connectivity
func (o CodelessUiConnectorConfigPropertiesOutput) ConnectivityCriteria() CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesConnectivityCriteria {
		return v.ConnectivityCriteria
	}).(CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput)
}

// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
func (o CodelessUiConnectorConfigPropertiesOutput) CustomImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) *string { return v.CustomImage }).(pulumi.StringPtrOutput)
}

// Data types to check for last data received
func (o CodelessUiConnectorConfigPropertiesOutput) DataTypes() CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesDataTypes {
		return v.DataTypes
	}).(CodelessUiConnectorConfigPropertiesDataTypesArrayOutput)
}

// Connector description
func (o CodelessUiConnectorConfigPropertiesOutput) DescriptionMarkdown() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) string { return v.DescriptionMarkdown }).(pulumi.StringOutput)
}

// The graph query to show the current data status
func (o CodelessUiConnectorConfigPropertiesOutput) GraphQueries() CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesGraphQueries {
		return v.GraphQueries
	}).(CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput)
}

// Name of the table the connector will insert the data to
func (o CodelessUiConnectorConfigPropertiesOutput) GraphQueriesTableName() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) string { return v.GraphQueriesTableName }).(pulumi.StringOutput)
}

// Instruction steps to enable the connector
func (o CodelessUiConnectorConfigPropertiesOutput) InstructionSteps() CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesInstructionSteps {
		return v.InstructionSteps
	}).(CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput)
}

// Permissions required for the connector
func (o CodelessUiConnectorConfigPropertiesOutput) Permissions() PermissionsOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) Permissions { return v.Permissions }).(PermissionsOutput)
}

// Connector publisher name
func (o CodelessUiConnectorConfigPropertiesOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) string { return v.Publisher }).(pulumi.StringOutput)
}

// The sample queries for the connector
func (o CodelessUiConnectorConfigPropertiesOutput) SampleQueries() CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesSampleQueries {
		return v.SampleQueries
	}).(CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput)
}

// Connector blade title
func (o CodelessUiConnectorConfigPropertiesOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigProperties) string { return v.Title }).(pulumi.StringOutput)
}

type CodelessUiConnectorConfigPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessUiConnectorConfigProperties)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesPtrOutput) ToCodelessUiConnectorConfigPropertiesPtrOutput() CodelessUiConnectorConfigPropertiesPtrOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesPtrOutput) ToCodelessUiConnectorConfigPropertiesPtrOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesPtrOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessUiConnectorConfigProperties] {
	return pulumix.Output[*CodelessUiConnectorConfigProperties]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesPtrOutput) Elem() CodelessUiConnectorConfigPropertiesOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) CodelessUiConnectorConfigProperties {
		if v != nil {
			return *v
		}
		var ret CodelessUiConnectorConfigProperties
		return ret
	}).(CodelessUiConnectorConfigPropertiesOutput)
}

// Connector Availability Status
func (o CodelessUiConnectorConfigPropertiesPtrOutput) Availability() AvailabilityPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *Availability {
		if v == nil {
			return nil
		}
		return &v.Availability
	}).(AvailabilityPtrOutput)
}

// Define the way the connector check connectivity
func (o CodelessUiConnectorConfigPropertiesPtrOutput) ConnectivityCriteria() CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesConnectivityCriteria {
		if v == nil {
			return nil
		}
		return v.ConnectivityCriteria
	}).(CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput)
}

// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
func (o CodelessUiConnectorConfigPropertiesPtrOutput) CustomImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *string {
		if v == nil {
			return nil
		}
		return v.CustomImage
	}).(pulumi.StringPtrOutput)
}

// Data types to check for last data received
func (o CodelessUiConnectorConfigPropertiesPtrOutput) DataTypes() CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesDataTypes {
		if v == nil {
			return nil
		}
		return v.DataTypes
	}).(CodelessUiConnectorConfigPropertiesDataTypesArrayOutput)
}

// Connector description
func (o CodelessUiConnectorConfigPropertiesPtrOutput) DescriptionMarkdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DescriptionMarkdown
	}).(pulumi.StringPtrOutput)
}

// The graph query to show the current data status
func (o CodelessUiConnectorConfigPropertiesPtrOutput) GraphQueries() CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesGraphQueries {
		if v == nil {
			return nil
		}
		return v.GraphQueries
	}).(CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput)
}

// Name of the table the connector will insert the data to
func (o CodelessUiConnectorConfigPropertiesPtrOutput) GraphQueriesTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *string {
		if v == nil {
			return nil
		}
		return &v.GraphQueriesTableName
	}).(pulumi.StringPtrOutput)
}

// Instruction steps to enable the connector
func (o CodelessUiConnectorConfigPropertiesPtrOutput) InstructionSteps() CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesInstructionSteps {
		if v == nil {
			return nil
		}
		return v.InstructionSteps
	}).(CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput)
}

// Permissions required for the connector
func (o CodelessUiConnectorConfigPropertiesPtrOutput) Permissions() PermissionsPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *Permissions {
		if v == nil {
			return nil
		}
		return &v.Permissions
	}).(PermissionsPtrOutput)
}

// Connector publisher name
func (o CodelessUiConnectorConfigPropertiesPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The sample queries for the connector
func (o CodelessUiConnectorConfigPropertiesPtrOutput) SampleQueries() CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) []CodelessUiConnectorConfigPropertiesSampleQueries {
		if v == nil {
			return nil
		}
		return v.SampleQueries
	}).(CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput)
}

// Connector blade title
func (o CodelessUiConnectorConfigPropertiesPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesConnectivityCriteria struct {
	// type of connectivity
	Type *string `pulumi:"type"`
	// Queries for checking connectivity
	Value []string `pulumi:"value"`
}

// CodelessUiConnectorConfigPropertiesConnectivityCriteriaInput is an input type that accepts CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs and CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesConnectivityCriteriaInput` via:
//
//	CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs{...}
type CodelessUiConnectorConfigPropertiesConnectivityCriteriaInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput
	ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput
}

type CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs struct {
	// type of connectivity
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Queries for checking connectivity
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesConnectivityCriteria)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput {
	return i.ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput)
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesConnectivityCriteria] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesConnectivityCriteria]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutputWithContext(ctx).OutputState,
	}
}

// CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayInput is an input type that accepts CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray and CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayInput` via:
//
//	CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray{ CodelessUiConnectorConfigPropertiesConnectivityCriteriaArgs{...} }
type CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput
	ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput
}

type CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray []CodelessUiConnectorConfigPropertiesConnectivityCriteriaInput

func (CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesConnectivityCriteria)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return i.ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput)
}

func (i CodelessUiConnectorConfigPropertiesConnectivityCriteriaArray) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesConnectivityCriteria] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesConnectivityCriteria]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutputWithContext(ctx).OutputState,
	}
}

type CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesConnectivityCriteria)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesConnectivityCriteria] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesConnectivityCriteria]{
		OutputState: o.OutputState,
	}
}

// type of connectivity
func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesConnectivityCriteria) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Queries for checking connectivity
func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesConnectivityCriteria) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesConnectivityCriteria)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput() CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput) ToCodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesConnectivityCriteria] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesConnectivityCriteria]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesConnectivityCriteria {
		return vs[0].([]CodelessUiConnectorConfigPropertiesConnectivityCriteria)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput)
}

type CodelessUiConnectorConfigPropertiesDataTypes struct {
	// Query for indicate last data received
	LastDataReceivedQuery *string `pulumi:"lastDataReceivedQuery"`
	// Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
	Name *string `pulumi:"name"`
}

// CodelessUiConnectorConfigPropertiesDataTypesInput is an input type that accepts CodelessUiConnectorConfigPropertiesDataTypesArgs and CodelessUiConnectorConfigPropertiesDataTypesOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesDataTypesInput` via:
//
//	CodelessUiConnectorConfigPropertiesDataTypesArgs{...}
type CodelessUiConnectorConfigPropertiesDataTypesInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesDataTypesOutput() CodelessUiConnectorConfigPropertiesDataTypesOutput
	ToCodelessUiConnectorConfigPropertiesDataTypesOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesDataTypesOutput
}

type CodelessUiConnectorConfigPropertiesDataTypesArgs struct {
	// Query for indicate last data received
	LastDataReceivedQuery pulumi.StringPtrInput `pulumi:"lastDataReceivedQuery"`
	// Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (CodelessUiConnectorConfigPropertiesDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesDataTypes)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArgs) ToCodelessUiConnectorConfigPropertiesDataTypesOutput() CodelessUiConnectorConfigPropertiesDataTypesOutput {
	return i.ToCodelessUiConnectorConfigPropertiesDataTypesOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArgs) ToCodelessUiConnectorConfigPropertiesDataTypesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesDataTypesOutput)
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesDataTypes] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesDataTypes]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesDataTypesOutputWithContext(ctx).OutputState,
	}
}

// CodelessUiConnectorConfigPropertiesDataTypesArrayInput is an input type that accepts CodelessUiConnectorConfigPropertiesDataTypesArray and CodelessUiConnectorConfigPropertiesDataTypesArrayOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesDataTypesArrayInput` via:
//
//	CodelessUiConnectorConfigPropertiesDataTypesArray{ CodelessUiConnectorConfigPropertiesDataTypesArgs{...} }
type CodelessUiConnectorConfigPropertiesDataTypesArrayInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutput() CodelessUiConnectorConfigPropertiesDataTypesArrayOutput
	ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesDataTypesArrayOutput
}

type CodelessUiConnectorConfigPropertiesDataTypesArray []CodelessUiConnectorConfigPropertiesDataTypesInput

func (CodelessUiConnectorConfigPropertiesDataTypesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesDataTypes)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArray) ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutput() CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return i.ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArray) ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesDataTypesArrayOutput)
}

func (i CodelessUiConnectorConfigPropertiesDataTypesArray) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesDataTypes] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesDataTypes]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutputWithContext(ctx).OutputState,
	}
}

type CodelessUiConnectorConfigPropertiesDataTypesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesDataTypes)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesDataTypesOutput) ToCodelessUiConnectorConfigPropertiesDataTypesOutput() CodelessUiConnectorConfigPropertiesDataTypesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesDataTypesOutput) ToCodelessUiConnectorConfigPropertiesDataTypesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesDataTypesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesDataTypes] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesDataTypes]{
		OutputState: o.OutputState,
	}
}

// Query for indicate last data received
func (o CodelessUiConnectorConfigPropertiesDataTypesOutput) LastDataReceivedQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesDataTypes) *string { return v.LastDataReceivedQuery }).(pulumi.StringPtrOutput)
}

// Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
func (o CodelessUiConnectorConfigPropertiesDataTypesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesDataTypes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesDataTypesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesDataTypesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesDataTypes)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesDataTypesArrayOutput) ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutput() CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesDataTypesArrayOutput) ToCodelessUiConnectorConfigPropertiesDataTypesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesDataTypesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesDataTypesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesDataTypes] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesDataTypes]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesDataTypesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesDataTypesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesDataTypes {
		return vs[0].([]CodelessUiConnectorConfigPropertiesDataTypes)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesDataTypesOutput)
}

type CodelessUiConnectorConfigPropertiesGraphQueries struct {
	// The base query for the graph
	BaseQuery *string `pulumi:"baseQuery"`
	// The legend for the graph
	Legend *string `pulumi:"legend"`
	// the metric that the query is checking
	MetricName *string `pulumi:"metricName"`
}

// CodelessUiConnectorConfigPropertiesGraphQueriesInput is an input type that accepts CodelessUiConnectorConfigPropertiesGraphQueriesArgs and CodelessUiConnectorConfigPropertiesGraphQueriesOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesGraphQueriesInput` via:
//
//	CodelessUiConnectorConfigPropertiesGraphQueriesArgs{...}
type CodelessUiConnectorConfigPropertiesGraphQueriesInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesGraphQueriesOutput() CodelessUiConnectorConfigPropertiesGraphQueriesOutput
	ToCodelessUiConnectorConfigPropertiesGraphQueriesOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesOutput
}

type CodelessUiConnectorConfigPropertiesGraphQueriesArgs struct {
	// The base query for the graph
	BaseQuery pulumi.StringPtrInput `pulumi:"baseQuery"`
	// The legend for the graph
	Legend pulumi.StringPtrInput `pulumi:"legend"`
	// the metric that the query is checking
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
}

func (CodelessUiConnectorConfigPropertiesGraphQueriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesGraphQueries)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArgs) ToCodelessUiConnectorConfigPropertiesGraphQueriesOutput() CodelessUiConnectorConfigPropertiesGraphQueriesOutput {
	return i.ToCodelessUiConnectorConfigPropertiesGraphQueriesOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArgs) ToCodelessUiConnectorConfigPropertiesGraphQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesGraphQueriesOutput)
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesGraphQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesGraphQueries]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesGraphQueriesOutputWithContext(ctx).OutputState,
	}
}

// CodelessUiConnectorConfigPropertiesGraphQueriesArrayInput is an input type that accepts CodelessUiConnectorConfigPropertiesGraphQueriesArray and CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesGraphQueriesArrayInput` via:
//
//	CodelessUiConnectorConfigPropertiesGraphQueriesArray{ CodelessUiConnectorConfigPropertiesGraphQueriesArgs{...} }
type CodelessUiConnectorConfigPropertiesGraphQueriesArrayInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput() CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput
	ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput
}

type CodelessUiConnectorConfigPropertiesGraphQueriesArray []CodelessUiConnectorConfigPropertiesGraphQueriesInput

func (CodelessUiConnectorConfigPropertiesGraphQueriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesGraphQueries)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArray) ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput() CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return i.ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArray) ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput)
}

func (i CodelessUiConnectorConfigPropertiesGraphQueriesArray) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesGraphQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesGraphQueries]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutputWithContext(ctx).OutputState,
	}
}

type CodelessUiConnectorConfigPropertiesGraphQueriesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesGraphQueriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesGraphQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) ToCodelessUiConnectorConfigPropertiesGraphQueriesOutput() CodelessUiConnectorConfigPropertiesGraphQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) ToCodelessUiConnectorConfigPropertiesGraphQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesGraphQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesGraphQueries]{
		OutputState: o.OutputState,
	}
}

// The base query for the graph
func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) BaseQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesGraphQueries) *string { return v.BaseQuery }).(pulumi.StringPtrOutput)
}

// The legend for the graph
func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) Legend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesGraphQueries) *string { return v.Legend }).(pulumi.StringPtrOutput)
}

// the metric that the query is checking
func (o CodelessUiConnectorConfigPropertiesGraphQueriesOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesGraphQueries) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesGraphQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput() CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesGraphQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesGraphQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesGraphQueries]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesGraphQueriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesGraphQueries {
		return vs[0].([]CodelessUiConnectorConfigPropertiesGraphQueries)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesGraphQueriesOutput)
}

type CodelessUiConnectorConfigPropertiesInstructionSteps struct {
	// Instruction step description
	Description *string `pulumi:"description"`
	// Instruction step details
	Instructions []InstructionStepsInstructions `pulumi:"instructions"`
	// Instruction step title
	Title *string `pulumi:"title"`
}

// CodelessUiConnectorConfigPropertiesInstructionStepsInput is an input type that accepts CodelessUiConnectorConfigPropertiesInstructionStepsArgs and CodelessUiConnectorConfigPropertiesInstructionStepsOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesInstructionStepsInput` via:
//
//	CodelessUiConnectorConfigPropertiesInstructionStepsArgs{...}
type CodelessUiConnectorConfigPropertiesInstructionStepsInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesInstructionStepsOutput() CodelessUiConnectorConfigPropertiesInstructionStepsOutput
	ToCodelessUiConnectorConfigPropertiesInstructionStepsOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsOutput
}

type CodelessUiConnectorConfigPropertiesInstructionStepsArgs struct {
	// Instruction step description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Instruction step details
	Instructions InstructionStepsInstructionsArrayInput `pulumi:"instructions"`
	// Instruction step title
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (CodelessUiConnectorConfigPropertiesInstructionStepsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesInstructionSteps)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArgs) ToCodelessUiConnectorConfigPropertiesInstructionStepsOutput() CodelessUiConnectorConfigPropertiesInstructionStepsOutput {
	return i.ToCodelessUiConnectorConfigPropertiesInstructionStepsOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArgs) ToCodelessUiConnectorConfigPropertiesInstructionStepsOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesInstructionStepsOutput)
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesInstructionSteps] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesInstructionSteps]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesInstructionStepsOutputWithContext(ctx).OutputState,
	}
}

// CodelessUiConnectorConfigPropertiesInstructionStepsArrayInput is an input type that accepts CodelessUiConnectorConfigPropertiesInstructionStepsArray and CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesInstructionStepsArrayInput` via:
//
//	CodelessUiConnectorConfigPropertiesInstructionStepsArray{ CodelessUiConnectorConfigPropertiesInstructionStepsArgs{...} }
type CodelessUiConnectorConfigPropertiesInstructionStepsArrayInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput() CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput
	ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput
}

type CodelessUiConnectorConfigPropertiesInstructionStepsArray []CodelessUiConnectorConfigPropertiesInstructionStepsInput

func (CodelessUiConnectorConfigPropertiesInstructionStepsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesInstructionSteps)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArray) ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput() CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return i.ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArray) ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput)
}

func (i CodelessUiConnectorConfigPropertiesInstructionStepsArray) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesInstructionSteps] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesInstructionSteps]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutputWithContext(ctx).OutputState,
	}
}

type CodelessUiConnectorConfigPropertiesInstructionStepsOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesInstructionStepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesInstructionSteps)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) ToCodelessUiConnectorConfigPropertiesInstructionStepsOutput() CodelessUiConnectorConfigPropertiesInstructionStepsOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) ToCodelessUiConnectorConfigPropertiesInstructionStepsOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesInstructionSteps] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesInstructionSteps]{
		OutputState: o.OutputState,
	}
}

// Instruction step description
func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesInstructionSteps) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Instruction step details
func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) Instructions() InstructionStepsInstructionsArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesInstructionSteps) []InstructionStepsInstructions {
		return v.Instructions
	}).(InstructionStepsInstructionsArrayOutput)
}

// Instruction step title
func (o CodelessUiConnectorConfigPropertiesInstructionStepsOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesInstructionSteps) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesInstructionSteps)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput) ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput() CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput) ToCodelessUiConnectorConfigPropertiesInstructionStepsArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesInstructionSteps] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesInstructionSteps]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesInstructionStepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesInstructionSteps {
		return vs[0].([]CodelessUiConnectorConfigPropertiesInstructionSteps)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesInstructionStepsOutput)
}

// Config to describe the instructions blade
type CodelessUiConnectorConfigPropertiesResponse struct {
	// Connector Availability Status
	Availability AvailabilityResponse `pulumi:"availability"`
	// Define the way the connector check connectivity
	ConnectivityCriteria []CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria `pulumi:"connectivityCriteria"`
	// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
	CustomImage *string `pulumi:"customImage"`
	// Data types to check for last data received
	DataTypes []CodelessUiConnectorConfigPropertiesResponseDataTypes `pulumi:"dataTypes"`
	// Connector description
	DescriptionMarkdown string `pulumi:"descriptionMarkdown"`
	// The graph query to show the current data status
	GraphQueries []CodelessUiConnectorConfigPropertiesResponseGraphQueries `pulumi:"graphQueries"`
	// Name of the table the connector will insert the data to
	GraphQueriesTableName string `pulumi:"graphQueriesTableName"`
	// Instruction steps to enable the connector
	InstructionSteps []CodelessUiConnectorConfigPropertiesResponseInstructionSteps `pulumi:"instructionSteps"`
	// Permissions required for the connector
	Permissions PermissionsResponse `pulumi:"permissions"`
	// Connector publisher name
	Publisher string `pulumi:"publisher"`
	// The sample queries for the connector
	SampleQueries []CodelessUiConnectorConfigPropertiesResponseSampleQueries `pulumi:"sampleQueries"`
	// Connector blade title
	Title string `pulumi:"title"`
}

// Config to describe the instructions blade
type CodelessUiConnectorConfigPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponse)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseOutput) ToCodelessUiConnectorConfigPropertiesResponseOutput() CodelessUiConnectorConfigPropertiesResponseOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseOutput) ToCodelessUiConnectorConfigPropertiesResponseOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponse] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Connector Availability Status
func (o CodelessUiConnectorConfigPropertiesResponseOutput) Availability() AvailabilityResponseOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) AvailabilityResponse { return v.Availability }).(AvailabilityResponseOutput)
}

// Define the way the connector check connectivity
func (o CodelessUiConnectorConfigPropertiesResponseOutput) ConnectivityCriteria() CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria {
		return v.ConnectivityCriteria
	}).(CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput)
}

// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
func (o CodelessUiConnectorConfigPropertiesResponseOutput) CustomImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) *string { return v.CustomImage }).(pulumi.StringPtrOutput)
}

// Data types to check for last data received
func (o CodelessUiConnectorConfigPropertiesResponseOutput) DataTypes() CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseDataTypes {
		return v.DataTypes
	}).(CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput)
}

// Connector description
func (o CodelessUiConnectorConfigPropertiesResponseOutput) DescriptionMarkdown() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) string { return v.DescriptionMarkdown }).(pulumi.StringOutput)
}

// The graph query to show the current data status
func (o CodelessUiConnectorConfigPropertiesResponseOutput) GraphQueries() CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseGraphQueries {
		return v.GraphQueries
	}).(CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput)
}

// Name of the table the connector will insert the data to
func (o CodelessUiConnectorConfigPropertiesResponseOutput) GraphQueriesTableName() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) string { return v.GraphQueriesTableName }).(pulumi.StringOutput)
}

// Instruction steps to enable the connector
func (o CodelessUiConnectorConfigPropertiesResponseOutput) InstructionSteps() CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseInstructionSteps {
		return v.InstructionSteps
	}).(CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput)
}

// Permissions required for the connector
func (o CodelessUiConnectorConfigPropertiesResponseOutput) Permissions() PermissionsResponseOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) PermissionsResponse { return v.Permissions }).(PermissionsResponseOutput)
}

// Connector publisher name
func (o CodelessUiConnectorConfigPropertiesResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The sample queries for the connector
func (o CodelessUiConnectorConfigPropertiesResponseOutput) SampleQueries() CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseSampleQueries {
		return v.SampleQueries
	}).(CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput)
}

// Connector blade title
func (o CodelessUiConnectorConfigPropertiesResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponse) string { return v.Title }).(pulumi.StringOutput)
}

type CodelessUiConnectorConfigPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodelessUiConnectorConfigPropertiesResponse)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) ToCodelessUiConnectorConfigPropertiesResponsePtrOutput() CodelessUiConnectorConfigPropertiesResponsePtrOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) ToCodelessUiConnectorConfigPropertiesResponsePtrOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponsePtrOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CodelessUiConnectorConfigPropertiesResponse] {
	return pulumix.Output[*CodelessUiConnectorConfigPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) Elem() CodelessUiConnectorConfigPropertiesResponseOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) CodelessUiConnectorConfigPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret CodelessUiConnectorConfigPropertiesResponse
		return ret
	}).(CodelessUiConnectorConfigPropertiesResponseOutput)
}

// Connector Availability Status
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) Availability() AvailabilityResponsePtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *AvailabilityResponse {
		if v == nil {
			return nil
		}
		return &v.Availability
	}).(AvailabilityResponsePtrOutput)
}

// Define the way the connector check connectivity
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) ConnectivityCriteria() CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria {
		if v == nil {
			return nil
		}
		return v.ConnectivityCriteria
	}).(CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput)
}

// An optional custom image to be used when displaying the connector within Azure Sentinel's connector's gallery
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) CustomImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomImage
	}).(pulumi.StringPtrOutput)
}

// Data types to check for last data received
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) DataTypes() CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseDataTypes {
		if v == nil {
			return nil
		}
		return v.DataTypes
	}).(CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput)
}

// Connector description
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) DescriptionMarkdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DescriptionMarkdown
	}).(pulumi.StringPtrOutput)
}

// The graph query to show the current data status
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) GraphQueries() CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseGraphQueries {
		if v == nil {
			return nil
		}
		return v.GraphQueries
	}).(CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput)
}

// Name of the table the connector will insert the data to
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) GraphQueriesTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.GraphQueriesTableName
	}).(pulumi.StringPtrOutput)
}

// Instruction steps to enable the connector
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) InstructionSteps() CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseInstructionSteps {
		if v == nil {
			return nil
		}
		return v.InstructionSteps
	}).(CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput)
}

// Permissions required for the connector
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) Permissions() PermissionsResponsePtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *PermissionsResponse {
		if v == nil {
			return nil
		}
		return &v.Permissions
	}).(PermissionsResponsePtrOutput)
}

// Connector publisher name
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The sample queries for the connector
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) SampleQueries() CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) []CodelessUiConnectorConfigPropertiesResponseSampleQueries {
		if v == nil {
			return nil
		}
		return v.SampleQueries
	}).(CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput)
}

// Connector blade title
func (o CodelessUiConnectorConfigPropertiesResponsePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodelessUiConnectorConfigPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria struct {
	// type of connectivity
	Type *string `pulumi:"type"`
	// Queries for checking connectivity
	Value []string `pulumi:"value"`
}

type CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) ToCodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput() CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) ToCodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria]{
		OutputState: o.OutputState,
	}
}

// type of connectivity
func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Queries for checking connectivity
func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput() CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria {
		return vs[0].([]CodelessUiConnectorConfigPropertiesResponseConnectivityCriteria)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput)
}

type CodelessUiConnectorConfigPropertiesResponseDataTypes struct {
	// Query for indicate last data received
	LastDataReceivedQuery *string `pulumi:"lastDataReceivedQuery"`
	// Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
	Name *string `pulumi:"name"`
}

type CodelessUiConnectorConfigPropertiesResponseDataTypesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponseDataTypes)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) ToCodelessUiConnectorConfigPropertiesResponseDataTypesOutput() CodelessUiConnectorConfigPropertiesResponseDataTypesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) ToCodelessUiConnectorConfigPropertiesResponseDataTypesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseDataTypesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponseDataTypes] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponseDataTypes]{
		OutputState: o.OutputState,
	}
}

// Query for indicate last data received
func (o CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) LastDataReceivedQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseDataTypes) *string { return v.LastDataReceivedQuery }).(pulumi.StringPtrOutput)
}

// Name of the data type to show in the graph. can be use with {{graphQueriesTableName}} placeholder
func (o CodelessUiConnectorConfigPropertiesResponseDataTypesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseDataTypes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesResponseDataTypes)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput() CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseDataTypes] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseDataTypes]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesResponseDataTypesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesResponseDataTypes {
		return vs[0].([]CodelessUiConnectorConfigPropertiesResponseDataTypes)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesResponseDataTypesOutput)
}

type CodelessUiConnectorConfigPropertiesResponseGraphQueries struct {
	// The base query for the graph
	BaseQuery *string `pulumi:"baseQuery"`
	// The legend for the graph
	Legend *string `pulumi:"legend"`
	// the metric that the query is checking
	MetricName *string `pulumi:"metricName"`
}

type CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponseGraphQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) ToCodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput() CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) ToCodelessUiConnectorConfigPropertiesResponseGraphQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponseGraphQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponseGraphQueries]{
		OutputState: o.OutputState,
	}
}

// The base query for the graph
func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) BaseQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseGraphQueries) *string { return v.BaseQuery }).(pulumi.StringPtrOutput)
}

// The legend for the graph
func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) Legend() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseGraphQueries) *string { return v.Legend }).(pulumi.StringPtrOutput)
}

// the metric that the query is checking
func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseGraphQueries) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesResponseGraphQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput() CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseGraphQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseGraphQueries]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesResponseGraphQueries {
		return vs[0].([]CodelessUiConnectorConfigPropertiesResponseGraphQueries)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput)
}

type CodelessUiConnectorConfigPropertiesResponseInstructionSteps struct {
	// Instruction step description
	Description *string `pulumi:"description"`
	// Instruction step details
	Instructions []InstructionStepsResponseInstructions `pulumi:"instructions"`
	// Instruction step title
	Title *string `pulumi:"title"`
}

type CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponseInstructionSteps)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) ToCodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput() CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) ToCodelessUiConnectorConfigPropertiesResponseInstructionStepsOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponseInstructionSteps] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponseInstructionSteps]{
		OutputState: o.OutputState,
	}
}

// Instruction step description
func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseInstructionSteps) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Instruction step details
func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) Instructions() InstructionStepsResponseInstructionsArrayOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseInstructionSteps) []InstructionStepsResponseInstructions {
		return v.Instructions
	}).(InstructionStepsResponseInstructionsArrayOutput)
}

// Instruction step title
func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseInstructionSteps) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesResponseInstructionSteps)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput() CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseInstructionSteps] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseInstructionSteps]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesResponseInstructionSteps {
		return vs[0].([]CodelessUiConnectorConfigPropertiesResponseInstructionSteps)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput)
}

type CodelessUiConnectorConfigPropertiesResponseSampleQueries struct {
	// The sample query description
	Description *string `pulumi:"description"`
	// the sample query
	Query *string `pulumi:"query"`
}

type CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesResponseSampleQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) ToCodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput() CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) ToCodelessUiConnectorConfigPropertiesResponseSampleQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesResponseSampleQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesResponseSampleQueries]{
		OutputState: o.OutputState,
	}
}

// The sample query description
func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseSampleQueries) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// the sample query
func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesResponseSampleQueries) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesResponseSampleQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput() CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseSampleQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesResponseSampleQueries]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesResponseSampleQueries {
		return vs[0].([]CodelessUiConnectorConfigPropertiesResponseSampleQueries)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput)
}

type CodelessUiConnectorConfigPropertiesSampleQueries struct {
	// The sample query description
	Description *string `pulumi:"description"`
	// the sample query
	Query *string `pulumi:"query"`
}

// CodelessUiConnectorConfigPropertiesSampleQueriesInput is an input type that accepts CodelessUiConnectorConfigPropertiesSampleQueriesArgs and CodelessUiConnectorConfigPropertiesSampleQueriesOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesSampleQueriesInput` via:
//
//	CodelessUiConnectorConfigPropertiesSampleQueriesArgs{...}
type CodelessUiConnectorConfigPropertiesSampleQueriesInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesSampleQueriesOutput() CodelessUiConnectorConfigPropertiesSampleQueriesOutput
	ToCodelessUiConnectorConfigPropertiesSampleQueriesOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesOutput
}

type CodelessUiConnectorConfigPropertiesSampleQueriesArgs struct {
	// The sample query description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// the sample query
	Query pulumi.StringPtrInput `pulumi:"query"`
}

func (CodelessUiConnectorConfigPropertiesSampleQueriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesSampleQueries)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArgs) ToCodelessUiConnectorConfigPropertiesSampleQueriesOutput() CodelessUiConnectorConfigPropertiesSampleQueriesOutput {
	return i.ToCodelessUiConnectorConfigPropertiesSampleQueriesOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArgs) ToCodelessUiConnectorConfigPropertiesSampleQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesSampleQueriesOutput)
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArgs) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesSampleQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesSampleQueries]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesSampleQueriesOutputWithContext(ctx).OutputState,
	}
}

// CodelessUiConnectorConfigPropertiesSampleQueriesArrayInput is an input type that accepts CodelessUiConnectorConfigPropertiesSampleQueriesArray and CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput values.
// You can construct a concrete instance of `CodelessUiConnectorConfigPropertiesSampleQueriesArrayInput` via:
//
//	CodelessUiConnectorConfigPropertiesSampleQueriesArray{ CodelessUiConnectorConfigPropertiesSampleQueriesArgs{...} }
type CodelessUiConnectorConfigPropertiesSampleQueriesArrayInput interface {
	pulumi.Input

	ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput() CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput
	ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutputWithContext(context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput
}

type CodelessUiConnectorConfigPropertiesSampleQueriesArray []CodelessUiConnectorConfigPropertiesSampleQueriesInput

func (CodelessUiConnectorConfigPropertiesSampleQueriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesSampleQueries)(nil)).Elem()
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArray) ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput() CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return i.ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutputWithContext(context.Background())
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArray) ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput)
}

func (i CodelessUiConnectorConfigPropertiesSampleQueriesArray) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesSampleQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesSampleQueries]{
		OutputState: i.ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutputWithContext(ctx).OutputState,
	}
}

type CodelessUiConnectorConfigPropertiesSampleQueriesOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesSampleQueriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodelessUiConnectorConfigPropertiesSampleQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesOutput) ToCodelessUiConnectorConfigPropertiesSampleQueriesOutput() CodelessUiConnectorConfigPropertiesSampleQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesOutput) ToCodelessUiConnectorConfigPropertiesSampleQueriesOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesOutput) ToOutput(ctx context.Context) pulumix.Output[CodelessUiConnectorConfigPropertiesSampleQueries] {
	return pulumix.Output[CodelessUiConnectorConfigPropertiesSampleQueries]{
		OutputState: o.OutputState,
	}
}

// The sample query description
func (o CodelessUiConnectorConfigPropertiesSampleQueriesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesSampleQueries) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// the sample query
func (o CodelessUiConnectorConfigPropertiesSampleQueriesOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodelessUiConnectorConfigPropertiesSampleQueries) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput struct{ *pulumi.OutputState }

func (CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CodelessUiConnectorConfigPropertiesSampleQueries)(nil)).Elem()
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput() CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput) ToCodelessUiConnectorConfigPropertiesSampleQueriesArrayOutputWithContext(ctx context.Context) CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput {
	return o
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CodelessUiConnectorConfigPropertiesSampleQueries] {
	return pulumix.Output[[]CodelessUiConnectorConfigPropertiesSampleQueries]{
		OutputState: o.OutputState,
	}
}

func (o CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput) Index(i pulumi.IntInput) CodelessUiConnectorConfigPropertiesSampleQueriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CodelessUiConnectorConfigPropertiesSampleQueries {
		return vs[0].([]CodelessUiConnectorConfigPropertiesSampleQueries)[vs[1].(int)]
	}).(CodelessUiConnectorConfigPropertiesSampleQueriesOutput)
}

// The criteria by which we determine whether the connector is connected or not.
// For Example, use a KQL query to check if  the expected data type is flowing).
type ConnectivityCriterion struct {
	// Gets or sets the type of connectivity.
	Type string `pulumi:"type"`
	// Gets or sets the queries for checking connectivity.
	Value []string `pulumi:"value"`
}

// ConnectivityCriterionInput is an input type that accepts ConnectivityCriterionArgs and ConnectivityCriterionOutput values.
// You can construct a concrete instance of `ConnectivityCriterionInput` via:
//
//	ConnectivityCriterionArgs{...}
type ConnectivityCriterionInput interface {
	pulumi.Input

	ToConnectivityCriterionOutput() ConnectivityCriterionOutput
	ToConnectivityCriterionOutputWithContext(context.Context) ConnectivityCriterionOutput
}

// The criteria by which we determine whether the connector is connected or not.
// For Example, use a KQL query to check if  the expected data type is flowing).
type ConnectivityCriterionArgs struct {
	// Gets or sets the type of connectivity.
	Type pulumi.StringInput `pulumi:"type"`
	// Gets or sets the queries for checking connectivity.
	Value pulumi.StringArrayInput `pulumi:"value"`
}

func (ConnectivityCriterionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityCriterion)(nil)).Elem()
}

func (i ConnectivityCriterionArgs) ToConnectivityCriterionOutput() ConnectivityCriterionOutput {
	return i.ToConnectivityCriterionOutputWithContext(context.Background())
}

func (i ConnectivityCriterionArgs) ToConnectivityCriterionOutputWithContext(ctx context.Context) ConnectivityCriterionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityCriterionOutput)
}

func (i ConnectivityCriterionArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectivityCriterion] {
	return pulumix.Output[ConnectivityCriterion]{
		OutputState: i.ToConnectivityCriterionOutputWithContext(ctx).OutputState,
	}
}

// ConnectivityCriterionArrayInput is an input type that accepts ConnectivityCriterionArray and ConnectivityCriterionArrayOutput values.
// You can construct a concrete instance of `ConnectivityCriterionArrayInput` via:
//
//	ConnectivityCriterionArray{ ConnectivityCriterionArgs{...} }
type ConnectivityCriterionArrayInput interface {
	pulumi.Input

	ToConnectivityCriterionArrayOutput() ConnectivityCriterionArrayOutput
	ToConnectivityCriterionArrayOutputWithContext(context.Context) ConnectivityCriterionArrayOutput
}

type ConnectivityCriterionArray []ConnectivityCriterionInput

func (ConnectivityCriterionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectivityCriterion)(nil)).Elem()
}

func (i ConnectivityCriterionArray) ToConnectivityCriterionArrayOutput() ConnectivityCriterionArrayOutput {
	return i.ToConnectivityCriterionArrayOutputWithContext(context.Background())
}

func (i ConnectivityCriterionArray) ToConnectivityCriterionArrayOutputWithContext(ctx context.Context) ConnectivityCriterionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectivityCriterionArrayOutput)
}

func (i ConnectivityCriterionArray) ToOutput(ctx context.Context) pulumix.Output[[]ConnectivityCriterion] {
	return pulumix.Output[[]ConnectivityCriterion]{
		OutputState: i.ToConnectivityCriterionArrayOutputWithContext(ctx).OutputState,
	}
}

// The criteria by which we determine whether the connector is connected or not.
// For Example, use a KQL query to check if  the expected data type is flowing).
type ConnectivityCriterionOutput struct{ *pulumi.OutputState }

func (ConnectivityCriterionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityCriterion)(nil)).Elem()
}

func (o ConnectivityCriterionOutput) ToConnectivityCriterionOutput() ConnectivityCriterionOutput {
	return o
}

func (o ConnectivityCriterionOutput) ToConnectivityCriterionOutputWithContext(ctx context.Context) ConnectivityCriterionOutput {
	return o
}

func (o ConnectivityCriterionOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectivityCriterion] {
	return pulumix.Output[ConnectivityCriterion]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the type of connectivity.
func (o ConnectivityCriterionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectivityCriterion) string { return v.Type }).(pulumi.StringOutput)
}

// Gets or sets the queries for checking connectivity.
func (o ConnectivityCriterionOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectivityCriterion) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ConnectivityCriterionArrayOutput struct{ *pulumi.OutputState }

func (ConnectivityCriterionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectivityCriterion)(nil)).Elem()
}

func (o ConnectivityCriterionArrayOutput) ToConnectivityCriterionArrayOutput() ConnectivityCriterionArrayOutput {
	return o
}

func (o ConnectivityCriterionArrayOutput) ToConnectivityCriterionArrayOutputWithContext(ctx context.Context) ConnectivityCriterionArrayOutput {
	return o
}

func (o ConnectivityCriterionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectivityCriterion] {
	return pulumix.Output[[]ConnectivityCriterion]{
		OutputState: o.OutputState,
	}
}

func (o ConnectivityCriterionArrayOutput) Index(i pulumi.IntInput) ConnectivityCriterionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectivityCriterion {
		return vs[0].([]ConnectivityCriterion)[vs[1].(int)]
	}).(ConnectivityCriterionOutput)
}

// The criteria by which we determine whether the connector is connected or not.
// For Example, use a KQL query to check if  the expected data type is flowing).
type ConnectivityCriterionResponse struct {
	// Gets or sets the type of connectivity.
	Type string `pulumi:"type"`
	// Gets or sets the queries for checking connectivity.
	Value []string `pulumi:"value"`
}

// The criteria by which we determine whether the connector is connected or not.
// For Example, use a KQL query to check if  the expected data type is flowing).
type ConnectivityCriterionResponseOutput struct{ *pulumi.OutputState }

func (ConnectivityCriterionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectivityCriterionResponse)(nil)).Elem()
}

func (o ConnectivityCriterionResponseOutput) ToConnectivityCriterionResponseOutput() ConnectivityCriterionResponseOutput {
	return o
}

func (o ConnectivityCriterionResponseOutput) ToConnectivityCriterionResponseOutputWithContext(ctx context.Context) ConnectivityCriterionResponseOutput {
	return o
}

func (o ConnectivityCriterionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectivityCriterionResponse] {
	return pulumix.Output[ConnectivityCriterionResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the type of connectivity.
func (o ConnectivityCriterionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectivityCriterionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Gets or sets the queries for checking connectivity.
func (o ConnectivityCriterionResponseOutput) Value() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectivityCriterionResponse) []string { return v.Value }).(pulumi.StringArrayOutput)
}

type ConnectivityCriterionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectivityCriterionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectivityCriterionResponse)(nil)).Elem()
}

func (o ConnectivityCriterionResponseArrayOutput) ToConnectivityCriterionResponseArrayOutput() ConnectivityCriterionResponseArrayOutput {
	return o
}

func (o ConnectivityCriterionResponseArrayOutput) ToConnectivityCriterionResponseArrayOutputWithContext(ctx context.Context) ConnectivityCriterionResponseArrayOutput {
	return o
}

func (o ConnectivityCriterionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectivityCriterionResponse] {
	return pulumix.Output[[]ConnectivityCriterionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConnectivityCriterionResponseArrayOutput) Index(i pulumi.IntInput) ConnectivityCriterionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectivityCriterionResponse {
		return vs[0].([]ConnectivityCriterionResponse)[vs[1].(int)]
	}).(ConnectivityCriterionResponseOutput)
}

// The data type which is created by the connector,
// including a query indicated when was the last time that data type was received in the workspace.
type ConnectorDataType struct {
	// Gets or sets the query to indicate when relevant data was last received in the workspace.
	LastDataReceivedQuery string `pulumi:"lastDataReceivedQuery"`
	// Gets or sets the name of the data type to show in the graph.
	Name string `pulumi:"name"`
}

// ConnectorDataTypeInput is an input type that accepts ConnectorDataTypeArgs and ConnectorDataTypeOutput values.
// You can construct a concrete instance of `ConnectorDataTypeInput` via:
//
//	ConnectorDataTypeArgs{...}
type ConnectorDataTypeInput interface {
	pulumi.Input

	ToConnectorDataTypeOutput() ConnectorDataTypeOutput
	ToConnectorDataTypeOutputWithContext(context.Context) ConnectorDataTypeOutput
}

// The data type which is created by the connector,
// including a query indicated when was the last time that data type was received in the workspace.
type ConnectorDataTypeArgs struct {
	// Gets or sets the query to indicate when relevant data was last received in the workspace.
	LastDataReceivedQuery pulumi.StringInput `pulumi:"lastDataReceivedQuery"`
	// Gets or sets the name of the data type to show in the graph.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ConnectorDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDataType)(nil)).Elem()
}

func (i ConnectorDataTypeArgs) ToConnectorDataTypeOutput() ConnectorDataTypeOutput {
	return i.ToConnectorDataTypeOutputWithContext(context.Background())
}

func (i ConnectorDataTypeArgs) ToConnectorDataTypeOutputWithContext(ctx context.Context) ConnectorDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDataTypeOutput)
}

func (i ConnectorDataTypeArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorDataType] {
	return pulumix.Output[ConnectorDataType]{
		OutputState: i.ToConnectorDataTypeOutputWithContext(ctx).OutputState,
	}
}

// ConnectorDataTypeArrayInput is an input type that accepts ConnectorDataTypeArray and ConnectorDataTypeArrayOutput values.
// You can construct a concrete instance of `ConnectorDataTypeArrayInput` via:
//
//	ConnectorDataTypeArray{ ConnectorDataTypeArgs{...} }
type ConnectorDataTypeArrayInput interface {
	pulumi.Input

	ToConnectorDataTypeArrayOutput() ConnectorDataTypeArrayOutput
	ToConnectorDataTypeArrayOutputWithContext(context.Context) ConnectorDataTypeArrayOutput
}

type ConnectorDataTypeArray []ConnectorDataTypeInput

func (ConnectorDataTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDataType)(nil)).Elem()
}

func (i ConnectorDataTypeArray) ToConnectorDataTypeArrayOutput() ConnectorDataTypeArrayOutput {
	return i.ToConnectorDataTypeArrayOutputWithContext(context.Background())
}

func (i ConnectorDataTypeArray) ToConnectorDataTypeArrayOutputWithContext(ctx context.Context) ConnectorDataTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDataTypeArrayOutput)
}

func (i ConnectorDataTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDataType] {
	return pulumix.Output[[]ConnectorDataType]{
		OutputState: i.ToConnectorDataTypeArrayOutputWithContext(ctx).OutputState,
	}
}

// The data type which is created by the connector,
// including a query indicated when was the last time that data type was received in the workspace.
type ConnectorDataTypeOutput struct{ *pulumi.OutputState }

func (ConnectorDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDataType)(nil)).Elem()
}

func (o ConnectorDataTypeOutput) ToConnectorDataTypeOutput() ConnectorDataTypeOutput {
	return o
}

func (o ConnectorDataTypeOutput) ToConnectorDataTypeOutputWithContext(ctx context.Context) ConnectorDataTypeOutput {
	return o
}

func (o ConnectorDataTypeOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDataType] {
	return pulumix.Output[ConnectorDataType]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the query to indicate when relevant data was last received in the workspace.
func (o ConnectorDataTypeOutput) LastDataReceivedQuery() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDataType) string { return v.LastDataReceivedQuery }).(pulumi.StringOutput)
}

// Gets or sets the name of the data type to show in the graph.
func (o ConnectorDataTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDataType) string { return v.Name }).(pulumi.StringOutput)
}

type ConnectorDataTypeArrayOutput struct{ *pulumi.OutputState }

func (ConnectorDataTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDataType)(nil)).Elem()
}

func (o ConnectorDataTypeArrayOutput) ToConnectorDataTypeArrayOutput() ConnectorDataTypeArrayOutput {
	return o
}

func (o ConnectorDataTypeArrayOutput) ToConnectorDataTypeArrayOutputWithContext(ctx context.Context) ConnectorDataTypeArrayOutput {
	return o
}

func (o ConnectorDataTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDataType] {
	return pulumix.Output[[]ConnectorDataType]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDataTypeArrayOutput) Index(i pulumi.IntInput) ConnectorDataTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorDataType {
		return vs[0].([]ConnectorDataType)[vs[1].(int)]
	}).(ConnectorDataTypeOutput)
}

// The data type which is created by the connector,
// including a query indicated when was the last time that data type was received in the workspace.
type ConnectorDataTypeResponse struct {
	// Gets or sets the query to indicate when relevant data was last received in the workspace.
	LastDataReceivedQuery string `pulumi:"lastDataReceivedQuery"`
	// Gets or sets the name of the data type to show in the graph.
	Name string `pulumi:"name"`
}

// The data type which is created by the connector,
// including a query indicated when was the last time that data type was received in the workspace.
type ConnectorDataTypeResponseOutput struct{ *pulumi.OutputState }

func (ConnectorDataTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDataTypeResponse)(nil)).Elem()
}

func (o ConnectorDataTypeResponseOutput) ToConnectorDataTypeResponseOutput() ConnectorDataTypeResponseOutput {
	return o
}

func (o ConnectorDataTypeResponseOutput) ToConnectorDataTypeResponseOutputWithContext(ctx context.Context) ConnectorDataTypeResponseOutput {
	return o
}

func (o ConnectorDataTypeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDataTypeResponse] {
	return pulumix.Output[ConnectorDataTypeResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the query to indicate when relevant data was last received in the workspace.
func (o ConnectorDataTypeResponseOutput) LastDataReceivedQuery() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDataTypeResponse) string { return v.LastDataReceivedQuery }).(pulumi.StringOutput)
}

// Gets or sets the name of the data type to show in the graph.
func (o ConnectorDataTypeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDataTypeResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ConnectorDataTypeResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectorDataTypeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDataTypeResponse)(nil)).Elem()
}

func (o ConnectorDataTypeResponseArrayOutput) ToConnectorDataTypeResponseArrayOutput() ConnectorDataTypeResponseArrayOutput {
	return o
}

func (o ConnectorDataTypeResponseArrayOutput) ToConnectorDataTypeResponseArrayOutputWithContext(ctx context.Context) ConnectorDataTypeResponseArrayOutput {
	return o
}

func (o ConnectorDataTypeResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDataTypeResponse] {
	return pulumix.Output[[]ConnectorDataTypeResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDataTypeResponseArrayOutput) Index(i pulumi.IntInput) ConnectorDataTypeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorDataTypeResponse {
		return vs[0].([]ConnectorDataTypeResponse)[vs[1].(int)]
	}).(ConnectorDataTypeResponseOutput)
}

// The exposure status of the connector to the customers.
type ConnectorDefinitionsAvailability struct {
	// Gets or sets a value indicating whether the connector is preview.
	IsPreview *bool `pulumi:"isPreview"`
	// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
	Status *int `pulumi:"status"`
}

// ConnectorDefinitionsAvailabilityInput is an input type that accepts ConnectorDefinitionsAvailabilityArgs and ConnectorDefinitionsAvailabilityOutput values.
// You can construct a concrete instance of `ConnectorDefinitionsAvailabilityInput` via:
//
//	ConnectorDefinitionsAvailabilityArgs{...}
type ConnectorDefinitionsAvailabilityInput interface {
	pulumi.Input

	ToConnectorDefinitionsAvailabilityOutput() ConnectorDefinitionsAvailabilityOutput
	ToConnectorDefinitionsAvailabilityOutputWithContext(context.Context) ConnectorDefinitionsAvailabilityOutput
}

// The exposure status of the connector to the customers.
type ConnectorDefinitionsAvailabilityArgs struct {
	// Gets or sets a value indicating whether the connector is preview.
	IsPreview pulumi.BoolPtrInput `pulumi:"isPreview"`
	// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (ConnectorDefinitionsAvailabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsAvailability)(nil)).Elem()
}

func (i ConnectorDefinitionsAvailabilityArgs) ToConnectorDefinitionsAvailabilityOutput() ConnectorDefinitionsAvailabilityOutput {
	return i.ToConnectorDefinitionsAvailabilityOutputWithContext(context.Background())
}

func (i ConnectorDefinitionsAvailabilityArgs) ToConnectorDefinitionsAvailabilityOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsAvailabilityOutput)
}

func (i ConnectorDefinitionsAvailabilityArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsAvailability] {
	return pulumix.Output[ConnectorDefinitionsAvailability]{
		OutputState: i.ToConnectorDefinitionsAvailabilityOutputWithContext(ctx).OutputState,
	}
}

func (i ConnectorDefinitionsAvailabilityArgs) ToConnectorDefinitionsAvailabilityPtrOutput() ConnectorDefinitionsAvailabilityPtrOutput {
	return i.ToConnectorDefinitionsAvailabilityPtrOutputWithContext(context.Background())
}

func (i ConnectorDefinitionsAvailabilityArgs) ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsAvailabilityOutput).ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx)
}

// ConnectorDefinitionsAvailabilityPtrInput is an input type that accepts ConnectorDefinitionsAvailabilityArgs, ConnectorDefinitionsAvailabilityPtr and ConnectorDefinitionsAvailabilityPtrOutput values.
// You can construct a concrete instance of `ConnectorDefinitionsAvailabilityPtrInput` via:
//
//	        ConnectorDefinitionsAvailabilityArgs{...}
//
//	or:
//
//	        nil
type ConnectorDefinitionsAvailabilityPtrInput interface {
	pulumi.Input

	ToConnectorDefinitionsAvailabilityPtrOutput() ConnectorDefinitionsAvailabilityPtrOutput
	ToConnectorDefinitionsAvailabilityPtrOutputWithContext(context.Context) ConnectorDefinitionsAvailabilityPtrOutput
}

type connectorDefinitionsAvailabilityPtrType ConnectorDefinitionsAvailabilityArgs

func ConnectorDefinitionsAvailabilityPtr(v *ConnectorDefinitionsAvailabilityArgs) ConnectorDefinitionsAvailabilityPtrInput {
	return (*connectorDefinitionsAvailabilityPtrType)(v)
}

func (*connectorDefinitionsAvailabilityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorDefinitionsAvailability)(nil)).Elem()
}

func (i *connectorDefinitionsAvailabilityPtrType) ToConnectorDefinitionsAvailabilityPtrOutput() ConnectorDefinitionsAvailabilityPtrOutput {
	return i.ToConnectorDefinitionsAvailabilityPtrOutputWithContext(context.Background())
}

func (i *connectorDefinitionsAvailabilityPtrType) ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsAvailabilityPtrOutput)
}

func (i *connectorDefinitionsAvailabilityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ConnectorDefinitionsAvailability] {
	return pulumix.Output[*ConnectorDefinitionsAvailability]{
		OutputState: i.ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx).OutputState,
	}
}

// The exposure status of the connector to the customers.
type ConnectorDefinitionsAvailabilityOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsAvailabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsAvailability)(nil)).Elem()
}

func (o ConnectorDefinitionsAvailabilityOutput) ToConnectorDefinitionsAvailabilityOutput() ConnectorDefinitionsAvailabilityOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityOutput) ToConnectorDefinitionsAvailabilityOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityOutput) ToConnectorDefinitionsAvailabilityPtrOutput() ConnectorDefinitionsAvailabilityPtrOutput {
	return o.ToConnectorDefinitionsAvailabilityPtrOutputWithContext(context.Background())
}

func (o ConnectorDefinitionsAvailabilityOutput) ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorDefinitionsAvailability) *ConnectorDefinitionsAvailability {
		return &v
	}).(ConnectorDefinitionsAvailabilityPtrOutput)
}

func (o ConnectorDefinitionsAvailabilityOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsAvailability] {
	return pulumix.Output[ConnectorDefinitionsAvailability]{
		OutputState: o.OutputState,
	}
}

// Gets or sets a value indicating whether the connector is preview.
func (o ConnectorDefinitionsAvailabilityOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorDefinitionsAvailability) *bool { return v.IsPreview }).(pulumi.BoolPtrOutput)
}

// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
func (o ConnectorDefinitionsAvailabilityOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectorDefinitionsAvailability) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type ConnectorDefinitionsAvailabilityPtrOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsAvailabilityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorDefinitionsAvailability)(nil)).Elem()
}

func (o ConnectorDefinitionsAvailabilityPtrOutput) ToConnectorDefinitionsAvailabilityPtrOutput() ConnectorDefinitionsAvailabilityPtrOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityPtrOutput) ToConnectorDefinitionsAvailabilityPtrOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityPtrOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorDefinitionsAvailability] {
	return pulumix.Output[*ConnectorDefinitionsAvailability]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDefinitionsAvailabilityPtrOutput) Elem() ConnectorDefinitionsAvailabilityOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailability) ConnectorDefinitionsAvailability {
		if v != nil {
			return *v
		}
		var ret ConnectorDefinitionsAvailability
		return ret
	}).(ConnectorDefinitionsAvailabilityOutput)
}

// Gets or sets a value indicating whether the connector is preview.
func (o ConnectorDefinitionsAvailabilityPtrOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailability) *bool {
		if v == nil {
			return nil
		}
		return v.IsPreview
	}).(pulumi.BoolPtrOutput)
}

// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
func (o ConnectorDefinitionsAvailabilityPtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailability) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// The exposure status of the connector to the customers.
type ConnectorDefinitionsAvailabilityResponse struct {
	// Gets or sets a value indicating whether the connector is preview.
	IsPreview *bool `pulumi:"isPreview"`
	// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
	Status *int `pulumi:"status"`
}

// The exposure status of the connector to the customers.
type ConnectorDefinitionsAvailabilityResponseOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsAvailabilityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsAvailabilityResponse)(nil)).Elem()
}

func (o ConnectorDefinitionsAvailabilityResponseOutput) ToConnectorDefinitionsAvailabilityResponseOutput() ConnectorDefinitionsAvailabilityResponseOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityResponseOutput) ToConnectorDefinitionsAvailabilityResponseOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityResponseOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsAvailabilityResponse] {
	return pulumix.Output[ConnectorDefinitionsAvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets a value indicating whether the connector is preview.
func (o ConnectorDefinitionsAvailabilityResponseOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConnectorDefinitionsAvailabilityResponse) *bool { return v.IsPreview }).(pulumi.BoolPtrOutput)
}

// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
func (o ConnectorDefinitionsAvailabilityResponseOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConnectorDefinitionsAvailabilityResponse) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type ConnectorDefinitionsAvailabilityResponsePtrOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsAvailabilityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorDefinitionsAvailabilityResponse)(nil)).Elem()
}

func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) ToConnectorDefinitionsAvailabilityResponsePtrOutput() ConnectorDefinitionsAvailabilityResponsePtrOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) ToConnectorDefinitionsAvailabilityResponsePtrOutputWithContext(ctx context.Context) ConnectorDefinitionsAvailabilityResponsePtrOutput {
	return o
}

func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectorDefinitionsAvailabilityResponse] {
	return pulumix.Output[*ConnectorDefinitionsAvailabilityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) Elem() ConnectorDefinitionsAvailabilityResponseOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailabilityResponse) ConnectorDefinitionsAvailabilityResponse {
		if v != nil {
			return *v
		}
		var ret ConnectorDefinitionsAvailabilityResponse
		return ret
	}).(ConnectorDefinitionsAvailabilityResponseOutput)
}

// Gets or sets a value indicating whether the connector is preview.
func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) IsPreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailabilityResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsPreview
	}).(pulumi.BoolPtrOutput)
}

// The exposure status of the connector to the customers. Available values are 0-4 (0=None, 1=Available, 2=FeatureFlag, 3=Internal).
func (o ConnectorDefinitionsAvailabilityResponsePtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorDefinitionsAvailabilityResponse) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// The required Permissions for the connector.
type ConnectorDefinitionsPermissions struct {
	// Gets or sets the customs permissions required for the user to create connections.
	Customs []CustomPermissionDetails `pulumi:"customs"`
	// Gets or sets the required licenses for the user to create connections.
	Licenses []string `pulumi:"licenses"`
	// Gets or sets the resource provider permissions required for the user to create connections.
	ResourceProvider []ConnectorDefinitionsResourceProvider `pulumi:"resourceProvider"`
	// Gets or sets the required tenant permissions for the connector.
	Tenant []string `pulumi:"tenant"`
}

// ConnectorDefinitionsPermissionsInput is an input type that accepts ConnectorDefinitionsPermissionsArgs and ConnectorDefinitionsPermissionsOutput values.
// You can construct a concrete instance of `ConnectorDefinitionsPermissionsInput` via:
//
//	ConnectorDefinitionsPermissionsArgs{...}
type ConnectorDefinitionsPermissionsInput interface {
	pulumi.Input

	ToConnectorDefinitionsPermissionsOutput() ConnectorDefinitionsPermissionsOutput
	ToConnectorDefinitionsPermissionsOutputWithContext(context.Context) ConnectorDefinitionsPermissionsOutput
}

// The required Permissions for the connector.
type ConnectorDefinitionsPermissionsArgs struct {
	// Gets or sets the customs permissions required for the user to create connections.
	Customs CustomPermissionDetailsArrayInput `pulumi:"customs"`
	// Gets or sets the required licenses for the user to create connections.
	Licenses pulumi.StringArrayInput `pulumi:"licenses"`
	// Gets or sets the resource provider permissions required for the user to create connections.
	ResourceProvider ConnectorDefinitionsResourceProviderArrayInput `pulumi:"resourceProvider"`
	// Gets or sets the required tenant permissions for the connector.
	Tenant pulumi.StringArrayInput `pulumi:"tenant"`
}

func (ConnectorDefinitionsPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsPermissions)(nil)).Elem()
}

func (i ConnectorDefinitionsPermissionsArgs) ToConnectorDefinitionsPermissionsOutput() ConnectorDefinitionsPermissionsOutput {
	return i.ToConnectorDefinitionsPermissionsOutputWithContext(context.Background())
}

func (i ConnectorDefinitionsPermissionsArgs) ToConnectorDefinitionsPermissionsOutputWithContext(ctx context.Context) ConnectorDefinitionsPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsPermissionsOutput)
}

func (i ConnectorDefinitionsPermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsPermissions] {
	return pulumix.Output[ConnectorDefinitionsPermissions]{
		OutputState: i.ToConnectorDefinitionsPermissionsOutputWithContext(ctx).OutputState,
	}
}

// The required Permissions for the connector.
type ConnectorDefinitionsPermissionsOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsPermissions)(nil)).Elem()
}

func (o ConnectorDefinitionsPermissionsOutput) ToConnectorDefinitionsPermissionsOutput() ConnectorDefinitionsPermissionsOutput {
	return o
}

func (o ConnectorDefinitionsPermissionsOutput) ToConnectorDefinitionsPermissionsOutputWithContext(ctx context.Context) ConnectorDefinitionsPermissionsOutput {
	return o
}

func (o ConnectorDefinitionsPermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsPermissions] {
	return pulumix.Output[ConnectorDefinitionsPermissions]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the customs permissions required for the user to create connections.
func (o ConnectorDefinitionsPermissionsOutput) Customs() CustomPermissionDetailsArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissions) []CustomPermissionDetails { return v.Customs }).(CustomPermissionDetailsArrayOutput)
}

// Gets or sets the required licenses for the user to create connections.
func (o ConnectorDefinitionsPermissionsOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissions) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// Gets or sets the resource provider permissions required for the user to create connections.
func (o ConnectorDefinitionsPermissionsOutput) ResourceProvider() ConnectorDefinitionsResourceProviderArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissions) []ConnectorDefinitionsResourceProvider {
		return v.ResourceProvider
	}).(ConnectorDefinitionsResourceProviderArrayOutput)
}

// Gets or sets the required tenant permissions for the connector.
func (o ConnectorDefinitionsPermissionsOutput) Tenant() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissions) []string { return v.Tenant }).(pulumi.StringArrayOutput)
}

// The required Permissions for the connector.
type ConnectorDefinitionsPermissionsResponse struct {
	// Gets or sets the customs permissions required for the user to create connections.
	Customs []CustomPermissionDetailsResponse `pulumi:"customs"`
	// Gets or sets the required licenses for the user to create connections.
	Licenses []string `pulumi:"licenses"`
	// Gets or sets the resource provider permissions required for the user to create connections.
	ResourceProvider []ConnectorDefinitionsResourceProviderResponse `pulumi:"resourceProvider"`
	// Gets or sets the required tenant permissions for the connector.
	Tenant []string `pulumi:"tenant"`
}

// The required Permissions for the connector.
type ConnectorDefinitionsPermissionsResponseOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsPermissionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsPermissionsResponse)(nil)).Elem()
}

func (o ConnectorDefinitionsPermissionsResponseOutput) ToConnectorDefinitionsPermissionsResponseOutput() ConnectorDefinitionsPermissionsResponseOutput {
	return o
}

func (o ConnectorDefinitionsPermissionsResponseOutput) ToConnectorDefinitionsPermissionsResponseOutputWithContext(ctx context.Context) ConnectorDefinitionsPermissionsResponseOutput {
	return o
}

func (o ConnectorDefinitionsPermissionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsPermissionsResponse] {
	return pulumix.Output[ConnectorDefinitionsPermissionsResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the customs permissions required for the user to create connections.
func (o ConnectorDefinitionsPermissionsResponseOutput) Customs() CustomPermissionDetailsResponseArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissionsResponse) []CustomPermissionDetailsResponse { return v.Customs }).(CustomPermissionDetailsResponseArrayOutput)
}

// Gets or sets the required licenses for the user to create connections.
func (o ConnectorDefinitionsPermissionsResponseOutput) Licenses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissionsResponse) []string { return v.Licenses }).(pulumi.StringArrayOutput)
}

// Gets or sets the resource provider permissions required for the user to create connections.
func (o ConnectorDefinitionsPermissionsResponseOutput) ResourceProvider() ConnectorDefinitionsResourceProviderResponseArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissionsResponse) []ConnectorDefinitionsResourceProviderResponse {
		return v.ResourceProvider
	}).(ConnectorDefinitionsResourceProviderResponseArrayOutput)
}

// Gets or sets the required tenant permissions for the connector.
func (o ConnectorDefinitionsPermissionsResponseOutput) Tenant() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectorDefinitionsPermissionsResponse) []string { return v.Tenant }).(pulumi.StringArrayOutput)
}

// The resource provider details include the required permissions for the user to create connections.
// The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against the specified resource provider.
type ConnectorDefinitionsResourceProvider struct {
	// Gets or sets the permissions description text.
	PermissionsDisplayText string `pulumi:"permissionsDisplayText"`
	// Gets or sets the provider name.
	Provider string `pulumi:"provider"`
	// Gets or sets the permissions provider display name.
	ProviderDisplayName string `pulumi:"providerDisplayName"`
	// Required permissions for the connector resource provider that define in ResourceProviders.
	// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
	RequiredPermissions ResourceProviderRequiredPermissions `pulumi:"requiredPermissions"`
	// The scope on which the user should have permissions, in order to be able to create connections.
	Scope string `pulumi:"scope"`
}

// ConnectorDefinitionsResourceProviderInput is an input type that accepts ConnectorDefinitionsResourceProviderArgs and ConnectorDefinitionsResourceProviderOutput values.
// You can construct a concrete instance of `ConnectorDefinitionsResourceProviderInput` via:
//
//	ConnectorDefinitionsResourceProviderArgs{...}
type ConnectorDefinitionsResourceProviderInput interface {
	pulumi.Input

	ToConnectorDefinitionsResourceProviderOutput() ConnectorDefinitionsResourceProviderOutput
	ToConnectorDefinitionsResourceProviderOutputWithContext(context.Context) ConnectorDefinitionsResourceProviderOutput
}

// The resource provider details include the required permissions for the user to create connections.
// The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against the specified resource provider.
type ConnectorDefinitionsResourceProviderArgs struct {
	// Gets or sets the permissions description text.
	PermissionsDisplayText pulumi.StringInput `pulumi:"permissionsDisplayText"`
	// Gets or sets the provider name.
	Provider pulumi.StringInput `pulumi:"provider"`
	// Gets or sets the permissions provider display name.
	ProviderDisplayName pulumi.StringInput `pulumi:"providerDisplayName"`
	// Required permissions for the connector resource provider that define in ResourceProviders.
	// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
	RequiredPermissions ResourceProviderRequiredPermissionsInput `pulumi:"requiredPermissions"`
	// The scope on which the user should have permissions, in order to be able to create connections.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (ConnectorDefinitionsResourceProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsResourceProvider)(nil)).Elem()
}

func (i ConnectorDefinitionsResourceProviderArgs) ToConnectorDefinitionsResourceProviderOutput() ConnectorDefinitionsResourceProviderOutput {
	return i.ToConnectorDefinitionsResourceProviderOutputWithContext(context.Background())
}

func (i ConnectorDefinitionsResourceProviderArgs) ToConnectorDefinitionsResourceProviderOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsResourceProviderOutput)
}

func (i ConnectorDefinitionsResourceProviderArgs) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsResourceProvider] {
	return pulumix.Output[ConnectorDefinitionsResourceProvider]{
		OutputState: i.ToConnectorDefinitionsResourceProviderOutputWithContext(ctx).OutputState,
	}
}

// ConnectorDefinitionsResourceProviderArrayInput is an input type that accepts ConnectorDefinitionsResourceProviderArray and ConnectorDefinitionsResourceProviderArrayOutput values.
// You can construct a concrete instance of `ConnectorDefinitionsResourceProviderArrayInput` via:
//
//	ConnectorDefinitionsResourceProviderArray{ ConnectorDefinitionsResourceProviderArgs{...} }
type ConnectorDefinitionsResourceProviderArrayInput interface {
	pulumi.Input

	ToConnectorDefinitionsResourceProviderArrayOutput() ConnectorDefinitionsResourceProviderArrayOutput
	ToConnectorDefinitionsResourceProviderArrayOutputWithContext(context.Context) ConnectorDefinitionsResourceProviderArrayOutput
}

type ConnectorDefinitionsResourceProviderArray []ConnectorDefinitionsResourceProviderInput

func (ConnectorDefinitionsResourceProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDefinitionsResourceProvider)(nil)).Elem()
}

func (i ConnectorDefinitionsResourceProviderArray) ToConnectorDefinitionsResourceProviderArrayOutput() ConnectorDefinitionsResourceProviderArrayOutput {
	return i.ToConnectorDefinitionsResourceProviderArrayOutputWithContext(context.Background())
}

func (i ConnectorDefinitionsResourceProviderArray) ToConnectorDefinitionsResourceProviderArrayOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorDefinitionsResourceProviderArrayOutput)
}

func (i ConnectorDefinitionsResourceProviderArray) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDefinitionsResourceProvider] {
	return pulumix.Output[[]ConnectorDefinitionsResourceProvider]{
		OutputState: i.ToConnectorDefinitionsResourceProviderArrayOutputWithContext(ctx).OutputState,
	}
}

// The resource provider details include the required permissions for the user to create connections.
// The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against the specified resource provider.
type ConnectorDefinitionsResourceProviderOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsResourceProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsResourceProvider)(nil)).Elem()
}

func (o ConnectorDefinitionsResourceProviderOutput) ToConnectorDefinitionsResourceProviderOutput() ConnectorDefinitionsResourceProviderOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderOutput) ToConnectorDefinitionsResourceProviderOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsResourceProvider] {
	return pulumix.Output[ConnectorDefinitionsResourceProvider]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the permissions description text.
func (o ConnectorDefinitionsResourceProviderOutput) PermissionsDisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProvider) string { return v.PermissionsDisplayText }).(pulumi.StringOutput)
}

// Gets or sets the provider name.
func (o ConnectorDefinitionsResourceProviderOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProvider) string { return v.Provider }).(pulumi.StringOutput)
}

// Gets or sets the permissions provider display name.
func (o ConnectorDefinitionsResourceProviderOutput) ProviderDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProvider) string { return v.ProviderDisplayName }).(pulumi.StringOutput)
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
func (o ConnectorDefinitionsResourceProviderOutput) RequiredPermissions() ResourceProviderRequiredPermissionsOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProvider) ResourceProviderRequiredPermissions {
		return v.RequiredPermissions
	}).(ResourceProviderRequiredPermissionsOutput)
}

// The scope on which the user should have permissions, in order to be able to create connections.
func (o ConnectorDefinitionsResourceProviderOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProvider) string { return v.Scope }).(pulumi.StringOutput)
}

type ConnectorDefinitionsResourceProviderArrayOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsResourceProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDefinitionsResourceProvider)(nil)).Elem()
}

func (o ConnectorDefinitionsResourceProviderArrayOutput) ToConnectorDefinitionsResourceProviderArrayOutput() ConnectorDefinitionsResourceProviderArrayOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderArrayOutput) ToConnectorDefinitionsResourceProviderArrayOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderArrayOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDefinitionsResourceProvider] {
	return pulumix.Output[[]ConnectorDefinitionsResourceProvider]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDefinitionsResourceProviderArrayOutput) Index(i pulumi.IntInput) ConnectorDefinitionsResourceProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorDefinitionsResourceProvider {
		return vs[0].([]ConnectorDefinitionsResourceProvider)[vs[1].(int)]
	}).(ConnectorDefinitionsResourceProviderOutput)
}

// The resource provider details include the required permissions for the user to create connections.
// The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against the specified resource provider.
type ConnectorDefinitionsResourceProviderResponse struct {
	// Gets or sets the permissions description text.
	PermissionsDisplayText string `pulumi:"permissionsDisplayText"`
	// Gets or sets the provider name.
	Provider string `pulumi:"provider"`
	// Gets or sets the permissions provider display name.
	ProviderDisplayName string `pulumi:"providerDisplayName"`
	// Required permissions for the connector resource provider that define in ResourceProviders.
	// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
	RequiredPermissions ResourceProviderRequiredPermissionsResponse `pulumi:"requiredPermissions"`
	// The scope on which the user should have permissions, in order to be able to create connections.
	Scope string `pulumi:"scope"`
}

// The resource provider details include the required permissions for the user to create connections.
// The user should have the required permissions(Read\Write, ..) in the specified scope ProviderPermissionsScope against the specified resource provider.
type ConnectorDefinitionsResourceProviderResponseOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsResourceProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorDefinitionsResourceProviderResponse)(nil)).Elem()
}

func (o ConnectorDefinitionsResourceProviderResponseOutput) ToConnectorDefinitionsResourceProviderResponseOutput() ConnectorDefinitionsResourceProviderResponseOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderResponseOutput) ToConnectorDefinitionsResourceProviderResponseOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderResponseOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ConnectorDefinitionsResourceProviderResponse] {
	return pulumix.Output[ConnectorDefinitionsResourceProviderResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the permissions description text.
func (o ConnectorDefinitionsResourceProviderResponseOutput) PermissionsDisplayText() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProviderResponse) string { return v.PermissionsDisplayText }).(pulumi.StringOutput)
}

// Gets or sets the provider name.
func (o ConnectorDefinitionsResourceProviderResponseOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProviderResponse) string { return v.Provider }).(pulumi.StringOutput)
}

// Gets or sets the permissions provider display name.
func (o ConnectorDefinitionsResourceProviderResponseOutput) ProviderDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProviderResponse) string { return v.ProviderDisplayName }).(pulumi.StringOutput)
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
func (o ConnectorDefinitionsResourceProviderResponseOutput) RequiredPermissions() ResourceProviderRequiredPermissionsResponseOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProviderResponse) ResourceProviderRequiredPermissionsResponse {
		return v.RequiredPermissions
	}).(ResourceProviderRequiredPermissionsResponseOutput)
}

// The scope on which the user should have permissions, in order to be able to create connections.
func (o ConnectorDefinitionsResourceProviderResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorDefinitionsResourceProviderResponse) string { return v.Scope }).(pulumi.StringOutput)
}

type ConnectorDefinitionsResourceProviderResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectorDefinitionsResourceProviderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectorDefinitionsResourceProviderResponse)(nil)).Elem()
}

func (o ConnectorDefinitionsResourceProviderResponseArrayOutput) ToConnectorDefinitionsResourceProviderResponseArrayOutput() ConnectorDefinitionsResourceProviderResponseArrayOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderResponseArrayOutput) ToConnectorDefinitionsResourceProviderResponseArrayOutputWithContext(ctx context.Context) ConnectorDefinitionsResourceProviderResponseArrayOutput {
	return o
}

func (o ConnectorDefinitionsResourceProviderResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ConnectorDefinitionsResourceProviderResponse] {
	return pulumix.Output[[]ConnectorDefinitionsResourceProviderResponse]{
		OutputState: o.OutputState,
	}
}

func (o ConnectorDefinitionsResourceProviderResponseArrayOutput) Index(i pulumi.IntInput) ConnectorDefinitionsResourceProviderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectorDefinitionsResourceProviderResponse {
		return vs[0].([]ConnectorDefinitionsResourceProviderResponse)[vs[1].(int)]
	}).(ConnectorDefinitionsResourceProviderResponseOutput)
}

// The Custom permissions required for the connector.
type CustomPermissionDetails struct {
	// Gets or sets the custom permissions description.
	Description string `pulumi:"description"`
	// Gets or sets the custom permissions name.
	Name string `pulumi:"name"`
}

// CustomPermissionDetailsInput is an input type that accepts CustomPermissionDetailsArgs and CustomPermissionDetailsOutput values.
// You can construct a concrete instance of `CustomPermissionDetailsInput` via:
//
//	CustomPermissionDetailsArgs{...}
type CustomPermissionDetailsInput interface {
	pulumi.Input

	ToCustomPermissionDetailsOutput() CustomPermissionDetailsOutput
	ToCustomPermissionDetailsOutputWithContext(context.Context) CustomPermissionDetailsOutput
}

// The Custom permissions required for the connector.
type CustomPermissionDetailsArgs struct {
	// Gets or sets the custom permissions description.
	Description pulumi.StringInput `pulumi:"description"`
	// Gets or sets the custom permissions name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (CustomPermissionDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPermissionDetails)(nil)).Elem()
}

func (i CustomPermissionDetailsArgs) ToCustomPermissionDetailsOutput() CustomPermissionDetailsOutput {
	return i.ToCustomPermissionDetailsOutputWithContext(context.Background())
}

func (i CustomPermissionDetailsArgs) ToCustomPermissionDetailsOutputWithContext(ctx context.Context) CustomPermissionDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPermissionDetailsOutput)
}

func (i CustomPermissionDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[CustomPermissionDetails] {
	return pulumix.Output[CustomPermissionDetails]{
		OutputState: i.ToCustomPermissionDetailsOutputWithContext(ctx).OutputState,
	}
}

// CustomPermissionDetailsArrayInput is an input type that accepts CustomPermissionDetailsArray and CustomPermissionDetailsArrayOutput values.
// You can construct a concrete instance of `CustomPermissionDetailsArrayInput` via:
//
//	CustomPermissionDetailsArray{ CustomPermissionDetailsArgs{...} }
type CustomPermissionDetailsArrayInput interface {
	pulumi.Input

	ToCustomPermissionDetailsArrayOutput() CustomPermissionDetailsArrayOutput
	ToCustomPermissionDetailsArrayOutputWithContext(context.Context) CustomPermissionDetailsArrayOutput
}

type CustomPermissionDetailsArray []CustomPermissionDetailsInput

func (CustomPermissionDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomPermissionDetails)(nil)).Elem()
}

func (i CustomPermissionDetailsArray) ToCustomPermissionDetailsArrayOutput() CustomPermissionDetailsArrayOutput {
	return i.ToCustomPermissionDetailsArrayOutputWithContext(context.Background())
}

func (i CustomPermissionDetailsArray) ToCustomPermissionDetailsArrayOutputWithContext(ctx context.Context) CustomPermissionDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomPermissionDetailsArrayOutput)
}

func (i CustomPermissionDetailsArray) ToOutput(ctx context.Context) pulumix.Output[[]CustomPermissionDetails] {
	return pulumix.Output[[]CustomPermissionDetails]{
		OutputState: i.ToCustomPermissionDetailsArrayOutputWithContext(ctx).OutputState,
	}
}

// The Custom permissions required for the connector.
type CustomPermissionDetailsOutput struct{ *pulumi.OutputState }

func (CustomPermissionDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPermissionDetails)(nil)).Elem()
}

func (o CustomPermissionDetailsOutput) ToCustomPermissionDetailsOutput() CustomPermissionDetailsOutput {
	return o
}

func (o CustomPermissionDetailsOutput) ToCustomPermissionDetailsOutputWithContext(ctx context.Context) CustomPermissionDetailsOutput {
	return o
}

func (o CustomPermissionDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[CustomPermissionDetails] {
	return pulumix.Output[CustomPermissionDetails]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the custom permissions description.
func (o CustomPermissionDetailsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CustomPermissionDetails) string { return v.Description }).(pulumi.StringOutput)
}

// Gets or sets the custom permissions name.
func (o CustomPermissionDetailsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomPermissionDetails) string { return v.Name }).(pulumi.StringOutput)
}

type CustomPermissionDetailsArrayOutput struct{ *pulumi.OutputState }

func (CustomPermissionDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomPermissionDetails)(nil)).Elem()
}

func (o CustomPermissionDetailsArrayOutput) ToCustomPermissionDetailsArrayOutput() CustomPermissionDetailsArrayOutput {
	return o
}

func (o CustomPermissionDetailsArrayOutput) ToCustomPermissionDetailsArrayOutputWithContext(ctx context.Context) CustomPermissionDetailsArrayOutput {
	return o
}

func (o CustomPermissionDetailsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CustomPermissionDetails] {
	return pulumix.Output[[]CustomPermissionDetails]{
		OutputState: o.OutputState,
	}
}

func (o CustomPermissionDetailsArrayOutput) Index(i pulumi.IntInput) CustomPermissionDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomPermissionDetails {
		return vs[0].([]CustomPermissionDetails)[vs[1].(int)]
	}).(CustomPermissionDetailsOutput)
}

// The Custom permissions required for the connector.
type CustomPermissionDetailsResponse struct {
	// Gets or sets the custom permissions description.
	Description string `pulumi:"description"`
	// Gets or sets the custom permissions name.
	Name string `pulumi:"name"`
}

// The Custom permissions required for the connector.
type CustomPermissionDetailsResponseOutput struct{ *pulumi.OutputState }

func (CustomPermissionDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomPermissionDetailsResponse)(nil)).Elem()
}

func (o CustomPermissionDetailsResponseOutput) ToCustomPermissionDetailsResponseOutput() CustomPermissionDetailsResponseOutput {
	return o
}

func (o CustomPermissionDetailsResponseOutput) ToCustomPermissionDetailsResponseOutputWithContext(ctx context.Context) CustomPermissionDetailsResponseOutput {
	return o
}

func (o CustomPermissionDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomPermissionDetailsResponse] {
	return pulumix.Output[CustomPermissionDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the custom permissions description.
func (o CustomPermissionDetailsResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CustomPermissionDetailsResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Gets or sets the custom permissions name.
func (o CustomPermissionDetailsResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CustomPermissionDetailsResponse) string { return v.Name }).(pulumi.StringOutput)
}

type CustomPermissionDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomPermissionDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomPermissionDetailsResponse)(nil)).Elem()
}

func (o CustomPermissionDetailsResponseArrayOutput) ToCustomPermissionDetailsResponseArrayOutput() CustomPermissionDetailsResponseArrayOutput {
	return o
}

func (o CustomPermissionDetailsResponseArrayOutput) ToCustomPermissionDetailsResponseArrayOutputWithContext(ctx context.Context) CustomPermissionDetailsResponseArrayOutput {
	return o
}

func (o CustomPermissionDetailsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CustomPermissionDetailsResponse] {
	return pulumix.Output[[]CustomPermissionDetailsResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomPermissionDetailsResponseArrayOutput) Index(i pulumi.IntInput) CustomPermissionDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomPermissionDetailsResponse {
		return vs[0].([]CustomPermissionDetailsResponse)[vs[1].(int)]
	}).(CustomPermissionDetailsResponseOutput)
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectionsConfig struct {
	// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
	TemplateSpecName string `pulumi:"templateSpecName"`
	// Gets or sets the template version.
	TemplateSpecVersion string `pulumi:"templateSpecVersion"`
}

// CustomizableConnectionsConfigInput is an input type that accepts CustomizableConnectionsConfigArgs and CustomizableConnectionsConfigOutput values.
// You can construct a concrete instance of `CustomizableConnectionsConfigInput` via:
//
//	CustomizableConnectionsConfigArgs{...}
type CustomizableConnectionsConfigInput interface {
	pulumi.Input

	ToCustomizableConnectionsConfigOutput() CustomizableConnectionsConfigOutput
	ToCustomizableConnectionsConfigOutputWithContext(context.Context) CustomizableConnectionsConfigOutput
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectionsConfigArgs struct {
	// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
	TemplateSpecName pulumi.StringInput `pulumi:"templateSpecName"`
	// Gets or sets the template version.
	TemplateSpecVersion pulumi.StringInput `pulumi:"templateSpecVersion"`
}

func (CustomizableConnectionsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectionsConfig)(nil)).Elem()
}

func (i CustomizableConnectionsConfigArgs) ToCustomizableConnectionsConfigOutput() CustomizableConnectionsConfigOutput {
	return i.ToCustomizableConnectionsConfigOutputWithContext(context.Background())
}

func (i CustomizableConnectionsConfigArgs) ToCustomizableConnectionsConfigOutputWithContext(ctx context.Context) CustomizableConnectionsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomizableConnectionsConfigOutput)
}

func (i CustomizableConnectionsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectionsConfig] {
	return pulumix.Output[CustomizableConnectionsConfig]{
		OutputState: i.ToCustomizableConnectionsConfigOutputWithContext(ctx).OutputState,
	}
}

func (i CustomizableConnectionsConfigArgs) ToCustomizableConnectionsConfigPtrOutput() CustomizableConnectionsConfigPtrOutput {
	return i.ToCustomizableConnectionsConfigPtrOutputWithContext(context.Background())
}

func (i CustomizableConnectionsConfigArgs) ToCustomizableConnectionsConfigPtrOutputWithContext(ctx context.Context) CustomizableConnectionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomizableConnectionsConfigOutput).ToCustomizableConnectionsConfigPtrOutputWithContext(ctx)
}

// CustomizableConnectionsConfigPtrInput is an input type that accepts CustomizableConnectionsConfigArgs, CustomizableConnectionsConfigPtr and CustomizableConnectionsConfigPtrOutput values.
// You can construct a concrete instance of `CustomizableConnectionsConfigPtrInput` via:
//
//	        CustomizableConnectionsConfigArgs{...}
//
//	or:
//
//	        nil
type CustomizableConnectionsConfigPtrInput interface {
	pulumi.Input

	ToCustomizableConnectionsConfigPtrOutput() CustomizableConnectionsConfigPtrOutput
	ToCustomizableConnectionsConfigPtrOutputWithContext(context.Context) CustomizableConnectionsConfigPtrOutput
}

type customizableConnectionsConfigPtrType CustomizableConnectionsConfigArgs

func CustomizableConnectionsConfigPtr(v *CustomizableConnectionsConfigArgs) CustomizableConnectionsConfigPtrInput {
	return (*customizableConnectionsConfigPtrType)(v)
}

func (*customizableConnectionsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomizableConnectionsConfig)(nil)).Elem()
}

func (i *customizableConnectionsConfigPtrType) ToCustomizableConnectionsConfigPtrOutput() CustomizableConnectionsConfigPtrOutput {
	return i.ToCustomizableConnectionsConfigPtrOutputWithContext(context.Background())
}

func (i *customizableConnectionsConfigPtrType) ToCustomizableConnectionsConfigPtrOutputWithContext(ctx context.Context) CustomizableConnectionsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomizableConnectionsConfigPtrOutput)
}

func (i *customizableConnectionsConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomizableConnectionsConfig] {
	return pulumix.Output[*CustomizableConnectionsConfig]{
		OutputState: i.ToCustomizableConnectionsConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectionsConfigOutput struct{ *pulumi.OutputState }

func (CustomizableConnectionsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectionsConfig)(nil)).Elem()
}

func (o CustomizableConnectionsConfigOutput) ToCustomizableConnectionsConfigOutput() CustomizableConnectionsConfigOutput {
	return o
}

func (o CustomizableConnectionsConfigOutput) ToCustomizableConnectionsConfigOutputWithContext(ctx context.Context) CustomizableConnectionsConfigOutput {
	return o
}

func (o CustomizableConnectionsConfigOutput) ToCustomizableConnectionsConfigPtrOutput() CustomizableConnectionsConfigPtrOutput {
	return o.ToCustomizableConnectionsConfigPtrOutputWithContext(context.Background())
}

func (o CustomizableConnectionsConfigOutput) ToCustomizableConnectionsConfigPtrOutputWithContext(ctx context.Context) CustomizableConnectionsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomizableConnectionsConfig) *CustomizableConnectionsConfig {
		return &v
	}).(CustomizableConnectionsConfigPtrOutput)
}

func (o CustomizableConnectionsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectionsConfig] {
	return pulumix.Output[CustomizableConnectionsConfig]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
func (o CustomizableConnectionsConfigOutput) TemplateSpecName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectionsConfig) string { return v.TemplateSpecName }).(pulumi.StringOutput)
}

// Gets or sets the template version.
func (o CustomizableConnectionsConfigOutput) TemplateSpecVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectionsConfig) string { return v.TemplateSpecVersion }).(pulumi.StringOutput)
}

type CustomizableConnectionsConfigPtrOutput struct{ *pulumi.OutputState }

func (CustomizableConnectionsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomizableConnectionsConfig)(nil)).Elem()
}

func (o CustomizableConnectionsConfigPtrOutput) ToCustomizableConnectionsConfigPtrOutput() CustomizableConnectionsConfigPtrOutput {
	return o
}

func (o CustomizableConnectionsConfigPtrOutput) ToCustomizableConnectionsConfigPtrOutputWithContext(ctx context.Context) CustomizableConnectionsConfigPtrOutput {
	return o
}

func (o CustomizableConnectionsConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomizableConnectionsConfig] {
	return pulumix.Output[*CustomizableConnectionsConfig]{
		OutputState: o.OutputState,
	}
}

func (o CustomizableConnectionsConfigPtrOutput) Elem() CustomizableConnectionsConfigOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfig) CustomizableConnectionsConfig {
		if v != nil {
			return *v
		}
		var ret CustomizableConnectionsConfig
		return ret
	}).(CustomizableConnectionsConfigOutput)
}

// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
func (o CustomizableConnectionsConfigPtrOutput) TemplateSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TemplateSpecName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the template version.
func (o CustomizableConnectionsConfigPtrOutput) TemplateSpecVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfig) *string {
		if v == nil {
			return nil
		}
		return &v.TemplateSpecVersion
	}).(pulumi.StringPtrOutput)
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectionsConfigResponse struct {
	// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
	TemplateSpecName string `pulumi:"templateSpecName"`
	// Gets or sets the template version.
	TemplateSpecVersion string `pulumi:"templateSpecVersion"`
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectionsConfigResponseOutput struct{ *pulumi.OutputState }

func (CustomizableConnectionsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectionsConfigResponse)(nil)).Elem()
}

func (o CustomizableConnectionsConfigResponseOutput) ToCustomizableConnectionsConfigResponseOutput() CustomizableConnectionsConfigResponseOutput {
	return o
}

func (o CustomizableConnectionsConfigResponseOutput) ToCustomizableConnectionsConfigResponseOutputWithContext(ctx context.Context) CustomizableConnectionsConfigResponseOutput {
	return o
}

func (o CustomizableConnectionsConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectionsConfigResponse] {
	return pulumix.Output[CustomizableConnectionsConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
func (o CustomizableConnectionsConfigResponseOutput) TemplateSpecName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectionsConfigResponse) string { return v.TemplateSpecName }).(pulumi.StringOutput)
}

// Gets or sets the template version.
func (o CustomizableConnectionsConfigResponseOutput) TemplateSpecVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectionsConfigResponse) string { return v.TemplateSpecVersion }).(pulumi.StringOutput)
}

type CustomizableConnectionsConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomizableConnectionsConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomizableConnectionsConfigResponse)(nil)).Elem()
}

func (o CustomizableConnectionsConfigResponsePtrOutput) ToCustomizableConnectionsConfigResponsePtrOutput() CustomizableConnectionsConfigResponsePtrOutput {
	return o
}

func (o CustomizableConnectionsConfigResponsePtrOutput) ToCustomizableConnectionsConfigResponsePtrOutputWithContext(ctx context.Context) CustomizableConnectionsConfigResponsePtrOutput {
	return o
}

func (o CustomizableConnectionsConfigResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomizableConnectionsConfigResponse] {
	return pulumix.Output[*CustomizableConnectionsConfigResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomizableConnectionsConfigResponsePtrOutput) Elem() CustomizableConnectionsConfigResponseOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfigResponse) CustomizableConnectionsConfigResponse {
		if v != nil {
			return *v
		}
		var ret CustomizableConnectionsConfigResponse
		return ret
	}).(CustomizableConnectionsConfigResponseOutput)
}

// Gets or sets the template name. The template includes ARM templates that can be created by the connector, usually it will be the dataConnectors ARM templates.
func (o CustomizableConnectionsConfigResponsePtrOutput) TemplateSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TemplateSpecName
	}).(pulumi.StringPtrOutput)
}

// Gets or sets the template version.
func (o CustomizableConnectionsConfigResponsePtrOutput) TemplateSpecVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomizableConnectionsConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TemplateSpecVersion
	}).(pulumi.StringPtrOutput)
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectorUiConfig struct {
	// The exposure status of the connector to the customers.
	Availability *ConnectorDefinitionsAvailability `pulumi:"availability"`
	// Gets or sets the way the connector checks whether the connector is connected.
	ConnectivityCriteria []ConnectivityCriterion `pulumi:"connectivityCriteria"`
	// Gets or sets the data types to check for last data received.
	DataTypes []ConnectorDataType `pulumi:"dataTypes"`
	// Gets or sets the connector description in markdown format.
	DescriptionMarkdown string `pulumi:"descriptionMarkdown"`
	// Gets or sets the graph queries to show the current data volume over time.
	GraphQueries []GraphQuery `pulumi:"graphQueries"`
	// Gets or sets the name of the table the connector will insert the data to.
	// This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
	//  in Query and LastDataReceivedQuery values.
	GraphQueriesTableName *string `pulumi:"graphQueriesTableName"`
	// Gets or sets custom connector id. optional field.
	Id *string `pulumi:"id"`
	// Gets or sets the instruction steps to enable the connector.
	InstructionSteps []InstructionStep `pulumi:"instructionSteps"`
	// Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
	IsConnectivityCriteriasMatchSome *bool `pulumi:"isConnectivityCriteriasMatchSome"`
	// Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's gallery.
	// The logo value should be in SVG format.
	Logo *string `pulumi:"logo"`
	// The required Permissions for the connector.
	Permissions ConnectorDefinitionsPermissions `pulumi:"permissions"`
	// Gets or sets the connector publisher name.
	Publisher string `pulumi:"publisher"`
	// Gets or sets the sample queries for the connector.
	SampleQueries []SampleQuery `pulumi:"sampleQueries"`
	// Gets or sets the connector blade title.
	Title string `pulumi:"title"`
}

// CustomizableConnectorUiConfigInput is an input type that accepts CustomizableConnectorUiConfigArgs and CustomizableConnectorUiConfigOutput values.
// You can construct a concrete instance of `CustomizableConnectorUiConfigInput` via:
//
//	CustomizableConnectorUiConfigArgs{...}
type CustomizableConnectorUiConfigInput interface {
	pulumi.Input

	ToCustomizableConnectorUiConfigOutput() CustomizableConnectorUiConfigOutput
	ToCustomizableConnectorUiConfigOutputWithContext(context.Context) CustomizableConnectorUiConfigOutput
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectorUiConfigArgs struct {
	// The exposure status of the connector to the customers.
	Availability ConnectorDefinitionsAvailabilityPtrInput `pulumi:"availability"`
	// Gets or sets the way the connector checks whether the connector is connected.
	ConnectivityCriteria ConnectivityCriterionArrayInput `pulumi:"connectivityCriteria"`
	// Gets or sets the data types to check for last data received.
	DataTypes ConnectorDataTypeArrayInput `pulumi:"dataTypes"`
	// Gets or sets the connector description in markdown format.
	DescriptionMarkdown pulumi.StringInput `pulumi:"descriptionMarkdown"`
	// Gets or sets the graph queries to show the current data volume over time.
	GraphQueries GraphQueryArrayInput `pulumi:"graphQueries"`
	// Gets or sets the name of the table the connector will insert the data to.
	// This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
	//  in Query and LastDataReceivedQuery values.
	GraphQueriesTableName pulumi.StringPtrInput `pulumi:"graphQueriesTableName"`
	// Gets or sets custom connector id. optional field.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Gets or sets the instruction steps to enable the connector.
	InstructionSteps InstructionStepArrayInput `pulumi:"instructionSteps"`
	// Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
	IsConnectivityCriteriasMatchSome pulumi.BoolPtrInput `pulumi:"isConnectivityCriteriasMatchSome"`
	// Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's gallery.
	// The logo value should be in SVG format.
	Logo pulumi.StringPtrInput `pulumi:"logo"`
	// The required Permissions for the connector.
	Permissions ConnectorDefinitionsPermissionsInput `pulumi:"permissions"`
	// Gets or sets the connector publisher name.
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// Gets or sets the sample queries for the connector.
	SampleQueries SampleQueryArrayInput `pulumi:"sampleQueries"`
	// Gets or sets the connector blade title.
	Title pulumi.StringInput `pulumi:"title"`
}

func (CustomizableConnectorUiConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectorUiConfig)(nil)).Elem()
}

func (i CustomizableConnectorUiConfigArgs) ToCustomizableConnectorUiConfigOutput() CustomizableConnectorUiConfigOutput {
	return i.ToCustomizableConnectorUiConfigOutputWithContext(context.Background())
}

func (i CustomizableConnectorUiConfigArgs) ToCustomizableConnectorUiConfigOutputWithContext(ctx context.Context) CustomizableConnectorUiConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomizableConnectorUiConfigOutput)
}

func (i CustomizableConnectorUiConfigArgs) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectorUiConfig] {
	return pulumix.Output[CustomizableConnectorUiConfig]{
		OutputState: i.ToCustomizableConnectorUiConfigOutputWithContext(ctx).OutputState,
	}
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectorUiConfigOutput struct{ *pulumi.OutputState }

func (CustomizableConnectorUiConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectorUiConfig)(nil)).Elem()
}

func (o CustomizableConnectorUiConfigOutput) ToCustomizableConnectorUiConfigOutput() CustomizableConnectorUiConfigOutput {
	return o
}

func (o CustomizableConnectorUiConfigOutput) ToCustomizableConnectorUiConfigOutputWithContext(ctx context.Context) CustomizableConnectorUiConfigOutput {
	return o
}

func (o CustomizableConnectorUiConfigOutput) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectorUiConfig] {
	return pulumix.Output[CustomizableConnectorUiConfig]{
		OutputState: o.OutputState,
	}
}

// The exposure status of the connector to the customers.
func (o CustomizableConnectorUiConfigOutput) Availability() ConnectorDefinitionsAvailabilityPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) *ConnectorDefinitionsAvailability { return v.Availability }).(ConnectorDefinitionsAvailabilityPtrOutput)
}

// Gets or sets the way the connector checks whether the connector is connected.
func (o CustomizableConnectorUiConfigOutput) ConnectivityCriteria() ConnectivityCriterionArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) []ConnectivityCriterion { return v.ConnectivityCriteria }).(ConnectivityCriterionArrayOutput)
}

// Gets or sets the data types to check for last data received.
func (o CustomizableConnectorUiConfigOutput) DataTypes() ConnectorDataTypeArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) []ConnectorDataType { return v.DataTypes }).(ConnectorDataTypeArrayOutput)
}

// Gets or sets the connector description in markdown format.
func (o CustomizableConnectorUiConfigOutput) DescriptionMarkdown() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) string { return v.DescriptionMarkdown }).(pulumi.StringOutput)
}

// Gets or sets the graph queries to show the current data volume over time.
func (o CustomizableConnectorUiConfigOutput) GraphQueries() GraphQueryArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) []GraphQuery { return v.GraphQueries }).(GraphQueryArrayOutput)
}

// Gets or sets the name of the table the connector will insert the data to.
// This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
//
//	in Query and LastDataReceivedQuery values.
func (o CustomizableConnectorUiConfigOutput) GraphQueriesTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) *string { return v.GraphQueriesTableName }).(pulumi.StringPtrOutput)
}

// Gets or sets custom connector id. optional field.
func (o CustomizableConnectorUiConfigOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Gets or sets the instruction steps to enable the connector.
func (o CustomizableConnectorUiConfigOutput) InstructionSteps() InstructionStepArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) []InstructionStep { return v.InstructionSteps }).(InstructionStepArrayOutput)
}

// Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
func (o CustomizableConnectorUiConfigOutput) IsConnectivityCriteriasMatchSome() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) *bool { return v.IsConnectivityCriteriasMatchSome }).(pulumi.BoolPtrOutput)
}

// Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's gallery.
// The logo value should be in SVG format.
func (o CustomizableConnectorUiConfigOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// The required Permissions for the connector.
func (o CustomizableConnectorUiConfigOutput) Permissions() ConnectorDefinitionsPermissionsOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) ConnectorDefinitionsPermissions { return v.Permissions }).(ConnectorDefinitionsPermissionsOutput)
}

// Gets or sets the connector publisher name.
func (o CustomizableConnectorUiConfigOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) string { return v.Publisher }).(pulumi.StringOutput)
}

// Gets or sets the sample queries for the connector.
func (o CustomizableConnectorUiConfigOutput) SampleQueries() SampleQueryArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) []SampleQuery { return v.SampleQueries }).(SampleQueryArrayOutput)
}

// Gets or sets the connector blade title.
func (o CustomizableConnectorUiConfigOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfig) string { return v.Title }).(pulumi.StringOutput)
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectorUiConfigResponse struct {
	// The exposure status of the connector to the customers.
	Availability *ConnectorDefinitionsAvailabilityResponse `pulumi:"availability"`
	// Gets or sets the way the connector checks whether the connector is connected.
	ConnectivityCriteria []ConnectivityCriterionResponse `pulumi:"connectivityCriteria"`
	// Gets or sets the data types to check for last data received.
	DataTypes []ConnectorDataTypeResponse `pulumi:"dataTypes"`
	// Gets or sets the connector description in markdown format.
	DescriptionMarkdown string `pulumi:"descriptionMarkdown"`
	// Gets or sets the graph queries to show the current data volume over time.
	GraphQueries []GraphQueryResponse `pulumi:"graphQueries"`
	// Gets or sets the name of the table the connector will insert the data to.
	// This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
	//  in Query and LastDataReceivedQuery values.
	GraphQueriesTableName *string `pulumi:"graphQueriesTableName"`
	// Gets or sets custom connector id. optional field.
	Id *string `pulumi:"id"`
	// Gets or sets the instruction steps to enable the connector.
	InstructionSteps []InstructionStepResponse `pulumi:"instructionSteps"`
	// Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
	IsConnectivityCriteriasMatchSome *bool `pulumi:"isConnectivityCriteriasMatchSome"`
	// Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's gallery.
	// The logo value should be in SVG format.
	Logo *string `pulumi:"logo"`
	// The required Permissions for the connector.
	Permissions ConnectorDefinitionsPermissionsResponse `pulumi:"permissions"`
	// Gets or sets the connector publisher name.
	Publisher string `pulumi:"publisher"`
	// Gets or sets the sample queries for the connector.
	SampleQueries []SampleQueryResponse `pulumi:"sampleQueries"`
	// Gets or sets the connector blade title.
	Title string `pulumi:"title"`
}

// The UiConfig for 'Customizable' connector definition kind.
type CustomizableConnectorUiConfigResponseOutput struct{ *pulumi.OutputState }

func (CustomizableConnectorUiConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomizableConnectorUiConfigResponse)(nil)).Elem()
}

func (o CustomizableConnectorUiConfigResponseOutput) ToCustomizableConnectorUiConfigResponseOutput() CustomizableConnectorUiConfigResponseOutput {
	return o
}

func (o CustomizableConnectorUiConfigResponseOutput) ToCustomizableConnectorUiConfigResponseOutputWithContext(ctx context.Context) CustomizableConnectorUiConfigResponseOutput {
	return o
}

func (o CustomizableConnectorUiConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomizableConnectorUiConfigResponse] {
	return pulumix.Output[CustomizableConnectorUiConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The exposure status of the connector to the customers.
func (o CustomizableConnectorUiConfigResponseOutput) Availability() ConnectorDefinitionsAvailabilityResponsePtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) *ConnectorDefinitionsAvailabilityResponse {
		return v.Availability
	}).(ConnectorDefinitionsAvailabilityResponsePtrOutput)
}

// Gets or sets the way the connector checks whether the connector is connected.
func (o CustomizableConnectorUiConfigResponseOutput) ConnectivityCriteria() ConnectivityCriterionResponseArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) []ConnectivityCriterionResponse {
		return v.ConnectivityCriteria
	}).(ConnectivityCriterionResponseArrayOutput)
}

// Gets or sets the data types to check for last data received.
func (o CustomizableConnectorUiConfigResponseOutput) DataTypes() ConnectorDataTypeResponseArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) []ConnectorDataTypeResponse { return v.DataTypes }).(ConnectorDataTypeResponseArrayOutput)
}

// Gets or sets the connector description in markdown format.
func (o CustomizableConnectorUiConfigResponseOutput) DescriptionMarkdown() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) string { return v.DescriptionMarkdown }).(pulumi.StringOutput)
}

// Gets or sets the graph queries to show the current data volume over time.
func (o CustomizableConnectorUiConfigResponseOutput) GraphQueries() GraphQueryResponseArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) []GraphQueryResponse { return v.GraphQueries }).(GraphQueryResponseArrayOutput)
}

// Gets or sets the name of the table the connector will insert the data to.
// This name can be used in other queries by specifying {{graphQueriesTableName}} placeholder
//
//	in Query and LastDataReceivedQuery values.
func (o CustomizableConnectorUiConfigResponseOutput) GraphQueriesTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) *string { return v.GraphQueriesTableName }).(pulumi.StringPtrOutput)
}

// Gets or sets custom connector id. optional field.
func (o CustomizableConnectorUiConfigResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Gets or sets the instruction steps to enable the connector.
func (o CustomizableConnectorUiConfigResponseOutput) InstructionSteps() InstructionStepResponseArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) []InstructionStepResponse { return v.InstructionSteps }).(InstructionStepResponseArrayOutput)
}

// Gets or sets a value indicating whether to use 'OR'(SOME) or 'AND' between ConnectivityCriteria items.
func (o CustomizableConnectorUiConfigResponseOutput) IsConnectivityCriteriasMatchSome() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) *bool { return v.IsConnectivityCriteriasMatchSome }).(pulumi.BoolPtrOutput)
}

// Gets or sets the connector logo to be used when displaying the connector within Azure Sentinel's connector's gallery.
// The logo value should be in SVG format.
func (o CustomizableConnectorUiConfigResponseOutput) Logo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) *string { return v.Logo }).(pulumi.StringPtrOutput)
}

// The required Permissions for the connector.
func (o CustomizableConnectorUiConfigResponseOutput) Permissions() ConnectorDefinitionsPermissionsResponseOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) ConnectorDefinitionsPermissionsResponse {
		return v.Permissions
	}).(ConnectorDefinitionsPermissionsResponseOutput)
}

// Gets or sets the connector publisher name.
func (o CustomizableConnectorUiConfigResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// Gets or sets the sample queries for the connector.
func (o CustomizableConnectorUiConfigResponseOutput) SampleQueries() SampleQueryResponseArrayOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) []SampleQueryResponse { return v.SampleQueries }).(SampleQueryResponseArrayOutput)
}

// Gets or sets the connector blade title.
func (o CustomizableConnectorUiConfigResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v CustomizableConnectorUiConfigResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The configuration of the destination of the data.
type DCRConfiguration struct {
	// Represents the data collection ingestion endpoint in log analytics.
	DataCollectionEndpoint string `pulumi:"dataCollectionEndpoint"`
	// The data collection rule immutable id, the rule defines the transformation and data destination.
	DataCollectionRuleImmutableId string `pulumi:"dataCollectionRuleImmutableId"`
	// The stream we are sending the data to.
	StreamName string `pulumi:"streamName"`
}

// DCRConfigurationInput is an input type that accepts DCRConfigurationArgs and DCRConfigurationOutput values.
// You can construct a concrete instance of `DCRConfigurationInput` via:
//
//	DCRConfigurationArgs{...}
type DCRConfigurationInput interface {
	pulumi.Input

	ToDCRConfigurationOutput() DCRConfigurationOutput
	ToDCRConfigurationOutputWithContext(context.Context) DCRConfigurationOutput
}

// The configuration of the destination of the data.
type DCRConfigurationArgs struct {
	// Represents the data collection ingestion endpoint in log analytics.
	DataCollectionEndpoint pulumi.StringInput `pulumi:"dataCollectionEndpoint"`
	// The data collection rule immutable id, the rule defines the transformation and data destination.
	DataCollectionRuleImmutableId pulumi.StringInput `pulumi:"dataCollectionRuleImmutableId"`
	// The stream we are sending the data to.
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (DCRConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DCRConfiguration)(nil)).Elem()
}

func (i DCRConfigurationArgs) ToDCRConfigurationOutput() DCRConfigurationOutput {
	return i.ToDCRConfigurationOutputWithContext(context.Background())
}

func (i DCRConfigurationArgs) ToDCRConfigurationOutputWithContext(ctx context.Context) DCRConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DCRConfigurationOutput)
}

func (i DCRConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DCRConfiguration] {
	return pulumix.Output[DCRConfiguration]{
		OutputState: i.ToDCRConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DCRConfigurationArgs) ToDCRConfigurationPtrOutput() DCRConfigurationPtrOutput {
	return i.ToDCRConfigurationPtrOutputWithContext(context.Background())
}

func (i DCRConfigurationArgs) ToDCRConfigurationPtrOutputWithContext(ctx context.Context) DCRConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DCRConfigurationOutput).ToDCRConfigurationPtrOutputWithContext(ctx)
}

// DCRConfigurationPtrInput is an input type that accepts DCRConfigurationArgs, DCRConfigurationPtr and DCRConfigurationPtrOutput values.
// You can construct a concrete instance of `DCRConfigurationPtrInput` via:
//
//	        DCRConfigurationArgs{...}
//
//	or:
//
//	        nil
type DCRConfigurationPtrInput interface {
	pulumi.Input

	ToDCRConfigurationPtrOutput() DCRConfigurationPtrOutput
	ToDCRConfigurationPtrOutputWithContext(context.Context) DCRConfigurationPtrOutput
}

type dcrconfigurationPtrType DCRConfigurationArgs

func DCRConfigurationPtr(v *DCRConfigurationArgs) DCRConfigurationPtrInput {
	return (*dcrconfigurationPtrType)(v)
}

func (*dcrconfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DCRConfiguration)(nil)).Elem()
}

func (i *dcrconfigurationPtrType) ToDCRConfigurationPtrOutput() DCRConfigurationPtrOutput {
	return i.ToDCRConfigurationPtrOutputWithContext(context.Background())
}

func (i *dcrconfigurationPtrType) ToDCRConfigurationPtrOutputWithContext(ctx context.Context) DCRConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DCRConfigurationPtrOutput)
}

func (i *dcrconfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DCRConfiguration] {
	return pulumix.Output[*DCRConfiguration]{
		OutputState: i.ToDCRConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// The configuration of the destination of the data.
type DCRConfigurationOutput struct{ *pulumi.OutputState }

func (DCRConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DCRConfiguration)(nil)).Elem()
}

func (o DCRConfigurationOutput) ToDCRConfigurationOutput() DCRConfigurationOutput {
	return o
}

func (o DCRConfigurationOutput) ToDCRConfigurationOutputWithContext(ctx context.Context) DCRConfigurationOutput {
	return o
}

func (o DCRConfigurationOutput) ToDCRConfigurationPtrOutput() DCRConfigurationPtrOutput {
	return o.ToDCRConfigurationPtrOutputWithContext(context.Background())
}

func (o DCRConfigurationOutput) ToDCRConfigurationPtrOutputWithContext(ctx context.Context) DCRConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DCRConfiguration) *DCRConfiguration {
		return &v
	}).(DCRConfigurationPtrOutput)
}

func (o DCRConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DCRConfiguration] {
	return pulumix.Output[DCRConfiguration]{
		OutputState: o.OutputState,
	}
}

// Represents the data collection ingestion endpoint in log analytics.
func (o DCRConfigurationOutput) DataCollectionEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfiguration) string { return v.DataCollectionEndpoint }).(pulumi.StringOutput)
}

// The data collection rule immutable id, the rule defines the transformation and data destination.
func (o DCRConfigurationOutput) DataCollectionRuleImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfiguration) string { return v.DataCollectionRuleImmutableId }).(pulumi.StringOutput)
}

// The stream we are sending the data to.
func (o DCRConfigurationOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfiguration) string { return v.StreamName }).(pulumi.StringOutput)
}

type DCRConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DCRConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DCRConfiguration)(nil)).Elem()
}

func (o DCRConfigurationPtrOutput) ToDCRConfigurationPtrOutput() DCRConfigurationPtrOutput {
	return o
}

func (o DCRConfigurationPtrOutput) ToDCRConfigurationPtrOutputWithContext(ctx context.Context) DCRConfigurationPtrOutput {
	return o
}

func (o DCRConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DCRConfiguration] {
	return pulumix.Output[*DCRConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DCRConfigurationPtrOutput) Elem() DCRConfigurationOutput {
	return o.ApplyT(func(v *DCRConfiguration) DCRConfiguration {
		if v != nil {
			return *v
		}
		var ret DCRConfiguration
		return ret
	}).(DCRConfigurationOutput)
}

// Represents the data collection ingestion endpoint in log analytics.
func (o DCRConfigurationPtrOutput) DataCollectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpoint
	}).(pulumi.StringPtrOutput)
}

// The data collection rule immutable id, the rule defines the transformation and data destination.
func (o DCRConfigurationPtrOutput) DataCollectionRuleImmutableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRuleImmutableId
	}).(pulumi.StringPtrOutput)
}

// The stream we are sending the data to.
func (o DCRConfigurationPtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.StreamName
	}).(pulumi.StringPtrOutput)
}

// The configuration of the destination of the data.
type DCRConfigurationResponse struct {
	// Represents the data collection ingestion endpoint in log analytics.
	DataCollectionEndpoint string `pulumi:"dataCollectionEndpoint"`
	// The data collection rule immutable id, the rule defines the transformation and data destination.
	DataCollectionRuleImmutableId string `pulumi:"dataCollectionRuleImmutableId"`
	// The stream we are sending the data to.
	StreamName string `pulumi:"streamName"`
}

// The configuration of the destination of the data.
type DCRConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DCRConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DCRConfigurationResponse)(nil)).Elem()
}

func (o DCRConfigurationResponseOutput) ToDCRConfigurationResponseOutput() DCRConfigurationResponseOutput {
	return o
}

func (o DCRConfigurationResponseOutput) ToDCRConfigurationResponseOutputWithContext(ctx context.Context) DCRConfigurationResponseOutput {
	return o
}

func (o DCRConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DCRConfigurationResponse] {
	return pulumix.Output[DCRConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Represents the data collection ingestion endpoint in log analytics.
func (o DCRConfigurationResponseOutput) DataCollectionEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfigurationResponse) string { return v.DataCollectionEndpoint }).(pulumi.StringOutput)
}

// The data collection rule immutable id, the rule defines the transformation and data destination.
func (o DCRConfigurationResponseOutput) DataCollectionRuleImmutableId() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfigurationResponse) string { return v.DataCollectionRuleImmutableId }).(pulumi.StringOutput)
}

// The stream we are sending the data to.
func (o DCRConfigurationResponseOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v DCRConfigurationResponse) string { return v.StreamName }).(pulumi.StringOutput)
}

type DCRConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DCRConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DCRConfigurationResponse)(nil)).Elem()
}

func (o DCRConfigurationResponsePtrOutput) ToDCRConfigurationResponsePtrOutput() DCRConfigurationResponsePtrOutput {
	return o
}

func (o DCRConfigurationResponsePtrOutput) ToDCRConfigurationResponsePtrOutputWithContext(ctx context.Context) DCRConfigurationResponsePtrOutput {
	return o
}

func (o DCRConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DCRConfigurationResponse] {
	return pulumix.Output[*DCRConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o DCRConfigurationResponsePtrOutput) Elem() DCRConfigurationResponseOutput {
	return o.ApplyT(func(v *DCRConfigurationResponse) DCRConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DCRConfigurationResponse
		return ret
	}).(DCRConfigurationResponseOutput)
}

// Represents the data collection ingestion endpoint in log analytics.
func (o DCRConfigurationResponsePtrOutput) DataCollectionEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpoint
	}).(pulumi.StringPtrOutput)
}

// The data collection rule immutable id, the rule defines the transformation and data destination.
func (o DCRConfigurationResponsePtrOutput) DataCollectionRuleImmutableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRuleImmutableId
	}).(pulumi.StringPtrOutput)
}

// The stream we are sending the data to.
func (o DCRConfigurationResponsePtrOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DCRConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.StreamName
	}).(pulumi.StringPtrOutput)
}

// Common field for data type in data connectors.
type DataConnectorDataTypeCommon struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// DataConnectorDataTypeCommonInput is an input type that accepts DataConnectorDataTypeCommonArgs and DataConnectorDataTypeCommonOutput values.
// You can construct a concrete instance of `DataConnectorDataTypeCommonInput` via:
//
//	DataConnectorDataTypeCommonArgs{...}
type DataConnectorDataTypeCommonInput interface {
	pulumi.Input

	ToDataConnectorDataTypeCommonOutput() DataConnectorDataTypeCommonOutput
	ToDataConnectorDataTypeCommonOutputWithContext(context.Context) DataConnectorDataTypeCommonOutput
}

// Common field for data type in data connectors.
type DataConnectorDataTypeCommonArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (DataConnectorDataTypeCommonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorDataTypeCommon)(nil)).Elem()
}

func (i DataConnectorDataTypeCommonArgs) ToDataConnectorDataTypeCommonOutput() DataConnectorDataTypeCommonOutput {
	return i.ToDataConnectorDataTypeCommonOutputWithContext(context.Background())
}

func (i DataConnectorDataTypeCommonArgs) ToDataConnectorDataTypeCommonOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDataTypeCommonOutput)
}

func (i DataConnectorDataTypeCommonArgs) ToOutput(ctx context.Context) pulumix.Output[DataConnectorDataTypeCommon] {
	return pulumix.Output[DataConnectorDataTypeCommon]{
		OutputState: i.ToDataConnectorDataTypeCommonOutputWithContext(ctx).OutputState,
	}
}

func (i DataConnectorDataTypeCommonArgs) ToDataConnectorDataTypeCommonPtrOutput() DataConnectorDataTypeCommonPtrOutput {
	return i.ToDataConnectorDataTypeCommonPtrOutputWithContext(context.Background())
}

func (i DataConnectorDataTypeCommonArgs) ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDataTypeCommonOutput).ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx)
}

// DataConnectorDataTypeCommonPtrInput is an input type that accepts DataConnectorDataTypeCommonArgs, DataConnectorDataTypeCommonPtr and DataConnectorDataTypeCommonPtrOutput values.
// You can construct a concrete instance of `DataConnectorDataTypeCommonPtrInput` via:
//
//	        DataConnectorDataTypeCommonArgs{...}
//
//	or:
//
//	        nil
type DataConnectorDataTypeCommonPtrInput interface {
	pulumi.Input

	ToDataConnectorDataTypeCommonPtrOutput() DataConnectorDataTypeCommonPtrOutput
	ToDataConnectorDataTypeCommonPtrOutputWithContext(context.Context) DataConnectorDataTypeCommonPtrOutput
}

type dataConnectorDataTypeCommonPtrType DataConnectorDataTypeCommonArgs

func DataConnectorDataTypeCommonPtr(v *DataConnectorDataTypeCommonArgs) DataConnectorDataTypeCommonPtrInput {
	return (*dataConnectorDataTypeCommonPtrType)(v)
}

func (*dataConnectorDataTypeCommonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorDataTypeCommon)(nil)).Elem()
}

func (i *dataConnectorDataTypeCommonPtrType) ToDataConnectorDataTypeCommonPtrOutput() DataConnectorDataTypeCommonPtrOutput {
	return i.ToDataConnectorDataTypeCommonPtrOutputWithContext(context.Background())
}

func (i *dataConnectorDataTypeCommonPtrType) ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataConnectorDataTypeCommonPtrOutput)
}

func (i *dataConnectorDataTypeCommonPtrType) ToOutput(ctx context.Context) pulumix.Output[*DataConnectorDataTypeCommon] {
	return pulumix.Output[*DataConnectorDataTypeCommon]{
		OutputState: i.ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx).OutputState,
	}
}

// Common field for data type in data connectors.
type DataConnectorDataTypeCommonOutput struct{ *pulumi.OutputState }

func (DataConnectorDataTypeCommonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorDataTypeCommon)(nil)).Elem()
}

func (o DataConnectorDataTypeCommonOutput) ToDataConnectorDataTypeCommonOutput() DataConnectorDataTypeCommonOutput {
	return o
}

func (o DataConnectorDataTypeCommonOutput) ToDataConnectorDataTypeCommonOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonOutput {
	return o
}

func (o DataConnectorDataTypeCommonOutput) ToDataConnectorDataTypeCommonPtrOutput() DataConnectorDataTypeCommonPtrOutput {
	return o.ToDataConnectorDataTypeCommonPtrOutputWithContext(context.Background())
}

func (o DataConnectorDataTypeCommonOutput) ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataConnectorDataTypeCommon) *DataConnectorDataTypeCommon {
		return &v
	}).(DataConnectorDataTypeCommonPtrOutput)
}

func (o DataConnectorDataTypeCommonOutput) ToOutput(ctx context.Context) pulumix.Output[DataConnectorDataTypeCommon] {
	return pulumix.Output[DataConnectorDataTypeCommon]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o DataConnectorDataTypeCommonOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataConnectorDataTypeCommon) string { return v.State }).(pulumi.StringOutput)
}

type DataConnectorDataTypeCommonPtrOutput struct{ *pulumi.OutputState }

func (DataConnectorDataTypeCommonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorDataTypeCommon)(nil)).Elem()
}

func (o DataConnectorDataTypeCommonPtrOutput) ToDataConnectorDataTypeCommonPtrOutput() DataConnectorDataTypeCommonPtrOutput {
	return o
}

func (o DataConnectorDataTypeCommonPtrOutput) ToDataConnectorDataTypeCommonPtrOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonPtrOutput {
	return o
}

func (o DataConnectorDataTypeCommonPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataConnectorDataTypeCommon] {
	return pulumix.Output[*DataConnectorDataTypeCommon]{
		OutputState: o.OutputState,
	}
}

func (o DataConnectorDataTypeCommonPtrOutput) Elem() DataConnectorDataTypeCommonOutput {
	return o.ApplyT(func(v *DataConnectorDataTypeCommon) DataConnectorDataTypeCommon {
		if v != nil {
			return *v
		}
		var ret DataConnectorDataTypeCommon
		return ret
	}).(DataConnectorDataTypeCommonOutput)
}

// Describe whether this data type connection is enabled or not.
func (o DataConnectorDataTypeCommonPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorDataTypeCommon) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Common field for data type in data connectors.
type DataConnectorDataTypeCommonResponse struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Common field for data type in data connectors.
type DataConnectorDataTypeCommonResponseOutput struct{ *pulumi.OutputState }

func (DataConnectorDataTypeCommonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataConnectorDataTypeCommonResponse)(nil)).Elem()
}

func (o DataConnectorDataTypeCommonResponseOutput) ToDataConnectorDataTypeCommonResponseOutput() DataConnectorDataTypeCommonResponseOutput {
	return o
}

func (o DataConnectorDataTypeCommonResponseOutput) ToDataConnectorDataTypeCommonResponseOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonResponseOutput {
	return o
}

func (o DataConnectorDataTypeCommonResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DataConnectorDataTypeCommonResponse] {
	return pulumix.Output[DataConnectorDataTypeCommonResponse]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o DataConnectorDataTypeCommonResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v DataConnectorDataTypeCommonResponse) string { return v.State }).(pulumi.StringOutput)
}

type DataConnectorDataTypeCommonResponsePtrOutput struct{ *pulumi.OutputState }

func (DataConnectorDataTypeCommonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataConnectorDataTypeCommonResponse)(nil)).Elem()
}

func (o DataConnectorDataTypeCommonResponsePtrOutput) ToDataConnectorDataTypeCommonResponsePtrOutput() DataConnectorDataTypeCommonResponsePtrOutput {
	return o
}

func (o DataConnectorDataTypeCommonResponsePtrOutput) ToDataConnectorDataTypeCommonResponsePtrOutputWithContext(ctx context.Context) DataConnectorDataTypeCommonResponsePtrOutput {
	return o
}

func (o DataConnectorDataTypeCommonResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DataConnectorDataTypeCommonResponse] {
	return pulumix.Output[*DataConnectorDataTypeCommonResponse]{
		OutputState: o.OutputState,
	}
}

func (o DataConnectorDataTypeCommonResponsePtrOutput) Elem() DataConnectorDataTypeCommonResponseOutput {
	return o.ApplyT(func(v *DataConnectorDataTypeCommonResponse) DataConnectorDataTypeCommonResponse {
		if v != nil {
			return *v
		}
		var ret DataConnectorDataTypeCommonResponse
		return ret
	}).(DataConnectorDataTypeCommonResponseOutput)
}

// Describe whether this data type connection is enabled or not.
func (o DataConnectorDataTypeCommonResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataConnectorDataTypeCommonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// The available data types for Dynamics365 data connector.
type Dynamics365DataConnectorDataTypes struct {
	// Common Data Service data type connection.
	Dynamics365CdsActivities Dynamics365DataConnectorDataTypesDynamics365CdsActivities `pulumi:"dynamics365CdsActivities"`
}

// Dynamics365DataConnectorDataTypesInput is an input type that accepts Dynamics365DataConnectorDataTypesArgs and Dynamics365DataConnectorDataTypesOutput values.
// You can construct a concrete instance of `Dynamics365DataConnectorDataTypesInput` via:
//
//	Dynamics365DataConnectorDataTypesArgs{...}
type Dynamics365DataConnectorDataTypesInput interface {
	pulumi.Input

	ToDynamics365DataConnectorDataTypesOutput() Dynamics365DataConnectorDataTypesOutput
	ToDynamics365DataConnectorDataTypesOutputWithContext(context.Context) Dynamics365DataConnectorDataTypesOutput
}

// The available data types for Dynamics365 data connector.
type Dynamics365DataConnectorDataTypesArgs struct {
	// Common Data Service data type connection.
	Dynamics365CdsActivities Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesInput `pulumi:"dynamics365CdsActivities"`
}

func (Dynamics365DataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypes)(nil)).Elem()
}

func (i Dynamics365DataConnectorDataTypesArgs) ToDynamics365DataConnectorDataTypesOutput() Dynamics365DataConnectorDataTypesOutput {
	return i.ToDynamics365DataConnectorDataTypesOutputWithContext(context.Background())
}

func (i Dynamics365DataConnectorDataTypesArgs) ToDynamics365DataConnectorDataTypesOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dynamics365DataConnectorDataTypesOutput)
}

func (i Dynamics365DataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypes] {
	return pulumix.Output[Dynamics365DataConnectorDataTypes]{
		OutputState: i.ToDynamics365DataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Dynamics365 data connector.
type Dynamics365DataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (Dynamics365DataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypes)(nil)).Elem()
}

func (o Dynamics365DataConnectorDataTypesOutput) ToDynamics365DataConnectorDataTypesOutput() Dynamics365DataConnectorDataTypesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesOutput) ToDynamics365DataConnectorDataTypesOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypes] {
	return pulumix.Output[Dynamics365DataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Common Data Service data type connection.
func (o Dynamics365DataConnectorDataTypesOutput) Dynamics365CdsActivities() Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput {
	return o.ApplyT(func(v Dynamics365DataConnectorDataTypes) Dynamics365DataConnectorDataTypesDynamics365CdsActivities {
		return v.Dynamics365CdsActivities
	}).(Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput)
}

// Common Data Service data type connection.
type Dynamics365DataConnectorDataTypesDynamics365CdsActivities struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesInput is an input type that accepts Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs and Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput values.
// You can construct a concrete instance of `Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesInput` via:
//
//	Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs{...}
type Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesInput interface {
	pulumi.Input

	ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput() Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput
	ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutputWithContext(context.Context) Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput
}

// Common Data Service data type connection.
type Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypesDynamics365CdsActivities)(nil)).Elem()
}

func (i Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs) ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput() Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput {
	return i.ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutputWithContext(context.Background())
}

func (i Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs) ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput)
}

func (i Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesArgs) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypesDynamics365CdsActivities] {
	return pulumix.Output[Dynamics365DataConnectorDataTypesDynamics365CdsActivities]{
		OutputState: i.ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutputWithContext(ctx).OutputState,
	}
}

// Common Data Service data type connection.
type Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput struct{ *pulumi.OutputState }

func (Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypesDynamics365CdsActivities)(nil)).Elem()
}

func (o Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput) ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput() Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput) ToDynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypesDynamics365CdsActivities] {
	return pulumix.Output[Dynamics365DataConnectorDataTypesDynamics365CdsActivities]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v Dynamics365DataConnectorDataTypesDynamics365CdsActivities) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Dynamics365 data connector.
type Dynamics365DataConnectorDataTypesResponse struct {
	// Common Data Service data type connection.
	Dynamics365CdsActivities Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities `pulumi:"dynamics365CdsActivities"`
}

// The available data types for Dynamics365 data connector.
type Dynamics365DataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (Dynamics365DataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypesResponse)(nil)).Elem()
}

func (o Dynamics365DataConnectorDataTypesResponseOutput) ToDynamics365DataConnectorDataTypesResponseOutput() Dynamics365DataConnectorDataTypesResponseOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesResponseOutput) ToDynamics365DataConnectorDataTypesResponseOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesResponseOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypesResponse] {
	return pulumix.Output[Dynamics365DataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Common Data Service data type connection.
func (o Dynamics365DataConnectorDataTypesResponseOutput) Dynamics365CdsActivities() Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput {
	return o.ApplyT(func(v Dynamics365DataConnectorDataTypesResponse) Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities {
		return v.Dynamics365CdsActivities
	}).(Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput)
}

// Common Data Service data type connection.
type Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Common Data Service data type connection.
type Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput struct{ *pulumi.OutputState }

func (Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities)(nil)).Elem()
}

func (o Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput) ToDynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput() Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput) ToDynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutputWithContext(ctx context.Context) Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput {
	return o
}

func (o Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput) ToOutput(ctx context.Context) pulumix.Output[Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities] {
	return pulumix.Output[Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivities) string { return v.State }).(pulumi.StringOutput)
}

// Map identifiers of a single entity
type EntityFieldMapping struct {
	// Alert V3 identifier
	Identifier *string `pulumi:"identifier"`
	// The value of the identifier
	Value *string `pulumi:"value"`
}

// EntityFieldMappingInput is an input type that accepts EntityFieldMappingArgs and EntityFieldMappingOutput values.
// You can construct a concrete instance of `EntityFieldMappingInput` via:
//
//	EntityFieldMappingArgs{...}
type EntityFieldMappingInput interface {
	pulumi.Input

	ToEntityFieldMappingOutput() EntityFieldMappingOutput
	ToEntityFieldMappingOutputWithContext(context.Context) EntityFieldMappingOutput
}

// Map identifiers of a single entity
type EntityFieldMappingArgs struct {
	// Alert V3 identifier
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
	// The value of the identifier
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EntityFieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityFieldMapping)(nil)).Elem()
}

func (i EntityFieldMappingArgs) ToEntityFieldMappingOutput() EntityFieldMappingOutput {
	return i.ToEntityFieldMappingOutputWithContext(context.Background())
}

func (i EntityFieldMappingArgs) ToEntityFieldMappingOutputWithContext(ctx context.Context) EntityFieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityFieldMappingOutput)
}

func (i EntityFieldMappingArgs) ToOutput(ctx context.Context) pulumix.Output[EntityFieldMapping] {
	return pulumix.Output[EntityFieldMapping]{
		OutputState: i.ToEntityFieldMappingOutputWithContext(ctx).OutputState,
	}
}

// EntityFieldMappingArrayInput is an input type that accepts EntityFieldMappingArray and EntityFieldMappingArrayOutput values.
// You can construct a concrete instance of `EntityFieldMappingArrayInput` via:
//
//	EntityFieldMappingArray{ EntityFieldMappingArgs{...} }
type EntityFieldMappingArrayInput interface {
	pulumi.Input

	ToEntityFieldMappingArrayOutput() EntityFieldMappingArrayOutput
	ToEntityFieldMappingArrayOutputWithContext(context.Context) EntityFieldMappingArrayOutput
}

type EntityFieldMappingArray []EntityFieldMappingInput

func (EntityFieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityFieldMapping)(nil)).Elem()
}

func (i EntityFieldMappingArray) ToEntityFieldMappingArrayOutput() EntityFieldMappingArrayOutput {
	return i.ToEntityFieldMappingArrayOutputWithContext(context.Background())
}

func (i EntityFieldMappingArray) ToEntityFieldMappingArrayOutputWithContext(ctx context.Context) EntityFieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityFieldMappingArrayOutput)
}

func (i EntityFieldMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]EntityFieldMapping] {
	return pulumix.Output[[]EntityFieldMapping]{
		OutputState: i.ToEntityFieldMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Map identifiers of a single entity
type EntityFieldMappingOutput struct{ *pulumi.OutputState }

func (EntityFieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityFieldMapping)(nil)).Elem()
}

func (o EntityFieldMappingOutput) ToEntityFieldMappingOutput() EntityFieldMappingOutput {
	return o
}

func (o EntityFieldMappingOutput) ToEntityFieldMappingOutputWithContext(ctx context.Context) EntityFieldMappingOutput {
	return o
}

func (o EntityFieldMappingOutput) ToOutput(ctx context.Context) pulumix.Output[EntityFieldMapping] {
	return pulumix.Output[EntityFieldMapping]{
		OutputState: o.OutputState,
	}
}

// Alert V3 identifier
func (o EntityFieldMappingOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityFieldMapping) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// The value of the identifier
func (o EntityFieldMappingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityFieldMapping) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EntityFieldMappingArrayOutput struct{ *pulumi.OutputState }

func (EntityFieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityFieldMapping)(nil)).Elem()
}

func (o EntityFieldMappingArrayOutput) ToEntityFieldMappingArrayOutput() EntityFieldMappingArrayOutput {
	return o
}

func (o EntityFieldMappingArrayOutput) ToEntityFieldMappingArrayOutputWithContext(ctx context.Context) EntityFieldMappingArrayOutput {
	return o
}

func (o EntityFieldMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityFieldMapping] {
	return pulumix.Output[[]EntityFieldMapping]{
		OutputState: o.OutputState,
	}
}

func (o EntityFieldMappingArrayOutput) Index(i pulumi.IntInput) EntityFieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityFieldMapping {
		return vs[0].([]EntityFieldMapping)[vs[1].(int)]
	}).(EntityFieldMappingOutput)
}

// Map identifiers of a single entity
type EntityFieldMappingResponse struct {
	// Alert V3 identifier
	Identifier *string `pulumi:"identifier"`
	// The value of the identifier
	Value *string `pulumi:"value"`
}

// Map identifiers of a single entity
type EntityFieldMappingResponseOutput struct{ *pulumi.OutputState }

func (EntityFieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityFieldMappingResponse)(nil)).Elem()
}

func (o EntityFieldMappingResponseOutput) ToEntityFieldMappingResponseOutput() EntityFieldMappingResponseOutput {
	return o
}

func (o EntityFieldMappingResponseOutput) ToEntityFieldMappingResponseOutputWithContext(ctx context.Context) EntityFieldMappingResponseOutput {
	return o
}

func (o EntityFieldMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EntityFieldMappingResponse] {
	return pulumix.Output[EntityFieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

// Alert V3 identifier
func (o EntityFieldMappingResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityFieldMappingResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

// The value of the identifier
func (o EntityFieldMappingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityFieldMappingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EntityFieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (EntityFieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityFieldMappingResponse)(nil)).Elem()
}

func (o EntityFieldMappingResponseArrayOutput) ToEntityFieldMappingResponseArrayOutput() EntityFieldMappingResponseArrayOutput {
	return o
}

func (o EntityFieldMappingResponseArrayOutput) ToEntityFieldMappingResponseArrayOutputWithContext(ctx context.Context) EntityFieldMappingResponseArrayOutput {
	return o
}

func (o EntityFieldMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityFieldMappingResponse] {
	return pulumix.Output[[]EntityFieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o EntityFieldMappingResponseArrayOutput) Index(i pulumi.IntInput) EntityFieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityFieldMappingResponse {
		return vs[0].([]EntityFieldMappingResponse)[vs[1].(int)]
	}).(EntityFieldMappingResponseOutput)
}

// Entity insight Item.
type EntityInsightItemResponse struct {
	// Query results for table insights query.
	ChartQueryResults []InsightsTableResultResponse `pulumi:"chartQueryResults"`
	// The query id of the insight
	QueryId *string `pulumi:"queryId"`
	// The Time interval that the query actually executed on.
	QueryTimeInterval *EntityInsightItemResponseQueryTimeInterval `pulumi:"queryTimeInterval"`
	// Query results for table insights query.
	TableQueryResults *InsightsTableResultResponse `pulumi:"tableQueryResults"`
}

// Entity insight Item.
type EntityInsightItemResponseOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityInsightItemResponse)(nil)).Elem()
}

func (o EntityInsightItemResponseOutput) ToEntityInsightItemResponseOutput() EntityInsightItemResponseOutput {
	return o
}

func (o EntityInsightItemResponseOutput) ToEntityInsightItemResponseOutputWithContext(ctx context.Context) EntityInsightItemResponseOutput {
	return o
}

func (o EntityInsightItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EntityInsightItemResponse] {
	return pulumix.Output[EntityInsightItemResponse]{
		OutputState: o.OutputState,
	}
}

// Query results for table insights query.
func (o EntityInsightItemResponseOutput) ChartQueryResults() InsightsTableResultResponseArrayOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) []InsightsTableResultResponse { return v.ChartQueryResults }).(InsightsTableResultResponseArrayOutput)
}

// The query id of the insight
func (o EntityInsightItemResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

// The Time interval that the query actually executed on.
func (o EntityInsightItemResponseOutput) QueryTimeInterval() EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *EntityInsightItemResponseQueryTimeInterval {
		return v.QueryTimeInterval
	}).(EntityInsightItemResponseQueryTimeIntervalPtrOutput)
}

// Query results for table insights query.
func (o EntityInsightItemResponseOutput) TableQueryResults() InsightsTableResultResponsePtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponse) *InsightsTableResultResponse { return v.TableQueryResults }).(InsightsTableResultResponsePtrOutput)
}

type EntityInsightItemResponseArrayOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityInsightItemResponse)(nil)).Elem()
}

func (o EntityInsightItemResponseArrayOutput) ToEntityInsightItemResponseArrayOutput() EntityInsightItemResponseArrayOutput {
	return o
}

func (o EntityInsightItemResponseArrayOutput) ToEntityInsightItemResponseArrayOutputWithContext(ctx context.Context) EntityInsightItemResponseArrayOutput {
	return o
}

func (o EntityInsightItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityInsightItemResponse] {
	return pulumix.Output[[]EntityInsightItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o EntityInsightItemResponseArrayOutput) Index(i pulumi.IntInput) EntityInsightItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityInsightItemResponse {
		return vs[0].([]EntityInsightItemResponse)[vs[1].(int)]
	}).(EntityInsightItemResponseOutput)
}

// The Time interval that the query actually executed on.
type EntityInsightItemResponseQueryTimeInterval struct {
	// Insight query end time
	EndTime *string `pulumi:"endTime"`
	// Insight query start time
	StartTime *string `pulumi:"startTime"`
}

// The Time interval that the query actually executed on.
type EntityInsightItemResponseQueryTimeIntervalOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseQueryTimeIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityInsightItemResponseQueryTimeInterval)(nil)).Elem()
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToEntityInsightItemResponseQueryTimeIntervalOutput() EntityInsightItemResponseQueryTimeIntervalOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToEntityInsightItemResponseQueryTimeIntervalOutputWithContext(ctx context.Context) EntityInsightItemResponseQueryTimeIntervalOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalOutput) ToOutput(ctx context.Context) pulumix.Output[EntityInsightItemResponseQueryTimeInterval] {
	return pulumix.Output[EntityInsightItemResponseQueryTimeInterval]{
		OutputState: o.OutputState,
	}
}

// Insight query end time
func (o EntityInsightItemResponseQueryTimeIntervalOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponseQueryTimeInterval) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Insight query start time
func (o EntityInsightItemResponseQueryTimeIntervalOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityInsightItemResponseQueryTimeInterval) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type EntityInsightItemResponseQueryTimeIntervalPtrOutput struct{ *pulumi.OutputState }

func (EntityInsightItemResponseQueryTimeIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityInsightItemResponseQueryTimeInterval)(nil)).Elem()
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToEntityInsightItemResponseQueryTimeIntervalPtrOutput() EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToEntityInsightItemResponseQueryTimeIntervalPtrOutputWithContext(ctx context.Context) EntityInsightItemResponseQueryTimeIntervalPtrOutput {
	return o
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EntityInsightItemResponseQueryTimeInterval] {
	return pulumix.Output[*EntityInsightItemResponseQueryTimeInterval]{
		OutputState: o.OutputState,
	}
}

func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) Elem() EntityInsightItemResponseQueryTimeIntervalOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) EntityInsightItemResponseQueryTimeInterval {
		if v != nil {
			return *v
		}
		var ret EntityInsightItemResponseQueryTimeInterval
		return ret
	}).(EntityInsightItemResponseQueryTimeIntervalOutput)
}

// Insight query end time
func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Insight query start time
func (o EntityInsightItemResponseQueryTimeIntervalPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityInsightItemResponseQueryTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Single entity mapping for the alert rule
type EntityMapping struct {
	// The V3 type of the mapped entity
	EntityType *string `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings []FieldMapping `pulumi:"fieldMappings"`
}

// EntityMappingInput is an input type that accepts EntityMappingArgs and EntityMappingOutput values.
// You can construct a concrete instance of `EntityMappingInput` via:
//
//	EntityMappingArgs{...}
type EntityMappingInput interface {
	pulumi.Input

	ToEntityMappingOutput() EntityMappingOutput
	ToEntityMappingOutputWithContext(context.Context) EntityMappingOutput
}

// Single entity mapping for the alert rule
type EntityMappingArgs struct {
	// The V3 type of the mapped entity
	EntityType pulumi.StringPtrInput `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings FieldMappingArrayInput `pulumi:"fieldMappings"`
}

func (EntityMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMapping)(nil)).Elem()
}

func (i EntityMappingArgs) ToEntityMappingOutput() EntityMappingOutput {
	return i.ToEntityMappingOutputWithContext(context.Background())
}

func (i EntityMappingArgs) ToEntityMappingOutputWithContext(ctx context.Context) EntityMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMappingOutput)
}

func (i EntityMappingArgs) ToOutput(ctx context.Context) pulumix.Output[EntityMapping] {
	return pulumix.Output[EntityMapping]{
		OutputState: i.ToEntityMappingOutputWithContext(ctx).OutputState,
	}
}

// EntityMappingArrayInput is an input type that accepts EntityMappingArray and EntityMappingArrayOutput values.
// You can construct a concrete instance of `EntityMappingArrayInput` via:
//
//	EntityMappingArray{ EntityMappingArgs{...} }
type EntityMappingArrayInput interface {
	pulumi.Input

	ToEntityMappingArrayOutput() EntityMappingArrayOutput
	ToEntityMappingArrayOutputWithContext(context.Context) EntityMappingArrayOutput
}

type EntityMappingArray []EntityMappingInput

func (EntityMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMapping)(nil)).Elem()
}

func (i EntityMappingArray) ToEntityMappingArrayOutput() EntityMappingArrayOutput {
	return i.ToEntityMappingArrayOutputWithContext(context.Background())
}

func (i EntityMappingArray) ToEntityMappingArrayOutputWithContext(ctx context.Context) EntityMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMappingArrayOutput)
}

func (i EntityMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]EntityMapping] {
	return pulumix.Output[[]EntityMapping]{
		OutputState: i.ToEntityMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Single entity mapping for the alert rule
type EntityMappingOutput struct{ *pulumi.OutputState }

func (EntityMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMapping)(nil)).Elem()
}

func (o EntityMappingOutput) ToEntityMappingOutput() EntityMappingOutput {
	return o
}

func (o EntityMappingOutput) ToEntityMappingOutputWithContext(ctx context.Context) EntityMappingOutput {
	return o
}

func (o EntityMappingOutput) ToOutput(ctx context.Context) pulumix.Output[EntityMapping] {
	return pulumix.Output[EntityMapping]{
		OutputState: o.OutputState,
	}
}

// The V3 type of the mapped entity
func (o EntityMappingOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityMapping) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// array of field mappings for the given entity mapping
func (o EntityMappingOutput) FieldMappings() FieldMappingArrayOutput {
	return o.ApplyT(func(v EntityMapping) []FieldMapping { return v.FieldMappings }).(FieldMappingArrayOutput)
}

type EntityMappingArrayOutput struct{ *pulumi.OutputState }

func (EntityMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMapping)(nil)).Elem()
}

func (o EntityMappingArrayOutput) ToEntityMappingArrayOutput() EntityMappingArrayOutput {
	return o
}

func (o EntityMappingArrayOutput) ToEntityMappingArrayOutputWithContext(ctx context.Context) EntityMappingArrayOutput {
	return o
}

func (o EntityMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityMapping] {
	return pulumix.Output[[]EntityMapping]{
		OutputState: o.OutputState,
	}
}

func (o EntityMappingArrayOutput) Index(i pulumi.IntInput) EntityMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityMapping {
		return vs[0].([]EntityMapping)[vs[1].(int)]
	}).(EntityMappingOutput)
}

// Single entity mapping for the alert rule
type EntityMappingResponse struct {
	// The V3 type of the mapped entity
	EntityType *string `pulumi:"entityType"`
	// array of field mappings for the given entity mapping
	FieldMappings []FieldMappingResponse `pulumi:"fieldMappings"`
}

// Single entity mapping for the alert rule
type EntityMappingResponseOutput struct{ *pulumi.OutputState }

func (EntityMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityMappingResponse)(nil)).Elem()
}

func (o EntityMappingResponseOutput) ToEntityMappingResponseOutput() EntityMappingResponseOutput {
	return o
}

func (o EntityMappingResponseOutput) ToEntityMappingResponseOutputWithContext(ctx context.Context) EntityMappingResponseOutput {
	return o
}

func (o EntityMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EntityMappingResponse] {
	return pulumix.Output[EntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

// The V3 type of the mapped entity
func (o EntityMappingResponseOutput) EntityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityMappingResponse) *string { return v.EntityType }).(pulumi.StringPtrOutput)
}

// array of field mappings for the given entity mapping
func (o EntityMappingResponseOutput) FieldMappings() FieldMappingResponseArrayOutput {
	return o.ApplyT(func(v EntityMappingResponse) []FieldMappingResponse { return v.FieldMappings }).(FieldMappingResponseArrayOutput)
}

type EntityMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (EntityMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntityMappingResponse)(nil)).Elem()
}

func (o EntityMappingResponseArrayOutput) ToEntityMappingResponseArrayOutput() EntityMappingResponseArrayOutput {
	return o
}

func (o EntityMappingResponseArrayOutput) ToEntityMappingResponseArrayOutputWithContext(ctx context.Context) EntityMappingResponseArrayOutput {
	return o
}

func (o EntityMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]EntityMappingResponse] {
	return pulumix.Output[[]EntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o EntityMappingResponseArrayOutput) Index(i pulumi.IntInput) EntityMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntityMappingResponse {
		return vs[0].([]EntityMappingResponse)[vs[1].(int)]
	}).(EntityMappingResponseOutput)
}

// Event grouping settings property bag.
type EventGroupingSettings struct {
	// The event grouping aggregation kinds
	AggregationKind *string `pulumi:"aggregationKind"`
}

// EventGroupingSettingsInput is an input type that accepts EventGroupingSettingsArgs and EventGroupingSettingsOutput values.
// You can construct a concrete instance of `EventGroupingSettingsInput` via:
//
//	EventGroupingSettingsArgs{...}
type EventGroupingSettingsInput interface {
	pulumi.Input

	ToEventGroupingSettingsOutput() EventGroupingSettingsOutput
	ToEventGroupingSettingsOutputWithContext(context.Context) EventGroupingSettingsOutput
}

// Event grouping settings property bag.
type EventGroupingSettingsArgs struct {
	// The event grouping aggregation kinds
	AggregationKind pulumi.StringPtrInput `pulumi:"aggregationKind"`
}

func (EventGroupingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGroupingSettings)(nil)).Elem()
}

func (i EventGroupingSettingsArgs) ToEventGroupingSettingsOutput() EventGroupingSettingsOutput {
	return i.ToEventGroupingSettingsOutputWithContext(context.Background())
}

func (i EventGroupingSettingsArgs) ToEventGroupingSettingsOutputWithContext(ctx context.Context) EventGroupingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGroupingSettingsOutput)
}

func (i EventGroupingSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[EventGroupingSettings] {
	return pulumix.Output[EventGroupingSettings]{
		OutputState: i.ToEventGroupingSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i EventGroupingSettingsArgs) ToEventGroupingSettingsPtrOutput() EventGroupingSettingsPtrOutput {
	return i.ToEventGroupingSettingsPtrOutputWithContext(context.Background())
}

func (i EventGroupingSettingsArgs) ToEventGroupingSettingsPtrOutputWithContext(ctx context.Context) EventGroupingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGroupingSettingsOutput).ToEventGroupingSettingsPtrOutputWithContext(ctx)
}

// EventGroupingSettingsPtrInput is an input type that accepts EventGroupingSettingsArgs, EventGroupingSettingsPtr and EventGroupingSettingsPtrOutput values.
// You can construct a concrete instance of `EventGroupingSettingsPtrInput` via:
//
//	        EventGroupingSettingsArgs{...}
//
//	or:
//
//	        nil
type EventGroupingSettingsPtrInput interface {
	pulumi.Input

	ToEventGroupingSettingsPtrOutput() EventGroupingSettingsPtrOutput
	ToEventGroupingSettingsPtrOutputWithContext(context.Context) EventGroupingSettingsPtrOutput
}

type eventGroupingSettingsPtrType EventGroupingSettingsArgs

func EventGroupingSettingsPtr(v *EventGroupingSettingsArgs) EventGroupingSettingsPtrInput {
	return (*eventGroupingSettingsPtrType)(v)
}

func (*eventGroupingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGroupingSettings)(nil)).Elem()
}

func (i *eventGroupingSettingsPtrType) ToEventGroupingSettingsPtrOutput() EventGroupingSettingsPtrOutput {
	return i.ToEventGroupingSettingsPtrOutputWithContext(context.Background())
}

func (i *eventGroupingSettingsPtrType) ToEventGroupingSettingsPtrOutputWithContext(ctx context.Context) EventGroupingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventGroupingSettingsPtrOutput)
}

func (i *eventGroupingSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*EventGroupingSettings] {
	return pulumix.Output[*EventGroupingSettings]{
		OutputState: i.ToEventGroupingSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Event grouping settings property bag.
type EventGroupingSettingsOutput struct{ *pulumi.OutputState }

func (EventGroupingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGroupingSettings)(nil)).Elem()
}

func (o EventGroupingSettingsOutput) ToEventGroupingSettingsOutput() EventGroupingSettingsOutput {
	return o
}

func (o EventGroupingSettingsOutput) ToEventGroupingSettingsOutputWithContext(ctx context.Context) EventGroupingSettingsOutput {
	return o
}

func (o EventGroupingSettingsOutput) ToEventGroupingSettingsPtrOutput() EventGroupingSettingsPtrOutput {
	return o.ToEventGroupingSettingsPtrOutputWithContext(context.Background())
}

func (o EventGroupingSettingsOutput) ToEventGroupingSettingsPtrOutputWithContext(ctx context.Context) EventGroupingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EventGroupingSettings) *EventGroupingSettings {
		return &v
	}).(EventGroupingSettingsPtrOutput)
}

func (o EventGroupingSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[EventGroupingSettings] {
	return pulumix.Output[EventGroupingSettings]{
		OutputState: o.OutputState,
	}
}

// The event grouping aggregation kinds
func (o EventGroupingSettingsOutput) AggregationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGroupingSettings) *string { return v.AggregationKind }).(pulumi.StringPtrOutput)
}

type EventGroupingSettingsPtrOutput struct{ *pulumi.OutputState }

func (EventGroupingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGroupingSettings)(nil)).Elem()
}

func (o EventGroupingSettingsPtrOutput) ToEventGroupingSettingsPtrOutput() EventGroupingSettingsPtrOutput {
	return o
}

func (o EventGroupingSettingsPtrOutput) ToEventGroupingSettingsPtrOutputWithContext(ctx context.Context) EventGroupingSettingsPtrOutput {
	return o
}

func (o EventGroupingSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventGroupingSettings] {
	return pulumix.Output[*EventGroupingSettings]{
		OutputState: o.OutputState,
	}
}

func (o EventGroupingSettingsPtrOutput) Elem() EventGroupingSettingsOutput {
	return o.ApplyT(func(v *EventGroupingSettings) EventGroupingSettings {
		if v != nil {
			return *v
		}
		var ret EventGroupingSettings
		return ret
	}).(EventGroupingSettingsOutput)
}

// The event grouping aggregation kinds
func (o EventGroupingSettingsPtrOutput) AggregationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGroupingSettings) *string {
		if v == nil {
			return nil
		}
		return v.AggregationKind
	}).(pulumi.StringPtrOutput)
}

// Event grouping settings property bag.
type EventGroupingSettingsResponse struct {
	// The event grouping aggregation kinds
	AggregationKind *string `pulumi:"aggregationKind"`
}

// Event grouping settings property bag.
type EventGroupingSettingsResponseOutput struct{ *pulumi.OutputState }

func (EventGroupingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventGroupingSettingsResponse)(nil)).Elem()
}

func (o EventGroupingSettingsResponseOutput) ToEventGroupingSettingsResponseOutput() EventGroupingSettingsResponseOutput {
	return o
}

func (o EventGroupingSettingsResponseOutput) ToEventGroupingSettingsResponseOutputWithContext(ctx context.Context) EventGroupingSettingsResponseOutput {
	return o
}

func (o EventGroupingSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EventGroupingSettingsResponse] {
	return pulumix.Output[EventGroupingSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// The event grouping aggregation kinds
func (o EventGroupingSettingsResponseOutput) AggregationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventGroupingSettingsResponse) *string { return v.AggregationKind }).(pulumi.StringPtrOutput)
}

type EventGroupingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (EventGroupingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventGroupingSettingsResponse)(nil)).Elem()
}

func (o EventGroupingSettingsResponsePtrOutput) ToEventGroupingSettingsResponsePtrOutput() EventGroupingSettingsResponsePtrOutput {
	return o
}

func (o EventGroupingSettingsResponsePtrOutput) ToEventGroupingSettingsResponsePtrOutputWithContext(ctx context.Context) EventGroupingSettingsResponsePtrOutput {
	return o
}

func (o EventGroupingSettingsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EventGroupingSettingsResponse] {
	return pulumix.Output[*EventGroupingSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o EventGroupingSettingsResponsePtrOutput) Elem() EventGroupingSettingsResponseOutput {
	return o.ApplyT(func(v *EventGroupingSettingsResponse) EventGroupingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret EventGroupingSettingsResponse
		return ret
	}).(EventGroupingSettingsResponseOutput)
}

// The event grouping aggregation kinds
func (o EventGroupingSettingsResponsePtrOutput) AggregationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventGroupingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AggregationKind
	}).(pulumi.StringPtrOutput)
}

// A single field mapping of the mapped entity
type FieldMapping struct {
	// the column name to be mapped to the identifier
	ColumnName *string `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier *string `pulumi:"identifier"`
}

// FieldMappingInput is an input type that accepts FieldMappingArgs and FieldMappingOutput values.
// You can construct a concrete instance of `FieldMappingInput` via:
//
//	FieldMappingArgs{...}
type FieldMappingInput interface {
	pulumi.Input

	ToFieldMappingOutput() FieldMappingOutput
	ToFieldMappingOutputWithContext(context.Context) FieldMappingOutput
}

// A single field mapping of the mapped entity
type FieldMappingArgs struct {
	// the column name to be mapped to the identifier
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier pulumi.StringPtrInput `pulumi:"identifier"`
}

func (FieldMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMapping)(nil)).Elem()
}

func (i FieldMappingArgs) ToFieldMappingOutput() FieldMappingOutput {
	return i.ToFieldMappingOutputWithContext(context.Background())
}

func (i FieldMappingArgs) ToFieldMappingOutputWithContext(ctx context.Context) FieldMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMappingOutput)
}

func (i FieldMappingArgs) ToOutput(ctx context.Context) pulumix.Output[FieldMapping] {
	return pulumix.Output[FieldMapping]{
		OutputState: i.ToFieldMappingOutputWithContext(ctx).OutputState,
	}
}

// FieldMappingArrayInput is an input type that accepts FieldMappingArray and FieldMappingArrayOutput values.
// You can construct a concrete instance of `FieldMappingArrayInput` via:
//
//	FieldMappingArray{ FieldMappingArgs{...} }
type FieldMappingArrayInput interface {
	pulumi.Input

	ToFieldMappingArrayOutput() FieldMappingArrayOutput
	ToFieldMappingArrayOutputWithContext(context.Context) FieldMappingArrayOutput
}

type FieldMappingArray []FieldMappingInput

func (FieldMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMapping)(nil)).Elem()
}

func (i FieldMappingArray) ToFieldMappingArrayOutput() FieldMappingArrayOutput {
	return i.ToFieldMappingArrayOutputWithContext(context.Background())
}

func (i FieldMappingArray) ToFieldMappingArrayOutputWithContext(ctx context.Context) FieldMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FieldMappingArrayOutput)
}

func (i FieldMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]FieldMapping] {
	return pulumix.Output[[]FieldMapping]{
		OutputState: i.ToFieldMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// A single field mapping of the mapped entity
type FieldMappingOutput struct{ *pulumi.OutputState }

func (FieldMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMapping)(nil)).Elem()
}

func (o FieldMappingOutput) ToFieldMappingOutput() FieldMappingOutput {
	return o
}

func (o FieldMappingOutput) ToFieldMappingOutputWithContext(ctx context.Context) FieldMappingOutput {
	return o
}

func (o FieldMappingOutput) ToOutput(ctx context.Context) pulumix.Output[FieldMapping] {
	return pulumix.Output[FieldMapping]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the identifier
func (o FieldMappingOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMapping) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// the V3 identifier of the entity
func (o FieldMappingOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMapping) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type FieldMappingArrayOutput struct{ *pulumi.OutputState }

func (FieldMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMapping)(nil)).Elem()
}

func (o FieldMappingArrayOutput) ToFieldMappingArrayOutput() FieldMappingArrayOutput {
	return o
}

func (o FieldMappingArrayOutput) ToFieldMappingArrayOutputWithContext(ctx context.Context) FieldMappingArrayOutput {
	return o
}

func (o FieldMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FieldMapping] {
	return pulumix.Output[[]FieldMapping]{
		OutputState: o.OutputState,
	}
}

func (o FieldMappingArrayOutput) Index(i pulumi.IntInput) FieldMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMapping {
		return vs[0].([]FieldMapping)[vs[1].(int)]
	}).(FieldMappingOutput)
}

// A single field mapping of the mapped entity
type FieldMappingResponse struct {
	// the column name to be mapped to the identifier
	ColumnName *string `pulumi:"columnName"`
	// the V3 identifier of the entity
	Identifier *string `pulumi:"identifier"`
}

// A single field mapping of the mapped entity
type FieldMappingResponseOutput struct{ *pulumi.OutputState }

func (FieldMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FieldMappingResponse)(nil)).Elem()
}

func (o FieldMappingResponseOutput) ToFieldMappingResponseOutput() FieldMappingResponseOutput {
	return o
}

func (o FieldMappingResponseOutput) ToFieldMappingResponseOutputWithContext(ctx context.Context) FieldMappingResponseOutput {
	return o
}

func (o FieldMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FieldMappingResponse] {
	return pulumix.Output[FieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the identifier
func (o FieldMappingResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMappingResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// the V3 identifier of the entity
func (o FieldMappingResponseOutput) Identifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FieldMappingResponse) *string { return v.Identifier }).(pulumi.StringPtrOutput)
}

type FieldMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (FieldMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FieldMappingResponse)(nil)).Elem()
}

func (o FieldMappingResponseArrayOutput) ToFieldMappingResponseArrayOutput() FieldMappingResponseArrayOutput {
	return o
}

func (o FieldMappingResponseArrayOutput) ToFieldMappingResponseArrayOutputWithContext(ctx context.Context) FieldMappingResponseArrayOutput {
	return o
}

func (o FieldMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FieldMappingResponse] {
	return pulumix.Output[[]FieldMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o FieldMappingResponseArrayOutput) Index(i pulumi.IntInput) FieldMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FieldMappingResponse {
		return vs[0].([]FieldMappingResponse)[vs[1].(int)]
	}).(FieldMappingResponseOutput)
}

// Represents a file.
type FileMetadata struct {
	// The format of the file
	FileFormat *string `pulumi:"fileFormat"`
	// The name of the file.
	FileName *string `pulumi:"fileName"`
	// The size of the file.
	FileSize *int `pulumi:"fileSize"`
}

// FileMetadataInput is an input type that accepts FileMetadataArgs and FileMetadataOutput values.
// You can construct a concrete instance of `FileMetadataInput` via:
//
//	FileMetadataArgs{...}
type FileMetadataInput interface {
	pulumi.Input

	ToFileMetadataOutput() FileMetadataOutput
	ToFileMetadataOutputWithContext(context.Context) FileMetadataOutput
}

// Represents a file.
type FileMetadataArgs struct {
	// The format of the file
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// The name of the file.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// The size of the file.
	FileSize pulumi.IntPtrInput `pulumi:"fileSize"`
}

func (FileMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileMetadata)(nil)).Elem()
}

func (i FileMetadataArgs) ToFileMetadataOutput() FileMetadataOutput {
	return i.ToFileMetadataOutputWithContext(context.Background())
}

func (i FileMetadataArgs) ToFileMetadataOutputWithContext(ctx context.Context) FileMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileMetadataOutput)
}

func (i FileMetadataArgs) ToOutput(ctx context.Context) pulumix.Output[FileMetadata] {
	return pulumix.Output[FileMetadata]{
		OutputState: i.ToFileMetadataOutputWithContext(ctx).OutputState,
	}
}

// Represents a file.
type FileMetadataOutput struct{ *pulumi.OutputState }

func (FileMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileMetadata)(nil)).Elem()
}

func (o FileMetadataOutput) ToFileMetadataOutput() FileMetadataOutput {
	return o
}

func (o FileMetadataOutput) ToFileMetadataOutputWithContext(ctx context.Context) FileMetadataOutput {
	return o
}

func (o FileMetadataOutput) ToOutput(ctx context.Context) pulumix.Output[FileMetadata] {
	return pulumix.Output[FileMetadata]{
		OutputState: o.OutputState,
	}
}

// The format of the file
func (o FileMetadataOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileMetadata) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// The name of the file.
func (o FileMetadataOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileMetadata) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// The size of the file.
func (o FileMetadataOutput) FileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileMetadata) *int { return v.FileSize }).(pulumi.IntPtrOutput)
}

// Represents a file.
type FileMetadataResponse struct {
	// Indicates whether the file was deleted from the storage account.
	DeleteStatus string `pulumi:"deleteStatus"`
	// A URI with a valid SAS token to allow uploading / downloading the file.
	FileContentUri string `pulumi:"fileContentUri"`
	// The format of the file
	FileFormat *string `pulumi:"fileFormat"`
	// The name of the file.
	FileName *string `pulumi:"fileName"`
	// The size of the file.
	FileSize *int `pulumi:"fileSize"`
}

// Represents a file.
type FileMetadataResponseOutput struct{ *pulumi.OutputState }

func (FileMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileMetadataResponse)(nil)).Elem()
}

func (o FileMetadataResponseOutput) ToFileMetadataResponseOutput() FileMetadataResponseOutput {
	return o
}

func (o FileMetadataResponseOutput) ToFileMetadataResponseOutputWithContext(ctx context.Context) FileMetadataResponseOutput {
	return o
}

func (o FileMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FileMetadataResponse] {
	return pulumix.Output[FileMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// Indicates whether the file was deleted from the storage account.
func (o FileMetadataResponseOutput) DeleteStatus() pulumi.StringOutput {
	return o.ApplyT(func(v FileMetadataResponse) string { return v.DeleteStatus }).(pulumi.StringOutput)
}

// A URI with a valid SAS token to allow uploading / downloading the file.
func (o FileMetadataResponseOutput) FileContentUri() pulumi.StringOutput {
	return o.ApplyT(func(v FileMetadataResponse) string { return v.FileContentUri }).(pulumi.StringOutput)
}

// The format of the file
func (o FileMetadataResponseOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileMetadataResponse) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// The name of the file.
func (o FileMetadataResponseOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileMetadataResponse) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// The size of the file.
func (o FileMetadataResponseOutput) FileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FileMetadataResponse) *int { return v.FileSize }).(pulumi.IntPtrOutput)
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPattern struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC string `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern string `pulumi:"exclusionPattern"`
}

// FusionScenarioExclusionPatternInput is an input type that accepts FusionScenarioExclusionPatternArgs and FusionScenarioExclusionPatternOutput values.
// You can construct a concrete instance of `FusionScenarioExclusionPatternInput` via:
//
//	FusionScenarioExclusionPatternArgs{...}
type FusionScenarioExclusionPatternInput interface {
	pulumi.Input

	ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput
	ToFusionScenarioExclusionPatternOutputWithContext(context.Context) FusionScenarioExclusionPatternOutput
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternArgs struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC pulumi.StringInput `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern pulumi.StringInput `pulumi:"exclusionPattern"`
}

func (FusionScenarioExclusionPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPattern)(nil)).Elem()
}

func (i FusionScenarioExclusionPatternArgs) ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput {
	return i.ToFusionScenarioExclusionPatternOutputWithContext(context.Background())
}

func (i FusionScenarioExclusionPatternArgs) ToFusionScenarioExclusionPatternOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionScenarioExclusionPatternOutput)
}

func (i FusionScenarioExclusionPatternArgs) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPattern] {
	return pulumix.Output[FusionScenarioExclusionPattern]{
		OutputState: i.ToFusionScenarioExclusionPatternOutputWithContext(ctx).OutputState,
	}
}

// FusionScenarioExclusionPatternArrayInput is an input type that accepts FusionScenarioExclusionPatternArray and FusionScenarioExclusionPatternArrayOutput values.
// You can construct a concrete instance of `FusionScenarioExclusionPatternArrayInput` via:
//
//	FusionScenarioExclusionPatternArray{ FusionScenarioExclusionPatternArgs{...} }
type FusionScenarioExclusionPatternArrayInput interface {
	pulumi.Input

	ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput
	ToFusionScenarioExclusionPatternArrayOutputWithContext(context.Context) FusionScenarioExclusionPatternArrayOutput
}

type FusionScenarioExclusionPatternArray []FusionScenarioExclusionPatternInput

func (FusionScenarioExclusionPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPattern)(nil)).Elem()
}

func (i FusionScenarioExclusionPatternArray) ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput {
	return i.ToFusionScenarioExclusionPatternArrayOutputWithContext(context.Background())
}

func (i FusionScenarioExclusionPatternArray) ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionScenarioExclusionPatternArrayOutput)
}

func (i FusionScenarioExclusionPatternArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPattern] {
	return pulumix.Output[[]FusionScenarioExclusionPattern]{
		OutputState: i.ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPattern)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternOutput) ToFusionScenarioExclusionPatternOutput() FusionScenarioExclusionPatternOutput {
	return o
}

func (o FusionScenarioExclusionPatternOutput) ToFusionScenarioExclusionPatternOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternOutput {
	return o
}

func (o FusionScenarioExclusionPatternOutput) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPattern] {
	return pulumix.Output[FusionScenarioExclusionPattern]{
		OutputState: o.OutputState,
	}
}

// DateTime when scenario exclusion pattern is added in UTC.
func (o FusionScenarioExclusionPatternOutput) DateAddedInUTC() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPattern) string { return v.DateAddedInUTC }).(pulumi.StringOutput)
}

// Scenario exclusion pattern.
func (o FusionScenarioExclusionPatternOutput) ExclusionPattern() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPattern) string { return v.ExclusionPattern }).(pulumi.StringOutput)
}

type FusionScenarioExclusionPatternArrayOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPattern)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternArrayOutput) ToFusionScenarioExclusionPatternArrayOutput() FusionScenarioExclusionPatternArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternArrayOutput) ToFusionScenarioExclusionPatternArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPattern] {
	return pulumix.Output[[]FusionScenarioExclusionPattern]{
		OutputState: o.OutputState,
	}
}

func (o FusionScenarioExclusionPatternArrayOutput) Index(i pulumi.IntInput) FusionScenarioExclusionPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionScenarioExclusionPattern {
		return vs[0].([]FusionScenarioExclusionPattern)[vs[1].(int)]
	}).(FusionScenarioExclusionPatternOutput)
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternResponse struct {
	// DateTime when scenario exclusion pattern is added in UTC.
	DateAddedInUTC string `pulumi:"dateAddedInUTC"`
	// Scenario exclusion pattern.
	ExclusionPattern string `pulumi:"exclusionPattern"`
}

// Represents a Fusion scenario exclusion patterns in Fusion detection.
type FusionScenarioExclusionPatternResponseOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionScenarioExclusionPatternResponse)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternResponseOutput) ToFusionScenarioExclusionPatternResponseOutput() FusionScenarioExclusionPatternResponseOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseOutput) ToFusionScenarioExclusionPatternResponseOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternResponseOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionScenarioExclusionPatternResponse] {
	return pulumix.Output[FusionScenarioExclusionPatternResponse]{
		OutputState: o.OutputState,
	}
}

// DateTime when scenario exclusion pattern is added in UTC.
func (o FusionScenarioExclusionPatternResponseOutput) DateAddedInUTC() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPatternResponse) string { return v.DateAddedInUTC }).(pulumi.StringOutput)
}

// Scenario exclusion pattern.
func (o FusionScenarioExclusionPatternResponseOutput) ExclusionPattern() pulumi.StringOutput {
	return o.ApplyT(func(v FusionScenarioExclusionPatternResponse) string { return v.ExclusionPattern }).(pulumi.StringOutput)
}

type FusionScenarioExclusionPatternResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionScenarioExclusionPatternResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionScenarioExclusionPatternResponse)(nil)).Elem()
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToFusionScenarioExclusionPatternResponseArrayOutput() FusionScenarioExclusionPatternResponseArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToFusionScenarioExclusionPatternResponseArrayOutputWithContext(ctx context.Context) FusionScenarioExclusionPatternResponseArrayOutput {
	return o
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionScenarioExclusionPatternResponse] {
	return pulumix.Output[[]FusionScenarioExclusionPatternResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionScenarioExclusionPatternResponseArrayOutput) Index(i pulumi.IntInput) FusionScenarioExclusionPatternResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionScenarioExclusionPatternResponse {
		return vs[0].([]FusionScenarioExclusionPatternResponse)[vs[1].(int)]
	}).(FusionScenarioExclusionPatternResponseOutput)
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettings struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName string `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes []FusionSourceSubTypeSetting `pulumi:"sourceSubTypes"`
}

// FusionSourceSettingsInput is an input type that accepts FusionSourceSettingsArgs and FusionSourceSettingsOutput values.
// You can construct a concrete instance of `FusionSourceSettingsInput` via:
//
//	FusionSourceSettingsArgs{...}
type FusionSourceSettingsInput interface {
	pulumi.Input

	ToFusionSourceSettingsOutput() FusionSourceSettingsOutput
	ToFusionSourceSettingsOutputWithContext(context.Context) FusionSourceSettingsOutput
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsArgs struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName pulumi.StringInput `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes FusionSourceSubTypeSettingArrayInput `pulumi:"sourceSubTypes"`
}

func (FusionSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettings)(nil)).Elem()
}

func (i FusionSourceSettingsArgs) ToFusionSourceSettingsOutput() FusionSourceSettingsOutput {
	return i.ToFusionSourceSettingsOutputWithContext(context.Background())
}

func (i FusionSourceSettingsArgs) ToFusionSourceSettingsOutputWithContext(ctx context.Context) FusionSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSettingsOutput)
}

func (i FusionSourceSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettings] {
	return pulumix.Output[FusionSourceSettings]{
		OutputState: i.ToFusionSourceSettingsOutputWithContext(ctx).OutputState,
	}
}

// FusionSourceSettingsArrayInput is an input type that accepts FusionSourceSettingsArray and FusionSourceSettingsArrayOutput values.
// You can construct a concrete instance of `FusionSourceSettingsArrayInput` via:
//
//	FusionSourceSettingsArray{ FusionSourceSettingsArgs{...} }
type FusionSourceSettingsArrayInput interface {
	pulumi.Input

	ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput
	ToFusionSourceSettingsArrayOutputWithContext(context.Context) FusionSourceSettingsArrayOutput
}

type FusionSourceSettingsArray []FusionSourceSettingsInput

func (FusionSourceSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettings)(nil)).Elem()
}

func (i FusionSourceSettingsArray) ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput {
	return i.ToFusionSourceSettingsArrayOutputWithContext(context.Background())
}

func (i FusionSourceSettingsArray) ToFusionSourceSettingsArrayOutputWithContext(ctx context.Context) FusionSourceSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSettingsArrayOutput)
}

func (i FusionSourceSettingsArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettings] {
	return pulumix.Output[[]FusionSourceSettings]{
		OutputState: i.ToFusionSourceSettingsArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettings)(nil)).Elem()
}

func (o FusionSourceSettingsOutput) ToFusionSourceSettingsOutput() FusionSourceSettingsOutput {
	return o
}

func (o FusionSourceSettingsOutput) ToFusionSourceSettingsOutputWithContext(ctx context.Context) FusionSourceSettingsOutput {
	return o
}

func (o FusionSourceSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettings] {
	return pulumix.Output[FusionSourceSettings]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSettingsOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSettings) string { return v.SourceName }).(pulumi.StringOutput)
}

// Configuration for all source subtypes under this source signal consumed in fusion detection.
func (o FusionSourceSettingsOutput) SourceSubTypes() FusionSourceSubTypeSettingArrayOutput {
	return o.ApplyT(func(v FusionSourceSettings) []FusionSourceSubTypeSetting { return v.SourceSubTypes }).(FusionSourceSubTypeSettingArrayOutput)
}

type FusionSourceSettingsArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettings)(nil)).Elem()
}

func (o FusionSourceSettingsArrayOutput) ToFusionSourceSettingsArrayOutput() FusionSourceSettingsArrayOutput {
	return o
}

func (o FusionSourceSettingsArrayOutput) ToFusionSourceSettingsArrayOutputWithContext(ctx context.Context) FusionSourceSettingsArrayOutput {
	return o
}

func (o FusionSourceSettingsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettings] {
	return pulumix.Output[[]FusionSourceSettings]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSettingsArrayOutput) Index(i pulumi.IntInput) FusionSourceSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSettings {
		return vs[0].([]FusionSourceSettings)[vs[1].(int)]
	}).(FusionSourceSettingsOutput)
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsResponse struct {
	// Determines whether this source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
	SourceName string `pulumi:"sourceName"`
	// Configuration for all source subtypes under this source signal consumed in fusion detection.
	SourceSubTypes []FusionSourceSubTypeSettingResponse `pulumi:"sourceSubTypes"`
}

// Represents a supported source signal configuration in Fusion detection.
type FusionSourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSettingsResponse)(nil)).Elem()
}

func (o FusionSourceSettingsResponseOutput) ToFusionSourceSettingsResponseOutput() FusionSourceSettingsResponseOutput {
	return o
}

func (o FusionSourceSettingsResponseOutput) ToFusionSourceSettingsResponseOutputWithContext(ctx context.Context) FusionSourceSettingsResponseOutput {
	return o
}

func (o FusionSourceSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSettingsResponse] {
	return pulumix.Output[FusionSourceSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Name of the Fusion source signal. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSettingsResponseOutput) SourceName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) string { return v.SourceName }).(pulumi.StringOutput)
}

// Configuration for all source subtypes under this source signal consumed in fusion detection.
func (o FusionSourceSettingsResponseOutput) SourceSubTypes() FusionSourceSubTypeSettingResponseArrayOutput {
	return o.ApplyT(func(v FusionSourceSettingsResponse) []FusionSourceSubTypeSettingResponse { return v.SourceSubTypes }).(FusionSourceSubTypeSettingResponseArrayOutput)
}

type FusionSourceSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSettingsResponse)(nil)).Elem()
}

func (o FusionSourceSettingsResponseArrayOutput) ToFusionSourceSettingsResponseArrayOutput() FusionSourceSettingsResponseArrayOutput {
	return o
}

func (o FusionSourceSettingsResponseArrayOutput) ToFusionSourceSettingsResponseArrayOutputWithContext(ctx context.Context) FusionSourceSettingsResponseArrayOutput {
	return o
}

func (o FusionSourceSettingsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSettingsResponse] {
	return pulumix.Output[[]FusionSourceSettingsResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSettingsResponseArrayOutput) Index(i pulumi.IntInput) FusionSourceSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSettingsResponse {
		return vs[0].([]FusionSourceSettingsResponse)[vs[1].(int)]
	}).(FusionSourceSettingsResponseOutput)
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSetting struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilter `pulumi:"severityFilters"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName string `pulumi:"sourceSubTypeName"`
}

// FusionSourceSubTypeSettingInput is an input type that accepts FusionSourceSubTypeSettingArgs and FusionSourceSubTypeSettingOutput values.
// You can construct a concrete instance of `FusionSourceSubTypeSettingInput` via:
//
//	FusionSourceSubTypeSettingArgs{...}
type FusionSourceSubTypeSettingInput interface {
	pulumi.Input

	ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput
	ToFusionSourceSubTypeSettingOutputWithContext(context.Context) FusionSourceSubTypeSettingOutput
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingArgs struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilterInput `pulumi:"severityFilters"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName pulumi.StringInput `pulumi:"sourceSubTypeName"`
}

func (FusionSourceSubTypeSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSetting)(nil)).Elem()
}

func (i FusionSourceSubTypeSettingArgs) ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput {
	return i.ToFusionSourceSubTypeSettingOutputWithContext(context.Background())
}

func (i FusionSourceSubTypeSettingArgs) ToFusionSourceSubTypeSettingOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSubTypeSettingOutput)
}

func (i FusionSourceSubTypeSettingArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSetting] {
	return pulumix.Output[FusionSourceSubTypeSetting]{
		OutputState: i.ToFusionSourceSubTypeSettingOutputWithContext(ctx).OutputState,
	}
}

// FusionSourceSubTypeSettingArrayInput is an input type that accepts FusionSourceSubTypeSettingArray and FusionSourceSubTypeSettingArrayOutput values.
// You can construct a concrete instance of `FusionSourceSubTypeSettingArrayInput` via:
//
//	FusionSourceSubTypeSettingArray{ FusionSourceSubTypeSettingArgs{...} }
type FusionSourceSubTypeSettingArrayInput interface {
	pulumi.Input

	ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput
	ToFusionSourceSubTypeSettingArrayOutputWithContext(context.Context) FusionSourceSubTypeSettingArrayOutput
}

type FusionSourceSubTypeSettingArray []FusionSourceSubTypeSettingInput

func (FusionSourceSubTypeSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSetting)(nil)).Elem()
}

func (i FusionSourceSubTypeSettingArray) ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput {
	return i.ToFusionSourceSubTypeSettingArrayOutputWithContext(context.Background())
}

func (i FusionSourceSubTypeSettingArray) ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSourceSubTypeSettingArrayOutput)
}

func (i FusionSourceSubTypeSettingArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSetting] {
	return pulumix.Output[[]FusionSourceSubTypeSetting]{
		OutputState: i.ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSetting)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingOutput) ToFusionSourceSubTypeSettingOutput() FusionSourceSubTypeSettingOutput {
	return o
}

func (o FusionSourceSubTypeSettingOutput) ToFusionSourceSubTypeSettingOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingOutput {
	return o
}

func (o FusionSourceSubTypeSettingOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSetting] {
	return pulumix.Output[FusionSourceSubTypeSetting]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSubTypeSettingOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Severity configuration for a source subtype consumed in fusion detection.
func (o FusionSourceSubTypeSettingOutput) SeverityFilters() FusionSubTypeSeverityFilterOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) FusionSubTypeSeverityFilter { return v.SeverityFilters }).(FusionSubTypeSeverityFilterOutput)
}

// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSubTypeSettingOutput) SourceSubTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSetting) string { return v.SourceSubTypeName }).(pulumi.StringOutput)
}

type FusionSourceSubTypeSettingArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSetting)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingArrayOutput) ToFusionSourceSubTypeSettingArrayOutput() FusionSourceSubTypeSettingArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingArrayOutput) ToFusionSourceSubTypeSettingArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSetting] {
	return pulumix.Output[[]FusionSourceSubTypeSetting]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSubTypeSettingArrayOutput) Index(i pulumi.IntInput) FusionSourceSubTypeSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSubTypeSetting {
		return vs[0].([]FusionSourceSubTypeSetting)[vs[1].(int)]
	}).(FusionSourceSubTypeSettingOutput)
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingResponse struct {
	// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// Severity configuration for a source subtype consumed in fusion detection.
	SeverityFilters FusionSubTypeSeverityFilterResponse `pulumi:"severityFilters"`
	// The display name of source subtype under a source signal consumed in Fusion detection.
	SourceSubTypeDisplayName string `pulumi:"sourceSubTypeDisplayName"`
	// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
	SourceSubTypeName string `pulumi:"sourceSubTypeName"`
}

// Represents a supported source subtype configuration under a source signal in Fusion detection.
type FusionSourceSubTypeSettingResponseOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSourceSubTypeSettingResponse)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingResponseOutput) ToFusionSourceSubTypeSettingResponseOutput() FusionSourceSubTypeSettingResponseOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseOutput) ToFusionSourceSubTypeSettingResponseOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingResponseOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSourceSubTypeSettingResponse] {
	return pulumix.Output[FusionSourceSubTypeSettingResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this source subtype under source signal is enabled or disabled in Fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Severity configuration for a source subtype consumed in fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) SeverityFilters() FusionSubTypeSeverityFilterResponseOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) FusionSubTypeSeverityFilterResponse {
		return v.SeverityFilters
	}).(FusionSubTypeSeverityFilterResponseOutput)
}

// The display name of source subtype under a source signal consumed in Fusion detection.
func (o FusionSourceSubTypeSettingResponseOutput) SourceSubTypeDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) string { return v.SourceSubTypeDisplayName }).(pulumi.StringOutput)
}

// The Name of the source subtype under a given source signal in Fusion detection. Refer to Fusion alert rule template for supported values.
func (o FusionSourceSubTypeSettingResponseOutput) SourceSubTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSourceSubTypeSettingResponse) string { return v.SourceSubTypeName }).(pulumi.StringOutput)
}

type FusionSourceSubTypeSettingResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSourceSubTypeSettingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSourceSubTypeSettingResponse)(nil)).Elem()
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToFusionSourceSubTypeSettingResponseArrayOutput() FusionSourceSubTypeSettingResponseArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToFusionSourceSubTypeSettingResponseArrayOutputWithContext(ctx context.Context) FusionSourceSubTypeSettingResponseArrayOutput {
	return o
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSourceSubTypeSettingResponse] {
	return pulumix.Output[[]FusionSourceSubTypeSettingResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSourceSubTypeSettingResponseArrayOutput) Index(i pulumi.IntInput) FusionSourceSubTypeSettingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSourceSubTypeSettingResponse {
		return vs[0].([]FusionSourceSubTypeSettingResponse)[vs[1].(int)]
	}).(FusionSourceSubTypeSettingResponseOutput)
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilter struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters []FusionSubTypeSeverityFiltersItem `pulumi:"filters"`
}

// FusionSubTypeSeverityFilterInput is an input type that accepts FusionSubTypeSeverityFilterArgs and FusionSubTypeSeverityFilterOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFilterInput` via:
//
//	FusionSubTypeSeverityFilterArgs{...}
type FusionSubTypeSeverityFilterInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput
	ToFusionSubTypeSeverityFilterOutputWithContext(context.Context) FusionSubTypeSeverityFilterOutput
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterArgs struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters FusionSubTypeSeverityFiltersItemArrayInput `pulumi:"filters"`
}

func (FusionSubTypeSeverityFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilter)(nil)).Elem()
}

func (i FusionSubTypeSeverityFilterArgs) ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput {
	return i.ToFusionSubTypeSeverityFilterOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFilterArgs) ToFusionSubTypeSeverityFilterOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFilterOutput)
}

func (i FusionSubTypeSeverityFilterArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilter] {
	return pulumix.Output[FusionSubTypeSeverityFilter]{
		OutputState: i.ToFusionSubTypeSeverityFilterOutputWithContext(ctx).OutputState,
	}
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilter)(nil)).Elem()
}

func (o FusionSubTypeSeverityFilterOutput) ToFusionSubTypeSeverityFilterOutput() FusionSubTypeSeverityFilterOutput {
	return o
}

func (o FusionSubTypeSeverityFilterOutput) ToFusionSubTypeSeverityFilterOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterOutput {
	return o
}

func (o FusionSubTypeSeverityFilterOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilter] {
	return pulumix.Output[FusionSubTypeSeverityFilter]{
		OutputState: o.OutputState,
	}
}

// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFilterOutput) Filters() FusionSubTypeSeverityFiltersItemArrayOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilter) []FusionSubTypeSeverityFiltersItem { return v.Filters }).(FusionSubTypeSeverityFiltersItemArrayOutput)
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterResponse struct {
	// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
	Filters []FusionSubTypeSeverityFiltersItemResponse `pulumi:"filters"`
	// Determines whether this source subtype supports severity configuration or not.
	IsSupported bool `pulumi:"isSupported"`
}

// Represents severity configuration for a source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFilterResponseOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFilterResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToFusionSubTypeSeverityFilterResponseOutput() FusionSubTypeSeverityFilterResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToFusionSubTypeSeverityFilterResponseOutputWithContext(ctx context.Context) FusionSubTypeSeverityFilterResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFilterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFilterResponse] {
	return pulumix.Output[FusionSubTypeSeverityFilterResponse]{
		OutputState: o.OutputState,
	}
}

// Individual Severity configuration settings for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFilterResponseOutput) Filters() FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilterResponse) []FusionSubTypeSeverityFiltersItemResponse {
		return v.Filters
	}).(FusionSubTypeSeverityFiltersItemResponseArrayOutput)
}

// Determines whether this source subtype supports severity configuration or not.
func (o FusionSubTypeSeverityFilterResponseOutput) IsSupported() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFilterResponse) bool { return v.IsSupported }).(pulumi.BoolOutput)
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItem struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity string `pulumi:"severity"`
}

// FusionSubTypeSeverityFiltersItemInput is an input type that accepts FusionSubTypeSeverityFiltersItemArgs and FusionSubTypeSeverityFiltersItemOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFiltersItemInput` via:
//
//	FusionSubTypeSeverityFiltersItemArgs{...}
type FusionSubTypeSeverityFiltersItemInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput
	ToFusionSubTypeSeverityFiltersItemOutputWithContext(context.Context) FusionSubTypeSeverityFiltersItemOutput
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemArgs struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (FusionSubTypeSeverityFiltersItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput {
	return i.ToFusionSubTypeSeverityFiltersItemOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFiltersItemOutput)
}

func (i FusionSubTypeSeverityFiltersItemArgs) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItem]{
		OutputState: i.ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx).OutputState,
	}
}

// FusionSubTypeSeverityFiltersItemArrayInput is an input type that accepts FusionSubTypeSeverityFiltersItemArray and FusionSubTypeSeverityFiltersItemArrayOutput values.
// You can construct a concrete instance of `FusionSubTypeSeverityFiltersItemArrayInput` via:
//
//	FusionSubTypeSeverityFiltersItemArray{ FusionSubTypeSeverityFiltersItemArgs{...} }
type FusionSubTypeSeverityFiltersItemArrayInput interface {
	pulumi.Input

	ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput
	ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(context.Context) FusionSubTypeSeverityFiltersItemArrayOutput
}

type FusionSubTypeSeverityFiltersItemArray []FusionSubTypeSeverityFiltersItemInput

func (FusionSubTypeSeverityFiltersItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (i FusionSubTypeSeverityFiltersItemArray) ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput {
	return i.ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(context.Background())
}

func (i FusionSubTypeSeverityFiltersItemArray) ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FusionSubTypeSeverityFiltersItemArrayOutput)
}

func (i FusionSubTypeSeverityFiltersItemArray) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItem]{
		OutputState: i.ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToFusionSubTypeSeverityFiltersItemOutput() FusionSubTypeSeverityFiltersItemOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToFusionSubTypeSeverityFiltersItemOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItem]{
		OutputState: o.OutputState,
	}
}

// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItem) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The Severity for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItem) string { return v.Severity }).(pulumi.StringOutput)
}

type FusionSubTypeSeverityFiltersItemArrayOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItem)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToFusionSubTypeSeverityFiltersItemArrayOutput() FusionSubTypeSeverityFiltersItemArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToFusionSubTypeSeverityFiltersItemArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItem] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItem]{
		OutputState: o.OutputState,
	}
}

func (o FusionSubTypeSeverityFiltersItemArrayOutput) Index(i pulumi.IntInput) FusionSubTypeSeverityFiltersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSubTypeSeverityFiltersItem {
		return vs[0].([]FusionSubTypeSeverityFiltersItem)[vs[1].(int)]
	}).(FusionSubTypeSeverityFiltersItemOutput)
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemResponse struct {
	// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
	Enabled bool `pulumi:"enabled"`
	// The Severity for a given source subtype consumed in Fusion detection.
	Severity string `pulumi:"severity"`
}

// Represents a Severity filter setting for a given source subtype consumed in Fusion detection.
type FusionSubTypeSeverityFiltersItemResponseOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FusionSubTypeSeverityFiltersItemResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToFusionSubTypeSeverityFiltersItemResponseOutput() FusionSubTypeSeverityFiltersItemResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToFusionSubTypeSeverityFiltersItemResponseOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemResponseOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FusionSubTypeSeverityFiltersItemResponse] {
	return pulumix.Output[FusionSubTypeSeverityFiltersItemResponse]{
		OutputState: o.OutputState,
	}
}

// Determines whether this severity is enabled or disabled for this source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItemResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The Severity for a given source subtype consumed in Fusion detection.
func (o FusionSubTypeSeverityFiltersItemResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v FusionSubTypeSeverityFiltersItemResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type FusionSubTypeSeverityFiltersItemResponseArrayOutput struct{ *pulumi.OutputState }

func (FusionSubTypeSeverityFiltersItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FusionSubTypeSeverityFiltersItemResponse)(nil)).Elem()
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToFusionSubTypeSeverityFiltersItemResponseArrayOutput() FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToFusionSubTypeSeverityFiltersItemResponseArrayOutputWithContext(ctx context.Context) FusionSubTypeSeverityFiltersItemResponseArrayOutput {
	return o
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FusionSubTypeSeverityFiltersItemResponse] {
	return pulumix.Output[[]FusionSubTypeSeverityFiltersItemResponse]{
		OutputState: o.OutputState,
	}
}

func (o FusionSubTypeSeverityFiltersItemResponseArrayOutput) Index(i pulumi.IntInput) FusionSubTypeSeverityFiltersItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FusionSubTypeSeverityFiltersItemResponse {
		return vs[0].([]FusionSubTypeSeverityFiltersItemResponse)[vs[1].(int)]
	}).(FusionSubTypeSeverityFiltersItemResponseOutput)
}

// Google Cloud Platform auth section properties.
type GCPAuthProperties struct {
	// The GCP project number.
	ProjectNumber string `pulumi:"projectNumber"`
	// The service account that is used to access the GCP project.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// The workload identity provider id that is used to gain access to the GCP project.
	WorkloadIdentityProviderId string `pulumi:"workloadIdentityProviderId"`
}

// GCPAuthPropertiesInput is an input type that accepts GCPAuthPropertiesArgs and GCPAuthPropertiesOutput values.
// You can construct a concrete instance of `GCPAuthPropertiesInput` via:
//
//	GCPAuthPropertiesArgs{...}
type GCPAuthPropertiesInput interface {
	pulumi.Input

	ToGCPAuthPropertiesOutput() GCPAuthPropertiesOutput
	ToGCPAuthPropertiesOutputWithContext(context.Context) GCPAuthPropertiesOutput
}

// Google Cloud Platform auth section properties.
type GCPAuthPropertiesArgs struct {
	// The GCP project number.
	ProjectNumber pulumi.StringInput `pulumi:"projectNumber"`
	// The service account that is used to access the GCP project.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
	// The workload identity provider id that is used to gain access to the GCP project.
	WorkloadIdentityProviderId pulumi.StringInput `pulumi:"workloadIdentityProviderId"`
}

func (GCPAuthPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPAuthProperties)(nil)).Elem()
}

func (i GCPAuthPropertiesArgs) ToGCPAuthPropertiesOutput() GCPAuthPropertiesOutput {
	return i.ToGCPAuthPropertiesOutputWithContext(context.Background())
}

func (i GCPAuthPropertiesArgs) ToGCPAuthPropertiesOutputWithContext(ctx context.Context) GCPAuthPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPAuthPropertiesOutput)
}

func (i GCPAuthPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[GCPAuthProperties] {
	return pulumix.Output[GCPAuthProperties]{
		OutputState: i.ToGCPAuthPropertiesOutputWithContext(ctx).OutputState,
	}
}

// Google Cloud Platform auth section properties.
type GCPAuthPropertiesOutput struct{ *pulumi.OutputState }

func (GCPAuthPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPAuthProperties)(nil)).Elem()
}

func (o GCPAuthPropertiesOutput) ToGCPAuthPropertiesOutput() GCPAuthPropertiesOutput {
	return o
}

func (o GCPAuthPropertiesOutput) ToGCPAuthPropertiesOutputWithContext(ctx context.Context) GCPAuthPropertiesOutput {
	return o
}

func (o GCPAuthPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[GCPAuthProperties] {
	return pulumix.Output[GCPAuthProperties]{
		OutputState: o.OutputState,
	}
}

// The GCP project number.
func (o GCPAuthPropertiesOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthProperties) string { return v.ProjectNumber }).(pulumi.StringOutput)
}

// The service account that is used to access the GCP project.
func (o GCPAuthPropertiesOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthProperties) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// The workload identity provider id that is used to gain access to the GCP project.
func (o GCPAuthPropertiesOutput) WorkloadIdentityProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthProperties) string { return v.WorkloadIdentityProviderId }).(pulumi.StringOutput)
}

// Google Cloud Platform auth section properties.
type GCPAuthPropertiesResponse struct {
	// The GCP project number.
	ProjectNumber string `pulumi:"projectNumber"`
	// The service account that is used to access the GCP project.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// The workload identity provider id that is used to gain access to the GCP project.
	WorkloadIdentityProviderId string `pulumi:"workloadIdentityProviderId"`
}

// Google Cloud Platform auth section properties.
type GCPAuthPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GCPAuthPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPAuthPropertiesResponse)(nil)).Elem()
}

func (o GCPAuthPropertiesResponseOutput) ToGCPAuthPropertiesResponseOutput() GCPAuthPropertiesResponseOutput {
	return o
}

func (o GCPAuthPropertiesResponseOutput) ToGCPAuthPropertiesResponseOutputWithContext(ctx context.Context) GCPAuthPropertiesResponseOutput {
	return o
}

func (o GCPAuthPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GCPAuthPropertiesResponse] {
	return pulumix.Output[GCPAuthPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The GCP project number.
func (o GCPAuthPropertiesResponseOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthPropertiesResponse) string { return v.ProjectNumber }).(pulumi.StringOutput)
}

// The service account that is used to access the GCP project.
func (o GCPAuthPropertiesResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthPropertiesResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// The workload identity provider id that is used to gain access to the GCP project.
func (o GCPAuthPropertiesResponseOutput) WorkloadIdentityProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v GCPAuthPropertiesResponse) string { return v.WorkloadIdentityProviderId }).(pulumi.StringOutput)
}

// Google Cloud Platform request section properties.
type GCPRequestProperties struct {
	// The GCP project id.
	ProjectId string `pulumi:"projectId"`
	// The GCP pub/sub subscription names.
	SubscriptionNames []string `pulumi:"subscriptionNames"`
}

// GCPRequestPropertiesInput is an input type that accepts GCPRequestPropertiesArgs and GCPRequestPropertiesOutput values.
// You can construct a concrete instance of `GCPRequestPropertiesInput` via:
//
//	GCPRequestPropertiesArgs{...}
type GCPRequestPropertiesInput interface {
	pulumi.Input

	ToGCPRequestPropertiesOutput() GCPRequestPropertiesOutput
	ToGCPRequestPropertiesOutputWithContext(context.Context) GCPRequestPropertiesOutput
}

// Google Cloud Platform request section properties.
type GCPRequestPropertiesArgs struct {
	// The GCP project id.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The GCP pub/sub subscription names.
	SubscriptionNames pulumi.StringArrayInput `pulumi:"subscriptionNames"`
}

func (GCPRequestPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPRequestProperties)(nil)).Elem()
}

func (i GCPRequestPropertiesArgs) ToGCPRequestPropertiesOutput() GCPRequestPropertiesOutput {
	return i.ToGCPRequestPropertiesOutputWithContext(context.Background())
}

func (i GCPRequestPropertiesArgs) ToGCPRequestPropertiesOutputWithContext(ctx context.Context) GCPRequestPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCPRequestPropertiesOutput)
}

func (i GCPRequestPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[GCPRequestProperties] {
	return pulumix.Output[GCPRequestProperties]{
		OutputState: i.ToGCPRequestPropertiesOutputWithContext(ctx).OutputState,
	}
}

// Google Cloud Platform request section properties.
type GCPRequestPropertiesOutput struct{ *pulumi.OutputState }

func (GCPRequestPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPRequestProperties)(nil)).Elem()
}

func (o GCPRequestPropertiesOutput) ToGCPRequestPropertiesOutput() GCPRequestPropertiesOutput {
	return o
}

func (o GCPRequestPropertiesOutput) ToGCPRequestPropertiesOutputWithContext(ctx context.Context) GCPRequestPropertiesOutput {
	return o
}

func (o GCPRequestPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[GCPRequestProperties] {
	return pulumix.Output[GCPRequestProperties]{
		OutputState: o.OutputState,
	}
}

// The GCP project id.
func (o GCPRequestPropertiesOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GCPRequestProperties) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The GCP pub/sub subscription names.
func (o GCPRequestPropertiesOutput) SubscriptionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GCPRequestProperties) []string { return v.SubscriptionNames }).(pulumi.StringArrayOutput)
}

// Google Cloud Platform request section properties.
type GCPRequestPropertiesResponse struct {
	// The GCP project id.
	ProjectId string `pulumi:"projectId"`
	// The GCP pub/sub subscription names.
	SubscriptionNames []string `pulumi:"subscriptionNames"`
}

// Google Cloud Platform request section properties.
type GCPRequestPropertiesResponseOutput struct{ *pulumi.OutputState }

func (GCPRequestPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCPRequestPropertiesResponse)(nil)).Elem()
}

func (o GCPRequestPropertiesResponseOutput) ToGCPRequestPropertiesResponseOutput() GCPRequestPropertiesResponseOutput {
	return o
}

func (o GCPRequestPropertiesResponseOutput) ToGCPRequestPropertiesResponseOutputWithContext(ctx context.Context) GCPRequestPropertiesResponseOutput {
	return o
}

func (o GCPRequestPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GCPRequestPropertiesResponse] {
	return pulumix.Output[GCPRequestPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The GCP project id.
func (o GCPRequestPropertiesResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GCPRequestPropertiesResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The GCP pub/sub subscription names.
func (o GCPRequestPropertiesResponseOutput) SubscriptionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GCPRequestPropertiesResponse) []string { return v.SubscriptionNames }).(pulumi.StringArrayOutput)
}

// GetInsights Query Errors.
type GetInsightsErrorKindResponse struct {
	// the error message
	ErrorMessage string `pulumi:"errorMessage"`
	// the query kind
	Kind string `pulumi:"kind"`
	// the query id
	QueryId *string `pulumi:"queryId"`
}

// GetInsights Query Errors.
type GetInsightsErrorKindResponseOutput struct{ *pulumi.OutputState }

func (GetInsightsErrorKindResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInsightsErrorKindResponse)(nil)).Elem()
}

func (o GetInsightsErrorKindResponseOutput) ToGetInsightsErrorKindResponseOutput() GetInsightsErrorKindResponseOutput {
	return o
}

func (o GetInsightsErrorKindResponseOutput) ToGetInsightsErrorKindResponseOutputWithContext(ctx context.Context) GetInsightsErrorKindResponseOutput {
	return o
}

func (o GetInsightsErrorKindResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetInsightsErrorKindResponse] {
	return pulumix.Output[GetInsightsErrorKindResponse]{
		OutputState: o.OutputState,
	}
}

// the error message
func (o GetInsightsErrorKindResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetInsightsErrorKindResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// the query kind
func (o GetInsightsErrorKindResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GetInsightsErrorKindResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// the query id
func (o GetInsightsErrorKindResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInsightsErrorKindResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

type GetInsightsErrorKindResponseArrayOutput struct{ *pulumi.OutputState }

func (GetInsightsErrorKindResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInsightsErrorKindResponse)(nil)).Elem()
}

func (o GetInsightsErrorKindResponseArrayOutput) ToGetInsightsErrorKindResponseArrayOutput() GetInsightsErrorKindResponseArrayOutput {
	return o
}

func (o GetInsightsErrorKindResponseArrayOutput) ToGetInsightsErrorKindResponseArrayOutputWithContext(ctx context.Context) GetInsightsErrorKindResponseArrayOutput {
	return o
}

func (o GetInsightsErrorKindResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInsightsErrorKindResponse] {
	return pulumix.Output[[]GetInsightsErrorKindResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetInsightsErrorKindResponseArrayOutput) Index(i pulumi.IntInput) GetInsightsErrorKindResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInsightsErrorKindResponse {
		return vs[0].([]GetInsightsErrorKindResponse)[vs[1].(int)]
	}).(GetInsightsErrorKindResponseOutput)
}

// Get Insights result metadata.
type GetInsightsResultsMetadataResponse struct {
	// information about the failed queries
	Errors []GetInsightsErrorKindResponse `pulumi:"errors"`
	// the total items found for the insights request
	TotalCount int `pulumi:"totalCount"`
}

// Get Insights result metadata.
type GetInsightsResultsMetadataResponseOutput struct{ *pulumi.OutputState }

func (GetInsightsResultsMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInsightsResultsMetadataResponse)(nil)).Elem()
}

func (o GetInsightsResultsMetadataResponseOutput) ToGetInsightsResultsMetadataResponseOutput() GetInsightsResultsMetadataResponseOutput {
	return o
}

func (o GetInsightsResultsMetadataResponseOutput) ToGetInsightsResultsMetadataResponseOutputWithContext(ctx context.Context) GetInsightsResultsMetadataResponseOutput {
	return o
}

func (o GetInsightsResultsMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GetInsightsResultsMetadataResponse] {
	return pulumix.Output[GetInsightsResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// information about the failed queries
func (o GetInsightsResultsMetadataResponseOutput) Errors() GetInsightsErrorKindResponseArrayOutput {
	return o.ApplyT(func(v GetInsightsResultsMetadataResponse) []GetInsightsErrorKindResponse { return v.Errors }).(GetInsightsErrorKindResponseArrayOutput)
}

// the total items found for the insights request
func (o GetInsightsResultsMetadataResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInsightsResultsMetadataResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type GetInsightsResultsMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (GetInsightsResultsMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetInsightsResultsMetadataResponse)(nil)).Elem()
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToGetInsightsResultsMetadataResponsePtrOutput() GetInsightsResultsMetadataResponsePtrOutput {
	return o
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToGetInsightsResultsMetadataResponsePtrOutputWithContext(ctx context.Context) GetInsightsResultsMetadataResponsePtrOutput {
	return o
}

func (o GetInsightsResultsMetadataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GetInsightsResultsMetadataResponse] {
	return pulumix.Output[*GetInsightsResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o GetInsightsResultsMetadataResponsePtrOutput) Elem() GetInsightsResultsMetadataResponseOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) GetInsightsResultsMetadataResponse {
		if v != nil {
			return *v
		}
		var ret GetInsightsResultsMetadataResponse
		return ret
	}).(GetInsightsResultsMetadataResponseOutput)
}

// information about the failed queries
func (o GetInsightsResultsMetadataResponsePtrOutput) Errors() GetInsightsErrorKindResponseArrayOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) []GetInsightsErrorKindResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(GetInsightsErrorKindResponseArrayOutput)
}

// the total items found for the insights request
func (o GetInsightsResultsMetadataResponsePtrOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetInsightsResultsMetadataResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TotalCount
	}).(pulumi.IntPtrOutput)
}

// The graph query to show the volume of data arriving into the workspace over time.
type GraphQuery struct {
	// Gets or sets the base query for the graph.
	// The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
	BaseQuery string `pulumi:"baseQuery"`
	// Gets or sets the legend for the graph.
	Legend string `pulumi:"legend"`
	// Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
	MetricName string `pulumi:"metricName"`
}

// GraphQueryInput is an input type that accepts GraphQueryArgs and GraphQueryOutput values.
// You can construct a concrete instance of `GraphQueryInput` via:
//
//	GraphQueryArgs{...}
type GraphQueryInput interface {
	pulumi.Input

	ToGraphQueryOutput() GraphQueryOutput
	ToGraphQueryOutputWithContext(context.Context) GraphQueryOutput
}

// The graph query to show the volume of data arriving into the workspace over time.
type GraphQueryArgs struct {
	// Gets or sets the base query for the graph.
	// The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
	BaseQuery pulumi.StringInput `pulumi:"baseQuery"`
	// Gets or sets the legend for the graph.
	Legend pulumi.StringInput `pulumi:"legend"`
	// Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
	MetricName pulumi.StringInput `pulumi:"metricName"`
}

func (GraphQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQuery)(nil)).Elem()
}

func (i GraphQueryArgs) ToGraphQueryOutput() GraphQueryOutput {
	return i.ToGraphQueryOutputWithContext(context.Background())
}

func (i GraphQueryArgs) ToGraphQueryOutputWithContext(ctx context.Context) GraphQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQueryOutput)
}

func (i GraphQueryArgs) ToOutput(ctx context.Context) pulumix.Output[GraphQuery] {
	return pulumix.Output[GraphQuery]{
		OutputState: i.ToGraphQueryOutputWithContext(ctx).OutputState,
	}
}

// GraphQueryArrayInput is an input type that accepts GraphQueryArray and GraphQueryArrayOutput values.
// You can construct a concrete instance of `GraphQueryArrayInput` via:
//
//	GraphQueryArray{ GraphQueryArgs{...} }
type GraphQueryArrayInput interface {
	pulumi.Input

	ToGraphQueryArrayOutput() GraphQueryArrayOutput
	ToGraphQueryArrayOutputWithContext(context.Context) GraphQueryArrayOutput
}

type GraphQueryArray []GraphQueryInput

func (GraphQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GraphQuery)(nil)).Elem()
}

func (i GraphQueryArray) ToGraphQueryArrayOutput() GraphQueryArrayOutput {
	return i.ToGraphQueryArrayOutputWithContext(context.Background())
}

func (i GraphQueryArray) ToGraphQueryArrayOutputWithContext(ctx context.Context) GraphQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GraphQueryArrayOutput)
}

func (i GraphQueryArray) ToOutput(ctx context.Context) pulumix.Output[[]GraphQuery] {
	return pulumix.Output[[]GraphQuery]{
		OutputState: i.ToGraphQueryArrayOutputWithContext(ctx).OutputState,
	}
}

// The graph query to show the volume of data arriving into the workspace over time.
type GraphQueryOutput struct{ *pulumi.OutputState }

func (GraphQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQuery)(nil)).Elem()
}

func (o GraphQueryOutput) ToGraphQueryOutput() GraphQueryOutput {
	return o
}

func (o GraphQueryOutput) ToGraphQueryOutputWithContext(ctx context.Context) GraphQueryOutput {
	return o
}

func (o GraphQueryOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQuery] {
	return pulumix.Output[GraphQuery]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the base query for the graph.
// The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
func (o GraphQueryOutput) BaseQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQuery) string { return v.BaseQuery }).(pulumi.StringOutput)
}

// Gets or sets the legend for the graph.
func (o GraphQueryOutput) Legend() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQuery) string { return v.Legend }).(pulumi.StringOutput)
}

// Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
func (o GraphQueryOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQuery) string { return v.MetricName }).(pulumi.StringOutput)
}

type GraphQueryArrayOutput struct{ *pulumi.OutputState }

func (GraphQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GraphQuery)(nil)).Elem()
}

func (o GraphQueryArrayOutput) ToGraphQueryArrayOutput() GraphQueryArrayOutput {
	return o
}

func (o GraphQueryArrayOutput) ToGraphQueryArrayOutputWithContext(ctx context.Context) GraphQueryArrayOutput {
	return o
}

func (o GraphQueryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GraphQuery] {
	return pulumix.Output[[]GraphQuery]{
		OutputState: o.OutputState,
	}
}

func (o GraphQueryArrayOutput) Index(i pulumi.IntInput) GraphQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GraphQuery {
		return vs[0].([]GraphQuery)[vs[1].(int)]
	}).(GraphQueryOutput)
}

// The graph query to show the volume of data arriving into the workspace over time.
type GraphQueryResponse struct {
	// Gets or sets the base query for the graph.
	// The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
	BaseQuery string `pulumi:"baseQuery"`
	// Gets or sets the legend for the graph.
	Legend string `pulumi:"legend"`
	// Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
	MetricName string `pulumi:"metricName"`
}

// The graph query to show the volume of data arriving into the workspace over time.
type GraphQueryResponseOutput struct{ *pulumi.OutputState }

func (GraphQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GraphQueryResponse)(nil)).Elem()
}

func (o GraphQueryResponseOutput) ToGraphQueryResponseOutput() GraphQueryResponseOutput {
	return o
}

func (o GraphQueryResponseOutput) ToGraphQueryResponseOutputWithContext(ctx context.Context) GraphQueryResponseOutput {
	return o
}

func (o GraphQueryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GraphQueryResponse] {
	return pulumix.Output[GraphQueryResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the base query for the graph.
// The base query is wrapped by Sentinel UI infra with a KQL query, that measures the volume over time.
func (o GraphQueryResponseOutput) BaseQuery() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQueryResponse) string { return v.BaseQuery }).(pulumi.StringOutput)
}

// Gets or sets the legend for the graph.
func (o GraphQueryResponseOutput) Legend() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQueryResponse) string { return v.Legend }).(pulumi.StringOutput)
}

// Gets or sets the metric name that the query is checking. For example: 'Total data receive'.
func (o GraphQueryResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v GraphQueryResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

type GraphQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (GraphQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GraphQueryResponse)(nil)).Elem()
}

func (o GraphQueryResponseArrayOutput) ToGraphQueryResponseArrayOutput() GraphQueryResponseArrayOutput {
	return o
}

func (o GraphQueryResponseArrayOutput) ToGraphQueryResponseArrayOutputWithContext(ctx context.Context) GraphQueryResponseArrayOutput {
	return o
}

func (o GraphQueryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GraphQueryResponse] {
	return pulumix.Output[[]GraphQueryResponse]{
		OutputState: o.OutputState,
	}
}

func (o GraphQueryResponseArrayOutput) Index(i pulumi.IntInput) GraphQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GraphQueryResponse {
		return vs[0].([]GraphQueryResponse)[vs[1].(int)]
	}).(GraphQueryResponseOutput)
}

// Grouping configuration property bag.
type GroupingConfiguration struct {
	// Grouping enabled
	Enabled bool `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails []string `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails []string `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities []string `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration string `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod string `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident bool `pulumi:"reopenClosedIncident"`
}

// GroupingConfigurationInput is an input type that accepts GroupingConfigurationArgs and GroupingConfigurationOutput values.
// You can construct a concrete instance of `GroupingConfigurationInput` via:
//
//	GroupingConfigurationArgs{...}
type GroupingConfigurationInput interface {
	pulumi.Input

	ToGroupingConfigurationOutput() GroupingConfigurationOutput
	ToGroupingConfigurationOutputWithContext(context.Context) GroupingConfigurationOutput
}

// Grouping configuration property bag.
type GroupingConfigurationArgs struct {
	// Grouping enabled
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails pulumi.StringArrayInput `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails pulumi.StringArrayInput `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities pulumi.StringArrayInput `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration pulumi.StringInput `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod pulumi.StringInput `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident pulumi.BoolInput `pulumi:"reopenClosedIncident"`
}

func (GroupingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfiguration)(nil)).Elem()
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return i.ToGroupingConfigurationOutputWithContext(context.Background())
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationOutput)
}

func (i GroupingConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[GroupingConfiguration] {
	return pulumix.Output[GroupingConfiguration]{
		OutputState: i.ToGroupingConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return i.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (i GroupingConfigurationArgs) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationOutput).ToGroupingConfigurationPtrOutputWithContext(ctx)
}

// GroupingConfigurationPtrInput is an input type that accepts GroupingConfigurationArgs, GroupingConfigurationPtr and GroupingConfigurationPtrOutput values.
// You can construct a concrete instance of `GroupingConfigurationPtrInput` via:
//
//	        GroupingConfigurationArgs{...}
//
//	or:
//
//	        nil
type GroupingConfigurationPtrInput interface {
	pulumi.Input

	ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput
	ToGroupingConfigurationPtrOutputWithContext(context.Context) GroupingConfigurationPtrOutput
}

type groupingConfigurationPtrType GroupingConfigurationArgs

func GroupingConfigurationPtr(v *GroupingConfigurationArgs) GroupingConfigurationPtrInput {
	return (*groupingConfigurationPtrType)(v)
}

func (*groupingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (i *groupingConfigurationPtrType) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return i.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (i *groupingConfigurationPtrType) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupingConfigurationPtrOutput)
}

func (i *groupingConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfiguration] {
	return pulumix.Output[*GroupingConfiguration]{
		OutputState: i.ToGroupingConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Grouping configuration property bag.
type GroupingConfigurationOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfiguration)(nil)).Elem()
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutput() GroupingConfigurationOutput {
	return o
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationOutputWithContext(ctx context.Context) GroupingConfigurationOutput {
	return o
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return o.ToGroupingConfigurationPtrOutputWithContext(context.Background())
}

func (o GroupingConfigurationOutput) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupingConfiguration) *GroupingConfiguration {
		return &v
	}).(GroupingConfigurationPtrOutput)
}

func (o GroupingConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[GroupingConfiguration] {
	return pulumix.Output[GroupingConfiguration]{
		OutputState: o.OutputState,
	}
}

// Grouping enabled
func (o GroupingConfigurationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfiguration) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByAlertDetails }).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByCustomDetails }).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfiguration) []string { return v.GroupByEntities }).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationOutput) LookbackDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfiguration) string { return v.LookbackDuration }).(pulumi.StringOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationOutput) MatchingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfiguration) string { return v.MatchingMethod }).(pulumi.StringOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationOutput) ReopenClosedIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfiguration) bool { return v.ReopenClosedIncident }).(pulumi.BoolOutput)
}

type GroupingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfiguration)(nil)).Elem()
}

func (o GroupingConfigurationPtrOutput) ToGroupingConfigurationPtrOutput() GroupingConfigurationPtrOutput {
	return o
}

func (o GroupingConfigurationPtrOutput) ToGroupingConfigurationPtrOutputWithContext(ctx context.Context) GroupingConfigurationPtrOutput {
	return o
}

func (o GroupingConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfiguration] {
	return pulumix.Output[*GroupingConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o GroupingConfigurationPtrOutput) Elem() GroupingConfigurationOutput {
	return o.ApplyT(func(v *GroupingConfiguration) GroupingConfiguration {
		if v != nil {
			return *v
		}
		var ret GroupingConfiguration
		return ret
	}).(GroupingConfigurationOutput)
}

// Grouping enabled
func (o GroupingConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationPtrOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByAlertDetails
	}).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationPtrOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByCustomDetails
	}).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationPtrOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.GroupByEntities
	}).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationPtrOutput) LookbackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.LookbackDuration
	}).(pulumi.StringPtrOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationPtrOutput) MatchingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.MatchingMethod
	}).(pulumi.StringPtrOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationPtrOutput) ReopenClosedIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.ReopenClosedIncident
	}).(pulumi.BoolPtrOutput)
}

// Grouping configuration property bag.
type GroupingConfigurationResponse struct {
	// Grouping enabled
	Enabled bool `pulumi:"enabled"`
	// A list of alert details to group by (when matchingMethod is Selected)
	GroupByAlertDetails []string `pulumi:"groupByAlertDetails"`
	// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
	GroupByCustomDetails []string `pulumi:"groupByCustomDetails"`
	// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
	GroupByEntities []string `pulumi:"groupByEntities"`
	// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
	LookbackDuration string `pulumi:"lookbackDuration"`
	// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
	MatchingMethod string `pulumi:"matchingMethod"`
	// Re-open closed matching incidents
	ReopenClosedIncident bool `pulumi:"reopenClosedIncident"`
}

// Grouping configuration property bag.
type GroupingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingConfigurationResponse)(nil)).Elem()
}

func (o GroupingConfigurationResponseOutput) ToGroupingConfigurationResponseOutput() GroupingConfigurationResponseOutput {
	return o
}

func (o GroupingConfigurationResponseOutput) ToGroupingConfigurationResponseOutputWithContext(ctx context.Context) GroupingConfigurationResponseOutput {
	return o
}

func (o GroupingConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GroupingConfigurationResponse] {
	return pulumix.Output[GroupingConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Grouping enabled
func (o GroupingConfigurationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationResponseOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByAlertDetails }).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationResponseOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByCustomDetails }).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationResponseOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) []string { return v.GroupByEntities }).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationResponseOutput) LookbackDuration() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) string { return v.LookbackDuration }).(pulumi.StringOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationResponseOutput) MatchingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) string { return v.MatchingMethod }).(pulumi.StringOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationResponseOutput) ReopenClosedIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupingConfigurationResponse) bool { return v.ReopenClosedIncident }).(pulumi.BoolOutput)
}

type GroupingConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (GroupingConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingConfigurationResponse)(nil)).Elem()
}

func (o GroupingConfigurationResponsePtrOutput) ToGroupingConfigurationResponsePtrOutput() GroupingConfigurationResponsePtrOutput {
	return o
}

func (o GroupingConfigurationResponsePtrOutput) ToGroupingConfigurationResponsePtrOutputWithContext(ctx context.Context) GroupingConfigurationResponsePtrOutput {
	return o
}

func (o GroupingConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GroupingConfigurationResponse] {
	return pulumix.Output[*GroupingConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o GroupingConfigurationResponsePtrOutput) Elem() GroupingConfigurationResponseOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) GroupingConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret GroupingConfigurationResponse
		return ret
	}).(GroupingConfigurationResponseOutput)
}

// Grouping enabled
func (o GroupingConfigurationResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A list of alert details to group by (when matchingMethod is Selected)
func (o GroupingConfigurationResponsePtrOutput) GroupByAlertDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByAlertDetails
	}).(pulumi.StringArrayOutput)
}

// A list of custom details keys to group by (when matchingMethod is Selected). Only keys defined in the current alert rule may be used.
func (o GroupingConfigurationResponsePtrOutput) GroupByCustomDetails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByCustomDetails
	}).(pulumi.StringArrayOutput)
}

// A list of entity types to group by (when matchingMethod is Selected). Only entities defined in the current alert rule may be used.
func (o GroupingConfigurationResponsePtrOutput) GroupByEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupByEntities
	}).(pulumi.StringArrayOutput)
}

// Limit the group to alerts created within the lookback duration (in ISO 8601 duration format)
func (o GroupingConfigurationResponsePtrOutput) LookbackDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LookbackDuration
	}).(pulumi.StringPtrOutput)
}

// Grouping matching method. When method is Selected at least one of groupByEntities, groupByAlertDetails, groupByCustomDetails must be provided and not empty.
func (o GroupingConfigurationResponsePtrOutput) MatchingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MatchingMethod
	}).(pulumi.StringPtrOutput)
}

// Re-open closed matching incidents
func (o GroupingConfigurationResponsePtrOutput) ReopenClosedIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupingConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ReopenClosedIncident
	}).(pulumi.BoolPtrOutput)
}

// Describes a user that the hunt is assigned to
type HuntOwner struct {
	// The name of the user the hunt is assigned to.
	AssignedTo *string `pulumi:"assignedTo"`
	// The email of the user the hunt is assigned to.
	Email *string `pulumi:"email"`
	// The object id of the user the hunt is assigned to.
	ObjectId *string `pulumi:"objectId"`
	// The type of the owner the hunt is assigned to.
	OwnerType *string `pulumi:"ownerType"`
	// The user principal name of the user the hunt is assigned to.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// HuntOwnerInput is an input type that accepts HuntOwnerArgs and HuntOwnerOutput values.
// You can construct a concrete instance of `HuntOwnerInput` via:
//
//	HuntOwnerArgs{...}
type HuntOwnerInput interface {
	pulumi.Input

	ToHuntOwnerOutput() HuntOwnerOutput
	ToHuntOwnerOutputWithContext(context.Context) HuntOwnerOutput
}

// Describes a user that the hunt is assigned to
type HuntOwnerArgs struct {
	// The name of the user the hunt is assigned to.
	AssignedTo pulumi.StringPtrInput `pulumi:"assignedTo"`
	// The email of the user the hunt is assigned to.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The object id of the user the hunt is assigned to.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The type of the owner the hunt is assigned to.
	OwnerType pulumi.StringPtrInput `pulumi:"ownerType"`
	// The user principal name of the user the hunt is assigned to.
	UserPrincipalName pulumi.StringPtrInput `pulumi:"userPrincipalName"`
}

func (HuntOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HuntOwner)(nil)).Elem()
}

func (i HuntOwnerArgs) ToHuntOwnerOutput() HuntOwnerOutput {
	return i.ToHuntOwnerOutputWithContext(context.Background())
}

func (i HuntOwnerArgs) ToHuntOwnerOutputWithContext(ctx context.Context) HuntOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HuntOwnerOutput)
}

func (i HuntOwnerArgs) ToOutput(ctx context.Context) pulumix.Output[HuntOwner] {
	return pulumix.Output[HuntOwner]{
		OutputState: i.ToHuntOwnerOutputWithContext(ctx).OutputState,
	}
}

func (i HuntOwnerArgs) ToHuntOwnerPtrOutput() HuntOwnerPtrOutput {
	return i.ToHuntOwnerPtrOutputWithContext(context.Background())
}

func (i HuntOwnerArgs) ToHuntOwnerPtrOutputWithContext(ctx context.Context) HuntOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HuntOwnerOutput).ToHuntOwnerPtrOutputWithContext(ctx)
}

// HuntOwnerPtrInput is an input type that accepts HuntOwnerArgs, HuntOwnerPtr and HuntOwnerPtrOutput values.
// You can construct a concrete instance of `HuntOwnerPtrInput` via:
//
//	        HuntOwnerArgs{...}
//
//	or:
//
//	        nil
type HuntOwnerPtrInput interface {
	pulumi.Input

	ToHuntOwnerPtrOutput() HuntOwnerPtrOutput
	ToHuntOwnerPtrOutputWithContext(context.Context) HuntOwnerPtrOutput
}

type huntOwnerPtrType HuntOwnerArgs

func HuntOwnerPtr(v *HuntOwnerArgs) HuntOwnerPtrInput {
	return (*huntOwnerPtrType)(v)
}

func (*huntOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HuntOwner)(nil)).Elem()
}

func (i *huntOwnerPtrType) ToHuntOwnerPtrOutput() HuntOwnerPtrOutput {
	return i.ToHuntOwnerPtrOutputWithContext(context.Background())
}

func (i *huntOwnerPtrType) ToHuntOwnerPtrOutputWithContext(ctx context.Context) HuntOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HuntOwnerPtrOutput)
}

func (i *huntOwnerPtrType) ToOutput(ctx context.Context) pulumix.Output[*HuntOwner] {
	return pulumix.Output[*HuntOwner]{
		OutputState: i.ToHuntOwnerPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes a user that the hunt is assigned to
type HuntOwnerOutput struct{ *pulumi.OutputState }

func (HuntOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HuntOwner)(nil)).Elem()
}

func (o HuntOwnerOutput) ToHuntOwnerOutput() HuntOwnerOutput {
	return o
}

func (o HuntOwnerOutput) ToHuntOwnerOutputWithContext(ctx context.Context) HuntOwnerOutput {
	return o
}

func (o HuntOwnerOutput) ToHuntOwnerPtrOutput() HuntOwnerPtrOutput {
	return o.ToHuntOwnerPtrOutputWithContext(context.Background())
}

func (o HuntOwnerOutput) ToHuntOwnerPtrOutputWithContext(ctx context.Context) HuntOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HuntOwner) *HuntOwner {
		return &v
	}).(HuntOwnerPtrOutput)
}

func (o HuntOwnerOutput) ToOutput(ctx context.Context) pulumix.Output[HuntOwner] {
	return pulumix.Output[HuntOwner]{
		OutputState: o.OutputState,
	}
}

// The name of the user the hunt is assigned to.
func (o HuntOwnerOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwner) *string { return v.AssignedTo }).(pulumi.StringPtrOutput)
}

// The email of the user the hunt is assigned to.
func (o HuntOwnerOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwner) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The object id of the user the hunt is assigned to.
func (o HuntOwnerOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwner) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The type of the owner the hunt is assigned to.
func (o HuntOwnerOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwner) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

// The user principal name of the user the hunt is assigned to.
func (o HuntOwnerOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwner) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type HuntOwnerPtrOutput struct{ *pulumi.OutputState }

func (HuntOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HuntOwner)(nil)).Elem()
}

func (o HuntOwnerPtrOutput) ToHuntOwnerPtrOutput() HuntOwnerPtrOutput {
	return o
}

func (o HuntOwnerPtrOutput) ToHuntOwnerPtrOutputWithContext(ctx context.Context) HuntOwnerPtrOutput {
	return o
}

func (o HuntOwnerPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HuntOwner] {
	return pulumix.Output[*HuntOwner]{
		OutputState: o.OutputState,
	}
}

func (o HuntOwnerPtrOutput) Elem() HuntOwnerOutput {
	return o.ApplyT(func(v *HuntOwner) HuntOwner {
		if v != nil {
			return *v
		}
		var ret HuntOwner
		return ret
	}).(HuntOwnerOutput)
}

// The name of the user the hunt is assigned to.
func (o HuntOwnerPtrOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwner) *string {
		if v == nil {
			return nil
		}
		return v.AssignedTo
	}).(pulumi.StringPtrOutput)
}

// The email of the user the hunt is assigned to.
func (o HuntOwnerPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwner) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The object id of the user the hunt is assigned to.
func (o HuntOwnerPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwner) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The type of the owner the hunt is assigned to.
func (o HuntOwnerPtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwner) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the user the hunt is assigned to.
func (o HuntOwnerPtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwner) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Describes a user that the hunt is assigned to
type HuntOwnerResponse struct {
	// The name of the user the hunt is assigned to.
	AssignedTo *string `pulumi:"assignedTo"`
	// The email of the user the hunt is assigned to.
	Email *string `pulumi:"email"`
	// The object id of the user the hunt is assigned to.
	ObjectId *string `pulumi:"objectId"`
	// The type of the owner the hunt is assigned to.
	OwnerType *string `pulumi:"ownerType"`
	// The user principal name of the user the hunt is assigned to.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// Describes a user that the hunt is assigned to
type HuntOwnerResponseOutput struct{ *pulumi.OutputState }

func (HuntOwnerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HuntOwnerResponse)(nil)).Elem()
}

func (o HuntOwnerResponseOutput) ToHuntOwnerResponseOutput() HuntOwnerResponseOutput {
	return o
}

func (o HuntOwnerResponseOutput) ToHuntOwnerResponseOutputWithContext(ctx context.Context) HuntOwnerResponseOutput {
	return o
}

func (o HuntOwnerResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HuntOwnerResponse] {
	return pulumix.Output[HuntOwnerResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the user the hunt is assigned to.
func (o HuntOwnerResponseOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwnerResponse) *string { return v.AssignedTo }).(pulumi.StringPtrOutput)
}

// The email of the user the hunt is assigned to.
func (o HuntOwnerResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwnerResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The object id of the user the hunt is assigned to.
func (o HuntOwnerResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwnerResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The type of the owner the hunt is assigned to.
func (o HuntOwnerResponseOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwnerResponse) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

// The user principal name of the user the hunt is assigned to.
func (o HuntOwnerResponseOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HuntOwnerResponse) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type HuntOwnerResponsePtrOutput struct{ *pulumi.OutputState }

func (HuntOwnerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HuntOwnerResponse)(nil)).Elem()
}

func (o HuntOwnerResponsePtrOutput) ToHuntOwnerResponsePtrOutput() HuntOwnerResponsePtrOutput {
	return o
}

func (o HuntOwnerResponsePtrOutput) ToHuntOwnerResponsePtrOutputWithContext(ctx context.Context) HuntOwnerResponsePtrOutput {
	return o
}

func (o HuntOwnerResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HuntOwnerResponse] {
	return pulumix.Output[*HuntOwnerResponse]{
		OutputState: o.OutputState,
	}
}

func (o HuntOwnerResponsePtrOutput) Elem() HuntOwnerResponseOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) HuntOwnerResponse {
		if v != nil {
			return *v
		}
		var ret HuntOwnerResponse
		return ret
	}).(HuntOwnerResponseOutput)
}

// The name of the user the hunt is assigned to.
func (o HuntOwnerResponsePtrOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssignedTo
	}).(pulumi.StringPtrOutput)
}

// The email of the user the hunt is assigned to.
func (o HuntOwnerResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The object id of the user the hunt is assigned to.
func (o HuntOwnerResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The type of the owner the hunt is assigned to.
func (o HuntOwnerResponsePtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the user the hunt is assigned to.
func (o HuntOwnerResponsePtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HuntOwnerResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Incident additional data property bag.
type IncidentAdditionalDataResponse struct {
	// List of product names of alerts in the incident
	AlertProductNames []string `pulumi:"alertProductNames"`
	// The number of alerts in the incident
	AlertsCount int `pulumi:"alertsCount"`
	// The number of bookmarks in the incident
	BookmarksCount int `pulumi:"bookmarksCount"`
	// The number of comments in the incident
	CommentsCount int `pulumi:"commentsCount"`
	// The provider incident url to the incident in Microsoft 365 Defender portal
	ProviderIncidentUrl string `pulumi:"providerIncidentUrl"`
	// The tactics associated with incident
	Tactics []string `pulumi:"tactics"`
	// The techniques associated with incident's tactics
	Techniques []string `pulumi:"techniques"`
}

// Incident additional data property bag.
type IncidentAdditionalDataResponseOutput struct{ *pulumi.OutputState }

func (IncidentAdditionalDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentAdditionalDataResponse)(nil)).Elem()
}

func (o IncidentAdditionalDataResponseOutput) ToIncidentAdditionalDataResponseOutput() IncidentAdditionalDataResponseOutput {
	return o
}

func (o IncidentAdditionalDataResponseOutput) ToIncidentAdditionalDataResponseOutputWithContext(ctx context.Context) IncidentAdditionalDataResponseOutput {
	return o
}

func (o IncidentAdditionalDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentAdditionalDataResponse] {
	return pulumix.Output[IncidentAdditionalDataResponse]{
		OutputState: o.OutputState,
	}
}

// List of product names of alerts in the incident
func (o IncidentAdditionalDataResponseOutput) AlertProductNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) []string { return v.AlertProductNames }).(pulumi.StringArrayOutput)
}

// The number of alerts in the incident
func (o IncidentAdditionalDataResponseOutput) AlertsCount() pulumi.IntOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) int { return v.AlertsCount }).(pulumi.IntOutput)
}

// The number of bookmarks in the incident
func (o IncidentAdditionalDataResponseOutput) BookmarksCount() pulumi.IntOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) int { return v.BookmarksCount }).(pulumi.IntOutput)
}

// The number of comments in the incident
func (o IncidentAdditionalDataResponseOutput) CommentsCount() pulumi.IntOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) int { return v.CommentsCount }).(pulumi.IntOutput)
}

// The provider incident url to the incident in Microsoft 365 Defender portal
func (o IncidentAdditionalDataResponseOutput) ProviderIncidentUrl() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) string { return v.ProviderIncidentUrl }).(pulumi.StringOutput)
}

// The tactics associated with incident
func (o IncidentAdditionalDataResponseOutput) Tactics() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) []string { return v.Tactics }).(pulumi.StringArrayOutput)
}

// The techniques associated with incident's tactics
func (o IncidentAdditionalDataResponseOutput) Techniques() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IncidentAdditionalDataResponse) []string { return v.Techniques }).(pulumi.StringArrayOutput)
}

// Incident Configuration property bag.
type IncidentConfiguration struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident bool `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration *GroupingConfiguration `pulumi:"groupingConfiguration"`
}

// IncidentConfigurationInput is an input type that accepts IncidentConfigurationArgs and IncidentConfigurationOutput values.
// You can construct a concrete instance of `IncidentConfigurationInput` via:
//
//	IncidentConfigurationArgs{...}
type IncidentConfigurationInput interface {
	pulumi.Input

	ToIncidentConfigurationOutput() IncidentConfigurationOutput
	ToIncidentConfigurationOutputWithContext(context.Context) IncidentConfigurationOutput
}

// Incident Configuration property bag.
type IncidentConfigurationArgs struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident pulumi.BoolInput `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration GroupingConfigurationPtrInput `pulumi:"groupingConfiguration"`
}

func (IncidentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfiguration)(nil)).Elem()
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationOutput() IncidentConfigurationOutput {
	return i.ToIncidentConfigurationOutputWithContext(context.Background())
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationOutputWithContext(ctx context.Context) IncidentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationOutput)
}

func (i IncidentConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[IncidentConfiguration] {
	return pulumix.Output[IncidentConfiguration]{
		OutputState: i.ToIncidentConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return i.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (i IncidentConfigurationArgs) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationOutput).ToIncidentConfigurationPtrOutputWithContext(ctx)
}

// IncidentConfigurationPtrInput is an input type that accepts IncidentConfigurationArgs, IncidentConfigurationPtr and IncidentConfigurationPtrOutput values.
// You can construct a concrete instance of `IncidentConfigurationPtrInput` via:
//
//	        IncidentConfigurationArgs{...}
//
//	or:
//
//	        nil
type IncidentConfigurationPtrInput interface {
	pulumi.Input

	ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput
	ToIncidentConfigurationPtrOutputWithContext(context.Context) IncidentConfigurationPtrOutput
}

type incidentConfigurationPtrType IncidentConfigurationArgs

func IncidentConfigurationPtr(v *IncidentConfigurationArgs) IncidentConfigurationPtrInput {
	return (*incidentConfigurationPtrType)(v)
}

func (*incidentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfiguration)(nil)).Elem()
}

func (i *incidentConfigurationPtrType) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return i.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (i *incidentConfigurationPtrType) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentConfigurationPtrOutput)
}

func (i *incidentConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfiguration] {
	return pulumix.Output[*IncidentConfiguration]{
		OutputState: i.ToIncidentConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Incident Configuration property bag.
type IncidentConfigurationOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfiguration)(nil)).Elem()
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationOutput() IncidentConfigurationOutput {
	return o
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationOutputWithContext(ctx context.Context) IncidentConfigurationOutput {
	return o
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return o.ToIncidentConfigurationPtrOutputWithContext(context.Background())
}

func (o IncidentConfigurationOutput) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IncidentConfiguration) *IncidentConfiguration {
		return &v
	}).(IncidentConfigurationPtrOutput)
}

func (o IncidentConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentConfiguration] {
	return pulumix.Output[IncidentConfiguration]{
		OutputState: o.OutputState,
	}
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationOutput) CreateIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v IncidentConfiguration) bool { return v.CreateIncident }).(pulumi.BoolOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationOutput) GroupingConfiguration() GroupingConfigurationPtrOutput {
	return o.ApplyT(func(v IncidentConfiguration) *GroupingConfiguration { return v.GroupingConfiguration }).(GroupingConfigurationPtrOutput)
}

type IncidentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfiguration)(nil)).Elem()
}

func (o IncidentConfigurationPtrOutput) ToIncidentConfigurationPtrOutput() IncidentConfigurationPtrOutput {
	return o
}

func (o IncidentConfigurationPtrOutput) ToIncidentConfigurationPtrOutputWithContext(ctx context.Context) IncidentConfigurationPtrOutput {
	return o
}

func (o IncidentConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfiguration] {
	return pulumix.Output[*IncidentConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o IncidentConfigurationPtrOutput) Elem() IncidentConfigurationOutput {
	return o.ApplyT(func(v *IncidentConfiguration) IncidentConfiguration {
		if v != nil {
			return *v
		}
		var ret IncidentConfiguration
		return ret
	}).(IncidentConfigurationOutput)
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationPtrOutput) CreateIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IncidentConfiguration) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateIncident
	}).(pulumi.BoolPtrOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationPtrOutput) GroupingConfiguration() GroupingConfigurationPtrOutput {
	return o.ApplyT(func(v *IncidentConfiguration) *GroupingConfiguration {
		if v == nil {
			return nil
		}
		return v.GroupingConfiguration
	}).(GroupingConfigurationPtrOutput)
}

// Incident Configuration property bag.
type IncidentConfigurationResponse struct {
	// Create incidents from alerts triggered by this analytics rule
	CreateIncident bool `pulumi:"createIncident"`
	// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
	GroupingConfiguration *GroupingConfigurationResponse `pulumi:"groupingConfiguration"`
}

// Incident Configuration property bag.
type IncidentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentConfigurationResponse)(nil)).Elem()
}

func (o IncidentConfigurationResponseOutput) ToIncidentConfigurationResponseOutput() IncidentConfigurationResponseOutput {
	return o
}

func (o IncidentConfigurationResponseOutput) ToIncidentConfigurationResponseOutputWithContext(ctx context.Context) IncidentConfigurationResponseOutput {
	return o
}

func (o IncidentConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentConfigurationResponse] {
	return pulumix.Output[IncidentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationResponseOutput) CreateIncident() pulumi.BoolOutput {
	return o.ApplyT(func(v IncidentConfigurationResponse) bool { return v.CreateIncident }).(pulumi.BoolOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationResponseOutput) GroupingConfiguration() GroupingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v IncidentConfigurationResponse) *GroupingConfigurationResponse { return v.GroupingConfiguration }).(GroupingConfigurationResponsePtrOutput)
}

type IncidentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (IncidentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentConfigurationResponse)(nil)).Elem()
}

func (o IncidentConfigurationResponsePtrOutput) ToIncidentConfigurationResponsePtrOutput() IncidentConfigurationResponsePtrOutput {
	return o
}

func (o IncidentConfigurationResponsePtrOutput) ToIncidentConfigurationResponsePtrOutputWithContext(ctx context.Context) IncidentConfigurationResponsePtrOutput {
	return o
}

func (o IncidentConfigurationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentConfigurationResponse] {
	return pulumix.Output[*IncidentConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

func (o IncidentConfigurationResponsePtrOutput) Elem() IncidentConfigurationResponseOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) IncidentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret IncidentConfigurationResponse
		return ret
	}).(IncidentConfigurationResponseOutput)
}

// Create incidents from alerts triggered by this analytics rule
func (o IncidentConfigurationResponsePtrOutput) CreateIncident() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CreateIncident
	}).(pulumi.BoolPtrOutput)
}

// Set how the alerts that are triggered by this analytics rule, are grouped into incidents
func (o IncidentConfigurationResponsePtrOutput) GroupingConfiguration() GroupingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *IncidentConfigurationResponse) *GroupingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.GroupingConfiguration
	}).(GroupingConfigurationResponsePtrOutput)
}

// Describes related incident information for the bookmark
type IncidentInfo struct {
	// Incident Id
	IncidentId *string `pulumi:"incidentId"`
	// Relation Name
	RelationName *string `pulumi:"relationName"`
	// The severity of the incident
	Severity *string `pulumi:"severity"`
	// The title of the incident
	Title *string `pulumi:"title"`
}

// IncidentInfoInput is an input type that accepts IncidentInfoArgs and IncidentInfoOutput values.
// You can construct a concrete instance of `IncidentInfoInput` via:
//
//	IncidentInfoArgs{...}
type IncidentInfoInput interface {
	pulumi.Input

	ToIncidentInfoOutput() IncidentInfoOutput
	ToIncidentInfoOutputWithContext(context.Context) IncidentInfoOutput
}

// Describes related incident information for the bookmark
type IncidentInfoArgs struct {
	// Incident Id
	IncidentId pulumi.StringPtrInput `pulumi:"incidentId"`
	// Relation Name
	RelationName pulumi.StringPtrInput `pulumi:"relationName"`
	// The severity of the incident
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The title of the incident
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (IncidentInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentInfo)(nil)).Elem()
}

func (i IncidentInfoArgs) ToIncidentInfoOutput() IncidentInfoOutput {
	return i.ToIncidentInfoOutputWithContext(context.Background())
}

func (i IncidentInfoArgs) ToIncidentInfoOutputWithContext(ctx context.Context) IncidentInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentInfoOutput)
}

func (i IncidentInfoArgs) ToOutput(ctx context.Context) pulumix.Output[IncidentInfo] {
	return pulumix.Output[IncidentInfo]{
		OutputState: i.ToIncidentInfoOutputWithContext(ctx).OutputState,
	}
}

func (i IncidentInfoArgs) ToIncidentInfoPtrOutput() IncidentInfoPtrOutput {
	return i.ToIncidentInfoPtrOutputWithContext(context.Background())
}

func (i IncidentInfoArgs) ToIncidentInfoPtrOutputWithContext(ctx context.Context) IncidentInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentInfoOutput).ToIncidentInfoPtrOutputWithContext(ctx)
}

// IncidentInfoPtrInput is an input type that accepts IncidentInfoArgs, IncidentInfoPtr and IncidentInfoPtrOutput values.
// You can construct a concrete instance of `IncidentInfoPtrInput` via:
//
//	        IncidentInfoArgs{...}
//
//	or:
//
//	        nil
type IncidentInfoPtrInput interface {
	pulumi.Input

	ToIncidentInfoPtrOutput() IncidentInfoPtrOutput
	ToIncidentInfoPtrOutputWithContext(context.Context) IncidentInfoPtrOutput
}

type incidentInfoPtrType IncidentInfoArgs

func IncidentInfoPtr(v *IncidentInfoArgs) IncidentInfoPtrInput {
	return (*incidentInfoPtrType)(v)
}

func (*incidentInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentInfo)(nil)).Elem()
}

func (i *incidentInfoPtrType) ToIncidentInfoPtrOutput() IncidentInfoPtrOutput {
	return i.ToIncidentInfoPtrOutputWithContext(context.Background())
}

func (i *incidentInfoPtrType) ToIncidentInfoPtrOutputWithContext(ctx context.Context) IncidentInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentInfoPtrOutput)
}

func (i *incidentInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*IncidentInfo] {
	return pulumix.Output[*IncidentInfo]{
		OutputState: i.ToIncidentInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// Describes related incident information for the bookmark
type IncidentInfoOutput struct{ *pulumi.OutputState }

func (IncidentInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentInfo)(nil)).Elem()
}

func (o IncidentInfoOutput) ToIncidentInfoOutput() IncidentInfoOutput {
	return o
}

func (o IncidentInfoOutput) ToIncidentInfoOutputWithContext(ctx context.Context) IncidentInfoOutput {
	return o
}

func (o IncidentInfoOutput) ToIncidentInfoPtrOutput() IncidentInfoPtrOutput {
	return o.ToIncidentInfoPtrOutputWithContext(context.Background())
}

func (o IncidentInfoOutput) ToIncidentInfoPtrOutputWithContext(ctx context.Context) IncidentInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IncidentInfo) *IncidentInfo {
		return &v
	}).(IncidentInfoPtrOutput)
}

func (o IncidentInfoOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentInfo] {
	return pulumix.Output[IncidentInfo]{
		OutputState: o.OutputState,
	}
}

// Incident Id
func (o IncidentInfoOutput) IncidentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfo) *string { return v.IncidentId }).(pulumi.StringPtrOutput)
}

// Relation Name
func (o IncidentInfoOutput) RelationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfo) *string { return v.RelationName }).(pulumi.StringPtrOutput)
}

// The severity of the incident
func (o IncidentInfoOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfo) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The title of the incident
func (o IncidentInfoOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfo) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type IncidentInfoPtrOutput struct{ *pulumi.OutputState }

func (IncidentInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentInfo)(nil)).Elem()
}

func (o IncidentInfoPtrOutput) ToIncidentInfoPtrOutput() IncidentInfoPtrOutput {
	return o
}

func (o IncidentInfoPtrOutput) ToIncidentInfoPtrOutputWithContext(ctx context.Context) IncidentInfoPtrOutput {
	return o
}

func (o IncidentInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentInfo] {
	return pulumix.Output[*IncidentInfo]{
		OutputState: o.OutputState,
	}
}

func (o IncidentInfoPtrOutput) Elem() IncidentInfoOutput {
	return o.ApplyT(func(v *IncidentInfo) IncidentInfo {
		if v != nil {
			return *v
		}
		var ret IncidentInfo
		return ret
	}).(IncidentInfoOutput)
}

// Incident Id
func (o IncidentInfoPtrOutput) IncidentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfo) *string {
		if v == nil {
			return nil
		}
		return v.IncidentId
	}).(pulumi.StringPtrOutput)
}

// Relation Name
func (o IncidentInfoPtrOutput) RelationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfo) *string {
		if v == nil {
			return nil
		}
		return v.RelationName
	}).(pulumi.StringPtrOutput)
}

// The severity of the incident
func (o IncidentInfoPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfo) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// The title of the incident
func (o IncidentInfoPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfo) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Describes related incident information for the bookmark
type IncidentInfoResponse struct {
	// Incident Id
	IncidentId *string `pulumi:"incidentId"`
	// Relation Name
	RelationName *string `pulumi:"relationName"`
	// The severity of the incident
	Severity *string `pulumi:"severity"`
	// The title of the incident
	Title *string `pulumi:"title"`
}

// Describes related incident information for the bookmark
type IncidentInfoResponseOutput struct{ *pulumi.OutputState }

func (IncidentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentInfoResponse)(nil)).Elem()
}

func (o IncidentInfoResponseOutput) ToIncidentInfoResponseOutput() IncidentInfoResponseOutput {
	return o
}

func (o IncidentInfoResponseOutput) ToIncidentInfoResponseOutputWithContext(ctx context.Context) IncidentInfoResponseOutput {
	return o
}

func (o IncidentInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentInfoResponse] {
	return pulumix.Output[IncidentInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Incident Id
func (o IncidentInfoResponseOutput) IncidentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfoResponse) *string { return v.IncidentId }).(pulumi.StringPtrOutput)
}

// Relation Name
func (o IncidentInfoResponseOutput) RelationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfoResponse) *string { return v.RelationName }).(pulumi.StringPtrOutput)
}

// The severity of the incident
func (o IncidentInfoResponseOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfoResponse) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The title of the incident
func (o IncidentInfoResponseOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentInfoResponse) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type IncidentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IncidentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentInfoResponse)(nil)).Elem()
}

func (o IncidentInfoResponsePtrOutput) ToIncidentInfoResponsePtrOutput() IncidentInfoResponsePtrOutput {
	return o
}

func (o IncidentInfoResponsePtrOutput) ToIncidentInfoResponsePtrOutputWithContext(ctx context.Context) IncidentInfoResponsePtrOutput {
	return o
}

func (o IncidentInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentInfoResponse] {
	return pulumix.Output[*IncidentInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o IncidentInfoResponsePtrOutput) Elem() IncidentInfoResponseOutput {
	return o.ApplyT(func(v *IncidentInfoResponse) IncidentInfoResponse {
		if v != nil {
			return *v
		}
		var ret IncidentInfoResponse
		return ret
	}).(IncidentInfoResponseOutput)
}

// Incident Id
func (o IncidentInfoResponsePtrOutput) IncidentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.IncidentId
	}).(pulumi.StringPtrOutput)
}

// Relation Name
func (o IncidentInfoResponsePtrOutput) RelationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelationName
	}).(pulumi.StringPtrOutput)
}

// The severity of the incident
func (o IncidentInfoResponsePtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Severity
	}).(pulumi.StringPtrOutput)
}

// The title of the incident
func (o IncidentInfoResponsePtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents an incident label
type IncidentLabel struct {
	// The name of the label
	LabelName string `pulumi:"labelName"`
}

// IncidentLabelInput is an input type that accepts IncidentLabelArgs and IncidentLabelOutput values.
// You can construct a concrete instance of `IncidentLabelInput` via:
//
//	IncidentLabelArgs{...}
type IncidentLabelInput interface {
	pulumi.Input

	ToIncidentLabelOutput() IncidentLabelOutput
	ToIncidentLabelOutputWithContext(context.Context) IncidentLabelOutput
}

// Represents an incident label
type IncidentLabelArgs struct {
	// The name of the label
	LabelName pulumi.StringInput `pulumi:"labelName"`
}

func (IncidentLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentLabel)(nil)).Elem()
}

func (i IncidentLabelArgs) ToIncidentLabelOutput() IncidentLabelOutput {
	return i.ToIncidentLabelOutputWithContext(context.Background())
}

func (i IncidentLabelArgs) ToIncidentLabelOutputWithContext(ctx context.Context) IncidentLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentLabelOutput)
}

func (i IncidentLabelArgs) ToOutput(ctx context.Context) pulumix.Output[IncidentLabel] {
	return pulumix.Output[IncidentLabel]{
		OutputState: i.ToIncidentLabelOutputWithContext(ctx).OutputState,
	}
}

// IncidentLabelArrayInput is an input type that accepts IncidentLabelArray and IncidentLabelArrayOutput values.
// You can construct a concrete instance of `IncidentLabelArrayInput` via:
//
//	IncidentLabelArray{ IncidentLabelArgs{...} }
type IncidentLabelArrayInput interface {
	pulumi.Input

	ToIncidentLabelArrayOutput() IncidentLabelArrayOutput
	ToIncidentLabelArrayOutputWithContext(context.Context) IncidentLabelArrayOutput
}

type IncidentLabelArray []IncidentLabelInput

func (IncidentLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentLabel)(nil)).Elem()
}

func (i IncidentLabelArray) ToIncidentLabelArrayOutput() IncidentLabelArrayOutput {
	return i.ToIncidentLabelArrayOutputWithContext(context.Background())
}

func (i IncidentLabelArray) ToIncidentLabelArrayOutputWithContext(ctx context.Context) IncidentLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentLabelArrayOutput)
}

func (i IncidentLabelArray) ToOutput(ctx context.Context) pulumix.Output[[]IncidentLabel] {
	return pulumix.Output[[]IncidentLabel]{
		OutputState: i.ToIncidentLabelArrayOutputWithContext(ctx).OutputState,
	}
}

// Represents an incident label
type IncidentLabelOutput struct{ *pulumi.OutputState }

func (IncidentLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentLabel)(nil)).Elem()
}

func (o IncidentLabelOutput) ToIncidentLabelOutput() IncidentLabelOutput {
	return o
}

func (o IncidentLabelOutput) ToIncidentLabelOutputWithContext(ctx context.Context) IncidentLabelOutput {
	return o
}

func (o IncidentLabelOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentLabel] {
	return pulumix.Output[IncidentLabel]{
		OutputState: o.OutputState,
	}
}

// The name of the label
func (o IncidentLabelOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentLabel) string { return v.LabelName }).(pulumi.StringOutput)
}

type IncidentLabelArrayOutput struct{ *pulumi.OutputState }

func (IncidentLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentLabel)(nil)).Elem()
}

func (o IncidentLabelArrayOutput) ToIncidentLabelArrayOutput() IncidentLabelArrayOutput {
	return o
}

func (o IncidentLabelArrayOutput) ToIncidentLabelArrayOutputWithContext(ctx context.Context) IncidentLabelArrayOutput {
	return o
}

func (o IncidentLabelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IncidentLabel] {
	return pulumix.Output[[]IncidentLabel]{
		OutputState: o.OutputState,
	}
}

func (o IncidentLabelArrayOutput) Index(i pulumi.IntInput) IncidentLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentLabel {
		return vs[0].([]IncidentLabel)[vs[1].(int)]
	}).(IncidentLabelOutput)
}

// Represents an incident label
type IncidentLabelResponse struct {
	// The name of the label
	LabelName string `pulumi:"labelName"`
	// The type of the label
	LabelType string `pulumi:"labelType"`
}

// Represents an incident label
type IncidentLabelResponseOutput struct{ *pulumi.OutputState }

func (IncidentLabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentLabelResponse)(nil)).Elem()
}

func (o IncidentLabelResponseOutput) ToIncidentLabelResponseOutput() IncidentLabelResponseOutput {
	return o
}

func (o IncidentLabelResponseOutput) ToIncidentLabelResponseOutputWithContext(ctx context.Context) IncidentLabelResponseOutput {
	return o
}

func (o IncidentLabelResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentLabelResponse] {
	return pulumix.Output[IncidentLabelResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the label
func (o IncidentLabelResponseOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentLabelResponse) string { return v.LabelName }).(pulumi.StringOutput)
}

// The type of the label
func (o IncidentLabelResponseOutput) LabelType() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentLabelResponse) string { return v.LabelType }).(pulumi.StringOutput)
}

type IncidentLabelResponseArrayOutput struct{ *pulumi.OutputState }

func (IncidentLabelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentLabelResponse)(nil)).Elem()
}

func (o IncidentLabelResponseArrayOutput) ToIncidentLabelResponseArrayOutput() IncidentLabelResponseArrayOutput {
	return o
}

func (o IncidentLabelResponseArrayOutput) ToIncidentLabelResponseArrayOutputWithContext(ctx context.Context) IncidentLabelResponseArrayOutput {
	return o
}

func (o IncidentLabelResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IncidentLabelResponse] {
	return pulumix.Output[[]IncidentLabelResponse]{
		OutputState: o.OutputState,
	}
}

func (o IncidentLabelResponseArrayOutput) Index(i pulumi.IntInput) IncidentLabelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentLabelResponse {
		return vs[0].([]IncidentLabelResponse)[vs[1].(int)]
	}).(IncidentLabelResponseOutput)
}

// Information on the user an incident is assigned to
type IncidentOwnerInfo struct {
	// The name of the user the incident is assigned to.
	AssignedTo *string `pulumi:"assignedTo"`
	// The email of the user the incident is assigned to.
	Email *string `pulumi:"email"`
	// The object id of the user the incident is assigned to.
	ObjectId *string `pulumi:"objectId"`
	// The type of the owner the incident is assigned to.
	OwnerType *string `pulumi:"ownerType"`
	// The user principal name of the user the incident is assigned to.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// IncidentOwnerInfoInput is an input type that accepts IncidentOwnerInfoArgs and IncidentOwnerInfoOutput values.
// You can construct a concrete instance of `IncidentOwnerInfoInput` via:
//
//	IncidentOwnerInfoArgs{...}
type IncidentOwnerInfoInput interface {
	pulumi.Input

	ToIncidentOwnerInfoOutput() IncidentOwnerInfoOutput
	ToIncidentOwnerInfoOutputWithContext(context.Context) IncidentOwnerInfoOutput
}

// Information on the user an incident is assigned to
type IncidentOwnerInfoArgs struct {
	// The name of the user the incident is assigned to.
	AssignedTo pulumi.StringPtrInput `pulumi:"assignedTo"`
	// The email of the user the incident is assigned to.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// The object id of the user the incident is assigned to.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The type of the owner the incident is assigned to.
	OwnerType pulumi.StringPtrInput `pulumi:"ownerType"`
	// The user principal name of the user the incident is assigned to.
	UserPrincipalName pulumi.StringPtrInput `pulumi:"userPrincipalName"`
}

func (IncidentOwnerInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentOwnerInfo)(nil)).Elem()
}

func (i IncidentOwnerInfoArgs) ToIncidentOwnerInfoOutput() IncidentOwnerInfoOutput {
	return i.ToIncidentOwnerInfoOutputWithContext(context.Background())
}

func (i IncidentOwnerInfoArgs) ToIncidentOwnerInfoOutputWithContext(ctx context.Context) IncidentOwnerInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentOwnerInfoOutput)
}

func (i IncidentOwnerInfoArgs) ToOutput(ctx context.Context) pulumix.Output[IncidentOwnerInfo] {
	return pulumix.Output[IncidentOwnerInfo]{
		OutputState: i.ToIncidentOwnerInfoOutputWithContext(ctx).OutputState,
	}
}

func (i IncidentOwnerInfoArgs) ToIncidentOwnerInfoPtrOutput() IncidentOwnerInfoPtrOutput {
	return i.ToIncidentOwnerInfoPtrOutputWithContext(context.Background())
}

func (i IncidentOwnerInfoArgs) ToIncidentOwnerInfoPtrOutputWithContext(ctx context.Context) IncidentOwnerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentOwnerInfoOutput).ToIncidentOwnerInfoPtrOutputWithContext(ctx)
}

// IncidentOwnerInfoPtrInput is an input type that accepts IncidentOwnerInfoArgs, IncidentOwnerInfoPtr and IncidentOwnerInfoPtrOutput values.
// You can construct a concrete instance of `IncidentOwnerInfoPtrInput` via:
//
//	        IncidentOwnerInfoArgs{...}
//
//	or:
//
//	        nil
type IncidentOwnerInfoPtrInput interface {
	pulumi.Input

	ToIncidentOwnerInfoPtrOutput() IncidentOwnerInfoPtrOutput
	ToIncidentOwnerInfoPtrOutputWithContext(context.Context) IncidentOwnerInfoPtrOutput
}

type incidentOwnerInfoPtrType IncidentOwnerInfoArgs

func IncidentOwnerInfoPtr(v *IncidentOwnerInfoArgs) IncidentOwnerInfoPtrInput {
	return (*incidentOwnerInfoPtrType)(v)
}

func (*incidentOwnerInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentOwnerInfo)(nil)).Elem()
}

func (i *incidentOwnerInfoPtrType) ToIncidentOwnerInfoPtrOutput() IncidentOwnerInfoPtrOutput {
	return i.ToIncidentOwnerInfoPtrOutputWithContext(context.Background())
}

func (i *incidentOwnerInfoPtrType) ToIncidentOwnerInfoPtrOutputWithContext(ctx context.Context) IncidentOwnerInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentOwnerInfoPtrOutput)
}

func (i *incidentOwnerInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*IncidentOwnerInfo] {
	return pulumix.Output[*IncidentOwnerInfo]{
		OutputState: i.ToIncidentOwnerInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// Information on the user an incident is assigned to
type IncidentOwnerInfoOutput struct{ *pulumi.OutputState }

func (IncidentOwnerInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentOwnerInfo)(nil)).Elem()
}

func (o IncidentOwnerInfoOutput) ToIncidentOwnerInfoOutput() IncidentOwnerInfoOutput {
	return o
}

func (o IncidentOwnerInfoOutput) ToIncidentOwnerInfoOutputWithContext(ctx context.Context) IncidentOwnerInfoOutput {
	return o
}

func (o IncidentOwnerInfoOutput) ToIncidentOwnerInfoPtrOutput() IncidentOwnerInfoPtrOutput {
	return o.ToIncidentOwnerInfoPtrOutputWithContext(context.Background())
}

func (o IncidentOwnerInfoOutput) ToIncidentOwnerInfoPtrOutputWithContext(ctx context.Context) IncidentOwnerInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IncidentOwnerInfo) *IncidentOwnerInfo {
		return &v
	}).(IncidentOwnerInfoPtrOutput)
}

func (o IncidentOwnerInfoOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentOwnerInfo] {
	return pulumix.Output[IncidentOwnerInfo]{
		OutputState: o.OutputState,
	}
}

// The name of the user the incident is assigned to.
func (o IncidentOwnerInfoOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfo) *string { return v.AssignedTo }).(pulumi.StringPtrOutput)
}

// The email of the user the incident is assigned to.
func (o IncidentOwnerInfoOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfo) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The object id of the user the incident is assigned to.
func (o IncidentOwnerInfoOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfo) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The type of the owner the incident is assigned to.
func (o IncidentOwnerInfoOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfo) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

// The user principal name of the user the incident is assigned to.
func (o IncidentOwnerInfoOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfo) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type IncidentOwnerInfoPtrOutput struct{ *pulumi.OutputState }

func (IncidentOwnerInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentOwnerInfo)(nil)).Elem()
}

func (o IncidentOwnerInfoPtrOutput) ToIncidentOwnerInfoPtrOutput() IncidentOwnerInfoPtrOutput {
	return o
}

func (o IncidentOwnerInfoPtrOutput) ToIncidentOwnerInfoPtrOutputWithContext(ctx context.Context) IncidentOwnerInfoPtrOutput {
	return o
}

func (o IncidentOwnerInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentOwnerInfo] {
	return pulumix.Output[*IncidentOwnerInfo]{
		OutputState: o.OutputState,
	}
}

func (o IncidentOwnerInfoPtrOutput) Elem() IncidentOwnerInfoOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) IncidentOwnerInfo {
		if v != nil {
			return *v
		}
		var ret IncidentOwnerInfo
		return ret
	}).(IncidentOwnerInfoOutput)
}

// The name of the user the incident is assigned to.
func (o IncidentOwnerInfoPtrOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) *string {
		if v == nil {
			return nil
		}
		return v.AssignedTo
	}).(pulumi.StringPtrOutput)
}

// The email of the user the incident is assigned to.
func (o IncidentOwnerInfoPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The object id of the user the incident is assigned to.
func (o IncidentOwnerInfoPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The type of the owner the incident is assigned to.
func (o IncidentOwnerInfoPtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the user the incident is assigned to.
func (o IncidentOwnerInfoPtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfo) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

// Information on the user an incident is assigned to
type IncidentOwnerInfoResponse struct {
	// The name of the user the incident is assigned to.
	AssignedTo *string `pulumi:"assignedTo"`
	// The email of the user the incident is assigned to.
	Email *string `pulumi:"email"`
	// The object id of the user the incident is assigned to.
	ObjectId *string `pulumi:"objectId"`
	// The type of the owner the incident is assigned to.
	OwnerType *string `pulumi:"ownerType"`
	// The user principal name of the user the incident is assigned to.
	UserPrincipalName *string `pulumi:"userPrincipalName"`
}

// Information on the user an incident is assigned to
type IncidentOwnerInfoResponseOutput struct{ *pulumi.OutputState }

func (IncidentOwnerInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentOwnerInfoResponse)(nil)).Elem()
}

func (o IncidentOwnerInfoResponseOutput) ToIncidentOwnerInfoResponseOutput() IncidentOwnerInfoResponseOutput {
	return o
}

func (o IncidentOwnerInfoResponseOutput) ToIncidentOwnerInfoResponseOutputWithContext(ctx context.Context) IncidentOwnerInfoResponseOutput {
	return o
}

func (o IncidentOwnerInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IncidentOwnerInfoResponse] {
	return pulumix.Output[IncidentOwnerInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the user the incident is assigned to.
func (o IncidentOwnerInfoResponseOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfoResponse) *string { return v.AssignedTo }).(pulumi.StringPtrOutput)
}

// The email of the user the incident is assigned to.
func (o IncidentOwnerInfoResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfoResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The object id of the user the incident is assigned to.
func (o IncidentOwnerInfoResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfoResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The type of the owner the incident is assigned to.
func (o IncidentOwnerInfoResponseOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfoResponse) *string { return v.OwnerType }).(pulumi.StringPtrOutput)
}

// The user principal name of the user the incident is assigned to.
func (o IncidentOwnerInfoResponseOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentOwnerInfoResponse) *string { return v.UserPrincipalName }).(pulumi.StringPtrOutput)
}

type IncidentOwnerInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (IncidentOwnerInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentOwnerInfoResponse)(nil)).Elem()
}

func (o IncidentOwnerInfoResponsePtrOutput) ToIncidentOwnerInfoResponsePtrOutput() IncidentOwnerInfoResponsePtrOutput {
	return o
}

func (o IncidentOwnerInfoResponsePtrOutput) ToIncidentOwnerInfoResponsePtrOutputWithContext(ctx context.Context) IncidentOwnerInfoResponsePtrOutput {
	return o
}

func (o IncidentOwnerInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IncidentOwnerInfoResponse] {
	return pulumix.Output[*IncidentOwnerInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o IncidentOwnerInfoResponsePtrOutput) Elem() IncidentOwnerInfoResponseOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) IncidentOwnerInfoResponse {
		if v != nil {
			return *v
		}
		var ret IncidentOwnerInfoResponse
		return ret
	}).(IncidentOwnerInfoResponseOutput)
}

// The name of the user the incident is assigned to.
func (o IncidentOwnerInfoResponsePtrOutput) AssignedTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.AssignedTo
	}).(pulumi.StringPtrOutput)
}

// The email of the user the incident is assigned to.
func (o IncidentOwnerInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// The object id of the user the incident is assigned to.
func (o IncidentOwnerInfoResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// The type of the owner the incident is assigned to.
func (o IncidentOwnerInfoResponsePtrOutput) OwnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.OwnerType
	}).(pulumi.StringPtrOutput)
}

// The user principal name of the user the incident is assigned to.
func (o IncidentOwnerInfoResponsePtrOutput) UserPrincipalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentOwnerInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPrincipalName
	}).(pulumi.StringPtrOutput)
}

type IncidentPropertiesAction struct {
	// The reason the incident was closed
	Classification *string `pulumi:"classification"`
	// Describes the reason the incident was closed.
	ClassificationComment *string `pulumi:"classificationComment"`
	// The classification reason the incident was closed with
	ClassificationReason *string `pulumi:"classificationReason"`
	// List of labels to add to the incident.
	Labels []IncidentLabel `pulumi:"labels"`
	// Information on the user an incident is assigned to
	Owner *IncidentOwnerInfo `pulumi:"owner"`
	// The severity of the incident
	Severity *string `pulumi:"severity"`
	// The status of the incident
	Status *string `pulumi:"status"`
}

type IncidentPropertiesActionResponse struct {
	// The reason the incident was closed
	Classification *string `pulumi:"classification"`
	// Describes the reason the incident was closed.
	ClassificationComment *string `pulumi:"classificationComment"`
	// The classification reason the incident was closed with
	ClassificationReason *string `pulumi:"classificationReason"`
	// List of labels to add to the incident.
	Labels []IncidentLabelResponse `pulumi:"labels"`
	// Information on the user an incident is assigned to
	Owner *IncidentOwnerInfoResponse `pulumi:"owner"`
	// The severity of the incident
	Severity *string `pulumi:"severity"`
	// The status of the incident
	Status *string `pulumi:"status"`
}

// Query results for table insights query.
type InsightsTableResultResponse struct {
	// Columns Metadata of the table
	Columns []InsightsTableResultResponseColumns `pulumi:"columns"`
	// Rows data of the table
	Rows [][]string `pulumi:"rows"`
}

// Query results for table insights query.
type InsightsTableResultResponseOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponseOutput) ToInsightsTableResultResponseOutput() InsightsTableResultResponseOutput {
	return o
}

func (o InsightsTableResultResponseOutput) ToInsightsTableResultResponseOutputWithContext(ctx context.Context) InsightsTableResultResponseOutput {
	return o
}

func (o InsightsTableResultResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsTableResultResponse] {
	return pulumix.Output[InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

// Columns Metadata of the table
func (o InsightsTableResultResponseOutput) Columns() InsightsTableResultResponseColumnsArrayOutput {
	return o.ApplyT(func(v InsightsTableResultResponse) []InsightsTableResultResponseColumns { return v.Columns }).(InsightsTableResultResponseColumnsArrayOutput)
}

// Rows data of the table
func (o InsightsTableResultResponseOutput) Rows() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v InsightsTableResultResponse) [][]string { return v.Rows }).(pulumi.StringArrayArrayOutput)
}

type InsightsTableResultResponsePtrOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponsePtrOutput) ToInsightsTableResultResponsePtrOutput() InsightsTableResultResponsePtrOutput {
	return o
}

func (o InsightsTableResultResponsePtrOutput) ToInsightsTableResultResponsePtrOutputWithContext(ctx context.Context) InsightsTableResultResponsePtrOutput {
	return o
}

func (o InsightsTableResultResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InsightsTableResultResponse] {
	return pulumix.Output[*InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponsePtrOutput) Elem() InsightsTableResultResponseOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) InsightsTableResultResponse {
		if v != nil {
			return *v
		}
		var ret InsightsTableResultResponse
		return ret
	}).(InsightsTableResultResponseOutput)
}

// Columns Metadata of the table
func (o InsightsTableResultResponsePtrOutput) Columns() InsightsTableResultResponseColumnsArrayOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) []InsightsTableResultResponseColumns {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(InsightsTableResultResponseColumnsArrayOutput)
}

// Rows data of the table
func (o InsightsTableResultResponsePtrOutput) Rows() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v *InsightsTableResultResponse) [][]string {
		if v == nil {
			return nil
		}
		return v.Rows
	}).(pulumi.StringArrayArrayOutput)
}

type InsightsTableResultResponseArrayOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InsightsTableResultResponse)(nil)).Elem()
}

func (o InsightsTableResultResponseArrayOutput) ToInsightsTableResultResponseArrayOutput() InsightsTableResultResponseArrayOutput {
	return o
}

func (o InsightsTableResultResponseArrayOutput) ToInsightsTableResultResponseArrayOutputWithContext(ctx context.Context) InsightsTableResultResponseArrayOutput {
	return o
}

func (o InsightsTableResultResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InsightsTableResultResponse] {
	return pulumix.Output[[]InsightsTableResultResponse]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponseArrayOutput) Index(i pulumi.IntInput) InsightsTableResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InsightsTableResultResponse {
		return vs[0].([]InsightsTableResultResponse)[vs[1].(int)]
	}).(InsightsTableResultResponseOutput)
}

type InsightsTableResultResponseColumns struct {
	// the name of the colum
	Name *string `pulumi:"name"`
	// the type of the colum
	Type *string `pulumi:"type"`
}

type InsightsTableResultResponseColumnsOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseColumnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsTableResultResponseColumns)(nil)).Elem()
}

func (o InsightsTableResultResponseColumnsOutput) ToInsightsTableResultResponseColumnsOutput() InsightsTableResultResponseColumnsOutput {
	return o
}

func (o InsightsTableResultResponseColumnsOutput) ToInsightsTableResultResponseColumnsOutputWithContext(ctx context.Context) InsightsTableResultResponseColumnsOutput {
	return o
}

func (o InsightsTableResultResponseColumnsOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsTableResultResponseColumns] {
	return pulumix.Output[InsightsTableResultResponseColumns]{
		OutputState: o.OutputState,
	}
}

// the name of the colum
func (o InsightsTableResultResponseColumnsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InsightsTableResultResponseColumns) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// the type of the colum
func (o InsightsTableResultResponseColumnsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InsightsTableResultResponseColumns) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InsightsTableResultResponseColumnsArrayOutput struct{ *pulumi.OutputState }

func (InsightsTableResultResponseColumnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InsightsTableResultResponseColumns)(nil)).Elem()
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToInsightsTableResultResponseColumnsArrayOutput() InsightsTableResultResponseColumnsArrayOutput {
	return o
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToInsightsTableResultResponseColumnsArrayOutputWithContext(ctx context.Context) InsightsTableResultResponseColumnsArrayOutput {
	return o
}

func (o InsightsTableResultResponseColumnsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InsightsTableResultResponseColumns] {
	return pulumix.Output[[]InsightsTableResultResponseColumns]{
		OutputState: o.OutputState,
	}
}

func (o InsightsTableResultResponseColumnsArrayOutput) Index(i pulumi.IntInput) InsightsTableResultResponseColumnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InsightsTableResultResponseColumns {
		return vs[0].([]InsightsTableResultResponseColumns)[vs[1].(int)]
	}).(InsightsTableResultResponseColumnsOutput)
}

// Instruction steps to enable the connector.
type InstructionStep struct {
	// Gets or sets the instruction step description.
	Description *string `pulumi:"description"`
	// Gets or sets the inner instruction steps details.
	// Foe Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step 1.2].
	InnerSteps []InstructionStep `pulumi:"innerSteps"`
	// Gets or sets the instruction step details.
	Instructions []InstructionStepDetails `pulumi:"instructions"`
	// Gets or sets the instruction step title.
	Title *string `pulumi:"title"`
}

// InstructionStepInput is an input type that accepts InstructionStepArgs and InstructionStepOutput values.
// You can construct a concrete instance of `InstructionStepInput` via:
//
//	InstructionStepArgs{...}
type InstructionStepInput interface {
	pulumi.Input

	ToInstructionStepOutput() InstructionStepOutput
	ToInstructionStepOutputWithContext(context.Context) InstructionStepOutput
}

// Instruction steps to enable the connector.
type InstructionStepArgs struct {
	// Gets or sets the instruction step description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Gets or sets the inner instruction steps details.
	// Foe Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step 1.2].
	InnerSteps InstructionStepArrayInput `pulumi:"innerSteps"`
	// Gets or sets the instruction step details.
	Instructions InstructionStepDetailsArrayInput `pulumi:"instructions"`
	// Gets or sets the instruction step title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (InstructionStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStep)(nil)).Elem()
}

func (i InstructionStepArgs) ToInstructionStepOutput() InstructionStepOutput {
	return i.ToInstructionStepOutputWithContext(context.Background())
}

func (i InstructionStepArgs) ToInstructionStepOutputWithContext(ctx context.Context) InstructionStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepOutput)
}

func (i InstructionStepArgs) ToOutput(ctx context.Context) pulumix.Output[InstructionStep] {
	return pulumix.Output[InstructionStep]{
		OutputState: i.ToInstructionStepOutputWithContext(ctx).OutputState,
	}
}

// InstructionStepArrayInput is an input type that accepts InstructionStepArray and InstructionStepArrayOutput values.
// You can construct a concrete instance of `InstructionStepArrayInput` via:
//
//	InstructionStepArray{ InstructionStepArgs{...} }
type InstructionStepArrayInput interface {
	pulumi.Input

	ToInstructionStepArrayOutput() InstructionStepArrayOutput
	ToInstructionStepArrayOutputWithContext(context.Context) InstructionStepArrayOutput
}

type InstructionStepArray []InstructionStepInput

func (InstructionStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStep)(nil)).Elem()
}

func (i InstructionStepArray) ToInstructionStepArrayOutput() InstructionStepArrayOutput {
	return i.ToInstructionStepArrayOutputWithContext(context.Background())
}

func (i InstructionStepArray) ToInstructionStepArrayOutputWithContext(ctx context.Context) InstructionStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepArrayOutput)
}

func (i InstructionStepArray) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStep] {
	return pulumix.Output[[]InstructionStep]{
		OutputState: i.ToInstructionStepArrayOutputWithContext(ctx).OutputState,
	}
}

// Instruction steps to enable the connector.
type InstructionStepOutput struct{ *pulumi.OutputState }

func (InstructionStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStep)(nil)).Elem()
}

func (o InstructionStepOutput) ToInstructionStepOutput() InstructionStepOutput {
	return o
}

func (o InstructionStepOutput) ToInstructionStepOutputWithContext(ctx context.Context) InstructionStepOutput {
	return o
}

func (o InstructionStepOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStep] {
	return pulumix.Output[InstructionStep]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the instruction step description.
func (o InstructionStepOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstructionStep) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Gets or sets the inner instruction steps details.
// Foe Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step 1.2].
func (o InstructionStepOutput) InnerSteps() InstructionStepArrayOutput {
	return o.ApplyT(func(v InstructionStep) []InstructionStep { return v.InnerSteps }).(InstructionStepArrayOutput)
}

// Gets or sets the instruction step details.
func (o InstructionStepOutput) Instructions() InstructionStepDetailsArrayOutput {
	return o.ApplyT(func(v InstructionStep) []InstructionStepDetails { return v.Instructions }).(InstructionStepDetailsArrayOutput)
}

// Gets or sets the instruction step title.
func (o InstructionStepOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstructionStep) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type InstructionStepArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStep)(nil)).Elem()
}

func (o InstructionStepArrayOutput) ToInstructionStepArrayOutput() InstructionStepArrayOutput {
	return o
}

func (o InstructionStepArrayOutput) ToInstructionStepArrayOutputWithContext(ctx context.Context) InstructionStepArrayOutput {
	return o
}

func (o InstructionStepArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStep] {
	return pulumix.Output[[]InstructionStep]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepArrayOutput) Index(i pulumi.IntInput) InstructionStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStep {
		return vs[0].([]InstructionStep)[vs[1].(int)]
	}).(InstructionStepOutput)
}

// Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel Portal.
type InstructionStepDetails struct {
	// Gets or sets the instruction type parameters settings.
	Parameters interface{} `pulumi:"parameters"`
	// Gets or sets the instruction type name.
	Type string `pulumi:"type"`
}

// InstructionStepDetailsInput is an input type that accepts InstructionStepDetailsArgs and InstructionStepDetailsOutput values.
// You can construct a concrete instance of `InstructionStepDetailsInput` via:
//
//	InstructionStepDetailsArgs{...}
type InstructionStepDetailsInput interface {
	pulumi.Input

	ToInstructionStepDetailsOutput() InstructionStepDetailsOutput
	ToInstructionStepDetailsOutputWithContext(context.Context) InstructionStepDetailsOutput
}

// Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel Portal.
type InstructionStepDetailsArgs struct {
	// Gets or sets the instruction type parameters settings.
	Parameters pulumi.Input `pulumi:"parameters"`
	// Gets or sets the instruction type name.
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstructionStepDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepDetails)(nil)).Elem()
}

func (i InstructionStepDetailsArgs) ToInstructionStepDetailsOutput() InstructionStepDetailsOutput {
	return i.ToInstructionStepDetailsOutputWithContext(context.Background())
}

func (i InstructionStepDetailsArgs) ToInstructionStepDetailsOutputWithContext(ctx context.Context) InstructionStepDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepDetailsOutput)
}

func (i InstructionStepDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[InstructionStepDetails] {
	return pulumix.Output[InstructionStepDetails]{
		OutputState: i.ToInstructionStepDetailsOutputWithContext(ctx).OutputState,
	}
}

// InstructionStepDetailsArrayInput is an input type that accepts InstructionStepDetailsArray and InstructionStepDetailsArrayOutput values.
// You can construct a concrete instance of `InstructionStepDetailsArrayInput` via:
//
//	InstructionStepDetailsArray{ InstructionStepDetailsArgs{...} }
type InstructionStepDetailsArrayInput interface {
	pulumi.Input

	ToInstructionStepDetailsArrayOutput() InstructionStepDetailsArrayOutput
	ToInstructionStepDetailsArrayOutputWithContext(context.Context) InstructionStepDetailsArrayOutput
}

type InstructionStepDetailsArray []InstructionStepDetailsInput

func (InstructionStepDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepDetails)(nil)).Elem()
}

func (i InstructionStepDetailsArray) ToInstructionStepDetailsArrayOutput() InstructionStepDetailsArrayOutput {
	return i.ToInstructionStepDetailsArrayOutputWithContext(context.Background())
}

func (i InstructionStepDetailsArray) ToInstructionStepDetailsArrayOutputWithContext(ctx context.Context) InstructionStepDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepDetailsArrayOutput)
}

func (i InstructionStepDetailsArray) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepDetails] {
	return pulumix.Output[[]InstructionStepDetails]{
		OutputState: i.ToInstructionStepDetailsArrayOutputWithContext(ctx).OutputState,
	}
}

// Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel Portal.
type InstructionStepDetailsOutput struct{ *pulumi.OutputState }

func (InstructionStepDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepDetails)(nil)).Elem()
}

func (o InstructionStepDetailsOutput) ToInstructionStepDetailsOutput() InstructionStepDetailsOutput {
	return o
}

func (o InstructionStepDetailsOutput) ToInstructionStepDetailsOutputWithContext(ctx context.Context) InstructionStepDetailsOutput {
	return o
}

func (o InstructionStepDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStepDetails] {
	return pulumix.Output[InstructionStepDetails]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the instruction type parameters settings.
func (o InstructionStepDetailsOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v InstructionStepDetails) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// Gets or sets the instruction type name.
func (o InstructionStepDetailsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstructionStepDetails) string { return v.Type }).(pulumi.StringOutput)
}

type InstructionStepDetailsArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepDetails)(nil)).Elem()
}

func (o InstructionStepDetailsArrayOutput) ToInstructionStepDetailsArrayOutput() InstructionStepDetailsArrayOutput {
	return o
}

func (o InstructionStepDetailsArrayOutput) ToInstructionStepDetailsArrayOutputWithContext(ctx context.Context) InstructionStepDetailsArrayOutput {
	return o
}

func (o InstructionStepDetailsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepDetails] {
	return pulumix.Output[[]InstructionStepDetails]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepDetailsArrayOutput) Index(i pulumi.IntInput) InstructionStepDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStepDetails {
		return vs[0].([]InstructionStepDetails)[vs[1].(int)]
	}).(InstructionStepDetailsOutput)
}

// Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel Portal.
type InstructionStepDetailsResponse struct {
	// Gets or sets the instruction type parameters settings.
	Parameters interface{} `pulumi:"parameters"`
	// Gets or sets the instruction type name.
	Type string `pulumi:"type"`
}

// Instruction step details, to be displayed in the Instructions steps section in the connector's page in Sentinel Portal.
type InstructionStepDetailsResponseOutput struct{ *pulumi.OutputState }

func (InstructionStepDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepDetailsResponse)(nil)).Elem()
}

func (o InstructionStepDetailsResponseOutput) ToInstructionStepDetailsResponseOutput() InstructionStepDetailsResponseOutput {
	return o
}

func (o InstructionStepDetailsResponseOutput) ToInstructionStepDetailsResponseOutputWithContext(ctx context.Context) InstructionStepDetailsResponseOutput {
	return o
}

func (o InstructionStepDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStepDetailsResponse] {
	return pulumix.Output[InstructionStepDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the instruction type parameters settings.
func (o InstructionStepDetailsResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v InstructionStepDetailsResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// Gets or sets the instruction type name.
func (o InstructionStepDetailsResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstructionStepDetailsResponse) string { return v.Type }).(pulumi.StringOutput)
}

type InstructionStepDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepDetailsResponse)(nil)).Elem()
}

func (o InstructionStepDetailsResponseArrayOutput) ToInstructionStepDetailsResponseArrayOutput() InstructionStepDetailsResponseArrayOutput {
	return o
}

func (o InstructionStepDetailsResponseArrayOutput) ToInstructionStepDetailsResponseArrayOutputWithContext(ctx context.Context) InstructionStepDetailsResponseArrayOutput {
	return o
}

func (o InstructionStepDetailsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepDetailsResponse] {
	return pulumix.Output[[]InstructionStepDetailsResponse]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepDetailsResponseArrayOutput) Index(i pulumi.IntInput) InstructionStepDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStepDetailsResponse {
		return vs[0].([]InstructionStepDetailsResponse)[vs[1].(int)]
	}).(InstructionStepDetailsResponseOutput)
}

// Instruction steps to enable the connector.
type InstructionStepResponse struct {
	// Gets or sets the instruction step description.
	Description *string `pulumi:"description"`
	// Gets or sets the inner instruction steps details.
	// Foe Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step 1.2].
	InnerSteps []InstructionStepResponse `pulumi:"innerSteps"`
	// Gets or sets the instruction step details.
	Instructions []InstructionStepDetailsResponse `pulumi:"instructions"`
	// Gets or sets the instruction step title.
	Title *string `pulumi:"title"`
}

// Instruction steps to enable the connector.
type InstructionStepResponseOutput struct{ *pulumi.OutputState }

func (InstructionStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepResponse)(nil)).Elem()
}

func (o InstructionStepResponseOutput) ToInstructionStepResponseOutput() InstructionStepResponseOutput {
	return o
}

func (o InstructionStepResponseOutput) ToInstructionStepResponseOutputWithContext(ctx context.Context) InstructionStepResponseOutput {
	return o
}

func (o InstructionStepResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStepResponse] {
	return pulumix.Output[InstructionStepResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the instruction step description.
func (o InstructionStepResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstructionStepResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Gets or sets the inner instruction steps details.
// Foe Example: instruction step 1 might contain inner instruction steps: [instruction step 1.1, instruction step 1.2].
func (o InstructionStepResponseOutput) InnerSteps() InstructionStepResponseArrayOutput {
	return o.ApplyT(func(v InstructionStepResponse) []InstructionStepResponse { return v.InnerSteps }).(InstructionStepResponseArrayOutput)
}

// Gets or sets the instruction step details.
func (o InstructionStepResponseOutput) Instructions() InstructionStepDetailsResponseArrayOutput {
	return o.ApplyT(func(v InstructionStepResponse) []InstructionStepDetailsResponse { return v.Instructions }).(InstructionStepDetailsResponseArrayOutput)
}

// Gets or sets the instruction step title.
func (o InstructionStepResponseOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstructionStepResponse) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type InstructionStepResponseArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepResponse)(nil)).Elem()
}

func (o InstructionStepResponseArrayOutput) ToInstructionStepResponseArrayOutput() InstructionStepResponseArrayOutput {
	return o
}

func (o InstructionStepResponseArrayOutput) ToInstructionStepResponseArrayOutputWithContext(ctx context.Context) InstructionStepResponseArrayOutput {
	return o
}

func (o InstructionStepResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepResponse] {
	return pulumix.Output[[]InstructionStepResponse]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepResponseArrayOutput) Index(i pulumi.IntInput) InstructionStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStepResponse {
		return vs[0].([]InstructionStepResponse)[vs[1].(int)]
	}).(InstructionStepResponseOutput)
}

type InstructionStepsInstructions struct {
	// The parameters for the setting
	Parameters interface{} `pulumi:"parameters"`
	// The kind of the setting
	Type string `pulumi:"type"`
}

// InstructionStepsInstructionsInput is an input type that accepts InstructionStepsInstructionsArgs and InstructionStepsInstructionsOutput values.
// You can construct a concrete instance of `InstructionStepsInstructionsInput` via:
//
//	InstructionStepsInstructionsArgs{...}
type InstructionStepsInstructionsInput interface {
	pulumi.Input

	ToInstructionStepsInstructionsOutput() InstructionStepsInstructionsOutput
	ToInstructionStepsInstructionsOutputWithContext(context.Context) InstructionStepsInstructionsOutput
}

type InstructionStepsInstructionsArgs struct {
	// The parameters for the setting
	Parameters pulumi.Input `pulumi:"parameters"`
	// The kind of the setting
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstructionStepsInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepsInstructions)(nil)).Elem()
}

func (i InstructionStepsInstructionsArgs) ToInstructionStepsInstructionsOutput() InstructionStepsInstructionsOutput {
	return i.ToInstructionStepsInstructionsOutputWithContext(context.Background())
}

func (i InstructionStepsInstructionsArgs) ToInstructionStepsInstructionsOutputWithContext(ctx context.Context) InstructionStepsInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepsInstructionsOutput)
}

func (i InstructionStepsInstructionsArgs) ToOutput(ctx context.Context) pulumix.Output[InstructionStepsInstructions] {
	return pulumix.Output[InstructionStepsInstructions]{
		OutputState: i.ToInstructionStepsInstructionsOutputWithContext(ctx).OutputState,
	}
}

// InstructionStepsInstructionsArrayInput is an input type that accepts InstructionStepsInstructionsArray and InstructionStepsInstructionsArrayOutput values.
// You can construct a concrete instance of `InstructionStepsInstructionsArrayInput` via:
//
//	InstructionStepsInstructionsArray{ InstructionStepsInstructionsArgs{...} }
type InstructionStepsInstructionsArrayInput interface {
	pulumi.Input

	ToInstructionStepsInstructionsArrayOutput() InstructionStepsInstructionsArrayOutput
	ToInstructionStepsInstructionsArrayOutputWithContext(context.Context) InstructionStepsInstructionsArrayOutput
}

type InstructionStepsInstructionsArray []InstructionStepsInstructionsInput

func (InstructionStepsInstructionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepsInstructions)(nil)).Elem()
}

func (i InstructionStepsInstructionsArray) ToInstructionStepsInstructionsArrayOutput() InstructionStepsInstructionsArrayOutput {
	return i.ToInstructionStepsInstructionsArrayOutputWithContext(context.Background())
}

func (i InstructionStepsInstructionsArray) ToInstructionStepsInstructionsArrayOutputWithContext(ctx context.Context) InstructionStepsInstructionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstructionStepsInstructionsArrayOutput)
}

func (i InstructionStepsInstructionsArray) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepsInstructions] {
	return pulumix.Output[[]InstructionStepsInstructions]{
		OutputState: i.ToInstructionStepsInstructionsArrayOutputWithContext(ctx).OutputState,
	}
}

type InstructionStepsInstructionsOutput struct{ *pulumi.OutputState }

func (InstructionStepsInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepsInstructions)(nil)).Elem()
}

func (o InstructionStepsInstructionsOutput) ToInstructionStepsInstructionsOutput() InstructionStepsInstructionsOutput {
	return o
}

func (o InstructionStepsInstructionsOutput) ToInstructionStepsInstructionsOutputWithContext(ctx context.Context) InstructionStepsInstructionsOutput {
	return o
}

func (o InstructionStepsInstructionsOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStepsInstructions] {
	return pulumix.Output[InstructionStepsInstructions]{
		OutputState: o.OutputState,
	}
}

// The parameters for the setting
func (o InstructionStepsInstructionsOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v InstructionStepsInstructions) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The kind of the setting
func (o InstructionStepsInstructionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstructionStepsInstructions) string { return v.Type }).(pulumi.StringOutput)
}

type InstructionStepsInstructionsArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepsInstructionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepsInstructions)(nil)).Elem()
}

func (o InstructionStepsInstructionsArrayOutput) ToInstructionStepsInstructionsArrayOutput() InstructionStepsInstructionsArrayOutput {
	return o
}

func (o InstructionStepsInstructionsArrayOutput) ToInstructionStepsInstructionsArrayOutputWithContext(ctx context.Context) InstructionStepsInstructionsArrayOutput {
	return o
}

func (o InstructionStepsInstructionsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepsInstructions] {
	return pulumix.Output[[]InstructionStepsInstructions]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepsInstructionsArrayOutput) Index(i pulumi.IntInput) InstructionStepsInstructionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStepsInstructions {
		return vs[0].([]InstructionStepsInstructions)[vs[1].(int)]
	}).(InstructionStepsInstructionsOutput)
}

type InstructionStepsResponseInstructions struct {
	// The parameters for the setting
	Parameters interface{} `pulumi:"parameters"`
	// The kind of the setting
	Type string `pulumi:"type"`
}

type InstructionStepsResponseInstructionsOutput struct{ *pulumi.OutputState }

func (InstructionStepsResponseInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstructionStepsResponseInstructions)(nil)).Elem()
}

func (o InstructionStepsResponseInstructionsOutput) ToInstructionStepsResponseInstructionsOutput() InstructionStepsResponseInstructionsOutput {
	return o
}

func (o InstructionStepsResponseInstructionsOutput) ToInstructionStepsResponseInstructionsOutputWithContext(ctx context.Context) InstructionStepsResponseInstructionsOutput {
	return o
}

func (o InstructionStepsResponseInstructionsOutput) ToOutput(ctx context.Context) pulumix.Output[InstructionStepsResponseInstructions] {
	return pulumix.Output[InstructionStepsResponseInstructions]{
		OutputState: o.OutputState,
	}
}

// The parameters for the setting
func (o InstructionStepsResponseInstructionsOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v InstructionStepsResponseInstructions) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The kind of the setting
func (o InstructionStepsResponseInstructionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstructionStepsResponseInstructions) string { return v.Type }).(pulumi.StringOutput)
}

type InstructionStepsResponseInstructionsArrayOutput struct{ *pulumi.OutputState }

func (InstructionStepsResponseInstructionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstructionStepsResponseInstructions)(nil)).Elem()
}

func (o InstructionStepsResponseInstructionsArrayOutput) ToInstructionStepsResponseInstructionsArrayOutput() InstructionStepsResponseInstructionsArrayOutput {
	return o
}

func (o InstructionStepsResponseInstructionsArrayOutput) ToInstructionStepsResponseInstructionsArrayOutputWithContext(ctx context.Context) InstructionStepsResponseInstructionsArrayOutput {
	return o
}

func (o InstructionStepsResponseInstructionsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InstructionStepsResponseInstructions] {
	return pulumix.Output[[]InstructionStepsResponseInstructions]{
		OutputState: o.OutputState,
	}
}

func (o InstructionStepsResponseInstructionsArrayOutput) Index(i pulumi.IntInput) InstructionStepsResponseInstructionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstructionStepsResponseInstructions {
		return vs[0].([]InstructionStepsResponseInstructions)[vs[1].(int)]
	}).(InstructionStepsResponseInstructionsOutput)
}

// The available data types for MCAS (Microsoft Cloud App Security) data connector.
type MCASDataConnectorDataTypes struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommon `pulumi:"alerts"`
	// Discovery log data type connection.
	DiscoveryLogs *DataConnectorDataTypeCommon `pulumi:"discoveryLogs"`
}

// MCASDataConnectorDataTypesInput is an input type that accepts MCASDataConnectorDataTypesArgs and MCASDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `MCASDataConnectorDataTypesInput` via:
//
//	MCASDataConnectorDataTypesArgs{...}
type MCASDataConnectorDataTypesInput interface {
	pulumi.Input

	ToMCASDataConnectorDataTypesOutput() MCASDataConnectorDataTypesOutput
	ToMCASDataConnectorDataTypesOutputWithContext(context.Context) MCASDataConnectorDataTypesOutput
}

// The available data types for MCAS (Microsoft Cloud App Security) data connector.
type MCASDataConnectorDataTypesArgs struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommonInput `pulumi:"alerts"`
	// Discovery log data type connection.
	DiscoveryLogs DataConnectorDataTypeCommonPtrInput `pulumi:"discoveryLogs"`
}

func (MCASDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MCASDataConnectorDataTypes)(nil)).Elem()
}

func (i MCASDataConnectorDataTypesArgs) ToMCASDataConnectorDataTypesOutput() MCASDataConnectorDataTypesOutput {
	return i.ToMCASDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i MCASDataConnectorDataTypesArgs) ToMCASDataConnectorDataTypesOutputWithContext(ctx context.Context) MCASDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MCASDataConnectorDataTypesOutput)
}

func (i MCASDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[MCASDataConnectorDataTypes] {
	return pulumix.Output[MCASDataConnectorDataTypes]{
		OutputState: i.ToMCASDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for MCAS (Microsoft Cloud App Security) data connector.
type MCASDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (MCASDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MCASDataConnectorDataTypes)(nil)).Elem()
}

func (o MCASDataConnectorDataTypesOutput) ToMCASDataConnectorDataTypesOutput() MCASDataConnectorDataTypesOutput {
	return o
}

func (o MCASDataConnectorDataTypesOutput) ToMCASDataConnectorDataTypesOutputWithContext(ctx context.Context) MCASDataConnectorDataTypesOutput {
	return o
}

func (o MCASDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[MCASDataConnectorDataTypes] {
	return pulumix.Output[MCASDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Alerts data type connection.
func (o MCASDataConnectorDataTypesOutput) Alerts() DataConnectorDataTypeCommonOutput {
	return o.ApplyT(func(v MCASDataConnectorDataTypes) DataConnectorDataTypeCommon { return v.Alerts }).(DataConnectorDataTypeCommonOutput)
}

// Discovery log data type connection.
func (o MCASDataConnectorDataTypesOutput) DiscoveryLogs() DataConnectorDataTypeCommonPtrOutput {
	return o.ApplyT(func(v MCASDataConnectorDataTypes) *DataConnectorDataTypeCommon { return v.DiscoveryLogs }).(DataConnectorDataTypeCommonPtrOutput)
}

// The available data types for MCAS (Microsoft Cloud App Security) data connector.
type MCASDataConnectorDataTypesResponse struct {
	// Alerts data type connection.
	Alerts DataConnectorDataTypeCommonResponse `pulumi:"alerts"`
	// Discovery log data type connection.
	DiscoveryLogs *DataConnectorDataTypeCommonResponse `pulumi:"discoveryLogs"`
}

// The available data types for MCAS (Microsoft Cloud App Security) data connector.
type MCASDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (MCASDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MCASDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o MCASDataConnectorDataTypesResponseOutput) ToMCASDataConnectorDataTypesResponseOutput() MCASDataConnectorDataTypesResponseOutput {
	return o
}

func (o MCASDataConnectorDataTypesResponseOutput) ToMCASDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) MCASDataConnectorDataTypesResponseOutput {
	return o
}

func (o MCASDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MCASDataConnectorDataTypesResponse] {
	return pulumix.Output[MCASDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Alerts data type connection.
func (o MCASDataConnectorDataTypesResponseOutput) Alerts() DataConnectorDataTypeCommonResponseOutput {
	return o.ApplyT(func(v MCASDataConnectorDataTypesResponse) DataConnectorDataTypeCommonResponse { return v.Alerts }).(DataConnectorDataTypeCommonResponseOutput)
}

// Discovery log data type connection.
func (o MCASDataConnectorDataTypesResponseOutput) DiscoveryLogs() DataConnectorDataTypeCommonResponsePtrOutput {
	return o.ApplyT(func(v MCASDataConnectorDataTypesResponse) *DataConnectorDataTypeCommonResponse {
		return v.DiscoveryLogs
	}).(DataConnectorDataTypeCommonResponsePtrOutput)
}

// The available data types for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypes struct {
	// Data type for Microsoft Threat Intelligence Platforms data connector.
	MicrosoftEmergingThreatFeed MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed `pulumi:"microsoftEmergingThreatFeed"`
}

// MSTIDataConnectorDataTypesInput is an input type that accepts MSTIDataConnectorDataTypesArgs and MSTIDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `MSTIDataConnectorDataTypesInput` via:
//
//	MSTIDataConnectorDataTypesArgs{...}
type MSTIDataConnectorDataTypesInput interface {
	pulumi.Input

	ToMSTIDataConnectorDataTypesOutput() MSTIDataConnectorDataTypesOutput
	ToMSTIDataConnectorDataTypesOutputWithContext(context.Context) MSTIDataConnectorDataTypesOutput
}

// The available data types for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesArgs struct {
	// Data type for Microsoft Threat Intelligence Platforms data connector.
	MicrosoftEmergingThreatFeed MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedInput `pulumi:"microsoftEmergingThreatFeed"`
}

func (MSTIDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypes)(nil)).Elem()
}

func (i MSTIDataConnectorDataTypesArgs) ToMSTIDataConnectorDataTypesOutput() MSTIDataConnectorDataTypesOutput {
	return i.ToMSTIDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i MSTIDataConnectorDataTypesArgs) ToMSTIDataConnectorDataTypesOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MSTIDataConnectorDataTypesOutput)
}

func (i MSTIDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypes] {
	return pulumix.Output[MSTIDataConnectorDataTypes]{
		OutputState: i.ToMSTIDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (MSTIDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypes)(nil)).Elem()
}

func (o MSTIDataConnectorDataTypesOutput) ToMSTIDataConnectorDataTypesOutput() MSTIDataConnectorDataTypesOutput {
	return o
}

func (o MSTIDataConnectorDataTypesOutput) ToMSTIDataConnectorDataTypesOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesOutput {
	return o
}

func (o MSTIDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypes] {
	return pulumix.Output[MSTIDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
func (o MSTIDataConnectorDataTypesOutput) MicrosoftEmergingThreatFeed() MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypes) MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed {
		return v.MicrosoftEmergingThreatFeed
	}).(MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput)
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed struct {
	// The lookback period for the feed to be imported.
	LookbackPeriod string `pulumi:"lookbackPeriod"`
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedInput is an input type that accepts MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs and MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput values.
// You can construct a concrete instance of `MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedInput` via:
//
//	MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs{...}
type MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedInput interface {
	pulumi.Input

	ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput() MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput
	ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutputWithContext(context.Context) MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs struct {
	// The lookback period for the feed to be imported.
	LookbackPeriod pulumi.StringInput `pulumi:"lookbackPeriod"`
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed)(nil)).Elem()
}

func (i MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs) ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput() MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput {
	return i.ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutputWithContext(context.Background())
}

func (i MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs) ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput)
}

func (i MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedArgs) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed] {
	return pulumix.Output[MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed]{
		OutputState: i.ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutputWithContext(ctx).OutputState,
	}
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput struct{ *pulumi.OutputState }

func (MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed)(nil)).Elem()
}

func (o MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput() MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput {
	return o
}

func (o MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) ToMSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput {
	return o
}

func (o MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed] {
	return pulumix.Output[MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed]{
		OutputState: o.OutputState,
	}
}

// The lookback period for the feed to be imported.
func (o MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) LookbackPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed) string { return v.LookbackPeriod }).(pulumi.StringOutput)
}

// Describe whether this data type connection is enabled or not.
func (o MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeed) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesResponse struct {
	// Data type for Microsoft Threat Intelligence Platforms data connector.
	MicrosoftEmergingThreatFeed MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed `pulumi:"microsoftEmergingThreatFeed"`
}

// The available data types for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (MSTIDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o MSTIDataConnectorDataTypesResponseOutput) ToMSTIDataConnectorDataTypesResponseOutput() MSTIDataConnectorDataTypesResponseOutput {
	return o
}

func (o MSTIDataConnectorDataTypesResponseOutput) ToMSTIDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesResponseOutput {
	return o
}

func (o MSTIDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypesResponse] {
	return pulumix.Output[MSTIDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
func (o MSTIDataConnectorDataTypesResponseOutput) MicrosoftEmergingThreatFeed() MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypesResponse) MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed {
		return v.MicrosoftEmergingThreatFeed
	}).(MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput)
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed struct {
	// The lookback period for the feed to be imported.
	LookbackPeriod string `pulumi:"lookbackPeriod"`
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Data type for Microsoft Threat Intelligence Platforms data connector.
type MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput struct{ *pulumi.OutputState }

func (MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed)(nil)).Elem()
}

func (o MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) ToMSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput() MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput {
	return o
}

func (o MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) ToMSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutputWithContext(ctx context.Context) MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput {
	return o
}

func (o MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) ToOutput(ctx context.Context) pulumix.Output[MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed] {
	return pulumix.Output[MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed]{
		OutputState: o.OutputState,
	}
}

// The lookback period for the feed to be imported.
func (o MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) LookbackPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed) string { return v.LookbackPeriod }).(pulumi.StringOutput)
}

// Describe whether this data type connection is enabled or not.
func (o MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeed) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypes struct {
	// Alerts data type for Microsoft Threat Protection Platforms data connector.
	Alerts *MTPDataConnectorDataTypesAlerts `pulumi:"alerts"`
	// Incidents data type for Microsoft Threat Protection Platforms data connector.
	Incidents MTPDataConnectorDataTypesIncidents `pulumi:"incidents"`
}

// MTPDataConnectorDataTypesInput is an input type that accepts MTPDataConnectorDataTypesArgs and MTPDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `MTPDataConnectorDataTypesInput` via:
//
//	MTPDataConnectorDataTypesArgs{...}
type MTPDataConnectorDataTypesInput interface {
	pulumi.Input

	ToMTPDataConnectorDataTypesOutput() MTPDataConnectorDataTypesOutput
	ToMTPDataConnectorDataTypesOutputWithContext(context.Context) MTPDataConnectorDataTypesOutput
}

// The available data types for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesArgs struct {
	// Alerts data type for Microsoft Threat Protection Platforms data connector.
	Alerts MTPDataConnectorDataTypesAlertsPtrInput `pulumi:"alerts"`
	// Incidents data type for Microsoft Threat Protection Platforms data connector.
	Incidents MTPDataConnectorDataTypesIncidentsInput `pulumi:"incidents"`
}

func (MTPDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypes)(nil)).Elem()
}

func (i MTPDataConnectorDataTypesArgs) ToMTPDataConnectorDataTypesOutput() MTPDataConnectorDataTypesOutput {
	return i.ToMTPDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i MTPDataConnectorDataTypesArgs) ToMTPDataConnectorDataTypesOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTPDataConnectorDataTypesOutput)
}

func (i MTPDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypes] {
	return pulumix.Output[MTPDataConnectorDataTypes]{
		OutputState: i.ToMTPDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypes)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesOutput) ToMTPDataConnectorDataTypesOutput() MTPDataConnectorDataTypesOutput {
	return o
}

func (o MTPDataConnectorDataTypesOutput) ToMTPDataConnectorDataTypesOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesOutput {
	return o
}

func (o MTPDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypes] {
	return pulumix.Output[MTPDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
func (o MTPDataConnectorDataTypesOutput) Alerts() MTPDataConnectorDataTypesAlertsPtrOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypes) *MTPDataConnectorDataTypesAlerts { return v.Alerts }).(MTPDataConnectorDataTypesAlertsPtrOutput)
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
func (o MTPDataConnectorDataTypesOutput) Incidents() MTPDataConnectorDataTypesIncidentsOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypes) MTPDataConnectorDataTypesIncidents { return v.Incidents }).(MTPDataConnectorDataTypesIncidentsOutput)
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesAlerts struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// MTPDataConnectorDataTypesAlertsInput is an input type that accepts MTPDataConnectorDataTypesAlertsArgs and MTPDataConnectorDataTypesAlertsOutput values.
// You can construct a concrete instance of `MTPDataConnectorDataTypesAlertsInput` via:
//
//	MTPDataConnectorDataTypesAlertsArgs{...}
type MTPDataConnectorDataTypesAlertsInput interface {
	pulumi.Input

	ToMTPDataConnectorDataTypesAlertsOutput() MTPDataConnectorDataTypesAlertsOutput
	ToMTPDataConnectorDataTypesAlertsOutputWithContext(context.Context) MTPDataConnectorDataTypesAlertsOutput
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesAlertsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (MTPDataConnectorDataTypesAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesAlerts)(nil)).Elem()
}

func (i MTPDataConnectorDataTypesAlertsArgs) ToMTPDataConnectorDataTypesAlertsOutput() MTPDataConnectorDataTypesAlertsOutput {
	return i.ToMTPDataConnectorDataTypesAlertsOutputWithContext(context.Background())
}

func (i MTPDataConnectorDataTypesAlertsArgs) ToMTPDataConnectorDataTypesAlertsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTPDataConnectorDataTypesAlertsOutput)
}

func (i MTPDataConnectorDataTypesAlertsArgs) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesAlerts] {
	return pulumix.Output[MTPDataConnectorDataTypesAlerts]{
		OutputState: i.ToMTPDataConnectorDataTypesAlertsOutputWithContext(ctx).OutputState,
	}
}

func (i MTPDataConnectorDataTypesAlertsArgs) ToMTPDataConnectorDataTypesAlertsPtrOutput() MTPDataConnectorDataTypesAlertsPtrOutput {
	return i.ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(context.Background())
}

func (i MTPDataConnectorDataTypesAlertsArgs) ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTPDataConnectorDataTypesAlertsOutput).ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx)
}

// MTPDataConnectorDataTypesAlertsPtrInput is an input type that accepts MTPDataConnectorDataTypesAlertsArgs, MTPDataConnectorDataTypesAlertsPtr and MTPDataConnectorDataTypesAlertsPtrOutput values.
// You can construct a concrete instance of `MTPDataConnectorDataTypesAlertsPtrInput` via:
//
//	        MTPDataConnectorDataTypesAlertsArgs{...}
//
//	or:
//
//	        nil
type MTPDataConnectorDataTypesAlertsPtrInput interface {
	pulumi.Input

	ToMTPDataConnectorDataTypesAlertsPtrOutput() MTPDataConnectorDataTypesAlertsPtrOutput
	ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(context.Context) MTPDataConnectorDataTypesAlertsPtrOutput
}

type mtpdataConnectorDataTypesAlertsPtrType MTPDataConnectorDataTypesAlertsArgs

func MTPDataConnectorDataTypesAlertsPtr(v *MTPDataConnectorDataTypesAlertsArgs) MTPDataConnectorDataTypesAlertsPtrInput {
	return (*mtpdataConnectorDataTypesAlertsPtrType)(v)
}

func (*mtpdataConnectorDataTypesAlertsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MTPDataConnectorDataTypesAlerts)(nil)).Elem()
}

func (i *mtpdataConnectorDataTypesAlertsPtrType) ToMTPDataConnectorDataTypesAlertsPtrOutput() MTPDataConnectorDataTypesAlertsPtrOutput {
	return i.ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(context.Background())
}

func (i *mtpdataConnectorDataTypesAlertsPtrType) ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTPDataConnectorDataTypesAlertsPtrOutput)
}

func (i *mtpdataConnectorDataTypesAlertsPtrType) ToOutput(ctx context.Context) pulumix.Output[*MTPDataConnectorDataTypesAlerts] {
	return pulumix.Output[*MTPDataConnectorDataTypesAlerts]{
		OutputState: i.ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx).OutputState,
	}
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesAlertsOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesAlerts)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesAlertsOutput) ToMTPDataConnectorDataTypesAlertsOutput() MTPDataConnectorDataTypesAlertsOutput {
	return o
}

func (o MTPDataConnectorDataTypesAlertsOutput) ToMTPDataConnectorDataTypesAlertsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsOutput {
	return o
}

func (o MTPDataConnectorDataTypesAlertsOutput) ToMTPDataConnectorDataTypesAlertsPtrOutput() MTPDataConnectorDataTypesAlertsPtrOutput {
	return o.ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(context.Background())
}

func (o MTPDataConnectorDataTypesAlertsOutput) ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MTPDataConnectorDataTypesAlerts) *MTPDataConnectorDataTypesAlerts {
		return &v
	}).(MTPDataConnectorDataTypesAlertsPtrOutput)
}

func (o MTPDataConnectorDataTypesAlertsOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesAlerts] {
	return pulumix.Output[MTPDataConnectorDataTypesAlerts]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesAlertsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesAlerts) string { return v.State }).(pulumi.StringOutput)
}

type MTPDataConnectorDataTypesAlertsPtrOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesAlertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MTPDataConnectorDataTypesAlerts)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesAlertsPtrOutput) ToMTPDataConnectorDataTypesAlertsPtrOutput() MTPDataConnectorDataTypesAlertsPtrOutput {
	return o
}

func (o MTPDataConnectorDataTypesAlertsPtrOutput) ToMTPDataConnectorDataTypesAlertsPtrOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesAlertsPtrOutput {
	return o
}

func (o MTPDataConnectorDataTypesAlertsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MTPDataConnectorDataTypesAlerts] {
	return pulumix.Output[*MTPDataConnectorDataTypesAlerts]{
		OutputState: o.OutputState,
	}
}

func (o MTPDataConnectorDataTypesAlertsPtrOutput) Elem() MTPDataConnectorDataTypesAlertsOutput {
	return o.ApplyT(func(v *MTPDataConnectorDataTypesAlerts) MTPDataConnectorDataTypesAlerts {
		if v != nil {
			return *v
		}
		var ret MTPDataConnectorDataTypesAlerts
		return ret
	}).(MTPDataConnectorDataTypesAlertsOutput)
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesAlertsPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MTPDataConnectorDataTypesAlerts) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesIncidents struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// MTPDataConnectorDataTypesIncidentsInput is an input type that accepts MTPDataConnectorDataTypesIncidentsArgs and MTPDataConnectorDataTypesIncidentsOutput values.
// You can construct a concrete instance of `MTPDataConnectorDataTypesIncidentsInput` via:
//
//	MTPDataConnectorDataTypesIncidentsArgs{...}
type MTPDataConnectorDataTypesIncidentsInput interface {
	pulumi.Input

	ToMTPDataConnectorDataTypesIncidentsOutput() MTPDataConnectorDataTypesIncidentsOutput
	ToMTPDataConnectorDataTypesIncidentsOutputWithContext(context.Context) MTPDataConnectorDataTypesIncidentsOutput
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesIncidentsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (MTPDataConnectorDataTypesIncidentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesIncidents)(nil)).Elem()
}

func (i MTPDataConnectorDataTypesIncidentsArgs) ToMTPDataConnectorDataTypesIncidentsOutput() MTPDataConnectorDataTypesIncidentsOutput {
	return i.ToMTPDataConnectorDataTypesIncidentsOutputWithContext(context.Background())
}

func (i MTPDataConnectorDataTypesIncidentsArgs) ToMTPDataConnectorDataTypesIncidentsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesIncidentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTPDataConnectorDataTypesIncidentsOutput)
}

func (i MTPDataConnectorDataTypesIncidentsArgs) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesIncidents] {
	return pulumix.Output[MTPDataConnectorDataTypesIncidents]{
		OutputState: i.ToMTPDataConnectorDataTypesIncidentsOutputWithContext(ctx).OutputState,
	}
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesIncidentsOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesIncidentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesIncidents)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesIncidentsOutput) ToMTPDataConnectorDataTypesIncidentsOutput() MTPDataConnectorDataTypesIncidentsOutput {
	return o
}

func (o MTPDataConnectorDataTypesIncidentsOutput) ToMTPDataConnectorDataTypesIncidentsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesIncidentsOutput {
	return o
}

func (o MTPDataConnectorDataTypesIncidentsOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesIncidents] {
	return pulumix.Output[MTPDataConnectorDataTypesIncidents]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesIncidentsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesIncidents) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponse struct {
	// Alerts data type for Microsoft Threat Protection Platforms data connector.
	Alerts *MTPDataConnectorDataTypesResponseAlerts `pulumi:"alerts"`
	// Incidents data type for Microsoft Threat Protection Platforms data connector.
	Incidents MTPDataConnectorDataTypesResponseIncidents `pulumi:"incidents"`
}

// The available data types for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesResponseOutput) ToMTPDataConnectorDataTypesResponseOutput() MTPDataConnectorDataTypesResponseOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseOutput) ToMTPDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesResponseOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesResponse] {
	return pulumix.Output[MTPDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
func (o MTPDataConnectorDataTypesResponseOutput) Alerts() MTPDataConnectorDataTypesResponseAlertsPtrOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesResponse) *MTPDataConnectorDataTypesResponseAlerts { return v.Alerts }).(MTPDataConnectorDataTypesResponseAlertsPtrOutput)
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
func (o MTPDataConnectorDataTypesResponseOutput) Incidents() MTPDataConnectorDataTypesResponseIncidentsOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesResponse) MTPDataConnectorDataTypesResponseIncidents {
		return v.Incidents
	}).(MTPDataConnectorDataTypesResponseIncidentsOutput)
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponseAlerts struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Alerts data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponseAlertsOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesResponseAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesResponseAlerts)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesResponseAlertsOutput) ToMTPDataConnectorDataTypesResponseAlertsOutput() MTPDataConnectorDataTypesResponseAlertsOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseAlertsOutput) ToMTPDataConnectorDataTypesResponseAlertsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesResponseAlertsOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseAlertsOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesResponseAlerts] {
	return pulumix.Output[MTPDataConnectorDataTypesResponseAlerts]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesResponseAlertsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesResponseAlerts) string { return v.State }).(pulumi.StringOutput)
}

type MTPDataConnectorDataTypesResponseAlertsPtrOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesResponseAlertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MTPDataConnectorDataTypesResponseAlerts)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesResponseAlertsPtrOutput) ToMTPDataConnectorDataTypesResponseAlertsPtrOutput() MTPDataConnectorDataTypesResponseAlertsPtrOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseAlertsPtrOutput) ToMTPDataConnectorDataTypesResponseAlertsPtrOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesResponseAlertsPtrOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseAlertsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MTPDataConnectorDataTypesResponseAlerts] {
	return pulumix.Output[*MTPDataConnectorDataTypesResponseAlerts]{
		OutputState: o.OutputState,
	}
}

func (o MTPDataConnectorDataTypesResponseAlertsPtrOutput) Elem() MTPDataConnectorDataTypesResponseAlertsOutput {
	return o.ApplyT(func(v *MTPDataConnectorDataTypesResponseAlerts) MTPDataConnectorDataTypesResponseAlerts {
		if v != nil {
			return *v
		}
		var ret MTPDataConnectorDataTypesResponseAlerts
		return ret
	}).(MTPDataConnectorDataTypesResponseAlertsOutput)
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesResponseAlertsPtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MTPDataConnectorDataTypesResponseAlerts) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponseIncidents struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Incidents data type for Microsoft Threat Protection Platforms data connector.
type MTPDataConnectorDataTypesResponseIncidentsOutput struct{ *pulumi.OutputState }

func (MTPDataConnectorDataTypesResponseIncidentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTPDataConnectorDataTypesResponseIncidents)(nil)).Elem()
}

func (o MTPDataConnectorDataTypesResponseIncidentsOutput) ToMTPDataConnectorDataTypesResponseIncidentsOutput() MTPDataConnectorDataTypesResponseIncidentsOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseIncidentsOutput) ToMTPDataConnectorDataTypesResponseIncidentsOutputWithContext(ctx context.Context) MTPDataConnectorDataTypesResponseIncidentsOutput {
	return o
}

func (o MTPDataConnectorDataTypesResponseIncidentsOutput) ToOutput(ctx context.Context) pulumix.Output[MTPDataConnectorDataTypesResponseIncidents] {
	return pulumix.Output[MTPDataConnectorDataTypesResponseIncidents]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MTPDataConnectorDataTypesResponseIncidentsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MTPDataConnectorDataTypesResponseIncidents) string { return v.State }).(pulumi.StringOutput)
}

// Publisher or creator of the content item.
type MetadataAuthor struct {
	// Email of author contact
	Email *string `pulumi:"email"`
	// Link for author/vendor page
	Link *string `pulumi:"link"`
	// Name of the author. Company or person.
	Name *string `pulumi:"name"`
}

// MetadataAuthorInput is an input type that accepts MetadataAuthorArgs and MetadataAuthorOutput values.
// You can construct a concrete instance of `MetadataAuthorInput` via:
//
//	MetadataAuthorArgs{...}
type MetadataAuthorInput interface {
	pulumi.Input

	ToMetadataAuthorOutput() MetadataAuthorOutput
	ToMetadataAuthorOutputWithContext(context.Context) MetadataAuthorOutput
}

// Publisher or creator of the content item.
type MetadataAuthorArgs struct {
	// Email of author contact
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Link for author/vendor page
	Link pulumi.StringPtrInput `pulumi:"link"`
	// Name of the author. Company or person.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MetadataAuthorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataAuthor)(nil)).Elem()
}

func (i MetadataAuthorArgs) ToMetadataAuthorOutput() MetadataAuthorOutput {
	return i.ToMetadataAuthorOutputWithContext(context.Background())
}

func (i MetadataAuthorArgs) ToMetadataAuthorOutputWithContext(ctx context.Context) MetadataAuthorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataAuthorOutput)
}

func (i MetadataAuthorArgs) ToOutput(ctx context.Context) pulumix.Output[MetadataAuthor] {
	return pulumix.Output[MetadataAuthor]{
		OutputState: i.ToMetadataAuthorOutputWithContext(ctx).OutputState,
	}
}

func (i MetadataAuthorArgs) ToMetadataAuthorPtrOutput() MetadataAuthorPtrOutput {
	return i.ToMetadataAuthorPtrOutputWithContext(context.Background())
}

func (i MetadataAuthorArgs) ToMetadataAuthorPtrOutputWithContext(ctx context.Context) MetadataAuthorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataAuthorOutput).ToMetadataAuthorPtrOutputWithContext(ctx)
}

// MetadataAuthorPtrInput is an input type that accepts MetadataAuthorArgs, MetadataAuthorPtr and MetadataAuthorPtrOutput values.
// You can construct a concrete instance of `MetadataAuthorPtrInput` via:
//
//	        MetadataAuthorArgs{...}
//
//	or:
//
//	        nil
type MetadataAuthorPtrInput interface {
	pulumi.Input

	ToMetadataAuthorPtrOutput() MetadataAuthorPtrOutput
	ToMetadataAuthorPtrOutputWithContext(context.Context) MetadataAuthorPtrOutput
}

type metadataAuthorPtrType MetadataAuthorArgs

func MetadataAuthorPtr(v *MetadataAuthorArgs) MetadataAuthorPtrInput {
	return (*metadataAuthorPtrType)(v)
}

func (*metadataAuthorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataAuthor)(nil)).Elem()
}

func (i *metadataAuthorPtrType) ToMetadataAuthorPtrOutput() MetadataAuthorPtrOutput {
	return i.ToMetadataAuthorPtrOutputWithContext(context.Background())
}

func (i *metadataAuthorPtrType) ToMetadataAuthorPtrOutputWithContext(ctx context.Context) MetadataAuthorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataAuthorPtrOutput)
}

func (i *metadataAuthorPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetadataAuthor] {
	return pulumix.Output[*MetadataAuthor]{
		OutputState: i.ToMetadataAuthorPtrOutputWithContext(ctx).OutputState,
	}
}

// Publisher or creator of the content item.
type MetadataAuthorOutput struct{ *pulumi.OutputState }

func (MetadataAuthorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataAuthor)(nil)).Elem()
}

func (o MetadataAuthorOutput) ToMetadataAuthorOutput() MetadataAuthorOutput {
	return o
}

func (o MetadataAuthorOutput) ToMetadataAuthorOutputWithContext(ctx context.Context) MetadataAuthorOutput {
	return o
}

func (o MetadataAuthorOutput) ToMetadataAuthorPtrOutput() MetadataAuthorPtrOutput {
	return o.ToMetadataAuthorPtrOutputWithContext(context.Background())
}

func (o MetadataAuthorOutput) ToMetadataAuthorPtrOutputWithContext(ctx context.Context) MetadataAuthorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataAuthor) *MetadataAuthor {
		return &v
	}).(MetadataAuthorPtrOutput)
}

func (o MetadataAuthorOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataAuthor] {
	return pulumix.Output[MetadataAuthor]{
		OutputState: o.OutputState,
	}
}

// Email of author contact
func (o MetadataAuthorOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthor) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Link for author/vendor page
func (o MetadataAuthorOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthor) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Name of the author. Company or person.
func (o MetadataAuthorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthor) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MetadataAuthorPtrOutput struct{ *pulumi.OutputState }

func (MetadataAuthorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataAuthor)(nil)).Elem()
}

func (o MetadataAuthorPtrOutput) ToMetadataAuthorPtrOutput() MetadataAuthorPtrOutput {
	return o
}

func (o MetadataAuthorPtrOutput) ToMetadataAuthorPtrOutputWithContext(ctx context.Context) MetadataAuthorPtrOutput {
	return o
}

func (o MetadataAuthorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataAuthor] {
	return pulumix.Output[*MetadataAuthor]{
		OutputState: o.OutputState,
	}
}

func (o MetadataAuthorPtrOutput) Elem() MetadataAuthorOutput {
	return o.ApplyT(func(v *MetadataAuthor) MetadataAuthor {
		if v != nil {
			return *v
		}
		var ret MetadataAuthor
		return ret
	}).(MetadataAuthorOutput)
}

// Email of author contact
func (o MetadataAuthorPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthor) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Link for author/vendor page
func (o MetadataAuthorPtrOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthor) *string {
		if v == nil {
			return nil
		}
		return v.Link
	}).(pulumi.StringPtrOutput)
}

// Name of the author. Company or person.
func (o MetadataAuthorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthor) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Publisher or creator of the content item.
type MetadataAuthorResponse struct {
	// Email of author contact
	Email *string `pulumi:"email"`
	// Link for author/vendor page
	Link *string `pulumi:"link"`
	// Name of the author. Company or person.
	Name *string `pulumi:"name"`
}

// Publisher or creator of the content item.
type MetadataAuthorResponseOutput struct{ *pulumi.OutputState }

func (MetadataAuthorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataAuthorResponse)(nil)).Elem()
}

func (o MetadataAuthorResponseOutput) ToMetadataAuthorResponseOutput() MetadataAuthorResponseOutput {
	return o
}

func (o MetadataAuthorResponseOutput) ToMetadataAuthorResponseOutputWithContext(ctx context.Context) MetadataAuthorResponseOutput {
	return o
}

func (o MetadataAuthorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataAuthorResponse] {
	return pulumix.Output[MetadataAuthorResponse]{
		OutputState: o.OutputState,
	}
}

// Email of author contact
func (o MetadataAuthorResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthorResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Link for author/vendor page
func (o MetadataAuthorResponseOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthorResponse) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Name of the author. Company or person.
func (o MetadataAuthorResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataAuthorResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MetadataAuthorResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataAuthorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataAuthorResponse)(nil)).Elem()
}

func (o MetadataAuthorResponsePtrOutput) ToMetadataAuthorResponsePtrOutput() MetadataAuthorResponsePtrOutput {
	return o
}

func (o MetadataAuthorResponsePtrOutput) ToMetadataAuthorResponsePtrOutputWithContext(ctx context.Context) MetadataAuthorResponsePtrOutput {
	return o
}

func (o MetadataAuthorResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataAuthorResponse] {
	return pulumix.Output[*MetadataAuthorResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataAuthorResponsePtrOutput) Elem() MetadataAuthorResponseOutput {
	return o.ApplyT(func(v *MetadataAuthorResponse) MetadataAuthorResponse {
		if v != nil {
			return *v
		}
		var ret MetadataAuthorResponse
		return ret
	}).(MetadataAuthorResponseOutput)
}

// Email of author contact
func (o MetadataAuthorResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Link for author/vendor page
func (o MetadataAuthorResponsePtrOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Link
	}).(pulumi.StringPtrOutput)
}

// Name of the author. Company or person.
func (o MetadataAuthorResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataAuthorResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ies for the solution content item
type MetadataCategories struct {
	// domain for the solution content item
	Domains []string `pulumi:"domains"`
	// Industry verticals for the solution content item
	Verticals []string `pulumi:"verticals"`
}

// MetadataCategoriesInput is an input type that accepts MetadataCategoriesArgs and MetadataCategoriesOutput values.
// You can construct a concrete instance of `MetadataCategoriesInput` via:
//
//	MetadataCategoriesArgs{...}
type MetadataCategoriesInput interface {
	pulumi.Input

	ToMetadataCategoriesOutput() MetadataCategoriesOutput
	ToMetadataCategoriesOutputWithContext(context.Context) MetadataCategoriesOutput
}

// ies for the solution content item
type MetadataCategoriesArgs struct {
	// domain for the solution content item
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// Industry verticals for the solution content item
	Verticals pulumi.StringArrayInput `pulumi:"verticals"`
}

func (MetadataCategoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataCategories)(nil)).Elem()
}

func (i MetadataCategoriesArgs) ToMetadataCategoriesOutput() MetadataCategoriesOutput {
	return i.ToMetadataCategoriesOutputWithContext(context.Background())
}

func (i MetadataCategoriesArgs) ToMetadataCategoriesOutputWithContext(ctx context.Context) MetadataCategoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataCategoriesOutput)
}

func (i MetadataCategoriesArgs) ToOutput(ctx context.Context) pulumix.Output[MetadataCategories] {
	return pulumix.Output[MetadataCategories]{
		OutputState: i.ToMetadataCategoriesOutputWithContext(ctx).OutputState,
	}
}

func (i MetadataCategoriesArgs) ToMetadataCategoriesPtrOutput() MetadataCategoriesPtrOutput {
	return i.ToMetadataCategoriesPtrOutputWithContext(context.Background())
}

func (i MetadataCategoriesArgs) ToMetadataCategoriesPtrOutputWithContext(ctx context.Context) MetadataCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataCategoriesOutput).ToMetadataCategoriesPtrOutputWithContext(ctx)
}

// MetadataCategoriesPtrInput is an input type that accepts MetadataCategoriesArgs, MetadataCategoriesPtr and MetadataCategoriesPtrOutput values.
// You can construct a concrete instance of `MetadataCategoriesPtrInput` via:
//
//	        MetadataCategoriesArgs{...}
//
//	or:
//
//	        nil
type MetadataCategoriesPtrInput interface {
	pulumi.Input

	ToMetadataCategoriesPtrOutput() MetadataCategoriesPtrOutput
	ToMetadataCategoriesPtrOutputWithContext(context.Context) MetadataCategoriesPtrOutput
}

type metadataCategoriesPtrType MetadataCategoriesArgs

func MetadataCategoriesPtr(v *MetadataCategoriesArgs) MetadataCategoriesPtrInput {
	return (*metadataCategoriesPtrType)(v)
}

func (*metadataCategoriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataCategories)(nil)).Elem()
}

func (i *metadataCategoriesPtrType) ToMetadataCategoriesPtrOutput() MetadataCategoriesPtrOutput {
	return i.ToMetadataCategoriesPtrOutputWithContext(context.Background())
}

func (i *metadataCategoriesPtrType) ToMetadataCategoriesPtrOutputWithContext(ctx context.Context) MetadataCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataCategoriesPtrOutput)
}

func (i *metadataCategoriesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetadataCategories] {
	return pulumix.Output[*MetadataCategories]{
		OutputState: i.ToMetadataCategoriesPtrOutputWithContext(ctx).OutputState,
	}
}

// ies for the solution content item
type MetadataCategoriesOutput struct{ *pulumi.OutputState }

func (MetadataCategoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataCategories)(nil)).Elem()
}

func (o MetadataCategoriesOutput) ToMetadataCategoriesOutput() MetadataCategoriesOutput {
	return o
}

func (o MetadataCategoriesOutput) ToMetadataCategoriesOutputWithContext(ctx context.Context) MetadataCategoriesOutput {
	return o
}

func (o MetadataCategoriesOutput) ToMetadataCategoriesPtrOutput() MetadataCategoriesPtrOutput {
	return o.ToMetadataCategoriesPtrOutputWithContext(context.Background())
}

func (o MetadataCategoriesOutput) ToMetadataCategoriesPtrOutputWithContext(ctx context.Context) MetadataCategoriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataCategories) *MetadataCategories {
		return &v
	}).(MetadataCategoriesPtrOutput)
}

func (o MetadataCategoriesOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataCategories] {
	return pulumix.Output[MetadataCategories]{
		OutputState: o.OutputState,
	}
}

// domain for the solution content item
func (o MetadataCategoriesOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataCategories) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Industry verticals for the solution content item
func (o MetadataCategoriesOutput) Verticals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataCategories) []string { return v.Verticals }).(pulumi.StringArrayOutput)
}

type MetadataCategoriesPtrOutput struct{ *pulumi.OutputState }

func (MetadataCategoriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataCategories)(nil)).Elem()
}

func (o MetadataCategoriesPtrOutput) ToMetadataCategoriesPtrOutput() MetadataCategoriesPtrOutput {
	return o
}

func (o MetadataCategoriesPtrOutput) ToMetadataCategoriesPtrOutputWithContext(ctx context.Context) MetadataCategoriesPtrOutput {
	return o
}

func (o MetadataCategoriesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataCategories] {
	return pulumix.Output[*MetadataCategories]{
		OutputState: o.OutputState,
	}
}

func (o MetadataCategoriesPtrOutput) Elem() MetadataCategoriesOutput {
	return o.ApplyT(func(v *MetadataCategories) MetadataCategories {
		if v != nil {
			return *v
		}
		var ret MetadataCategories
		return ret
	}).(MetadataCategoriesOutput)
}

// domain for the solution content item
func (o MetadataCategoriesPtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataCategories) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Industry verticals for the solution content item
func (o MetadataCategoriesPtrOutput) Verticals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataCategories) []string {
		if v == nil {
			return nil
		}
		return v.Verticals
	}).(pulumi.StringArrayOutput)
}

// ies for the solution content item
type MetadataCategoriesResponse struct {
	// domain for the solution content item
	Domains []string `pulumi:"domains"`
	// Industry verticals for the solution content item
	Verticals []string `pulumi:"verticals"`
}

// ies for the solution content item
type MetadataCategoriesResponseOutput struct{ *pulumi.OutputState }

func (MetadataCategoriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataCategoriesResponse)(nil)).Elem()
}

func (o MetadataCategoriesResponseOutput) ToMetadataCategoriesResponseOutput() MetadataCategoriesResponseOutput {
	return o
}

func (o MetadataCategoriesResponseOutput) ToMetadataCategoriesResponseOutputWithContext(ctx context.Context) MetadataCategoriesResponseOutput {
	return o
}

func (o MetadataCategoriesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataCategoriesResponse] {
	return pulumix.Output[MetadataCategoriesResponse]{
		OutputState: o.OutputState,
	}
}

// domain for the solution content item
func (o MetadataCategoriesResponseOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataCategoriesResponse) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Industry verticals for the solution content item
func (o MetadataCategoriesResponseOutput) Verticals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataCategoriesResponse) []string { return v.Verticals }).(pulumi.StringArrayOutput)
}

type MetadataCategoriesResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataCategoriesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataCategoriesResponse)(nil)).Elem()
}

func (o MetadataCategoriesResponsePtrOutput) ToMetadataCategoriesResponsePtrOutput() MetadataCategoriesResponsePtrOutput {
	return o
}

func (o MetadataCategoriesResponsePtrOutput) ToMetadataCategoriesResponsePtrOutputWithContext(ctx context.Context) MetadataCategoriesResponsePtrOutput {
	return o
}

func (o MetadataCategoriesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataCategoriesResponse] {
	return pulumix.Output[*MetadataCategoriesResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataCategoriesResponsePtrOutput) Elem() MetadataCategoriesResponseOutput {
	return o.ApplyT(func(v *MetadataCategoriesResponse) MetadataCategoriesResponse {
		if v != nil {
			return *v
		}
		var ret MetadataCategoriesResponse
		return ret
	}).(MetadataCategoriesResponseOutput)
}

// domain for the solution content item
func (o MetadataCategoriesResponsePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataCategoriesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Industry verticals for the solution content item
func (o MetadataCategoriesResponsePtrOutput) Verticals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MetadataCategoriesResponse) []string {
		if v == nil {
			return nil
		}
		return v.Verticals
	}).(pulumi.StringArrayOutput)
}

// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
type MetadataDependencies struct {
	// Id of the content item we depend on
	ContentId *string `pulumi:"contentId"`
	// This is the list of dependencies we must fulfill, according to the AND/OR operator
	Criteria []MetadataDependencies `pulumi:"criteria"`
	// Type of the content item we depend on
	Kind *string `pulumi:"kind"`
	// Name of the content item
	Name *string `pulumi:"name"`
	// Operator used for list of dependencies in criteria array.
	Operator *string `pulumi:"operator"`
	// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
	Version *string `pulumi:"version"`
}

// MetadataDependenciesInput is an input type that accepts MetadataDependenciesArgs and MetadataDependenciesOutput values.
// You can construct a concrete instance of `MetadataDependenciesInput` via:
//
//	MetadataDependenciesArgs{...}
type MetadataDependenciesInput interface {
	pulumi.Input

	ToMetadataDependenciesOutput() MetadataDependenciesOutput
	ToMetadataDependenciesOutputWithContext(context.Context) MetadataDependenciesOutput
}

// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
type MetadataDependenciesArgs struct {
	// Id of the content item we depend on
	ContentId pulumi.StringPtrInput `pulumi:"contentId"`
	// This is the list of dependencies we must fulfill, according to the AND/OR operator
	Criteria MetadataDependenciesArrayInput `pulumi:"criteria"`
	// Type of the content item we depend on
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the content item
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Operator used for list of dependencies in criteria array.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MetadataDependenciesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataDependencies)(nil)).Elem()
}

func (i MetadataDependenciesArgs) ToMetadataDependenciesOutput() MetadataDependenciesOutput {
	return i.ToMetadataDependenciesOutputWithContext(context.Background())
}

func (i MetadataDependenciesArgs) ToMetadataDependenciesOutputWithContext(ctx context.Context) MetadataDependenciesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataDependenciesOutput)
}

func (i MetadataDependenciesArgs) ToOutput(ctx context.Context) pulumix.Output[MetadataDependencies] {
	return pulumix.Output[MetadataDependencies]{
		OutputState: i.ToMetadataDependenciesOutputWithContext(ctx).OutputState,
	}
}

func (i MetadataDependenciesArgs) ToMetadataDependenciesPtrOutput() MetadataDependenciesPtrOutput {
	return i.ToMetadataDependenciesPtrOutputWithContext(context.Background())
}

func (i MetadataDependenciesArgs) ToMetadataDependenciesPtrOutputWithContext(ctx context.Context) MetadataDependenciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataDependenciesOutput).ToMetadataDependenciesPtrOutputWithContext(ctx)
}

// MetadataDependenciesPtrInput is an input type that accepts MetadataDependenciesArgs, MetadataDependenciesPtr and MetadataDependenciesPtrOutput values.
// You can construct a concrete instance of `MetadataDependenciesPtrInput` via:
//
//	        MetadataDependenciesArgs{...}
//
//	or:
//
//	        nil
type MetadataDependenciesPtrInput interface {
	pulumi.Input

	ToMetadataDependenciesPtrOutput() MetadataDependenciesPtrOutput
	ToMetadataDependenciesPtrOutputWithContext(context.Context) MetadataDependenciesPtrOutput
}

type metadataDependenciesPtrType MetadataDependenciesArgs

func MetadataDependenciesPtr(v *MetadataDependenciesArgs) MetadataDependenciesPtrInput {
	return (*metadataDependenciesPtrType)(v)
}

func (*metadataDependenciesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataDependencies)(nil)).Elem()
}

func (i *metadataDependenciesPtrType) ToMetadataDependenciesPtrOutput() MetadataDependenciesPtrOutput {
	return i.ToMetadataDependenciesPtrOutputWithContext(context.Background())
}

func (i *metadataDependenciesPtrType) ToMetadataDependenciesPtrOutputWithContext(ctx context.Context) MetadataDependenciesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataDependenciesPtrOutput)
}

func (i *metadataDependenciesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetadataDependencies] {
	return pulumix.Output[*MetadataDependencies]{
		OutputState: i.ToMetadataDependenciesPtrOutputWithContext(ctx).OutputState,
	}
}

// MetadataDependenciesArrayInput is an input type that accepts MetadataDependenciesArray and MetadataDependenciesArrayOutput values.
// You can construct a concrete instance of `MetadataDependenciesArrayInput` via:
//
//	MetadataDependenciesArray{ MetadataDependenciesArgs{...} }
type MetadataDependenciesArrayInput interface {
	pulumi.Input

	ToMetadataDependenciesArrayOutput() MetadataDependenciesArrayOutput
	ToMetadataDependenciesArrayOutputWithContext(context.Context) MetadataDependenciesArrayOutput
}

type MetadataDependenciesArray []MetadataDependenciesInput

func (MetadataDependenciesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataDependencies)(nil)).Elem()
}

func (i MetadataDependenciesArray) ToMetadataDependenciesArrayOutput() MetadataDependenciesArrayOutput {
	return i.ToMetadataDependenciesArrayOutputWithContext(context.Background())
}

func (i MetadataDependenciesArray) ToMetadataDependenciesArrayOutputWithContext(ctx context.Context) MetadataDependenciesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataDependenciesArrayOutput)
}

func (i MetadataDependenciesArray) ToOutput(ctx context.Context) pulumix.Output[[]MetadataDependencies] {
	return pulumix.Output[[]MetadataDependencies]{
		OutputState: i.ToMetadataDependenciesArrayOutputWithContext(ctx).OutputState,
	}
}

// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
type MetadataDependenciesOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataDependencies)(nil)).Elem()
}

func (o MetadataDependenciesOutput) ToMetadataDependenciesOutput() MetadataDependenciesOutput {
	return o
}

func (o MetadataDependenciesOutput) ToMetadataDependenciesOutputWithContext(ctx context.Context) MetadataDependenciesOutput {
	return o
}

func (o MetadataDependenciesOutput) ToMetadataDependenciesPtrOutput() MetadataDependenciesPtrOutput {
	return o.ToMetadataDependenciesPtrOutputWithContext(context.Background())
}

func (o MetadataDependenciesOutput) ToMetadataDependenciesPtrOutputWithContext(ctx context.Context) MetadataDependenciesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataDependencies) *MetadataDependencies {
		return &v
	}).(MetadataDependenciesPtrOutput)
}

func (o MetadataDependenciesOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataDependencies] {
	return pulumix.Output[MetadataDependencies]{
		OutputState: o.OutputState,
	}
}

// Id of the content item we depend on
func (o MetadataDependenciesOutput) ContentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependencies) *string { return v.ContentId }).(pulumi.StringPtrOutput)
}

// This is the list of dependencies we must fulfill, according to the AND/OR operator
func (o MetadataDependenciesOutput) Criteria() MetadataDependenciesArrayOutput {
	return o.ApplyT(func(v MetadataDependencies) []MetadataDependencies { return v.Criteria }).(MetadataDependenciesArrayOutput)
}

// Type of the content item we depend on
func (o MetadataDependenciesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependencies) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the content item
func (o MetadataDependenciesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependencies) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Operator used for list of dependencies in criteria array.
func (o MetadataDependenciesOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependencies) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
func (o MetadataDependenciesOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependencies) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MetadataDependenciesPtrOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataDependencies)(nil)).Elem()
}

func (o MetadataDependenciesPtrOutput) ToMetadataDependenciesPtrOutput() MetadataDependenciesPtrOutput {
	return o
}

func (o MetadataDependenciesPtrOutput) ToMetadataDependenciesPtrOutputWithContext(ctx context.Context) MetadataDependenciesPtrOutput {
	return o
}

func (o MetadataDependenciesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataDependencies] {
	return pulumix.Output[*MetadataDependencies]{
		OutputState: o.OutputState,
	}
}

func (o MetadataDependenciesPtrOutput) Elem() MetadataDependenciesOutput {
	return o.ApplyT(func(v *MetadataDependencies) MetadataDependencies {
		if v != nil {
			return *v
		}
		var ret MetadataDependencies
		return ret
	}).(MetadataDependenciesOutput)
}

// Id of the content item we depend on
func (o MetadataDependenciesPtrOutput) ContentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependencies) *string {
		if v == nil {
			return nil
		}
		return v.ContentId
	}).(pulumi.StringPtrOutput)
}

// This is the list of dependencies we must fulfill, according to the AND/OR operator
func (o MetadataDependenciesPtrOutput) Criteria() MetadataDependenciesArrayOutput {
	return o.ApplyT(func(v *MetadataDependencies) []MetadataDependencies {
		if v == nil {
			return nil
		}
		return v.Criteria
	}).(MetadataDependenciesArrayOutput)
}

// Type of the content item we depend on
func (o MetadataDependenciesPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependencies) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the content item
func (o MetadataDependenciesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependencies) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Operator used for list of dependencies in criteria array.
func (o MetadataDependenciesPtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependencies) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
func (o MetadataDependenciesPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependencies) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type MetadataDependenciesArrayOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataDependencies)(nil)).Elem()
}

func (o MetadataDependenciesArrayOutput) ToMetadataDependenciesArrayOutput() MetadataDependenciesArrayOutput {
	return o
}

func (o MetadataDependenciesArrayOutput) ToMetadataDependenciesArrayOutputWithContext(ctx context.Context) MetadataDependenciesArrayOutput {
	return o
}

func (o MetadataDependenciesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetadataDependencies] {
	return pulumix.Output[[]MetadataDependencies]{
		OutputState: o.OutputState,
	}
}

func (o MetadataDependenciesArrayOutput) Index(i pulumi.IntInput) MetadataDependenciesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataDependencies {
		return vs[0].([]MetadataDependencies)[vs[1].(int)]
	}).(MetadataDependenciesOutput)
}

// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
type MetadataDependenciesResponse struct {
	// Id of the content item we depend on
	ContentId *string `pulumi:"contentId"`
	// This is the list of dependencies we must fulfill, according to the AND/OR operator
	Criteria []MetadataDependenciesResponse `pulumi:"criteria"`
	// Type of the content item we depend on
	Kind *string `pulumi:"kind"`
	// Name of the content item
	Name *string `pulumi:"name"`
	// Operator used for list of dependencies in criteria array.
	Operator *string `pulumi:"operator"`
	// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
	Version *string `pulumi:"version"`
}

// Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
type MetadataDependenciesResponseOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataDependenciesResponse)(nil)).Elem()
}

func (o MetadataDependenciesResponseOutput) ToMetadataDependenciesResponseOutput() MetadataDependenciesResponseOutput {
	return o
}

func (o MetadataDependenciesResponseOutput) ToMetadataDependenciesResponseOutputWithContext(ctx context.Context) MetadataDependenciesResponseOutput {
	return o
}

func (o MetadataDependenciesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataDependenciesResponse] {
	return pulumix.Output[MetadataDependenciesResponse]{
		OutputState: o.OutputState,
	}
}

// Id of the content item we depend on
func (o MetadataDependenciesResponseOutput) ContentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) *string { return v.ContentId }).(pulumi.StringPtrOutput)
}

// This is the list of dependencies we must fulfill, according to the AND/OR operator
func (o MetadataDependenciesResponseOutput) Criteria() MetadataDependenciesResponseArrayOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) []MetadataDependenciesResponse { return v.Criteria }).(MetadataDependenciesResponseArrayOutput)
}

// Type of the content item we depend on
func (o MetadataDependenciesResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the content item
func (o MetadataDependenciesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Operator used for list of dependencies in criteria array.
func (o MetadataDependenciesResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
func (o MetadataDependenciesResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataDependenciesResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MetadataDependenciesResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataDependenciesResponse)(nil)).Elem()
}

func (o MetadataDependenciesResponsePtrOutput) ToMetadataDependenciesResponsePtrOutput() MetadataDependenciesResponsePtrOutput {
	return o
}

func (o MetadataDependenciesResponsePtrOutput) ToMetadataDependenciesResponsePtrOutputWithContext(ctx context.Context) MetadataDependenciesResponsePtrOutput {
	return o
}

func (o MetadataDependenciesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataDependenciesResponse] {
	return pulumix.Output[*MetadataDependenciesResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataDependenciesResponsePtrOutput) Elem() MetadataDependenciesResponseOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) MetadataDependenciesResponse {
		if v != nil {
			return *v
		}
		var ret MetadataDependenciesResponse
		return ret
	}).(MetadataDependenciesResponseOutput)
}

// Id of the content item we depend on
func (o MetadataDependenciesResponsePtrOutput) ContentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContentId
	}).(pulumi.StringPtrOutput)
}

// This is the list of dependencies we must fulfill, according to the AND/OR operator
func (o MetadataDependenciesResponsePtrOutput) Criteria() MetadataDependenciesResponseArrayOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) []MetadataDependenciesResponse {
		if v == nil {
			return nil
		}
		return v.Criteria
	}).(MetadataDependenciesResponseArrayOutput)
}

// Type of the content item we depend on
func (o MetadataDependenciesResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the content item
func (o MetadataDependenciesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Operator used for list of dependencies in criteria array.
func (o MetadataDependenciesResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
func (o MetadataDependenciesResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataDependenciesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type MetadataDependenciesResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataDependenciesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataDependenciesResponse)(nil)).Elem()
}

func (o MetadataDependenciesResponseArrayOutput) ToMetadataDependenciesResponseArrayOutput() MetadataDependenciesResponseArrayOutput {
	return o
}

func (o MetadataDependenciesResponseArrayOutput) ToMetadataDependenciesResponseArrayOutputWithContext(ctx context.Context) MetadataDependenciesResponseArrayOutput {
	return o
}

func (o MetadataDependenciesResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MetadataDependenciesResponse] {
	return pulumix.Output[[]MetadataDependenciesResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataDependenciesResponseArrayOutput) Index(i pulumi.IntInput) MetadataDependenciesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataDependenciesResponse {
		return vs[0].([]MetadataDependenciesResponse)[vs[1].(int)]
	}).(MetadataDependenciesResponseOutput)
}

// The original source of the content item, where it comes from.
type MetadataSource struct {
	// Source type of the content
	Kind string `pulumi:"kind"`
	// Name of the content source.  The repo name, solution name, LA workspace name etc.
	Name *string `pulumi:"name"`
	// ID of the content source.  The solution ID, workspace ID, etc
	SourceId *string `pulumi:"sourceId"`
}

// MetadataSourceInput is an input type that accepts MetadataSourceArgs and MetadataSourceOutput values.
// You can construct a concrete instance of `MetadataSourceInput` via:
//
//	MetadataSourceArgs{...}
type MetadataSourceInput interface {
	pulumi.Input

	ToMetadataSourceOutput() MetadataSourceOutput
	ToMetadataSourceOutputWithContext(context.Context) MetadataSourceOutput
}

// The original source of the content item, where it comes from.
type MetadataSourceArgs struct {
	// Source type of the content
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the content source.  The repo name, solution name, LA workspace name etc.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the content source.  The solution ID, workspace ID, etc
	SourceId pulumi.StringPtrInput `pulumi:"sourceId"`
}

func (MetadataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSource)(nil)).Elem()
}

func (i MetadataSourceArgs) ToMetadataSourceOutput() MetadataSourceOutput {
	return i.ToMetadataSourceOutputWithContext(context.Background())
}

func (i MetadataSourceArgs) ToMetadataSourceOutputWithContext(ctx context.Context) MetadataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceOutput)
}

func (i MetadataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[MetadataSource] {
	return pulumix.Output[MetadataSource]{
		OutputState: i.ToMetadataSourceOutputWithContext(ctx).OutputState,
	}
}

func (i MetadataSourceArgs) ToMetadataSourcePtrOutput() MetadataSourcePtrOutput {
	return i.ToMetadataSourcePtrOutputWithContext(context.Background())
}

func (i MetadataSourceArgs) ToMetadataSourcePtrOutputWithContext(ctx context.Context) MetadataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourceOutput).ToMetadataSourcePtrOutputWithContext(ctx)
}

// MetadataSourcePtrInput is an input type that accepts MetadataSourceArgs, MetadataSourcePtr and MetadataSourcePtrOutput values.
// You can construct a concrete instance of `MetadataSourcePtrInput` via:
//
//	        MetadataSourceArgs{...}
//
//	or:
//
//	        nil
type MetadataSourcePtrInput interface {
	pulumi.Input

	ToMetadataSourcePtrOutput() MetadataSourcePtrOutput
	ToMetadataSourcePtrOutputWithContext(context.Context) MetadataSourcePtrOutput
}

type metadataSourcePtrType MetadataSourceArgs

func MetadataSourcePtr(v *MetadataSourceArgs) MetadataSourcePtrInput {
	return (*metadataSourcePtrType)(v)
}

func (*metadataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSource)(nil)).Elem()
}

func (i *metadataSourcePtrType) ToMetadataSourcePtrOutput() MetadataSourcePtrOutput {
	return i.ToMetadataSourcePtrOutputWithContext(context.Background())
}

func (i *metadataSourcePtrType) ToMetadataSourcePtrOutputWithContext(ctx context.Context) MetadataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSourcePtrOutput)
}

func (i *metadataSourcePtrType) ToOutput(ctx context.Context) pulumix.Output[*MetadataSource] {
	return pulumix.Output[*MetadataSource]{
		OutputState: i.ToMetadataSourcePtrOutputWithContext(ctx).OutputState,
	}
}

// The original source of the content item, where it comes from.
type MetadataSourceOutput struct{ *pulumi.OutputState }

func (MetadataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSource)(nil)).Elem()
}

func (o MetadataSourceOutput) ToMetadataSourceOutput() MetadataSourceOutput {
	return o
}

func (o MetadataSourceOutput) ToMetadataSourceOutputWithContext(ctx context.Context) MetadataSourceOutput {
	return o
}

func (o MetadataSourceOutput) ToMetadataSourcePtrOutput() MetadataSourcePtrOutput {
	return o.ToMetadataSourcePtrOutputWithContext(context.Background())
}

func (o MetadataSourceOutput) ToMetadataSourcePtrOutputWithContext(ctx context.Context) MetadataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataSource) *MetadataSource {
		return &v
	}).(MetadataSourcePtrOutput)
}

func (o MetadataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataSource] {
	return pulumix.Output[MetadataSource]{
		OutputState: o.OutputState,
	}
}

// Source type of the content
func (o MetadataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the content source.  The repo name, solution name, LA workspace name etc.
func (o MetadataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the content source.  The solution ID, workspace ID, etc
func (o MetadataSourceOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSource) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

type MetadataSourcePtrOutput struct{ *pulumi.OutputState }

func (MetadataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSource)(nil)).Elem()
}

func (o MetadataSourcePtrOutput) ToMetadataSourcePtrOutput() MetadataSourcePtrOutput {
	return o
}

func (o MetadataSourcePtrOutput) ToMetadataSourcePtrOutputWithContext(ctx context.Context) MetadataSourcePtrOutput {
	return o
}

func (o MetadataSourcePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataSource] {
	return pulumix.Output[*MetadataSource]{
		OutputState: o.OutputState,
	}
}

func (o MetadataSourcePtrOutput) Elem() MetadataSourceOutput {
	return o.ApplyT(func(v *MetadataSource) MetadataSource {
		if v != nil {
			return *v
		}
		var ret MetadataSource
		return ret
	}).(MetadataSourceOutput)
}

// Source type of the content
func (o MetadataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the content source.  The repo name, solution name, LA workspace name etc.
func (o MetadataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ID of the content source.  The solution ID, workspace ID, etc
func (o MetadataSourcePtrOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSource) *string {
		if v == nil {
			return nil
		}
		return v.SourceId
	}).(pulumi.StringPtrOutput)
}

// The original source of the content item, where it comes from.
type MetadataSourceResponse struct {
	// Source type of the content
	Kind string `pulumi:"kind"`
	// Name of the content source.  The repo name, solution name, LA workspace name etc.
	Name *string `pulumi:"name"`
	// ID of the content source.  The solution ID, workspace ID, etc
	SourceId *string `pulumi:"sourceId"`
}

// The original source of the content item, where it comes from.
type MetadataSourceResponseOutput struct{ *pulumi.OutputState }

func (MetadataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSourceResponse)(nil)).Elem()
}

func (o MetadataSourceResponseOutput) ToMetadataSourceResponseOutput() MetadataSourceResponseOutput {
	return o
}

func (o MetadataSourceResponseOutput) ToMetadataSourceResponseOutputWithContext(ctx context.Context) MetadataSourceResponseOutput {
	return o
}

func (o MetadataSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataSourceResponse] {
	return pulumix.Output[MetadataSourceResponse]{
		OutputState: o.OutputState,
	}
}

// Source type of the content
func (o MetadataSourceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSourceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the content source.  The repo name, solution name, LA workspace name etc.
func (o MetadataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the content source.  The solution ID, workspace ID, etc
func (o MetadataSourceResponseOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSourceResponse) *string { return v.SourceId }).(pulumi.StringPtrOutput)
}

type MetadataSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSourceResponse)(nil)).Elem()
}

func (o MetadataSourceResponsePtrOutput) ToMetadataSourceResponsePtrOutput() MetadataSourceResponsePtrOutput {
	return o
}

func (o MetadataSourceResponsePtrOutput) ToMetadataSourceResponsePtrOutputWithContext(ctx context.Context) MetadataSourceResponsePtrOutput {
	return o
}

func (o MetadataSourceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataSourceResponse] {
	return pulumix.Output[*MetadataSourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataSourceResponsePtrOutput) Elem() MetadataSourceResponseOutput {
	return o.ApplyT(func(v *MetadataSourceResponse) MetadataSourceResponse {
		if v != nil {
			return *v
		}
		var ret MetadataSourceResponse
		return ret
	}).(MetadataSourceResponseOutput)
}

// Source type of the content
func (o MetadataSourceResponsePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name of the content source.  The repo name, solution name, LA workspace name etc.
func (o MetadataSourceResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ID of the content source.  The solution ID, workspace ID, etc
func (o MetadataSourceResponsePtrOutput) SourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SourceId
	}).(pulumi.StringPtrOutput)
}

// Support information for the content item.
type MetadataSupport struct {
	// Email of support contact
	Email *string `pulumi:"email"`
	// Link for support help, like to support page to open a ticket etc.
	Link *string `pulumi:"link"`
	// Name of the support contact. Company or person.
	Name *string `pulumi:"name"`
	// Type of support for content item
	Tier string `pulumi:"tier"`
}

// MetadataSupportInput is an input type that accepts MetadataSupportArgs and MetadataSupportOutput values.
// You can construct a concrete instance of `MetadataSupportInput` via:
//
//	MetadataSupportArgs{...}
type MetadataSupportInput interface {
	pulumi.Input

	ToMetadataSupportOutput() MetadataSupportOutput
	ToMetadataSupportOutputWithContext(context.Context) MetadataSupportOutput
}

// Support information for the content item.
type MetadataSupportArgs struct {
	// Email of support contact
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Link for support help, like to support page to open a ticket etc.
	Link pulumi.StringPtrInput `pulumi:"link"`
	// Name of the support contact. Company or person.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of support for content item
	Tier pulumi.StringInput `pulumi:"tier"`
}

func (MetadataSupportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSupport)(nil)).Elem()
}

func (i MetadataSupportArgs) ToMetadataSupportOutput() MetadataSupportOutput {
	return i.ToMetadataSupportOutputWithContext(context.Background())
}

func (i MetadataSupportArgs) ToMetadataSupportOutputWithContext(ctx context.Context) MetadataSupportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSupportOutput)
}

func (i MetadataSupportArgs) ToOutput(ctx context.Context) pulumix.Output[MetadataSupport] {
	return pulumix.Output[MetadataSupport]{
		OutputState: i.ToMetadataSupportOutputWithContext(ctx).OutputState,
	}
}

func (i MetadataSupportArgs) ToMetadataSupportPtrOutput() MetadataSupportPtrOutput {
	return i.ToMetadataSupportPtrOutputWithContext(context.Background())
}

func (i MetadataSupportArgs) ToMetadataSupportPtrOutputWithContext(ctx context.Context) MetadataSupportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSupportOutput).ToMetadataSupportPtrOutputWithContext(ctx)
}

// MetadataSupportPtrInput is an input type that accepts MetadataSupportArgs, MetadataSupportPtr and MetadataSupportPtrOutput values.
// You can construct a concrete instance of `MetadataSupportPtrInput` via:
//
//	        MetadataSupportArgs{...}
//
//	or:
//
//	        nil
type MetadataSupportPtrInput interface {
	pulumi.Input

	ToMetadataSupportPtrOutput() MetadataSupportPtrOutput
	ToMetadataSupportPtrOutputWithContext(context.Context) MetadataSupportPtrOutput
}

type metadataSupportPtrType MetadataSupportArgs

func MetadataSupportPtr(v *MetadataSupportArgs) MetadataSupportPtrInput {
	return (*metadataSupportPtrType)(v)
}

func (*metadataSupportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSupport)(nil)).Elem()
}

func (i *metadataSupportPtrType) ToMetadataSupportPtrOutput() MetadataSupportPtrOutput {
	return i.ToMetadataSupportPtrOutputWithContext(context.Background())
}

func (i *metadataSupportPtrType) ToMetadataSupportPtrOutputWithContext(ctx context.Context) MetadataSupportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataSupportPtrOutput)
}

func (i *metadataSupportPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetadataSupport] {
	return pulumix.Output[*MetadataSupport]{
		OutputState: i.ToMetadataSupportPtrOutputWithContext(ctx).OutputState,
	}
}

// Support information for the content item.
type MetadataSupportOutput struct{ *pulumi.OutputState }

func (MetadataSupportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSupport)(nil)).Elem()
}

func (o MetadataSupportOutput) ToMetadataSupportOutput() MetadataSupportOutput {
	return o
}

func (o MetadataSupportOutput) ToMetadataSupportOutputWithContext(ctx context.Context) MetadataSupportOutput {
	return o
}

func (o MetadataSupportOutput) ToMetadataSupportPtrOutput() MetadataSupportPtrOutput {
	return o.ToMetadataSupportPtrOutputWithContext(context.Background())
}

func (o MetadataSupportOutput) ToMetadataSupportPtrOutputWithContext(ctx context.Context) MetadataSupportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataSupport) *MetadataSupport {
		return &v
	}).(MetadataSupportPtrOutput)
}

func (o MetadataSupportOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataSupport] {
	return pulumix.Output[MetadataSupport]{
		OutputState: o.OutputState,
	}
}

// Email of support contact
func (o MetadataSupportOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupport) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Link for support help, like to support page to open a ticket etc.
func (o MetadataSupportOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupport) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Name of the support contact. Company or person.
func (o MetadataSupportOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupport) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of support for content item
func (o MetadataSupportOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSupport) string { return v.Tier }).(pulumi.StringOutput)
}

type MetadataSupportPtrOutput struct{ *pulumi.OutputState }

func (MetadataSupportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSupport)(nil)).Elem()
}

func (o MetadataSupportPtrOutput) ToMetadataSupportPtrOutput() MetadataSupportPtrOutput {
	return o
}

func (o MetadataSupportPtrOutput) ToMetadataSupportPtrOutputWithContext(ctx context.Context) MetadataSupportPtrOutput {
	return o
}

func (o MetadataSupportPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataSupport] {
	return pulumix.Output[*MetadataSupport]{
		OutputState: o.OutputState,
	}
}

func (o MetadataSupportPtrOutput) Elem() MetadataSupportOutput {
	return o.ApplyT(func(v *MetadataSupport) MetadataSupport {
		if v != nil {
			return *v
		}
		var ret MetadataSupport
		return ret
	}).(MetadataSupportOutput)
}

// Email of support contact
func (o MetadataSupportPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupport) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Link for support help, like to support page to open a ticket etc.
func (o MetadataSupportPtrOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupport) *string {
		if v == nil {
			return nil
		}
		return v.Link
	}).(pulumi.StringPtrOutput)
}

// Name of the support contact. Company or person.
func (o MetadataSupportPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupport) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Type of support for content item
func (o MetadataSupportPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupport) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// Support information for the content item.
type MetadataSupportResponse struct {
	// Email of support contact
	Email *string `pulumi:"email"`
	// Link for support help, like to support page to open a ticket etc.
	Link *string `pulumi:"link"`
	// Name of the support contact. Company or person.
	Name *string `pulumi:"name"`
	// Type of support for content item
	Tier string `pulumi:"tier"`
}

// Support information for the content item.
type MetadataSupportResponseOutput struct{ *pulumi.OutputState }

func (MetadataSupportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataSupportResponse)(nil)).Elem()
}

func (o MetadataSupportResponseOutput) ToMetadataSupportResponseOutput() MetadataSupportResponseOutput {
	return o
}

func (o MetadataSupportResponseOutput) ToMetadataSupportResponseOutputWithContext(ctx context.Context) MetadataSupportResponseOutput {
	return o
}

func (o MetadataSupportResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetadataSupportResponse] {
	return pulumix.Output[MetadataSupportResponse]{
		OutputState: o.OutputState,
	}
}

// Email of support contact
func (o MetadataSupportResponseOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupportResponse) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Link for support help, like to support page to open a ticket etc.
func (o MetadataSupportResponseOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupportResponse) *string { return v.Link }).(pulumi.StringPtrOutput)
}

// Name of the support contact. Company or person.
func (o MetadataSupportResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetadataSupportResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of support for content item
func (o MetadataSupportResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataSupportResponse) string { return v.Tier }).(pulumi.StringOutput)
}

type MetadataSupportResponsePtrOutput struct{ *pulumi.OutputState }

func (MetadataSupportResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataSupportResponse)(nil)).Elem()
}

func (o MetadataSupportResponsePtrOutput) ToMetadataSupportResponsePtrOutput() MetadataSupportResponsePtrOutput {
	return o
}

func (o MetadataSupportResponsePtrOutput) ToMetadataSupportResponsePtrOutputWithContext(ctx context.Context) MetadataSupportResponsePtrOutput {
	return o
}

func (o MetadataSupportResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetadataSupportResponse] {
	return pulumix.Output[*MetadataSupportResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetadataSupportResponsePtrOutput) Elem() MetadataSupportResponseOutput {
	return o.ApplyT(func(v *MetadataSupportResponse) MetadataSupportResponse {
		if v != nil {
			return *v
		}
		var ret MetadataSupportResponse
		return ret
	}).(MetadataSupportResponseOutput)
}

// Email of support contact
func (o MetadataSupportResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupportResponse) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// Link for support help, like to support page to open a ticket etc.
func (o MetadataSupportResponsePtrOutput) Link() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupportResponse) *string {
		if v == nil {
			return nil
		}
		return v.Link
	}).(pulumi.StringPtrOutput)
}

// Name of the support contact. Company or person.
func (o MetadataSupportResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupportResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Type of support for content item
func (o MetadataSupportResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetadataSupportResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Tier
	}).(pulumi.StringPtrOutput)
}

// The available data types for Microsoft Purview Information Protection data connector.
type MicrosoftPurviewInformationProtectionConnectorDataTypes struct {
	// Logs data type.
	Logs MicrosoftPurviewInformationProtectionConnectorDataTypesLogs `pulumi:"logs"`
}

// MicrosoftPurviewInformationProtectionConnectorDataTypesInput is an input type that accepts MicrosoftPurviewInformationProtectionConnectorDataTypesArgs and MicrosoftPurviewInformationProtectionConnectorDataTypesOutput values.
// You can construct a concrete instance of `MicrosoftPurviewInformationProtectionConnectorDataTypesInput` via:
//
//	MicrosoftPurviewInformationProtectionConnectorDataTypesArgs{...}
type MicrosoftPurviewInformationProtectionConnectorDataTypesInput interface {
	pulumi.Input

	ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesOutput
	ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutputWithContext(context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesOutput
}

// The available data types for Microsoft Purview Information Protection data connector.
type MicrosoftPurviewInformationProtectionConnectorDataTypesArgs struct {
	// Logs data type.
	Logs MicrosoftPurviewInformationProtectionConnectorDataTypesLogsInput `pulumi:"logs"`
}

func (MicrosoftPurviewInformationProtectionConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypes)(nil)).Elem()
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesArgs) ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesOutput {
	return i.ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutputWithContext(context.Background())
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesArgs) ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftPurviewInformationProtectionConnectorDataTypesOutput)
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypes] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypes]{
		OutputState: i.ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Microsoft Purview Information Protection data connector.
type MicrosoftPurviewInformationProtectionConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (MicrosoftPurviewInformationProtectionConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypes)(nil)).Elem()
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypes] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o MicrosoftPurviewInformationProtectionConnectorDataTypesOutput) Logs() MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput {
	return o.ApplyT(func(v MicrosoftPurviewInformationProtectionConnectorDataTypes) MicrosoftPurviewInformationProtectionConnectorDataTypesLogs {
		return v.Logs
	}).(MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput)
}

// Logs data type.
type MicrosoftPurviewInformationProtectionConnectorDataTypesLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// MicrosoftPurviewInformationProtectionConnectorDataTypesLogsInput is an input type that accepts MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs and MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput values.
// You can construct a concrete instance of `MicrosoftPurviewInformationProtectionConnectorDataTypesLogsInput` via:
//
//	MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs{...}
type MicrosoftPurviewInformationProtectionConnectorDataTypesLogsInput interface {
	pulumi.Input

	ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput
	ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutputWithContext(context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput
}

// Logs data type.
type MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypesLogs)(nil)).Elem()
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs) ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput {
	return i.ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutputWithContext(context.Background())
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs) ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput)
}

func (i MicrosoftPurviewInformationProtectionConnectorDataTypesLogsArgs) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesLogs] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesLogs]{
		OutputState: i.ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutputWithContext(ctx).OutputState,
	}
}

// Logs data type.
type MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput struct{ *pulumi.OutputState }

func (MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypesLogs)(nil)).Elem()
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesLogs] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftPurviewInformationProtectionConnectorDataTypesLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Microsoft Purview Information Protection data connector.
type MicrosoftPurviewInformationProtectionConnectorDataTypesResponse struct {
	// Logs data type.
	Logs MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs `pulumi:"logs"`
}

// The available data types for Microsoft Purview Information Protection data connector.
type MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypesResponse)(nil)).Elem()
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesResponse] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput) Logs() MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput {
	return o.ApplyT(func(v MicrosoftPurviewInformationProtectionConnectorDataTypesResponse) MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs {
		return v.Logs
	}).(MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput)
}

// Logs data type.
type MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Logs data type.
type MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput struct{ *pulumi.OutputState }

func (MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs)(nil)).Elem()
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput() MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput) ToMicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutputWithContext(ctx context.Context) MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput {
	return o
}

func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput) ToOutput(ctx context.Context) pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs] {
	return pulumix.Output[MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogs) string { return v.State }).(pulumi.StringOutput)
}

// Represents the connector's Filtered providers
type MtpFilteredProviders struct {
	// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
	Alerts []string `pulumi:"alerts"`
}

// MtpFilteredProvidersInput is an input type that accepts MtpFilteredProvidersArgs and MtpFilteredProvidersOutput values.
// You can construct a concrete instance of `MtpFilteredProvidersInput` via:
//
//	MtpFilteredProvidersArgs{...}
type MtpFilteredProvidersInput interface {
	pulumi.Input

	ToMtpFilteredProvidersOutput() MtpFilteredProvidersOutput
	ToMtpFilteredProvidersOutputWithContext(context.Context) MtpFilteredProvidersOutput
}

// Represents the connector's Filtered providers
type MtpFilteredProvidersArgs struct {
	// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
	Alerts pulumi.StringArrayInput `pulumi:"alerts"`
}

func (MtpFilteredProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MtpFilteredProviders)(nil)).Elem()
}

func (i MtpFilteredProvidersArgs) ToMtpFilteredProvidersOutput() MtpFilteredProvidersOutput {
	return i.ToMtpFilteredProvidersOutputWithContext(context.Background())
}

func (i MtpFilteredProvidersArgs) ToMtpFilteredProvidersOutputWithContext(ctx context.Context) MtpFilteredProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtpFilteredProvidersOutput)
}

func (i MtpFilteredProvidersArgs) ToOutput(ctx context.Context) pulumix.Output[MtpFilteredProviders] {
	return pulumix.Output[MtpFilteredProviders]{
		OutputState: i.ToMtpFilteredProvidersOutputWithContext(ctx).OutputState,
	}
}

func (i MtpFilteredProvidersArgs) ToMtpFilteredProvidersPtrOutput() MtpFilteredProvidersPtrOutput {
	return i.ToMtpFilteredProvidersPtrOutputWithContext(context.Background())
}

func (i MtpFilteredProvidersArgs) ToMtpFilteredProvidersPtrOutputWithContext(ctx context.Context) MtpFilteredProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtpFilteredProvidersOutput).ToMtpFilteredProvidersPtrOutputWithContext(ctx)
}

// MtpFilteredProvidersPtrInput is an input type that accepts MtpFilteredProvidersArgs, MtpFilteredProvidersPtr and MtpFilteredProvidersPtrOutput values.
// You can construct a concrete instance of `MtpFilteredProvidersPtrInput` via:
//
//	        MtpFilteredProvidersArgs{...}
//
//	or:
//
//	        nil
type MtpFilteredProvidersPtrInput interface {
	pulumi.Input

	ToMtpFilteredProvidersPtrOutput() MtpFilteredProvidersPtrOutput
	ToMtpFilteredProvidersPtrOutputWithContext(context.Context) MtpFilteredProvidersPtrOutput
}

type mtpFilteredProvidersPtrType MtpFilteredProvidersArgs

func MtpFilteredProvidersPtr(v *MtpFilteredProvidersArgs) MtpFilteredProvidersPtrInput {
	return (*mtpFilteredProvidersPtrType)(v)
}

func (*mtpFilteredProvidersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MtpFilteredProviders)(nil)).Elem()
}

func (i *mtpFilteredProvidersPtrType) ToMtpFilteredProvidersPtrOutput() MtpFilteredProvidersPtrOutput {
	return i.ToMtpFilteredProvidersPtrOutputWithContext(context.Background())
}

func (i *mtpFilteredProvidersPtrType) ToMtpFilteredProvidersPtrOutputWithContext(ctx context.Context) MtpFilteredProvidersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MtpFilteredProvidersPtrOutput)
}

func (i *mtpFilteredProvidersPtrType) ToOutput(ctx context.Context) pulumix.Output[*MtpFilteredProviders] {
	return pulumix.Output[*MtpFilteredProviders]{
		OutputState: i.ToMtpFilteredProvidersPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents the connector's Filtered providers
type MtpFilteredProvidersOutput struct{ *pulumi.OutputState }

func (MtpFilteredProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MtpFilteredProviders)(nil)).Elem()
}

func (o MtpFilteredProvidersOutput) ToMtpFilteredProvidersOutput() MtpFilteredProvidersOutput {
	return o
}

func (o MtpFilteredProvidersOutput) ToMtpFilteredProvidersOutputWithContext(ctx context.Context) MtpFilteredProvidersOutput {
	return o
}

func (o MtpFilteredProvidersOutput) ToMtpFilteredProvidersPtrOutput() MtpFilteredProvidersPtrOutput {
	return o.ToMtpFilteredProvidersPtrOutputWithContext(context.Background())
}

func (o MtpFilteredProvidersOutput) ToMtpFilteredProvidersPtrOutputWithContext(ctx context.Context) MtpFilteredProvidersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MtpFilteredProviders) *MtpFilteredProviders {
		return &v
	}).(MtpFilteredProvidersPtrOutput)
}

func (o MtpFilteredProvidersOutput) ToOutput(ctx context.Context) pulumix.Output[MtpFilteredProviders] {
	return pulumix.Output[MtpFilteredProviders]{
		OutputState: o.OutputState,
	}
}

// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
func (o MtpFilteredProvidersOutput) Alerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MtpFilteredProviders) []string { return v.Alerts }).(pulumi.StringArrayOutput)
}

type MtpFilteredProvidersPtrOutput struct{ *pulumi.OutputState }

func (MtpFilteredProvidersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtpFilteredProviders)(nil)).Elem()
}

func (o MtpFilteredProvidersPtrOutput) ToMtpFilteredProvidersPtrOutput() MtpFilteredProvidersPtrOutput {
	return o
}

func (o MtpFilteredProvidersPtrOutput) ToMtpFilteredProvidersPtrOutputWithContext(ctx context.Context) MtpFilteredProvidersPtrOutput {
	return o
}

func (o MtpFilteredProvidersPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MtpFilteredProviders] {
	return pulumix.Output[*MtpFilteredProviders]{
		OutputState: o.OutputState,
	}
}

func (o MtpFilteredProvidersPtrOutput) Elem() MtpFilteredProvidersOutput {
	return o.ApplyT(func(v *MtpFilteredProviders) MtpFilteredProviders {
		if v != nil {
			return *v
		}
		var ret MtpFilteredProviders
		return ret
	}).(MtpFilteredProvidersOutput)
}

// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
func (o MtpFilteredProvidersPtrOutput) Alerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MtpFilteredProviders) []string {
		if v == nil {
			return nil
		}
		return v.Alerts
	}).(pulumi.StringArrayOutput)
}

// Represents the connector's Filtered providers
type MtpFilteredProvidersResponse struct {
	// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
	Alerts []string `pulumi:"alerts"`
}

// Represents the connector's Filtered providers
type MtpFilteredProvidersResponseOutput struct{ *pulumi.OutputState }

func (MtpFilteredProvidersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MtpFilteredProvidersResponse)(nil)).Elem()
}

func (o MtpFilteredProvidersResponseOutput) ToMtpFilteredProvidersResponseOutput() MtpFilteredProvidersResponseOutput {
	return o
}

func (o MtpFilteredProvidersResponseOutput) ToMtpFilteredProvidersResponseOutputWithContext(ctx context.Context) MtpFilteredProvidersResponseOutput {
	return o
}

func (o MtpFilteredProvidersResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MtpFilteredProvidersResponse] {
	return pulumix.Output[MtpFilteredProvidersResponse]{
		OutputState: o.OutputState,
	}
}

// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
func (o MtpFilteredProvidersResponseOutput) Alerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MtpFilteredProvidersResponse) []string { return v.Alerts }).(pulumi.StringArrayOutput)
}

type MtpFilteredProvidersResponsePtrOutput struct{ *pulumi.OutputState }

func (MtpFilteredProvidersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MtpFilteredProvidersResponse)(nil)).Elem()
}

func (o MtpFilteredProvidersResponsePtrOutput) ToMtpFilteredProvidersResponsePtrOutput() MtpFilteredProvidersResponsePtrOutput {
	return o
}

func (o MtpFilteredProvidersResponsePtrOutput) ToMtpFilteredProvidersResponsePtrOutputWithContext(ctx context.Context) MtpFilteredProvidersResponsePtrOutput {
	return o
}

func (o MtpFilteredProvidersResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MtpFilteredProvidersResponse] {
	return pulumix.Output[*MtpFilteredProvidersResponse]{
		OutputState: o.OutputState,
	}
}

func (o MtpFilteredProvidersResponsePtrOutput) Elem() MtpFilteredProvidersResponseOutput {
	return o.ApplyT(func(v *MtpFilteredProvidersResponse) MtpFilteredProvidersResponse {
		if v != nil {
			return *v
		}
		var ret MtpFilteredProvidersResponse
		return ret
	}).(MtpFilteredProvidersResponseOutput)
}

// Alerts filtered providers. When filters are not applied, all alerts will stream through the MTP pipeline, still in private preview for all products EXCEPT MDA and MDI, which are in GA state.
func (o MtpFilteredProvidersResponsePtrOutput) Alerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MtpFilteredProvidersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Alerts
	}).(pulumi.StringArrayOutput)
}

// The available data types for Office Microsoft Project data connector.
type Office365ProjectConnectorDataTypes struct {
	// Logs data type.
	Logs Office365ProjectConnectorDataTypesLogs `pulumi:"logs"`
}

// Office365ProjectConnectorDataTypesInput is an input type that accepts Office365ProjectConnectorDataTypesArgs and Office365ProjectConnectorDataTypesOutput values.
// You can construct a concrete instance of `Office365ProjectConnectorDataTypesInput` via:
//
//	Office365ProjectConnectorDataTypesArgs{...}
type Office365ProjectConnectorDataTypesInput interface {
	pulumi.Input

	ToOffice365ProjectConnectorDataTypesOutput() Office365ProjectConnectorDataTypesOutput
	ToOffice365ProjectConnectorDataTypesOutputWithContext(context.Context) Office365ProjectConnectorDataTypesOutput
}

// The available data types for Office Microsoft Project data connector.
type Office365ProjectConnectorDataTypesArgs struct {
	// Logs data type.
	Logs Office365ProjectConnectorDataTypesLogsInput `pulumi:"logs"`
}

func (Office365ProjectConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypes)(nil)).Elem()
}

func (i Office365ProjectConnectorDataTypesArgs) ToOffice365ProjectConnectorDataTypesOutput() Office365ProjectConnectorDataTypesOutput {
	return i.ToOffice365ProjectConnectorDataTypesOutputWithContext(context.Background())
}

func (i Office365ProjectConnectorDataTypesArgs) ToOffice365ProjectConnectorDataTypesOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365ProjectConnectorDataTypesOutput)
}

func (i Office365ProjectConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypes] {
	return pulumix.Output[Office365ProjectConnectorDataTypes]{
		OutputState: i.ToOffice365ProjectConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Office Microsoft Project data connector.
type Office365ProjectConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (Office365ProjectConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypes)(nil)).Elem()
}

func (o Office365ProjectConnectorDataTypesOutput) ToOffice365ProjectConnectorDataTypesOutput() Office365ProjectConnectorDataTypesOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesOutput) ToOffice365ProjectConnectorDataTypesOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypes] {
	return pulumix.Output[Office365ProjectConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o Office365ProjectConnectorDataTypesOutput) Logs() Office365ProjectConnectorDataTypesLogsOutput {
	return o.ApplyT(func(v Office365ProjectConnectorDataTypes) Office365ProjectConnectorDataTypesLogs { return v.Logs }).(Office365ProjectConnectorDataTypesLogsOutput)
}

// Logs data type.
type Office365ProjectConnectorDataTypesLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Office365ProjectConnectorDataTypesLogsInput is an input type that accepts Office365ProjectConnectorDataTypesLogsArgs and Office365ProjectConnectorDataTypesLogsOutput values.
// You can construct a concrete instance of `Office365ProjectConnectorDataTypesLogsInput` via:
//
//	Office365ProjectConnectorDataTypesLogsArgs{...}
type Office365ProjectConnectorDataTypesLogsInput interface {
	pulumi.Input

	ToOffice365ProjectConnectorDataTypesLogsOutput() Office365ProjectConnectorDataTypesLogsOutput
	ToOffice365ProjectConnectorDataTypesLogsOutputWithContext(context.Context) Office365ProjectConnectorDataTypesLogsOutput
}

// Logs data type.
type Office365ProjectConnectorDataTypesLogsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (Office365ProjectConnectorDataTypesLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypesLogs)(nil)).Elem()
}

func (i Office365ProjectConnectorDataTypesLogsArgs) ToOffice365ProjectConnectorDataTypesLogsOutput() Office365ProjectConnectorDataTypesLogsOutput {
	return i.ToOffice365ProjectConnectorDataTypesLogsOutputWithContext(context.Background())
}

func (i Office365ProjectConnectorDataTypesLogsArgs) ToOffice365ProjectConnectorDataTypesLogsOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Office365ProjectConnectorDataTypesLogsOutput)
}

func (i Office365ProjectConnectorDataTypesLogsArgs) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypesLogs] {
	return pulumix.Output[Office365ProjectConnectorDataTypesLogs]{
		OutputState: i.ToOffice365ProjectConnectorDataTypesLogsOutputWithContext(ctx).OutputState,
	}
}

// Logs data type.
type Office365ProjectConnectorDataTypesLogsOutput struct{ *pulumi.OutputState }

func (Office365ProjectConnectorDataTypesLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypesLogs)(nil)).Elem()
}

func (o Office365ProjectConnectorDataTypesLogsOutput) ToOffice365ProjectConnectorDataTypesLogsOutput() Office365ProjectConnectorDataTypesLogsOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesLogsOutput) ToOffice365ProjectConnectorDataTypesLogsOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesLogsOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesLogsOutput) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypesLogs] {
	return pulumix.Output[Office365ProjectConnectorDataTypesLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o Office365ProjectConnectorDataTypesLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v Office365ProjectConnectorDataTypesLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Office Microsoft Project data connector.
type Office365ProjectConnectorDataTypesResponse struct {
	// Logs data type.
	Logs Office365ProjectConnectorDataTypesResponseLogs `pulumi:"logs"`
}

// The available data types for Office Microsoft Project data connector.
type Office365ProjectConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (Office365ProjectConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypesResponse)(nil)).Elem()
}

func (o Office365ProjectConnectorDataTypesResponseOutput) ToOffice365ProjectConnectorDataTypesResponseOutput() Office365ProjectConnectorDataTypesResponseOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesResponseOutput) ToOffice365ProjectConnectorDataTypesResponseOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesResponseOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypesResponse] {
	return pulumix.Output[Office365ProjectConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o Office365ProjectConnectorDataTypesResponseOutput) Logs() Office365ProjectConnectorDataTypesResponseLogsOutput {
	return o.ApplyT(func(v Office365ProjectConnectorDataTypesResponse) Office365ProjectConnectorDataTypesResponseLogs {
		return v.Logs
	}).(Office365ProjectConnectorDataTypesResponseLogsOutput)
}

// Logs data type.
type Office365ProjectConnectorDataTypesResponseLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Logs data type.
type Office365ProjectConnectorDataTypesResponseLogsOutput struct{ *pulumi.OutputState }

func (Office365ProjectConnectorDataTypesResponseLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Office365ProjectConnectorDataTypesResponseLogs)(nil)).Elem()
}

func (o Office365ProjectConnectorDataTypesResponseLogsOutput) ToOffice365ProjectConnectorDataTypesResponseLogsOutput() Office365ProjectConnectorDataTypesResponseLogsOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesResponseLogsOutput) ToOffice365ProjectConnectorDataTypesResponseLogsOutputWithContext(ctx context.Context) Office365ProjectConnectorDataTypesResponseLogsOutput {
	return o
}

func (o Office365ProjectConnectorDataTypesResponseLogsOutput) ToOutput(ctx context.Context) pulumix.Output[Office365ProjectConnectorDataTypesResponseLogs] {
	return pulumix.Output[Office365ProjectConnectorDataTypesResponseLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o Office365ProjectConnectorDataTypesResponseLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v Office365ProjectConnectorDataTypesResponseLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for office data connector.
type OfficeDataConnectorDataTypes struct {
	// Exchange data type connection.
	Exchange OfficeDataConnectorDataTypesExchange `pulumi:"exchange"`
	// SharePoint data type connection.
	SharePoint OfficeDataConnectorDataTypesSharePoint `pulumi:"sharePoint"`
	// Teams data type connection.
	Teams OfficeDataConnectorDataTypesTeams `pulumi:"teams"`
}

// OfficeDataConnectorDataTypesInput is an input type that accepts OfficeDataConnectorDataTypesArgs and OfficeDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `OfficeDataConnectorDataTypesInput` via:
//
//	OfficeDataConnectorDataTypesArgs{...}
type OfficeDataConnectorDataTypesInput interface {
	pulumi.Input

	ToOfficeDataConnectorDataTypesOutput() OfficeDataConnectorDataTypesOutput
	ToOfficeDataConnectorDataTypesOutputWithContext(context.Context) OfficeDataConnectorDataTypesOutput
}

// The available data types for office data connector.
type OfficeDataConnectorDataTypesArgs struct {
	// Exchange data type connection.
	Exchange OfficeDataConnectorDataTypesExchangeInput `pulumi:"exchange"`
	// SharePoint data type connection.
	SharePoint OfficeDataConnectorDataTypesSharePointInput `pulumi:"sharePoint"`
	// Teams data type connection.
	Teams OfficeDataConnectorDataTypesTeamsInput `pulumi:"teams"`
}

func (OfficeDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypes)(nil)).Elem()
}

func (i OfficeDataConnectorDataTypesArgs) ToOfficeDataConnectorDataTypesOutput() OfficeDataConnectorDataTypesOutput {
	return i.ToOfficeDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i OfficeDataConnectorDataTypesArgs) ToOfficeDataConnectorDataTypesOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficeDataConnectorDataTypesOutput)
}

func (i OfficeDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypes] {
	return pulumix.Output[OfficeDataConnectorDataTypes]{
		OutputState: i.ToOfficeDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for office data connector.
type OfficeDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypes)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesOutput) ToOfficeDataConnectorDataTypesOutput() OfficeDataConnectorDataTypesOutput {
	return o
}

func (o OfficeDataConnectorDataTypesOutput) ToOfficeDataConnectorDataTypesOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesOutput {
	return o
}

func (o OfficeDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypes] {
	return pulumix.Output[OfficeDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Exchange data type connection.
func (o OfficeDataConnectorDataTypesOutput) Exchange() OfficeDataConnectorDataTypesExchangeOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypes) OfficeDataConnectorDataTypesExchange { return v.Exchange }).(OfficeDataConnectorDataTypesExchangeOutput)
}

// SharePoint data type connection.
func (o OfficeDataConnectorDataTypesOutput) SharePoint() OfficeDataConnectorDataTypesSharePointOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypes) OfficeDataConnectorDataTypesSharePoint { return v.SharePoint }).(OfficeDataConnectorDataTypesSharePointOutput)
}

// Teams data type connection.
func (o OfficeDataConnectorDataTypesOutput) Teams() OfficeDataConnectorDataTypesTeamsOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypes) OfficeDataConnectorDataTypesTeams { return v.Teams }).(OfficeDataConnectorDataTypesTeamsOutput)
}

// Exchange data type connection.
type OfficeDataConnectorDataTypesExchange struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// OfficeDataConnectorDataTypesExchangeInput is an input type that accepts OfficeDataConnectorDataTypesExchangeArgs and OfficeDataConnectorDataTypesExchangeOutput values.
// You can construct a concrete instance of `OfficeDataConnectorDataTypesExchangeInput` via:
//
//	OfficeDataConnectorDataTypesExchangeArgs{...}
type OfficeDataConnectorDataTypesExchangeInput interface {
	pulumi.Input

	ToOfficeDataConnectorDataTypesExchangeOutput() OfficeDataConnectorDataTypesExchangeOutput
	ToOfficeDataConnectorDataTypesExchangeOutputWithContext(context.Context) OfficeDataConnectorDataTypesExchangeOutput
}

// Exchange data type connection.
type OfficeDataConnectorDataTypesExchangeArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (OfficeDataConnectorDataTypesExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesExchange)(nil)).Elem()
}

func (i OfficeDataConnectorDataTypesExchangeArgs) ToOfficeDataConnectorDataTypesExchangeOutput() OfficeDataConnectorDataTypesExchangeOutput {
	return i.ToOfficeDataConnectorDataTypesExchangeOutputWithContext(context.Background())
}

func (i OfficeDataConnectorDataTypesExchangeArgs) ToOfficeDataConnectorDataTypesExchangeOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficeDataConnectorDataTypesExchangeOutput)
}

func (i OfficeDataConnectorDataTypesExchangeArgs) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesExchange] {
	return pulumix.Output[OfficeDataConnectorDataTypesExchange]{
		OutputState: i.ToOfficeDataConnectorDataTypesExchangeOutputWithContext(ctx).OutputState,
	}
}

// Exchange data type connection.
type OfficeDataConnectorDataTypesExchangeOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesExchange)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesExchangeOutput) ToOfficeDataConnectorDataTypesExchangeOutput() OfficeDataConnectorDataTypesExchangeOutput {
	return o
}

func (o OfficeDataConnectorDataTypesExchangeOutput) ToOfficeDataConnectorDataTypesExchangeOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesExchangeOutput {
	return o
}

func (o OfficeDataConnectorDataTypesExchangeOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesExchange] {
	return pulumix.Output[OfficeDataConnectorDataTypesExchange]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesExchangeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesExchange) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for office data connector.
type OfficeDataConnectorDataTypesResponse struct {
	// Exchange data type connection.
	Exchange OfficeDataConnectorDataTypesResponseExchange `pulumi:"exchange"`
	// SharePoint data type connection.
	SharePoint OfficeDataConnectorDataTypesResponseSharePoint `pulumi:"sharePoint"`
	// Teams data type connection.
	Teams OfficeDataConnectorDataTypesResponseTeams `pulumi:"teams"`
}

// The available data types for office data connector.
type OfficeDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesResponseOutput) ToOfficeDataConnectorDataTypesResponseOutput() OfficeDataConnectorDataTypesResponseOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseOutput) ToOfficeDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesResponseOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesResponse] {
	return pulumix.Output[OfficeDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Exchange data type connection.
func (o OfficeDataConnectorDataTypesResponseOutput) Exchange() OfficeDataConnectorDataTypesResponseExchangeOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponse) OfficeDataConnectorDataTypesResponseExchange {
		return v.Exchange
	}).(OfficeDataConnectorDataTypesResponseExchangeOutput)
}

// SharePoint data type connection.
func (o OfficeDataConnectorDataTypesResponseOutput) SharePoint() OfficeDataConnectorDataTypesResponseSharePointOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponse) OfficeDataConnectorDataTypesResponseSharePoint {
		return v.SharePoint
	}).(OfficeDataConnectorDataTypesResponseSharePointOutput)
}

// Teams data type connection.
func (o OfficeDataConnectorDataTypesResponseOutput) Teams() OfficeDataConnectorDataTypesResponseTeamsOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponse) OfficeDataConnectorDataTypesResponseTeams { return v.Teams }).(OfficeDataConnectorDataTypesResponseTeamsOutput)
}

// Exchange data type connection.
type OfficeDataConnectorDataTypesResponseExchange struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Exchange data type connection.
type OfficeDataConnectorDataTypesResponseExchangeOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesResponseExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesResponseExchange)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesResponseExchangeOutput) ToOfficeDataConnectorDataTypesResponseExchangeOutput() OfficeDataConnectorDataTypesResponseExchangeOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseExchangeOutput) ToOfficeDataConnectorDataTypesResponseExchangeOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesResponseExchangeOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseExchangeOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesResponseExchange] {
	return pulumix.Output[OfficeDataConnectorDataTypesResponseExchange]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesResponseExchangeOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponseExchange) string { return v.State }).(pulumi.StringOutput)
}

// SharePoint data type connection.
type OfficeDataConnectorDataTypesResponseSharePoint struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// SharePoint data type connection.
type OfficeDataConnectorDataTypesResponseSharePointOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesResponseSharePointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesResponseSharePoint)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesResponseSharePointOutput) ToOfficeDataConnectorDataTypesResponseSharePointOutput() OfficeDataConnectorDataTypesResponseSharePointOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseSharePointOutput) ToOfficeDataConnectorDataTypesResponseSharePointOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesResponseSharePointOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseSharePointOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesResponseSharePoint] {
	return pulumix.Output[OfficeDataConnectorDataTypesResponseSharePoint]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesResponseSharePointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponseSharePoint) string { return v.State }).(pulumi.StringOutput)
}

// Teams data type connection.
type OfficeDataConnectorDataTypesResponseTeams struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Teams data type connection.
type OfficeDataConnectorDataTypesResponseTeamsOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesResponseTeamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesResponseTeams)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesResponseTeamsOutput) ToOfficeDataConnectorDataTypesResponseTeamsOutput() OfficeDataConnectorDataTypesResponseTeamsOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseTeamsOutput) ToOfficeDataConnectorDataTypesResponseTeamsOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesResponseTeamsOutput {
	return o
}

func (o OfficeDataConnectorDataTypesResponseTeamsOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesResponseTeams] {
	return pulumix.Output[OfficeDataConnectorDataTypesResponseTeams]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesResponseTeamsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesResponseTeams) string { return v.State }).(pulumi.StringOutput)
}

// SharePoint data type connection.
type OfficeDataConnectorDataTypesSharePoint struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// OfficeDataConnectorDataTypesSharePointInput is an input type that accepts OfficeDataConnectorDataTypesSharePointArgs and OfficeDataConnectorDataTypesSharePointOutput values.
// You can construct a concrete instance of `OfficeDataConnectorDataTypesSharePointInput` via:
//
//	OfficeDataConnectorDataTypesSharePointArgs{...}
type OfficeDataConnectorDataTypesSharePointInput interface {
	pulumi.Input

	ToOfficeDataConnectorDataTypesSharePointOutput() OfficeDataConnectorDataTypesSharePointOutput
	ToOfficeDataConnectorDataTypesSharePointOutputWithContext(context.Context) OfficeDataConnectorDataTypesSharePointOutput
}

// SharePoint data type connection.
type OfficeDataConnectorDataTypesSharePointArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (OfficeDataConnectorDataTypesSharePointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesSharePoint)(nil)).Elem()
}

func (i OfficeDataConnectorDataTypesSharePointArgs) ToOfficeDataConnectorDataTypesSharePointOutput() OfficeDataConnectorDataTypesSharePointOutput {
	return i.ToOfficeDataConnectorDataTypesSharePointOutputWithContext(context.Background())
}

func (i OfficeDataConnectorDataTypesSharePointArgs) ToOfficeDataConnectorDataTypesSharePointOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesSharePointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficeDataConnectorDataTypesSharePointOutput)
}

func (i OfficeDataConnectorDataTypesSharePointArgs) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesSharePoint] {
	return pulumix.Output[OfficeDataConnectorDataTypesSharePoint]{
		OutputState: i.ToOfficeDataConnectorDataTypesSharePointOutputWithContext(ctx).OutputState,
	}
}

// SharePoint data type connection.
type OfficeDataConnectorDataTypesSharePointOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesSharePointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesSharePoint)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesSharePointOutput) ToOfficeDataConnectorDataTypesSharePointOutput() OfficeDataConnectorDataTypesSharePointOutput {
	return o
}

func (o OfficeDataConnectorDataTypesSharePointOutput) ToOfficeDataConnectorDataTypesSharePointOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesSharePointOutput {
	return o
}

func (o OfficeDataConnectorDataTypesSharePointOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesSharePoint] {
	return pulumix.Output[OfficeDataConnectorDataTypesSharePoint]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesSharePointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesSharePoint) string { return v.State }).(pulumi.StringOutput)
}

// Teams data type connection.
type OfficeDataConnectorDataTypesTeams struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// OfficeDataConnectorDataTypesTeamsInput is an input type that accepts OfficeDataConnectorDataTypesTeamsArgs and OfficeDataConnectorDataTypesTeamsOutput values.
// You can construct a concrete instance of `OfficeDataConnectorDataTypesTeamsInput` via:
//
//	OfficeDataConnectorDataTypesTeamsArgs{...}
type OfficeDataConnectorDataTypesTeamsInput interface {
	pulumi.Input

	ToOfficeDataConnectorDataTypesTeamsOutput() OfficeDataConnectorDataTypesTeamsOutput
	ToOfficeDataConnectorDataTypesTeamsOutputWithContext(context.Context) OfficeDataConnectorDataTypesTeamsOutput
}

// Teams data type connection.
type OfficeDataConnectorDataTypesTeamsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (OfficeDataConnectorDataTypesTeamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesTeams)(nil)).Elem()
}

func (i OfficeDataConnectorDataTypesTeamsArgs) ToOfficeDataConnectorDataTypesTeamsOutput() OfficeDataConnectorDataTypesTeamsOutput {
	return i.ToOfficeDataConnectorDataTypesTeamsOutputWithContext(context.Background())
}

func (i OfficeDataConnectorDataTypesTeamsArgs) ToOfficeDataConnectorDataTypesTeamsOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesTeamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficeDataConnectorDataTypesTeamsOutput)
}

func (i OfficeDataConnectorDataTypesTeamsArgs) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesTeams] {
	return pulumix.Output[OfficeDataConnectorDataTypesTeams]{
		OutputState: i.ToOfficeDataConnectorDataTypesTeamsOutputWithContext(ctx).OutputState,
	}
}

// Teams data type connection.
type OfficeDataConnectorDataTypesTeamsOutput struct{ *pulumi.OutputState }

func (OfficeDataConnectorDataTypesTeamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficeDataConnectorDataTypesTeams)(nil)).Elem()
}

func (o OfficeDataConnectorDataTypesTeamsOutput) ToOfficeDataConnectorDataTypesTeamsOutput() OfficeDataConnectorDataTypesTeamsOutput {
	return o
}

func (o OfficeDataConnectorDataTypesTeamsOutput) ToOfficeDataConnectorDataTypesTeamsOutputWithContext(ctx context.Context) OfficeDataConnectorDataTypesTeamsOutput {
	return o
}

func (o OfficeDataConnectorDataTypesTeamsOutput) ToOutput(ctx context.Context) pulumix.Output[OfficeDataConnectorDataTypesTeams] {
	return pulumix.Output[OfficeDataConnectorDataTypesTeams]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficeDataConnectorDataTypesTeamsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficeDataConnectorDataTypesTeams) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Office Microsoft PowerBI data connector.
type OfficePowerBIConnectorDataTypes struct {
	// Logs data type.
	Logs OfficePowerBIConnectorDataTypesLogs `pulumi:"logs"`
}

// OfficePowerBIConnectorDataTypesInput is an input type that accepts OfficePowerBIConnectorDataTypesArgs and OfficePowerBIConnectorDataTypesOutput values.
// You can construct a concrete instance of `OfficePowerBIConnectorDataTypesInput` via:
//
//	OfficePowerBIConnectorDataTypesArgs{...}
type OfficePowerBIConnectorDataTypesInput interface {
	pulumi.Input

	ToOfficePowerBIConnectorDataTypesOutput() OfficePowerBIConnectorDataTypesOutput
	ToOfficePowerBIConnectorDataTypesOutputWithContext(context.Context) OfficePowerBIConnectorDataTypesOutput
}

// The available data types for Office Microsoft PowerBI data connector.
type OfficePowerBIConnectorDataTypesArgs struct {
	// Logs data type.
	Logs OfficePowerBIConnectorDataTypesLogsInput `pulumi:"logs"`
}

func (OfficePowerBIConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypes)(nil)).Elem()
}

func (i OfficePowerBIConnectorDataTypesArgs) ToOfficePowerBIConnectorDataTypesOutput() OfficePowerBIConnectorDataTypesOutput {
	return i.ToOfficePowerBIConnectorDataTypesOutputWithContext(context.Background())
}

func (i OfficePowerBIConnectorDataTypesArgs) ToOfficePowerBIConnectorDataTypesOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficePowerBIConnectorDataTypesOutput)
}

func (i OfficePowerBIConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypes] {
	return pulumix.Output[OfficePowerBIConnectorDataTypes]{
		OutputState: i.ToOfficePowerBIConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Office Microsoft PowerBI data connector.
type OfficePowerBIConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (OfficePowerBIConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypes)(nil)).Elem()
}

func (o OfficePowerBIConnectorDataTypesOutput) ToOfficePowerBIConnectorDataTypesOutput() OfficePowerBIConnectorDataTypesOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesOutput) ToOfficePowerBIConnectorDataTypesOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypes] {
	return pulumix.Output[OfficePowerBIConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o OfficePowerBIConnectorDataTypesOutput) Logs() OfficePowerBIConnectorDataTypesLogsOutput {
	return o.ApplyT(func(v OfficePowerBIConnectorDataTypes) OfficePowerBIConnectorDataTypesLogs { return v.Logs }).(OfficePowerBIConnectorDataTypesLogsOutput)
}

// Logs data type.
type OfficePowerBIConnectorDataTypesLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// OfficePowerBIConnectorDataTypesLogsInput is an input type that accepts OfficePowerBIConnectorDataTypesLogsArgs and OfficePowerBIConnectorDataTypesLogsOutput values.
// You can construct a concrete instance of `OfficePowerBIConnectorDataTypesLogsInput` via:
//
//	OfficePowerBIConnectorDataTypesLogsArgs{...}
type OfficePowerBIConnectorDataTypesLogsInput interface {
	pulumi.Input

	ToOfficePowerBIConnectorDataTypesLogsOutput() OfficePowerBIConnectorDataTypesLogsOutput
	ToOfficePowerBIConnectorDataTypesLogsOutputWithContext(context.Context) OfficePowerBIConnectorDataTypesLogsOutput
}

// Logs data type.
type OfficePowerBIConnectorDataTypesLogsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (OfficePowerBIConnectorDataTypesLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypesLogs)(nil)).Elem()
}

func (i OfficePowerBIConnectorDataTypesLogsArgs) ToOfficePowerBIConnectorDataTypesLogsOutput() OfficePowerBIConnectorDataTypesLogsOutput {
	return i.ToOfficePowerBIConnectorDataTypesLogsOutputWithContext(context.Background())
}

func (i OfficePowerBIConnectorDataTypesLogsArgs) ToOfficePowerBIConnectorDataTypesLogsOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OfficePowerBIConnectorDataTypesLogsOutput)
}

func (i OfficePowerBIConnectorDataTypesLogsArgs) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypesLogs] {
	return pulumix.Output[OfficePowerBIConnectorDataTypesLogs]{
		OutputState: i.ToOfficePowerBIConnectorDataTypesLogsOutputWithContext(ctx).OutputState,
	}
}

// Logs data type.
type OfficePowerBIConnectorDataTypesLogsOutput struct{ *pulumi.OutputState }

func (OfficePowerBIConnectorDataTypesLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypesLogs)(nil)).Elem()
}

func (o OfficePowerBIConnectorDataTypesLogsOutput) ToOfficePowerBIConnectorDataTypesLogsOutput() OfficePowerBIConnectorDataTypesLogsOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesLogsOutput) ToOfficePowerBIConnectorDataTypesLogsOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesLogsOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesLogsOutput) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypesLogs] {
	return pulumix.Output[OfficePowerBIConnectorDataTypesLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficePowerBIConnectorDataTypesLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficePowerBIConnectorDataTypesLogs) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for Office Microsoft PowerBI data connector.
type OfficePowerBIConnectorDataTypesResponse struct {
	// Logs data type.
	Logs OfficePowerBIConnectorDataTypesResponseLogs `pulumi:"logs"`
}

// The available data types for Office Microsoft PowerBI data connector.
type OfficePowerBIConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (OfficePowerBIConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypesResponse)(nil)).Elem()
}

func (o OfficePowerBIConnectorDataTypesResponseOutput) ToOfficePowerBIConnectorDataTypesResponseOutput() OfficePowerBIConnectorDataTypesResponseOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesResponseOutput) ToOfficePowerBIConnectorDataTypesResponseOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesResponseOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypesResponse] {
	return pulumix.Output[OfficePowerBIConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Logs data type.
func (o OfficePowerBIConnectorDataTypesResponseOutput) Logs() OfficePowerBIConnectorDataTypesResponseLogsOutput {
	return o.ApplyT(func(v OfficePowerBIConnectorDataTypesResponse) OfficePowerBIConnectorDataTypesResponseLogs {
		return v.Logs
	}).(OfficePowerBIConnectorDataTypesResponseLogsOutput)
}

// Logs data type.
type OfficePowerBIConnectorDataTypesResponseLogs struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Logs data type.
type OfficePowerBIConnectorDataTypesResponseLogsOutput struct{ *pulumi.OutputState }

func (OfficePowerBIConnectorDataTypesResponseLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OfficePowerBIConnectorDataTypesResponseLogs)(nil)).Elem()
}

func (o OfficePowerBIConnectorDataTypesResponseLogsOutput) ToOfficePowerBIConnectorDataTypesResponseLogsOutput() OfficePowerBIConnectorDataTypesResponseLogsOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesResponseLogsOutput) ToOfficePowerBIConnectorDataTypesResponseLogsOutputWithContext(ctx context.Context) OfficePowerBIConnectorDataTypesResponseLogsOutput {
	return o
}

func (o OfficePowerBIConnectorDataTypesResponseLogsOutput) ToOutput(ctx context.Context) pulumix.Output[OfficePowerBIConnectorDataTypesResponseLogs] {
	return pulumix.Output[OfficePowerBIConnectorDataTypesResponseLogs]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o OfficePowerBIConnectorDataTypesResponseLogsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v OfficePowerBIConnectorDataTypesResponseLogs) string { return v.State }).(pulumi.StringOutput)
}

// Permissions required for the connector
type Permissions struct {
	// Customs permissions required for the connector
	Customs []PermissionsCustoms `pulumi:"customs"`
	// Resource provider permissions required for the connector
	ResourceProvider []PermissionsResourceProvider `pulumi:"resourceProvider"`
}

// PermissionsInput is an input type that accepts PermissionsArgs and PermissionsOutput values.
// You can construct a concrete instance of `PermissionsInput` via:
//
//	PermissionsArgs{...}
type PermissionsInput interface {
	pulumi.Input

	ToPermissionsOutput() PermissionsOutput
	ToPermissionsOutputWithContext(context.Context) PermissionsOutput
}

// Permissions required for the connector
type PermissionsArgs struct {
	// Customs permissions required for the connector
	Customs PermissionsCustomsArrayInput `pulumi:"customs"`
	// Resource provider permissions required for the connector
	ResourceProvider PermissionsResourceProviderArrayInput `pulumi:"resourceProvider"`
}

func (PermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Permissions)(nil)).Elem()
}

func (i PermissionsArgs) ToPermissionsOutput() PermissionsOutput {
	return i.ToPermissionsOutputWithContext(context.Background())
}

func (i PermissionsArgs) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsOutput)
}

func (i PermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[Permissions] {
	return pulumix.Output[Permissions]{
		OutputState: i.ToPermissionsOutputWithContext(ctx).OutputState,
	}
}

func (i PermissionsArgs) ToPermissionsPtrOutput() PermissionsPtrOutput {
	return i.ToPermissionsPtrOutputWithContext(context.Background())
}

func (i PermissionsArgs) ToPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsOutput).ToPermissionsPtrOutputWithContext(ctx)
}

// PermissionsPtrInput is an input type that accepts PermissionsArgs, PermissionsPtr and PermissionsPtrOutput values.
// You can construct a concrete instance of `PermissionsPtrInput` via:
//
//	        PermissionsArgs{...}
//
//	or:
//
//	        nil
type PermissionsPtrInput interface {
	pulumi.Input

	ToPermissionsPtrOutput() PermissionsPtrOutput
	ToPermissionsPtrOutputWithContext(context.Context) PermissionsPtrOutput
}

type permissionsPtrType PermissionsArgs

func PermissionsPtr(v *PermissionsArgs) PermissionsPtrInput {
	return (*permissionsPtrType)(v)
}

func (*permissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Permissions)(nil)).Elem()
}

func (i *permissionsPtrType) ToPermissionsPtrOutput() PermissionsPtrOutput {
	return i.ToPermissionsPtrOutputWithContext(context.Background())
}

func (i *permissionsPtrType) ToPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsPtrOutput)
}

func (i *permissionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Permissions] {
	return pulumix.Output[*Permissions]{
		OutputState: i.ToPermissionsPtrOutputWithContext(ctx).OutputState,
	}
}

// Permissions required for the connector
type PermissionsOutput struct{ *pulumi.OutputState }

func (PermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Permissions)(nil)).Elem()
}

func (o PermissionsOutput) ToPermissionsOutput() PermissionsOutput {
	return o
}

func (o PermissionsOutput) ToPermissionsOutputWithContext(ctx context.Context) PermissionsOutput {
	return o
}

func (o PermissionsOutput) ToPermissionsPtrOutput() PermissionsPtrOutput {
	return o.ToPermissionsPtrOutputWithContext(context.Background())
}

func (o PermissionsOutput) ToPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Permissions) *Permissions {
		return &v
	}).(PermissionsPtrOutput)
}

func (o PermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[Permissions] {
	return pulumix.Output[Permissions]{
		OutputState: o.OutputState,
	}
}

// Customs permissions required for the connector
func (o PermissionsOutput) Customs() PermissionsCustomsArrayOutput {
	return o.ApplyT(func(v Permissions) []PermissionsCustoms { return v.Customs }).(PermissionsCustomsArrayOutput)
}

// Resource provider permissions required for the connector
func (o PermissionsOutput) ResourceProvider() PermissionsResourceProviderArrayOutput {
	return o.ApplyT(func(v Permissions) []PermissionsResourceProvider { return v.ResourceProvider }).(PermissionsResourceProviderArrayOutput)
}

type PermissionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permissions)(nil)).Elem()
}

func (o PermissionsPtrOutput) ToPermissionsPtrOutput() PermissionsPtrOutput {
	return o
}

func (o PermissionsPtrOutput) ToPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPtrOutput {
	return o
}

func (o PermissionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Permissions] {
	return pulumix.Output[*Permissions]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsPtrOutput) Elem() PermissionsOutput {
	return o.ApplyT(func(v *Permissions) Permissions {
		if v != nil {
			return *v
		}
		var ret Permissions
		return ret
	}).(PermissionsOutput)
}

// Customs permissions required for the connector
func (o PermissionsPtrOutput) Customs() PermissionsCustomsArrayOutput {
	return o.ApplyT(func(v *Permissions) []PermissionsCustoms {
		if v == nil {
			return nil
		}
		return v.Customs
	}).(PermissionsCustomsArrayOutput)
}

// Resource provider permissions required for the connector
func (o PermissionsPtrOutput) ResourceProvider() PermissionsResourceProviderArrayOutput {
	return o.ApplyT(func(v *Permissions) []PermissionsResourceProvider {
		if v == nil {
			return nil
		}
		return v.ResourceProvider
	}).(PermissionsResourceProviderArrayOutput)
}

type PermissionsCustoms struct {
	// Customs permissions description
	Description *string `pulumi:"description"`
	// Customs permissions name
	Name *string `pulumi:"name"`
}

// PermissionsCustomsInput is an input type that accepts PermissionsCustomsArgs and PermissionsCustomsOutput values.
// You can construct a concrete instance of `PermissionsCustomsInput` via:
//
//	PermissionsCustomsArgs{...}
type PermissionsCustomsInput interface {
	pulumi.Input

	ToPermissionsCustomsOutput() PermissionsCustomsOutput
	ToPermissionsCustomsOutputWithContext(context.Context) PermissionsCustomsOutput
}

type PermissionsCustomsArgs struct {
	// Customs permissions description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Customs permissions name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PermissionsCustomsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsCustoms)(nil)).Elem()
}

func (i PermissionsCustomsArgs) ToPermissionsCustomsOutput() PermissionsCustomsOutput {
	return i.ToPermissionsCustomsOutputWithContext(context.Background())
}

func (i PermissionsCustomsArgs) ToPermissionsCustomsOutputWithContext(ctx context.Context) PermissionsCustomsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsCustomsOutput)
}

func (i PermissionsCustomsArgs) ToOutput(ctx context.Context) pulumix.Output[PermissionsCustoms] {
	return pulumix.Output[PermissionsCustoms]{
		OutputState: i.ToPermissionsCustomsOutputWithContext(ctx).OutputState,
	}
}

// PermissionsCustomsArrayInput is an input type that accepts PermissionsCustomsArray and PermissionsCustomsArrayOutput values.
// You can construct a concrete instance of `PermissionsCustomsArrayInput` via:
//
//	PermissionsCustomsArray{ PermissionsCustomsArgs{...} }
type PermissionsCustomsArrayInput interface {
	pulumi.Input

	ToPermissionsCustomsArrayOutput() PermissionsCustomsArrayOutput
	ToPermissionsCustomsArrayOutputWithContext(context.Context) PermissionsCustomsArrayOutput
}

type PermissionsCustomsArray []PermissionsCustomsInput

func (PermissionsCustomsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsCustoms)(nil)).Elem()
}

func (i PermissionsCustomsArray) ToPermissionsCustomsArrayOutput() PermissionsCustomsArrayOutput {
	return i.ToPermissionsCustomsArrayOutputWithContext(context.Background())
}

func (i PermissionsCustomsArray) ToPermissionsCustomsArrayOutputWithContext(ctx context.Context) PermissionsCustomsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsCustomsArrayOutput)
}

func (i PermissionsCustomsArray) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsCustoms] {
	return pulumix.Output[[]PermissionsCustoms]{
		OutputState: i.ToPermissionsCustomsArrayOutputWithContext(ctx).OutputState,
	}
}

type PermissionsCustomsOutput struct{ *pulumi.OutputState }

func (PermissionsCustomsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsCustoms)(nil)).Elem()
}

func (o PermissionsCustomsOutput) ToPermissionsCustomsOutput() PermissionsCustomsOutput {
	return o
}

func (o PermissionsCustomsOutput) ToPermissionsCustomsOutputWithContext(ctx context.Context) PermissionsCustomsOutput {
	return o
}

func (o PermissionsCustomsOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsCustoms] {
	return pulumix.Output[PermissionsCustoms]{
		OutputState: o.OutputState,
	}
}

// Customs permissions description
func (o PermissionsCustomsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsCustoms) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Customs permissions name
func (o PermissionsCustomsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsCustoms) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PermissionsCustomsArrayOutput struct{ *pulumi.OutputState }

func (PermissionsCustomsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsCustoms)(nil)).Elem()
}

func (o PermissionsCustomsArrayOutput) ToPermissionsCustomsArrayOutput() PermissionsCustomsArrayOutput {
	return o
}

func (o PermissionsCustomsArrayOutput) ToPermissionsCustomsArrayOutputWithContext(ctx context.Context) PermissionsCustomsArrayOutput {
	return o
}

func (o PermissionsCustomsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsCustoms] {
	return pulumix.Output[[]PermissionsCustoms]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsCustomsArrayOutput) Index(i pulumi.IntInput) PermissionsCustomsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionsCustoms {
		return vs[0].([]PermissionsCustoms)[vs[1].(int)]
	}).(PermissionsCustomsOutput)
}

type PermissionsResourceProvider struct {
	// Permission description text
	PermissionsDisplayText *string `pulumi:"permissionsDisplayText"`
	// Provider name
	Provider *string `pulumi:"provider"`
	// Permission provider display name
	ProviderDisplayName *string `pulumi:"providerDisplayName"`
	// Required permissions for the connector
	RequiredPermissions *RequiredPermissions `pulumi:"requiredPermissions"`
	// Permission provider scope
	Scope *string `pulumi:"scope"`
}

// PermissionsResourceProviderInput is an input type that accepts PermissionsResourceProviderArgs and PermissionsResourceProviderOutput values.
// You can construct a concrete instance of `PermissionsResourceProviderInput` via:
//
//	PermissionsResourceProviderArgs{...}
type PermissionsResourceProviderInput interface {
	pulumi.Input

	ToPermissionsResourceProviderOutput() PermissionsResourceProviderOutput
	ToPermissionsResourceProviderOutputWithContext(context.Context) PermissionsResourceProviderOutput
}

type PermissionsResourceProviderArgs struct {
	// Permission description text
	PermissionsDisplayText pulumi.StringPtrInput `pulumi:"permissionsDisplayText"`
	// Provider name
	Provider pulumi.StringPtrInput `pulumi:"provider"`
	// Permission provider display name
	ProviderDisplayName pulumi.StringPtrInput `pulumi:"providerDisplayName"`
	// Required permissions for the connector
	RequiredPermissions RequiredPermissionsPtrInput `pulumi:"requiredPermissions"`
	// Permission provider scope
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (PermissionsResourceProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsResourceProvider)(nil)).Elem()
}

func (i PermissionsResourceProviderArgs) ToPermissionsResourceProviderOutput() PermissionsResourceProviderOutput {
	return i.ToPermissionsResourceProviderOutputWithContext(context.Background())
}

func (i PermissionsResourceProviderArgs) ToPermissionsResourceProviderOutputWithContext(ctx context.Context) PermissionsResourceProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsResourceProviderOutput)
}

func (i PermissionsResourceProviderArgs) ToOutput(ctx context.Context) pulumix.Output[PermissionsResourceProvider] {
	return pulumix.Output[PermissionsResourceProvider]{
		OutputState: i.ToPermissionsResourceProviderOutputWithContext(ctx).OutputState,
	}
}

// PermissionsResourceProviderArrayInput is an input type that accepts PermissionsResourceProviderArray and PermissionsResourceProviderArrayOutput values.
// You can construct a concrete instance of `PermissionsResourceProviderArrayInput` via:
//
//	PermissionsResourceProviderArray{ PermissionsResourceProviderArgs{...} }
type PermissionsResourceProviderArrayInput interface {
	pulumi.Input

	ToPermissionsResourceProviderArrayOutput() PermissionsResourceProviderArrayOutput
	ToPermissionsResourceProviderArrayOutputWithContext(context.Context) PermissionsResourceProviderArrayOutput
}

type PermissionsResourceProviderArray []PermissionsResourceProviderInput

func (PermissionsResourceProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsResourceProvider)(nil)).Elem()
}

func (i PermissionsResourceProviderArray) ToPermissionsResourceProviderArrayOutput() PermissionsResourceProviderArrayOutput {
	return i.ToPermissionsResourceProviderArrayOutputWithContext(context.Background())
}

func (i PermissionsResourceProviderArray) ToPermissionsResourceProviderArrayOutputWithContext(ctx context.Context) PermissionsResourceProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsResourceProviderArrayOutput)
}

func (i PermissionsResourceProviderArray) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsResourceProvider] {
	return pulumix.Output[[]PermissionsResourceProvider]{
		OutputState: i.ToPermissionsResourceProviderArrayOutputWithContext(ctx).OutputState,
	}
}

type PermissionsResourceProviderOutput struct{ *pulumi.OutputState }

func (PermissionsResourceProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsResourceProvider)(nil)).Elem()
}

func (o PermissionsResourceProviderOutput) ToPermissionsResourceProviderOutput() PermissionsResourceProviderOutput {
	return o
}

func (o PermissionsResourceProviderOutput) ToPermissionsResourceProviderOutputWithContext(ctx context.Context) PermissionsResourceProviderOutput {
	return o
}

func (o PermissionsResourceProviderOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsResourceProvider] {
	return pulumix.Output[PermissionsResourceProvider]{
		OutputState: o.OutputState,
	}
}

// Permission description text
func (o PermissionsResourceProviderOutput) PermissionsDisplayText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResourceProvider) *string { return v.PermissionsDisplayText }).(pulumi.StringPtrOutput)
}

// Provider name
func (o PermissionsResourceProviderOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResourceProvider) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Permission provider display name
func (o PermissionsResourceProviderOutput) ProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResourceProvider) *string { return v.ProviderDisplayName }).(pulumi.StringPtrOutput)
}

// Required permissions for the connector
func (o PermissionsResourceProviderOutput) RequiredPermissions() RequiredPermissionsPtrOutput {
	return o.ApplyT(func(v PermissionsResourceProvider) *RequiredPermissions { return v.RequiredPermissions }).(RequiredPermissionsPtrOutput)
}

// Permission provider scope
func (o PermissionsResourceProviderOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResourceProvider) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PermissionsResourceProviderArrayOutput struct{ *pulumi.OutputState }

func (PermissionsResourceProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsResourceProvider)(nil)).Elem()
}

func (o PermissionsResourceProviderArrayOutput) ToPermissionsResourceProviderArrayOutput() PermissionsResourceProviderArrayOutput {
	return o
}

func (o PermissionsResourceProviderArrayOutput) ToPermissionsResourceProviderArrayOutputWithContext(ctx context.Context) PermissionsResourceProviderArrayOutput {
	return o
}

func (o PermissionsResourceProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsResourceProvider] {
	return pulumix.Output[[]PermissionsResourceProvider]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsResourceProviderArrayOutput) Index(i pulumi.IntInput) PermissionsResourceProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionsResourceProvider {
		return vs[0].([]PermissionsResourceProvider)[vs[1].(int)]
	}).(PermissionsResourceProviderOutput)
}

// Permissions required for the connector
type PermissionsResponse struct {
	// Customs permissions required for the connector
	Customs []PermissionsResponseCustoms `pulumi:"customs"`
	// Resource provider permissions required for the connector
	ResourceProvider []PermissionsResponseResourceProvider `pulumi:"resourceProvider"`
}

// Permissions required for the connector
type PermissionsResponseOutput struct{ *pulumi.OutputState }

func (PermissionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsResponse)(nil)).Elem()
}

func (o PermissionsResponseOutput) ToPermissionsResponseOutput() PermissionsResponseOutput {
	return o
}

func (o PermissionsResponseOutput) ToPermissionsResponseOutputWithContext(ctx context.Context) PermissionsResponseOutput {
	return o
}

func (o PermissionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsResponse] {
	return pulumix.Output[PermissionsResponse]{
		OutputState: o.OutputState,
	}
}

// Customs permissions required for the connector
func (o PermissionsResponseOutput) Customs() PermissionsResponseCustomsArrayOutput {
	return o.ApplyT(func(v PermissionsResponse) []PermissionsResponseCustoms { return v.Customs }).(PermissionsResponseCustomsArrayOutput)
}

// Resource provider permissions required for the connector
func (o PermissionsResponseOutput) ResourceProvider() PermissionsResponseResourceProviderArrayOutput {
	return o.ApplyT(func(v PermissionsResponse) []PermissionsResponseResourceProvider { return v.ResourceProvider }).(PermissionsResponseResourceProviderArrayOutput)
}

type PermissionsResponsePtrOutput struct{ *pulumi.OutputState }

func (PermissionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsResponse)(nil)).Elem()
}

func (o PermissionsResponsePtrOutput) ToPermissionsResponsePtrOutput() PermissionsResponsePtrOutput {
	return o
}

func (o PermissionsResponsePtrOutput) ToPermissionsResponsePtrOutputWithContext(ctx context.Context) PermissionsResponsePtrOutput {
	return o
}

func (o PermissionsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PermissionsResponse] {
	return pulumix.Output[*PermissionsResponse]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsResponsePtrOutput) Elem() PermissionsResponseOutput {
	return o.ApplyT(func(v *PermissionsResponse) PermissionsResponse {
		if v != nil {
			return *v
		}
		var ret PermissionsResponse
		return ret
	}).(PermissionsResponseOutput)
}

// Customs permissions required for the connector
func (o PermissionsResponsePtrOutput) Customs() PermissionsResponseCustomsArrayOutput {
	return o.ApplyT(func(v *PermissionsResponse) []PermissionsResponseCustoms {
		if v == nil {
			return nil
		}
		return v.Customs
	}).(PermissionsResponseCustomsArrayOutput)
}

// Resource provider permissions required for the connector
func (o PermissionsResponsePtrOutput) ResourceProvider() PermissionsResponseResourceProviderArrayOutput {
	return o.ApplyT(func(v *PermissionsResponse) []PermissionsResponseResourceProvider {
		if v == nil {
			return nil
		}
		return v.ResourceProvider
	}).(PermissionsResponseResourceProviderArrayOutput)
}

type PermissionsResponseCustoms struct {
	// Customs permissions description
	Description *string `pulumi:"description"`
	// Customs permissions name
	Name *string `pulumi:"name"`
}

type PermissionsResponseCustomsOutput struct{ *pulumi.OutputState }

func (PermissionsResponseCustomsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsResponseCustoms)(nil)).Elem()
}

func (o PermissionsResponseCustomsOutput) ToPermissionsResponseCustomsOutput() PermissionsResponseCustomsOutput {
	return o
}

func (o PermissionsResponseCustomsOutput) ToPermissionsResponseCustomsOutputWithContext(ctx context.Context) PermissionsResponseCustomsOutput {
	return o
}

func (o PermissionsResponseCustomsOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsResponseCustoms] {
	return pulumix.Output[PermissionsResponseCustoms]{
		OutputState: o.OutputState,
	}
}

// Customs permissions description
func (o PermissionsResponseCustomsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseCustoms) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Customs permissions name
func (o PermissionsResponseCustomsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseCustoms) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PermissionsResponseCustomsArrayOutput struct{ *pulumi.OutputState }

func (PermissionsResponseCustomsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsResponseCustoms)(nil)).Elem()
}

func (o PermissionsResponseCustomsArrayOutput) ToPermissionsResponseCustomsArrayOutput() PermissionsResponseCustomsArrayOutput {
	return o
}

func (o PermissionsResponseCustomsArrayOutput) ToPermissionsResponseCustomsArrayOutputWithContext(ctx context.Context) PermissionsResponseCustomsArrayOutput {
	return o
}

func (o PermissionsResponseCustomsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsResponseCustoms] {
	return pulumix.Output[[]PermissionsResponseCustoms]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsResponseCustomsArrayOutput) Index(i pulumi.IntInput) PermissionsResponseCustomsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionsResponseCustoms {
		return vs[0].([]PermissionsResponseCustoms)[vs[1].(int)]
	}).(PermissionsResponseCustomsOutput)
}

type PermissionsResponseResourceProvider struct {
	// Permission description text
	PermissionsDisplayText *string `pulumi:"permissionsDisplayText"`
	// Provider name
	Provider *string `pulumi:"provider"`
	// Permission provider display name
	ProviderDisplayName *string `pulumi:"providerDisplayName"`
	// Required permissions for the connector
	RequiredPermissions *RequiredPermissionsResponse `pulumi:"requiredPermissions"`
	// Permission provider scope
	Scope *string `pulumi:"scope"`
}

type PermissionsResponseResourceProviderOutput struct{ *pulumi.OutputState }

func (PermissionsResponseResourceProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsResponseResourceProvider)(nil)).Elem()
}

func (o PermissionsResponseResourceProviderOutput) ToPermissionsResponseResourceProviderOutput() PermissionsResponseResourceProviderOutput {
	return o
}

func (o PermissionsResponseResourceProviderOutput) ToPermissionsResponseResourceProviderOutputWithContext(ctx context.Context) PermissionsResponseResourceProviderOutput {
	return o
}

func (o PermissionsResponseResourceProviderOutput) ToOutput(ctx context.Context) pulumix.Output[PermissionsResponseResourceProvider] {
	return pulumix.Output[PermissionsResponseResourceProvider]{
		OutputState: o.OutputState,
	}
}

// Permission description text
func (o PermissionsResponseResourceProviderOutput) PermissionsDisplayText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseResourceProvider) *string { return v.PermissionsDisplayText }).(pulumi.StringPtrOutput)
}

// Provider name
func (o PermissionsResponseResourceProviderOutput) Provider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseResourceProvider) *string { return v.Provider }).(pulumi.StringPtrOutput)
}

// Permission provider display name
func (o PermissionsResponseResourceProviderOutput) ProviderDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseResourceProvider) *string { return v.ProviderDisplayName }).(pulumi.StringPtrOutput)
}

// Required permissions for the connector
func (o PermissionsResponseResourceProviderOutput) RequiredPermissions() RequiredPermissionsResponsePtrOutput {
	return o.ApplyT(func(v PermissionsResponseResourceProvider) *RequiredPermissionsResponse { return v.RequiredPermissions }).(RequiredPermissionsResponsePtrOutput)
}

// Permission provider scope
func (o PermissionsResponseResourceProviderOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionsResponseResourceProvider) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type PermissionsResponseResourceProviderArrayOutput struct{ *pulumi.OutputState }

func (PermissionsResponseResourceProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PermissionsResponseResourceProvider)(nil)).Elem()
}

func (o PermissionsResponseResourceProviderArrayOutput) ToPermissionsResponseResourceProviderArrayOutput() PermissionsResponseResourceProviderArrayOutput {
	return o
}

func (o PermissionsResponseResourceProviderArrayOutput) ToPermissionsResponseResourceProviderArrayOutputWithContext(ctx context.Context) PermissionsResponseResourceProviderArrayOutput {
	return o
}

func (o PermissionsResponseResourceProviderArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PermissionsResponseResourceProvider] {
	return pulumix.Output[[]PermissionsResponseResourceProvider]{
		OutputState: o.OutputState,
	}
}

func (o PermissionsResponseResourceProviderArrayOutput) Index(i pulumi.IntInput) PermissionsResponseResourceProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PermissionsResponseResourceProvider {
		return vs[0].([]PermissionsResponseResourceProvider)[vs[1].(int)]
	}).(PermissionsResponseResourceProviderOutput)
}

type PlaybookActionProperties struct {
	// The resource id of the playbook resource.
	LogicAppResourceId string `pulumi:"logicAppResourceId"`
	// The tenant id of the playbook resource.
	TenantId *string `pulumi:"tenantId"`
}

type PlaybookActionPropertiesResponse struct {
	// The resource id of the playbook resource.
	LogicAppResourceId string `pulumi:"logicAppResourceId"`
	// The tenant id of the playbook resource.
	TenantId *string `pulumi:"tenantId"`
}

// Describes an automation rule condition that evaluates an array property's value change
type PropertyArrayChangedConditionProperties struct {
	ConditionProperties *AutomationRulePropertyArrayChangedValuesCondition `pulumi:"conditionProperties"`
	// Expected value is 'PropertyArrayChanged'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates an array property's value change
type PropertyArrayChangedConditionPropertiesResponse struct {
	ConditionProperties *AutomationRulePropertyArrayChangedValuesConditionResponse `pulumi:"conditionProperties"`
	// Expected value is 'PropertyArrayChanged'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates an array property's value
type PropertyArrayConditionProperties struct {
	ConditionProperties *AutomationRulePropertyArrayValuesCondition `pulumi:"conditionProperties"`
	// Expected value is 'PropertyArray'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates an array property's value
type PropertyArrayConditionPropertiesResponse struct {
	ConditionProperties *AutomationRulePropertyArrayValuesConditionResponse `pulumi:"conditionProperties"`
	// Expected value is 'PropertyArray'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates a property's value change
type PropertyChangedConditionProperties struct {
	ConditionProperties *AutomationRulePropertyValuesChangedCondition `pulumi:"conditionProperties"`
	// Expected value is 'PropertyChanged'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates a property's value change
type PropertyChangedConditionPropertiesResponse struct {
	ConditionProperties *AutomationRulePropertyValuesChangedConditionResponse `pulumi:"conditionProperties"`
	// Expected value is 'PropertyChanged'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates a property's value
type PropertyConditionProperties struct {
	ConditionProperties *AutomationRulePropertyValuesCondition `pulumi:"conditionProperties"`
	// Expected value is 'Property'.
	ConditionType string `pulumi:"conditionType"`
}

// Describes an automation rule condition that evaluates a property's value
type PropertyConditionPropertiesResponse struct {
	ConditionProperties *AutomationRulePropertyValuesConditionResponse `pulumi:"conditionProperties"`
	// Expected value is 'Property'.
	ConditionType string `pulumi:"conditionType"`
}

// Represents a repository.
type RepoResponse struct {
	// Array of branches.
	Branches []string `pulumi:"branches"`
	// The name of the repository.
	FullName *string `pulumi:"fullName"`
	// The url to access the repository.
	Url *string `pulumi:"url"`
}

// Represents a repository.
type RepoResponseOutput struct{ *pulumi.OutputState }

func (RepoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoResponse)(nil)).Elem()
}

func (o RepoResponseOutput) ToRepoResponseOutput() RepoResponseOutput {
	return o
}

func (o RepoResponseOutput) ToRepoResponseOutputWithContext(ctx context.Context) RepoResponseOutput {
	return o
}

func (o RepoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RepoResponse] {
	return pulumix.Output[RepoResponse]{
		OutputState: o.OutputState,
	}
}

// Array of branches.
func (o RepoResponseOutput) Branches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RepoResponse) []string { return v.Branches }).(pulumi.StringArrayOutput)
}

// The name of the repository.
func (o RepoResponseOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoResponse) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

// The url to access the repository.
func (o RepoResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type RepoResponseArrayOutput struct{ *pulumi.OutputState }

func (RepoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepoResponse)(nil)).Elem()
}

func (o RepoResponseArrayOutput) ToRepoResponseArrayOutput() RepoResponseArrayOutput {
	return o
}

func (o RepoResponseArrayOutput) ToRepoResponseArrayOutputWithContext(ctx context.Context) RepoResponseArrayOutput {
	return o
}

func (o RepoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RepoResponse] {
	return pulumix.Output[[]RepoResponse]{
		OutputState: o.OutputState,
	}
}

func (o RepoResponseArrayOutput) Index(i pulumi.IntInput) RepoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepoResponse {
		return vs[0].([]RepoResponse)[vs[1].(int)]
	}).(RepoResponseOutput)
}

// Required permissions for the connector
type RequiredPermissions struct {
	// action permission
	Action *bool `pulumi:"action"`
	// delete permission
	Delete *bool `pulumi:"delete"`
	// read permission
	Read *bool `pulumi:"read"`
	// write permission
	Write *bool `pulumi:"write"`
}

// RequiredPermissionsInput is an input type that accepts RequiredPermissionsArgs and RequiredPermissionsOutput values.
// You can construct a concrete instance of `RequiredPermissionsInput` via:
//
//	RequiredPermissionsArgs{...}
type RequiredPermissionsInput interface {
	pulumi.Input

	ToRequiredPermissionsOutput() RequiredPermissionsOutput
	ToRequiredPermissionsOutputWithContext(context.Context) RequiredPermissionsOutput
}

// Required permissions for the connector
type RequiredPermissionsArgs struct {
	// action permission
	Action pulumi.BoolPtrInput `pulumi:"action"`
	// delete permission
	Delete pulumi.BoolPtrInput `pulumi:"delete"`
	// read permission
	Read pulumi.BoolPtrInput `pulumi:"read"`
	// write permission
	Write pulumi.BoolPtrInput `pulumi:"write"`
}

func (RequiredPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequiredPermissions)(nil)).Elem()
}

func (i RequiredPermissionsArgs) ToRequiredPermissionsOutput() RequiredPermissionsOutput {
	return i.ToRequiredPermissionsOutputWithContext(context.Background())
}

func (i RequiredPermissionsArgs) ToRequiredPermissionsOutputWithContext(ctx context.Context) RequiredPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequiredPermissionsOutput)
}

func (i RequiredPermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[RequiredPermissions] {
	return pulumix.Output[RequiredPermissions]{
		OutputState: i.ToRequiredPermissionsOutputWithContext(ctx).OutputState,
	}
}

func (i RequiredPermissionsArgs) ToRequiredPermissionsPtrOutput() RequiredPermissionsPtrOutput {
	return i.ToRequiredPermissionsPtrOutputWithContext(context.Background())
}

func (i RequiredPermissionsArgs) ToRequiredPermissionsPtrOutputWithContext(ctx context.Context) RequiredPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequiredPermissionsOutput).ToRequiredPermissionsPtrOutputWithContext(ctx)
}

// RequiredPermissionsPtrInput is an input type that accepts RequiredPermissionsArgs, RequiredPermissionsPtr and RequiredPermissionsPtrOutput values.
// You can construct a concrete instance of `RequiredPermissionsPtrInput` via:
//
//	        RequiredPermissionsArgs{...}
//
//	or:
//
//	        nil
type RequiredPermissionsPtrInput interface {
	pulumi.Input

	ToRequiredPermissionsPtrOutput() RequiredPermissionsPtrOutput
	ToRequiredPermissionsPtrOutputWithContext(context.Context) RequiredPermissionsPtrOutput
}

type requiredPermissionsPtrType RequiredPermissionsArgs

func RequiredPermissionsPtr(v *RequiredPermissionsArgs) RequiredPermissionsPtrInput {
	return (*requiredPermissionsPtrType)(v)
}

func (*requiredPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequiredPermissions)(nil)).Elem()
}

func (i *requiredPermissionsPtrType) ToRequiredPermissionsPtrOutput() RequiredPermissionsPtrOutput {
	return i.ToRequiredPermissionsPtrOutputWithContext(context.Background())
}

func (i *requiredPermissionsPtrType) ToRequiredPermissionsPtrOutputWithContext(ctx context.Context) RequiredPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequiredPermissionsPtrOutput)
}

func (i *requiredPermissionsPtrType) ToOutput(ctx context.Context) pulumix.Output[*RequiredPermissions] {
	return pulumix.Output[*RequiredPermissions]{
		OutputState: i.ToRequiredPermissionsPtrOutputWithContext(ctx).OutputState,
	}
}

// Required permissions for the connector
type RequiredPermissionsOutput struct{ *pulumi.OutputState }

func (RequiredPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequiredPermissions)(nil)).Elem()
}

func (o RequiredPermissionsOutput) ToRequiredPermissionsOutput() RequiredPermissionsOutput {
	return o
}

func (o RequiredPermissionsOutput) ToRequiredPermissionsOutputWithContext(ctx context.Context) RequiredPermissionsOutput {
	return o
}

func (o RequiredPermissionsOutput) ToRequiredPermissionsPtrOutput() RequiredPermissionsPtrOutput {
	return o.ToRequiredPermissionsPtrOutputWithContext(context.Background())
}

func (o RequiredPermissionsOutput) ToRequiredPermissionsPtrOutputWithContext(ctx context.Context) RequiredPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequiredPermissions) *RequiredPermissions {
		return &v
	}).(RequiredPermissionsPtrOutput)
}

func (o RequiredPermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[RequiredPermissions] {
	return pulumix.Output[RequiredPermissions]{
		OutputState: o.OutputState,
	}
}

// action permission
func (o RequiredPermissionsOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissions) *bool { return v.Action }).(pulumi.BoolPtrOutput)
}

// delete permission
func (o RequiredPermissionsOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissions) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

// read permission
func (o RequiredPermissionsOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissions) *bool { return v.Read }).(pulumi.BoolPtrOutput)
}

// write permission
func (o RequiredPermissionsOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissions) *bool { return v.Write }).(pulumi.BoolPtrOutput)
}

type RequiredPermissionsPtrOutput struct{ *pulumi.OutputState }

func (RequiredPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequiredPermissions)(nil)).Elem()
}

func (o RequiredPermissionsPtrOutput) ToRequiredPermissionsPtrOutput() RequiredPermissionsPtrOutput {
	return o
}

func (o RequiredPermissionsPtrOutput) ToRequiredPermissionsPtrOutputWithContext(ctx context.Context) RequiredPermissionsPtrOutput {
	return o
}

func (o RequiredPermissionsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RequiredPermissions] {
	return pulumix.Output[*RequiredPermissions]{
		OutputState: o.OutputState,
	}
}

func (o RequiredPermissionsPtrOutput) Elem() RequiredPermissionsOutput {
	return o.ApplyT(func(v *RequiredPermissions) RequiredPermissions {
		if v != nil {
			return *v
		}
		var ret RequiredPermissions
		return ret
	}).(RequiredPermissionsOutput)
}

// action permission
func (o RequiredPermissionsPtrOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.BoolPtrOutput)
}

// delete permission
func (o RequiredPermissionsPtrOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.BoolPtrOutput)
}

// read permission
func (o RequiredPermissionsPtrOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.BoolPtrOutput)
}

// write permission
func (o RequiredPermissionsPtrOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.Write
	}).(pulumi.BoolPtrOutput)
}

// Required permissions for the connector
type RequiredPermissionsResponse struct {
	// action permission
	Action *bool `pulumi:"action"`
	// delete permission
	Delete *bool `pulumi:"delete"`
	// read permission
	Read *bool `pulumi:"read"`
	// write permission
	Write *bool `pulumi:"write"`
}

// Required permissions for the connector
type RequiredPermissionsResponseOutput struct{ *pulumi.OutputState }

func (RequiredPermissionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequiredPermissionsResponse)(nil)).Elem()
}

func (o RequiredPermissionsResponseOutput) ToRequiredPermissionsResponseOutput() RequiredPermissionsResponseOutput {
	return o
}

func (o RequiredPermissionsResponseOutput) ToRequiredPermissionsResponseOutputWithContext(ctx context.Context) RequiredPermissionsResponseOutput {
	return o
}

func (o RequiredPermissionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RequiredPermissionsResponse] {
	return pulumix.Output[RequiredPermissionsResponse]{
		OutputState: o.OutputState,
	}
}

// action permission
func (o RequiredPermissionsResponseOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissionsResponse) *bool { return v.Action }).(pulumi.BoolPtrOutput)
}

// delete permission
func (o RequiredPermissionsResponseOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissionsResponse) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

// read permission
func (o RequiredPermissionsResponseOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissionsResponse) *bool { return v.Read }).(pulumi.BoolPtrOutput)
}

// write permission
func (o RequiredPermissionsResponseOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RequiredPermissionsResponse) *bool { return v.Write }).(pulumi.BoolPtrOutput)
}

type RequiredPermissionsResponsePtrOutput struct{ *pulumi.OutputState }

func (RequiredPermissionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequiredPermissionsResponse)(nil)).Elem()
}

func (o RequiredPermissionsResponsePtrOutput) ToRequiredPermissionsResponsePtrOutput() RequiredPermissionsResponsePtrOutput {
	return o
}

func (o RequiredPermissionsResponsePtrOutput) ToRequiredPermissionsResponsePtrOutputWithContext(ctx context.Context) RequiredPermissionsResponsePtrOutput {
	return o
}

func (o RequiredPermissionsResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RequiredPermissionsResponse] {
	return pulumix.Output[*RequiredPermissionsResponse]{
		OutputState: o.OutputState,
	}
}

func (o RequiredPermissionsResponsePtrOutput) Elem() RequiredPermissionsResponseOutput {
	return o.ApplyT(func(v *RequiredPermissionsResponse) RequiredPermissionsResponse {
		if v != nil {
			return *v
		}
		var ret RequiredPermissionsResponse
		return ret
	}).(RequiredPermissionsResponseOutput)
}

// action permission
func (o RequiredPermissionsResponsePtrOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.BoolPtrOutput)
}

// delete permission
func (o RequiredPermissionsResponsePtrOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Delete
	}).(pulumi.BoolPtrOutput)
}

// read permission
func (o RequiredPermissionsResponsePtrOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Read
	}).(pulumi.BoolPtrOutput)
}

// write permission
func (o RequiredPermissionsResponsePtrOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RequiredPermissionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Write
	}).(pulumi.BoolPtrOutput)
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
type ResourceProviderRequiredPermissions struct {
	// Gets or sets a value indicating whether the permission is custom actions (POST).
	Action *bool `pulumi:"action"`
	// Gets or sets a value indicating whether the permission is delete action (DELETE).
	Delete *bool `pulumi:"delete"`
	// Gets or sets a value indicating whether the permission is read action (GET).
	Read *bool `pulumi:"read"`
	// Gets or sets a value indicating whether the permission is write action (PUT or PATCH).
	Write *bool `pulumi:"write"`
}

// ResourceProviderRequiredPermissionsInput is an input type that accepts ResourceProviderRequiredPermissionsArgs and ResourceProviderRequiredPermissionsOutput values.
// You can construct a concrete instance of `ResourceProviderRequiredPermissionsInput` via:
//
//	ResourceProviderRequiredPermissionsArgs{...}
type ResourceProviderRequiredPermissionsInput interface {
	pulumi.Input

	ToResourceProviderRequiredPermissionsOutput() ResourceProviderRequiredPermissionsOutput
	ToResourceProviderRequiredPermissionsOutputWithContext(context.Context) ResourceProviderRequiredPermissionsOutput
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
type ResourceProviderRequiredPermissionsArgs struct {
	// Gets or sets a value indicating whether the permission is custom actions (POST).
	Action pulumi.BoolPtrInput `pulumi:"action"`
	// Gets or sets a value indicating whether the permission is delete action (DELETE).
	Delete pulumi.BoolPtrInput `pulumi:"delete"`
	// Gets or sets a value indicating whether the permission is read action (GET).
	Read pulumi.BoolPtrInput `pulumi:"read"`
	// Gets or sets a value indicating whether the permission is write action (PUT or PATCH).
	Write pulumi.BoolPtrInput `pulumi:"write"`
}

func (ResourceProviderRequiredPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProviderRequiredPermissions)(nil)).Elem()
}

func (i ResourceProviderRequiredPermissionsArgs) ToResourceProviderRequiredPermissionsOutput() ResourceProviderRequiredPermissionsOutput {
	return i.ToResourceProviderRequiredPermissionsOutputWithContext(context.Background())
}

func (i ResourceProviderRequiredPermissionsArgs) ToResourceProviderRequiredPermissionsOutputWithContext(ctx context.Context) ResourceProviderRequiredPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceProviderRequiredPermissionsOutput)
}

func (i ResourceProviderRequiredPermissionsArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceProviderRequiredPermissions] {
	return pulumix.Output[ResourceProviderRequiredPermissions]{
		OutputState: i.ToResourceProviderRequiredPermissionsOutputWithContext(ctx).OutputState,
	}
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
type ResourceProviderRequiredPermissionsOutput struct{ *pulumi.OutputState }

func (ResourceProviderRequiredPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProviderRequiredPermissions)(nil)).Elem()
}

func (o ResourceProviderRequiredPermissionsOutput) ToResourceProviderRequiredPermissionsOutput() ResourceProviderRequiredPermissionsOutput {
	return o
}

func (o ResourceProviderRequiredPermissionsOutput) ToResourceProviderRequiredPermissionsOutputWithContext(ctx context.Context) ResourceProviderRequiredPermissionsOutput {
	return o
}

func (o ResourceProviderRequiredPermissionsOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceProviderRequiredPermissions] {
	return pulumix.Output[ResourceProviderRequiredPermissions]{
		OutputState: o.OutputState,
	}
}

// Gets or sets a value indicating whether the permission is custom actions (POST).
func (o ResourceProviderRequiredPermissionsOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissions) *bool { return v.Action }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is delete action (DELETE).
func (o ResourceProviderRequiredPermissionsOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissions) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is read action (GET).
func (o ResourceProviderRequiredPermissionsOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissions) *bool { return v.Read }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is write action (PUT or PATCH).
func (o ResourceProviderRequiredPermissionsOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissions) *bool { return v.Write }).(pulumi.BoolPtrOutput)
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
type ResourceProviderRequiredPermissionsResponse struct {
	// Gets or sets a value indicating whether the permission is custom actions (POST).
	Action *bool `pulumi:"action"`
	// Gets or sets a value indicating whether the permission is delete action (DELETE).
	Delete *bool `pulumi:"delete"`
	// Gets or sets a value indicating whether the permission is read action (GET).
	Read *bool `pulumi:"read"`
	// Gets or sets a value indicating whether the permission is write action (PUT or PATCH).
	Write *bool `pulumi:"write"`
}

// Required permissions for the connector resource provider that define in ResourceProviders.
// For more information about the permissions see <see href="https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#actions-format">here</see>.
type ResourceProviderRequiredPermissionsResponseOutput struct{ *pulumi.OutputState }

func (ResourceProviderRequiredPermissionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceProviderRequiredPermissionsResponse)(nil)).Elem()
}

func (o ResourceProviderRequiredPermissionsResponseOutput) ToResourceProviderRequiredPermissionsResponseOutput() ResourceProviderRequiredPermissionsResponseOutput {
	return o
}

func (o ResourceProviderRequiredPermissionsResponseOutput) ToResourceProviderRequiredPermissionsResponseOutputWithContext(ctx context.Context) ResourceProviderRequiredPermissionsResponseOutput {
	return o
}

func (o ResourceProviderRequiredPermissionsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceProviderRequiredPermissionsResponse] {
	return pulumix.Output[ResourceProviderRequiredPermissionsResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets a value indicating whether the permission is custom actions (POST).
func (o ResourceProviderRequiredPermissionsResponseOutput) Action() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissionsResponse) *bool { return v.Action }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is delete action (DELETE).
func (o ResourceProviderRequiredPermissionsResponseOutput) Delete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissionsResponse) *bool { return v.Delete }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is read action (GET).
func (o ResourceProviderRequiredPermissionsResponseOutput) Read() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissionsResponse) *bool { return v.Read }).(pulumi.BoolPtrOutput)
}

// Gets or sets a value indicating whether the permission is write action (PUT or PATCH).
func (o ResourceProviderRequiredPermissionsResponseOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceProviderRequiredPermissionsResponse) *bool { return v.Write }).(pulumi.BoolPtrOutput)
}

// The sample queries for the connector.
type SampleQuery struct {
	// Gets or sets the  sample query description.
	Description string `pulumi:"description"`
	// Gets or sets the KQL sample query.
	Query string `pulumi:"query"`
}

// SampleQueryInput is an input type that accepts SampleQueryArgs and SampleQueryOutput values.
// You can construct a concrete instance of `SampleQueryInput` via:
//
//	SampleQueryArgs{...}
type SampleQueryInput interface {
	pulumi.Input

	ToSampleQueryOutput() SampleQueryOutput
	ToSampleQueryOutputWithContext(context.Context) SampleQueryOutput
}

// The sample queries for the connector.
type SampleQueryArgs struct {
	// Gets or sets the  sample query description.
	Description pulumi.StringInput `pulumi:"description"`
	// Gets or sets the KQL sample query.
	Query pulumi.StringInput `pulumi:"query"`
}

func (SampleQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleQuery)(nil)).Elem()
}

func (i SampleQueryArgs) ToSampleQueryOutput() SampleQueryOutput {
	return i.ToSampleQueryOutputWithContext(context.Background())
}

func (i SampleQueryArgs) ToSampleQueryOutputWithContext(ctx context.Context) SampleQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleQueryOutput)
}

func (i SampleQueryArgs) ToOutput(ctx context.Context) pulumix.Output[SampleQuery] {
	return pulumix.Output[SampleQuery]{
		OutputState: i.ToSampleQueryOutputWithContext(ctx).OutputState,
	}
}

// SampleQueryArrayInput is an input type that accepts SampleQueryArray and SampleQueryArrayOutput values.
// You can construct a concrete instance of `SampleQueryArrayInput` via:
//
//	SampleQueryArray{ SampleQueryArgs{...} }
type SampleQueryArrayInput interface {
	pulumi.Input

	ToSampleQueryArrayOutput() SampleQueryArrayOutput
	ToSampleQueryArrayOutputWithContext(context.Context) SampleQueryArrayOutput
}

type SampleQueryArray []SampleQueryInput

func (SampleQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SampleQuery)(nil)).Elem()
}

func (i SampleQueryArray) ToSampleQueryArrayOutput() SampleQueryArrayOutput {
	return i.ToSampleQueryArrayOutputWithContext(context.Background())
}

func (i SampleQueryArray) ToSampleQueryArrayOutputWithContext(ctx context.Context) SampleQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleQueryArrayOutput)
}

func (i SampleQueryArray) ToOutput(ctx context.Context) pulumix.Output[[]SampleQuery] {
	return pulumix.Output[[]SampleQuery]{
		OutputState: i.ToSampleQueryArrayOutputWithContext(ctx).OutputState,
	}
}

// The sample queries for the connector.
type SampleQueryOutput struct{ *pulumi.OutputState }

func (SampleQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleQuery)(nil)).Elem()
}

func (o SampleQueryOutput) ToSampleQueryOutput() SampleQueryOutput {
	return o
}

func (o SampleQueryOutput) ToSampleQueryOutputWithContext(ctx context.Context) SampleQueryOutput {
	return o
}

func (o SampleQueryOutput) ToOutput(ctx context.Context) pulumix.Output[SampleQuery] {
	return pulumix.Output[SampleQuery]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the  sample query description.
func (o SampleQueryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SampleQuery) string { return v.Description }).(pulumi.StringOutput)
}

// Gets or sets the KQL sample query.
func (o SampleQueryOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SampleQuery) string { return v.Query }).(pulumi.StringOutput)
}

type SampleQueryArrayOutput struct{ *pulumi.OutputState }

func (SampleQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SampleQuery)(nil)).Elem()
}

func (o SampleQueryArrayOutput) ToSampleQueryArrayOutput() SampleQueryArrayOutput {
	return o
}

func (o SampleQueryArrayOutput) ToSampleQueryArrayOutputWithContext(ctx context.Context) SampleQueryArrayOutput {
	return o
}

func (o SampleQueryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SampleQuery] {
	return pulumix.Output[[]SampleQuery]{
		OutputState: o.OutputState,
	}
}

func (o SampleQueryArrayOutput) Index(i pulumi.IntInput) SampleQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SampleQuery {
		return vs[0].([]SampleQuery)[vs[1].(int)]
	}).(SampleQueryOutput)
}

// The sample queries for the connector.
type SampleQueryResponse struct {
	// Gets or sets the  sample query description.
	Description string `pulumi:"description"`
	// Gets or sets the KQL sample query.
	Query string `pulumi:"query"`
}

// The sample queries for the connector.
type SampleQueryResponseOutput struct{ *pulumi.OutputState }

func (SampleQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleQueryResponse)(nil)).Elem()
}

func (o SampleQueryResponseOutput) ToSampleQueryResponseOutput() SampleQueryResponseOutput {
	return o
}

func (o SampleQueryResponseOutput) ToSampleQueryResponseOutputWithContext(ctx context.Context) SampleQueryResponseOutput {
	return o
}

func (o SampleQueryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SampleQueryResponse] {
	return pulumix.Output[SampleQueryResponse]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the  sample query description.
func (o SampleQueryResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SampleQueryResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Gets or sets the KQL sample query.
func (o SampleQueryResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SampleQueryResponse) string { return v.Query }).(pulumi.StringOutput)
}

type SampleQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (SampleQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SampleQueryResponse)(nil)).Elem()
}

func (o SampleQueryResponseArrayOutput) ToSampleQueryResponseArrayOutput() SampleQueryResponseArrayOutput {
	return o
}

func (o SampleQueryResponseArrayOutput) ToSampleQueryResponseArrayOutputWithContext(ctx context.Context) SampleQueryResponseArrayOutput {
	return o
}

func (o SampleQueryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SampleQueryResponse] {
	return pulumix.Output[[]SampleQueryResponse]{
		OutputState: o.OutputState,
	}
}

func (o SampleQueryResponseArrayOutput) Index(i pulumi.IntInput) SampleQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SampleQueryResponse {
		return vs[0].([]SampleQueryResponse)[vs[1].(int)]
	}).(SampleQueryResponseOutput)
}

// Represents security alert timeline item.
type SecurityAlertTimelineItemResponse struct {
	// The name of the alert type.
	AlertType string `pulumi:"alertType"`
	// The alert azure resource id.
	AzureResourceId string `pulumi:"azureResourceId"`
	// The alert description.
	Description *string `pulumi:"description"`
	// The alert name.
	DisplayName string `pulumi:"displayName"`
	// The alert end time.
	EndTimeUtc string `pulumi:"endTimeUtc"`
	// The intent of the alert.
	Intent string `pulumi:"intent"`
	// The entity query kind
	// Expected value is 'SecurityAlert'.
	Kind string `pulumi:"kind"`
	// The alert product name.
	ProductName *string `pulumi:"productName"`
	// The alert severity.
	Severity string `pulumi:"severity"`
	// The alert start time.
	StartTimeUtc string `pulumi:"startTimeUtc"`
	// The techniques of the alert.
	Techniques []string `pulumi:"techniques"`
	// The alert generated time.
	TimeGenerated string `pulumi:"timeGenerated"`
}

// security ml analytics settings data sources
type SecurityMLAnalyticsSettingsDataSource struct {
	// The connector id that provides the following data types
	ConnectorId *string `pulumi:"connectorId"`
	// The data types used by the security ml analytics settings
	DataTypes []string `pulumi:"dataTypes"`
}

// SecurityMLAnalyticsSettingsDataSourceInput is an input type that accepts SecurityMLAnalyticsSettingsDataSourceArgs and SecurityMLAnalyticsSettingsDataSourceOutput values.
// You can construct a concrete instance of `SecurityMLAnalyticsSettingsDataSourceInput` via:
//
//	SecurityMLAnalyticsSettingsDataSourceArgs{...}
type SecurityMLAnalyticsSettingsDataSourceInput interface {
	pulumi.Input

	ToSecurityMLAnalyticsSettingsDataSourceOutput() SecurityMLAnalyticsSettingsDataSourceOutput
	ToSecurityMLAnalyticsSettingsDataSourceOutputWithContext(context.Context) SecurityMLAnalyticsSettingsDataSourceOutput
}

// security ml analytics settings data sources
type SecurityMLAnalyticsSettingsDataSourceArgs struct {
	// The connector id that provides the following data types
	ConnectorId pulumi.StringPtrInput `pulumi:"connectorId"`
	// The data types used by the security ml analytics settings
	DataTypes pulumi.StringArrayInput `pulumi:"dataTypes"`
}

func (SecurityMLAnalyticsSettingsDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityMLAnalyticsSettingsDataSource)(nil)).Elem()
}

func (i SecurityMLAnalyticsSettingsDataSourceArgs) ToSecurityMLAnalyticsSettingsDataSourceOutput() SecurityMLAnalyticsSettingsDataSourceOutput {
	return i.ToSecurityMLAnalyticsSettingsDataSourceOutputWithContext(context.Background())
}

func (i SecurityMLAnalyticsSettingsDataSourceArgs) ToSecurityMLAnalyticsSettingsDataSourceOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMLAnalyticsSettingsDataSourceOutput)
}

func (i SecurityMLAnalyticsSettingsDataSourceArgs) ToOutput(ctx context.Context) pulumix.Output[SecurityMLAnalyticsSettingsDataSource] {
	return pulumix.Output[SecurityMLAnalyticsSettingsDataSource]{
		OutputState: i.ToSecurityMLAnalyticsSettingsDataSourceOutputWithContext(ctx).OutputState,
	}
}

// SecurityMLAnalyticsSettingsDataSourceArrayInput is an input type that accepts SecurityMLAnalyticsSettingsDataSourceArray and SecurityMLAnalyticsSettingsDataSourceArrayOutput values.
// You can construct a concrete instance of `SecurityMLAnalyticsSettingsDataSourceArrayInput` via:
//
//	SecurityMLAnalyticsSettingsDataSourceArray{ SecurityMLAnalyticsSettingsDataSourceArgs{...} }
type SecurityMLAnalyticsSettingsDataSourceArrayInput interface {
	pulumi.Input

	ToSecurityMLAnalyticsSettingsDataSourceArrayOutput() SecurityMLAnalyticsSettingsDataSourceArrayOutput
	ToSecurityMLAnalyticsSettingsDataSourceArrayOutputWithContext(context.Context) SecurityMLAnalyticsSettingsDataSourceArrayOutput
}

type SecurityMLAnalyticsSettingsDataSourceArray []SecurityMLAnalyticsSettingsDataSourceInput

func (SecurityMLAnalyticsSettingsDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityMLAnalyticsSettingsDataSource)(nil)).Elem()
}

func (i SecurityMLAnalyticsSettingsDataSourceArray) ToSecurityMLAnalyticsSettingsDataSourceArrayOutput() SecurityMLAnalyticsSettingsDataSourceArrayOutput {
	return i.ToSecurityMLAnalyticsSettingsDataSourceArrayOutputWithContext(context.Background())
}

func (i SecurityMLAnalyticsSettingsDataSourceArray) ToSecurityMLAnalyticsSettingsDataSourceArrayOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMLAnalyticsSettingsDataSourceArrayOutput)
}

func (i SecurityMLAnalyticsSettingsDataSourceArray) ToOutput(ctx context.Context) pulumix.Output[[]SecurityMLAnalyticsSettingsDataSource] {
	return pulumix.Output[[]SecurityMLAnalyticsSettingsDataSource]{
		OutputState: i.ToSecurityMLAnalyticsSettingsDataSourceArrayOutputWithContext(ctx).OutputState,
	}
}

// security ml analytics settings data sources
type SecurityMLAnalyticsSettingsDataSourceOutput struct{ *pulumi.OutputState }

func (SecurityMLAnalyticsSettingsDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityMLAnalyticsSettingsDataSource)(nil)).Elem()
}

func (o SecurityMLAnalyticsSettingsDataSourceOutput) ToSecurityMLAnalyticsSettingsDataSourceOutput() SecurityMLAnalyticsSettingsDataSourceOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceOutput) ToSecurityMLAnalyticsSettingsDataSourceOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityMLAnalyticsSettingsDataSource] {
	return pulumix.Output[SecurityMLAnalyticsSettingsDataSource]{
		OutputState: o.OutputState,
	}
}

// The connector id that provides the following data types
func (o SecurityMLAnalyticsSettingsDataSourceOutput) ConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityMLAnalyticsSettingsDataSource) *string { return v.ConnectorId }).(pulumi.StringPtrOutput)
}

// The data types used by the security ml analytics settings
func (o SecurityMLAnalyticsSettingsDataSourceOutput) DataTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityMLAnalyticsSettingsDataSource) []string { return v.DataTypes }).(pulumi.StringArrayOutput)
}

type SecurityMLAnalyticsSettingsDataSourceArrayOutput struct{ *pulumi.OutputState }

func (SecurityMLAnalyticsSettingsDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityMLAnalyticsSettingsDataSource)(nil)).Elem()
}

func (o SecurityMLAnalyticsSettingsDataSourceArrayOutput) ToSecurityMLAnalyticsSettingsDataSourceArrayOutput() SecurityMLAnalyticsSettingsDataSourceArrayOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceArrayOutput) ToSecurityMLAnalyticsSettingsDataSourceArrayOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceArrayOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecurityMLAnalyticsSettingsDataSource] {
	return pulumix.Output[[]SecurityMLAnalyticsSettingsDataSource]{
		OutputState: o.OutputState,
	}
}

func (o SecurityMLAnalyticsSettingsDataSourceArrayOutput) Index(i pulumi.IntInput) SecurityMLAnalyticsSettingsDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityMLAnalyticsSettingsDataSource {
		return vs[0].([]SecurityMLAnalyticsSettingsDataSource)[vs[1].(int)]
	}).(SecurityMLAnalyticsSettingsDataSourceOutput)
}

// security ml analytics settings data sources
type SecurityMLAnalyticsSettingsDataSourceResponse struct {
	// The connector id that provides the following data types
	ConnectorId *string `pulumi:"connectorId"`
	// The data types used by the security ml analytics settings
	DataTypes []string `pulumi:"dataTypes"`
}

// security ml analytics settings data sources
type SecurityMLAnalyticsSettingsDataSourceResponseOutput struct{ *pulumi.OutputState }

func (SecurityMLAnalyticsSettingsDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityMLAnalyticsSettingsDataSourceResponse)(nil)).Elem()
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseOutput) ToSecurityMLAnalyticsSettingsDataSourceResponseOutput() SecurityMLAnalyticsSettingsDataSourceResponseOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseOutput) ToSecurityMLAnalyticsSettingsDataSourceResponseOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceResponseOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SecurityMLAnalyticsSettingsDataSourceResponse] {
	return pulumix.Output[SecurityMLAnalyticsSettingsDataSourceResponse]{
		OutputState: o.OutputState,
	}
}

// The connector id that provides the following data types
func (o SecurityMLAnalyticsSettingsDataSourceResponseOutput) ConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityMLAnalyticsSettingsDataSourceResponse) *string { return v.ConnectorId }).(pulumi.StringPtrOutput)
}

// The data types used by the security ml analytics settings
func (o SecurityMLAnalyticsSettingsDataSourceResponseOutput) DataTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SecurityMLAnalyticsSettingsDataSourceResponse) []string { return v.DataTypes }).(pulumi.StringArrayOutput)
}

type SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityMLAnalyticsSettingsDataSourceResponse)(nil)).Elem()
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput) ToSecurityMLAnalyticsSettingsDataSourceResponseArrayOutput() SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput) ToSecurityMLAnalyticsSettingsDataSourceResponseArrayOutputWithContext(ctx context.Context) SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput {
	return o
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SecurityMLAnalyticsSettingsDataSourceResponse] {
	return pulumix.Output[[]SecurityMLAnalyticsSettingsDataSourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput) Index(i pulumi.IntInput) SecurityMLAnalyticsSettingsDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityMLAnalyticsSettingsDataSourceResponse {
		return vs[0].([]SecurityMLAnalyticsSettingsDataSourceResponse)[vs[1].(int)]
	}).(SecurityMLAnalyticsSettingsDataSourceResponseOutput)
}

// A single sentinel entity mapping
type SentinelEntityMapping struct {
	// the column name to be mapped to the SentinelEntities
	ColumnName *string `pulumi:"columnName"`
}

// SentinelEntityMappingInput is an input type that accepts SentinelEntityMappingArgs and SentinelEntityMappingOutput values.
// You can construct a concrete instance of `SentinelEntityMappingInput` via:
//
//	SentinelEntityMappingArgs{...}
type SentinelEntityMappingInput interface {
	pulumi.Input

	ToSentinelEntityMappingOutput() SentinelEntityMappingOutput
	ToSentinelEntityMappingOutputWithContext(context.Context) SentinelEntityMappingOutput
}

// A single sentinel entity mapping
type SentinelEntityMappingArgs struct {
	// the column name to be mapped to the SentinelEntities
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
}

func (SentinelEntityMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SentinelEntityMapping)(nil)).Elem()
}

func (i SentinelEntityMappingArgs) ToSentinelEntityMappingOutput() SentinelEntityMappingOutput {
	return i.ToSentinelEntityMappingOutputWithContext(context.Background())
}

func (i SentinelEntityMappingArgs) ToSentinelEntityMappingOutputWithContext(ctx context.Context) SentinelEntityMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentinelEntityMappingOutput)
}

func (i SentinelEntityMappingArgs) ToOutput(ctx context.Context) pulumix.Output[SentinelEntityMapping] {
	return pulumix.Output[SentinelEntityMapping]{
		OutputState: i.ToSentinelEntityMappingOutputWithContext(ctx).OutputState,
	}
}

// SentinelEntityMappingArrayInput is an input type that accepts SentinelEntityMappingArray and SentinelEntityMappingArrayOutput values.
// You can construct a concrete instance of `SentinelEntityMappingArrayInput` via:
//
//	SentinelEntityMappingArray{ SentinelEntityMappingArgs{...} }
type SentinelEntityMappingArrayInput interface {
	pulumi.Input

	ToSentinelEntityMappingArrayOutput() SentinelEntityMappingArrayOutput
	ToSentinelEntityMappingArrayOutputWithContext(context.Context) SentinelEntityMappingArrayOutput
}

type SentinelEntityMappingArray []SentinelEntityMappingInput

func (SentinelEntityMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SentinelEntityMapping)(nil)).Elem()
}

func (i SentinelEntityMappingArray) ToSentinelEntityMappingArrayOutput() SentinelEntityMappingArrayOutput {
	return i.ToSentinelEntityMappingArrayOutputWithContext(context.Background())
}

func (i SentinelEntityMappingArray) ToSentinelEntityMappingArrayOutputWithContext(ctx context.Context) SentinelEntityMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentinelEntityMappingArrayOutput)
}

func (i SentinelEntityMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]SentinelEntityMapping] {
	return pulumix.Output[[]SentinelEntityMapping]{
		OutputState: i.ToSentinelEntityMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// A single sentinel entity mapping
type SentinelEntityMappingOutput struct{ *pulumi.OutputState }

func (SentinelEntityMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SentinelEntityMapping)(nil)).Elem()
}

func (o SentinelEntityMappingOutput) ToSentinelEntityMappingOutput() SentinelEntityMappingOutput {
	return o
}

func (o SentinelEntityMappingOutput) ToSentinelEntityMappingOutputWithContext(ctx context.Context) SentinelEntityMappingOutput {
	return o
}

func (o SentinelEntityMappingOutput) ToOutput(ctx context.Context) pulumix.Output[SentinelEntityMapping] {
	return pulumix.Output[SentinelEntityMapping]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the SentinelEntities
func (o SentinelEntityMappingOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SentinelEntityMapping) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

type SentinelEntityMappingArrayOutput struct{ *pulumi.OutputState }

func (SentinelEntityMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SentinelEntityMapping)(nil)).Elem()
}

func (o SentinelEntityMappingArrayOutput) ToSentinelEntityMappingArrayOutput() SentinelEntityMappingArrayOutput {
	return o
}

func (o SentinelEntityMappingArrayOutput) ToSentinelEntityMappingArrayOutputWithContext(ctx context.Context) SentinelEntityMappingArrayOutput {
	return o
}

func (o SentinelEntityMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SentinelEntityMapping] {
	return pulumix.Output[[]SentinelEntityMapping]{
		OutputState: o.OutputState,
	}
}

func (o SentinelEntityMappingArrayOutput) Index(i pulumi.IntInput) SentinelEntityMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SentinelEntityMapping {
		return vs[0].([]SentinelEntityMapping)[vs[1].(int)]
	}).(SentinelEntityMappingOutput)
}

// A single sentinel entity mapping
type SentinelEntityMappingResponse struct {
	// the column name to be mapped to the SentinelEntities
	ColumnName *string `pulumi:"columnName"`
}

// A single sentinel entity mapping
type SentinelEntityMappingResponseOutput struct{ *pulumi.OutputState }

func (SentinelEntityMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SentinelEntityMappingResponse)(nil)).Elem()
}

func (o SentinelEntityMappingResponseOutput) ToSentinelEntityMappingResponseOutput() SentinelEntityMappingResponseOutput {
	return o
}

func (o SentinelEntityMappingResponseOutput) ToSentinelEntityMappingResponseOutputWithContext(ctx context.Context) SentinelEntityMappingResponseOutput {
	return o
}

func (o SentinelEntityMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SentinelEntityMappingResponse] {
	return pulumix.Output[SentinelEntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

// the column name to be mapped to the SentinelEntities
func (o SentinelEntityMappingResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SentinelEntityMappingResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

type SentinelEntityMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (SentinelEntityMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SentinelEntityMappingResponse)(nil)).Elem()
}

func (o SentinelEntityMappingResponseArrayOutput) ToSentinelEntityMappingResponseArrayOutput() SentinelEntityMappingResponseArrayOutput {
	return o
}

func (o SentinelEntityMappingResponseArrayOutput) ToSentinelEntityMappingResponseArrayOutputWithContext(ctx context.Context) SentinelEntityMappingResponseArrayOutput {
	return o
}

func (o SentinelEntityMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SentinelEntityMappingResponse] {
	return pulumix.Output[[]SentinelEntityMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o SentinelEntityMappingResponseArrayOutput) Index(i pulumi.IntInput) SentinelEntityMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SentinelEntityMappingResponse {
		return vs[0].([]SentinelEntityMappingResponse)[vs[1].(int)]
	}).(SentinelEntityMappingResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The available data types for TI (Threat Intelligence) data connector.
type TIDataConnectorDataTypes struct {
	// Data type for indicators connection.
	Indicators TIDataConnectorDataTypesIndicators `pulumi:"indicators"`
}

// TIDataConnectorDataTypesInput is an input type that accepts TIDataConnectorDataTypesArgs and TIDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `TIDataConnectorDataTypesInput` via:
//
//	TIDataConnectorDataTypesArgs{...}
type TIDataConnectorDataTypesInput interface {
	pulumi.Input

	ToTIDataConnectorDataTypesOutput() TIDataConnectorDataTypesOutput
	ToTIDataConnectorDataTypesOutputWithContext(context.Context) TIDataConnectorDataTypesOutput
}

// The available data types for TI (Threat Intelligence) data connector.
type TIDataConnectorDataTypesArgs struct {
	// Data type for indicators connection.
	Indicators TIDataConnectorDataTypesIndicatorsInput `pulumi:"indicators"`
}

func (TIDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypes)(nil)).Elem()
}

func (i TIDataConnectorDataTypesArgs) ToTIDataConnectorDataTypesOutput() TIDataConnectorDataTypesOutput {
	return i.ToTIDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i TIDataConnectorDataTypesArgs) ToTIDataConnectorDataTypesOutputWithContext(ctx context.Context) TIDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TIDataConnectorDataTypesOutput)
}

func (i TIDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypes] {
	return pulumix.Output[TIDataConnectorDataTypes]{
		OutputState: i.ToTIDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for TI (Threat Intelligence) data connector.
type TIDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (TIDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypes)(nil)).Elem()
}

func (o TIDataConnectorDataTypesOutput) ToTIDataConnectorDataTypesOutput() TIDataConnectorDataTypesOutput {
	return o
}

func (o TIDataConnectorDataTypesOutput) ToTIDataConnectorDataTypesOutputWithContext(ctx context.Context) TIDataConnectorDataTypesOutput {
	return o
}

func (o TIDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypes] {
	return pulumix.Output[TIDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Data type for indicators connection.
func (o TIDataConnectorDataTypesOutput) Indicators() TIDataConnectorDataTypesIndicatorsOutput {
	return o.ApplyT(func(v TIDataConnectorDataTypes) TIDataConnectorDataTypesIndicators { return v.Indicators }).(TIDataConnectorDataTypesIndicatorsOutput)
}

// Data type for indicators connection.
type TIDataConnectorDataTypesIndicators struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// TIDataConnectorDataTypesIndicatorsInput is an input type that accepts TIDataConnectorDataTypesIndicatorsArgs and TIDataConnectorDataTypesIndicatorsOutput values.
// You can construct a concrete instance of `TIDataConnectorDataTypesIndicatorsInput` via:
//
//	TIDataConnectorDataTypesIndicatorsArgs{...}
type TIDataConnectorDataTypesIndicatorsInput interface {
	pulumi.Input

	ToTIDataConnectorDataTypesIndicatorsOutput() TIDataConnectorDataTypesIndicatorsOutput
	ToTIDataConnectorDataTypesIndicatorsOutputWithContext(context.Context) TIDataConnectorDataTypesIndicatorsOutput
}

// Data type for indicators connection.
type TIDataConnectorDataTypesIndicatorsArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (TIDataConnectorDataTypesIndicatorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypesIndicators)(nil)).Elem()
}

func (i TIDataConnectorDataTypesIndicatorsArgs) ToTIDataConnectorDataTypesIndicatorsOutput() TIDataConnectorDataTypesIndicatorsOutput {
	return i.ToTIDataConnectorDataTypesIndicatorsOutputWithContext(context.Background())
}

func (i TIDataConnectorDataTypesIndicatorsArgs) ToTIDataConnectorDataTypesIndicatorsOutputWithContext(ctx context.Context) TIDataConnectorDataTypesIndicatorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TIDataConnectorDataTypesIndicatorsOutput)
}

func (i TIDataConnectorDataTypesIndicatorsArgs) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypesIndicators] {
	return pulumix.Output[TIDataConnectorDataTypesIndicators]{
		OutputState: i.ToTIDataConnectorDataTypesIndicatorsOutputWithContext(ctx).OutputState,
	}
}

// Data type for indicators connection.
type TIDataConnectorDataTypesIndicatorsOutput struct{ *pulumi.OutputState }

func (TIDataConnectorDataTypesIndicatorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypesIndicators)(nil)).Elem()
}

func (o TIDataConnectorDataTypesIndicatorsOutput) ToTIDataConnectorDataTypesIndicatorsOutput() TIDataConnectorDataTypesIndicatorsOutput {
	return o
}

func (o TIDataConnectorDataTypesIndicatorsOutput) ToTIDataConnectorDataTypesIndicatorsOutputWithContext(ctx context.Context) TIDataConnectorDataTypesIndicatorsOutput {
	return o
}

func (o TIDataConnectorDataTypesIndicatorsOutput) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypesIndicators] {
	return pulumix.Output[TIDataConnectorDataTypesIndicators]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o TIDataConnectorDataTypesIndicatorsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v TIDataConnectorDataTypesIndicators) string { return v.State }).(pulumi.StringOutput)
}

// The available data types for TI (Threat Intelligence) data connector.
type TIDataConnectorDataTypesResponse struct {
	// Data type for indicators connection.
	Indicators TIDataConnectorDataTypesResponseIndicators `pulumi:"indicators"`
}

// The available data types for TI (Threat Intelligence) data connector.
type TIDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (TIDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o TIDataConnectorDataTypesResponseOutput) ToTIDataConnectorDataTypesResponseOutput() TIDataConnectorDataTypesResponseOutput {
	return o
}

func (o TIDataConnectorDataTypesResponseOutput) ToTIDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) TIDataConnectorDataTypesResponseOutput {
	return o
}

func (o TIDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypesResponse] {
	return pulumix.Output[TIDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Data type for indicators connection.
func (o TIDataConnectorDataTypesResponseOutput) Indicators() TIDataConnectorDataTypesResponseIndicatorsOutput {
	return o.ApplyT(func(v TIDataConnectorDataTypesResponse) TIDataConnectorDataTypesResponseIndicators {
		return v.Indicators
	}).(TIDataConnectorDataTypesResponseIndicatorsOutput)
}

// Data type for indicators connection.
type TIDataConnectorDataTypesResponseIndicators struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Data type for indicators connection.
type TIDataConnectorDataTypesResponseIndicatorsOutput struct{ *pulumi.OutputState }

func (TIDataConnectorDataTypesResponseIndicatorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TIDataConnectorDataTypesResponseIndicators)(nil)).Elem()
}

func (o TIDataConnectorDataTypesResponseIndicatorsOutput) ToTIDataConnectorDataTypesResponseIndicatorsOutput() TIDataConnectorDataTypesResponseIndicatorsOutput {
	return o
}

func (o TIDataConnectorDataTypesResponseIndicatorsOutput) ToTIDataConnectorDataTypesResponseIndicatorsOutputWithContext(ctx context.Context) TIDataConnectorDataTypesResponseIndicatorsOutput {
	return o
}

func (o TIDataConnectorDataTypesResponseIndicatorsOutput) ToOutput(ctx context.Context) pulumix.Output[TIDataConnectorDataTypesResponseIndicators] {
	return pulumix.Output[TIDataConnectorDataTypesResponseIndicators]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o TIDataConnectorDataTypesResponseIndicatorsOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v TIDataConnectorDataTypesResponseIndicators) string { return v.State }).(pulumi.StringOutput)
}

// Describes team information
type TeamInformationResponse struct {
	// The description of the team
	Description string `pulumi:"description"`
	// The name of the team
	Name string `pulumi:"name"`
	// The primary channel URL of the team
	PrimaryChannelUrl string `pulumi:"primaryChannelUrl"`
	// The time the team was created
	TeamCreationTimeUtc string `pulumi:"teamCreationTimeUtc"`
	// Team ID
	TeamId string `pulumi:"teamId"`
}

// Describes team information
type TeamInformationResponseOutput struct{ *pulumi.OutputState }

func (TeamInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamInformationResponse)(nil)).Elem()
}

func (o TeamInformationResponseOutput) ToTeamInformationResponseOutput() TeamInformationResponseOutput {
	return o
}

func (o TeamInformationResponseOutput) ToTeamInformationResponseOutputWithContext(ctx context.Context) TeamInformationResponseOutput {
	return o
}

func (o TeamInformationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TeamInformationResponse] {
	return pulumix.Output[TeamInformationResponse]{
		OutputState: o.OutputState,
	}
}

// The description of the team
func (o TeamInformationResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TeamInformationResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the team
func (o TeamInformationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TeamInformationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The primary channel URL of the team
func (o TeamInformationResponseOutput) PrimaryChannelUrl() pulumi.StringOutput {
	return o.ApplyT(func(v TeamInformationResponse) string { return v.PrimaryChannelUrl }).(pulumi.StringOutput)
}

// The time the team was created
func (o TeamInformationResponseOutput) TeamCreationTimeUtc() pulumi.StringOutput {
	return o.ApplyT(func(v TeamInformationResponse) string { return v.TeamCreationTimeUtc }).(pulumi.StringOutput)
}

// Team ID
func (o TeamInformationResponseOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v TeamInformationResponse) string { return v.TeamId }).(pulumi.StringOutput)
}

type TeamInformationResponsePtrOutput struct{ *pulumi.OutputState }

func (TeamInformationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamInformationResponse)(nil)).Elem()
}

func (o TeamInformationResponsePtrOutput) ToTeamInformationResponsePtrOutput() TeamInformationResponsePtrOutput {
	return o
}

func (o TeamInformationResponsePtrOutput) ToTeamInformationResponsePtrOutputWithContext(ctx context.Context) TeamInformationResponsePtrOutput {
	return o
}

func (o TeamInformationResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TeamInformationResponse] {
	return pulumix.Output[*TeamInformationResponse]{
		OutputState: o.OutputState,
	}
}

func (o TeamInformationResponsePtrOutput) Elem() TeamInformationResponseOutput {
	return o.ApplyT(func(v *TeamInformationResponse) TeamInformationResponse {
		if v != nil {
			return *v
		}
		var ret TeamInformationResponse
		return ret
	}).(TeamInformationResponseOutput)
}

// The description of the team
func (o TeamInformationResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The name of the team
func (o TeamInformationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The primary channel URL of the team
func (o TeamInformationResponsePtrOutput) PrimaryChannelUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryChannelUrl
	}).(pulumi.StringPtrOutput)
}

// The time the team was created
func (o TeamInformationResponsePtrOutput) TeamCreationTimeUtc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TeamCreationTimeUtc
	}).(pulumi.StringPtrOutput)
}

// Team ID
func (o TeamInformationResponsePtrOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamInformationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TeamId
	}).(pulumi.StringPtrOutput)
}

// Describes external reference
type ThreatIntelligenceExternalReference struct {
	// External reference description
	Description *string `pulumi:"description"`
	// External reference ID
	ExternalId *string `pulumi:"externalId"`
	// External reference hashes
	Hashes map[string]string `pulumi:"hashes"`
	// External reference source name
	SourceName *string `pulumi:"sourceName"`
	// External reference URL
	Url *string `pulumi:"url"`
}

// ThreatIntelligenceExternalReferenceInput is an input type that accepts ThreatIntelligenceExternalReferenceArgs and ThreatIntelligenceExternalReferenceOutput values.
// You can construct a concrete instance of `ThreatIntelligenceExternalReferenceInput` via:
//
//	ThreatIntelligenceExternalReferenceArgs{...}
type ThreatIntelligenceExternalReferenceInput interface {
	pulumi.Input

	ToThreatIntelligenceExternalReferenceOutput() ThreatIntelligenceExternalReferenceOutput
	ToThreatIntelligenceExternalReferenceOutputWithContext(context.Context) ThreatIntelligenceExternalReferenceOutput
}

// Describes external reference
type ThreatIntelligenceExternalReferenceArgs struct {
	// External reference description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// External reference ID
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// External reference hashes
	Hashes pulumi.StringMapInput `pulumi:"hashes"`
	// External reference source name
	SourceName pulumi.StringPtrInput `pulumi:"sourceName"`
	// External reference URL
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ThreatIntelligenceExternalReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceExternalReference)(nil)).Elem()
}

func (i ThreatIntelligenceExternalReferenceArgs) ToThreatIntelligenceExternalReferenceOutput() ThreatIntelligenceExternalReferenceOutput {
	return i.ToThreatIntelligenceExternalReferenceOutputWithContext(context.Background())
}

func (i ThreatIntelligenceExternalReferenceArgs) ToThreatIntelligenceExternalReferenceOutputWithContext(ctx context.Context) ThreatIntelligenceExternalReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceExternalReferenceOutput)
}

func (i ThreatIntelligenceExternalReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceExternalReference] {
	return pulumix.Output[ThreatIntelligenceExternalReference]{
		OutputState: i.ToThreatIntelligenceExternalReferenceOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelligenceExternalReferenceArrayInput is an input type that accepts ThreatIntelligenceExternalReferenceArray and ThreatIntelligenceExternalReferenceArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceExternalReferenceArrayInput` via:
//
//	ThreatIntelligenceExternalReferenceArray{ ThreatIntelligenceExternalReferenceArgs{...} }
type ThreatIntelligenceExternalReferenceArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceExternalReferenceArrayOutput() ThreatIntelligenceExternalReferenceArrayOutput
	ToThreatIntelligenceExternalReferenceArrayOutputWithContext(context.Context) ThreatIntelligenceExternalReferenceArrayOutput
}

type ThreatIntelligenceExternalReferenceArray []ThreatIntelligenceExternalReferenceInput

func (ThreatIntelligenceExternalReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceExternalReference)(nil)).Elem()
}

func (i ThreatIntelligenceExternalReferenceArray) ToThreatIntelligenceExternalReferenceArrayOutput() ThreatIntelligenceExternalReferenceArrayOutput {
	return i.ToThreatIntelligenceExternalReferenceArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceExternalReferenceArray) ToThreatIntelligenceExternalReferenceArrayOutputWithContext(ctx context.Context) ThreatIntelligenceExternalReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceExternalReferenceArrayOutput)
}

func (i ThreatIntelligenceExternalReferenceArray) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceExternalReference] {
	return pulumix.Output[[]ThreatIntelligenceExternalReference]{
		OutputState: i.ToThreatIntelligenceExternalReferenceArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes external reference
type ThreatIntelligenceExternalReferenceOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceExternalReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceExternalReference)(nil)).Elem()
}

func (o ThreatIntelligenceExternalReferenceOutput) ToThreatIntelligenceExternalReferenceOutput() ThreatIntelligenceExternalReferenceOutput {
	return o
}

func (o ThreatIntelligenceExternalReferenceOutput) ToThreatIntelligenceExternalReferenceOutputWithContext(ctx context.Context) ThreatIntelligenceExternalReferenceOutput {
	return o
}

func (o ThreatIntelligenceExternalReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceExternalReference] {
	return pulumix.Output[ThreatIntelligenceExternalReference]{
		OutputState: o.OutputState,
	}
}

// External reference description
func (o ThreatIntelligenceExternalReferenceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceExternalReference) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// External reference ID
func (o ThreatIntelligenceExternalReferenceOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceExternalReference) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// External reference hashes
func (o ThreatIntelligenceExternalReferenceOutput) Hashes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThreatIntelligenceExternalReference) map[string]string { return v.Hashes }).(pulumi.StringMapOutput)
}

// External reference source name
func (o ThreatIntelligenceExternalReferenceOutput) SourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceExternalReference) *string { return v.SourceName }).(pulumi.StringPtrOutput)
}

// External reference URL
func (o ThreatIntelligenceExternalReferenceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceExternalReference) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ThreatIntelligenceExternalReferenceArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceExternalReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceExternalReference)(nil)).Elem()
}

func (o ThreatIntelligenceExternalReferenceArrayOutput) ToThreatIntelligenceExternalReferenceArrayOutput() ThreatIntelligenceExternalReferenceArrayOutput {
	return o
}

func (o ThreatIntelligenceExternalReferenceArrayOutput) ToThreatIntelligenceExternalReferenceArrayOutputWithContext(ctx context.Context) ThreatIntelligenceExternalReferenceArrayOutput {
	return o
}

func (o ThreatIntelligenceExternalReferenceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceExternalReference] {
	return pulumix.Output[[]ThreatIntelligenceExternalReference]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelligenceExternalReferenceArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceExternalReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreatIntelligenceExternalReference {
		return vs[0].([]ThreatIntelligenceExternalReference)[vs[1].(int)]
	}).(ThreatIntelligenceExternalReferenceOutput)
}

// Describes threat granular marking model entity
type ThreatIntelligenceGranularMarkingModel struct {
	// Language granular marking model
	Language *string `pulumi:"language"`
	// marking reference granular marking model
	MarkingRef *int `pulumi:"markingRef"`
	// granular marking model selectors
	Selectors []string `pulumi:"selectors"`
}

// ThreatIntelligenceGranularMarkingModelInput is an input type that accepts ThreatIntelligenceGranularMarkingModelArgs and ThreatIntelligenceGranularMarkingModelOutput values.
// You can construct a concrete instance of `ThreatIntelligenceGranularMarkingModelInput` via:
//
//	ThreatIntelligenceGranularMarkingModelArgs{...}
type ThreatIntelligenceGranularMarkingModelInput interface {
	pulumi.Input

	ToThreatIntelligenceGranularMarkingModelOutput() ThreatIntelligenceGranularMarkingModelOutput
	ToThreatIntelligenceGranularMarkingModelOutputWithContext(context.Context) ThreatIntelligenceGranularMarkingModelOutput
}

// Describes threat granular marking model entity
type ThreatIntelligenceGranularMarkingModelArgs struct {
	// Language granular marking model
	Language pulumi.StringPtrInput `pulumi:"language"`
	// marking reference granular marking model
	MarkingRef pulumi.IntPtrInput `pulumi:"markingRef"`
	// granular marking model selectors
	Selectors pulumi.StringArrayInput `pulumi:"selectors"`
}

func (ThreatIntelligenceGranularMarkingModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceGranularMarkingModel)(nil)).Elem()
}

func (i ThreatIntelligenceGranularMarkingModelArgs) ToThreatIntelligenceGranularMarkingModelOutput() ThreatIntelligenceGranularMarkingModelOutput {
	return i.ToThreatIntelligenceGranularMarkingModelOutputWithContext(context.Background())
}

func (i ThreatIntelligenceGranularMarkingModelArgs) ToThreatIntelligenceGranularMarkingModelOutputWithContext(ctx context.Context) ThreatIntelligenceGranularMarkingModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceGranularMarkingModelOutput)
}

func (i ThreatIntelligenceGranularMarkingModelArgs) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceGranularMarkingModel] {
	return pulumix.Output[ThreatIntelligenceGranularMarkingModel]{
		OutputState: i.ToThreatIntelligenceGranularMarkingModelOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelligenceGranularMarkingModelArrayInput is an input type that accepts ThreatIntelligenceGranularMarkingModelArray and ThreatIntelligenceGranularMarkingModelArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceGranularMarkingModelArrayInput` via:
//
//	ThreatIntelligenceGranularMarkingModelArray{ ThreatIntelligenceGranularMarkingModelArgs{...} }
type ThreatIntelligenceGranularMarkingModelArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceGranularMarkingModelArrayOutput() ThreatIntelligenceGranularMarkingModelArrayOutput
	ToThreatIntelligenceGranularMarkingModelArrayOutputWithContext(context.Context) ThreatIntelligenceGranularMarkingModelArrayOutput
}

type ThreatIntelligenceGranularMarkingModelArray []ThreatIntelligenceGranularMarkingModelInput

func (ThreatIntelligenceGranularMarkingModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceGranularMarkingModel)(nil)).Elem()
}

func (i ThreatIntelligenceGranularMarkingModelArray) ToThreatIntelligenceGranularMarkingModelArrayOutput() ThreatIntelligenceGranularMarkingModelArrayOutput {
	return i.ToThreatIntelligenceGranularMarkingModelArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceGranularMarkingModelArray) ToThreatIntelligenceGranularMarkingModelArrayOutputWithContext(ctx context.Context) ThreatIntelligenceGranularMarkingModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceGranularMarkingModelArrayOutput)
}

func (i ThreatIntelligenceGranularMarkingModelArray) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceGranularMarkingModel] {
	return pulumix.Output[[]ThreatIntelligenceGranularMarkingModel]{
		OutputState: i.ToThreatIntelligenceGranularMarkingModelArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes threat granular marking model entity
type ThreatIntelligenceGranularMarkingModelOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceGranularMarkingModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceGranularMarkingModel)(nil)).Elem()
}

func (o ThreatIntelligenceGranularMarkingModelOutput) ToThreatIntelligenceGranularMarkingModelOutput() ThreatIntelligenceGranularMarkingModelOutput {
	return o
}

func (o ThreatIntelligenceGranularMarkingModelOutput) ToThreatIntelligenceGranularMarkingModelOutputWithContext(ctx context.Context) ThreatIntelligenceGranularMarkingModelOutput {
	return o
}

func (o ThreatIntelligenceGranularMarkingModelOutput) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceGranularMarkingModel] {
	return pulumix.Output[ThreatIntelligenceGranularMarkingModel]{
		OutputState: o.OutputState,
	}
}

// Language granular marking model
func (o ThreatIntelligenceGranularMarkingModelOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceGranularMarkingModel) *string { return v.Language }).(pulumi.StringPtrOutput)
}

// marking reference granular marking model
func (o ThreatIntelligenceGranularMarkingModelOutput) MarkingRef() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceGranularMarkingModel) *int { return v.MarkingRef }).(pulumi.IntPtrOutput)
}

// granular marking model selectors
func (o ThreatIntelligenceGranularMarkingModelOutput) Selectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThreatIntelligenceGranularMarkingModel) []string { return v.Selectors }).(pulumi.StringArrayOutput)
}

type ThreatIntelligenceGranularMarkingModelArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceGranularMarkingModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceGranularMarkingModel)(nil)).Elem()
}

func (o ThreatIntelligenceGranularMarkingModelArrayOutput) ToThreatIntelligenceGranularMarkingModelArrayOutput() ThreatIntelligenceGranularMarkingModelArrayOutput {
	return o
}

func (o ThreatIntelligenceGranularMarkingModelArrayOutput) ToThreatIntelligenceGranularMarkingModelArrayOutputWithContext(ctx context.Context) ThreatIntelligenceGranularMarkingModelArrayOutput {
	return o
}

func (o ThreatIntelligenceGranularMarkingModelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceGranularMarkingModel] {
	return pulumix.Output[[]ThreatIntelligenceGranularMarkingModel]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelligenceGranularMarkingModelArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceGranularMarkingModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreatIntelligenceGranularMarkingModel {
		return vs[0].([]ThreatIntelligenceGranularMarkingModel)[vs[1].(int)]
	}).(ThreatIntelligenceGranularMarkingModelOutput)
}

// Describes threat kill chain phase entity
type ThreatIntelligenceKillChainPhase struct {
	// Kill chainName name
	KillChainName *string `pulumi:"killChainName"`
	// Phase name
	PhaseName *string `pulumi:"phaseName"`
}

// ThreatIntelligenceKillChainPhaseInput is an input type that accepts ThreatIntelligenceKillChainPhaseArgs and ThreatIntelligenceKillChainPhaseOutput values.
// You can construct a concrete instance of `ThreatIntelligenceKillChainPhaseInput` via:
//
//	ThreatIntelligenceKillChainPhaseArgs{...}
type ThreatIntelligenceKillChainPhaseInput interface {
	pulumi.Input

	ToThreatIntelligenceKillChainPhaseOutput() ThreatIntelligenceKillChainPhaseOutput
	ToThreatIntelligenceKillChainPhaseOutputWithContext(context.Context) ThreatIntelligenceKillChainPhaseOutput
}

// Describes threat kill chain phase entity
type ThreatIntelligenceKillChainPhaseArgs struct {
	// Kill chainName name
	KillChainName pulumi.StringPtrInput `pulumi:"killChainName"`
	// Phase name
	PhaseName pulumi.StringPtrInput `pulumi:"phaseName"`
}

func (ThreatIntelligenceKillChainPhaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceKillChainPhase)(nil)).Elem()
}

func (i ThreatIntelligenceKillChainPhaseArgs) ToThreatIntelligenceKillChainPhaseOutput() ThreatIntelligenceKillChainPhaseOutput {
	return i.ToThreatIntelligenceKillChainPhaseOutputWithContext(context.Background())
}

func (i ThreatIntelligenceKillChainPhaseArgs) ToThreatIntelligenceKillChainPhaseOutputWithContext(ctx context.Context) ThreatIntelligenceKillChainPhaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceKillChainPhaseOutput)
}

func (i ThreatIntelligenceKillChainPhaseArgs) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceKillChainPhase] {
	return pulumix.Output[ThreatIntelligenceKillChainPhase]{
		OutputState: i.ToThreatIntelligenceKillChainPhaseOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelligenceKillChainPhaseArrayInput is an input type that accepts ThreatIntelligenceKillChainPhaseArray and ThreatIntelligenceKillChainPhaseArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceKillChainPhaseArrayInput` via:
//
//	ThreatIntelligenceKillChainPhaseArray{ ThreatIntelligenceKillChainPhaseArgs{...} }
type ThreatIntelligenceKillChainPhaseArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceKillChainPhaseArrayOutput() ThreatIntelligenceKillChainPhaseArrayOutput
	ToThreatIntelligenceKillChainPhaseArrayOutputWithContext(context.Context) ThreatIntelligenceKillChainPhaseArrayOutput
}

type ThreatIntelligenceKillChainPhaseArray []ThreatIntelligenceKillChainPhaseInput

func (ThreatIntelligenceKillChainPhaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceKillChainPhase)(nil)).Elem()
}

func (i ThreatIntelligenceKillChainPhaseArray) ToThreatIntelligenceKillChainPhaseArrayOutput() ThreatIntelligenceKillChainPhaseArrayOutput {
	return i.ToThreatIntelligenceKillChainPhaseArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceKillChainPhaseArray) ToThreatIntelligenceKillChainPhaseArrayOutputWithContext(ctx context.Context) ThreatIntelligenceKillChainPhaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceKillChainPhaseArrayOutput)
}

func (i ThreatIntelligenceKillChainPhaseArray) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceKillChainPhase] {
	return pulumix.Output[[]ThreatIntelligenceKillChainPhase]{
		OutputState: i.ToThreatIntelligenceKillChainPhaseArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes threat kill chain phase entity
type ThreatIntelligenceKillChainPhaseOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceKillChainPhaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceKillChainPhase)(nil)).Elem()
}

func (o ThreatIntelligenceKillChainPhaseOutput) ToThreatIntelligenceKillChainPhaseOutput() ThreatIntelligenceKillChainPhaseOutput {
	return o
}

func (o ThreatIntelligenceKillChainPhaseOutput) ToThreatIntelligenceKillChainPhaseOutputWithContext(ctx context.Context) ThreatIntelligenceKillChainPhaseOutput {
	return o
}

func (o ThreatIntelligenceKillChainPhaseOutput) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceKillChainPhase] {
	return pulumix.Output[ThreatIntelligenceKillChainPhase]{
		OutputState: o.OutputState,
	}
}

// Kill chainName name
func (o ThreatIntelligenceKillChainPhaseOutput) KillChainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceKillChainPhase) *string { return v.KillChainName }).(pulumi.StringPtrOutput)
}

// Phase name
func (o ThreatIntelligenceKillChainPhaseOutput) PhaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceKillChainPhase) *string { return v.PhaseName }).(pulumi.StringPtrOutput)
}

type ThreatIntelligenceKillChainPhaseArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceKillChainPhaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceKillChainPhase)(nil)).Elem()
}

func (o ThreatIntelligenceKillChainPhaseArrayOutput) ToThreatIntelligenceKillChainPhaseArrayOutput() ThreatIntelligenceKillChainPhaseArrayOutput {
	return o
}

func (o ThreatIntelligenceKillChainPhaseArrayOutput) ToThreatIntelligenceKillChainPhaseArrayOutputWithContext(ctx context.Context) ThreatIntelligenceKillChainPhaseArrayOutput {
	return o
}

func (o ThreatIntelligenceKillChainPhaseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceKillChainPhase] {
	return pulumix.Output[[]ThreatIntelligenceKillChainPhase]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelligenceKillChainPhaseArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceKillChainPhaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreatIntelligenceKillChainPhase {
		return vs[0].([]ThreatIntelligenceKillChainPhase)[vs[1].(int)]
	}).(ThreatIntelligenceKillChainPhaseOutput)
}

// Describes parsed pattern entity
type ThreatIntelligenceParsedPattern struct {
	// Pattern type key
	PatternTypeKey *string `pulumi:"patternTypeKey"`
	// Pattern type keys
	PatternTypeValues []ThreatIntelligenceParsedPatternTypeValue `pulumi:"patternTypeValues"`
}

// ThreatIntelligenceParsedPatternInput is an input type that accepts ThreatIntelligenceParsedPatternArgs and ThreatIntelligenceParsedPatternOutput values.
// You can construct a concrete instance of `ThreatIntelligenceParsedPatternInput` via:
//
//	ThreatIntelligenceParsedPatternArgs{...}
type ThreatIntelligenceParsedPatternInput interface {
	pulumi.Input

	ToThreatIntelligenceParsedPatternOutput() ThreatIntelligenceParsedPatternOutput
	ToThreatIntelligenceParsedPatternOutputWithContext(context.Context) ThreatIntelligenceParsedPatternOutput
}

// Describes parsed pattern entity
type ThreatIntelligenceParsedPatternArgs struct {
	// Pattern type key
	PatternTypeKey pulumi.StringPtrInput `pulumi:"patternTypeKey"`
	// Pattern type keys
	PatternTypeValues ThreatIntelligenceParsedPatternTypeValueArrayInput `pulumi:"patternTypeValues"`
}

func (ThreatIntelligenceParsedPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceParsedPattern)(nil)).Elem()
}

func (i ThreatIntelligenceParsedPatternArgs) ToThreatIntelligenceParsedPatternOutput() ThreatIntelligenceParsedPatternOutput {
	return i.ToThreatIntelligenceParsedPatternOutputWithContext(context.Background())
}

func (i ThreatIntelligenceParsedPatternArgs) ToThreatIntelligenceParsedPatternOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceParsedPatternOutput)
}

func (i ThreatIntelligenceParsedPatternArgs) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceParsedPattern] {
	return pulumix.Output[ThreatIntelligenceParsedPattern]{
		OutputState: i.ToThreatIntelligenceParsedPatternOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelligenceParsedPatternArrayInput is an input type that accepts ThreatIntelligenceParsedPatternArray and ThreatIntelligenceParsedPatternArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceParsedPatternArrayInput` via:
//
//	ThreatIntelligenceParsedPatternArray{ ThreatIntelligenceParsedPatternArgs{...} }
type ThreatIntelligenceParsedPatternArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceParsedPatternArrayOutput() ThreatIntelligenceParsedPatternArrayOutput
	ToThreatIntelligenceParsedPatternArrayOutputWithContext(context.Context) ThreatIntelligenceParsedPatternArrayOutput
}

type ThreatIntelligenceParsedPatternArray []ThreatIntelligenceParsedPatternInput

func (ThreatIntelligenceParsedPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceParsedPattern)(nil)).Elem()
}

func (i ThreatIntelligenceParsedPatternArray) ToThreatIntelligenceParsedPatternArrayOutput() ThreatIntelligenceParsedPatternArrayOutput {
	return i.ToThreatIntelligenceParsedPatternArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceParsedPatternArray) ToThreatIntelligenceParsedPatternArrayOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceParsedPatternArrayOutput)
}

func (i ThreatIntelligenceParsedPatternArray) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceParsedPattern] {
	return pulumix.Output[[]ThreatIntelligenceParsedPattern]{
		OutputState: i.ToThreatIntelligenceParsedPatternArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes parsed pattern entity
type ThreatIntelligenceParsedPatternOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceParsedPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceParsedPattern)(nil)).Elem()
}

func (o ThreatIntelligenceParsedPatternOutput) ToThreatIntelligenceParsedPatternOutput() ThreatIntelligenceParsedPatternOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternOutput) ToThreatIntelligenceParsedPatternOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternOutput) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceParsedPattern] {
	return pulumix.Output[ThreatIntelligenceParsedPattern]{
		OutputState: o.OutputState,
	}
}

// Pattern type key
func (o ThreatIntelligenceParsedPatternOutput) PatternTypeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceParsedPattern) *string { return v.PatternTypeKey }).(pulumi.StringPtrOutput)
}

// Pattern type keys
func (o ThreatIntelligenceParsedPatternOutput) PatternTypeValues() ThreatIntelligenceParsedPatternTypeValueArrayOutput {
	return o.ApplyT(func(v ThreatIntelligenceParsedPattern) []ThreatIntelligenceParsedPatternTypeValue {
		return v.PatternTypeValues
	}).(ThreatIntelligenceParsedPatternTypeValueArrayOutput)
}

type ThreatIntelligenceParsedPatternArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceParsedPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceParsedPattern)(nil)).Elem()
}

func (o ThreatIntelligenceParsedPatternArrayOutput) ToThreatIntelligenceParsedPatternArrayOutput() ThreatIntelligenceParsedPatternArrayOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternArrayOutput) ToThreatIntelligenceParsedPatternArrayOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternArrayOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceParsedPattern] {
	return pulumix.Output[[]ThreatIntelligenceParsedPattern]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelligenceParsedPatternArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceParsedPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreatIntelligenceParsedPattern {
		return vs[0].([]ThreatIntelligenceParsedPattern)[vs[1].(int)]
	}).(ThreatIntelligenceParsedPatternOutput)
}

// Describes threat kill chain phase entity
type ThreatIntelligenceParsedPatternTypeValue struct {
	// Value of parsed pattern
	Value *string `pulumi:"value"`
	// Type of the value
	ValueType *string `pulumi:"valueType"`
}

// ThreatIntelligenceParsedPatternTypeValueInput is an input type that accepts ThreatIntelligenceParsedPatternTypeValueArgs and ThreatIntelligenceParsedPatternTypeValueOutput values.
// You can construct a concrete instance of `ThreatIntelligenceParsedPatternTypeValueInput` via:
//
//	ThreatIntelligenceParsedPatternTypeValueArgs{...}
type ThreatIntelligenceParsedPatternTypeValueInput interface {
	pulumi.Input

	ToThreatIntelligenceParsedPatternTypeValueOutput() ThreatIntelligenceParsedPatternTypeValueOutput
	ToThreatIntelligenceParsedPatternTypeValueOutputWithContext(context.Context) ThreatIntelligenceParsedPatternTypeValueOutput
}

// Describes threat kill chain phase entity
type ThreatIntelligenceParsedPatternTypeValueArgs struct {
	// Value of parsed pattern
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Type of the value
	ValueType pulumi.StringPtrInput `pulumi:"valueType"`
}

func (ThreatIntelligenceParsedPatternTypeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceParsedPatternTypeValue)(nil)).Elem()
}

func (i ThreatIntelligenceParsedPatternTypeValueArgs) ToThreatIntelligenceParsedPatternTypeValueOutput() ThreatIntelligenceParsedPatternTypeValueOutput {
	return i.ToThreatIntelligenceParsedPatternTypeValueOutputWithContext(context.Background())
}

func (i ThreatIntelligenceParsedPatternTypeValueArgs) ToThreatIntelligenceParsedPatternTypeValueOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternTypeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceParsedPatternTypeValueOutput)
}

func (i ThreatIntelligenceParsedPatternTypeValueArgs) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceParsedPatternTypeValue] {
	return pulumix.Output[ThreatIntelligenceParsedPatternTypeValue]{
		OutputState: i.ToThreatIntelligenceParsedPatternTypeValueOutputWithContext(ctx).OutputState,
	}
}

// ThreatIntelligenceParsedPatternTypeValueArrayInput is an input type that accepts ThreatIntelligenceParsedPatternTypeValueArray and ThreatIntelligenceParsedPatternTypeValueArrayOutput values.
// You can construct a concrete instance of `ThreatIntelligenceParsedPatternTypeValueArrayInput` via:
//
//	ThreatIntelligenceParsedPatternTypeValueArray{ ThreatIntelligenceParsedPatternTypeValueArgs{...} }
type ThreatIntelligenceParsedPatternTypeValueArrayInput interface {
	pulumi.Input

	ToThreatIntelligenceParsedPatternTypeValueArrayOutput() ThreatIntelligenceParsedPatternTypeValueArrayOutput
	ToThreatIntelligenceParsedPatternTypeValueArrayOutputWithContext(context.Context) ThreatIntelligenceParsedPatternTypeValueArrayOutput
}

type ThreatIntelligenceParsedPatternTypeValueArray []ThreatIntelligenceParsedPatternTypeValueInput

func (ThreatIntelligenceParsedPatternTypeValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceParsedPatternTypeValue)(nil)).Elem()
}

func (i ThreatIntelligenceParsedPatternTypeValueArray) ToThreatIntelligenceParsedPatternTypeValueArrayOutput() ThreatIntelligenceParsedPatternTypeValueArrayOutput {
	return i.ToThreatIntelligenceParsedPatternTypeValueArrayOutputWithContext(context.Background())
}

func (i ThreatIntelligenceParsedPatternTypeValueArray) ToThreatIntelligenceParsedPatternTypeValueArrayOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternTypeValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThreatIntelligenceParsedPatternTypeValueArrayOutput)
}

func (i ThreatIntelligenceParsedPatternTypeValueArray) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceParsedPatternTypeValue] {
	return pulumix.Output[[]ThreatIntelligenceParsedPatternTypeValue]{
		OutputState: i.ToThreatIntelligenceParsedPatternTypeValueArrayOutputWithContext(ctx).OutputState,
	}
}

// Describes threat kill chain phase entity
type ThreatIntelligenceParsedPatternTypeValueOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceParsedPatternTypeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThreatIntelligenceParsedPatternTypeValue)(nil)).Elem()
}

func (o ThreatIntelligenceParsedPatternTypeValueOutput) ToThreatIntelligenceParsedPatternTypeValueOutput() ThreatIntelligenceParsedPatternTypeValueOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternTypeValueOutput) ToThreatIntelligenceParsedPatternTypeValueOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternTypeValueOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternTypeValueOutput) ToOutput(ctx context.Context) pulumix.Output[ThreatIntelligenceParsedPatternTypeValue] {
	return pulumix.Output[ThreatIntelligenceParsedPatternTypeValue]{
		OutputState: o.OutputState,
	}
}

// Value of parsed pattern
func (o ThreatIntelligenceParsedPatternTypeValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceParsedPatternTypeValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Type of the value
func (o ThreatIntelligenceParsedPatternTypeValueOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThreatIntelligenceParsedPatternTypeValue) *string { return v.ValueType }).(pulumi.StringPtrOutput)
}

type ThreatIntelligenceParsedPatternTypeValueArrayOutput struct{ *pulumi.OutputState }

func (ThreatIntelligenceParsedPatternTypeValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThreatIntelligenceParsedPatternTypeValue)(nil)).Elem()
}

func (o ThreatIntelligenceParsedPatternTypeValueArrayOutput) ToThreatIntelligenceParsedPatternTypeValueArrayOutput() ThreatIntelligenceParsedPatternTypeValueArrayOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternTypeValueArrayOutput) ToThreatIntelligenceParsedPatternTypeValueArrayOutputWithContext(ctx context.Context) ThreatIntelligenceParsedPatternTypeValueArrayOutput {
	return o
}

func (o ThreatIntelligenceParsedPatternTypeValueArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ThreatIntelligenceParsedPatternTypeValue] {
	return pulumix.Output[[]ThreatIntelligenceParsedPatternTypeValue]{
		OutputState: o.OutputState,
	}
}

func (o ThreatIntelligenceParsedPatternTypeValueArrayOutput) Index(i pulumi.IntInput) ThreatIntelligenceParsedPatternTypeValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThreatIntelligenceParsedPatternTypeValue {
		return vs[0].([]ThreatIntelligenceParsedPatternTypeValue)[vs[1].(int)]
	}).(ThreatIntelligenceParsedPatternTypeValueOutput)
}

// The available data types for Threat Intelligence TAXII data connector.
type TiTaxiiDataConnectorDataTypes struct {
	// Data type for TAXII connector.
	TaxiiClient TiTaxiiDataConnectorDataTypesTaxiiClient `pulumi:"taxiiClient"`
}

// TiTaxiiDataConnectorDataTypesInput is an input type that accepts TiTaxiiDataConnectorDataTypesArgs and TiTaxiiDataConnectorDataTypesOutput values.
// You can construct a concrete instance of `TiTaxiiDataConnectorDataTypesInput` via:
//
//	TiTaxiiDataConnectorDataTypesArgs{...}
type TiTaxiiDataConnectorDataTypesInput interface {
	pulumi.Input

	ToTiTaxiiDataConnectorDataTypesOutput() TiTaxiiDataConnectorDataTypesOutput
	ToTiTaxiiDataConnectorDataTypesOutputWithContext(context.Context) TiTaxiiDataConnectorDataTypesOutput
}

// The available data types for Threat Intelligence TAXII data connector.
type TiTaxiiDataConnectorDataTypesArgs struct {
	// Data type for TAXII connector.
	TaxiiClient TiTaxiiDataConnectorDataTypesTaxiiClientInput `pulumi:"taxiiClient"`
}

func (TiTaxiiDataConnectorDataTypesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypes)(nil)).Elem()
}

func (i TiTaxiiDataConnectorDataTypesArgs) ToTiTaxiiDataConnectorDataTypesOutput() TiTaxiiDataConnectorDataTypesOutput {
	return i.ToTiTaxiiDataConnectorDataTypesOutputWithContext(context.Background())
}

func (i TiTaxiiDataConnectorDataTypesArgs) ToTiTaxiiDataConnectorDataTypesOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TiTaxiiDataConnectorDataTypesOutput)
}

func (i TiTaxiiDataConnectorDataTypesArgs) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypes] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypes]{
		OutputState: i.ToTiTaxiiDataConnectorDataTypesOutputWithContext(ctx).OutputState,
	}
}

// The available data types for Threat Intelligence TAXII data connector.
type TiTaxiiDataConnectorDataTypesOutput struct{ *pulumi.OutputState }

func (TiTaxiiDataConnectorDataTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypes)(nil)).Elem()
}

func (o TiTaxiiDataConnectorDataTypesOutput) ToTiTaxiiDataConnectorDataTypesOutput() TiTaxiiDataConnectorDataTypesOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesOutput) ToTiTaxiiDataConnectorDataTypesOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesOutput) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypes] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypes]{
		OutputState: o.OutputState,
	}
}

// Data type for TAXII connector.
func (o TiTaxiiDataConnectorDataTypesOutput) TaxiiClient() TiTaxiiDataConnectorDataTypesTaxiiClientOutput {
	return o.ApplyT(func(v TiTaxiiDataConnectorDataTypes) TiTaxiiDataConnectorDataTypesTaxiiClient { return v.TaxiiClient }).(TiTaxiiDataConnectorDataTypesTaxiiClientOutput)
}

// The available data types for Threat Intelligence TAXII data connector.
type TiTaxiiDataConnectorDataTypesResponse struct {
	// Data type for TAXII connector.
	TaxiiClient TiTaxiiDataConnectorDataTypesResponseTaxiiClient `pulumi:"taxiiClient"`
}

// The available data types for Threat Intelligence TAXII data connector.
type TiTaxiiDataConnectorDataTypesResponseOutput struct{ *pulumi.OutputState }

func (TiTaxiiDataConnectorDataTypesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypesResponse)(nil)).Elem()
}

func (o TiTaxiiDataConnectorDataTypesResponseOutput) ToTiTaxiiDataConnectorDataTypesResponseOutput() TiTaxiiDataConnectorDataTypesResponseOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesResponseOutput) ToTiTaxiiDataConnectorDataTypesResponseOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesResponseOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypesResponse] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypesResponse]{
		OutputState: o.OutputState,
	}
}

// Data type for TAXII connector.
func (o TiTaxiiDataConnectorDataTypesResponseOutput) TaxiiClient() TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput {
	return o.ApplyT(func(v TiTaxiiDataConnectorDataTypesResponse) TiTaxiiDataConnectorDataTypesResponseTaxiiClient {
		return v.TaxiiClient
	}).(TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput)
}

// Data type for TAXII connector.
type TiTaxiiDataConnectorDataTypesResponseTaxiiClient struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// Data type for TAXII connector.
type TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput struct{ *pulumi.OutputState }

func (TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypesResponseTaxiiClient)(nil)).Elem()
}

func (o TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput) ToTiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput() TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput) ToTiTaxiiDataConnectorDataTypesResponseTaxiiClientOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypesResponseTaxiiClient] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypesResponseTaxiiClient]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v TiTaxiiDataConnectorDataTypesResponseTaxiiClient) string { return v.State }).(pulumi.StringOutput)
}

// Data type for TAXII connector.
type TiTaxiiDataConnectorDataTypesTaxiiClient struct {
	// Describe whether this data type connection is enabled or not.
	State string `pulumi:"state"`
}

// TiTaxiiDataConnectorDataTypesTaxiiClientInput is an input type that accepts TiTaxiiDataConnectorDataTypesTaxiiClientArgs and TiTaxiiDataConnectorDataTypesTaxiiClientOutput values.
// You can construct a concrete instance of `TiTaxiiDataConnectorDataTypesTaxiiClientInput` via:
//
//	TiTaxiiDataConnectorDataTypesTaxiiClientArgs{...}
type TiTaxiiDataConnectorDataTypesTaxiiClientInput interface {
	pulumi.Input

	ToTiTaxiiDataConnectorDataTypesTaxiiClientOutput() TiTaxiiDataConnectorDataTypesTaxiiClientOutput
	ToTiTaxiiDataConnectorDataTypesTaxiiClientOutputWithContext(context.Context) TiTaxiiDataConnectorDataTypesTaxiiClientOutput
}

// Data type for TAXII connector.
type TiTaxiiDataConnectorDataTypesTaxiiClientArgs struct {
	// Describe whether this data type connection is enabled or not.
	State pulumi.StringInput `pulumi:"state"`
}

func (TiTaxiiDataConnectorDataTypesTaxiiClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypesTaxiiClient)(nil)).Elem()
}

func (i TiTaxiiDataConnectorDataTypesTaxiiClientArgs) ToTiTaxiiDataConnectorDataTypesTaxiiClientOutput() TiTaxiiDataConnectorDataTypesTaxiiClientOutput {
	return i.ToTiTaxiiDataConnectorDataTypesTaxiiClientOutputWithContext(context.Background())
}

func (i TiTaxiiDataConnectorDataTypesTaxiiClientArgs) ToTiTaxiiDataConnectorDataTypesTaxiiClientOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesTaxiiClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TiTaxiiDataConnectorDataTypesTaxiiClientOutput)
}

func (i TiTaxiiDataConnectorDataTypesTaxiiClientArgs) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypesTaxiiClient] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypesTaxiiClient]{
		OutputState: i.ToTiTaxiiDataConnectorDataTypesTaxiiClientOutputWithContext(ctx).OutputState,
	}
}

// Data type for TAXII connector.
type TiTaxiiDataConnectorDataTypesTaxiiClientOutput struct{ *pulumi.OutputState }

func (TiTaxiiDataConnectorDataTypesTaxiiClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TiTaxiiDataConnectorDataTypesTaxiiClient)(nil)).Elem()
}

func (o TiTaxiiDataConnectorDataTypesTaxiiClientOutput) ToTiTaxiiDataConnectorDataTypesTaxiiClientOutput() TiTaxiiDataConnectorDataTypesTaxiiClientOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesTaxiiClientOutput) ToTiTaxiiDataConnectorDataTypesTaxiiClientOutputWithContext(ctx context.Context) TiTaxiiDataConnectorDataTypesTaxiiClientOutput {
	return o
}

func (o TiTaxiiDataConnectorDataTypesTaxiiClientOutput) ToOutput(ctx context.Context) pulumix.Output[TiTaxiiDataConnectorDataTypesTaxiiClient] {
	return pulumix.Output[TiTaxiiDataConnectorDataTypesTaxiiClient]{
		OutputState: o.OutputState,
	}
}

// Describe whether this data type connection is enabled or not.
func (o TiTaxiiDataConnectorDataTypesTaxiiClientOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v TiTaxiiDataConnectorDataTypesTaxiiClient) string { return v.State }).(pulumi.StringOutput)
}

// timeline aggregation information per kind
type TimelineAggregationResponse struct {
	// the total items found for a kind
	Count int `pulumi:"count"`
	// the query kind
	Kind string `pulumi:"kind"`
}

// timeline aggregation information per kind
type TimelineAggregationResponseOutput struct{ *pulumi.OutputState }

func (TimelineAggregationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineAggregationResponse)(nil)).Elem()
}

func (o TimelineAggregationResponseOutput) ToTimelineAggregationResponseOutput() TimelineAggregationResponseOutput {
	return o
}

func (o TimelineAggregationResponseOutput) ToTimelineAggregationResponseOutputWithContext(ctx context.Context) TimelineAggregationResponseOutput {
	return o
}

func (o TimelineAggregationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineAggregationResponse] {
	return pulumix.Output[TimelineAggregationResponse]{
		OutputState: o.OutputState,
	}
}

// the total items found for a kind
func (o TimelineAggregationResponseOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v TimelineAggregationResponse) int { return v.Count }).(pulumi.IntOutput)
}

// the query kind
func (o TimelineAggregationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineAggregationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

type TimelineAggregationResponseArrayOutput struct{ *pulumi.OutputState }

func (TimelineAggregationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimelineAggregationResponse)(nil)).Elem()
}

func (o TimelineAggregationResponseArrayOutput) ToTimelineAggregationResponseArrayOutput() TimelineAggregationResponseArrayOutput {
	return o
}

func (o TimelineAggregationResponseArrayOutput) ToTimelineAggregationResponseArrayOutputWithContext(ctx context.Context) TimelineAggregationResponseArrayOutput {
	return o
}

func (o TimelineAggregationResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TimelineAggregationResponse] {
	return pulumix.Output[[]TimelineAggregationResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineAggregationResponseArrayOutput) Index(i pulumi.IntInput) TimelineAggregationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimelineAggregationResponse {
		return vs[0].([]TimelineAggregationResponse)[vs[1].(int)]
	}).(TimelineAggregationResponseOutput)
}

// Timeline Query Errors.
type TimelineErrorResponse struct {
	// the error message
	ErrorMessage string `pulumi:"errorMessage"`
	// the query kind
	Kind string `pulumi:"kind"`
	// the query id
	QueryId *string `pulumi:"queryId"`
}

// Timeline Query Errors.
type TimelineErrorResponseOutput struct{ *pulumi.OutputState }

func (TimelineErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineErrorResponse)(nil)).Elem()
}

func (o TimelineErrorResponseOutput) ToTimelineErrorResponseOutput() TimelineErrorResponseOutput {
	return o
}

func (o TimelineErrorResponseOutput) ToTimelineErrorResponseOutputWithContext(ctx context.Context) TimelineErrorResponseOutput {
	return o
}

func (o TimelineErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineErrorResponse] {
	return pulumix.Output[TimelineErrorResponse]{
		OutputState: o.OutputState,
	}
}

// the error message
func (o TimelineErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// the query kind
func (o TimelineErrorResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TimelineErrorResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// the query id
func (o TimelineErrorResponseOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimelineErrorResponse) *string { return v.QueryId }).(pulumi.StringPtrOutput)
}

type TimelineErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (TimelineErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TimelineErrorResponse)(nil)).Elem()
}

func (o TimelineErrorResponseArrayOutput) ToTimelineErrorResponseArrayOutput() TimelineErrorResponseArrayOutput {
	return o
}

func (o TimelineErrorResponseArrayOutput) ToTimelineErrorResponseArrayOutputWithContext(ctx context.Context) TimelineErrorResponseArrayOutput {
	return o
}

func (o TimelineErrorResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TimelineErrorResponse] {
	return pulumix.Output[[]TimelineErrorResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineErrorResponseArrayOutput) Index(i pulumi.IntInput) TimelineErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TimelineErrorResponse {
		return vs[0].([]TimelineErrorResponse)[vs[1].(int)]
	}).(TimelineErrorResponseOutput)
}

// Expansion result metadata.
type TimelineResultsMetadataResponse struct {
	// timeline aggregation per kind
	Aggregations []TimelineAggregationResponse `pulumi:"aggregations"`
	// information about the failure queries
	Errors []TimelineErrorResponse `pulumi:"errors"`
	// the total items found for the timeline request
	TotalCount int `pulumi:"totalCount"`
}

// Expansion result metadata.
type TimelineResultsMetadataResponseOutput struct{ *pulumi.OutputState }

func (TimelineResultsMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimelineResultsMetadataResponse)(nil)).Elem()
}

func (o TimelineResultsMetadataResponseOutput) ToTimelineResultsMetadataResponseOutput() TimelineResultsMetadataResponseOutput {
	return o
}

func (o TimelineResultsMetadataResponseOutput) ToTimelineResultsMetadataResponseOutputWithContext(ctx context.Context) TimelineResultsMetadataResponseOutput {
	return o
}

func (o TimelineResultsMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimelineResultsMetadataResponse] {
	return pulumix.Output[TimelineResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// timeline aggregation per kind
func (o TimelineResultsMetadataResponseOutput) Aggregations() TimelineAggregationResponseArrayOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) []TimelineAggregationResponse { return v.Aggregations }).(TimelineAggregationResponseArrayOutput)
}

// information about the failure queries
func (o TimelineResultsMetadataResponseOutput) Errors() TimelineErrorResponseArrayOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) []TimelineErrorResponse { return v.Errors }).(TimelineErrorResponseArrayOutput)
}

// the total items found for the timeline request
func (o TimelineResultsMetadataResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v TimelineResultsMetadataResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type TimelineResultsMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (TimelineResultsMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimelineResultsMetadataResponse)(nil)).Elem()
}

func (o TimelineResultsMetadataResponsePtrOutput) ToTimelineResultsMetadataResponsePtrOutput() TimelineResultsMetadataResponsePtrOutput {
	return o
}

func (o TimelineResultsMetadataResponsePtrOutput) ToTimelineResultsMetadataResponsePtrOutputWithContext(ctx context.Context) TimelineResultsMetadataResponsePtrOutput {
	return o
}

func (o TimelineResultsMetadataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*TimelineResultsMetadataResponse] {
	return pulumix.Output[*TimelineResultsMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o TimelineResultsMetadataResponsePtrOutput) Elem() TimelineResultsMetadataResponseOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) TimelineResultsMetadataResponse {
		if v != nil {
			return *v
		}
		var ret TimelineResultsMetadataResponse
		return ret
	}).(TimelineResultsMetadataResponseOutput)
}

// timeline aggregation per kind
func (o TimelineResultsMetadataResponsePtrOutput) Aggregations() TimelineAggregationResponseArrayOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) []TimelineAggregationResponse {
		if v == nil {
			return nil
		}
		return v.Aggregations
	}).(TimelineAggregationResponseArrayOutput)
}

// information about the failure queries
func (o TimelineResultsMetadataResponsePtrOutput) Errors() TimelineErrorResponseArrayOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) []TimelineErrorResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(TimelineErrorResponseArrayOutput)
}

// the total items found for the timeline request
func (o TimelineResultsMetadataResponsePtrOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TimelineResultsMetadataResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TotalCount
	}).(pulumi.IntPtrOutput)
}

// User information that made some action
type UserInfo struct {
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// UserInfoInput is an input type that accepts UserInfoArgs and UserInfoOutput values.
// You can construct a concrete instance of `UserInfoInput` via:
//
//	UserInfoArgs{...}
type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

// User information that made some action
type UserInfoArgs struct {
	// The object id of the user.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

func (i UserInfoArgs) ToOutput(ctx context.Context) pulumix.Output[UserInfo] {
	return pulumix.Output[UserInfo]{
		OutputState: i.ToUserInfoOutputWithContext(ctx).OutputState,
	}
}

func (i UserInfoArgs) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput).ToUserInfoPtrOutputWithContext(ctx)
}

// UserInfoPtrInput is an input type that accepts UserInfoArgs, UserInfoPtr and UserInfoPtrOutput values.
// You can construct a concrete instance of `UserInfoPtrInput` via:
//
//	        UserInfoArgs{...}
//
//	or:
//
//	        nil
type UserInfoPtrInput interface {
	pulumi.Input

	ToUserInfoPtrOutput() UserInfoPtrOutput
	ToUserInfoPtrOutputWithContext(context.Context) UserInfoPtrOutput
}

type userInfoPtrType UserInfoArgs

func UserInfoPtr(v *UserInfoArgs) UserInfoPtrInput {
	return (*userInfoPtrType)(v)
}

func (*userInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (i *userInfoPtrType) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i *userInfoPtrType) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPtrOutput)
}

func (i *userInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserInfo] {
	return pulumix.Output[*UserInfo]{
		OutputState: i.ToUserInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// User information that made some action
type UserInfoOutput struct{ *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o.ToUserInfoPtrOutputWithContext(context.Background())
}

func (o UserInfoOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInfo) *UserInfo {
		return &v
	}).(UserInfoPtrOutput)
}

func (o UserInfoOutput) ToOutput(ctx context.Context) pulumix.Output[UserInfo] {
	return pulumix.Output[UserInfo]{
		OutputState: o.OutputState,
	}
}

// The object id of the user.
func (o UserInfoOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type UserInfoPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserInfo] {
	return pulumix.Output[*UserInfo]{
		OutputState: o.OutputState,
	}
}

func (o UserInfoPtrOutput) Elem() UserInfoOutput {
	return o.ApplyT(func(v *UserInfo) UserInfo {
		if v != nil {
			return *v
		}
		var ret UserInfo
		return ret
	}).(UserInfoOutput)
}

// The object id of the user.
func (o UserInfoPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User information that made some action
type UserInfoResponse struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// User information that made some action
type UserInfoResponseOutput struct{ *pulumi.OutputState }

func (UserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutput() UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutputWithContext(ctx context.Context) UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserInfoResponse] {
	return pulumix.Output[UserInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The email of the user.
func (o UserInfoResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v UserInfoResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The name of the user.
func (o UserInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v UserInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The object id of the user.
func (o UserInfoResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type UserInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (UserInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutput() UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutputWithContext(ctx context.Context) UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserInfoResponse] {
	return pulumix.Output[*UserInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserInfoResponsePtrOutput) Elem() UserInfoResponseOutput {
	return o.ApplyT(func(v *UserInfoResponse) UserInfoResponse {
		if v != nil {
			return *v
		}
		var ret UserInfoResponse
		return ret
	}).(UserInfoResponseOutput)
}

// The email of the user.
func (o UserInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The name of the user.
func (o UserInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o UserInfoResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Describes an error encountered in the file during validation.
type ValidationErrorResponse struct {
	// A list of descriptions of the error.
	ErrorMessages []string `pulumi:"errorMessages"`
	// The number of the record that has the error.
	RecordIndex *int `pulumi:"recordIndex"`
}

// Describes an error encountered in the file during validation.
type ValidationErrorResponseOutput struct{ *pulumi.OutputState }

func (ValidationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationErrorResponse)(nil)).Elem()
}

func (o ValidationErrorResponseOutput) ToValidationErrorResponseOutput() ValidationErrorResponseOutput {
	return o
}

func (o ValidationErrorResponseOutput) ToValidationErrorResponseOutputWithContext(ctx context.Context) ValidationErrorResponseOutput {
	return o
}

func (o ValidationErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ValidationErrorResponse] {
	return pulumix.Output[ValidationErrorResponse]{
		OutputState: o.OutputState,
	}
}

// A list of descriptions of the error.
func (o ValidationErrorResponseOutput) ErrorMessages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ValidationErrorResponse) []string { return v.ErrorMessages }).(pulumi.StringArrayOutput)
}

// The number of the record that has the error.
func (o ValidationErrorResponseOutput) RecordIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ValidationErrorResponse) *int { return v.RecordIndex }).(pulumi.IntPtrOutput)
}

type ValidationErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidationErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationErrorResponse)(nil)).Elem()
}

func (o ValidationErrorResponseArrayOutput) ToValidationErrorResponseArrayOutput() ValidationErrorResponseArrayOutput {
	return o
}

func (o ValidationErrorResponseArrayOutput) ToValidationErrorResponseArrayOutputWithContext(ctx context.Context) ValidationErrorResponseArrayOutput {
	return o
}

func (o ValidationErrorResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ValidationErrorResponse] {
	return pulumix.Output[[]ValidationErrorResponse]{
		OutputState: o.OutputState,
	}
}

func (o ValidationErrorResponseArrayOutput) Index(i pulumi.IntInput) ValidationErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationErrorResponse {
		return vs[0].([]ValidationErrorResponse)[vs[1].(int)]
	}).(ValidationErrorResponseOutput)
}

// User information that made some action
type WatchlistUserInfo struct {
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// WatchlistUserInfoInput is an input type that accepts WatchlistUserInfoArgs and WatchlistUserInfoOutput values.
// You can construct a concrete instance of `WatchlistUserInfoInput` via:
//
//	WatchlistUserInfoArgs{...}
type WatchlistUserInfoInput interface {
	pulumi.Input

	ToWatchlistUserInfoOutput() WatchlistUserInfoOutput
	ToWatchlistUserInfoOutputWithContext(context.Context) WatchlistUserInfoOutput
}

// User information that made some action
type WatchlistUserInfoArgs struct {
	// The object id of the user.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
}

func (WatchlistUserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfo)(nil)).Elem()
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoOutput() WatchlistUserInfoOutput {
	return i.ToWatchlistUserInfoOutputWithContext(context.Background())
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoOutputWithContext(ctx context.Context) WatchlistUserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoOutput)
}

func (i WatchlistUserInfoArgs) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfo] {
	return pulumix.Output[WatchlistUserInfo]{
		OutputState: i.ToWatchlistUserInfoOutputWithContext(ctx).OutputState,
	}
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return i.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (i WatchlistUserInfoArgs) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoOutput).ToWatchlistUserInfoPtrOutputWithContext(ctx)
}

// WatchlistUserInfoPtrInput is an input type that accepts WatchlistUserInfoArgs, WatchlistUserInfoPtr and WatchlistUserInfoPtrOutput values.
// You can construct a concrete instance of `WatchlistUserInfoPtrInput` via:
//
//	        WatchlistUserInfoArgs{...}
//
//	or:
//
//	        nil
type WatchlistUserInfoPtrInput interface {
	pulumi.Input

	ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput
	ToWatchlistUserInfoPtrOutputWithContext(context.Context) WatchlistUserInfoPtrOutput
}

type watchlistUserInfoPtrType WatchlistUserInfoArgs

func WatchlistUserInfoPtr(v *WatchlistUserInfoArgs) WatchlistUserInfoPtrInput {
	return (*watchlistUserInfoPtrType)(v)
}

func (*watchlistUserInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfo)(nil)).Elem()
}

func (i *watchlistUserInfoPtrType) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return i.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (i *watchlistUserInfoPtrType) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WatchlistUserInfoPtrOutput)
}

func (i *watchlistUserInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfo] {
	return pulumix.Output[*WatchlistUserInfo]{
		OutputState: i.ToWatchlistUserInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// User information that made some action
type WatchlistUserInfoOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfo)(nil)).Elem()
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoOutput() WatchlistUserInfoOutput {
	return o
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoOutputWithContext(ctx context.Context) WatchlistUserInfoOutput {
	return o
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return o.ToWatchlistUserInfoPtrOutputWithContext(context.Background())
}

func (o WatchlistUserInfoOutput) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WatchlistUserInfo) *WatchlistUserInfo {
		return &v
	}).(WatchlistUserInfoPtrOutput)
}

func (o WatchlistUserInfoOutput) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfo] {
	return pulumix.Output[WatchlistUserInfo]{
		OutputState: o.OutputState,
	}
}

// The object id of the user.
func (o WatchlistUserInfoOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WatchlistUserInfo) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type WatchlistUserInfoPtrOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfo)(nil)).Elem()
}

func (o WatchlistUserInfoPtrOutput) ToWatchlistUserInfoPtrOutput() WatchlistUserInfoPtrOutput {
	return o
}

func (o WatchlistUserInfoPtrOutput) ToWatchlistUserInfoPtrOutputWithContext(ctx context.Context) WatchlistUserInfoPtrOutput {
	return o
}

func (o WatchlistUserInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfo] {
	return pulumix.Output[*WatchlistUserInfo]{
		OutputState: o.OutputState,
	}
}

func (o WatchlistUserInfoPtrOutput) Elem() WatchlistUserInfoOutput {
	return o.ApplyT(func(v *WatchlistUserInfo) WatchlistUserInfo {
		if v != nil {
			return *v
		}
		var ret WatchlistUserInfo
		return ret
	}).(WatchlistUserInfoOutput)
}

// The object id of the user.
func (o WatchlistUserInfoPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfo) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User information that made some action
type WatchlistUserInfoResponse struct {
	// The email of the user.
	Email string `pulumi:"email"`
	// The name of the user.
	Name string `pulumi:"name"`
	// The object id of the user.
	ObjectId *string `pulumi:"objectId"`
}

// User information that made some action
type WatchlistUserInfoResponseOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WatchlistUserInfoResponse)(nil)).Elem()
}

func (o WatchlistUserInfoResponseOutput) ToWatchlistUserInfoResponseOutput() WatchlistUserInfoResponseOutput {
	return o
}

func (o WatchlistUserInfoResponseOutput) ToWatchlistUserInfoResponseOutputWithContext(ctx context.Context) WatchlistUserInfoResponseOutput {
	return o
}

func (o WatchlistUserInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WatchlistUserInfoResponse] {
	return pulumix.Output[WatchlistUserInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The email of the user.
func (o WatchlistUserInfoResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) string { return v.Email }).(pulumi.StringOutput)
}

// The name of the user.
func (o WatchlistUserInfoResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The object id of the user.
func (o WatchlistUserInfoResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WatchlistUserInfoResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

type WatchlistUserInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (WatchlistUserInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WatchlistUserInfoResponse)(nil)).Elem()
}

func (o WatchlistUserInfoResponsePtrOutput) ToWatchlistUserInfoResponsePtrOutput() WatchlistUserInfoResponsePtrOutput {
	return o
}

func (o WatchlistUserInfoResponsePtrOutput) ToWatchlistUserInfoResponsePtrOutputWithContext(ctx context.Context) WatchlistUserInfoResponsePtrOutput {
	return o
}

func (o WatchlistUserInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*WatchlistUserInfoResponse] {
	return pulumix.Output[*WatchlistUserInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o WatchlistUserInfoResponsePtrOutput) Elem() WatchlistUserInfoResponseOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) WatchlistUserInfoResponse {
		if v != nil {
			return *v
		}
		var ret WatchlistUserInfoResponse
		return ret
	}).(WatchlistUserInfoResponseOutput)
}

// The email of the user.
func (o WatchlistUserInfoResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// The name of the user.
func (o WatchlistUserInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The object id of the user.
func (o WatchlistUserInfoResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WatchlistUserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActivityEntityQueriesPropertiesQueryDefinitionsOutput{})
	pulumi.RegisterOutputType(ActivityEntityQueriesPropertiesQueryDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(ActivityEntityQueriesPropertiesResponseQueryDefinitionsOutput{})
	pulumi.RegisterOutputType(ActivityEntityQueriesPropertiesResponseQueryDefinitionsPtrOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverrideOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverridePtrOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverrideResponseOutput{})
	pulumi.RegisterOutputType(AlertDetailsOverrideResponsePtrOutput{})
	pulumi.RegisterOutputType(AlertPropertyMappingOutput{})
	pulumi.RegisterOutputType(AlertPropertyMappingArrayOutput{})
	pulumi.RegisterOutputType(AlertPropertyMappingResponseOutput{})
	pulumi.RegisterOutputType(AlertPropertyMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(AlertsDataTypeOfDataConnectorOutput{})
	pulumi.RegisterOutputType(AlertsDataTypeOfDataConnectorPtrOutput{})
	pulumi.RegisterOutputType(AlertsDataTypeOfDataConnectorResponseOutput{})
	pulumi.RegisterOutputType(AlertsDataTypeOfDataConnectorResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignmentItemOutput{})
	pulumi.RegisterOutputType(AssignmentItemArrayOutput{})
	pulumi.RegisterOutputType(AssignmentItemResponseOutput{})
	pulumi.RegisterOutputType(AssignmentItemResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRuleTriggeringLogicOutput{})
	pulumi.RegisterOutputType(AutomationRuleTriggeringLogicResponseOutput{})
	pulumi.RegisterOutputType(AvailabilityOutput{})
	pulumi.RegisterOutputType(AvailabilityPtrOutput{})
	pulumi.RegisterOutputType(AvailabilityResponseOutput{})
	pulumi.RegisterOutputType(AvailabilityResponsePtrOutput{})
	pulumi.RegisterOutputType(AwsCloudTrailDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(AwsCloudTrailDataConnectorDataTypesLogsOutput{})
	pulumi.RegisterOutputType(AwsCloudTrailDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(AwsCloudTrailDataConnectorDataTypesResponseLogsOutput{})
	pulumi.RegisterOutputType(AwsS3DataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(AwsS3DataConnectorDataTypesLogsOutput{})
	pulumi.RegisterOutputType(AwsS3DataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(AwsS3DataConnectorDataTypesResponseLogsOutput{})
	pulumi.RegisterOutputType(BookmarkEntityMappingsOutput{})
	pulumi.RegisterOutputType(BookmarkEntityMappingsArrayOutput{})
	pulumi.RegisterOutputType(BookmarkEntityMappingsResponseOutput{})
	pulumi.RegisterOutputType(BookmarkEntityMappingsResponseArrayOutput{})
	pulumi.RegisterOutputType(ClientInfoOutput{})
	pulumi.RegisterOutputType(ClientInfoPtrOutput{})
	pulumi.RegisterOutputType(ClientInfoResponseOutput{})
	pulumi.RegisterOutputType(ClientInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingAuthPropertiesOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingAuthPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingAuthPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingAuthPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingConfigPropertiesOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingConfigPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingConfigPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingPagingPropertiesOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingPagingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingPagingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingPagingPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingRequestPropertiesOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingRequestPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingRequestPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingRequestPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingResponsePropertiesOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingResponsePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessConnectorPollingResponsePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesConnectivityCriteriaOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesConnectivityCriteriaArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesDataTypesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesDataTypesArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesGraphQueriesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesGraphQueriesArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesInstructionStepsOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesInstructionStepsArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseConnectivityCriteriaArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseDataTypesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseDataTypesArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseGraphQueriesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseGraphQueriesArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseInstructionStepsOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseInstructionStepsArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseSampleQueriesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesResponseSampleQueriesArrayOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesSampleQueriesOutput{})
	pulumi.RegisterOutputType(CodelessUiConnectorConfigPropertiesSampleQueriesArrayOutput{})
	pulumi.RegisterOutputType(ConnectivityCriterionOutput{})
	pulumi.RegisterOutputType(ConnectivityCriterionArrayOutput{})
	pulumi.RegisterOutputType(ConnectivityCriterionResponseOutput{})
	pulumi.RegisterOutputType(ConnectivityCriterionResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectorDataTypeOutput{})
	pulumi.RegisterOutputType(ConnectorDataTypeArrayOutput{})
	pulumi.RegisterOutputType(ConnectorDataTypeResponseOutput{})
	pulumi.RegisterOutputType(ConnectorDataTypeResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsAvailabilityOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsAvailabilityPtrOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsAvailabilityResponseOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsAvailabilityResponsePtrOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsPermissionsOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsPermissionsResponseOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsResourceProviderOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsResourceProviderArrayOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsResourceProviderResponseOutput{})
	pulumi.RegisterOutputType(ConnectorDefinitionsResourceProviderResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomPermissionDetailsOutput{})
	pulumi.RegisterOutputType(CustomPermissionDetailsArrayOutput{})
	pulumi.RegisterOutputType(CustomPermissionDetailsResponseOutput{})
	pulumi.RegisterOutputType(CustomPermissionDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomizableConnectionsConfigOutput{})
	pulumi.RegisterOutputType(CustomizableConnectionsConfigPtrOutput{})
	pulumi.RegisterOutputType(CustomizableConnectionsConfigResponseOutput{})
	pulumi.RegisterOutputType(CustomizableConnectionsConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomizableConnectorUiConfigOutput{})
	pulumi.RegisterOutputType(CustomizableConnectorUiConfigResponseOutput{})
	pulumi.RegisterOutputType(DCRConfigurationOutput{})
	pulumi.RegisterOutputType(DCRConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DCRConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DCRConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DataConnectorDataTypeCommonOutput{})
	pulumi.RegisterOutputType(DataConnectorDataTypeCommonPtrOutput{})
	pulumi.RegisterOutputType(DataConnectorDataTypeCommonResponseOutput{})
	pulumi.RegisterOutputType(DataConnectorDataTypeCommonResponsePtrOutput{})
	pulumi.RegisterOutputType(Dynamics365DataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(Dynamics365DataConnectorDataTypesDynamics365CdsActivitiesOutput{})
	pulumi.RegisterOutputType(Dynamics365DataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(Dynamics365DataConnectorDataTypesResponseDynamics365CdsActivitiesOutput{})
	pulumi.RegisterOutputType(EntityFieldMappingOutput{})
	pulumi.RegisterOutputType(EntityFieldMappingArrayOutput{})
	pulumi.RegisterOutputType(EntityFieldMappingResponseOutput{})
	pulumi.RegisterOutputType(EntityFieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseArrayOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseQueryTimeIntervalOutput{})
	pulumi.RegisterOutputType(EntityInsightItemResponseQueryTimeIntervalPtrOutput{})
	pulumi.RegisterOutputType(EntityMappingOutput{})
	pulumi.RegisterOutputType(EntityMappingArrayOutput{})
	pulumi.RegisterOutputType(EntityMappingResponseOutput{})
	pulumi.RegisterOutputType(EntityMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(EventGroupingSettingsOutput{})
	pulumi.RegisterOutputType(EventGroupingSettingsPtrOutput{})
	pulumi.RegisterOutputType(EventGroupingSettingsResponseOutput{})
	pulumi.RegisterOutputType(EventGroupingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FieldMappingOutput{})
	pulumi.RegisterOutputType(FieldMappingArrayOutput{})
	pulumi.RegisterOutputType(FieldMappingResponseOutput{})
	pulumi.RegisterOutputType(FieldMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(FileMetadataOutput{})
	pulumi.RegisterOutputType(FileMetadataResponseOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternArrayOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternResponseOutput{})
	pulumi.RegisterOutputType(FusionScenarioExclusionPatternResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(FusionSourceSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingArrayOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingResponseOutput{})
	pulumi.RegisterOutputType(FusionSourceSubTypeSettingResponseArrayOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFilterOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFilterResponseOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemArrayOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemResponseOutput{})
	pulumi.RegisterOutputType(FusionSubTypeSeverityFiltersItemResponseArrayOutput{})
	pulumi.RegisterOutputType(GCPAuthPropertiesOutput{})
	pulumi.RegisterOutputType(GCPAuthPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GCPRequestPropertiesOutput{})
	pulumi.RegisterOutputType(GCPRequestPropertiesResponseOutput{})
	pulumi.RegisterOutputType(GetInsightsErrorKindResponseOutput{})
	pulumi.RegisterOutputType(GetInsightsErrorKindResponseArrayOutput{})
	pulumi.RegisterOutputType(GetInsightsResultsMetadataResponseOutput{})
	pulumi.RegisterOutputType(GetInsightsResultsMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(GraphQueryOutput{})
	pulumi.RegisterOutputType(GraphQueryArrayOutput{})
	pulumi.RegisterOutputType(GraphQueryResponseOutput{})
	pulumi.RegisterOutputType(GraphQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(GroupingConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(HuntOwnerOutput{})
	pulumi.RegisterOutputType(HuntOwnerPtrOutput{})
	pulumi.RegisterOutputType(HuntOwnerResponseOutput{})
	pulumi.RegisterOutputType(HuntOwnerResponsePtrOutput{})
	pulumi.RegisterOutputType(IncidentAdditionalDataResponseOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(IncidentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(IncidentInfoOutput{})
	pulumi.RegisterOutputType(IncidentInfoPtrOutput{})
	pulumi.RegisterOutputType(IncidentInfoResponseOutput{})
	pulumi.RegisterOutputType(IncidentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(IncidentLabelOutput{})
	pulumi.RegisterOutputType(IncidentLabelArrayOutput{})
	pulumi.RegisterOutputType(IncidentLabelResponseOutput{})
	pulumi.RegisterOutputType(IncidentLabelResponseArrayOutput{})
	pulumi.RegisterOutputType(IncidentOwnerInfoOutput{})
	pulumi.RegisterOutputType(IncidentOwnerInfoPtrOutput{})
	pulumi.RegisterOutputType(IncidentOwnerInfoResponseOutput{})
	pulumi.RegisterOutputType(IncidentOwnerInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponsePtrOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseArrayOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseColumnsOutput{})
	pulumi.RegisterOutputType(InsightsTableResultResponseColumnsArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepOutput{})
	pulumi.RegisterOutputType(InstructionStepArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepDetailsOutput{})
	pulumi.RegisterOutputType(InstructionStepDetailsArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepDetailsResponseOutput{})
	pulumi.RegisterOutputType(InstructionStepDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepResponseOutput{})
	pulumi.RegisterOutputType(InstructionStepResponseArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepsInstructionsOutput{})
	pulumi.RegisterOutputType(InstructionStepsInstructionsArrayOutput{})
	pulumi.RegisterOutputType(InstructionStepsResponseInstructionsOutput{})
	pulumi.RegisterOutputType(InstructionStepsResponseInstructionsArrayOutput{})
	pulumi.RegisterOutputType(MCASDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(MCASDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(MSTIDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(MSTIDataConnectorDataTypesMicrosoftEmergingThreatFeedOutput{})
	pulumi.RegisterOutputType(MSTIDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(MSTIDataConnectorDataTypesResponseMicrosoftEmergingThreatFeedOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesAlertsOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesAlertsPtrOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesIncidentsOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesResponseAlertsOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesResponseAlertsPtrOutput{})
	pulumi.RegisterOutputType(MTPDataConnectorDataTypesResponseIncidentsOutput{})
	pulumi.RegisterOutputType(MetadataAuthorOutput{})
	pulumi.RegisterOutputType(MetadataAuthorPtrOutput{})
	pulumi.RegisterOutputType(MetadataAuthorResponseOutput{})
	pulumi.RegisterOutputType(MetadataAuthorResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataCategoriesOutput{})
	pulumi.RegisterOutputType(MetadataCategoriesPtrOutput{})
	pulumi.RegisterOutputType(MetadataCategoriesResponseOutput{})
	pulumi.RegisterOutputType(MetadataCategoriesResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesPtrOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesArrayOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesResponseOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataDependenciesResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataSourceOutput{})
	pulumi.RegisterOutputType(MetadataSourcePtrOutput{})
	pulumi.RegisterOutputType(MetadataSourceResponseOutput{})
	pulumi.RegisterOutputType(MetadataSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(MetadataSupportOutput{})
	pulumi.RegisterOutputType(MetadataSupportPtrOutput{})
	pulumi.RegisterOutputType(MetadataSupportResponseOutput{})
	pulumi.RegisterOutputType(MetadataSupportResponsePtrOutput{})
	pulumi.RegisterOutputType(MicrosoftPurviewInformationProtectionConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(MicrosoftPurviewInformationProtectionConnectorDataTypesLogsOutput{})
	pulumi.RegisterOutputType(MicrosoftPurviewInformationProtectionConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(MicrosoftPurviewInformationProtectionConnectorDataTypesResponseLogsOutput{})
	pulumi.RegisterOutputType(MtpFilteredProvidersOutput{})
	pulumi.RegisterOutputType(MtpFilteredProvidersPtrOutput{})
	pulumi.RegisterOutputType(MtpFilteredProvidersResponseOutput{})
	pulumi.RegisterOutputType(MtpFilteredProvidersResponsePtrOutput{})
	pulumi.RegisterOutputType(Office365ProjectConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(Office365ProjectConnectorDataTypesLogsOutput{})
	pulumi.RegisterOutputType(Office365ProjectConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(Office365ProjectConnectorDataTypesResponseLogsOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesExchangeOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesResponseExchangeOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesResponseSharePointOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesResponseTeamsOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesSharePointOutput{})
	pulumi.RegisterOutputType(OfficeDataConnectorDataTypesTeamsOutput{})
	pulumi.RegisterOutputType(OfficePowerBIConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(OfficePowerBIConnectorDataTypesLogsOutput{})
	pulumi.RegisterOutputType(OfficePowerBIConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(OfficePowerBIConnectorDataTypesResponseLogsOutput{})
	pulumi.RegisterOutputType(PermissionsOutput{})
	pulumi.RegisterOutputType(PermissionsPtrOutput{})
	pulumi.RegisterOutputType(PermissionsCustomsOutput{})
	pulumi.RegisterOutputType(PermissionsCustomsArrayOutput{})
	pulumi.RegisterOutputType(PermissionsResourceProviderOutput{})
	pulumi.RegisterOutputType(PermissionsResourceProviderArrayOutput{})
	pulumi.RegisterOutputType(PermissionsResponseOutput{})
	pulumi.RegisterOutputType(PermissionsResponsePtrOutput{})
	pulumi.RegisterOutputType(PermissionsResponseCustomsOutput{})
	pulumi.RegisterOutputType(PermissionsResponseCustomsArrayOutput{})
	pulumi.RegisterOutputType(PermissionsResponseResourceProviderOutput{})
	pulumi.RegisterOutputType(PermissionsResponseResourceProviderArrayOutput{})
	pulumi.RegisterOutputType(RepoResponseOutput{})
	pulumi.RegisterOutputType(RepoResponseArrayOutput{})
	pulumi.RegisterOutputType(RequiredPermissionsOutput{})
	pulumi.RegisterOutputType(RequiredPermissionsPtrOutput{})
	pulumi.RegisterOutputType(RequiredPermissionsResponseOutput{})
	pulumi.RegisterOutputType(RequiredPermissionsResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceProviderRequiredPermissionsOutput{})
	pulumi.RegisterOutputType(ResourceProviderRequiredPermissionsResponseOutput{})
	pulumi.RegisterOutputType(SampleQueryOutput{})
	pulumi.RegisterOutputType(SampleQueryArrayOutput{})
	pulumi.RegisterOutputType(SampleQueryResponseOutput{})
	pulumi.RegisterOutputType(SampleQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(SecurityMLAnalyticsSettingsDataSourceOutput{})
	pulumi.RegisterOutputType(SecurityMLAnalyticsSettingsDataSourceArrayOutput{})
	pulumi.RegisterOutputType(SecurityMLAnalyticsSettingsDataSourceResponseOutput{})
	pulumi.RegisterOutputType(SecurityMLAnalyticsSettingsDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SentinelEntityMappingOutput{})
	pulumi.RegisterOutputType(SentinelEntityMappingArrayOutput{})
	pulumi.RegisterOutputType(SentinelEntityMappingResponseOutput{})
	pulumi.RegisterOutputType(SentinelEntityMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TIDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(TIDataConnectorDataTypesIndicatorsOutput{})
	pulumi.RegisterOutputType(TIDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(TIDataConnectorDataTypesResponseIndicatorsOutput{})
	pulumi.RegisterOutputType(TeamInformationResponseOutput{})
	pulumi.RegisterOutputType(TeamInformationResponsePtrOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceExternalReferenceOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceExternalReferenceArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceGranularMarkingModelOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceGranularMarkingModelArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceKillChainPhaseOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceKillChainPhaseArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceParsedPatternOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceParsedPatternArrayOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceParsedPatternTypeValueOutput{})
	pulumi.RegisterOutputType(ThreatIntelligenceParsedPatternTypeValueArrayOutput{})
	pulumi.RegisterOutputType(TiTaxiiDataConnectorDataTypesOutput{})
	pulumi.RegisterOutputType(TiTaxiiDataConnectorDataTypesResponseOutput{})
	pulumi.RegisterOutputType(TiTaxiiDataConnectorDataTypesResponseTaxiiClientOutput{})
	pulumi.RegisterOutputType(TiTaxiiDataConnectorDataTypesTaxiiClientOutput{})
	pulumi.RegisterOutputType(TimelineAggregationResponseOutput{})
	pulumi.RegisterOutputType(TimelineAggregationResponseArrayOutput{})
	pulumi.RegisterOutputType(TimelineErrorResponseOutput{})
	pulumi.RegisterOutputType(TimelineErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(TimelineResultsMetadataResponseOutput{})
	pulumi.RegisterOutputType(TimelineResultsMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
	pulumi.RegisterOutputType(UserInfoPtrOutput{})
	pulumi.RegisterOutputType(UserInfoResponseOutput{})
	pulumi.RegisterOutputType(UserInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ValidationErrorResponseOutput{})
	pulumi.RegisterOutputType(ValidationErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoPtrOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoResponseOutput{})
	pulumi.RegisterOutputType(WatchlistUserInfoResponsePtrOutput{})
}
