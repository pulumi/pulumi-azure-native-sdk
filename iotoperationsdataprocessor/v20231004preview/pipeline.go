// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231004preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Pipeline resource belonging to an Instance resource.
type Pipeline struct {
	pulumi.CustomResourceState

	// Detailed description of the Pipeline.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Flag indicating whether the pipeline should be running or not.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Edge location of the resource.
	ExtendedLocation ExtendedLocationResponseOutput `pulumi:"extendedLocation"`
	// Information about where to pull input data from.
	Input PipelineInputResponseOutput `pulumi:"input"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the last operation.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Map of stage ids to stage configurations for all pipeline processing and output stages.
	Stages PipelineStageResponseMapOutput `pulumi:"stages"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.ExtendedLocation == nil {
		return nil, errors.New("invalid value for required argument 'ExtendedLocation'")
	}
	if args.Input == nil {
		return nil, errors.New("invalid value for required argument 'Input'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:iotoperationsdataprocessor:Pipeline"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("azure-native:iotoperationsdataprocessor/v20231004preview:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("azure-native:iotoperationsdataprocessor/v20231004preview:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
}

type PipelineState struct {
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// Detailed description of the Pipeline.
	Description *string `pulumi:"description"`
	// Flag indicating whether the pipeline should be running or not.
	Enabled bool `pulumi:"enabled"`
	// Edge location of the resource.
	ExtendedLocation ExtendedLocation `pulumi:"extendedLocation"`
	// Information about where to pull input data from.
	Input PipelineInputType `pulumi:"input"`
	// Name of instance.
	InstanceName string `pulumi:"instanceName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Name of pipeline
	PipelineName *string `pulumi:"pipelineName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Map of stage ids to stage configurations for all pipeline processing and output stages.
	Stages map[string]PipelineStage `pulumi:"stages"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// Detailed description of the Pipeline.
	Description pulumi.StringPtrInput
	// Flag indicating whether the pipeline should be running or not.
	Enabled pulumi.BoolInput
	// Edge location of the resource.
	ExtendedLocation ExtendedLocationInput
	// Information about where to pull input data from.
	Input PipelineInputTypeInput
	// Name of instance.
	InstanceName pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Name of pipeline
	PipelineName pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Map of stage ids to stage configurations for all pipeline processing and output stages.
	Stages PipelineStageMapInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// Detailed description of the Pipeline.
func (o PipelineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Flag indicating whether the pipeline should be running or not.
func (o PipelineOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Edge location of the resource.
func (o PipelineOutput) ExtendedLocation() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *Pipeline) ExtendedLocationResponseOutput { return v.ExtendedLocation }).(ExtendedLocationResponseOutput)
}

// Information about where to pull input data from.
func (o PipelineOutput) Input() PipelineInputResponseOutput {
	return o.ApplyT(func(v *Pipeline) PipelineInputResponseOutput { return v.Input }).(PipelineInputResponseOutput)
}

// The geo-location where the resource lives
func (o PipelineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o PipelineOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Map of stage ids to stage configurations for all pipeline processing and output stages.
func (o PipelineOutput) Stages() PipelineStageResponseMapOutput {
	return o.ApplyT(func(v *Pipeline) PipelineStageResponseMapOutput { return v.Stages }).(PipelineStageResponseMapOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PipelineOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Pipeline) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PipelineOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PipelineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineOutput{})
}
