// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iotoperationsdataprocessor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Key that can be used for joining on enrich.
type DatasetPropertyKey struct {
	// Path to the input value from the message.
	Path string `pulumi:"path"`
	// If true the property will be used as a primary key. At most one primary key can exists.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// DatasetPropertyKeyInput is an input type that accepts DatasetPropertyKeyArgs and DatasetPropertyKeyOutput values.
// You can construct a concrete instance of `DatasetPropertyKeyInput` via:
//
//	DatasetPropertyKeyArgs{...}
type DatasetPropertyKeyInput interface {
	pulumi.Input

	ToDatasetPropertyKeyOutput() DatasetPropertyKeyOutput
	ToDatasetPropertyKeyOutputWithContext(context.Context) DatasetPropertyKeyOutput
}

// Key that can be used for joining on enrich.
type DatasetPropertyKeyArgs struct {
	// Path to the input value from the message.
	Path pulumi.StringInput `pulumi:"path"`
	// If true the property will be used as a primary key. At most one primary key can exists.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (DatasetPropertyKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPropertyKey)(nil)).Elem()
}

func (i DatasetPropertyKeyArgs) ToDatasetPropertyKeyOutput() DatasetPropertyKeyOutput {
	return i.ToDatasetPropertyKeyOutputWithContext(context.Background())
}

func (i DatasetPropertyKeyArgs) ToDatasetPropertyKeyOutputWithContext(ctx context.Context) DatasetPropertyKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPropertyKeyOutput)
}

// DatasetPropertyKeyMapInput is an input type that accepts DatasetPropertyKeyMap and DatasetPropertyKeyMapOutput values.
// You can construct a concrete instance of `DatasetPropertyKeyMapInput` via:
//
//	DatasetPropertyKeyMap{ "key": DatasetPropertyKeyArgs{...} }
type DatasetPropertyKeyMapInput interface {
	pulumi.Input

	ToDatasetPropertyKeyMapOutput() DatasetPropertyKeyMapOutput
	ToDatasetPropertyKeyMapOutputWithContext(context.Context) DatasetPropertyKeyMapOutput
}

type DatasetPropertyKeyMap map[string]DatasetPropertyKeyInput

func (DatasetPropertyKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetPropertyKey)(nil)).Elem()
}

func (i DatasetPropertyKeyMap) ToDatasetPropertyKeyMapOutput() DatasetPropertyKeyMapOutput {
	return i.ToDatasetPropertyKeyMapOutputWithContext(context.Background())
}

func (i DatasetPropertyKeyMap) ToDatasetPropertyKeyMapOutputWithContext(ctx context.Context) DatasetPropertyKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetPropertyKeyMapOutput)
}

// Key that can be used for joining on enrich.
type DatasetPropertyKeyOutput struct{ *pulumi.OutputState }

func (DatasetPropertyKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPropertyKey)(nil)).Elem()
}

func (o DatasetPropertyKeyOutput) ToDatasetPropertyKeyOutput() DatasetPropertyKeyOutput {
	return o
}

func (o DatasetPropertyKeyOutput) ToDatasetPropertyKeyOutputWithContext(ctx context.Context) DatasetPropertyKeyOutput {
	return o
}

// Path to the input value from the message.
func (o DatasetPropertyKeyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetPropertyKey) string { return v.Path }).(pulumi.StringOutput)
}

// If true the property will be used as a primary key. At most one primary key can exists.
func (o DatasetPropertyKeyOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetPropertyKey) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

type DatasetPropertyKeyMapOutput struct{ *pulumi.OutputState }

func (DatasetPropertyKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetPropertyKey)(nil)).Elem()
}

func (o DatasetPropertyKeyMapOutput) ToDatasetPropertyKeyMapOutput() DatasetPropertyKeyMapOutput {
	return o
}

func (o DatasetPropertyKeyMapOutput) ToDatasetPropertyKeyMapOutputWithContext(ctx context.Context) DatasetPropertyKeyMapOutput {
	return o
}

func (o DatasetPropertyKeyMapOutput) MapIndex(k pulumi.StringInput) DatasetPropertyKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatasetPropertyKey {
		return vs[0].(map[string]DatasetPropertyKey)[vs[1].(string)]
	}).(DatasetPropertyKeyOutput)
}

// Key that can be used for joining on enrich.
type DatasetPropertyKeyResponse struct {
	// Path to the input value from the message.
	Path string `pulumi:"path"`
	// If true the property will be used as a primary key. At most one primary key can exists.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// Key that can be used for joining on enrich.
type DatasetPropertyKeyResponseOutput struct{ *pulumi.OutputState }

func (DatasetPropertyKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetPropertyKeyResponse)(nil)).Elem()
}

func (o DatasetPropertyKeyResponseOutput) ToDatasetPropertyKeyResponseOutput() DatasetPropertyKeyResponseOutput {
	return o
}

func (o DatasetPropertyKeyResponseOutput) ToDatasetPropertyKeyResponseOutputWithContext(ctx context.Context) DatasetPropertyKeyResponseOutput {
	return o
}

// Path to the input value from the message.
func (o DatasetPropertyKeyResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetPropertyKeyResponse) string { return v.Path }).(pulumi.StringOutput)
}

// If true the property will be used as a primary key. At most one primary key can exists.
func (o DatasetPropertyKeyResponseOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetPropertyKeyResponse) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

type DatasetPropertyKeyResponseMapOutput struct{ *pulumi.OutputState }

func (DatasetPropertyKeyResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatasetPropertyKeyResponse)(nil)).Elem()
}

func (o DatasetPropertyKeyResponseMapOutput) ToDatasetPropertyKeyResponseMapOutput() DatasetPropertyKeyResponseMapOutput {
	return o
}

func (o DatasetPropertyKeyResponseMapOutput) ToDatasetPropertyKeyResponseMapOutputWithContext(ctx context.Context) DatasetPropertyKeyResponseMapOutput {
	return o
}

func (o DatasetPropertyKeyResponseMapOutput) MapIndex(k pulumi.StringInput) DatasetPropertyKeyResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatasetPropertyKeyResponse {
		return vs[0].(map[string]DatasetPropertyKeyResponse)[vs[1].(string)]
	}).(DatasetPropertyKeyResponseOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocation struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationResponse struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// Extended location is an extension of Azure locations. They provide a way to use their Azure ARC enabled Kubernetes clusters as target locations for deploying Azure services instances.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Stage configuration for Pipeline input stage.
type PipelineInputType struct {
	// Description for stage.
	Description *string `pulumi:"description"`
	// Next stage in the pipeline.
	Next []string `pulumi:"next"`
	// ARM resource type.
	Type string `pulumi:"type"`
}

// PipelineInputTypeInput is an input type that accepts PipelineInputTypeArgs and PipelineInputTypeOutput values.
// You can construct a concrete instance of `PipelineInputTypeInput` via:
//
//	PipelineInputTypeArgs{...}
type PipelineInputTypeInput interface {
	pulumi.Input

	ToPipelineInputTypeOutput() PipelineInputTypeOutput
	ToPipelineInputTypeOutputWithContext(context.Context) PipelineInputTypeOutput
}

// Stage configuration for Pipeline input stage.
type PipelineInputTypeArgs struct {
	// Description for stage.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Next stage in the pipeline.
	Next pulumi.StringArrayInput `pulumi:"next"`
	// ARM resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineInputType)(nil)).Elem()
}

func (i PipelineInputTypeArgs) ToPipelineInputTypeOutput() PipelineInputTypeOutput {
	return i.ToPipelineInputTypeOutputWithContext(context.Background())
}

func (i PipelineInputTypeArgs) ToPipelineInputTypeOutputWithContext(ctx context.Context) PipelineInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineInputTypeOutput)
}

// Stage configuration for Pipeline input stage.
type PipelineInputTypeOutput struct{ *pulumi.OutputState }

func (PipelineInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineInputType)(nil)).Elem()
}

func (o PipelineInputTypeOutput) ToPipelineInputTypeOutput() PipelineInputTypeOutput {
	return o
}

func (o PipelineInputTypeOutput) ToPipelineInputTypeOutputWithContext(ctx context.Context) PipelineInputTypeOutput {
	return o
}

// Description for stage.
func (o PipelineInputTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineInputType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Next stage in the pipeline.
func (o PipelineInputTypeOutput) Next() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineInputType) []string { return v.Next }).(pulumi.StringArrayOutput)
}

// ARM resource type.
func (o PipelineInputTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineInputType) string { return v.Type }).(pulumi.StringOutput)
}

// Stage configuration for Pipeline input stage.
type PipelineInputResponse struct {
	// Description for stage.
	Description *string `pulumi:"description"`
	// Next stage in the pipeline.
	Next []string `pulumi:"next"`
	// ARM resource type.
	Type string `pulumi:"type"`
}

// Stage configuration for Pipeline input stage.
type PipelineInputResponseOutput struct{ *pulumi.OutputState }

func (PipelineInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineInputResponse)(nil)).Elem()
}

func (o PipelineInputResponseOutput) ToPipelineInputResponseOutput() PipelineInputResponseOutput {
	return o
}

func (o PipelineInputResponseOutput) ToPipelineInputResponseOutputWithContext(ctx context.Context) PipelineInputResponseOutput {
	return o
}

// Description for stage.
func (o PipelineInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Next stage in the pipeline.
func (o PipelineInputResponseOutput) Next() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineInputResponse) []string { return v.Next }).(pulumi.StringArrayOutput)
}

// ARM resource type.
func (o PipelineInputResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineInputResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Stage configurations for all Pipeline processing and output stages.
type PipelineStage struct {
	// Description for stage.
	Description *string `pulumi:"description"`
	// Next stage in the pipeline. Not required if output stage.
	Next []string `pulumi:"next"`
	// ARM resource type.
	Type string `pulumi:"type"`
}

// PipelineStageInput is an input type that accepts PipelineStageArgs and PipelineStageOutput values.
// You can construct a concrete instance of `PipelineStageInput` via:
//
//	PipelineStageArgs{...}
type PipelineStageInput interface {
	pulumi.Input

	ToPipelineStageOutput() PipelineStageOutput
	ToPipelineStageOutputWithContext(context.Context) PipelineStageOutput
}

// Stage configurations for all Pipeline processing and output stages.
type PipelineStageArgs struct {
	// Description for stage.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Next stage in the pipeline. Not required if output stage.
	Next pulumi.StringArrayInput `pulumi:"next"`
	// ARM resource type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineStageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (i PipelineStageArgs) ToPipelineStageOutput() PipelineStageOutput {
	return i.ToPipelineStageOutputWithContext(context.Background())
}

func (i PipelineStageArgs) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageOutput)
}

// PipelineStageMapInput is an input type that accepts PipelineStageMap and PipelineStageMapOutput values.
// You can construct a concrete instance of `PipelineStageMapInput` via:
//
//	PipelineStageMap{ "key": PipelineStageArgs{...} }
type PipelineStageMapInput interface {
	pulumi.Input

	ToPipelineStageMapOutput() PipelineStageMapOutput
	ToPipelineStageMapOutputWithContext(context.Context) PipelineStageMapOutput
}

type PipelineStageMap map[string]PipelineStageInput

func (PipelineStageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PipelineStage)(nil)).Elem()
}

func (i PipelineStageMap) ToPipelineStageMapOutput() PipelineStageMapOutput {
	return i.ToPipelineStageMapOutputWithContext(context.Background())
}

func (i PipelineStageMap) ToPipelineStageMapOutputWithContext(ctx context.Context) PipelineStageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineStageMapOutput)
}

// Stage configurations for all Pipeline processing and output stages.
type PipelineStageOutput struct{ *pulumi.OutputState }

func (PipelineStageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStage)(nil)).Elem()
}

func (o PipelineStageOutput) ToPipelineStageOutput() PipelineStageOutput {
	return o
}

func (o PipelineStageOutput) ToPipelineStageOutputWithContext(ctx context.Context) PipelineStageOutput {
	return o
}

// Description for stage.
func (o PipelineStageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineStage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Next stage in the pipeline. Not required if output stage.
func (o PipelineStageOutput) Next() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineStage) []string { return v.Next }).(pulumi.StringArrayOutput)
}

// ARM resource type.
func (o PipelineStageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineStage) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineStageMapOutput struct{ *pulumi.OutputState }

func (PipelineStageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PipelineStage)(nil)).Elem()
}

func (o PipelineStageMapOutput) ToPipelineStageMapOutput() PipelineStageMapOutput {
	return o
}

func (o PipelineStageMapOutput) ToPipelineStageMapOutputWithContext(ctx context.Context) PipelineStageMapOutput {
	return o
}

func (o PipelineStageMapOutput) MapIndex(k pulumi.StringInput) PipelineStageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PipelineStage {
		return vs[0].(map[string]PipelineStage)[vs[1].(string)]
	}).(PipelineStageOutput)
}

// Stage configurations for all Pipeline processing and output stages.
type PipelineStageResponse struct {
	// Description for stage.
	Description *string `pulumi:"description"`
	// Next stage in the pipeline. Not required if output stage.
	Next []string `pulumi:"next"`
	// ARM resource type.
	Type string `pulumi:"type"`
}

// Stage configurations for all Pipeline processing and output stages.
type PipelineStageResponseOutput struct{ *pulumi.OutputState }

func (PipelineStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineStageResponse)(nil)).Elem()
}

func (o PipelineStageResponseOutput) ToPipelineStageResponseOutput() PipelineStageResponseOutput {
	return o
}

func (o PipelineStageResponseOutput) ToPipelineStageResponseOutputWithContext(ctx context.Context) PipelineStageResponseOutput {
	return o
}

// Description for stage.
func (o PipelineStageResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineStageResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Next stage in the pipeline. Not required if output stage.
func (o PipelineStageResponseOutput) Next() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineStageResponse) []string { return v.Next }).(pulumi.StringArrayOutput)
}

// ARM resource type.
func (o PipelineStageResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineStageResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineStageResponseMapOutput struct{ *pulumi.OutputState }

func (PipelineStageResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]PipelineStageResponse)(nil)).Elem()
}

func (o PipelineStageResponseMapOutput) ToPipelineStageResponseMapOutput() PipelineStageResponseMapOutput {
	return o
}

func (o PipelineStageResponseMapOutput) ToPipelineStageResponseMapOutputWithContext(ctx context.Context) PipelineStageResponseMapOutput {
	return o
}

func (o PipelineStageResponseMapOutput) MapIndex(k pulumi.StringInput) PipelineStageResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) PipelineStageResponse {
		return vs[0].(map[string]PipelineStageResponse)[vs[1].(string)]
	}).(PipelineStageResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetPropertyKeyOutput{})
	pulumi.RegisterOutputType(DatasetPropertyKeyMapOutput{})
	pulumi.RegisterOutputType(DatasetPropertyKeyResponseOutput{})
	pulumi.RegisterOutputType(DatasetPropertyKeyResponseMapOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(PipelineInputTypeOutput{})
	pulumi.RegisterOutputType(PipelineInputResponseOutput{})
	pulumi.RegisterOutputType(PipelineStageOutput{})
	pulumi.RegisterOutputType(PipelineStageMapOutput{})
	pulumi.RegisterOutputType(PipelineStageResponseOutput{})
	pulumi.RegisterOutputType(PipelineStageResponseMapOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
