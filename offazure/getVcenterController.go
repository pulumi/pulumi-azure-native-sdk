// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package offazure

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a Vcenter
// Azure REST API version: 2023-06-06.
//
// Other available API versions: 2023-10-01-preview.
func LookupVcenterController(ctx *pulumi.Context, args *LookupVcenterControllerArgs, opts ...pulumi.InvokeOption) (*LookupVcenterControllerResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVcenterControllerResult
	err := ctx.Invoke("azure-native:offazure:getVcenterController", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVcenterControllerArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Site name
	SiteName string `pulumi:"siteName"`
	//  VCenters name
	VcenterName string `pulumi:"vcenterName"`
}

// A vcenter resource belonging to a site resource.
type LookupVcenterControllerResult struct {
	// Gets the timestamp marking vCenter creation.
	CreatedTimestamp string `pulumi:"createdTimestamp"`
	// Gets the errors.
	Errors []HealthErrorDetailsResponse `pulumi:"errors"`
	// Gets or sets the FQDN/IPAddress of the vCenter.
	Fqdn *string `pulumi:"fqdn"`
	// Gets or sets the friendly name of the vCenter.
	FriendlyName *string `pulumi:"friendlyName"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Gets the instance UUID of the vCenter.
	InstanceUuid string `pulumi:"instanceUuid"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Gets the performance statistics enabled on the vCenter.
	PerfStatisticsLevel string `pulumi:"perfStatisticsLevel"`
	// Gets or sets the port of the vCenter.
	Port *string `pulumi:"port"`
	// The status of the last operation.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Gets or sets the run as account ID of the vCenter.
	RunAsAccountId *string `pulumi:"runAsAccountId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// Gets the timestamp marking last updated on the vCenter.
	UpdatedTimestamp string `pulumi:"updatedTimestamp"`
	// Gets the version of the vCenter.
	Version string `pulumi:"version"`
}

func LookupVcenterControllerOutput(ctx *pulumi.Context, args LookupVcenterControllerOutputArgs, opts ...pulumi.InvokeOption) LookupVcenterControllerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVcenterControllerResult, error) {
			args := v.(LookupVcenterControllerArgs)
			r, err := LookupVcenterController(ctx, &args, opts...)
			var s LookupVcenterControllerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVcenterControllerResultOutput)
}

type LookupVcenterControllerOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Site name
	SiteName pulumi.StringInput `pulumi:"siteName"`
	//  VCenters name
	VcenterName pulumi.StringInput `pulumi:"vcenterName"`
}

func (LookupVcenterControllerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVcenterControllerArgs)(nil)).Elem()
}

// A vcenter resource belonging to a site resource.
type LookupVcenterControllerResultOutput struct{ *pulumi.OutputState }

func (LookupVcenterControllerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVcenterControllerResult)(nil)).Elem()
}

func (o LookupVcenterControllerResultOutput) ToLookupVcenterControllerResultOutput() LookupVcenterControllerResultOutput {
	return o
}

func (o LookupVcenterControllerResultOutput) ToLookupVcenterControllerResultOutputWithContext(ctx context.Context) LookupVcenterControllerResultOutput {
	return o
}

// Gets the timestamp marking vCenter creation.
func (o LookupVcenterControllerResultOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// Gets the errors.
func (o LookupVcenterControllerResultOutput) Errors() HealthErrorDetailsResponseArrayOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) []HealthErrorDetailsResponse { return v.Errors }).(HealthErrorDetailsResponseArrayOutput)
}

// Gets or sets the FQDN/IPAddress of the vCenter.
func (o LookupVcenterControllerResultOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Gets or sets the friendly name of the vCenter.
func (o LookupVcenterControllerResultOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupVcenterControllerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Gets the instance UUID of the vCenter.
func (o LookupVcenterControllerResultOutput) InstanceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.InstanceUuid }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupVcenterControllerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the performance statistics enabled on the vCenter.
func (o LookupVcenterControllerResultOutput) PerfStatisticsLevel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.PerfStatisticsLevel }).(pulumi.StringOutput)
}

// Gets or sets the port of the vCenter.
func (o LookupVcenterControllerResultOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// The status of the last operation.
func (o LookupVcenterControllerResultOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Gets or sets the run as account ID of the vCenter.
func (o LookupVcenterControllerResultOutput) RunAsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) *string { return v.RunAsAccountId }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupVcenterControllerResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupVcenterControllerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.Type }).(pulumi.StringOutput)
}

// Gets the timestamp marking last updated on the vCenter.
func (o LookupVcenterControllerResultOutput) UpdatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.UpdatedTimestamp }).(pulumi.StringOutput)
}

// Gets the version of the vCenter.
func (o LookupVcenterControllerResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVcenterControllerResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVcenterControllerResultOutput{})
}
