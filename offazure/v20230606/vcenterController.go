// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230606

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A vcenter resource belonging to a site resource.
type VcenterController struct {
	pulumi.CustomResourceState

	// Gets the timestamp marking vCenter creation.
	CreatedTimestamp pulumi.StringOutput `pulumi:"createdTimestamp"`
	// Gets the errors.
	Errors HealthErrorDetailsResponseArrayOutput `pulumi:"errors"`
	// Gets or sets the FQDN/IPAddress of the vCenter.
	Fqdn pulumi.StringPtrOutput `pulumi:"fqdn"`
	// Gets or sets the friendly name of the vCenter.
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// Gets the instance UUID of the vCenter.
	InstanceUuid pulumi.StringOutput `pulumi:"instanceUuid"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Gets the performance statistics enabled on the vCenter.
	PerfStatisticsLevel pulumi.StringOutput `pulumi:"perfStatisticsLevel"`
	// Gets or sets the port of the vCenter.
	Port pulumi.StringPtrOutput `pulumi:"port"`
	// The status of the last operation.
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// Gets or sets the run as account ID of the vCenter.
	RunAsAccountId pulumi.StringPtrOutput `pulumi:"runAsAccountId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Gets the timestamp marking last updated on the vCenter.
	UpdatedTimestamp pulumi.StringOutput `pulumi:"updatedTimestamp"`
	// Gets the version of the vCenter.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewVcenterController registers a new resource with the given unique name, arguments, and options.
func NewVcenterController(ctx *pulumi.Context,
	name string, args *VcenterControllerArgs, opts ...pulumi.ResourceOption) (*VcenterController, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SiteName == nil {
		return nil, errors.New("invalid value for required argument 'SiteName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:offazure:VcenterController"),
		},
		{
			Type: pulumi.String("azure-native:offazure/v20200101:VcenterController"),
		},
		{
			Type: pulumi.String("azure-native:offazure/v20200707:VcenterController"),
		},
		{
			Type: pulumi.String("azure-native:offazure/v20231001preview:VcenterController"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VcenterController
	err := ctx.RegisterResource("azure-native:offazure/v20230606:VcenterController", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVcenterController gets an existing VcenterController resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVcenterController(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VcenterControllerState, opts ...pulumi.ResourceOption) (*VcenterController, error) {
	var resource VcenterController
	err := ctx.ReadResource("azure-native:offazure/v20230606:VcenterController", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VcenterController resources.
type vcenterControllerState struct {
}

type VcenterControllerState struct {
}

func (VcenterControllerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vcenterControllerState)(nil)).Elem()
}

type vcenterControllerArgs struct {
	// Gets or sets the FQDN/IPAddress of the vCenter.
	Fqdn *string `pulumi:"fqdn"`
	// Gets or sets the friendly name of the vCenter.
	FriendlyName *string `pulumi:"friendlyName"`
	// Gets or sets the port of the vCenter.
	Port *string `pulumi:"port"`
	// The status of the last operation.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets the run as account ID of the vCenter.
	RunAsAccountId *string `pulumi:"runAsAccountId"`
	// Site name
	SiteName string `pulumi:"siteName"`
	//  VCenters name
	VcenterName *string `pulumi:"vcenterName"`
}

// The set of arguments for constructing a VcenterController resource.
type VcenterControllerArgs struct {
	// Gets or sets the FQDN/IPAddress of the vCenter.
	Fqdn pulumi.StringPtrInput
	// Gets or sets the friendly name of the vCenter.
	FriendlyName pulumi.StringPtrInput
	// Gets or sets the port of the vCenter.
	Port pulumi.StringPtrInput
	// The status of the last operation.
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Gets or sets the run as account ID of the vCenter.
	RunAsAccountId pulumi.StringPtrInput
	// Site name
	SiteName pulumi.StringInput
	//  VCenters name
	VcenterName pulumi.StringPtrInput
}

func (VcenterControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vcenterControllerArgs)(nil)).Elem()
}

type VcenterControllerInput interface {
	pulumi.Input

	ToVcenterControllerOutput() VcenterControllerOutput
	ToVcenterControllerOutputWithContext(ctx context.Context) VcenterControllerOutput
}

func (*VcenterController) ElementType() reflect.Type {
	return reflect.TypeOf((**VcenterController)(nil)).Elem()
}

func (i *VcenterController) ToVcenterControllerOutput() VcenterControllerOutput {
	return i.ToVcenterControllerOutputWithContext(context.Background())
}

func (i *VcenterController) ToVcenterControllerOutputWithContext(ctx context.Context) VcenterControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VcenterControllerOutput)
}

type VcenterControllerOutput struct{ *pulumi.OutputState }

func (VcenterControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VcenterController)(nil)).Elem()
}

func (o VcenterControllerOutput) ToVcenterControllerOutput() VcenterControllerOutput {
	return o
}

func (o VcenterControllerOutput) ToVcenterControllerOutputWithContext(ctx context.Context) VcenterControllerOutput {
	return o
}

// Gets the timestamp marking vCenter creation.
func (o VcenterControllerOutput) CreatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.CreatedTimestamp }).(pulumi.StringOutput)
}

// Gets the errors.
func (o VcenterControllerOutput) Errors() HealthErrorDetailsResponseArrayOutput {
	return o.ApplyT(func(v *VcenterController) HealthErrorDetailsResponseArrayOutput { return v.Errors }).(HealthErrorDetailsResponseArrayOutput)
}

// Gets or sets the FQDN/IPAddress of the vCenter.
func (o VcenterControllerOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringPtrOutput { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// Gets or sets the friendly name of the vCenter.
func (o VcenterControllerOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Gets the instance UUID of the vCenter.
func (o VcenterControllerOutput) InstanceUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.InstanceUuid }).(pulumi.StringOutput)
}

// The name of the resource
func (o VcenterControllerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Gets the performance statistics enabled on the vCenter.
func (o VcenterControllerOutput) PerfStatisticsLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.PerfStatisticsLevel }).(pulumi.StringOutput)
}

// Gets or sets the port of the vCenter.
func (o VcenterControllerOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringPtrOutput { return v.Port }).(pulumi.StringPtrOutput)
}

// The status of the last operation.
func (o VcenterControllerOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringPtrOutput { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Gets or sets the run as account ID of the vCenter.
func (o VcenterControllerOutput) RunAsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringPtrOutput { return v.RunAsAccountId }).(pulumi.StringPtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o VcenterControllerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *VcenterController) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o VcenterControllerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Gets the timestamp marking last updated on the vCenter.
func (o VcenterControllerOutput) UpdatedTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.UpdatedTimestamp }).(pulumi.StringOutput)
}

// Gets the version of the vCenter.
func (o VcenterControllerOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *VcenterController) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(VcenterControllerOutput{})
}
