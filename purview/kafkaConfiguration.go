// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package purview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The configuration of the event streaming service resource attached to the Purview account for kafka notifications.
// Azure REST API version: 2021-12-01.
type KafkaConfiguration struct {
	pulumi.CustomResourceState

	// Consumer group for hook event hub.
	ConsumerGroup pulumi.StringPtrOutput `pulumi:"consumerGroup"`
	// Credentials to access event hub.
	Credentials CredentialsResponsePtrOutput `pulumi:"credentials"`
	// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
	EventHubPartitionId pulumi.StringPtrOutput `pulumi:"eventHubPartitionId"`
	EventHubResourceId  pulumi.StringPtrOutput `pulumi:"eventHubResourceId"`
	// The event hub type.
	EventHubType pulumi.StringPtrOutput `pulumi:"eventHubType"`
	// The state of the event streaming service
	EventStreamingState pulumi.StringPtrOutput `pulumi:"eventStreamingState"`
	// The event streaming service type
	EventStreamingType pulumi.StringPtrOutput `pulumi:"eventStreamingType"`
	// Gets or sets the name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Metadata pertaining to creation and last modification of the resource.
	SystemData ProxyResourceResponseSystemDataOutput `pulumi:"systemData"`
	// Gets or sets the type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewKafkaConfiguration registers a new resource with the given unique name, arguments, and options.
func NewKafkaConfiguration(ctx *pulumi.Context,
	name string, args *KafkaConfigurationArgs, opts ...pulumi.ResourceOption) (*KafkaConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.EventStreamingState == nil {
		args.EventStreamingState = pulumi.StringPtr("Enabled")
	}
	if args.EventStreamingType == nil {
		args.EventStreamingType = pulumi.StringPtr("None")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:purview/v20211201:KafkaConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource KafkaConfiguration
	err := ctx.RegisterResource("azure-native:purview:KafkaConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConfiguration gets an existing KafkaConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConfigurationState, opts ...pulumi.ResourceOption) (*KafkaConfiguration, error) {
	var resource KafkaConfiguration
	err := ctx.ReadResource("azure-native:purview:KafkaConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConfiguration resources.
type kafkaConfigurationState struct {
}

type KafkaConfigurationState struct {
}

func (KafkaConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConfigurationState)(nil)).Elem()
}

type kafkaConfigurationArgs struct {
	// The name of the account.
	AccountName string `pulumi:"accountName"`
	// Consumer group for hook event hub.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// Credentials to access event hub.
	Credentials *Credentials `pulumi:"credentials"`
	// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
	EventHubPartitionId *string `pulumi:"eventHubPartitionId"`
	EventHubResourceId  *string `pulumi:"eventHubResourceId"`
	// The event hub type.
	EventHubType *string `pulumi:"eventHubType"`
	// The state of the event streaming service
	EventStreamingState *string `pulumi:"eventStreamingState"`
	// The event streaming service type
	EventStreamingType *string `pulumi:"eventStreamingType"`
	// The kafka configuration name.
	KafkaConfigurationName *string `pulumi:"kafkaConfigurationName"`
	// The resource group name.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a KafkaConfiguration resource.
type KafkaConfigurationArgs struct {
	// The name of the account.
	AccountName pulumi.StringInput
	// Consumer group for hook event hub.
	ConsumerGroup pulumi.StringPtrInput
	// Credentials to access event hub.
	Credentials CredentialsPtrInput
	// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
	EventHubPartitionId pulumi.StringPtrInput
	EventHubResourceId  pulumi.StringPtrInput
	// The event hub type.
	EventHubType pulumi.StringPtrInput
	// The state of the event streaming service
	EventStreamingState pulumi.StringPtrInput
	// The event streaming service type
	EventStreamingType pulumi.StringPtrInput
	// The kafka configuration name.
	KafkaConfigurationName pulumi.StringPtrInput
	// The resource group name.
	ResourceGroupName pulumi.StringInput
}

func (KafkaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConfigurationArgs)(nil)).Elem()
}

type KafkaConfigurationInput interface {
	pulumi.Input

	ToKafkaConfigurationOutput() KafkaConfigurationOutput
	ToKafkaConfigurationOutputWithContext(ctx context.Context) KafkaConfigurationOutput
}

func (*KafkaConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConfiguration)(nil)).Elem()
}

func (i *KafkaConfiguration) ToKafkaConfigurationOutput() KafkaConfigurationOutput {
	return i.ToKafkaConfigurationOutputWithContext(context.Background())
}

func (i *KafkaConfiguration) ToKafkaConfigurationOutputWithContext(ctx context.Context) KafkaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConfigurationOutput)
}

type KafkaConfigurationOutput struct{ *pulumi.OutputState }

func (KafkaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConfiguration)(nil)).Elem()
}

func (o KafkaConfigurationOutput) ToKafkaConfigurationOutput() KafkaConfigurationOutput {
	return o
}

func (o KafkaConfigurationOutput) ToKafkaConfigurationOutputWithContext(ctx context.Context) KafkaConfigurationOutput {
	return o
}

// Consumer group for hook event hub.
func (o KafkaConfigurationOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// Credentials to access event hub.
func (o KafkaConfigurationOutput) Credentials() CredentialsResponsePtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) CredentialsResponsePtrOutput { return v.Credentials }).(CredentialsResponsePtrOutput)
}

// Optional partition Id for notification event hub. If not set, all partitions will be leveraged.
func (o KafkaConfigurationOutput) EventHubPartitionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.EventHubPartitionId }).(pulumi.StringPtrOutput)
}

func (o KafkaConfigurationOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// The event hub type.
func (o KafkaConfigurationOutput) EventHubType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.EventHubType }).(pulumi.StringPtrOutput)
}

// The state of the event streaming service
func (o KafkaConfigurationOutput) EventStreamingState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.EventStreamingState }).(pulumi.StringPtrOutput)
}

// The event streaming service type
func (o KafkaConfigurationOutput) EventStreamingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringPtrOutput { return v.EventStreamingType }).(pulumi.StringPtrOutput)
}

// Gets or sets the name.
func (o KafkaConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
func (o KafkaConfigurationOutput) SystemData() ProxyResourceResponseSystemDataOutput {
	return o.ApplyT(func(v *KafkaConfiguration) ProxyResourceResponseSystemDataOutput { return v.SystemData }).(ProxyResourceResponseSystemDataOutput)
}

// Gets or sets the type.
func (o KafkaConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(KafkaConfigurationOutput{})
}
