// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details from a list of feature names.
func ListFeatureSubscription(ctx *pulumi.Context, args *ListFeatureSubscriptionArgs, opts ...pulumi.InvokeOption) (*ListFeatureSubscriptionResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListFeatureSubscriptionResult
	err := ctx.Invoke("azure-native:purview/v20230501preview:listFeatureSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListFeatureSubscriptionArgs struct {
	// Set of features
	Features []string `pulumi:"features"`
	// Location of feature.
	Locations string `pulumi:"locations"`
}

// List of features with enabled status
type ListFeatureSubscriptionResult struct {
	// Features with enabled status
	Features map[string]bool `pulumi:"features"`
}

func ListFeatureSubscriptionOutput(ctx *pulumi.Context, args ListFeatureSubscriptionOutputArgs, opts ...pulumi.InvokeOption) ListFeatureSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ListFeatureSubscriptionResult, error) {
			args := v.(ListFeatureSubscriptionArgs)
			r, err := ListFeatureSubscription(ctx, &args, opts...)
			var s ListFeatureSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ListFeatureSubscriptionResultOutput)
}

type ListFeatureSubscriptionOutputArgs struct {
	// Set of features
	Features pulumi.StringArrayInput `pulumi:"features"`
	// Location of feature.
	Locations pulumi.StringInput `pulumi:"locations"`
}

func (ListFeatureSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListFeatureSubscriptionArgs)(nil)).Elem()
}

// List of features with enabled status
type ListFeatureSubscriptionResultOutput struct{ *pulumi.OutputState }

func (ListFeatureSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListFeatureSubscriptionResult)(nil)).Elem()
}

func (o ListFeatureSubscriptionResultOutput) ToListFeatureSubscriptionResultOutput() ListFeatureSubscriptionResultOutput {
	return o
}

func (o ListFeatureSubscriptionResultOutput) ToListFeatureSubscriptionResultOutputWithContext(ctx context.Context) ListFeatureSubscriptionResultOutput {
	return o
}

// Features with enabled status
func (o ListFeatureSubscriptionResultOutput) Features() pulumi.BoolMapOutput {
	return o.ApplyT(func(v ListFeatureSubscriptionResult) map[string]bool { return v.Features }).(pulumi.BoolMapOutput)
}

func init() {
	pulumi.RegisterOutputType(ListFeatureSubscriptionResultOutput{})
}
