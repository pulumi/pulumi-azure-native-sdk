// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220901preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Represents an ARM resource for /subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.SecurityDevOps/gitHubConnectors.
type GitHubConnector struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of the ARM resource for /subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.SecurityDevOps/gitHubConnectors.
	Properties GitHubConnectorPropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewGitHubConnector registers a new resource with the given unique name, arguments, and options.
func NewGitHubConnector(ctx *pulumi.Context,
	name string, args *GitHubConnectorArgs, opts ...pulumi.ResourceOption) (*GitHubConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:securitydevops:GitHubConnector"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GitHubConnector
	err := ctx.RegisterResource("azure-native:securitydevops/v20220901preview:GitHubConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitHubConnector gets an existing GitHubConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitHubConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitHubConnectorState, opts ...pulumi.ResourceOption) (*GitHubConnector, error) {
	var resource GitHubConnector
	err := ctx.ReadResource("azure-native:securitydevops/v20220901preview:GitHubConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitHubConnector resources.
type gitHubConnectorState struct {
}

type GitHubConnectorState struct {
}

func (GitHubConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubConnectorState)(nil)).Elem()
}

type gitHubConnectorArgs struct {
	// Name of the GitHub Connector.
	GitHubConnectorName *string `pulumi:"gitHubConnectorName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Properties of the ARM resource for /subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.SecurityDevOps/gitHubConnectors.
	Properties *GitHubConnectorProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a GitHubConnector resource.
type GitHubConnectorArgs struct {
	// Name of the GitHub Connector.
	GitHubConnectorName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Properties of the ARM resource for /subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.SecurityDevOps/gitHubConnectors.
	Properties GitHubConnectorPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (GitHubConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitHubConnectorArgs)(nil)).Elem()
}

type GitHubConnectorInput interface {
	pulumi.Input

	ToGitHubConnectorOutput() GitHubConnectorOutput
	ToGitHubConnectorOutputWithContext(ctx context.Context) GitHubConnectorOutput
}

func (*GitHubConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubConnector)(nil)).Elem()
}

func (i *GitHubConnector) ToGitHubConnectorOutput() GitHubConnectorOutput {
	return i.ToGitHubConnectorOutputWithContext(context.Background())
}

func (i *GitHubConnector) ToGitHubConnectorOutputWithContext(ctx context.Context) GitHubConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubConnectorOutput)
}

func (i *GitHubConnector) ToOutput(ctx context.Context) pulumix.Output[*GitHubConnector] {
	return pulumix.Output[*GitHubConnector]{
		OutputState: i.ToGitHubConnectorOutputWithContext(ctx).OutputState,
	}
}

type GitHubConnectorOutput struct{ *pulumi.OutputState }

func (GitHubConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubConnector)(nil)).Elem()
}

func (o GitHubConnectorOutput) ToGitHubConnectorOutput() GitHubConnectorOutput {
	return o
}

func (o GitHubConnectorOutput) ToGitHubConnectorOutputWithContext(ctx context.Context) GitHubConnectorOutput {
	return o
}

func (o GitHubConnectorOutput) ToOutput(ctx context.Context) pulumix.Output[*GitHubConnector] {
	return pulumix.Output[*GitHubConnector]{
		OutputState: o.OutputState,
	}
}

// The geo-location where the resource lives
func (o GitHubConnectorOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubConnector) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o GitHubConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of the ARM resource for /subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.SecurityDevOps/gitHubConnectors.
func (o GitHubConnectorOutput) Properties() GitHubConnectorPropertiesResponseOutput {
	return o.ApplyT(func(v *GitHubConnector) GitHubConnectorPropertiesResponseOutput { return v.Properties }).(GitHubConnectorPropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o GitHubConnectorOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *GitHubConnector) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o GitHubConnectorOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GitHubConnector) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o GitHubConnectorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *GitHubConnector) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GitHubConnectorOutput{})
}
