// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfig struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl string `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule string `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMap `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream string `pulumi:"stream"`
}

// AzureMonitorWorkspaceLogsApiConfigInput is an input type that accepts AzureMonitorWorkspaceLogsApiConfigArgs and AzureMonitorWorkspaceLogsApiConfigOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsApiConfigInput` via:
//
//	AzureMonitorWorkspaceLogsApiConfigArgs{...}
type AzureMonitorWorkspaceLogsApiConfigInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput
	ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(context.Context) AzureMonitorWorkspaceLogsApiConfigOutput
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigArgs struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl pulumi.StringInput `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule pulumi.StringInput `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMapInput `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream pulumi.StringInput `pulumi:"stream"`
}

func (AzureMonitorWorkspaceLogsApiConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigOutput).ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx)
}

// AzureMonitorWorkspaceLogsApiConfigPtrInput is an input type that accepts AzureMonitorWorkspaceLogsApiConfigArgs, AzureMonitorWorkspaceLogsApiConfigPtr and AzureMonitorWorkspaceLogsApiConfigPtrOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsApiConfigPtrInput` via:
//
//	        AzureMonitorWorkspaceLogsApiConfigArgs{...}
//
//	or:
//
//	        nil
type AzureMonitorWorkspaceLogsApiConfigPtrInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput
	ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput
}

type azureMonitorWorkspaceLogsApiConfigPtrType AzureMonitorWorkspaceLogsApiConfigArgs

func AzureMonitorWorkspaceLogsApiConfigPtr(v *AzureMonitorWorkspaceLogsApiConfigArgs) AzureMonitorWorkspaceLogsApiConfigPtrInput {
	return (*azureMonitorWorkspaceLogsApiConfigPtrType)(v)
}

func (*azureMonitorWorkspaceLogsApiConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (i *azureMonitorWorkspaceLogsApiConfigPtrType) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (i *azureMonitorWorkspaceLogsApiConfigPtrType) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMonitorWorkspaceLogsApiConfig) *AzureMonitorWorkspaceLogsApiConfig {
		return &v
	}).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) DataCollectionEndpointUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.DataCollectionEndpointUrl }).(pulumi.StringOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) DataCollectionRule() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.DataCollectionRule }).(pulumi.StringOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) Schema() SchemaMapOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) SchemaMap { return v.Schema }).(SchemaMapOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.Stream }).(pulumi.StringOutput)
}

type AzureMonitorWorkspaceLogsApiConfigPtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Elem() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) AzureMonitorWorkspaceLogsApiConfig {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsApiConfig
		return ret
	}).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) DataCollectionEndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) DataCollectionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRule
	}).(pulumi.StringPtrOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Schema() SchemaMapPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *SchemaMap {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(SchemaMapPtrOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Stream
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigResponse struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl string `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule string `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMapResponse `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream string `pulumi:"stream"`
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigResponseOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfigResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) ToAzureMonitorWorkspaceLogsApiConfigResponseOutput() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) ToAzureMonitorWorkspaceLogsApiConfigResponseOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) DataCollectionEndpointUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.DataCollectionEndpointUrl }).(pulumi.StringOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) DataCollectionRule() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.DataCollectionRule }).(pulumi.StringOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) Schema() SchemaMapResponseOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) SchemaMapResponse { return v.Schema }).(SchemaMapResponseOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.Stream }).(pulumi.StringOutput)
}

type AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfigResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ToAzureMonitorWorkspaceLogsApiConfigResponsePtrOutput() AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ToAzureMonitorWorkspaceLogsApiConfigResponsePtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Elem() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) AzureMonitorWorkspaceLogsApiConfigResponse {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsApiConfigResponse
		return ret
	}).(AzureMonitorWorkspaceLogsApiConfigResponseOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) DataCollectionEndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) DataCollectionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRule
	}).(pulumi.StringPtrOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Schema() SchemaMapResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *SchemaMapResponse {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(SchemaMapResponsePtrOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Stream
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporter struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfig `pulumi:"api"`
	// Cache configurations.
	Cache *CacheConfiguration `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency *ConcurrencyConfiguration `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporter
func (val *AzureMonitorWorkspaceLogsExporter) Defaults() *AzureMonitorWorkspaceLogsExporter {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Concurrency = tmp.Concurrency.Defaults()

	return &tmp
}

// AzureMonitorWorkspaceLogsExporterInput is an input type that accepts AzureMonitorWorkspaceLogsExporterArgs and AzureMonitorWorkspaceLogsExporterOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsExporterInput` via:
//
//	AzureMonitorWorkspaceLogsExporterArgs{...}
type AzureMonitorWorkspaceLogsExporterInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput
	ToAzureMonitorWorkspaceLogsExporterOutputWithContext(context.Context) AzureMonitorWorkspaceLogsExporterOutput
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterArgs struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfigInput `pulumi:"api"`
	// Cache configurations.
	Cache CacheConfigurationPtrInput `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency ConcurrencyConfigurationPtrInput `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporterArgs
func (val *AzureMonitorWorkspaceLogsExporterArgs) Defaults() *AzureMonitorWorkspaceLogsExporterArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AzureMonitorWorkspaceLogsExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterOutput)
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterOutput).ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx)
}

// AzureMonitorWorkspaceLogsExporterPtrInput is an input type that accepts AzureMonitorWorkspaceLogsExporterArgs, AzureMonitorWorkspaceLogsExporterPtr and AzureMonitorWorkspaceLogsExporterPtrOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsExporterPtrInput` via:
//
//	        AzureMonitorWorkspaceLogsExporterArgs{...}
//
//	or:
//
//	        nil
type AzureMonitorWorkspaceLogsExporterPtrInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput
	ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput
}

type azureMonitorWorkspaceLogsExporterPtrType AzureMonitorWorkspaceLogsExporterArgs

func AzureMonitorWorkspaceLogsExporterPtr(v *AzureMonitorWorkspaceLogsExporterArgs) AzureMonitorWorkspaceLogsExporterPtrInput {
	return (*azureMonitorWorkspaceLogsExporterPtrType)(v)
}

func (*azureMonitorWorkspaceLogsExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (i *azureMonitorWorkspaceLogsExporterPtrType) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (i *azureMonitorWorkspaceLogsExporterPtrType) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMonitorWorkspaceLogsExporter) *AzureMonitorWorkspaceLogsExporter {
		return &v
	}).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterOutput) Api() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) AzureMonitorWorkspaceLogsApiConfig { return v.Api }).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterOutput) Cache() CacheConfigurationPtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) *CacheConfiguration { return v.Cache }).(CacheConfigurationPtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterOutput) Concurrency() ConcurrencyConfigurationPtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) *ConcurrencyConfiguration { return v.Concurrency }).(ConcurrencyConfigurationPtrOutput)
}

type AzureMonitorWorkspaceLogsExporterPtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Elem() AzureMonitorWorkspaceLogsExporterOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) AzureMonitorWorkspaceLogsExporter {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsExporter
		return ret
	}).(AzureMonitorWorkspaceLogsExporterOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Api() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *AzureMonitorWorkspaceLogsApiConfig {
		if v == nil {
			return nil
		}
		return &v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Cache() CacheConfigurationPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *CacheConfiguration {
		if v == nil {
			return nil
		}
		return v.Cache
	}).(CacheConfigurationPtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Concurrency() ConcurrencyConfigurationPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *ConcurrencyConfiguration {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(ConcurrencyConfigurationPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterResponse struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfigResponse `pulumi:"api"`
	// Cache configurations.
	Cache *CacheConfigurationResponse `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency *ConcurrencyConfigurationResponse `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporterResponse
func (val *AzureMonitorWorkspaceLogsExporterResponse) Defaults() *AzureMonitorWorkspaceLogsExporterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Concurrency = tmp.Concurrency.Defaults()

	return &tmp
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterResponseOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporterResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterResponseOutput) ToAzureMonitorWorkspaceLogsExporterResponseOutput() AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponseOutput) ToAzureMonitorWorkspaceLogsExporterResponseOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Api() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) AzureMonitorWorkspaceLogsApiConfigResponse {
		return v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigResponseOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Cache() CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) *CacheConfigurationResponse { return v.Cache }).(CacheConfigurationResponsePtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Concurrency() ConcurrencyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) *ConcurrencyConfigurationResponse {
		return v.Concurrency
	}).(ConcurrencyConfigurationResponsePtrOutput)
}

type AzureMonitorWorkspaceLogsExporterResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporterResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ToAzureMonitorWorkspaceLogsExporterResponsePtrOutput() AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ToAzureMonitorWorkspaceLogsExporterResponsePtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Elem() AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) AzureMonitorWorkspaceLogsExporterResponse {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsExporterResponse
		return ret
	}).(AzureMonitorWorkspaceLogsExporterResponseOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Api() AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *AzureMonitorWorkspaceLogsApiConfigResponse {
		if v == nil {
			return nil
		}
		return &v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Cache() CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *CacheConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Cache
	}).(CacheConfigurationResponsePtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Concurrency() ConcurrencyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *ConcurrencyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(ConcurrencyConfigurationResponsePtrOutput)
}

// The private endpoint connection resource
type AzureResourceManagerPrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The private endpoint connection properties
	Properties *PrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The private endpoint connection resource
type AzureResourceManagerPrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerPrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceManagerPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) ToAzureResourceManagerPrivateEndpointConnectionResponseOutput() AzureResourceManagerPrivateEndpointConnectionResponseOutput {
	return o
}

func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) ToAzureResourceManagerPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) AzureResourceManagerPrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerPrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerPrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The private endpoint connection properties
func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) Properties() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AzureResourceManagerPrivateEndpointConnectionResponse) *PrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(PrivateEndpointConnectionPropertiesResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v AzureResourceManagerPrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o AzureResourceManagerPrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerPrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureResourceManagerPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput) ToAzureResourceManagerPrivateEndpointConnectionResponseArrayOutput() AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput) ToAzureResourceManagerPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) AzureResourceManagerPrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureResourceManagerPrivateEndpointConnectionResponse {
		return vs[0].([]AzureResourceManagerPrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(AzureResourceManagerPrivateEndpointConnectionResponseOutput)
}

// Batch processor.
type BatchProcessor struct {
	// Size of the batch.
	BatchSize *int `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout *int `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessor
func (val *BatchProcessor) Defaults() *BatchProcessor {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		batchSize_ := 8192
		tmp.BatchSize = &batchSize_
	}
	if tmp.Timeout == nil {
		timeout_ := 200
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchProcessorInput is an input type that accepts BatchProcessorArgs and BatchProcessorOutput values.
// You can construct a concrete instance of `BatchProcessorInput` via:
//
//	BatchProcessorArgs{...}
type BatchProcessorInput interface {
	pulumi.Input

	ToBatchProcessorOutput() BatchProcessorOutput
	ToBatchProcessorOutputWithContext(context.Context) BatchProcessorOutput
}

// Batch processor.
type BatchProcessorArgs struct {
	// Size of the batch.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessorArgs
func (val *BatchProcessorArgs) Defaults() *BatchProcessorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		tmp.BatchSize = pulumi.IntPtr(8192)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.IntPtr(200)
	}
	return &tmp
}
func (BatchProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessor)(nil)).Elem()
}

func (i BatchProcessorArgs) ToBatchProcessorOutput() BatchProcessorOutput {
	return i.ToBatchProcessorOutputWithContext(context.Background())
}

func (i BatchProcessorArgs) ToBatchProcessorOutputWithContext(ctx context.Context) BatchProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorOutput)
}

func (i BatchProcessorArgs) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return i.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (i BatchProcessorArgs) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorOutput).ToBatchProcessorPtrOutputWithContext(ctx)
}

// BatchProcessorPtrInput is an input type that accepts BatchProcessorArgs, BatchProcessorPtr and BatchProcessorPtrOutput values.
// You can construct a concrete instance of `BatchProcessorPtrInput` via:
//
//	        BatchProcessorArgs{...}
//
//	or:
//
//	        nil
type BatchProcessorPtrInput interface {
	pulumi.Input

	ToBatchProcessorPtrOutput() BatchProcessorPtrOutput
	ToBatchProcessorPtrOutputWithContext(context.Context) BatchProcessorPtrOutput
}

type batchProcessorPtrType BatchProcessorArgs

func BatchProcessorPtr(v *BatchProcessorArgs) BatchProcessorPtrInput {
	return (*batchProcessorPtrType)(v)
}

func (*batchProcessorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessor)(nil)).Elem()
}

func (i *batchProcessorPtrType) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return i.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (i *batchProcessorPtrType) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorPtrOutput)
}

// Batch processor.
type BatchProcessorOutput struct{ *pulumi.OutputState }

func (BatchProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessor)(nil)).Elem()
}

func (o BatchProcessorOutput) ToBatchProcessorOutput() BatchProcessorOutput {
	return o
}

func (o BatchProcessorOutput) ToBatchProcessorOutputWithContext(ctx context.Context) BatchProcessorOutput {
	return o
}

func (o BatchProcessorOutput) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return o.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (o BatchProcessorOutput) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchProcessor) *BatchProcessor {
		return &v
	}).(BatchProcessorPtrOutput)
}

// Size of the batch.
func (o BatchProcessorOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessor) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessor) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type BatchProcessorPtrOutput struct{ *pulumi.OutputState }

func (BatchProcessorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessor)(nil)).Elem()
}

func (o BatchProcessorPtrOutput) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return o
}

func (o BatchProcessorPtrOutput) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return o
}

func (o BatchProcessorPtrOutput) Elem() BatchProcessorOutput {
	return o.ApplyT(func(v *BatchProcessor) BatchProcessor {
		if v != nil {
			return *v
		}
		var ret BatchProcessor
		return ret
	}).(BatchProcessorOutput)
}

// Size of the batch.
func (o BatchProcessorPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessor) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessor) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Batch processor.
type BatchProcessorResponse struct {
	// Size of the batch.
	BatchSize *int `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout *int `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessorResponse
func (val *BatchProcessorResponse) Defaults() *BatchProcessorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		batchSize_ := 8192
		tmp.BatchSize = &batchSize_
	}
	if tmp.Timeout == nil {
		timeout_ := 200
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Batch processor.
type BatchProcessorResponseOutput struct{ *pulumi.OutputState }

func (BatchProcessorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessorResponse)(nil)).Elem()
}

func (o BatchProcessorResponseOutput) ToBatchProcessorResponseOutput() BatchProcessorResponseOutput {
	return o
}

func (o BatchProcessorResponseOutput) ToBatchProcessorResponseOutputWithContext(ctx context.Context) BatchProcessorResponseOutput {
	return o
}

// Size of the batch.
func (o BatchProcessorResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessorResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessorResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type BatchProcessorResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchProcessorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessorResponse)(nil)).Elem()
}

func (o BatchProcessorResponsePtrOutput) ToBatchProcessorResponsePtrOutput() BatchProcessorResponsePtrOutput {
	return o
}

func (o BatchProcessorResponsePtrOutput) ToBatchProcessorResponsePtrOutputWithContext(ctx context.Context) BatchProcessorResponsePtrOutput {
	return o
}

func (o BatchProcessorResponsePtrOutput) Elem() BatchProcessorResponseOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) BatchProcessorResponse {
		if v != nil {
			return *v
		}
		var ret BatchProcessorResponse
		return ret
	}).(BatchProcessorResponseOutput)
}

// Size of the batch.
func (o BatchProcessorResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Cache configurations.
type CacheConfiguration struct {
	// Max storage usage in megabytes.
	MaxStorageUsage *int `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// CacheConfigurationInput is an input type that accepts CacheConfigurationArgs and CacheConfigurationOutput values.
// You can construct a concrete instance of `CacheConfigurationInput` via:
//
//	CacheConfigurationArgs{...}
type CacheConfigurationInput interface {
	pulumi.Input

	ToCacheConfigurationOutput() CacheConfigurationOutput
	ToCacheConfigurationOutputWithContext(context.Context) CacheConfigurationOutput
}

// Cache configurations.
type CacheConfigurationArgs struct {
	// Max storage usage in megabytes.
	MaxStorageUsage pulumi.IntPtrInput `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod pulumi.IntPtrInput `pulumi:"retentionPeriod"`
}

func (CacheConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return i.ToCacheConfigurationOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput)
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput).ToCacheConfigurationPtrOutputWithContext(ctx)
}

// CacheConfigurationPtrInput is an input type that accepts CacheConfigurationArgs, CacheConfigurationPtr and CacheConfigurationPtrOutput values.
// You can construct a concrete instance of `CacheConfigurationPtrInput` via:
//
//	        CacheConfigurationArgs{...}
//
//	or:
//
//	        nil
type CacheConfigurationPtrInput interface {
	pulumi.Input

	ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput
	ToCacheConfigurationPtrOutputWithContext(context.Context) CacheConfigurationPtrOutput
}

type cacheConfigurationPtrType CacheConfigurationArgs

func CacheConfigurationPtr(v *CacheConfigurationArgs) CacheConfigurationPtrInput {
	return (*cacheConfigurationPtrType)(v)
}

func (*cacheConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationPtrOutput)
}

// Cache configurations.
type CacheConfigurationOutput struct{ *pulumi.OutputState }

func (CacheConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheConfiguration) *CacheConfiguration {
		return &v
	}).(CacheConfigurationPtrOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *int { return v.MaxStorageUsage }).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

type CacheConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) Elem() CacheConfigurationOutput {
	return o.ApplyT(func(v *CacheConfiguration) CacheConfiguration {
		if v != nil {
			return *v
		}
		var ret CacheConfiguration
		return ret
	}).(CacheConfigurationOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationPtrOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxStorageUsage
	}).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationPtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

// Cache configurations.
type CacheConfigurationResponse struct {
	// Max storage usage in megabytes.
	MaxStorageUsage *int `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// Cache configurations.
type CacheConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutput() CacheConfigurationResponseOutput {
	return o
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutputWithContext(ctx context.Context) CacheConfigurationResponseOutput {
	return o
}

// Max storage usage in megabytes.
func (o CacheConfigurationResponseOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *int { return v.MaxStorageUsage }).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationResponseOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

type CacheConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) Elem() CacheConfigurationResponseOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) CacheConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CacheConfigurationResponse
		return ret
	}).(CacheConfigurationResponseOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationResponsePtrOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxStorageUsage
	}).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationResponsePtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfiguration struct {
	// Size of the queue for log batches.
	BatchQueueSize *int `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfiguration
func (val *ConcurrencyConfiguration) Defaults() *ConcurrencyConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		batchQueueSize_ := 100
		tmp.BatchQueueSize = &batchQueueSize_
	}
	if tmp.WorkerCount == nil {
		workerCount_ := 4
		tmp.WorkerCount = &workerCount_
	}
	return &tmp
}

// ConcurrencyConfigurationInput is an input type that accepts ConcurrencyConfigurationArgs and ConcurrencyConfigurationOutput values.
// You can construct a concrete instance of `ConcurrencyConfigurationInput` via:
//
//	ConcurrencyConfigurationArgs{...}
type ConcurrencyConfigurationInput interface {
	pulumi.Input

	ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput
	ToConcurrencyConfigurationOutputWithContext(context.Context) ConcurrencyConfigurationOutput
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationArgs struct {
	// Size of the queue for log batches.
	BatchQueueSize pulumi.IntPtrInput `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfigurationArgs
func (val *ConcurrencyConfigurationArgs) Defaults() *ConcurrencyConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		tmp.BatchQueueSize = pulumi.IntPtr(100)
	}
	if tmp.WorkerCount == nil {
		tmp.WorkerCount = pulumi.IntPtr(4)
	}
	return &tmp
}
func (ConcurrencyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfiguration)(nil)).Elem()
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput {
	return i.ToConcurrencyConfigurationOutputWithContext(context.Background())
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationOutputWithContext(ctx context.Context) ConcurrencyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationOutput)
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return i.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationOutput).ToConcurrencyConfigurationPtrOutputWithContext(ctx)
}

// ConcurrencyConfigurationPtrInput is an input type that accepts ConcurrencyConfigurationArgs, ConcurrencyConfigurationPtr and ConcurrencyConfigurationPtrOutput values.
// You can construct a concrete instance of `ConcurrencyConfigurationPtrInput` via:
//
//	        ConcurrencyConfigurationArgs{...}
//
//	or:
//
//	        nil
type ConcurrencyConfigurationPtrInput interface {
	pulumi.Input

	ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput
	ToConcurrencyConfigurationPtrOutputWithContext(context.Context) ConcurrencyConfigurationPtrOutput
}

type concurrencyConfigurationPtrType ConcurrencyConfigurationArgs

func ConcurrencyConfigurationPtr(v *ConcurrencyConfigurationArgs) ConcurrencyConfigurationPtrInput {
	return (*concurrencyConfigurationPtrType)(v)
}

func (*concurrencyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfiguration)(nil)).Elem()
}

func (i *concurrencyConfigurationPtrType) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return i.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i *concurrencyConfigurationPtrType) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationPtrOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfiguration)(nil)).Elem()
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput {
	return o
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationOutputWithContext(ctx context.Context) ConcurrencyConfigurationOutput {
	return o
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return o.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConcurrencyConfiguration) *ConcurrencyConfiguration {
		return &v
	}).(ConcurrencyConfigurationPtrOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfiguration) *int { return v.BatchQueueSize }).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfiguration) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type ConcurrencyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfiguration)(nil)).Elem()
}

func (o ConcurrencyConfigurationPtrOutput) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return o
}

func (o ConcurrencyConfigurationPtrOutput) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return o
}

func (o ConcurrencyConfigurationPtrOutput) Elem() ConcurrencyConfigurationOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) ConcurrencyConfiguration {
		if v != nil {
			return *v
		}
		var ret ConcurrencyConfiguration
		return ret
	}).(ConcurrencyConfigurationOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationPtrOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.BatchQueueSize
	}).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationResponse struct {
	// Size of the queue for log batches.
	BatchQueueSize *int `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfigurationResponse
func (val *ConcurrencyConfigurationResponse) Defaults() *ConcurrencyConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		batchQueueSize_ := 100
		tmp.BatchQueueSize = &batchQueueSize_
	}
	if tmp.WorkerCount == nil {
		workerCount_ := 4
		tmp.WorkerCount = &workerCount_
	}
	return &tmp
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfigurationResponse)(nil)).Elem()
}

func (o ConcurrencyConfigurationResponseOutput) ToConcurrencyConfigurationResponseOutput() ConcurrencyConfigurationResponseOutput {
	return o
}

func (o ConcurrencyConfigurationResponseOutput) ToConcurrencyConfigurationResponseOutputWithContext(ctx context.Context) ConcurrencyConfigurationResponseOutput {
	return o
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationResponseOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfigurationResponse) *int { return v.BatchQueueSize }).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfigurationResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type ConcurrencyConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfigurationResponse)(nil)).Elem()
}

func (o ConcurrencyConfigurationResponsePtrOutput) ToConcurrencyConfigurationResponsePtrOutput() ConcurrencyConfigurationResponsePtrOutput {
	return o
}

func (o ConcurrencyConfigurationResponsePtrOutput) ToConcurrencyConfigurationResponsePtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationResponsePtrOutput {
	return o
}

func (o ConcurrencyConfigurationResponsePtrOutput) Elem() ConcurrencyConfigurationResponseOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) ConcurrencyConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ConcurrencyConfigurationResponse
		return ret
	}).(ConcurrencyConfigurationResponseOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationResponsePtrOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchQueueSize
	}).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Exporter Info.
type Exporter struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs *AzureMonitorWorkspaceLogsExporter `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name string `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp *TcpExporter `pulumi:"tcp"`
	// The type of exporter.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Exporter
func (val *Exporter) Defaults() *Exporter {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureMonitorWorkspaceLogs = tmp.AzureMonitorWorkspaceLogs.Defaults()

	return &tmp
}

// ExporterInput is an input type that accepts ExporterArgs and ExporterOutput values.
// You can construct a concrete instance of `ExporterInput` via:
//
//	ExporterArgs{...}
type ExporterInput interface {
	pulumi.Input

	ToExporterOutput() ExporterOutput
	ToExporterOutputWithContext(context.Context) ExporterOutput
}

// Exporter Info.
type ExporterArgs struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs AzureMonitorWorkspaceLogsExporterPtrInput `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name pulumi.StringInput `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp TcpExporterPtrInput `pulumi:"tcp"`
	// The type of exporter.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ExporterArgs
func (val *ExporterArgs) Defaults() *ExporterArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Exporter)(nil)).Elem()
}

func (i ExporterArgs) ToExporterOutput() ExporterOutput {
	return i.ToExporterOutputWithContext(context.Background())
}

func (i ExporterArgs) ToExporterOutputWithContext(ctx context.Context) ExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExporterOutput)
}

// ExporterArrayInput is an input type that accepts ExporterArray and ExporterArrayOutput values.
// You can construct a concrete instance of `ExporterArrayInput` via:
//
//	ExporterArray{ ExporterArgs{...} }
type ExporterArrayInput interface {
	pulumi.Input

	ToExporterArrayOutput() ExporterArrayOutput
	ToExporterArrayOutputWithContext(context.Context) ExporterArrayOutput
}

type ExporterArray []ExporterInput

func (ExporterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Exporter)(nil)).Elem()
}

func (i ExporterArray) ToExporterArrayOutput() ExporterArrayOutput {
	return i.ToExporterArrayOutputWithContext(context.Background())
}

func (i ExporterArray) ToExporterArrayOutputWithContext(ctx context.Context) ExporterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExporterArrayOutput)
}

// Exporter Info.
type ExporterOutput struct{ *pulumi.OutputState }

func (ExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Exporter)(nil)).Elem()
}

func (o ExporterOutput) ToExporterOutput() ExporterOutput {
	return o
}

func (o ExporterOutput) ToExporterOutputWithContext(ctx context.Context) ExporterOutput {
	return o
}

// Azure Monitor Workspace Logs specific configurations.
func (o ExporterOutput) AzureMonitorWorkspaceLogs() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ApplyT(func(v Exporter) *AzureMonitorWorkspaceLogsExporter { return v.AzureMonitorWorkspaceLogs }).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// The name of exporter.
func (o ExporterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Exporter) string { return v.Name }).(pulumi.StringOutput)
}

// TCP based exporter. Used for pipelineGroup exporter.
func (o ExporterOutput) Tcp() TcpExporterPtrOutput {
	return o.ApplyT(func(v Exporter) *TcpExporter { return v.Tcp }).(TcpExporterPtrOutput)
}

// The type of exporter.
func (o ExporterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Exporter) string { return v.Type }).(pulumi.StringOutput)
}

type ExporterArrayOutput struct{ *pulumi.OutputState }

func (ExporterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Exporter)(nil)).Elem()
}

func (o ExporterArrayOutput) ToExporterArrayOutput() ExporterArrayOutput {
	return o
}

func (o ExporterArrayOutput) ToExporterArrayOutputWithContext(ctx context.Context) ExporterArrayOutput {
	return o
}

func (o ExporterArrayOutput) Index(i pulumi.IntInput) ExporterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Exporter {
		return vs[0].([]Exporter)[vs[1].(int)]
	}).(ExporterOutput)
}

// Exporter Info.
type ExporterResponse struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs *AzureMonitorWorkspaceLogsExporterResponse `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name string `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp *TcpExporterResponse `pulumi:"tcp"`
	// The type of exporter.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ExporterResponse
func (val *ExporterResponse) Defaults() *ExporterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureMonitorWorkspaceLogs = tmp.AzureMonitorWorkspaceLogs.Defaults()

	return &tmp
}

// Exporter Info.
type ExporterResponseOutput struct{ *pulumi.OutputState }

func (ExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExporterResponse)(nil)).Elem()
}

func (o ExporterResponseOutput) ToExporterResponseOutput() ExporterResponseOutput {
	return o
}

func (o ExporterResponseOutput) ToExporterResponseOutputWithContext(ctx context.Context) ExporterResponseOutput {
	return o
}

// Azure Monitor Workspace Logs specific configurations.
func (o ExporterResponseOutput) AzureMonitorWorkspaceLogs() AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o.ApplyT(func(v ExporterResponse) *AzureMonitorWorkspaceLogsExporterResponse {
		return v.AzureMonitorWorkspaceLogs
	}).(AzureMonitorWorkspaceLogsExporterResponsePtrOutput)
}

// The name of exporter.
func (o ExporterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExporterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// TCP based exporter. Used for pipelineGroup exporter.
func (o ExporterResponseOutput) Tcp() TcpExporterResponsePtrOutput {
	return o.ApplyT(func(v ExporterResponse) *TcpExporterResponse { return v.Tcp }).(TcpExporterResponsePtrOutput)
}

// The type of exporter.
func (o ExporterResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExporterResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExporterResponseArrayOutput struct{ *pulumi.OutputState }

func (ExporterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExporterResponse)(nil)).Elem()
}

func (o ExporterResponseArrayOutput) ToExporterResponseArrayOutput() ExporterResponseArrayOutput {
	return o
}

func (o ExporterResponseArrayOutput) ToExporterResponseArrayOutputWithContext(ctx context.Context) ExporterResponseArrayOutput {
	return o
}

func (o ExporterResponseArrayOutput) Index(i pulumi.IntInput) ExporterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExporterResponse {
		return vs[0].([]ExporterResponse)[vs[1].(int)]
	}).(ExporterResponseOutput)
}

// The extended location info.
type ExtendedLocation struct {
	// The name of extended location.
	Name string `pulumi:"name"`
	// The type of extended location.
	Type string `pulumi:"type"`
}

// ExtendedLocationInput is an input type that accepts ExtendedLocationArgs and ExtendedLocationOutput values.
// You can construct a concrete instance of `ExtendedLocationInput` via:
//
//	ExtendedLocationArgs{...}
type ExtendedLocationInput interface {
	pulumi.Input

	ToExtendedLocationOutput() ExtendedLocationOutput
	ToExtendedLocationOutputWithContext(context.Context) ExtendedLocationOutput
}

// The extended location info.
type ExtendedLocationArgs struct {
	// The name of extended location.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of extended location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (i ExtendedLocationArgs) ToExtendedLocationOutput() ExtendedLocationOutput {
	return i.ToExtendedLocationOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput)
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i ExtendedLocationArgs) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationOutput).ToExtendedLocationPtrOutputWithContext(ctx)
}

// ExtendedLocationPtrInput is an input type that accepts ExtendedLocationArgs, ExtendedLocationPtr and ExtendedLocationPtrOutput values.
// You can construct a concrete instance of `ExtendedLocationPtrInput` via:
//
//	        ExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type ExtendedLocationPtrInput interface {
	pulumi.Input

	ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput
	ToExtendedLocationPtrOutputWithContext(context.Context) ExtendedLocationPtrOutput
}

type extendedLocationPtrType ExtendedLocationArgs

func ExtendedLocationPtr(v *ExtendedLocationArgs) ExtendedLocationPtrInput {
	return (*extendedLocationPtrType)(v)
}

func (*extendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return i.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *extendedLocationPtrType) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtendedLocationPtrOutput)
}

// The extended location info.
type ExtendedLocationOutput struct{ *pulumi.OutputState }

func (ExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationOutput) ToExtendedLocationOutput() ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationOutputWithContext(ctx context.Context) ExtendedLocationOutput {
	return o
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o.ToExtendedLocationPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocation) *ExtendedLocation {
		return &v
	}).(ExtendedLocationPtrOutput)
}

// The name of extended location.
func (o ExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The type of extended location.
func (o ExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocation)(nil)).Elem()
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutput() ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) ToExtendedLocationPtrOutputWithContext(ctx context.Context) ExtendedLocationPtrOutput {
	return o
}

func (o ExtendedLocationPtrOutput) Elem() ExtendedLocationOutput {
	return o.ApplyT(func(v *ExtendedLocation) ExtendedLocation {
		if v != nil {
			return *v
		}
		var ret ExtendedLocation
		return ret
	}).(ExtendedLocationOutput)
}

// The name of extended location.
func (o ExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of extended location.
func (o ExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The extended location info.
type ExtendedLocationResponse struct {
	// The name of extended location.
	Name string `pulumi:"name"`
	// The type of extended location.
	Type string `pulumi:"type"`
}

// The extended location info.
type ExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutput() ExtendedLocationResponseOutput {
	return o
}

func (o ExtendedLocationResponseOutput) ToExtendedLocationResponseOutputWithContext(ctx context.Context) ExtendedLocationResponseOutput {
	return o
}

// The name of extended location.
func (o ExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of extended location.
func (o ExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationResponse)(nil)).Elem()
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutput() ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) ToExtendedLocationResponsePtrOutputWithContext(ctx context.Context) ExtendedLocationResponsePtrOutput {
	return o
}

func (o ExtendedLocationResponsePtrOutput) Elem() ExtendedLocationResponseOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) ExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationResponse
		return ret
	}).(ExtendedLocationResponseOutput)
}

// The name of extended location.
func (o ExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of extended location.
func (o ExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Settings for data ingestion
type IngestionSettingsResponse struct {
	// The Azure resource Id of the default data collection endpoint for this workspace.
	DataCollectionEndpointResourceId string `pulumi:"dataCollectionEndpointResourceId"`
	// The Azure resource Id of the default data collection rule for this workspace.
	DataCollectionRuleResourceId string `pulumi:"dataCollectionRuleResourceId"`
}

// Settings for data ingestion
type IngestionSettingsResponseOutput struct{ *pulumi.OutputState }

func (IngestionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionSettingsResponse)(nil)).Elem()
}

func (o IngestionSettingsResponseOutput) ToIngestionSettingsResponseOutput() IngestionSettingsResponseOutput {
	return o
}

func (o IngestionSettingsResponseOutput) ToIngestionSettingsResponseOutputWithContext(ctx context.Context) IngestionSettingsResponseOutput {
	return o
}

// The Azure resource Id of the default data collection endpoint for this workspace.
func (o IngestionSettingsResponseOutput) DataCollectionEndpointResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IngestionSettingsResponse) string { return v.DataCollectionEndpointResourceId }).(pulumi.StringOutput)
}

// The Azure resource Id of the default data collection rule for this workspace.
func (o IngestionSettingsResponseOutput) DataCollectionRuleResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v IngestionSettingsResponse) string { return v.DataCollectionRuleResourceId }).(pulumi.StringOutput)
}

// Information about metrics for the workspace
type MetricsResponse struct {
	// An internal identifier for the metrics container. Only to be used by the system
	InternalId string `pulumi:"internalId"`
	// The Prometheus query endpoint for the workspace
	PrometheusQueryEndpoint string `pulumi:"prometheusQueryEndpoint"`
}

// Information about metrics for the workspace
type MetricsResponseOutput struct{ *pulumi.OutputState }

func (MetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricsResponse)(nil)).Elem()
}

func (o MetricsResponseOutput) ToMetricsResponseOutput() MetricsResponseOutput {
	return o
}

func (o MetricsResponseOutput) ToMetricsResponseOutputWithContext(ctx context.Context) MetricsResponseOutput {
	return o
}

// An internal identifier for the metrics container. Only to be used by the system
func (o MetricsResponseOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v MetricsResponse) string { return v.InternalId }).(pulumi.StringOutput)
}

// The Prometheus query endpoint for the workspace
func (o MetricsResponseOutput) PrometheusQueryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v MetricsResponse) string { return v.PrometheusQueryEndpoint }).(pulumi.StringOutput)
}

type MetricsResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricsResponse)(nil)).Elem()
}

func (o MetricsResponsePtrOutput) ToMetricsResponsePtrOutput() MetricsResponsePtrOutput {
	return o
}

func (o MetricsResponsePtrOutput) ToMetricsResponsePtrOutputWithContext(ctx context.Context) MetricsResponsePtrOutput {
	return o
}

func (o MetricsResponsePtrOutput) Elem() MetricsResponseOutput {
	return o.ApplyT(func(v *MetricsResponse) MetricsResponse {
		if v != nil {
			return *v
		}
		var ret MetricsResponse
		return ret
	}).(MetricsResponseOutput)
}

// An internal identifier for the metrics container. Only to be used by the system
func (o MetricsResponsePtrOutput) InternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InternalId
	}).(pulumi.StringPtrOutput)
}

// The Prometheus query endpoint for the workspace
func (o MetricsResponsePtrOutput) PrometheusQueryEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetricsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrometheusQueryEndpoint
	}).(pulumi.StringPtrOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfiguration struct {
	// External networking mode.
	ExternalNetworkingMode string `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host *string `pulumi:"host"`
	// Networking routes configuration.
	Routes []NetworkingRoute `pulumi:"routes"`
}

// NetworkingConfigurationInput is an input type that accepts NetworkingConfigurationArgs and NetworkingConfigurationOutput values.
// You can construct a concrete instance of `NetworkingConfigurationInput` via:
//
//	NetworkingConfigurationArgs{...}
type NetworkingConfigurationInput interface {
	pulumi.Input

	ToNetworkingConfigurationOutput() NetworkingConfigurationOutput
	ToNetworkingConfigurationOutputWithContext(context.Context) NetworkingConfigurationOutput
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationArgs struct {
	// External networking mode.
	ExternalNetworkingMode pulumi.StringInput `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Networking routes configuration.
	Routes NetworkingRouteArrayInput `pulumi:"routes"`
}

func (NetworkingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfiguration)(nil)).Elem()
}

func (i NetworkingConfigurationArgs) ToNetworkingConfigurationOutput() NetworkingConfigurationOutput {
	return i.ToNetworkingConfigurationOutputWithContext(context.Background())
}

func (i NetworkingConfigurationArgs) ToNetworkingConfigurationOutputWithContext(ctx context.Context) NetworkingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingConfigurationOutput)
}

// NetworkingConfigurationArrayInput is an input type that accepts NetworkingConfigurationArray and NetworkingConfigurationArrayOutput values.
// You can construct a concrete instance of `NetworkingConfigurationArrayInput` via:
//
//	NetworkingConfigurationArray{ NetworkingConfigurationArgs{...} }
type NetworkingConfigurationArrayInput interface {
	pulumi.Input

	ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput
	ToNetworkingConfigurationArrayOutputWithContext(context.Context) NetworkingConfigurationArrayOutput
}

type NetworkingConfigurationArray []NetworkingConfigurationInput

func (NetworkingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfiguration)(nil)).Elem()
}

func (i NetworkingConfigurationArray) ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput {
	return i.ToNetworkingConfigurationArrayOutputWithContext(context.Background())
}

func (i NetworkingConfigurationArray) ToNetworkingConfigurationArrayOutputWithContext(ctx context.Context) NetworkingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingConfigurationArrayOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfiguration)(nil)).Elem()
}

func (o NetworkingConfigurationOutput) ToNetworkingConfigurationOutput() NetworkingConfigurationOutput {
	return o
}

func (o NetworkingConfigurationOutput) ToNetworkingConfigurationOutputWithContext(ctx context.Context) NetworkingConfigurationOutput {
	return o
}

// External networking mode.
func (o NetworkingConfigurationOutput) ExternalNetworkingMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingConfiguration) string { return v.ExternalNetworkingMode }).(pulumi.StringOutput)
}

// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
func (o NetworkingConfigurationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingConfiguration) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Networking routes configuration.
func (o NetworkingConfigurationOutput) Routes() NetworkingRouteArrayOutput {
	return o.ApplyT(func(v NetworkingConfiguration) []NetworkingRoute { return v.Routes }).(NetworkingRouteArrayOutput)
}

type NetworkingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfiguration)(nil)).Elem()
}

func (o NetworkingConfigurationArrayOutput) ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput {
	return o
}

func (o NetworkingConfigurationArrayOutput) ToNetworkingConfigurationArrayOutputWithContext(ctx context.Context) NetworkingConfigurationArrayOutput {
	return o
}

func (o NetworkingConfigurationArrayOutput) Index(i pulumi.IntInput) NetworkingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingConfiguration {
		return vs[0].([]NetworkingConfiguration)[vs[1].(int)]
	}).(NetworkingConfigurationOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationResponse struct {
	// External networking mode.
	ExternalNetworkingMode string `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host *string `pulumi:"host"`
	// Networking routes configuration.
	Routes []NetworkingRouteResponse `pulumi:"routes"`
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfigurationResponse)(nil)).Elem()
}

func (o NetworkingConfigurationResponseOutput) ToNetworkingConfigurationResponseOutput() NetworkingConfigurationResponseOutput {
	return o
}

func (o NetworkingConfigurationResponseOutput) ToNetworkingConfigurationResponseOutputWithContext(ctx context.Context) NetworkingConfigurationResponseOutput {
	return o
}

// External networking mode.
func (o NetworkingConfigurationResponseOutput) ExternalNetworkingMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) string { return v.ExternalNetworkingMode }).(pulumi.StringOutput)
}

// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
func (o NetworkingConfigurationResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Networking routes configuration.
func (o NetworkingConfigurationResponseOutput) Routes() NetworkingRouteResponseArrayOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) []NetworkingRouteResponse { return v.Routes }).(NetworkingRouteResponseArrayOutput)
}

type NetworkingConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfigurationResponse)(nil)).Elem()
}

func (o NetworkingConfigurationResponseArrayOutput) ToNetworkingConfigurationResponseArrayOutput() NetworkingConfigurationResponseArrayOutput {
	return o
}

func (o NetworkingConfigurationResponseArrayOutput) ToNetworkingConfigurationResponseArrayOutputWithContext(ctx context.Context) NetworkingConfigurationResponseArrayOutput {
	return o
}

func (o NetworkingConfigurationResponseArrayOutput) Index(i pulumi.IntInput) NetworkingConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingConfigurationResponse {
		return vs[0].([]NetworkingConfigurationResponse)[vs[1].(int)]
	}).(NetworkingConfigurationResponseOutput)
}

// Networking route configuration.
type NetworkingRoute struct {
	// Route path.
	Path *string `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port *int `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver string `pulumi:"receiver"`
	// Route subdomain.
	Subdomain *string `pulumi:"subdomain"`
}

// NetworkingRouteInput is an input type that accepts NetworkingRouteArgs and NetworkingRouteOutput values.
// You can construct a concrete instance of `NetworkingRouteInput` via:
//
//	NetworkingRouteArgs{...}
type NetworkingRouteInput interface {
	pulumi.Input

	ToNetworkingRouteOutput() NetworkingRouteOutput
	ToNetworkingRouteOutputWithContext(context.Context) NetworkingRouteOutput
}

// Networking route configuration.
type NetworkingRouteArgs struct {
	// Route path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// Route subdomain.
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
}

func (NetworkingRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRoute)(nil)).Elem()
}

func (i NetworkingRouteArgs) ToNetworkingRouteOutput() NetworkingRouteOutput {
	return i.ToNetworkingRouteOutputWithContext(context.Background())
}

func (i NetworkingRouteArgs) ToNetworkingRouteOutputWithContext(ctx context.Context) NetworkingRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteOutput)
}

// NetworkingRouteArrayInput is an input type that accepts NetworkingRouteArray and NetworkingRouteArrayOutput values.
// You can construct a concrete instance of `NetworkingRouteArrayInput` via:
//
//	NetworkingRouteArray{ NetworkingRouteArgs{...} }
type NetworkingRouteArrayInput interface {
	pulumi.Input

	ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput
	ToNetworkingRouteArrayOutputWithContext(context.Context) NetworkingRouteArrayOutput
}

type NetworkingRouteArray []NetworkingRouteInput

func (NetworkingRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRoute)(nil)).Elem()
}

func (i NetworkingRouteArray) ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput {
	return i.ToNetworkingRouteArrayOutputWithContext(context.Background())
}

func (i NetworkingRouteArray) ToNetworkingRouteArrayOutputWithContext(ctx context.Context) NetworkingRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteArrayOutput)
}

// Networking route configuration.
type NetworkingRouteOutput struct{ *pulumi.OutputState }

func (NetworkingRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRoute)(nil)).Elem()
}

func (o NetworkingRouteOutput) ToNetworkingRouteOutput() NetworkingRouteOutput {
	return o
}

func (o NetworkingRouteOutput) ToNetworkingRouteOutputWithContext(ctx context.Context) NetworkingRouteOutput {
	return o
}

// Route path.
func (o NetworkingRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
func (o NetworkingRouteOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the previously defined receiver.
func (o NetworkingRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// Route subdomain.
func (o NetworkingRouteOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

type NetworkingRouteArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRoute)(nil)).Elem()
}

func (o NetworkingRouteArrayOutput) ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput {
	return o
}

func (o NetworkingRouteArrayOutput) ToNetworkingRouteArrayOutputWithContext(ctx context.Context) NetworkingRouteArrayOutput {
	return o
}

func (o NetworkingRouteArrayOutput) Index(i pulumi.IntInput) NetworkingRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingRoute {
		return vs[0].([]NetworkingRoute)[vs[1].(int)]
	}).(NetworkingRouteOutput)
}

// Networking route configuration.
type NetworkingRouteResponse struct {
	// Route path.
	Path *string `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port *int `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver string `pulumi:"receiver"`
	// Route subdomain.
	Subdomain *string `pulumi:"subdomain"`
}

// Networking route configuration.
type NetworkingRouteResponseOutput struct{ *pulumi.OutputState }

func (NetworkingRouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRouteResponse)(nil)).Elem()
}

func (o NetworkingRouteResponseOutput) ToNetworkingRouteResponseOutput() NetworkingRouteResponseOutput {
	return o
}

func (o NetworkingRouteResponseOutput) ToNetworkingRouteResponseOutputWithContext(ctx context.Context) NetworkingRouteResponseOutput {
	return o
}

// Route path.
func (o NetworkingRouteResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
func (o NetworkingRouteResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the previously defined receiver.
func (o NetworkingRouteResponseOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) string { return v.Receiver }).(pulumi.StringOutput)
}

// Route subdomain.
func (o NetworkingRouteResponseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

type NetworkingRouteResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRouteResponse)(nil)).Elem()
}

func (o NetworkingRouteResponseArrayOutput) ToNetworkingRouteResponseArrayOutput() NetworkingRouteResponseArrayOutput {
	return o
}

func (o NetworkingRouteResponseArrayOutput) ToNetworkingRouteResponseArrayOutputWithContext(ctx context.Context) NetworkingRouteResponseArrayOutput {
	return o
}

func (o NetworkingRouteResponseArrayOutput) Index(i pulumi.IntInput) NetworkingRouteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingRouteResponse {
		return vs[0].([]NetworkingRouteResponse)[vs[1].(int)]
	}).(NetworkingRouteResponseOutput)
}

// OTLP Receiver.
type OtlpReceiver struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
}

// OtlpReceiverInput is an input type that accepts OtlpReceiverArgs and OtlpReceiverOutput values.
// You can construct a concrete instance of `OtlpReceiverInput` via:
//
//	OtlpReceiverArgs{...}
type OtlpReceiverInput interface {
	pulumi.Input

	ToOtlpReceiverOutput() OtlpReceiverOutput
	ToOtlpReceiverOutputWithContext(context.Context) OtlpReceiverOutput
}

// OTLP Receiver.
type OtlpReceiverArgs struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
}

func (OtlpReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiver)(nil)).Elem()
}

func (i OtlpReceiverArgs) ToOtlpReceiverOutput() OtlpReceiverOutput {
	return i.ToOtlpReceiverOutputWithContext(context.Background())
}

func (i OtlpReceiverArgs) ToOtlpReceiverOutputWithContext(ctx context.Context) OtlpReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverOutput)
}

func (i OtlpReceiverArgs) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return i.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (i OtlpReceiverArgs) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverOutput).ToOtlpReceiverPtrOutputWithContext(ctx)
}

// OtlpReceiverPtrInput is an input type that accepts OtlpReceiverArgs, OtlpReceiverPtr and OtlpReceiverPtrOutput values.
// You can construct a concrete instance of `OtlpReceiverPtrInput` via:
//
//	        OtlpReceiverArgs{...}
//
//	or:
//
//	        nil
type OtlpReceiverPtrInput interface {
	pulumi.Input

	ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput
	ToOtlpReceiverPtrOutputWithContext(context.Context) OtlpReceiverPtrOutput
}

type otlpReceiverPtrType OtlpReceiverArgs

func OtlpReceiverPtr(v *OtlpReceiverArgs) OtlpReceiverPtrInput {
	return (*otlpReceiverPtrType)(v)
}

func (*otlpReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiver)(nil)).Elem()
}

func (i *otlpReceiverPtrType) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return i.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (i *otlpReceiverPtrType) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverPtrOutput)
}

// OTLP Receiver.
type OtlpReceiverOutput struct{ *pulumi.OutputState }

func (OtlpReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiver)(nil)).Elem()
}

func (o OtlpReceiverOutput) ToOtlpReceiverOutput() OtlpReceiverOutput {
	return o
}

func (o OtlpReceiverOutput) ToOtlpReceiverOutputWithContext(ctx context.Context) OtlpReceiverOutput {
	return o
}

func (o OtlpReceiverOutput) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return o.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (o OtlpReceiverOutput) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OtlpReceiver) *OtlpReceiver {
		return &v
	}).(OtlpReceiverPtrOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v OtlpReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

type OtlpReceiverPtrOutput struct{ *pulumi.OutputState }

func (OtlpReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiver)(nil)).Elem()
}

func (o OtlpReceiverPtrOutput) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return o
}

func (o OtlpReceiverPtrOutput) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return o
}

func (o OtlpReceiverPtrOutput) Elem() OtlpReceiverOutput {
	return o.ApplyT(func(v *OtlpReceiver) OtlpReceiver {
		if v != nil {
			return *v
		}
		var ret OtlpReceiver
		return ret
	}).(OtlpReceiverOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtlpReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// OTLP Receiver.
type OtlpReceiverResponse struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
}

// OTLP Receiver.
type OtlpReceiverResponseOutput struct{ *pulumi.OutputState }

func (OtlpReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiverResponse)(nil)).Elem()
}

func (o OtlpReceiverResponseOutput) ToOtlpReceiverResponseOutput() OtlpReceiverResponseOutput {
	return o
}

func (o OtlpReceiverResponseOutput) ToOtlpReceiverResponseOutputWithContext(ctx context.Context) OtlpReceiverResponseOutput {
	return o
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v OtlpReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

type OtlpReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (OtlpReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiverResponse)(nil)).Elem()
}

func (o OtlpReceiverResponsePtrOutput) ToOtlpReceiverResponsePtrOutput() OtlpReceiverResponsePtrOutput {
	return o
}

func (o OtlpReceiverResponsePtrOutput) ToOtlpReceiverResponsePtrOutputWithContext(ctx context.Context) OtlpReceiverResponsePtrOutput {
	return o
}

func (o OtlpReceiverResponsePtrOutput) Elem() OtlpReceiverResponseOutput {
	return o.ApplyT(func(v *OtlpReceiverResponse) OtlpReceiverResponse {
		if v != nil {
			return *v
		}
		var ret OtlpReceiverResponse
		return ret
	}).(OtlpReceiverResponseOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtlpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurations struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName string `pulumi:"persistentVolumeName"`
}

// PersistenceConfigurationsInput is an input type that accepts PersistenceConfigurationsArgs and PersistenceConfigurationsOutput values.
// You can construct a concrete instance of `PersistenceConfigurationsInput` via:
//
//	PersistenceConfigurationsArgs{...}
type PersistenceConfigurationsInput interface {
	pulumi.Input

	ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput
	ToPersistenceConfigurationsOutputWithContext(context.Context) PersistenceConfigurationsOutput
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsArgs struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName pulumi.StringInput `pulumi:"persistentVolumeName"`
}

func (PersistenceConfigurationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurations)(nil)).Elem()
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput {
	return i.ToPersistenceConfigurationsOutputWithContext(context.Background())
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsOutputWithContext(ctx context.Context) PersistenceConfigurationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsOutput)
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return i.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsOutput).ToPersistenceConfigurationsPtrOutputWithContext(ctx)
}

// PersistenceConfigurationsPtrInput is an input type that accepts PersistenceConfigurationsArgs, PersistenceConfigurationsPtr and PersistenceConfigurationsPtrOutput values.
// You can construct a concrete instance of `PersistenceConfigurationsPtrInput` via:
//
//	        PersistenceConfigurationsArgs{...}
//
//	or:
//
//	        nil
type PersistenceConfigurationsPtrInput interface {
	pulumi.Input

	ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput
	ToPersistenceConfigurationsPtrOutputWithContext(context.Context) PersistenceConfigurationsPtrOutput
}

type persistenceConfigurationsPtrType PersistenceConfigurationsArgs

func PersistenceConfigurationsPtr(v *PersistenceConfigurationsArgs) PersistenceConfigurationsPtrInput {
	return (*persistenceConfigurationsPtrType)(v)
}

func (*persistenceConfigurationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurations)(nil)).Elem()
}

func (i *persistenceConfigurationsPtrType) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return i.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (i *persistenceConfigurationsPtrType) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsPtrOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurations)(nil)).Elem()
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput {
	return o
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsOutputWithContext(ctx context.Context) PersistenceConfigurationsOutput {
	return o
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return o.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistenceConfigurations) *PersistenceConfigurations {
		return &v
	}).(PersistenceConfigurationsPtrOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsOutput) PersistentVolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigurations) string { return v.PersistentVolumeName }).(pulumi.StringOutput)
}

type PersistenceConfigurationsPtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurations)(nil)).Elem()
}

func (o PersistenceConfigurationsPtrOutput) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return o
}

func (o PersistenceConfigurationsPtrOutput) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return o
}

func (o PersistenceConfigurationsPtrOutput) Elem() PersistenceConfigurationsOutput {
	return o.ApplyT(func(v *PersistenceConfigurations) PersistenceConfigurations {
		if v != nil {
			return *v
		}
		var ret PersistenceConfigurations
		return ret
	}).(PersistenceConfigurationsOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsPtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfigurations) *string {
		if v == nil {
			return nil
		}
		return &v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsResponse struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName string `pulumi:"persistentVolumeName"`
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsResponseOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurationsResponse)(nil)).Elem()
}

func (o PersistenceConfigurationsResponseOutput) ToPersistenceConfigurationsResponseOutput() PersistenceConfigurationsResponseOutput {
	return o
}

func (o PersistenceConfigurationsResponseOutput) ToPersistenceConfigurationsResponseOutputWithContext(ctx context.Context) PersistenceConfigurationsResponseOutput {
	return o
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsResponseOutput) PersistentVolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigurationsResponse) string { return v.PersistentVolumeName }).(pulumi.StringOutput)
}

type PersistenceConfigurationsResponsePtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurationsResponse)(nil)).Elem()
}

func (o PersistenceConfigurationsResponsePtrOutput) ToPersistenceConfigurationsResponsePtrOutput() PersistenceConfigurationsResponsePtrOutput {
	return o
}

func (o PersistenceConfigurationsResponsePtrOutput) ToPersistenceConfigurationsResponsePtrOutputWithContext(ctx context.Context) PersistenceConfigurationsResponsePtrOutput {
	return o
}

func (o PersistenceConfigurationsResponsePtrOutput) Elem() PersistenceConfigurationsResponseOutput {
	return o.ApplyT(func(v *PersistenceConfigurationsResponse) PersistenceConfigurationsResponse {
		if v != nil {
			return *v
		}
		var ret PersistenceConfigurationsResponse
		return ret
	}).(PersistenceConfigurationsResponseOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsResponsePtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfigurationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// Pipeline Info.
type Pipeline struct {
	// Reference to exporters configured for the pipeline.
	Exporters []string `pulumi:"exporters"`
	// Name of the pipeline.
	Name string `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors []string `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers []string `pulumi:"receivers"`
	// The type of pipeline
	Type string `pulumi:"type"`
}

// PipelineInput is an input type that accepts PipelineArgs and PipelineOutput values.
// You can construct a concrete instance of `PipelineInput` via:
//
//	PipelineArgs{...}
type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(context.Context) PipelineOutput
}

// Pipeline Info.
type PipelineArgs struct {
	// Reference to exporters configured for the pipeline.
	Exporters pulumi.StringArrayInput `pulumi:"exporters"`
	// Name of the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors pulumi.StringArrayInput `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers pulumi.StringArrayInput `pulumi:"receivers"`
	// The type of pipeline
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil)).Elem()
}

func (i PipelineArgs) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i PipelineArgs) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// Pipeline Info.
type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// Reference to exporters configured for the pipeline.
func (o PipelineOutput) Exporters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Exporters }).(pulumi.StringArrayOutput)
}

// Name of the pipeline.
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Pipeline) string { return v.Name }).(pulumi.StringOutput)
}

// Reference to processors configured for the pipeline.
func (o PipelineOutput) Processors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Processors }).(pulumi.StringArrayOutput)
}

// Reference to receivers configured for the pipeline.
func (o PipelineOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Receivers }).(pulumi.StringArrayOutput)
}

// The type of pipeline
func (o PipelineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Pipeline) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Pipeline {
		return vs[0].([]Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

// Pipeline Info.
type PipelineResponse struct {
	// Reference to exporters configured for the pipeline.
	Exporters []string `pulumi:"exporters"`
	// Name of the pipeline.
	Name string `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors []string `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers []string `pulumi:"receivers"`
	// The type of pipeline
	Type string `pulumi:"type"`
}

// Pipeline Info.
type PipelineResponseOutput struct{ *pulumi.OutputState }

func (PipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponse)(nil)).Elem()
}

func (o PipelineResponseOutput) ToPipelineResponseOutput() PipelineResponseOutput {
	return o
}

func (o PipelineResponseOutput) ToPipelineResponseOutputWithContext(ctx context.Context) PipelineResponseOutput {
	return o
}

// Reference to exporters configured for the pipeline.
func (o PipelineResponseOutput) Exporters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Exporters }).(pulumi.StringArrayOutput)
}

// Name of the pipeline.
func (o PipelineResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Reference to processors configured for the pipeline.
func (o PipelineResponseOutput) Processors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Processors }).(pulumi.StringArrayOutput)
}

// Reference to receivers configured for the pipeline.
func (o PipelineResponseOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Receivers }).(pulumi.StringArrayOutput)
}

// The type of pipeline
func (o PipelineResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineResponse)(nil)).Elem()
}

func (o PipelineResponseArrayOutput) ToPipelineResponseArrayOutput() PipelineResponseArrayOutput {
	return o
}

func (o PipelineResponseArrayOutput) ToPipelineResponseArrayOutputWithContext(ctx context.Context) PipelineResponseArrayOutput {
	return o
}

func (o PipelineResponseArrayOutput) Index(i pulumi.IntInput) PipelineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineResponse {
		return vs[0].([]PipelineResponse)[vs[1].(int)]
	}).(PipelineResponseOutput)
}

// Properties of the private endpoint connection.
type PrivateEndpointConnectionPropertiesResponse struct {
	// The group ids for the private endpoint resource.
	GroupIds []string `pulumi:"groupIds"`
	// The private endpoint resource.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Properties of the private endpoint connection.
type PrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutput() PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponseOutput) ToPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutput() PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ToPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() PrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) PrivateEndpointConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointConnectionPropertiesResponse
		return ret
	}).(PrivateEndpointConnectionPropertiesResponseOutput)
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The private endpoint resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *PrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return &v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The private endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for private endpoint.
	Id string `pulumi:"id"`
}

// The private endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for private endpoint.
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStateResponse
		return ret
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Processor Info.
type Processor struct {
	// Batch processor configurations.
	Batch *BatchProcessor `pulumi:"batch"`
	// The name of processor.
	Name string `pulumi:"name"`
	// The type of processor.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Processor
func (val *Processor) Defaults() *Processor {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Batch = tmp.Batch.Defaults()

	return &tmp
}

// ProcessorInput is an input type that accepts ProcessorArgs and ProcessorOutput values.
// You can construct a concrete instance of `ProcessorInput` via:
//
//	ProcessorArgs{...}
type ProcessorInput interface {
	pulumi.Input

	ToProcessorOutput() ProcessorOutput
	ToProcessorOutputWithContext(context.Context) ProcessorOutput
}

// Processor Info.
type ProcessorArgs struct {
	// Batch processor configurations.
	Batch BatchProcessorPtrInput `pulumi:"batch"`
	// The name of processor.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of processor.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ProcessorArgs
func (val *ProcessorArgs) Defaults() *ProcessorArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Processor)(nil)).Elem()
}

func (i ProcessorArgs) ToProcessorOutput() ProcessorOutput {
	return i.ToProcessorOutputWithContext(context.Background())
}

func (i ProcessorArgs) ToProcessorOutputWithContext(ctx context.Context) ProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorOutput)
}

// ProcessorArrayInput is an input type that accepts ProcessorArray and ProcessorArrayOutput values.
// You can construct a concrete instance of `ProcessorArrayInput` via:
//
//	ProcessorArray{ ProcessorArgs{...} }
type ProcessorArrayInput interface {
	pulumi.Input

	ToProcessorArrayOutput() ProcessorArrayOutput
	ToProcessorArrayOutputWithContext(context.Context) ProcessorArrayOutput
}

type ProcessorArray []ProcessorInput

func (ProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Processor)(nil)).Elem()
}

func (i ProcessorArray) ToProcessorArrayOutput() ProcessorArrayOutput {
	return i.ToProcessorArrayOutputWithContext(context.Background())
}

func (i ProcessorArray) ToProcessorArrayOutputWithContext(ctx context.Context) ProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorArrayOutput)
}

// Processor Info.
type ProcessorOutput struct{ *pulumi.OutputState }

func (ProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Processor)(nil)).Elem()
}

func (o ProcessorOutput) ToProcessorOutput() ProcessorOutput {
	return o
}

func (o ProcessorOutput) ToProcessorOutputWithContext(ctx context.Context) ProcessorOutput {
	return o
}

// Batch processor configurations.
func (o ProcessorOutput) Batch() BatchProcessorPtrOutput {
	return o.ApplyT(func(v Processor) *BatchProcessor { return v.Batch }).(BatchProcessorPtrOutput)
}

// The name of processor.
func (o ProcessorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Processor) string { return v.Name }).(pulumi.StringOutput)
}

// The type of processor.
func (o ProcessorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Processor) string { return v.Type }).(pulumi.StringOutput)
}

type ProcessorArrayOutput struct{ *pulumi.OutputState }

func (ProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Processor)(nil)).Elem()
}

func (o ProcessorArrayOutput) ToProcessorArrayOutput() ProcessorArrayOutput {
	return o
}

func (o ProcessorArrayOutput) ToProcessorArrayOutputWithContext(ctx context.Context) ProcessorArrayOutput {
	return o
}

func (o ProcessorArrayOutput) Index(i pulumi.IntInput) ProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Processor {
		return vs[0].([]Processor)[vs[1].(int)]
	}).(ProcessorOutput)
}

// Processor Info.
type ProcessorResponse struct {
	// Batch processor configurations.
	Batch *BatchProcessorResponse `pulumi:"batch"`
	// The name of processor.
	Name string `pulumi:"name"`
	// The type of processor.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ProcessorResponse
func (val *ProcessorResponse) Defaults() *ProcessorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Batch = tmp.Batch.Defaults()

	return &tmp
}

// Processor Info.
type ProcessorResponseOutput struct{ *pulumi.OutputState }

func (ProcessorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcessorResponse)(nil)).Elem()
}

func (o ProcessorResponseOutput) ToProcessorResponseOutput() ProcessorResponseOutput {
	return o
}

func (o ProcessorResponseOutput) ToProcessorResponseOutputWithContext(ctx context.Context) ProcessorResponseOutput {
	return o
}

// Batch processor configurations.
func (o ProcessorResponseOutput) Batch() BatchProcessorResponsePtrOutput {
	return o.ApplyT(func(v ProcessorResponse) *BatchProcessorResponse { return v.Batch }).(BatchProcessorResponsePtrOutput)
}

// The name of processor.
func (o ProcessorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcessorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of processor.
func (o ProcessorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcessorResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ProcessorResponseArrayOutput struct{ *pulumi.OutputState }

func (ProcessorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcessorResponse)(nil)).Elem()
}

func (o ProcessorResponseArrayOutput) ToProcessorResponseArrayOutput() ProcessorResponseArrayOutput {
	return o
}

func (o ProcessorResponseArrayOutput) ToProcessorResponseArrayOutputWithContext(ctx context.Context) ProcessorResponseArrayOutput {
	return o
}

func (o ProcessorResponseArrayOutput) Index(i pulumi.IntInput) ProcessorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcessorResponse {
		return vs[0].([]ProcessorResponse)[vs[1].(int)]
	}).(ProcessorResponseOutput)
}

// Receiver Info.
type Receiver struct {
	// The name of receiver.
	Name string `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp *OtlpReceiver `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog *SyslogReceiver `pulumi:"syslog"`
	// The type of receiver.
	Type string `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp *UdpReceiver `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for Receiver
func (val *Receiver) Defaults() *Receiver {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Syslog = tmp.Syslog.Defaults()

	tmp.Udp = tmp.Udp.Defaults()

	return &tmp
}

// ReceiverInput is an input type that accepts ReceiverArgs and ReceiverOutput values.
// You can construct a concrete instance of `ReceiverInput` via:
//
//	ReceiverArgs{...}
type ReceiverInput interface {
	pulumi.Input

	ToReceiverOutput() ReceiverOutput
	ToReceiverOutputWithContext(context.Context) ReceiverOutput
}

// Receiver Info.
type ReceiverArgs struct {
	// The name of receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp OtlpReceiverPtrInput `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog SyslogReceiverPtrInput `pulumi:"syslog"`
	// The type of receiver.
	Type pulumi.StringInput `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp UdpReceiverPtrInput `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for ReceiverArgs
func (val *ReceiverArgs) Defaults() *ReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Receiver)(nil)).Elem()
}

func (i ReceiverArgs) ToReceiverOutput() ReceiverOutput {
	return i.ToReceiverOutputWithContext(context.Background())
}

func (i ReceiverArgs) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverOutput)
}

// ReceiverArrayInput is an input type that accepts ReceiverArray and ReceiverArrayOutput values.
// You can construct a concrete instance of `ReceiverArrayInput` via:
//
//	ReceiverArray{ ReceiverArgs{...} }
type ReceiverArrayInput interface {
	pulumi.Input

	ToReceiverArrayOutput() ReceiverArrayOutput
	ToReceiverArrayOutputWithContext(context.Context) ReceiverArrayOutput
}

type ReceiverArray []ReceiverInput

func (ReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Receiver)(nil)).Elem()
}

func (i ReceiverArray) ToReceiverArrayOutput() ReceiverArrayOutput {
	return i.ToReceiverArrayOutputWithContext(context.Background())
}

func (i ReceiverArray) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverArrayOutput)
}

// Receiver Info.
type ReceiverOutput struct{ *pulumi.OutputState }

func (ReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Receiver)(nil)).Elem()
}

func (o ReceiverOutput) ToReceiverOutput() ReceiverOutput {
	return o
}

func (o ReceiverOutput) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return o
}

// The name of receiver.
func (o ReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Receiver) string { return v.Name }).(pulumi.StringOutput)
}

// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
func (o ReceiverOutput) Otlp() OtlpReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *OtlpReceiver { return v.Otlp }).(OtlpReceiverPtrOutput)
}

// Syslog configurations. This field is mandatory for syslog type receivers.
func (o ReceiverOutput) Syslog() SyslogReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *SyslogReceiver { return v.Syslog }).(SyslogReceiverPtrOutput)
}

// The type of receiver.
func (o ReceiverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Receiver) string { return v.Type }).(pulumi.StringOutput)
}

// UDP receiver configurations. This field is mandatory for UDP receivers.
func (o ReceiverOutput) Udp() UdpReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *UdpReceiver { return v.Udp }).(UdpReceiverPtrOutput)
}

type ReceiverArrayOutput struct{ *pulumi.OutputState }

func (ReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Receiver)(nil)).Elem()
}

func (o ReceiverArrayOutput) ToReceiverArrayOutput() ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) Index(i pulumi.IntInput) ReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Receiver {
		return vs[0].([]Receiver)[vs[1].(int)]
	}).(ReceiverOutput)
}

// Receiver Info.
type ReceiverResponse struct {
	// The name of receiver.
	Name string `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp *OtlpReceiverResponse `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog *SyslogReceiverResponse `pulumi:"syslog"`
	// The type of receiver.
	Type string `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp *UdpReceiverResponse `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for ReceiverResponse
func (val *ReceiverResponse) Defaults() *ReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Syslog = tmp.Syslog.Defaults()

	tmp.Udp = tmp.Udp.Defaults()

	return &tmp
}

// Receiver Info.
type ReceiverResponseOutput struct{ *pulumi.OutputState }

func (ReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverResponse)(nil)).Elem()
}

func (o ReceiverResponseOutput) ToReceiverResponseOutput() ReceiverResponseOutput {
	return o
}

func (o ReceiverResponseOutput) ToReceiverResponseOutputWithContext(ctx context.Context) ReceiverResponseOutput {
	return o
}

// The name of receiver.
func (o ReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
func (o ReceiverResponseOutput) Otlp() OtlpReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *OtlpReceiverResponse { return v.Otlp }).(OtlpReceiverResponsePtrOutput)
}

// Syslog configurations. This field is mandatory for syslog type receivers.
func (o ReceiverResponseOutput) Syslog() SyslogReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *SyslogReceiverResponse { return v.Syslog }).(SyslogReceiverResponsePtrOutput)
}

// The type of receiver.
func (o ReceiverResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReceiverResponse) string { return v.Type }).(pulumi.StringOutput)
}

// UDP receiver configurations. This field is mandatory for UDP receivers.
func (o ReceiverResponseOutput) Udp() UdpReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *UdpReceiverResponse { return v.Udp }).(UdpReceiverResponsePtrOutput)
}

type ReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverResponse)(nil)).Elem()
}

func (o ReceiverResponseArrayOutput) ToReceiverResponseArrayOutput() ReceiverResponseArrayOutput {
	return o
}

func (o ReceiverResponseArrayOutput) ToReceiverResponseArrayOutputWithContext(ctx context.Context) ReceiverResponseArrayOutput {
	return o
}

func (o ReceiverResponseArrayOutput) Index(i pulumi.IntInput) ReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverResponse {
		return vs[0].([]ReceiverResponse)[vs[1].(int)]
	}).(ReceiverResponseOutput)
}

// Record map for schema in azure monitor.
type RecordMap struct {
	// Record Map Key.
	From string `pulumi:"from"`
	// Record Map Value.
	To string `pulumi:"to"`
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

// Record map for schema in azure monitor.
type RecordMapArgs struct {
	// Record Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Record Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (RecordMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMap)(nil)).Elem()
}

func (i RecordMapArgs) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMapArgs) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

// RecordMapArrayInput is an input type that accepts RecordMapArray and RecordMapArrayOutput values.
// You can construct a concrete instance of `RecordMapArrayInput` via:
//
//	RecordMapArray{ RecordMapArgs{...} }
type RecordMapArrayInput interface {
	pulumi.Input

	ToRecordMapArrayOutput() RecordMapArrayOutput
	ToRecordMapArrayOutputWithContext(context.Context) RecordMapArrayOutput
}

type RecordMapArray []RecordMapInput

func (RecordMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMap)(nil)).Elem()
}

func (i RecordMapArray) ToRecordMapArrayOutput() RecordMapArrayOutput {
	return i.ToRecordMapArrayOutputWithContext(context.Background())
}

func (i RecordMapArray) ToRecordMapArrayOutputWithContext(ctx context.Context) RecordMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapArrayOutput)
}

// Record map for schema in azure monitor.
type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMap)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

// Record Map Key.
func (o RecordMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMap) string { return v.From }).(pulumi.StringOutput)
}

// Record Map Value.
func (o RecordMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMap) string { return v.To }).(pulumi.StringOutput)
}

type RecordMapArrayOutput struct{ *pulumi.OutputState }

func (RecordMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMap)(nil)).Elem()
}

func (o RecordMapArrayOutput) ToRecordMapArrayOutput() RecordMapArrayOutput {
	return o
}

func (o RecordMapArrayOutput) ToRecordMapArrayOutputWithContext(ctx context.Context) RecordMapArrayOutput {
	return o
}

func (o RecordMapArrayOutput) Index(i pulumi.IntInput) RecordMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordMap {
		return vs[0].([]RecordMap)[vs[1].(int)]
	}).(RecordMapOutput)
}

// Record map for schema in azure monitor.
type RecordMapResponse struct {
	// Record Map Key.
	From string `pulumi:"from"`
	// Record Map Value.
	To string `pulumi:"to"`
}

// Record map for schema in azure monitor.
type RecordMapResponseOutput struct{ *pulumi.OutputState }

func (RecordMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMapResponse)(nil)).Elem()
}

func (o RecordMapResponseOutput) ToRecordMapResponseOutput() RecordMapResponseOutput {
	return o
}

func (o RecordMapResponseOutput) ToRecordMapResponseOutputWithContext(ctx context.Context) RecordMapResponseOutput {
	return o
}

// Record Map Key.
func (o RecordMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Record Map Value.
func (o RecordMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type RecordMapResponseArrayOutput struct{ *pulumi.OutputState }

func (RecordMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMapResponse)(nil)).Elem()
}

func (o RecordMapResponseArrayOutput) ToRecordMapResponseArrayOutput() RecordMapResponseArrayOutput {
	return o
}

func (o RecordMapResponseArrayOutput) ToRecordMapResponseArrayOutputWithContext(ctx context.Context) RecordMapResponseArrayOutput {
	return o
}

func (o RecordMapResponseArrayOutput) Index(i pulumi.IntInput) RecordMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordMapResponse {
		return vs[0].([]RecordMapResponse)[vs[1].(int)]
	}).(RecordMapResponseOutput)
}

// Resource map for schema in azure monitor.
type ResourceMap struct {
	// Resource Map Key.
	From string `pulumi:"from"`
	// Resource Map Value.
	To string `pulumi:"to"`
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

// Resource map for schema in azure monitor.
type ResourceMapArgs struct {
	// Resource Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Resource Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (ResourceMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMap)(nil)).Elem()
}

func (i ResourceMapArgs) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMapArgs) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

// ResourceMapArrayInput is an input type that accepts ResourceMapArray and ResourceMapArrayOutput values.
// You can construct a concrete instance of `ResourceMapArrayInput` via:
//
//	ResourceMapArray{ ResourceMapArgs{...} }
type ResourceMapArrayInput interface {
	pulumi.Input

	ToResourceMapArrayOutput() ResourceMapArrayOutput
	ToResourceMapArrayOutputWithContext(context.Context) ResourceMapArrayOutput
}

type ResourceMapArray []ResourceMapInput

func (ResourceMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMap)(nil)).Elem()
}

func (i ResourceMapArray) ToResourceMapArrayOutput() ResourceMapArrayOutput {
	return i.ToResourceMapArrayOutputWithContext(context.Background())
}

func (i ResourceMapArray) ToResourceMapArrayOutputWithContext(ctx context.Context) ResourceMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapArrayOutput)
}

// Resource map for schema in azure monitor.
type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMap)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

// Resource Map Key.
func (o ResourceMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMap) string { return v.From }).(pulumi.StringOutput)
}

// Resource Map Value.
func (o ResourceMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMap) string { return v.To }).(pulumi.StringOutput)
}

type ResourceMapArrayOutput struct{ *pulumi.OutputState }

func (ResourceMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMap)(nil)).Elem()
}

func (o ResourceMapArrayOutput) ToResourceMapArrayOutput() ResourceMapArrayOutput {
	return o
}

func (o ResourceMapArrayOutput) ToResourceMapArrayOutputWithContext(ctx context.Context) ResourceMapArrayOutput {
	return o
}

func (o ResourceMapArrayOutput) Index(i pulumi.IntInput) ResourceMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMap {
		return vs[0].([]ResourceMap)[vs[1].(int)]
	}).(ResourceMapOutput)
}

// Resource map for schema in azure monitor.
type ResourceMapResponse struct {
	// Resource Map Key.
	From string `pulumi:"from"`
	// Resource Map Value.
	To string `pulumi:"to"`
}

// Resource map for schema in azure monitor.
type ResourceMapResponseOutput struct{ *pulumi.OutputState }

func (ResourceMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMapResponse)(nil)).Elem()
}

func (o ResourceMapResponseOutput) ToResourceMapResponseOutput() ResourceMapResponseOutput {
	return o
}

func (o ResourceMapResponseOutput) ToResourceMapResponseOutputWithContext(ctx context.Context) ResourceMapResponseOutput {
	return o
}

// Resource Map Key.
func (o ResourceMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Resource Map Value.
func (o ResourceMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type ResourceMapResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMapResponse)(nil)).Elem()
}

func (o ResourceMapResponseArrayOutput) ToResourceMapResponseArrayOutput() ResourceMapResponseArrayOutput {
	return o
}

func (o ResourceMapResponseArrayOutput) ToResourceMapResponseArrayOutputWithContext(ctx context.Context) ResourceMapResponseArrayOutput {
	return o
}

func (o ResourceMapResponseArrayOutput) Index(i pulumi.IntInput) ResourceMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMapResponse {
		return vs[0].([]ResourceMapResponse)[vs[1].(int)]
	}).(ResourceMapResponseOutput)
}

// Schema map for azure monitor for logs.
type SchemaMap struct {
	// Record Map.
	RecordMap []RecordMap `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap []ResourceMap `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap []ScopeMap `pulumi:"scopeMap"`
}

// SchemaMapInput is an input type that accepts SchemaMap and SchemaMapOutput values.
// You can construct a concrete instance of `SchemaMapInput` via:
//
//	SchemaMap{ "key": SchemaArgs{...} }
type SchemaMapInput interface {
	pulumi.Input

	ToSchemaMapOutput() SchemaMapOutput
	ToSchemaMapOutputWithContext(context.Context) SchemaMapOutput
}

// Schema map for azure monitor for logs.
type SchemaMapArgs struct {
	// Record Map.
	RecordMap RecordMapArrayInput `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap ResourceMapArrayInput `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap ScopeMapArrayInput `pulumi:"scopeMap"`
}

func (SchemaMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMap)(nil)).Elem()
}

func (i SchemaMapArgs) ToSchemaMapOutput() SchemaMapOutput {
	return i.ToSchemaMapOutputWithContext(context.Background())
}

func (i SchemaMapArgs) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput)
}

func (i SchemaMapArgs) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return i.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (i SchemaMapArgs) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput).ToSchemaMapPtrOutputWithContext(ctx)
}

// SchemaMapPtrInput is an input type that accepts SchemaMapArgs, SchemaMapPtr and SchemaMapPtrOutput values.
// You can construct a concrete instance of `SchemaMapPtrInput` via:
//
//	        SchemaMapArgs{...}
//
//	or:
//
//	        nil
type SchemaMapPtrInput interface {
	pulumi.Input

	ToSchemaMapPtrOutput() SchemaMapPtrOutput
	ToSchemaMapPtrOutputWithContext(context.Context) SchemaMapPtrOutput
}

type schemaMapPtrType SchemaMapArgs

func SchemaMapPtr(v *SchemaMapArgs) SchemaMapPtrInput {
	return (*schemaMapPtrType)(v)
}

func (*schemaMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMap)(nil)).Elem()
}

func (i *schemaMapPtrType) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return i.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (i *schemaMapPtrType) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapPtrOutput)
}

// Schema map for azure monitor for logs.
type SchemaMapOutput struct{ *pulumi.OutputState }

func (SchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMap)(nil)).Elem()
}

func (o SchemaMapOutput) ToSchemaMapOutput() SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return o.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (o SchemaMapOutput) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaMap) *SchemaMap {
		return &v
	}).(SchemaMapPtrOutput)
}

// Record Map.
func (o SchemaMapOutput) RecordMap() RecordMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []RecordMap { return v.RecordMap }).(RecordMapArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapOutput) ResourceMap() ResourceMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []ResourceMap { return v.ResourceMap }).(ResourceMapArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapOutput) ScopeMap() ScopeMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []ScopeMap { return v.ScopeMap }).(ScopeMapArrayOutput)
}

type SchemaMapPtrOutput struct{ *pulumi.OutputState }

func (SchemaMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMap)(nil)).Elem()
}

func (o SchemaMapPtrOutput) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return o
}

func (o SchemaMapPtrOutput) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return o
}

func (o SchemaMapPtrOutput) Elem() SchemaMapOutput {
	return o.ApplyT(func(v *SchemaMap) SchemaMap {
		if v != nil {
			return *v
		}
		var ret SchemaMap
		return ret
	}).(SchemaMapOutput)
}

// Record Map.
func (o SchemaMapPtrOutput) RecordMap() RecordMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []RecordMap {
		if v == nil {
			return nil
		}
		return v.RecordMap
	}).(RecordMapArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapPtrOutput) ResourceMap() ResourceMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []ResourceMap {
		if v == nil {
			return nil
		}
		return v.ResourceMap
	}).(ResourceMapArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapPtrOutput) ScopeMap() ScopeMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []ScopeMap {
		if v == nil {
			return nil
		}
		return v.ScopeMap
	}).(ScopeMapArrayOutput)
}

// Schema map for azure monitor for logs.
type SchemaMapResponse struct {
	// Record Map.
	RecordMap []RecordMapResponse `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap []ResourceMapResponse `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap []ScopeMapResponse `pulumi:"scopeMap"`
}

// Schema map for azure monitor for logs.
type SchemaMapResponseOutput struct{ *pulumi.OutputState }

func (SchemaMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMapResponse)(nil)).Elem()
}

func (o SchemaMapResponseOutput) ToSchemaMapResponseOutput() SchemaMapResponseOutput {
	return o
}

func (o SchemaMapResponseOutput) ToSchemaMapResponseOutputWithContext(ctx context.Context) SchemaMapResponseOutput {
	return o
}

// Record Map.
func (o SchemaMapResponseOutput) RecordMap() RecordMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []RecordMapResponse { return v.RecordMap }).(RecordMapResponseArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapResponseOutput) ResourceMap() ResourceMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []ResourceMapResponse { return v.ResourceMap }).(ResourceMapResponseArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapResponseOutput) ScopeMap() ScopeMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []ScopeMapResponse { return v.ScopeMap }).(ScopeMapResponseArrayOutput)
}

type SchemaMapResponsePtrOutput struct{ *pulumi.OutputState }

func (SchemaMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMapResponse)(nil)).Elem()
}

func (o SchemaMapResponsePtrOutput) ToSchemaMapResponsePtrOutput() SchemaMapResponsePtrOutput {
	return o
}

func (o SchemaMapResponsePtrOutput) ToSchemaMapResponsePtrOutputWithContext(ctx context.Context) SchemaMapResponsePtrOutput {
	return o
}

func (o SchemaMapResponsePtrOutput) Elem() SchemaMapResponseOutput {
	return o.ApplyT(func(v *SchemaMapResponse) SchemaMapResponse {
		if v != nil {
			return *v
		}
		var ret SchemaMapResponse
		return ret
	}).(SchemaMapResponseOutput)
}

// Record Map.
func (o SchemaMapResponsePtrOutput) RecordMap() RecordMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []RecordMapResponse {
		if v == nil {
			return nil
		}
		return v.RecordMap
	}).(RecordMapResponseArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapResponsePtrOutput) ResourceMap() ResourceMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []ResourceMapResponse {
		if v == nil {
			return nil
		}
		return v.ResourceMap
	}).(ResourceMapResponseArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapResponsePtrOutput) ScopeMap() ScopeMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []ScopeMapResponse {
		if v == nil {
			return nil
		}
		return v.ScopeMap
	}).(ScopeMapResponseArrayOutput)
}

// Scope map for schema in azure monitor.
type ScopeMap struct {
	// Scope Map Key.
	From string `pulumi:"from"`
	// Scope Map Value.
	To string `pulumi:"to"`
}

// ScopeMapInput is an input type that accepts ScopeMap and ScopeMapOutput values.
// You can construct a concrete instance of `ScopeMapInput` via:
//
//	ScopeMap{ "key": ScopeArgs{...} }
type ScopeMapInput interface {
	pulumi.Input

	ToScopeMapOutput() ScopeMapOutput
	ToScopeMapOutputWithContext(context.Context) ScopeMapOutput
}

// Scope map for schema in azure monitor.
type ScopeMapArgs struct {
	// Scope Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Scope Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (ScopeMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMap)(nil)).Elem()
}

func (i ScopeMapArgs) ToScopeMapOutput() ScopeMapOutput {
	return i.ToScopeMapOutputWithContext(context.Background())
}

func (i ScopeMapArgs) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeMapOutput)
}

// ScopeMapArrayInput is an input type that accepts ScopeMapArray and ScopeMapArrayOutput values.
// You can construct a concrete instance of `ScopeMapArrayInput` via:
//
//	ScopeMapArray{ ScopeMapArgs{...} }
type ScopeMapArrayInput interface {
	pulumi.Input

	ToScopeMapArrayOutput() ScopeMapArrayOutput
	ToScopeMapArrayOutputWithContext(context.Context) ScopeMapArrayOutput
}

type ScopeMapArray []ScopeMapInput

func (ScopeMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMap)(nil)).Elem()
}

func (i ScopeMapArray) ToScopeMapArrayOutput() ScopeMapArrayOutput {
	return i.ToScopeMapArrayOutputWithContext(context.Background())
}

func (i ScopeMapArray) ToScopeMapArrayOutputWithContext(ctx context.Context) ScopeMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeMapArrayOutput)
}

// Scope map for schema in azure monitor.
type ScopeMapOutput struct{ *pulumi.OutputState }

func (ScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMap)(nil)).Elem()
}

func (o ScopeMapOutput) ToScopeMapOutput() ScopeMapOutput {
	return o
}

func (o ScopeMapOutput) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return o
}

// Scope Map Key.
func (o ScopeMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMap) string { return v.From }).(pulumi.StringOutput)
}

// Scope Map Value.
func (o ScopeMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMap) string { return v.To }).(pulumi.StringOutput)
}

type ScopeMapArrayOutput struct{ *pulumi.OutputState }

func (ScopeMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMap)(nil)).Elem()
}

func (o ScopeMapArrayOutput) ToScopeMapArrayOutput() ScopeMapArrayOutput {
	return o
}

func (o ScopeMapArrayOutput) ToScopeMapArrayOutputWithContext(ctx context.Context) ScopeMapArrayOutput {
	return o
}

func (o ScopeMapArrayOutput) Index(i pulumi.IntInput) ScopeMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeMap {
		return vs[0].([]ScopeMap)[vs[1].(int)]
	}).(ScopeMapOutput)
}

// Scope map for schema in azure monitor.
type ScopeMapResponse struct {
	// Scope Map Key.
	From string `pulumi:"from"`
	// Scope Map Value.
	To string `pulumi:"to"`
}

// Scope map for schema in azure monitor.
type ScopeMapResponseOutput struct{ *pulumi.OutputState }

func (ScopeMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMapResponse)(nil)).Elem()
}

func (o ScopeMapResponseOutput) ToScopeMapResponseOutput() ScopeMapResponseOutput {
	return o
}

func (o ScopeMapResponseOutput) ToScopeMapResponseOutputWithContext(ctx context.Context) ScopeMapResponseOutput {
	return o
}

// Scope Map Key.
func (o ScopeMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Scope Map Value.
func (o ScopeMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type ScopeMapResponseArrayOutput struct{ *pulumi.OutputState }

func (ScopeMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMapResponse)(nil)).Elem()
}

func (o ScopeMapResponseArrayOutput) ToScopeMapResponseArrayOutput() ScopeMapResponseArrayOutput {
	return o
}

func (o ScopeMapResponseArrayOutput) ToScopeMapResponseArrayOutputWithContext(ctx context.Context) ScopeMapResponseArrayOutput {
	return o
}

func (o ScopeMapResponseArrayOutput) Index(i pulumi.IntInput) ScopeMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeMapResponse {
		return vs[0].([]ScopeMapResponse)[vs[1].(int)]
	}).(ScopeMapResponseOutput)
}

// Service Info.
type Service struct {
	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurations `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines []Pipeline `pulumi:"pipelines"`
}

// ServiceInput is an input type that accepts ServiceArgs and ServiceOutput values.
// You can construct a concrete instance of `ServiceInput` via:
//
//	ServiceArgs{...}
type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(context.Context) ServiceOutput
}

// Service Info.
type ServiceArgs struct {
	// Persistence options to all pipelines in the instance.
	Persistence PersistenceConfigurationsPtrInput `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines PipelineArrayInput `pulumi:"pipelines"`
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (i ServiceArgs) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i ServiceArgs) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// Service Info.
type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Persistence options to all pipelines in the instance.
func (o ServiceOutput) Persistence() PersistenceConfigurationsPtrOutput {
	return o.ApplyT(func(v Service) *PersistenceConfigurations { return v.Persistence }).(PersistenceConfigurationsPtrOutput)
}

// Pipelines belonging to a given pipeline group.
func (o ServiceOutput) Pipelines() PipelineArrayOutput {
	return o.ApplyT(func(v Service) []Pipeline { return v.Pipelines }).(PipelineArrayOutput)
}

// Service Info.
type ServiceResponse struct {
	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurationsResponse `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines []PipelineResponse `pulumi:"pipelines"`
}

// Service Info.
type ServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResponse)(nil)).Elem()
}

func (o ServiceResponseOutput) ToServiceResponseOutput() ServiceResponseOutput {
	return o
}

func (o ServiceResponseOutput) ToServiceResponseOutputWithContext(ctx context.Context) ServiceResponseOutput {
	return o
}

// Persistence options to all pipelines in the instance.
func (o ServiceResponseOutput) Persistence() PersistenceConfigurationsResponsePtrOutput {
	return o.ApplyT(func(v ServiceResponse) *PersistenceConfigurationsResponse { return v.Persistence }).(PersistenceConfigurationsResponsePtrOutput)
}

// Pipelines belonging to a given pipeline group.
func (o ServiceResponseOutput) Pipelines() PipelineResponseArrayOutput {
	return o.ApplyT(func(v ServiceResponse) []PipelineResponse { return v.Pipelines }).(PipelineResponseArrayOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiver struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol *string `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiver
func (val *SyslogReceiver) Defaults() *SyslogReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "rfc3164"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// SyslogReceiverInput is an input type that accepts SyslogReceiverArgs and SyslogReceiverOutput values.
// You can construct a concrete instance of `SyslogReceiverInput` via:
//
//	SyslogReceiverArgs{...}
type SyslogReceiverInput interface {
	pulumi.Input

	ToSyslogReceiverOutput() SyslogReceiverOutput
	ToSyslogReceiverOutputWithContext(context.Context) SyslogReceiverOutput
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverArgs struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiverArgs
func (val *SyslogReceiverArgs) Defaults() *SyslogReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("rfc3164")
	}
	return &tmp
}
func (SyslogReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiver)(nil)).Elem()
}

func (i SyslogReceiverArgs) ToSyslogReceiverOutput() SyslogReceiverOutput {
	return i.ToSyslogReceiverOutputWithContext(context.Background())
}

func (i SyslogReceiverArgs) ToSyslogReceiverOutputWithContext(ctx context.Context) SyslogReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverOutput)
}

func (i SyslogReceiverArgs) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return i.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (i SyslogReceiverArgs) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverOutput).ToSyslogReceiverPtrOutputWithContext(ctx)
}

// SyslogReceiverPtrInput is an input type that accepts SyslogReceiverArgs, SyslogReceiverPtr and SyslogReceiverPtrOutput values.
// You can construct a concrete instance of `SyslogReceiverPtrInput` via:
//
//	        SyslogReceiverArgs{...}
//
//	or:
//
//	        nil
type SyslogReceiverPtrInput interface {
	pulumi.Input

	ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput
	ToSyslogReceiverPtrOutputWithContext(context.Context) SyslogReceiverPtrOutput
}

type syslogReceiverPtrType SyslogReceiverArgs

func SyslogReceiverPtr(v *SyslogReceiverArgs) SyslogReceiverPtrInput {
	return (*syslogReceiverPtrType)(v)
}

func (*syslogReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiver)(nil)).Elem()
}

func (i *syslogReceiverPtrType) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return i.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (i *syslogReceiverPtrType) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverPtrOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverOutput struct{ *pulumi.OutputState }

func (SyslogReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiver)(nil)).Elem()
}

func (o SyslogReceiverOutput) ToSyslogReceiverOutput() SyslogReceiverOutput {
	return o
}

func (o SyslogReceiverOutput) ToSyslogReceiverOutputWithContext(ctx context.Context) SyslogReceiverOutput {
	return o
}

func (o SyslogReceiverOutput) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return o.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (o SyslogReceiverOutput) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyslogReceiver) *SyslogReceiver {
		return &v
	}).(SyslogReceiverPtrOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogReceiver) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SyslogReceiverPtrOutput struct{ *pulumi.OutputState }

func (SyslogReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiver)(nil)).Elem()
}

func (o SyslogReceiverPtrOutput) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return o
}

func (o SyslogReceiverPtrOutput) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return o
}

func (o SyslogReceiverPtrOutput) Elem() SyslogReceiverOutput {
	return o.ApplyT(func(v *SyslogReceiver) SyslogReceiver {
		if v != nil {
			return *v
		}
		var ret SyslogReceiver
		return ret
	}).(SyslogReceiverOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiver) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverResponse struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol *string `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiverResponse
func (val *SyslogReceiverResponse) Defaults() *SyslogReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "rfc3164"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverResponseOutput struct{ *pulumi.OutputState }

func (SyslogReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiverResponse)(nil)).Elem()
}

func (o SyslogReceiverResponseOutput) ToSyslogReceiverResponseOutput() SyslogReceiverResponseOutput {
	return o
}

func (o SyslogReceiverResponseOutput) ToSyslogReceiverResponseOutputWithContext(ctx context.Context) SyslogReceiverResponseOutput {
	return o
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogReceiverResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SyslogReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (SyslogReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiverResponse)(nil)).Elem()
}

func (o SyslogReceiverResponsePtrOutput) ToSyslogReceiverResponsePtrOutput() SyslogReceiverResponsePtrOutput {
	return o
}

func (o SyslogReceiverResponsePtrOutput) ToSyslogReceiverResponsePtrOutputWithContext(ctx context.Context) SyslogReceiverResponsePtrOutput {
	return o
}

func (o SyslogReceiverResponsePtrOutput) Elem() SyslogReceiverResponseOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) SyslogReceiverResponse {
		if v != nil {
			return *v
		}
		var ret SyslogReceiverResponse
		return ret
	}).(SyslogReceiverResponseOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporter struct {
	// TCP url to export.
	Url string `pulumi:"url"`
}

// TcpExporterInput is an input type that accepts TcpExporterArgs and TcpExporterOutput values.
// You can construct a concrete instance of `TcpExporterInput` via:
//
//	TcpExporterArgs{...}
type TcpExporterInput interface {
	pulumi.Input

	ToTcpExporterOutput() TcpExporterOutput
	ToTcpExporterOutputWithContext(context.Context) TcpExporterOutput
}

// Base exporter using TCP as transport protocol.
type TcpExporterArgs struct {
	// TCP url to export.
	Url pulumi.StringInput `pulumi:"url"`
}

func (TcpExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporter)(nil)).Elem()
}

func (i TcpExporterArgs) ToTcpExporterOutput() TcpExporterOutput {
	return i.ToTcpExporterOutputWithContext(context.Background())
}

func (i TcpExporterArgs) ToTcpExporterOutputWithContext(ctx context.Context) TcpExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterOutput)
}

func (i TcpExporterArgs) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return i.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (i TcpExporterArgs) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterOutput).ToTcpExporterPtrOutputWithContext(ctx)
}

// TcpExporterPtrInput is an input type that accepts TcpExporterArgs, TcpExporterPtr and TcpExporterPtrOutput values.
// You can construct a concrete instance of `TcpExporterPtrInput` via:
//
//	        TcpExporterArgs{...}
//
//	or:
//
//	        nil
type TcpExporterPtrInput interface {
	pulumi.Input

	ToTcpExporterPtrOutput() TcpExporterPtrOutput
	ToTcpExporterPtrOutputWithContext(context.Context) TcpExporterPtrOutput
}

type tcpExporterPtrType TcpExporterArgs

func TcpExporterPtr(v *TcpExporterArgs) TcpExporterPtrInput {
	return (*tcpExporterPtrType)(v)
}

func (*tcpExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporter)(nil)).Elem()
}

func (i *tcpExporterPtrType) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return i.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (i *tcpExporterPtrType) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporterOutput struct{ *pulumi.OutputState }

func (TcpExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporter)(nil)).Elem()
}

func (o TcpExporterOutput) ToTcpExporterOutput() TcpExporterOutput {
	return o
}

func (o TcpExporterOutput) ToTcpExporterOutputWithContext(ctx context.Context) TcpExporterOutput {
	return o
}

func (o TcpExporterOutput) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return o.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (o TcpExporterOutput) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpExporter) *TcpExporter {
		return &v
	}).(TcpExporterPtrOutput)
}

// TCP url to export.
func (o TcpExporterOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v TcpExporter) string { return v.Url }).(pulumi.StringOutput)
}

type TcpExporterPtrOutput struct{ *pulumi.OutputState }

func (TcpExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporter)(nil)).Elem()
}

func (o TcpExporterPtrOutput) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return o
}

func (o TcpExporterPtrOutput) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return o
}

func (o TcpExporterPtrOutput) Elem() TcpExporterOutput {
	return o.ApplyT(func(v *TcpExporter) TcpExporter {
		if v != nil {
			return *v
		}
		var ret TcpExporter
		return ret
	}).(TcpExporterOutput)
}

// TCP url to export.
func (o TcpExporterPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpExporter) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporterResponse struct {
	// TCP url to export.
	Url string `pulumi:"url"`
}

// Base exporter using TCP as transport protocol.
type TcpExporterResponseOutput struct{ *pulumi.OutputState }

func (TcpExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporterResponse)(nil)).Elem()
}

func (o TcpExporterResponseOutput) ToTcpExporterResponseOutput() TcpExporterResponseOutput {
	return o
}

func (o TcpExporterResponseOutput) ToTcpExporterResponseOutputWithContext(ctx context.Context) TcpExporterResponseOutput {
	return o
}

// TCP url to export.
func (o TcpExporterResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v TcpExporterResponse) string { return v.Url }).(pulumi.StringOutput)
}

type TcpExporterResponsePtrOutput struct{ *pulumi.OutputState }

func (TcpExporterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporterResponse)(nil)).Elem()
}

func (o TcpExporterResponsePtrOutput) ToTcpExporterResponsePtrOutput() TcpExporterResponsePtrOutput {
	return o
}

func (o TcpExporterResponsePtrOutput) ToTcpExporterResponsePtrOutputWithContext(ctx context.Context) TcpExporterResponsePtrOutput {
	return o
}

func (o TcpExporterResponsePtrOutput) Elem() TcpExporterResponseOutput {
	return o.ApplyT(func(v *TcpExporterResponse) TcpExporterResponse {
		if v != nil {
			return *v
		}
		var ret TcpExporterResponse
		return ret
	}).(TcpExporterResponseOutput)
}

// TCP url to export.
func (o TcpExporterResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpExporterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiver struct {
	// The encoding of the stream being received.
	Encoding *string `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Max read queue length.
	ReadQueueLength *int `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiver
func (val *UdpReceiver) Defaults() *UdpReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		encoding_ := "nop"
		tmp.Encoding = &encoding_
	}
	if tmp.ReadQueueLength == nil {
		readQueueLength_ := 1000
		tmp.ReadQueueLength = &readQueueLength_
	}
	return &tmp
}

// UdpReceiverInput is an input type that accepts UdpReceiverArgs and UdpReceiverOutput values.
// You can construct a concrete instance of `UdpReceiverInput` via:
//
//	UdpReceiverArgs{...}
type UdpReceiverInput interface {
	pulumi.Input

	ToUdpReceiverOutput() UdpReceiverOutput
	ToUdpReceiverOutputWithContext(context.Context) UdpReceiverOutput
}

// Receiver using UDP as transport protocol.
type UdpReceiverArgs struct {
	// The encoding of the stream being received.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Max read queue length.
	ReadQueueLength pulumi.IntPtrInput `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiverArgs
func (val *UdpReceiverArgs) Defaults() *UdpReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		tmp.Encoding = pulumi.StringPtr("nop")
	}
	if tmp.ReadQueueLength == nil {
		tmp.ReadQueueLength = pulumi.IntPtr(1000)
	}
	return &tmp
}
func (UdpReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiver)(nil)).Elem()
}

func (i UdpReceiverArgs) ToUdpReceiverOutput() UdpReceiverOutput {
	return i.ToUdpReceiverOutputWithContext(context.Background())
}

func (i UdpReceiverArgs) ToUdpReceiverOutputWithContext(ctx context.Context) UdpReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverOutput)
}

func (i UdpReceiverArgs) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return i.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (i UdpReceiverArgs) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverOutput).ToUdpReceiverPtrOutputWithContext(ctx)
}

// UdpReceiverPtrInput is an input type that accepts UdpReceiverArgs, UdpReceiverPtr and UdpReceiverPtrOutput values.
// You can construct a concrete instance of `UdpReceiverPtrInput` via:
//
//	        UdpReceiverArgs{...}
//
//	or:
//
//	        nil
type UdpReceiverPtrInput interface {
	pulumi.Input

	ToUdpReceiverPtrOutput() UdpReceiverPtrOutput
	ToUdpReceiverPtrOutputWithContext(context.Context) UdpReceiverPtrOutput
}

type udpReceiverPtrType UdpReceiverArgs

func UdpReceiverPtr(v *UdpReceiverArgs) UdpReceiverPtrInput {
	return (*udpReceiverPtrType)(v)
}

func (*udpReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiver)(nil)).Elem()
}

func (i *udpReceiverPtrType) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return i.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (i *udpReceiverPtrType) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiverOutput struct{ *pulumi.OutputState }

func (UdpReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiver)(nil)).Elem()
}

func (o UdpReceiverOutput) ToUdpReceiverOutput() UdpReceiverOutput {
	return o
}

func (o UdpReceiverOutput) ToUdpReceiverOutputWithContext(ctx context.Context) UdpReceiverOutput {
	return o
}

func (o UdpReceiverOutput) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return o.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (o UdpReceiverOutput) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UdpReceiver) *UdpReceiver {
		return &v
	}).(UdpReceiverPtrOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UdpReceiver) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v UdpReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Max read queue length.
func (o UdpReceiverOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UdpReceiver) *int { return v.ReadQueueLength }).(pulumi.IntPtrOutput)
}

type UdpReceiverPtrOutput struct{ *pulumi.OutputState }

func (UdpReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiver)(nil)).Elem()
}

func (o UdpReceiverPtrOutput) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return o
}

func (o UdpReceiverPtrOutput) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return o
}

func (o UdpReceiverPtrOutput) Elem() UdpReceiverOutput {
	return o.ApplyT(func(v *UdpReceiver) UdpReceiver {
		if v != nil {
			return *v
		}
		var ret UdpReceiver
		return ret
	}).(UdpReceiverOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Max read queue length.
func (o UdpReceiverPtrOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *int {
		if v == nil {
			return nil
		}
		return v.ReadQueueLength
	}).(pulumi.IntPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiverResponse struct {
	// The encoding of the stream being received.
	Encoding *string `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Max read queue length.
	ReadQueueLength *int `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiverResponse
func (val *UdpReceiverResponse) Defaults() *UdpReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		encoding_ := "nop"
		tmp.Encoding = &encoding_
	}
	if tmp.ReadQueueLength == nil {
		readQueueLength_ := 1000
		tmp.ReadQueueLength = &readQueueLength_
	}
	return &tmp
}

// Receiver using UDP as transport protocol.
type UdpReceiverResponseOutput struct{ *pulumi.OutputState }

func (UdpReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiverResponse)(nil)).Elem()
}

func (o UdpReceiverResponseOutput) ToUdpReceiverResponseOutput() UdpReceiverResponseOutput {
	return o
}

func (o UdpReceiverResponseOutput) ToUdpReceiverResponseOutputWithContext(ctx context.Context) UdpReceiverResponseOutput {
	return o
}

// The encoding of the stream being received.
func (o UdpReceiverResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UdpReceiverResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v UdpReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Max read queue length.
func (o UdpReceiverResponseOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UdpReceiverResponse) *int { return v.ReadQueueLength }).(pulumi.IntPtrOutput)
}

type UdpReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (UdpReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiverResponse)(nil)).Elem()
}

func (o UdpReceiverResponsePtrOutput) ToUdpReceiverResponsePtrOutput() UdpReceiverResponsePtrOutput {
	return o
}

func (o UdpReceiverResponsePtrOutput) ToUdpReceiverResponsePtrOutputWithContext(ctx context.Context) UdpReceiverResponsePtrOutput {
	return o
}

func (o UdpReceiverResponsePtrOutput) Elem() UdpReceiverResponseOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) UdpReceiverResponse {
		if v != nil {
			return *v
		}
		var ret UdpReceiverResponse
		return ret
	}).(UdpReceiverResponseOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverResponsePtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Max read queue length.
func (o UdpReceiverResponsePtrOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReadQueueLength
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigPtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigResponseOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterPtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterResponseOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerPrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerPrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(BatchProcessorOutput{})
	pulumi.RegisterOutputType(BatchProcessorPtrOutput{})
	pulumi.RegisterOutputType(BatchProcessorResponseOutput{})
	pulumi.RegisterOutputType(BatchProcessorResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheConfigurationOutput{})
	pulumi.RegisterOutputType(CacheConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ExporterOutput{})
	pulumi.RegisterOutputType(ExporterArrayOutput{})
	pulumi.RegisterOutputType(ExporterResponseOutput{})
	pulumi.RegisterOutputType(ExporterResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtendedLocationOutput{})
	pulumi.RegisterOutputType(ExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(ExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(IngestionSettingsResponseOutput{})
	pulumi.RegisterOutputType(MetricsResponseOutput{})
	pulumi.RegisterOutputType(MetricsResponsePtrOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteOutput{})
	pulumi.RegisterOutputType(NetworkingRouteArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteResponseOutput{})
	pulumi.RegisterOutputType(NetworkingRouteResponseArrayOutput{})
	pulumi.RegisterOutputType(OtlpReceiverOutput{})
	pulumi.RegisterOutputType(OtlpReceiverPtrOutput{})
	pulumi.RegisterOutputType(OtlpReceiverResponseOutput{})
	pulumi.RegisterOutputType(OtlpReceiverResponsePtrOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsPtrOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsResponseOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineResponseOutput{})
	pulumi.RegisterOutputType(PipelineResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ProcessorOutput{})
	pulumi.RegisterOutputType(ProcessorArrayOutput{})
	pulumi.RegisterOutputType(ProcessorResponseOutput{})
	pulumi.RegisterOutputType(ProcessorResponseArrayOutput{})
	pulumi.RegisterOutputType(ReceiverOutput{})
	pulumi.RegisterOutputType(ReceiverArrayOutput{})
	pulumi.RegisterOutputType(ReceiverResponseOutput{})
	pulumi.RegisterOutputType(ReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
	pulumi.RegisterOutputType(RecordMapArrayOutput{})
	pulumi.RegisterOutputType(RecordMapResponseOutput{})
	pulumi.RegisterOutputType(RecordMapResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
	pulumi.RegisterOutputType(ResourceMapArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapResponseOutput{})
	pulumi.RegisterOutputType(ResourceMapResponseArrayOutput{})
	pulumi.RegisterOutputType(SchemaMapOutput{})
	pulumi.RegisterOutputType(SchemaMapPtrOutput{})
	pulumi.RegisterOutputType(SchemaMapResponseOutput{})
	pulumi.RegisterOutputType(SchemaMapResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeMapOutput{})
	pulumi.RegisterOutputType(ScopeMapArrayOutput{})
	pulumi.RegisterOutputType(ScopeMapResponseOutput{})
	pulumi.RegisterOutputType(ScopeMapResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceResponseOutput{})
	pulumi.RegisterOutputType(SyslogReceiverOutput{})
	pulumi.RegisterOutputType(SyslogReceiverPtrOutput{})
	pulumi.RegisterOutputType(SyslogReceiverResponseOutput{})
	pulumi.RegisterOutputType(SyslogReceiverResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TcpExporterOutput{})
	pulumi.RegisterOutputType(TcpExporterPtrOutput{})
	pulumi.RegisterOutputType(TcpExporterResponseOutput{})
	pulumi.RegisterOutputType(TcpExporterResponsePtrOutput{})
	pulumi.RegisterOutputType(UdpReceiverOutput{})
	pulumi.RegisterOutputType(UdpReceiverPtrOutput{})
	pulumi.RegisterOutputType(UdpReceiverResponseOutput{})
	pulumi.RegisterOutputType(UdpReceiverResponsePtrOutput{})
}
