// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20231001preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A pipeline group definition.
type PipelineGroup struct {
	pulumi.CustomResourceState

	// The exporters specified for a pipeline group instance.
	Exporters ExporterResponseArrayOutput `pulumi:"exporters"`
	// The extended location for given pipeline group.
	ExtendedLocation ExtendedLocationResponsePtrOutput `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations NetworkingConfigurationResponseArrayOutput `pulumi:"networkingConfigurations"`
	// The processors specified for a pipeline group instance.
	Processors ProcessorResponseArrayOutput `pulumi:"processors"`
	// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The receivers specified for a pipeline group instance.
	Receivers ReceiverResponseArrayOutput `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas pulumi.IntPtrOutput `pulumi:"replicas"`
	// The service section for a given pipeline group instance.
	Service ServiceResponseOutput `pulumi:"service"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPipelineGroup registers a new resource with the given unique name, arguments, and options.
func NewPipelineGroup(ctx *pulumi.Context,
	name string, args *PipelineGroupArgs, opts ...pulumi.ResourceOption) (*PipelineGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Exporters == nil {
		return nil, errors.New("invalid value for required argument 'Exporters'")
	}
	if args.Processors == nil {
		return nil, errors.New("invalid value for required argument 'Processors'")
	}
	if args.Receivers == nil {
		return nil, errors.New("invalid value for required argument 'Receivers'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:monitor:PipelineGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PipelineGroup
	err := ctx.RegisterResource("azure-native:monitor/v20231001preview:PipelineGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineGroup gets an existing PipelineGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineGroupState, opts ...pulumi.ResourceOption) (*PipelineGroup, error) {
	var resource PipelineGroup
	err := ctx.ReadResource("azure-native:monitor/v20231001preview:PipelineGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineGroup resources.
type pipelineGroupState struct {
}

type PipelineGroupState struct {
}

func (PipelineGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineGroupState)(nil)).Elem()
}

type pipelineGroupArgs struct {
	// The exporters specified for a pipeline group instance.
	Exporters []Exporter `pulumi:"exporters"`
	// The extended location for given pipeline group.
	ExtendedLocation *ExtendedLocation `pulumi:"extendedLocation"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []NetworkingConfiguration `pulumi:"networkingConfigurations"`
	// The name of pipeline group. The name is case insensitive.
	PipelineGroupName *string `pulumi:"pipelineGroupName"`
	// The processors specified for a pipeline group instance.
	Processors []Processor `pulumi:"processors"`
	// The receivers specified for a pipeline group instance.
	Receivers []Receiver `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int `pulumi:"replicas"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The service section for a given pipeline group instance.
	Service Service `pulumi:"service"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a PipelineGroup resource.
type PipelineGroupArgs struct {
	// The exporters specified for a pipeline group instance.
	Exporters ExporterArrayInput
	// The extended location for given pipeline group.
	ExtendedLocation ExtendedLocationPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations NetworkingConfigurationArrayInput
	// The name of pipeline group. The name is case insensitive.
	PipelineGroupName pulumi.StringPtrInput
	// The processors specified for a pipeline group instance.
	Processors ProcessorArrayInput
	// The receivers specified for a pipeline group instance.
	Receivers ReceiverArrayInput
	// Defines the amount of replicas of the pipeline group instance.
	Replicas pulumi.IntPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The service section for a given pipeline group instance.
	Service ServiceInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (PipelineGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineGroupArgs)(nil)).Elem()
}

type PipelineGroupInput interface {
	pulumi.Input

	ToPipelineGroupOutput() PipelineGroupOutput
	ToPipelineGroupOutputWithContext(ctx context.Context) PipelineGroupOutput
}

func (*PipelineGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGroup)(nil)).Elem()
}

func (i *PipelineGroup) ToPipelineGroupOutput() PipelineGroupOutput {
	return i.ToPipelineGroupOutputWithContext(context.Background())
}

func (i *PipelineGroup) ToPipelineGroupOutputWithContext(ctx context.Context) PipelineGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGroupOutput)
}

type PipelineGroupOutput struct{ *pulumi.OutputState }

func (PipelineGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGroup)(nil)).Elem()
}

func (o PipelineGroupOutput) ToPipelineGroupOutput() PipelineGroupOutput {
	return o
}

func (o PipelineGroupOutput) ToPipelineGroupOutputWithContext(ctx context.Context) PipelineGroupOutput {
	return o
}

// The exporters specified for a pipeline group instance.
func (o PipelineGroupOutput) Exporters() ExporterResponseArrayOutput {
	return o.ApplyT(func(v *PipelineGroup) ExporterResponseArrayOutput { return v.Exporters }).(ExporterResponseArrayOutput)
}

// The extended location for given pipeline group.
func (o PipelineGroupOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v *PipelineGroup) ExtendedLocationResponsePtrOutput { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// The geo-location where the resource lives
func (o PipelineGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o PipelineGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Networking configurations for the pipeline group instance.
func (o PipelineGroupOutput) NetworkingConfigurations() NetworkingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v *PipelineGroup) NetworkingConfigurationResponseArrayOutput { return v.NetworkingConfigurations }).(NetworkingConfigurationResponseArrayOutput)
}

// The processors specified for a pipeline group instance.
func (o PipelineGroupOutput) Processors() ProcessorResponseArrayOutput {
	return o.ApplyT(func(v *PipelineGroup) ProcessorResponseArrayOutput { return v.Processors }).(ProcessorResponseArrayOutput)
}

// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
func (o PipelineGroupOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The receivers specified for a pipeline group instance.
func (o PipelineGroupOutput) Receivers() ReceiverResponseArrayOutput {
	return o.ApplyT(func(v *PipelineGroup) ReceiverResponseArrayOutput { return v.Receivers }).(ReceiverResponseArrayOutput)
}

// Defines the amount of replicas of the pipeline group instance.
func (o PipelineGroupOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.IntPtrOutput { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The service section for a given pipeline group instance.
func (o PipelineGroupOutput) Service() ServiceResponseOutput {
	return o.ApplyT(func(v *PipelineGroup) ServiceResponseOutput { return v.Service }).(ServiceResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PipelineGroupOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *PipelineGroup) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o PipelineGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PipelineGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PipelineGroupOutput{})
}
