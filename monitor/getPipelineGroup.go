// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the specific pipeline group instance.
// Azure REST API version: 2023-10-01-preview.
func LookupPipelineGroup(ctx *pulumi.Context, args *LookupPipelineGroupArgs, opts ...pulumi.InvokeOption) (*LookupPipelineGroupResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupPipelineGroupResult
	err := ctx.Invoke("azure-native:monitor:getPipelineGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPipelineGroupArgs struct {
	// The name of pipeline group. The name is case insensitive.
	PipelineGroupName string `pulumi:"pipelineGroupName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A pipeline group definition.
type LookupPipelineGroupResult struct {
	// The exporters specified for a pipeline group instance.
	Exporters []ExporterResponse `pulumi:"exporters"`
	// The extended location for given pipeline group.
	ExtendedLocation *ExtendedLocationResponse `pulumi:"extendedLocation"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []NetworkingConfigurationResponse `pulumi:"networkingConfigurations"`
	// The processors specified for a pipeline group instance.
	Processors []ProcessorResponse `pulumi:"processors"`
	// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
	ProvisioningState string `pulumi:"provisioningState"`
	// The receivers specified for a pipeline group instance.
	Receivers []ReceiverResponse `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int `pulumi:"replicas"`
	// The service section for a given pipeline group instance.
	Service ServiceResponse `pulumi:"service"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupPipelineGroupOutput(ctx *pulumi.Context, args LookupPipelineGroupOutputArgs, opts ...pulumi.InvokeOption) LookupPipelineGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPipelineGroupResult, error) {
			args := v.(LookupPipelineGroupArgs)
			r, err := LookupPipelineGroup(ctx, &args, opts...)
			var s LookupPipelineGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPipelineGroupResultOutput)
}

type LookupPipelineGroupOutputArgs struct {
	// The name of pipeline group. The name is case insensitive.
	PipelineGroupName pulumi.StringInput `pulumi:"pipelineGroupName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupPipelineGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineGroupArgs)(nil)).Elem()
}

// A pipeline group definition.
type LookupPipelineGroupResultOutput struct{ *pulumi.OutputState }

func (LookupPipelineGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPipelineGroupResult)(nil)).Elem()
}

func (o LookupPipelineGroupResultOutput) ToLookupPipelineGroupResultOutput() LookupPipelineGroupResultOutput {
	return o
}

func (o LookupPipelineGroupResultOutput) ToLookupPipelineGroupResultOutputWithContext(ctx context.Context) LookupPipelineGroupResultOutput {
	return o
}

// The exporters specified for a pipeline group instance.
func (o LookupPipelineGroupResultOutput) Exporters() ExporterResponseArrayOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) []ExporterResponse { return v.Exporters }).(ExporterResponseArrayOutput)
}

// The extended location for given pipeline group.
func (o LookupPipelineGroupResultOutput) ExtendedLocation() ExtendedLocationResponsePtrOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) *ExtendedLocationResponse { return v.ExtendedLocation }).(ExtendedLocationResponsePtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o LookupPipelineGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupPipelineGroupResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupPipelineGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// Networking configurations for the pipeline group instance.
func (o LookupPipelineGroupResultOutput) NetworkingConfigurations() NetworkingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) []NetworkingConfigurationResponse { return v.NetworkingConfigurations }).(NetworkingConfigurationResponseArrayOutput)
}

// The processors specified for a pipeline group instance.
func (o LookupPipelineGroupResultOutput) Processors() ProcessorResponseArrayOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) []ProcessorResponse { return v.Processors }).(ProcessorResponseArrayOutput)
}

// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
func (o LookupPipelineGroupResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The receivers specified for a pipeline group instance.
func (o LookupPipelineGroupResultOutput) Receivers() ReceiverResponseArrayOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) []ReceiverResponse { return v.Receivers }).(ReceiverResponseArrayOutput)
}

// Defines the amount of replicas of the pipeline group instance.
func (o LookupPipelineGroupResultOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The service section for a given pipeline group instance.
func (o LookupPipelineGroupResultOutput) Service() ServiceResponseOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) ServiceResponse { return v.Service }).(ServiceResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupPipelineGroupResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupPipelineGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupPipelineGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPipelineGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPipelineGroupResultOutput{})
}
