// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all resources in the issue - this method uses pagination to return all resources
//
// Uses Azure REST API version 2025-05-03-preview.
func ListIssueResources(ctx *pulumi.Context, args *ListIssueResourcesArgs, opts ...pulumi.InvokeOption) (*ListIssueResourcesResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv ListIssueResourcesResult
	err := ctx.Invoke("azure-native:monitor:listIssueResources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ListIssueResourcesArgs struct {
	// The name of the Azure Monitor Workspace. The name is case insensitive
	AzureMonitorWorkspaceName string `pulumi:"azureMonitorWorkspaceName"`
	// The filter to apply on the operation. For example, to filter by relevance, use "$filter=relevance eq 'Relevant'". Note: this property is currently a placeholder and is not in use.
	Filter *string `pulumi:"filter"`
	// The name of the IssueResource
	IssueName string `pulumi:"issueName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Paged collection of RelatedResource items
type ListIssueResourcesResult struct {
	// The link to the next page of items
	NextLink *string `pulumi:"nextLink"`
	// The RelatedResource items on this page
	Value []RelatedResourceResponse `pulumi:"value"`
}

func ListIssueResourcesOutput(ctx *pulumi.Context, args ListIssueResourcesOutputArgs, opts ...pulumi.InvokeOption) ListIssueResourcesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (ListIssueResourcesResultOutput, error) {
			args := v.(ListIssueResourcesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:monitor:listIssueResources", args, ListIssueResourcesResultOutput{}, options).(ListIssueResourcesResultOutput), nil
		}).(ListIssueResourcesResultOutput)
}

type ListIssueResourcesOutputArgs struct {
	// The name of the Azure Monitor Workspace. The name is case insensitive
	AzureMonitorWorkspaceName pulumi.StringInput `pulumi:"azureMonitorWorkspaceName"`
	// The filter to apply on the operation. For example, to filter by relevance, use "$filter=relevance eq 'Relevant'". Note: this property is currently a placeholder and is not in use.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// The name of the IssueResource
	IssueName pulumi.StringInput `pulumi:"issueName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (ListIssueResourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListIssueResourcesArgs)(nil)).Elem()
}

// Paged collection of RelatedResource items
type ListIssueResourcesResultOutput struct{ *pulumi.OutputState }

func (ListIssueResourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListIssueResourcesResult)(nil)).Elem()
}

func (o ListIssueResourcesResultOutput) ToListIssueResourcesResultOutput() ListIssueResourcesResultOutput {
	return o
}

func (o ListIssueResourcesResultOutput) ToListIssueResourcesResultOutputWithContext(ctx context.Context) ListIssueResourcesResultOutput {
	return o
}

// The link to the next page of items
func (o ListIssueResourcesResultOutput) NextLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListIssueResourcesResult) *string { return v.NextLink }).(pulumi.StringPtrOutput)
}

// The RelatedResource items on this page
func (o ListIssueResourcesResultOutput) Value() RelatedResourceResponseArrayOutput {
	return o.ApplyT(func(v ListIssueResourcesResult) []RelatedResourceResponse { return v.Value }).(RelatedResourceResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ListIssueResourcesResultOutput{})
}
