// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Properties that define the scope private link mode settings.
type AccessModeSettings struct {
	// List of exclusions that override the default access mode settings for specific private endpoint connections.
	Exclusions []AccessModeSettingsExclusion `pulumi:"exclusions"`
	// Specifies the default access mode of ingestion through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	IngestionAccessMode string `pulumi:"ingestionAccessMode"`
	// Specifies the default access mode of queries through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	QueryAccessMode string `pulumi:"queryAccessMode"`
}

// AccessModeSettingsInput is an input type that accepts AccessModeSettingsArgs and AccessModeSettingsOutput values.
// You can construct a concrete instance of `AccessModeSettingsInput` via:
//
//	AccessModeSettingsArgs{...}
type AccessModeSettingsInput interface {
	pulumi.Input

	ToAccessModeSettingsOutput() AccessModeSettingsOutput
	ToAccessModeSettingsOutputWithContext(context.Context) AccessModeSettingsOutput
}

// Properties that define the scope private link mode settings.
type AccessModeSettingsArgs struct {
	// List of exclusions that override the default access mode settings for specific private endpoint connections.
	Exclusions AccessModeSettingsExclusionArrayInput `pulumi:"exclusions"`
	// Specifies the default access mode of ingestion through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	IngestionAccessMode pulumi.StringInput `pulumi:"ingestionAccessMode"`
	// Specifies the default access mode of queries through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	QueryAccessMode pulumi.StringInput `pulumi:"queryAccessMode"`
}

func (AccessModeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettings)(nil)).Elem()
}

func (i AccessModeSettingsArgs) ToAccessModeSettingsOutput() AccessModeSettingsOutput {
	return i.ToAccessModeSettingsOutputWithContext(context.Background())
}

func (i AccessModeSettingsArgs) ToAccessModeSettingsOutputWithContext(ctx context.Context) AccessModeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessModeSettingsOutput)
}

// Properties that define the scope private link mode settings.
type AccessModeSettingsOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettings)(nil)).Elem()
}

func (o AccessModeSettingsOutput) ToAccessModeSettingsOutput() AccessModeSettingsOutput {
	return o
}

func (o AccessModeSettingsOutput) ToAccessModeSettingsOutputWithContext(ctx context.Context) AccessModeSettingsOutput {
	return o
}

// List of exclusions that override the default access mode settings for specific private endpoint connections.
func (o AccessModeSettingsOutput) Exclusions() AccessModeSettingsExclusionArrayOutput {
	return o.ApplyT(func(v AccessModeSettings) []AccessModeSettingsExclusion { return v.Exclusions }).(AccessModeSettingsExclusionArrayOutput)
}

// Specifies the default access mode of ingestion through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
func (o AccessModeSettingsOutput) IngestionAccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v AccessModeSettings) string { return v.IngestionAccessMode }).(pulumi.StringOutput)
}

// Specifies the default access mode of queries through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
func (o AccessModeSettingsOutput) QueryAccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v AccessModeSettings) string { return v.QueryAccessMode }).(pulumi.StringOutput)
}

// Properties that define the scope private link mode settings exclusion item. This setting applies to a specific private endpoint connection and overrides the default settings for that private endpoint connection.
type AccessModeSettingsExclusion struct {
	// Specifies the access mode of ingestion through the specified private endpoint connection in the exclusion.
	IngestionAccessMode *string `pulumi:"ingestionAccessMode"`
	// The private endpoint connection name associated to the private endpoint on which we want to apply the specific access mode settings.
	PrivateEndpointConnectionName *string `pulumi:"privateEndpointConnectionName"`
	// Specifies the access mode of queries through the specified private endpoint connection in the exclusion.
	QueryAccessMode *string `pulumi:"queryAccessMode"`
}

// AccessModeSettingsExclusionInput is an input type that accepts AccessModeSettingsExclusionArgs and AccessModeSettingsExclusionOutput values.
// You can construct a concrete instance of `AccessModeSettingsExclusionInput` via:
//
//	AccessModeSettingsExclusionArgs{...}
type AccessModeSettingsExclusionInput interface {
	pulumi.Input

	ToAccessModeSettingsExclusionOutput() AccessModeSettingsExclusionOutput
	ToAccessModeSettingsExclusionOutputWithContext(context.Context) AccessModeSettingsExclusionOutput
}

// Properties that define the scope private link mode settings exclusion item. This setting applies to a specific private endpoint connection and overrides the default settings for that private endpoint connection.
type AccessModeSettingsExclusionArgs struct {
	// Specifies the access mode of ingestion through the specified private endpoint connection in the exclusion.
	IngestionAccessMode pulumi.StringPtrInput `pulumi:"ingestionAccessMode"`
	// The private endpoint connection name associated to the private endpoint on which we want to apply the specific access mode settings.
	PrivateEndpointConnectionName pulumi.StringPtrInput `pulumi:"privateEndpointConnectionName"`
	// Specifies the access mode of queries through the specified private endpoint connection in the exclusion.
	QueryAccessMode pulumi.StringPtrInput `pulumi:"queryAccessMode"`
}

func (AccessModeSettingsExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettingsExclusion)(nil)).Elem()
}

func (i AccessModeSettingsExclusionArgs) ToAccessModeSettingsExclusionOutput() AccessModeSettingsExclusionOutput {
	return i.ToAccessModeSettingsExclusionOutputWithContext(context.Background())
}

func (i AccessModeSettingsExclusionArgs) ToAccessModeSettingsExclusionOutputWithContext(ctx context.Context) AccessModeSettingsExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessModeSettingsExclusionOutput)
}

// AccessModeSettingsExclusionArrayInput is an input type that accepts AccessModeSettingsExclusionArray and AccessModeSettingsExclusionArrayOutput values.
// You can construct a concrete instance of `AccessModeSettingsExclusionArrayInput` via:
//
//	AccessModeSettingsExclusionArray{ AccessModeSettingsExclusionArgs{...} }
type AccessModeSettingsExclusionArrayInput interface {
	pulumi.Input

	ToAccessModeSettingsExclusionArrayOutput() AccessModeSettingsExclusionArrayOutput
	ToAccessModeSettingsExclusionArrayOutputWithContext(context.Context) AccessModeSettingsExclusionArrayOutput
}

type AccessModeSettingsExclusionArray []AccessModeSettingsExclusionInput

func (AccessModeSettingsExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessModeSettingsExclusion)(nil)).Elem()
}

func (i AccessModeSettingsExclusionArray) ToAccessModeSettingsExclusionArrayOutput() AccessModeSettingsExclusionArrayOutput {
	return i.ToAccessModeSettingsExclusionArrayOutputWithContext(context.Background())
}

func (i AccessModeSettingsExclusionArray) ToAccessModeSettingsExclusionArrayOutputWithContext(ctx context.Context) AccessModeSettingsExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessModeSettingsExclusionArrayOutput)
}

// Properties that define the scope private link mode settings exclusion item. This setting applies to a specific private endpoint connection and overrides the default settings for that private endpoint connection.
type AccessModeSettingsExclusionOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettingsExclusion)(nil)).Elem()
}

func (o AccessModeSettingsExclusionOutput) ToAccessModeSettingsExclusionOutput() AccessModeSettingsExclusionOutput {
	return o
}

func (o AccessModeSettingsExclusionOutput) ToAccessModeSettingsExclusionOutputWithContext(ctx context.Context) AccessModeSettingsExclusionOutput {
	return o
}

// Specifies the access mode of ingestion through the specified private endpoint connection in the exclusion.
func (o AccessModeSettingsExclusionOutput) IngestionAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusion) *string { return v.IngestionAccessMode }).(pulumi.StringPtrOutput)
}

// The private endpoint connection name associated to the private endpoint on which we want to apply the specific access mode settings.
func (o AccessModeSettingsExclusionOutput) PrivateEndpointConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusion) *string { return v.PrivateEndpointConnectionName }).(pulumi.StringPtrOutput)
}

// Specifies the access mode of queries through the specified private endpoint connection in the exclusion.
func (o AccessModeSettingsExclusionOutput) QueryAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusion) *string { return v.QueryAccessMode }).(pulumi.StringPtrOutput)
}

type AccessModeSettingsExclusionArrayOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessModeSettingsExclusion)(nil)).Elem()
}

func (o AccessModeSettingsExclusionArrayOutput) ToAccessModeSettingsExclusionArrayOutput() AccessModeSettingsExclusionArrayOutput {
	return o
}

func (o AccessModeSettingsExclusionArrayOutput) ToAccessModeSettingsExclusionArrayOutputWithContext(ctx context.Context) AccessModeSettingsExclusionArrayOutput {
	return o
}

func (o AccessModeSettingsExclusionArrayOutput) Index(i pulumi.IntInput) AccessModeSettingsExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessModeSettingsExclusion {
		return vs[0].([]AccessModeSettingsExclusion)[vs[1].(int)]
	}).(AccessModeSettingsExclusionOutput)
}

// Properties that define the scope private link mode settings exclusion item. This setting applies to a specific private endpoint connection and overrides the default settings for that private endpoint connection.
type AccessModeSettingsExclusionResponse struct {
	// Specifies the access mode of ingestion through the specified private endpoint connection in the exclusion.
	IngestionAccessMode *string `pulumi:"ingestionAccessMode"`
	// The private endpoint connection name associated to the private endpoint on which we want to apply the specific access mode settings.
	PrivateEndpointConnectionName *string `pulumi:"privateEndpointConnectionName"`
	// Specifies the access mode of queries through the specified private endpoint connection in the exclusion.
	QueryAccessMode *string `pulumi:"queryAccessMode"`
}

// Properties that define the scope private link mode settings exclusion item. This setting applies to a specific private endpoint connection and overrides the default settings for that private endpoint connection.
type AccessModeSettingsExclusionResponseOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsExclusionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettingsExclusionResponse)(nil)).Elem()
}

func (o AccessModeSettingsExclusionResponseOutput) ToAccessModeSettingsExclusionResponseOutput() AccessModeSettingsExclusionResponseOutput {
	return o
}

func (o AccessModeSettingsExclusionResponseOutput) ToAccessModeSettingsExclusionResponseOutputWithContext(ctx context.Context) AccessModeSettingsExclusionResponseOutput {
	return o
}

// Specifies the access mode of ingestion through the specified private endpoint connection in the exclusion.
func (o AccessModeSettingsExclusionResponseOutput) IngestionAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusionResponse) *string { return v.IngestionAccessMode }).(pulumi.StringPtrOutput)
}

// The private endpoint connection name associated to the private endpoint on which we want to apply the specific access mode settings.
func (o AccessModeSettingsExclusionResponseOutput) PrivateEndpointConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusionResponse) *string { return v.PrivateEndpointConnectionName }).(pulumi.StringPtrOutput)
}

// Specifies the access mode of queries through the specified private endpoint connection in the exclusion.
func (o AccessModeSettingsExclusionResponseOutput) QueryAccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessModeSettingsExclusionResponse) *string { return v.QueryAccessMode }).(pulumi.StringPtrOutput)
}

type AccessModeSettingsExclusionResponseArrayOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsExclusionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessModeSettingsExclusionResponse)(nil)).Elem()
}

func (o AccessModeSettingsExclusionResponseArrayOutput) ToAccessModeSettingsExclusionResponseArrayOutput() AccessModeSettingsExclusionResponseArrayOutput {
	return o
}

func (o AccessModeSettingsExclusionResponseArrayOutput) ToAccessModeSettingsExclusionResponseArrayOutputWithContext(ctx context.Context) AccessModeSettingsExclusionResponseArrayOutput {
	return o
}

func (o AccessModeSettingsExclusionResponseArrayOutput) Index(i pulumi.IntInput) AccessModeSettingsExclusionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessModeSettingsExclusionResponse {
		return vs[0].([]AccessModeSettingsExclusionResponse)[vs[1].(int)]
	}).(AccessModeSettingsExclusionResponseOutput)
}

// Properties that define the scope private link mode settings.
type AccessModeSettingsResponse struct {
	// List of exclusions that override the default access mode settings for specific private endpoint connections.
	Exclusions []AccessModeSettingsExclusionResponse `pulumi:"exclusions"`
	// Specifies the default access mode of ingestion through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	IngestionAccessMode string `pulumi:"ingestionAccessMode"`
	// Specifies the default access mode of queries through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
	QueryAccessMode string `pulumi:"queryAccessMode"`
}

// Properties that define the scope private link mode settings.
type AccessModeSettingsResponseOutput struct{ *pulumi.OutputState }

func (AccessModeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessModeSettingsResponse)(nil)).Elem()
}

func (o AccessModeSettingsResponseOutput) ToAccessModeSettingsResponseOutput() AccessModeSettingsResponseOutput {
	return o
}

func (o AccessModeSettingsResponseOutput) ToAccessModeSettingsResponseOutputWithContext(ctx context.Context) AccessModeSettingsResponseOutput {
	return o
}

// List of exclusions that override the default access mode settings for specific private endpoint connections.
func (o AccessModeSettingsResponseOutput) Exclusions() AccessModeSettingsExclusionResponseArrayOutput {
	return o.ApplyT(func(v AccessModeSettingsResponse) []AccessModeSettingsExclusionResponse { return v.Exclusions }).(AccessModeSettingsExclusionResponseArrayOutput)
}

// Specifies the default access mode of ingestion through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
func (o AccessModeSettingsResponseOutput) IngestionAccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v AccessModeSettingsResponse) string { return v.IngestionAccessMode }).(pulumi.StringOutput)
}

// Specifies the default access mode of queries through associated private endpoints in scope. If not specified default value is 'Open'. You can override this default setting for a specific private endpoint connection by adding an exclusion in the 'exclusions' array.
func (o AccessModeSettingsResponseOutput) QueryAccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v AccessModeSettingsResponse) string { return v.QueryAccessMode }).(pulumi.StringOutput)
}

// A pointer to an Azure Action Group.
type ActionGroupType struct {
	// The resource ID of the Action Group. This cannot be null or empty.
	ActionGroupId string `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// ActionGroupTypeInput is an input type that accepts ActionGroupTypeArgs and ActionGroupTypeOutput values.
// You can construct a concrete instance of `ActionGroupTypeInput` via:
//
//	ActionGroupTypeArgs{...}
type ActionGroupTypeInput interface {
	pulumi.Input

	ToActionGroupTypeOutput() ActionGroupTypeOutput
	ToActionGroupTypeOutputWithContext(context.Context) ActionGroupTypeOutput
}

// A pointer to an Azure Action Group.
type ActionGroupTypeArgs struct {
	// The resource ID of the Action Group. This cannot be null or empty.
	ActionGroupId pulumi.StringInput `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties pulumi.StringMapInput `pulumi:"webhookProperties"`
}

func (ActionGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupType)(nil)).Elem()
}

func (i ActionGroupTypeArgs) ToActionGroupTypeOutput() ActionGroupTypeOutput {
	return i.ToActionGroupTypeOutputWithContext(context.Background())
}

func (i ActionGroupTypeArgs) ToActionGroupTypeOutputWithContext(ctx context.Context) ActionGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupTypeOutput)
}

// ActionGroupTypeArrayInput is an input type that accepts ActionGroupTypeArray and ActionGroupTypeArrayOutput values.
// You can construct a concrete instance of `ActionGroupTypeArrayInput` via:
//
//	ActionGroupTypeArray{ ActionGroupTypeArgs{...} }
type ActionGroupTypeArrayInput interface {
	pulumi.Input

	ToActionGroupTypeArrayOutput() ActionGroupTypeArrayOutput
	ToActionGroupTypeArrayOutputWithContext(context.Context) ActionGroupTypeArrayOutput
}

type ActionGroupTypeArray []ActionGroupTypeInput

func (ActionGroupTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupType)(nil)).Elem()
}

func (i ActionGroupTypeArray) ToActionGroupTypeArrayOutput() ActionGroupTypeArrayOutput {
	return i.ToActionGroupTypeArrayOutputWithContext(context.Background())
}

func (i ActionGroupTypeArray) ToActionGroupTypeArrayOutputWithContext(ctx context.Context) ActionGroupTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionGroupTypeArrayOutput)
}

// A pointer to an Azure Action Group.
type ActionGroupTypeOutput struct{ *pulumi.OutputState }

func (ActionGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupType)(nil)).Elem()
}

func (o ActionGroupTypeOutput) ToActionGroupTypeOutput() ActionGroupTypeOutput {
	return o
}

func (o ActionGroupTypeOutput) ToActionGroupTypeOutputWithContext(ctx context.Context) ActionGroupTypeOutput {
	return o
}

// The resource ID of the Action Group. This cannot be null or empty.
func (o ActionGroupTypeOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupType) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
func (o ActionGroupTypeOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActionGroupType) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type ActionGroupTypeArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupType)(nil)).Elem()
}

func (o ActionGroupTypeArrayOutput) ToActionGroupTypeArrayOutput() ActionGroupTypeArrayOutput {
	return o
}

func (o ActionGroupTypeArrayOutput) ToActionGroupTypeArrayOutputWithContext(ctx context.Context) ActionGroupTypeArrayOutput {
	return o
}

func (o ActionGroupTypeArrayOutput) Index(i pulumi.IntInput) ActionGroupTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupType {
		return vs[0].([]ActionGroupType)[vs[1].(int)]
	}).(ActionGroupTypeOutput)
}

// A pointer to an Azure Action Group.
type ActionGroupResponse struct {
	// The resource ID of the Action Group. This cannot be null or empty.
	ActionGroupId string `pulumi:"actionGroupId"`
	// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
	WebhookProperties map[string]string `pulumi:"webhookProperties"`
}

// A pointer to an Azure Action Group.
type ActionGroupResponseOutput struct{ *pulumi.OutputState }

func (ActionGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionGroupResponse)(nil)).Elem()
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutput() ActionGroupResponseOutput {
	return o
}

func (o ActionGroupResponseOutput) ToActionGroupResponseOutputWithContext(ctx context.Context) ActionGroupResponseOutput {
	return o
}

// The resource ID of the Action Group. This cannot be null or empty.
func (o ActionGroupResponseOutput) ActionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ActionGroupResponse) string { return v.ActionGroupId }).(pulumi.StringOutput)
}

// the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
func (o ActionGroupResponseOutput) WebhookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActionGroupResponse) map[string]string { return v.WebhookProperties }).(pulumi.StringMapOutput)
}

type ActionGroupResponseArrayOutput struct{ *pulumi.OutputState }

func (ActionGroupResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActionGroupResponse)(nil)).Elem()
}

func (o ActionGroupResponseArrayOutput) ToActionGroupResponseArrayOutput() ActionGroupResponseArrayOutput {
	return o
}

func (o ActionGroupResponseArrayOutput) ToActionGroupResponseArrayOutputWithContext(ctx context.Context) ActionGroupResponseArrayOutput {
	return o
}

func (o ActionGroupResponseArrayOutput) Index(i pulumi.IntInput) ActionGroupResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActionGroupResponse {
		return vs[0].([]ActionGroupResponse)[vs[1].(int)]
	}).(ActionGroupResponseOutput)
}

// A list of Activity Log Alert rule actions.
type ActionList struct {
	// The list of the Action Groups.
	ActionGroups []ActionGroupType `pulumi:"actionGroups"`
}

// ActionListInput is an input type that accepts ActionListArgs and ActionListOutput values.
// You can construct a concrete instance of `ActionListInput` via:
//
//	ActionListArgs{...}
type ActionListInput interface {
	pulumi.Input

	ToActionListOutput() ActionListOutput
	ToActionListOutputWithContext(context.Context) ActionListOutput
}

// A list of Activity Log Alert rule actions.
type ActionListArgs struct {
	// The list of the Action Groups.
	ActionGroups ActionGroupTypeArrayInput `pulumi:"actionGroups"`
}

func (ActionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionList)(nil)).Elem()
}

func (i ActionListArgs) ToActionListOutput() ActionListOutput {
	return i.ToActionListOutputWithContext(context.Background())
}

func (i ActionListArgs) ToActionListOutputWithContext(ctx context.Context) ActionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionListOutput)
}

// A list of Activity Log Alert rule actions.
type ActionListOutput struct{ *pulumi.OutputState }

func (ActionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionList)(nil)).Elem()
}

func (o ActionListOutput) ToActionListOutput() ActionListOutput {
	return o
}

func (o ActionListOutput) ToActionListOutputWithContext(ctx context.Context) ActionListOutput {
	return o
}

// The list of the Action Groups.
func (o ActionListOutput) ActionGroups() ActionGroupTypeArrayOutput {
	return o.ApplyT(func(v ActionList) []ActionGroupType { return v.ActionGroups }).(ActionGroupTypeArrayOutput)
}

// A list of Activity Log Alert rule actions.
type ActionListResponse struct {
	// The list of the Action Groups.
	ActionGroups []ActionGroupResponse `pulumi:"actionGroups"`
}

// A list of Activity Log Alert rule actions.
type ActionListResponseOutput struct{ *pulumi.OutputState }

func (ActionListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionListResponse)(nil)).Elem()
}

func (o ActionListResponseOutput) ToActionListResponseOutput() ActionListResponseOutput {
	return o
}

func (o ActionListResponseOutput) ToActionListResponseOutputWithContext(ctx context.Context) ActionListResponseOutput {
	return o
}

// The list of the Action Groups.
func (o ActionListResponseOutput) ActionGroups() ActionGroupResponseArrayOutput {
	return o.ApplyT(func(v ActionListResponse) []ActionGroupResponse { return v.ActionGroups }).(ActionGroupResponseArrayOutput)
}

// Actions to invoke when the alert fires.
type Actions struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups []string `pulumi:"actionGroups"`
	// The properties of an action properties.
	ActionProperties map[string]string `pulumi:"actionProperties"`
	// The properties of an alert payload.
	CustomProperties map[string]string `pulumi:"customProperties"`
}

// ActionsInput is an input type that accepts ActionsArgs and ActionsOutput values.
// You can construct a concrete instance of `ActionsInput` via:
//
//	ActionsArgs{...}
type ActionsInput interface {
	pulumi.Input

	ToActionsOutput() ActionsOutput
	ToActionsOutputWithContext(context.Context) ActionsOutput
}

// Actions to invoke when the alert fires.
type ActionsArgs struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups pulumi.StringArrayInput `pulumi:"actionGroups"`
	// The properties of an action properties.
	ActionProperties pulumi.StringMapInput `pulumi:"actionProperties"`
	// The properties of an alert payload.
	CustomProperties pulumi.StringMapInput `pulumi:"customProperties"`
}

func (ActionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Actions)(nil)).Elem()
}

func (i ActionsArgs) ToActionsOutput() ActionsOutput {
	return i.ToActionsOutputWithContext(context.Background())
}

func (i ActionsArgs) ToActionsOutputWithContext(ctx context.Context) ActionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOutput)
}

func (i ActionsArgs) ToActionsPtrOutput() ActionsPtrOutput {
	return i.ToActionsPtrOutputWithContext(context.Background())
}

func (i ActionsArgs) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsOutput).ToActionsPtrOutputWithContext(ctx)
}

// ActionsPtrInput is an input type that accepts ActionsArgs, ActionsPtr and ActionsPtrOutput values.
// You can construct a concrete instance of `ActionsPtrInput` via:
//
//	        ActionsArgs{...}
//
//	or:
//
//	        nil
type ActionsPtrInput interface {
	pulumi.Input

	ToActionsPtrOutput() ActionsPtrOutput
	ToActionsPtrOutputWithContext(context.Context) ActionsPtrOutput
}

type actionsPtrType ActionsArgs

func ActionsPtr(v *ActionsArgs) ActionsPtrInput {
	return (*actionsPtrType)(v)
}

func (*actionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Actions)(nil)).Elem()
}

func (i *actionsPtrType) ToActionsPtrOutput() ActionsPtrOutput {
	return i.ToActionsPtrOutputWithContext(context.Background())
}

func (i *actionsPtrType) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionsPtrOutput)
}

// Actions to invoke when the alert fires.
type ActionsOutput struct{ *pulumi.OutputState }

func (ActionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Actions)(nil)).Elem()
}

func (o ActionsOutput) ToActionsOutput() ActionsOutput {
	return o
}

func (o ActionsOutput) ToActionsOutputWithContext(ctx context.Context) ActionsOutput {
	return o
}

func (o ActionsOutput) ToActionsPtrOutput() ActionsPtrOutput {
	return o.ToActionsPtrOutputWithContext(context.Background())
}

func (o ActionsOutput) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Actions) *Actions {
		return &v
	}).(ActionsPtrOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Actions) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The properties of an action properties.
func (o ActionsOutput) ActionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v Actions) map[string]string { return v.ActionProperties }).(pulumi.StringMapOutput)
}

// The properties of an alert payload.
func (o ActionsOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v Actions) map[string]string { return v.CustomProperties }).(pulumi.StringMapOutput)
}

type ActionsPtrOutput struct{ *pulumi.OutputState }

func (ActionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Actions)(nil)).Elem()
}

func (o ActionsPtrOutput) ToActionsPtrOutput() ActionsPtrOutput {
	return o
}

func (o ActionsPtrOutput) ToActionsPtrOutputWithContext(ctx context.Context) ActionsPtrOutput {
	return o
}

func (o ActionsPtrOutput) Elem() ActionsOutput {
	return o.ApplyT(func(v *Actions) Actions {
		if v != nil {
			return *v
		}
		var ret Actions
		return ret
	}).(ActionsOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsPtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Actions) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The properties of an action properties.
func (o ActionsPtrOutput) ActionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Actions) map[string]string {
		if v == nil {
			return nil
		}
		return v.ActionProperties
	}).(pulumi.StringMapOutput)
}

// The properties of an alert payload.
func (o ActionsPtrOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Actions) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(pulumi.StringMapOutput)
}

// Actions to invoke when the alert fires.
type ActionsResponse struct {
	// Action Group resource Ids to invoke when the alert fires.
	ActionGroups []string `pulumi:"actionGroups"`
	// The properties of an action properties.
	ActionProperties map[string]string `pulumi:"actionProperties"`
	// The properties of an alert payload.
	CustomProperties map[string]string `pulumi:"customProperties"`
}

// Actions to invoke when the alert fires.
type ActionsResponseOutput struct{ *pulumi.OutputState }

func (ActionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActionsResponse)(nil)).Elem()
}

func (o ActionsResponseOutput) ToActionsResponseOutput() ActionsResponseOutput {
	return o
}

func (o ActionsResponseOutput) ToActionsResponseOutputWithContext(ctx context.Context) ActionsResponseOutput {
	return o
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsResponseOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActionsResponse) []string { return v.ActionGroups }).(pulumi.StringArrayOutput)
}

// The properties of an action properties.
func (o ActionsResponseOutput) ActionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActionsResponse) map[string]string { return v.ActionProperties }).(pulumi.StringMapOutput)
}

// The properties of an alert payload.
func (o ActionsResponseOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ActionsResponse) map[string]string { return v.CustomProperties }).(pulumi.StringMapOutput)
}

type ActionsResponsePtrOutput struct{ *pulumi.OutputState }

func (ActionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActionsResponse)(nil)).Elem()
}

func (o ActionsResponsePtrOutput) ToActionsResponsePtrOutput() ActionsResponsePtrOutput {
	return o
}

func (o ActionsResponsePtrOutput) ToActionsResponsePtrOutputWithContext(ctx context.Context) ActionsResponsePtrOutput {
	return o
}

func (o ActionsResponsePtrOutput) Elem() ActionsResponseOutput {
	return o.ApplyT(func(v *ActionsResponse) ActionsResponse {
		if v != nil {
			return *v
		}
		var ret ActionsResponse
		return ret
	}).(ActionsResponseOutput)
}

// Action Group resource Ids to invoke when the alert fires.
func (o ActionsResponsePtrOutput) ActionGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ActionsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroups
	}).(pulumi.StringArrayOutput)
}

// The properties of an action properties.
func (o ActionsResponsePtrOutput) ActionProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActionsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ActionProperties
	}).(pulumi.StringMapOutput)
}

// The properties of an alert payload.
func (o ActionsResponsePtrOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ActionsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.CustomProperties
	}).(pulumi.StringMapOutput)
}

// Alert configuration details
type AlertConfiguration struct {
	// Optional list of action group resource IDs to be notified when the alert is triggered.
	ActionGroupIds []string `pulumi:"actionGroupIds"`
	// The alert rule description.
	Description *string `pulumi:"description"`
	// The severity of triggered alert.
	Severity string `pulumi:"severity"`
}

// AlertConfigurationInput is an input type that accepts AlertConfigurationArgs and AlertConfigurationOutput values.
// You can construct a concrete instance of `AlertConfigurationInput` via:
//
//	AlertConfigurationArgs{...}
type AlertConfigurationInput interface {
	pulumi.Input

	ToAlertConfigurationOutput() AlertConfigurationOutput
	ToAlertConfigurationOutputWithContext(context.Context) AlertConfigurationOutput
}

// Alert configuration details
type AlertConfigurationArgs struct {
	// Optional list of action group resource IDs to be notified when the alert is triggered.
	ActionGroupIds pulumi.StringArrayInput `pulumi:"actionGroupIds"`
	// The alert rule description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The severity of triggered alert.
	Severity pulumi.StringInput `pulumi:"severity"`
}

func (AlertConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConfiguration)(nil)).Elem()
}

func (i AlertConfigurationArgs) ToAlertConfigurationOutput() AlertConfigurationOutput {
	return i.ToAlertConfigurationOutputWithContext(context.Background())
}

func (i AlertConfigurationArgs) ToAlertConfigurationOutputWithContext(ctx context.Context) AlertConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConfigurationOutput)
}

func (i AlertConfigurationArgs) ToAlertConfigurationPtrOutput() AlertConfigurationPtrOutput {
	return i.ToAlertConfigurationPtrOutputWithContext(context.Background())
}

func (i AlertConfigurationArgs) ToAlertConfigurationPtrOutputWithContext(ctx context.Context) AlertConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConfigurationOutput).ToAlertConfigurationPtrOutputWithContext(ctx)
}

// AlertConfigurationPtrInput is an input type that accepts AlertConfigurationArgs, AlertConfigurationPtr and AlertConfigurationPtrOutput values.
// You can construct a concrete instance of `AlertConfigurationPtrInput` via:
//
//	        AlertConfigurationArgs{...}
//
//	or:
//
//	        nil
type AlertConfigurationPtrInput interface {
	pulumi.Input

	ToAlertConfigurationPtrOutput() AlertConfigurationPtrOutput
	ToAlertConfigurationPtrOutputWithContext(context.Context) AlertConfigurationPtrOutput
}

type alertConfigurationPtrType AlertConfigurationArgs

func AlertConfigurationPtr(v *AlertConfigurationArgs) AlertConfigurationPtrInput {
	return (*alertConfigurationPtrType)(v)
}

func (*alertConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertConfiguration)(nil)).Elem()
}

func (i *alertConfigurationPtrType) ToAlertConfigurationPtrOutput() AlertConfigurationPtrOutput {
	return i.ToAlertConfigurationPtrOutputWithContext(context.Background())
}

func (i *alertConfigurationPtrType) ToAlertConfigurationPtrOutputWithContext(ctx context.Context) AlertConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertConfigurationPtrOutput)
}

// Alert configuration details
type AlertConfigurationOutput struct{ *pulumi.OutputState }

func (AlertConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConfiguration)(nil)).Elem()
}

func (o AlertConfigurationOutput) ToAlertConfigurationOutput() AlertConfigurationOutput {
	return o
}

func (o AlertConfigurationOutput) ToAlertConfigurationOutputWithContext(ctx context.Context) AlertConfigurationOutput {
	return o
}

func (o AlertConfigurationOutput) ToAlertConfigurationPtrOutput() AlertConfigurationPtrOutput {
	return o.ToAlertConfigurationPtrOutputWithContext(context.Background())
}

func (o AlertConfigurationOutput) ToAlertConfigurationPtrOutputWithContext(ctx context.Context) AlertConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertConfiguration) *AlertConfiguration {
		return &v
	}).(AlertConfigurationPtrOutput)
}

// Optional list of action group resource IDs to be notified when the alert is triggered.
func (o AlertConfigurationOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertConfiguration) []string { return v.ActionGroupIds }).(pulumi.StringArrayOutput)
}

// The alert rule description.
func (o AlertConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConfiguration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The severity of triggered alert.
func (o AlertConfigurationOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertConfiguration) string { return v.Severity }).(pulumi.StringOutput)
}

type AlertConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AlertConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertConfiguration)(nil)).Elem()
}

func (o AlertConfigurationPtrOutput) ToAlertConfigurationPtrOutput() AlertConfigurationPtrOutput {
	return o
}

func (o AlertConfigurationPtrOutput) ToAlertConfigurationPtrOutputWithContext(ctx context.Context) AlertConfigurationPtrOutput {
	return o
}

func (o AlertConfigurationPtrOutput) Elem() AlertConfigurationOutput {
	return o.ApplyT(func(v *AlertConfiguration) AlertConfiguration {
		if v != nil {
			return *v
		}
		var ret AlertConfiguration
		return ret
	}).(AlertConfigurationOutput)
}

// Optional list of action group resource IDs to be notified when the alert is triggered.
func (o AlertConfigurationPtrOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroupIds
	}).(pulumi.StringArrayOutput)
}

// The alert rule description.
func (o AlertConfigurationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The severity of triggered alert.
func (o AlertConfigurationPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.Severity
	}).(pulumi.StringPtrOutput)
}

// Alert configuration details
type AlertConfigurationResponse struct {
	// Optional list of action group resource IDs to be notified when the alert is triggered.
	ActionGroupIds []string `pulumi:"actionGroupIds"`
	// The alert rule description.
	Description *string `pulumi:"description"`
	// The severity of triggered alert.
	Severity string `pulumi:"severity"`
}

// Alert configuration details
type AlertConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AlertConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertConfigurationResponse)(nil)).Elem()
}

func (o AlertConfigurationResponseOutput) ToAlertConfigurationResponseOutput() AlertConfigurationResponseOutput {
	return o
}

func (o AlertConfigurationResponseOutput) ToAlertConfigurationResponseOutputWithContext(ctx context.Context) AlertConfigurationResponseOutput {
	return o
}

// Optional list of action group resource IDs to be notified when the alert is triggered.
func (o AlertConfigurationResponseOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertConfigurationResponse) []string { return v.ActionGroupIds }).(pulumi.StringArrayOutput)
}

// The alert rule description.
func (o AlertConfigurationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertConfigurationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The severity of triggered alert.
func (o AlertConfigurationResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v AlertConfigurationResponse) string { return v.Severity }).(pulumi.StringOutput)
}

type AlertConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AlertConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertConfigurationResponse)(nil)).Elem()
}

func (o AlertConfigurationResponsePtrOutput) ToAlertConfigurationResponsePtrOutput() AlertConfigurationResponsePtrOutput {
	return o
}

func (o AlertConfigurationResponsePtrOutput) ToAlertConfigurationResponsePtrOutputWithContext(ctx context.Context) AlertConfigurationResponsePtrOutput {
	return o
}

func (o AlertConfigurationResponsePtrOutput) Elem() AlertConfigurationResponseOutput {
	return o.ApplyT(func(v *AlertConfigurationResponse) AlertConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AlertConfigurationResponse
		return ret
	}).(AlertConfigurationResponseOutput)
}

// Optional list of action group resource IDs to be notified when the alert is triggered.
func (o AlertConfigurationResponsePtrOutput) ActionGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.ActionGroupIds
	}).(pulumi.StringArrayOutput)
}

// The alert rule description.
func (o AlertConfigurationResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The severity of triggered alert.
func (o AlertConfigurationResponsePtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Severity
	}).(pulumi.StringPtrOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
type AlertRuleAllOfCondition struct {
	// The list of Activity Log Alert rule conditions.
	AllOf []AlertRuleAnyOfOrLeafCondition `pulumi:"allOf"`
}

// AlertRuleAllOfConditionInput is an input type that accepts AlertRuleAllOfConditionArgs and AlertRuleAllOfConditionOutput values.
// You can construct a concrete instance of `AlertRuleAllOfConditionInput` via:
//
//	AlertRuleAllOfConditionArgs{...}
type AlertRuleAllOfConditionInput interface {
	pulumi.Input

	ToAlertRuleAllOfConditionOutput() AlertRuleAllOfConditionOutput
	ToAlertRuleAllOfConditionOutputWithContext(context.Context) AlertRuleAllOfConditionOutput
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
type AlertRuleAllOfConditionArgs struct {
	// The list of Activity Log Alert rule conditions.
	AllOf AlertRuleAnyOfOrLeafConditionArrayInput `pulumi:"allOf"`
}

func (AlertRuleAllOfConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAllOfCondition)(nil)).Elem()
}

func (i AlertRuleAllOfConditionArgs) ToAlertRuleAllOfConditionOutput() AlertRuleAllOfConditionOutput {
	return i.ToAlertRuleAllOfConditionOutputWithContext(context.Background())
}

func (i AlertRuleAllOfConditionArgs) ToAlertRuleAllOfConditionOutputWithContext(ctx context.Context) AlertRuleAllOfConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleAllOfConditionOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
type AlertRuleAllOfConditionOutput struct{ *pulumi.OutputState }

func (AlertRuleAllOfConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAllOfCondition)(nil)).Elem()
}

func (o AlertRuleAllOfConditionOutput) ToAlertRuleAllOfConditionOutput() AlertRuleAllOfConditionOutput {
	return o
}

func (o AlertRuleAllOfConditionOutput) ToAlertRuleAllOfConditionOutputWithContext(ctx context.Context) AlertRuleAllOfConditionOutput {
	return o
}

// The list of Activity Log Alert rule conditions.
func (o AlertRuleAllOfConditionOutput) AllOf() AlertRuleAnyOfOrLeafConditionArrayOutput {
	return o.ApplyT(func(v AlertRuleAllOfCondition) []AlertRuleAnyOfOrLeafCondition { return v.AllOf }).(AlertRuleAnyOfOrLeafConditionArrayOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
type AlertRuleAllOfConditionResponse struct {
	// The list of Activity Log Alert rule conditions.
	AllOf []AlertRuleAnyOfOrLeafConditionResponse `pulumi:"allOf"`
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
type AlertRuleAllOfConditionResponseOutput struct{ *pulumi.OutputState }

func (AlertRuleAllOfConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAllOfConditionResponse)(nil)).Elem()
}

func (o AlertRuleAllOfConditionResponseOutput) ToAlertRuleAllOfConditionResponseOutput() AlertRuleAllOfConditionResponseOutput {
	return o
}

func (o AlertRuleAllOfConditionResponseOutput) ToAlertRuleAllOfConditionResponseOutputWithContext(ctx context.Context) AlertRuleAllOfConditionResponseOutput {
	return o
}

// The list of Activity Log Alert rule conditions.
func (o AlertRuleAllOfConditionResponseOutput) AllOf() AlertRuleAnyOfOrLeafConditionResponseArrayOutput {
	return o.ApplyT(func(v AlertRuleAllOfConditionResponse) []AlertRuleAnyOfOrLeafConditionResponse { return v.AllOf }).(AlertRuleAnyOfOrLeafConditionResponseArrayOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
// Each condition can be of one of the following types:
// __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
//   - __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
//     _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
//   - __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
//     _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
type AlertRuleAnyOfOrLeafCondition struct {
	// An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
	AnyOf []AlertRuleLeafCondition `pulumi:"anyOf"`
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny []string `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals *string `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field *string `pulumi:"field"`
}

// AlertRuleAnyOfOrLeafConditionInput is an input type that accepts AlertRuleAnyOfOrLeafConditionArgs and AlertRuleAnyOfOrLeafConditionOutput values.
// You can construct a concrete instance of `AlertRuleAnyOfOrLeafConditionInput` via:
//
//	AlertRuleAnyOfOrLeafConditionArgs{...}
type AlertRuleAnyOfOrLeafConditionInput interface {
	pulumi.Input

	ToAlertRuleAnyOfOrLeafConditionOutput() AlertRuleAnyOfOrLeafConditionOutput
	ToAlertRuleAnyOfOrLeafConditionOutputWithContext(context.Context) AlertRuleAnyOfOrLeafConditionOutput
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
// Each condition can be of one of the following types:
// __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
//   - __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
//     _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
//   - __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
//     _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
type AlertRuleAnyOfOrLeafConditionArgs struct {
	// An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
	AnyOf AlertRuleLeafConditionArrayInput `pulumi:"anyOf"`
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny pulumi.StringArrayInput `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals pulumi.StringPtrInput `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field pulumi.StringPtrInput `pulumi:"field"`
}

func (AlertRuleAnyOfOrLeafConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAnyOfOrLeafCondition)(nil)).Elem()
}

func (i AlertRuleAnyOfOrLeafConditionArgs) ToAlertRuleAnyOfOrLeafConditionOutput() AlertRuleAnyOfOrLeafConditionOutput {
	return i.ToAlertRuleAnyOfOrLeafConditionOutputWithContext(context.Background())
}

func (i AlertRuleAnyOfOrLeafConditionArgs) ToAlertRuleAnyOfOrLeafConditionOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleAnyOfOrLeafConditionOutput)
}

// AlertRuleAnyOfOrLeafConditionArrayInput is an input type that accepts AlertRuleAnyOfOrLeafConditionArray and AlertRuleAnyOfOrLeafConditionArrayOutput values.
// You can construct a concrete instance of `AlertRuleAnyOfOrLeafConditionArrayInput` via:
//
//	AlertRuleAnyOfOrLeafConditionArray{ AlertRuleAnyOfOrLeafConditionArgs{...} }
type AlertRuleAnyOfOrLeafConditionArrayInput interface {
	pulumi.Input

	ToAlertRuleAnyOfOrLeafConditionArrayOutput() AlertRuleAnyOfOrLeafConditionArrayOutput
	ToAlertRuleAnyOfOrLeafConditionArrayOutputWithContext(context.Context) AlertRuleAnyOfOrLeafConditionArrayOutput
}

type AlertRuleAnyOfOrLeafConditionArray []AlertRuleAnyOfOrLeafConditionInput

func (AlertRuleAnyOfOrLeafConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleAnyOfOrLeafCondition)(nil)).Elem()
}

func (i AlertRuleAnyOfOrLeafConditionArray) ToAlertRuleAnyOfOrLeafConditionArrayOutput() AlertRuleAnyOfOrLeafConditionArrayOutput {
	return i.ToAlertRuleAnyOfOrLeafConditionArrayOutputWithContext(context.Background())
}

func (i AlertRuleAnyOfOrLeafConditionArray) ToAlertRuleAnyOfOrLeafConditionArrayOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleAnyOfOrLeafConditionArrayOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
// Each condition can be of one of the following types:
// __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
//   - __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
//     _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
//   - __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
//     _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
type AlertRuleAnyOfOrLeafConditionOutput struct{ *pulumi.OutputState }

func (AlertRuleAnyOfOrLeafConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAnyOfOrLeafCondition)(nil)).Elem()
}

func (o AlertRuleAnyOfOrLeafConditionOutput) ToAlertRuleAnyOfOrLeafConditionOutput() AlertRuleAnyOfOrLeafConditionOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionOutput) ToAlertRuleAnyOfOrLeafConditionOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionOutput {
	return o
}

// An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
func (o AlertRuleAnyOfOrLeafConditionOutput) AnyOf() AlertRuleLeafConditionArrayOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafCondition) []AlertRuleLeafCondition { return v.AnyOf }).(AlertRuleLeafConditionArrayOutput)
}

// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
func (o AlertRuleAnyOfOrLeafConditionOutput) ContainsAny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafCondition) []string { return v.ContainsAny }).(pulumi.StringArrayOutput)
}

// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
func (o AlertRuleAnyOfOrLeafConditionOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafCondition) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// The name of the Activity Log event's field that this condition will examine.
// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
func (o AlertRuleAnyOfOrLeafConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafCondition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type AlertRuleAnyOfOrLeafConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertRuleAnyOfOrLeafConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleAnyOfOrLeafCondition)(nil)).Elem()
}

func (o AlertRuleAnyOfOrLeafConditionArrayOutput) ToAlertRuleAnyOfOrLeafConditionArrayOutput() AlertRuleAnyOfOrLeafConditionArrayOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionArrayOutput) ToAlertRuleAnyOfOrLeafConditionArrayOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionArrayOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionArrayOutput) Index(i pulumi.IntInput) AlertRuleAnyOfOrLeafConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertRuleAnyOfOrLeafCondition {
		return vs[0].([]AlertRuleAnyOfOrLeafCondition)[vs[1].(int)]
	}).(AlertRuleAnyOfOrLeafConditionOutput)
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
// Each condition can be of one of the following types:
// __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
//   - __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
//     _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
//   - __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
//     _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
type AlertRuleAnyOfOrLeafConditionResponse struct {
	// An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
	AnyOf []AlertRuleLeafConditionResponse `pulumi:"anyOf"`
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny []string `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals *string `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field *string `pulumi:"field"`
}

// An Activity Log Alert rule condition that is met when all its member conditions are met.
// Each condition can be of one of the following types:
// __Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
//   - __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
//     _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
//   - __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
//     _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._
type AlertRuleAnyOfOrLeafConditionResponseOutput struct{ *pulumi.OutputState }

func (AlertRuleAnyOfOrLeafConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleAnyOfOrLeafConditionResponse)(nil)).Elem()
}

func (o AlertRuleAnyOfOrLeafConditionResponseOutput) ToAlertRuleAnyOfOrLeafConditionResponseOutput() AlertRuleAnyOfOrLeafConditionResponseOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionResponseOutput) ToAlertRuleAnyOfOrLeafConditionResponseOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionResponseOutput {
	return o
}

// An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
func (o AlertRuleAnyOfOrLeafConditionResponseOutput) AnyOf() AlertRuleLeafConditionResponseArrayOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafConditionResponse) []AlertRuleLeafConditionResponse { return v.AnyOf }).(AlertRuleLeafConditionResponseArrayOutput)
}

// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
func (o AlertRuleAnyOfOrLeafConditionResponseOutput) ContainsAny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafConditionResponse) []string { return v.ContainsAny }).(pulumi.StringArrayOutput)
}

// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
func (o AlertRuleAnyOfOrLeafConditionResponseOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafConditionResponse) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// The name of the Activity Log event's field that this condition will examine.
// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
func (o AlertRuleAnyOfOrLeafConditionResponseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleAnyOfOrLeafConditionResponse) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type AlertRuleAnyOfOrLeafConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (AlertRuleAnyOfOrLeafConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleAnyOfOrLeafConditionResponse)(nil)).Elem()
}

func (o AlertRuleAnyOfOrLeafConditionResponseArrayOutput) ToAlertRuleAnyOfOrLeafConditionResponseArrayOutput() AlertRuleAnyOfOrLeafConditionResponseArrayOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionResponseArrayOutput) ToAlertRuleAnyOfOrLeafConditionResponseArrayOutputWithContext(ctx context.Context) AlertRuleAnyOfOrLeafConditionResponseArrayOutput {
	return o
}

func (o AlertRuleAnyOfOrLeafConditionResponseArrayOutput) Index(i pulumi.IntInput) AlertRuleAnyOfOrLeafConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertRuleAnyOfOrLeafConditionResponse {
		return vs[0].([]AlertRuleAnyOfOrLeafConditionResponse)[vs[1].(int)]
	}).(AlertRuleAnyOfOrLeafConditionResponseOutput)
}

// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
// This condition must contain 'field' and either 'equals' or 'containsAny'.
type AlertRuleLeafCondition struct {
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny []string `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals *string `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field *string `pulumi:"field"`
}

// AlertRuleLeafConditionInput is an input type that accepts AlertRuleLeafConditionArgs and AlertRuleLeafConditionOutput values.
// You can construct a concrete instance of `AlertRuleLeafConditionInput` via:
//
//	AlertRuleLeafConditionArgs{...}
type AlertRuleLeafConditionInput interface {
	pulumi.Input

	ToAlertRuleLeafConditionOutput() AlertRuleLeafConditionOutput
	ToAlertRuleLeafConditionOutputWithContext(context.Context) AlertRuleLeafConditionOutput
}

// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
// This condition must contain 'field' and either 'equals' or 'containsAny'.
type AlertRuleLeafConditionArgs struct {
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny pulumi.StringArrayInput `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals pulumi.StringPtrInput `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field pulumi.StringPtrInput `pulumi:"field"`
}

func (AlertRuleLeafConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleLeafCondition)(nil)).Elem()
}

func (i AlertRuleLeafConditionArgs) ToAlertRuleLeafConditionOutput() AlertRuleLeafConditionOutput {
	return i.ToAlertRuleLeafConditionOutputWithContext(context.Background())
}

func (i AlertRuleLeafConditionArgs) ToAlertRuleLeafConditionOutputWithContext(ctx context.Context) AlertRuleLeafConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleLeafConditionOutput)
}

// AlertRuleLeafConditionArrayInput is an input type that accepts AlertRuleLeafConditionArray and AlertRuleLeafConditionArrayOutput values.
// You can construct a concrete instance of `AlertRuleLeafConditionArrayInput` via:
//
//	AlertRuleLeafConditionArray{ AlertRuleLeafConditionArgs{...} }
type AlertRuleLeafConditionArrayInput interface {
	pulumi.Input

	ToAlertRuleLeafConditionArrayOutput() AlertRuleLeafConditionArrayOutput
	ToAlertRuleLeafConditionArrayOutputWithContext(context.Context) AlertRuleLeafConditionArrayOutput
}

type AlertRuleLeafConditionArray []AlertRuleLeafConditionInput

func (AlertRuleLeafConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleLeafCondition)(nil)).Elem()
}

func (i AlertRuleLeafConditionArray) ToAlertRuleLeafConditionArrayOutput() AlertRuleLeafConditionArrayOutput {
	return i.ToAlertRuleLeafConditionArrayOutputWithContext(context.Background())
}

func (i AlertRuleLeafConditionArray) ToAlertRuleLeafConditionArrayOutputWithContext(ctx context.Context) AlertRuleLeafConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertRuleLeafConditionArrayOutput)
}

// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
// This condition must contain 'field' and either 'equals' or 'containsAny'.
type AlertRuleLeafConditionOutput struct{ *pulumi.OutputState }

func (AlertRuleLeafConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleLeafCondition)(nil)).Elem()
}

func (o AlertRuleLeafConditionOutput) ToAlertRuleLeafConditionOutput() AlertRuleLeafConditionOutput {
	return o
}

func (o AlertRuleLeafConditionOutput) ToAlertRuleLeafConditionOutputWithContext(ctx context.Context) AlertRuleLeafConditionOutput {
	return o
}

// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
func (o AlertRuleLeafConditionOutput) ContainsAny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertRuleLeafCondition) []string { return v.ContainsAny }).(pulumi.StringArrayOutput)
}

// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
func (o AlertRuleLeafConditionOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleLeafCondition) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// The name of the Activity Log event's field that this condition will examine.
// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
func (o AlertRuleLeafConditionOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleLeafCondition) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type AlertRuleLeafConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertRuleLeafConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleLeafCondition)(nil)).Elem()
}

func (o AlertRuleLeafConditionArrayOutput) ToAlertRuleLeafConditionArrayOutput() AlertRuleLeafConditionArrayOutput {
	return o
}

func (o AlertRuleLeafConditionArrayOutput) ToAlertRuleLeafConditionArrayOutputWithContext(ctx context.Context) AlertRuleLeafConditionArrayOutput {
	return o
}

func (o AlertRuleLeafConditionArrayOutput) Index(i pulumi.IntInput) AlertRuleLeafConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertRuleLeafCondition {
		return vs[0].([]AlertRuleLeafCondition)[vs[1].(int)]
	}).(AlertRuleLeafConditionOutput)
}

// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
// This condition must contain 'field' and either 'equals' or 'containsAny'.
type AlertRuleLeafConditionResponse struct {
	// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
	ContainsAny []string `pulumi:"containsAny"`
	// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
	Equals *string `pulumi:"equals"`
	// The name of the Activity Log event's field that this condition will examine.
	// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
	Field *string `pulumi:"field"`
}

// An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
// This condition must contain 'field' and either 'equals' or 'containsAny'.
type AlertRuleLeafConditionResponseOutput struct{ *pulumi.OutputState }

func (AlertRuleLeafConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertRuleLeafConditionResponse)(nil)).Elem()
}

func (o AlertRuleLeafConditionResponseOutput) ToAlertRuleLeafConditionResponseOutput() AlertRuleLeafConditionResponseOutput {
	return o
}

func (o AlertRuleLeafConditionResponseOutput) ToAlertRuleLeafConditionResponseOutputWithContext(ctx context.Context) AlertRuleLeafConditionResponseOutput {
	return o
}

// The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
func (o AlertRuleLeafConditionResponseOutput) ContainsAny() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertRuleLeafConditionResponse) []string { return v.ContainsAny }).(pulumi.StringArrayOutput)
}

// The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
func (o AlertRuleLeafConditionResponseOutput) Equals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleLeafConditionResponse) *string { return v.Equals }).(pulumi.StringPtrOutput)
}

// The name of the Activity Log event's field that this condition will examine.
// The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
func (o AlertRuleLeafConditionResponseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertRuleLeafConditionResponse) *string { return v.Field }).(pulumi.StringPtrOutput)
}

type AlertRuleLeafConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (AlertRuleLeafConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertRuleLeafConditionResponse)(nil)).Elem()
}

func (o AlertRuleLeafConditionResponseArrayOutput) ToAlertRuleLeafConditionResponseArrayOutput() AlertRuleLeafConditionResponseArrayOutput {
	return o
}

func (o AlertRuleLeafConditionResponseArrayOutput) ToAlertRuleLeafConditionResponseArrayOutputWithContext(ctx context.Context) AlertRuleLeafConditionResponseArrayOutput {
	return o
}

func (o AlertRuleLeafConditionResponseArrayOutput) Index(i pulumi.IntInput) AlertRuleLeafConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertRuleLeafConditionResponse {
		return vs[0].([]AlertRuleLeafConditionResponse)[vs[1].(int)]
	}).(AlertRuleLeafConditionResponseOutput)
}

// Discovery rule properties for an Application Insights topology query
type ApplicationInsightsTopologyDiscoveryRuleProperties struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Application Insights resource ID
	ApplicationInsightsResourceId string `pulumi:"applicationInsightsResourceId"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships string `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ApplicationInsightsTopology'.
	DiscoveryRuleKind string `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
}

// ApplicationInsightsTopologyDiscoveryRulePropertiesInput is an input type that accepts ApplicationInsightsTopologyDiscoveryRulePropertiesArgs and ApplicationInsightsTopologyDiscoveryRulePropertiesOutput values.
// You can construct a concrete instance of `ApplicationInsightsTopologyDiscoveryRulePropertiesInput` via:
//
//	ApplicationInsightsTopologyDiscoveryRulePropertiesArgs{...}
type ApplicationInsightsTopologyDiscoveryRulePropertiesInput interface {
	pulumi.Input

	ToApplicationInsightsTopologyDiscoveryRulePropertiesOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesOutput
	ToApplicationInsightsTopologyDiscoveryRulePropertiesOutputWithContext(context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesOutput
}

// Discovery rule properties for an Application Insights topology query
type ApplicationInsightsTopologyDiscoveryRulePropertiesArgs struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals pulumi.StringInput `pulumi:"addRecommendedSignals"`
	// Application Insights resource ID
	ApplicationInsightsResourceId pulumi.StringInput `pulumi:"applicationInsightsResourceId"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting pulumi.StringInput `pulumi:"authenticationSetting"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships pulumi.StringInput `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ApplicationInsightsTopology'.
	DiscoveryRuleKind pulumi.StringInput `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsTopologyDiscoveryRuleProperties)(nil)).Elem()
}

func (i ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ToApplicationInsightsTopologyDiscoveryRulePropertiesOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesOutput {
	return i.ToApplicationInsightsTopologyDiscoveryRulePropertiesOutputWithContext(context.Background())
}

func (i ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ToApplicationInsightsTopologyDiscoveryRulePropertiesOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsTopologyDiscoveryRulePropertiesOutput)
}

func (i ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return i.ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (i ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsTopologyDiscoveryRulePropertiesOutput).ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(ctx)
}

// ApplicationInsightsTopologyDiscoveryRulePropertiesPtrInput is an input type that accepts ApplicationInsightsTopologyDiscoveryRulePropertiesArgs, ApplicationInsightsTopologyDiscoveryRulePropertiesPtr and ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput values.
// You can construct a concrete instance of `ApplicationInsightsTopologyDiscoveryRulePropertiesPtrInput` via:
//
//	        ApplicationInsightsTopologyDiscoveryRulePropertiesArgs{...}
//
//	or:
//
//	        nil
type ApplicationInsightsTopologyDiscoveryRulePropertiesPtrInput interface {
	pulumi.Input

	ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput
	ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput
}

type applicationInsightsTopologyDiscoveryRulePropertiesPtrType ApplicationInsightsTopologyDiscoveryRulePropertiesArgs

func ApplicationInsightsTopologyDiscoveryRulePropertiesPtr(v *ApplicationInsightsTopologyDiscoveryRulePropertiesArgs) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrInput {
	return (*applicationInsightsTopologyDiscoveryRulePropertiesPtrType)(v)
}

func (*applicationInsightsTopologyDiscoveryRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsTopologyDiscoveryRuleProperties)(nil)).Elem()
}

func (i *applicationInsightsTopologyDiscoveryRulePropertiesPtrType) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return i.ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *applicationInsightsTopologyDiscoveryRulePropertiesPtrType) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput)
}

// Discovery rule properties for an Application Insights topology query
type ApplicationInsightsTopologyDiscoveryRulePropertiesOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsTopologyDiscoveryRuleProperties)(nil)).Elem()
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesOutput {
	return o
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesOutput {
	return o
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return o.ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplicationInsightsTopologyDiscoveryRuleProperties) *ApplicationInsightsTopologyDiscoveryRuleProperties {
		return &v
	}).(ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) string { return v.AddRecommendedSignals }).(pulumi.StringOutput)
}

// Application Insights resource ID
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) ApplicationInsightsResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) string {
		return v.ApplicationInsightsResourceId
	}).(pulumi.StringOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) DiscoverRelationships() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) string { return v.DiscoverRelationships }).(pulumi.StringOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ApplicationInsightsTopology'.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) DiscoveryRuleKind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) string { return v.DiscoveryRuleKind }).(pulumi.StringOutput)
}

// Display name
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRuleProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationInsightsTopologyDiscoveryRuleProperties)(nil)).Elem()
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return o
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput {
	return o
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) Elem() ApplicationInsightsTopologyDiscoveryRulePropertiesOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) ApplicationInsightsTopologyDiscoveryRuleProperties {
		if v != nil {
			return *v
		}
		var ret ApplicationInsightsTopologyDiscoveryRuleProperties
		return ret
	}).(ApplicationInsightsTopologyDiscoveryRulePropertiesOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) AddRecommendedSignals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AddRecommendedSignals
	}).(pulumi.StringPtrOutput)
}

// Application Insights resource ID
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) ApplicationInsightsResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ApplicationInsightsResourceId
	}).(pulumi.StringPtrOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) DiscoverRelationships() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DiscoverRelationships
	}).(pulumi.StringPtrOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ApplicationInsightsTopology'.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) DiscoveryRuleKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DiscoveryRuleKind
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationInsightsTopologyDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Discovery rule properties for an Application Insights topology query
type ApplicationInsightsTopologyDiscoveryRulePropertiesResponse struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Application Insights resource ID
	ApplicationInsightsResourceId string `pulumi:"applicationInsightsResourceId"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Date when the discovery rule was (soft-)deleted.
	DeletionDate string `pulumi:"deletionDate"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships string `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ApplicationInsightsTopology'.
	DiscoveryRuleKind string `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Name of the entity which represents the discovery rule. Note: It might take a few minutes after creating the discovery rule until the entity is created.
	EntityName string `pulumi:"entityName"`
	// Error details if the last discovery operation failed.
	Error DiscoveryErrorResponse `pulumi:"error"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Discovery rule properties for an Application Insights topology query
type ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplicationInsightsTopologyDiscoveryRulePropertiesResponse)(nil)).Elem()
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput() ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput {
	return o
}

func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) ToApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutputWithContext(ctx context.Context) ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput {
	return o
}

// Whether to add all recommended signals to the discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string {
		return v.AddRecommendedSignals
	}).(pulumi.StringOutput)
}

// Application Insights resource ID
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) ApplicationInsightsResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string {
		return v.ApplicationInsightsResourceId
	}).(pulumi.StringOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string {
		return v.AuthenticationSetting
	}).(pulumi.StringOutput)
}

// Date when the discovery rule was (soft-)deleted.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) DiscoverRelationships() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string {
		return v.DiscoverRelationships
	}).(pulumi.StringOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ApplicationInsightsTopology'.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) DiscoveryRuleKind() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string { return v.DiscoveryRuleKind }).(pulumi.StringOutput)
}

// Display name
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the entity which represents the discovery rule. Note: It might take a few minutes after creating the discovery rule until the entity is created.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string { return v.EntityName }).(pulumi.StringOutput)
}

// Error details if the last discovery operation failed.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) Error() DiscoveryErrorResponseOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) DiscoveryErrorResponse {
		return v.Error
	}).(DiscoveryErrorResponseOutput)
}

// The status of the last operation.
func (o ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ApplicationInsightsTopologyDiscoveryRulePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// An arm role receiver.
type ArmRoleReceiver struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for ArmRoleReceiver
func (val *ArmRoleReceiver) Defaults() *ArmRoleReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// ArmRoleReceiverInput is an input type that accepts ArmRoleReceiverArgs and ArmRoleReceiverOutput values.
// You can construct a concrete instance of `ArmRoleReceiverInput` via:
//
//	ArmRoleReceiverArgs{...}
type ArmRoleReceiverInput interface {
	pulumi.Input

	ToArmRoleReceiverOutput() ArmRoleReceiverOutput
	ToArmRoleReceiverOutputWithContext(context.Context) ArmRoleReceiverOutput
}

// An arm role receiver.
type ArmRoleReceiverArgs struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The arm role id.
	RoleId pulumi.StringInput `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for ArmRoleReceiverArgs
func (val *ArmRoleReceiverArgs) Defaults() *ArmRoleReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ArmRoleReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutput() ArmRoleReceiverOutput {
	return i.ToArmRoleReceiverOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArgs) ToArmRoleReceiverOutputWithContext(ctx context.Context) ArmRoleReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverOutput)
}

// ArmRoleReceiverArrayInput is an input type that accepts ArmRoleReceiverArray and ArmRoleReceiverArrayOutput values.
// You can construct a concrete instance of `ArmRoleReceiverArrayInput` via:
//
//	ArmRoleReceiverArray{ ArmRoleReceiverArgs{...} }
type ArmRoleReceiverArrayInput interface {
	pulumi.Input

	ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput
	ToArmRoleReceiverArrayOutputWithContext(context.Context) ArmRoleReceiverArrayOutput
}

type ArmRoleReceiverArray []ArmRoleReceiverInput

func (ArmRoleReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiver)(nil)).Elem()
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput {
	return i.ToArmRoleReceiverArrayOutputWithContext(context.Background())
}

func (i ArmRoleReceiverArray) ToArmRoleReceiverArrayOutputWithContext(ctx context.Context) ArmRoleReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmRoleReceiverArrayOutput)
}

// An arm role receiver.
type ArmRoleReceiverOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiver)(nil)).Elem()
}

func (o ArmRoleReceiverOutput) ToArmRoleReceiverOutput() ArmRoleReceiverOutput {
	return o
}

func (o ArmRoleReceiverOutput) ToArmRoleReceiverOutputWithContext(ctx context.Context) ArmRoleReceiverOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiver) string { return v.RoleId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o ArmRoleReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmRoleReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ArmRoleReceiverArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiver)(nil)).Elem()
}

func (o ArmRoleReceiverArrayOutput) ToArmRoleReceiverArrayOutput() ArmRoleReceiverArrayOutput {
	return o
}

func (o ArmRoleReceiverArrayOutput) ToArmRoleReceiverArrayOutputWithContext(ctx context.Context) ArmRoleReceiverArrayOutput {
	return o
}

func (o ArmRoleReceiverArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiver {
		return vs[0].([]ArmRoleReceiver)[vs[1].(int)]
	}).(ArmRoleReceiverOutput)
}

// An arm role receiver.
type ArmRoleReceiverResponse struct {
	// The name of the arm role receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The arm role id.
	RoleId string `pulumi:"roleId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for ArmRoleReceiverResponse
func (val *ArmRoleReceiverResponse) Defaults() *ArmRoleReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// An arm role receiver.
type ArmRoleReceiverResponseOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutput() ArmRoleReceiverResponseOutput {
	return o
}

func (o ArmRoleReceiverResponseOutput) ToArmRoleReceiverResponseOutputWithContext(ctx context.Context) ArmRoleReceiverResponseOutput {
	return o
}

// The name of the arm role receiver. Names must be unique across all receivers within an action group.
func (o ArmRoleReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The arm role id.
func (o ArmRoleReceiverResponseOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) string { return v.RoleId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o ArmRoleReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArmRoleReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type ArmRoleReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ArmRoleReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArmRoleReceiverResponse)(nil)).Elem()
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutput() ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) ToArmRoleReceiverResponseArrayOutputWithContext(ctx context.Context) ArmRoleReceiverResponseArrayOutput {
	return o
}

func (o ArmRoleReceiverResponseArrayOutput) Index(i pulumi.IntInput) ArmRoleReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArmRoleReceiverResponse {
		return vs[0].([]ArmRoleReceiverResponse)[vs[1].(int)]
	}).(ArmRoleReceiverResponseOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiver struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// Defaults sets the appropriate defaults for AutomationRunbookReceiver
func (val *AutomationRunbookReceiver) Defaults() *AutomationRunbookReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// AutomationRunbookReceiverInput is an input type that accepts AutomationRunbookReceiverArgs and AutomationRunbookReceiverOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverInput` via:
//
//	AutomationRunbookReceiverArgs{...}
type AutomationRunbookReceiverInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput
	ToAutomationRunbookReceiverOutputWithContext(context.Context) AutomationRunbookReceiverOutput
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverArgs struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId pulumi.StringInput `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook pulumi.BoolInput `pulumi:"isGlobalRunbook"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity pulumi.StringPtrInput `pulumi:"managedIdentity"`
	// Indicates name of the webhook.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The name for this runbook.
	RunbookName pulumi.StringInput `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId pulumi.StringInput `pulumi:"webhookResourceId"`
}

// Defaults sets the appropriate defaults for AutomationRunbookReceiverArgs
func (val *AutomationRunbookReceiverArgs) Defaults() *AutomationRunbookReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (AutomationRunbookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return i.ToAutomationRunbookReceiverOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArgs) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverOutput)
}

// AutomationRunbookReceiverArrayInput is an input type that accepts AutomationRunbookReceiverArray and AutomationRunbookReceiverArrayOutput values.
// You can construct a concrete instance of `AutomationRunbookReceiverArrayInput` via:
//
//	AutomationRunbookReceiverArray{ AutomationRunbookReceiverArgs{...} }
type AutomationRunbookReceiverArrayInput interface {
	pulumi.Input

	ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput
	ToAutomationRunbookReceiverArrayOutputWithContext(context.Context) AutomationRunbookReceiverArrayOutput
}

type AutomationRunbookReceiverArray []AutomationRunbookReceiverInput

func (AutomationRunbookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return i.ToAutomationRunbookReceiverArrayOutputWithContext(context.Background())
}

func (i AutomationRunbookReceiverArray) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutomationRunbookReceiverArrayOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutput() AutomationRunbookReceiverOutput {
	return o
}

func (o AutomationRunbookReceiverOutput) ToAutomationRunbookReceiverOutputWithContext(ctx context.Context) AutomationRunbookReceiverOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o AutomationRunbookReceiverOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o AutomationRunbookReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiver) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiver)(nil)).Elem()
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutput() AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) ToAutomationRunbookReceiverArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverArrayOutput {
	return o
}

func (o AutomationRunbookReceiverArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiver {
		return vs[0].([]AutomationRunbookReceiver)[vs[1].(int)]
	}).(AutomationRunbookReceiverOutput)
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponse struct {
	// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
	AutomationAccountId string `pulumi:"automationAccountId"`
	// Indicates whether this instance is global runbook.
	IsGlobalRunbook bool `pulumi:"isGlobalRunbook"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// Indicates name of the webhook.
	Name *string `pulumi:"name"`
	// The name for this runbook.
	RunbookName string `pulumi:"runbookName"`
	// The URI where webhooks should be sent.
	ServiceUri *string `pulumi:"serviceUri"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
	// The resource id for webhook linked to this runbook.
	WebhookResourceId string `pulumi:"webhookResourceId"`
}

// Defaults sets the appropriate defaults for AutomationRunbookReceiverResponse
func (val *AutomationRunbookReceiverResponse) Defaults() *AutomationRunbookReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// The Azure Automation Runbook notification receiver.
type AutomationRunbookReceiverResponseOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutput() AutomationRunbookReceiverResponseOutput {
	return o
}

func (o AutomationRunbookReceiverResponseOutput) ToAutomationRunbookReceiverResponseOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseOutput {
	return o
}

// The Azure automation account Id which holds this runbook and authenticate to Azure resource.
func (o AutomationRunbookReceiverResponseOutput) AutomationAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.AutomationAccountId }).(pulumi.StringOutput)
}

// Indicates whether this instance is global runbook.
func (o AutomationRunbookReceiverResponseOutput) IsGlobalRunbook() pulumi.BoolOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) bool { return v.IsGlobalRunbook }).(pulumi.BoolOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o AutomationRunbookReceiverResponseOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// Indicates name of the webhook.
func (o AutomationRunbookReceiverResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The name for this runbook.
func (o AutomationRunbookReceiverResponseOutput) RunbookName() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.RunbookName }).(pulumi.StringOutput)
}

// The URI where webhooks should be sent.
func (o AutomationRunbookReceiverResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o AutomationRunbookReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

// The resource id for webhook linked to this runbook.
func (o AutomationRunbookReceiverResponseOutput) WebhookResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AutomationRunbookReceiverResponse) string { return v.WebhookResourceId }).(pulumi.StringOutput)
}

type AutomationRunbookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AutomationRunbookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutomationRunbookReceiverResponse)(nil)).Elem()
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutput() AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) ToAutomationRunbookReceiverResponseArrayOutputWithContext(ctx context.Context) AutomationRunbookReceiverResponseArrayOutput {
	return o
}

func (o AutomationRunbookReceiverResponseArrayOutput) Index(i pulumi.IntInput) AutomationRunbookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutomationRunbookReceiverResponse {
		return vs[0].([]AutomationRunbookReceiverResponse)[vs[1].(int)]
	}).(AutomationRunbookReceiverResponseOutput)
}

// Autoscale notification.
type AutoscaleNotification struct {
	// the email notification.
	Email *EmailNotification `pulumi:"email"`
	// the operation associated with the notification and its value must be "scale"
	Operation OperationType `pulumi:"operation"`
	// the collection of webhook notifications.
	Webhooks []WebhookNotification `pulumi:"webhooks"`
}

// Defaults sets the appropriate defaults for AutoscaleNotification
func (val *AutoscaleNotification) Defaults() *AutoscaleNotification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Email = tmp.Email.Defaults()

	return &tmp
}

// AutoscaleNotificationInput is an input type that accepts AutoscaleNotificationArgs and AutoscaleNotificationOutput values.
// You can construct a concrete instance of `AutoscaleNotificationInput` via:
//
//	AutoscaleNotificationArgs{...}
type AutoscaleNotificationInput interface {
	pulumi.Input

	ToAutoscaleNotificationOutput() AutoscaleNotificationOutput
	ToAutoscaleNotificationOutputWithContext(context.Context) AutoscaleNotificationOutput
}

// Autoscale notification.
type AutoscaleNotificationArgs struct {
	// the email notification.
	Email EmailNotificationPtrInput `pulumi:"email"`
	// the operation associated with the notification and its value must be "scale"
	Operation OperationTypeInput `pulumi:"operation"`
	// the collection of webhook notifications.
	Webhooks WebhookNotificationArrayInput `pulumi:"webhooks"`
}

// Defaults sets the appropriate defaults for AutoscaleNotificationArgs
func (val *AutoscaleNotificationArgs) Defaults() *AutoscaleNotificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AutoscaleNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleNotification)(nil)).Elem()
}

func (i AutoscaleNotificationArgs) ToAutoscaleNotificationOutput() AutoscaleNotificationOutput {
	return i.ToAutoscaleNotificationOutputWithContext(context.Background())
}

func (i AutoscaleNotificationArgs) ToAutoscaleNotificationOutputWithContext(ctx context.Context) AutoscaleNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleNotificationOutput)
}

// AutoscaleNotificationArrayInput is an input type that accepts AutoscaleNotificationArray and AutoscaleNotificationArrayOutput values.
// You can construct a concrete instance of `AutoscaleNotificationArrayInput` via:
//
//	AutoscaleNotificationArray{ AutoscaleNotificationArgs{...} }
type AutoscaleNotificationArrayInput interface {
	pulumi.Input

	ToAutoscaleNotificationArrayOutput() AutoscaleNotificationArrayOutput
	ToAutoscaleNotificationArrayOutputWithContext(context.Context) AutoscaleNotificationArrayOutput
}

type AutoscaleNotificationArray []AutoscaleNotificationInput

func (AutoscaleNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleNotification)(nil)).Elem()
}

func (i AutoscaleNotificationArray) ToAutoscaleNotificationArrayOutput() AutoscaleNotificationArrayOutput {
	return i.ToAutoscaleNotificationArrayOutputWithContext(context.Background())
}

func (i AutoscaleNotificationArray) ToAutoscaleNotificationArrayOutputWithContext(ctx context.Context) AutoscaleNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleNotificationArrayOutput)
}

// Autoscale notification.
type AutoscaleNotificationOutput struct{ *pulumi.OutputState }

func (AutoscaleNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleNotification)(nil)).Elem()
}

func (o AutoscaleNotificationOutput) ToAutoscaleNotificationOutput() AutoscaleNotificationOutput {
	return o
}

func (o AutoscaleNotificationOutput) ToAutoscaleNotificationOutputWithContext(ctx context.Context) AutoscaleNotificationOutput {
	return o
}

// the email notification.
func (o AutoscaleNotificationOutput) Email() EmailNotificationPtrOutput {
	return o.ApplyT(func(v AutoscaleNotification) *EmailNotification { return v.Email }).(EmailNotificationPtrOutput)
}

// the operation associated with the notification and its value must be "scale"
func (o AutoscaleNotificationOutput) Operation() OperationTypeOutput {
	return o.ApplyT(func(v AutoscaleNotification) OperationType { return v.Operation }).(OperationTypeOutput)
}

// the collection of webhook notifications.
func (o AutoscaleNotificationOutput) Webhooks() WebhookNotificationArrayOutput {
	return o.ApplyT(func(v AutoscaleNotification) []WebhookNotification { return v.Webhooks }).(WebhookNotificationArrayOutput)
}

type AutoscaleNotificationArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleNotification)(nil)).Elem()
}

func (o AutoscaleNotificationArrayOutput) ToAutoscaleNotificationArrayOutput() AutoscaleNotificationArrayOutput {
	return o
}

func (o AutoscaleNotificationArrayOutput) ToAutoscaleNotificationArrayOutputWithContext(ctx context.Context) AutoscaleNotificationArrayOutput {
	return o
}

func (o AutoscaleNotificationArrayOutput) Index(i pulumi.IntInput) AutoscaleNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleNotification {
		return vs[0].([]AutoscaleNotification)[vs[1].(int)]
	}).(AutoscaleNotificationOutput)
}

// Autoscale notification.
type AutoscaleNotificationResponse struct {
	// the email notification.
	Email *EmailNotificationResponse `pulumi:"email"`
	// the operation associated with the notification and its value must be "scale"
	Operation string `pulumi:"operation"`
	// the collection of webhook notifications.
	Webhooks []WebhookNotificationResponse `pulumi:"webhooks"`
}

// Defaults sets the appropriate defaults for AutoscaleNotificationResponse
func (val *AutoscaleNotificationResponse) Defaults() *AutoscaleNotificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Email = tmp.Email.Defaults()

	return &tmp
}

// Autoscale notification.
type AutoscaleNotificationResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleNotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleNotificationResponse)(nil)).Elem()
}

func (o AutoscaleNotificationResponseOutput) ToAutoscaleNotificationResponseOutput() AutoscaleNotificationResponseOutput {
	return o
}

func (o AutoscaleNotificationResponseOutput) ToAutoscaleNotificationResponseOutputWithContext(ctx context.Context) AutoscaleNotificationResponseOutput {
	return o
}

// the email notification.
func (o AutoscaleNotificationResponseOutput) Email() EmailNotificationResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleNotificationResponse) *EmailNotificationResponse { return v.Email }).(EmailNotificationResponsePtrOutput)
}

// the operation associated with the notification and its value must be "scale"
func (o AutoscaleNotificationResponseOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleNotificationResponse) string { return v.Operation }).(pulumi.StringOutput)
}

// the collection of webhook notifications.
func (o AutoscaleNotificationResponseOutput) Webhooks() WebhookNotificationResponseArrayOutput {
	return o.ApplyT(func(v AutoscaleNotificationResponse) []WebhookNotificationResponse { return v.Webhooks }).(WebhookNotificationResponseArrayOutput)
}

type AutoscaleNotificationResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleNotificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleNotificationResponse)(nil)).Elem()
}

func (o AutoscaleNotificationResponseArrayOutput) ToAutoscaleNotificationResponseArrayOutput() AutoscaleNotificationResponseArrayOutput {
	return o
}

func (o AutoscaleNotificationResponseArrayOutput) ToAutoscaleNotificationResponseArrayOutputWithContext(ctx context.Context) AutoscaleNotificationResponseArrayOutput {
	return o
}

func (o AutoscaleNotificationResponseArrayOutput) Index(i pulumi.IntInput) AutoscaleNotificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleNotificationResponse {
		return vs[0].([]AutoscaleNotificationResponse)[vs[1].(int)]
	}).(AutoscaleNotificationResponseOutput)
}

// Autoscale profile.
type AutoscaleProfile struct {
	// the number of instances that can be used during this profile.
	Capacity ScaleCapacity `pulumi:"capacity"`
	// the specific date-time for the profile. This element is not used if the Recurrence element is used.
	FixedDate *TimeWindow `pulumi:"fixedDate"`
	// the name of the profile.
	Name string `pulumi:"name"`
	// the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	Recurrence *Recurrence `pulumi:"recurrence"`
	// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
	Rules []ScaleRule `pulumi:"rules"`
}

// AutoscaleProfileInput is an input type that accepts AutoscaleProfileArgs and AutoscaleProfileOutput values.
// You can construct a concrete instance of `AutoscaleProfileInput` via:
//
//	AutoscaleProfileArgs{...}
type AutoscaleProfileInput interface {
	pulumi.Input

	ToAutoscaleProfileOutput() AutoscaleProfileOutput
	ToAutoscaleProfileOutputWithContext(context.Context) AutoscaleProfileOutput
}

// Autoscale profile.
type AutoscaleProfileArgs struct {
	// the number of instances that can be used during this profile.
	Capacity ScaleCapacityInput `pulumi:"capacity"`
	// the specific date-time for the profile. This element is not used if the Recurrence element is used.
	FixedDate TimeWindowPtrInput `pulumi:"fixedDate"`
	// the name of the profile.
	Name pulumi.StringInput `pulumi:"name"`
	// the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	Recurrence RecurrencePtrInput `pulumi:"recurrence"`
	// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
	Rules ScaleRuleArrayInput `pulumi:"rules"`
}

func (AutoscaleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return i.ToAutoscaleProfileOutputWithContext(context.Background())
}

func (i AutoscaleProfileArgs) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileOutput)
}

// AutoscaleProfileArrayInput is an input type that accepts AutoscaleProfileArray and AutoscaleProfileArrayOutput values.
// You can construct a concrete instance of `AutoscaleProfileArrayInput` via:
//
//	AutoscaleProfileArray{ AutoscaleProfileArgs{...} }
type AutoscaleProfileArrayInput interface {
	pulumi.Input

	ToAutoscaleProfileArrayOutput() AutoscaleProfileArrayOutput
	ToAutoscaleProfileArrayOutputWithContext(context.Context) AutoscaleProfileArrayOutput
}

type AutoscaleProfileArray []AutoscaleProfileInput

func (AutoscaleProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleProfile)(nil)).Elem()
}

func (i AutoscaleProfileArray) ToAutoscaleProfileArrayOutput() AutoscaleProfileArrayOutput {
	return i.ToAutoscaleProfileArrayOutputWithContext(context.Background())
}

func (i AutoscaleProfileArray) ToAutoscaleProfileArrayOutputWithContext(ctx context.Context) AutoscaleProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscaleProfileArrayOutput)
}

// Autoscale profile.
type AutoscaleProfileOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutput() AutoscaleProfileOutput {
	return o
}

func (o AutoscaleProfileOutput) ToAutoscaleProfileOutputWithContext(ctx context.Context) AutoscaleProfileOutput {
	return o
}

// the number of instances that can be used during this profile.
func (o AutoscaleProfileOutput) Capacity() ScaleCapacityOutput {
	return o.ApplyT(func(v AutoscaleProfile) ScaleCapacity { return v.Capacity }).(ScaleCapacityOutput)
}

// the specific date-time for the profile. This element is not used if the Recurrence element is used.
func (o AutoscaleProfileOutput) FixedDate() TimeWindowPtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *TimeWindow { return v.FixedDate }).(TimeWindowPtrOutput)
}

// the name of the profile.
func (o AutoscaleProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleProfile) string { return v.Name }).(pulumi.StringOutput)
}

// the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
func (o AutoscaleProfileOutput) Recurrence() RecurrencePtrOutput {
	return o.ApplyT(func(v AutoscaleProfile) *Recurrence { return v.Recurrence }).(RecurrencePtrOutput)
}

// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
func (o AutoscaleProfileOutput) Rules() ScaleRuleArrayOutput {
	return o.ApplyT(func(v AutoscaleProfile) []ScaleRule { return v.Rules }).(ScaleRuleArrayOutput)
}

type AutoscaleProfileArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleProfile)(nil)).Elem()
}

func (o AutoscaleProfileArrayOutput) ToAutoscaleProfileArrayOutput() AutoscaleProfileArrayOutput {
	return o
}

func (o AutoscaleProfileArrayOutput) ToAutoscaleProfileArrayOutputWithContext(ctx context.Context) AutoscaleProfileArrayOutput {
	return o
}

func (o AutoscaleProfileArrayOutput) Index(i pulumi.IntInput) AutoscaleProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleProfile {
		return vs[0].([]AutoscaleProfile)[vs[1].(int)]
	}).(AutoscaleProfileOutput)
}

// Autoscale profile.
type AutoscaleProfileResponse struct {
	// the number of instances that can be used during this profile.
	Capacity ScaleCapacityResponse `pulumi:"capacity"`
	// the specific date-time for the profile. This element is not used if the Recurrence element is used.
	FixedDate *TimeWindowResponse `pulumi:"fixedDate"`
	// the name of the profile.
	Name string `pulumi:"name"`
	// the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
	Recurrence *RecurrenceResponse `pulumi:"recurrence"`
	// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
	Rules []ScaleRuleResponse `pulumi:"rules"`
}

// Autoscale profile.
type AutoscaleProfileResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutput() AutoscaleProfileResponseOutput {
	return o
}

func (o AutoscaleProfileResponseOutput) ToAutoscaleProfileResponseOutputWithContext(ctx context.Context) AutoscaleProfileResponseOutput {
	return o
}

// the number of instances that can be used during this profile.
func (o AutoscaleProfileResponseOutput) Capacity() ScaleCapacityResponseOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) ScaleCapacityResponse { return v.Capacity }).(ScaleCapacityResponseOutput)
}

// the specific date-time for the profile. This element is not used if the Recurrence element is used.
func (o AutoscaleProfileResponseOutput) FixedDate() TimeWindowResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *TimeWindowResponse { return v.FixedDate }).(TimeWindowResponsePtrOutput)
}

// the name of the profile.
func (o AutoscaleProfileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) string { return v.Name }).(pulumi.StringOutput)
}

// the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
func (o AutoscaleProfileResponseOutput) Recurrence() RecurrenceResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) *RecurrenceResponse { return v.Recurrence }).(RecurrenceResponsePtrOutput)
}

// the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
func (o AutoscaleProfileResponseOutput) Rules() ScaleRuleResponseArrayOutput {
	return o.ApplyT(func(v AutoscaleProfileResponse) []ScaleRuleResponse { return v.Rules }).(ScaleRuleResponseArrayOutput)
}

type AutoscaleProfileResponseArrayOutput struct{ *pulumi.OutputState }

func (AutoscaleProfileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AutoscaleProfileResponse)(nil)).Elem()
}

func (o AutoscaleProfileResponseArrayOutput) ToAutoscaleProfileResponseArrayOutput() AutoscaleProfileResponseArrayOutput {
	return o
}

func (o AutoscaleProfileResponseArrayOutput) ToAutoscaleProfileResponseArrayOutputWithContext(ctx context.Context) AutoscaleProfileResponseArrayOutput {
	return o
}

func (o AutoscaleProfileResponseArrayOutput) Index(i pulumi.IntInput) AutoscaleProfileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AutoscaleProfileResponse {
		return vs[0].([]AutoscaleProfileResponse)[vs[1].(int)]
	}).(AutoscaleProfileResponseOutput)
}

// A setting that contains all of the configuration for the automatic scaling of a resource.
type AutoscaleSettingResponse struct {
	// the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.
	Enabled *bool `pulumi:"enabled"`
	// the name of the autoscale setting.
	Name *string `pulumi:"name"`
	// the collection of notifications.
	Notifications []AutoscaleNotificationResponse `pulumi:"notifications"`
	// the predictive autoscale policy mode.
	PredictiveAutoscalePolicy *PredictiveAutoscalePolicyResponse `pulumi:"predictiveAutoscalePolicy"`
	// the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
	Profiles []AutoscaleProfileResponse `pulumi:"profiles"`
	// the location of the resource that the autoscale setting should be added to.
	TargetResourceLocation *string `pulumi:"targetResourceLocation"`
	// the resource identifier of the resource that the autoscale setting should be added to.
	TargetResourceUri *string `pulumi:"targetResourceUri"`
}

// Defaults sets the appropriate defaults for AutoscaleSettingResponse
func (val *AutoscaleSettingResponse) Defaults() *AutoscaleSettingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Enabled == nil {
		enabled_ := false
		tmp.Enabled = &enabled_
	}
	return &tmp
}

// A setting that contains all of the configuration for the automatic scaling of a resource.
type AutoscaleSettingResponseOutput struct{ *pulumi.OutputState }

func (AutoscaleSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscaleSettingResponse)(nil)).Elem()
}

func (o AutoscaleSettingResponseOutput) ToAutoscaleSettingResponseOutput() AutoscaleSettingResponseOutput {
	return o
}

func (o AutoscaleSettingResponseOutput) ToAutoscaleSettingResponseOutputWithContext(ctx context.Context) AutoscaleSettingResponseOutput {
	return o
}

// the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'false'.
func (o AutoscaleSettingResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// the name of the autoscale setting.
func (o AutoscaleSettingResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// the collection of notifications.
func (o AutoscaleSettingResponseOutput) Notifications() AutoscaleNotificationResponseArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) []AutoscaleNotificationResponse { return v.Notifications }).(AutoscaleNotificationResponseArrayOutput)
}

// the predictive autoscale policy mode.
func (o AutoscaleSettingResponseOutput) PredictiveAutoscalePolicy() PredictiveAutoscalePolicyResponsePtrOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) *PredictiveAutoscalePolicyResponse {
		return v.PredictiveAutoscalePolicy
	}).(PredictiveAutoscalePolicyResponsePtrOutput)
}

// the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
func (o AutoscaleSettingResponseOutput) Profiles() AutoscaleProfileResponseArrayOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) []AutoscaleProfileResponse { return v.Profiles }).(AutoscaleProfileResponseArrayOutput)
}

// the location of the resource that the autoscale setting should be added to.
func (o AutoscaleSettingResponseOutput) TargetResourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) *string { return v.TargetResourceLocation }).(pulumi.StringPtrOutput)
}

// the resource identifier of the resource that the autoscale setting should be added to.
func (o AutoscaleSettingResponseOutput) TargetResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoscaleSettingResponse) *string { return v.TargetResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiver struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
}

// AzureAppPushReceiverInput is an input type that accepts AzureAppPushReceiverArgs and AzureAppPushReceiverOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverInput` via:
//
//	AzureAppPushReceiverArgs{...}
type AzureAppPushReceiverInput interface {
	pulumi.Input

	ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput
	ToAzureAppPushReceiverOutputWithContext(context.Context) AzureAppPushReceiverOutput
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverArgs struct {
	// The email address registered for the Azure mobile app.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within a tenant action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (AzureAppPushReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return i.ToAzureAppPushReceiverOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArgs) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverOutput)
}

// AzureAppPushReceiverArrayInput is an input type that accepts AzureAppPushReceiverArray and AzureAppPushReceiverArrayOutput values.
// You can construct a concrete instance of `AzureAppPushReceiverArrayInput` via:
//
//	AzureAppPushReceiverArray{ AzureAppPushReceiverArgs{...} }
type AzureAppPushReceiverArrayInput interface {
	pulumi.Input

	ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput
	ToAzureAppPushReceiverArrayOutputWithContext(context.Context) AzureAppPushReceiverArrayOutput
}

type AzureAppPushReceiverArray []AzureAppPushReceiverInput

func (AzureAppPushReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return i.ToAzureAppPushReceiverArrayOutputWithContext(context.Background())
}

func (i AzureAppPushReceiverArray) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureAppPushReceiverArrayOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutput() AzureAppPushReceiverOutput {
	return o
}

func (o AzureAppPushReceiverOutput) ToAzureAppPushReceiverOutputWithContext(ctx context.Context) AzureAppPushReceiverOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within a tenant action group.
func (o AzureAppPushReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiver)(nil)).Elem()
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutput() AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) ToAzureAppPushReceiverArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverArrayOutput {
	return o
}

func (o AzureAppPushReceiverArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiver {
		return vs[0].([]AzureAppPushReceiver)[vs[1].(int)]
	}).(AzureAppPushReceiverOutput)
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponse struct {
	// The email address registered for the Azure mobile app.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the Azure mobile app push receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
}

// The Azure mobile App push notification receiver.
type AzureAppPushReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutput() AzureAppPushReceiverResponseOutput {
	return o
}

func (o AzureAppPushReceiverResponseOutput) ToAzureAppPushReceiverResponseOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseOutput {
	return o
}

// The email address registered for the Azure mobile app.
func (o AzureAppPushReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the Azure mobile app push receiver. Names must be unique across all receivers within a tenant action group.
func (o AzureAppPushReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureAppPushReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type AzureAppPushReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureAppPushReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureAppPushReceiverResponse)(nil)).Elem()
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutput() AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) ToAzureAppPushReceiverResponseArrayOutputWithContext(ctx context.Context) AzureAppPushReceiverResponseArrayOutput {
	return o
}

func (o AzureAppPushReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureAppPushReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureAppPushReceiverResponse {
		return vs[0].([]AzureAppPushReceiverResponse)[vs[1].(int)]
	}).(AzureAppPushReceiverResponseOutput)
}

// An azure function receiver.
type AzureFunctionReceiver struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for AzureFunctionReceiver
func (val *AzureFunctionReceiver) Defaults() *AzureFunctionReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// AzureFunctionReceiverInput is an input type that accepts AzureFunctionReceiverArgs and AzureFunctionReceiverOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverInput` via:
//
//	AzureFunctionReceiverArgs{...}
type AzureFunctionReceiverInput interface {
	pulumi.Input

	ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput
	ToAzureFunctionReceiverOutputWithContext(context.Context) AzureFunctionReceiverOutput
}

// An azure function receiver.
type AzureFunctionReceiverArgs struct {
	// The azure resource id of the function app.
	FunctionAppResourceId pulumi.StringInput `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName pulumi.StringInput `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl pulumi.StringInput `pulumi:"httpTriggerUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity pulumi.StringPtrInput `pulumi:"managedIdentity"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for AzureFunctionReceiverArgs
func (val *AzureFunctionReceiverArgs) Defaults() *AzureFunctionReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (AzureFunctionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return i.ToAzureFunctionReceiverOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArgs) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverOutput)
}

// AzureFunctionReceiverArrayInput is an input type that accepts AzureFunctionReceiverArray and AzureFunctionReceiverArrayOutput values.
// You can construct a concrete instance of `AzureFunctionReceiverArrayInput` via:
//
//	AzureFunctionReceiverArray{ AzureFunctionReceiverArgs{...} }
type AzureFunctionReceiverArrayInput interface {
	pulumi.Input

	ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput
	ToAzureFunctionReceiverArrayOutputWithContext(context.Context) AzureFunctionReceiverArrayOutput
}

type AzureFunctionReceiverArray []AzureFunctionReceiverInput

func (AzureFunctionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return i.ToAzureFunctionReceiverArrayOutputWithContext(context.Background())
}

func (i AzureFunctionReceiverArray) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFunctionReceiverArrayOutput)
}

// An azure function receiver.
type AzureFunctionReceiverOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutput() AzureFunctionReceiverOutput {
	return o
}

func (o AzureFunctionReceiverOutput) ToAzureFunctionReceiverOutputWithContext(ctx context.Context) AzureFunctionReceiverOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o AzureFunctionReceiverOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o AzureFunctionReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFunctionReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type AzureFunctionReceiverArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiver)(nil)).Elem()
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutput() AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) ToAzureFunctionReceiverArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverArrayOutput {
	return o
}

func (o AzureFunctionReceiverArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiver {
		return vs[0].([]AzureFunctionReceiver)[vs[1].(int)]
	}).(AzureFunctionReceiverOutput)
}

// An azure function receiver.
type AzureFunctionReceiverResponse struct {
	// The azure resource id of the function app.
	FunctionAppResourceId string `pulumi:"functionAppResourceId"`
	// The function name in the function app.
	FunctionName string `pulumi:"functionName"`
	// The http trigger url where http request sent to.
	HttpTriggerUrl string `pulumi:"httpTriggerUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the azure function receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for AzureFunctionReceiverResponse
func (val *AzureFunctionReceiverResponse) Defaults() *AzureFunctionReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// An azure function receiver.
type AzureFunctionReceiverResponseOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutput() AzureFunctionReceiverResponseOutput {
	return o
}

func (o AzureFunctionReceiverResponseOutput) ToAzureFunctionReceiverResponseOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseOutput {
	return o
}

// The azure resource id of the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionAppResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionAppResourceId }).(pulumi.StringOutput)
}

// The function name in the function app.
func (o AzureFunctionReceiverResponseOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The http trigger url where http request sent to.
func (o AzureFunctionReceiverResponseOutput) HttpTriggerUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.HttpTriggerUrl }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o AzureFunctionReceiverResponseOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the azure function receiver. Names must be unique across all receivers within an action group.
func (o AzureFunctionReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o AzureFunctionReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureFunctionReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type AzureFunctionReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (AzureFunctionReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AzureFunctionReceiverResponse)(nil)).Elem()
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutput() AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) ToAzureFunctionReceiverResponseArrayOutputWithContext(ctx context.Context) AzureFunctionReceiverResponseArrayOutput {
	return o
}

func (o AzureFunctionReceiverResponseArrayOutput) Index(i pulumi.IntInput) AzureFunctionReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AzureFunctionReceiverResponse {
		return vs[0].([]AzureFunctionReceiverResponse)[vs[1].(int)]
	}).(AzureFunctionReceiverResponseOutput)
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfig struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl string `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule string `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMap `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream string `pulumi:"stream"`
}

// AzureMonitorWorkspaceLogsApiConfigInput is an input type that accepts AzureMonitorWorkspaceLogsApiConfigArgs and AzureMonitorWorkspaceLogsApiConfigOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsApiConfigInput` via:
//
//	AzureMonitorWorkspaceLogsApiConfigArgs{...}
type AzureMonitorWorkspaceLogsApiConfigInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput
	ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(context.Context) AzureMonitorWorkspaceLogsApiConfigOutput
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigArgs struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl pulumi.StringInput `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule pulumi.StringInput `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMapInput `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream pulumi.StringInput `pulumi:"stream"`
}

func (AzureMonitorWorkspaceLogsApiConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsApiConfigArgs) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigOutput).ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx)
}

// AzureMonitorWorkspaceLogsApiConfigPtrInput is an input type that accepts AzureMonitorWorkspaceLogsApiConfigArgs, AzureMonitorWorkspaceLogsApiConfigPtr and AzureMonitorWorkspaceLogsApiConfigPtrOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsApiConfigPtrInput` via:
//
//	        AzureMonitorWorkspaceLogsApiConfigArgs{...}
//
//	or:
//
//	        nil
type AzureMonitorWorkspaceLogsApiConfigPtrInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput
	ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput
}

type azureMonitorWorkspaceLogsApiConfigPtrType AzureMonitorWorkspaceLogsApiConfigArgs

func AzureMonitorWorkspaceLogsApiConfigPtr(v *AzureMonitorWorkspaceLogsApiConfigArgs) AzureMonitorWorkspaceLogsApiConfigPtrInput {
	return (*azureMonitorWorkspaceLogsApiConfigPtrType)(v)
}

func (*azureMonitorWorkspaceLogsApiConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (i *azureMonitorWorkspaceLogsApiConfigPtrType) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (i *azureMonitorWorkspaceLogsApiConfigPtrType) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigOutput() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(context.Background())
}

func (o AzureMonitorWorkspaceLogsApiConfigOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMonitorWorkspaceLogsApiConfig) *AzureMonitorWorkspaceLogsApiConfig {
		return &v
	}).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) DataCollectionEndpointUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.DataCollectionEndpointUrl }).(pulumi.StringOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) DataCollectionRule() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.DataCollectionRule }).(pulumi.StringOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) Schema() SchemaMapOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) SchemaMap { return v.Schema }).(SchemaMapOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfig) string { return v.Stream }).(pulumi.StringOutput)
}

type AzureMonitorWorkspaceLogsApiConfigPtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfig)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutput() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) ToAzureMonitorWorkspaceLogsApiConfigPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Elem() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) AzureMonitorWorkspaceLogsApiConfig {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsApiConfig
		return ret
	}).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) DataCollectionEndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) DataCollectionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRule
	}).(pulumi.StringPtrOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Schema() SchemaMapPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *SchemaMap {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(SchemaMapPtrOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Stream
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigResponse struct {
	// Data collection endpoint ingestion url.
	DataCollectionEndpointUrl string `pulumi:"dataCollectionEndpointUrl"`
	// Data Collection Rule (DCR) immutable id.
	DataCollectionRule string `pulumi:"dataCollectionRule"`
	// The schema mapping for incoming data.
	Schema SchemaMapResponse `pulumi:"schema"`
	// Stream name in destination. Azure Monitor stream is related to the destination table.
	Stream string `pulumi:"stream"`
}

// Azure Monitor Workspace Logs Api configurations.
type AzureMonitorWorkspaceLogsApiConfigResponseOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsApiConfigResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) ToAzureMonitorWorkspaceLogsApiConfigResponseOutput() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) ToAzureMonitorWorkspaceLogsApiConfigResponseOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) DataCollectionEndpointUrl() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.DataCollectionEndpointUrl }).(pulumi.StringOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) DataCollectionRule() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.DataCollectionRule }).(pulumi.StringOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) Schema() SchemaMapResponseOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) SchemaMapResponse { return v.Schema }).(SchemaMapResponseOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigResponseOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsApiConfigResponse) string { return v.Stream }).(pulumi.StringOutput)
}

type AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsApiConfigResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ToAzureMonitorWorkspaceLogsApiConfigResponsePtrOutput() AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) ToAzureMonitorWorkspaceLogsApiConfigResponsePtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Elem() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) AzureMonitorWorkspaceLogsApiConfigResponse {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsApiConfigResponse
		return ret
	}).(AzureMonitorWorkspaceLogsApiConfigResponseOutput)
}

// Data collection endpoint ingestion url.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) DataCollectionEndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionEndpointUrl
	}).(pulumi.StringPtrOutput)
}

// Data Collection Rule (DCR) immutable id.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) DataCollectionRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DataCollectionRule
	}).(pulumi.StringPtrOutput)
}

// The schema mapping for incoming data.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Schema() SchemaMapResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *SchemaMapResponse {
		if v == nil {
			return nil
		}
		return &v.Schema
	}).(SchemaMapResponsePtrOutput)
}

// Stream name in destination. Azure Monitor stream is related to the destination table.
func (o AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsApiConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Stream
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporter struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfig `pulumi:"api"`
	// Cache configurations.
	Cache *CacheConfiguration `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency *ConcurrencyConfiguration `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporter
func (val *AzureMonitorWorkspaceLogsExporter) Defaults() *AzureMonitorWorkspaceLogsExporter {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Concurrency = tmp.Concurrency.Defaults()

	return &tmp
}

// AzureMonitorWorkspaceLogsExporterInput is an input type that accepts AzureMonitorWorkspaceLogsExporterArgs and AzureMonitorWorkspaceLogsExporterOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsExporterInput` via:
//
//	AzureMonitorWorkspaceLogsExporterArgs{...}
type AzureMonitorWorkspaceLogsExporterInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput
	ToAzureMonitorWorkspaceLogsExporterOutputWithContext(context.Context) AzureMonitorWorkspaceLogsExporterOutput
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterArgs struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfigInput `pulumi:"api"`
	// Cache configurations.
	Cache CacheConfigurationPtrInput `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency ConcurrencyConfigurationPtrInput `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporterArgs
func (val *AzureMonitorWorkspaceLogsExporterArgs) Defaults() *AzureMonitorWorkspaceLogsExporterArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AzureMonitorWorkspaceLogsExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterOutput)
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceLogsExporterArgs) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterOutput).ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx)
}

// AzureMonitorWorkspaceLogsExporterPtrInput is an input type that accepts AzureMonitorWorkspaceLogsExporterArgs, AzureMonitorWorkspaceLogsExporterPtr and AzureMonitorWorkspaceLogsExporterPtrOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceLogsExporterPtrInput` via:
//
//	        AzureMonitorWorkspaceLogsExporterArgs{...}
//
//	or:
//
//	        nil
type AzureMonitorWorkspaceLogsExporterPtrInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput
	ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput
}

type azureMonitorWorkspaceLogsExporterPtrType AzureMonitorWorkspaceLogsExporterArgs

func AzureMonitorWorkspaceLogsExporterPtr(v *AzureMonitorWorkspaceLogsExporterArgs) AzureMonitorWorkspaceLogsExporterPtrInput {
	return (*azureMonitorWorkspaceLogsExporterPtrType)(v)
}

func (*azureMonitorWorkspaceLogsExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (i *azureMonitorWorkspaceLogsExporterPtrType) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return i.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (i *azureMonitorWorkspaceLogsExporterPtrType) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterOutput() AzureMonitorWorkspaceLogsExporterOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(context.Background())
}

func (o AzureMonitorWorkspaceLogsExporterOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMonitorWorkspaceLogsExporter) *AzureMonitorWorkspaceLogsExporter {
		return &v
	}).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterOutput) Api() AzureMonitorWorkspaceLogsApiConfigOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) AzureMonitorWorkspaceLogsApiConfig { return v.Api }).(AzureMonitorWorkspaceLogsApiConfigOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterOutput) Cache() CacheConfigurationPtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) *CacheConfiguration { return v.Cache }).(CacheConfigurationPtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterOutput) Concurrency() ConcurrencyConfigurationPtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporter) *ConcurrencyConfiguration { return v.Concurrency }).(ConcurrencyConfigurationPtrOutput)
}

type AzureMonitorWorkspaceLogsExporterPtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporter)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutput() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) ToAzureMonitorWorkspaceLogsExporterPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Elem() AzureMonitorWorkspaceLogsExporterOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) AzureMonitorWorkspaceLogsExporter {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsExporter
		return ret
	}).(AzureMonitorWorkspaceLogsExporterOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Api() AzureMonitorWorkspaceLogsApiConfigPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *AzureMonitorWorkspaceLogsApiConfig {
		if v == nil {
			return nil
		}
		return &v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigPtrOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Cache() CacheConfigurationPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *CacheConfiguration {
		if v == nil {
			return nil
		}
		return v.Cache
	}).(CacheConfigurationPtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterPtrOutput) Concurrency() ConcurrencyConfigurationPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporter) *ConcurrencyConfiguration {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(ConcurrencyConfigurationPtrOutput)
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterResponse struct {
	// API configurations for Azure Monitor workspace exporter.
	Api AzureMonitorWorkspaceLogsApiConfigResponse `pulumi:"api"`
	// Cache configurations.
	Cache *CacheConfigurationResponse `pulumi:"cache"`
	// Concurrency configuration for the exporter.
	Concurrency *ConcurrencyConfigurationResponse `pulumi:"concurrency"`
}

// Defaults sets the appropriate defaults for AzureMonitorWorkspaceLogsExporterResponse
func (val *AzureMonitorWorkspaceLogsExporterResponse) Defaults() *AzureMonitorWorkspaceLogsExporterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Concurrency = tmp.Concurrency.Defaults()

	return &tmp
}

// Azure Monitor Workspace Logs specific configurations.
type AzureMonitorWorkspaceLogsExporterResponseOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceLogsExporterResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterResponseOutput) ToAzureMonitorWorkspaceLogsExporterResponseOutput() AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponseOutput) ToAzureMonitorWorkspaceLogsExporterResponseOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Api() AzureMonitorWorkspaceLogsApiConfigResponseOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) AzureMonitorWorkspaceLogsApiConfigResponse {
		return v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigResponseOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Cache() CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) *CacheConfigurationResponse { return v.Cache }).(CacheConfigurationResponsePtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterResponseOutput) Concurrency() ConcurrencyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceLogsExporterResponse) *ConcurrencyConfigurationResponse {
		return v.Concurrency
	}).(ConcurrencyConfigurationResponsePtrOutput)
}

type AzureMonitorWorkspaceLogsExporterResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceLogsExporterResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ToAzureMonitorWorkspaceLogsExporterResponsePtrOutput() AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) ToAzureMonitorWorkspaceLogsExporterResponsePtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Elem() AzureMonitorWorkspaceLogsExporterResponseOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) AzureMonitorWorkspaceLogsExporterResponse {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceLogsExporterResponse
		return ret
	}).(AzureMonitorWorkspaceLogsExporterResponseOutput)
}

// API configurations for Azure Monitor workspace exporter.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Api() AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *AzureMonitorWorkspaceLogsApiConfigResponse {
		if v == nil {
			return nil
		}
		return &v.Api
	}).(AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput)
}

// Cache configurations.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Cache() CacheConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *CacheConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Cache
	}).(CacheConfigurationResponsePtrOutput)
}

// Concurrency configuration for the exporter.
func (o AzureMonitorWorkspaceLogsExporterResponsePtrOutput) Concurrency() ConcurrencyConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceLogsExporterResponse) *ConcurrencyConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Concurrency
	}).(ConcurrencyConfigurationResponsePtrOutput)
}

// The Data Collection Rule and Endpoint used for ingestion by default.
type AzureMonitorWorkspaceResponseDefaultIngestionSettings struct {
	// The Azure resource Id of the default data collection endpoint for this Azure Monitor Workspace.
	DataCollectionEndpointResourceId string `pulumi:"dataCollectionEndpointResourceId"`
	// The Azure resource Id of the default data collection rule for this Azure Monitor Workspace.
	DataCollectionRuleResourceId string `pulumi:"dataCollectionRuleResourceId"`
}

// The Data Collection Rule and Endpoint used for ingestion by default.
type AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceResponseDefaultIngestionSettings)(nil)).Elem()
}

func (o AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput) ToAzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput() AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput {
	return o
}

func (o AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput) ToAzureMonitorWorkspaceResponseDefaultIngestionSettingsOutputWithContext(ctx context.Context) AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput {
	return o
}

// The Azure resource Id of the default data collection endpoint for this Azure Monitor Workspace.
func (o AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput) DataCollectionEndpointResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceResponseDefaultIngestionSettings) string {
		return v.DataCollectionEndpointResourceId
	}).(pulumi.StringOutput)
}

// The Azure resource Id of the default data collection rule for this Azure Monitor Workspace.
func (o AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput) DataCollectionRuleResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceResponseDefaultIngestionSettings) string {
		return v.DataCollectionRuleResourceId
	}).(pulumi.StringOutput)
}

// Properties related to the metrics container in the Azure Monitor Workspace
type AzureMonitorWorkspaceResponseMetrics struct {
	// An internal identifier for the metrics container. Only to be used by the system
	InternalId string `pulumi:"internalId"`
	// The Prometheus query endpoint for the Azure Monitor Workspace
	PrometheusQueryEndpoint string `pulumi:"prometheusQueryEndpoint"`
}

// Properties related to the metrics container in the Azure Monitor Workspace
type AzureMonitorWorkspaceResponseMetricsOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceResponseMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceResponseMetrics)(nil)).Elem()
}

func (o AzureMonitorWorkspaceResponseMetricsOutput) ToAzureMonitorWorkspaceResponseMetricsOutput() AzureMonitorWorkspaceResponseMetricsOutput {
	return o
}

func (o AzureMonitorWorkspaceResponseMetricsOutput) ToAzureMonitorWorkspaceResponseMetricsOutputWithContext(ctx context.Context) AzureMonitorWorkspaceResponseMetricsOutput {
	return o
}

// An internal identifier for the metrics container. Only to be used by the system
func (o AzureMonitorWorkspaceResponseMetricsOutput) InternalId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceResponseMetrics) string { return v.InternalId }).(pulumi.StringOutput)
}

// The Prometheus query endpoint for the Azure Monitor Workspace
func (o AzureMonitorWorkspaceResponseMetricsOutput) PrometheusQueryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceResponseMetrics) string { return v.PrometheusQueryEndpoint }).(pulumi.StringOutput)
}

// A grouping of signal assignments for a Azure Monitor Workspace
type AzureMonitorWorkspaceSignalGroup struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Azure Monitor workspace resource ID
	AzureMonitorWorkspaceResourceId string `pulumi:"azureMonitorWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignment `pulumi:"signalAssignments"`
}

// AzureMonitorWorkspaceSignalGroupInput is an input type that accepts AzureMonitorWorkspaceSignalGroupArgs and AzureMonitorWorkspaceSignalGroupOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceSignalGroupInput` via:
//
//	AzureMonitorWorkspaceSignalGroupArgs{...}
type AzureMonitorWorkspaceSignalGroupInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceSignalGroupOutput() AzureMonitorWorkspaceSignalGroupOutput
	ToAzureMonitorWorkspaceSignalGroupOutputWithContext(context.Context) AzureMonitorWorkspaceSignalGroupOutput
}

// A grouping of signal assignments for a Azure Monitor Workspace
type AzureMonitorWorkspaceSignalGroupArgs struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting pulumi.StringInput `pulumi:"authenticationSetting"`
	// Azure Monitor workspace resource ID
	AzureMonitorWorkspaceResourceId pulumi.StringInput `pulumi:"azureMonitorWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments SignalAssignmentArrayInput `pulumi:"signalAssignments"`
}

func (AzureMonitorWorkspaceSignalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceSignalGroup)(nil)).Elem()
}

func (i AzureMonitorWorkspaceSignalGroupArgs) ToAzureMonitorWorkspaceSignalGroupOutput() AzureMonitorWorkspaceSignalGroupOutput {
	return i.ToAzureMonitorWorkspaceSignalGroupOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceSignalGroupArgs) ToAzureMonitorWorkspaceSignalGroupOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceSignalGroupOutput)
}

func (i AzureMonitorWorkspaceSignalGroupArgs) ToAzureMonitorWorkspaceSignalGroupPtrOutput() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return i.ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(context.Background())
}

func (i AzureMonitorWorkspaceSignalGroupArgs) ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceSignalGroupOutput).ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(ctx)
}

// AzureMonitorWorkspaceSignalGroupPtrInput is an input type that accepts AzureMonitorWorkspaceSignalGroupArgs, AzureMonitorWorkspaceSignalGroupPtr and AzureMonitorWorkspaceSignalGroupPtrOutput values.
// You can construct a concrete instance of `AzureMonitorWorkspaceSignalGroupPtrInput` via:
//
//	        AzureMonitorWorkspaceSignalGroupArgs{...}
//
//	or:
//
//	        nil
type AzureMonitorWorkspaceSignalGroupPtrInput interface {
	pulumi.Input

	ToAzureMonitorWorkspaceSignalGroupPtrOutput() AzureMonitorWorkspaceSignalGroupPtrOutput
	ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(context.Context) AzureMonitorWorkspaceSignalGroupPtrOutput
}

type azureMonitorWorkspaceSignalGroupPtrType AzureMonitorWorkspaceSignalGroupArgs

func AzureMonitorWorkspaceSignalGroupPtr(v *AzureMonitorWorkspaceSignalGroupArgs) AzureMonitorWorkspaceSignalGroupPtrInput {
	return (*azureMonitorWorkspaceSignalGroupPtrType)(v)
}

func (*azureMonitorWorkspaceSignalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceSignalGroup)(nil)).Elem()
}

func (i *azureMonitorWorkspaceSignalGroupPtrType) ToAzureMonitorWorkspaceSignalGroupPtrOutput() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return i.ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(context.Background())
}

func (i *azureMonitorWorkspaceSignalGroupPtrType) ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureMonitorWorkspaceSignalGroupPtrOutput)
}

// A grouping of signal assignments for a Azure Monitor Workspace
type AzureMonitorWorkspaceSignalGroupOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceSignalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceSignalGroup)(nil)).Elem()
}

func (o AzureMonitorWorkspaceSignalGroupOutput) ToAzureMonitorWorkspaceSignalGroupOutput() AzureMonitorWorkspaceSignalGroupOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupOutput) ToAzureMonitorWorkspaceSignalGroupOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupOutput) ToAzureMonitorWorkspaceSignalGroupPtrOutput() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o.ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(context.Background())
}

func (o AzureMonitorWorkspaceSignalGroupOutput) ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureMonitorWorkspaceSignalGroup) *AzureMonitorWorkspaceSignalGroup {
		return &v
	}).(AzureMonitorWorkspaceSignalGroupPtrOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureMonitorWorkspaceSignalGroupOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroup) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Azure Monitor workspace resource ID
func (o AzureMonitorWorkspaceSignalGroupOutput) AzureMonitorWorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroup) string { return v.AzureMonitorWorkspaceResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureMonitorWorkspaceSignalGroupOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroup) []SignalAssignment { return v.SignalAssignments }).(SignalAssignmentArrayOutput)
}

type AzureMonitorWorkspaceSignalGroupPtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceSignalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceSignalGroup)(nil)).Elem()
}

func (o AzureMonitorWorkspaceSignalGroupPtrOutput) ToAzureMonitorWorkspaceSignalGroupPtrOutput() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupPtrOutput) ToAzureMonitorWorkspaceSignalGroupPtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupPtrOutput) Elem() AzureMonitorWorkspaceSignalGroupOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroup) AzureMonitorWorkspaceSignalGroup {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceSignalGroup
		return ret
	}).(AzureMonitorWorkspaceSignalGroupOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureMonitorWorkspaceSignalGroupPtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor workspace resource ID
func (o AzureMonitorWorkspaceSignalGroupPtrOutput) AzureMonitorWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AzureMonitorWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureMonitorWorkspaceSignalGroupPtrOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroup) []SignalAssignment {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentArrayOutput)
}

// A grouping of signal assignments for a Azure Monitor Workspace
type AzureMonitorWorkspaceSignalGroupResponse struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Azure Monitor workspace resource ID
	AzureMonitorWorkspaceResourceId string `pulumi:"azureMonitorWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignmentResponse `pulumi:"signalAssignments"`
}

// A grouping of signal assignments for a Azure Monitor Workspace
type AzureMonitorWorkspaceSignalGroupResponseOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceSignalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMonitorWorkspaceSignalGroupResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceSignalGroupResponseOutput) ToAzureMonitorWorkspaceSignalGroupResponseOutput() AzureMonitorWorkspaceSignalGroupResponseOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupResponseOutput) ToAzureMonitorWorkspaceSignalGroupResponseOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupResponseOutput {
	return o
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureMonitorWorkspaceSignalGroupResponseOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroupResponse) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Azure Monitor workspace resource ID
func (o AzureMonitorWorkspaceSignalGroupResponseOutput) AzureMonitorWorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroupResponse) string { return v.AzureMonitorWorkspaceResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureMonitorWorkspaceSignalGroupResponseOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v AzureMonitorWorkspaceSignalGroupResponse) []SignalAssignmentResponse {
		return v.SignalAssignments
	}).(SignalAssignmentResponseArrayOutput)
}

type AzureMonitorWorkspaceSignalGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMonitorWorkspaceSignalGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMonitorWorkspaceSignalGroupResponse)(nil)).Elem()
}

func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) ToAzureMonitorWorkspaceSignalGroupResponsePtrOutput() AzureMonitorWorkspaceSignalGroupResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) ToAzureMonitorWorkspaceSignalGroupResponsePtrOutputWithContext(ctx context.Context) AzureMonitorWorkspaceSignalGroupResponsePtrOutput {
	return o
}

func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) Elem() AzureMonitorWorkspaceSignalGroupResponseOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroupResponse) AzureMonitorWorkspaceSignalGroupResponse {
		if v != nil {
			return *v
		}
		var ret AzureMonitorWorkspaceSignalGroupResponse
		return ret
	}).(AzureMonitorWorkspaceSignalGroupResponseOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor workspace resource ID
func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) AzureMonitorWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AzureMonitorWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureMonitorWorkspaceSignalGroupResponsePtrOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v *AzureMonitorWorkspaceSignalGroupResponse) []SignalAssignmentResponse {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentResponseArrayOutput)
}

// The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocation struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// AzureResourceManagerCommonTypesExtendedLocationInput is an input type that accepts AzureResourceManagerCommonTypesExtendedLocationArgs and AzureResourceManagerCommonTypesExtendedLocationOutput values.
// You can construct a concrete instance of `AzureResourceManagerCommonTypesExtendedLocationInput` via:
//
//	AzureResourceManagerCommonTypesExtendedLocationArgs{...}
type AzureResourceManagerCommonTypesExtendedLocationInput interface {
	pulumi.Input

	ToAzureResourceManagerCommonTypesExtendedLocationOutput() AzureResourceManagerCommonTypesExtendedLocationOutput
	ToAzureResourceManagerCommonTypesExtendedLocationOutputWithContext(context.Context) AzureResourceManagerCommonTypesExtendedLocationOutput
}

// The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocationArgs struct {
	// The name of the extended location.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of the extended location.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AzureResourceManagerCommonTypesExtendedLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceManagerCommonTypesExtendedLocation)(nil)).Elem()
}

func (i AzureResourceManagerCommonTypesExtendedLocationArgs) ToAzureResourceManagerCommonTypesExtendedLocationOutput() AzureResourceManagerCommonTypesExtendedLocationOutput {
	return i.ToAzureResourceManagerCommonTypesExtendedLocationOutputWithContext(context.Background())
}

func (i AzureResourceManagerCommonTypesExtendedLocationArgs) ToAzureResourceManagerCommonTypesExtendedLocationOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceManagerCommonTypesExtendedLocationOutput)
}

func (i AzureResourceManagerCommonTypesExtendedLocationArgs) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutput() AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return i.ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(context.Background())
}

func (i AzureResourceManagerCommonTypesExtendedLocationArgs) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceManagerCommonTypesExtendedLocationOutput).ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(ctx)
}

// AzureResourceManagerCommonTypesExtendedLocationPtrInput is an input type that accepts AzureResourceManagerCommonTypesExtendedLocationArgs, AzureResourceManagerCommonTypesExtendedLocationPtr and AzureResourceManagerCommonTypesExtendedLocationPtrOutput values.
// You can construct a concrete instance of `AzureResourceManagerCommonTypesExtendedLocationPtrInput` via:
//
//	        AzureResourceManagerCommonTypesExtendedLocationArgs{...}
//
//	or:
//
//	        nil
type AzureResourceManagerCommonTypesExtendedLocationPtrInput interface {
	pulumi.Input

	ToAzureResourceManagerCommonTypesExtendedLocationPtrOutput() AzureResourceManagerCommonTypesExtendedLocationPtrOutput
	ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(context.Context) AzureResourceManagerCommonTypesExtendedLocationPtrOutput
}

type azureResourceManagerCommonTypesExtendedLocationPtrType AzureResourceManagerCommonTypesExtendedLocationArgs

func AzureResourceManagerCommonTypesExtendedLocationPtr(v *AzureResourceManagerCommonTypesExtendedLocationArgs) AzureResourceManagerCommonTypesExtendedLocationPtrInput {
	return (*azureResourceManagerCommonTypesExtendedLocationPtrType)(v)
}

func (*azureResourceManagerCommonTypesExtendedLocationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceManagerCommonTypesExtendedLocation)(nil)).Elem()
}

func (i *azureResourceManagerCommonTypesExtendedLocationPtrType) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutput() AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return i.ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(context.Background())
}

func (i *azureResourceManagerCommonTypesExtendedLocationPtrType) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceManagerCommonTypesExtendedLocationPtrOutput)
}

// The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocationOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerCommonTypesExtendedLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceManagerCommonTypesExtendedLocation)(nil)).Elem()
}

func (o AzureResourceManagerCommonTypesExtendedLocationOutput) ToAzureResourceManagerCommonTypesExtendedLocationOutput() AzureResourceManagerCommonTypesExtendedLocationOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationOutput) ToAzureResourceManagerCommonTypesExtendedLocationOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationOutput) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutput() AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return o.ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(context.Background())
}

func (o AzureResourceManagerCommonTypesExtendedLocationOutput) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureResourceManagerCommonTypesExtendedLocation) *AzureResourceManagerCommonTypesExtendedLocation {
		return &v
	}).(AzureResourceManagerCommonTypesExtendedLocationPtrOutput)
}

// The name of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerCommonTypesExtendedLocation) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerCommonTypesExtendedLocation) string { return v.Type }).(pulumi.StringOutput)
}

type AzureResourceManagerCommonTypesExtendedLocationPtrOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerCommonTypesExtendedLocationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceManagerCommonTypesExtendedLocation)(nil)).Elem()
}

func (o AzureResourceManagerCommonTypesExtendedLocationPtrOutput) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutput() AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationPtrOutput) ToAzureResourceManagerCommonTypesExtendedLocationPtrOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationPtrOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationPtrOutput) Elem() AzureResourceManagerCommonTypesExtendedLocationOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocation) AzureResourceManagerCommonTypesExtendedLocation {
		if v != nil {
			return *v
		}
		var ret AzureResourceManagerCommonTypesExtendedLocation
		return ret
	}).(AzureResourceManagerCommonTypesExtendedLocationOutput)
}

// The name of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocation) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocationResponse struct {
	// The name of the extended location.
	Name string `pulumi:"name"`
	// The type of the extended location.
	Type string `pulumi:"type"`
}

// The complex type of the extended location.
type AzureResourceManagerCommonTypesExtendedLocationResponseOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerCommonTypesExtendedLocationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceManagerCommonTypesExtendedLocationResponse)(nil)).Elem()
}

func (o AzureResourceManagerCommonTypesExtendedLocationResponseOutput) ToAzureResourceManagerCommonTypesExtendedLocationResponseOutput() AzureResourceManagerCommonTypesExtendedLocationResponseOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationResponseOutput) ToAzureResourceManagerCommonTypesExtendedLocationResponseOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationResponseOutput {
	return o
}

// The name of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerCommonTypesExtendedLocationResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceManagerCommonTypesExtendedLocationResponse) string { return v.Type }).(pulumi.StringOutput)
}

type AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceManagerCommonTypesExtendedLocationResponse)(nil)).Elem()
}

func (o AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) ToAzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput() AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) ToAzureResourceManagerCommonTypesExtendedLocationResponsePtrOutputWithContext(ctx context.Context) AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput {
	return o
}

func (o AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) Elem() AzureResourceManagerCommonTypesExtendedLocationResponseOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocationResponse) AzureResourceManagerCommonTypesExtendedLocationResponse {
		if v != nil {
			return *v
		}
		var ret AzureResourceManagerCommonTypesExtendedLocationResponse
		return ret
	}).(AzureResourceManagerCommonTypesExtendedLocationResponseOutput)
}

// The name of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The type of the extended location.
func (o AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceManagerCommonTypesExtendedLocationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// A grouping of signal assignments for an Azure resource
type AzureResourceSignalGroup struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Azure resource ID
	AzureResourceId string `pulumi:"azureResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignment `pulumi:"signalAssignments"`
}

// AzureResourceSignalGroupInput is an input type that accepts AzureResourceSignalGroupArgs and AzureResourceSignalGroupOutput values.
// You can construct a concrete instance of `AzureResourceSignalGroupInput` via:
//
//	AzureResourceSignalGroupArgs{...}
type AzureResourceSignalGroupInput interface {
	pulumi.Input

	ToAzureResourceSignalGroupOutput() AzureResourceSignalGroupOutput
	ToAzureResourceSignalGroupOutputWithContext(context.Context) AzureResourceSignalGroupOutput
}

// A grouping of signal assignments for an Azure resource
type AzureResourceSignalGroupArgs struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting pulumi.StringInput `pulumi:"authenticationSetting"`
	// Azure resource ID
	AzureResourceId pulumi.StringInput `pulumi:"azureResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments SignalAssignmentArrayInput `pulumi:"signalAssignments"`
}

func (AzureResourceSignalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceSignalGroup)(nil)).Elem()
}

func (i AzureResourceSignalGroupArgs) ToAzureResourceSignalGroupOutput() AzureResourceSignalGroupOutput {
	return i.ToAzureResourceSignalGroupOutputWithContext(context.Background())
}

func (i AzureResourceSignalGroupArgs) ToAzureResourceSignalGroupOutputWithContext(ctx context.Context) AzureResourceSignalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceSignalGroupOutput)
}

func (i AzureResourceSignalGroupArgs) ToAzureResourceSignalGroupPtrOutput() AzureResourceSignalGroupPtrOutput {
	return i.ToAzureResourceSignalGroupPtrOutputWithContext(context.Background())
}

func (i AzureResourceSignalGroupArgs) ToAzureResourceSignalGroupPtrOutputWithContext(ctx context.Context) AzureResourceSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceSignalGroupOutput).ToAzureResourceSignalGroupPtrOutputWithContext(ctx)
}

// AzureResourceSignalGroupPtrInput is an input type that accepts AzureResourceSignalGroupArgs, AzureResourceSignalGroupPtr and AzureResourceSignalGroupPtrOutput values.
// You can construct a concrete instance of `AzureResourceSignalGroupPtrInput` via:
//
//	        AzureResourceSignalGroupArgs{...}
//
//	or:
//
//	        nil
type AzureResourceSignalGroupPtrInput interface {
	pulumi.Input

	ToAzureResourceSignalGroupPtrOutput() AzureResourceSignalGroupPtrOutput
	ToAzureResourceSignalGroupPtrOutputWithContext(context.Context) AzureResourceSignalGroupPtrOutput
}

type azureResourceSignalGroupPtrType AzureResourceSignalGroupArgs

func AzureResourceSignalGroupPtr(v *AzureResourceSignalGroupArgs) AzureResourceSignalGroupPtrInput {
	return (*azureResourceSignalGroupPtrType)(v)
}

func (*azureResourceSignalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceSignalGroup)(nil)).Elem()
}

func (i *azureResourceSignalGroupPtrType) ToAzureResourceSignalGroupPtrOutput() AzureResourceSignalGroupPtrOutput {
	return i.ToAzureResourceSignalGroupPtrOutputWithContext(context.Background())
}

func (i *azureResourceSignalGroupPtrType) ToAzureResourceSignalGroupPtrOutputWithContext(ctx context.Context) AzureResourceSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureResourceSignalGroupPtrOutput)
}

// A grouping of signal assignments for an Azure resource
type AzureResourceSignalGroupOutput struct{ *pulumi.OutputState }

func (AzureResourceSignalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceSignalGroup)(nil)).Elem()
}

func (o AzureResourceSignalGroupOutput) ToAzureResourceSignalGroupOutput() AzureResourceSignalGroupOutput {
	return o
}

func (o AzureResourceSignalGroupOutput) ToAzureResourceSignalGroupOutputWithContext(ctx context.Context) AzureResourceSignalGroupOutput {
	return o
}

func (o AzureResourceSignalGroupOutput) ToAzureResourceSignalGroupPtrOutput() AzureResourceSignalGroupPtrOutput {
	return o.ToAzureResourceSignalGroupPtrOutputWithContext(context.Background())
}

func (o AzureResourceSignalGroupOutput) ToAzureResourceSignalGroupPtrOutputWithContext(ctx context.Context) AzureResourceSignalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureResourceSignalGroup) *AzureResourceSignalGroup {
		return &v
	}).(AzureResourceSignalGroupPtrOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureResourceSignalGroupOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceSignalGroup) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Azure resource ID
func (o AzureResourceSignalGroupOutput) AzureResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceSignalGroup) string { return v.AzureResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureResourceSignalGroupOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v AzureResourceSignalGroup) []SignalAssignment { return v.SignalAssignments }).(SignalAssignmentArrayOutput)
}

type AzureResourceSignalGroupPtrOutput struct{ *pulumi.OutputState }

func (AzureResourceSignalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceSignalGroup)(nil)).Elem()
}

func (o AzureResourceSignalGroupPtrOutput) ToAzureResourceSignalGroupPtrOutput() AzureResourceSignalGroupPtrOutput {
	return o
}

func (o AzureResourceSignalGroupPtrOutput) ToAzureResourceSignalGroupPtrOutputWithContext(ctx context.Context) AzureResourceSignalGroupPtrOutput {
	return o
}

func (o AzureResourceSignalGroupPtrOutput) Elem() AzureResourceSignalGroupOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroup) AzureResourceSignalGroup {
		if v != nil {
			return *v
		}
		var ret AzureResourceSignalGroup
		return ret
	}).(AzureResourceSignalGroupOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureResourceSignalGroupPtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Azure resource ID
func (o AzureResourceSignalGroupPtrOutput) AzureResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AzureResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureResourceSignalGroupPtrOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroup) []SignalAssignment {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentArrayOutput)
}

// A grouping of signal assignments for an Azure resource
type AzureResourceSignalGroupResponse struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Azure resource ID
	AzureResourceId string `pulumi:"azureResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignmentResponse `pulumi:"signalAssignments"`
}

// A grouping of signal assignments for an Azure resource
type AzureResourceSignalGroupResponseOutput struct{ *pulumi.OutputState }

func (AzureResourceSignalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureResourceSignalGroupResponse)(nil)).Elem()
}

func (o AzureResourceSignalGroupResponseOutput) ToAzureResourceSignalGroupResponseOutput() AzureResourceSignalGroupResponseOutput {
	return o
}

func (o AzureResourceSignalGroupResponseOutput) ToAzureResourceSignalGroupResponseOutputWithContext(ctx context.Context) AzureResourceSignalGroupResponseOutput {
	return o
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureResourceSignalGroupResponseOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceSignalGroupResponse) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Azure resource ID
func (o AzureResourceSignalGroupResponseOutput) AzureResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v AzureResourceSignalGroupResponse) string { return v.AzureResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureResourceSignalGroupResponseOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v AzureResourceSignalGroupResponse) []SignalAssignmentResponse { return v.SignalAssignments }).(SignalAssignmentResponseArrayOutput)
}

type AzureResourceSignalGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureResourceSignalGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureResourceSignalGroupResponse)(nil)).Elem()
}

func (o AzureResourceSignalGroupResponsePtrOutput) ToAzureResourceSignalGroupResponsePtrOutput() AzureResourceSignalGroupResponsePtrOutput {
	return o
}

func (o AzureResourceSignalGroupResponsePtrOutput) ToAzureResourceSignalGroupResponsePtrOutputWithContext(ctx context.Context) AzureResourceSignalGroupResponsePtrOutput {
	return o
}

func (o AzureResourceSignalGroupResponsePtrOutput) Elem() AzureResourceSignalGroupResponseOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroupResponse) AzureResourceSignalGroupResponse {
		if v != nil {
			return *v
		}
		var ret AzureResourceSignalGroupResponse
		return ret
	}).(AzureResourceSignalGroupResponseOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o AzureResourceSignalGroupResponsePtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Azure resource ID
func (o AzureResourceSignalGroupResponsePtrOutput) AzureResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AzureResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o AzureResourceSignalGroupResponsePtrOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v *AzureResourceSignalGroupResponse) []SignalAssignmentResponse {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentResponseArrayOutput)
}

// Batch processor.
type BatchProcessor struct {
	// Size of the batch.
	BatchSize *int `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout *int `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessor
func (val *BatchProcessor) Defaults() *BatchProcessor {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		batchSize_ := 8192
		tmp.BatchSize = &batchSize_
	}
	if tmp.Timeout == nil {
		timeout_ := 200
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchProcessorInput is an input type that accepts BatchProcessorArgs and BatchProcessorOutput values.
// You can construct a concrete instance of `BatchProcessorInput` via:
//
//	BatchProcessorArgs{...}
type BatchProcessorInput interface {
	pulumi.Input

	ToBatchProcessorOutput() BatchProcessorOutput
	ToBatchProcessorOutputWithContext(context.Context) BatchProcessorOutput
}

// Batch processor.
type BatchProcessorArgs struct {
	// Size of the batch.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessorArgs
func (val *BatchProcessorArgs) Defaults() *BatchProcessorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		tmp.BatchSize = pulumi.IntPtr(8192)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.IntPtr(200)
	}
	return &tmp
}
func (BatchProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessor)(nil)).Elem()
}

func (i BatchProcessorArgs) ToBatchProcessorOutput() BatchProcessorOutput {
	return i.ToBatchProcessorOutputWithContext(context.Background())
}

func (i BatchProcessorArgs) ToBatchProcessorOutputWithContext(ctx context.Context) BatchProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorOutput)
}

func (i BatchProcessorArgs) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return i.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (i BatchProcessorArgs) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorOutput).ToBatchProcessorPtrOutputWithContext(ctx)
}

// BatchProcessorPtrInput is an input type that accepts BatchProcessorArgs, BatchProcessorPtr and BatchProcessorPtrOutput values.
// You can construct a concrete instance of `BatchProcessorPtrInput` via:
//
//	        BatchProcessorArgs{...}
//
//	or:
//
//	        nil
type BatchProcessorPtrInput interface {
	pulumi.Input

	ToBatchProcessorPtrOutput() BatchProcessorPtrOutput
	ToBatchProcessorPtrOutputWithContext(context.Context) BatchProcessorPtrOutput
}

type batchProcessorPtrType BatchProcessorArgs

func BatchProcessorPtr(v *BatchProcessorArgs) BatchProcessorPtrInput {
	return (*batchProcessorPtrType)(v)
}

func (*batchProcessorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessor)(nil)).Elem()
}

func (i *batchProcessorPtrType) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return i.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (i *batchProcessorPtrType) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchProcessorPtrOutput)
}

// Batch processor.
type BatchProcessorOutput struct{ *pulumi.OutputState }

func (BatchProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessor)(nil)).Elem()
}

func (o BatchProcessorOutput) ToBatchProcessorOutput() BatchProcessorOutput {
	return o
}

func (o BatchProcessorOutput) ToBatchProcessorOutputWithContext(ctx context.Context) BatchProcessorOutput {
	return o
}

func (o BatchProcessorOutput) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return o.ToBatchProcessorPtrOutputWithContext(context.Background())
}

func (o BatchProcessorOutput) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchProcessor) *BatchProcessor {
		return &v
	}).(BatchProcessorPtrOutput)
}

// Size of the batch.
func (o BatchProcessorOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessor) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessor) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type BatchProcessorPtrOutput struct{ *pulumi.OutputState }

func (BatchProcessorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessor)(nil)).Elem()
}

func (o BatchProcessorPtrOutput) ToBatchProcessorPtrOutput() BatchProcessorPtrOutput {
	return o
}

func (o BatchProcessorPtrOutput) ToBatchProcessorPtrOutputWithContext(ctx context.Context) BatchProcessorPtrOutput {
	return o
}

func (o BatchProcessorPtrOutput) Elem() BatchProcessorOutput {
	return o.ApplyT(func(v *BatchProcessor) BatchProcessor {
		if v != nil {
			return *v
		}
		var ret BatchProcessor
		return ret
	}).(BatchProcessorOutput)
}

// Size of the batch.
func (o BatchProcessorPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessor) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessor) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Batch processor.
type BatchProcessorResponse struct {
	// Size of the batch.
	BatchSize *int `pulumi:"batchSize"`
	// Timeout in milliseconds.
	Timeout *int `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchProcessorResponse
func (val *BatchProcessorResponse) Defaults() *BatchProcessorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchSize == nil {
		batchSize_ := 8192
		tmp.BatchSize = &batchSize_
	}
	if tmp.Timeout == nil {
		timeout_ := 200
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Batch processor.
type BatchProcessorResponseOutput struct{ *pulumi.OutputState }

func (BatchProcessorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchProcessorResponse)(nil)).Elem()
}

func (o BatchProcessorResponseOutput) ToBatchProcessorResponseOutput() BatchProcessorResponseOutput {
	return o
}

func (o BatchProcessorResponseOutput) ToBatchProcessorResponseOutputWithContext(ctx context.Context) BatchProcessorResponseOutput {
	return o
}

// Size of the batch.
func (o BatchProcessorResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessorResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorResponseOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchProcessorResponse) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

type BatchProcessorResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchProcessorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchProcessorResponse)(nil)).Elem()
}

func (o BatchProcessorResponsePtrOutput) ToBatchProcessorResponsePtrOutput() BatchProcessorResponsePtrOutput {
	return o
}

func (o BatchProcessorResponsePtrOutput) ToBatchProcessorResponsePtrOutputWithContext(ctx context.Context) BatchProcessorResponsePtrOutput {
	return o
}

func (o BatchProcessorResponsePtrOutput) Elem() BatchProcessorResponseOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) BatchProcessorResponse {
		if v != nil {
			return *v
		}
		var ret BatchProcessorResponse
		return ret
	}).(BatchProcessorResponseOutput)
}

// Size of the batch.
func (o BatchProcessorResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds.
func (o BatchProcessorResponsePtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchProcessorResponse) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Cache configurations.
type CacheConfiguration struct {
	// Max storage usage in megabytes.
	MaxStorageUsage *int `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// CacheConfigurationInput is an input type that accepts CacheConfigurationArgs and CacheConfigurationOutput values.
// You can construct a concrete instance of `CacheConfigurationInput` via:
//
//	CacheConfigurationArgs{...}
type CacheConfigurationInput interface {
	pulumi.Input

	ToCacheConfigurationOutput() CacheConfigurationOutput
	ToCacheConfigurationOutputWithContext(context.Context) CacheConfigurationOutput
}

// Cache configurations.
type CacheConfigurationArgs struct {
	// Max storage usage in megabytes.
	MaxStorageUsage pulumi.IntPtrInput `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod pulumi.IntPtrInput `pulumi:"retentionPeriod"`
}

func (CacheConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return i.ToCacheConfigurationOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput)
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i CacheConfigurationArgs) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationOutput).ToCacheConfigurationPtrOutputWithContext(ctx)
}

// CacheConfigurationPtrInput is an input type that accepts CacheConfigurationArgs, CacheConfigurationPtr and CacheConfigurationPtrOutput values.
// You can construct a concrete instance of `CacheConfigurationPtrInput` via:
//
//	        CacheConfigurationArgs{...}
//
//	or:
//
//	        nil
type CacheConfigurationPtrInput interface {
	pulumi.Input

	ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput
	ToCacheConfigurationPtrOutputWithContext(context.Context) CacheConfigurationPtrOutput
}

type cacheConfigurationPtrType CacheConfigurationArgs

func CacheConfigurationPtr(v *CacheConfigurationArgs) CacheConfigurationPtrInput {
	return (*cacheConfigurationPtrType)(v)
}

func (*cacheConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return i.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (i *cacheConfigurationPtrType) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CacheConfigurationPtrOutput)
}

// Cache configurations.
type CacheConfigurationOutput struct{ *pulumi.OutputState }

func (CacheConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutput() CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationOutputWithContext(ctx context.Context) CacheConfigurationOutput {
	return o
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o.ToCacheConfigurationPtrOutputWithContext(context.Background())
}

func (o CacheConfigurationOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CacheConfiguration) *CacheConfiguration {
		return &v
	}).(CacheConfigurationPtrOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *int { return v.MaxStorageUsage }).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfiguration) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

type CacheConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfiguration)(nil)).Elem()
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutput() CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) ToCacheConfigurationPtrOutputWithContext(ctx context.Context) CacheConfigurationPtrOutput {
	return o
}

func (o CacheConfigurationPtrOutput) Elem() CacheConfigurationOutput {
	return o.ApplyT(func(v *CacheConfiguration) CacheConfiguration {
		if v != nil {
			return *v
		}
		var ret CacheConfiguration
		return ret
	}).(CacheConfigurationOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationPtrOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxStorageUsage
	}).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationPtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

// Cache configurations.
type CacheConfigurationResponse struct {
	// Max storage usage in megabytes.
	MaxStorageUsage *int `pulumi:"maxStorageUsage"`
	// Retention period in minutes.
	RetentionPeriod *int `pulumi:"retentionPeriod"`
}

// Cache configurations.
type CacheConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutput() CacheConfigurationResponseOutput {
	return o
}

func (o CacheConfigurationResponseOutput) ToCacheConfigurationResponseOutputWithContext(ctx context.Context) CacheConfigurationResponseOutput {
	return o
}

// Max storage usage in megabytes.
func (o CacheConfigurationResponseOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *int { return v.MaxStorageUsage }).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationResponseOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CacheConfigurationResponse) *int { return v.RetentionPeriod }).(pulumi.IntPtrOutput)
}

type CacheConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CacheConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CacheConfigurationResponse)(nil)).Elem()
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutput() CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) ToCacheConfigurationResponsePtrOutputWithContext(ctx context.Context) CacheConfigurationResponsePtrOutput {
	return o
}

func (o CacheConfigurationResponsePtrOutput) Elem() CacheConfigurationResponseOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) CacheConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CacheConfigurationResponse
		return ret
	}).(CacheConfigurationResponseOutput)
}

// Max storage usage in megabytes.
func (o CacheConfigurationResponsePtrOutput) MaxStorageUsage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxStorageUsage
	}).(pulumi.IntPtrOutput)
}

// Retention period in minutes.
func (o CacheConfigurationResponsePtrOutput) RetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CacheConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.IntPtrOutput)
}

// Definition of custom data column.
type ColumnDefinition struct {
	// The name of the column.
	Name *string `pulumi:"name"`
	// The type of the column data.
	Type *string `pulumi:"type"`
}

// ColumnDefinitionInput is an input type that accepts ColumnDefinitionArgs and ColumnDefinitionOutput values.
// You can construct a concrete instance of `ColumnDefinitionInput` via:
//
//	ColumnDefinitionArgs{...}
type ColumnDefinitionInput interface {
	pulumi.Input

	ToColumnDefinitionOutput() ColumnDefinitionOutput
	ToColumnDefinitionOutputWithContext(context.Context) ColumnDefinitionOutput
}

// Definition of custom data column.
type ColumnDefinitionArgs struct {
	// The name of the column.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of the column data.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ColumnDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinition)(nil)).Elem()
}

func (i ColumnDefinitionArgs) ToColumnDefinitionOutput() ColumnDefinitionOutput {
	return i.ToColumnDefinitionOutputWithContext(context.Background())
}

func (i ColumnDefinitionArgs) ToColumnDefinitionOutputWithContext(ctx context.Context) ColumnDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnDefinitionOutput)
}

// ColumnDefinitionArrayInput is an input type that accepts ColumnDefinitionArray and ColumnDefinitionArrayOutput values.
// You can construct a concrete instance of `ColumnDefinitionArrayInput` via:
//
//	ColumnDefinitionArray{ ColumnDefinitionArgs{...} }
type ColumnDefinitionArrayInput interface {
	pulumi.Input

	ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput
	ToColumnDefinitionArrayOutputWithContext(context.Context) ColumnDefinitionArrayOutput
}

type ColumnDefinitionArray []ColumnDefinitionInput

func (ColumnDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinition)(nil)).Elem()
}

func (i ColumnDefinitionArray) ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput {
	return i.ToColumnDefinitionArrayOutputWithContext(context.Background())
}

func (i ColumnDefinitionArray) ToColumnDefinitionArrayOutputWithContext(ctx context.Context) ColumnDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnDefinitionArrayOutput)
}

// Definition of custom data column.
type ColumnDefinitionOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinition)(nil)).Elem()
}

func (o ColumnDefinitionOutput) ToColumnDefinitionOutput() ColumnDefinitionOutput {
	return o
}

func (o ColumnDefinitionOutput) ToColumnDefinitionOutputWithContext(ctx context.Context) ColumnDefinitionOutput {
	return o
}

// The name of the column.
func (o ColumnDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the column data.
func (o ColumnDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnDefinitionArrayOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinition)(nil)).Elem()
}

func (o ColumnDefinitionArrayOutput) ToColumnDefinitionArrayOutput() ColumnDefinitionArrayOutput {
	return o
}

func (o ColumnDefinitionArrayOutput) ToColumnDefinitionArrayOutputWithContext(ctx context.Context) ColumnDefinitionArrayOutput {
	return o
}

func (o ColumnDefinitionArrayOutput) Index(i pulumi.IntInput) ColumnDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnDefinition {
		return vs[0].([]ColumnDefinition)[vs[1].(int)]
	}).(ColumnDefinitionOutput)
}

// Definition of custom data column.
type ColumnDefinitionResponse struct {
	// The name of the column.
	Name *string `pulumi:"name"`
	// The type of the column data.
	Type *string `pulumi:"type"`
}

// Definition of custom data column.
type ColumnDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnDefinitionResponse)(nil)).Elem()
}

func (o ColumnDefinitionResponseOutput) ToColumnDefinitionResponseOutput() ColumnDefinitionResponseOutput {
	return o
}

func (o ColumnDefinitionResponseOutput) ToColumnDefinitionResponseOutputWithContext(ctx context.Context) ColumnDefinitionResponseOutput {
	return o
}

// The name of the column.
func (o ColumnDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of the column data.
func (o ColumnDefinitionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ColumnDefinitionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ColumnDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnDefinitionResponse)(nil)).Elem()
}

func (o ColumnDefinitionResponseArrayOutput) ToColumnDefinitionResponseArrayOutput() ColumnDefinitionResponseArrayOutput {
	return o
}

func (o ColumnDefinitionResponseArrayOutput) ToColumnDefinitionResponseArrayOutputWithContext(ctx context.Context) ColumnDefinitionResponseArrayOutput {
	return o
}

func (o ColumnDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ColumnDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnDefinitionResponse {
		return vs[0].([]ColumnDefinitionResponse)[vs[1].(int)]
	}).(ColumnDefinitionResponseOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfiguration struct {
	// Size of the queue for log batches.
	BatchQueueSize *int `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfiguration
func (val *ConcurrencyConfiguration) Defaults() *ConcurrencyConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		batchQueueSize_ := 100
		tmp.BatchQueueSize = &batchQueueSize_
	}
	if tmp.WorkerCount == nil {
		workerCount_ := 4
		tmp.WorkerCount = &workerCount_
	}
	return &tmp
}

// ConcurrencyConfigurationInput is an input type that accepts ConcurrencyConfigurationArgs and ConcurrencyConfigurationOutput values.
// You can construct a concrete instance of `ConcurrencyConfigurationInput` via:
//
//	ConcurrencyConfigurationArgs{...}
type ConcurrencyConfigurationInput interface {
	pulumi.Input

	ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput
	ToConcurrencyConfigurationOutputWithContext(context.Context) ConcurrencyConfigurationOutput
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationArgs struct {
	// Size of the queue for log batches.
	BatchQueueSize pulumi.IntPtrInput `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfigurationArgs
func (val *ConcurrencyConfigurationArgs) Defaults() *ConcurrencyConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		tmp.BatchQueueSize = pulumi.IntPtr(100)
	}
	if tmp.WorkerCount == nil {
		tmp.WorkerCount = pulumi.IntPtr(4)
	}
	return &tmp
}
func (ConcurrencyConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfiguration)(nil)).Elem()
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput {
	return i.ToConcurrencyConfigurationOutputWithContext(context.Background())
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationOutputWithContext(ctx context.Context) ConcurrencyConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationOutput)
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return i.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i ConcurrencyConfigurationArgs) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationOutput).ToConcurrencyConfigurationPtrOutputWithContext(ctx)
}

// ConcurrencyConfigurationPtrInput is an input type that accepts ConcurrencyConfigurationArgs, ConcurrencyConfigurationPtr and ConcurrencyConfigurationPtrOutput values.
// You can construct a concrete instance of `ConcurrencyConfigurationPtrInput` via:
//
//	        ConcurrencyConfigurationArgs{...}
//
//	or:
//
//	        nil
type ConcurrencyConfigurationPtrInput interface {
	pulumi.Input

	ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput
	ToConcurrencyConfigurationPtrOutputWithContext(context.Context) ConcurrencyConfigurationPtrOutput
}

type concurrencyConfigurationPtrType ConcurrencyConfigurationArgs

func ConcurrencyConfigurationPtr(v *ConcurrencyConfigurationArgs) ConcurrencyConfigurationPtrInput {
	return (*concurrencyConfigurationPtrType)(v)
}

func (*concurrencyConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfiguration)(nil)).Elem()
}

func (i *concurrencyConfigurationPtrType) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return i.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (i *concurrencyConfigurationPtrType) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConcurrencyConfigurationPtrOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfiguration)(nil)).Elem()
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationOutput() ConcurrencyConfigurationOutput {
	return o
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationOutputWithContext(ctx context.Context) ConcurrencyConfigurationOutput {
	return o
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return o.ToConcurrencyConfigurationPtrOutputWithContext(context.Background())
}

func (o ConcurrencyConfigurationOutput) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConcurrencyConfiguration) *ConcurrencyConfiguration {
		return &v
	}).(ConcurrencyConfigurationPtrOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfiguration) *int { return v.BatchQueueSize }).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfiguration) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type ConcurrencyConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfiguration)(nil)).Elem()
}

func (o ConcurrencyConfigurationPtrOutput) ToConcurrencyConfigurationPtrOutput() ConcurrencyConfigurationPtrOutput {
	return o
}

func (o ConcurrencyConfigurationPtrOutput) ToConcurrencyConfigurationPtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationPtrOutput {
	return o
}

func (o ConcurrencyConfigurationPtrOutput) Elem() ConcurrencyConfigurationOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) ConcurrencyConfiguration {
		if v != nil {
			return *v
		}
		var ret ConcurrencyConfiguration
		return ret
	}).(ConcurrencyConfigurationOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationPtrOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.BatchQueueSize
	}).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationResponse struct {
	// Size of the queue for log batches.
	BatchQueueSize *int `pulumi:"batchQueueSize"`
	// Number of parallel workers processing the log queues.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for ConcurrencyConfigurationResponse
func (val *ConcurrencyConfigurationResponse) Defaults() *ConcurrencyConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BatchQueueSize == nil {
		batchQueueSize_ := 100
		tmp.BatchQueueSize = &batchQueueSize_
	}
	if tmp.WorkerCount == nil {
		workerCount_ := 4
		tmp.WorkerCount = &workerCount_
	}
	return &tmp
}

// Concurrent publishing configuration.
type ConcurrencyConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConcurrencyConfigurationResponse)(nil)).Elem()
}

func (o ConcurrencyConfigurationResponseOutput) ToConcurrencyConfigurationResponseOutput() ConcurrencyConfigurationResponseOutput {
	return o
}

func (o ConcurrencyConfigurationResponseOutput) ToConcurrencyConfigurationResponseOutputWithContext(ctx context.Context) ConcurrencyConfigurationResponseOutput {
	return o
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationResponseOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfigurationResponse) *int { return v.BatchQueueSize }).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConcurrencyConfigurationResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type ConcurrencyConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ConcurrencyConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConcurrencyConfigurationResponse)(nil)).Elem()
}

func (o ConcurrencyConfigurationResponsePtrOutput) ToConcurrencyConfigurationResponsePtrOutput() ConcurrencyConfigurationResponsePtrOutput {
	return o
}

func (o ConcurrencyConfigurationResponsePtrOutput) ToConcurrencyConfigurationResponsePtrOutputWithContext(ctx context.Context) ConcurrencyConfigurationResponsePtrOutput {
	return o
}

func (o ConcurrencyConfigurationResponsePtrOutput) Elem() ConcurrencyConfigurationResponseOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) ConcurrencyConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ConcurrencyConfigurationResponse
		return ret
	}).(ConcurrencyConfigurationResponseOutput)
}

// Size of the queue for log batches.
func (o ConcurrencyConfigurationResponsePtrOutput) BatchQueueSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchQueueSize
	}).(pulumi.IntPtrOutput)
}

// Number of parallel workers processing the log queues.
func (o ConcurrencyConfigurationResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConcurrencyConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// A condition of the scheduled query rule.
type Condition struct {
	// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert.
	AlertSensitivity *string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType *string `pulumi:"criterionType"`
	// List of Dimensions conditions
	Dimensions []Dimension `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods *ConditionFailingPeriods `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string `pulumi:"metricName"`
	// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
	MinRecurrenceCount *float64 `pulumi:"minRecurrenceCount"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *string `pulumi:"operator"`
	// Log query alert
	Query *string `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn *string `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
	Threshold *float64 `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *string `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for Condition
func (val *Condition) Defaults() *Condition {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FailingPeriods = tmp.FailingPeriods.Defaults()

	return &tmp
}

// ConditionInput is an input type that accepts ConditionArgs and ConditionOutput values.
// You can construct a concrete instance of `ConditionInput` via:
//
//	ConditionArgs{...}
type ConditionInput interface {
	pulumi.Input

	ToConditionOutput() ConditionOutput
	ToConditionOutputWithContext(context.Context) ConditionOutput
}

// A condition of the scheduled query rule.
type ConditionArgs struct {
	// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert.
	AlertSensitivity pulumi.StringPtrInput `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType pulumi.StringPtrInput `pulumi:"criterionType"`
	// List of Dimensions conditions
	Dimensions DimensionArrayInput `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods ConditionFailingPeriodsPtrInput `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
	IgnoreDataBefore pulumi.StringPtrInput `pulumi:"ignoreDataBefore"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn pulumi.StringPtrInput `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName pulumi.StringPtrInput `pulumi:"metricName"`
	// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
	MinRecurrenceCount pulumi.Float64PtrInput `pulumi:"minRecurrenceCount"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Log query alert
	Query pulumi.StringPtrInput `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn pulumi.StringPtrInput `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
	Threshold pulumi.Float64PtrInput `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation pulumi.StringPtrInput `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for ConditionArgs
func (val *ConditionArgs) Defaults() *ConditionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (i ConditionArgs) ToConditionOutput() ConditionOutput {
	return i.ToConditionOutputWithContext(context.Background())
}

func (i ConditionArgs) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionOutput)
}

// ConditionArrayInput is an input type that accepts ConditionArray and ConditionArrayOutput values.
// You can construct a concrete instance of `ConditionArrayInput` via:
//
//	ConditionArray{ ConditionArgs{...} }
type ConditionArrayInput interface {
	pulumi.Input

	ToConditionArrayOutput() ConditionArrayOutput
	ToConditionArrayOutputWithContext(context.Context) ConditionArrayOutput
}

type ConditionArray []ConditionInput

func (ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (i ConditionArray) ToConditionArrayOutput() ConditionArrayOutput {
	return i.ToConditionArrayOutputWithContext(context.Background())
}

func (i ConditionArray) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionArrayOutput)
}

// A condition of the scheduled query rule.
type ConditionOutput struct{ *pulumi.OutputState }

func (ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Condition)(nil)).Elem()
}

func (o ConditionOutput) ToConditionOutput() ConditionOutput {
	return o
}

func (o ConditionOutput) ToConditionOutputWithContext(ctx context.Context) ConditionOutput {
	return o
}

// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert.
func (o ConditionOutput) AlertSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.AlertSensitivity }).(pulumi.StringPtrOutput)
}

// Specifies the type of threshold criteria
func (o ConditionOutput) CriterionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.CriterionType }).(pulumi.StringPtrOutput)
}

// List of Dimensions conditions
func (o ConditionOutput) Dimensions() DimensionArrayOutput {
	return o.ApplyT(func(v Condition) []Dimension { return v.Dimensions }).(DimensionArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) FailingPeriods() ConditionFailingPeriodsPtrOutput {
	return o.ApplyT(func(v Condition) *ConditionFailingPeriods { return v.FailingPeriods }).(ConditionFailingPeriodsPtrOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
func (o ConditionOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) MetricMeasureColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.MetricMeasureColumn }).(pulumi.StringPtrOutput)
}

// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
func (o ConditionOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
func (o ConditionOutput) MinRecurrenceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Condition) *float64 { return v.MinRecurrenceCount }).(pulumi.Float64PtrOutput)
}

// The criteria operator. Relevant and required only for rules of the kind LogAlert.
func (o ConditionOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Log query alert
func (o ConditionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
func (o ConditionOutput) ResourceIdColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.ResourceIdColumn }).(pulumi.StringPtrOutput)
}

// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
func (o ConditionOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Condition) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Aggregation type. Relevant and required only for rules of the kind LogAlert.
func (o ConditionOutput) TimeAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Condition) *string { return v.TimeAggregation }).(pulumi.StringPtrOutput)
}

type ConditionArrayOutput struct{ *pulumi.OutputState }

func (ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Condition)(nil)).Elem()
}

func (o ConditionArrayOutput) ToConditionArrayOutput() ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) ToConditionArrayOutputWithContext(ctx context.Context) ConditionArrayOutput {
	return o
}

func (o ConditionArrayOutput) Index(i pulumi.IntInput) ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Condition {
		return vs[0].([]Condition)[vs[1].(int)]
	}).(ConditionOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert *float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *float64 `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionFailingPeriods
func (val *ConditionFailingPeriods) Defaults() *ConditionFailingPeriods {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinFailingPeriodsToAlert == nil {
		minFailingPeriodsToAlert_ := 1.0
		tmp.MinFailingPeriodsToAlert = &minFailingPeriodsToAlert_
	}
	if tmp.NumberOfEvaluationPeriods == nil {
		numberOfEvaluationPeriods_ := 1.0
		tmp.NumberOfEvaluationPeriods = &numberOfEvaluationPeriods_
	}
	return &tmp
}

// ConditionFailingPeriodsInput is an input type that accepts ConditionFailingPeriodsArgs and ConditionFailingPeriodsOutput values.
// You can construct a concrete instance of `ConditionFailingPeriodsInput` via:
//
//	ConditionFailingPeriodsArgs{...}
type ConditionFailingPeriodsInput interface {
	pulumi.Input

	ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput
	ToConditionFailingPeriodsOutputWithContext(context.Context) ConditionFailingPeriodsOutput
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriodsArgs struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert pulumi.Float64PtrInput `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods pulumi.Float64PtrInput `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionFailingPeriodsArgs
func (val *ConditionFailingPeriodsArgs) Defaults() *ConditionFailingPeriodsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinFailingPeriodsToAlert == nil {
		tmp.MinFailingPeriodsToAlert = pulumi.Float64Ptr(1.0)
	}
	if tmp.NumberOfEvaluationPeriods == nil {
		tmp.NumberOfEvaluationPeriods = pulumi.Float64Ptr(1.0)
	}
	return &tmp
}
func (ConditionFailingPeriodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionFailingPeriods)(nil)).Elem()
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput {
	return i.ToConditionFailingPeriodsOutputWithContext(context.Background())
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsOutputWithContext(ctx context.Context) ConditionFailingPeriodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsOutput)
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return i.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i ConditionFailingPeriodsArgs) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsOutput).ToConditionFailingPeriodsPtrOutputWithContext(ctx)
}

// ConditionFailingPeriodsPtrInput is an input type that accepts ConditionFailingPeriodsArgs, ConditionFailingPeriodsPtr and ConditionFailingPeriodsPtrOutput values.
// You can construct a concrete instance of `ConditionFailingPeriodsPtrInput` via:
//
//	        ConditionFailingPeriodsArgs{...}
//
//	or:
//
//	        nil
type ConditionFailingPeriodsPtrInput interface {
	pulumi.Input

	ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput
	ToConditionFailingPeriodsPtrOutputWithContext(context.Context) ConditionFailingPeriodsPtrOutput
}

type conditionFailingPeriodsPtrType ConditionFailingPeriodsArgs

func ConditionFailingPeriodsPtr(v *ConditionFailingPeriodsArgs) ConditionFailingPeriodsPtrInput {
	return (*conditionFailingPeriodsPtrType)(v)
}

func (*conditionFailingPeriodsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionFailingPeriods)(nil)).Elem()
}

func (i *conditionFailingPeriodsPtrType) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return i.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (i *conditionFailingPeriodsPtrType) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConditionFailingPeriodsPtrOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionFailingPeriodsOutput struct{ *pulumi.OutputState }

func (ConditionFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionFailingPeriods)(nil)).Elem()
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsOutput() ConditionFailingPeriodsOutput {
	return o
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsOutputWithContext(ctx context.Context) ConditionFailingPeriodsOutput {
	return o
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return o.ToConditionFailingPeriodsPtrOutputWithContext(context.Background())
}

func (o ConditionFailingPeriodsOutput) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConditionFailingPeriods) *ConditionFailingPeriods {
		return &v
	}).(ConditionFailingPeriodsPtrOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionFailingPeriods) *float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionFailingPeriods) *float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64PtrOutput)
}

type ConditionFailingPeriodsPtrOutput struct{ *pulumi.OutputState }

func (ConditionFailingPeriodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionFailingPeriods)(nil)).Elem()
}

func (o ConditionFailingPeriodsPtrOutput) ToConditionFailingPeriodsPtrOutput() ConditionFailingPeriodsPtrOutput {
	return o
}

func (o ConditionFailingPeriodsPtrOutput) ToConditionFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionFailingPeriodsPtrOutput {
	return o
}

func (o ConditionFailingPeriodsPtrOutput) Elem() ConditionFailingPeriodsOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) ConditionFailingPeriods {
		if v != nil {
			return *v
		}
		var ret ConditionFailingPeriods
		return ret
	}).(ConditionFailingPeriodsOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionFailingPeriodsPtrOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.MinFailingPeriodsToAlert
	}).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionFailingPeriodsPtrOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfEvaluationPeriods
	}).(pulumi.Float64PtrOutput)
}

// A condition of the scheduled query rule.
type ConditionResponse struct {
	// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert.
	AlertSensitivity *string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	CriterionType *string `pulumi:"criterionType"`
	// List of Dimensions conditions
	Dimensions []DimensionResponse `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
	FailingPeriods *ConditionResponseFailingPeriods `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
	MetricMeasureColumn *string `pulumi:"metricMeasureColumn"`
	// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
	MetricName *string `pulumi:"metricName"`
	// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
	MinRecurrenceCount *float64 `pulumi:"minRecurrenceCount"`
	// The criteria operator. Relevant and required only for rules of the kind LogAlert.
	Operator *string `pulumi:"operator"`
	// Log query alert
	Query *string `pulumi:"query"`
	// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
	ResourceIdColumn *string `pulumi:"resourceIdColumn"`
	// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
	Threshold *float64 `pulumi:"threshold"`
	// Aggregation type. Relevant and required only for rules of the kind LogAlert.
	TimeAggregation *string `pulumi:"timeAggregation"`
}

// Defaults sets the appropriate defaults for ConditionResponse
func (val *ConditionResponse) Defaults() *ConditionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FailingPeriods = tmp.FailingPeriods.Defaults()

	return &tmp
}

// A condition of the scheduled query rule.
type ConditionResponseOutput struct{ *pulumi.OutputState }

func (ConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseOutput) ToConditionResponseOutput() ConditionResponseOutput {
	return o
}

func (o ConditionResponseOutput) ToConditionResponseOutputWithContext(ctx context.Context) ConditionResponseOutput {
	return o
}

// The extent of deviation required to trigger an alert. Allowed values are 'Low', 'Medium' and 'High'. This will affect how tight the threshold is to the metric series pattern. Relevant only for dynamic threshold rules of the kind LogAlert.
func (o ConditionResponseOutput) AlertSensitivity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.AlertSensitivity }).(pulumi.StringPtrOutput)
}

// Specifies the type of threshold criteria
func (o ConditionResponseOutput) CriterionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.CriterionType }).(pulumi.StringPtrOutput)
}

// List of Dimensions conditions
func (o ConditionResponseOutput) Dimensions() DimensionResponseArrayOutput {
	return o.ApplyT(func(v ConditionResponse) []DimensionResponse { return v.Dimensions }).(DimensionResponseArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) FailingPeriods() ConditionResponseFailingPeriodsPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *ConditionResponseFailingPeriods { return v.FailingPeriods }).(ConditionResponseFailingPeriodsPtrOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format). Relevant only for dynamic threshold rules of the kind LogAlert.
func (o ConditionResponseOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// The column containing the metric measure number. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) MetricMeasureColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.MetricMeasureColumn }).(pulumi.StringPtrOutput)
}

// The name of the metric to be sent. Relevant and required only for rules of the kind LogToMetric.
func (o ConditionResponseOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.MetricName }).(pulumi.StringPtrOutput)
}

// The minimum results count that should be found for triggering an alert. Relevant only for rules of the kind SimpleLogAlert.
func (o ConditionResponseOutput) MinRecurrenceCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponse) *float64 { return v.MinRecurrenceCount }).(pulumi.Float64PtrOutput)
}

// The criteria operator. Relevant and required only for rules of the kind LogAlert.
func (o ConditionResponseOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Log query alert
func (o ConditionResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The column containing the resource id. The content of the column must be a uri formatted as resource id. Relevant only for rules of the kind LogAlert.
func (o ConditionResponseOutput) ResourceIdColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.ResourceIdColumn }).(pulumi.StringPtrOutput)
}

// the criteria threshold value that activates the alert. Relevant and required only for static threshold rules of the kind LogAlert.
func (o ConditionResponseOutput) Threshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponse) *float64 { return v.Threshold }).(pulumi.Float64PtrOutput)
}

// Aggregation type. Relevant and required only for rules of the kind LogAlert.
func (o ConditionResponseOutput) TimeAggregation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConditionResponse) *string { return v.TimeAggregation }).(pulumi.StringPtrOutput)
}

type ConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConditionResponse)(nil)).Elem()
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutput() ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) ToConditionResponseArrayOutputWithContext(ctx context.Context) ConditionResponseArrayOutput {
	return o
}

func (o ConditionResponseArrayOutput) Index(i pulumi.IntInput) ConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConditionResponse {
		return vs[0].([]ConditionResponse)[vs[1].(int)]
	}).(ConditionResponseOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionResponseFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
	MinFailingPeriodsToAlert *float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
	NumberOfEvaluationPeriods *float64 `pulumi:"numberOfEvaluationPeriods"`
}

// Defaults sets the appropriate defaults for ConditionResponseFailingPeriods
func (val *ConditionResponseFailingPeriods) Defaults() *ConditionResponseFailingPeriods {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinFailingPeriodsToAlert == nil {
		minFailingPeriodsToAlert_ := 1.0
		tmp.MinFailingPeriodsToAlert = &minFailingPeriodsToAlert_
	}
	if tmp.NumberOfEvaluationPeriods == nil {
		numberOfEvaluationPeriods_ := 1.0
		tmp.NumberOfEvaluationPeriods = &numberOfEvaluationPeriods_
	}
	return &tmp
}

// The minimum number of violations required within the selected lookback time window required to raise an alert. Relevant only for rules of the kind LogAlert.
type ConditionResponseFailingPeriodsOutput struct{ *pulumi.OutputState }

func (ConditionResponseFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConditionResponseFailingPeriods)(nil)).Elem()
}

func (o ConditionResponseFailingPeriodsOutput) ToConditionResponseFailingPeriodsOutput() ConditionResponseFailingPeriodsOutput {
	return o
}

func (o ConditionResponseFailingPeriodsOutput) ToConditionResponseFailingPeriodsOutputWithContext(ctx context.Context) ConditionResponseFailingPeriodsOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionResponseFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponseFailingPeriods) *float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionResponseFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ConditionResponseFailingPeriods) *float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64PtrOutput)
}

type ConditionResponseFailingPeriodsPtrOutput struct{ *pulumi.OutputState }

func (ConditionResponseFailingPeriodsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConditionResponseFailingPeriods)(nil)).Elem()
}

func (o ConditionResponseFailingPeriodsPtrOutput) ToConditionResponseFailingPeriodsPtrOutput() ConditionResponseFailingPeriodsPtrOutput {
	return o
}

func (o ConditionResponseFailingPeriodsPtrOutput) ToConditionResponseFailingPeriodsPtrOutputWithContext(ctx context.Context) ConditionResponseFailingPeriodsPtrOutput {
	return o
}

func (o ConditionResponseFailingPeriodsPtrOutput) Elem() ConditionResponseFailingPeriodsOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) ConditionResponseFailingPeriods {
		if v != nil {
			return *v
		}
		var ret ConditionResponseFailingPeriods
		return ret
	}).(ConditionResponseFailingPeriodsOutput)
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods. Default value is 1
func (o ConditionResponseFailingPeriodsPtrOutput) MinFailingPeriodsToAlert() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.MinFailingPeriodsToAlert
	}).(pulumi.Float64PtrOutput)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points. Default value is 1
func (o ConditionResponseFailingPeriodsPtrOutput) NumberOfEvaluationPeriods() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ConditionResponseFailingPeriods) *float64 {
		if v == nil {
			return nil
		}
		return v.NumberOfEvaluationPeriods
	}).(pulumi.Float64PtrOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAcls struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// DataCollectionEndpointNetworkAclsInput is an input type that accepts DataCollectionEndpointNetworkAclsArgs and DataCollectionEndpointNetworkAclsOutput values.
// You can construct a concrete instance of `DataCollectionEndpointNetworkAclsInput` via:
//
//	DataCollectionEndpointNetworkAclsArgs{...}
type DataCollectionEndpointNetworkAclsInput interface {
	pulumi.Input

	ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput
	ToDataCollectionEndpointNetworkAclsOutputWithContext(context.Context) DataCollectionEndpointNetworkAclsOutput
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAclsArgs struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
}

func (DataCollectionEndpointNetworkAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput {
	return i.ToDataCollectionEndpointNetworkAclsOutputWithContext(context.Background())
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsOutput)
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return i.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (i DataCollectionEndpointNetworkAclsArgs) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsOutput).ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx)
}

// DataCollectionEndpointNetworkAclsPtrInput is an input type that accepts DataCollectionEndpointNetworkAclsArgs, DataCollectionEndpointNetworkAclsPtr and DataCollectionEndpointNetworkAclsPtrOutput values.
// You can construct a concrete instance of `DataCollectionEndpointNetworkAclsPtrInput` via:
//
//	        DataCollectionEndpointNetworkAclsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionEndpointNetworkAclsPtrInput interface {
	pulumi.Input

	ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput
	ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Context) DataCollectionEndpointNetworkAclsPtrOutput
}

type dataCollectionEndpointNetworkAclsPtrType DataCollectionEndpointNetworkAclsArgs

func DataCollectionEndpointNetworkAclsPtr(v *DataCollectionEndpointNetworkAclsArgs) DataCollectionEndpointNetworkAclsPtrInput {
	return (*dataCollectionEndpointNetworkAclsPtrType)(v)
}

func (*dataCollectionEndpointNetworkAclsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (i *dataCollectionEndpointNetworkAclsPtrType) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return i.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionEndpointNetworkAclsPtrType) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointNetworkAclsPtrOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointNetworkAclsOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsOutput() DataCollectionEndpointNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return o.ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(context.Background())
}

func (o DataCollectionEndpointNetworkAclsOutput) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionEndpointNetworkAcls) *DataCollectionEndpointNetworkAcls {
		return &v
	}).(DataCollectionEndpointNetworkAclsPtrOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointNetworkAclsOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointNetworkAcls) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type DataCollectionEndpointNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) ToDataCollectionEndpointNetworkAclsPtrOutput() DataCollectionEndpointNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) ToDataCollectionEndpointNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointNetworkAclsPtrOutput) Elem() DataCollectionEndpointNetworkAclsOutput {
	return o.ApplyT(func(v *DataCollectionEndpointNetworkAcls) DataCollectionEndpointNetworkAcls {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointNetworkAcls
		return ret
	}).(DataCollectionEndpointNetworkAclsOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointNetworkAclsPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// DataCollectionEndpointResourceIdentityInput is an input type that accepts DataCollectionEndpointResourceIdentityArgs and DataCollectionEndpointResourceIdentityOutput values.
// You can construct a concrete instance of `DataCollectionEndpointResourceIdentityInput` via:
//
//	DataCollectionEndpointResourceIdentityArgs{...}
type DataCollectionEndpointResourceIdentityInput interface {
	pulumi.Input

	ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput
	ToDataCollectionEndpointResourceIdentityOutputWithContext(context.Context) DataCollectionEndpointResourceIdentityOutput
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (DataCollectionEndpointResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput {
	return i.ToDataCollectionEndpointResourceIdentityOutputWithContext(context.Background())
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityOutput)
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return i.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DataCollectionEndpointResourceIdentityArgs) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityOutput).ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx)
}

// DataCollectionEndpointResourceIdentityPtrInput is an input type that accepts DataCollectionEndpointResourceIdentityArgs, DataCollectionEndpointResourceIdentityPtr and DataCollectionEndpointResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DataCollectionEndpointResourceIdentityPtrInput` via:
//
//	        DataCollectionEndpointResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DataCollectionEndpointResourceIdentityPtrInput interface {
	pulumi.Input

	ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput
	ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Context) DataCollectionEndpointResourceIdentityPtrOutput
}

type dataCollectionEndpointResourceIdentityPtrType DataCollectionEndpointResourceIdentityArgs

func DataCollectionEndpointResourceIdentityPtr(v *DataCollectionEndpointResourceIdentityArgs) DataCollectionEndpointResourceIdentityPtrInput {
	return (*dataCollectionEndpointResourceIdentityPtrType)(v)
}

func (*dataCollectionEndpointResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (i *dataCollectionEndpointResourceIdentityPtrType) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return i.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *dataCollectionEndpointResourceIdentityPtrType) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionEndpointResourceIdentityPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityOutput() DataCollectionEndpointResourceIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return o.ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DataCollectionEndpointResourceIdentityOutput) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionEndpointResourceIdentity) *DataCollectionEndpointResourceIdentity {
		return &v
	}).(DataCollectionEndpointResourceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type DataCollectionEndpointResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) ToDataCollectionEndpointResourceIdentityPtrOutput() DataCollectionEndpointResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) ToDataCollectionEndpointResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceIdentityPtrOutput) Elem() DataCollectionEndpointResourceIdentityOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) DataCollectionEndpointResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResourceIdentity
		return ret
	}).(DataCollectionEndpointResourceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceResponseIdentity struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity of the resource.
type DataCollectionEndpointResourceResponseIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseIdentityOutput) ToDataCollectionEndpointResourceResponseIdentityOutput() DataCollectionEndpointResourceResponseIdentityOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityOutput) ToDataCollectionEndpointResourceResponseIdentityOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseIdentityOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type DataCollectionEndpointResourceResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) ToDataCollectionEndpointResourceResponseIdentityPtrOutput() DataCollectionEndpointResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) ToDataCollectionEndpointResourceResponseIdentityPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) Elem() DataCollectionEndpointResourceResponseIdentityOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) DataCollectionEndpointResourceResponseIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResourceResponseIdentity
		return ret
	}).(DataCollectionEndpointResourceResponseIdentityOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionEndpointResourceResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionEndpointResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionEndpointResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionEndpointResourceResponseSystemDataOutput) ToDataCollectionEndpointResourceResponseSystemDataOutput() DataCollectionEndpointResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionEndpointResourceResponseSystemDataOutput) ToDataCollectionEndpointResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionEndpointResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionEndpointResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResourceResponseSystemData) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The endpoint used by clients to access their configuration.
type DataCollectionEndpointResponseConfigurationAccess struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to access their configuration.
type DataCollectionEndpointResponseConfigurationAccessOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseConfigurationAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseConfigurationAccess)(nil)).Elem()
}

func (o DataCollectionEndpointResponseConfigurationAccessOutput) ToDataCollectionEndpointResponseConfigurationAccessOutput() DataCollectionEndpointResponseConfigurationAccessOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessOutput) ToDataCollectionEndpointResponseConfigurationAccessOutputWithContext(ctx context.Context) DataCollectionEndpointResponseConfigurationAccessOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseConfigurationAccessOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseConfigurationAccess) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseConfigurationAccessPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseConfigurationAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseConfigurationAccess)(nil)).Elem()
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) ToDataCollectionEndpointResponseConfigurationAccessPtrOutput() DataCollectionEndpointResponseConfigurationAccessPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) ToDataCollectionEndpointResponseConfigurationAccessPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseConfigurationAccessPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) Elem() DataCollectionEndpointResponseConfigurationAccessOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseConfigurationAccess) DataCollectionEndpointResponseConfigurationAccess {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseConfigurationAccess
		return ret
	}).(DataCollectionEndpointResponseConfigurationAccessOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseConfigurationAccessPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseConfigurationAccess) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Failover configuration on this endpoint. This property is READ-ONLY.
type DataCollectionEndpointResponseFailoverConfiguration struct {
	// Active location where data flow will occur.
	ActiveLocation *string `pulumi:"activeLocation"`
	// Locations that are configured for failover.
	Locations []LocationSpecResponse `pulumi:"locations"`
}

// Failover configuration on this endpoint. This property is READ-ONLY.
type DataCollectionEndpointResponseFailoverConfigurationOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseFailoverConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseFailoverConfiguration)(nil)).Elem()
}

func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ToDataCollectionEndpointResponseFailoverConfigurationOutput() DataCollectionEndpointResponseFailoverConfigurationOutput {
	return o
}

func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ToDataCollectionEndpointResponseFailoverConfigurationOutputWithContext(ctx context.Context) DataCollectionEndpointResponseFailoverConfigurationOutput {
	return o
}

// Active location where data flow will occur.
func (o DataCollectionEndpointResponseFailoverConfigurationOutput) ActiveLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseFailoverConfiguration) *string { return v.ActiveLocation }).(pulumi.StringPtrOutput)
}

// Locations that are configured for failover.
func (o DataCollectionEndpointResponseFailoverConfigurationOutput) Locations() LocationSpecResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseFailoverConfiguration) []LocationSpecResponse { return v.Locations }).(LocationSpecResponseArrayOutput)
}

// The endpoint used by clients to ingest logs.
type DataCollectionEndpointResponseLogsIngestion struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to ingest logs.
type DataCollectionEndpointResponseLogsIngestionOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseLogsIngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseLogsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseLogsIngestionOutput) ToDataCollectionEndpointResponseLogsIngestionOutput() DataCollectionEndpointResponseLogsIngestionOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionOutput) ToDataCollectionEndpointResponseLogsIngestionOutputWithContext(ctx context.Context) DataCollectionEndpointResponseLogsIngestionOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseLogsIngestionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseLogsIngestion) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseLogsIngestionPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseLogsIngestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseLogsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) ToDataCollectionEndpointResponseLogsIngestionPtrOutput() DataCollectionEndpointResponseLogsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) ToDataCollectionEndpointResponseLogsIngestionPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseLogsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) Elem() DataCollectionEndpointResponseLogsIngestionOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseLogsIngestion) DataCollectionEndpointResponseLogsIngestion {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseLogsIngestion
		return ret
	}).(DataCollectionEndpointResponseLogsIngestionOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseLogsIngestionPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseLogsIngestion) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Metadata for the resource. This property is READ-ONLY.
type DataCollectionEndpointResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata for the resource. This property is READ-ONLY.
type DataCollectionEndpointResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseMetadata)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetadataOutput) ToDataCollectionEndpointResponseMetadataOutput() DataCollectionEndpointResponseMetadataOutput {
	return o
}

func (o DataCollectionEndpointResponseMetadataOutput) ToDataCollectionEndpointResponseMetadataOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionEndpointResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionEndpointResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// The endpoint used by clients to ingest metrics.
type DataCollectionEndpointResponseMetricsIngestion struct {
	// The endpoint. This property is READ-ONLY.
	Endpoint string `pulumi:"endpoint"`
}

// The endpoint used by clients to ingest metrics.
type DataCollectionEndpointResponseMetricsIngestionOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetricsIngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseMetricsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetricsIngestionOutput) ToDataCollectionEndpointResponseMetricsIngestionOutput() DataCollectionEndpointResponseMetricsIngestionOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionOutput) ToDataCollectionEndpointResponseMetricsIngestionOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetricsIngestionOutput {
	return o
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseMetricsIngestionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseMetricsIngestion) string { return v.Endpoint }).(pulumi.StringOutput)
}

type DataCollectionEndpointResponseMetricsIngestionPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseMetricsIngestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseMetricsIngestion)(nil)).Elem()
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) ToDataCollectionEndpointResponseMetricsIngestionPtrOutput() DataCollectionEndpointResponseMetricsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) ToDataCollectionEndpointResponseMetricsIngestionPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseMetricsIngestionPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) Elem() DataCollectionEndpointResponseMetricsIngestionOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseMetricsIngestion) DataCollectionEndpointResponseMetricsIngestion {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseMetricsIngestion
		return ret
	}).(DataCollectionEndpointResponseMetricsIngestionOutput)
}

// The endpoint. This property is READ-ONLY.
func (o DataCollectionEndpointResponseMetricsIngestionPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseMetricsIngestion) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Network access control rules for the endpoints.
type DataCollectionEndpointResponseNetworkAcls struct {
	// The configuration to set whether network access from public internet to the endpoints are allowed.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// Network access control rules for the endpoints.
type DataCollectionEndpointResponseNetworkAclsOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionEndpointResponseNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointResponseNetworkAclsOutput) ToDataCollectionEndpointResponseNetworkAclsOutput() DataCollectionEndpointResponseNetworkAclsOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsOutput) ToDataCollectionEndpointResponseNetworkAclsOutputWithContext(ctx context.Context) DataCollectionEndpointResponseNetworkAclsOutput {
	return o
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointResponseNetworkAclsOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionEndpointResponseNetworkAcls) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type DataCollectionEndpointResponseNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionEndpointResponseNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionEndpointResponseNetworkAcls)(nil)).Elem()
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) ToDataCollectionEndpointResponseNetworkAclsPtrOutput() DataCollectionEndpointResponseNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) ToDataCollectionEndpointResponseNetworkAclsPtrOutputWithContext(ctx context.Context) DataCollectionEndpointResponseNetworkAclsPtrOutput {
	return o
}

func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) Elem() DataCollectionEndpointResponseNetworkAclsOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseNetworkAcls) DataCollectionEndpointResponseNetworkAcls {
		if v != nil {
			return *v
		}
		var ret DataCollectionEndpointResponseNetworkAcls
		return ret
	}).(DataCollectionEndpointResponseNetworkAclsOutput)
}

// The configuration to set whether network access from public internet to the endpoints are allowed.
func (o DataCollectionEndpointResponseNetworkAclsPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionEndpointResponseNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ToDataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput() DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) ToDataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationProxyOnlyResourceResponseSystemData) *string {
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// Metadata about the resource
type DataCollectionRuleAssociationResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata about the resource
type DataCollectionRuleAssociationResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleAssociationResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleAssociationResponseMetadata)(nil)).Elem()
}

func (o DataCollectionRuleAssociationResponseMetadataOutput) ToDataCollectionRuleAssociationResponseMetadataOutput() DataCollectionRuleAssociationResponseMetadataOutput {
	return o
}

func (o DataCollectionRuleAssociationResponseMetadataOutput) ToDataCollectionRuleAssociationResponseMetadataOutputWithContext(ctx context.Context) DataCollectionRuleAssociationResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleAssociationResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleAssociationResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleAssociationResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSources struct {
	// Specifications of pull based data sources
	DataImports *DataSourcesSpecDataImports `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSource `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs []IisLogsDataSource `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles []LogFilesDataSource `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSource `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry []PlatformTelemetryDataSource `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder []PrometheusForwarderDataSource `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSource `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSource `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs []WindowsFirewallLogsDataSource `pulumi:"windowsFirewallLogs"`
}

// DataCollectionRuleDataSourcesInput is an input type that accepts DataCollectionRuleDataSourcesArgs and DataCollectionRuleDataSourcesOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesInput` via:
//
//	DataCollectionRuleDataSourcesArgs{...}
type DataCollectionRuleDataSourcesInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput
	ToDataCollectionRuleDataSourcesOutputWithContext(context.Context) DataCollectionRuleDataSourcesOutput
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesArgs struct {
	// Specifications of pull based data sources
	DataImports DataSourcesSpecDataImportsPtrInput `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions ExtensionDataSourceArrayInput `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs IisLogsDataSourceArrayInput `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles LogFilesDataSourceArrayInput `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters PerfCounterDataSourceArrayInput `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry PlatformTelemetryDataSourceArrayInput `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder PrometheusForwarderDataSourceArrayInput `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog SyslogDataSourceArrayInput `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs WindowsEventLogDataSourceArrayInput `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs WindowsFirewallLogsDataSourceArrayInput `pulumi:"windowsFirewallLogs"`
}

func (DataCollectionRuleDataSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return i.ToDataCollectionRuleDataSourcesOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput)
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDataSourcesArgs) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesOutput).ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx)
}

// DataCollectionRuleDataSourcesPtrInput is an input type that accepts DataCollectionRuleDataSourcesArgs, DataCollectionRuleDataSourcesPtr and DataCollectionRuleDataSourcesPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDataSourcesPtrInput` via:
//
//	        DataCollectionRuleDataSourcesArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDataSourcesPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput
	ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Context) DataCollectionRuleDataSourcesPtrOutput
}

type dataCollectionRuleDataSourcesPtrType DataCollectionRuleDataSourcesArgs

func DataCollectionRuleDataSourcesPtr(v *DataCollectionRuleDataSourcesArgs) DataCollectionRuleDataSourcesPtrInput {
	return (*dataCollectionRuleDataSourcesPtrType)(v)
}

func (*dataCollectionRuleDataSourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return i.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDataSourcesPtrType) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDataSourcesPtrOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutput() DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesOutput {
	return o
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o.ToDataCollectionRuleDataSourcesPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDataSourcesOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDataSources) *DataCollectionRuleDataSources {
		return &v
	}).(DataCollectionRuleDataSourcesPtrOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleDataSourcesOutput) DataImports() DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) *DataSourcesSpecDataImports { return v.DataImports }).(DataSourcesSpecDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []ExtensionDataSource { return v.Extensions }).(ExtensionDataSourceArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleDataSourcesOutput) IisLogs() IisLogsDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []IisLogsDataSource { return v.IisLogs }).(IisLogsDataSourceArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleDataSourcesOutput) LogFiles() LogFilesDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []LogFilesDataSource { return v.LogFiles }).(LogFilesDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PerfCounterDataSource { return v.PerformanceCounters }).(PerfCounterDataSourceArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleDataSourcesOutput) PlatformTelemetry() PlatformTelemetryDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PlatformTelemetryDataSource { return v.PlatformTelemetry }).(PlatformTelemetryDataSourceArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleDataSourcesOutput) PrometheusForwarder() PrometheusForwarderDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []PrometheusForwarderDataSource { return v.PrometheusForwarder }).(PrometheusForwarderDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []SyslogDataSource { return v.Syslog }).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []WindowsEventLogDataSource { return v.WindowsEventLogs }).(WindowsEventLogDataSourceArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleDataSourcesOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDataSources) []WindowsFirewallLogsDataSource { return v.WindowsFirewallLogs }).(WindowsFirewallLogsDataSourceArrayOutput)
}

type DataCollectionRuleDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDataSources)(nil)).Elem()
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutput() DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) ToDataCollectionRuleDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleDataSourcesPtrOutput) Elem() DataCollectionRuleDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) DataCollectionRuleDataSources {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDataSources
		return ret
	}).(DataCollectionRuleDataSourcesOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleDataSourcesPtrOutput) DataImports() DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) *DataSourcesSpecDataImports {
		if v == nil {
			return nil
		}
		return v.DataImports
	}).(DataSourcesSpecDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Extensions() ExtensionDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []ExtensionDataSource {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) IisLogs() IisLogsDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []IisLogsDataSource {
		if v == nil {
			return nil
		}
		return v.IisLogs
	}).(IisLogsDataSourceArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) LogFiles() LogFilesDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []LogFilesDataSource {
		if v == nil {
			return nil
		}
		return v.LogFiles
	}).(LogFilesDataSourceArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PerfCounterDataSource {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleDataSourcesPtrOutput) PlatformTelemetry() PlatformTelemetryDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PlatformTelemetryDataSource {
		if v == nil {
			return nil
		}
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) PrometheusForwarder() PrometheusForwarderDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []PrometheusForwarderDataSource {
		if v == nil {
			return nil
		}
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) Syslog() SyslogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []SyslogDataSource {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []WindowsEventLogDataSource {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleDataSourcesPtrOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDataSources) []WindowsFirewallLogsDataSource {
		if v == nil {
			return nil
		}
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinations struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs []EventHubDestination `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect []EventHubDirectDestination `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestination `pulumi:"logAnalytics"`
	// List of monitoring account destinations.
	MonitoringAccounts []MonitoringAccountDestination `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts []StorageBlobDestination `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect []StorageBlobDestination `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect []StorageTableDestination `pulumi:"storageTablesDirect"`
}

// DataCollectionRuleDestinationsInput is an input type that accepts DataCollectionRuleDestinationsArgs and DataCollectionRuleDestinationsOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsInput` via:
//
//	DataCollectionRuleDestinationsArgs{...}
type DataCollectionRuleDestinationsInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput
	ToDataCollectionRuleDestinationsOutputWithContext(context.Context) DataCollectionRuleDestinationsOutput
}

// The specification of destinations.
type DataCollectionRuleDestinationsArgs struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics DestinationsSpecAzureMonitorMetricsPtrInput `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs EventHubDestinationArrayInput `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect EventHubDirectDestinationArrayInput `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics LogAnalyticsDestinationArrayInput `pulumi:"logAnalytics"`
	// List of monitoring account destinations.
	MonitoringAccounts MonitoringAccountDestinationArrayInput `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts StorageBlobDestinationArrayInput `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect StorageBlobDestinationArrayInput `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect StorageTableDestinationArrayInput `pulumi:"storageTablesDirect"`
}

func (DataCollectionRuleDestinationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return i.ToDataCollectionRuleDestinationsOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput)
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleDestinationsArgs) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsOutput).ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx)
}

// DataCollectionRuleDestinationsPtrInput is an input type that accepts DataCollectionRuleDestinationsArgs, DataCollectionRuleDestinationsPtr and DataCollectionRuleDestinationsPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleDestinationsPtrInput` via:
//
//	        DataCollectionRuleDestinationsArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleDestinationsPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput
	ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Context) DataCollectionRuleDestinationsPtrOutput
}

type dataCollectionRuleDestinationsPtrType DataCollectionRuleDestinationsArgs

func DataCollectionRuleDestinationsPtr(v *DataCollectionRuleDestinationsArgs) DataCollectionRuleDestinationsPtrInput {
	return (*dataCollectionRuleDestinationsPtrType)(v)
}

func (*dataCollectionRuleDestinationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return i.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleDestinationsPtrType) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleDestinationsPtrOutput)
}

// The specification of destinations.
type DataCollectionRuleDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutput() DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsOutput {
	return o
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o.ToDataCollectionRuleDestinationsPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleDestinationsOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleDestinations) *DataCollectionRuleDestinations {
		return &v
	}).(DataCollectionRuleDestinationsPtrOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleDestinationsOutput) EventHubs() EventHubDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []EventHubDestination { return v.EventHubs }).(EventHubDestinationArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleDestinationsOutput) EventHubsDirect() EventHubDirectDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []EventHubDirectDestination { return v.EventHubsDirect }).(EventHubDirectDestinationArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []LogAnalyticsDestination { return v.LogAnalytics }).(LogAnalyticsDestinationArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleDestinationsOutput) MonitoringAccounts() MonitoringAccountDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []MonitoringAccountDestination { return v.MonitoringAccounts }).(MonitoringAccountDestinationArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleDestinationsOutput) StorageAccounts() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageBlobDestination { return v.StorageAccounts }).(StorageBlobDestinationArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleDestinationsOutput) StorageBlobsDirect() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageBlobDestination { return v.StorageBlobsDirect }).(StorageBlobDestinationArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleDestinationsOutput) StorageTablesDirect() StorageTableDestinationArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleDestinations) []StorageTableDestination { return v.StorageTablesDirect }).(StorageTableDestinationArrayOutput)
}

type DataCollectionRuleDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleDestinations)(nil)).Elem()
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutput() DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) ToDataCollectionRuleDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleDestinationsPtrOutput) Elem() DataCollectionRuleDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) DataCollectionRuleDestinations {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleDestinations
		return ret
	}).(DataCollectionRuleDestinationsOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) *DestinationsSpecAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleDestinationsPtrOutput) EventHubs() EventHubDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []EventHubDestination {
		if v == nil {
			return nil
		}
		return v.EventHubs
	}).(EventHubDestinationArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleDestinationsPtrOutput) EventHubsDirect() EventHubDirectDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []EventHubDirectDestination {
		if v == nil {
			return nil
		}
		return v.EventHubsDirect
	}).(EventHubDirectDestinationArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []LogAnalyticsDestination {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleDestinationsPtrOutput) MonitoringAccounts() MonitoringAccountDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []MonitoringAccountDestination {
		if v == nil {
			return nil
		}
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleDestinationsPtrOutput) StorageAccounts() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageBlobDestination {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageBlobDestinationArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleDestinationsPtrOutput) StorageBlobsDirect() StorageBlobDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageBlobDestination {
		if v == nil {
			return nil
		}
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleDestinationsPtrOutput) StorageTablesDirect() StorageTableDestinationArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleDestinations) []StorageTableDestination {
		if v == nil {
			return nil
		}
		return v.StorageTablesDirect
	}).(StorageTableDestinationArrayOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// DataCollectionRuleResourceIdentityInput is an input type that accepts DataCollectionRuleResourceIdentityArgs and DataCollectionRuleResourceIdentityOutput values.
// You can construct a concrete instance of `DataCollectionRuleResourceIdentityInput` via:
//
//	DataCollectionRuleResourceIdentityArgs{...}
type DataCollectionRuleResourceIdentityInput interface {
	pulumi.Input

	ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput
	ToDataCollectionRuleResourceIdentityOutputWithContext(context.Context) DataCollectionRuleResourceIdentityOutput
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (DataCollectionRuleResourceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput {
	return i.ToDataCollectionRuleResourceIdentityOutputWithContext(context.Background())
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityOutput)
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return i.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (i DataCollectionRuleResourceIdentityArgs) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityOutput).ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx)
}

// DataCollectionRuleResourceIdentityPtrInput is an input type that accepts DataCollectionRuleResourceIdentityArgs, DataCollectionRuleResourceIdentityPtr and DataCollectionRuleResourceIdentityPtrOutput values.
// You can construct a concrete instance of `DataCollectionRuleResourceIdentityPtrInput` via:
//
//	        DataCollectionRuleResourceIdentityArgs{...}
//
//	or:
//
//	        nil
type DataCollectionRuleResourceIdentityPtrInput interface {
	pulumi.Input

	ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput
	ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Context) DataCollectionRuleResourceIdentityPtrOutput
}

type dataCollectionRuleResourceIdentityPtrType DataCollectionRuleResourceIdentityArgs

func DataCollectionRuleResourceIdentityPtr(v *DataCollectionRuleResourceIdentityArgs) DataCollectionRuleResourceIdentityPtrInput {
	return (*dataCollectionRuleResourceIdentityPtrType)(v)
}

func (*dataCollectionRuleResourceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (i *dataCollectionRuleResourceIdentityPtrType) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return i.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (i *dataCollectionRuleResourceIdentityPtrType) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectionRuleResourceIdentityPtrOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityOutput() DataCollectionRuleResourceIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return o.ToDataCollectionRuleResourceIdentityPtrOutputWithContext(context.Background())
}

func (o DataCollectionRuleResourceIdentityOutput) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollectionRuleResourceIdentity) *DataCollectionRuleResourceIdentity {
		return &v
	}).(DataCollectionRuleResourceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type DataCollectionRuleResourceIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceIdentityPtrOutput) ToDataCollectionRuleResourceIdentityPtrOutput() DataCollectionRuleResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityPtrOutput) ToDataCollectionRuleResourceIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceIdentityPtrOutput) Elem() DataCollectionRuleResourceIdentityOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) DataCollectionRuleResourceIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResourceIdentity
		return ret
	}).(DataCollectionRuleResourceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity of the resource.
type DataCollectionRuleResourceResponseIdentity struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity of the resource.
type DataCollectionRuleResourceResponseIdentityOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseIdentityOutput) ToDataCollectionRuleResourceResponseIdentityOutput() DataCollectionRuleResourceResponseIdentityOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityOutput) ToDataCollectionRuleResourceResponseIdentityOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseIdentityOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceResponseIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceResponseIdentityOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type DataCollectionRuleResourceResponseIdentityPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResourceResponseIdentity)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) ToDataCollectionRuleResourceResponseIdentityPtrOutput() DataCollectionRuleResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) ToDataCollectionRuleResourceResponseIdentityPtrOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseIdentityPtrOutput {
	return o
}

func (o DataCollectionRuleResourceResponseIdentityPtrOutput) Elem() DataCollectionRuleResourceResponseIdentityOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) DataCollectionRuleResourceResponseIdentity {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResourceResponseIdentity
		return ret
	}).(DataCollectionRuleResourceResponseIdentityOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o DataCollectionRuleResourceResponseIdentityPtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *DataCollectionRuleResourceResponseIdentity) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleResourceResponseSystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type DataCollectionRuleResourceResponseSystemDataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResourceResponseSystemDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResourceResponseSystemData)(nil)).Elem()
}

func (o DataCollectionRuleResourceResponseSystemDataOutput) ToDataCollectionRuleResourceResponseSystemDataOutput() DataCollectionRuleResourceResponseSystemDataOutput {
	return o
}

func (o DataCollectionRuleResourceResponseSystemDataOutput) ToDataCollectionRuleResourceResponseSystemDataOutputWithContext(ctx context.Context) DataCollectionRuleResourceResponseSystemDataOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o DataCollectionRuleResourceResponseSystemDataOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResourceResponseSystemData) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSources struct {
	// Specifications of pull based data sources
	DataImports *DataSourcesSpecResponseDataImports `pulumi:"dataImports"`
	// The list of Azure VM extension data source configurations.
	Extensions []ExtensionDataSourceResponse `pulumi:"extensions"`
	// The list of IIS logs source configurations.
	IisLogs []IisLogsDataSourceResponse `pulumi:"iisLogs"`
	// The list of Log files source configurations.
	LogFiles []LogFilesDataSourceResponse `pulumi:"logFiles"`
	// The list of performance counter data source configurations.
	PerformanceCounters []PerfCounterDataSourceResponse `pulumi:"performanceCounters"`
	// The list of platform telemetry configurations
	PlatformTelemetry []PlatformTelemetryDataSourceResponse `pulumi:"platformTelemetry"`
	// The list of Prometheus forwarder data source configurations.
	PrometheusForwarder []PrometheusForwarderDataSourceResponse `pulumi:"prometheusForwarder"`
	// The list of Syslog data source configurations.
	Syslog []SyslogDataSourceResponse `pulumi:"syslog"`
	// The list of Windows Event Log data source configurations.
	WindowsEventLogs []WindowsEventLogDataSourceResponse `pulumi:"windowsEventLogs"`
	// The list of Windows Firewall logs source configurations.
	WindowsFirewallLogs []WindowsFirewallLogsDataSourceResponse `pulumi:"windowsFirewallLogs"`
}

// The specification of data sources.
// This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
type DataCollectionRuleResponseDataSourcesOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutput() DataCollectionRuleResponseDataSourcesOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesOutput) ToDataCollectionRuleResponseDataSourcesOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesOutput {
	return o
}

// Specifications of pull based data sources
func (o DataCollectionRuleResponseDataSourcesOutput) DataImports() DataSourcesSpecResponseDataImportsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) *DataSourcesSpecResponseDataImports {
		return v.DataImports
	}).(DataSourcesSpecResponseDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse { return v.Extensions }).(ExtensionDataSourceResponseArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) IisLogs() IisLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []IisLogsDataSourceResponse { return v.IisLogs }).(IisLogsDataSourceResponseArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) LogFiles() LogFilesDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []LogFilesDataSourceResponse { return v.LogFiles }).(LogFilesDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleResponseDataSourcesOutput) PlatformTelemetry() PlatformTelemetryDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PlatformTelemetryDataSourceResponse {
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceResponseArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) PrometheusForwarder() PrometheusForwarderDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []PrometheusForwarderDataSourceResponse {
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse { return v.Syslog }).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleResponseDataSourcesOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDataSources) []WindowsFirewallLogsDataSourceResponse {
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceResponseArrayOutput)
}

type DataCollectionRuleResponseDataSourcesPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDataSourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDataSources)(nil)).Elem()
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutput() DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) ToDataCollectionRuleResponseDataSourcesPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDataSourcesPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDataSourcesPtrOutput) Elem() DataCollectionRuleResponseDataSourcesOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) DataCollectionRuleResponseDataSources {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseDataSources
		return ret
	}).(DataCollectionRuleResponseDataSourcesOutput)
}

// Specifications of pull based data sources
func (o DataCollectionRuleResponseDataSourcesPtrOutput) DataImports() DataSourcesSpecResponseDataImportsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) *DataSourcesSpecResponseDataImports {
		if v == nil {
			return nil
		}
		return v.DataImports
	}).(DataSourcesSpecResponseDataImportsPtrOutput)
}

// The list of Azure VM extension data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Extensions() ExtensionDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []ExtensionDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(ExtensionDataSourceResponseArrayOutput)
}

// The list of IIS logs source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) IisLogs() IisLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []IisLogsDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.IisLogs
	}).(IisLogsDataSourceResponseArrayOutput)
}

// The list of Log files source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) LogFiles() LogFilesDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []LogFilesDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.LogFiles
	}).(LogFilesDataSourceResponseArrayOutput)
}

// The list of performance counter data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PerformanceCounters() PerfCounterDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PerfCounterDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PerformanceCounters
	}).(PerfCounterDataSourceResponseArrayOutput)
}

// The list of platform telemetry configurations
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PlatformTelemetry() PlatformTelemetryDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PlatformTelemetryDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PlatformTelemetry
	}).(PlatformTelemetryDataSourceResponseArrayOutput)
}

// The list of Prometheus forwarder data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) PrometheusForwarder() PrometheusForwarderDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []PrometheusForwarderDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.PrometheusForwarder
	}).(PrometheusForwarderDataSourceResponseArrayOutput)
}

// The list of Syslog data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) Syslog() SyslogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []SyslogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.Syslog
	}).(SyslogDataSourceResponseArrayOutput)
}

// The list of Windows Event Log data source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) WindowsEventLogs() WindowsEventLogDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []WindowsEventLogDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.WindowsEventLogs
	}).(WindowsEventLogDataSourceResponseArrayOutput)
}

// The list of Windows Firewall logs source configurations.
func (o DataCollectionRuleResponseDataSourcesPtrOutput) WindowsFirewallLogs() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDataSources) []WindowsFirewallLogsDataSourceResponse {
		if v == nil {
			return nil
		}
		return v.WindowsFirewallLogs
	}).(WindowsFirewallLogsDataSourceResponseArrayOutput)
}

// The specification of destinations.
type DataCollectionRuleResponseDestinations struct {
	// Azure Monitor Metrics destination.
	AzureMonitorMetrics *DestinationsSpecResponseAzureMonitorMetrics `pulumi:"azureMonitorMetrics"`
	// List of Event Hubs destinations.
	EventHubs []EventHubDestinationResponse `pulumi:"eventHubs"`
	// List of Event Hubs Direct destinations.
	EventHubsDirect []EventHubDirectDestinationResponse `pulumi:"eventHubsDirect"`
	// List of Log Analytics destinations.
	LogAnalytics []LogAnalyticsDestinationResponse `pulumi:"logAnalytics"`
	// List of monitoring account destinations.
	MonitoringAccounts []MonitoringAccountDestinationResponse `pulumi:"monitoringAccounts"`
	// List of storage accounts destinations.
	StorageAccounts []StorageBlobDestinationResponse `pulumi:"storageAccounts"`
	// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
	StorageBlobsDirect []StorageBlobDestinationResponse `pulumi:"storageBlobsDirect"`
	// List of Storage Table Direct destinations.
	StorageTablesDirect []StorageTableDestinationResponse `pulumi:"storageTablesDirect"`
}

// The specification of destinations.
type DataCollectionRuleResponseDestinationsOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutput() DataCollectionRuleResponseDestinationsOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsOutput) ToDataCollectionRuleResponseDestinationsOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsOutput {
	return o
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleResponseDestinationsOutput) EventHubs() EventHubDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []EventHubDestinationResponse { return v.EventHubs }).(EventHubDestinationResponseArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleResponseDestinationsOutput) EventHubsDirect() EventHubDirectDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []EventHubDirectDestinationResponse {
		return v.EventHubsDirect
	}).(EventHubDirectDestinationResponseArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleResponseDestinationsOutput) MonitoringAccounts() MonitoringAccountDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []MonitoringAccountDestinationResponse {
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationResponseArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleResponseDestinationsOutput) StorageAccounts() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		return v.StorageAccounts
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleResponseDestinationsOutput) StorageBlobsDirect() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleResponseDestinationsOutput) StorageTablesDirect() StorageTableDestinationResponseArrayOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseDestinations) []StorageTableDestinationResponse {
		return v.StorageTablesDirect
	}).(StorageTableDestinationResponseArrayOutput)
}

type DataCollectionRuleResponseDestinationsPtrOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseDestinationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectionRuleResponseDestinations)(nil)).Elem()
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutput() DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) ToDataCollectionRuleResponseDestinationsPtrOutputWithContext(ctx context.Context) DataCollectionRuleResponseDestinationsPtrOutput {
	return o
}

func (o DataCollectionRuleResponseDestinationsPtrOutput) Elem() DataCollectionRuleResponseDestinationsOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) DataCollectionRuleResponseDestinations {
		if v != nil {
			return *v
		}
		var ret DataCollectionRuleResponseDestinations
		return ret
	}).(DataCollectionRuleResponseDestinationsOutput)
}

// Azure Monitor Metrics destination.
func (o DataCollectionRuleResponseDestinationsPtrOutput) AzureMonitorMetrics() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) *DestinationsSpecResponseAzureMonitorMetrics {
		if v == nil {
			return nil
		}
		return v.AzureMonitorMetrics
	}).(DestinationsSpecResponseAzureMonitorMetricsPtrOutput)
}

// List of Event Hubs destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) EventHubs() EventHubDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []EventHubDestinationResponse {
		if v == nil {
			return nil
		}
		return v.EventHubs
	}).(EventHubDestinationResponseArrayOutput)
}

// List of Event Hubs Direct destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) EventHubsDirect() EventHubDirectDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []EventHubDirectDestinationResponse {
		if v == nil {
			return nil
		}
		return v.EventHubsDirect
	}).(EventHubDirectDestinationResponseArrayOutput)
}

// List of Log Analytics destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) LogAnalytics() LogAnalyticsDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []LogAnalyticsDestinationResponse {
		if v == nil {
			return nil
		}
		return v.LogAnalytics
	}).(LogAnalyticsDestinationResponseArrayOutput)
}

// List of monitoring account destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) MonitoringAccounts() MonitoringAccountDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []MonitoringAccountDestinationResponse {
		if v == nil {
			return nil
		}
		return v.MonitoringAccounts
	}).(MonitoringAccountDestinationResponseArrayOutput)
}

// List of storage accounts destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageAccounts() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageAccounts
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageBlobsDirect() StorageBlobDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageBlobDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageBlobsDirect
	}).(StorageBlobDestinationResponseArrayOutput)
}

// List of Storage Table Direct destinations.
func (o DataCollectionRuleResponseDestinationsPtrOutput) StorageTablesDirect() StorageTableDestinationResponseArrayOutput {
	return o.ApplyT(func(v *DataCollectionRuleResponseDestinations) []StorageTableDestinationResponse {
		if v == nil {
			return nil
		}
		return v.StorageTablesDirect
	}).(StorageTableDestinationResponseArrayOutput)
}

// Metadata about the resource
type DataCollectionRuleResponseMetadata struct {
	// Azure offering managing this resource on-behalf-of customer.
	ProvisionedBy string `pulumi:"provisionedBy"`
	// Resource Id of azure offering managing this resource on-behalf-of customer.
	ProvisionedByResourceId string `pulumi:"provisionedByResourceId"`
}

// Metadata about the resource
type DataCollectionRuleResponseMetadataOutput struct{ *pulumi.OutputState }

func (DataCollectionRuleResponseMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectionRuleResponseMetadata)(nil)).Elem()
}

func (o DataCollectionRuleResponseMetadataOutput) ToDataCollectionRuleResponseMetadataOutput() DataCollectionRuleResponseMetadataOutput {
	return o
}

func (o DataCollectionRuleResponseMetadataOutput) ToDataCollectionRuleResponseMetadataOutputWithContext(ctx context.Context) DataCollectionRuleResponseMetadataOutput {
	return o
}

// Azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleResponseMetadataOutput) ProvisionedBy() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseMetadata) string { return v.ProvisionedBy }).(pulumi.StringOutput)
}

// Resource Id of azure offering managing this resource on-behalf-of customer.
func (o DataCollectionRuleResponseMetadataOutput) ProvisionedByResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v DataCollectionRuleResponseMetadata) string { return v.ProvisionedByResourceId }).(pulumi.StringOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlow struct {
	// The builtIn transform to transform stream data
	BuiltInTransform *string `pulumi:"builtInTransform"`
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream *string `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql *string `pulumi:"transformKql"`
}

// DataFlowInput is an input type that accepts DataFlowArgs and DataFlowOutput values.
// You can construct a concrete instance of `DataFlowInput` via:
//
//	DataFlowArgs{...}
type DataFlowInput interface {
	pulumi.Input

	ToDataFlowOutput() DataFlowOutput
	ToDataFlowOutputWithContext(context.Context) DataFlowOutput
}

// Definition of which streams are sent to which destinations.
type DataFlowArgs struct {
	// The builtIn transform to transform stream data
	BuiltInTransform pulumi.StringPtrInput `pulumi:"builtInTransform"`
	// List of destinations for this data flow.
	Destinations pulumi.StringArrayInput `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream pulumi.StringPtrInput `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql pulumi.StringPtrInput `pulumi:"transformKql"`
}

func (DataFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (i DataFlowArgs) ToDataFlowOutput() DataFlowOutput {
	return i.ToDataFlowOutputWithContext(context.Background())
}

func (i DataFlowArgs) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowOutput)
}

// DataFlowArrayInput is an input type that accepts DataFlowArray and DataFlowArrayOutput values.
// You can construct a concrete instance of `DataFlowArrayInput` via:
//
//	DataFlowArray{ DataFlowArgs{...} }
type DataFlowArrayInput interface {
	pulumi.Input

	ToDataFlowArrayOutput() DataFlowArrayOutput
	ToDataFlowArrayOutputWithContext(context.Context) DataFlowArrayOutput
}

type DataFlowArray []DataFlowInput

func (DataFlowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (i DataFlowArray) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return i.ToDataFlowArrayOutputWithContext(context.Background())
}

func (i DataFlowArray) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFlowArrayOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowOutput struct{ *pulumi.OutputState }

func (DataFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlow)(nil)).Elem()
}

func (o DataFlowOutput) ToDataFlowOutput() DataFlowOutput {
	return o
}

func (o DataFlowOutput) ToDataFlowOutputWithContext(ctx context.Context) DataFlowOutput {
	return o
}

// The builtIn transform to transform stream data
func (o DataFlowOutput) BuiltInTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.BuiltInTransform }).(pulumi.StringPtrOutput)
}

// List of destinations for this data flow.
func (o DataFlowOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the transform changes data to a different stream.
func (o DataFlowOutput) OutputStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.OutputStream }).(pulumi.StringPtrOutput)
}

// List of streams for this data flow.
func (o DataFlowOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlow) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o DataFlowOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlow) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type DataFlowArrayOutput struct{ *pulumi.OutputState }

func (DataFlowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlow)(nil)).Elem()
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutput() DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) ToDataFlowArrayOutputWithContext(ctx context.Context) DataFlowArrayOutput {
	return o
}

func (o DataFlowArrayOutput) Index(i pulumi.IntInput) DataFlowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlow {
		return vs[0].([]DataFlow)[vs[1].(int)]
	}).(DataFlowOutput)
}

// Definition of which streams are sent to which destinations.
type DataFlowResponse struct {
	// The builtIn transform to transform stream data
	BuiltInTransform *string `pulumi:"builtInTransform"`
	// List of destinations for this data flow.
	Destinations []string `pulumi:"destinations"`
	// The output stream of the transform. Only required if the transform changes data to a different stream.
	OutputStream *string `pulumi:"outputStream"`
	// List of streams for this data flow.
	Streams []string `pulumi:"streams"`
	// The KQL query to transform stream data.
	TransformKql *string `pulumi:"transformKql"`
}

// Definition of which streams are sent to which destinations.
type DataFlowResponseOutput struct{ *pulumi.OutputState }

func (DataFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutput() DataFlowResponseOutput {
	return o
}

func (o DataFlowResponseOutput) ToDataFlowResponseOutputWithContext(ctx context.Context) DataFlowResponseOutput {
	return o
}

// The builtIn transform to transform stream data
func (o DataFlowResponseOutput) BuiltInTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.BuiltInTransform }).(pulumi.StringPtrOutput)
}

// List of destinations for this data flow.
func (o DataFlowResponseOutput) Destinations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Destinations }).(pulumi.StringArrayOutput)
}

// The output stream of the transform. Only required if the transform changes data to a different stream.
func (o DataFlowResponseOutput) OutputStream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.OutputStream }).(pulumi.StringPtrOutput)
}

// List of streams for this data flow.
func (o DataFlowResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataFlowResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// The KQL query to transform stream data.
func (o DataFlowResponseOutput) TransformKql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFlowResponse) *string { return v.TransformKql }).(pulumi.StringPtrOutput)
}

type DataFlowResponseArrayOutput struct{ *pulumi.OutputState }

func (DataFlowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataFlowResponse)(nil)).Elem()
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutput() DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) ToDataFlowResponseArrayOutputWithContext(ctx context.Context) DataFlowResponseArrayOutput {
	return o
}

func (o DataFlowResponseArrayOutput) Index(i pulumi.IntInput) DataFlowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataFlowResponse {
		return vs[0].([]DataFlowResponse)[vs[1].(int)]
	}).(DataFlowResponseOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHub struct {
	// Event Hub consumer group name
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The stream to collect from EventHub
	Stream *string `pulumi:"stream"`
}

// DataImportSourcesEventHubInput is an input type that accepts DataImportSourcesEventHubArgs and DataImportSourcesEventHubOutput values.
// You can construct a concrete instance of `DataImportSourcesEventHubInput` via:
//
//	DataImportSourcesEventHubArgs{...}
type DataImportSourcesEventHubInput interface {
	pulumi.Input

	ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput
	ToDataImportSourcesEventHubOutputWithContext(context.Context) DataImportSourcesEventHubOutput
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHubArgs struct {
	// Event Hub consumer group name
	ConsumerGroup pulumi.StringPtrInput `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The stream to collect from EventHub
	Stream pulumi.StringPtrInput `pulumi:"stream"`
}

func (DataImportSourcesEventHubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesEventHub)(nil)).Elem()
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput {
	return i.ToDataImportSourcesEventHubOutputWithContext(context.Background())
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubOutputWithContext(ctx context.Context) DataImportSourcesEventHubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubOutput)
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return i.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (i DataImportSourcesEventHubArgs) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubOutput).ToDataImportSourcesEventHubPtrOutputWithContext(ctx)
}

// DataImportSourcesEventHubPtrInput is an input type that accepts DataImportSourcesEventHubArgs, DataImportSourcesEventHubPtr and DataImportSourcesEventHubPtrOutput values.
// You can construct a concrete instance of `DataImportSourcesEventHubPtrInput` via:
//
//	        DataImportSourcesEventHubArgs{...}
//
//	or:
//
//	        nil
type DataImportSourcesEventHubPtrInput interface {
	pulumi.Input

	ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput
	ToDataImportSourcesEventHubPtrOutputWithContext(context.Context) DataImportSourcesEventHubPtrOutput
}

type dataImportSourcesEventHubPtrType DataImportSourcesEventHubArgs

func DataImportSourcesEventHubPtr(v *DataImportSourcesEventHubArgs) DataImportSourcesEventHubPtrInput {
	return (*dataImportSourcesEventHubPtrType)(v)
}

func (*dataImportSourcesEventHubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesEventHub)(nil)).Elem()
}

func (i *dataImportSourcesEventHubPtrType) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return i.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (i *dataImportSourcesEventHubPtrType) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportSourcesEventHubPtrOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesEventHubOutput struct{ *pulumi.OutputState }

func (DataImportSourcesEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesEventHub)(nil)).Elem()
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubOutput() DataImportSourcesEventHubOutput {
	return o
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubOutputWithContext(ctx context.Context) DataImportSourcesEventHubOutput {
	return o
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return o.ToDataImportSourcesEventHubPtrOutputWithContext(context.Background())
}

func (o DataImportSourcesEventHubOutput) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataImportSourcesEventHub) *DataImportSourcesEventHub {
		return &v
	}).(DataImportSourcesEventHubPtrOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesEventHubOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesEventHubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesEventHubOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesEventHub) *string { return v.Stream }).(pulumi.StringPtrOutput)
}

type DataImportSourcesEventHubPtrOutput struct{ *pulumi.OutputState }

func (DataImportSourcesEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesEventHub)(nil)).Elem()
}

func (o DataImportSourcesEventHubPtrOutput) ToDataImportSourcesEventHubPtrOutput() DataImportSourcesEventHubPtrOutput {
	return o
}

func (o DataImportSourcesEventHubPtrOutput) ToDataImportSourcesEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesEventHubPtrOutput {
	return o
}

func (o DataImportSourcesEventHubPtrOutput) Elem() DataImportSourcesEventHubOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) DataImportSourcesEventHub {
		if v != nil {
			return *v
		}
		var ret DataImportSourcesEventHub
		return ret
	}).(DataImportSourcesEventHubOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesEventHubPtrOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroup
	}).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesEventHubPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Stream
	}).(pulumi.StringPtrOutput)
}

// Definition of Event Hub configuration.
type DataImportSourcesResponseEventHub struct {
	// Event Hub consumer group name
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The stream to collect from EventHub
	Stream *string `pulumi:"stream"`
}

// Definition of Event Hub configuration.
type DataImportSourcesResponseEventHubOutput struct{ *pulumi.OutputState }

func (DataImportSourcesResponseEventHubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportSourcesResponseEventHub)(nil)).Elem()
}

func (o DataImportSourcesResponseEventHubOutput) ToDataImportSourcesResponseEventHubOutput() DataImportSourcesResponseEventHubOutput {
	return o
}

func (o DataImportSourcesResponseEventHubOutput) ToDataImportSourcesResponseEventHubOutputWithContext(ctx context.Context) DataImportSourcesResponseEventHubOutput {
	return o
}

// Event Hub consumer group name
func (o DataImportSourcesResponseEventHubOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.ConsumerGroup }).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesResponseEventHubOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesResponseEventHubOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportSourcesResponseEventHub) *string { return v.Stream }).(pulumi.StringPtrOutput)
}

type DataImportSourcesResponseEventHubPtrOutput struct{ *pulumi.OutputState }

func (DataImportSourcesResponseEventHubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataImportSourcesResponseEventHub)(nil)).Elem()
}

func (o DataImportSourcesResponseEventHubPtrOutput) ToDataImportSourcesResponseEventHubPtrOutput() DataImportSourcesResponseEventHubPtrOutput {
	return o
}

func (o DataImportSourcesResponseEventHubPtrOutput) ToDataImportSourcesResponseEventHubPtrOutputWithContext(ctx context.Context) DataImportSourcesResponseEventHubPtrOutput {
	return o
}

func (o DataImportSourcesResponseEventHubPtrOutput) Elem() DataImportSourcesResponseEventHubOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) DataImportSourcesResponseEventHub {
		if v != nil {
			return *v
		}
		var ret DataImportSourcesResponseEventHub
		return ret
	}).(DataImportSourcesResponseEventHubOutput)
}

// Event Hub consumer group name
func (o DataImportSourcesResponseEventHubPtrOutput) ConsumerGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.ConsumerGroup
	}).(pulumi.StringPtrOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o DataImportSourcesResponseEventHubPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The stream to collect from EventHub
func (o DataImportSourcesResponseEventHubPtrOutput) Stream() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataImportSourcesResponseEventHub) *string {
		if v == nil {
			return nil
		}
		return v.Stream
	}).(pulumi.StringPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecDataImports struct {
	// Definition of Event Hub configuration.
	EventHub *DataImportSourcesEventHub `pulumi:"eventHub"`
}

// DataSourcesSpecDataImportsInput is an input type that accepts DataSourcesSpecDataImportsArgs and DataSourcesSpecDataImportsOutput values.
// You can construct a concrete instance of `DataSourcesSpecDataImportsInput` via:
//
//	DataSourcesSpecDataImportsArgs{...}
type DataSourcesSpecDataImportsInput interface {
	pulumi.Input

	ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput
	ToDataSourcesSpecDataImportsOutputWithContext(context.Context) DataSourcesSpecDataImportsOutput
}

// Specifications of pull based data sources
type DataSourcesSpecDataImportsArgs struct {
	// Definition of Event Hub configuration.
	EventHub DataImportSourcesEventHubPtrInput `pulumi:"eventHub"`
}

func (DataSourcesSpecDataImportsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecDataImports)(nil)).Elem()
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput {
	return i.ToDataSourcesSpecDataImportsOutputWithContext(context.Background())
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsOutput)
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return i.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (i DataSourcesSpecDataImportsArgs) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsOutput).ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx)
}

// DataSourcesSpecDataImportsPtrInput is an input type that accepts DataSourcesSpecDataImportsArgs, DataSourcesSpecDataImportsPtr and DataSourcesSpecDataImportsPtrOutput values.
// You can construct a concrete instance of `DataSourcesSpecDataImportsPtrInput` via:
//
//	        DataSourcesSpecDataImportsArgs{...}
//
//	or:
//
//	        nil
type DataSourcesSpecDataImportsPtrInput interface {
	pulumi.Input

	ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput
	ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Context) DataSourcesSpecDataImportsPtrOutput
}

type dataSourcesSpecDataImportsPtrType DataSourcesSpecDataImportsArgs

func DataSourcesSpecDataImportsPtr(v *DataSourcesSpecDataImportsArgs) DataSourcesSpecDataImportsPtrInput {
	return (*dataSourcesSpecDataImportsPtrType)(v)
}

func (*dataSourcesSpecDataImportsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecDataImports)(nil)).Elem()
}

func (i *dataSourcesSpecDataImportsPtrType) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return i.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (i *dataSourcesSpecDataImportsPtrType) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcesSpecDataImportsPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecDataImportsOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecDataImportsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecDataImports)(nil)).Elem()
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsOutput() DataSourcesSpecDataImportsOutput {
	return o
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsOutput {
	return o
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return o.ToDataSourcesSpecDataImportsPtrOutputWithContext(context.Background())
}

func (o DataSourcesSpecDataImportsOutput) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSourcesSpecDataImports) *DataSourcesSpecDataImports {
		return &v
	}).(DataSourcesSpecDataImportsPtrOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecDataImportsOutput) EventHub() DataImportSourcesEventHubPtrOutput {
	return o.ApplyT(func(v DataSourcesSpecDataImports) *DataImportSourcesEventHub { return v.EventHub }).(DataImportSourcesEventHubPtrOutput)
}

type DataSourcesSpecDataImportsPtrOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecDataImportsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecDataImports)(nil)).Elem()
}

func (o DataSourcesSpecDataImportsPtrOutput) ToDataSourcesSpecDataImportsPtrOutput() DataSourcesSpecDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecDataImportsPtrOutput) ToDataSourcesSpecDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecDataImportsPtrOutput) Elem() DataSourcesSpecDataImportsOutput {
	return o.ApplyT(func(v *DataSourcesSpecDataImports) DataSourcesSpecDataImports {
		if v != nil {
			return *v
		}
		var ret DataSourcesSpecDataImports
		return ret
	}).(DataSourcesSpecDataImportsOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecDataImportsPtrOutput) EventHub() DataImportSourcesEventHubPtrOutput {
	return o.ApplyT(func(v *DataSourcesSpecDataImports) *DataImportSourcesEventHub {
		if v == nil {
			return nil
		}
		return v.EventHub
	}).(DataImportSourcesEventHubPtrOutput)
}

// Specifications of pull based data sources
type DataSourcesSpecResponseDataImports struct {
	// Definition of Event Hub configuration.
	EventHub *DataImportSourcesResponseEventHub `pulumi:"eventHub"`
}

// Specifications of pull based data sources
type DataSourcesSpecResponseDataImportsOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecResponseDataImportsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcesSpecResponseDataImports)(nil)).Elem()
}

func (o DataSourcesSpecResponseDataImportsOutput) ToDataSourcesSpecResponseDataImportsOutput() DataSourcesSpecResponseDataImportsOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsOutput) ToDataSourcesSpecResponseDataImportsOutputWithContext(ctx context.Context) DataSourcesSpecResponseDataImportsOutput {
	return o
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecResponseDataImportsOutput) EventHub() DataImportSourcesResponseEventHubPtrOutput {
	return o.ApplyT(func(v DataSourcesSpecResponseDataImports) *DataImportSourcesResponseEventHub { return v.EventHub }).(DataImportSourcesResponseEventHubPtrOutput)
}

type DataSourcesSpecResponseDataImportsPtrOutput struct{ *pulumi.OutputState }

func (DataSourcesSpecResponseDataImportsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourcesSpecResponseDataImports)(nil)).Elem()
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) ToDataSourcesSpecResponseDataImportsPtrOutput() DataSourcesSpecResponseDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) ToDataSourcesSpecResponseDataImportsPtrOutputWithContext(ctx context.Context) DataSourcesSpecResponseDataImportsPtrOutput {
	return o
}

func (o DataSourcesSpecResponseDataImportsPtrOutput) Elem() DataSourcesSpecResponseDataImportsOutput {
	return o.ApplyT(func(v *DataSourcesSpecResponseDataImports) DataSourcesSpecResponseDataImports {
		if v != nil {
			return *v
		}
		var ret DataSourcesSpecResponseDataImports
		return ret
	}).(DataSourcesSpecResponseDataImportsOutput)
}

// Definition of Event Hub configuration.
func (o DataSourcesSpecResponseDataImportsPtrOutput) EventHub() DataImportSourcesResponseEventHubPtrOutput {
	return o.ApplyT(func(v *DataSourcesSpecResponseDataImports) *DataImportSourcesResponseEventHub {
		if v == nil {
			return nil
		}
		return v.EventHub
	}).(DataImportSourcesResponseEventHubPtrOutput)
}

// Properties for dependent entities, i.e. child entities
type DependenciesSignalGroup struct {
	// Aggregation type for child dependencies.
	AggregationType string `pulumi:"aggregationType"`
	// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	DegradedThreshold *string `pulumi:"degradedThreshold"`
	// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	UnhealthyThreshold *string `pulumi:"unhealthyThreshold"`
}

// Defaults sets the appropriate defaults for DependenciesSignalGroup
func (val *DependenciesSignalGroup) Defaults() *DependenciesSignalGroup {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.AggregationType) {
		tmp.AggregationType = "WorstOf"
	}
	return &tmp
}

// DependenciesSignalGroupInput is an input type that accepts DependenciesSignalGroupArgs and DependenciesSignalGroupOutput values.
// You can construct a concrete instance of `DependenciesSignalGroupInput` via:
//
//	DependenciesSignalGroupArgs{...}
type DependenciesSignalGroupInput interface {
	pulumi.Input

	ToDependenciesSignalGroupOutput() DependenciesSignalGroupOutput
	ToDependenciesSignalGroupOutputWithContext(context.Context) DependenciesSignalGroupOutput
}

// Properties for dependent entities, i.e. child entities
type DependenciesSignalGroupArgs struct {
	// Aggregation type for child dependencies.
	AggregationType pulumi.StringInput `pulumi:"aggregationType"`
	// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	DegradedThreshold pulumi.StringPtrInput `pulumi:"degradedThreshold"`
	// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	UnhealthyThreshold pulumi.StringPtrInput `pulumi:"unhealthyThreshold"`
}

// Defaults sets the appropriate defaults for DependenciesSignalGroupArgs
func (val *DependenciesSignalGroupArgs) Defaults() *DependenciesSignalGroupArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AggregationType == nil {
		tmp.AggregationType = pulumi.String("WorstOf")
	}
	return &tmp
}
func (DependenciesSignalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DependenciesSignalGroup)(nil)).Elem()
}

func (i DependenciesSignalGroupArgs) ToDependenciesSignalGroupOutput() DependenciesSignalGroupOutput {
	return i.ToDependenciesSignalGroupOutputWithContext(context.Background())
}

func (i DependenciesSignalGroupArgs) ToDependenciesSignalGroupOutputWithContext(ctx context.Context) DependenciesSignalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependenciesSignalGroupOutput)
}

func (i DependenciesSignalGroupArgs) ToDependenciesSignalGroupPtrOutput() DependenciesSignalGroupPtrOutput {
	return i.ToDependenciesSignalGroupPtrOutputWithContext(context.Background())
}

func (i DependenciesSignalGroupArgs) ToDependenciesSignalGroupPtrOutputWithContext(ctx context.Context) DependenciesSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependenciesSignalGroupOutput).ToDependenciesSignalGroupPtrOutputWithContext(ctx)
}

// DependenciesSignalGroupPtrInput is an input type that accepts DependenciesSignalGroupArgs, DependenciesSignalGroupPtr and DependenciesSignalGroupPtrOutput values.
// You can construct a concrete instance of `DependenciesSignalGroupPtrInput` via:
//
//	        DependenciesSignalGroupArgs{...}
//
//	or:
//
//	        nil
type DependenciesSignalGroupPtrInput interface {
	pulumi.Input

	ToDependenciesSignalGroupPtrOutput() DependenciesSignalGroupPtrOutput
	ToDependenciesSignalGroupPtrOutputWithContext(context.Context) DependenciesSignalGroupPtrOutput
}

type dependenciesSignalGroupPtrType DependenciesSignalGroupArgs

func DependenciesSignalGroupPtr(v *DependenciesSignalGroupArgs) DependenciesSignalGroupPtrInput {
	return (*dependenciesSignalGroupPtrType)(v)
}

func (*dependenciesSignalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DependenciesSignalGroup)(nil)).Elem()
}

func (i *dependenciesSignalGroupPtrType) ToDependenciesSignalGroupPtrOutput() DependenciesSignalGroupPtrOutput {
	return i.ToDependenciesSignalGroupPtrOutputWithContext(context.Background())
}

func (i *dependenciesSignalGroupPtrType) ToDependenciesSignalGroupPtrOutputWithContext(ctx context.Context) DependenciesSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DependenciesSignalGroupPtrOutput)
}

// Properties for dependent entities, i.e. child entities
type DependenciesSignalGroupOutput struct{ *pulumi.OutputState }

func (DependenciesSignalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DependenciesSignalGroup)(nil)).Elem()
}

func (o DependenciesSignalGroupOutput) ToDependenciesSignalGroupOutput() DependenciesSignalGroupOutput {
	return o
}

func (o DependenciesSignalGroupOutput) ToDependenciesSignalGroupOutputWithContext(ctx context.Context) DependenciesSignalGroupOutput {
	return o
}

func (o DependenciesSignalGroupOutput) ToDependenciesSignalGroupPtrOutput() DependenciesSignalGroupPtrOutput {
	return o.ToDependenciesSignalGroupPtrOutputWithContext(context.Background())
}

func (o DependenciesSignalGroupOutput) ToDependenciesSignalGroupPtrOutputWithContext(ctx context.Context) DependenciesSignalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DependenciesSignalGroup) *DependenciesSignalGroup {
		return &v
	}).(DependenciesSignalGroupPtrOutput)
}

// Aggregation type for child dependencies.
func (o DependenciesSignalGroupOutput) AggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v DependenciesSignalGroup) string { return v.AggregationType }).(pulumi.StringOutput)
}

// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupOutput) DegradedThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependenciesSignalGroup) *string { return v.DegradedThreshold }).(pulumi.StringPtrOutput)
}

// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupOutput) UnhealthyThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependenciesSignalGroup) *string { return v.UnhealthyThreshold }).(pulumi.StringPtrOutput)
}

type DependenciesSignalGroupPtrOutput struct{ *pulumi.OutputState }

func (DependenciesSignalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DependenciesSignalGroup)(nil)).Elem()
}

func (o DependenciesSignalGroupPtrOutput) ToDependenciesSignalGroupPtrOutput() DependenciesSignalGroupPtrOutput {
	return o
}

func (o DependenciesSignalGroupPtrOutput) ToDependenciesSignalGroupPtrOutputWithContext(ctx context.Context) DependenciesSignalGroupPtrOutput {
	return o
}

func (o DependenciesSignalGroupPtrOutput) Elem() DependenciesSignalGroupOutput {
	return o.ApplyT(func(v *DependenciesSignalGroup) DependenciesSignalGroup {
		if v != nil {
			return *v
		}
		var ret DependenciesSignalGroup
		return ret
	}).(DependenciesSignalGroupOutput)
}

// Aggregation type for child dependencies.
func (o DependenciesSignalGroupPtrOutput) AggregationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AggregationType
	}).(pulumi.StringPtrOutput)
}

// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupPtrOutput) DegradedThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroup) *string {
		if v == nil {
			return nil
		}
		return v.DegradedThreshold
	}).(pulumi.StringPtrOutput)
}

// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupPtrOutput) UnhealthyThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroup) *string {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.StringPtrOutput)
}

// Properties for dependent entities, i.e. child entities
type DependenciesSignalGroupResponse struct {
	// Aggregation type for child dependencies.
	AggregationType string `pulumi:"aggregationType"`
	// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	DegradedThreshold *string `pulumi:"degradedThreshold"`
	// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
	UnhealthyThreshold *string `pulumi:"unhealthyThreshold"`
}

// Defaults sets the appropriate defaults for DependenciesSignalGroupResponse
func (val *DependenciesSignalGroupResponse) Defaults() *DependenciesSignalGroupResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.AggregationType) {
		tmp.AggregationType = "WorstOf"
	}
	return &tmp
}

// Properties for dependent entities, i.e. child entities
type DependenciesSignalGroupResponseOutput struct{ *pulumi.OutputState }

func (DependenciesSignalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DependenciesSignalGroupResponse)(nil)).Elem()
}

func (o DependenciesSignalGroupResponseOutput) ToDependenciesSignalGroupResponseOutput() DependenciesSignalGroupResponseOutput {
	return o
}

func (o DependenciesSignalGroupResponseOutput) ToDependenciesSignalGroupResponseOutputWithContext(ctx context.Context) DependenciesSignalGroupResponseOutput {
	return o
}

// Aggregation type for child dependencies.
func (o DependenciesSignalGroupResponseOutput) AggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v DependenciesSignalGroupResponse) string { return v.AggregationType }).(pulumi.StringOutput)
}

// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupResponseOutput) DegradedThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependenciesSignalGroupResponse) *string { return v.DegradedThreshold }).(pulumi.StringPtrOutput)
}

// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupResponseOutput) UnhealthyThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DependenciesSignalGroupResponse) *string { return v.UnhealthyThreshold }).(pulumi.StringPtrOutput)
}

type DependenciesSignalGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (DependenciesSignalGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DependenciesSignalGroupResponse)(nil)).Elem()
}

func (o DependenciesSignalGroupResponsePtrOutput) ToDependenciesSignalGroupResponsePtrOutput() DependenciesSignalGroupResponsePtrOutput {
	return o
}

func (o DependenciesSignalGroupResponsePtrOutput) ToDependenciesSignalGroupResponsePtrOutputWithContext(ctx context.Context) DependenciesSignalGroupResponsePtrOutput {
	return o
}

func (o DependenciesSignalGroupResponsePtrOutput) Elem() DependenciesSignalGroupResponseOutput {
	return o.ApplyT(func(v *DependenciesSignalGroupResponse) DependenciesSignalGroupResponse {
		if v != nil {
			return *v
		}
		var ret DependenciesSignalGroupResponse
		return ret
	}).(DependenciesSignalGroupResponseOutput)
}

// Aggregation type for child dependencies.
func (o DependenciesSignalGroupResponsePtrOutput) AggregationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AggregationType
	}).(pulumi.StringPtrOutput)
}

// Degraded threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered degraded when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupResponsePtrOutput) DegradedThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.DegradedThreshold
	}).(pulumi.StringPtrOutput)
}

// Unhealthy threshold for aggregating the propagated health state of child dependencies. Can be either an absolute number that is greater than 0, or a percentage between 1-100%. The entity will be considered unhealthy when the number of not healthy child dependents (unhealthy, degraded, unknown) is equal to or above the threshold value. Must only be set when AggregationType is 'Thresholds'.
func (o DependenciesSignalGroupResponsePtrOutput) UnhealthyThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DependenciesSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// DestinationsSpecAzureMonitorMetricsInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs and DestinationsSpecAzureMonitorMetricsOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsInput` via:
//
//	DestinationsSpecAzureMonitorMetricsArgs{...}
type DestinationsSpecAzureMonitorMetricsInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput
	ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsOutput
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (DestinationsSpecAzureMonitorMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput)
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i DestinationsSpecAzureMonitorMetricsArgs) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsOutput).ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx)
}

// DestinationsSpecAzureMonitorMetricsPtrInput is an input type that accepts DestinationsSpecAzureMonitorMetricsArgs, DestinationsSpecAzureMonitorMetricsPtr and DestinationsSpecAzureMonitorMetricsPtrOutput values.
// You can construct a concrete instance of `DestinationsSpecAzureMonitorMetricsPtrInput` via:
//
//	        DestinationsSpecAzureMonitorMetricsArgs{...}
//
//	or:
//
//	        nil
type DestinationsSpecAzureMonitorMetricsPtrInput interface {
	pulumi.Input

	ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput
	ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput
}

type destinationsSpecAzureMonitorMetricsPtrType DestinationsSpecAzureMonitorMetricsArgs

func DestinationsSpecAzureMonitorMetricsPtr(v *DestinationsSpecAzureMonitorMetricsArgs) DestinationsSpecAzureMonitorMetricsPtrInput {
	return (*destinationsSpecAzureMonitorMetricsPtrType)(v)
}

func (*destinationsSpecAzureMonitorMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return i.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (i *destinationsSpecAzureMonitorMetricsPtrType) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutput() DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(context.Background())
}

func (o DestinationsSpecAzureMonitorMetricsOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationsSpecAzureMonitorMetrics) *DestinationsSpecAzureMonitorMetrics {
		return &v
	}).(DestinationsSpecAzureMonitorMetricsPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationsSpecAzureMonitorMetrics) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DestinationsSpecAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutput() DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) ToDestinationsSpecAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) DestinationsSpecAzureMonitorMetrics {
		if v != nil {
			return *v
		}
		var ret DestinationsSpecAzureMonitorMetrics
		return ret
	}).(DestinationsSpecAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetrics struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// Azure Monitor Metrics destination.
type DestinationsSpecResponseAzureMonitorMetricsOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutput() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsOutput) ToDestinationsSpecResponseAzureMonitorMetricsOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationsSpecResponseAzureMonitorMetrics) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DestinationsSpecResponseAzureMonitorMetricsPtrOutput struct{ *pulumi.OutputState }

func (DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationsSpecResponseAzureMonitorMetrics)(nil)).Elem()
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutput() DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) ToDestinationsSpecResponseAzureMonitorMetricsPtrOutputWithContext(ctx context.Context) DestinationsSpecResponseAzureMonitorMetricsPtrOutput {
	return o
}

func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Elem() DestinationsSpecResponseAzureMonitorMetricsOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) DestinationsSpecResponseAzureMonitorMetrics {
		if v != nil {
			return *v
		}
		var ret DestinationsSpecResponseAzureMonitorMetrics
		return ret
	}).(DestinationsSpecResponseAzureMonitorMetricsOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o DestinationsSpecResponseAzureMonitorMetricsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationsSpecResponseAzureMonitorMetrics) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The diagnostic settings category resource.
type DiagnosticSettingsCategoryResourceResponse struct {
	// the collection of what category groups are supported.
	CategoryGroups []string `pulumi:"categoryGroups"`
	// The type of the diagnostic settings category.
	CategoryType *string `pulumi:"categoryType"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The system metadata related to this resource.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The diagnostic settings category resource.
type DiagnosticSettingsCategoryResourceResponseOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingsCategoryResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiagnosticSettingsCategoryResourceResponse)(nil)).Elem()
}

func (o DiagnosticSettingsCategoryResourceResponseOutput) ToDiagnosticSettingsCategoryResourceResponseOutput() DiagnosticSettingsCategoryResourceResponseOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseOutput) ToDiagnosticSettingsCategoryResourceResponseOutputWithContext(ctx context.Context) DiagnosticSettingsCategoryResourceResponseOutput {
	return o
}

// the collection of what category groups are supported.
func (o DiagnosticSettingsCategoryResourceResponseOutput) CategoryGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) []string { return v.CategoryGroups }).(pulumi.StringArrayOutput)
}

// The type of the diagnostic settings category.
func (o DiagnosticSettingsCategoryResourceResponseOutput) CategoryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) *string { return v.CategoryType }).(pulumi.StringPtrOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o DiagnosticSettingsCategoryResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o DiagnosticSettingsCategoryResourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The system metadata related to this resource.
func (o DiagnosticSettingsCategoryResourceResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o DiagnosticSettingsCategoryResourceResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DiagnosticSettingsCategoryResourceResponse) string { return v.Type }).(pulumi.StringOutput)
}

type DiagnosticSettingsCategoryResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (DiagnosticSettingsCategoryResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiagnosticSettingsCategoryResourceResponse)(nil)).Elem()
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) ToDiagnosticSettingsCategoryResourceResponseArrayOutput() DiagnosticSettingsCategoryResourceResponseArrayOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) ToDiagnosticSettingsCategoryResourceResponseArrayOutputWithContext(ctx context.Context) DiagnosticSettingsCategoryResourceResponseArrayOutput {
	return o
}

func (o DiagnosticSettingsCategoryResourceResponseArrayOutput) Index(i pulumi.IntInput) DiagnosticSettingsCategoryResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiagnosticSettingsCategoryResourceResponse {
		return vs[0].([]DiagnosticSettingsCategoryResourceResponse)[vs[1].(int)]
	}).(DiagnosticSettingsCategoryResourceResponseOutput)
}

// Dimension splitting and filtering definition
type Dimension struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// DimensionInput is an input type that accepts DimensionArgs and DimensionOutput values.
// You can construct a concrete instance of `DimensionInput` via:
//
//	DimensionArgs{...}
type DimensionInput interface {
	pulumi.Input

	ToDimensionOutput() DimensionOutput
	ToDimensionOutputWithContext(context.Context) DimensionOutput
}

// Dimension splitting and filtering definition
type DimensionArgs struct {
	// Name of the dimension
	Name pulumi.StringInput `pulumi:"name"`
	// Operator for dimension values
	Operator pulumi.StringInput `pulumi:"operator"`
	// List of dimension values
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (DimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (i DimensionArgs) ToDimensionOutput() DimensionOutput {
	return i.ToDimensionOutputWithContext(context.Background())
}

func (i DimensionArgs) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionOutput)
}

// DimensionArrayInput is an input type that accepts DimensionArray and DimensionArrayOutput values.
// You can construct a concrete instance of `DimensionArrayInput` via:
//
//	DimensionArray{ DimensionArgs{...} }
type DimensionArrayInput interface {
	pulumi.Input

	ToDimensionArrayOutput() DimensionArrayOutput
	ToDimensionArrayOutputWithContext(context.Context) DimensionArrayOutput
}

type DimensionArray []DimensionInput

func (DimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (i DimensionArray) ToDimensionArrayOutput() DimensionArrayOutput {
	return i.ToDimensionArrayOutputWithContext(context.Background())
}

func (i DimensionArray) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DimensionArrayOutput)
}

// Dimension splitting and filtering definition
type DimensionOutput struct{ *pulumi.OutputState }

func (DimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dimension)(nil)).Elem()
}

func (o DimensionOutput) ToDimensionOutput() DimensionOutput {
	return o
}

func (o DimensionOutput) ToDimensionOutputWithContext(ctx context.Context) DimensionOutput {
	return o
}

// Name of the dimension
func (o DimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v Dimension) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Dimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionArrayOutput struct{ *pulumi.OutputState }

func (DimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dimension)(nil)).Elem()
}

func (o DimensionArrayOutput) ToDimensionArrayOutput() DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) ToDimensionArrayOutputWithContext(ctx context.Context) DimensionArrayOutput {
	return o
}

func (o DimensionArrayOutput) Index(i pulumi.IntInput) DimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dimension {
		return vs[0].([]Dimension)[vs[1].(int)]
	}).(DimensionOutput)
}

// Dimension splitting and filtering definition
type DimensionResponse struct {
	// Name of the dimension
	Name string `pulumi:"name"`
	// Operator for dimension values
	Operator string `pulumi:"operator"`
	// List of dimension values
	Values []string `pulumi:"values"`
}

// Dimension splitting and filtering definition
type DimensionResponseOutput struct{ *pulumi.OutputState }

func (DimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseOutput) ToDimensionResponseOutput() DimensionResponseOutput {
	return o
}

func (o DimensionResponseOutput) ToDimensionResponseOutputWithContext(ctx context.Context) DimensionResponseOutput {
	return o
}

// Name of the dimension
func (o DimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Operator for dimension values
func (o DimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// List of dimension values
func (o DimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type DimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (DimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DimensionResponse)(nil)).Elem()
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutput() DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) ToDimensionResponseArrayOutputWithContext(ctx context.Context) DimensionResponseArrayOutput {
	return o
}

func (o DimensionResponseArrayOutput) Index(i pulumi.IntInput) DimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DimensionResponse {
		return vs[0].([]DimensionResponse)[vs[1].(int)]
	}).(DimensionResponseOutput)
}

// Error details for a failed discovery operation
type DiscoveryErrorResponse struct {
	// Additional context information, like resource IDs or query details
	Context []string `pulumi:"context"`
	// Error message
	Message string `pulumi:"message"`
}

// Error details for a failed discovery operation
type DiscoveryErrorResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryErrorResponse)(nil)).Elem()
}

func (o DiscoveryErrorResponseOutput) ToDiscoveryErrorResponseOutput() DiscoveryErrorResponseOutput {
	return o
}

func (o DiscoveryErrorResponseOutput) ToDiscoveryErrorResponseOutputWithContext(ctx context.Context) DiscoveryErrorResponseOutput {
	return o
}

// Additional context information, like resource IDs or query details
func (o DiscoveryErrorResponseOutput) Context() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DiscoveryErrorResponse) []string { return v.Context }).(pulumi.StringArrayOutput)
}

// Error message
func (o DiscoveryErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// ML-based evaluation rule for a signal definition
type DynamicDetectionRule struct {
	// Threshold direction
	DynamicThresholdDirection string `pulumi:"dynamicThresholdDirection"`
	// ML model to use for dynamic thresholds
	DynamicThresholdModel string `pulumi:"dynamicThresholdModel"`
	// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
	ModelSensitivity float64 `pulumi:"modelSensitivity"`
	// Start time of the training in UTC.
	TrainingStartTime *string `pulumi:"trainingStartTime"`
}

// DynamicDetectionRuleInput is an input type that accepts DynamicDetectionRuleArgs and DynamicDetectionRuleOutput values.
// You can construct a concrete instance of `DynamicDetectionRuleInput` via:
//
//	DynamicDetectionRuleArgs{...}
type DynamicDetectionRuleInput interface {
	pulumi.Input

	ToDynamicDetectionRuleOutput() DynamicDetectionRuleOutput
	ToDynamicDetectionRuleOutputWithContext(context.Context) DynamicDetectionRuleOutput
}

// ML-based evaluation rule for a signal definition
type DynamicDetectionRuleArgs struct {
	// Threshold direction
	DynamicThresholdDirection pulumi.StringInput `pulumi:"dynamicThresholdDirection"`
	// ML model to use for dynamic thresholds
	DynamicThresholdModel pulumi.StringInput `pulumi:"dynamicThresholdModel"`
	// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
	ModelSensitivity pulumi.Float64Input `pulumi:"modelSensitivity"`
	// Start time of the training in UTC.
	TrainingStartTime pulumi.StringPtrInput `pulumi:"trainingStartTime"`
}

func (DynamicDetectionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDetectionRule)(nil)).Elem()
}

func (i DynamicDetectionRuleArgs) ToDynamicDetectionRuleOutput() DynamicDetectionRuleOutput {
	return i.ToDynamicDetectionRuleOutputWithContext(context.Background())
}

func (i DynamicDetectionRuleArgs) ToDynamicDetectionRuleOutputWithContext(ctx context.Context) DynamicDetectionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicDetectionRuleOutput)
}

func (i DynamicDetectionRuleArgs) ToDynamicDetectionRulePtrOutput() DynamicDetectionRulePtrOutput {
	return i.ToDynamicDetectionRulePtrOutputWithContext(context.Background())
}

func (i DynamicDetectionRuleArgs) ToDynamicDetectionRulePtrOutputWithContext(ctx context.Context) DynamicDetectionRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicDetectionRuleOutput).ToDynamicDetectionRulePtrOutputWithContext(ctx)
}

// DynamicDetectionRulePtrInput is an input type that accepts DynamicDetectionRuleArgs, DynamicDetectionRulePtr and DynamicDetectionRulePtrOutput values.
// You can construct a concrete instance of `DynamicDetectionRulePtrInput` via:
//
//	        DynamicDetectionRuleArgs{...}
//
//	or:
//
//	        nil
type DynamicDetectionRulePtrInput interface {
	pulumi.Input

	ToDynamicDetectionRulePtrOutput() DynamicDetectionRulePtrOutput
	ToDynamicDetectionRulePtrOutputWithContext(context.Context) DynamicDetectionRulePtrOutput
}

type dynamicDetectionRulePtrType DynamicDetectionRuleArgs

func DynamicDetectionRulePtr(v *DynamicDetectionRuleArgs) DynamicDetectionRulePtrInput {
	return (*dynamicDetectionRulePtrType)(v)
}

func (*dynamicDetectionRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicDetectionRule)(nil)).Elem()
}

func (i *dynamicDetectionRulePtrType) ToDynamicDetectionRulePtrOutput() DynamicDetectionRulePtrOutput {
	return i.ToDynamicDetectionRulePtrOutputWithContext(context.Background())
}

func (i *dynamicDetectionRulePtrType) ToDynamicDetectionRulePtrOutputWithContext(ctx context.Context) DynamicDetectionRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicDetectionRulePtrOutput)
}

// ML-based evaluation rule for a signal definition
type DynamicDetectionRuleOutput struct{ *pulumi.OutputState }

func (DynamicDetectionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDetectionRule)(nil)).Elem()
}

func (o DynamicDetectionRuleOutput) ToDynamicDetectionRuleOutput() DynamicDetectionRuleOutput {
	return o
}

func (o DynamicDetectionRuleOutput) ToDynamicDetectionRuleOutputWithContext(ctx context.Context) DynamicDetectionRuleOutput {
	return o
}

func (o DynamicDetectionRuleOutput) ToDynamicDetectionRulePtrOutput() DynamicDetectionRulePtrOutput {
	return o.ToDynamicDetectionRulePtrOutputWithContext(context.Background())
}

func (o DynamicDetectionRuleOutput) ToDynamicDetectionRulePtrOutputWithContext(ctx context.Context) DynamicDetectionRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DynamicDetectionRule) *DynamicDetectionRule {
		return &v
	}).(DynamicDetectionRulePtrOutput)
}

// Threshold direction
func (o DynamicDetectionRuleOutput) DynamicThresholdDirection() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDetectionRule) string { return v.DynamicThresholdDirection }).(pulumi.StringOutput)
}

// ML model to use for dynamic thresholds
func (o DynamicDetectionRuleOutput) DynamicThresholdModel() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDetectionRule) string { return v.DynamicThresholdModel }).(pulumi.StringOutput)
}

// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
func (o DynamicDetectionRuleOutput) ModelSensitivity() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicDetectionRule) float64 { return v.ModelSensitivity }).(pulumi.Float64Output)
}

// Start time of the training in UTC.
func (o DynamicDetectionRuleOutput) TrainingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDetectionRule) *string { return v.TrainingStartTime }).(pulumi.StringPtrOutput)
}

type DynamicDetectionRulePtrOutput struct{ *pulumi.OutputState }

func (DynamicDetectionRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicDetectionRule)(nil)).Elem()
}

func (o DynamicDetectionRulePtrOutput) ToDynamicDetectionRulePtrOutput() DynamicDetectionRulePtrOutput {
	return o
}

func (o DynamicDetectionRulePtrOutput) ToDynamicDetectionRulePtrOutputWithContext(ctx context.Context) DynamicDetectionRulePtrOutput {
	return o
}

func (o DynamicDetectionRulePtrOutput) Elem() DynamicDetectionRuleOutput {
	return o.ApplyT(func(v *DynamicDetectionRule) DynamicDetectionRule {
		if v != nil {
			return *v
		}
		var ret DynamicDetectionRule
		return ret
	}).(DynamicDetectionRuleOutput)
}

// Threshold direction
func (o DynamicDetectionRulePtrOutput) DynamicThresholdDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRule) *string {
		if v == nil {
			return nil
		}
		return &v.DynamicThresholdDirection
	}).(pulumi.StringPtrOutput)
}

// ML model to use for dynamic thresholds
func (o DynamicDetectionRulePtrOutput) DynamicThresholdModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRule) *string {
		if v == nil {
			return nil
		}
		return &v.DynamicThresholdModel
	}).(pulumi.StringPtrOutput)
}

// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
func (o DynamicDetectionRulePtrOutput) ModelSensitivity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRule) *float64 {
		if v == nil {
			return nil
		}
		return &v.ModelSensitivity
	}).(pulumi.Float64PtrOutput)
}

// Start time of the training in UTC.
func (o DynamicDetectionRulePtrOutput) TrainingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRule) *string {
		if v == nil {
			return nil
		}
		return v.TrainingStartTime
	}).(pulumi.StringPtrOutput)
}

// ML-based evaluation rule for a signal definition
type DynamicDetectionRuleResponse struct {
	// Threshold direction
	DynamicThresholdDirection string `pulumi:"dynamicThresholdDirection"`
	// ML model to use for dynamic thresholds
	DynamicThresholdModel string `pulumi:"dynamicThresholdModel"`
	// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
	ModelSensitivity float64 `pulumi:"modelSensitivity"`
	// Start time of the training in UTC.
	TrainingStartTime *string `pulumi:"trainingStartTime"`
}

// ML-based evaluation rule for a signal definition
type DynamicDetectionRuleResponseOutput struct{ *pulumi.OutputState }

func (DynamicDetectionRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicDetectionRuleResponse)(nil)).Elem()
}

func (o DynamicDetectionRuleResponseOutput) ToDynamicDetectionRuleResponseOutput() DynamicDetectionRuleResponseOutput {
	return o
}

func (o DynamicDetectionRuleResponseOutput) ToDynamicDetectionRuleResponseOutputWithContext(ctx context.Context) DynamicDetectionRuleResponseOutput {
	return o
}

// Threshold direction
func (o DynamicDetectionRuleResponseOutput) DynamicThresholdDirection() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDetectionRuleResponse) string { return v.DynamicThresholdDirection }).(pulumi.StringOutput)
}

// ML model to use for dynamic thresholds
func (o DynamicDetectionRuleResponseOutput) DynamicThresholdModel() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicDetectionRuleResponse) string { return v.DynamicThresholdModel }).(pulumi.StringOutput)
}

// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
func (o DynamicDetectionRuleResponseOutput) ModelSensitivity() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicDetectionRuleResponse) float64 { return v.ModelSensitivity }).(pulumi.Float64Output)
}

// Start time of the training in UTC.
func (o DynamicDetectionRuleResponseOutput) TrainingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicDetectionRuleResponse) *string { return v.TrainingStartTime }).(pulumi.StringPtrOutput)
}

type DynamicDetectionRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (DynamicDetectionRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynamicDetectionRuleResponse)(nil)).Elem()
}

func (o DynamicDetectionRuleResponsePtrOutput) ToDynamicDetectionRuleResponsePtrOutput() DynamicDetectionRuleResponsePtrOutput {
	return o
}

func (o DynamicDetectionRuleResponsePtrOutput) ToDynamicDetectionRuleResponsePtrOutputWithContext(ctx context.Context) DynamicDetectionRuleResponsePtrOutput {
	return o
}

func (o DynamicDetectionRuleResponsePtrOutput) Elem() DynamicDetectionRuleResponseOutput {
	return o.ApplyT(func(v *DynamicDetectionRuleResponse) DynamicDetectionRuleResponse {
		if v != nil {
			return *v
		}
		var ret DynamicDetectionRuleResponse
		return ret
	}).(DynamicDetectionRuleResponseOutput)
}

// Threshold direction
func (o DynamicDetectionRuleResponsePtrOutput) DynamicThresholdDirection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DynamicThresholdDirection
	}).(pulumi.StringPtrOutput)
}

// ML model to use for dynamic thresholds
func (o DynamicDetectionRuleResponsePtrOutput) DynamicThresholdModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DynamicThresholdModel
	}).(pulumi.StringPtrOutput)
}

// ML model sensitivity. Lowest value = high sensitivity. Supported step size = 0.5
func (o DynamicDetectionRuleResponsePtrOutput) ModelSensitivity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRuleResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.ModelSensitivity
	}).(pulumi.Float64PtrOutput)
}

// Start time of the training in UTC.
func (o DynamicDetectionRuleResponsePtrOutput) TrainingStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DynamicDetectionRuleResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrainingStartTime
	}).(pulumi.StringPtrOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteria struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	// Expected value is 'DynamicThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriods `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// DynamicMetricCriteriaInput is an input type that accepts DynamicMetricCriteriaArgs and DynamicMetricCriteriaOutput values.
// You can construct a concrete instance of `DynamicMetricCriteriaInput` via:
//
//	DynamicMetricCriteriaArgs{...}
type DynamicMetricCriteriaInput interface {
	pulumi.Input

	ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput
	ToDynamicMetricCriteriaOutputWithContext(context.Context) DynamicMetricCriteriaOutput
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaArgs struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity pulumi.StringInput `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	// Expected value is 'DynamicThresholdCriterion'.
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionArrayInput `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsInput `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore pulumi.StringPtrInput `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (DynamicMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteria)(nil)).Elem()
}

func (i DynamicMetricCriteriaArgs) ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput {
	return i.ToDynamicMetricCriteriaOutputWithContext(context.Background())
}

func (i DynamicMetricCriteriaArgs) ToDynamicMetricCriteriaOutputWithContext(ctx context.Context) DynamicMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicMetricCriteriaOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaOutput struct{ *pulumi.OutputState }

func (DynamicMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteria)(nil)).Elem()
}

func (o DynamicMetricCriteriaOutput) ToDynamicMetricCriteriaOutput() DynamicMetricCriteriaOutput {
	return o
}

func (o DynamicMetricCriteriaOutput) ToDynamicMetricCriteriaOutputWithContext(ctx context.Context) DynamicMetricCriteriaOutput {
	return o
}

// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
func (o DynamicMetricCriteriaOutput) AlertSensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.AlertSensitivity }).(pulumi.StringOutput)
}

// Specifies the type of threshold criteria
// Expected value is 'DynamicThresholdCriterion'.
func (o DynamicMetricCriteriaOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o DynamicMetricCriteriaOutput) Dimensions() MetricDimensionArrayOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) []MetricDimension { return v.Dimensions }).(MetricDimensionArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
func (o DynamicMetricCriteriaOutput) FailingPeriods() DynamicThresholdFailingPeriodsOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) DynamicThresholdFailingPeriods { return v.FailingPeriods }).(DynamicThresholdFailingPeriodsOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
func (o DynamicMetricCriteriaOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// Name of the metric.
func (o DynamicMetricCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o DynamicMetricCriteriaOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o DynamicMetricCriteriaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.Name }).(pulumi.StringOutput)
}

// The operator used to compare the metric value against the threshold.
func (o DynamicMetricCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o DynamicMetricCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria time aggregation types.
func (o DynamicMetricCriteriaOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteria) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponse struct {
	// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
	AlertSensitivity string `pulumi:"alertSensitivity"`
	// Specifies the type of threshold criteria
	// Expected value is 'DynamicThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// The minimum number of violations required within the selected lookback time window required to raise an alert.
	FailingPeriods DynamicThresholdFailingPeriodsResponse `pulumi:"failingPeriods"`
	// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
	IgnoreDataBefore *string `pulumi:"ignoreDataBefore"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// The operator used to compare the metric value against the threshold.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// Criterion for dynamic threshold.
type DynamicMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (DynamicMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicMetricCriteriaResponse)(nil)).Elem()
}

func (o DynamicMetricCriteriaResponseOutput) ToDynamicMetricCriteriaResponseOutput() DynamicMetricCriteriaResponseOutput {
	return o
}

func (o DynamicMetricCriteriaResponseOutput) ToDynamicMetricCriteriaResponseOutputWithContext(ctx context.Context) DynamicMetricCriteriaResponseOutput {
	return o
}

// The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
func (o DynamicMetricCriteriaResponseOutput) AlertSensitivity() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.AlertSensitivity }).(pulumi.StringOutput)
}

// Specifies the type of threshold criteria
// Expected value is 'DynamicThresholdCriterion'.
func (o DynamicMetricCriteriaResponseOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o DynamicMetricCriteriaResponseOutput) Dimensions() MetricDimensionResponseArrayOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) []MetricDimensionResponse { return v.Dimensions }).(MetricDimensionResponseArrayOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
func (o DynamicMetricCriteriaResponseOutput) FailingPeriods() DynamicThresholdFailingPeriodsResponseOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) DynamicThresholdFailingPeriodsResponse { return v.FailingPeriods }).(DynamicThresholdFailingPeriodsResponseOutput)
}

// Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
func (o DynamicMetricCriteriaResponseOutput) IgnoreDataBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *string { return v.IgnoreDataBefore }).(pulumi.StringPtrOutput)
}

// Name of the metric.
func (o DynamicMetricCriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o DynamicMetricCriteriaResponseOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o DynamicMetricCriteriaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The operator used to compare the metric value against the threshold.
func (o DynamicMetricCriteriaResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o DynamicMetricCriteriaResponseOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria time aggregation types.
func (o DynamicMetricCriteriaResponseOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v DynamicMetricCriteriaResponse) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriods struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// DynamicThresholdFailingPeriodsInput is an input type that accepts DynamicThresholdFailingPeriodsArgs and DynamicThresholdFailingPeriodsOutput values.
// You can construct a concrete instance of `DynamicThresholdFailingPeriodsInput` via:
//
//	DynamicThresholdFailingPeriodsArgs{...}
type DynamicThresholdFailingPeriodsInput interface {
	pulumi.Input

	ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput
	ToDynamicThresholdFailingPeriodsOutputWithContext(context.Context) DynamicThresholdFailingPeriodsOutput
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsArgs struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert pulumi.Float64Input `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods pulumi.Float64Input `pulumi:"numberOfEvaluationPeriods"`
}

func (DynamicThresholdFailingPeriodsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriods)(nil)).Elem()
}

func (i DynamicThresholdFailingPeriodsArgs) ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput {
	return i.ToDynamicThresholdFailingPeriodsOutputWithContext(context.Background())
}

func (i DynamicThresholdFailingPeriodsArgs) ToDynamicThresholdFailingPeriodsOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynamicThresholdFailingPeriodsOutput)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsOutput struct{ *pulumi.OutputState }

func (DynamicThresholdFailingPeriodsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriods)(nil)).Elem()
}

func (o DynamicThresholdFailingPeriodsOutput) ToDynamicThresholdFailingPeriodsOutput() DynamicThresholdFailingPeriodsOutput {
	return o
}

func (o DynamicThresholdFailingPeriodsOutput) ToDynamicThresholdFailingPeriodsOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
func (o DynamicThresholdFailingPeriodsOutput) MinFailingPeriodsToAlert() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriods) float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64Output)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
func (o DynamicThresholdFailingPeriodsOutput) NumberOfEvaluationPeriods() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriods) float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64Output)
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponse struct {
	// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
	MinFailingPeriodsToAlert float64 `pulumi:"minFailingPeriodsToAlert"`
	// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
	NumberOfEvaluationPeriods float64 `pulumi:"numberOfEvaluationPeriods"`
}

// The minimum number of violations required within the selected lookback time window required to raise an alert.
type DynamicThresholdFailingPeriodsResponseOutput struct{ *pulumi.OutputState }

func (DynamicThresholdFailingPeriodsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DynamicThresholdFailingPeriodsResponse)(nil)).Elem()
}

func (o DynamicThresholdFailingPeriodsResponseOutput) ToDynamicThresholdFailingPeriodsResponseOutput() DynamicThresholdFailingPeriodsResponseOutput {
	return o
}

func (o DynamicThresholdFailingPeriodsResponseOutput) ToDynamicThresholdFailingPeriodsResponseOutputWithContext(ctx context.Context) DynamicThresholdFailingPeriodsResponseOutput {
	return o
}

// The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
func (o DynamicThresholdFailingPeriodsResponseOutput) MinFailingPeriodsToAlert() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriodsResponse) float64 { return v.MinFailingPeriodsToAlert }).(pulumi.Float64Output)
}

// The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
func (o DynamicThresholdFailingPeriodsResponseOutput) NumberOfEvaluationPeriods() pulumi.Float64Output {
	return o.ApplyT(func(v DynamicThresholdFailingPeriodsResponse) float64 { return v.NumberOfEvaluationPeriods }).(pulumi.Float64Output)
}

// Email notification of an autoscale event.
type EmailNotification struct {
	// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
	CustomEmails []string `pulumi:"customEmails"`
	// a value indicating whether to send email to subscription administrator.
	SendToSubscriptionAdministrator *bool `pulumi:"sendToSubscriptionAdministrator"`
	// a value indicating whether to send email to subscription co-administrators.
	SendToSubscriptionCoAdministrators *bool `pulumi:"sendToSubscriptionCoAdministrators"`
}

// Defaults sets the appropriate defaults for EmailNotification
func (val *EmailNotification) Defaults() *EmailNotification {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SendToSubscriptionAdministrator == nil {
		sendToSubscriptionAdministrator_ := false
		tmp.SendToSubscriptionAdministrator = &sendToSubscriptionAdministrator_
	}
	if tmp.SendToSubscriptionCoAdministrators == nil {
		sendToSubscriptionCoAdministrators_ := false
		tmp.SendToSubscriptionCoAdministrators = &sendToSubscriptionCoAdministrators_
	}
	return &tmp
}

// EmailNotificationInput is an input type that accepts EmailNotificationArgs and EmailNotificationOutput values.
// You can construct a concrete instance of `EmailNotificationInput` via:
//
//	EmailNotificationArgs{...}
type EmailNotificationInput interface {
	pulumi.Input

	ToEmailNotificationOutput() EmailNotificationOutput
	ToEmailNotificationOutputWithContext(context.Context) EmailNotificationOutput
}

// Email notification of an autoscale event.
type EmailNotificationArgs struct {
	// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
	CustomEmails pulumi.StringArrayInput `pulumi:"customEmails"`
	// a value indicating whether to send email to subscription administrator.
	SendToSubscriptionAdministrator pulumi.BoolPtrInput `pulumi:"sendToSubscriptionAdministrator"`
	// a value indicating whether to send email to subscription co-administrators.
	SendToSubscriptionCoAdministrators pulumi.BoolPtrInput `pulumi:"sendToSubscriptionCoAdministrators"`
}

// Defaults sets the appropriate defaults for EmailNotificationArgs
func (val *EmailNotificationArgs) Defaults() *EmailNotificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SendToSubscriptionAdministrator == nil {
		tmp.SendToSubscriptionAdministrator = pulumi.BoolPtr(false)
	}
	if tmp.SendToSubscriptionCoAdministrators == nil {
		tmp.SendToSubscriptionCoAdministrators = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EmailNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailNotification)(nil)).Elem()
}

func (i EmailNotificationArgs) ToEmailNotificationOutput() EmailNotificationOutput {
	return i.ToEmailNotificationOutputWithContext(context.Background())
}

func (i EmailNotificationArgs) ToEmailNotificationOutputWithContext(ctx context.Context) EmailNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationOutput)
}

func (i EmailNotificationArgs) ToEmailNotificationPtrOutput() EmailNotificationPtrOutput {
	return i.ToEmailNotificationPtrOutputWithContext(context.Background())
}

func (i EmailNotificationArgs) ToEmailNotificationPtrOutputWithContext(ctx context.Context) EmailNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationOutput).ToEmailNotificationPtrOutputWithContext(ctx)
}

// EmailNotificationPtrInput is an input type that accepts EmailNotificationArgs, EmailNotificationPtr and EmailNotificationPtrOutput values.
// You can construct a concrete instance of `EmailNotificationPtrInput` via:
//
//	        EmailNotificationArgs{...}
//
//	or:
//
//	        nil
type EmailNotificationPtrInput interface {
	pulumi.Input

	ToEmailNotificationPtrOutput() EmailNotificationPtrOutput
	ToEmailNotificationPtrOutputWithContext(context.Context) EmailNotificationPtrOutput
}

type emailNotificationPtrType EmailNotificationArgs

func EmailNotificationPtr(v *EmailNotificationArgs) EmailNotificationPtrInput {
	return (*emailNotificationPtrType)(v)
}

func (*emailNotificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailNotification)(nil)).Elem()
}

func (i *emailNotificationPtrType) ToEmailNotificationPtrOutput() EmailNotificationPtrOutput {
	return i.ToEmailNotificationPtrOutputWithContext(context.Background())
}

func (i *emailNotificationPtrType) ToEmailNotificationPtrOutputWithContext(ctx context.Context) EmailNotificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailNotificationPtrOutput)
}

// Email notification of an autoscale event.
type EmailNotificationOutput struct{ *pulumi.OutputState }

func (EmailNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailNotification)(nil)).Elem()
}

func (o EmailNotificationOutput) ToEmailNotificationOutput() EmailNotificationOutput {
	return o
}

func (o EmailNotificationOutput) ToEmailNotificationOutputWithContext(ctx context.Context) EmailNotificationOutput {
	return o
}

func (o EmailNotificationOutput) ToEmailNotificationPtrOutput() EmailNotificationPtrOutput {
	return o.ToEmailNotificationPtrOutputWithContext(context.Background())
}

func (o EmailNotificationOutput) ToEmailNotificationPtrOutputWithContext(ctx context.Context) EmailNotificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmailNotification) *EmailNotification {
		return &v
	}).(EmailNotificationPtrOutput)
}

// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
func (o EmailNotificationOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EmailNotification) []string { return v.CustomEmails }).(pulumi.StringArrayOutput)
}

// a value indicating whether to send email to subscription administrator.
func (o EmailNotificationOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailNotification) *bool { return v.SendToSubscriptionAdministrator }).(pulumi.BoolPtrOutput)
}

// a value indicating whether to send email to subscription co-administrators.
func (o EmailNotificationOutput) SendToSubscriptionCoAdministrators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailNotification) *bool { return v.SendToSubscriptionCoAdministrators }).(pulumi.BoolPtrOutput)
}

type EmailNotificationPtrOutput struct{ *pulumi.OutputState }

func (EmailNotificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailNotification)(nil)).Elem()
}

func (o EmailNotificationPtrOutput) ToEmailNotificationPtrOutput() EmailNotificationPtrOutput {
	return o
}

func (o EmailNotificationPtrOutput) ToEmailNotificationPtrOutputWithContext(ctx context.Context) EmailNotificationPtrOutput {
	return o
}

func (o EmailNotificationPtrOutput) Elem() EmailNotificationOutput {
	return o.ApplyT(func(v *EmailNotification) EmailNotification {
		if v != nil {
			return *v
		}
		var ret EmailNotification
		return ret
	}).(EmailNotificationOutput)
}

// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
func (o EmailNotificationPtrOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EmailNotification) []string {
		if v == nil {
			return nil
		}
		return v.CustomEmails
	}).(pulumi.StringArrayOutput)
}

// a value indicating whether to send email to subscription administrator.
func (o EmailNotificationPtrOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotification) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionAdministrator
	}).(pulumi.BoolPtrOutput)
}

// a value indicating whether to send email to subscription co-administrators.
func (o EmailNotificationPtrOutput) SendToSubscriptionCoAdministrators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotification) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionCoAdministrators
	}).(pulumi.BoolPtrOutput)
}

// Email notification of an autoscale event.
type EmailNotificationResponse struct {
	// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
	CustomEmails []string `pulumi:"customEmails"`
	// a value indicating whether to send email to subscription administrator.
	SendToSubscriptionAdministrator *bool `pulumi:"sendToSubscriptionAdministrator"`
	// a value indicating whether to send email to subscription co-administrators.
	SendToSubscriptionCoAdministrators *bool `pulumi:"sendToSubscriptionCoAdministrators"`
}

// Defaults sets the appropriate defaults for EmailNotificationResponse
func (val *EmailNotificationResponse) Defaults() *EmailNotificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SendToSubscriptionAdministrator == nil {
		sendToSubscriptionAdministrator_ := false
		tmp.SendToSubscriptionAdministrator = &sendToSubscriptionAdministrator_
	}
	if tmp.SendToSubscriptionCoAdministrators == nil {
		sendToSubscriptionCoAdministrators_ := false
		tmp.SendToSubscriptionCoAdministrators = &sendToSubscriptionCoAdministrators_
	}
	return &tmp
}

// Email notification of an autoscale event.
type EmailNotificationResponseOutput struct{ *pulumi.OutputState }

func (EmailNotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailNotificationResponse)(nil)).Elem()
}

func (o EmailNotificationResponseOutput) ToEmailNotificationResponseOutput() EmailNotificationResponseOutput {
	return o
}

func (o EmailNotificationResponseOutput) ToEmailNotificationResponseOutputWithContext(ctx context.Context) EmailNotificationResponseOutput {
	return o
}

// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
func (o EmailNotificationResponseOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EmailNotificationResponse) []string { return v.CustomEmails }).(pulumi.StringArrayOutput)
}

// a value indicating whether to send email to subscription administrator.
func (o EmailNotificationResponseOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailNotificationResponse) *bool { return v.SendToSubscriptionAdministrator }).(pulumi.BoolPtrOutput)
}

// a value indicating whether to send email to subscription co-administrators.
func (o EmailNotificationResponseOutput) SendToSubscriptionCoAdministrators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailNotificationResponse) *bool { return v.SendToSubscriptionCoAdministrators }).(pulumi.BoolPtrOutput)
}

type EmailNotificationResponsePtrOutput struct{ *pulumi.OutputState }

func (EmailNotificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailNotificationResponse)(nil)).Elem()
}

func (o EmailNotificationResponsePtrOutput) ToEmailNotificationResponsePtrOutput() EmailNotificationResponsePtrOutput {
	return o
}

func (o EmailNotificationResponsePtrOutput) ToEmailNotificationResponsePtrOutputWithContext(ctx context.Context) EmailNotificationResponsePtrOutput {
	return o
}

func (o EmailNotificationResponsePtrOutput) Elem() EmailNotificationResponseOutput {
	return o.ApplyT(func(v *EmailNotificationResponse) EmailNotificationResponse {
		if v != nil {
			return *v
		}
		var ret EmailNotificationResponse
		return ret
	}).(EmailNotificationResponseOutput)
}

// the custom e-mails list. This value can be null or empty, in which case this attribute will be ignored.
func (o EmailNotificationResponsePtrOutput) CustomEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EmailNotificationResponse) []string {
		if v == nil {
			return nil
		}
		return v.CustomEmails
	}).(pulumi.StringArrayOutput)
}

// a value indicating whether to send email to subscription administrator.
func (o EmailNotificationResponsePtrOutput) SendToSubscriptionAdministrator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionAdministrator
	}).(pulumi.BoolPtrOutput)
}

// a value indicating whether to send email to subscription co-administrators.
func (o EmailNotificationResponsePtrOutput) SendToSubscriptionCoAdministrators() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EmailNotificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendToSubscriptionCoAdministrators
	}).(pulumi.BoolPtrOutput)
}

// An email receiver.
type EmailReceiver struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EmailReceiver
func (val *EmailReceiver) Defaults() *EmailReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// EmailReceiverInput is an input type that accepts EmailReceiverArgs and EmailReceiverOutput values.
// You can construct a concrete instance of `EmailReceiverInput` via:
//
//	EmailReceiverArgs{...}
type EmailReceiverInput interface {
	pulumi.Input

	ToEmailReceiverOutput() EmailReceiverOutput
	ToEmailReceiverOutputWithContext(context.Context) EmailReceiverOutput
}

// An email receiver.
type EmailReceiverArgs struct {
	// The email address of this receiver.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within a tenant action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EmailReceiverArgs
func (val *EmailReceiverArgs) Defaults() *EmailReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EmailReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArgs) ToEmailReceiverOutput() EmailReceiverOutput {
	return i.ToEmailReceiverOutputWithContext(context.Background())
}

func (i EmailReceiverArgs) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverOutput)
}

// EmailReceiverArrayInput is an input type that accepts EmailReceiverArray and EmailReceiverArrayOutput values.
// You can construct a concrete instance of `EmailReceiverArrayInput` via:
//
//	EmailReceiverArray{ EmailReceiverArgs{...} }
type EmailReceiverArrayInput interface {
	pulumi.Input

	ToEmailReceiverArrayOutput() EmailReceiverArrayOutput
	ToEmailReceiverArrayOutputWithContext(context.Context) EmailReceiverArrayOutput
}

type EmailReceiverArray []EmailReceiverInput

func (EmailReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return i.ToEmailReceiverArrayOutputWithContext(context.Background())
}

func (i EmailReceiverArray) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailReceiverArrayOutput)
}

// An email receiver.
type EmailReceiverOutput struct{ *pulumi.OutputState }

func (EmailReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverOutput) ToEmailReceiverOutput() EmailReceiverOutput {
	return o
}

func (o EmailReceiverOutput) ToEmailReceiverOutputWithContext(ctx context.Context) EmailReceiverOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within a tenant action group.
func (o EmailReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o EmailReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type EmailReceiverArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiver)(nil)).Elem()
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutput() EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) ToEmailReceiverArrayOutputWithContext(ctx context.Context) EmailReceiverArrayOutput {
	return o
}

func (o EmailReceiverArrayOutput) Index(i pulumi.IntInput) EmailReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiver {
		return vs[0].([]EmailReceiver)[vs[1].(int)]
	}).(EmailReceiverOutput)
}

// An email receiver.
type EmailReceiverResponse struct {
	// The email address of this receiver.
	EmailAddress string `pulumi:"emailAddress"`
	// The name of the email receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// The receiver status of the e-mail.
	Status string `pulumi:"status"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EmailReceiverResponse
func (val *EmailReceiverResponse) Defaults() *EmailReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// An email receiver.
type EmailReceiverResponseOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutput() EmailReceiverResponseOutput {
	return o
}

func (o EmailReceiverResponseOutput) ToEmailReceiverResponseOutputWithContext(ctx context.Context) EmailReceiverResponseOutput {
	return o
}

// The email address of this receiver.
func (o EmailReceiverResponseOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// The name of the email receiver. Names must be unique across all receivers within a tenant action group.
func (o EmailReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The receiver status of the e-mail.
func (o EmailReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EmailReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o EmailReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EmailReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type EmailReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (EmailReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailReceiverResponse)(nil)).Elem()
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutput() EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) ToEmailReceiverResponseArrayOutputWithContext(ctx context.Context) EmailReceiverResponseArrayOutput {
	return o
}

func (o EmailReceiverResponseArrayOutput) Index(i pulumi.IntInput) EmailReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailReceiverResponse {
		return vs[0].([]EmailReceiverResponse)[vs[1].(int)]
	}).(EmailReceiverResponseOutput)
}

// Alert configuration for an entity
type EntityAlerts struct {
	// Alert to be triggered on state change to degraded
	Degraded *AlertConfiguration `pulumi:"degraded"`
	// Alert to be triggered on state change to unhealthy
	Unhealthy *AlertConfiguration `pulumi:"unhealthy"`
}

// EntityAlertsInput is an input type that accepts EntityAlertsArgs and EntityAlertsOutput values.
// You can construct a concrete instance of `EntityAlertsInput` via:
//
//	EntityAlertsArgs{...}
type EntityAlertsInput interface {
	pulumi.Input

	ToEntityAlertsOutput() EntityAlertsOutput
	ToEntityAlertsOutputWithContext(context.Context) EntityAlertsOutput
}

// Alert configuration for an entity
type EntityAlertsArgs struct {
	// Alert to be triggered on state change to degraded
	Degraded AlertConfigurationPtrInput `pulumi:"degraded"`
	// Alert to be triggered on state change to unhealthy
	Unhealthy AlertConfigurationPtrInput `pulumi:"unhealthy"`
}

func (EntityAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityAlerts)(nil)).Elem()
}

func (i EntityAlertsArgs) ToEntityAlertsOutput() EntityAlertsOutput {
	return i.ToEntityAlertsOutputWithContext(context.Background())
}

func (i EntityAlertsArgs) ToEntityAlertsOutputWithContext(ctx context.Context) EntityAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityAlertsOutput)
}

func (i EntityAlertsArgs) ToEntityAlertsPtrOutput() EntityAlertsPtrOutput {
	return i.ToEntityAlertsPtrOutputWithContext(context.Background())
}

func (i EntityAlertsArgs) ToEntityAlertsPtrOutputWithContext(ctx context.Context) EntityAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityAlertsOutput).ToEntityAlertsPtrOutputWithContext(ctx)
}

// EntityAlertsPtrInput is an input type that accepts EntityAlertsArgs, EntityAlertsPtr and EntityAlertsPtrOutput values.
// You can construct a concrete instance of `EntityAlertsPtrInput` via:
//
//	        EntityAlertsArgs{...}
//
//	or:
//
//	        nil
type EntityAlertsPtrInput interface {
	pulumi.Input

	ToEntityAlertsPtrOutput() EntityAlertsPtrOutput
	ToEntityAlertsPtrOutputWithContext(context.Context) EntityAlertsPtrOutput
}

type entityAlertsPtrType EntityAlertsArgs

func EntityAlertsPtr(v *EntityAlertsArgs) EntityAlertsPtrInput {
	return (*entityAlertsPtrType)(v)
}

func (*entityAlertsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityAlerts)(nil)).Elem()
}

func (i *entityAlertsPtrType) ToEntityAlertsPtrOutput() EntityAlertsPtrOutput {
	return i.ToEntityAlertsPtrOutputWithContext(context.Background())
}

func (i *entityAlertsPtrType) ToEntityAlertsPtrOutputWithContext(ctx context.Context) EntityAlertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityAlertsPtrOutput)
}

// Alert configuration for an entity
type EntityAlertsOutput struct{ *pulumi.OutputState }

func (EntityAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityAlerts)(nil)).Elem()
}

func (o EntityAlertsOutput) ToEntityAlertsOutput() EntityAlertsOutput {
	return o
}

func (o EntityAlertsOutput) ToEntityAlertsOutputWithContext(ctx context.Context) EntityAlertsOutput {
	return o
}

func (o EntityAlertsOutput) ToEntityAlertsPtrOutput() EntityAlertsPtrOutput {
	return o.ToEntityAlertsPtrOutputWithContext(context.Background())
}

func (o EntityAlertsOutput) ToEntityAlertsPtrOutputWithContext(ctx context.Context) EntityAlertsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityAlerts) *EntityAlerts {
		return &v
	}).(EntityAlertsPtrOutput)
}

// Alert to be triggered on state change to degraded
func (o EntityAlertsOutput) Degraded() AlertConfigurationPtrOutput {
	return o.ApplyT(func(v EntityAlerts) *AlertConfiguration { return v.Degraded }).(AlertConfigurationPtrOutput)
}

// Alert to be triggered on state change to unhealthy
func (o EntityAlertsOutput) Unhealthy() AlertConfigurationPtrOutput {
	return o.ApplyT(func(v EntityAlerts) *AlertConfiguration { return v.Unhealthy }).(AlertConfigurationPtrOutput)
}

type EntityAlertsPtrOutput struct{ *pulumi.OutputState }

func (EntityAlertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityAlerts)(nil)).Elem()
}

func (o EntityAlertsPtrOutput) ToEntityAlertsPtrOutput() EntityAlertsPtrOutput {
	return o
}

func (o EntityAlertsPtrOutput) ToEntityAlertsPtrOutputWithContext(ctx context.Context) EntityAlertsPtrOutput {
	return o
}

func (o EntityAlertsPtrOutput) Elem() EntityAlertsOutput {
	return o.ApplyT(func(v *EntityAlerts) EntityAlerts {
		if v != nil {
			return *v
		}
		var ret EntityAlerts
		return ret
	}).(EntityAlertsOutput)
}

// Alert to be triggered on state change to degraded
func (o EntityAlertsPtrOutput) Degraded() AlertConfigurationPtrOutput {
	return o.ApplyT(func(v *EntityAlerts) *AlertConfiguration {
		if v == nil {
			return nil
		}
		return v.Degraded
	}).(AlertConfigurationPtrOutput)
}

// Alert to be triggered on state change to unhealthy
func (o EntityAlertsPtrOutput) Unhealthy() AlertConfigurationPtrOutput {
	return o.ApplyT(func(v *EntityAlerts) *AlertConfiguration {
		if v == nil {
			return nil
		}
		return v.Unhealthy
	}).(AlertConfigurationPtrOutput)
}

// Alert configuration for an entity
type EntityAlertsResponse struct {
	// Alert to be triggered on state change to degraded
	Degraded *AlertConfigurationResponse `pulumi:"degraded"`
	// Alert to be triggered on state change to unhealthy
	Unhealthy *AlertConfigurationResponse `pulumi:"unhealthy"`
}

// Alert configuration for an entity
type EntityAlertsResponseOutput struct{ *pulumi.OutputState }

func (EntityAlertsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityAlertsResponse)(nil)).Elem()
}

func (o EntityAlertsResponseOutput) ToEntityAlertsResponseOutput() EntityAlertsResponseOutput {
	return o
}

func (o EntityAlertsResponseOutput) ToEntityAlertsResponseOutputWithContext(ctx context.Context) EntityAlertsResponseOutput {
	return o
}

// Alert to be triggered on state change to degraded
func (o EntityAlertsResponseOutput) Degraded() AlertConfigurationResponsePtrOutput {
	return o.ApplyT(func(v EntityAlertsResponse) *AlertConfigurationResponse { return v.Degraded }).(AlertConfigurationResponsePtrOutput)
}

// Alert to be triggered on state change to unhealthy
func (o EntityAlertsResponseOutput) Unhealthy() AlertConfigurationResponsePtrOutput {
	return o.ApplyT(func(v EntityAlertsResponse) *AlertConfigurationResponse { return v.Unhealthy }).(AlertConfigurationResponsePtrOutput)
}

type EntityAlertsResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityAlertsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityAlertsResponse)(nil)).Elem()
}

func (o EntityAlertsResponsePtrOutput) ToEntityAlertsResponsePtrOutput() EntityAlertsResponsePtrOutput {
	return o
}

func (o EntityAlertsResponsePtrOutput) ToEntityAlertsResponsePtrOutputWithContext(ctx context.Context) EntityAlertsResponsePtrOutput {
	return o
}

func (o EntityAlertsResponsePtrOutput) Elem() EntityAlertsResponseOutput {
	return o.ApplyT(func(v *EntityAlertsResponse) EntityAlertsResponse {
		if v != nil {
			return *v
		}
		var ret EntityAlertsResponse
		return ret
	}).(EntityAlertsResponseOutput)
}

// Alert to be triggered on state change to degraded
func (o EntityAlertsResponsePtrOutput) Degraded() AlertConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *EntityAlertsResponse) *AlertConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Degraded
	}).(AlertConfigurationResponsePtrOutput)
}

// Alert to be triggered on state change to unhealthy
func (o EntityAlertsResponsePtrOutput) Unhealthy() AlertConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *EntityAlertsResponse) *AlertConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.Unhealthy
	}).(AlertConfigurationResponsePtrOutput)
}

// Visual position of the entity
type EntityCoordinates struct {
	// X Coordinate
	X float64 `pulumi:"x"`
	// Y Coordinate
	Y float64 `pulumi:"y"`
}

// EntityCoordinatesInput is an input type that accepts EntityCoordinatesArgs and EntityCoordinatesOutput values.
// You can construct a concrete instance of `EntityCoordinatesInput` via:
//
//	EntityCoordinatesArgs{...}
type EntityCoordinatesInput interface {
	pulumi.Input

	ToEntityCoordinatesOutput() EntityCoordinatesOutput
	ToEntityCoordinatesOutputWithContext(context.Context) EntityCoordinatesOutput
}

// Visual position of the entity
type EntityCoordinatesArgs struct {
	// X Coordinate
	X pulumi.Float64Input `pulumi:"x"`
	// Y Coordinate
	Y pulumi.Float64Input `pulumi:"y"`
}

func (EntityCoordinatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityCoordinates)(nil)).Elem()
}

func (i EntityCoordinatesArgs) ToEntityCoordinatesOutput() EntityCoordinatesOutput {
	return i.ToEntityCoordinatesOutputWithContext(context.Background())
}

func (i EntityCoordinatesArgs) ToEntityCoordinatesOutputWithContext(ctx context.Context) EntityCoordinatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityCoordinatesOutput)
}

func (i EntityCoordinatesArgs) ToEntityCoordinatesPtrOutput() EntityCoordinatesPtrOutput {
	return i.ToEntityCoordinatesPtrOutputWithContext(context.Background())
}

func (i EntityCoordinatesArgs) ToEntityCoordinatesPtrOutputWithContext(ctx context.Context) EntityCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityCoordinatesOutput).ToEntityCoordinatesPtrOutputWithContext(ctx)
}

// EntityCoordinatesPtrInput is an input type that accepts EntityCoordinatesArgs, EntityCoordinatesPtr and EntityCoordinatesPtrOutput values.
// You can construct a concrete instance of `EntityCoordinatesPtrInput` via:
//
//	        EntityCoordinatesArgs{...}
//
//	or:
//
//	        nil
type EntityCoordinatesPtrInput interface {
	pulumi.Input

	ToEntityCoordinatesPtrOutput() EntityCoordinatesPtrOutput
	ToEntityCoordinatesPtrOutputWithContext(context.Context) EntityCoordinatesPtrOutput
}

type entityCoordinatesPtrType EntityCoordinatesArgs

func EntityCoordinatesPtr(v *EntityCoordinatesArgs) EntityCoordinatesPtrInput {
	return (*entityCoordinatesPtrType)(v)
}

func (*entityCoordinatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityCoordinates)(nil)).Elem()
}

func (i *entityCoordinatesPtrType) ToEntityCoordinatesPtrOutput() EntityCoordinatesPtrOutput {
	return i.ToEntityCoordinatesPtrOutputWithContext(context.Background())
}

func (i *entityCoordinatesPtrType) ToEntityCoordinatesPtrOutputWithContext(ctx context.Context) EntityCoordinatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityCoordinatesPtrOutput)
}

// Visual position of the entity
type EntityCoordinatesOutput struct{ *pulumi.OutputState }

func (EntityCoordinatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityCoordinates)(nil)).Elem()
}

func (o EntityCoordinatesOutput) ToEntityCoordinatesOutput() EntityCoordinatesOutput {
	return o
}

func (o EntityCoordinatesOutput) ToEntityCoordinatesOutputWithContext(ctx context.Context) EntityCoordinatesOutput {
	return o
}

func (o EntityCoordinatesOutput) ToEntityCoordinatesPtrOutput() EntityCoordinatesPtrOutput {
	return o.ToEntityCoordinatesPtrOutputWithContext(context.Background())
}

func (o EntityCoordinatesOutput) ToEntityCoordinatesPtrOutputWithContext(ctx context.Context) EntityCoordinatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityCoordinates) *EntityCoordinates {
		return &v
	}).(EntityCoordinatesPtrOutput)
}

// X Coordinate
func (o EntityCoordinatesOutput) X() pulumi.Float64Output {
	return o.ApplyT(func(v EntityCoordinates) float64 { return v.X }).(pulumi.Float64Output)
}

// Y Coordinate
func (o EntityCoordinatesOutput) Y() pulumi.Float64Output {
	return o.ApplyT(func(v EntityCoordinates) float64 { return v.Y }).(pulumi.Float64Output)
}

type EntityCoordinatesPtrOutput struct{ *pulumi.OutputState }

func (EntityCoordinatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityCoordinates)(nil)).Elem()
}

func (o EntityCoordinatesPtrOutput) ToEntityCoordinatesPtrOutput() EntityCoordinatesPtrOutput {
	return o
}

func (o EntityCoordinatesPtrOutput) ToEntityCoordinatesPtrOutputWithContext(ctx context.Context) EntityCoordinatesPtrOutput {
	return o
}

func (o EntityCoordinatesPtrOutput) Elem() EntityCoordinatesOutput {
	return o.ApplyT(func(v *EntityCoordinates) EntityCoordinates {
		if v != nil {
			return *v
		}
		var ret EntityCoordinates
		return ret
	}).(EntityCoordinatesOutput)
}

// X Coordinate
func (o EntityCoordinatesPtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityCoordinates) *float64 {
		if v == nil {
			return nil
		}
		return &v.X
	}).(pulumi.Float64PtrOutput)
}

// Y Coordinate
func (o EntityCoordinatesPtrOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityCoordinates) *float64 {
		if v == nil {
			return nil
		}
		return &v.Y
	}).(pulumi.Float64PtrOutput)
}

// Visual position of the entity
type EntityCoordinatesResponse struct {
	// X Coordinate
	X float64 `pulumi:"x"`
	// Y Coordinate
	Y float64 `pulumi:"y"`
}

// Visual position of the entity
type EntityCoordinatesResponseOutput struct{ *pulumi.OutputState }

func (EntityCoordinatesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityCoordinatesResponse)(nil)).Elem()
}

func (o EntityCoordinatesResponseOutput) ToEntityCoordinatesResponseOutput() EntityCoordinatesResponseOutput {
	return o
}

func (o EntityCoordinatesResponseOutput) ToEntityCoordinatesResponseOutputWithContext(ctx context.Context) EntityCoordinatesResponseOutput {
	return o
}

// X Coordinate
func (o EntityCoordinatesResponseOutput) X() pulumi.Float64Output {
	return o.ApplyT(func(v EntityCoordinatesResponse) float64 { return v.X }).(pulumi.Float64Output)
}

// Y Coordinate
func (o EntityCoordinatesResponseOutput) Y() pulumi.Float64Output {
	return o.ApplyT(func(v EntityCoordinatesResponse) float64 { return v.Y }).(pulumi.Float64Output)
}

type EntityCoordinatesResponsePtrOutput struct{ *pulumi.OutputState }

func (EntityCoordinatesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityCoordinatesResponse)(nil)).Elem()
}

func (o EntityCoordinatesResponsePtrOutput) ToEntityCoordinatesResponsePtrOutput() EntityCoordinatesResponsePtrOutput {
	return o
}

func (o EntityCoordinatesResponsePtrOutput) ToEntityCoordinatesResponsePtrOutputWithContext(ctx context.Context) EntityCoordinatesResponsePtrOutput {
	return o
}

func (o EntityCoordinatesResponsePtrOutput) Elem() EntityCoordinatesResponseOutput {
	return o.ApplyT(func(v *EntityCoordinatesResponse) EntityCoordinatesResponse {
		if v != nil {
			return *v
		}
		var ret EntityCoordinatesResponse
		return ret
	}).(EntityCoordinatesResponseOutput)
}

// X Coordinate
func (o EntityCoordinatesResponsePtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityCoordinatesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.X
	}).(pulumi.Float64PtrOutput)
}

// Y Coordinate
func (o EntityCoordinatesResponsePtrOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityCoordinatesResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Y
	}).(pulumi.Float64PtrOutput)
}

// Properties which are common across all kinds of entities
type EntityProperties struct {
	// Alert configuration for this entity
	Alerts *EntityAlerts `pulumi:"alerts"`
	// Positioning of the entity on the model canvas
	CanvasPosition *EntityCoordinates `pulumi:"canvasPosition"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Health objective as a percentage of time the entity should be healthy.
	HealthObjective *float64 `pulumi:"healthObjective"`
	// Visual icon definition. If not set, a default icon is used.
	Icon *IconDefinition `pulumi:"icon"`
	// Impact of the entity in health state propagation
	Impact *string `pulumi:"impact"`
	// Entity kind
	Kind *string `pulumi:"kind"`
	// Signal groups which are assigned to this entity
	Signals *SignalGroup `pulumi:"signals"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EntityProperties
func (val *EntityProperties) Defaults() *EntityProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Impact == nil {
		impact_ := "Standard"
		tmp.Impact = &impact_
	}
	if tmp.Kind == nil {
		kind_ := "Default"
		tmp.Kind = &kind_
	}
	tmp.Signals = tmp.Signals.Defaults()

	return &tmp
}

// EntityPropertiesInput is an input type that accepts EntityPropertiesArgs and EntityPropertiesOutput values.
// You can construct a concrete instance of `EntityPropertiesInput` via:
//
//	EntityPropertiesArgs{...}
type EntityPropertiesInput interface {
	pulumi.Input

	ToEntityPropertiesOutput() EntityPropertiesOutput
	ToEntityPropertiesOutputWithContext(context.Context) EntityPropertiesOutput
}

// Properties which are common across all kinds of entities
type EntityPropertiesArgs struct {
	// Alert configuration for this entity
	Alerts EntityAlertsPtrInput `pulumi:"alerts"`
	// Positioning of the entity on the model canvas
	CanvasPosition EntityCoordinatesPtrInput `pulumi:"canvasPosition"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Health objective as a percentage of time the entity should be healthy.
	HealthObjective pulumi.Float64PtrInput `pulumi:"healthObjective"`
	// Visual icon definition. If not set, a default icon is used.
	Icon IconDefinitionPtrInput `pulumi:"icon"`
	// Impact of the entity in health state propagation
	Impact pulumi.StringPtrInput `pulumi:"impact"`
	// Entity kind
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Signal groups which are assigned to this entity
	Signals SignalGroupPtrInput `pulumi:"signals"`
	// Optional set of labels (key-value pairs)
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EntityPropertiesArgs
func (val *EntityPropertiesArgs) Defaults() *EntityPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Impact == nil {
		tmp.Impact = pulumi.StringPtr("Standard")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Default")
	}

	return &tmp
}
func (EntityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperties)(nil)).Elem()
}

func (i EntityPropertiesArgs) ToEntityPropertiesOutput() EntityPropertiesOutput {
	return i.ToEntityPropertiesOutputWithContext(context.Background())
}

func (i EntityPropertiesArgs) ToEntityPropertiesOutputWithContext(ctx context.Context) EntityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertiesOutput)
}

func (i EntityPropertiesArgs) ToEntityPropertiesPtrOutput() EntityPropertiesPtrOutput {
	return i.ToEntityPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityPropertiesArgs) ToEntityPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertiesOutput).ToEntityPropertiesPtrOutputWithContext(ctx)
}

// EntityPropertiesPtrInput is an input type that accepts EntityPropertiesArgs, EntityPropertiesPtr and EntityPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityPropertiesPtrInput` via:
//
//	        EntityPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityPropertiesPtrInput interface {
	pulumi.Input

	ToEntityPropertiesPtrOutput() EntityPropertiesPtrOutput
	ToEntityPropertiesPtrOutputWithContext(context.Context) EntityPropertiesPtrOutput
}

type entityPropertiesPtrType EntityPropertiesArgs

func EntityPropertiesPtr(v *EntityPropertiesArgs) EntityPropertiesPtrInput {
	return (*entityPropertiesPtrType)(v)
}

func (*entityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityProperties)(nil)).Elem()
}

func (i *entityPropertiesPtrType) ToEntityPropertiesPtrOutput() EntityPropertiesPtrOutput {
	return i.ToEntityPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityPropertiesPtrType) ToEntityPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPropertiesPtrOutput)
}

// Properties which are common across all kinds of entities
type EntityPropertiesOutput struct{ *pulumi.OutputState }

func (EntityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityProperties)(nil)).Elem()
}

func (o EntityPropertiesOutput) ToEntityPropertiesOutput() EntityPropertiesOutput {
	return o
}

func (o EntityPropertiesOutput) ToEntityPropertiesOutputWithContext(ctx context.Context) EntityPropertiesOutput {
	return o
}

func (o EntityPropertiesOutput) ToEntityPropertiesPtrOutput() EntityPropertiesPtrOutput {
	return o.ToEntityPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityPropertiesOutput) ToEntityPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityProperties) *EntityProperties {
		return &v
	}).(EntityPropertiesPtrOutput)
}

// Alert configuration for this entity
func (o EntityPropertiesOutput) Alerts() EntityAlertsPtrOutput {
	return o.ApplyT(func(v EntityProperties) *EntityAlerts { return v.Alerts }).(EntityAlertsPtrOutput)
}

// Positioning of the entity on the model canvas
func (o EntityPropertiesOutput) CanvasPosition() EntityCoordinatesPtrOutput {
	return o.ApplyT(func(v EntityProperties) *EntityCoordinates { return v.CanvasPosition }).(EntityCoordinatesPtrOutput)
}

// Display name
func (o EntityPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Health objective as a percentage of time the entity should be healthy.
func (o EntityPropertiesOutput) HealthObjective() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EntityProperties) *float64 { return v.HealthObjective }).(pulumi.Float64PtrOutput)
}

// Visual icon definition. If not set, a default icon is used.
func (o EntityPropertiesOutput) Icon() IconDefinitionPtrOutput {
	return o.ApplyT(func(v EntityProperties) *IconDefinition { return v.Icon }).(IconDefinitionPtrOutput)
}

// Impact of the entity in health state propagation
func (o EntityPropertiesOutput) Impact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityProperties) *string { return v.Impact }).(pulumi.StringPtrOutput)
}

// Entity kind
func (o EntityPropertiesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityProperties) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Signal groups which are assigned to this entity
func (o EntityPropertiesOutput) Signals() SignalGroupPtrOutput {
	return o.ApplyT(func(v EntityProperties) *SignalGroup { return v.Signals }).(SignalGroupPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o EntityPropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type EntityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityProperties)(nil)).Elem()
}

func (o EntityPropertiesPtrOutput) ToEntityPropertiesPtrOutput() EntityPropertiesPtrOutput {
	return o
}

func (o EntityPropertiesPtrOutput) ToEntityPropertiesPtrOutputWithContext(ctx context.Context) EntityPropertiesPtrOutput {
	return o
}

func (o EntityPropertiesPtrOutput) Elem() EntityPropertiesOutput {
	return o.ApplyT(func(v *EntityProperties) EntityProperties {
		if v != nil {
			return *v
		}
		var ret EntityProperties
		return ret
	}).(EntityPropertiesOutput)
}

// Alert configuration for this entity
func (o EntityPropertiesPtrOutput) Alerts() EntityAlertsPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *EntityAlerts {
		if v == nil {
			return nil
		}
		return v.Alerts
	}).(EntityAlertsPtrOutput)
}

// Positioning of the entity on the model canvas
func (o EntityPropertiesPtrOutput) CanvasPosition() EntityCoordinatesPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *EntityCoordinates {
		if v == nil {
			return nil
		}
		return v.CanvasPosition
	}).(EntityCoordinatesPtrOutput)
}

// Display name
func (o EntityPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Health objective as a percentage of time the entity should be healthy.
func (o EntityPropertiesPtrOutput) HealthObjective() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *EntityProperties) *float64 {
		if v == nil {
			return nil
		}
		return v.HealthObjective
	}).(pulumi.Float64PtrOutput)
}

// Visual icon definition. If not set, a default icon is used.
func (o EntityPropertiesPtrOutput) Icon() IconDefinitionPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *IconDefinition {
		if v == nil {
			return nil
		}
		return v.Icon
	}).(IconDefinitionPtrOutput)
}

// Impact of the entity in health state propagation
func (o EntityPropertiesPtrOutput) Impact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *string {
		if v == nil {
			return nil
		}
		return v.Impact
	}).(pulumi.StringPtrOutput)
}

// Entity kind
func (o EntityPropertiesPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Signal groups which are assigned to this entity
func (o EntityPropertiesPtrOutput) Signals() SignalGroupPtrOutput {
	return o.ApplyT(func(v *EntityProperties) *SignalGroup {
		if v == nil {
			return nil
		}
		return v.Signals
	}).(SignalGroupPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o EntityPropertiesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Properties which are common across all kinds of entities
type EntityPropertiesResponse struct {
	// Alert configuration for this entity
	Alerts *EntityAlertsResponse `pulumi:"alerts"`
	// Positioning of the entity on the model canvas
	CanvasPosition *EntityCoordinatesResponse `pulumi:"canvasPosition"`
	// Date when the entity was (soft-)deleted
	DeletionDate string `pulumi:"deletionDate"`
	// Discovered by which discovery rule. If set, the entity cannot be deleted manually.
	DiscoveredBy string `pulumi:"discoveredBy"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Health objective as a percentage of time the entity should be healthy.
	HealthObjective *float64 `pulumi:"healthObjective"`
	// Health state of this entity
	HealthState string `pulumi:"healthState"`
	// Visual icon definition. If not set, a default icon is used.
	Icon *IconDefinitionResponse `pulumi:"icon"`
	// Impact of the entity in health state propagation
	Impact *string `pulumi:"impact"`
	// Entity kind
	Kind *string `pulumi:"kind"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Signal groups which are assigned to this entity
	Signals *SignalGroupResponse `pulumi:"signals"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EntityPropertiesResponse
func (val *EntityPropertiesResponse) Defaults() *EntityPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Impact == nil {
		impact_ := "Standard"
		tmp.Impact = &impact_
	}
	if tmp.Kind == nil {
		kind_ := "Default"
		tmp.Kind = &kind_
	}
	tmp.Signals = tmp.Signals.Defaults()

	return &tmp
}

// Properties which are common across all kinds of entities
type EntityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EntityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPropertiesResponse)(nil)).Elem()
}

func (o EntityPropertiesResponseOutput) ToEntityPropertiesResponseOutput() EntityPropertiesResponseOutput {
	return o
}

func (o EntityPropertiesResponseOutput) ToEntityPropertiesResponseOutputWithContext(ctx context.Context) EntityPropertiesResponseOutput {
	return o
}

// Alert configuration for this entity
func (o EntityPropertiesResponseOutput) Alerts() EntityAlertsResponsePtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *EntityAlertsResponse { return v.Alerts }).(EntityAlertsResponsePtrOutput)
}

// Positioning of the entity on the model canvas
func (o EntityPropertiesResponseOutput) CanvasPosition() EntityCoordinatesResponsePtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *EntityCoordinatesResponse { return v.CanvasPosition }).(EntityCoordinatesResponsePtrOutput)
}

// Date when the entity was (soft-)deleted
func (o EntityPropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Discovered by which discovery rule. If set, the entity cannot be deleted manually.
func (o EntityPropertiesResponseOutput) DiscoveredBy() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) string { return v.DiscoveredBy }).(pulumi.StringOutput)
}

// Display name
func (o EntityPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Health objective as a percentage of time the entity should be healthy.
func (o EntityPropertiesResponseOutput) HealthObjective() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *float64 { return v.HealthObjective }).(pulumi.Float64PtrOutput)
}

// Health state of this entity
func (o EntityPropertiesResponseOutput) HealthState() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) string { return v.HealthState }).(pulumi.StringOutput)
}

// Visual icon definition. If not set, a default icon is used.
func (o EntityPropertiesResponseOutput) Icon() IconDefinitionResponsePtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *IconDefinitionResponse { return v.Icon }).(IconDefinitionResponsePtrOutput)
}

// Impact of the entity in health state propagation
func (o EntityPropertiesResponseOutput) Impact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *string { return v.Impact }).(pulumi.StringPtrOutput)
}

// Entity kind
func (o EntityPropertiesResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The status of the last operation.
func (o EntityPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Signal groups which are assigned to this entity
func (o EntityPropertiesResponseOutput) Signals() SignalGroupResponsePtrOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) *SignalGroupResponse { return v.Signals }).(SignalGroupResponsePtrOutput)
}

// Optional set of labels (key-value pairs)
func (o EntityPropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityPropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Evaluation rule for a signal definition
type EvaluationRule struct {
	// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
	DegradedRule *ThresholdRule `pulumi:"degradedRule"`
	// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
	DynamicDetectionRule *DynamicDetectionRule `pulumi:"dynamicDetectionRule"`
	// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
	UnhealthyRule *ThresholdRule `pulumi:"unhealthyRule"`
}

// EvaluationRuleInput is an input type that accepts EvaluationRuleArgs and EvaluationRuleOutput values.
// You can construct a concrete instance of `EvaluationRuleInput` via:
//
//	EvaluationRuleArgs{...}
type EvaluationRuleInput interface {
	pulumi.Input

	ToEvaluationRuleOutput() EvaluationRuleOutput
	ToEvaluationRuleOutputWithContext(context.Context) EvaluationRuleOutput
}

// Evaluation rule for a signal definition
type EvaluationRuleArgs struct {
	// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
	DegradedRule ThresholdRulePtrInput `pulumi:"degradedRule"`
	// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
	DynamicDetectionRule DynamicDetectionRulePtrInput `pulumi:"dynamicDetectionRule"`
	// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
	UnhealthyRule ThresholdRulePtrInput `pulumi:"unhealthyRule"`
}

func (EvaluationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EvaluationRule)(nil)).Elem()
}

func (i EvaluationRuleArgs) ToEvaluationRuleOutput() EvaluationRuleOutput {
	return i.ToEvaluationRuleOutputWithContext(context.Background())
}

func (i EvaluationRuleArgs) ToEvaluationRuleOutputWithContext(ctx context.Context) EvaluationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvaluationRuleOutput)
}

func (i EvaluationRuleArgs) ToEvaluationRulePtrOutput() EvaluationRulePtrOutput {
	return i.ToEvaluationRulePtrOutputWithContext(context.Background())
}

func (i EvaluationRuleArgs) ToEvaluationRulePtrOutputWithContext(ctx context.Context) EvaluationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvaluationRuleOutput).ToEvaluationRulePtrOutputWithContext(ctx)
}

// EvaluationRulePtrInput is an input type that accepts EvaluationRuleArgs, EvaluationRulePtr and EvaluationRulePtrOutput values.
// You can construct a concrete instance of `EvaluationRulePtrInput` via:
//
//	        EvaluationRuleArgs{...}
//
//	or:
//
//	        nil
type EvaluationRulePtrInput interface {
	pulumi.Input

	ToEvaluationRulePtrOutput() EvaluationRulePtrOutput
	ToEvaluationRulePtrOutputWithContext(context.Context) EvaluationRulePtrOutput
}

type evaluationRulePtrType EvaluationRuleArgs

func EvaluationRulePtr(v *EvaluationRuleArgs) EvaluationRulePtrInput {
	return (*evaluationRulePtrType)(v)
}

func (*evaluationRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EvaluationRule)(nil)).Elem()
}

func (i *evaluationRulePtrType) ToEvaluationRulePtrOutput() EvaluationRulePtrOutput {
	return i.ToEvaluationRulePtrOutputWithContext(context.Background())
}

func (i *evaluationRulePtrType) ToEvaluationRulePtrOutputWithContext(ctx context.Context) EvaluationRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EvaluationRulePtrOutput)
}

// Evaluation rule for a signal definition
type EvaluationRuleOutput struct{ *pulumi.OutputState }

func (EvaluationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvaluationRule)(nil)).Elem()
}

func (o EvaluationRuleOutput) ToEvaluationRuleOutput() EvaluationRuleOutput {
	return o
}

func (o EvaluationRuleOutput) ToEvaluationRuleOutputWithContext(ctx context.Context) EvaluationRuleOutput {
	return o
}

func (o EvaluationRuleOutput) ToEvaluationRulePtrOutput() EvaluationRulePtrOutput {
	return o.ToEvaluationRulePtrOutputWithContext(context.Background())
}

func (o EvaluationRuleOutput) ToEvaluationRulePtrOutputWithContext(ctx context.Context) EvaluationRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EvaluationRule) *EvaluationRule {
		return &v
	}).(EvaluationRulePtrOutput)
}

// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRuleOutput) DegradedRule() ThresholdRulePtrOutput {
	return o.ApplyT(func(v EvaluationRule) *ThresholdRule { return v.DegradedRule }).(ThresholdRulePtrOutput)
}

// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
func (o EvaluationRuleOutput) DynamicDetectionRule() DynamicDetectionRulePtrOutput {
	return o.ApplyT(func(v EvaluationRule) *DynamicDetectionRule { return v.DynamicDetectionRule }).(DynamicDetectionRulePtrOutput)
}

// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRuleOutput) UnhealthyRule() ThresholdRulePtrOutput {
	return o.ApplyT(func(v EvaluationRule) *ThresholdRule { return v.UnhealthyRule }).(ThresholdRulePtrOutput)
}

type EvaluationRulePtrOutput struct{ *pulumi.OutputState }

func (EvaluationRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EvaluationRule)(nil)).Elem()
}

func (o EvaluationRulePtrOutput) ToEvaluationRulePtrOutput() EvaluationRulePtrOutput {
	return o
}

func (o EvaluationRulePtrOutput) ToEvaluationRulePtrOutputWithContext(ctx context.Context) EvaluationRulePtrOutput {
	return o
}

func (o EvaluationRulePtrOutput) Elem() EvaluationRuleOutput {
	return o.ApplyT(func(v *EvaluationRule) EvaluationRule {
		if v != nil {
			return *v
		}
		var ret EvaluationRule
		return ret
	}).(EvaluationRuleOutput)
}

// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRulePtrOutput) DegradedRule() ThresholdRulePtrOutput {
	return o.ApplyT(func(v *EvaluationRule) *ThresholdRule {
		if v == nil {
			return nil
		}
		return v.DegradedRule
	}).(ThresholdRulePtrOutput)
}

// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
func (o EvaluationRulePtrOutput) DynamicDetectionRule() DynamicDetectionRulePtrOutput {
	return o.ApplyT(func(v *EvaluationRule) *DynamicDetectionRule {
		if v == nil {
			return nil
		}
		return v.DynamicDetectionRule
	}).(DynamicDetectionRulePtrOutput)
}

// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRulePtrOutput) UnhealthyRule() ThresholdRulePtrOutput {
	return o.ApplyT(func(v *EvaluationRule) *ThresholdRule {
		if v == nil {
			return nil
		}
		return v.UnhealthyRule
	}).(ThresholdRulePtrOutput)
}

// Evaluation rule for a signal definition
type EvaluationRuleResponse struct {
	// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
	DegradedRule *ThresholdRuleResponse `pulumi:"degradedRule"`
	// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
	DynamicDetectionRule *DynamicDetectionRuleResponse `pulumi:"dynamicDetectionRule"`
	// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
	UnhealthyRule *ThresholdRuleResponse `pulumi:"unhealthyRule"`
}

// Evaluation rule for a signal definition
type EvaluationRuleResponseOutput struct{ *pulumi.OutputState }

func (EvaluationRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvaluationRuleResponse)(nil)).Elem()
}

func (o EvaluationRuleResponseOutput) ToEvaluationRuleResponseOutput() EvaluationRuleResponseOutput {
	return o
}

func (o EvaluationRuleResponseOutput) ToEvaluationRuleResponseOutputWithContext(ctx context.Context) EvaluationRuleResponseOutput {
	return o
}

// Degraded rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRuleResponseOutput) DegradedRule() ThresholdRuleResponsePtrOutput {
	return o.ApplyT(func(v EvaluationRuleResponse) *ThresholdRuleResponse { return v.DegradedRule }).(ThresholdRuleResponsePtrOutput)
}

// Configure to use ML-based dynamic thresholds. When used, degradedRule and unhealthyRule must not be set.
func (o EvaluationRuleResponseOutput) DynamicDetectionRule() DynamicDetectionRuleResponsePtrOutput {
	return o.ApplyT(func(v EvaluationRuleResponse) *DynamicDetectionRuleResponse { return v.DynamicDetectionRule }).(DynamicDetectionRuleResponsePtrOutput)
}

// Unhealthy rule with static threshold. When used, dynamicDetectionRule must not be set.
func (o EvaluationRuleResponseOutput) UnhealthyRule() ThresholdRuleResponsePtrOutput {
	return o.ApplyT(func(v EvaluationRuleResponse) *ThresholdRuleResponse { return v.UnhealthyRule }).(ThresholdRuleResponsePtrOutput)
}

type EventHubDestination struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// EventHubDestinationInput is an input type that accepts EventHubDestinationArgs and EventHubDestinationOutput values.
// You can construct a concrete instance of `EventHubDestinationInput` via:
//
//	EventHubDestinationArgs{...}
type EventHubDestinationInput interface {
	pulumi.Input

	ToEventHubDestinationOutput() EventHubDestinationOutput
	ToEventHubDestinationOutputWithContext(context.Context) EventHubDestinationOutput
}

type EventHubDestinationArgs struct {
	// The resource ID of the event hub.
	EventHubResourceId pulumi.StringPtrInput `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventHubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestination)(nil)).Elem()
}

func (i EventHubDestinationArgs) ToEventHubDestinationOutput() EventHubDestinationOutput {
	return i.ToEventHubDestinationOutputWithContext(context.Background())
}

func (i EventHubDestinationArgs) ToEventHubDestinationOutputWithContext(ctx context.Context) EventHubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDestinationOutput)
}

// EventHubDestinationArrayInput is an input type that accepts EventHubDestinationArray and EventHubDestinationArrayOutput values.
// You can construct a concrete instance of `EventHubDestinationArrayInput` via:
//
//	EventHubDestinationArray{ EventHubDestinationArgs{...} }
type EventHubDestinationArrayInput interface {
	pulumi.Input

	ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput
	ToEventHubDestinationArrayOutputWithContext(context.Context) EventHubDestinationArrayOutput
}

type EventHubDestinationArray []EventHubDestinationInput

func (EventHubDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestination)(nil)).Elem()
}

func (i EventHubDestinationArray) ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput {
	return i.ToEventHubDestinationArrayOutputWithContext(context.Background())
}

func (i EventHubDestinationArray) ToEventHubDestinationArrayOutputWithContext(ctx context.Context) EventHubDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDestinationArrayOutput)
}

type EventHubDestinationOutput struct{ *pulumi.OutputState }

func (EventHubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestination)(nil)).Elem()
}

func (o EventHubDestinationOutput) ToEventHubDestinationOutput() EventHubDestinationOutput {
	return o
}

func (o EventHubDestinationOutput) ToEventHubDestinationOutputWithContext(ctx context.Context) EventHubDestinationOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDestinationOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestination) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventHubDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestination)(nil)).Elem()
}

func (o EventHubDestinationArrayOutput) ToEventHubDestinationArrayOutput() EventHubDestinationArrayOutput {
	return o
}

func (o EventHubDestinationArrayOutput) ToEventHubDestinationArrayOutputWithContext(ctx context.Context) EventHubDestinationArrayOutput {
	return o
}

func (o EventHubDestinationArrayOutput) Index(i pulumi.IntInput) EventHubDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDestination {
		return vs[0].([]EventHubDestination)[vs[1].(int)]
	}).(EventHubDestinationOutput)
}

type EventHubDestinationResponse struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

type EventHubDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDestinationResponse)(nil)).Elem()
}

func (o EventHubDestinationResponseOutput) ToEventHubDestinationResponseOutput() EventHubDestinationResponseOutput {
	return o
}

func (o EventHubDestinationResponseOutput) ToEventHubDestinationResponseOutputWithContext(ctx context.Context) EventHubDestinationResponseOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDestinationResponseOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestinationResponse) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHubDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDestinationResponse)(nil)).Elem()
}

func (o EventHubDestinationResponseArrayOutput) ToEventHubDestinationResponseArrayOutput() EventHubDestinationResponseArrayOutput {
	return o
}

func (o EventHubDestinationResponseArrayOutput) ToEventHubDestinationResponseArrayOutputWithContext(ctx context.Context) EventHubDestinationResponseArrayOutput {
	return o
}

func (o EventHubDestinationResponseArrayOutput) Index(i pulumi.IntInput) EventHubDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDestinationResponse {
		return vs[0].([]EventHubDestinationResponse)[vs[1].(int)]
	}).(EventHubDestinationResponseOutput)
}

type EventHubDirectDestination struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// EventHubDirectDestinationInput is an input type that accepts EventHubDirectDestinationArgs and EventHubDirectDestinationOutput values.
// You can construct a concrete instance of `EventHubDirectDestinationInput` via:
//
//	EventHubDirectDestinationArgs{...}
type EventHubDirectDestinationInput interface {
	pulumi.Input

	ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput
	ToEventHubDirectDestinationOutputWithContext(context.Context) EventHubDirectDestinationOutput
}

type EventHubDirectDestinationArgs struct {
	// The resource ID of the event hub.
	EventHubResourceId pulumi.StringPtrInput `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EventHubDirectDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestination)(nil)).Elem()
}

func (i EventHubDirectDestinationArgs) ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput {
	return i.ToEventHubDirectDestinationOutputWithContext(context.Background())
}

func (i EventHubDirectDestinationArgs) ToEventHubDirectDestinationOutputWithContext(ctx context.Context) EventHubDirectDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDirectDestinationOutput)
}

// EventHubDirectDestinationArrayInput is an input type that accepts EventHubDirectDestinationArray and EventHubDirectDestinationArrayOutput values.
// You can construct a concrete instance of `EventHubDirectDestinationArrayInput` via:
//
//	EventHubDirectDestinationArray{ EventHubDirectDestinationArgs{...} }
type EventHubDirectDestinationArrayInput interface {
	pulumi.Input

	ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput
	ToEventHubDirectDestinationArrayOutputWithContext(context.Context) EventHubDirectDestinationArrayOutput
}

type EventHubDirectDestinationArray []EventHubDirectDestinationInput

func (EventHubDirectDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestination)(nil)).Elem()
}

func (i EventHubDirectDestinationArray) ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput {
	return i.ToEventHubDirectDestinationArrayOutputWithContext(context.Background())
}

func (i EventHubDirectDestinationArray) ToEventHubDirectDestinationArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubDirectDestinationArrayOutput)
}

type EventHubDirectDestinationOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestination)(nil)).Elem()
}

func (o EventHubDirectDestinationOutput) ToEventHubDirectDestinationOutput() EventHubDirectDestinationOutput {
	return o
}

func (o EventHubDirectDestinationOutput) ToEventHubDirectDestinationOutputWithContext(ctx context.Context) EventHubDirectDestinationOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDirectDestinationOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestination) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDirectDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDirectDestinationArrayOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestination)(nil)).Elem()
}

func (o EventHubDirectDestinationArrayOutput) ToEventHubDirectDestinationArrayOutput() EventHubDirectDestinationArrayOutput {
	return o
}

func (o EventHubDirectDestinationArrayOutput) ToEventHubDirectDestinationArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationArrayOutput {
	return o
}

func (o EventHubDirectDestinationArrayOutput) Index(i pulumi.IntInput) EventHubDirectDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDirectDestination {
		return vs[0].([]EventHubDirectDestination)[vs[1].(int)]
	}).(EventHubDirectDestinationOutput)
}

type EventHubDirectDestinationResponse struct {
	// The resource ID of the event hub.
	EventHubResourceId *string `pulumi:"eventHubResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

type EventHubDirectDestinationResponseOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubDirectDestinationResponse)(nil)).Elem()
}

func (o EventHubDirectDestinationResponseOutput) ToEventHubDirectDestinationResponseOutput() EventHubDirectDestinationResponseOutput {
	return o
}

func (o EventHubDirectDestinationResponseOutput) ToEventHubDirectDestinationResponseOutputWithContext(ctx context.Context) EventHubDirectDestinationResponseOutput {
	return o
}

// The resource ID of the event hub.
func (o EventHubDirectDestinationResponseOutput) EventHubResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestinationResponse) *string { return v.EventHubResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o EventHubDirectDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubDirectDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type EventHubDirectDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHubDirectDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubDirectDestinationResponse)(nil)).Elem()
}

func (o EventHubDirectDestinationResponseArrayOutput) ToEventHubDirectDestinationResponseArrayOutput() EventHubDirectDestinationResponseArrayOutput {
	return o
}

func (o EventHubDirectDestinationResponseArrayOutput) ToEventHubDirectDestinationResponseArrayOutputWithContext(ctx context.Context) EventHubDirectDestinationResponseArrayOutput {
	return o
}

func (o EventHubDirectDestinationResponseArrayOutput) Index(i pulumi.IntInput) EventHubDirectDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubDirectDestinationResponse {
		return vs[0].([]EventHubDirectDestinationResponse)[vs[1].(int)]
	}).(EventHubDirectDestinationResponseOutput)
}

// An Event hub receiver.
type EventHubReceiver struct {
	// The name of the specific Event Hub queue
	EventHubName string `pulumi:"eventHubName"`
	// The Event Hub namespace
	EventHubNameSpace string `pulumi:"eventHubNameSpace"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The Id for the subscription containing this event hub
	SubscriptionId string `pulumi:"subscriptionId"`
	// The tenant Id for the subscription containing this event hub
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EventHubReceiver
func (val *EventHubReceiver) Defaults() *EventHubReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// EventHubReceiverInput is an input type that accepts EventHubReceiverArgs and EventHubReceiverOutput values.
// You can construct a concrete instance of `EventHubReceiverInput` via:
//
//	EventHubReceiverArgs{...}
type EventHubReceiverInput interface {
	pulumi.Input

	ToEventHubReceiverOutput() EventHubReceiverOutput
	ToEventHubReceiverOutputWithContext(context.Context) EventHubReceiverOutput
}

// An Event hub receiver.
type EventHubReceiverArgs struct {
	// The name of the specific Event Hub queue
	EventHubName pulumi.StringInput `pulumi:"eventHubName"`
	// The Event Hub namespace
	EventHubNameSpace pulumi.StringInput `pulumi:"eventHubNameSpace"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity pulumi.StringPtrInput `pulumi:"managedIdentity"`
	// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The Id for the subscription containing this event hub
	SubscriptionId pulumi.StringInput `pulumi:"subscriptionId"`
	// The tenant Id for the subscription containing this event hub
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EventHubReceiverArgs
func (val *EventHubReceiverArgs) Defaults() *EventHubReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EventHubReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubReceiver)(nil)).Elem()
}

func (i EventHubReceiverArgs) ToEventHubReceiverOutput() EventHubReceiverOutput {
	return i.ToEventHubReceiverOutputWithContext(context.Background())
}

func (i EventHubReceiverArgs) ToEventHubReceiverOutputWithContext(ctx context.Context) EventHubReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubReceiverOutput)
}

// EventHubReceiverArrayInput is an input type that accepts EventHubReceiverArray and EventHubReceiverArrayOutput values.
// You can construct a concrete instance of `EventHubReceiverArrayInput` via:
//
//	EventHubReceiverArray{ EventHubReceiverArgs{...} }
type EventHubReceiverArrayInput interface {
	pulumi.Input

	ToEventHubReceiverArrayOutput() EventHubReceiverArrayOutput
	ToEventHubReceiverArrayOutputWithContext(context.Context) EventHubReceiverArrayOutput
}

type EventHubReceiverArray []EventHubReceiverInput

func (EventHubReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubReceiver)(nil)).Elem()
}

func (i EventHubReceiverArray) ToEventHubReceiverArrayOutput() EventHubReceiverArrayOutput {
	return i.ToEventHubReceiverArrayOutputWithContext(context.Background())
}

func (i EventHubReceiverArray) ToEventHubReceiverArrayOutputWithContext(ctx context.Context) EventHubReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHubReceiverArrayOutput)
}

// An Event hub receiver.
type EventHubReceiverOutput struct{ *pulumi.OutputState }

func (EventHubReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubReceiver)(nil)).Elem()
}

func (o EventHubReceiverOutput) ToEventHubReceiverOutput() EventHubReceiverOutput {
	return o
}

func (o EventHubReceiverOutput) ToEventHubReceiverOutputWithContext(ctx context.Context) EventHubReceiverOutput {
	return o
}

// The name of the specific Event Hub queue
func (o EventHubReceiverOutput) EventHubName() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiver) string { return v.EventHubName }).(pulumi.StringOutput)
}

// The Event Hub namespace
func (o EventHubReceiverOutput) EventHubNameSpace() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiver) string { return v.EventHubNameSpace }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o EventHubReceiverOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubReceiver) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
func (o EventHubReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The Id for the subscription containing this event hub
func (o EventHubReceiverOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiver) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The tenant Id for the subscription containing this event hub
func (o EventHubReceiverOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubReceiver) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o EventHubReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type EventHubReceiverArrayOutput struct{ *pulumi.OutputState }

func (EventHubReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubReceiver)(nil)).Elem()
}

func (o EventHubReceiverArrayOutput) ToEventHubReceiverArrayOutput() EventHubReceiverArrayOutput {
	return o
}

func (o EventHubReceiverArrayOutput) ToEventHubReceiverArrayOutputWithContext(ctx context.Context) EventHubReceiverArrayOutput {
	return o
}

func (o EventHubReceiverArrayOutput) Index(i pulumi.IntInput) EventHubReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubReceiver {
		return vs[0].([]EventHubReceiver)[vs[1].(int)]
	}).(EventHubReceiverOutput)
}

// An Event hub receiver.
type EventHubReceiverResponse struct {
	// The name of the specific Event Hub queue
	EventHubName string `pulumi:"eventHubName"`
	// The Event Hub namespace
	EventHubNameSpace string `pulumi:"eventHubNameSpace"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The Id for the subscription containing this event hub
	SubscriptionId string `pulumi:"subscriptionId"`
	// The tenant Id for the subscription containing this event hub
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for EventHubReceiverResponse
func (val *EventHubReceiverResponse) Defaults() *EventHubReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// An Event hub receiver.
type EventHubReceiverResponseOutput struct{ *pulumi.OutputState }

func (EventHubReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHubReceiverResponse)(nil)).Elem()
}

func (o EventHubReceiverResponseOutput) ToEventHubReceiverResponseOutput() EventHubReceiverResponseOutput {
	return o
}

func (o EventHubReceiverResponseOutput) ToEventHubReceiverResponseOutputWithContext(ctx context.Context) EventHubReceiverResponseOutput {
	return o
}

// The name of the specific Event Hub queue
func (o EventHubReceiverResponseOutput) EventHubName() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) string { return v.EventHubName }).(pulumi.StringOutput)
}

// The Event Hub namespace
func (o EventHubReceiverResponseOutput) EventHubNameSpace() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) string { return v.EventHubNameSpace }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o EventHubReceiverResponseOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the Event hub receiver. Names must be unique across all receivers within an action group.
func (o EventHubReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The Id for the subscription containing this event hub
func (o EventHubReceiverResponseOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) string { return v.SubscriptionId }).(pulumi.StringOutput)
}

// The tenant Id for the subscription containing this event hub
func (o EventHubReceiverResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether to use common alert schema.
func (o EventHubReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EventHubReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type EventHubReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHubReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHubReceiverResponse)(nil)).Elem()
}

func (o EventHubReceiverResponseArrayOutput) ToEventHubReceiverResponseArrayOutput() EventHubReceiverResponseArrayOutput {
	return o
}

func (o EventHubReceiverResponseArrayOutput) ToEventHubReceiverResponseArrayOutputWithContext(ctx context.Context) EventHubReceiverResponseArrayOutput {
	return o
}

func (o EventHubReceiverResponseArrayOutput) Index(i pulumi.IntInput) EventHubReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHubReceiverResponse {
		return vs[0].([]EventHubReceiverResponse)[vs[1].(int)]
	}).(EventHubReceiverResponseOutput)
}

// Exporter Info.
type Exporter struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs *AzureMonitorWorkspaceLogsExporter `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name string `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp *TcpExporter `pulumi:"tcp"`
	// The type of exporter.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Exporter
func (val *Exporter) Defaults() *Exporter {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureMonitorWorkspaceLogs = tmp.AzureMonitorWorkspaceLogs.Defaults()

	return &tmp
}

// ExporterInput is an input type that accepts ExporterArgs and ExporterOutput values.
// You can construct a concrete instance of `ExporterInput` via:
//
//	ExporterArgs{...}
type ExporterInput interface {
	pulumi.Input

	ToExporterOutput() ExporterOutput
	ToExporterOutputWithContext(context.Context) ExporterOutput
}

// Exporter Info.
type ExporterArgs struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs AzureMonitorWorkspaceLogsExporterPtrInput `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name pulumi.StringInput `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp TcpExporterPtrInput `pulumi:"tcp"`
	// The type of exporter.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ExporterArgs
func (val *ExporterArgs) Defaults() *ExporterArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Exporter)(nil)).Elem()
}

func (i ExporterArgs) ToExporterOutput() ExporterOutput {
	return i.ToExporterOutputWithContext(context.Background())
}

func (i ExporterArgs) ToExporterOutputWithContext(ctx context.Context) ExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExporterOutput)
}

// ExporterArrayInput is an input type that accepts ExporterArray and ExporterArrayOutput values.
// You can construct a concrete instance of `ExporterArrayInput` via:
//
//	ExporterArray{ ExporterArgs{...} }
type ExporterArrayInput interface {
	pulumi.Input

	ToExporterArrayOutput() ExporterArrayOutput
	ToExporterArrayOutputWithContext(context.Context) ExporterArrayOutput
}

type ExporterArray []ExporterInput

func (ExporterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Exporter)(nil)).Elem()
}

func (i ExporterArray) ToExporterArrayOutput() ExporterArrayOutput {
	return i.ToExporterArrayOutputWithContext(context.Background())
}

func (i ExporterArray) ToExporterArrayOutputWithContext(ctx context.Context) ExporterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExporterArrayOutput)
}

// Exporter Info.
type ExporterOutput struct{ *pulumi.OutputState }

func (ExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Exporter)(nil)).Elem()
}

func (o ExporterOutput) ToExporterOutput() ExporterOutput {
	return o
}

func (o ExporterOutput) ToExporterOutputWithContext(ctx context.Context) ExporterOutput {
	return o
}

// Azure Monitor Workspace Logs specific configurations.
func (o ExporterOutput) AzureMonitorWorkspaceLogs() AzureMonitorWorkspaceLogsExporterPtrOutput {
	return o.ApplyT(func(v Exporter) *AzureMonitorWorkspaceLogsExporter { return v.AzureMonitorWorkspaceLogs }).(AzureMonitorWorkspaceLogsExporterPtrOutput)
}

// The name of exporter.
func (o ExporterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Exporter) string { return v.Name }).(pulumi.StringOutput)
}

// TCP based exporter. Used for pipelineGroup exporter.
func (o ExporterOutput) Tcp() TcpExporterPtrOutput {
	return o.ApplyT(func(v Exporter) *TcpExporter { return v.Tcp }).(TcpExporterPtrOutput)
}

// The type of exporter.
func (o ExporterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Exporter) string { return v.Type }).(pulumi.StringOutput)
}

type ExporterArrayOutput struct{ *pulumi.OutputState }

func (ExporterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Exporter)(nil)).Elem()
}

func (o ExporterArrayOutput) ToExporterArrayOutput() ExporterArrayOutput {
	return o
}

func (o ExporterArrayOutput) ToExporterArrayOutputWithContext(ctx context.Context) ExporterArrayOutput {
	return o
}

func (o ExporterArrayOutput) Index(i pulumi.IntInput) ExporterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Exporter {
		return vs[0].([]Exporter)[vs[1].(int)]
	}).(ExporterOutput)
}

// Exporter Info.
type ExporterResponse struct {
	// Azure Monitor Workspace Logs specific configurations.
	AzureMonitorWorkspaceLogs *AzureMonitorWorkspaceLogsExporterResponse `pulumi:"azureMonitorWorkspaceLogs"`
	// The name of exporter.
	Name string `pulumi:"name"`
	// TCP based exporter. Used for pipelineGroup exporter.
	Tcp *TcpExporterResponse `pulumi:"tcp"`
	// The type of exporter.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ExporterResponse
func (val *ExporterResponse) Defaults() *ExporterResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AzureMonitorWorkspaceLogs = tmp.AzureMonitorWorkspaceLogs.Defaults()

	return &tmp
}

// Exporter Info.
type ExporterResponseOutput struct{ *pulumi.OutputState }

func (ExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExporterResponse)(nil)).Elem()
}

func (o ExporterResponseOutput) ToExporterResponseOutput() ExporterResponseOutput {
	return o
}

func (o ExporterResponseOutput) ToExporterResponseOutputWithContext(ctx context.Context) ExporterResponseOutput {
	return o
}

// Azure Monitor Workspace Logs specific configurations.
func (o ExporterResponseOutput) AzureMonitorWorkspaceLogs() AzureMonitorWorkspaceLogsExporterResponsePtrOutput {
	return o.ApplyT(func(v ExporterResponse) *AzureMonitorWorkspaceLogsExporterResponse {
		return v.AzureMonitorWorkspaceLogs
	}).(AzureMonitorWorkspaceLogsExporterResponsePtrOutput)
}

// The name of exporter.
func (o ExporterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExporterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// TCP based exporter. Used for pipelineGroup exporter.
func (o ExporterResponseOutput) Tcp() TcpExporterResponsePtrOutput {
	return o.ApplyT(func(v ExporterResponse) *TcpExporterResponse { return v.Tcp }).(TcpExporterResponsePtrOutput)
}

// The type of exporter.
func (o ExporterResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExporterResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ExporterResponseArrayOutput struct{ *pulumi.OutputState }

func (ExporterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExporterResponse)(nil)).Elem()
}

func (o ExporterResponseArrayOutput) ToExporterResponseArrayOutput() ExporterResponseArrayOutput {
	return o
}

func (o ExporterResponseArrayOutput) ToExporterResponseArrayOutputWithContext(ctx context.Context) ExporterResponseArrayOutput {
	return o
}

func (o ExporterResponseArrayOutput) Index(i pulumi.IntInput) ExporterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExporterResponse {
		return vs[0].([]ExporterResponse)[vs[1].(int)]
	}).(ExporterResponseOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSource struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources []string `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// ExtensionDataSourceInput is an input type that accepts ExtensionDataSourceArgs and ExtensionDataSourceOutput values.
// You can construct a concrete instance of `ExtensionDataSourceInput` via:
//
//	ExtensionDataSourceArgs{...}
type ExtensionDataSourceInput interface {
	pulumi.Input

	ToExtensionDataSourceOutput() ExtensionDataSourceOutput
	ToExtensionDataSourceOutputWithContext(context.Context) ExtensionDataSourceOutput
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceArgs struct {
	// The name of the VM extension.
	ExtensionName pulumi.StringInput `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings pulumi.Input `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources pulumi.StringArrayInput `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (ExtensionDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return i.ToExtensionDataSourceOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArgs) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceOutput)
}

// ExtensionDataSourceArrayInput is an input type that accepts ExtensionDataSourceArray and ExtensionDataSourceArrayOutput values.
// You can construct a concrete instance of `ExtensionDataSourceArrayInput` via:
//
//	ExtensionDataSourceArray{ ExtensionDataSourceArgs{...} }
type ExtensionDataSourceArrayInput interface {
	pulumi.Input

	ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput
	ToExtensionDataSourceArrayOutputWithContext(context.Context) ExtensionDataSourceArrayOutput
}

type ExtensionDataSourceArray []ExtensionDataSourceInput

func (ExtensionDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return i.ToExtensionDataSourceArrayOutputWithContext(context.Background())
}

func (i ExtensionDataSourceArray) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionDataSourceArrayOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutput() ExtensionDataSourceOutput {
	return o
}

func (o ExtensionDataSourceOutput) ToExtensionDataSourceOutputWithContext(ctx context.Context) ExtensionDataSourceOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSource) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSource) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// The list of data sources this extension needs data from.
func (o ExtensionDataSourceOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSource) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSource)(nil)).Elem()
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutput() ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) ToExtensionDataSourceArrayOutputWithContext(ctx context.Context) ExtensionDataSourceArrayOutput {
	return o
}

func (o ExtensionDataSourceArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSource {
		return vs[0].([]ExtensionDataSource)[vs[1].(int)]
	}).(ExtensionDataSourceOutput)
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponse struct {
	// The name of the VM extension.
	ExtensionName string `pulumi:"extensionName"`
	// The extension settings. The format is specific for particular extension.
	ExtensionSettings interface{} `pulumi:"extensionSettings"`
	// The list of data sources this extension needs data from.
	InputDataSources []string `pulumi:"inputDataSources"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
// Collected from either Windows and Linux machines, depending on which extension is defined.
type ExtensionDataSourceResponseOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutput() ExtensionDataSourceResponseOutput {
	return o
}

func (o ExtensionDataSourceResponseOutput) ToExtensionDataSourceResponseOutputWithContext(ctx context.Context) ExtensionDataSourceResponseOutput {
	return o
}

// The name of the VM extension.
func (o ExtensionDataSourceResponseOutput) ExtensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) string { return v.ExtensionName }).(pulumi.StringOutput)
}

// The extension settings. The format is specific for particular extension.
func (o ExtensionDataSourceResponseOutput) ExtensionSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) interface{} { return v.ExtensionSettings }).(pulumi.AnyOutput)
}

// The list of data sources this extension needs data from.
func (o ExtensionDataSourceResponseOutput) InputDataSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) []string { return v.InputDataSources }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o ExtensionDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o ExtensionDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExtensionDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type ExtensionDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (ExtensionDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionDataSourceResponse)(nil)).Elem()
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutput() ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) ToExtensionDataSourceResponseArrayOutputWithContext(ctx context.Context) ExtensionDataSourceResponseArrayOutput {
	return o
}

func (o ExtensionDataSourceResponseArrayOutput) Index(i pulumi.IntInput) ExtensionDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionDataSourceResponse {
		return vs[0].([]ExtensionDataSourceResponse)[vs[1].(int)]
	}).(ExtensionDataSourceResponseOutput)
}

// HealthModel properties
type HealthModelProperties struct {
	// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
	Discovery *ModelDiscoverySettings `pulumi:"discovery"`
}

// HealthModelPropertiesInput is an input type that accepts HealthModelPropertiesArgs and HealthModelPropertiesOutput values.
// You can construct a concrete instance of `HealthModelPropertiesInput` via:
//
//	HealthModelPropertiesArgs{...}
type HealthModelPropertiesInput interface {
	pulumi.Input

	ToHealthModelPropertiesOutput() HealthModelPropertiesOutput
	ToHealthModelPropertiesOutputWithContext(context.Context) HealthModelPropertiesOutput
}

// HealthModel properties
type HealthModelPropertiesArgs struct {
	// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
	Discovery ModelDiscoverySettingsPtrInput `pulumi:"discovery"`
}

func (HealthModelPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthModelProperties)(nil)).Elem()
}

func (i HealthModelPropertiesArgs) ToHealthModelPropertiesOutput() HealthModelPropertiesOutput {
	return i.ToHealthModelPropertiesOutputWithContext(context.Background())
}

func (i HealthModelPropertiesArgs) ToHealthModelPropertiesOutputWithContext(ctx context.Context) HealthModelPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthModelPropertiesOutput)
}

func (i HealthModelPropertiesArgs) ToHealthModelPropertiesPtrOutput() HealthModelPropertiesPtrOutput {
	return i.ToHealthModelPropertiesPtrOutputWithContext(context.Background())
}

func (i HealthModelPropertiesArgs) ToHealthModelPropertiesPtrOutputWithContext(ctx context.Context) HealthModelPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthModelPropertiesOutput).ToHealthModelPropertiesPtrOutputWithContext(ctx)
}

// HealthModelPropertiesPtrInput is an input type that accepts HealthModelPropertiesArgs, HealthModelPropertiesPtr and HealthModelPropertiesPtrOutput values.
// You can construct a concrete instance of `HealthModelPropertiesPtrInput` via:
//
//	        HealthModelPropertiesArgs{...}
//
//	or:
//
//	        nil
type HealthModelPropertiesPtrInput interface {
	pulumi.Input

	ToHealthModelPropertiesPtrOutput() HealthModelPropertiesPtrOutput
	ToHealthModelPropertiesPtrOutputWithContext(context.Context) HealthModelPropertiesPtrOutput
}

type healthModelPropertiesPtrType HealthModelPropertiesArgs

func HealthModelPropertiesPtr(v *HealthModelPropertiesArgs) HealthModelPropertiesPtrInput {
	return (*healthModelPropertiesPtrType)(v)
}

func (*healthModelPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthModelProperties)(nil)).Elem()
}

func (i *healthModelPropertiesPtrType) ToHealthModelPropertiesPtrOutput() HealthModelPropertiesPtrOutput {
	return i.ToHealthModelPropertiesPtrOutputWithContext(context.Background())
}

func (i *healthModelPropertiesPtrType) ToHealthModelPropertiesPtrOutputWithContext(ctx context.Context) HealthModelPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthModelPropertiesPtrOutput)
}

// HealthModel properties
type HealthModelPropertiesOutput struct{ *pulumi.OutputState }

func (HealthModelPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthModelProperties)(nil)).Elem()
}

func (o HealthModelPropertiesOutput) ToHealthModelPropertiesOutput() HealthModelPropertiesOutput {
	return o
}

func (o HealthModelPropertiesOutput) ToHealthModelPropertiesOutputWithContext(ctx context.Context) HealthModelPropertiesOutput {
	return o
}

func (o HealthModelPropertiesOutput) ToHealthModelPropertiesPtrOutput() HealthModelPropertiesPtrOutput {
	return o.ToHealthModelPropertiesPtrOutputWithContext(context.Background())
}

func (o HealthModelPropertiesOutput) ToHealthModelPropertiesPtrOutputWithContext(ctx context.Context) HealthModelPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HealthModelProperties) *HealthModelProperties {
		return &v
	}).(HealthModelPropertiesPtrOutput)
}

// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
func (o HealthModelPropertiesOutput) Discovery() ModelDiscoverySettingsPtrOutput {
	return o.ApplyT(func(v HealthModelProperties) *ModelDiscoverySettings { return v.Discovery }).(ModelDiscoverySettingsPtrOutput)
}

type HealthModelPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HealthModelPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthModelProperties)(nil)).Elem()
}

func (o HealthModelPropertiesPtrOutput) ToHealthModelPropertiesPtrOutput() HealthModelPropertiesPtrOutput {
	return o
}

func (o HealthModelPropertiesPtrOutput) ToHealthModelPropertiesPtrOutputWithContext(ctx context.Context) HealthModelPropertiesPtrOutput {
	return o
}

func (o HealthModelPropertiesPtrOutput) Elem() HealthModelPropertiesOutput {
	return o.ApplyT(func(v *HealthModelProperties) HealthModelProperties {
		if v != nil {
			return *v
		}
		var ret HealthModelProperties
		return ret
	}).(HealthModelPropertiesOutput)
}

// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
func (o HealthModelPropertiesPtrOutput) Discovery() ModelDiscoverySettingsPtrOutput {
	return o.ApplyT(func(v *HealthModelProperties) *ModelDiscoverySettings {
		if v == nil {
			return nil
		}
		return v.Discovery
	}).(ModelDiscoverySettingsPtrOutput)
}

// HealthModel properties
type HealthModelPropertiesResponse struct {
	// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
	Discovery *ModelDiscoverySettingsResponse `pulumi:"discovery"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// The data plane endpoint for querying health data
	QueryEndpoint string `pulumi:"queryEndpoint"`
}

// HealthModel properties
type HealthModelPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HealthModelPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthModelPropertiesResponse)(nil)).Elem()
}

func (o HealthModelPropertiesResponseOutput) ToHealthModelPropertiesResponseOutput() HealthModelPropertiesResponseOutput {
	return o
}

func (o HealthModelPropertiesResponseOutput) ToHealthModelPropertiesResponseOutputWithContext(ctx context.Context) HealthModelPropertiesResponseOutput {
	return o
}

// Configure to automatically discover entities from a given scope, such as a Service Group. The discovered entities will be linked to the root entity of the health model.
func (o HealthModelPropertiesResponseOutput) Discovery() ModelDiscoverySettingsResponsePtrOutput {
	return o.ApplyT(func(v HealthModelPropertiesResponse) *ModelDiscoverySettingsResponse { return v.Discovery }).(ModelDiscoverySettingsResponsePtrOutput)
}

// The status of the last operation.
func (o HealthModelPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HealthModelPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The data plane endpoint for querying health data
func (o HealthModelPropertiesResponseOutput) QueryEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v HealthModelPropertiesResponse) string { return v.QueryEndpoint }).(pulumi.StringOutput)
}

// Visual icon definition of an entity
type IconDefinition struct {
	// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
	CustomData *string `pulumi:"customData"`
	// Name of the built-in icon, or 'Custom' to use customData
	IconName string `pulumi:"iconName"`
}

// IconDefinitionInput is an input type that accepts IconDefinitionArgs and IconDefinitionOutput values.
// You can construct a concrete instance of `IconDefinitionInput` via:
//
//	IconDefinitionArgs{...}
type IconDefinitionInput interface {
	pulumi.Input

	ToIconDefinitionOutput() IconDefinitionOutput
	ToIconDefinitionOutputWithContext(context.Context) IconDefinitionOutput
}

// Visual icon definition of an entity
type IconDefinitionArgs struct {
	// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
	CustomData pulumi.StringPtrInput `pulumi:"customData"`
	// Name of the built-in icon, or 'Custom' to use customData
	IconName pulumi.StringInput `pulumi:"iconName"`
}

func (IconDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IconDefinition)(nil)).Elem()
}

func (i IconDefinitionArgs) ToIconDefinitionOutput() IconDefinitionOutput {
	return i.ToIconDefinitionOutputWithContext(context.Background())
}

func (i IconDefinitionArgs) ToIconDefinitionOutputWithContext(ctx context.Context) IconDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconDefinitionOutput)
}

func (i IconDefinitionArgs) ToIconDefinitionPtrOutput() IconDefinitionPtrOutput {
	return i.ToIconDefinitionPtrOutputWithContext(context.Background())
}

func (i IconDefinitionArgs) ToIconDefinitionPtrOutputWithContext(ctx context.Context) IconDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconDefinitionOutput).ToIconDefinitionPtrOutputWithContext(ctx)
}

// IconDefinitionPtrInput is an input type that accepts IconDefinitionArgs, IconDefinitionPtr and IconDefinitionPtrOutput values.
// You can construct a concrete instance of `IconDefinitionPtrInput` via:
//
//	        IconDefinitionArgs{...}
//
//	or:
//
//	        nil
type IconDefinitionPtrInput interface {
	pulumi.Input

	ToIconDefinitionPtrOutput() IconDefinitionPtrOutput
	ToIconDefinitionPtrOutputWithContext(context.Context) IconDefinitionPtrOutput
}

type iconDefinitionPtrType IconDefinitionArgs

func IconDefinitionPtr(v *IconDefinitionArgs) IconDefinitionPtrInput {
	return (*iconDefinitionPtrType)(v)
}

func (*iconDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IconDefinition)(nil)).Elem()
}

func (i *iconDefinitionPtrType) ToIconDefinitionPtrOutput() IconDefinitionPtrOutput {
	return i.ToIconDefinitionPtrOutputWithContext(context.Background())
}

func (i *iconDefinitionPtrType) ToIconDefinitionPtrOutputWithContext(ctx context.Context) IconDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IconDefinitionPtrOutput)
}

// Visual icon definition of an entity
type IconDefinitionOutput struct{ *pulumi.OutputState }

func (IconDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IconDefinition)(nil)).Elem()
}

func (o IconDefinitionOutput) ToIconDefinitionOutput() IconDefinitionOutput {
	return o
}

func (o IconDefinitionOutput) ToIconDefinitionOutputWithContext(ctx context.Context) IconDefinitionOutput {
	return o
}

func (o IconDefinitionOutput) ToIconDefinitionPtrOutput() IconDefinitionPtrOutput {
	return o.ToIconDefinitionPtrOutputWithContext(context.Background())
}

func (o IconDefinitionOutput) ToIconDefinitionPtrOutputWithContext(ctx context.Context) IconDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IconDefinition) *IconDefinition {
		return &v
	}).(IconDefinitionPtrOutput)
}

// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
func (o IconDefinitionOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IconDefinition) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Name of the built-in icon, or 'Custom' to use customData
func (o IconDefinitionOutput) IconName() pulumi.StringOutput {
	return o.ApplyT(func(v IconDefinition) string { return v.IconName }).(pulumi.StringOutput)
}

type IconDefinitionPtrOutput struct{ *pulumi.OutputState }

func (IconDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IconDefinition)(nil)).Elem()
}

func (o IconDefinitionPtrOutput) ToIconDefinitionPtrOutput() IconDefinitionPtrOutput {
	return o
}

func (o IconDefinitionPtrOutput) ToIconDefinitionPtrOutputWithContext(ctx context.Context) IconDefinitionPtrOutput {
	return o
}

func (o IconDefinitionPtrOutput) Elem() IconDefinitionOutput {
	return o.ApplyT(func(v *IconDefinition) IconDefinition {
		if v != nil {
			return *v
		}
		var ret IconDefinition
		return ret
	}).(IconDefinitionOutput)
}

// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
func (o IconDefinitionPtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IconDefinition) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Name of the built-in icon, or 'Custom' to use customData
func (o IconDefinitionPtrOutput) IconName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IconDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.IconName
	}).(pulumi.StringPtrOutput)
}

// Visual icon definition of an entity
type IconDefinitionResponse struct {
	// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
	CustomData *string `pulumi:"customData"`
	// Name of the built-in icon, or 'Custom' to use customData
	IconName string `pulumi:"iconName"`
}

// Visual icon definition of an entity
type IconDefinitionResponseOutput struct{ *pulumi.OutputState }

func (IconDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IconDefinitionResponse)(nil)).Elem()
}

func (o IconDefinitionResponseOutput) ToIconDefinitionResponseOutput() IconDefinitionResponseOutput {
	return o
}

func (o IconDefinitionResponseOutput) ToIconDefinitionResponseOutputWithContext(ctx context.Context) IconDefinitionResponseOutput {
	return o
}

// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
func (o IconDefinitionResponseOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IconDefinitionResponse) *string { return v.CustomData }).(pulumi.StringPtrOutput)
}

// Name of the built-in icon, or 'Custom' to use customData
func (o IconDefinitionResponseOutput) IconName() pulumi.StringOutput {
	return o.ApplyT(func(v IconDefinitionResponse) string { return v.IconName }).(pulumi.StringOutput)
}

type IconDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (IconDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IconDefinitionResponse)(nil)).Elem()
}

func (o IconDefinitionResponsePtrOutput) ToIconDefinitionResponsePtrOutput() IconDefinitionResponsePtrOutput {
	return o
}

func (o IconDefinitionResponsePtrOutput) ToIconDefinitionResponsePtrOutputWithContext(ctx context.Context) IconDefinitionResponsePtrOutput {
	return o
}

func (o IconDefinitionResponsePtrOutput) Elem() IconDefinitionResponseOutput {
	return o.ApplyT(func(v *IconDefinitionResponse) IconDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret IconDefinitionResponse
		return ret
	}).(IconDefinitionResponseOutput)
}

// Custom data. Base64-encoded SVG data. If set, this overrides the built-in icon.
func (o IconDefinitionResponsePtrOutput) CustomData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IconDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CustomData
	}).(pulumi.StringPtrOutput)
}

// Name of the built-in icon, or 'Custom' to use customData
func (o IconDefinitionResponsePtrOutput) IconName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IconDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IconName
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type Identity struct {
	// Type of managed service identity.
	Type IdentityType `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// Type of managed service identity.
	Type IdentityTypeInput `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// Type of managed service identity.
func (o IdentityOutput) Type() IdentityTypeOutput {
	return o.ApplyT(func(v Identity) IdentityType { return v.Type }).(IdentityTypeOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// Type of managed service identity.
func (o IdentityPtrOutput) Type() IdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *IdentityType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(IdentityTypePtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity.
	Type string `pulumi:"type"`
	// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]UserIdentityPropertiesResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity.
func (o IdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponseOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]UserIdentityPropertiesResponse { return v.UserAssignedIdentities }).(UserIdentityPropertiesResponseMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() UserIdentityPropertiesResponseMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]UserIdentityPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserIdentityPropertiesResponseMapOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSource struct {
	// Absolute paths file location
	LogDirectories []string `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// IIS streams
	Streams []string `pulumi:"streams"`
}

// IisLogsDataSourceInput is an input type that accepts IisLogsDataSourceArgs and IisLogsDataSourceOutput values.
// You can construct a concrete instance of `IisLogsDataSourceInput` via:
//
//	IisLogsDataSourceArgs{...}
type IisLogsDataSourceInput interface {
	pulumi.Input

	ToIisLogsDataSourceOutput() IisLogsDataSourceOutput
	ToIisLogsDataSourceOutputWithContext(context.Context) IisLogsDataSourceOutput
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceArgs struct {
	// Absolute paths file location
	LogDirectories pulumi.StringArrayInput `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// IIS streams
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (IisLogsDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSource)(nil)).Elem()
}

func (i IisLogsDataSourceArgs) ToIisLogsDataSourceOutput() IisLogsDataSourceOutput {
	return i.ToIisLogsDataSourceOutputWithContext(context.Background())
}

func (i IisLogsDataSourceArgs) ToIisLogsDataSourceOutputWithContext(ctx context.Context) IisLogsDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IisLogsDataSourceOutput)
}

// IisLogsDataSourceArrayInput is an input type that accepts IisLogsDataSourceArray and IisLogsDataSourceArrayOutput values.
// You can construct a concrete instance of `IisLogsDataSourceArrayInput` via:
//
//	IisLogsDataSourceArray{ IisLogsDataSourceArgs{...} }
type IisLogsDataSourceArrayInput interface {
	pulumi.Input

	ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput
	ToIisLogsDataSourceArrayOutputWithContext(context.Context) IisLogsDataSourceArrayOutput
}

type IisLogsDataSourceArray []IisLogsDataSourceInput

func (IisLogsDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSource)(nil)).Elem()
}

func (i IisLogsDataSourceArray) ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput {
	return i.ToIisLogsDataSourceArrayOutputWithContext(context.Background())
}

func (i IisLogsDataSourceArray) ToIisLogsDataSourceArrayOutputWithContext(ctx context.Context) IisLogsDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IisLogsDataSourceArrayOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSource)(nil)).Elem()
}

func (o IisLogsDataSourceOutput) ToIisLogsDataSourceOutput() IisLogsDataSourceOutput {
	return o
}

func (o IisLogsDataSourceOutput) ToIisLogsDataSourceOutputWithContext(ctx context.Context) IisLogsDataSourceOutput {
	return o
}

// Absolute paths file location
func (o IisLogsDataSourceOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSource) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o IisLogsDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IIS streams
func (o IisLogsDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type IisLogsDataSourceArrayOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSource)(nil)).Elem()
}

func (o IisLogsDataSourceArrayOutput) ToIisLogsDataSourceArrayOutput() IisLogsDataSourceArrayOutput {
	return o
}

func (o IisLogsDataSourceArrayOutput) ToIisLogsDataSourceArrayOutputWithContext(ctx context.Context) IisLogsDataSourceArrayOutput {
	return o
}

func (o IisLogsDataSourceArrayOutput) Index(i pulumi.IntInput) IisLogsDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IisLogsDataSource {
		return vs[0].([]IisLogsDataSource)[vs[1].(int)]
	}).(IisLogsDataSourceOutput)
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceResponse struct {
	// Absolute paths file location
	LogDirectories []string `pulumi:"logDirectories"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// IIS streams
	Streams []string `pulumi:"streams"`
}

// Enables IIS logs to be collected by this data collection rule.
type IisLogsDataSourceResponseOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IisLogsDataSourceResponse)(nil)).Elem()
}

func (o IisLogsDataSourceResponseOutput) ToIisLogsDataSourceResponseOutput() IisLogsDataSourceResponseOutput {
	return o
}

func (o IisLogsDataSourceResponseOutput) ToIisLogsDataSourceResponseOutputWithContext(ctx context.Context) IisLogsDataSourceResponseOutput {
	return o
}

// Absolute paths file location
func (o IisLogsDataSourceResponseOutput) LogDirectories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) []string { return v.LogDirectories }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o IisLogsDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// IIS streams
func (o IisLogsDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IisLogsDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type IisLogsDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (IisLogsDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IisLogsDataSourceResponse)(nil)).Elem()
}

func (o IisLogsDataSourceResponseArrayOutput) ToIisLogsDataSourceResponseArrayOutput() IisLogsDataSourceResponseArrayOutput {
	return o
}

func (o IisLogsDataSourceResponseArrayOutput) ToIisLogsDataSourceResponseArrayOutputWithContext(ctx context.Context) IisLogsDataSourceResponseArrayOutput {
	return o
}

func (o IisLogsDataSourceResponseArrayOutput) Index(i pulumi.IntInput) IisLogsDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IisLogsDataSourceResponse {
		return vs[0].([]IisLogsDataSourceResponse)[vs[1].(int)]
	}).(IisLogsDataSourceResponseOutput)
}

// An Incident receiver.
type IncidentReceiver struct {
	// The incident service connection
	Connection IncidentServiceConnection `pulumi:"connection"`
	// The incident management service type
	IncidentManagementService string `pulumi:"incidentManagementService"`
	// Field mappings for the incident service
	Mappings map[string]string `pulumi:"mappings"`
	// The name of the Incident receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// IncidentReceiverInput is an input type that accepts IncidentReceiverArgs and IncidentReceiverOutput values.
// You can construct a concrete instance of `IncidentReceiverInput` via:
//
//	IncidentReceiverArgs{...}
type IncidentReceiverInput interface {
	pulumi.Input

	ToIncidentReceiverOutput() IncidentReceiverOutput
	ToIncidentReceiverOutputWithContext(context.Context) IncidentReceiverOutput
}

// An Incident receiver.
type IncidentReceiverArgs struct {
	// The incident service connection
	Connection IncidentServiceConnectionInput `pulumi:"connection"`
	// The incident management service type
	IncidentManagementService pulumi.StringInput `pulumi:"incidentManagementService"`
	// Field mappings for the incident service
	Mappings pulumi.StringMapInput `pulumi:"mappings"`
	// The name of the Incident receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IncidentReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentReceiver)(nil)).Elem()
}

func (i IncidentReceiverArgs) ToIncidentReceiverOutput() IncidentReceiverOutput {
	return i.ToIncidentReceiverOutputWithContext(context.Background())
}

func (i IncidentReceiverArgs) ToIncidentReceiverOutputWithContext(ctx context.Context) IncidentReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentReceiverOutput)
}

// IncidentReceiverArrayInput is an input type that accepts IncidentReceiverArray and IncidentReceiverArrayOutput values.
// You can construct a concrete instance of `IncidentReceiverArrayInput` via:
//
//	IncidentReceiverArray{ IncidentReceiverArgs{...} }
type IncidentReceiverArrayInput interface {
	pulumi.Input

	ToIncidentReceiverArrayOutput() IncidentReceiverArrayOutput
	ToIncidentReceiverArrayOutputWithContext(context.Context) IncidentReceiverArrayOutput
}

type IncidentReceiverArray []IncidentReceiverInput

func (IncidentReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentReceiver)(nil)).Elem()
}

func (i IncidentReceiverArray) ToIncidentReceiverArrayOutput() IncidentReceiverArrayOutput {
	return i.ToIncidentReceiverArrayOutputWithContext(context.Background())
}

func (i IncidentReceiverArray) ToIncidentReceiverArrayOutputWithContext(ctx context.Context) IncidentReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentReceiverArrayOutput)
}

// An Incident receiver.
type IncidentReceiverOutput struct{ *pulumi.OutputState }

func (IncidentReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentReceiver)(nil)).Elem()
}

func (o IncidentReceiverOutput) ToIncidentReceiverOutput() IncidentReceiverOutput {
	return o
}

func (o IncidentReceiverOutput) ToIncidentReceiverOutputWithContext(ctx context.Context) IncidentReceiverOutput {
	return o
}

// The incident service connection
func (o IncidentReceiverOutput) Connection() IncidentServiceConnectionOutput {
	return o.ApplyT(func(v IncidentReceiver) IncidentServiceConnection { return v.Connection }).(IncidentServiceConnectionOutput)
}

// The incident management service type
func (o IncidentReceiverOutput) IncidentManagementService() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentReceiver) string { return v.IncidentManagementService }).(pulumi.StringOutput)
}

// Field mappings for the incident service
func (o IncidentReceiverOutput) Mappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v IncidentReceiver) map[string]string { return v.Mappings }).(pulumi.StringMapOutput)
}

// The name of the Incident receiver. Names must be unique across all receivers within an action group.
func (o IncidentReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentReceiver) string { return v.Name }).(pulumi.StringOutput)
}

type IncidentReceiverArrayOutput struct{ *pulumi.OutputState }

func (IncidentReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentReceiver)(nil)).Elem()
}

func (o IncidentReceiverArrayOutput) ToIncidentReceiverArrayOutput() IncidentReceiverArrayOutput {
	return o
}

func (o IncidentReceiverArrayOutput) ToIncidentReceiverArrayOutputWithContext(ctx context.Context) IncidentReceiverArrayOutput {
	return o
}

func (o IncidentReceiverArrayOutput) Index(i pulumi.IntInput) IncidentReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentReceiver {
		return vs[0].([]IncidentReceiver)[vs[1].(int)]
	}).(IncidentReceiverOutput)
}

// An Incident receiver.
type IncidentReceiverResponse struct {
	// The incident service connection
	Connection IncidentServiceConnectionResponse `pulumi:"connection"`
	// The incident management service type
	IncidentManagementService string `pulumi:"incidentManagementService"`
	// Field mappings for the incident service
	Mappings map[string]string `pulumi:"mappings"`
	// The name of the Incident receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
}

// An Incident receiver.
type IncidentReceiverResponseOutput struct{ *pulumi.OutputState }

func (IncidentReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentReceiverResponse)(nil)).Elem()
}

func (o IncidentReceiverResponseOutput) ToIncidentReceiverResponseOutput() IncidentReceiverResponseOutput {
	return o
}

func (o IncidentReceiverResponseOutput) ToIncidentReceiverResponseOutputWithContext(ctx context.Context) IncidentReceiverResponseOutput {
	return o
}

// The incident service connection
func (o IncidentReceiverResponseOutput) Connection() IncidentServiceConnectionResponseOutput {
	return o.ApplyT(func(v IncidentReceiverResponse) IncidentServiceConnectionResponse { return v.Connection }).(IncidentServiceConnectionResponseOutput)
}

// The incident management service type
func (o IncidentReceiverResponseOutput) IncidentManagementService() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentReceiverResponse) string { return v.IncidentManagementService }).(pulumi.StringOutput)
}

// Field mappings for the incident service
func (o IncidentReceiverResponseOutput) Mappings() pulumi.StringMapOutput {
	return o.ApplyT(func(v IncidentReceiverResponse) map[string]string { return v.Mappings }).(pulumi.StringMapOutput)
}

// The name of the Incident receiver. Names must be unique across all receivers within an action group.
func (o IncidentReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

type IncidentReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (IncidentReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentReceiverResponse)(nil)).Elem()
}

func (o IncidentReceiverResponseArrayOutput) ToIncidentReceiverResponseArrayOutput() IncidentReceiverResponseArrayOutput {
	return o
}

func (o IncidentReceiverResponseArrayOutput) ToIncidentReceiverResponseArrayOutputWithContext(ctx context.Context) IncidentReceiverResponseArrayOutput {
	return o
}

func (o IncidentReceiverResponseArrayOutput) Index(i pulumi.IntInput) IncidentReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentReceiverResponse {
		return vs[0].([]IncidentReceiverResponse)[vs[1].(int)]
	}).(IncidentReceiverResponseOutput)
}

// The connection info for Incident Receiver.
type IncidentServiceConnection struct {
	// GUID value representing the connection ID for the incident management service.
	Id string `pulumi:"id"`
	// The name of the connection.
	Name string `pulumi:"name"`
}

// IncidentServiceConnectionInput is an input type that accepts IncidentServiceConnectionArgs and IncidentServiceConnectionOutput values.
// You can construct a concrete instance of `IncidentServiceConnectionInput` via:
//
//	IncidentServiceConnectionArgs{...}
type IncidentServiceConnectionInput interface {
	pulumi.Input

	ToIncidentServiceConnectionOutput() IncidentServiceConnectionOutput
	ToIncidentServiceConnectionOutputWithContext(context.Context) IncidentServiceConnectionOutput
}

// The connection info for Incident Receiver.
type IncidentServiceConnectionArgs struct {
	// GUID value representing the connection ID for the incident management service.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the connection.
	Name pulumi.StringInput `pulumi:"name"`
}

func (IncidentServiceConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentServiceConnection)(nil)).Elem()
}

func (i IncidentServiceConnectionArgs) ToIncidentServiceConnectionOutput() IncidentServiceConnectionOutput {
	return i.ToIncidentServiceConnectionOutputWithContext(context.Background())
}

func (i IncidentServiceConnectionArgs) ToIncidentServiceConnectionOutputWithContext(ctx context.Context) IncidentServiceConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentServiceConnectionOutput)
}

// The connection info for Incident Receiver.
type IncidentServiceConnectionOutput struct{ *pulumi.OutputState }

func (IncidentServiceConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentServiceConnection)(nil)).Elem()
}

func (o IncidentServiceConnectionOutput) ToIncidentServiceConnectionOutput() IncidentServiceConnectionOutput {
	return o
}

func (o IncidentServiceConnectionOutput) ToIncidentServiceConnectionOutputWithContext(ctx context.Context) IncidentServiceConnectionOutput {
	return o
}

// GUID value representing the connection ID for the incident management service.
func (o IncidentServiceConnectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentServiceConnection) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the connection.
func (o IncidentServiceConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentServiceConnection) string { return v.Name }).(pulumi.StringOutput)
}

// The connection info for Incident Receiver.
type IncidentServiceConnectionResponse struct {
	// GUID value representing the connection ID for the incident management service.
	Id string `pulumi:"id"`
	// The name of the connection.
	Name string `pulumi:"name"`
}

// The connection info for Incident Receiver.
type IncidentServiceConnectionResponseOutput struct{ *pulumi.OutputState }

func (IncidentServiceConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentServiceConnectionResponse)(nil)).Elem()
}

func (o IncidentServiceConnectionResponseOutput) ToIncidentServiceConnectionResponseOutput() IncidentServiceConnectionResponseOutput {
	return o
}

func (o IncidentServiceConnectionResponseOutput) ToIncidentServiceConnectionResponseOutputWithContext(ctx context.Context) IncidentServiceConnectionResponseOutput {
	return o
}

// GUID value representing the connection ID for the incident management service.
func (o IncidentServiceConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentServiceConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the connection.
func (o IncidentServiceConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentServiceConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Details about the execution of the investigation
type InvestigationExecutionResponse struct {
	// The time at which the investigation execution completed (in UTC)
	CompletedAt *string `pulumi:"completedAt"`
	// The state of the investigation execution
	RunState string `pulumi:"runState"`
}

// Details about the execution of the investigation
type InvestigationExecutionResponseOutput struct{ *pulumi.OutputState }

func (InvestigationExecutionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationExecutionResponse)(nil)).Elem()
}

func (o InvestigationExecutionResponseOutput) ToInvestigationExecutionResponseOutput() InvestigationExecutionResponseOutput {
	return o
}

func (o InvestigationExecutionResponseOutput) ToInvestigationExecutionResponseOutputWithContext(ctx context.Context) InvestigationExecutionResponseOutput {
	return o
}

// The time at which the investigation execution completed (in UTC)
func (o InvestigationExecutionResponseOutput) CompletedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationExecutionResponse) *string { return v.CompletedAt }).(pulumi.StringPtrOutput)
}

// The state of the investigation execution
func (o InvestigationExecutionResponseOutput) RunState() pulumi.StringOutput {
	return o.ApplyT(func(v InvestigationExecutionResponse) string { return v.RunState }).(pulumi.StringOutput)
}

// Properties of the current investigation
type InvestigationMetadataResponse struct {
	// The creation time of the investigation (in UTC)
	CreatedAt string `pulumi:"createdAt"`
	// The execution details of the investigation
	Execution InvestigationExecutionResponse `pulumi:"execution"`
	// The unique identifier of the investigation
	Id string `pulumi:"id"`
	// The parameters that were used to start the investigation
	RunParameters RunParametersResponse `pulumi:"runParameters"`
}

// Properties of the current investigation
type InvestigationMetadataResponseOutput struct{ *pulumi.OutputState }

func (InvestigationMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationMetadataResponse)(nil)).Elem()
}

func (o InvestigationMetadataResponseOutput) ToInvestigationMetadataResponseOutput() InvestigationMetadataResponseOutput {
	return o
}

func (o InvestigationMetadataResponseOutput) ToInvestigationMetadataResponseOutputWithContext(ctx context.Context) InvestigationMetadataResponseOutput {
	return o
}

// The creation time of the investigation (in UTC)
func (o InvestigationMetadataResponseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InvestigationMetadataResponse) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The execution details of the investigation
func (o InvestigationMetadataResponseOutput) Execution() InvestigationExecutionResponseOutput {
	return o.ApplyT(func(v InvestigationMetadataResponse) InvestigationExecutionResponse { return v.Execution }).(InvestigationExecutionResponseOutput)
}

// The unique identifier of the investigation
func (o InvestigationMetadataResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvestigationMetadataResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The parameters that were used to start the investigation
func (o InvestigationMetadataResponseOutput) RunParameters() RunParametersResponseOutput {
	return o.ApplyT(func(v InvestigationMetadataResponse) RunParametersResponse { return v.RunParameters }).(RunParametersResponseOutput)
}

type InvestigationMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (InvestigationMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationMetadataResponse)(nil)).Elem()
}

func (o InvestigationMetadataResponseArrayOutput) ToInvestigationMetadataResponseArrayOutput() InvestigationMetadataResponseArrayOutput {
	return o
}

func (o InvestigationMetadataResponseArrayOutput) ToInvestigationMetadataResponseArrayOutputWithContext(ctx context.Context) InvestigationMetadataResponseArrayOutput {
	return o
}

func (o InvestigationMetadataResponseArrayOutput) Index(i pulumi.IntInput) InvestigationMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvestigationMetadataResponse {
		return vs[0].([]InvestigationMetadataResponse)[vs[1].(int)]
	}).(InvestigationMetadataResponseOutput)
}

// A single scope of the investigation
type InvestigationScopeResponse struct {
	// The ID of the scope of the investigation - either an Azure alert ID or an Azure resource ID
	Id string `pulumi:"id"`
	// The origin of the scope
	Origin OriginResponse `pulumi:"origin"`
	// The relevance of the scope
	Relevance *string `pulumi:"relevance"`
}

// A single scope of the investigation
type InvestigationScopeResponseOutput struct{ *pulumi.OutputState }

func (InvestigationScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvestigationScopeResponse)(nil)).Elem()
}

func (o InvestigationScopeResponseOutput) ToInvestigationScopeResponseOutput() InvestigationScopeResponseOutput {
	return o
}

func (o InvestigationScopeResponseOutput) ToInvestigationScopeResponseOutputWithContext(ctx context.Context) InvestigationScopeResponseOutput {
	return o
}

// The ID of the scope of the investigation - either an Azure alert ID or an Azure resource ID
func (o InvestigationScopeResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvestigationScopeResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The origin of the scope
func (o InvestigationScopeResponseOutput) Origin() OriginResponseOutput {
	return o.ApplyT(func(v InvestigationScopeResponse) OriginResponse { return v.Origin }).(OriginResponseOutput)
}

// The relevance of the scope
func (o InvestigationScopeResponseOutput) Relevance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvestigationScopeResponse) *string { return v.Relevance }).(pulumi.StringPtrOutput)
}

type InvestigationScopeResponseArrayOutput struct{ *pulumi.OutputState }

func (InvestigationScopeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvestigationScopeResponse)(nil)).Elem()
}

func (o InvestigationScopeResponseArrayOutput) ToInvestigationScopeResponseArrayOutput() InvestigationScopeResponseArrayOutput {
	return o
}

func (o InvestigationScopeResponseArrayOutput) ToInvestigationScopeResponseArrayOutputWithContext(ctx context.Context) InvestigationScopeResponseArrayOutput {
	return o
}

func (o InvestigationScopeResponseArrayOutput) Index(i pulumi.IntInput) InvestigationScopeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvestigationScopeResponse {
		return vs[0].([]InvestigationScopeResponse)[vs[1].(int)]
	}).(InvestigationScopeResponseOutput)
}

// The issue properties
type IssueProperties struct {
	// The issue impact time (in UTC)
	ImpactTime string `pulumi:"impactTime"`
	// The issue severity
	Severity string `pulumi:"severity"`
	// The issue status
	Status string `pulumi:"status"`
	// The issue title
	Title string `pulumi:"title"`
}

// IssuePropertiesInput is an input type that accepts IssuePropertiesArgs and IssuePropertiesOutput values.
// You can construct a concrete instance of `IssuePropertiesInput` via:
//
//	IssuePropertiesArgs{...}
type IssuePropertiesInput interface {
	pulumi.Input

	ToIssuePropertiesOutput() IssuePropertiesOutput
	ToIssuePropertiesOutputWithContext(context.Context) IssuePropertiesOutput
}

// The issue properties
type IssuePropertiesArgs struct {
	// The issue impact time (in UTC)
	ImpactTime pulumi.StringInput `pulumi:"impactTime"`
	// The issue severity
	Severity pulumi.StringInput `pulumi:"severity"`
	// The issue status
	Status pulumi.StringInput `pulumi:"status"`
	// The issue title
	Title pulumi.StringInput `pulumi:"title"`
}

func (IssuePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueProperties)(nil)).Elem()
}

func (i IssuePropertiesArgs) ToIssuePropertiesOutput() IssuePropertiesOutput {
	return i.ToIssuePropertiesOutputWithContext(context.Background())
}

func (i IssuePropertiesArgs) ToIssuePropertiesOutputWithContext(ctx context.Context) IssuePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuePropertiesOutput)
}

func (i IssuePropertiesArgs) ToIssuePropertiesPtrOutput() IssuePropertiesPtrOutput {
	return i.ToIssuePropertiesPtrOutputWithContext(context.Background())
}

func (i IssuePropertiesArgs) ToIssuePropertiesPtrOutputWithContext(ctx context.Context) IssuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuePropertiesOutput).ToIssuePropertiesPtrOutputWithContext(ctx)
}

// IssuePropertiesPtrInput is an input type that accepts IssuePropertiesArgs, IssuePropertiesPtr and IssuePropertiesPtrOutput values.
// You can construct a concrete instance of `IssuePropertiesPtrInput` via:
//
//	        IssuePropertiesArgs{...}
//
//	or:
//
//	        nil
type IssuePropertiesPtrInput interface {
	pulumi.Input

	ToIssuePropertiesPtrOutput() IssuePropertiesPtrOutput
	ToIssuePropertiesPtrOutputWithContext(context.Context) IssuePropertiesPtrOutput
}

type issuePropertiesPtrType IssuePropertiesArgs

func IssuePropertiesPtr(v *IssuePropertiesArgs) IssuePropertiesPtrInput {
	return (*issuePropertiesPtrType)(v)
}

func (*issuePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueProperties)(nil)).Elem()
}

func (i *issuePropertiesPtrType) ToIssuePropertiesPtrOutput() IssuePropertiesPtrOutput {
	return i.ToIssuePropertiesPtrOutputWithContext(context.Background())
}

func (i *issuePropertiesPtrType) ToIssuePropertiesPtrOutputWithContext(ctx context.Context) IssuePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuePropertiesPtrOutput)
}

// The issue properties
type IssuePropertiesOutput struct{ *pulumi.OutputState }

func (IssuePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssueProperties)(nil)).Elem()
}

func (o IssuePropertiesOutput) ToIssuePropertiesOutput() IssuePropertiesOutput {
	return o
}

func (o IssuePropertiesOutput) ToIssuePropertiesOutputWithContext(ctx context.Context) IssuePropertiesOutput {
	return o
}

func (o IssuePropertiesOutput) ToIssuePropertiesPtrOutput() IssuePropertiesPtrOutput {
	return o.ToIssuePropertiesPtrOutputWithContext(context.Background())
}

func (o IssuePropertiesOutput) ToIssuePropertiesPtrOutputWithContext(ctx context.Context) IssuePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IssueProperties) *IssueProperties {
		return &v
	}).(IssuePropertiesPtrOutput)
}

// The issue impact time (in UTC)
func (o IssuePropertiesOutput) ImpactTime() pulumi.StringOutput {
	return o.ApplyT(func(v IssueProperties) string { return v.ImpactTime }).(pulumi.StringOutput)
}

// The issue severity
func (o IssuePropertiesOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v IssueProperties) string { return v.Severity }).(pulumi.StringOutput)
}

// The issue status
func (o IssuePropertiesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v IssueProperties) string { return v.Status }).(pulumi.StringOutput)
}

// The issue title
func (o IssuePropertiesOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IssueProperties) string { return v.Title }).(pulumi.StringOutput)
}

type IssuePropertiesPtrOutput struct{ *pulumi.OutputState }

func (IssuePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueProperties)(nil)).Elem()
}

func (o IssuePropertiesPtrOutput) ToIssuePropertiesPtrOutput() IssuePropertiesPtrOutput {
	return o
}

func (o IssuePropertiesPtrOutput) ToIssuePropertiesPtrOutputWithContext(ctx context.Context) IssuePropertiesPtrOutput {
	return o
}

func (o IssuePropertiesPtrOutput) Elem() IssuePropertiesOutput {
	return o.ApplyT(func(v *IssueProperties) IssueProperties {
		if v != nil {
			return *v
		}
		var ret IssueProperties
		return ret
	}).(IssuePropertiesOutput)
}

// The issue impact time (in UTC)
func (o IssuePropertiesPtrOutput) ImpactTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ImpactTime
	}).(pulumi.StringPtrOutput)
}

// The issue severity
func (o IssuePropertiesPtrOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Severity
	}).(pulumi.StringPtrOutput)
}

// The issue status
func (o IssuePropertiesPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The issue title
func (o IssuePropertiesPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IssueProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

// The issue properties
type IssuePropertiesResponse struct {
	// The issue impact time (in UTC)
	ImpactTime string `pulumi:"impactTime"`
	// The list of investigations in the issue
	Investigations []InvestigationMetadataResponse `pulumi:"investigations"`
	// The number of investigations in the issue
	InvestigationsCount int `pulumi:"investigationsCount"`
	// The provisioning state of the resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The issue severity
	Severity string `pulumi:"severity"`
	// The issue status
	Status string `pulumi:"status"`
	// The issue title
	Title string `pulumi:"title"`
}

// The issue properties
type IssuePropertiesResponseOutput struct{ *pulumi.OutputState }

func (IssuePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IssuePropertiesResponse)(nil)).Elem()
}

func (o IssuePropertiesResponseOutput) ToIssuePropertiesResponseOutput() IssuePropertiesResponseOutput {
	return o
}

func (o IssuePropertiesResponseOutput) ToIssuePropertiesResponseOutputWithContext(ctx context.Context) IssuePropertiesResponseOutput {
	return o
}

// The issue impact time (in UTC)
func (o IssuePropertiesResponseOutput) ImpactTime() pulumi.StringOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) string { return v.ImpactTime }).(pulumi.StringOutput)
}

// The list of investigations in the issue
func (o IssuePropertiesResponseOutput) Investigations() InvestigationMetadataResponseArrayOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) []InvestigationMetadataResponse { return v.Investigations }).(InvestigationMetadataResponseArrayOutput)
}

// The number of investigations in the issue
func (o IssuePropertiesResponseOutput) InvestigationsCount() pulumi.IntOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) int { return v.InvestigationsCount }).(pulumi.IntOutput)
}

// The provisioning state of the resource.
func (o IssuePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The issue severity
func (o IssuePropertiesResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// The issue status
func (o IssuePropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The issue title
func (o IssuePropertiesResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v IssuePropertiesResponse) string { return v.Title }).(pulumi.StringOutput)
}

// An Itsm receiver.
type ItsmReceiver struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// ItsmReceiverInput is an input type that accepts ItsmReceiverArgs and ItsmReceiverOutput values.
// You can construct a concrete instance of `ItsmReceiverInput` via:
//
//	ItsmReceiverArgs{...}
type ItsmReceiverInput interface {
	pulumi.Input

	ToItsmReceiverOutput() ItsmReceiverOutput
	ToItsmReceiverOutputWithContext(context.Context) ItsmReceiverOutput
}

// An Itsm receiver.
type ItsmReceiverArgs struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region pulumi.StringInput `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration pulumi.StringInput `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (ItsmReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArgs) ToItsmReceiverOutput() ItsmReceiverOutput {
	return i.ToItsmReceiverOutputWithContext(context.Background())
}

func (i ItsmReceiverArgs) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverOutput)
}

// ItsmReceiverArrayInput is an input type that accepts ItsmReceiverArray and ItsmReceiverArrayOutput values.
// You can construct a concrete instance of `ItsmReceiverArrayInput` via:
//
//	ItsmReceiverArray{ ItsmReceiverArgs{...} }
type ItsmReceiverArrayInput interface {
	pulumi.Input

	ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput
	ToItsmReceiverArrayOutputWithContext(context.Context) ItsmReceiverArrayOutput
}

type ItsmReceiverArray []ItsmReceiverInput

func (ItsmReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return i.ToItsmReceiverArrayOutputWithContext(context.Background())
}

func (i ItsmReceiverArray) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItsmReceiverArrayOutput)
}

// An Itsm receiver.
type ItsmReceiverOutput struct{ *pulumi.OutputState }

func (ItsmReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverOutput) ToItsmReceiverOutput() ItsmReceiverOutput {
	return o
}

func (o ItsmReceiverOutput) ToItsmReceiverOutputWithContext(ctx context.Context) ItsmReceiverOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiver) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiver)(nil)).Elem()
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutput() ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) ToItsmReceiverArrayOutputWithContext(ctx context.Context) ItsmReceiverArrayOutput {
	return o
}

func (o ItsmReceiverArrayOutput) Index(i pulumi.IntInput) ItsmReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiver {
		return vs[0].([]ItsmReceiver)[vs[1].(int)]
	}).(ItsmReceiverOutput)
}

// An Itsm receiver.
type ItsmReceiverResponse struct {
	// Unique identification of ITSM connection among multiple defined in above workspace.
	ConnectionId string `pulumi:"connectionId"`
	// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
	Region string `pulumi:"region"`
	// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
	TicketConfiguration string `pulumi:"ticketConfiguration"`
	// OMS LA instance identifier.
	WorkspaceId string `pulumi:"workspaceId"`
}

// An Itsm receiver.
type ItsmReceiverResponseOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutput() ItsmReceiverResponseOutput {
	return o
}

func (o ItsmReceiverResponseOutput) ToItsmReceiverResponseOutputWithContext(ctx context.Context) ItsmReceiverResponseOutput {
	return o
}

// Unique identification of ITSM connection among multiple defined in above workspace.
func (o ItsmReceiverResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The name of the Itsm receiver. Names must be unique across all receivers within an action group.
func (o ItsmReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Region in which workspace resides. Supported values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
func (o ItsmReceiverResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.Region }).(pulumi.StringOutput)
}

// JSON blob for the configurations of the ITSM action. CreateMultipleWorkItems option will be part of this blob as well.
func (o ItsmReceiverResponseOutput) TicketConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.TicketConfiguration }).(pulumi.StringOutput)
}

// OMS LA instance identifier.
func (o ItsmReceiverResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v ItsmReceiverResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

type ItsmReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ItsmReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ItsmReceiverResponse)(nil)).Elem()
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutput() ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) ToItsmReceiverResponseArrayOutputWithContext(ctx context.Context) ItsmReceiverResponseArrayOutput {
	return o
}

func (o ItsmReceiverResponseArrayOutput) Index(i pulumi.IntInput) ItsmReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ItsmReceiverResponse {
		return vs[0].([]ItsmReceiverResponse)[vs[1].(int)]
	}).(ItsmReceiverResponseOutput)
}

// A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field.
type JsonArrayMapper struct {
	// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
	DestinationField *JsonMapperDestinationField `pulumi:"destinationField"`
	// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
	Keys []string `pulumi:"keys"`
	// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
	SourceField *JsonMapperSourceField `pulumi:"sourceField"`
}

// Defaults sets the appropriate defaults for JsonArrayMapper
func (val *JsonArrayMapper) Defaults() *JsonArrayMapper {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DestinationField = tmp.DestinationField.Defaults()

	return &tmp
}

// JsonArrayMapperInput is an input type that accepts JsonArrayMapperArgs and JsonArrayMapperOutput values.
// You can construct a concrete instance of `JsonArrayMapperInput` via:
//
//	JsonArrayMapperArgs{...}
type JsonArrayMapperInput interface {
	pulumi.Input

	ToJsonArrayMapperOutput() JsonArrayMapperOutput
	ToJsonArrayMapperOutputWithContext(context.Context) JsonArrayMapperOutput
}

// A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field.
type JsonArrayMapperArgs struct {
	// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
	DestinationField JsonMapperDestinationFieldPtrInput `pulumi:"destinationField"`
	// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
	Keys pulumi.StringArrayInput `pulumi:"keys"`
	// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
	SourceField JsonMapperSourceFieldPtrInput `pulumi:"sourceField"`
}

// Defaults sets the appropriate defaults for JsonArrayMapperArgs
func (val *JsonArrayMapperArgs) Defaults() *JsonArrayMapperArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (JsonArrayMapperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonArrayMapper)(nil)).Elem()
}

func (i JsonArrayMapperArgs) ToJsonArrayMapperOutput() JsonArrayMapperOutput {
	return i.ToJsonArrayMapperOutputWithContext(context.Background())
}

func (i JsonArrayMapperArgs) ToJsonArrayMapperOutputWithContext(ctx context.Context) JsonArrayMapperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonArrayMapperOutput)
}

func (i JsonArrayMapperArgs) ToJsonArrayMapperPtrOutput() JsonArrayMapperPtrOutput {
	return i.ToJsonArrayMapperPtrOutputWithContext(context.Background())
}

func (i JsonArrayMapperArgs) ToJsonArrayMapperPtrOutputWithContext(ctx context.Context) JsonArrayMapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonArrayMapperOutput).ToJsonArrayMapperPtrOutputWithContext(ctx)
}

// JsonArrayMapperPtrInput is an input type that accepts JsonArrayMapperArgs, JsonArrayMapperPtr and JsonArrayMapperPtrOutput values.
// You can construct a concrete instance of `JsonArrayMapperPtrInput` via:
//
//	        JsonArrayMapperArgs{...}
//
//	or:
//
//	        nil
type JsonArrayMapperPtrInput interface {
	pulumi.Input

	ToJsonArrayMapperPtrOutput() JsonArrayMapperPtrOutput
	ToJsonArrayMapperPtrOutputWithContext(context.Context) JsonArrayMapperPtrOutput
}

type jsonArrayMapperPtrType JsonArrayMapperArgs

func JsonArrayMapperPtr(v *JsonArrayMapperArgs) JsonArrayMapperPtrInput {
	return (*jsonArrayMapperPtrType)(v)
}

func (*jsonArrayMapperPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonArrayMapper)(nil)).Elem()
}

func (i *jsonArrayMapperPtrType) ToJsonArrayMapperPtrOutput() JsonArrayMapperPtrOutput {
	return i.ToJsonArrayMapperPtrOutputWithContext(context.Background())
}

func (i *jsonArrayMapperPtrType) ToJsonArrayMapperPtrOutputWithContext(ctx context.Context) JsonArrayMapperPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonArrayMapperPtrOutput)
}

// A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field.
type JsonArrayMapperOutput struct{ *pulumi.OutputState }

func (JsonArrayMapperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonArrayMapper)(nil)).Elem()
}

func (o JsonArrayMapperOutput) ToJsonArrayMapperOutput() JsonArrayMapperOutput {
	return o
}

func (o JsonArrayMapperOutput) ToJsonArrayMapperOutputWithContext(ctx context.Context) JsonArrayMapperOutput {
	return o
}

func (o JsonArrayMapperOutput) ToJsonArrayMapperPtrOutput() JsonArrayMapperPtrOutput {
	return o.ToJsonArrayMapperPtrOutputWithContext(context.Background())
}

func (o JsonArrayMapperOutput) ToJsonArrayMapperPtrOutputWithContext(ctx context.Context) JsonArrayMapperPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonArrayMapper) *JsonArrayMapper {
		return &v
	}).(JsonArrayMapperPtrOutput)
}

// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
func (o JsonArrayMapperOutput) DestinationField() JsonMapperDestinationFieldPtrOutput {
	return o.ApplyT(func(v JsonArrayMapper) *JsonMapperDestinationField { return v.DestinationField }).(JsonMapperDestinationFieldPtrOutput)
}

// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
func (o JsonArrayMapperOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JsonArrayMapper) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
func (o JsonArrayMapperOutput) SourceField() JsonMapperSourceFieldPtrOutput {
	return o.ApplyT(func(v JsonArrayMapper) *JsonMapperSourceField { return v.SourceField }).(JsonMapperSourceFieldPtrOutput)
}

type JsonArrayMapperPtrOutput struct{ *pulumi.OutputState }

func (JsonArrayMapperPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonArrayMapper)(nil)).Elem()
}

func (o JsonArrayMapperPtrOutput) ToJsonArrayMapperPtrOutput() JsonArrayMapperPtrOutput {
	return o
}

func (o JsonArrayMapperPtrOutput) ToJsonArrayMapperPtrOutputWithContext(ctx context.Context) JsonArrayMapperPtrOutput {
	return o
}

func (o JsonArrayMapperPtrOutput) Elem() JsonArrayMapperOutput {
	return o.ApplyT(func(v *JsonArrayMapper) JsonArrayMapper {
		if v != nil {
			return *v
		}
		var ret JsonArrayMapper
		return ret
	}).(JsonArrayMapperOutput)
}

// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
func (o JsonArrayMapperPtrOutput) DestinationField() JsonMapperDestinationFieldPtrOutput {
	return o.ApplyT(func(v *JsonArrayMapper) *JsonMapperDestinationField {
		if v == nil {
			return nil
		}
		return v.DestinationField
	}).(JsonMapperDestinationFieldPtrOutput)
}

// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
func (o JsonArrayMapperPtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JsonArrayMapper) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
func (o JsonArrayMapperPtrOutput) SourceField() JsonMapperSourceFieldPtrOutput {
	return o.ApplyT(func(v *JsonArrayMapper) *JsonMapperSourceField {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(JsonMapperSourceFieldPtrOutput)
}

// A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field.
type JsonArrayMapperResponse struct {
	// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
	DestinationField *JsonMapperDestinationFieldResponse `pulumi:"destinationField"`
	// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
	Keys []string `pulumi:"keys"`
	// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
	SourceField *JsonMapperSourceFieldResponse `pulumi:"sourceField"`
}

// Defaults sets the appropriate defaults for JsonArrayMapperResponse
func (val *JsonArrayMapperResponse) Defaults() *JsonArrayMapperResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DestinationField = tmp.DestinationField.Defaults()

	return &tmp
}

// A component that allows parsing a value from sourceField as a json array, match a key to each parsed value from keys, and output the key-value map to destinationField field.
type JsonArrayMapperResponseOutput struct{ *pulumi.OutputState }

func (JsonArrayMapperResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonArrayMapperResponse)(nil)).Elem()
}

func (o JsonArrayMapperResponseOutput) ToJsonArrayMapperResponseOutput() JsonArrayMapperResponseOutput {
	return o
}

func (o JsonArrayMapperResponseOutput) ToJsonArrayMapperResponseOutputWithContext(ctx context.Context) JsonArrayMapperResponseOutput {
	return o
}

// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
func (o JsonArrayMapperResponseOutput) DestinationField() JsonMapperDestinationFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonArrayMapperResponse) *JsonMapperDestinationFieldResponse { return v.DestinationField }).(JsonMapperDestinationFieldResponsePtrOutput)
}

// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
func (o JsonArrayMapperResponseOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JsonArrayMapperResponse) []string { return v.Keys }).(pulumi.StringArrayOutput)
}

// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
func (o JsonArrayMapperResponseOutput) SourceField() JsonMapperSourceFieldResponsePtrOutput {
	return o.ApplyT(func(v JsonArrayMapperResponse) *JsonMapperSourceFieldResponse { return v.SourceField }).(JsonMapperSourceFieldResponsePtrOutput)
}

type JsonArrayMapperResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonArrayMapperResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonArrayMapperResponse)(nil)).Elem()
}

func (o JsonArrayMapperResponsePtrOutput) ToJsonArrayMapperResponsePtrOutput() JsonArrayMapperResponsePtrOutput {
	return o
}

func (o JsonArrayMapperResponsePtrOutput) ToJsonArrayMapperResponsePtrOutputWithContext(ctx context.Context) JsonArrayMapperResponsePtrOutput {
	return o
}

func (o JsonArrayMapperResponsePtrOutput) Elem() JsonArrayMapperResponseOutput {
	return o.ApplyT(func(v *JsonArrayMapperResponse) JsonArrayMapperResponse {
		if v != nil {
			return *v
		}
		var ret JsonArrayMapperResponse
		return ret
	}).(JsonArrayMapperResponseOutput)
}

// Define a destination field to which the parsed output will be written. The output is a map, it's keys is the given keys array and the matching values are the parsed json array elements.
func (o JsonArrayMapperResponsePtrOutput) DestinationField() JsonMapperDestinationFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonArrayMapperResponse) *JsonMapperDestinationFieldResponse {
		if v == nil {
			return nil
		}
		return v.DestinationField
	}).(JsonMapperDestinationFieldResponsePtrOutput)
}

// Define the names of the keys in the resulting map. The input json array elements are mapped in order, one for every key.
func (o JsonArrayMapperResponsePtrOutput) Keys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JsonArrayMapperResponse) []string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringArrayOutput)
}

// Define a source field from which a json array will be read and parsed to it's elements. The number of elements in the json array is expected to be the same as the length of keys.
func (o JsonArrayMapperResponsePtrOutput) SourceField() JsonMapperSourceFieldResponsePtrOutput {
	return o.ApplyT(func(v *JsonArrayMapperResponse) *JsonMapperSourceFieldResponse {
		if v == nil {
			return nil
		}
		return v.SourceField
	}).(JsonMapperSourceFieldResponsePtrOutput)
}

// JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
type JsonMapperDestinationField struct {
	// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
	Destination *string `pulumi:"destination"`
	// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
	FieldName *string `pulumi:"fieldName"`
}

// Defaults sets the appropriate defaults for JsonMapperDestinationField
func (val *JsonMapperDestinationField) Defaults() *JsonMapperDestinationField {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Destination == nil {
		destination_ := "attributes"
		tmp.Destination = &destination_
	}
	return &tmp
}

// JsonMapperDestinationFieldInput is an input type that accepts JsonMapperDestinationFieldArgs and JsonMapperDestinationFieldOutput values.
// You can construct a concrete instance of `JsonMapperDestinationFieldInput` via:
//
//	JsonMapperDestinationFieldArgs{...}
type JsonMapperDestinationFieldInput interface {
	pulumi.Input

	ToJsonMapperDestinationFieldOutput() JsonMapperDestinationFieldOutput
	ToJsonMapperDestinationFieldOutputWithContext(context.Context) JsonMapperDestinationFieldOutput
}

// JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
type JsonMapperDestinationFieldArgs struct {
	// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
}

// Defaults sets the appropriate defaults for JsonMapperDestinationFieldArgs
func (val *JsonMapperDestinationFieldArgs) Defaults() *JsonMapperDestinationFieldArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Destination == nil {
		tmp.Destination = pulumi.StringPtr("attributes")
	}
	return &tmp
}
func (JsonMapperDestinationFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperDestinationField)(nil)).Elem()
}

func (i JsonMapperDestinationFieldArgs) ToJsonMapperDestinationFieldOutput() JsonMapperDestinationFieldOutput {
	return i.ToJsonMapperDestinationFieldOutputWithContext(context.Background())
}

func (i JsonMapperDestinationFieldArgs) ToJsonMapperDestinationFieldOutputWithContext(ctx context.Context) JsonMapperDestinationFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperDestinationFieldOutput)
}

func (i JsonMapperDestinationFieldArgs) ToJsonMapperDestinationFieldPtrOutput() JsonMapperDestinationFieldPtrOutput {
	return i.ToJsonMapperDestinationFieldPtrOutputWithContext(context.Background())
}

func (i JsonMapperDestinationFieldArgs) ToJsonMapperDestinationFieldPtrOutputWithContext(ctx context.Context) JsonMapperDestinationFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperDestinationFieldOutput).ToJsonMapperDestinationFieldPtrOutputWithContext(ctx)
}

// JsonMapperDestinationFieldPtrInput is an input type that accepts JsonMapperDestinationFieldArgs, JsonMapperDestinationFieldPtr and JsonMapperDestinationFieldPtrOutput values.
// You can construct a concrete instance of `JsonMapperDestinationFieldPtrInput` via:
//
//	        JsonMapperDestinationFieldArgs{...}
//
//	or:
//
//	        nil
type JsonMapperDestinationFieldPtrInput interface {
	pulumi.Input

	ToJsonMapperDestinationFieldPtrOutput() JsonMapperDestinationFieldPtrOutput
	ToJsonMapperDestinationFieldPtrOutputWithContext(context.Context) JsonMapperDestinationFieldPtrOutput
}

type jsonMapperDestinationFieldPtrType JsonMapperDestinationFieldArgs

func JsonMapperDestinationFieldPtr(v *JsonMapperDestinationFieldArgs) JsonMapperDestinationFieldPtrInput {
	return (*jsonMapperDestinationFieldPtrType)(v)
}

func (*jsonMapperDestinationFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperDestinationField)(nil)).Elem()
}

func (i *jsonMapperDestinationFieldPtrType) ToJsonMapperDestinationFieldPtrOutput() JsonMapperDestinationFieldPtrOutput {
	return i.ToJsonMapperDestinationFieldPtrOutputWithContext(context.Background())
}

func (i *jsonMapperDestinationFieldPtrType) ToJsonMapperDestinationFieldPtrOutputWithContext(ctx context.Context) JsonMapperDestinationFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperDestinationFieldPtrOutput)
}

// JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
type JsonMapperDestinationFieldOutput struct{ *pulumi.OutputState }

func (JsonMapperDestinationFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperDestinationField)(nil)).Elem()
}

func (o JsonMapperDestinationFieldOutput) ToJsonMapperDestinationFieldOutput() JsonMapperDestinationFieldOutput {
	return o
}

func (o JsonMapperDestinationFieldOutput) ToJsonMapperDestinationFieldOutputWithContext(ctx context.Context) JsonMapperDestinationFieldOutput {
	return o
}

func (o JsonMapperDestinationFieldOutput) ToJsonMapperDestinationFieldPtrOutput() JsonMapperDestinationFieldPtrOutput {
	return o.ToJsonMapperDestinationFieldPtrOutputWithContext(context.Background())
}

func (o JsonMapperDestinationFieldOutput) ToJsonMapperDestinationFieldPtrOutputWithContext(ctx context.Context) JsonMapperDestinationFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonMapperDestinationField) *JsonMapperDestinationField {
		return &v
	}).(JsonMapperDestinationFieldPtrOutput)
}

// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
func (o JsonMapperDestinationFieldOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperDestinationField) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
func (o JsonMapperDestinationFieldOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperDestinationField) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

type JsonMapperDestinationFieldPtrOutput struct{ *pulumi.OutputState }

func (JsonMapperDestinationFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperDestinationField)(nil)).Elem()
}

func (o JsonMapperDestinationFieldPtrOutput) ToJsonMapperDestinationFieldPtrOutput() JsonMapperDestinationFieldPtrOutput {
	return o
}

func (o JsonMapperDestinationFieldPtrOutput) ToJsonMapperDestinationFieldPtrOutputWithContext(ctx context.Context) JsonMapperDestinationFieldPtrOutput {
	return o
}

func (o JsonMapperDestinationFieldPtrOutput) Elem() JsonMapperDestinationFieldOutput {
	return o.ApplyT(func(v *JsonMapperDestinationField) JsonMapperDestinationField {
		if v != nil {
			return *v
		}
		var ret JsonMapperDestinationField
		return ret
	}).(JsonMapperDestinationFieldOutput)
}

// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
func (o JsonMapperDestinationFieldPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperDestinationField) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
func (o JsonMapperDestinationFieldPtrOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperDestinationField) *string {
		if v == nil {
			return nil
		}
		return v.FieldName
	}).(pulumi.StringPtrOutput)
}

// JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
type JsonMapperDestinationFieldResponse struct {
	// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
	Destination *string `pulumi:"destination"`
	// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
	FieldName *string `pulumi:"fieldName"`
}

// Defaults sets the appropriate defaults for JsonMapperDestinationFieldResponse
func (val *JsonMapperDestinationFieldResponse) Defaults() *JsonMapperDestinationFieldResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Destination == nil {
		destination_ := "attributes"
		tmp.Destination = &destination_
	}
	return &tmp
}

// JsonArrayMapper destination field used to describe the field to which the parsed output will be written.
type JsonMapperDestinationFieldResponseOutput struct{ *pulumi.OutputState }

func (JsonMapperDestinationFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperDestinationFieldResponse)(nil)).Elem()
}

func (o JsonMapperDestinationFieldResponseOutput) ToJsonMapperDestinationFieldResponseOutput() JsonMapperDestinationFieldResponseOutput {
	return o
}

func (o JsonMapperDestinationFieldResponseOutput) ToJsonMapperDestinationFieldResponseOutputWithContext(ctx context.Context) JsonMapperDestinationFieldResponseOutput {
	return o
}

// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
func (o JsonMapperDestinationFieldResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperDestinationFieldResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
func (o JsonMapperDestinationFieldResponseOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperDestinationFieldResponse) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

type JsonMapperDestinationFieldResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonMapperDestinationFieldResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperDestinationFieldResponse)(nil)).Elem()
}

func (o JsonMapperDestinationFieldResponsePtrOutput) ToJsonMapperDestinationFieldResponsePtrOutput() JsonMapperDestinationFieldResponsePtrOutput {
	return o
}

func (o JsonMapperDestinationFieldResponsePtrOutput) ToJsonMapperDestinationFieldResponsePtrOutputWithContext(ctx context.Context) JsonMapperDestinationFieldResponsePtrOutput {
	return o
}

func (o JsonMapperDestinationFieldResponsePtrOutput) Elem() JsonMapperDestinationFieldResponseOutput {
	return o.ApplyT(func(v *JsonMapperDestinationFieldResponse) JsonMapperDestinationFieldResponse {
		if v != nil {
			return *v
		}
		var ret JsonMapperDestinationFieldResponse
		return ret
	}).(JsonMapperDestinationFieldResponseOutput)
}

// Define the destination's element. The element is the body or the attributes of the message, to which the json array mapper will write the output map.
func (o JsonMapperDestinationFieldResponsePtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperDestinationFieldResponse) *string {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(pulumi.StringPtrOutput)
}

// Define a destination field name under the given element. Leaving this empty, means the root of the element. In case element=attributes and fieldName is empty, the object's attributes themselves will contain the key value output pairs.
func (o JsonMapperDestinationFieldResponsePtrOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperDestinationFieldResponse) *string {
		if v == nil {
			return nil
		}
		return v.FieldName
	}).(pulumi.StringPtrOutput)
}

// JsonArrayMapper source field used to describe the field from which the json array will be read.
type JsonMapperSourceField struct {
	// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
	FieldName *string `pulumi:"fieldName"`
}

// JsonMapperSourceFieldInput is an input type that accepts JsonMapperSourceFieldArgs and JsonMapperSourceFieldOutput values.
// You can construct a concrete instance of `JsonMapperSourceFieldInput` via:
//
//	JsonMapperSourceFieldArgs{...}
type JsonMapperSourceFieldInput interface {
	pulumi.Input

	ToJsonMapperSourceFieldOutput() JsonMapperSourceFieldOutput
	ToJsonMapperSourceFieldOutputWithContext(context.Context) JsonMapperSourceFieldOutput
}

// JsonArrayMapper source field used to describe the field from which the json array will be read.
type JsonMapperSourceFieldArgs struct {
	// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
}

func (JsonMapperSourceFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperSourceField)(nil)).Elem()
}

func (i JsonMapperSourceFieldArgs) ToJsonMapperSourceFieldOutput() JsonMapperSourceFieldOutput {
	return i.ToJsonMapperSourceFieldOutputWithContext(context.Background())
}

func (i JsonMapperSourceFieldArgs) ToJsonMapperSourceFieldOutputWithContext(ctx context.Context) JsonMapperSourceFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperSourceFieldOutput)
}

func (i JsonMapperSourceFieldArgs) ToJsonMapperSourceFieldPtrOutput() JsonMapperSourceFieldPtrOutput {
	return i.ToJsonMapperSourceFieldPtrOutputWithContext(context.Background())
}

func (i JsonMapperSourceFieldArgs) ToJsonMapperSourceFieldPtrOutputWithContext(ctx context.Context) JsonMapperSourceFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperSourceFieldOutput).ToJsonMapperSourceFieldPtrOutputWithContext(ctx)
}

// JsonMapperSourceFieldPtrInput is an input type that accepts JsonMapperSourceFieldArgs, JsonMapperSourceFieldPtr and JsonMapperSourceFieldPtrOutput values.
// You can construct a concrete instance of `JsonMapperSourceFieldPtrInput` via:
//
//	        JsonMapperSourceFieldArgs{...}
//
//	or:
//
//	        nil
type JsonMapperSourceFieldPtrInput interface {
	pulumi.Input

	ToJsonMapperSourceFieldPtrOutput() JsonMapperSourceFieldPtrOutput
	ToJsonMapperSourceFieldPtrOutputWithContext(context.Context) JsonMapperSourceFieldPtrOutput
}

type jsonMapperSourceFieldPtrType JsonMapperSourceFieldArgs

func JsonMapperSourceFieldPtr(v *JsonMapperSourceFieldArgs) JsonMapperSourceFieldPtrInput {
	return (*jsonMapperSourceFieldPtrType)(v)
}

func (*jsonMapperSourceFieldPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperSourceField)(nil)).Elem()
}

func (i *jsonMapperSourceFieldPtrType) ToJsonMapperSourceFieldPtrOutput() JsonMapperSourceFieldPtrOutput {
	return i.ToJsonMapperSourceFieldPtrOutputWithContext(context.Background())
}

func (i *jsonMapperSourceFieldPtrType) ToJsonMapperSourceFieldPtrOutputWithContext(ctx context.Context) JsonMapperSourceFieldPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonMapperSourceFieldPtrOutput)
}

// JsonArrayMapper source field used to describe the field from which the json array will be read.
type JsonMapperSourceFieldOutput struct{ *pulumi.OutputState }

func (JsonMapperSourceFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperSourceField)(nil)).Elem()
}

func (o JsonMapperSourceFieldOutput) ToJsonMapperSourceFieldOutput() JsonMapperSourceFieldOutput {
	return o
}

func (o JsonMapperSourceFieldOutput) ToJsonMapperSourceFieldOutputWithContext(ctx context.Context) JsonMapperSourceFieldOutput {
	return o
}

func (o JsonMapperSourceFieldOutput) ToJsonMapperSourceFieldPtrOutput() JsonMapperSourceFieldPtrOutput {
	return o.ToJsonMapperSourceFieldPtrOutputWithContext(context.Background())
}

func (o JsonMapperSourceFieldOutput) ToJsonMapperSourceFieldPtrOutputWithContext(ctx context.Context) JsonMapperSourceFieldPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonMapperSourceField) *JsonMapperSourceField {
		return &v
	}).(JsonMapperSourceFieldPtrOutput)
}

// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
func (o JsonMapperSourceFieldOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperSourceField) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

type JsonMapperSourceFieldPtrOutput struct{ *pulumi.OutputState }

func (JsonMapperSourceFieldPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperSourceField)(nil)).Elem()
}

func (o JsonMapperSourceFieldPtrOutput) ToJsonMapperSourceFieldPtrOutput() JsonMapperSourceFieldPtrOutput {
	return o
}

func (o JsonMapperSourceFieldPtrOutput) ToJsonMapperSourceFieldPtrOutputWithContext(ctx context.Context) JsonMapperSourceFieldPtrOutput {
	return o
}

func (o JsonMapperSourceFieldPtrOutput) Elem() JsonMapperSourceFieldOutput {
	return o.ApplyT(func(v *JsonMapperSourceField) JsonMapperSourceField {
		if v != nil {
			return *v
		}
		var ret JsonMapperSourceField
		return ret
	}).(JsonMapperSourceFieldOutput)
}

// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
func (o JsonMapperSourceFieldPtrOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperSourceField) *string {
		if v == nil {
			return nil
		}
		return v.FieldName
	}).(pulumi.StringPtrOutput)
}

// JsonArrayMapper source field used to describe the field from which the json array will be read.
type JsonMapperSourceFieldResponse struct {
	// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
	FieldName *string `pulumi:"fieldName"`
}

// JsonArrayMapper source field used to describe the field from which the json array will be read.
type JsonMapperSourceFieldResponseOutput struct{ *pulumi.OutputState }

func (JsonMapperSourceFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonMapperSourceFieldResponse)(nil)).Elem()
}

func (o JsonMapperSourceFieldResponseOutput) ToJsonMapperSourceFieldResponseOutput() JsonMapperSourceFieldResponseOutput {
	return o
}

func (o JsonMapperSourceFieldResponseOutput) ToJsonMapperSourceFieldResponseOutputWithContext(ctx context.Context) JsonMapperSourceFieldResponseOutput {
	return o
}

// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
func (o JsonMapperSourceFieldResponseOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonMapperSourceFieldResponse) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

type JsonMapperSourceFieldResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonMapperSourceFieldResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonMapperSourceFieldResponse)(nil)).Elem()
}

func (o JsonMapperSourceFieldResponsePtrOutput) ToJsonMapperSourceFieldResponsePtrOutput() JsonMapperSourceFieldResponsePtrOutput {
	return o
}

func (o JsonMapperSourceFieldResponsePtrOutput) ToJsonMapperSourceFieldResponsePtrOutputWithContext(ctx context.Context) JsonMapperSourceFieldResponsePtrOutput {
	return o
}

func (o JsonMapperSourceFieldResponsePtrOutput) Elem() JsonMapperSourceFieldResponseOutput {
	return o.ApplyT(func(v *JsonMapperSourceFieldResponse) JsonMapperSourceFieldResponse {
		if v != nil {
			return *v
		}
		var ret JsonMapperSourceFieldResponse
		return ret
	}).(JsonMapperSourceFieldResponseOutput)
}

// Define a source field name from which the json array mapper will read the json array. Leaving this empty, means reading the body of the message itself.
func (o JsonMapperSourceFieldResponsePtrOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonMapperSourceFieldResponse) *string {
		if v == nil {
			return nil
		}
		return v.FieldName
	}).(pulumi.StringPtrOutput)
}

type LocationSpecResponse struct {
	// Name of location.
	Location *string `pulumi:"location"`
	// The resource provisioning state in this location.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
}

type LocationSpecResponseOutput struct{ *pulumi.OutputState }

func (LocationSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationSpecResponse)(nil)).Elem()
}

func (o LocationSpecResponseOutput) ToLocationSpecResponseOutput() LocationSpecResponseOutput {
	return o
}

func (o LocationSpecResponseOutput) ToLocationSpecResponseOutputWithContext(ctx context.Context) LocationSpecResponseOutput {
	return o
}

// Name of location.
func (o LocationSpecResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationSpecResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The resource provisioning state in this location.
func (o LocationSpecResponseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationSpecResponse) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

type LocationSpecResponseArrayOutput struct{ *pulumi.OutputState }

func (LocationSpecResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LocationSpecResponse)(nil)).Elem()
}

func (o LocationSpecResponseArrayOutput) ToLocationSpecResponseArrayOutput() LocationSpecResponseArrayOutput {
	return o
}

func (o LocationSpecResponseArrayOutput) ToLocationSpecResponseArrayOutputWithContext(ctx context.Context) LocationSpecResponseArrayOutput {
	return o
}

func (o LocationSpecResponseArrayOutput) Index(i pulumi.IntInput) LocationSpecResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LocationSpecResponse {
		return vs[0].([]LocationSpecResponse)[vs[1].(int)]
	}).(LocationSpecResponseOutput)
}

// Log Analytics destination.
type LogAnalyticsDestination struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// LogAnalyticsDestinationInput is an input type that accepts LogAnalyticsDestinationArgs and LogAnalyticsDestinationOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationInput` via:
//
//	LogAnalyticsDestinationArgs{...}
type LogAnalyticsDestinationInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput
	ToLogAnalyticsDestinationOutputWithContext(context.Context) LogAnalyticsDestinationOutput
}

// Log Analytics destination.
type LogAnalyticsDestinationArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId pulumi.StringPtrInput `pulumi:"workspaceResourceId"`
}

func (LogAnalyticsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return i.ToLogAnalyticsDestinationOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArgs) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationOutput)
}

// LogAnalyticsDestinationArrayInput is an input type that accepts LogAnalyticsDestinationArray and LogAnalyticsDestinationArrayOutput values.
// You can construct a concrete instance of `LogAnalyticsDestinationArrayInput` via:
//
//	LogAnalyticsDestinationArray{ LogAnalyticsDestinationArgs{...} }
type LogAnalyticsDestinationArrayInput interface {
	pulumi.Input

	ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput
	ToLogAnalyticsDestinationArrayOutputWithContext(context.Context) LogAnalyticsDestinationArrayOutput
}

type LogAnalyticsDestinationArray []LogAnalyticsDestinationInput

func (LogAnalyticsDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return i.ToLogAnalyticsDestinationArrayOutputWithContext(context.Background())
}

func (i LogAnalyticsDestinationArray) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsDestinationArrayOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutput() LogAnalyticsDestinationOutput {
	return o
}

func (o LogAnalyticsDestinationOutput) ToLogAnalyticsDestinationOutputWithContext(ctx context.Context) LogAnalyticsDestinationOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestination) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsDestinationArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestination)(nil)).Elem()
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutput() LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) ToLogAnalyticsDestinationArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationArrayOutput {
	return o
}

func (o LogAnalyticsDestinationArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestination {
		return vs[0].([]LogAnalyticsDestination)[vs[1].(int)]
	}).(LogAnalyticsDestinationOutput)
}

// Log Analytics destination.
type LogAnalyticsDestinationResponse struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The Customer ID of the Log Analytics workspace.
	WorkspaceId string `pulumi:"workspaceId"`
	// The resource ID of the Log Analytics workspace.
	WorkspaceResourceId *string `pulumi:"workspaceResourceId"`
}

// Log Analytics destination.
type LogAnalyticsDestinationResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutput() LogAnalyticsDestinationResponseOutput {
	return o
}

func (o LogAnalyticsDestinationResponseOutput) ToLogAnalyticsDestinationResponseOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o LogAnalyticsDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Customer ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationResponseOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

// The resource ID of the Log Analytics workspace.
func (o LogAnalyticsDestinationResponseOutput) WorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsDestinationResponse) *string { return v.WorkspaceResourceId }).(pulumi.StringPtrOutput)
}

type LogAnalyticsDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsDestinationResponse)(nil)).Elem()
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutput() LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) ToLogAnalyticsDestinationResponseArrayOutputWithContext(ctx context.Context) LogAnalyticsDestinationResponseArrayOutput {
	return o
}

func (o LogAnalyticsDestinationResponseArrayOutput) Index(i pulumi.IntInput) LogAnalyticsDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsDestinationResponse {
		return vs[0].([]LogAnalyticsDestinationResponse)[vs[1].(int)]
	}).(LogAnalyticsDestinationResponseOutput)
}

// Log Analytics Query Signal Definition properties
type LogAnalyticsQuerySignalDefinitionProperties struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRule `pulumi:"evaluationRules"`
	// Query text in KQL syntax
	QueryText string `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'LogAnalyticsQuery'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
	TimeGrain *string `pulumi:"timeGrain"`
	// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
	ValueColumnName *string `pulumi:"valueColumnName"`
}

// Defaults sets the appropriate defaults for LogAnalyticsQuerySignalDefinitionProperties
func (val *LogAnalyticsQuerySignalDefinitionProperties) Defaults() *LogAnalyticsQuerySignalDefinitionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// LogAnalyticsQuerySignalDefinitionPropertiesInput is an input type that accepts LogAnalyticsQuerySignalDefinitionPropertiesArgs and LogAnalyticsQuerySignalDefinitionPropertiesOutput values.
// You can construct a concrete instance of `LogAnalyticsQuerySignalDefinitionPropertiesInput` via:
//
//	LogAnalyticsQuerySignalDefinitionPropertiesArgs{...}
type LogAnalyticsQuerySignalDefinitionPropertiesInput interface {
	pulumi.Input

	ToLogAnalyticsQuerySignalDefinitionPropertiesOutput() LogAnalyticsQuerySignalDefinitionPropertiesOutput
	ToLogAnalyticsQuerySignalDefinitionPropertiesOutputWithContext(context.Context) LogAnalyticsQuerySignalDefinitionPropertiesOutput
}

// Log Analytics Query Signal Definition properties
type LogAnalyticsQuerySignalDefinitionPropertiesArgs struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit pulumi.StringPtrInput `pulumi:"dataUnit"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleInput `pulumi:"evaluationRules"`
	// Query text in KQL syntax
	QueryText pulumi.StringInput `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval pulumi.StringPtrInput `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'LogAnalyticsQuery'.
	SignalKind pulumi.StringInput `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
	TimeGrain pulumi.StringPtrInput `pulumi:"timeGrain"`
	// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
	ValueColumnName pulumi.StringPtrInput `pulumi:"valueColumnName"`
}

// Defaults sets the appropriate defaults for LogAnalyticsQuerySignalDefinitionPropertiesArgs
func (val *LogAnalyticsQuerySignalDefinitionPropertiesArgs) Defaults() *LogAnalyticsQuerySignalDefinitionPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		tmp.RefreshInterval = pulumi.StringPtr("PT1M")
	}
	return &tmp
}
func (LogAnalyticsQuerySignalDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsQuerySignalDefinitionProperties)(nil)).Elem()
}

func (i LogAnalyticsQuerySignalDefinitionPropertiesArgs) ToLogAnalyticsQuerySignalDefinitionPropertiesOutput() LogAnalyticsQuerySignalDefinitionPropertiesOutput {
	return i.ToLogAnalyticsQuerySignalDefinitionPropertiesOutputWithContext(context.Background())
}

func (i LogAnalyticsQuerySignalDefinitionPropertiesArgs) ToLogAnalyticsQuerySignalDefinitionPropertiesOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsQuerySignalDefinitionPropertiesOutput)
}

func (i LogAnalyticsQuerySignalDefinitionPropertiesArgs) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutput() LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return i.ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsQuerySignalDefinitionPropertiesArgs) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsQuerySignalDefinitionPropertiesOutput).ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(ctx)
}

// LogAnalyticsQuerySignalDefinitionPropertiesPtrInput is an input type that accepts LogAnalyticsQuerySignalDefinitionPropertiesArgs, LogAnalyticsQuerySignalDefinitionPropertiesPtr and LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsQuerySignalDefinitionPropertiesPtrInput` via:
//
//	        LogAnalyticsQuerySignalDefinitionPropertiesArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsQuerySignalDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutput() LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput
	ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(context.Context) LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput
}

type logAnalyticsQuerySignalDefinitionPropertiesPtrType LogAnalyticsQuerySignalDefinitionPropertiesArgs

func LogAnalyticsQuerySignalDefinitionPropertiesPtr(v *LogAnalyticsQuerySignalDefinitionPropertiesArgs) LogAnalyticsQuerySignalDefinitionPropertiesPtrInput {
	return (*logAnalyticsQuerySignalDefinitionPropertiesPtrType)(v)
}

func (*logAnalyticsQuerySignalDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsQuerySignalDefinitionProperties)(nil)).Elem()
}

func (i *logAnalyticsQuerySignalDefinitionPropertiesPtrType) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutput() LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return i.ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsQuerySignalDefinitionPropertiesPtrType) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput)
}

// Log Analytics Query Signal Definition properties
type LogAnalyticsQuerySignalDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (LogAnalyticsQuerySignalDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsQuerySignalDefinitionProperties)(nil)).Elem()
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesOutput() LogAnalyticsQuerySignalDefinitionPropertiesOutput {
	return o
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesOutput {
	return o
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutput() LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return o.ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalyticsQuerySignalDefinitionProperties) *LogAnalyticsQuerySignalDefinitionProperties {
		return &v
	}).(LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Display name
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) EvaluationRules() EvaluationRuleOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) EvaluationRule { return v.EvaluationRules }).(EvaluationRuleOutput)
}

// Query text in KQL syntax
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) QueryText() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) string { return v.QueryText }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'LogAnalyticsQuery'.
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
func (o LogAnalyticsQuerySignalDefinitionPropertiesOutput) ValueColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionProperties) *string { return v.ValueColumnName }).(pulumi.StringPtrOutput)
}

type LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsQuerySignalDefinitionProperties)(nil)).Elem()
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutput() LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return o
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput {
	return o
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) Elem() LogAnalyticsQuerySignalDefinitionPropertiesOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) LogAnalyticsQuerySignalDefinitionProperties {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsQuerySignalDefinitionProperties
		return ret
	}).(LogAnalyticsQuerySignalDefinitionPropertiesOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataUnit
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) EvaluationRules() EvaluationRulePtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *EvaluationRule {
		if v == nil {
			return nil
		}
		return &v.EvaluationRules
	}).(EvaluationRulePtrOutput)
}

// Query text in KQL syntax
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) QueryText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.QueryText
	}).(pulumi.StringPtrOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RefreshInterval
	}).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'LogAnalyticsQuery'.
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) SignalKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.SignalKind
	}).(pulumi.StringPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
func (o LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput) ValueColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsQuerySignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ValueColumnName
	}).(pulumi.StringPtrOutput)
}

// Log Analytics Query Signal Definition properties
type LogAnalyticsQuerySignalDefinitionPropertiesResponse struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Date when the signal definition was (soft-)deleted
	DeletionDate string `pulumi:"deletionDate"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleResponse `pulumi:"evaluationRules"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Query text in KQL syntax
	QueryText string `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'LogAnalyticsQuery'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
	TimeGrain *string `pulumi:"timeGrain"`
	// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
	ValueColumnName *string `pulumi:"valueColumnName"`
}

// Defaults sets the appropriate defaults for LogAnalyticsQuerySignalDefinitionPropertiesResponse
func (val *LogAnalyticsQuerySignalDefinitionPropertiesResponse) Defaults() *LogAnalyticsQuerySignalDefinitionPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// Log Analytics Query Signal Definition properties
type LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsQuerySignalDefinitionPropertiesResponse)(nil)).Elem()
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesResponseOutput() LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput {
	return o
}

func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) ToLogAnalyticsQuerySignalDefinitionPropertiesResponseOutputWithContext(ctx context.Context) LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput {
	return o
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Date when the signal definition was (soft-)deleted
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Display name
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) EvaluationRules() EvaluationRuleResponseOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) EvaluationRuleResponse {
		return v.EvaluationRules
	}).(EvaluationRuleResponseOutput)
}

// The status of the last operation.
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Query text in KQL syntax
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) QueryText() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) string { return v.QueryText }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'LogAnalyticsQuery'.
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M. If not specified, the KQL query must define a time range.
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

// Name of the column in the result set to evaluate against the thresholds. Defaults to the first column in the result set if not specified. The column must be numeric.
func (o LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput) ValueColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogAnalyticsQuerySignalDefinitionPropertiesResponse) *string { return v.ValueColumnName }).(pulumi.StringPtrOutput)
}

// A grouping of signal assignments for a Log Analytics Workspace
type LogAnalyticsSignalGroup struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Log Analytics Workspace resource ID
	LogAnalyticsWorkspaceResourceId string `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignment `pulumi:"signalAssignments"`
}

// LogAnalyticsSignalGroupInput is an input type that accepts LogAnalyticsSignalGroupArgs and LogAnalyticsSignalGroupOutput values.
// You can construct a concrete instance of `LogAnalyticsSignalGroupInput` via:
//
//	LogAnalyticsSignalGroupArgs{...}
type LogAnalyticsSignalGroupInput interface {
	pulumi.Input

	ToLogAnalyticsSignalGroupOutput() LogAnalyticsSignalGroupOutput
	ToLogAnalyticsSignalGroupOutputWithContext(context.Context) LogAnalyticsSignalGroupOutput
}

// A grouping of signal assignments for a Log Analytics Workspace
type LogAnalyticsSignalGroupArgs struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting pulumi.StringInput `pulumi:"authenticationSetting"`
	// Log Analytics Workspace resource ID
	LogAnalyticsWorkspaceResourceId pulumi.StringInput `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments SignalAssignmentArrayInput `pulumi:"signalAssignments"`
}

func (LogAnalyticsSignalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsSignalGroup)(nil)).Elem()
}

func (i LogAnalyticsSignalGroupArgs) ToLogAnalyticsSignalGroupOutput() LogAnalyticsSignalGroupOutput {
	return i.ToLogAnalyticsSignalGroupOutputWithContext(context.Background())
}

func (i LogAnalyticsSignalGroupArgs) ToLogAnalyticsSignalGroupOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsSignalGroupOutput)
}

func (i LogAnalyticsSignalGroupArgs) ToLogAnalyticsSignalGroupPtrOutput() LogAnalyticsSignalGroupPtrOutput {
	return i.ToLogAnalyticsSignalGroupPtrOutputWithContext(context.Background())
}

func (i LogAnalyticsSignalGroupArgs) ToLogAnalyticsSignalGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsSignalGroupOutput).ToLogAnalyticsSignalGroupPtrOutputWithContext(ctx)
}

// LogAnalyticsSignalGroupPtrInput is an input type that accepts LogAnalyticsSignalGroupArgs, LogAnalyticsSignalGroupPtr and LogAnalyticsSignalGroupPtrOutput values.
// You can construct a concrete instance of `LogAnalyticsSignalGroupPtrInput` via:
//
//	        LogAnalyticsSignalGroupArgs{...}
//
//	or:
//
//	        nil
type LogAnalyticsSignalGroupPtrInput interface {
	pulumi.Input

	ToLogAnalyticsSignalGroupPtrOutput() LogAnalyticsSignalGroupPtrOutput
	ToLogAnalyticsSignalGroupPtrOutputWithContext(context.Context) LogAnalyticsSignalGroupPtrOutput
}

type logAnalyticsSignalGroupPtrType LogAnalyticsSignalGroupArgs

func LogAnalyticsSignalGroupPtr(v *LogAnalyticsSignalGroupArgs) LogAnalyticsSignalGroupPtrInput {
	return (*logAnalyticsSignalGroupPtrType)(v)
}

func (*logAnalyticsSignalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsSignalGroup)(nil)).Elem()
}

func (i *logAnalyticsSignalGroupPtrType) ToLogAnalyticsSignalGroupPtrOutput() LogAnalyticsSignalGroupPtrOutput {
	return i.ToLogAnalyticsSignalGroupPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsSignalGroupPtrType) ToLogAnalyticsSignalGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsSignalGroupPtrOutput)
}

// A grouping of signal assignments for a Log Analytics Workspace
type LogAnalyticsSignalGroupOutput struct{ *pulumi.OutputState }

func (LogAnalyticsSignalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsSignalGroup)(nil)).Elem()
}

func (o LogAnalyticsSignalGroupOutput) ToLogAnalyticsSignalGroupOutput() LogAnalyticsSignalGroupOutput {
	return o
}

func (o LogAnalyticsSignalGroupOutput) ToLogAnalyticsSignalGroupOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupOutput {
	return o
}

func (o LogAnalyticsSignalGroupOutput) ToLogAnalyticsSignalGroupPtrOutput() LogAnalyticsSignalGroupPtrOutput {
	return o.ToLogAnalyticsSignalGroupPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsSignalGroupOutput) ToLogAnalyticsSignalGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogAnalyticsSignalGroup) *LogAnalyticsSignalGroup {
		return &v
	}).(LogAnalyticsSignalGroupPtrOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o LogAnalyticsSignalGroupOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroup) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Log Analytics Workspace resource ID
func (o LogAnalyticsSignalGroupOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroup) string { return v.LogAnalyticsWorkspaceResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o LogAnalyticsSignalGroupOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroup) []SignalAssignment { return v.SignalAssignments }).(SignalAssignmentArrayOutput)
}

type LogAnalyticsSignalGroupPtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsSignalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsSignalGroup)(nil)).Elem()
}

func (o LogAnalyticsSignalGroupPtrOutput) ToLogAnalyticsSignalGroupPtrOutput() LogAnalyticsSignalGroupPtrOutput {
	return o
}

func (o LogAnalyticsSignalGroupPtrOutput) ToLogAnalyticsSignalGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupPtrOutput {
	return o
}

func (o LogAnalyticsSignalGroupPtrOutput) Elem() LogAnalyticsSignalGroupOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroup) LogAnalyticsSignalGroup {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsSignalGroup
		return ret
	}).(LogAnalyticsSignalGroupOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o LogAnalyticsSignalGroupPtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Log Analytics Workspace resource ID
func (o LogAnalyticsSignalGroupPtrOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroup) *string {
		if v == nil {
			return nil
		}
		return &v.LogAnalyticsWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o LogAnalyticsSignalGroupPtrOutput) SignalAssignments() SignalAssignmentArrayOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroup) []SignalAssignment {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentArrayOutput)
}

// A grouping of signal assignments for a Log Analytics Workspace
type LogAnalyticsSignalGroupResponse struct {
	// Reference to the name of the authentication setting which is used for querying the data source
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Log Analytics Workspace resource ID
	LogAnalyticsWorkspaceResourceId string `pulumi:"logAnalyticsWorkspaceResourceId"`
	// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
	SignalAssignments []SignalAssignmentResponse `pulumi:"signalAssignments"`
}

// A grouping of signal assignments for a Log Analytics Workspace
type LogAnalyticsSignalGroupResponseOutput struct{ *pulumi.OutputState }

func (LogAnalyticsSignalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsSignalGroupResponse)(nil)).Elem()
}

func (o LogAnalyticsSignalGroupResponseOutput) ToLogAnalyticsSignalGroupResponseOutput() LogAnalyticsSignalGroupResponseOutput {
	return o
}

func (o LogAnalyticsSignalGroupResponseOutput) ToLogAnalyticsSignalGroupResponseOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupResponseOutput {
	return o
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o LogAnalyticsSignalGroupResponseOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroupResponse) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Log Analytics Workspace resource ID
func (o LogAnalyticsSignalGroupResponseOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroupResponse) string { return v.LogAnalyticsWorkspaceResourceId }).(pulumi.StringOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o LogAnalyticsSignalGroupResponseOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v LogAnalyticsSignalGroupResponse) []SignalAssignmentResponse { return v.SignalAssignments }).(SignalAssignmentResponseArrayOutput)
}

type LogAnalyticsSignalGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (LogAnalyticsSignalGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsSignalGroupResponse)(nil)).Elem()
}

func (o LogAnalyticsSignalGroupResponsePtrOutput) ToLogAnalyticsSignalGroupResponsePtrOutput() LogAnalyticsSignalGroupResponsePtrOutput {
	return o
}

func (o LogAnalyticsSignalGroupResponsePtrOutput) ToLogAnalyticsSignalGroupResponsePtrOutputWithContext(ctx context.Context) LogAnalyticsSignalGroupResponsePtrOutput {
	return o
}

func (o LogAnalyticsSignalGroupResponsePtrOutput) Elem() LogAnalyticsSignalGroupResponseOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroupResponse) LogAnalyticsSignalGroupResponse {
		if v != nil {
			return *v
		}
		var ret LogAnalyticsSignalGroupResponse
		return ret
	}).(LogAnalyticsSignalGroupResponseOutput)
}

// Reference to the name of the authentication setting which is used for querying the data source
func (o LogAnalyticsSignalGroupResponsePtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Log Analytics Workspace resource ID
func (o LogAnalyticsSignalGroupResponsePtrOutput) LogAnalyticsWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroupResponse) *string {
		if v == nil {
			return nil
		}
		return &v.LogAnalyticsWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// Signal definitions which are assigned to this signal group. All assignments are combined with an OR operator.
func (o LogAnalyticsSignalGroupResponsePtrOutput) SignalAssignments() SignalAssignmentResponseArrayOutput {
	return o.ApplyT(func(v *LogAnalyticsSignalGroupResponse) []SignalAssignmentResponse {
		if v == nil {
			return nil
		}
		return v.SignalAssignments
	}).(SignalAssignmentResponseArrayOutput)
}

// Text settings
type LogFileSettingsResponseText struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// Text settings
type LogFileSettingsResponseTextOutput struct{ *pulumi.OutputState }

func (LogFileSettingsResponseTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsResponseText)(nil)).Elem()
}

func (o LogFileSettingsResponseTextOutput) ToLogFileSettingsResponseTextOutput() LogFileSettingsResponseTextOutput {
	return o
}

func (o LogFileSettingsResponseTextOutput) ToLogFileSettingsResponseTextOutputWithContext(ctx context.Context) LogFileSettingsResponseTextOutput {
	return o
}

// One of the supported timestamp formats
func (o LogFileSettingsResponseTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LogFileSettingsResponseText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type LogFileSettingsResponseTextPtrOutput struct{ *pulumi.OutputState }

func (LogFileSettingsResponseTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsResponseText)(nil)).Elem()
}

func (o LogFileSettingsResponseTextPtrOutput) ToLogFileSettingsResponseTextPtrOutput() LogFileSettingsResponseTextPtrOutput {
	return o
}

func (o LogFileSettingsResponseTextPtrOutput) ToLogFileSettingsResponseTextPtrOutputWithContext(ctx context.Context) LogFileSettingsResponseTextPtrOutput {
	return o
}

func (o LogFileSettingsResponseTextPtrOutput) Elem() LogFileSettingsResponseTextOutput {
	return o.ApplyT(func(v *LogFileSettingsResponseText) LogFileSettingsResponseText {
		if v != nil {
			return *v
		}
		var ret LogFileSettingsResponseText
		return ret
	}).(LogFileSettingsResponseTextOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsResponseTextPtrOutput) RecordStartTimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogFileSettingsResponseText) *string {
		if v == nil {
			return nil
		}
		return &v.RecordStartTimestampFormat
	}).(pulumi.StringPtrOutput)
}

// Text settings
type LogFileSettingsText struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat string `pulumi:"recordStartTimestampFormat"`
}

// LogFileSettingsTextInput is an input type that accepts LogFileSettingsTextArgs and LogFileSettingsTextOutput values.
// You can construct a concrete instance of `LogFileSettingsTextInput` via:
//
//	LogFileSettingsTextArgs{...}
type LogFileSettingsTextInput interface {
	pulumi.Input

	ToLogFileSettingsTextOutput() LogFileSettingsTextOutput
	ToLogFileSettingsTextOutputWithContext(context.Context) LogFileSettingsTextOutput
}

// Text settings
type LogFileSettingsTextArgs struct {
	// One of the supported timestamp formats
	RecordStartTimestampFormat pulumi.StringInput `pulumi:"recordStartTimestampFormat"`
}

func (LogFileSettingsTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsText)(nil)).Elem()
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextOutput() LogFileSettingsTextOutput {
	return i.ToLogFileSettingsTextOutputWithContext(context.Background())
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextOutputWithContext(ctx context.Context) LogFileSettingsTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextOutput)
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return i.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i LogFileSettingsTextArgs) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextOutput).ToLogFileSettingsTextPtrOutputWithContext(ctx)
}

// LogFileSettingsTextPtrInput is an input type that accepts LogFileSettingsTextArgs, LogFileSettingsTextPtr and LogFileSettingsTextPtrOutput values.
// You can construct a concrete instance of `LogFileSettingsTextPtrInput` via:
//
//	        LogFileSettingsTextArgs{...}
//
//	or:
//
//	        nil
type LogFileSettingsTextPtrInput interface {
	pulumi.Input

	ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput
	ToLogFileSettingsTextPtrOutputWithContext(context.Context) LogFileSettingsTextPtrOutput
}

type logFileSettingsTextPtrType LogFileSettingsTextArgs

func LogFileSettingsTextPtr(v *LogFileSettingsTextArgs) LogFileSettingsTextPtrInput {
	return (*logFileSettingsTextPtrType)(v)
}

func (*logFileSettingsTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsText)(nil)).Elem()
}

func (i *logFileSettingsTextPtrType) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return i.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (i *logFileSettingsTextPtrType) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFileSettingsTextPtrOutput)
}

// Text settings
type LogFileSettingsTextOutput struct{ *pulumi.OutputState }

func (LogFileSettingsTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFileSettingsText)(nil)).Elem()
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextOutput() LogFileSettingsTextOutput {
	return o
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextOutputWithContext(ctx context.Context) LogFileSettingsTextOutput {
	return o
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return o.ToLogFileSettingsTextPtrOutputWithContext(context.Background())
}

func (o LogFileSettingsTextOutput) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogFileSettingsText) *LogFileSettingsText {
		return &v
	}).(LogFileSettingsTextPtrOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsTextOutput) RecordStartTimestampFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LogFileSettingsText) string { return v.RecordStartTimestampFormat }).(pulumi.StringOutput)
}

type LogFileSettingsTextPtrOutput struct{ *pulumi.OutputState }

func (LogFileSettingsTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFileSettingsText)(nil)).Elem()
}

func (o LogFileSettingsTextPtrOutput) ToLogFileSettingsTextPtrOutput() LogFileSettingsTextPtrOutput {
	return o
}

func (o LogFileSettingsTextPtrOutput) ToLogFileSettingsTextPtrOutputWithContext(ctx context.Context) LogFileSettingsTextPtrOutput {
	return o
}

func (o LogFileSettingsTextPtrOutput) Elem() LogFileSettingsTextOutput {
	return o.ApplyT(func(v *LogFileSettingsText) LogFileSettingsText {
		if v != nil {
			return *v
		}
		var ret LogFileSettingsText
		return ret
	}).(LogFileSettingsTextOutput)
}

// One of the supported timestamp formats
func (o LogFileSettingsTextPtrOutput) RecordStartTimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogFileSettingsText) *string {
		if v == nil {
			return nil
		}
		return &v.RecordStartTimestampFormat
	}).(pulumi.StringPtrOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSource struct {
	// File Patterns where the log files are located
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files
	Format string `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The log files specific settings.
	Settings *LogFilesDataSourceSettings `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams []string `pulumi:"streams"`
}

// LogFilesDataSourceInput is an input type that accepts LogFilesDataSourceArgs and LogFilesDataSourceOutput values.
// You can construct a concrete instance of `LogFilesDataSourceInput` via:
//
//	LogFilesDataSourceArgs{...}
type LogFilesDataSourceInput interface {
	pulumi.Input

	ToLogFilesDataSourceOutput() LogFilesDataSourceOutput
	ToLogFilesDataSourceOutputWithContext(context.Context) LogFilesDataSourceOutput
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceArgs struct {
	// File Patterns where the log files are located
	FilePatterns pulumi.StringArrayInput `pulumi:"filePatterns"`
	// The data format of the log files
	Format pulumi.StringInput `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The log files specific settings.
	Settings LogFilesDataSourceSettingsPtrInput `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (LogFilesDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSource)(nil)).Elem()
}

func (i LogFilesDataSourceArgs) ToLogFilesDataSourceOutput() LogFilesDataSourceOutput {
	return i.ToLogFilesDataSourceOutputWithContext(context.Background())
}

func (i LogFilesDataSourceArgs) ToLogFilesDataSourceOutputWithContext(ctx context.Context) LogFilesDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceOutput)
}

// LogFilesDataSourceArrayInput is an input type that accepts LogFilesDataSourceArray and LogFilesDataSourceArrayOutput values.
// You can construct a concrete instance of `LogFilesDataSourceArrayInput` via:
//
//	LogFilesDataSourceArray{ LogFilesDataSourceArgs{...} }
type LogFilesDataSourceArrayInput interface {
	pulumi.Input

	ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput
	ToLogFilesDataSourceArrayOutputWithContext(context.Context) LogFilesDataSourceArrayOutput
}

type LogFilesDataSourceArray []LogFilesDataSourceInput

func (LogFilesDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSource)(nil)).Elem()
}

func (i LogFilesDataSourceArray) ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput {
	return i.ToLogFilesDataSourceArrayOutputWithContext(context.Background())
}

func (i LogFilesDataSourceArray) ToLogFilesDataSourceArrayOutputWithContext(ctx context.Context) LogFilesDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceArrayOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSource)(nil)).Elem()
}

func (o LogFilesDataSourceOutput) ToLogFilesDataSourceOutput() LogFilesDataSourceOutput {
	return o
}

func (o LogFilesDataSourceOutput) ToLogFilesDataSourceOutputWithContext(ctx context.Context) LogFilesDataSourceOutput {
	return o
}

// File Patterns where the log files are located
func (o LogFilesDataSourceOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSource) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files
func (o LogFilesDataSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LogFilesDataSource) string { return v.Format }).(pulumi.StringOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o LogFilesDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The log files specific settings.
func (o LogFilesDataSourceOutput) Settings() LogFilesDataSourceSettingsPtrOutput {
	return o.ApplyT(func(v LogFilesDataSource) *LogFilesDataSourceSettings { return v.Settings }).(LogFilesDataSourceSettingsPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data source
func (o LogFilesDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type LogFilesDataSourceArrayOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSource)(nil)).Elem()
}

func (o LogFilesDataSourceArrayOutput) ToLogFilesDataSourceArrayOutput() LogFilesDataSourceArrayOutput {
	return o
}

func (o LogFilesDataSourceArrayOutput) ToLogFilesDataSourceArrayOutputWithContext(ctx context.Context) LogFilesDataSourceArrayOutput {
	return o
}

func (o LogFilesDataSourceArrayOutput) Index(i pulumi.IntInput) LogFilesDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogFilesDataSource {
		return vs[0].([]LogFilesDataSource)[vs[1].(int)]
	}).(LogFilesDataSourceOutput)
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceResponse struct {
	// File Patterns where the log files are located
	FilePatterns []string `pulumi:"filePatterns"`
	// The data format of the log files
	Format string `pulumi:"format"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The log files specific settings.
	Settings *LogFilesDataSourceResponseSettings `pulumi:"settings"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data source
	Streams []string `pulumi:"streams"`
}

// Definition of which custom log files will be collected by this data collection rule
type LogFilesDataSourceResponseOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceResponse)(nil)).Elem()
}

func (o LogFilesDataSourceResponseOutput) ToLogFilesDataSourceResponseOutput() LogFilesDataSourceResponseOutput {
	return o
}

func (o LogFilesDataSourceResponseOutput) ToLogFilesDataSourceResponseOutputWithContext(ctx context.Context) LogFilesDataSourceResponseOutput {
	return o
}

// File Patterns where the log files are located
func (o LogFilesDataSourceResponseOutput) FilePatterns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) []string { return v.FilePatterns }).(pulumi.StringArrayOutput)
}

// The data format of the log files
func (o LogFilesDataSourceResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) string { return v.Format }).(pulumi.StringOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o LogFilesDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The log files specific settings.
func (o LogFilesDataSourceResponseOutput) Settings() LogFilesDataSourceResponseSettingsPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) *LogFilesDataSourceResponseSettings { return v.Settings }).(LogFilesDataSourceResponseSettingsPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data source
func (o LogFilesDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type LogFilesDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogFilesDataSourceResponse)(nil)).Elem()
}

func (o LogFilesDataSourceResponseArrayOutput) ToLogFilesDataSourceResponseArrayOutput() LogFilesDataSourceResponseArrayOutput {
	return o
}

func (o LogFilesDataSourceResponseArrayOutput) ToLogFilesDataSourceResponseArrayOutputWithContext(ctx context.Context) LogFilesDataSourceResponseArrayOutput {
	return o
}

func (o LogFilesDataSourceResponseArrayOutput) Index(i pulumi.IntInput) LogFilesDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogFilesDataSourceResponse {
		return vs[0].([]LogFilesDataSourceResponse)[vs[1].(int)]
	}).(LogFilesDataSourceResponseOutput)
}

// The log files specific settings.
type LogFilesDataSourceResponseSettings struct {
	// Text settings
	Text *LogFileSettingsResponseText `pulumi:"text"`
}

// The log files specific settings.
type LogFilesDataSourceResponseSettingsOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceResponseSettings)(nil)).Elem()
}

func (o LogFilesDataSourceResponseSettingsOutput) ToLogFilesDataSourceResponseSettingsOutput() LogFilesDataSourceResponseSettingsOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsOutput) ToLogFilesDataSourceResponseSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceResponseSettingsOutput {
	return o
}

// Text settings
func (o LogFilesDataSourceResponseSettingsOutput) Text() LogFileSettingsResponseTextPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceResponseSettings) *LogFileSettingsResponseText { return v.Text }).(LogFileSettingsResponseTextPtrOutput)
}

type LogFilesDataSourceResponseSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceResponseSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceResponseSettings)(nil)).Elem()
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) ToLogFilesDataSourceResponseSettingsPtrOutput() LogFilesDataSourceResponseSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) ToLogFilesDataSourceResponseSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceResponseSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceResponseSettingsPtrOutput) Elem() LogFilesDataSourceResponseSettingsOutput {
	return o.ApplyT(func(v *LogFilesDataSourceResponseSettings) LogFilesDataSourceResponseSettings {
		if v != nil {
			return *v
		}
		var ret LogFilesDataSourceResponseSettings
		return ret
	}).(LogFilesDataSourceResponseSettingsOutput)
}

// Text settings
func (o LogFilesDataSourceResponseSettingsPtrOutput) Text() LogFileSettingsResponseTextPtrOutput {
	return o.ApplyT(func(v *LogFilesDataSourceResponseSettings) *LogFileSettingsResponseText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(LogFileSettingsResponseTextPtrOutput)
}

// The log files specific settings.
type LogFilesDataSourceSettings struct {
	// Text settings
	Text *LogFileSettingsText `pulumi:"text"`
}

// LogFilesDataSourceSettingsInput is an input type that accepts LogFilesDataSourceSettingsArgs and LogFilesDataSourceSettingsOutput values.
// You can construct a concrete instance of `LogFilesDataSourceSettingsInput` via:
//
//	LogFilesDataSourceSettingsArgs{...}
type LogFilesDataSourceSettingsInput interface {
	pulumi.Input

	ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput
	ToLogFilesDataSourceSettingsOutputWithContext(context.Context) LogFilesDataSourceSettingsOutput
}

// The log files specific settings.
type LogFilesDataSourceSettingsArgs struct {
	// Text settings
	Text LogFileSettingsTextPtrInput `pulumi:"text"`
}

func (LogFilesDataSourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceSettings)(nil)).Elem()
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput {
	return i.ToLogFilesDataSourceSettingsOutputWithContext(context.Background())
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsOutput)
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return i.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (i LogFilesDataSourceSettingsArgs) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsOutput).ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx)
}

// LogFilesDataSourceSettingsPtrInput is an input type that accepts LogFilesDataSourceSettingsArgs, LogFilesDataSourceSettingsPtr and LogFilesDataSourceSettingsPtrOutput values.
// You can construct a concrete instance of `LogFilesDataSourceSettingsPtrInput` via:
//
//	        LogFilesDataSourceSettingsArgs{...}
//
//	or:
//
//	        nil
type LogFilesDataSourceSettingsPtrInput interface {
	pulumi.Input

	ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput
	ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Context) LogFilesDataSourceSettingsPtrOutput
}

type logFilesDataSourceSettingsPtrType LogFilesDataSourceSettingsArgs

func LogFilesDataSourceSettingsPtr(v *LogFilesDataSourceSettingsArgs) LogFilesDataSourceSettingsPtrInput {
	return (*logFilesDataSourceSettingsPtrType)(v)
}

func (*logFilesDataSourceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceSettings)(nil)).Elem()
}

func (i *logFilesDataSourceSettingsPtrType) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return i.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (i *logFilesDataSourceSettingsPtrType) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogFilesDataSourceSettingsPtrOutput)
}

// The log files specific settings.
type LogFilesDataSourceSettingsOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogFilesDataSourceSettings)(nil)).Elem()
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsOutput() LogFilesDataSourceSettingsOutput {
	return o
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsOutput {
	return o
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return o.ToLogFilesDataSourceSettingsPtrOutputWithContext(context.Background())
}

func (o LogFilesDataSourceSettingsOutput) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogFilesDataSourceSettings) *LogFilesDataSourceSettings {
		return &v
	}).(LogFilesDataSourceSettingsPtrOutput)
}

// Text settings
func (o LogFilesDataSourceSettingsOutput) Text() LogFileSettingsTextPtrOutput {
	return o.ApplyT(func(v LogFilesDataSourceSettings) *LogFileSettingsText { return v.Text }).(LogFileSettingsTextPtrOutput)
}

type LogFilesDataSourceSettingsPtrOutput struct{ *pulumi.OutputState }

func (LogFilesDataSourceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogFilesDataSourceSettings)(nil)).Elem()
}

func (o LogFilesDataSourceSettingsPtrOutput) ToLogFilesDataSourceSettingsPtrOutput() LogFilesDataSourceSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceSettingsPtrOutput) ToLogFilesDataSourceSettingsPtrOutputWithContext(ctx context.Context) LogFilesDataSourceSettingsPtrOutput {
	return o
}

func (o LogFilesDataSourceSettingsPtrOutput) Elem() LogFilesDataSourceSettingsOutput {
	return o.ApplyT(func(v *LogFilesDataSourceSettings) LogFilesDataSourceSettings {
		if v != nil {
			return *v
		}
		var ret LogFilesDataSourceSettings
		return ret
	}).(LogFilesDataSourceSettingsOutput)
}

// Text settings
func (o LogFilesDataSourceSettingsPtrOutput) Text() LogFileSettingsTextPtrOutput {
	return o.ApplyT(func(v *LogFilesDataSourceSettings) *LogFileSettingsText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(LogFileSettingsTextPtrOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettings struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
}

// LogSettingsInput is an input type that accepts LogSettingsArgs and LogSettingsOutput values.
// You can construct a concrete instance of `LogSettingsInput` via:
//
//	LogSettingsArgs{...}
type LogSettingsInput interface {
	pulumi.Input

	ToLogSettingsOutput() LogSettingsOutput
	ToLogSettingsOutputWithContext(context.Context) LogSettingsOutput
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsArgs struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy RetentionPolicyPtrInput `pulumi:"retentionPolicy"`
}

func (LogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (i LogSettingsArgs) ToLogSettingsOutput() LogSettingsOutput {
	return i.ToLogSettingsOutputWithContext(context.Background())
}

func (i LogSettingsArgs) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsOutput)
}

// LogSettingsArrayInput is an input type that accepts LogSettingsArray and LogSettingsArrayOutput values.
// You can construct a concrete instance of `LogSettingsArrayInput` via:
//
//	LogSettingsArray{ LogSettingsArgs{...} }
type LogSettingsArrayInput interface {
	pulumi.Input

	ToLogSettingsArrayOutput() LogSettingsArrayOutput
	ToLogSettingsArrayOutputWithContext(context.Context) LogSettingsArrayOutput
}

type LogSettingsArray []LogSettingsInput

func (LogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettings)(nil)).Elem()
}

func (i LogSettingsArray) ToLogSettingsArrayOutput() LogSettingsArrayOutput {
	return i.ToLogSettingsArrayOutputWithContext(context.Background())
}

func (i LogSettingsArray) ToLogSettingsArrayOutputWithContext(ctx context.Context) LogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogSettingsArrayOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsOutput struct{ *pulumi.OutputState }

func (LogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettings)(nil)).Elem()
}

func (o LogSettingsOutput) ToLogSettingsOutput() LogSettingsOutput {
	return o
}

func (o LogSettingsOutput) ToLogSettingsOutputWithContext(ctx context.Context) LogSettingsOutput {
	return o
}

// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o LogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this log.
func (o LogSettingsOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v LogSettings) *RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyPtrOutput)
}

type LogSettingsArrayOutput struct{ *pulumi.OutputState }

func (LogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettings)(nil)).Elem()
}

func (o LogSettingsArrayOutput) ToLogSettingsArrayOutput() LogSettingsArrayOutput {
	return o
}

func (o LogSettingsArrayOutput) ToLogSettingsArrayOutputWithContext(ctx context.Context) LogSettingsArrayOutput {
	return o
}

func (o LogSettingsArrayOutput) Index(i pulumi.IntInput) LogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogSettings {
		return vs[0].([]LogSettings)[vs[1].(int)]
	}).(LogSettingsOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsResponse struct {
	// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this log.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
type LogSettingsResponseOutput struct{ *pulumi.OutputState }

func (LogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutput() LogSettingsResponseOutput {
	return o
}

func (o LogSettingsResponseOutput) ToLogSettingsResponseOutputWithContext(ctx context.Context) LogSettingsResponseOutput {
	return o
}

// Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Diagnostic Log category group for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
func (o LogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o LogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this log.
func (o LogSettingsResponseOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v LogSettingsResponse) *RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponsePtrOutput)
}

type LogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (LogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogSettingsResponse)(nil)).Elem()
}

func (o LogSettingsResponseArrayOutput) ToLogSettingsResponseArrayOutput() LogSettingsResponseArrayOutput {
	return o
}

func (o LogSettingsResponseArrayOutput) ToLogSettingsResponseArrayOutputWithContext(ctx context.Context) LogSettingsResponseArrayOutput {
	return o
}

func (o LogSettingsResponseArrayOutput) Index(i pulumi.IntInput) LogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogSettingsResponse {
		return vs[0].([]LogSettingsResponse)[vs[1].(int)]
	}).(LogSettingsResponseOutput)
}

// A logic app receiver.
type LogicAppReceiver struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for LogicAppReceiver
func (val *LogicAppReceiver) Defaults() *LogicAppReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// LogicAppReceiverInput is an input type that accepts LogicAppReceiverArgs and LogicAppReceiverOutput values.
// You can construct a concrete instance of `LogicAppReceiverInput` via:
//
//	LogicAppReceiverArgs{...}
type LogicAppReceiverInput interface {
	pulumi.Input

	ToLogicAppReceiverOutput() LogicAppReceiverOutput
	ToLogicAppReceiverOutputWithContext(context.Context) LogicAppReceiverOutput
}

// A logic app receiver.
type LogicAppReceiverArgs struct {
	// The callback url where http request sent to.
	CallbackUrl pulumi.StringInput `pulumi:"callbackUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity pulumi.StringPtrInput `pulumi:"managedIdentity"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for LogicAppReceiverArgs
func (val *LogicAppReceiverArgs) Defaults() *LogicAppReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (LogicAppReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return i.ToLogicAppReceiverOutputWithContext(context.Background())
}

func (i LogicAppReceiverArgs) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverOutput)
}

// LogicAppReceiverArrayInput is an input type that accepts LogicAppReceiverArray and LogicAppReceiverArrayOutput values.
// You can construct a concrete instance of `LogicAppReceiverArrayInput` via:
//
//	LogicAppReceiverArray{ LogicAppReceiverArgs{...} }
type LogicAppReceiverArrayInput interface {
	pulumi.Input

	ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput
	ToLogicAppReceiverArrayOutputWithContext(context.Context) LogicAppReceiverArrayOutput
}

type LogicAppReceiverArray []LogicAppReceiverInput

func (LogicAppReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return i.ToLogicAppReceiverArrayOutputWithContext(context.Background())
}

func (i LogicAppReceiverArray) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogicAppReceiverArrayOutput)
}

// A logic app receiver.
type LogicAppReceiverOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutput() LogicAppReceiverOutput {
	return o
}

func (o LogicAppReceiverOutput) ToLogicAppReceiverOutputWithContext(ctx context.Context) LogicAppReceiverOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o LogicAppReceiverOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicAppReceiver) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiver) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o LogicAppReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogicAppReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type LogicAppReceiverArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiver)(nil)).Elem()
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutput() LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) ToLogicAppReceiverArrayOutputWithContext(ctx context.Context) LogicAppReceiverArrayOutput {
	return o
}

func (o LogicAppReceiverArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiver {
		return vs[0].([]LogicAppReceiver)[vs[1].(int)]
	}).(LogicAppReceiverOutput)
}

// A logic app receiver.
type LogicAppReceiverResponse struct {
	// The callback url where http request sent to.
	CallbackUrl string `pulumi:"callbackUrl"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the logic app receiver. Names must be unique across all receivers within an action group.
	Name string `pulumi:"name"`
	// The azure resource id of the logic app receiver.
	ResourceId string `pulumi:"resourceId"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for LogicAppReceiverResponse
func (val *LogicAppReceiverResponse) Defaults() *LogicAppReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// A logic app receiver.
type LogicAppReceiverResponseOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutput() LogicAppReceiverResponseOutput {
	return o
}

func (o LogicAppReceiverResponseOutput) ToLogicAppReceiverResponseOutputWithContext(ctx context.Context) LogicAppReceiverResponseOutput {
	return o
}

// The callback url where http request sent to.
func (o LogicAppReceiverResponseOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.CallbackUrl }).(pulumi.StringOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o LogicAppReceiverResponseOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the logic app receiver. Names must be unique across all receivers within an action group.
func (o LogicAppReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The azure resource id of the logic app receiver.
func (o LogicAppReceiverResponseOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Indicates whether to use common alert schema.
func (o LogicAppReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogicAppReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type LogicAppReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (LogicAppReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogicAppReceiverResponse)(nil)).Elem()
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutput() LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) ToLogicAppReceiverResponseArrayOutputWithContext(ctx context.Context) LogicAppReceiverResponseArrayOutput {
	return o
}

func (o LogicAppReceiverResponseArrayOutput) Index(i pulumi.IntInput) LogicAppReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogicAppReceiverResponse {
		return vs[0].([]LogicAppReceiverResponse)[vs[1].(int)]
	}).(LogicAppReceiverResponseOutput)
}

// Authentication setting properties for Azure Managed Identity
type ManagedIdentityAuthenticationSettingProperties struct {
	// Supported kinds of authentication settings as discriminator
	// Expected value is 'ManagedIdentity'.
	AuthenticationKind string `pulumi:"authenticationKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
	ManagedIdentityName string `pulumi:"managedIdentityName"`
}

// ManagedIdentityAuthenticationSettingPropertiesInput is an input type that accepts ManagedIdentityAuthenticationSettingPropertiesArgs and ManagedIdentityAuthenticationSettingPropertiesOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthenticationSettingPropertiesInput` via:
//
//	ManagedIdentityAuthenticationSettingPropertiesArgs{...}
type ManagedIdentityAuthenticationSettingPropertiesInput interface {
	pulumi.Input

	ToManagedIdentityAuthenticationSettingPropertiesOutput() ManagedIdentityAuthenticationSettingPropertiesOutput
	ToManagedIdentityAuthenticationSettingPropertiesOutputWithContext(context.Context) ManagedIdentityAuthenticationSettingPropertiesOutput
}

// Authentication setting properties for Azure Managed Identity
type ManagedIdentityAuthenticationSettingPropertiesArgs struct {
	// Supported kinds of authentication settings as discriminator
	// Expected value is 'ManagedIdentity'.
	AuthenticationKind pulumi.StringInput `pulumi:"authenticationKind"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
	ManagedIdentityName pulumi.StringInput `pulumi:"managedIdentityName"`
}

func (ManagedIdentityAuthenticationSettingPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthenticationSettingProperties)(nil)).Elem()
}

func (i ManagedIdentityAuthenticationSettingPropertiesArgs) ToManagedIdentityAuthenticationSettingPropertiesOutput() ManagedIdentityAuthenticationSettingPropertiesOutput {
	return i.ToManagedIdentityAuthenticationSettingPropertiesOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthenticationSettingPropertiesArgs) ToManagedIdentityAuthenticationSettingPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationSettingPropertiesOutput)
}

func (i ManagedIdentityAuthenticationSettingPropertiesArgs) ToManagedIdentityAuthenticationSettingPropertiesPtrOutput() ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return i.ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthenticationSettingPropertiesArgs) ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationSettingPropertiesOutput).ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(ctx)
}

// ManagedIdentityAuthenticationSettingPropertiesPtrInput is an input type that accepts ManagedIdentityAuthenticationSettingPropertiesArgs, ManagedIdentityAuthenticationSettingPropertiesPtr and ManagedIdentityAuthenticationSettingPropertiesPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthenticationSettingPropertiesPtrInput` via:
//
//	        ManagedIdentityAuthenticationSettingPropertiesArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityAuthenticationSettingPropertiesPtrInput interface {
	pulumi.Input

	ToManagedIdentityAuthenticationSettingPropertiesPtrOutput() ManagedIdentityAuthenticationSettingPropertiesPtrOutput
	ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(context.Context) ManagedIdentityAuthenticationSettingPropertiesPtrOutput
}

type managedIdentityAuthenticationSettingPropertiesPtrType ManagedIdentityAuthenticationSettingPropertiesArgs

func ManagedIdentityAuthenticationSettingPropertiesPtr(v *ManagedIdentityAuthenticationSettingPropertiesArgs) ManagedIdentityAuthenticationSettingPropertiesPtrInput {
	return (*managedIdentityAuthenticationSettingPropertiesPtrType)(v)
}

func (*managedIdentityAuthenticationSettingPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityAuthenticationSettingProperties)(nil)).Elem()
}

func (i *managedIdentityAuthenticationSettingPropertiesPtrType) ToManagedIdentityAuthenticationSettingPropertiesPtrOutput() ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return i.ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(context.Background())
}

func (i *managedIdentityAuthenticationSettingPropertiesPtrType) ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthenticationSettingPropertiesPtrOutput)
}

// Authentication setting properties for Azure Managed Identity
type ManagedIdentityAuthenticationSettingPropertiesOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationSettingPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthenticationSettingProperties)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationSettingPropertiesOutput) ToManagedIdentityAuthenticationSettingPropertiesOutput() ManagedIdentityAuthenticationSettingPropertiesOutput {
	return o
}

func (o ManagedIdentityAuthenticationSettingPropertiesOutput) ToManagedIdentityAuthenticationSettingPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesOutput {
	return o
}

func (o ManagedIdentityAuthenticationSettingPropertiesOutput) ToManagedIdentityAuthenticationSettingPropertiesPtrOutput() ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return o.ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityAuthenticationSettingPropertiesOutput) ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityAuthenticationSettingProperties) *ManagedIdentityAuthenticationSettingProperties {
		return &v
	}).(ManagedIdentityAuthenticationSettingPropertiesPtrOutput)
}

// Supported kinds of authentication settings as discriminator
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthenticationSettingPropertiesOutput) AuthenticationKind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingProperties) string { return v.AuthenticationKind }).(pulumi.StringOutput)
}

// Display name
func (o ManagedIdentityAuthenticationSettingPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
func (o ManagedIdentityAuthenticationSettingPropertiesOutput) ManagedIdentityName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingProperties) string { return v.ManagedIdentityName }).(pulumi.StringOutput)
}

type ManagedIdentityAuthenticationSettingPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationSettingPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityAuthenticationSettingProperties)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) ToManagedIdentityAuthenticationSettingPropertiesPtrOutput() ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) ToManagedIdentityAuthenticationSettingPropertiesPtrOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesPtrOutput {
	return o
}

func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) Elem() ManagedIdentityAuthenticationSettingPropertiesOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationSettingProperties) ManagedIdentityAuthenticationSettingProperties {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityAuthenticationSettingProperties
		return ret
	}).(ManagedIdentityAuthenticationSettingPropertiesOutput)
}

// Supported kinds of authentication settings as discriminator
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) AuthenticationKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationSettingProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationKind
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationSettingProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
func (o ManagedIdentityAuthenticationSettingPropertiesPtrOutput) ManagedIdentityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityAuthenticationSettingProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ManagedIdentityName
	}).(pulumi.StringPtrOutput)
}

// Authentication setting properties for Azure Managed Identity
type ManagedIdentityAuthenticationSettingPropertiesResponse struct {
	// Supported kinds of authentication settings as discriminator
	// Expected value is 'ManagedIdentity'.
	AuthenticationKind string `pulumi:"authenticationKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
	ManagedIdentityName string `pulumi:"managedIdentityName"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Authentication setting properties for Azure Managed Identity
type ManagedIdentityAuthenticationSettingPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthenticationSettingPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthenticationSettingPropertiesResponse)(nil)).Elem()
}

func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) ToManagedIdentityAuthenticationSettingPropertiesResponseOutput() ManagedIdentityAuthenticationSettingPropertiesResponseOutput {
	return o
}

func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) ToManagedIdentityAuthenticationSettingPropertiesResponseOutputWithContext(ctx context.Context) ManagedIdentityAuthenticationSettingPropertiesResponseOutput {
	return o
}

// Supported kinds of authentication settings as discriminator
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) AuthenticationKind() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingPropertiesResponse) string { return v.AuthenticationKind }).(pulumi.StringOutput)
}

// Display name
func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the managed identity to use. Either 'SystemAssigned' or the resourceId of a user-assigned identity.
func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) ManagedIdentityName() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingPropertiesResponse) string { return v.ManagedIdentityName }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o ManagedIdentityAuthenticationSettingPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthenticationSettingPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettings struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// ManagementGroupLogSettingsInput is an input type that accepts ManagementGroupLogSettingsArgs and ManagementGroupLogSettingsOutput values.
// You can construct a concrete instance of `ManagementGroupLogSettingsInput` via:
//
//	ManagementGroupLogSettingsArgs{...}
type ManagementGroupLogSettingsInput interface {
	pulumi.Input

	ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput
	ToManagementGroupLogSettingsOutputWithContext(context.Context) ManagementGroupLogSettingsOutput
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsArgs struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (ManagementGroupLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettings)(nil)).Elem()
}

func (i ManagementGroupLogSettingsArgs) ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput {
	return i.ToManagementGroupLogSettingsOutputWithContext(context.Background())
}

func (i ManagementGroupLogSettingsArgs) ToManagementGroupLogSettingsOutputWithContext(ctx context.Context) ManagementGroupLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupLogSettingsOutput)
}

// ManagementGroupLogSettingsArrayInput is an input type that accepts ManagementGroupLogSettingsArray and ManagementGroupLogSettingsArrayOutput values.
// You can construct a concrete instance of `ManagementGroupLogSettingsArrayInput` via:
//
//	ManagementGroupLogSettingsArray{ ManagementGroupLogSettingsArgs{...} }
type ManagementGroupLogSettingsArrayInput interface {
	pulumi.Input

	ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput
	ToManagementGroupLogSettingsArrayOutputWithContext(context.Context) ManagementGroupLogSettingsArrayOutput
}

type ManagementGroupLogSettingsArray []ManagementGroupLogSettingsInput

func (ManagementGroupLogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettings)(nil)).Elem()
}

func (i ManagementGroupLogSettingsArray) ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput {
	return i.ToManagementGroupLogSettingsArrayOutputWithContext(context.Background())
}

func (i ManagementGroupLogSettingsArray) ToManagementGroupLogSettingsArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagementGroupLogSettingsArrayOutput)
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettings)(nil)).Elem()
}

func (o ManagementGroupLogSettingsOutput) ToManagementGroupLogSettingsOutput() ManagementGroupLogSettingsOutput {
	return o
}

func (o ManagementGroupLogSettingsOutput) ToManagementGroupLogSettingsOutputWithContext(ctx context.Context) ManagementGroupLogSettingsOutput {
	return o
}

// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o ManagementGroupLogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagementGroupLogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagementGroupLogSettingsArrayOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettings)(nil)).Elem()
}

func (o ManagementGroupLogSettingsArrayOutput) ToManagementGroupLogSettingsArrayOutput() ManagementGroupLogSettingsArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsArrayOutput) ToManagementGroupLogSettingsArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsArrayOutput) Index(i pulumi.IntInput) ManagementGroupLogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementGroupLogSettings {
		return vs[0].([]ManagementGroupLogSettings)[vs[1].(int)]
	}).(ManagementGroupLogSettingsOutput)
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsResponse struct {
	// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Part of Management Group diagnostic setting. Specifies the settings for a particular log.
type ManagementGroupLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagementGroupLogSettingsResponse)(nil)).Elem()
}

func (o ManagementGroupLogSettingsResponseOutput) ToManagementGroupLogSettingsResponseOutput() ManagementGroupLogSettingsResponseOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseOutput) ToManagementGroupLogSettingsResponseOutputWithContext(ctx context.Context) ManagementGroupLogSettingsResponseOutput {
	return o
}

// Name of a Management Group Diagnostic Log category for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Management Group Diagnostic Log category group for a resource type this setting is applied to.
func (o ManagementGroupLogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o ManagementGroupLogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ManagementGroupLogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type ManagementGroupLogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagementGroupLogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagementGroupLogSettingsResponse)(nil)).Elem()
}

func (o ManagementGroupLogSettingsResponseArrayOutput) ToManagementGroupLogSettingsResponseArrayOutput() ManagementGroupLogSettingsResponseArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseArrayOutput) ToManagementGroupLogSettingsResponseArrayOutputWithContext(ctx context.Context) ManagementGroupLogSettingsResponseArrayOutput {
	return o
}

func (o ManagementGroupLogSettingsResponseArrayOutput) Index(i pulumi.IntInput) ManagementGroupLogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagementGroupLogSettingsResponse {
		return vs[0].([]ManagementGroupLogSettingsResponse)[vs[1].(int)]
	}).(ManagementGroupLogSettingsResponseOutput)
}

// An alert action.
type MetricAlertAction struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// MetricAlertActionInput is an input type that accepts MetricAlertActionArgs and MetricAlertActionOutput values.
// You can construct a concrete instance of `MetricAlertActionInput` via:
//
//	MetricAlertActionArgs{...}
type MetricAlertActionInput interface {
	pulumi.Input

	ToMetricAlertActionOutput() MetricAlertActionOutput
	ToMetricAlertActionOutputWithContext(context.Context) MetricAlertActionOutput
}

// An alert action.
type MetricAlertActionArgs struct {
	// the id of the action group to use.
	ActionGroupId pulumi.StringPtrInput `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties pulumi.StringMapInput `pulumi:"webHookProperties"`
}

func (MetricAlertActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return i.ToMetricAlertActionOutputWithContext(context.Background())
}

func (i MetricAlertActionArgs) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionOutput)
}

// MetricAlertActionArrayInput is an input type that accepts MetricAlertActionArray and MetricAlertActionArrayOutput values.
// You can construct a concrete instance of `MetricAlertActionArrayInput` via:
//
//	MetricAlertActionArray{ MetricAlertActionArgs{...} }
type MetricAlertActionArrayInput interface {
	pulumi.Input

	ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput
	ToMetricAlertActionArrayOutputWithContext(context.Context) MetricAlertActionArrayOutput
}

type MetricAlertActionArray []MetricAlertActionInput

func (MetricAlertActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return i.ToMetricAlertActionArrayOutputWithContext(context.Background())
}

func (i MetricAlertActionArray) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertActionArrayOutput)
}

// An alert action.
type MetricAlertActionOutput struct{ *pulumi.OutputState }

func (MetricAlertActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutput() MetricAlertActionOutput {
	return o
}

func (o MetricAlertActionOutput) ToMetricAlertActionOutputWithContext(ctx context.Context) MetricAlertActionOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertAction) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
func (o MetricAlertActionOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertAction) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertAction)(nil)).Elem()
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutput() MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) ToMetricAlertActionArrayOutputWithContext(ctx context.Context) MetricAlertActionArrayOutput {
	return o
}

func (o MetricAlertActionArrayOutput) Index(i pulumi.IntInput) MetricAlertActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertAction {
		return vs[0].([]MetricAlertAction)[vs[1].(int)]
	}).(MetricAlertActionOutput)
}

// An alert action.
type MetricAlertActionResponse struct {
	// the id of the action group to use.
	ActionGroupId *string `pulumi:"actionGroupId"`
	// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
	WebHookProperties map[string]string `pulumi:"webHookProperties"`
}

// An alert action.
type MetricAlertActionResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutput() MetricAlertActionResponseOutput {
	return o
}

func (o MetricAlertActionResponseOutput) ToMetricAlertActionResponseOutputWithContext(ctx context.Context) MetricAlertActionResponseOutput {
	return o
}

// the id of the action group to use.
func (o MetricAlertActionResponseOutput) ActionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) *string { return v.ActionGroupId }).(pulumi.StringPtrOutput)
}

// This field allows specifying custom properties, which would be appended to the alert payload sent as input to the webhook.
func (o MetricAlertActionResponseOutput) WebHookProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MetricAlertActionResponse) map[string]string { return v.WebHookProperties }).(pulumi.StringMapOutput)
}

type MetricAlertActionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricAlertActionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricAlertActionResponse)(nil)).Elem()
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutput() MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) ToMetricAlertActionResponseArrayOutputWithContext(ctx context.Context) MetricAlertActionResponseArrayOutput {
	return o
}

func (o MetricAlertActionResponseArrayOutput) Index(i pulumi.IntInput) MetricAlertActionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricAlertActionResponse {
		return vs[0].([]MetricAlertActionResponse)[vs[1].(int)]
	}).(MetricAlertActionResponseOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteria struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertMultipleResourceMultipleMetricCriteriaInput is an input type that accepts MetricAlertMultipleResourceMultipleMetricCriteriaArgs and MetricAlertMultipleResourceMultipleMetricCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertMultipleResourceMultipleMetricCriteriaInput` via:
//
//	MetricAlertMultipleResourceMultipleMetricCriteriaArgs{...}
type MetricAlertMultipleResourceMultipleMetricCriteriaInput interface {
	pulumi.Input

	ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput
	ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaArgs struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf pulumi.ArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return i.ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertMultipleResourceMultipleMetricCriteriaArgs) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertMultipleResourceMultipleMetricCriteriaOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutput() MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return o
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaOutput {
	return o
}

// the list of multiple metric criteria for this 'all of' operation.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) AllOf() pulumi.ArrayOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteria) []interface{} { return v.AllOf }).(pulumi.ArrayOutput)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponse struct {
	// the list of multiple metric criteria for this 'all of' operation.
	AllOf []interface{} `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Specifies the metric alert criteria for multiple resource that has multiple metric criteria.
type MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertMultipleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput() MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertMultipleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

// the list of multiple metric criteria for this 'all of' operation.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) AllOf() pulumi.ArrayOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteriaResponse) []interface{} { return v.AllOf }).(pulumi.ArrayOutput)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'.
func (o MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertMultipleResourceMultipleMetricCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteria struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteria `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// MetricAlertSingleResourceMultipleMetricCriteriaInput is an input type that accepts MetricAlertSingleResourceMultipleMetricCriteriaArgs and MetricAlertSingleResourceMultipleMetricCriteriaOutput values.
// You can construct a concrete instance of `MetricAlertSingleResourceMultipleMetricCriteriaInput` via:
//
//	MetricAlertSingleResourceMultipleMetricCriteriaArgs{...}
type MetricAlertSingleResourceMultipleMetricCriteriaInput interface {
	pulumi.Input

	ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput
	ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaArgs struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf MetricCriteriaArrayInput `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
}

func (MetricAlertSingleResourceMultipleMetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return i.ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricAlertSingleResourceMultipleMetricCriteriaArgs) ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricAlertSingleResourceMultipleMetricCriteriaOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricAlertSingleResourceMultipleMetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteria)(nil)).Elem()
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaOutput() MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return o
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) AllOf() MetricCriteriaArrayOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteria) []MetricCriteria { return v.AllOf }).(MetricCriteriaArrayOutput)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
func (o MetricAlertSingleResourceMultipleMetricCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponse struct {
	// The list of metric criteria for this 'all of' operation.
	AllOf []MetricCriteriaResponse `pulumi:"allOf"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
	OdataType string `pulumi:"odataType"`
}

// Specifies the metric alert criteria for a single resource that has multiple metric criteria.
type MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricAlertSingleResourceMultipleMetricCriteriaResponse)(nil)).Elem()
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutput() MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) ToMetricAlertSingleResourceMultipleMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput {
	return o
}

// The list of metric criteria for this 'all of' operation.
func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) AllOf() MetricCriteriaResponseArrayOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteriaResponse) []MetricCriteriaResponse {
		return v.AllOf
	}).(MetricCriteriaResponseArrayOutput)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'.
func (o MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricAlertSingleResourceMultipleMetricCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// Criterion to filter metrics.
type MetricCriteria struct {
	// Specifies the type of threshold criteria
	// Expected value is 'StaticThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimension `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// MetricCriteriaInput is an input type that accepts MetricCriteriaArgs and MetricCriteriaOutput values.
// You can construct a concrete instance of `MetricCriteriaInput` via:
//
//	MetricCriteriaArgs{...}
type MetricCriteriaInput interface {
	pulumi.Input

	ToMetricCriteriaOutput() MetricCriteriaOutput
	ToMetricCriteriaOutputWithContext(context.Context) MetricCriteriaOutput
}

// Criterion to filter metrics.
type MetricCriteriaArgs struct {
	// Specifies the type of threshold criteria
	// Expected value is 'StaticThresholdCriterion'.
	CriterionType pulumi.StringInput `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions MetricDimensionArrayInput `pulumi:"dimensions"`
	// Name of the metric.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name pulumi.StringInput `pulumi:"name"`
	// the criteria operator.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation pulumi.BoolPtrInput `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation pulumi.StringInput `pulumi:"timeAggregation"`
}

func (MetricCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteria)(nil)).Elem()
}

func (i MetricCriteriaArgs) ToMetricCriteriaOutput() MetricCriteriaOutput {
	return i.ToMetricCriteriaOutputWithContext(context.Background())
}

func (i MetricCriteriaArgs) ToMetricCriteriaOutputWithContext(ctx context.Context) MetricCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaOutput)
}

// MetricCriteriaArrayInput is an input type that accepts MetricCriteriaArray and MetricCriteriaArrayOutput values.
// You can construct a concrete instance of `MetricCriteriaArrayInput` via:
//
//	MetricCriteriaArray{ MetricCriteriaArgs{...} }
type MetricCriteriaArrayInput interface {
	pulumi.Input

	ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput
	ToMetricCriteriaArrayOutputWithContext(context.Context) MetricCriteriaArrayOutput
}

type MetricCriteriaArray []MetricCriteriaInput

func (MetricCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteria)(nil)).Elem()
}

func (i MetricCriteriaArray) ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput {
	return i.ToMetricCriteriaArrayOutputWithContext(context.Background())
}

func (i MetricCriteriaArray) ToMetricCriteriaArrayOutputWithContext(ctx context.Context) MetricCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricCriteriaArrayOutput)
}

// Criterion to filter metrics.
type MetricCriteriaOutput struct{ *pulumi.OutputState }

func (MetricCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteria)(nil)).Elem()
}

func (o MetricCriteriaOutput) ToMetricCriteriaOutput() MetricCriteriaOutput {
	return o
}

func (o MetricCriteriaOutput) ToMetricCriteriaOutputWithContext(ctx context.Context) MetricCriteriaOutput {
	return o
}

// Specifies the type of threshold criteria
// Expected value is 'StaticThresholdCriterion'.
func (o MetricCriteriaOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o MetricCriteriaOutput) Dimensions() MetricDimensionArrayOutput {
	return o.ApplyT(func(v MetricCriteria) []MetricDimension { return v.Dimensions }).(MetricDimensionArrayOutput)
}

// Name of the metric.
func (o MetricCriteriaOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o MetricCriteriaOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricCriteria) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o MetricCriteriaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.Name }).(pulumi.StringOutput)
}

// the criteria operator.
func (o MetricCriteriaOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o MetricCriteriaOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricCriteria) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria threshold value that activates the alert.
func (o MetricCriteriaOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricCriteria) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// the criteria time aggregation types.
func (o MetricCriteriaOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteria) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

type MetricCriteriaArrayOutput struct{ *pulumi.OutputState }

func (MetricCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteria)(nil)).Elem()
}

func (o MetricCriteriaArrayOutput) ToMetricCriteriaArrayOutput() MetricCriteriaArrayOutput {
	return o
}

func (o MetricCriteriaArrayOutput) ToMetricCriteriaArrayOutputWithContext(ctx context.Context) MetricCriteriaArrayOutput {
	return o
}

func (o MetricCriteriaArrayOutput) Index(i pulumi.IntInput) MetricCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricCriteria {
		return vs[0].([]MetricCriteria)[vs[1].(int)]
	}).(MetricCriteriaOutput)
}

// Criterion to filter metrics.
type MetricCriteriaResponse struct {
	// Specifies the type of threshold criteria
	// Expected value is 'StaticThresholdCriterion'.
	CriterionType string `pulumi:"criterionType"`
	// List of dimension conditions.
	Dimensions []MetricDimensionResponse `pulumi:"dimensions"`
	// Name of the metric.
	MetricName string `pulumi:"metricName"`
	// Namespace of the metric.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// Name of the criteria.
	Name string `pulumi:"name"`
	// the criteria operator.
	Operator string `pulumi:"operator"`
	// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
	SkipMetricValidation *bool `pulumi:"skipMetricValidation"`
	// the criteria threshold value that activates the alert.
	Threshold float64 `pulumi:"threshold"`
	// the criteria time aggregation types.
	TimeAggregation string `pulumi:"timeAggregation"`
}

// Criterion to filter metrics.
type MetricCriteriaResponseOutput struct{ *pulumi.OutputState }

func (MetricCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricCriteriaResponse)(nil)).Elem()
}

func (o MetricCriteriaResponseOutput) ToMetricCriteriaResponseOutput() MetricCriteriaResponseOutput {
	return o
}

func (o MetricCriteriaResponseOutput) ToMetricCriteriaResponseOutputWithContext(ctx context.Context) MetricCriteriaResponseOutput {
	return o
}

// Specifies the type of threshold criteria
// Expected value is 'StaticThresholdCriterion'.
func (o MetricCriteriaResponseOutput) CriterionType() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.CriterionType }).(pulumi.StringOutput)
}

// List of dimension conditions.
func (o MetricCriteriaResponseOutput) Dimensions() MetricDimensionResponseArrayOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) []MetricDimensionResponse { return v.Dimensions }).(MetricDimensionResponseArrayOutput)
}

// Name of the metric.
func (o MetricCriteriaResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// Namespace of the metric.
func (o MetricCriteriaResponseOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// Name of the criteria.
func (o MetricCriteriaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// the criteria operator.
func (o MetricCriteriaResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Allows creating an alert rule on a custom metric that isn't yet emitted, by causing the metric validation to be skipped.
func (o MetricCriteriaResponseOutput) SkipMetricValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) *bool { return v.SkipMetricValidation }).(pulumi.BoolPtrOutput)
}

// the criteria threshold value that activates the alert.
func (o MetricCriteriaResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricCriteriaResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// the criteria time aggregation types.
func (o MetricCriteriaResponseOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricCriteriaResponse) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

type MetricCriteriaResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricCriteriaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricCriteriaResponse)(nil)).Elem()
}

func (o MetricCriteriaResponseArrayOutput) ToMetricCriteriaResponseArrayOutput() MetricCriteriaResponseArrayOutput {
	return o
}

func (o MetricCriteriaResponseArrayOutput) ToMetricCriteriaResponseArrayOutputWithContext(ctx context.Context) MetricCriteriaResponseArrayOutput {
	return o
}

func (o MetricCriteriaResponseArrayOutput) Index(i pulumi.IntInput) MetricCriteriaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricCriteriaResponse {
		return vs[0].([]MetricCriteriaResponse)[vs[1].(int)]
	}).(MetricCriteriaResponseOutput)
}

// Specifies a metric dimension.
type MetricDimension struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// MetricDimensionInput is an input type that accepts MetricDimensionArgs and MetricDimensionOutput values.
// You can construct a concrete instance of `MetricDimensionInput` via:
//
//	MetricDimensionArgs{...}
type MetricDimensionInput interface {
	pulumi.Input

	ToMetricDimensionOutput() MetricDimensionOutput
	ToMetricDimensionOutputWithContext(context.Context) MetricDimensionOutput
}

// Specifies a metric dimension.
type MetricDimensionArgs struct {
	// Name of the dimension.
	Name pulumi.StringInput `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator pulumi.StringInput `pulumi:"operator"`
	// list of dimension values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MetricDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimension)(nil)).Elem()
}

func (i MetricDimensionArgs) ToMetricDimensionOutput() MetricDimensionOutput {
	return i.ToMetricDimensionOutputWithContext(context.Background())
}

func (i MetricDimensionArgs) ToMetricDimensionOutputWithContext(ctx context.Context) MetricDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionOutput)
}

// MetricDimensionArrayInput is an input type that accepts MetricDimensionArray and MetricDimensionArrayOutput values.
// You can construct a concrete instance of `MetricDimensionArrayInput` via:
//
//	MetricDimensionArray{ MetricDimensionArgs{...} }
type MetricDimensionArrayInput interface {
	pulumi.Input

	ToMetricDimensionArrayOutput() MetricDimensionArrayOutput
	ToMetricDimensionArrayOutputWithContext(context.Context) MetricDimensionArrayOutput
}

type MetricDimensionArray []MetricDimensionInput

func (MetricDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimension)(nil)).Elem()
}

func (i MetricDimensionArray) ToMetricDimensionArrayOutput() MetricDimensionArrayOutput {
	return i.ToMetricDimensionArrayOutputWithContext(context.Background())
}

func (i MetricDimensionArray) ToMetricDimensionArrayOutputWithContext(ctx context.Context) MetricDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricDimensionArrayOutput)
}

// Specifies a metric dimension.
type MetricDimensionOutput struct{ *pulumi.OutputState }

func (MetricDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimension)(nil)).Elem()
}

func (o MetricDimensionOutput) ToMetricDimensionOutput() MetricDimensionOutput {
	return o
}

func (o MetricDimensionOutput) ToMetricDimensionOutputWithContext(ctx context.Context) MetricDimensionOutput {
	return o
}

// Name of the dimension.
func (o MetricDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimension) string { return v.Name }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Include' and 'Exclude' are supported
func (o MetricDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values.
func (o MetricDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricDimensionArrayOutput struct{ *pulumi.OutputState }

func (MetricDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimension)(nil)).Elem()
}

func (o MetricDimensionArrayOutput) ToMetricDimensionArrayOutput() MetricDimensionArrayOutput {
	return o
}

func (o MetricDimensionArrayOutput) ToMetricDimensionArrayOutputWithContext(ctx context.Context) MetricDimensionArrayOutput {
	return o
}

func (o MetricDimensionArrayOutput) Index(i pulumi.IntInput) MetricDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricDimension {
		return vs[0].([]MetricDimension)[vs[1].(int)]
	}).(MetricDimensionOutput)
}

// Specifies a metric dimension.
type MetricDimensionResponse struct {
	// Name of the dimension.
	Name string `pulumi:"name"`
	// the dimension operator. Only 'Include' and 'Exclude' are supported
	Operator string `pulumi:"operator"`
	// list of dimension values.
	Values []string `pulumi:"values"`
}

// Specifies a metric dimension.
type MetricDimensionResponseOutput struct{ *pulumi.OutputState }

func (MetricDimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricDimensionResponse)(nil)).Elem()
}

func (o MetricDimensionResponseOutput) ToMetricDimensionResponseOutput() MetricDimensionResponseOutput {
	return o
}

func (o MetricDimensionResponseOutput) ToMetricDimensionResponseOutputWithContext(ctx context.Context) MetricDimensionResponseOutput {
	return o
}

// Name of the dimension.
func (o MetricDimensionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimensionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Include' and 'Exclude' are supported
func (o MetricDimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricDimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values.
func (o MetricDimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetricDimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MetricDimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricDimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricDimensionResponse)(nil)).Elem()
}

func (o MetricDimensionResponseArrayOutput) ToMetricDimensionResponseArrayOutput() MetricDimensionResponseArrayOutput {
	return o
}

func (o MetricDimensionResponseArrayOutput) ToMetricDimensionResponseArrayOutputWithContext(ctx context.Context) MetricDimensionResponseArrayOutput {
	return o
}

func (o MetricDimensionResponseArrayOutput) Index(i pulumi.IntInput) MetricDimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricDimensionResponse {
		return vs[0].([]MetricDimensionResponse)[vs[1].(int)]
	}).(MetricDimensionResponseOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettings struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy *RetentionPolicy `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain *string `pulumi:"timeGrain"`
}

// MetricSettingsInput is an input type that accepts MetricSettingsArgs and MetricSettingsOutput values.
// You can construct a concrete instance of `MetricSettingsInput` via:
//
//	MetricSettingsArgs{...}
type MetricSettingsInput interface {
	pulumi.Input

	ToMetricSettingsOutput() MetricSettingsOutput
	ToMetricSettingsOutputWithContext(context.Context) MetricSettingsOutput
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsArgs struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy RetentionPolicyPtrInput `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain pulumi.StringPtrInput `pulumi:"timeGrain"`
}

func (MetricSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettings)(nil)).Elem()
}

func (i MetricSettingsArgs) ToMetricSettingsOutput() MetricSettingsOutput {
	return i.ToMetricSettingsOutputWithContext(context.Background())
}

func (i MetricSettingsArgs) ToMetricSettingsOutputWithContext(ctx context.Context) MetricSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSettingsOutput)
}

// MetricSettingsArrayInput is an input type that accepts MetricSettingsArray and MetricSettingsArrayOutput values.
// You can construct a concrete instance of `MetricSettingsArrayInput` via:
//
//	MetricSettingsArray{ MetricSettingsArgs{...} }
type MetricSettingsArrayInput interface {
	pulumi.Input

	ToMetricSettingsArrayOutput() MetricSettingsArrayOutput
	ToMetricSettingsArrayOutputWithContext(context.Context) MetricSettingsArrayOutput
}

type MetricSettingsArray []MetricSettingsInput

func (MetricSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettings)(nil)).Elem()
}

func (i MetricSettingsArray) ToMetricSettingsArrayOutput() MetricSettingsArrayOutput {
	return i.ToMetricSettingsArrayOutputWithContext(context.Background())
}

func (i MetricSettingsArray) ToMetricSettingsArrayOutputWithContext(ctx context.Context) MetricSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricSettingsArrayOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsOutput struct{ *pulumi.OutputState }

func (MetricSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettings)(nil)).Elem()
}

func (o MetricSettingsOutput) ToMetricSettingsOutput() MetricSettingsOutput {
	return o
}

func (o MetricSettingsOutput) ToMetricSettingsOutputWithContext(ctx context.Context) MetricSettingsOutput {
	return o
}

// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
func (o MetricSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this category is enabled.
func (o MetricSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this category.
func (o MetricSettingsOutput) RetentionPolicy() RetentionPolicyPtrOutput {
	return o.ApplyT(func(v MetricSettings) *RetentionPolicy { return v.RetentionPolicy }).(RetentionPolicyPtrOutput)
}

// the timegrain of the metric in ISO8601 format.
func (o MetricSettingsOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettings) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

type MetricSettingsArrayOutput struct{ *pulumi.OutputState }

func (MetricSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettings)(nil)).Elem()
}

func (o MetricSettingsArrayOutput) ToMetricSettingsArrayOutput() MetricSettingsArrayOutput {
	return o
}

func (o MetricSettingsArrayOutput) ToMetricSettingsArrayOutputWithContext(ctx context.Context) MetricSettingsArrayOutput {
	return o
}

func (o MetricSettingsArrayOutput) Index(i pulumi.IntInput) MetricSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSettings {
		return vs[0].([]MetricSettings)[vs[1].(int)]
	}).(MetricSettingsOutput)
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsResponse struct {
	// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
	Category *string `pulumi:"category"`
	// a value indicating whether this category is enabled.
	Enabled bool `pulumi:"enabled"`
	// the retention policy for this category.
	RetentionPolicy *RetentionPolicyResponse `pulumi:"retentionPolicy"`
	// the timegrain of the metric in ISO8601 format.
	TimeGrain *string `pulumi:"timeGrain"`
}

// Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular metric.
type MetricSettingsResponseOutput struct{ *pulumi.OutputState }

func (MetricSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricSettingsResponse)(nil)).Elem()
}

func (o MetricSettingsResponseOutput) ToMetricSettingsResponseOutput() MetricSettingsResponseOutput {
	return o
}

func (o MetricSettingsResponseOutput) ToMetricSettingsResponseOutputWithContext(ctx context.Context) MetricSettingsResponseOutput {
	return o
}

// Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.
func (o MetricSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// a value indicating whether this category is enabled.
func (o MetricSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v MetricSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// the retention policy for this category.
func (o MetricSettingsResponseOutput) RetentionPolicy() RetentionPolicyResponsePtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *RetentionPolicyResponse { return v.RetentionPolicy }).(RetentionPolicyResponsePtrOutput)
}

// the timegrain of the metric in ISO8601 format.
func (o MetricSettingsResponseOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricSettingsResponse) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

type MetricSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (MetricSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetricSettingsResponse)(nil)).Elem()
}

func (o MetricSettingsResponseArrayOutput) ToMetricSettingsResponseArrayOutput() MetricSettingsResponseArrayOutput {
	return o
}

func (o MetricSettingsResponseArrayOutput) ToMetricSettingsResponseArrayOutputWithContext(ctx context.Context) MetricSettingsResponseArrayOutput {
	return o
}

func (o MetricSettingsResponseArrayOutput) Index(i pulumi.IntInput) MetricSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetricSettingsResponse {
		return vs[0].([]MetricSettingsResponse)[vs[1].(int)]
	}).(MetricSettingsResponseOutput)
}

// The trigger that results in a scaling action.
type MetricTrigger struct {
	// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
	Dimensions []ScaleRuleMetricDimension `pulumi:"dimensions"`
	// a value indicating whether metric should divide per instance.
	DividePerInstance *bool `pulumi:"dividePerInstance"`
	// the name of the metric that defines what the rule monitors.
	MetricName string `pulumi:"metricName"`
	// the namespace of the metric that defines what the rule monitors.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// the location of the resource the rule monitors.
	MetricResourceLocation *string `pulumi:"metricResourceLocation"`
	// the resource identifier of the resource the rule monitors.
	MetricResourceUri string `pulumi:"metricResourceUri"`
	// the operator that is used to compare the metric data and the threshold.
	Operator ComparisonOperationType `pulumi:"operator"`
	// the metric statistic type. How the metrics from multiple instances are combined.
	Statistic MetricStatisticType `pulumi:"statistic"`
	// the threshold of the metric that triggers the scale action.
	Threshold float64 `pulumi:"threshold"`
	// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
	TimeAggregation TimeAggregationType `pulumi:"timeAggregation"`
	// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
	TimeGrain string `pulumi:"timeGrain"`
	// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
	TimeWindow string `pulumi:"timeWindow"`
}

// MetricTriggerInput is an input type that accepts MetricTriggerArgs and MetricTriggerOutput values.
// You can construct a concrete instance of `MetricTriggerInput` via:
//
//	MetricTriggerArgs{...}
type MetricTriggerInput interface {
	pulumi.Input

	ToMetricTriggerOutput() MetricTriggerOutput
	ToMetricTriggerOutputWithContext(context.Context) MetricTriggerOutput
}

// The trigger that results in a scaling action.
type MetricTriggerArgs struct {
	// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
	Dimensions ScaleRuleMetricDimensionArrayInput `pulumi:"dimensions"`
	// a value indicating whether metric should divide per instance.
	DividePerInstance pulumi.BoolPtrInput `pulumi:"dividePerInstance"`
	// the name of the metric that defines what the rule monitors.
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// the namespace of the metric that defines what the rule monitors.
	MetricNamespace pulumi.StringPtrInput `pulumi:"metricNamespace"`
	// the location of the resource the rule monitors.
	MetricResourceLocation pulumi.StringPtrInput `pulumi:"metricResourceLocation"`
	// the resource identifier of the resource the rule monitors.
	MetricResourceUri pulumi.StringInput `pulumi:"metricResourceUri"`
	// the operator that is used to compare the metric data and the threshold.
	Operator ComparisonOperationTypeInput `pulumi:"operator"`
	// the metric statistic type. How the metrics from multiple instances are combined.
	Statistic MetricStatisticTypeInput `pulumi:"statistic"`
	// the threshold of the metric that triggers the scale action.
	Threshold pulumi.Float64Input `pulumi:"threshold"`
	// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
	TimeAggregation TimeAggregationTypeInput `pulumi:"timeAggregation"`
	// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
	// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
	TimeWindow pulumi.StringInput `pulumi:"timeWindow"`
}

func (MetricTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricTrigger)(nil)).Elem()
}

func (i MetricTriggerArgs) ToMetricTriggerOutput() MetricTriggerOutput {
	return i.ToMetricTriggerOutputWithContext(context.Background())
}

func (i MetricTriggerArgs) ToMetricTriggerOutputWithContext(ctx context.Context) MetricTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricTriggerOutput)
}

// The trigger that results in a scaling action.
type MetricTriggerOutput struct{ *pulumi.OutputState }

func (MetricTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricTrigger)(nil)).Elem()
}

func (o MetricTriggerOutput) ToMetricTriggerOutput() MetricTriggerOutput {
	return o
}

func (o MetricTriggerOutput) ToMetricTriggerOutputWithContext(ctx context.Context) MetricTriggerOutput {
	return o
}

// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
func (o MetricTriggerOutput) Dimensions() ScaleRuleMetricDimensionArrayOutput {
	return o.ApplyT(func(v MetricTrigger) []ScaleRuleMetricDimension { return v.Dimensions }).(ScaleRuleMetricDimensionArrayOutput)
}

// a value indicating whether metric should divide per instance.
func (o MetricTriggerOutput) DividePerInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricTrigger) *bool { return v.DividePerInstance }).(pulumi.BoolPtrOutput)
}

// the name of the metric that defines what the rule monitors.
func (o MetricTriggerOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTrigger) string { return v.MetricName }).(pulumi.StringOutput)
}

// the namespace of the metric that defines what the rule monitors.
func (o MetricTriggerOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricTrigger) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// the location of the resource the rule monitors.
func (o MetricTriggerOutput) MetricResourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricTrigger) *string { return v.MetricResourceLocation }).(pulumi.StringPtrOutput)
}

// the resource identifier of the resource the rule monitors.
func (o MetricTriggerOutput) MetricResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTrigger) string { return v.MetricResourceUri }).(pulumi.StringOutput)
}

// the operator that is used to compare the metric data and the threshold.
func (o MetricTriggerOutput) Operator() ComparisonOperationTypeOutput {
	return o.ApplyT(func(v MetricTrigger) ComparisonOperationType { return v.Operator }).(ComparisonOperationTypeOutput)
}

// the metric statistic type. How the metrics from multiple instances are combined.
func (o MetricTriggerOutput) Statistic() MetricStatisticTypeOutput {
	return o.ApplyT(func(v MetricTrigger) MetricStatisticType { return v.Statistic }).(MetricStatisticTypeOutput)
}

// the threshold of the metric that triggers the scale action.
func (o MetricTriggerOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricTrigger) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
func (o MetricTriggerOutput) TimeAggregation() TimeAggregationTypeOutput {
	return o.ApplyT(func(v MetricTrigger) TimeAggregationType { return v.TimeAggregation }).(TimeAggregationTypeOutput)
}

// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
func (o MetricTriggerOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTrigger) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
func (o MetricTriggerOutput) TimeWindow() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTrigger) string { return v.TimeWindow }).(pulumi.StringOutput)
}

// The trigger that results in a scaling action.
type MetricTriggerResponse struct {
	// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
	Dimensions []ScaleRuleMetricDimensionResponse `pulumi:"dimensions"`
	// a value indicating whether metric should divide per instance.
	DividePerInstance *bool `pulumi:"dividePerInstance"`
	// the name of the metric that defines what the rule monitors.
	MetricName string `pulumi:"metricName"`
	// the namespace of the metric that defines what the rule monitors.
	MetricNamespace *string `pulumi:"metricNamespace"`
	// the location of the resource the rule monitors.
	MetricResourceLocation *string `pulumi:"metricResourceLocation"`
	// the resource identifier of the resource the rule monitors.
	MetricResourceUri string `pulumi:"metricResourceUri"`
	// the operator that is used to compare the metric data and the threshold.
	Operator string `pulumi:"operator"`
	// the metric statistic type. How the metrics from multiple instances are combined.
	Statistic string `pulumi:"statistic"`
	// the threshold of the metric that triggers the scale action.
	Threshold float64 `pulumi:"threshold"`
	// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
	TimeAggregation string `pulumi:"timeAggregation"`
	// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
	TimeGrain string `pulumi:"timeGrain"`
	// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
	TimeWindow string `pulumi:"timeWindow"`
}

// The trigger that results in a scaling action.
type MetricTriggerResponseOutput struct{ *pulumi.OutputState }

func (MetricTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricTriggerResponse)(nil)).Elem()
}

func (o MetricTriggerResponseOutput) ToMetricTriggerResponseOutput() MetricTriggerResponseOutput {
	return o
}

func (o MetricTriggerResponseOutput) ToMetricTriggerResponseOutputWithContext(ctx context.Context) MetricTriggerResponseOutput {
	return o
}

// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
func (o MetricTriggerResponseOutput) Dimensions() ScaleRuleMetricDimensionResponseArrayOutput {
	return o.ApplyT(func(v MetricTriggerResponse) []ScaleRuleMetricDimensionResponse { return v.Dimensions }).(ScaleRuleMetricDimensionResponseArrayOutput)
}

// a value indicating whether metric should divide per instance.
func (o MetricTriggerResponseOutput) DividePerInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MetricTriggerResponse) *bool { return v.DividePerInstance }).(pulumi.BoolPtrOutput)
}

// the name of the metric that defines what the rule monitors.
func (o MetricTriggerResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// the namespace of the metric that defines what the rule monitors.
func (o MetricTriggerResponseOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricTriggerResponse) *string { return v.MetricNamespace }).(pulumi.StringPtrOutput)
}

// the location of the resource the rule monitors.
func (o MetricTriggerResponseOutput) MetricResourceLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetricTriggerResponse) *string { return v.MetricResourceLocation }).(pulumi.StringPtrOutput)
}

// the resource identifier of the resource the rule monitors.
func (o MetricTriggerResponseOutput) MetricResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.MetricResourceUri }).(pulumi.StringOutput)
}

// the operator that is used to compare the metric data and the threshold.
func (o MetricTriggerResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// the metric statistic type. How the metrics from multiple instances are combined.
func (o MetricTriggerResponseOutput) Statistic() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.Statistic }).(pulumi.StringOutput)
}

// the threshold of the metric that triggers the scale action.
func (o MetricTriggerResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v MetricTriggerResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
func (o MetricTriggerResponseOutput) TimeAggregation() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.TimeAggregation }).(pulumi.StringOutput)
}

// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.
func (o MetricTriggerResponseOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
func (o MetricTriggerResponseOutput) TimeWindow() pulumi.StringOutput {
	return o.ApplyT(func(v MetricTriggerResponse) string { return v.TimeWindow }).(pulumi.StringOutput)
}

// Settings for automatically discovering entities for the health model.
type ModelDiscoverySettings struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
	Identity *string `pulumi:"identity"`
	// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
	Scope string `pulumi:"scope"`
}

// ModelDiscoverySettingsInput is an input type that accepts ModelDiscoverySettingsArgs and ModelDiscoverySettingsOutput values.
// You can construct a concrete instance of `ModelDiscoverySettingsInput` via:
//
//	ModelDiscoverySettingsArgs{...}
type ModelDiscoverySettingsInput interface {
	pulumi.Input

	ToModelDiscoverySettingsOutput() ModelDiscoverySettingsOutput
	ToModelDiscoverySettingsOutputWithContext(context.Context) ModelDiscoverySettingsOutput
}

// Settings for automatically discovering entities for the health model.
type ModelDiscoverySettingsArgs struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals pulumi.StringInput `pulumi:"addRecommendedSignals"`
	// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
	// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (ModelDiscoverySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDiscoverySettings)(nil)).Elem()
}

func (i ModelDiscoverySettingsArgs) ToModelDiscoverySettingsOutput() ModelDiscoverySettingsOutput {
	return i.ToModelDiscoverySettingsOutputWithContext(context.Background())
}

func (i ModelDiscoverySettingsArgs) ToModelDiscoverySettingsOutputWithContext(ctx context.Context) ModelDiscoverySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDiscoverySettingsOutput)
}

func (i ModelDiscoverySettingsArgs) ToModelDiscoverySettingsPtrOutput() ModelDiscoverySettingsPtrOutput {
	return i.ToModelDiscoverySettingsPtrOutputWithContext(context.Background())
}

func (i ModelDiscoverySettingsArgs) ToModelDiscoverySettingsPtrOutputWithContext(ctx context.Context) ModelDiscoverySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDiscoverySettingsOutput).ToModelDiscoverySettingsPtrOutputWithContext(ctx)
}

// ModelDiscoverySettingsPtrInput is an input type that accepts ModelDiscoverySettingsArgs, ModelDiscoverySettingsPtr and ModelDiscoverySettingsPtrOutput values.
// You can construct a concrete instance of `ModelDiscoverySettingsPtrInput` via:
//
//	        ModelDiscoverySettingsArgs{...}
//
//	or:
//
//	        nil
type ModelDiscoverySettingsPtrInput interface {
	pulumi.Input

	ToModelDiscoverySettingsPtrOutput() ModelDiscoverySettingsPtrOutput
	ToModelDiscoverySettingsPtrOutputWithContext(context.Context) ModelDiscoverySettingsPtrOutput
}

type modelDiscoverySettingsPtrType ModelDiscoverySettingsArgs

func ModelDiscoverySettingsPtr(v *ModelDiscoverySettingsArgs) ModelDiscoverySettingsPtrInput {
	return (*modelDiscoverySettingsPtrType)(v)
}

func (*modelDiscoverySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDiscoverySettings)(nil)).Elem()
}

func (i *modelDiscoverySettingsPtrType) ToModelDiscoverySettingsPtrOutput() ModelDiscoverySettingsPtrOutput {
	return i.ToModelDiscoverySettingsPtrOutputWithContext(context.Background())
}

func (i *modelDiscoverySettingsPtrType) ToModelDiscoverySettingsPtrOutputWithContext(ctx context.Context) ModelDiscoverySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDiscoverySettingsPtrOutput)
}

// Settings for automatically discovering entities for the health model.
type ModelDiscoverySettingsOutput struct{ *pulumi.OutputState }

func (ModelDiscoverySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDiscoverySettings)(nil)).Elem()
}

func (o ModelDiscoverySettingsOutput) ToModelDiscoverySettingsOutput() ModelDiscoverySettingsOutput {
	return o
}

func (o ModelDiscoverySettingsOutput) ToModelDiscoverySettingsOutputWithContext(ctx context.Context) ModelDiscoverySettingsOutput {
	return o
}

func (o ModelDiscoverySettingsOutput) ToModelDiscoverySettingsPtrOutput() ModelDiscoverySettingsPtrOutput {
	return o.ToModelDiscoverySettingsPtrOutputWithContext(context.Background())
}

func (o ModelDiscoverySettingsOutput) ToModelDiscoverySettingsPtrOutputWithContext(ctx context.Context) ModelDiscoverySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelDiscoverySettings) *ModelDiscoverySettings {
		return &v
	}).(ModelDiscoverySettingsPtrOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ModelDiscoverySettingsOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDiscoverySettings) string { return v.AddRecommendedSignals }).(pulumi.StringOutput)
}

// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
func (o ModelDiscoverySettingsOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDiscoverySettings) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
func (o ModelDiscoverySettingsOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDiscoverySettings) string { return v.Scope }).(pulumi.StringOutput)
}

type ModelDiscoverySettingsPtrOutput struct{ *pulumi.OutputState }

func (ModelDiscoverySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDiscoverySettings)(nil)).Elem()
}

func (o ModelDiscoverySettingsPtrOutput) ToModelDiscoverySettingsPtrOutput() ModelDiscoverySettingsPtrOutput {
	return o
}

func (o ModelDiscoverySettingsPtrOutput) ToModelDiscoverySettingsPtrOutputWithContext(ctx context.Context) ModelDiscoverySettingsPtrOutput {
	return o
}

func (o ModelDiscoverySettingsPtrOutput) Elem() ModelDiscoverySettingsOutput {
	return o.ApplyT(func(v *ModelDiscoverySettings) ModelDiscoverySettings {
		if v != nil {
			return *v
		}
		var ret ModelDiscoverySettings
		return ret
	}).(ModelDiscoverySettingsOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ModelDiscoverySettingsPtrOutput) AddRecommendedSignals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettings) *string {
		if v == nil {
			return nil
		}
		return &v.AddRecommendedSignals
	}).(pulumi.StringPtrOutput)
}

// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
func (o ModelDiscoverySettingsPtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettings) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
func (o ModelDiscoverySettingsPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettings) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// Settings for automatically discovering entities for the health model.
type ModelDiscoverySettingsResponse struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
	Identity *string `pulumi:"identity"`
	// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
	Scope string `pulumi:"scope"`
}

// Settings for automatically discovering entities for the health model.
type ModelDiscoverySettingsResponseOutput struct{ *pulumi.OutputState }

func (ModelDiscoverySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDiscoverySettingsResponse)(nil)).Elem()
}

func (o ModelDiscoverySettingsResponseOutput) ToModelDiscoverySettingsResponseOutput() ModelDiscoverySettingsResponseOutput {
	return o
}

func (o ModelDiscoverySettingsResponseOutput) ToModelDiscoverySettingsResponseOutputWithContext(ctx context.Context) ModelDiscoverySettingsResponseOutput {
	return o
}

// Whether to add all recommended signals to the discovered entities.
func (o ModelDiscoverySettingsResponseOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDiscoverySettingsResponse) string { return v.AddRecommendedSignals }).(pulumi.StringOutput)
}

// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
func (o ModelDiscoverySettingsResponseOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDiscoverySettingsResponse) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
func (o ModelDiscoverySettingsResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDiscoverySettingsResponse) string { return v.Scope }).(pulumi.StringOutput)
}

type ModelDiscoverySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ModelDiscoverySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDiscoverySettingsResponse)(nil)).Elem()
}

func (o ModelDiscoverySettingsResponsePtrOutput) ToModelDiscoverySettingsResponsePtrOutput() ModelDiscoverySettingsResponsePtrOutput {
	return o
}

func (o ModelDiscoverySettingsResponsePtrOutput) ToModelDiscoverySettingsResponsePtrOutputWithContext(ctx context.Context) ModelDiscoverySettingsResponsePtrOutput {
	return o
}

func (o ModelDiscoverySettingsResponsePtrOutput) Elem() ModelDiscoverySettingsResponseOutput {
	return o.ApplyT(func(v *ModelDiscoverySettingsResponse) ModelDiscoverySettingsResponse {
		if v != nil {
			return *v
		}
		var ret ModelDiscoverySettingsResponse
		return ret
	}).(ModelDiscoverySettingsResponseOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ModelDiscoverySettingsResponsePtrOutput) AddRecommendedSignals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AddRecommendedSignals
	}).(pulumi.StringPtrOutput)
}

// Which Managed Identity of the health model to use for discovery. Defaults to SystemAssigned, if not set. Can be set to 'SystemAssigned' or to the resource id of a user-assigned managed identity which is linked to the health model.
func (o ModelDiscoverySettingsResponsePtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// The scope from which entities should be automatically discovered. For example, the resource id of a Service Group.
func (o ModelDiscoverySettingsResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDiscoverySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// Monitoring account destination.
type MonitoringAccountDestination struct {
	// The resource ID of the monitoring account.
	AccountResourceId *string `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// MonitoringAccountDestinationInput is an input type that accepts MonitoringAccountDestinationArgs and MonitoringAccountDestinationOutput values.
// You can construct a concrete instance of `MonitoringAccountDestinationInput` via:
//
//	MonitoringAccountDestinationArgs{...}
type MonitoringAccountDestinationInput interface {
	pulumi.Input

	ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput
	ToMonitoringAccountDestinationOutputWithContext(context.Context) MonitoringAccountDestinationOutput
}

// Monitoring account destination.
type MonitoringAccountDestinationArgs struct {
	// The resource ID of the monitoring account.
	AccountResourceId pulumi.StringPtrInput `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (MonitoringAccountDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestination)(nil)).Elem()
}

func (i MonitoringAccountDestinationArgs) ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput {
	return i.ToMonitoringAccountDestinationOutputWithContext(context.Background())
}

func (i MonitoringAccountDestinationArgs) ToMonitoringAccountDestinationOutputWithContext(ctx context.Context) MonitoringAccountDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAccountDestinationOutput)
}

// MonitoringAccountDestinationArrayInput is an input type that accepts MonitoringAccountDestinationArray and MonitoringAccountDestinationArrayOutput values.
// You can construct a concrete instance of `MonitoringAccountDestinationArrayInput` via:
//
//	MonitoringAccountDestinationArray{ MonitoringAccountDestinationArgs{...} }
type MonitoringAccountDestinationArrayInput interface {
	pulumi.Input

	ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput
	ToMonitoringAccountDestinationArrayOutputWithContext(context.Context) MonitoringAccountDestinationArrayOutput
}

type MonitoringAccountDestinationArray []MonitoringAccountDestinationInput

func (MonitoringAccountDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestination)(nil)).Elem()
}

func (i MonitoringAccountDestinationArray) ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput {
	return i.ToMonitoringAccountDestinationArrayOutputWithContext(context.Background())
}

func (i MonitoringAccountDestinationArray) ToMonitoringAccountDestinationArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAccountDestinationArrayOutput)
}

// Monitoring account destination.
type MonitoringAccountDestinationOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestination)(nil)).Elem()
}

func (o MonitoringAccountDestinationOutput) ToMonitoringAccountDestinationOutput() MonitoringAccountDestinationOutput {
	return o
}

func (o MonitoringAccountDestinationOutput) ToMonitoringAccountDestinationOutputWithContext(ctx context.Context) MonitoringAccountDestinationOutput {
	return o
}

// The resource ID of the monitoring account.
func (o MonitoringAccountDestinationOutput) AccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestination) *string { return v.AccountResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MonitoringAccountDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MonitoringAccountDestinationArrayOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestination)(nil)).Elem()
}

func (o MonitoringAccountDestinationArrayOutput) ToMonitoringAccountDestinationArrayOutput() MonitoringAccountDestinationArrayOutput {
	return o
}

func (o MonitoringAccountDestinationArrayOutput) ToMonitoringAccountDestinationArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationArrayOutput {
	return o
}

func (o MonitoringAccountDestinationArrayOutput) Index(i pulumi.IntInput) MonitoringAccountDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringAccountDestination {
		return vs[0].([]MonitoringAccountDestination)[vs[1].(int)]
	}).(MonitoringAccountDestinationOutput)
}

// Monitoring account destination.
type MonitoringAccountDestinationResponse struct {
	// The immutable ID  of the account.
	AccountId string `pulumi:"accountId"`
	// The resource ID of the monitoring account.
	AccountResourceId *string `pulumi:"accountResourceId"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
}

// Monitoring account destination.
type MonitoringAccountDestinationResponseOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAccountDestinationResponse)(nil)).Elem()
}

func (o MonitoringAccountDestinationResponseOutput) ToMonitoringAccountDestinationResponseOutput() MonitoringAccountDestinationResponseOutput {
	return o
}

func (o MonitoringAccountDestinationResponseOutput) ToMonitoringAccountDestinationResponseOutputWithContext(ctx context.Context) MonitoringAccountDestinationResponseOutput {
	return o
}

// The immutable ID  of the account.
func (o MonitoringAccountDestinationResponseOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) string { return v.AccountId }).(pulumi.StringOutput)
}

// The resource ID of the monitoring account.
func (o MonitoringAccountDestinationResponseOutput) AccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) *string { return v.AccountResourceId }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o MonitoringAccountDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringAccountDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type MonitoringAccountDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (MonitoringAccountDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAccountDestinationResponse)(nil)).Elem()
}

func (o MonitoringAccountDestinationResponseArrayOutput) ToMonitoringAccountDestinationResponseArrayOutput() MonitoringAccountDestinationResponseArrayOutput {
	return o
}

func (o MonitoringAccountDestinationResponseArrayOutput) ToMonitoringAccountDestinationResponseArrayOutputWithContext(ctx context.Context) MonitoringAccountDestinationResponseArrayOutput {
	return o
}

func (o MonitoringAccountDestinationResponseArrayOutput) Index(i pulumi.IntInput) MonitoringAccountDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringAccountDestinationResponse {
		return vs[0].([]MonitoringAccountDestinationResponse)[vs[1].(int)]
	}).(MonitoringAccountDestinationResponseOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfiguration struct {
	// External networking mode.
	ExternalNetworkingMode string `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host *string `pulumi:"host"`
	// Networking routes configuration.
	Routes []NetworkingRoute `pulumi:"routes"`
}

// NetworkingConfigurationInput is an input type that accepts NetworkingConfigurationArgs and NetworkingConfigurationOutput values.
// You can construct a concrete instance of `NetworkingConfigurationInput` via:
//
//	NetworkingConfigurationArgs{...}
type NetworkingConfigurationInput interface {
	pulumi.Input

	ToNetworkingConfigurationOutput() NetworkingConfigurationOutput
	ToNetworkingConfigurationOutputWithContext(context.Context) NetworkingConfigurationOutput
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationArgs struct {
	// External networking mode.
	ExternalNetworkingMode pulumi.StringInput `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Networking routes configuration.
	Routes NetworkingRouteArrayInput `pulumi:"routes"`
}

func (NetworkingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfiguration)(nil)).Elem()
}

func (i NetworkingConfigurationArgs) ToNetworkingConfigurationOutput() NetworkingConfigurationOutput {
	return i.ToNetworkingConfigurationOutputWithContext(context.Background())
}

func (i NetworkingConfigurationArgs) ToNetworkingConfigurationOutputWithContext(ctx context.Context) NetworkingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingConfigurationOutput)
}

// NetworkingConfigurationArrayInput is an input type that accepts NetworkingConfigurationArray and NetworkingConfigurationArrayOutput values.
// You can construct a concrete instance of `NetworkingConfigurationArrayInput` via:
//
//	NetworkingConfigurationArray{ NetworkingConfigurationArgs{...} }
type NetworkingConfigurationArrayInput interface {
	pulumi.Input

	ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput
	ToNetworkingConfigurationArrayOutputWithContext(context.Context) NetworkingConfigurationArrayOutput
}

type NetworkingConfigurationArray []NetworkingConfigurationInput

func (NetworkingConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfiguration)(nil)).Elem()
}

func (i NetworkingConfigurationArray) ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput {
	return i.ToNetworkingConfigurationArrayOutputWithContext(context.Background())
}

func (i NetworkingConfigurationArray) ToNetworkingConfigurationArrayOutputWithContext(ctx context.Context) NetworkingConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingConfigurationArrayOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfiguration)(nil)).Elem()
}

func (o NetworkingConfigurationOutput) ToNetworkingConfigurationOutput() NetworkingConfigurationOutput {
	return o
}

func (o NetworkingConfigurationOutput) ToNetworkingConfigurationOutputWithContext(ctx context.Context) NetworkingConfigurationOutput {
	return o
}

// External networking mode.
func (o NetworkingConfigurationOutput) ExternalNetworkingMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingConfiguration) string { return v.ExternalNetworkingMode }).(pulumi.StringOutput)
}

// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
func (o NetworkingConfigurationOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingConfiguration) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Networking routes configuration.
func (o NetworkingConfigurationOutput) Routes() NetworkingRouteArrayOutput {
	return o.ApplyT(func(v NetworkingConfiguration) []NetworkingRoute { return v.Routes }).(NetworkingRouteArrayOutput)
}

type NetworkingConfigurationArrayOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfiguration)(nil)).Elem()
}

func (o NetworkingConfigurationArrayOutput) ToNetworkingConfigurationArrayOutput() NetworkingConfigurationArrayOutput {
	return o
}

func (o NetworkingConfigurationArrayOutput) ToNetworkingConfigurationArrayOutputWithContext(ctx context.Context) NetworkingConfigurationArrayOutput {
	return o
}

func (o NetworkingConfigurationArrayOutput) Index(i pulumi.IntInput) NetworkingConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingConfiguration {
		return vs[0].([]NetworkingConfiguration)[vs[1].(int)]
	}).(NetworkingConfigurationOutput)
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationResponse struct {
	// External networking mode.
	ExternalNetworkingMode string `pulumi:"externalNetworkingMode"`
	// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
	Host *string `pulumi:"host"`
	// Networking routes configuration.
	Routes []NetworkingRouteResponse `pulumi:"routes"`
}

// Networking configuration for the pipeline group instance.
type NetworkingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingConfigurationResponse)(nil)).Elem()
}

func (o NetworkingConfigurationResponseOutput) ToNetworkingConfigurationResponseOutput() NetworkingConfigurationResponseOutput {
	return o
}

func (o NetworkingConfigurationResponseOutput) ToNetworkingConfigurationResponseOutputWithContext(ctx context.Context) NetworkingConfigurationResponseOutput {
	return o
}

// External networking mode.
func (o NetworkingConfigurationResponseOutput) ExternalNetworkingMode() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) string { return v.ExternalNetworkingMode }).(pulumi.StringOutput)
}

// The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.
func (o NetworkingConfigurationResponseOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Networking routes configuration.
func (o NetworkingConfigurationResponseOutput) Routes() NetworkingRouteResponseArrayOutput {
	return o.ApplyT(func(v NetworkingConfigurationResponse) []NetworkingRouteResponse { return v.Routes }).(NetworkingRouteResponseArrayOutput)
}

type NetworkingConfigurationResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkingConfigurationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingConfigurationResponse)(nil)).Elem()
}

func (o NetworkingConfigurationResponseArrayOutput) ToNetworkingConfigurationResponseArrayOutput() NetworkingConfigurationResponseArrayOutput {
	return o
}

func (o NetworkingConfigurationResponseArrayOutput) ToNetworkingConfigurationResponseArrayOutputWithContext(ctx context.Context) NetworkingConfigurationResponseArrayOutput {
	return o
}

func (o NetworkingConfigurationResponseArrayOutput) Index(i pulumi.IntInput) NetworkingConfigurationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingConfigurationResponse {
		return vs[0].([]NetworkingConfigurationResponse)[vs[1].(int)]
	}).(NetworkingConfigurationResponseOutput)
}

// Networking route configuration.
type NetworkingRoute struct {
	// Route path.
	Path *string `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port *int `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver string `pulumi:"receiver"`
	// Route subdomain.
	Subdomain *string `pulumi:"subdomain"`
}

// NetworkingRouteInput is an input type that accepts NetworkingRouteArgs and NetworkingRouteOutput values.
// You can construct a concrete instance of `NetworkingRouteInput` via:
//
//	NetworkingRouteArgs{...}
type NetworkingRouteInput interface {
	pulumi.Input

	ToNetworkingRouteOutput() NetworkingRouteOutput
	ToNetworkingRouteOutputWithContext(context.Context) NetworkingRouteOutput
}

// Networking route configuration.
type NetworkingRouteArgs struct {
	// Route path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver pulumi.StringInput `pulumi:"receiver"`
	// Route subdomain.
	Subdomain pulumi.StringPtrInput `pulumi:"subdomain"`
}

func (NetworkingRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRoute)(nil)).Elem()
}

func (i NetworkingRouteArgs) ToNetworkingRouteOutput() NetworkingRouteOutput {
	return i.ToNetworkingRouteOutputWithContext(context.Background())
}

func (i NetworkingRouteArgs) ToNetworkingRouteOutputWithContext(ctx context.Context) NetworkingRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteOutput)
}

// NetworkingRouteArrayInput is an input type that accepts NetworkingRouteArray and NetworkingRouteArrayOutput values.
// You can construct a concrete instance of `NetworkingRouteArrayInput` via:
//
//	NetworkingRouteArray{ NetworkingRouteArgs{...} }
type NetworkingRouteArrayInput interface {
	pulumi.Input

	ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput
	ToNetworkingRouteArrayOutputWithContext(context.Context) NetworkingRouteArrayOutput
}

type NetworkingRouteArray []NetworkingRouteInput

func (NetworkingRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRoute)(nil)).Elem()
}

func (i NetworkingRouteArray) ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput {
	return i.ToNetworkingRouteArrayOutputWithContext(context.Background())
}

func (i NetworkingRouteArray) ToNetworkingRouteArrayOutputWithContext(ctx context.Context) NetworkingRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingRouteArrayOutput)
}

// Networking route configuration.
type NetworkingRouteOutput struct{ *pulumi.OutputState }

func (NetworkingRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRoute)(nil)).Elem()
}

func (o NetworkingRouteOutput) ToNetworkingRouteOutput() NetworkingRouteOutput {
	return o
}

func (o NetworkingRouteOutput) ToNetworkingRouteOutputWithContext(ctx context.Context) NetworkingRouteOutput {
	return o
}

// Route path.
func (o NetworkingRouteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
func (o NetworkingRouteOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the previously defined receiver.
func (o NetworkingRouteOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingRoute) string { return v.Receiver }).(pulumi.StringOutput)
}

// Route subdomain.
func (o NetworkingRouteOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRoute) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

type NetworkingRouteArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRoute)(nil)).Elem()
}

func (o NetworkingRouteArrayOutput) ToNetworkingRouteArrayOutput() NetworkingRouteArrayOutput {
	return o
}

func (o NetworkingRouteArrayOutput) ToNetworkingRouteArrayOutputWithContext(ctx context.Context) NetworkingRouteArrayOutput {
	return o
}

func (o NetworkingRouteArrayOutput) Index(i pulumi.IntInput) NetworkingRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingRoute {
		return vs[0].([]NetworkingRoute)[vs[1].(int)]
	}).(NetworkingRouteOutput)
}

// Networking route configuration.
type NetworkingRouteResponse struct {
	// Route path.
	Path *string `pulumi:"path"`
	// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
	Port *int `pulumi:"port"`
	// The name of the previously defined receiver.
	Receiver string `pulumi:"receiver"`
	// Route subdomain.
	Subdomain *string `pulumi:"subdomain"`
}

// Networking route configuration.
type NetworkingRouteResponseOutput struct{ *pulumi.OutputState }

func (NetworkingRouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkingRouteResponse)(nil)).Elem()
}

func (o NetworkingRouteResponseOutput) ToNetworkingRouteResponseOutput() NetworkingRouteResponseOutput {
	return o
}

func (o NetworkingRouteResponseOutput) ToNetworkingRouteResponseOutputWithContext(ctx context.Context) NetworkingRouteResponseOutput {
	return o
}

// Route path.
func (o NetworkingRouteResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The port that will be configured externally. If not specified, it will use the port from the receiver definition.
func (o NetworkingRouteResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the previously defined receiver.
func (o NetworkingRouteResponseOutput) Receiver() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) string { return v.Receiver }).(pulumi.StringOutput)
}

// Route subdomain.
func (o NetworkingRouteResponseOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkingRouteResponse) *string { return v.Subdomain }).(pulumi.StringPtrOutput)
}

type NetworkingRouteResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkingRouteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkingRouteResponse)(nil)).Elem()
}

func (o NetworkingRouteResponseArrayOutput) ToNetworkingRouteResponseArrayOutput() NetworkingRouteResponseArrayOutput {
	return o
}

func (o NetworkingRouteResponseArrayOutput) ToNetworkingRouteResponseArrayOutputWithContext(ctx context.Context) NetworkingRouteResponseArrayOutput {
	return o
}

func (o NetworkingRouteResponseArrayOutput) Index(i pulumi.IntInput) NetworkingRouteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkingRouteResponse {
		return vs[0].([]NetworkingRouteResponse)[vs[1].(int)]
	}).(NetworkingRouteResponseOutput)
}

// Details about the origin of the entity - the source that added it to the issue
type OriginResponse struct {
	// The ID of the origin - for example, in case of 'Manual', the user ID/app ID, and in case of 'Automatic', the name of the automatic system
	AddedBy string `pulumi:"addedBy"`
	// The source of the origin - Manual or Automatic
	AddedByType string `pulumi:"addedByType"`
}

// Details about the origin of the entity - the source that added it to the issue
type OriginResponseOutput struct{ *pulumi.OutputState }

func (OriginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginResponse)(nil)).Elem()
}

func (o OriginResponseOutput) ToOriginResponseOutput() OriginResponseOutput {
	return o
}

func (o OriginResponseOutput) ToOriginResponseOutputWithContext(ctx context.Context) OriginResponseOutput {
	return o
}

// The ID of the origin - for example, in case of 'Manual', the user ID/app ID, and in case of 'Automatic', the name of the automatic system
func (o OriginResponseOutput) AddedBy() pulumi.StringOutput {
	return o.ApplyT(func(v OriginResponse) string { return v.AddedBy }).(pulumi.StringOutput)
}

// The source of the origin - Manual or Automatic
func (o OriginResponseOutput) AddedByType() pulumi.StringOutput {
	return o.ApplyT(func(v OriginResponse) string { return v.AddedByType }).(pulumi.StringOutput)
}

// OTLP Receiver.
type OtlpReceiver struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
}

// OtlpReceiverInput is an input type that accepts OtlpReceiverArgs and OtlpReceiverOutput values.
// You can construct a concrete instance of `OtlpReceiverInput` via:
//
//	OtlpReceiverArgs{...}
type OtlpReceiverInput interface {
	pulumi.Input

	ToOtlpReceiverOutput() OtlpReceiverOutput
	ToOtlpReceiverOutputWithContext(context.Context) OtlpReceiverOutput
}

// OTLP Receiver.
type OtlpReceiverArgs struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
}

func (OtlpReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiver)(nil)).Elem()
}

func (i OtlpReceiverArgs) ToOtlpReceiverOutput() OtlpReceiverOutput {
	return i.ToOtlpReceiverOutputWithContext(context.Background())
}

func (i OtlpReceiverArgs) ToOtlpReceiverOutputWithContext(ctx context.Context) OtlpReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverOutput)
}

func (i OtlpReceiverArgs) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return i.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (i OtlpReceiverArgs) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverOutput).ToOtlpReceiverPtrOutputWithContext(ctx)
}

// OtlpReceiverPtrInput is an input type that accepts OtlpReceiverArgs, OtlpReceiverPtr and OtlpReceiverPtrOutput values.
// You can construct a concrete instance of `OtlpReceiverPtrInput` via:
//
//	        OtlpReceiverArgs{...}
//
//	or:
//
//	        nil
type OtlpReceiverPtrInput interface {
	pulumi.Input

	ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput
	ToOtlpReceiverPtrOutputWithContext(context.Context) OtlpReceiverPtrOutput
}

type otlpReceiverPtrType OtlpReceiverArgs

func OtlpReceiverPtr(v *OtlpReceiverArgs) OtlpReceiverPtrInput {
	return (*otlpReceiverPtrType)(v)
}

func (*otlpReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiver)(nil)).Elem()
}

func (i *otlpReceiverPtrType) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return i.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (i *otlpReceiverPtrType) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtlpReceiverPtrOutput)
}

// OTLP Receiver.
type OtlpReceiverOutput struct{ *pulumi.OutputState }

func (OtlpReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiver)(nil)).Elem()
}

func (o OtlpReceiverOutput) ToOtlpReceiverOutput() OtlpReceiverOutput {
	return o
}

func (o OtlpReceiverOutput) ToOtlpReceiverOutputWithContext(ctx context.Context) OtlpReceiverOutput {
	return o
}

func (o OtlpReceiverOutput) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return o.ToOtlpReceiverPtrOutputWithContext(context.Background())
}

func (o OtlpReceiverOutput) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OtlpReceiver) *OtlpReceiver {
		return &v
	}).(OtlpReceiverPtrOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v OtlpReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

type OtlpReceiverPtrOutput struct{ *pulumi.OutputState }

func (OtlpReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiver)(nil)).Elem()
}

func (o OtlpReceiverPtrOutput) ToOtlpReceiverPtrOutput() OtlpReceiverPtrOutput {
	return o
}

func (o OtlpReceiverPtrOutput) ToOtlpReceiverPtrOutputWithContext(ctx context.Context) OtlpReceiverPtrOutput {
	return o
}

func (o OtlpReceiverPtrOutput) Elem() OtlpReceiverOutput {
	return o.ApplyT(func(v *OtlpReceiver) OtlpReceiver {
		if v != nil {
			return *v
		}
		var ret OtlpReceiver
		return ret
	}).(OtlpReceiverOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtlpReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// OTLP Receiver.
type OtlpReceiverResponse struct {
	// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
}

// OTLP Receiver.
type OtlpReceiverResponseOutput struct{ *pulumi.OutputState }

func (OtlpReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OtlpReceiverResponse)(nil)).Elem()
}

func (o OtlpReceiverResponseOutput) ToOtlpReceiverResponseOutput() OtlpReceiverResponseOutput {
	return o
}

func (o OtlpReceiverResponseOutput) ToOtlpReceiverResponseOutputWithContext(ctx context.Context) OtlpReceiverResponseOutput {
	return o
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v OtlpReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

type OtlpReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (OtlpReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtlpReceiverResponse)(nil)).Elem()
}

func (o OtlpReceiverResponsePtrOutput) ToOtlpReceiverResponsePtrOutput() OtlpReceiverResponsePtrOutput {
	return o
}

func (o OtlpReceiverResponsePtrOutput) ToOtlpReceiverResponsePtrOutputWithContext(ctx context.Context) OtlpReceiverResponsePtrOutput {
	return o
}

func (o OtlpReceiverResponsePtrOutput) Elem() OtlpReceiverResponseOutput {
	return o.ApplyT(func(v *OtlpReceiverResponse) OtlpReceiverResponse {
		if v != nil {
			return *v
		}
		var ret OtlpReceiverResponse
		return ret
	}).(OtlpReceiverResponseOutput)
}

// OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.
func (o OtlpReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtlpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSource struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds *int `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// PerfCounterDataSourceInput is an input type that accepts PerfCounterDataSourceArgs and PerfCounterDataSourceOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceInput` via:
//
//	PerfCounterDataSourceArgs{...}
type PerfCounterDataSourceInput interface {
	pulumi.Input

	ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput
	ToPerfCounterDataSourceOutputWithContext(context.Context) PerfCounterDataSourceOutput
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceArgs struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers pulumi.StringArrayInput `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds pulumi.IntPtrInput `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PerfCounterDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return i.ToPerfCounterDataSourceOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArgs) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceOutput)
}

// PerfCounterDataSourceArrayInput is an input type that accepts PerfCounterDataSourceArray and PerfCounterDataSourceArrayOutput values.
// You can construct a concrete instance of `PerfCounterDataSourceArrayInput` via:
//
//	PerfCounterDataSourceArray{ PerfCounterDataSourceArgs{...} }
type PerfCounterDataSourceArrayInput interface {
	pulumi.Input

	ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput
	ToPerfCounterDataSourceArrayOutputWithContext(context.Context) PerfCounterDataSourceArrayOutput
}

type PerfCounterDataSourceArray []PerfCounterDataSourceInput

func (PerfCounterDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return i.ToPerfCounterDataSourceArrayOutputWithContext(context.Background())
}

func (i PerfCounterDataSourceArray) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PerfCounterDataSourceArrayOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutput() PerfCounterDataSourceOutput {
	return o
}

func (o PerfCounterDataSourceOutput) ToPerfCounterDataSourceOutputWithContext(ctx context.Context) PerfCounterDataSourceOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceOutput) SamplingFrequencyInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSource) *int { return v.SamplingFrequencyInSeconds }).(pulumi.IntPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PerfCounterDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSource)(nil)).Elem()
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutput() PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) ToPerfCounterDataSourceArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceArrayOutput {
	return o
}

func (o PerfCounterDataSourceArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSource {
		return vs[0].([]PerfCounterDataSource)[vs[1].(int)]
	}).(PerfCounterDataSourceOutput)
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponse struct {
	// A list of specifier names of the performance counters you want to collect.
	// Use a wildcard (*) to collect a counter for all instances.
	// To get a list of performance counters on Windows, run the command 'typeperf'.
	CounterSpecifiers []string `pulumi:"counterSpecifiers"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The number of seconds between consecutive counter measurements (samples).
	SamplingFrequencyInSeconds *int `pulumi:"samplingFrequencyInSeconds"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of which performance counters will be collected and how they will be collected by this data collection rule.
// Collected from both Windows and Linux machines where the counter is present.
type PerfCounterDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutput() PerfCounterDataSourceResponseOutput {
	return o
}

func (o PerfCounterDataSourceResponseOutput) ToPerfCounterDataSourceResponseOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseOutput {
	return o
}

// A list of specifier names of the performance counters you want to collect.
// Use a wildcard (*) to collect a counter for all instances.
// To get a list of performance counters on Windows, run the command 'typeperf'.
func (o PerfCounterDataSourceResponseOutput) CounterSpecifiers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.CounterSpecifiers }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PerfCounterDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The number of seconds between consecutive counter measurements (samples).
func (o PerfCounterDataSourceResponseOutput) SamplingFrequencyInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) *int { return v.SamplingFrequencyInSeconds }).(pulumi.IntPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o PerfCounterDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PerfCounterDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PerfCounterDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PerfCounterDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PerfCounterDataSourceResponse)(nil)).Elem()
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutput() PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) ToPerfCounterDataSourceResponseArrayOutputWithContext(ctx context.Context) PerfCounterDataSourceResponseArrayOutput {
	return o
}

func (o PerfCounterDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PerfCounterDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PerfCounterDataSourceResponse {
		return vs[0].([]PerfCounterDataSourceResponse)[vs[1].(int)]
	}).(PerfCounterDataSourceResponseOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurations struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName string `pulumi:"persistentVolumeName"`
}

// PersistenceConfigurationsInput is an input type that accepts PersistenceConfigurationsArgs and PersistenceConfigurationsOutput values.
// You can construct a concrete instance of `PersistenceConfigurationsInput` via:
//
//	PersistenceConfigurationsArgs{...}
type PersistenceConfigurationsInput interface {
	pulumi.Input

	ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput
	ToPersistenceConfigurationsOutputWithContext(context.Context) PersistenceConfigurationsOutput
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsArgs struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName pulumi.StringInput `pulumi:"persistentVolumeName"`
}

func (PersistenceConfigurationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurations)(nil)).Elem()
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput {
	return i.ToPersistenceConfigurationsOutputWithContext(context.Background())
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsOutputWithContext(ctx context.Context) PersistenceConfigurationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsOutput)
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return i.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (i PersistenceConfigurationsArgs) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsOutput).ToPersistenceConfigurationsPtrOutputWithContext(ctx)
}

// PersistenceConfigurationsPtrInput is an input type that accepts PersistenceConfigurationsArgs, PersistenceConfigurationsPtr and PersistenceConfigurationsPtrOutput values.
// You can construct a concrete instance of `PersistenceConfigurationsPtrInput` via:
//
//	        PersistenceConfigurationsArgs{...}
//
//	or:
//
//	        nil
type PersistenceConfigurationsPtrInput interface {
	pulumi.Input

	ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput
	ToPersistenceConfigurationsPtrOutputWithContext(context.Context) PersistenceConfigurationsPtrOutput
}

type persistenceConfigurationsPtrType PersistenceConfigurationsArgs

func PersistenceConfigurationsPtr(v *PersistenceConfigurationsArgs) PersistenceConfigurationsPtrInput {
	return (*persistenceConfigurationsPtrType)(v)
}

func (*persistenceConfigurationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurations)(nil)).Elem()
}

func (i *persistenceConfigurationsPtrType) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return i.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (i *persistenceConfigurationsPtrType) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigurationsPtrOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurations)(nil)).Elem()
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsOutput() PersistenceConfigurationsOutput {
	return o
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsOutputWithContext(ctx context.Context) PersistenceConfigurationsOutput {
	return o
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return o.ToPersistenceConfigurationsPtrOutputWithContext(context.Background())
}

func (o PersistenceConfigurationsOutput) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistenceConfigurations) *PersistenceConfigurations {
		return &v
	}).(PersistenceConfigurationsPtrOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsOutput) PersistentVolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigurations) string { return v.PersistentVolumeName }).(pulumi.StringOutput)
}

type PersistenceConfigurationsPtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurations)(nil)).Elem()
}

func (o PersistenceConfigurationsPtrOutput) ToPersistenceConfigurationsPtrOutput() PersistenceConfigurationsPtrOutput {
	return o
}

func (o PersistenceConfigurationsPtrOutput) ToPersistenceConfigurationsPtrOutputWithContext(ctx context.Context) PersistenceConfigurationsPtrOutput {
	return o
}

func (o PersistenceConfigurationsPtrOutput) Elem() PersistenceConfigurationsOutput {
	return o.ApplyT(func(v *PersistenceConfigurations) PersistenceConfigurations {
		if v != nil {
			return *v
		}
		var ret PersistenceConfigurations
		return ret
	}).(PersistenceConfigurationsOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsPtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfigurations) *string {
		if v == nil {
			return nil
		}
		return &v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsResponse struct {
	// The name of the mounted persistent volume.
	PersistentVolumeName string `pulumi:"persistentVolumeName"`
}

// Persistence options to all pipelines in the instance.
type PersistenceConfigurationsResponseOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigurationsResponse)(nil)).Elem()
}

func (o PersistenceConfigurationsResponseOutput) ToPersistenceConfigurationsResponseOutput() PersistenceConfigurationsResponseOutput {
	return o
}

func (o PersistenceConfigurationsResponseOutput) ToPersistenceConfigurationsResponseOutputWithContext(ctx context.Context) PersistenceConfigurationsResponseOutput {
	return o
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsResponseOutput) PersistentVolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigurationsResponse) string { return v.PersistentVolumeName }).(pulumi.StringOutput)
}

type PersistenceConfigurationsResponsePtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigurationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfigurationsResponse)(nil)).Elem()
}

func (o PersistenceConfigurationsResponsePtrOutput) ToPersistenceConfigurationsResponsePtrOutput() PersistenceConfigurationsResponsePtrOutput {
	return o
}

func (o PersistenceConfigurationsResponsePtrOutput) ToPersistenceConfigurationsResponsePtrOutputWithContext(ctx context.Context) PersistenceConfigurationsResponsePtrOutput {
	return o
}

func (o PersistenceConfigurationsResponsePtrOutput) Elem() PersistenceConfigurationsResponseOutput {
	return o.ApplyT(func(v *PersistenceConfigurationsResponse) PersistenceConfigurationsResponse {
		if v != nil {
			return *v
		}
		var ret PersistenceConfigurationsResponse
		return ret
	}).(PersistenceConfigurationsResponseOutput)
}

// The name of the mounted persistent volume.
func (o PersistenceConfigurationsResponsePtrOutput) PersistentVolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfigurationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PersistentVolumeName
	}).(pulumi.StringPtrOutput)
}

// Pipeline Info.
type Pipeline struct {
	// Reference to exporters configured for the pipeline.
	Exporters []string `pulumi:"exporters"`
	// Name of the pipeline.
	Name string `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors []string `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers []string `pulumi:"receivers"`
	// The type of pipeline
	Type string `pulumi:"type"`
}

// PipelineInput is an input type that accepts PipelineArgs and PipelineOutput values.
// You can construct a concrete instance of `PipelineInput` via:
//
//	PipelineArgs{...}
type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(context.Context) PipelineOutput
}

// Pipeline Info.
type PipelineArgs struct {
	// Reference to exporters configured for the pipeline.
	Exporters pulumi.StringArrayInput `pulumi:"exporters"`
	// Name of the pipeline.
	Name pulumi.StringInput `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors pulumi.StringArrayInput `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers pulumi.StringArrayInput `pulumi:"receivers"`
	// The type of pipeline
	Type pulumi.StringInput `pulumi:"type"`
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil)).Elem()
}

func (i PipelineArgs) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i PipelineArgs) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// Pipeline Info.
type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// Reference to exporters configured for the pipeline.
func (o PipelineOutput) Exporters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Exporters }).(pulumi.StringArrayOutput)
}

// Name of the pipeline.
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Pipeline) string { return v.Name }).(pulumi.StringOutput)
}

// Reference to processors configured for the pipeline.
func (o PipelineOutput) Processors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Processors }).(pulumi.StringArrayOutput)
}

// Reference to receivers configured for the pipeline.
func (o PipelineOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Pipeline) []string { return v.Receivers }).(pulumi.StringArrayOutput)
}

// The type of pipeline
func (o PipelineOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Pipeline) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Pipeline {
		return vs[0].([]Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

// Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupProperties struct {
	// The exporters specified for a pipeline group instance.
	Exporters []Exporter `pulumi:"exporters"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []NetworkingConfiguration `pulumi:"networkingConfigurations"`
	// The processors specified for a pipeline group instance.
	Processors []Processor `pulumi:"processors"`
	// The receivers specified for a pipeline group instance.
	Receivers []Receiver `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int `pulumi:"replicas"`
	// The service section for a given pipeline group instance.
	Service Service `pulumi:"service"`
}

// PipelineGroupPropertiesInput is an input type that accepts PipelineGroupPropertiesArgs and PipelineGroupPropertiesOutput values.
// You can construct a concrete instance of `PipelineGroupPropertiesInput` via:
//
//	PipelineGroupPropertiesArgs{...}
type PipelineGroupPropertiesInput interface {
	pulumi.Input

	ToPipelineGroupPropertiesOutput() PipelineGroupPropertiesOutput
	ToPipelineGroupPropertiesOutputWithContext(context.Context) PipelineGroupPropertiesOutput
}

// Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupPropertiesArgs struct {
	// The exporters specified for a pipeline group instance.
	Exporters ExporterArrayInput `pulumi:"exporters"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations NetworkingConfigurationArrayInput `pulumi:"networkingConfigurations"`
	// The processors specified for a pipeline group instance.
	Processors ProcessorArrayInput `pulumi:"processors"`
	// The receivers specified for a pipeline group instance.
	Receivers ReceiverArrayInput `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The service section for a given pipeline group instance.
	Service ServiceInput `pulumi:"service"`
}

func (PipelineGroupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGroupProperties)(nil)).Elem()
}

func (i PipelineGroupPropertiesArgs) ToPipelineGroupPropertiesOutput() PipelineGroupPropertiesOutput {
	return i.ToPipelineGroupPropertiesOutputWithContext(context.Background())
}

func (i PipelineGroupPropertiesArgs) ToPipelineGroupPropertiesOutputWithContext(ctx context.Context) PipelineGroupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGroupPropertiesOutput)
}

func (i PipelineGroupPropertiesArgs) ToPipelineGroupPropertiesPtrOutput() PipelineGroupPropertiesPtrOutput {
	return i.ToPipelineGroupPropertiesPtrOutputWithContext(context.Background())
}

func (i PipelineGroupPropertiesArgs) ToPipelineGroupPropertiesPtrOutputWithContext(ctx context.Context) PipelineGroupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGroupPropertiesOutput).ToPipelineGroupPropertiesPtrOutputWithContext(ctx)
}

// PipelineGroupPropertiesPtrInput is an input type that accepts PipelineGroupPropertiesArgs, PipelineGroupPropertiesPtr and PipelineGroupPropertiesPtrOutput values.
// You can construct a concrete instance of `PipelineGroupPropertiesPtrInput` via:
//
//	        PipelineGroupPropertiesArgs{...}
//
//	or:
//
//	        nil
type PipelineGroupPropertiesPtrInput interface {
	pulumi.Input

	ToPipelineGroupPropertiesPtrOutput() PipelineGroupPropertiesPtrOutput
	ToPipelineGroupPropertiesPtrOutputWithContext(context.Context) PipelineGroupPropertiesPtrOutput
}

type pipelineGroupPropertiesPtrType PipelineGroupPropertiesArgs

func PipelineGroupPropertiesPtr(v *PipelineGroupPropertiesArgs) PipelineGroupPropertiesPtrInput {
	return (*pipelineGroupPropertiesPtrType)(v)
}

func (*pipelineGroupPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGroupProperties)(nil)).Elem()
}

func (i *pipelineGroupPropertiesPtrType) ToPipelineGroupPropertiesPtrOutput() PipelineGroupPropertiesPtrOutput {
	return i.ToPipelineGroupPropertiesPtrOutputWithContext(context.Background())
}

func (i *pipelineGroupPropertiesPtrType) ToPipelineGroupPropertiesPtrOutputWithContext(ctx context.Context) PipelineGroupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineGroupPropertiesPtrOutput)
}

// Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupPropertiesOutput struct{ *pulumi.OutputState }

func (PipelineGroupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGroupProperties)(nil)).Elem()
}

func (o PipelineGroupPropertiesOutput) ToPipelineGroupPropertiesOutput() PipelineGroupPropertiesOutput {
	return o
}

func (o PipelineGroupPropertiesOutput) ToPipelineGroupPropertiesOutputWithContext(ctx context.Context) PipelineGroupPropertiesOutput {
	return o
}

func (o PipelineGroupPropertiesOutput) ToPipelineGroupPropertiesPtrOutput() PipelineGroupPropertiesPtrOutput {
	return o.ToPipelineGroupPropertiesPtrOutputWithContext(context.Background())
}

func (o PipelineGroupPropertiesOutput) ToPipelineGroupPropertiesPtrOutputWithContext(ctx context.Context) PipelineGroupPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineGroupProperties) *PipelineGroupProperties {
		return &v
	}).(PipelineGroupPropertiesPtrOutput)
}

// The exporters specified for a pipeline group instance.
func (o PipelineGroupPropertiesOutput) Exporters() ExporterArrayOutput {
	return o.ApplyT(func(v PipelineGroupProperties) []Exporter { return v.Exporters }).(ExporterArrayOutput)
}

// Networking configurations for the pipeline group instance.
func (o PipelineGroupPropertiesOutput) NetworkingConfigurations() NetworkingConfigurationArrayOutput {
	return o.ApplyT(func(v PipelineGroupProperties) []NetworkingConfiguration { return v.NetworkingConfigurations }).(NetworkingConfigurationArrayOutput)
}

// The processors specified for a pipeline group instance.
func (o PipelineGroupPropertiesOutput) Processors() ProcessorArrayOutput {
	return o.ApplyT(func(v PipelineGroupProperties) []Processor { return v.Processors }).(ProcessorArrayOutput)
}

// The receivers specified for a pipeline group instance.
func (o PipelineGroupPropertiesOutput) Receivers() ReceiverArrayOutput {
	return o.ApplyT(func(v PipelineGroupProperties) []Receiver { return v.Receivers }).(ReceiverArrayOutput)
}

// Defines the amount of replicas of the pipeline group instance.
func (o PipelineGroupPropertiesOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineGroupProperties) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The service section for a given pipeline group instance.
func (o PipelineGroupPropertiesOutput) Service() ServiceOutput {
	return o.ApplyT(func(v PipelineGroupProperties) Service { return v.Service }).(ServiceOutput)
}

type PipelineGroupPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PipelineGroupPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineGroupProperties)(nil)).Elem()
}

func (o PipelineGroupPropertiesPtrOutput) ToPipelineGroupPropertiesPtrOutput() PipelineGroupPropertiesPtrOutput {
	return o
}

func (o PipelineGroupPropertiesPtrOutput) ToPipelineGroupPropertiesPtrOutputWithContext(ctx context.Context) PipelineGroupPropertiesPtrOutput {
	return o
}

func (o PipelineGroupPropertiesPtrOutput) Elem() PipelineGroupPropertiesOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) PipelineGroupProperties {
		if v != nil {
			return *v
		}
		var ret PipelineGroupProperties
		return ret
	}).(PipelineGroupPropertiesOutput)
}

// The exporters specified for a pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) Exporters() ExporterArrayOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) []Exporter {
		if v == nil {
			return nil
		}
		return v.Exporters
	}).(ExporterArrayOutput)
}

// Networking configurations for the pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) NetworkingConfigurations() NetworkingConfigurationArrayOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) []NetworkingConfiguration {
		if v == nil {
			return nil
		}
		return v.NetworkingConfigurations
	}).(NetworkingConfigurationArrayOutput)
}

// The processors specified for a pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) Processors() ProcessorArrayOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) []Processor {
		if v == nil {
			return nil
		}
		return v.Processors
	}).(ProcessorArrayOutput)
}

// The receivers specified for a pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) Receivers() ReceiverArrayOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) []Receiver {
		if v == nil {
			return nil
		}
		return v.Receivers
	}).(ReceiverArrayOutput)
}

// Defines the amount of replicas of the pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The service section for a given pipeline group instance.
func (o PipelineGroupPropertiesPtrOutput) Service() ServicePtrOutput {
	return o.ApplyT(func(v *PipelineGroupProperties) *Service {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(ServicePtrOutput)
}

// Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupPropertiesResponse struct {
	// The exporters specified for a pipeline group instance.
	Exporters []ExporterResponse `pulumi:"exporters"`
	// Networking configurations for the pipeline group instance.
	NetworkingConfigurations []NetworkingConfigurationResponse `pulumi:"networkingConfigurations"`
	// The processors specified for a pipeline group instance.
	Processors []ProcessorResponse `pulumi:"processors"`
	// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
	ProvisioningState string `pulumi:"provisioningState"`
	// The receivers specified for a pipeline group instance.
	Receivers []ReceiverResponse `pulumi:"receivers"`
	// Defines the amount of replicas of the pipeline group instance.
	Replicas *int `pulumi:"replicas"`
	// The service section for a given pipeline group instance.
	Service ServiceResponse `pulumi:"service"`
}

// Properties that need to be specified to create a new pipeline group instance.
type PipelineGroupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PipelineGroupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineGroupPropertiesResponse)(nil)).Elem()
}

func (o PipelineGroupPropertiesResponseOutput) ToPipelineGroupPropertiesResponseOutput() PipelineGroupPropertiesResponseOutput {
	return o
}

func (o PipelineGroupPropertiesResponseOutput) ToPipelineGroupPropertiesResponseOutputWithContext(ctx context.Context) PipelineGroupPropertiesResponseOutput {
	return o
}

// The exporters specified for a pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) Exporters() ExporterResponseArrayOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) []ExporterResponse { return v.Exporters }).(ExporterResponseArrayOutput)
}

// Networking configurations for the pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) NetworkingConfigurations() NetworkingConfigurationResponseArrayOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) []NetworkingConfigurationResponse {
		return v.NetworkingConfigurations
	}).(NetworkingConfigurationResponseArrayOutput)
}

// The processors specified for a pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) Processors() ProcessorResponseArrayOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) []ProcessorResponse { return v.Processors }).(ProcessorResponseArrayOutput)
}

// The provisioning state of a pipeline group instance. Set to Succeeded if everything is healthy.
func (o PipelineGroupPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The receivers specified for a pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) Receivers() ReceiverResponseArrayOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) []ReceiverResponse { return v.Receivers }).(ReceiverResponseArrayOutput)
}

// Defines the amount of replicas of the pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The service section for a given pipeline group instance.
func (o PipelineGroupPropertiesResponseOutput) Service() ServiceResponseOutput {
	return o.ApplyT(func(v PipelineGroupPropertiesResponse) ServiceResponse { return v.Service }).(ServiceResponseOutput)
}

// Pipeline Info.
type PipelineResponse struct {
	// Reference to exporters configured for the pipeline.
	Exporters []string `pulumi:"exporters"`
	// Name of the pipeline.
	Name string `pulumi:"name"`
	// Reference to processors configured for the pipeline.
	Processors []string `pulumi:"processors"`
	// Reference to receivers configured for the pipeline.
	Receivers []string `pulumi:"receivers"`
	// The type of pipeline
	Type string `pulumi:"type"`
}

// Pipeline Info.
type PipelineResponseOutput struct{ *pulumi.OutputState }

func (PipelineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineResponse)(nil)).Elem()
}

func (o PipelineResponseOutput) ToPipelineResponseOutput() PipelineResponseOutput {
	return o
}

func (o PipelineResponseOutput) ToPipelineResponseOutputWithContext(ctx context.Context) PipelineResponseOutput {
	return o
}

// Reference to exporters configured for the pipeline.
func (o PipelineResponseOutput) Exporters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Exporters }).(pulumi.StringArrayOutput)
}

// Name of the pipeline.
func (o PipelineResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Reference to processors configured for the pipeline.
func (o PipelineResponseOutput) Processors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Processors }).(pulumi.StringArrayOutput)
}

// Reference to receivers configured for the pipeline.
func (o PipelineResponseOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PipelineResponse) []string { return v.Receivers }).(pulumi.StringArrayOutput)
}

// The type of pipeline
func (o PipelineResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PipelineResponseArrayOutput struct{ *pulumi.OutputState }

func (PipelineResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PipelineResponse)(nil)).Elem()
}

func (o PipelineResponseArrayOutput) ToPipelineResponseArrayOutput() PipelineResponseArrayOutput {
	return o
}

func (o PipelineResponseArrayOutput) ToPipelineResponseArrayOutputWithContext(ctx context.Context) PipelineResponseArrayOutput {
	return o
}

func (o PipelineResponseArrayOutput) Index(i pulumi.IntInput) PipelineResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PipelineResponse {
		return vs[0].([]PipelineResponse)[vs[1].(int)]
	}).(PipelineResponseOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams []string `pulumi:"streams"`
}

// PlatformTelemetryDataSourceInput is an input type that accepts PlatformTelemetryDataSourceArgs and PlatformTelemetryDataSourceOutput values.
// You can construct a concrete instance of `PlatformTelemetryDataSourceInput` via:
//
//	PlatformTelemetryDataSourceArgs{...}
type PlatformTelemetryDataSourceInput interface {
	pulumi.Input

	ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput
	ToPlatformTelemetryDataSourceOutputWithContext(context.Context) PlatformTelemetryDataSourceOutput
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PlatformTelemetryDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSource)(nil)).Elem()
}

func (i PlatformTelemetryDataSourceArgs) ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput {
	return i.ToPlatformTelemetryDataSourceOutputWithContext(context.Background())
}

func (i PlatformTelemetryDataSourceArgs) ToPlatformTelemetryDataSourceOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformTelemetryDataSourceOutput)
}

// PlatformTelemetryDataSourceArrayInput is an input type that accepts PlatformTelemetryDataSourceArray and PlatformTelemetryDataSourceArrayOutput values.
// You can construct a concrete instance of `PlatformTelemetryDataSourceArrayInput` via:
//
//	PlatformTelemetryDataSourceArray{ PlatformTelemetryDataSourceArgs{...} }
type PlatformTelemetryDataSourceArrayInput interface {
	pulumi.Input

	ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput
	ToPlatformTelemetryDataSourceArrayOutputWithContext(context.Context) PlatformTelemetryDataSourceArrayOutput
}

type PlatformTelemetryDataSourceArray []PlatformTelemetryDataSourceInput

func (PlatformTelemetryDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSource)(nil)).Elem()
}

func (i PlatformTelemetryDataSourceArray) ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput {
	return i.ToPlatformTelemetryDataSourceArrayOutputWithContext(context.Background())
}

func (i PlatformTelemetryDataSourceArray) ToPlatformTelemetryDataSourceArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlatformTelemetryDataSourceArrayOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSource)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceOutput) ToPlatformTelemetryDataSourceOutput() PlatformTelemetryDataSourceOutput {
	return o
}

func (o PlatformTelemetryDataSourceOutput) ToPlatformTelemetryDataSourceOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PlatformTelemetryDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of platform telemetry streams to collect
func (o PlatformTelemetryDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PlatformTelemetryDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSource)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceArrayOutput) ToPlatformTelemetryDataSourceArrayOutput() PlatformTelemetryDataSourceArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceArrayOutput) ToPlatformTelemetryDataSourceArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceArrayOutput) Index(i pulumi.IntInput) PlatformTelemetryDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlatformTelemetryDataSource {
		return vs[0].([]PlatformTelemetryDataSource)[vs[1].(int)]
	}).(PlatformTelemetryDataSourceOutput)
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of platform telemetry streams to collect
	Streams []string `pulumi:"streams"`
}

// Definition of platform telemetry data source configuration
type PlatformTelemetryDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlatformTelemetryDataSourceResponse)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceResponseOutput) ToPlatformTelemetryDataSourceResponseOutput() PlatformTelemetryDataSourceResponseOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseOutput) ToPlatformTelemetryDataSourceResponseOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PlatformTelemetryDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of platform telemetry streams to collect
func (o PlatformTelemetryDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PlatformTelemetryDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PlatformTelemetryDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PlatformTelemetryDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlatformTelemetryDataSourceResponse)(nil)).Elem()
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) ToPlatformTelemetryDataSourceResponseArrayOutput() PlatformTelemetryDataSourceResponseArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) ToPlatformTelemetryDataSourceResponseArrayOutputWithContext(ctx context.Context) PlatformTelemetryDataSourceResponseArrayOutput {
	return o
}

func (o PlatformTelemetryDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PlatformTelemetryDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlatformTelemetryDataSourceResponse {
		return vs[0].([]PlatformTelemetryDataSourceResponse)[vs[1].(int)]
	}).(PlatformTelemetryDataSourceResponseOutput)
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicy struct {
	// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
	ScaleLookAheadTime *string `pulumi:"scaleLookAheadTime"`
	// the predictive autoscale mode
	ScaleMode PredictiveAutoscalePolicyScaleMode `pulumi:"scaleMode"`
}

// PredictiveAutoscalePolicyInput is an input type that accepts PredictiveAutoscalePolicyArgs and PredictiveAutoscalePolicyOutput values.
// You can construct a concrete instance of `PredictiveAutoscalePolicyInput` via:
//
//	PredictiveAutoscalePolicyArgs{...}
type PredictiveAutoscalePolicyInput interface {
	pulumi.Input

	ToPredictiveAutoscalePolicyOutput() PredictiveAutoscalePolicyOutput
	ToPredictiveAutoscalePolicyOutputWithContext(context.Context) PredictiveAutoscalePolicyOutput
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicyArgs struct {
	// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
	ScaleLookAheadTime pulumi.StringPtrInput `pulumi:"scaleLookAheadTime"`
	// the predictive autoscale mode
	ScaleMode PredictiveAutoscalePolicyScaleModeInput `pulumi:"scaleMode"`
}

func (PredictiveAutoscalePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictiveAutoscalePolicy)(nil)).Elem()
}

func (i PredictiveAutoscalePolicyArgs) ToPredictiveAutoscalePolicyOutput() PredictiveAutoscalePolicyOutput {
	return i.ToPredictiveAutoscalePolicyOutputWithContext(context.Background())
}

func (i PredictiveAutoscalePolicyArgs) ToPredictiveAutoscalePolicyOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictiveAutoscalePolicyOutput)
}

func (i PredictiveAutoscalePolicyArgs) ToPredictiveAutoscalePolicyPtrOutput() PredictiveAutoscalePolicyPtrOutput {
	return i.ToPredictiveAutoscalePolicyPtrOutputWithContext(context.Background())
}

func (i PredictiveAutoscalePolicyArgs) ToPredictiveAutoscalePolicyPtrOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictiveAutoscalePolicyOutput).ToPredictiveAutoscalePolicyPtrOutputWithContext(ctx)
}

// PredictiveAutoscalePolicyPtrInput is an input type that accepts PredictiveAutoscalePolicyArgs, PredictiveAutoscalePolicyPtr and PredictiveAutoscalePolicyPtrOutput values.
// You can construct a concrete instance of `PredictiveAutoscalePolicyPtrInput` via:
//
//	        PredictiveAutoscalePolicyArgs{...}
//
//	or:
//
//	        nil
type PredictiveAutoscalePolicyPtrInput interface {
	pulumi.Input

	ToPredictiveAutoscalePolicyPtrOutput() PredictiveAutoscalePolicyPtrOutput
	ToPredictiveAutoscalePolicyPtrOutputWithContext(context.Context) PredictiveAutoscalePolicyPtrOutput
}

type predictiveAutoscalePolicyPtrType PredictiveAutoscalePolicyArgs

func PredictiveAutoscalePolicyPtr(v *PredictiveAutoscalePolicyArgs) PredictiveAutoscalePolicyPtrInput {
	return (*predictiveAutoscalePolicyPtrType)(v)
}

func (*predictiveAutoscalePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictiveAutoscalePolicy)(nil)).Elem()
}

func (i *predictiveAutoscalePolicyPtrType) ToPredictiveAutoscalePolicyPtrOutput() PredictiveAutoscalePolicyPtrOutput {
	return i.ToPredictiveAutoscalePolicyPtrOutputWithContext(context.Background())
}

func (i *predictiveAutoscalePolicyPtrType) ToPredictiveAutoscalePolicyPtrOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictiveAutoscalePolicyPtrOutput)
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicyOutput struct{ *pulumi.OutputState }

func (PredictiveAutoscalePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictiveAutoscalePolicy)(nil)).Elem()
}

func (o PredictiveAutoscalePolicyOutput) ToPredictiveAutoscalePolicyOutput() PredictiveAutoscalePolicyOutput {
	return o
}

func (o PredictiveAutoscalePolicyOutput) ToPredictiveAutoscalePolicyOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyOutput {
	return o
}

func (o PredictiveAutoscalePolicyOutput) ToPredictiveAutoscalePolicyPtrOutput() PredictiveAutoscalePolicyPtrOutput {
	return o.ToPredictiveAutoscalePolicyPtrOutputWithContext(context.Background())
}

func (o PredictiveAutoscalePolicyOutput) ToPredictiveAutoscalePolicyPtrOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PredictiveAutoscalePolicy) *PredictiveAutoscalePolicy {
		return &v
	}).(PredictiveAutoscalePolicyPtrOutput)
}

// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
func (o PredictiveAutoscalePolicyOutput) ScaleLookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PredictiveAutoscalePolicy) *string { return v.ScaleLookAheadTime }).(pulumi.StringPtrOutput)
}

// the predictive autoscale mode
func (o PredictiveAutoscalePolicyOutput) ScaleMode() PredictiveAutoscalePolicyScaleModeOutput {
	return o.ApplyT(func(v PredictiveAutoscalePolicy) PredictiveAutoscalePolicyScaleMode { return v.ScaleMode }).(PredictiveAutoscalePolicyScaleModeOutput)
}

type PredictiveAutoscalePolicyPtrOutput struct{ *pulumi.OutputState }

func (PredictiveAutoscalePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictiveAutoscalePolicy)(nil)).Elem()
}

func (o PredictiveAutoscalePolicyPtrOutput) ToPredictiveAutoscalePolicyPtrOutput() PredictiveAutoscalePolicyPtrOutput {
	return o
}

func (o PredictiveAutoscalePolicyPtrOutput) ToPredictiveAutoscalePolicyPtrOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyPtrOutput {
	return o
}

func (o PredictiveAutoscalePolicyPtrOutput) Elem() PredictiveAutoscalePolicyOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicy) PredictiveAutoscalePolicy {
		if v != nil {
			return *v
		}
		var ret PredictiveAutoscalePolicy
		return ret
	}).(PredictiveAutoscalePolicyOutput)
}

// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
func (o PredictiveAutoscalePolicyPtrOutput) ScaleLookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicy) *string {
		if v == nil {
			return nil
		}
		return v.ScaleLookAheadTime
	}).(pulumi.StringPtrOutput)
}

// the predictive autoscale mode
func (o PredictiveAutoscalePolicyPtrOutput) ScaleMode() PredictiveAutoscalePolicyScaleModePtrOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicy) *PredictiveAutoscalePolicyScaleMode {
		if v == nil {
			return nil
		}
		return &v.ScaleMode
	}).(PredictiveAutoscalePolicyScaleModePtrOutput)
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicyResponse struct {
	// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
	ScaleLookAheadTime *string `pulumi:"scaleLookAheadTime"`
	// the predictive autoscale mode
	ScaleMode string `pulumi:"scaleMode"`
}

// The parameters for enabling predictive autoscale.
type PredictiveAutoscalePolicyResponseOutput struct{ *pulumi.OutputState }

func (PredictiveAutoscalePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictiveAutoscalePolicyResponse)(nil)).Elem()
}

func (o PredictiveAutoscalePolicyResponseOutput) ToPredictiveAutoscalePolicyResponseOutput() PredictiveAutoscalePolicyResponseOutput {
	return o
}

func (o PredictiveAutoscalePolicyResponseOutput) ToPredictiveAutoscalePolicyResponseOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyResponseOutput {
	return o
}

// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
func (o PredictiveAutoscalePolicyResponseOutput) ScaleLookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PredictiveAutoscalePolicyResponse) *string { return v.ScaleLookAheadTime }).(pulumi.StringPtrOutput)
}

// the predictive autoscale mode
func (o PredictiveAutoscalePolicyResponseOutput) ScaleMode() pulumi.StringOutput {
	return o.ApplyT(func(v PredictiveAutoscalePolicyResponse) string { return v.ScaleMode }).(pulumi.StringOutput)
}

type PredictiveAutoscalePolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (PredictiveAutoscalePolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PredictiveAutoscalePolicyResponse)(nil)).Elem()
}

func (o PredictiveAutoscalePolicyResponsePtrOutput) ToPredictiveAutoscalePolicyResponsePtrOutput() PredictiveAutoscalePolicyResponsePtrOutput {
	return o
}

func (o PredictiveAutoscalePolicyResponsePtrOutput) ToPredictiveAutoscalePolicyResponsePtrOutputWithContext(ctx context.Context) PredictiveAutoscalePolicyResponsePtrOutput {
	return o
}

func (o PredictiveAutoscalePolicyResponsePtrOutput) Elem() PredictiveAutoscalePolicyResponseOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicyResponse) PredictiveAutoscalePolicyResponse {
		if v != nil {
			return *v
		}
		var ret PredictiveAutoscalePolicyResponse
		return ret
	}).(PredictiveAutoscalePolicyResponseOutput)
}

// the amount of time to specify by which instances are launched in advance. It must be between 1 minute and 60 minutes in ISO 8601 format.
func (o PredictiveAutoscalePolicyResponsePtrOutput) ScaleLookAheadTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScaleLookAheadTime
	}).(pulumi.StringPtrOutput)
}

// the predictive autoscale mode
func (o PredictiveAutoscalePolicyResponsePtrOutput) ScaleMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PredictiveAutoscalePolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleMode
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// The group ids for the private endpoint resource.
	GroupIds []string `pulumi:"groupIds"`
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData *SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// The group ids for the private endpoint resource.
func (o PrivateEndpointConnectionResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *SystemDataResponse { return v.SystemData }).(SystemDataResponsePtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type PrivateLinkScopedResourceResponse struct {
	// The resourceId of the Azure Monitor Private Link Scope Scoped Resource through which this DCE is associated with a Azure Monitor Private Link Scope.
	ResourceId *string `pulumi:"resourceId"`
	// The immutableId of the Azure Monitor Private Link Scope Resource to which the association is.
	ScopeId *string `pulumi:"scopeId"`
}

type PrivateLinkScopedResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutput() PrivateLinkScopedResourceResponseOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseOutput) ToPrivateLinkScopedResourceResponseOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseOutput {
	return o
}

// The resourceId of the Azure Monitor Private Link Scope Scoped Resource through which this DCE is associated with a Azure Monitor Private Link Scope.
func (o PrivateLinkScopedResourceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The immutableId of the Azure Monitor Private Link Scope Resource to which the association is.
func (o PrivateLinkScopedResourceResponseOutput) ScopeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkScopedResourceResponse) *string { return v.ScopeId }).(pulumi.StringPtrOutput)
}

type PrivateLinkScopedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateLinkScopedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateLinkScopedResourceResponse)(nil)).Elem()
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutput() PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) ToPrivateLinkScopedResourceResponseArrayOutputWithContext(ctx context.Context) PrivateLinkScopedResourceResponseArrayOutput {
	return o
}

func (o PrivateLinkScopedResourceResponseArrayOutput) Index(i pulumi.IntInput) PrivateLinkScopedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateLinkScopedResourceResponse {
		return vs[0].([]PrivateLinkScopedResourceResponse)[vs[1].(int)]
	}).(PrivateLinkScopedResourceResponseOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Processor Info.
type Processor struct {
	// Batch processor configurations.
	Batch *BatchProcessor `pulumi:"batch"`
	// The name of processor.
	Name string `pulumi:"name"`
	// The type of processor.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Processor
func (val *Processor) Defaults() *Processor {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Batch = tmp.Batch.Defaults()

	return &tmp
}

// ProcessorInput is an input type that accepts ProcessorArgs and ProcessorOutput values.
// You can construct a concrete instance of `ProcessorInput` via:
//
//	ProcessorArgs{...}
type ProcessorInput interface {
	pulumi.Input

	ToProcessorOutput() ProcessorOutput
	ToProcessorOutputWithContext(context.Context) ProcessorOutput
}

// Processor Info.
type ProcessorArgs struct {
	// Batch processor configurations.
	Batch BatchProcessorPtrInput `pulumi:"batch"`
	// The name of processor.
	Name pulumi.StringInput `pulumi:"name"`
	// The type of processor.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ProcessorArgs
func (val *ProcessorArgs) Defaults() *ProcessorArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Processor)(nil)).Elem()
}

func (i ProcessorArgs) ToProcessorOutput() ProcessorOutput {
	return i.ToProcessorOutputWithContext(context.Background())
}

func (i ProcessorArgs) ToProcessorOutputWithContext(ctx context.Context) ProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorOutput)
}

// ProcessorArrayInput is an input type that accepts ProcessorArray and ProcessorArrayOutput values.
// You can construct a concrete instance of `ProcessorArrayInput` via:
//
//	ProcessorArray{ ProcessorArgs{...} }
type ProcessorArrayInput interface {
	pulumi.Input

	ToProcessorArrayOutput() ProcessorArrayOutput
	ToProcessorArrayOutputWithContext(context.Context) ProcessorArrayOutput
}

type ProcessorArray []ProcessorInput

func (ProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Processor)(nil)).Elem()
}

func (i ProcessorArray) ToProcessorArrayOutput() ProcessorArrayOutput {
	return i.ToProcessorArrayOutputWithContext(context.Background())
}

func (i ProcessorArray) ToProcessorArrayOutputWithContext(ctx context.Context) ProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcessorArrayOutput)
}

// Processor Info.
type ProcessorOutput struct{ *pulumi.OutputState }

func (ProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Processor)(nil)).Elem()
}

func (o ProcessorOutput) ToProcessorOutput() ProcessorOutput {
	return o
}

func (o ProcessorOutput) ToProcessorOutputWithContext(ctx context.Context) ProcessorOutput {
	return o
}

// Batch processor configurations.
func (o ProcessorOutput) Batch() BatchProcessorPtrOutput {
	return o.ApplyT(func(v Processor) *BatchProcessor { return v.Batch }).(BatchProcessorPtrOutput)
}

// The name of processor.
func (o ProcessorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Processor) string { return v.Name }).(pulumi.StringOutput)
}

// The type of processor.
func (o ProcessorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Processor) string { return v.Type }).(pulumi.StringOutput)
}

type ProcessorArrayOutput struct{ *pulumi.OutputState }

func (ProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Processor)(nil)).Elem()
}

func (o ProcessorArrayOutput) ToProcessorArrayOutput() ProcessorArrayOutput {
	return o
}

func (o ProcessorArrayOutput) ToProcessorArrayOutputWithContext(ctx context.Context) ProcessorArrayOutput {
	return o
}

func (o ProcessorArrayOutput) Index(i pulumi.IntInput) ProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Processor {
		return vs[0].([]Processor)[vs[1].(int)]
	}).(ProcessorOutput)
}

// Processor Info.
type ProcessorResponse struct {
	// Batch processor configurations.
	Batch *BatchProcessorResponse `pulumi:"batch"`
	// The name of processor.
	Name string `pulumi:"name"`
	// The type of processor.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ProcessorResponse
func (val *ProcessorResponse) Defaults() *ProcessorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Batch = tmp.Batch.Defaults()

	return &tmp
}

// Processor Info.
type ProcessorResponseOutput struct{ *pulumi.OutputState }

func (ProcessorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProcessorResponse)(nil)).Elem()
}

func (o ProcessorResponseOutput) ToProcessorResponseOutput() ProcessorResponseOutput {
	return o
}

func (o ProcessorResponseOutput) ToProcessorResponseOutputWithContext(ctx context.Context) ProcessorResponseOutput {
	return o
}

// Batch processor configurations.
func (o ProcessorResponseOutput) Batch() BatchProcessorResponsePtrOutput {
	return o.ApplyT(func(v ProcessorResponse) *BatchProcessorResponse { return v.Batch }).(BatchProcessorResponsePtrOutput)
}

// The name of processor.
func (o ProcessorResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProcessorResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of processor.
func (o ProcessorResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ProcessorResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ProcessorResponseArrayOutput struct{ *pulumi.OutputState }

func (ProcessorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProcessorResponse)(nil)).Elem()
}

func (o ProcessorResponseArrayOutput) ToProcessorResponseArrayOutput() ProcessorResponseArrayOutput {
	return o
}

func (o ProcessorResponseArrayOutput) ToProcessorResponseArrayOutputWithContext(ctx context.Context) ProcessorResponseArrayOutput {
	return o
}

func (o ProcessorResponseArrayOutput) Index(i pulumi.IntInput) ProcessorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProcessorResponse {
		return vs[0].([]ProcessorResponse)[vs[1].(int)]
	}).(ProcessorResponseOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSource struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter map[string]string `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams []string `pulumi:"streams"`
}

// PrometheusForwarderDataSourceInput is an input type that accepts PrometheusForwarderDataSourceArgs and PrometheusForwarderDataSourceOutput values.
// You can construct a concrete instance of `PrometheusForwarderDataSourceInput` via:
//
//	PrometheusForwarderDataSourceArgs{...}
type PrometheusForwarderDataSourceInput interface {
	pulumi.Input

	ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput
	ToPrometheusForwarderDataSourceOutputWithContext(context.Context) PrometheusForwarderDataSourceOutput
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceArgs struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter pulumi.StringMapInput `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (PrometheusForwarderDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSource)(nil)).Elem()
}

func (i PrometheusForwarderDataSourceArgs) ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput {
	return i.ToPrometheusForwarderDataSourceOutputWithContext(context.Background())
}

func (i PrometheusForwarderDataSourceArgs) ToPrometheusForwarderDataSourceOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusForwarderDataSourceOutput)
}

// PrometheusForwarderDataSourceArrayInput is an input type that accepts PrometheusForwarderDataSourceArray and PrometheusForwarderDataSourceArrayOutput values.
// You can construct a concrete instance of `PrometheusForwarderDataSourceArrayInput` via:
//
//	PrometheusForwarderDataSourceArray{ PrometheusForwarderDataSourceArgs{...} }
type PrometheusForwarderDataSourceArrayInput interface {
	pulumi.Input

	ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput
	ToPrometheusForwarderDataSourceArrayOutputWithContext(context.Context) PrometheusForwarderDataSourceArrayOutput
}

type PrometheusForwarderDataSourceArray []PrometheusForwarderDataSourceInput

func (PrometheusForwarderDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSource)(nil)).Elem()
}

func (i PrometheusForwarderDataSourceArray) ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput {
	return i.ToPrometheusForwarderDataSourceArrayOutputWithContext(context.Background())
}

func (i PrometheusForwarderDataSourceArray) ToPrometheusForwarderDataSourceArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusForwarderDataSourceArrayOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSource)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceOutput) ToPrometheusForwarderDataSourceOutput() PrometheusForwarderDataSourceOutput {
	return o
}

func (o PrometheusForwarderDataSourceOutput) ToPrometheusForwarderDataSourceOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceOutput {
	return o
}

// The list of label inclusion filters in the form of label "name-value" pairs.
// Currently only one label is supported: 'microsoft_metrics_include_label'.
// Label values are matched case-insensitively.
func (o PrometheusForwarderDataSourceOutput) LabelIncludeFilter() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) map[string]string { return v.LabelIncludeFilter }).(pulumi.StringMapOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PrometheusForwarderDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
func (o PrometheusForwarderDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PrometheusForwarderDataSourceArrayOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSource)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceArrayOutput) ToPrometheusForwarderDataSourceArrayOutput() PrometheusForwarderDataSourceArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceArrayOutput) ToPrometheusForwarderDataSourceArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceArrayOutput) Index(i pulumi.IntInput) PrometheusForwarderDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusForwarderDataSource {
		return vs[0].([]PrometheusForwarderDataSource)[vs[1].(int)]
	}).(PrometheusForwarderDataSourceOutput)
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceResponse struct {
	// The list of label inclusion filters in the form of label "name-value" pairs.
	// Currently only one label is supported: 'microsoft_metrics_include_label'.
	// Label values are matched case-insensitively.
	LabelIncludeFilter map[string]string `pulumi:"labelIncludeFilter"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of Prometheus metrics forwarding configuration.
type PrometheusForwarderDataSourceResponseOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusForwarderDataSourceResponse)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceResponseOutput) ToPrometheusForwarderDataSourceResponseOutput() PrometheusForwarderDataSourceResponseOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseOutput) ToPrometheusForwarderDataSourceResponseOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceResponseOutput {
	return o
}

// The list of label inclusion filters in the form of label "name-value" pairs.
// Currently only one label is supported: 'microsoft_metrics_include_label'.
// Label values are matched case-insensitively.
func (o PrometheusForwarderDataSourceResponseOutput) LabelIncludeFilter() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) map[string]string { return v.LabelIncludeFilter }).(pulumi.StringMapOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o PrometheusForwarderDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
func (o PrometheusForwarderDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrometheusForwarderDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type PrometheusForwarderDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (PrometheusForwarderDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrometheusForwarderDataSourceResponse)(nil)).Elem()
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) ToPrometheusForwarderDataSourceResponseArrayOutput() PrometheusForwarderDataSourceResponseArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) ToPrometheusForwarderDataSourceResponseArrayOutputWithContext(ctx context.Context) PrometheusForwarderDataSourceResponseArrayOutput {
	return o
}

func (o PrometheusForwarderDataSourceResponseArrayOutput) Index(i pulumi.IntInput) PrometheusForwarderDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrometheusForwarderDataSourceResponse {
		return vs[0].([]PrometheusForwarderDataSourceResponse)[vs[1].(int)]
	}).(PrometheusForwarderDataSourceResponseOutput)
}

// Prometheus Metrics Signal Definition properties
type PrometheusMetricsSignalDefinitionProperties struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRule `pulumi:"evaluationRules"`
	// Query text in PromQL syntax
	QueryText string `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'PrometheusMetricsQuery'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain *string `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for PrometheusMetricsSignalDefinitionProperties
func (val *PrometheusMetricsSignalDefinitionProperties) Defaults() *PrometheusMetricsSignalDefinitionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// PrometheusMetricsSignalDefinitionPropertiesInput is an input type that accepts PrometheusMetricsSignalDefinitionPropertiesArgs and PrometheusMetricsSignalDefinitionPropertiesOutput values.
// You can construct a concrete instance of `PrometheusMetricsSignalDefinitionPropertiesInput` via:
//
//	PrometheusMetricsSignalDefinitionPropertiesArgs{...}
type PrometheusMetricsSignalDefinitionPropertiesInput interface {
	pulumi.Input

	ToPrometheusMetricsSignalDefinitionPropertiesOutput() PrometheusMetricsSignalDefinitionPropertiesOutput
	ToPrometheusMetricsSignalDefinitionPropertiesOutputWithContext(context.Context) PrometheusMetricsSignalDefinitionPropertiesOutput
}

// Prometheus Metrics Signal Definition properties
type PrometheusMetricsSignalDefinitionPropertiesArgs struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit pulumi.StringPtrInput `pulumi:"dataUnit"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleInput `pulumi:"evaluationRules"`
	// Query text in PromQL syntax
	QueryText pulumi.StringInput `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval pulumi.StringPtrInput `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'PrometheusMetricsQuery'.
	SignalKind pulumi.StringInput `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain pulumi.StringPtrInput `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for PrometheusMetricsSignalDefinitionPropertiesArgs
func (val *PrometheusMetricsSignalDefinitionPropertiesArgs) Defaults() *PrometheusMetricsSignalDefinitionPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		tmp.RefreshInterval = pulumi.StringPtr("PT1M")
	}
	return &tmp
}
func (PrometheusMetricsSignalDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusMetricsSignalDefinitionProperties)(nil)).Elem()
}

func (i PrometheusMetricsSignalDefinitionPropertiesArgs) ToPrometheusMetricsSignalDefinitionPropertiesOutput() PrometheusMetricsSignalDefinitionPropertiesOutput {
	return i.ToPrometheusMetricsSignalDefinitionPropertiesOutputWithContext(context.Background())
}

func (i PrometheusMetricsSignalDefinitionPropertiesArgs) ToPrometheusMetricsSignalDefinitionPropertiesOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusMetricsSignalDefinitionPropertiesOutput)
}

func (i PrometheusMetricsSignalDefinitionPropertiesArgs) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutput() PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return i.ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i PrometheusMetricsSignalDefinitionPropertiesArgs) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusMetricsSignalDefinitionPropertiesOutput).ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(ctx)
}

// PrometheusMetricsSignalDefinitionPropertiesPtrInput is an input type that accepts PrometheusMetricsSignalDefinitionPropertiesArgs, PrometheusMetricsSignalDefinitionPropertiesPtr and PrometheusMetricsSignalDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `PrometheusMetricsSignalDefinitionPropertiesPtrInput` via:
//
//	        PrometheusMetricsSignalDefinitionPropertiesArgs{...}
//
//	or:
//
//	        nil
type PrometheusMetricsSignalDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToPrometheusMetricsSignalDefinitionPropertiesPtrOutput() PrometheusMetricsSignalDefinitionPropertiesPtrOutput
	ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(context.Context) PrometheusMetricsSignalDefinitionPropertiesPtrOutput
}

type prometheusMetricsSignalDefinitionPropertiesPtrType PrometheusMetricsSignalDefinitionPropertiesArgs

func PrometheusMetricsSignalDefinitionPropertiesPtr(v *PrometheusMetricsSignalDefinitionPropertiesArgs) PrometheusMetricsSignalDefinitionPropertiesPtrInput {
	return (*prometheusMetricsSignalDefinitionPropertiesPtrType)(v)
}

func (*prometheusMetricsSignalDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusMetricsSignalDefinitionProperties)(nil)).Elem()
}

func (i *prometheusMetricsSignalDefinitionPropertiesPtrType) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutput() PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return i.ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *prometheusMetricsSignalDefinitionPropertiesPtrType) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusMetricsSignalDefinitionPropertiesPtrOutput)
}

// Prometheus Metrics Signal Definition properties
type PrometheusMetricsSignalDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (PrometheusMetricsSignalDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusMetricsSignalDefinitionProperties)(nil)).Elem()
}

func (o PrometheusMetricsSignalDefinitionPropertiesOutput) ToPrometheusMetricsSignalDefinitionPropertiesOutput() PrometheusMetricsSignalDefinitionPropertiesOutput {
	return o
}

func (o PrometheusMetricsSignalDefinitionPropertiesOutput) ToPrometheusMetricsSignalDefinitionPropertiesOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesOutput {
	return o
}

func (o PrometheusMetricsSignalDefinitionPropertiesOutput) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutput() PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return o.ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o PrometheusMetricsSignalDefinitionPropertiesOutput) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrometheusMetricsSignalDefinitionProperties) *PrometheusMetricsSignalDefinitionProperties {
		return &v
	}).(PrometheusMetricsSignalDefinitionPropertiesPtrOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Display name
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) EvaluationRules() EvaluationRuleOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) EvaluationRule { return v.EvaluationRules }).(EvaluationRuleOutput)
}

// Query text in PromQL syntax
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) QueryText() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) string { return v.QueryText }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'PrometheusMetricsQuery'.
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o PrometheusMetricsSignalDefinitionPropertiesOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionProperties) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

type PrometheusMetricsSignalDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (PrometheusMetricsSignalDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusMetricsSignalDefinitionProperties)(nil)).Elem()
}

func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutput() PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return o
}

func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) ToPrometheusMetricsSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesPtrOutput {
	return o
}

func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) Elem() PrometheusMetricsSignalDefinitionPropertiesOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) PrometheusMetricsSignalDefinitionProperties {
		if v != nil {
			return *v
		}
		var ret PrometheusMetricsSignalDefinitionProperties
		return ret
	}).(PrometheusMetricsSignalDefinitionPropertiesOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataUnit
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) EvaluationRules() EvaluationRulePtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *EvaluationRule {
		if v == nil {
			return nil
		}
		return &v.EvaluationRules
	}).(EvaluationRulePtrOutput)
}

// Query text in PromQL syntax
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) QueryText() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.QueryText
	}).(pulumi.StringPtrOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RefreshInterval
	}).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'PrometheusMetricsQuery'.
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) SignalKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.SignalKind
	}).(pulumi.StringPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o PrometheusMetricsSignalDefinitionPropertiesPtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusMetricsSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Prometheus Metrics Signal Definition properties
type PrometheusMetricsSignalDefinitionPropertiesResponse struct {
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Date when the signal definition was (soft-)deleted
	DeletionDate string `pulumi:"deletionDate"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleResponse `pulumi:"evaluationRules"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Query text in PromQL syntax
	QueryText string `pulumi:"queryText"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'PrometheusMetricsQuery'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain *string `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for PrometheusMetricsSignalDefinitionPropertiesResponse
func (val *PrometheusMetricsSignalDefinitionPropertiesResponse) Defaults() *PrometheusMetricsSignalDefinitionPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// Prometheus Metrics Signal Definition properties
type PrometheusMetricsSignalDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PrometheusMetricsSignalDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrometheusMetricsSignalDefinitionPropertiesResponse)(nil)).Elem()
}

func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) ToPrometheusMetricsSignalDefinitionPropertiesResponseOutput() PrometheusMetricsSignalDefinitionPropertiesResponseOutput {
	return o
}

func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) ToPrometheusMetricsSignalDefinitionPropertiesResponseOutputWithContext(ctx context.Context) PrometheusMetricsSignalDefinitionPropertiesResponseOutput {
	return o
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Date when the signal definition was (soft-)deleted
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Display name
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) EvaluationRules() EvaluationRuleResponseOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) EvaluationRuleResponse {
		return v.EvaluationRules
	}).(EvaluationRuleResponseOutput)
}

// The status of the last operation.
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Query text in PromQL syntax
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) QueryText() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) string { return v.QueryText }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'PrometheusMetricsQuery'.
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o PrometheusMetricsSignalDefinitionPropertiesResponseOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrometheusMetricsSignalDefinitionPropertiesResponse) *string { return v.TimeGrain }).(pulumi.StringPtrOutput)
}

// Receiver Info.
type Receiver struct {
	// The name of receiver.
	Name string `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp *OtlpReceiver `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog *SyslogReceiver `pulumi:"syslog"`
	// The type of receiver.
	Type string `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp *UdpReceiver `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for Receiver
func (val *Receiver) Defaults() *Receiver {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Syslog = tmp.Syslog.Defaults()

	tmp.Udp = tmp.Udp.Defaults()

	return &tmp
}

// ReceiverInput is an input type that accepts ReceiverArgs and ReceiverOutput values.
// You can construct a concrete instance of `ReceiverInput` via:
//
//	ReceiverArgs{...}
type ReceiverInput interface {
	pulumi.Input

	ToReceiverOutput() ReceiverOutput
	ToReceiverOutputWithContext(context.Context) ReceiverOutput
}

// Receiver Info.
type ReceiverArgs struct {
	// The name of receiver.
	Name pulumi.StringInput `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp OtlpReceiverPtrInput `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog SyslogReceiverPtrInput `pulumi:"syslog"`
	// The type of receiver.
	Type pulumi.StringInput `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp UdpReceiverPtrInput `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for ReceiverArgs
func (val *ReceiverArgs) Defaults() *ReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Receiver)(nil)).Elem()
}

func (i ReceiverArgs) ToReceiverOutput() ReceiverOutput {
	return i.ToReceiverOutputWithContext(context.Background())
}

func (i ReceiverArgs) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverOutput)
}

// ReceiverArrayInput is an input type that accepts ReceiverArray and ReceiverArrayOutput values.
// You can construct a concrete instance of `ReceiverArrayInput` via:
//
//	ReceiverArray{ ReceiverArgs{...} }
type ReceiverArrayInput interface {
	pulumi.Input

	ToReceiverArrayOutput() ReceiverArrayOutput
	ToReceiverArrayOutputWithContext(context.Context) ReceiverArrayOutput
}

type ReceiverArray []ReceiverInput

func (ReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Receiver)(nil)).Elem()
}

func (i ReceiverArray) ToReceiverArrayOutput() ReceiverArrayOutput {
	return i.ToReceiverArrayOutputWithContext(context.Background())
}

func (i ReceiverArray) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReceiverArrayOutput)
}

// Receiver Info.
type ReceiverOutput struct{ *pulumi.OutputState }

func (ReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Receiver)(nil)).Elem()
}

func (o ReceiverOutput) ToReceiverOutput() ReceiverOutput {
	return o
}

func (o ReceiverOutput) ToReceiverOutputWithContext(ctx context.Context) ReceiverOutput {
	return o
}

// The name of receiver.
func (o ReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Receiver) string { return v.Name }).(pulumi.StringOutput)
}

// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
func (o ReceiverOutput) Otlp() OtlpReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *OtlpReceiver { return v.Otlp }).(OtlpReceiverPtrOutput)
}

// Syslog configurations. This field is mandatory for syslog type receivers.
func (o ReceiverOutput) Syslog() SyslogReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *SyslogReceiver { return v.Syslog }).(SyslogReceiverPtrOutput)
}

// The type of receiver.
func (o ReceiverOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Receiver) string { return v.Type }).(pulumi.StringOutput)
}

// UDP receiver configurations. This field is mandatory for UDP receivers.
func (o ReceiverOutput) Udp() UdpReceiverPtrOutput {
	return o.ApplyT(func(v Receiver) *UdpReceiver { return v.Udp }).(UdpReceiverPtrOutput)
}

type ReceiverArrayOutput struct{ *pulumi.OutputState }

func (ReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Receiver)(nil)).Elem()
}

func (o ReceiverArrayOutput) ToReceiverArrayOutput() ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) ToReceiverArrayOutputWithContext(ctx context.Context) ReceiverArrayOutput {
	return o
}

func (o ReceiverArrayOutput) Index(i pulumi.IntInput) ReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Receiver {
		return vs[0].([]Receiver)[vs[1].(int)]
	}).(ReceiverOutput)
}

// Receiver Info.
type ReceiverResponse struct {
	// The name of receiver.
	Name string `pulumi:"name"`
	// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
	Otlp *OtlpReceiverResponse `pulumi:"otlp"`
	// Syslog configurations. This field is mandatory for syslog type receivers.
	Syslog *SyslogReceiverResponse `pulumi:"syslog"`
	// The type of receiver.
	Type string `pulumi:"type"`
	// UDP receiver configurations. This field is mandatory for UDP receivers.
	Udp *UdpReceiverResponse `pulumi:"udp"`
}

// Defaults sets the appropriate defaults for ReceiverResponse
func (val *ReceiverResponse) Defaults() *ReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Syslog = tmp.Syslog.Defaults()

	tmp.Udp = tmp.Udp.Defaults()

	return &tmp
}

// Receiver Info.
type ReceiverResponseOutput struct{ *pulumi.OutputState }

func (ReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReceiverResponse)(nil)).Elem()
}

func (o ReceiverResponseOutput) ToReceiverResponseOutput() ReceiverResponseOutput {
	return o
}

func (o ReceiverResponseOutput) ToReceiverResponseOutputWithContext(ctx context.Context) ReceiverResponseOutput {
	return o
}

// The name of receiver.
func (o ReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.
func (o ReceiverResponseOutput) Otlp() OtlpReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *OtlpReceiverResponse { return v.Otlp }).(OtlpReceiverResponsePtrOutput)
}

// Syslog configurations. This field is mandatory for syslog type receivers.
func (o ReceiverResponseOutput) Syslog() SyslogReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *SyslogReceiverResponse { return v.Syslog }).(SyslogReceiverResponsePtrOutput)
}

// The type of receiver.
func (o ReceiverResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReceiverResponse) string { return v.Type }).(pulumi.StringOutput)
}

// UDP receiver configurations. This field is mandatory for UDP receivers.
func (o ReceiverResponseOutput) Udp() UdpReceiverResponsePtrOutput {
	return o.ApplyT(func(v ReceiverResponse) *UdpReceiverResponse { return v.Udp }).(UdpReceiverResponsePtrOutput)
}

type ReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (ReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReceiverResponse)(nil)).Elem()
}

func (o ReceiverResponseArrayOutput) ToReceiverResponseArrayOutput() ReceiverResponseArrayOutput {
	return o
}

func (o ReceiverResponseArrayOutput) ToReceiverResponseArrayOutputWithContext(ctx context.Context) ReceiverResponseArrayOutput {
	return o
}

func (o ReceiverResponseArrayOutput) Index(i pulumi.IntInput) ReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReceiverResponse {
		return vs[0].([]ReceiverResponse)[vs[1].(int)]
	}).(ReceiverResponseOutput)
}

// Record map for schema in azure monitor.
type RecordMap struct {
	// Record Map Key.
	From string `pulumi:"from"`
	// Record Map Value.
	To string `pulumi:"to"`
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

// Record map for schema in azure monitor.
type RecordMapArgs struct {
	// Record Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Record Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (RecordMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMap)(nil)).Elem()
}

func (i RecordMapArgs) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMapArgs) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

// RecordMapArrayInput is an input type that accepts RecordMapArray and RecordMapArrayOutput values.
// You can construct a concrete instance of `RecordMapArrayInput` via:
//
//	RecordMapArray{ RecordMapArgs{...} }
type RecordMapArrayInput interface {
	pulumi.Input

	ToRecordMapArrayOutput() RecordMapArrayOutput
	ToRecordMapArrayOutputWithContext(context.Context) RecordMapArrayOutput
}

type RecordMapArray []RecordMapInput

func (RecordMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMap)(nil)).Elem()
}

func (i RecordMapArray) ToRecordMapArrayOutput() RecordMapArrayOutput {
	return i.ToRecordMapArrayOutputWithContext(context.Background())
}

func (i RecordMapArray) ToRecordMapArrayOutputWithContext(ctx context.Context) RecordMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapArrayOutput)
}

// Record map for schema in azure monitor.
type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMap)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

// Record Map Key.
func (o RecordMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMap) string { return v.From }).(pulumi.StringOutput)
}

// Record Map Value.
func (o RecordMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMap) string { return v.To }).(pulumi.StringOutput)
}

type RecordMapArrayOutput struct{ *pulumi.OutputState }

func (RecordMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMap)(nil)).Elem()
}

func (o RecordMapArrayOutput) ToRecordMapArrayOutput() RecordMapArrayOutput {
	return o
}

func (o RecordMapArrayOutput) ToRecordMapArrayOutputWithContext(ctx context.Context) RecordMapArrayOutput {
	return o
}

func (o RecordMapArrayOutput) Index(i pulumi.IntInput) RecordMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordMap {
		return vs[0].([]RecordMap)[vs[1].(int)]
	}).(RecordMapOutput)
}

// Record map for schema in azure monitor.
type RecordMapResponse struct {
	// Record Map Key.
	From string `pulumi:"from"`
	// Record Map Value.
	To string `pulumi:"to"`
}

// Record map for schema in azure monitor.
type RecordMapResponseOutput struct{ *pulumi.OutputState }

func (RecordMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordMapResponse)(nil)).Elem()
}

func (o RecordMapResponseOutput) ToRecordMapResponseOutput() RecordMapResponseOutput {
	return o
}

func (o RecordMapResponseOutput) ToRecordMapResponseOutputWithContext(ctx context.Context) RecordMapResponseOutput {
	return o
}

// Record Map Key.
func (o RecordMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Record Map Value.
func (o RecordMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v RecordMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type RecordMapResponseArrayOutput struct{ *pulumi.OutputState }

func (RecordMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordMapResponse)(nil)).Elem()
}

func (o RecordMapResponseArrayOutput) ToRecordMapResponseArrayOutput() RecordMapResponseArrayOutput {
	return o
}

func (o RecordMapResponseArrayOutput) ToRecordMapResponseArrayOutputWithContext(ctx context.Context) RecordMapResponseArrayOutput {
	return o
}

func (o RecordMapResponseArrayOutput) Index(i pulumi.IntInput) RecordMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordMapResponse {
		return vs[0].([]RecordMapResponse)[vs[1].(int)]
	}).(RecordMapResponseOutput)
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type Recurrence struct {
	// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
	Frequency RecurrenceFrequency `pulumi:"frequency"`
	// the scheduling constraints for when the profile begins.
	Schedule RecurrentSchedule `pulumi:"schedule"`
}

// RecurrenceInput is an input type that accepts RecurrenceArgs and RecurrenceOutput values.
// You can construct a concrete instance of `RecurrenceInput` via:
//
//	RecurrenceArgs{...}
type RecurrenceInput interface {
	pulumi.Input

	ToRecurrenceOutput() RecurrenceOutput
	ToRecurrenceOutputWithContext(context.Context) RecurrenceOutput
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type RecurrenceArgs struct {
	// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
	Frequency RecurrenceFrequencyInput `pulumi:"frequency"`
	// the scheduling constraints for when the profile begins.
	Schedule RecurrentScheduleInput `pulumi:"schedule"`
}

func (RecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (i RecurrenceArgs) ToRecurrenceOutput() RecurrenceOutput {
	return i.ToRecurrenceOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput)
}

func (i RecurrenceArgs) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput).ToRecurrencePtrOutputWithContext(ctx)
}

// RecurrencePtrInput is an input type that accepts RecurrenceArgs, RecurrencePtr and RecurrencePtrOutput values.
// You can construct a concrete instance of `RecurrencePtrInput` via:
//
//	        RecurrenceArgs{...}
//
//	or:
//
//	        nil
type RecurrencePtrInput interface {
	pulumi.Input

	ToRecurrencePtrOutput() RecurrencePtrOutput
	ToRecurrencePtrOutputWithContext(context.Context) RecurrencePtrOutput
}

type recurrencePtrType RecurrenceArgs

func RecurrencePtr(v *RecurrenceArgs) RecurrencePtrInput {
	return (*recurrencePtrType)(v)
}

func (*recurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (i *recurrencePtrType) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i *recurrencePtrType) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePtrOutput)
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type RecurrenceOutput struct{ *pulumi.OutputState }

func (RecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (o RecurrenceOutput) ToRecurrenceOutput() RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o.ToRecurrencePtrOutputWithContext(context.Background())
}

func (o RecurrenceOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Recurrence) *Recurrence {
		return &v
	}).(RecurrencePtrOutput)
}

// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
func (o RecurrenceOutput) Frequency() RecurrenceFrequencyOutput {
	return o.ApplyT(func(v Recurrence) RecurrenceFrequency { return v.Frequency }).(RecurrenceFrequencyOutput)
}

// the scheduling constraints for when the profile begins.
func (o RecurrenceOutput) Schedule() RecurrentScheduleOutput {
	return o.ApplyT(func(v Recurrence) RecurrentSchedule { return v.Schedule }).(RecurrentScheduleOutput)
}

type RecurrencePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) Elem() RecurrenceOutput {
	return o.ApplyT(func(v *Recurrence) Recurrence {
		if v != nil {
			return *v
		}
		var ret Recurrence
		return ret
	}).(RecurrenceOutput)
}

// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
func (o RecurrencePtrOutput) Frequency() RecurrenceFrequencyPtrOutput {
	return o.ApplyT(func(v *Recurrence) *RecurrenceFrequency {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(RecurrenceFrequencyPtrOutput)
}

// the scheduling constraints for when the profile begins.
func (o RecurrencePtrOutput) Schedule() RecurrentSchedulePtrOutput {
	return o.ApplyT(func(v *Recurrence) *RecurrentSchedule {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(RecurrentSchedulePtrOutput)
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type RecurrenceResponse struct {
	// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
	Frequency string `pulumi:"frequency"`
	// the scheduling constraints for when the profile begins.
	Schedule RecurrentScheduleResponse `pulumi:"schedule"`
}

// The repeating times at which this profile begins. This element is not used if the FixedDate element is used.
type RecurrenceResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutput() RecurrenceResponseOutput {
	return o
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutputWithContext(ctx context.Context) RecurrenceResponseOutput {
	return o
}

// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
func (o RecurrenceResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// the scheduling constraints for when the profile begins.
func (o RecurrenceResponseOutput) Schedule() RecurrentScheduleResponseOutput {
	return o.ApplyT(func(v RecurrenceResponse) RecurrentScheduleResponse { return v.Schedule }).(RecurrentScheduleResponseOutput)
}

type RecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutput() RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutputWithContext(ctx context.Context) RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) Elem() RecurrenceResponseOutput {
	return o.ApplyT(func(v *RecurrenceResponse) RecurrenceResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceResponse
		return ret
	}).(RecurrenceResponseOutput)
}

// the recurrence frequency. How often the schedule profile should take effect. This value must be Week, meaning each week will have the same set of profiles. For example, to set a daily schedule, set **schedule** to every day of the week. The frequency property specifies that the schedule is repeated weekly.
func (o RecurrenceResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// the scheduling constraints for when the profile begins.
func (o RecurrenceResponsePtrOutput) Schedule() RecurrentScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *RecurrentScheduleResponse {
		if v == nil {
			return nil
		}
		return &v.Schedule
	}).(RecurrentScheduleResponsePtrOutput)
}

// The scheduling constraints for when the profile begins.
type RecurrentSchedule struct {
	// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
	Days []string `pulumi:"days"`
	// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
	Hours []int `pulumi:"hours"`
	// A collection of minutes at which the profile takes effect at.
	Minutes []int `pulumi:"minutes"`
	// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone string `pulumi:"timeZone"`
}

// RecurrentScheduleInput is an input type that accepts RecurrentScheduleArgs and RecurrentScheduleOutput values.
// You can construct a concrete instance of `RecurrentScheduleInput` via:
//
//	RecurrentScheduleArgs{...}
type RecurrentScheduleInput interface {
	pulumi.Input

	ToRecurrentScheduleOutput() RecurrentScheduleOutput
	ToRecurrentScheduleOutputWithContext(context.Context) RecurrentScheduleOutput
}

// The scheduling constraints for when the profile begins.
type RecurrentScheduleArgs struct {
	// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
	Days pulumi.StringArrayInput `pulumi:"days"`
	// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// A collection of minutes at which the profile takes effect at.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (RecurrentScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrentSchedule)(nil)).Elem()
}

func (i RecurrentScheduleArgs) ToRecurrentScheduleOutput() RecurrentScheduleOutput {
	return i.ToRecurrentScheduleOutputWithContext(context.Background())
}

func (i RecurrentScheduleArgs) ToRecurrentScheduleOutputWithContext(ctx context.Context) RecurrentScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrentScheduleOutput)
}

func (i RecurrentScheduleArgs) ToRecurrentSchedulePtrOutput() RecurrentSchedulePtrOutput {
	return i.ToRecurrentSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrentScheduleArgs) ToRecurrentSchedulePtrOutputWithContext(ctx context.Context) RecurrentSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrentScheduleOutput).ToRecurrentSchedulePtrOutputWithContext(ctx)
}

// RecurrentSchedulePtrInput is an input type that accepts RecurrentScheduleArgs, RecurrentSchedulePtr and RecurrentSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrentSchedulePtrInput` via:
//
//	        RecurrentScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrentSchedulePtrInput interface {
	pulumi.Input

	ToRecurrentSchedulePtrOutput() RecurrentSchedulePtrOutput
	ToRecurrentSchedulePtrOutputWithContext(context.Context) RecurrentSchedulePtrOutput
}

type recurrentSchedulePtrType RecurrentScheduleArgs

func RecurrentSchedulePtr(v *RecurrentScheduleArgs) RecurrentSchedulePtrInput {
	return (*recurrentSchedulePtrType)(v)
}

func (*recurrentSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrentSchedule)(nil)).Elem()
}

func (i *recurrentSchedulePtrType) ToRecurrentSchedulePtrOutput() RecurrentSchedulePtrOutput {
	return i.ToRecurrentSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrentSchedulePtrType) ToRecurrentSchedulePtrOutputWithContext(ctx context.Context) RecurrentSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrentSchedulePtrOutput)
}

// The scheduling constraints for when the profile begins.
type RecurrentScheduleOutput struct{ *pulumi.OutputState }

func (RecurrentScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrentSchedule)(nil)).Elem()
}

func (o RecurrentScheduleOutput) ToRecurrentScheduleOutput() RecurrentScheduleOutput {
	return o
}

func (o RecurrentScheduleOutput) ToRecurrentScheduleOutputWithContext(ctx context.Context) RecurrentScheduleOutput {
	return o
}

func (o RecurrentScheduleOutput) ToRecurrentSchedulePtrOutput() RecurrentSchedulePtrOutput {
	return o.ToRecurrentSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrentScheduleOutput) ToRecurrentSchedulePtrOutputWithContext(ctx context.Context) RecurrentSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrentSchedule) *RecurrentSchedule {
		return &v
	}).(RecurrentSchedulePtrOutput)
}

// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
func (o RecurrentScheduleOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrentSchedule) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
func (o RecurrentScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrentSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// A collection of minutes at which the profile takes effect at.
func (o RecurrentScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrentSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o RecurrentScheduleOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrentSchedule) string { return v.TimeZone }).(pulumi.StringOutput)
}

type RecurrentSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrentSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrentSchedule)(nil)).Elem()
}

func (o RecurrentSchedulePtrOutput) ToRecurrentSchedulePtrOutput() RecurrentSchedulePtrOutput {
	return o
}

func (o RecurrentSchedulePtrOutput) ToRecurrentSchedulePtrOutputWithContext(ctx context.Context) RecurrentSchedulePtrOutput {
	return o
}

func (o RecurrentSchedulePtrOutput) Elem() RecurrentScheduleOutput {
	return o.ApplyT(func(v *RecurrentSchedule) RecurrentSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrentSchedule
		return ret
	}).(RecurrentScheduleOutput)
}

// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
func (o RecurrentSchedulePtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrentSchedule) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
func (o RecurrentSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrentSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// A collection of minutes at which the profile takes effect at.
func (o RecurrentSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrentSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o RecurrentSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrentSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The scheduling constraints for when the profile begins.
type RecurrentScheduleResponse struct {
	// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
	Days []string `pulumi:"days"`
	// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
	Hours []int `pulumi:"hours"`
	// A collection of minutes at which the profile takes effect at.
	Minutes []int `pulumi:"minutes"`
	// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone string `pulumi:"timeZone"`
}

// The scheduling constraints for when the profile begins.
type RecurrentScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrentScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrentScheduleResponse)(nil)).Elem()
}

func (o RecurrentScheduleResponseOutput) ToRecurrentScheduleResponseOutput() RecurrentScheduleResponseOutput {
	return o
}

func (o RecurrentScheduleResponseOutput) ToRecurrentScheduleResponseOutputWithContext(ctx context.Context) RecurrentScheduleResponseOutput {
	return o
}

// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
func (o RecurrentScheduleResponseOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrentScheduleResponse) []string { return v.Days }).(pulumi.StringArrayOutput)
}

// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
func (o RecurrentScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrentScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// A collection of minutes at which the profile takes effect at.
func (o RecurrentScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrentScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o RecurrentScheduleResponseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrentScheduleResponse) string { return v.TimeZone }).(pulumi.StringOutput)
}

type RecurrentScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrentScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrentScheduleResponse)(nil)).Elem()
}

func (o RecurrentScheduleResponsePtrOutput) ToRecurrentScheduleResponsePtrOutput() RecurrentScheduleResponsePtrOutput {
	return o
}

func (o RecurrentScheduleResponsePtrOutput) ToRecurrentScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrentScheduleResponsePtrOutput {
	return o
}

func (o RecurrentScheduleResponsePtrOutput) Elem() RecurrentScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrentScheduleResponse) RecurrentScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrentScheduleResponse
		return ret
	}).(RecurrentScheduleResponseOutput)
}

// the collection of days that the profile takes effect on. Possible values are Sunday through Saturday.
func (o RecurrentScheduleResponsePtrOutput) Days() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrentScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringArrayOutput)
}

// A collection of hours that the profile takes effect on. Values supported are 0 to 23 on the 24-hour clock (AM/PM times are not supported).
func (o RecurrentScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrentScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// A collection of minutes at which the profile takes effect at.
func (o RecurrentScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrentScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// the timezone for the hours of the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o RecurrentScheduleResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrentScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Properties of an alert which is related to the issue
type RelatedAlertResponse struct {
	// The time this relation was added to the issue (in UTC)
	AddedAt string `pulumi:"addedAt"`
	// The alert ID
	Id string `pulumi:"id"`
	// The last update time of this relation (in UTC)
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// The source that related the alert to the issue
	Origin OriginResponse `pulumi:"origin"`
	// The alerts's relevance status
	Relevance string `pulumi:"relevance"`
}

// Properties of an alert which is related to the issue
type RelatedAlertResponseOutput struct{ *pulumi.OutputState }

func (RelatedAlertResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedAlertResponse)(nil)).Elem()
}

func (o RelatedAlertResponseOutput) ToRelatedAlertResponseOutput() RelatedAlertResponseOutput {
	return o
}

func (o RelatedAlertResponseOutput) ToRelatedAlertResponseOutputWithContext(ctx context.Context) RelatedAlertResponseOutput {
	return o
}

// The time this relation was added to the issue (in UTC)
func (o RelatedAlertResponseOutput) AddedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedAlertResponse) string { return v.AddedAt }).(pulumi.StringOutput)
}

// The alert ID
func (o RelatedAlertResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedAlertResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The last update time of this relation (in UTC)
func (o RelatedAlertResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedAlertResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// The source that related the alert to the issue
func (o RelatedAlertResponseOutput) Origin() OriginResponseOutput {
	return o.ApplyT(func(v RelatedAlertResponse) OriginResponse { return v.Origin }).(OriginResponseOutput)
}

// The alerts's relevance status
func (o RelatedAlertResponseOutput) Relevance() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedAlertResponse) string { return v.Relevance }).(pulumi.StringOutput)
}

type RelatedAlertResponseArrayOutput struct{ *pulumi.OutputState }

func (RelatedAlertResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedAlertResponse)(nil)).Elem()
}

func (o RelatedAlertResponseArrayOutput) ToRelatedAlertResponseArrayOutput() RelatedAlertResponseArrayOutput {
	return o
}

func (o RelatedAlertResponseArrayOutput) ToRelatedAlertResponseArrayOutputWithContext(ctx context.Context) RelatedAlertResponseArrayOutput {
	return o
}

func (o RelatedAlertResponseArrayOutput) Index(i pulumi.IntInput) RelatedAlertResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedAlertResponse {
		return vs[0].([]RelatedAlertResponse)[vs[1].(int)]
	}).(RelatedAlertResponseOutput)
}

// Properties of a resource which is related to the issue
type RelatedResourceResponse struct {
	// The time this relation was added to the issue (in UTC)
	AddedAt string `pulumi:"addedAt"`
	// The resource ID
	Id string `pulumi:"id"`
	// The last update time of this relation (in UTC)
	LastModifiedAt string `pulumi:"lastModifiedAt"`
	// The source that related the resource to the issue
	Origin OriginResponse `pulumi:"origin"`
	// The resource's relevance status
	Relevance string `pulumi:"relevance"`
}

// Properties of a resource which is related to the issue
type RelatedResourceResponseOutput struct{ *pulumi.OutputState }

func (RelatedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelatedResourceResponse)(nil)).Elem()
}

func (o RelatedResourceResponseOutput) ToRelatedResourceResponseOutput() RelatedResourceResponseOutput {
	return o
}

func (o RelatedResourceResponseOutput) ToRelatedResourceResponseOutputWithContext(ctx context.Context) RelatedResourceResponseOutput {
	return o
}

// The time this relation was added to the issue (in UTC)
func (o RelatedResourceResponseOutput) AddedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedResourceResponse) string { return v.AddedAt }).(pulumi.StringOutput)
}

// The resource ID
func (o RelatedResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The last update time of this relation (in UTC)
func (o RelatedResourceResponseOutput) LastModifiedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedResourceResponse) string { return v.LastModifiedAt }).(pulumi.StringOutput)
}

// The source that related the resource to the issue
func (o RelatedResourceResponseOutput) Origin() OriginResponseOutput {
	return o.ApplyT(func(v RelatedResourceResponse) OriginResponse { return v.Origin }).(OriginResponseOutput)
}

// The resource's relevance status
func (o RelatedResourceResponseOutput) Relevance() pulumi.StringOutput {
	return o.ApplyT(func(v RelatedResourceResponse) string { return v.Relevance }).(pulumi.StringOutput)
}

type RelatedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (RelatedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RelatedResourceResponse)(nil)).Elem()
}

func (o RelatedResourceResponseArrayOutput) ToRelatedResourceResponseArrayOutput() RelatedResourceResponseArrayOutput {
	return o
}

func (o RelatedResourceResponseArrayOutput) ToRelatedResourceResponseArrayOutputWithContext(ctx context.Context) RelatedResourceResponseArrayOutput {
	return o
}

func (o RelatedResourceResponseArrayOutput) Index(i pulumi.IntInput) RelatedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RelatedResourceResponse {
		return vs[0].([]RelatedResourceResponse)[vs[1].(int)]
	}).(RelatedResourceResponseOutput)
}

// Relationship properties
type RelationshipProperties struct {
	// Resource name of the child entity
	ChildEntityName string `pulumi:"childEntityName"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Resource name of the parent entity
	ParentEntityName string `pulumi:"parentEntityName"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
}

// RelationshipPropertiesInput is an input type that accepts RelationshipPropertiesArgs and RelationshipPropertiesOutput values.
// You can construct a concrete instance of `RelationshipPropertiesInput` via:
//
//	RelationshipPropertiesArgs{...}
type RelationshipPropertiesInput interface {
	pulumi.Input

	ToRelationshipPropertiesOutput() RelationshipPropertiesOutput
	ToRelationshipPropertiesOutputWithContext(context.Context) RelationshipPropertiesOutput
}

// Relationship properties
type RelationshipPropertiesArgs struct {
	// Resource name of the child entity
	ChildEntityName pulumi.StringInput `pulumi:"childEntityName"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Resource name of the parent entity
	ParentEntityName pulumi.StringInput `pulumi:"parentEntityName"`
	// Optional set of labels (key-value pairs)
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (RelationshipPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipProperties)(nil)).Elem()
}

func (i RelationshipPropertiesArgs) ToRelationshipPropertiesOutput() RelationshipPropertiesOutput {
	return i.ToRelationshipPropertiesOutputWithContext(context.Background())
}

func (i RelationshipPropertiesArgs) ToRelationshipPropertiesOutputWithContext(ctx context.Context) RelationshipPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipPropertiesOutput)
}

func (i RelationshipPropertiesArgs) ToRelationshipPropertiesPtrOutput() RelationshipPropertiesPtrOutput {
	return i.ToRelationshipPropertiesPtrOutputWithContext(context.Background())
}

func (i RelationshipPropertiesArgs) ToRelationshipPropertiesPtrOutputWithContext(ctx context.Context) RelationshipPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipPropertiesOutput).ToRelationshipPropertiesPtrOutputWithContext(ctx)
}

// RelationshipPropertiesPtrInput is an input type that accepts RelationshipPropertiesArgs, RelationshipPropertiesPtr and RelationshipPropertiesPtrOutput values.
// You can construct a concrete instance of `RelationshipPropertiesPtrInput` via:
//
//	        RelationshipPropertiesArgs{...}
//
//	or:
//
//	        nil
type RelationshipPropertiesPtrInput interface {
	pulumi.Input

	ToRelationshipPropertiesPtrOutput() RelationshipPropertiesPtrOutput
	ToRelationshipPropertiesPtrOutputWithContext(context.Context) RelationshipPropertiesPtrOutput
}

type relationshipPropertiesPtrType RelationshipPropertiesArgs

func RelationshipPropertiesPtr(v *RelationshipPropertiesArgs) RelationshipPropertiesPtrInput {
	return (*relationshipPropertiesPtrType)(v)
}

func (*relationshipPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipProperties)(nil)).Elem()
}

func (i *relationshipPropertiesPtrType) ToRelationshipPropertiesPtrOutput() RelationshipPropertiesPtrOutput {
	return i.ToRelationshipPropertiesPtrOutputWithContext(context.Background())
}

func (i *relationshipPropertiesPtrType) ToRelationshipPropertiesPtrOutputWithContext(ctx context.Context) RelationshipPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RelationshipPropertiesPtrOutput)
}

// Relationship properties
type RelationshipPropertiesOutput struct{ *pulumi.OutputState }

func (RelationshipPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipProperties)(nil)).Elem()
}

func (o RelationshipPropertiesOutput) ToRelationshipPropertiesOutput() RelationshipPropertiesOutput {
	return o
}

func (o RelationshipPropertiesOutput) ToRelationshipPropertiesOutputWithContext(ctx context.Context) RelationshipPropertiesOutput {
	return o
}

func (o RelationshipPropertiesOutput) ToRelationshipPropertiesPtrOutput() RelationshipPropertiesPtrOutput {
	return o.ToRelationshipPropertiesPtrOutputWithContext(context.Background())
}

func (o RelationshipPropertiesOutput) ToRelationshipPropertiesPtrOutputWithContext(ctx context.Context) RelationshipPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RelationshipProperties) *RelationshipProperties {
		return &v
	}).(RelationshipPropertiesPtrOutput)
}

// Resource name of the child entity
func (o RelationshipPropertiesOutput) ChildEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipProperties) string { return v.ChildEntityName }).(pulumi.StringOutput)
}

// Display name
func (o RelationshipPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Resource name of the parent entity
func (o RelationshipPropertiesOutput) ParentEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipProperties) string { return v.ParentEntityName }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o RelationshipPropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type RelationshipPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RelationshipPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RelationshipProperties)(nil)).Elem()
}

func (o RelationshipPropertiesPtrOutput) ToRelationshipPropertiesPtrOutput() RelationshipPropertiesPtrOutput {
	return o
}

func (o RelationshipPropertiesPtrOutput) ToRelationshipPropertiesPtrOutputWithContext(ctx context.Context) RelationshipPropertiesPtrOutput {
	return o
}

func (o RelationshipPropertiesPtrOutput) Elem() RelationshipPropertiesOutput {
	return o.ApplyT(func(v *RelationshipProperties) RelationshipProperties {
		if v != nil {
			return *v
		}
		var ret RelationshipProperties
		return ret
	}).(RelationshipPropertiesOutput)
}

// Resource name of the child entity
func (o RelationshipPropertiesPtrOutput) ChildEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ChildEntityName
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o RelationshipPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Resource name of the parent entity
func (o RelationshipPropertiesPtrOutput) ParentEntityName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RelationshipProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ParentEntityName
	}).(pulumi.StringPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o RelationshipPropertiesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RelationshipProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Relationship properties
type RelationshipPropertiesResponse struct {
	// Resource name of the child entity
	ChildEntityName string `pulumi:"childEntityName"`
	// Date when the relationship was (soft-)deleted
	DeletionDate string `pulumi:"deletionDate"`
	// Discovered by which discovery rule. If set, the relationship cannot be deleted manually.
	DiscoveredBy string `pulumi:"discoveredBy"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Resource name of the parent entity
	ParentEntityName string `pulumi:"parentEntityName"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
}

// Relationship properties
type RelationshipPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RelationshipPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RelationshipPropertiesResponse)(nil)).Elem()
}

func (o RelationshipPropertiesResponseOutput) ToRelationshipPropertiesResponseOutput() RelationshipPropertiesResponseOutput {
	return o
}

func (o RelationshipPropertiesResponseOutput) ToRelationshipPropertiesResponseOutputWithContext(ctx context.Context) RelationshipPropertiesResponseOutput {
	return o
}

// Resource name of the child entity
func (o RelationshipPropertiesResponseOutput) ChildEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) string { return v.ChildEntityName }).(pulumi.StringOutput)
}

// Date when the relationship was (soft-)deleted
func (o RelationshipPropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Discovered by which discovery rule. If set, the relationship cannot be deleted manually.
func (o RelationshipPropertiesResponseOutput) DiscoveredBy() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) string { return v.DiscoveredBy }).(pulumi.StringOutput)
}

// Display name
func (o RelationshipPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Resource name of the parent entity
func (o RelationshipPropertiesResponseOutput) ParentEntityName() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) string { return v.ParentEntityName }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o RelationshipPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o RelationshipPropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v RelationshipPropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Discovery rule properties for an Azure Resource Graph query
type ResourceGraphQueryDiscoveryRuleProperties struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships string `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ResourceGraphQuery'.
	DiscoveryRuleKind string `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
	ResourceGraphQuery string `pulumi:"resourceGraphQuery"`
}

// ResourceGraphQueryDiscoveryRulePropertiesInput is an input type that accepts ResourceGraphQueryDiscoveryRulePropertiesArgs and ResourceGraphQueryDiscoveryRulePropertiesOutput values.
// You can construct a concrete instance of `ResourceGraphQueryDiscoveryRulePropertiesInput` via:
//
//	ResourceGraphQueryDiscoveryRulePropertiesArgs{...}
type ResourceGraphQueryDiscoveryRulePropertiesInput interface {
	pulumi.Input

	ToResourceGraphQueryDiscoveryRulePropertiesOutput() ResourceGraphQueryDiscoveryRulePropertiesOutput
	ToResourceGraphQueryDiscoveryRulePropertiesOutputWithContext(context.Context) ResourceGraphQueryDiscoveryRulePropertiesOutput
}

// Discovery rule properties for an Azure Resource Graph query
type ResourceGraphQueryDiscoveryRulePropertiesArgs struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals pulumi.StringInput `pulumi:"addRecommendedSignals"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting pulumi.StringInput `pulumi:"authenticationSetting"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships pulumi.StringInput `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ResourceGraphQuery'.
	DiscoveryRuleKind pulumi.StringInput `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
	ResourceGraphQuery pulumi.StringInput `pulumi:"resourceGraphQuery"`
}

func (ResourceGraphQueryDiscoveryRulePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGraphQueryDiscoveryRuleProperties)(nil)).Elem()
}

func (i ResourceGraphQueryDiscoveryRulePropertiesArgs) ToResourceGraphQueryDiscoveryRulePropertiesOutput() ResourceGraphQueryDiscoveryRulePropertiesOutput {
	return i.ToResourceGraphQueryDiscoveryRulePropertiesOutputWithContext(context.Background())
}

func (i ResourceGraphQueryDiscoveryRulePropertiesArgs) ToResourceGraphQueryDiscoveryRulePropertiesOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGraphQueryDiscoveryRulePropertiesOutput)
}

func (i ResourceGraphQueryDiscoveryRulePropertiesArgs) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutput() ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return i.ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (i ResourceGraphQueryDiscoveryRulePropertiesArgs) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGraphQueryDiscoveryRulePropertiesOutput).ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(ctx)
}

// ResourceGraphQueryDiscoveryRulePropertiesPtrInput is an input type that accepts ResourceGraphQueryDiscoveryRulePropertiesArgs, ResourceGraphQueryDiscoveryRulePropertiesPtr and ResourceGraphQueryDiscoveryRulePropertiesPtrOutput values.
// You can construct a concrete instance of `ResourceGraphQueryDiscoveryRulePropertiesPtrInput` via:
//
//	        ResourceGraphQueryDiscoveryRulePropertiesArgs{...}
//
//	or:
//
//	        nil
type ResourceGraphQueryDiscoveryRulePropertiesPtrInput interface {
	pulumi.Input

	ToResourceGraphQueryDiscoveryRulePropertiesPtrOutput() ResourceGraphQueryDiscoveryRulePropertiesPtrOutput
	ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(context.Context) ResourceGraphQueryDiscoveryRulePropertiesPtrOutput
}

type resourceGraphQueryDiscoveryRulePropertiesPtrType ResourceGraphQueryDiscoveryRulePropertiesArgs

func ResourceGraphQueryDiscoveryRulePropertiesPtr(v *ResourceGraphQueryDiscoveryRulePropertiesArgs) ResourceGraphQueryDiscoveryRulePropertiesPtrInput {
	return (*resourceGraphQueryDiscoveryRulePropertiesPtrType)(v)
}

func (*resourceGraphQueryDiscoveryRulePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGraphQueryDiscoveryRuleProperties)(nil)).Elem()
}

func (i *resourceGraphQueryDiscoveryRulePropertiesPtrType) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutput() ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return i.ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (i *resourceGraphQueryDiscoveryRulePropertiesPtrType) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceGraphQueryDiscoveryRulePropertiesPtrOutput)
}

// Discovery rule properties for an Azure Resource Graph query
type ResourceGraphQueryDiscoveryRulePropertiesOutput struct{ *pulumi.OutputState }

func (ResourceGraphQueryDiscoveryRulePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGraphQueryDiscoveryRuleProperties)(nil)).Elem()
}

func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) ToResourceGraphQueryDiscoveryRulePropertiesOutput() ResourceGraphQueryDiscoveryRulePropertiesOutput {
	return o
}

func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) ToResourceGraphQueryDiscoveryRulePropertiesOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesOutput {
	return o
}

func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutput() ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return o.ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(context.Background())
}

func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceGraphQueryDiscoveryRuleProperties) *ResourceGraphQueryDiscoveryRuleProperties {
		return &v
	}).(ResourceGraphQueryDiscoveryRulePropertiesPtrOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) string { return v.AddRecommendedSignals }).(pulumi.StringOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) DiscoverRelationships() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) string { return v.DiscoverRelationships }).(pulumi.StringOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ResourceGraphQuery'.
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) DiscoveryRuleKind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) string { return v.DiscoveryRuleKind }).(pulumi.StringOutput)
}

// Display name
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
func (o ResourceGraphQueryDiscoveryRulePropertiesOutput) ResourceGraphQuery() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRuleProperties) string { return v.ResourceGraphQuery }).(pulumi.StringOutput)
}

type ResourceGraphQueryDiscoveryRulePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceGraphQueryDiscoveryRuleProperties)(nil)).Elem()
}

func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutput() ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return o
}

func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) ToResourceGraphQueryDiscoveryRulePropertiesPtrOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesPtrOutput {
	return o
}

func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) Elem() ResourceGraphQueryDiscoveryRulePropertiesOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) ResourceGraphQueryDiscoveryRuleProperties {
		if v != nil {
			return *v
		}
		var ret ResourceGraphQueryDiscoveryRuleProperties
		return ret
	}).(ResourceGraphQueryDiscoveryRulePropertiesOutput)
}

// Whether to add all recommended signals to the discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) AddRecommendedSignals() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AddRecommendedSignals
	}).(pulumi.StringPtrOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) AuthenticationSetting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AuthenticationSetting
	}).(pulumi.StringPtrOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) DiscoverRelationships() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DiscoverRelationships
	}).(pulumi.StringPtrOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ResourceGraphQuery'.
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) DiscoveryRuleKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.DiscoveryRuleKind
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
func (o ResourceGraphQueryDiscoveryRulePropertiesPtrOutput) ResourceGraphQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceGraphQueryDiscoveryRuleProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ResourceGraphQuery
	}).(pulumi.StringPtrOutput)
}

// Discovery rule properties for an Azure Resource Graph query
type ResourceGraphQueryDiscoveryRulePropertiesResponse struct {
	// Whether to add all recommended signals to the discovered entities.
	AddRecommendedSignals string `pulumi:"addRecommendedSignals"`
	// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
	AuthenticationSetting string `pulumi:"authenticationSetting"`
	// Date when the discovery rule was (soft-)deleted.
	DeletionDate string `pulumi:"deletionDate"`
	// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
	DiscoverRelationships string `pulumi:"discoverRelationships"`
	// Discovery rule relationship discovery behavior
	// Expected value is 'ResourceGraphQuery'.
	DiscoveryRuleKind string `pulumi:"discoveryRuleKind"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Name of the entity which represents the discovery rule. Note: It might take a few minutes after creating the discovery rule until the entity is created.
	EntityName string `pulumi:"entityName"`
	// Error details if the last discovery operation failed.
	Error DiscoveryErrorResponse `pulumi:"error"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
	ResourceGraphQuery string `pulumi:"resourceGraphQuery"`
}

// Discovery rule properties for an Azure Resource Graph query
type ResourceGraphQueryDiscoveryRulePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceGraphQueryDiscoveryRulePropertiesResponse)(nil)).Elem()
}

func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) ToResourceGraphQueryDiscoveryRulePropertiesResponseOutput() ResourceGraphQueryDiscoveryRulePropertiesResponseOutput {
	return o
}

func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) ToResourceGraphQueryDiscoveryRulePropertiesResponseOutputWithContext(ctx context.Context) ResourceGraphQueryDiscoveryRulePropertiesResponseOutput {
	return o
}

// Whether to add all recommended signals to the discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) AddRecommendedSignals() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.AddRecommendedSignals }).(pulumi.StringOutput)
}

// Reference to the name of the authentication setting which is used for querying Azure Resource Graph. The same authentication setting will also be assigned to any discovered entities.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) AuthenticationSetting() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.AuthenticationSetting }).(pulumi.StringOutput)
}

// Date when the discovery rule was (soft-)deleted.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Whether to create relationships between the discovered entities based on a set of built-in rules. These relationships cannot be manually deleted.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) DiscoverRelationships() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.DiscoverRelationships }).(pulumi.StringOutput)
}

// Discovery rule relationship discovery behavior
// Expected value is 'ResourceGraphQuery'.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) DiscoveryRuleKind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.DiscoveryRuleKind }).(pulumi.StringOutput)
}

// Display name
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Name of the entity which represents the discovery rule. Note: It might take a few minutes after creating the discovery rule until the entity is created.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) EntityName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.EntityName }).(pulumi.StringOutput)
}

// Error details if the last discovery operation failed.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) Error() DiscoveryErrorResponseOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) DiscoveryErrorResponse { return v.Error }).(DiscoveryErrorResponseOutput)
}

// The status of the last operation.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Graph query text in KQL syntax. The query must return at least a column named 'id' which contains the resource ID of the discovered resources.
func (o ResourceGraphQueryDiscoveryRulePropertiesResponseOutput) ResourceGraphQuery() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceGraphQueryDiscoveryRulePropertiesResponse) string { return v.ResourceGraphQuery }).(pulumi.StringOutput)
}

// Resource map for schema in azure monitor.
type ResourceMap struct {
	// Resource Map Key.
	From string `pulumi:"from"`
	// Resource Map Value.
	To string `pulumi:"to"`
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

// Resource map for schema in azure monitor.
type ResourceMapArgs struct {
	// Resource Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Resource Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (ResourceMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMap)(nil)).Elem()
}

func (i ResourceMapArgs) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMapArgs) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

// ResourceMapArrayInput is an input type that accepts ResourceMapArray and ResourceMapArrayOutput values.
// You can construct a concrete instance of `ResourceMapArrayInput` via:
//
//	ResourceMapArray{ ResourceMapArgs{...} }
type ResourceMapArrayInput interface {
	pulumi.Input

	ToResourceMapArrayOutput() ResourceMapArrayOutput
	ToResourceMapArrayOutputWithContext(context.Context) ResourceMapArrayOutput
}

type ResourceMapArray []ResourceMapInput

func (ResourceMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMap)(nil)).Elem()
}

func (i ResourceMapArray) ToResourceMapArrayOutput() ResourceMapArrayOutput {
	return i.ToResourceMapArrayOutputWithContext(context.Background())
}

func (i ResourceMapArray) ToResourceMapArrayOutputWithContext(ctx context.Context) ResourceMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapArrayOutput)
}

// Resource map for schema in azure monitor.
type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMap)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

// Resource Map Key.
func (o ResourceMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMap) string { return v.From }).(pulumi.StringOutput)
}

// Resource Map Value.
func (o ResourceMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMap) string { return v.To }).(pulumi.StringOutput)
}

type ResourceMapArrayOutput struct{ *pulumi.OutputState }

func (ResourceMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMap)(nil)).Elem()
}

func (o ResourceMapArrayOutput) ToResourceMapArrayOutput() ResourceMapArrayOutput {
	return o
}

func (o ResourceMapArrayOutput) ToResourceMapArrayOutputWithContext(ctx context.Context) ResourceMapArrayOutput {
	return o
}

func (o ResourceMapArrayOutput) Index(i pulumi.IntInput) ResourceMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMap {
		return vs[0].([]ResourceMap)[vs[1].(int)]
	}).(ResourceMapOutput)
}

// Resource map for schema in azure monitor.
type ResourceMapResponse struct {
	// Resource Map Key.
	From string `pulumi:"from"`
	// Resource Map Value.
	To string `pulumi:"to"`
}

// Resource map for schema in azure monitor.
type ResourceMapResponseOutput struct{ *pulumi.OutputState }

func (ResourceMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMapResponse)(nil)).Elem()
}

func (o ResourceMapResponseOutput) ToResourceMapResponseOutput() ResourceMapResponseOutput {
	return o
}

func (o ResourceMapResponseOutput) ToResourceMapResponseOutputWithContext(ctx context.Context) ResourceMapResponseOutput {
	return o
}

// Resource Map Key.
func (o ResourceMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Resource Map Value.
func (o ResourceMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type ResourceMapResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceMapResponse)(nil)).Elem()
}

func (o ResourceMapResponseArrayOutput) ToResourceMapResponseArrayOutput() ResourceMapResponseArrayOutput {
	return o
}

func (o ResourceMapResponseArrayOutput) ToResourceMapResponseArrayOutputWithContext(ctx context.Context) ResourceMapResponseArrayOutput {
	return o
}

func (o ResourceMapResponseArrayOutput) Index(i pulumi.IntInput) ResourceMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceMapResponse {
		return vs[0].([]ResourceMapResponse)[vs[1].(int)]
	}).(ResourceMapResponseOutput)
}

// Azure Resource Metric Signal Definition properties
type ResourceMetricSignalDefinitionProperties struct {
	// Type of aggregation to apply to the metric
	AggregationType string `pulumi:"aggregationType"`
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Optional: Dimension to split by
	Dimension *string `pulumi:"dimension"`
	// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
	DimensionFilter *string `pulumi:"dimensionFilter"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRule `pulumi:"evaluationRules"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
	// Metric namespace
	MetricNamespace string `pulumi:"metricNamespace"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'AzureResourceMetric'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain string `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for ResourceMetricSignalDefinitionProperties
func (val *ResourceMetricSignalDefinitionProperties) Defaults() *ResourceMetricSignalDefinitionProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// ResourceMetricSignalDefinitionPropertiesInput is an input type that accepts ResourceMetricSignalDefinitionPropertiesArgs and ResourceMetricSignalDefinitionPropertiesOutput values.
// You can construct a concrete instance of `ResourceMetricSignalDefinitionPropertiesInput` via:
//
//	ResourceMetricSignalDefinitionPropertiesArgs{...}
type ResourceMetricSignalDefinitionPropertiesInput interface {
	pulumi.Input

	ToResourceMetricSignalDefinitionPropertiesOutput() ResourceMetricSignalDefinitionPropertiesOutput
	ToResourceMetricSignalDefinitionPropertiesOutputWithContext(context.Context) ResourceMetricSignalDefinitionPropertiesOutput
}

// Azure Resource Metric Signal Definition properties
type ResourceMetricSignalDefinitionPropertiesArgs struct {
	// Type of aggregation to apply to the metric
	AggregationType pulumi.StringInput `pulumi:"aggregationType"`
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit pulumi.StringPtrInput `pulumi:"dataUnit"`
	// Optional: Dimension to split by
	Dimension pulumi.StringPtrInput `pulumi:"dimension"`
	// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
	DimensionFilter pulumi.StringPtrInput `pulumi:"dimensionFilter"`
	// Display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleInput `pulumi:"evaluationRules"`
	// Name of the metric
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Metric namespace
	MetricNamespace pulumi.StringInput `pulumi:"metricNamespace"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval pulumi.StringPtrInput `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'AzureResourceMetric'.
	SignalKind pulumi.StringInput `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain pulumi.StringInput `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for ResourceMetricSignalDefinitionPropertiesArgs
func (val *ResourceMetricSignalDefinitionPropertiesArgs) Defaults() *ResourceMetricSignalDefinitionPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		tmp.RefreshInterval = pulumi.StringPtr("PT1M")
	}
	return &tmp
}
func (ResourceMetricSignalDefinitionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricSignalDefinitionProperties)(nil)).Elem()
}

func (i ResourceMetricSignalDefinitionPropertiesArgs) ToResourceMetricSignalDefinitionPropertiesOutput() ResourceMetricSignalDefinitionPropertiesOutput {
	return i.ToResourceMetricSignalDefinitionPropertiesOutputWithContext(context.Background())
}

func (i ResourceMetricSignalDefinitionPropertiesArgs) ToResourceMetricSignalDefinitionPropertiesOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSignalDefinitionPropertiesOutput)
}

func (i ResourceMetricSignalDefinitionPropertiesArgs) ToResourceMetricSignalDefinitionPropertiesPtrOutput() ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return i.ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i ResourceMetricSignalDefinitionPropertiesArgs) ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSignalDefinitionPropertiesOutput).ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(ctx)
}

// ResourceMetricSignalDefinitionPropertiesPtrInput is an input type that accepts ResourceMetricSignalDefinitionPropertiesArgs, ResourceMetricSignalDefinitionPropertiesPtr and ResourceMetricSignalDefinitionPropertiesPtrOutput values.
// You can construct a concrete instance of `ResourceMetricSignalDefinitionPropertiesPtrInput` via:
//
//	        ResourceMetricSignalDefinitionPropertiesArgs{...}
//
//	or:
//
//	        nil
type ResourceMetricSignalDefinitionPropertiesPtrInput interface {
	pulumi.Input

	ToResourceMetricSignalDefinitionPropertiesPtrOutput() ResourceMetricSignalDefinitionPropertiesPtrOutput
	ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(context.Context) ResourceMetricSignalDefinitionPropertiesPtrOutput
}

type resourceMetricSignalDefinitionPropertiesPtrType ResourceMetricSignalDefinitionPropertiesArgs

func ResourceMetricSignalDefinitionPropertiesPtr(v *ResourceMetricSignalDefinitionPropertiesArgs) ResourceMetricSignalDefinitionPropertiesPtrInput {
	return (*resourceMetricSignalDefinitionPropertiesPtrType)(v)
}

func (*resourceMetricSignalDefinitionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricSignalDefinitionProperties)(nil)).Elem()
}

func (i *resourceMetricSignalDefinitionPropertiesPtrType) ToResourceMetricSignalDefinitionPropertiesPtrOutput() ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return i.ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (i *resourceMetricSignalDefinitionPropertiesPtrType) ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMetricSignalDefinitionPropertiesPtrOutput)
}

// Azure Resource Metric Signal Definition properties
type ResourceMetricSignalDefinitionPropertiesOutput struct{ *pulumi.OutputState }

func (ResourceMetricSignalDefinitionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricSignalDefinitionProperties)(nil)).Elem()
}

func (o ResourceMetricSignalDefinitionPropertiesOutput) ToResourceMetricSignalDefinitionPropertiesOutput() ResourceMetricSignalDefinitionPropertiesOutput {
	return o
}

func (o ResourceMetricSignalDefinitionPropertiesOutput) ToResourceMetricSignalDefinitionPropertiesOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesOutput {
	return o
}

func (o ResourceMetricSignalDefinitionPropertiesOutput) ToResourceMetricSignalDefinitionPropertiesPtrOutput() ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return o.ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(context.Background())
}

func (o ResourceMetricSignalDefinitionPropertiesOutput) ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceMetricSignalDefinitionProperties) *ResourceMetricSignalDefinitionProperties {
		return &v
	}).(ResourceMetricSignalDefinitionPropertiesPtrOutput)
}

// Type of aggregation to apply to the metric
func (o ResourceMetricSignalDefinitionPropertiesOutput) AggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) string { return v.AggregationType }).(pulumi.StringOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o ResourceMetricSignalDefinitionPropertiesOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Optional: Dimension to split by
func (o ResourceMetricSignalDefinitionPropertiesOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
func (o ResourceMetricSignalDefinitionPropertiesOutput) DimensionFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) *string { return v.DimensionFilter }).(pulumi.StringPtrOutput)
}

// Display name
func (o ResourceMetricSignalDefinitionPropertiesOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o ResourceMetricSignalDefinitionPropertiesOutput) EvaluationRules() EvaluationRuleOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) EvaluationRule { return v.EvaluationRules }).(EvaluationRuleOutput)
}

// Name of the metric
func (o ResourceMetricSignalDefinitionPropertiesOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) string { return v.MetricName }).(pulumi.StringOutput)
}

// Metric namespace
func (o ResourceMetricSignalDefinitionPropertiesOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o ResourceMetricSignalDefinitionPropertiesOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'AzureResourceMetric'.
func (o ResourceMetricSignalDefinitionPropertiesOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o ResourceMetricSignalDefinitionPropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o ResourceMetricSignalDefinitionPropertiesOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionProperties) string { return v.TimeGrain }).(pulumi.StringOutput)
}

type ResourceMetricSignalDefinitionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (ResourceMetricSignalDefinitionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceMetricSignalDefinitionProperties)(nil)).Elem()
}

func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) ToResourceMetricSignalDefinitionPropertiesPtrOutput() ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return o
}

func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) ToResourceMetricSignalDefinitionPropertiesPtrOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesPtrOutput {
	return o
}

func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) Elem() ResourceMetricSignalDefinitionPropertiesOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) ResourceMetricSignalDefinitionProperties {
		if v != nil {
			return *v
		}
		var ret ResourceMetricSignalDefinitionProperties
		return ret
	}).(ResourceMetricSignalDefinitionPropertiesOutput)
}

// Type of aggregation to apply to the metric
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) AggregationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.AggregationType
	}).(pulumi.StringPtrOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataUnit
	}).(pulumi.StringPtrOutput)
}

// Optional: Dimension to split by
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.Dimension
	}).(pulumi.StringPtrOutput)
}

// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) DimensionFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DimensionFilter
	}).(pulumi.StringPtrOutput)
}

// Display name
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) EvaluationRules() EvaluationRulePtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *EvaluationRule {
		if v == nil {
			return nil
		}
		return &v.EvaluationRules
	}).(EvaluationRulePtrOutput)
}

// Name of the metric
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// Metric namespace
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) MetricNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MetricNamespace
	}).(pulumi.StringPtrOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return v.RefreshInterval
	}).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'AzureResourceMetric'.
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) SignalKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.SignalKind
	}).(pulumi.StringPtrOutput)
}

// Optional set of labels (key-value pairs)
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o ResourceMetricSignalDefinitionPropertiesPtrOutput) TimeGrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceMetricSignalDefinitionProperties) *string {
		if v == nil {
			return nil
		}
		return &v.TimeGrain
	}).(pulumi.StringPtrOutput)
}

// Azure Resource Metric Signal Definition properties
type ResourceMetricSignalDefinitionPropertiesResponse struct {
	// Type of aggregation to apply to the metric
	AggregationType string `pulumi:"aggregationType"`
	// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
	DataUnit *string `pulumi:"dataUnit"`
	// Date when the signal definition was (soft-)deleted
	DeletionDate string `pulumi:"deletionDate"`
	// Optional: Dimension to split by
	Dimension *string `pulumi:"dimension"`
	// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
	DimensionFilter *string `pulumi:"dimensionFilter"`
	// Display name
	DisplayName *string `pulumi:"displayName"`
	// Evaluation rules for the signal definition
	EvaluationRules EvaluationRuleResponse `pulumi:"evaluationRules"`
	// Name of the metric
	MetricName string `pulumi:"metricName"`
	// Metric namespace
	MetricNamespace string `pulumi:"metricNamespace"`
	// The status of the last operation.
	ProvisioningState string `pulumi:"provisioningState"`
	// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
	RefreshInterval *string `pulumi:"refreshInterval"`
	// Supported signal kinds as discriminator
	// Expected value is 'AzureResourceMetric'.
	SignalKind string `pulumi:"signalKind"`
	// Optional set of labels (key-value pairs)
	Tags map[string]string `pulumi:"tags"`
	// Time range of signal. ISO duration format like PT10M.
	TimeGrain string `pulumi:"timeGrain"`
}

// Defaults sets the appropriate defaults for ResourceMetricSignalDefinitionPropertiesResponse
func (val *ResourceMetricSignalDefinitionPropertiesResponse) Defaults() *ResourceMetricSignalDefinitionPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RefreshInterval == nil {
		refreshInterval_ := "PT1M"
		tmp.RefreshInterval = &refreshInterval_
	}
	return &tmp
}

// Azure Resource Metric Signal Definition properties
type ResourceMetricSignalDefinitionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ResourceMetricSignalDefinitionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceMetricSignalDefinitionPropertiesResponse)(nil)).Elem()
}

func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) ToResourceMetricSignalDefinitionPropertiesResponseOutput() ResourceMetricSignalDefinitionPropertiesResponseOutput {
	return o
}

func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) ToResourceMetricSignalDefinitionPropertiesResponseOutputWithContext(ctx context.Context) ResourceMetricSignalDefinitionPropertiesResponseOutput {
	return o
}

// Type of aggregation to apply to the metric
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) AggregationType() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.AggregationType }).(pulumi.StringOutput)
}

// Unit of the signal result (e.g. Bytes, MilliSeconds, Percent, Count))
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) DataUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) *string { return v.DataUnit }).(pulumi.StringPtrOutput)
}

// Date when the signal definition was (soft-)deleted
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) DeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.DeletionDate }).(pulumi.StringOutput)
}

// Optional: Dimension to split by
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) Dimension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) *string { return v.Dimension }).(pulumi.StringPtrOutput)
}

// Optional: Dimension filter to apply to the dimension. Must only be set if also Dimension is set.
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) DimensionFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) *string { return v.DimensionFilter }).(pulumi.StringPtrOutput)
}

// Display name
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Evaluation rules for the signal definition
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) EvaluationRules() EvaluationRuleResponseOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) EvaluationRuleResponse {
		return v.EvaluationRules
	}).(EvaluationRuleResponseOutput)
}

// Name of the metric
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.MetricName }).(pulumi.StringOutput)
}

// Metric namespace
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) MetricNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.MetricNamespace }).(pulumi.StringOutput)
}

// The status of the last operation.
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Interval in which the signal is being evaluated. Defaults to PT1M (1 minute).
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) *string { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

// Supported signal kinds as discriminator
// Expected value is 'AzureResourceMetric'.
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) SignalKind() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.SignalKind }).(pulumi.StringOutput)
}

// Optional set of labels (key-value pairs)
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Time range of signal. ISO duration format like PT10M.
func (o ResourceMetricSignalDefinitionPropertiesResponseOutput) TimeGrain() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceMetricSignalDefinitionPropertiesResponse) string { return v.TimeGrain }).(pulumi.StringOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicy struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// RetentionPolicyInput is an input type that accepts RetentionPolicyArgs and RetentionPolicyOutput values.
// You can construct a concrete instance of `RetentionPolicyInput` via:
//
//	RetentionPolicyArgs{...}
type RetentionPolicyInput interface {
	pulumi.Input

	ToRetentionPolicyOutput() RetentionPolicyOutput
	ToRetentionPolicyOutputWithContext(context.Context) RetentionPolicyOutput
}

// Specifies the retention policy for the log.
type RetentionPolicyArgs struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days pulumi.IntInput `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (RetentionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return i.ToRetentionPolicyOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput)
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i RetentionPolicyArgs) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyOutput).ToRetentionPolicyPtrOutputWithContext(ctx)
}

// RetentionPolicyPtrInput is an input type that accepts RetentionPolicyArgs, RetentionPolicyPtr and RetentionPolicyPtrOutput values.
// You can construct a concrete instance of `RetentionPolicyPtrInput` via:
//
//	        RetentionPolicyArgs{...}
//
//	or:
//
//	        nil
type RetentionPolicyPtrInput interface {
	pulumi.Input

	ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput
	ToRetentionPolicyPtrOutputWithContext(context.Context) RetentionPolicyPtrOutput
}

type retentionPolicyPtrType RetentionPolicyArgs

func RetentionPolicyPtr(v *RetentionPolicyArgs) RetentionPolicyPtrInput {
	return (*retentionPolicyPtrType)(v)
}

func (*retentionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return i.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (i *retentionPolicyPtrType) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetentionPolicyPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyOutput struct{ *pulumi.OutputState }

func (RetentionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutput() RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyOutputWithContext(ctx context.Context) RetentionPolicyOutput {
	return o
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o.ToRetentionPolicyPtrOutputWithContext(context.Background())
}

func (o RetentionPolicyOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RetentionPolicy) *RetentionPolicy {
		return &v
	}).(RetentionPolicyPtrOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicy) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicy) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyPtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicy)(nil)).Elem()
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutput() RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) ToRetentionPolicyPtrOutputWithContext(ctx context.Context) RetentionPolicyPtrOutput {
	return o
}

func (o RetentionPolicyPtrOutput) Elem() RetentionPolicyOutput {
	return o.ApplyT(func(v *RetentionPolicy) RetentionPolicy {
		if v != nil {
			return *v
		}
		var ret RetentionPolicy
		return ret
	}).(RetentionPolicyOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyPtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicy) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the retention policy for the log.
type RetentionPolicyResponse struct {
	// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
	Days int `pulumi:"days"`
	// a value indicating whether the retention policy is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Specifies the retention policy for the log.
type RetentionPolicyResponseOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutput() RetentionPolicyResponseOutput {
	return o
}

func (o RetentionPolicyResponseOutput) ToRetentionPolicyResponseOutputWithContext(ctx context.Context) RetentionPolicyResponseOutput {
	return o
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponseOutput) Days() pulumi.IntOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) int { return v.Days }).(pulumi.IntOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RetentionPolicyResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type RetentionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (RetentionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetentionPolicyResponse)(nil)).Elem()
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutput() RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) ToRetentionPolicyResponsePtrOutputWithContext(ctx context.Context) RetentionPolicyResponsePtrOutput {
	return o
}

func (o RetentionPolicyResponsePtrOutput) Elem() RetentionPolicyResponseOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) RetentionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret RetentionPolicyResponse
		return ret
	}).(RetentionPolicyResponseOutput)
}

// the number of days for the retention in days. A value of 0 will retain the events indefinitely.
func (o RetentionPolicyResponsePtrOutput) Days() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Days
	}).(pulumi.IntPtrOutput)
}

// a value indicating whether the retention policy is enabled.
func (o RetentionPolicyResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RetentionPolicyResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfiguration struct {
	// The flag that indicates whether or not to auto resolve a fired alert.
	AutoResolved *bool `pulumi:"autoResolved"`
	// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
	TimeToResolve *string `pulumi:"timeToResolve"`
}

// RuleResolveConfigurationInput is an input type that accepts RuleResolveConfigurationArgs and RuleResolveConfigurationOutput values.
// You can construct a concrete instance of `RuleResolveConfigurationInput` via:
//
//	RuleResolveConfigurationArgs{...}
type RuleResolveConfigurationInput interface {
	pulumi.Input

	ToRuleResolveConfigurationOutput() RuleResolveConfigurationOutput
	ToRuleResolveConfigurationOutputWithContext(context.Context) RuleResolveConfigurationOutput
}

// TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfigurationArgs struct {
	// The flag that indicates whether or not to auto resolve a fired alert.
	AutoResolved pulumi.BoolPtrInput `pulumi:"autoResolved"`
	// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
	TimeToResolve pulumi.StringPtrInput `pulumi:"timeToResolve"`
}

func (RuleResolveConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResolveConfiguration)(nil)).Elem()
}

func (i RuleResolveConfigurationArgs) ToRuleResolveConfigurationOutput() RuleResolveConfigurationOutput {
	return i.ToRuleResolveConfigurationOutputWithContext(context.Background())
}

func (i RuleResolveConfigurationArgs) ToRuleResolveConfigurationOutputWithContext(ctx context.Context) RuleResolveConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResolveConfigurationOutput)
}

func (i RuleResolveConfigurationArgs) ToRuleResolveConfigurationPtrOutput() RuleResolveConfigurationPtrOutput {
	return i.ToRuleResolveConfigurationPtrOutputWithContext(context.Background())
}

func (i RuleResolveConfigurationArgs) ToRuleResolveConfigurationPtrOutputWithContext(ctx context.Context) RuleResolveConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResolveConfigurationOutput).ToRuleResolveConfigurationPtrOutputWithContext(ctx)
}

// RuleResolveConfigurationPtrInput is an input type that accepts RuleResolveConfigurationArgs, RuleResolveConfigurationPtr and RuleResolveConfigurationPtrOutput values.
// You can construct a concrete instance of `RuleResolveConfigurationPtrInput` via:
//
//	        RuleResolveConfigurationArgs{...}
//
//	or:
//
//	        nil
type RuleResolveConfigurationPtrInput interface {
	pulumi.Input

	ToRuleResolveConfigurationPtrOutput() RuleResolveConfigurationPtrOutput
	ToRuleResolveConfigurationPtrOutputWithContext(context.Context) RuleResolveConfigurationPtrOutput
}

type ruleResolveConfigurationPtrType RuleResolveConfigurationArgs

func RuleResolveConfigurationPtr(v *RuleResolveConfigurationArgs) RuleResolveConfigurationPtrInput {
	return (*ruleResolveConfigurationPtrType)(v)
}

func (*ruleResolveConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleResolveConfiguration)(nil)).Elem()
}

func (i *ruleResolveConfigurationPtrType) ToRuleResolveConfigurationPtrOutput() RuleResolveConfigurationPtrOutput {
	return i.ToRuleResolveConfigurationPtrOutputWithContext(context.Background())
}

func (i *ruleResolveConfigurationPtrType) ToRuleResolveConfigurationPtrOutputWithContext(ctx context.Context) RuleResolveConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleResolveConfigurationPtrOutput)
}

// TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfigurationOutput struct{ *pulumi.OutputState }

func (RuleResolveConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResolveConfiguration)(nil)).Elem()
}

func (o RuleResolveConfigurationOutput) ToRuleResolveConfigurationOutput() RuleResolveConfigurationOutput {
	return o
}

func (o RuleResolveConfigurationOutput) ToRuleResolveConfigurationOutputWithContext(ctx context.Context) RuleResolveConfigurationOutput {
	return o
}

func (o RuleResolveConfigurationOutput) ToRuleResolveConfigurationPtrOutput() RuleResolveConfigurationPtrOutput {
	return o.ToRuleResolveConfigurationPtrOutputWithContext(context.Background())
}

func (o RuleResolveConfigurationOutput) ToRuleResolveConfigurationPtrOutputWithContext(ctx context.Context) RuleResolveConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleResolveConfiguration) *RuleResolveConfiguration {
		return &v
	}).(RuleResolveConfigurationPtrOutput)
}

// The flag that indicates whether or not to auto resolve a fired alert.
func (o RuleResolveConfigurationOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleResolveConfiguration) *bool { return v.AutoResolved }).(pulumi.BoolPtrOutput)
}

// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
func (o RuleResolveConfigurationOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleResolveConfiguration) *string { return v.TimeToResolve }).(pulumi.StringPtrOutput)
}

type RuleResolveConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RuleResolveConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleResolveConfiguration)(nil)).Elem()
}

func (o RuleResolveConfigurationPtrOutput) ToRuleResolveConfigurationPtrOutput() RuleResolveConfigurationPtrOutput {
	return o
}

func (o RuleResolveConfigurationPtrOutput) ToRuleResolveConfigurationPtrOutputWithContext(ctx context.Context) RuleResolveConfigurationPtrOutput {
	return o
}

func (o RuleResolveConfigurationPtrOutput) Elem() RuleResolveConfigurationOutput {
	return o.ApplyT(func(v *RuleResolveConfiguration) RuleResolveConfiguration {
		if v != nil {
			return *v
		}
		var ret RuleResolveConfiguration
		return ret
	}).(RuleResolveConfigurationOutput)
}

// The flag that indicates whether or not to auto resolve a fired alert.
func (o RuleResolveConfigurationPtrOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleResolveConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.AutoResolved
	}).(pulumi.BoolPtrOutput)
}

// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
func (o RuleResolveConfigurationPtrOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleResolveConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TimeToResolve
	}).(pulumi.StringPtrOutput)
}

// TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfigurationResponse struct {
	// The flag that indicates whether or not to auto resolve a fired alert.
	AutoResolved *bool `pulumi:"autoResolved"`
	// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
	TimeToResolve *string `pulumi:"timeToResolve"`
}

// TBD. Relevant only for rules of the kind LogAlert.
type RuleResolveConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RuleResolveConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResolveConfigurationResponse)(nil)).Elem()
}

func (o RuleResolveConfigurationResponseOutput) ToRuleResolveConfigurationResponseOutput() RuleResolveConfigurationResponseOutput {
	return o
}

func (o RuleResolveConfigurationResponseOutput) ToRuleResolveConfigurationResponseOutputWithContext(ctx context.Context) RuleResolveConfigurationResponseOutput {
	return o
}

// The flag that indicates whether or not to auto resolve a fired alert.
func (o RuleResolveConfigurationResponseOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleResolveConfigurationResponse) *bool { return v.AutoResolved }).(pulumi.BoolPtrOutput)
}

// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
func (o RuleResolveConfigurationResponseOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleResolveConfigurationResponse) *string { return v.TimeToResolve }).(pulumi.StringPtrOutput)
}

type RuleResolveConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RuleResolveConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleResolveConfigurationResponse)(nil)).Elem()
}

func (o RuleResolveConfigurationResponsePtrOutput) ToRuleResolveConfigurationResponsePtrOutput() RuleResolveConfigurationResponsePtrOutput {
	return o
}

func (o RuleResolveConfigurationResponsePtrOutput) ToRuleResolveConfigurationResponsePtrOutputWithContext(ctx context.Context) RuleResolveConfigurationResponsePtrOutput {
	return o
}

func (o RuleResolveConfigurationResponsePtrOutput) Elem() RuleResolveConfigurationResponseOutput {
	return o.ApplyT(func(v *RuleResolveConfigurationResponse) RuleResolveConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret RuleResolveConfigurationResponse
		return ret
	}).(RuleResolveConfigurationResponseOutput)
}

// The flag that indicates whether or not to auto resolve a fired alert.
func (o RuleResolveConfigurationResponsePtrOutput) AutoResolved() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuleResolveConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AutoResolved
	}).(pulumi.BoolPtrOutput)
}

// The duration a rule must evaluate as healthy before the fired alert is automatically resolved represented in ISO 8601 duration format.
func (o RuleResolveConfigurationResponsePtrOutput) TimeToResolve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleResolveConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeToResolve
	}).(pulumi.StringPtrOutput)
}

// The parameters used to run the investigation
type RunParametersResponse struct {
	// The alerts used to run the investigation
	Alerts []InvestigationScopeResponse `pulumi:"alerts"`
	// The impact time to investigate (in UTC)
	ImpactTime string `pulumi:"impactTime"`
	// The resources used to run the investigation
	Resources []InvestigationScopeResponse `pulumi:"resources"`
}

// The parameters used to run the investigation
type RunParametersResponseOutput struct{ *pulumi.OutputState }

func (RunParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunParametersResponse)(nil)).Elem()
}

func (o RunParametersResponseOutput) ToRunParametersResponseOutput() RunParametersResponseOutput {
	return o
}

func (o RunParametersResponseOutput) ToRunParametersResponseOutputWithContext(ctx context.Context) RunParametersResponseOutput {
	return o
}

// The alerts used to run the investigation
func (o RunParametersResponseOutput) Alerts() InvestigationScopeResponseArrayOutput {
	return o.ApplyT(func(v RunParametersResponse) []InvestigationScopeResponse { return v.Alerts }).(InvestigationScopeResponseArrayOutput)
}

// The impact time to investigate (in UTC)
func (o RunParametersResponseOutput) ImpactTime() pulumi.StringOutput {
	return o.ApplyT(func(v RunParametersResponse) string { return v.ImpactTime }).(pulumi.StringOutput)
}

// The resources used to run the investigation
func (o RunParametersResponseOutput) Resources() InvestigationScopeResponseArrayOutput {
	return o.ApplyT(func(v RunParametersResponse) []InvestigationScopeResponse { return v.Resources }).(InvestigationScopeResponseArrayOutput)
}

// The parameters for the scaling action.
type ScaleAction struct {
	// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
	Cooldown string `pulumi:"cooldown"`
	// the scale direction. Whether the scaling action increases or decreases the number of instances.
	Direction ScaleDirection `pulumi:"direction"`
	// the type of action that should occur when the scale rule fires.
	Type ScaleType `pulumi:"type"`
	// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ScaleAction
func (val *ScaleAction) Defaults() *ScaleAction {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Value == nil {
		value_ := "1"
		tmp.Value = &value_
	}
	return &tmp
}

// ScaleActionInput is an input type that accepts ScaleActionArgs and ScaleActionOutput values.
// You can construct a concrete instance of `ScaleActionInput` via:
//
//	ScaleActionArgs{...}
type ScaleActionInput interface {
	pulumi.Input

	ToScaleActionOutput() ScaleActionOutput
	ToScaleActionOutputWithContext(context.Context) ScaleActionOutput
}

// The parameters for the scaling action.
type ScaleActionArgs struct {
	// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
	Cooldown pulumi.StringInput `pulumi:"cooldown"`
	// the scale direction. Whether the scaling action increases or decreases the number of instances.
	Direction ScaleDirectionInput `pulumi:"direction"`
	// the type of action that should occur when the scale rule fires.
	Type ScaleTypeInput `pulumi:"type"`
	// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ScaleActionArgs
func (val *ScaleActionArgs) Defaults() *ScaleActionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Value == nil {
		tmp.Value = pulumi.StringPtr("1")
	}
	return &tmp
}
func (ScaleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleAction)(nil)).Elem()
}

func (i ScaleActionArgs) ToScaleActionOutput() ScaleActionOutput {
	return i.ToScaleActionOutputWithContext(context.Background())
}

func (i ScaleActionArgs) ToScaleActionOutputWithContext(ctx context.Context) ScaleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleActionOutput)
}

// The parameters for the scaling action.
type ScaleActionOutput struct{ *pulumi.OutputState }

func (ScaleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleAction)(nil)).Elem()
}

func (o ScaleActionOutput) ToScaleActionOutput() ScaleActionOutput {
	return o
}

func (o ScaleActionOutput) ToScaleActionOutputWithContext(ctx context.Context) ScaleActionOutput {
	return o
}

// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
func (o ScaleActionOutput) Cooldown() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleAction) string { return v.Cooldown }).(pulumi.StringOutput)
}

// the scale direction. Whether the scaling action increases or decreases the number of instances.
func (o ScaleActionOutput) Direction() ScaleDirectionOutput {
	return o.ApplyT(func(v ScaleAction) ScaleDirection { return v.Direction }).(ScaleDirectionOutput)
}

// the type of action that should occur when the scale rule fires.
func (o ScaleActionOutput) Type() ScaleTypeOutput {
	return o.ApplyT(func(v ScaleAction) ScaleType { return v.Type }).(ScaleTypeOutput)
}

// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
func (o ScaleActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// The parameters for the scaling action.
type ScaleActionResponse struct {
	// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
	Cooldown string `pulumi:"cooldown"`
	// the scale direction. Whether the scaling action increases or decreases the number of instances.
	Direction string `pulumi:"direction"`
	// the type of action that should occur when the scale rule fires.
	Type string `pulumi:"type"`
	// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for ScaleActionResponse
func (val *ScaleActionResponse) Defaults() *ScaleActionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Value == nil {
		value_ := "1"
		tmp.Value = &value_
	}
	return &tmp
}

// The parameters for the scaling action.
type ScaleActionResponseOutput struct{ *pulumi.OutputState }

func (ScaleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleActionResponse)(nil)).Elem()
}

func (o ScaleActionResponseOutput) ToScaleActionResponseOutput() ScaleActionResponseOutput {
	return o
}

func (o ScaleActionResponseOutput) ToScaleActionResponseOutputWithContext(ctx context.Context) ScaleActionResponseOutput {
	return o
}

// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
func (o ScaleActionResponseOutput) Cooldown() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleActionResponse) string { return v.Cooldown }).(pulumi.StringOutput)
}

// the scale direction. Whether the scaling action increases or decreases the number of instances.
func (o ScaleActionResponseOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleActionResponse) string { return v.Direction }).(pulumi.StringOutput)
}

// the type of action that should occur when the scale rule fires.
func (o ScaleActionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleActionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
func (o ScaleActionResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleActionResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// The number of instances that can be used during this profile.
type ScaleCapacity struct {
	// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
	Default string `pulumi:"default"`
	// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
	Maximum string `pulumi:"maximum"`
	// the minimum number of instances for the resource.
	Minimum string `pulumi:"minimum"`
}

// ScaleCapacityInput is an input type that accepts ScaleCapacityArgs and ScaleCapacityOutput values.
// You can construct a concrete instance of `ScaleCapacityInput` via:
//
//	ScaleCapacityArgs{...}
type ScaleCapacityInput interface {
	pulumi.Input

	ToScaleCapacityOutput() ScaleCapacityOutput
	ToScaleCapacityOutputWithContext(context.Context) ScaleCapacityOutput
}

// The number of instances that can be used during this profile.
type ScaleCapacityArgs struct {
	// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
	Default pulumi.StringInput `pulumi:"default"`
	// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
	Maximum pulumi.StringInput `pulumi:"maximum"`
	// the minimum number of instances for the resource.
	Minimum pulumi.StringInput `pulumi:"minimum"`
}

func (ScaleCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleCapacity)(nil)).Elem()
}

func (i ScaleCapacityArgs) ToScaleCapacityOutput() ScaleCapacityOutput {
	return i.ToScaleCapacityOutputWithContext(context.Background())
}

func (i ScaleCapacityArgs) ToScaleCapacityOutputWithContext(ctx context.Context) ScaleCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleCapacityOutput)
}

// The number of instances that can be used during this profile.
type ScaleCapacityOutput struct{ *pulumi.OutputState }

func (ScaleCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleCapacity)(nil)).Elem()
}

func (o ScaleCapacityOutput) ToScaleCapacityOutput() ScaleCapacityOutput {
	return o
}

func (o ScaleCapacityOutput) ToScaleCapacityOutputWithContext(ctx context.Context) ScaleCapacityOutput {
	return o
}

// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
func (o ScaleCapacityOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacity) string { return v.Default }).(pulumi.StringOutput)
}

// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
func (o ScaleCapacityOutput) Maximum() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacity) string { return v.Maximum }).(pulumi.StringOutput)
}

// the minimum number of instances for the resource.
func (o ScaleCapacityOutput) Minimum() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacity) string { return v.Minimum }).(pulumi.StringOutput)
}

// The number of instances that can be used during this profile.
type ScaleCapacityResponse struct {
	// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
	Default string `pulumi:"default"`
	// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
	Maximum string `pulumi:"maximum"`
	// the minimum number of instances for the resource.
	Minimum string `pulumi:"minimum"`
}

// The number of instances that can be used during this profile.
type ScaleCapacityResponseOutput struct{ *pulumi.OutputState }

func (ScaleCapacityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleCapacityResponse)(nil)).Elem()
}

func (o ScaleCapacityResponseOutput) ToScaleCapacityResponseOutput() ScaleCapacityResponseOutput {
	return o
}

func (o ScaleCapacityResponseOutput) ToScaleCapacityResponseOutputWithContext(ctx context.Context) ScaleCapacityResponseOutput {
	return o
}

// the number of instances that will be set if metrics are not available for evaluation. The default is only used if the current instance count is lower than the default.
func (o ScaleCapacityResponseOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacityResponse) string { return v.Default }).(pulumi.StringOutput)
}

// the maximum number of instances for the resource. The actual maximum number of instances is limited by the cores that are available in the subscription.
func (o ScaleCapacityResponseOutput) Maximum() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacityResponse) string { return v.Maximum }).(pulumi.StringOutput)
}

// the minimum number of instances for the resource.
func (o ScaleCapacityResponseOutput) Minimum() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleCapacityResponse) string { return v.Minimum }).(pulumi.StringOutput)
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRule struct {
	// the trigger that results in a scaling action.
	MetricTrigger MetricTrigger `pulumi:"metricTrigger"`
	// the parameters for the scaling action.
	ScaleAction ScaleAction `pulumi:"scaleAction"`
}

// Defaults sets the appropriate defaults for ScaleRule
func (val *ScaleRule) Defaults() *ScaleRule {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ScaleAction = *tmp.ScaleAction.Defaults()

	return &tmp
}

// ScaleRuleInput is an input type that accepts ScaleRuleArgs and ScaleRuleOutput values.
// You can construct a concrete instance of `ScaleRuleInput` via:
//
//	ScaleRuleArgs{...}
type ScaleRuleInput interface {
	pulumi.Input

	ToScaleRuleOutput() ScaleRuleOutput
	ToScaleRuleOutputWithContext(context.Context) ScaleRuleOutput
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRuleArgs struct {
	// the trigger that results in a scaling action.
	MetricTrigger MetricTriggerInput `pulumi:"metricTrigger"`
	// the parameters for the scaling action.
	ScaleAction ScaleActionInput `pulumi:"scaleAction"`
}

// Defaults sets the appropriate defaults for ScaleRuleArgs
func (val *ScaleRuleArgs) Defaults() *ScaleRuleArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ScaleRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRule)(nil)).Elem()
}

func (i ScaleRuleArgs) ToScaleRuleOutput() ScaleRuleOutput {
	return i.ToScaleRuleOutputWithContext(context.Background())
}

func (i ScaleRuleArgs) ToScaleRuleOutputWithContext(ctx context.Context) ScaleRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleOutput)
}

// ScaleRuleArrayInput is an input type that accepts ScaleRuleArray and ScaleRuleArrayOutput values.
// You can construct a concrete instance of `ScaleRuleArrayInput` via:
//
//	ScaleRuleArray{ ScaleRuleArgs{...} }
type ScaleRuleArrayInput interface {
	pulumi.Input

	ToScaleRuleArrayOutput() ScaleRuleArrayOutput
	ToScaleRuleArrayOutputWithContext(context.Context) ScaleRuleArrayOutput
}

type ScaleRuleArray []ScaleRuleInput

func (ScaleRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRule)(nil)).Elem()
}

func (i ScaleRuleArray) ToScaleRuleArrayOutput() ScaleRuleArrayOutput {
	return i.ToScaleRuleArrayOutputWithContext(context.Background())
}

func (i ScaleRuleArray) ToScaleRuleArrayOutputWithContext(ctx context.Context) ScaleRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleArrayOutput)
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRuleOutput struct{ *pulumi.OutputState }

func (ScaleRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRule)(nil)).Elem()
}

func (o ScaleRuleOutput) ToScaleRuleOutput() ScaleRuleOutput {
	return o
}

func (o ScaleRuleOutput) ToScaleRuleOutputWithContext(ctx context.Context) ScaleRuleOutput {
	return o
}

// the trigger that results in a scaling action.
func (o ScaleRuleOutput) MetricTrigger() MetricTriggerOutput {
	return o.ApplyT(func(v ScaleRule) MetricTrigger { return v.MetricTrigger }).(MetricTriggerOutput)
}

// the parameters for the scaling action.
func (o ScaleRuleOutput) ScaleAction() ScaleActionOutput {
	return o.ApplyT(func(v ScaleRule) ScaleAction { return v.ScaleAction }).(ScaleActionOutput)
}

type ScaleRuleArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRule)(nil)).Elem()
}

func (o ScaleRuleArrayOutput) ToScaleRuleArrayOutput() ScaleRuleArrayOutput {
	return o
}

func (o ScaleRuleArrayOutput) ToScaleRuleArrayOutputWithContext(ctx context.Context) ScaleRuleArrayOutput {
	return o
}

func (o ScaleRuleArrayOutput) Index(i pulumi.IntInput) ScaleRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRule {
		return vs[0].([]ScaleRule)[vs[1].(int)]
	}).(ScaleRuleOutput)
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimension struct {
	// Name of the dimension.
	DimensionName string `pulumi:"dimensionName"`
	// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
	Operator string `pulumi:"operator"`
	// list of dimension values. For example: ["App1","App2"].
	Values []string `pulumi:"values"`
}

// ScaleRuleMetricDimensionInput is an input type that accepts ScaleRuleMetricDimensionArgs and ScaleRuleMetricDimensionOutput values.
// You can construct a concrete instance of `ScaleRuleMetricDimensionInput` via:
//
//	ScaleRuleMetricDimensionArgs{...}
type ScaleRuleMetricDimensionInput interface {
	pulumi.Input

	ToScaleRuleMetricDimensionOutput() ScaleRuleMetricDimensionOutput
	ToScaleRuleMetricDimensionOutputWithContext(context.Context) ScaleRuleMetricDimensionOutput
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimensionArgs struct {
	// Name of the dimension.
	DimensionName pulumi.StringInput `pulumi:"dimensionName"`
	// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
	Operator pulumi.StringInput `pulumi:"operator"`
	// list of dimension values. For example: ["App1","App2"].
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ScaleRuleMetricDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleMetricDimension)(nil)).Elem()
}

func (i ScaleRuleMetricDimensionArgs) ToScaleRuleMetricDimensionOutput() ScaleRuleMetricDimensionOutput {
	return i.ToScaleRuleMetricDimensionOutputWithContext(context.Background())
}

func (i ScaleRuleMetricDimensionArgs) ToScaleRuleMetricDimensionOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleMetricDimensionOutput)
}

// ScaleRuleMetricDimensionArrayInput is an input type that accepts ScaleRuleMetricDimensionArray and ScaleRuleMetricDimensionArrayOutput values.
// You can construct a concrete instance of `ScaleRuleMetricDimensionArrayInput` via:
//
//	ScaleRuleMetricDimensionArray{ ScaleRuleMetricDimensionArgs{...} }
type ScaleRuleMetricDimensionArrayInput interface {
	pulumi.Input

	ToScaleRuleMetricDimensionArrayOutput() ScaleRuleMetricDimensionArrayOutput
	ToScaleRuleMetricDimensionArrayOutputWithContext(context.Context) ScaleRuleMetricDimensionArrayOutput
}

type ScaleRuleMetricDimensionArray []ScaleRuleMetricDimensionInput

func (ScaleRuleMetricDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleMetricDimension)(nil)).Elem()
}

func (i ScaleRuleMetricDimensionArray) ToScaleRuleMetricDimensionArrayOutput() ScaleRuleMetricDimensionArrayOutput {
	return i.ToScaleRuleMetricDimensionArrayOutputWithContext(context.Background())
}

func (i ScaleRuleMetricDimensionArray) ToScaleRuleMetricDimensionArrayOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleRuleMetricDimensionArrayOutput)
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimensionOutput struct{ *pulumi.OutputState }

func (ScaleRuleMetricDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleMetricDimension)(nil)).Elem()
}

func (o ScaleRuleMetricDimensionOutput) ToScaleRuleMetricDimensionOutput() ScaleRuleMetricDimensionOutput {
	return o
}

func (o ScaleRuleMetricDimensionOutput) ToScaleRuleMetricDimensionOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionOutput {
	return o
}

// Name of the dimension.
func (o ScaleRuleMetricDimensionOutput) DimensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimension) string { return v.DimensionName }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
func (o ScaleRuleMetricDimensionOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimension) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values. For example: ["App1","App2"].
func (o ScaleRuleMetricDimensionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimension) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScaleRuleMetricDimensionArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleMetricDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleMetricDimension)(nil)).Elem()
}

func (o ScaleRuleMetricDimensionArrayOutput) ToScaleRuleMetricDimensionArrayOutput() ScaleRuleMetricDimensionArrayOutput {
	return o
}

func (o ScaleRuleMetricDimensionArrayOutput) ToScaleRuleMetricDimensionArrayOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionArrayOutput {
	return o
}

func (o ScaleRuleMetricDimensionArrayOutput) Index(i pulumi.IntInput) ScaleRuleMetricDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleMetricDimension {
		return vs[0].([]ScaleRuleMetricDimension)[vs[1].(int)]
	}).(ScaleRuleMetricDimensionOutput)
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimensionResponse struct {
	// Name of the dimension.
	DimensionName string `pulumi:"dimensionName"`
	// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
	Operator string `pulumi:"operator"`
	// list of dimension values. For example: ["App1","App2"].
	Values []string `pulumi:"values"`
}

// Specifies an auto scale rule metric dimension.
type ScaleRuleMetricDimensionResponseOutput struct{ *pulumi.OutputState }

func (ScaleRuleMetricDimensionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleMetricDimensionResponse)(nil)).Elem()
}

func (o ScaleRuleMetricDimensionResponseOutput) ToScaleRuleMetricDimensionResponseOutput() ScaleRuleMetricDimensionResponseOutput {
	return o
}

func (o ScaleRuleMetricDimensionResponseOutput) ToScaleRuleMetricDimensionResponseOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionResponseOutput {
	return o
}

// Name of the dimension.
func (o ScaleRuleMetricDimensionResponseOutput) DimensionName() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimensionResponse) string { return v.DimensionName }).(pulumi.StringOutput)
}

// the dimension operator. Only 'Equals' and 'NotEquals' are supported. 'Equals' being equal to any of the values. 'NotEquals' being not equal to all of the values
func (o ScaleRuleMetricDimensionResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimensionResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// list of dimension values. For example: ["App1","App2"].
func (o ScaleRuleMetricDimensionResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScaleRuleMetricDimensionResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ScaleRuleMetricDimensionResponseArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleMetricDimensionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleMetricDimensionResponse)(nil)).Elem()
}

func (o ScaleRuleMetricDimensionResponseArrayOutput) ToScaleRuleMetricDimensionResponseArrayOutput() ScaleRuleMetricDimensionResponseArrayOutput {
	return o
}

func (o ScaleRuleMetricDimensionResponseArrayOutput) ToScaleRuleMetricDimensionResponseArrayOutputWithContext(ctx context.Context) ScaleRuleMetricDimensionResponseArrayOutput {
	return o
}

func (o ScaleRuleMetricDimensionResponseArrayOutput) Index(i pulumi.IntInput) ScaleRuleMetricDimensionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleMetricDimensionResponse {
		return vs[0].([]ScaleRuleMetricDimensionResponse)[vs[1].(int)]
	}).(ScaleRuleMetricDimensionResponseOutput)
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRuleResponse struct {
	// the trigger that results in a scaling action.
	MetricTrigger MetricTriggerResponse `pulumi:"metricTrigger"`
	// the parameters for the scaling action.
	ScaleAction ScaleActionResponse `pulumi:"scaleAction"`
}

// Defaults sets the appropriate defaults for ScaleRuleResponse
func (val *ScaleRuleResponse) Defaults() *ScaleRuleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ScaleAction = *tmp.ScaleAction.Defaults()

	return &tmp
}

// A rule that provide the triggers and parameters for the scaling action.
type ScaleRuleResponseOutput struct{ *pulumi.OutputState }

func (ScaleRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleRuleResponse)(nil)).Elem()
}

func (o ScaleRuleResponseOutput) ToScaleRuleResponseOutput() ScaleRuleResponseOutput {
	return o
}

func (o ScaleRuleResponseOutput) ToScaleRuleResponseOutputWithContext(ctx context.Context) ScaleRuleResponseOutput {
	return o
}

// the trigger that results in a scaling action.
func (o ScaleRuleResponseOutput) MetricTrigger() MetricTriggerResponseOutput {
	return o.ApplyT(func(v ScaleRuleResponse) MetricTriggerResponse { return v.MetricTrigger }).(MetricTriggerResponseOutput)
}

// the parameters for the scaling action.
func (o ScaleRuleResponseOutput) ScaleAction() ScaleActionResponseOutput {
	return o.ApplyT(func(v ScaleRuleResponse) ScaleActionResponse { return v.ScaleAction }).(ScaleActionResponseOutput)
}

type ScaleRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ScaleRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScaleRuleResponse)(nil)).Elem()
}

func (o ScaleRuleResponseArrayOutput) ToScaleRuleResponseArrayOutput() ScaleRuleResponseArrayOutput {
	return o
}

func (o ScaleRuleResponseArrayOutput) ToScaleRuleResponseArrayOutputWithContext(ctx context.Context) ScaleRuleResponseArrayOutput {
	return o
}

func (o ScaleRuleResponseArrayOutput) Index(i pulumi.IntInput) ScaleRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScaleRuleResponse {
		return vs[0].([]ScaleRuleResponse)[vs[1].(int)]
	}).(ScaleRuleResponseOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteria struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf []Condition `pulumi:"allOf"`
}

// ScheduledQueryRuleCriteriaInput is an input type that accepts ScheduledQueryRuleCriteriaArgs and ScheduledQueryRuleCriteriaOutput values.
// You can construct a concrete instance of `ScheduledQueryRuleCriteriaInput` via:
//
//	ScheduledQueryRuleCriteriaArgs{...}
type ScheduledQueryRuleCriteriaInput interface {
	pulumi.Input

	ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput
	ToScheduledQueryRuleCriteriaOutputWithContext(context.Context) ScheduledQueryRuleCriteriaOutput
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaArgs struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf ConditionArrayInput `pulumi:"allOf"`
}

func (ScheduledQueryRuleCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteria)(nil)).Elem()
}

func (i ScheduledQueryRuleCriteriaArgs) ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput {
	return i.ToScheduledQueryRuleCriteriaOutputWithContext(context.Background())
}

func (i ScheduledQueryRuleCriteriaArgs) ToScheduledQueryRuleCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduledQueryRuleCriteriaOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRuleCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteria)(nil)).Elem()
}

func (o ScheduledQueryRuleCriteriaOutput) ToScheduledQueryRuleCriteriaOutput() ScheduledQueryRuleCriteriaOutput {
	return o
}

func (o ScheduledQueryRuleCriteriaOutput) ToScheduledQueryRuleCriteriaOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaOutput {
	return o
}

// A list of conditions to evaluate against the specified scopes
func (o ScheduledQueryRuleCriteriaOutput) AllOf() ConditionArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRuleCriteria) []Condition { return v.AllOf }).(ConditionArrayOutput)
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaResponse struct {
	// A list of conditions to evaluate against the specified scopes
	AllOf []ConditionResponse `pulumi:"allOf"`
}

// The rule criteria that defines the conditions of the scheduled query rule.
type ScheduledQueryRuleCriteriaResponseOutput struct{ *pulumi.OutputState }

func (ScheduledQueryRuleCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduledQueryRuleCriteriaResponse)(nil)).Elem()
}

func (o ScheduledQueryRuleCriteriaResponseOutput) ToScheduledQueryRuleCriteriaResponseOutput() ScheduledQueryRuleCriteriaResponseOutput {
	return o
}

func (o ScheduledQueryRuleCriteriaResponseOutput) ToScheduledQueryRuleCriteriaResponseOutputWithContext(ctx context.Context) ScheduledQueryRuleCriteriaResponseOutput {
	return o
}

// A list of conditions to evaluate against the specified scopes
func (o ScheduledQueryRuleCriteriaResponseOutput) AllOf() ConditionResponseArrayOutput {
	return o.ApplyT(func(v ScheduledQueryRuleCriteriaResponse) []ConditionResponse { return v.AllOf }).(ConditionResponseArrayOutput)
}

// Schema map for azure monitor for logs.
type SchemaMap struct {
	// Record Map.
	RecordMap []RecordMap `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap []ResourceMap `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap []ScopeMap `pulumi:"scopeMap"`
}

// SchemaMapInput is an input type that accepts SchemaMap and SchemaMapOutput values.
// You can construct a concrete instance of `SchemaMapInput` via:
//
//	SchemaMap{ "key": SchemaArgs{...} }
type SchemaMapInput interface {
	pulumi.Input

	ToSchemaMapOutput() SchemaMapOutput
	ToSchemaMapOutputWithContext(context.Context) SchemaMapOutput
}

// Schema map for azure monitor for logs.
type SchemaMapArgs struct {
	// Record Map.
	RecordMap RecordMapArrayInput `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap ResourceMapArrayInput `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap ScopeMapArrayInput `pulumi:"scopeMap"`
}

func (SchemaMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMap)(nil)).Elem()
}

func (i SchemaMapArgs) ToSchemaMapOutput() SchemaMapOutput {
	return i.ToSchemaMapOutputWithContext(context.Background())
}

func (i SchemaMapArgs) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput)
}

func (i SchemaMapArgs) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return i.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (i SchemaMapArgs) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput).ToSchemaMapPtrOutputWithContext(ctx)
}

// SchemaMapPtrInput is an input type that accepts SchemaMapArgs, SchemaMapPtr and SchemaMapPtrOutput values.
// You can construct a concrete instance of `SchemaMapPtrInput` via:
//
//	        SchemaMapArgs{...}
//
//	or:
//
//	        nil
type SchemaMapPtrInput interface {
	pulumi.Input

	ToSchemaMapPtrOutput() SchemaMapPtrOutput
	ToSchemaMapPtrOutputWithContext(context.Context) SchemaMapPtrOutput
}

type schemaMapPtrType SchemaMapArgs

func SchemaMapPtr(v *SchemaMapArgs) SchemaMapPtrInput {
	return (*schemaMapPtrType)(v)
}

func (*schemaMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMap)(nil)).Elem()
}

func (i *schemaMapPtrType) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return i.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (i *schemaMapPtrType) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapPtrOutput)
}

// Schema map for azure monitor for logs.
type SchemaMapOutput struct{ *pulumi.OutputState }

func (SchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMap)(nil)).Elem()
}

func (o SchemaMapOutput) ToSchemaMapOutput() SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return o.ToSchemaMapPtrOutputWithContext(context.Background())
}

func (o SchemaMapOutput) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaMap) *SchemaMap {
		return &v
	}).(SchemaMapPtrOutput)
}

// Record Map.
func (o SchemaMapOutput) RecordMap() RecordMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []RecordMap { return v.RecordMap }).(RecordMapArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapOutput) ResourceMap() ResourceMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []ResourceMap { return v.ResourceMap }).(ResourceMapArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapOutput) ScopeMap() ScopeMapArrayOutput {
	return o.ApplyT(func(v SchemaMap) []ScopeMap { return v.ScopeMap }).(ScopeMapArrayOutput)
}

type SchemaMapPtrOutput struct{ *pulumi.OutputState }

func (SchemaMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMap)(nil)).Elem()
}

func (o SchemaMapPtrOutput) ToSchemaMapPtrOutput() SchemaMapPtrOutput {
	return o
}

func (o SchemaMapPtrOutput) ToSchemaMapPtrOutputWithContext(ctx context.Context) SchemaMapPtrOutput {
	return o
}

func (o SchemaMapPtrOutput) Elem() SchemaMapOutput {
	return o.ApplyT(func(v *SchemaMap) SchemaMap {
		if v != nil {
			return *v
		}
		var ret SchemaMap
		return ret
	}).(SchemaMapOutput)
}

// Record Map.
func (o SchemaMapPtrOutput) RecordMap() RecordMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []RecordMap {
		if v == nil {
			return nil
		}
		return v.RecordMap
	}).(RecordMapArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapPtrOutput) ResourceMap() ResourceMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []ResourceMap {
		if v == nil {
			return nil
		}
		return v.ResourceMap
	}).(ResourceMapArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapPtrOutput) ScopeMap() ScopeMapArrayOutput {
	return o.ApplyT(func(v *SchemaMap) []ScopeMap {
		if v == nil {
			return nil
		}
		return v.ScopeMap
	}).(ScopeMapArrayOutput)
}

// Schema map for azure monitor for logs.
type SchemaMapResponse struct {
	// Record Map.
	RecordMap []RecordMapResponse `pulumi:"recordMap"`
	// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
	ResourceMap []ResourceMapResponse `pulumi:"resourceMap"`
	// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
	ScopeMap []ScopeMapResponse `pulumi:"scopeMap"`
}

// Schema map for azure monitor for logs.
type SchemaMapResponseOutput struct{ *pulumi.OutputState }

func (SchemaMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaMapResponse)(nil)).Elem()
}

func (o SchemaMapResponseOutput) ToSchemaMapResponseOutput() SchemaMapResponseOutput {
	return o
}

func (o SchemaMapResponseOutput) ToSchemaMapResponseOutputWithContext(ctx context.Context) SchemaMapResponseOutput {
	return o
}

// Record Map.
func (o SchemaMapResponseOutput) RecordMap() RecordMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []RecordMapResponse { return v.RecordMap }).(RecordMapResponseArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapResponseOutput) ResourceMap() ResourceMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []ResourceMapResponse { return v.ResourceMap }).(ResourceMapResponseArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapResponseOutput) ScopeMap() ScopeMapResponseArrayOutput {
	return o.ApplyT(func(v SchemaMapResponse) []ScopeMapResponse { return v.ScopeMap }).(ScopeMapResponseArrayOutput)
}

type SchemaMapResponsePtrOutput struct{ *pulumi.OutputState }

func (SchemaMapResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaMapResponse)(nil)).Elem()
}

func (o SchemaMapResponsePtrOutput) ToSchemaMapResponsePtrOutput() SchemaMapResponsePtrOutput {
	return o
}

func (o SchemaMapResponsePtrOutput) ToSchemaMapResponsePtrOutputWithContext(ctx context.Context) SchemaMapResponsePtrOutput {
	return o
}

func (o SchemaMapResponsePtrOutput) Elem() SchemaMapResponseOutput {
	return o.ApplyT(func(v *SchemaMapResponse) SchemaMapResponse {
		if v != nil {
			return *v
		}
		var ret SchemaMapResponse
		return ret
	}).(SchemaMapResponseOutput)
}

// Record Map.
func (o SchemaMapResponsePtrOutput) RecordMap() RecordMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []RecordMapResponse {
		if v == nil {
			return nil
		}
		return v.RecordMap
	}).(RecordMapResponseArrayOutput)
}

// Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.
func (o SchemaMapResponsePtrOutput) ResourceMap() ResourceMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []ResourceMapResponse {
		if v == nil {
			return nil
		}
		return v.ResourceMap
	}).(ResourceMapResponseArrayOutput)
}

// A scope map is a logical unit of the application code with which the emitted telemetry can be associated.
func (o SchemaMapResponsePtrOutput) ScopeMap() ScopeMapResponseArrayOutput {
	return o.ApplyT(func(v *SchemaMapResponse) []ScopeMapResponse {
		if v == nil {
			return nil
		}
		return v.ScopeMap
	}).(ScopeMapResponseArrayOutput)
}

// Scope map for schema in azure monitor.
type ScopeMap struct {
	// Scope Map Key.
	From string `pulumi:"from"`
	// Scope Map Value.
	To string `pulumi:"to"`
}

// ScopeMapInput is an input type that accepts ScopeMap and ScopeMapOutput values.
// You can construct a concrete instance of `ScopeMapInput` via:
//
//	ScopeMap{ "key": ScopeArgs{...} }
type ScopeMapInput interface {
	pulumi.Input

	ToScopeMapOutput() ScopeMapOutput
	ToScopeMapOutputWithContext(context.Context) ScopeMapOutput
}

// Scope map for schema in azure monitor.
type ScopeMapArgs struct {
	// Scope Map Key.
	From pulumi.StringInput `pulumi:"from"`
	// Scope Map Value.
	To pulumi.StringInput `pulumi:"to"`
}

func (ScopeMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMap)(nil)).Elem()
}

func (i ScopeMapArgs) ToScopeMapOutput() ScopeMapOutput {
	return i.ToScopeMapOutputWithContext(context.Background())
}

func (i ScopeMapArgs) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeMapOutput)
}

// ScopeMapArrayInput is an input type that accepts ScopeMapArray and ScopeMapArrayOutput values.
// You can construct a concrete instance of `ScopeMapArrayInput` via:
//
//	ScopeMapArray{ ScopeMapArgs{...} }
type ScopeMapArrayInput interface {
	pulumi.Input

	ToScopeMapArrayOutput() ScopeMapArrayOutput
	ToScopeMapArrayOutputWithContext(context.Context) ScopeMapArrayOutput
}

type ScopeMapArray []ScopeMapInput

func (ScopeMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMap)(nil)).Elem()
}

func (i ScopeMapArray) ToScopeMapArrayOutput() ScopeMapArrayOutput {
	return i.ToScopeMapArrayOutputWithContext(context.Background())
}

func (i ScopeMapArray) ToScopeMapArrayOutputWithContext(ctx context.Context) ScopeMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeMapArrayOutput)
}

// Scope map for schema in azure monitor.
type ScopeMapOutput struct{ *pulumi.OutputState }

func (ScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMap)(nil)).Elem()
}

func (o ScopeMapOutput) ToScopeMapOutput() ScopeMapOutput {
	return o
}

func (o ScopeMapOutput) ToScopeMapOutputWithContext(ctx context.Context) ScopeMapOutput {
	return o
}

// Scope Map Key.
func (o ScopeMapOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMap) string { return v.From }).(pulumi.StringOutput)
}

// Scope Map Value.
func (o ScopeMapOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMap) string { return v.To }).(pulumi.StringOutput)
}

type ScopeMapArrayOutput struct{ *pulumi.OutputState }

func (ScopeMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMap)(nil)).Elem()
}

func (o ScopeMapArrayOutput) ToScopeMapArrayOutput() ScopeMapArrayOutput {
	return o
}

func (o ScopeMapArrayOutput) ToScopeMapArrayOutputWithContext(ctx context.Context) ScopeMapArrayOutput {
	return o
}

func (o ScopeMapArrayOutput) Index(i pulumi.IntInput) ScopeMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeMap {
		return vs[0].([]ScopeMap)[vs[1].(int)]
	}).(ScopeMapOutput)
}

// Scope map for schema in azure monitor.
type ScopeMapResponse struct {
	// Scope Map Key.
	From string `pulumi:"from"`
	// Scope Map Value.
	To string `pulumi:"to"`
}

// Scope map for schema in azure monitor.
type ScopeMapResponseOutput struct{ *pulumi.OutputState }

func (ScopeMapResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeMapResponse)(nil)).Elem()
}

func (o ScopeMapResponseOutput) ToScopeMapResponseOutput() ScopeMapResponseOutput {
	return o
}

func (o ScopeMapResponseOutput) ToScopeMapResponseOutputWithContext(ctx context.Context) ScopeMapResponseOutput {
	return o
}

// Scope Map Key.
func (o ScopeMapResponseOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMapResponse) string { return v.From }).(pulumi.StringOutput)
}

// Scope Map Value.
func (o ScopeMapResponseOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeMapResponse) string { return v.To }).(pulumi.StringOutput)
}

type ScopeMapResponseArrayOutput struct{ *pulumi.OutputState }

func (ScopeMapResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScopeMapResponse)(nil)).Elem()
}

func (o ScopeMapResponseArrayOutput) ToScopeMapResponseArrayOutput() ScopeMapResponseArrayOutput {
	return o
}

func (o ScopeMapResponseArrayOutput) ToScopeMapResponseArrayOutputWithContext(ctx context.Context) ScopeMapResponseArrayOutput {
	return o
}

func (o ScopeMapResponseArrayOutput) Index(i pulumi.IntInput) ScopeMapResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScopeMapResponse {
		return vs[0].([]ScopeMapResponse)[vs[1].(int)]
	}).(ScopeMapResponseOutput)
}

// Service Info.
type Service struct {
	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurations `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines []Pipeline `pulumi:"pipelines"`
}

// ServiceInput is an input type that accepts ServiceArgs and ServiceOutput values.
// You can construct a concrete instance of `ServiceInput` via:
//
//	ServiceArgs{...}
type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(context.Context) ServiceOutput
}

// Service Info.
type ServiceArgs struct {
	// Persistence options to all pipelines in the instance.
	Persistence PersistenceConfigurationsPtrInput `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines PipelineArrayInput `pulumi:"pipelines"`
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (i ServiceArgs) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i ServiceArgs) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

func (i ServiceArgs) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i ServiceArgs) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput).ToServicePtrOutputWithContext(ctx)
}

// ServicePtrInput is an input type that accepts ServiceArgs, ServicePtr and ServicePtrOutput values.
// You can construct a concrete instance of `ServicePtrInput` via:
//
//	        ServiceArgs{...}
//
//	or:
//
//	        nil
type ServicePtrInput interface {
	pulumi.Input

	ToServicePtrOutput() ServicePtrOutput
	ToServicePtrOutputWithContext(context.Context) ServicePtrOutput
}

type servicePtrType ServiceArgs

func ServicePtr(v *ServiceArgs) ServicePtrInput {
	return (*servicePtrType)(v)
}

func (*servicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *servicePtrType) ToServicePtrOutput() ServicePtrOutput {
	return i.ToServicePtrOutputWithContext(context.Background())
}

func (i *servicePtrType) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePtrOutput)
}

// Service Info.
type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ToServicePtrOutput() ServicePtrOutput {
	return o.ToServicePtrOutputWithContext(context.Background())
}

func (o ServiceOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Service) *Service {
		return &v
	}).(ServicePtrOutput)
}

// Persistence options to all pipelines in the instance.
func (o ServiceOutput) Persistence() PersistenceConfigurationsPtrOutput {
	return o.ApplyT(func(v Service) *PersistenceConfigurations { return v.Persistence }).(PersistenceConfigurationsPtrOutput)
}

// Pipelines belonging to a given pipeline group.
func (o ServiceOutput) Pipelines() PipelineArrayOutput {
	return o.ApplyT(func(v Service) []Pipeline { return v.Pipelines }).(PipelineArrayOutput)
}

type ServicePtrOutput struct{ *pulumi.OutputState }

func (ServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServicePtrOutput) ToServicePtrOutput() ServicePtrOutput {
	return o
}

func (o ServicePtrOutput) ToServicePtrOutputWithContext(ctx context.Context) ServicePtrOutput {
	return o
}

func (o ServicePtrOutput) Elem() ServiceOutput {
	return o.ApplyT(func(v *Service) Service {
		if v != nil {
			return *v
		}
		var ret Service
		return ret
	}).(ServiceOutput)
}

// Persistence options to all pipelines in the instance.
func (o ServicePtrOutput) Persistence() PersistenceConfigurationsPtrOutput {
	return o.ApplyT(func(v *Service) *PersistenceConfigurations {
		if v == nil {
			return nil
		}
		return v.Persistence
	}).(PersistenceConfigurationsPtrOutput)
}

// Pipelines belonging to a given pipeline group.
func (o ServicePtrOutput) Pipelines() PipelineArrayOutput {
	return o.ApplyT(func(v *Service) []Pipeline {
		if v == nil {
			return nil
		}
		return v.Pipelines
	}).(PipelineArrayOutput)
}

// Service Info.
type ServiceResponse struct {
	// Persistence options to all pipelines in the instance.
	Persistence *PersistenceConfigurationsResponse `pulumi:"persistence"`
	// Pipelines belonging to a given pipeline group.
	Pipelines []PipelineResponse `pulumi:"pipelines"`
}

// Service Info.
type ServiceResponseOutput struct{ *pulumi.OutputState }

func (ServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceResponse)(nil)).Elem()
}

func (o ServiceResponseOutput) ToServiceResponseOutput() ServiceResponseOutput {
	return o
}

func (o ServiceResponseOutput) ToServiceResponseOutputWithContext(ctx context.Context) ServiceResponseOutput {
	return o
}

// Persistence options to all pipelines in the instance.
func (o ServiceResponseOutput) Persistence() PersistenceConfigurationsResponsePtrOutput {
	return o.ApplyT(func(v ServiceResponse) *PersistenceConfigurationsResponse { return v.Persistence }).(PersistenceConfigurationsResponsePtrOutput)
}

// Pipelines belonging to a given pipeline group.
func (o ServiceResponseOutput) Pipelines() PipelineResponseArrayOutput {
	return o.ApplyT(func(v ServiceResponse) []PipelineResponse { return v.Pipelines }).(PipelineResponseArrayOutput)
}

// Group of signal definition assignments
type SignalAssignment struct {
	// Signal definitions referenced by their names. All definitions are combined with an AND operator.
	SignalDefinitions []string `pulumi:"signalDefinitions"`
}

// SignalAssignmentInput is an input type that accepts SignalAssignmentArgs and SignalAssignmentOutput values.
// You can construct a concrete instance of `SignalAssignmentInput` via:
//
//	SignalAssignmentArgs{...}
type SignalAssignmentInput interface {
	pulumi.Input

	ToSignalAssignmentOutput() SignalAssignmentOutput
	ToSignalAssignmentOutputWithContext(context.Context) SignalAssignmentOutput
}

// Group of signal definition assignments
type SignalAssignmentArgs struct {
	// Signal definitions referenced by their names. All definitions are combined with an AND operator.
	SignalDefinitions pulumi.StringArrayInput `pulumi:"signalDefinitions"`
}

func (SignalAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalAssignment)(nil)).Elem()
}

func (i SignalAssignmentArgs) ToSignalAssignmentOutput() SignalAssignmentOutput {
	return i.ToSignalAssignmentOutputWithContext(context.Background())
}

func (i SignalAssignmentArgs) ToSignalAssignmentOutputWithContext(ctx context.Context) SignalAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalAssignmentOutput)
}

// SignalAssignmentArrayInput is an input type that accepts SignalAssignmentArray and SignalAssignmentArrayOutput values.
// You can construct a concrete instance of `SignalAssignmentArrayInput` via:
//
//	SignalAssignmentArray{ SignalAssignmentArgs{...} }
type SignalAssignmentArrayInput interface {
	pulumi.Input

	ToSignalAssignmentArrayOutput() SignalAssignmentArrayOutput
	ToSignalAssignmentArrayOutputWithContext(context.Context) SignalAssignmentArrayOutput
}

type SignalAssignmentArray []SignalAssignmentInput

func (SignalAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalAssignment)(nil)).Elem()
}

func (i SignalAssignmentArray) ToSignalAssignmentArrayOutput() SignalAssignmentArrayOutput {
	return i.ToSignalAssignmentArrayOutputWithContext(context.Background())
}

func (i SignalAssignmentArray) ToSignalAssignmentArrayOutputWithContext(ctx context.Context) SignalAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalAssignmentArrayOutput)
}

// Group of signal definition assignments
type SignalAssignmentOutput struct{ *pulumi.OutputState }

func (SignalAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalAssignment)(nil)).Elem()
}

func (o SignalAssignmentOutput) ToSignalAssignmentOutput() SignalAssignmentOutput {
	return o
}

func (o SignalAssignmentOutput) ToSignalAssignmentOutputWithContext(ctx context.Context) SignalAssignmentOutput {
	return o
}

// Signal definitions referenced by their names. All definitions are combined with an AND operator.
func (o SignalAssignmentOutput) SignalDefinitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalAssignment) []string { return v.SignalDefinitions }).(pulumi.StringArrayOutput)
}

type SignalAssignmentArrayOutput struct{ *pulumi.OutputState }

func (SignalAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalAssignment)(nil)).Elem()
}

func (o SignalAssignmentArrayOutput) ToSignalAssignmentArrayOutput() SignalAssignmentArrayOutput {
	return o
}

func (o SignalAssignmentArrayOutput) ToSignalAssignmentArrayOutputWithContext(ctx context.Context) SignalAssignmentArrayOutput {
	return o
}

func (o SignalAssignmentArrayOutput) Index(i pulumi.IntInput) SignalAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalAssignment {
		return vs[0].([]SignalAssignment)[vs[1].(int)]
	}).(SignalAssignmentOutput)
}

// Group of signal definition assignments
type SignalAssignmentResponse struct {
	// Signal definitions referenced by their names. All definitions are combined with an AND operator.
	SignalDefinitions []string `pulumi:"signalDefinitions"`
}

// Group of signal definition assignments
type SignalAssignmentResponseOutput struct{ *pulumi.OutputState }

func (SignalAssignmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalAssignmentResponse)(nil)).Elem()
}

func (o SignalAssignmentResponseOutput) ToSignalAssignmentResponseOutput() SignalAssignmentResponseOutput {
	return o
}

func (o SignalAssignmentResponseOutput) ToSignalAssignmentResponseOutputWithContext(ctx context.Context) SignalAssignmentResponseOutput {
	return o
}

// Signal definitions referenced by their names. All definitions are combined with an AND operator.
func (o SignalAssignmentResponseOutput) SignalDefinitions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SignalAssignmentResponse) []string { return v.SignalDefinitions }).(pulumi.StringArrayOutput)
}

type SignalAssignmentResponseArrayOutput struct{ *pulumi.OutputState }

func (SignalAssignmentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SignalAssignmentResponse)(nil)).Elem()
}

func (o SignalAssignmentResponseArrayOutput) ToSignalAssignmentResponseArrayOutput() SignalAssignmentResponseArrayOutput {
	return o
}

func (o SignalAssignmentResponseArrayOutput) ToSignalAssignmentResponseArrayOutputWithContext(ctx context.Context) SignalAssignmentResponseArrayOutput {
	return o
}

func (o SignalAssignmentResponseArrayOutput) Index(i pulumi.IntInput) SignalAssignmentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SignalAssignmentResponse {
		return vs[0].([]SignalAssignmentResponse)[vs[1].(int)]
	}).(SignalAssignmentResponseOutput)
}

// Contains various signal groups that can be assigned to an entity
type SignalGroup struct {
	// Log Analytics Signal Group
	AzureLogAnalytics *LogAnalyticsSignalGroup `pulumi:"azureLogAnalytics"`
	// Azure Monitor Workspace Signal Group
	AzureMonitorWorkspace *AzureMonitorWorkspaceSignalGroup `pulumi:"azureMonitorWorkspace"`
	// Azure Resource Signal Group
	AzureResource *AzureResourceSignalGroup `pulumi:"azureResource"`
	// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
	Dependencies *DependenciesSignalGroup `pulumi:"dependencies"`
}

// Defaults sets the appropriate defaults for SignalGroup
func (val *SignalGroup) Defaults() *SignalGroup {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Dependencies = tmp.Dependencies.Defaults()

	return &tmp
}

// SignalGroupInput is an input type that accepts SignalGroupArgs and SignalGroupOutput values.
// You can construct a concrete instance of `SignalGroupInput` via:
//
//	SignalGroupArgs{...}
type SignalGroupInput interface {
	pulumi.Input

	ToSignalGroupOutput() SignalGroupOutput
	ToSignalGroupOutputWithContext(context.Context) SignalGroupOutput
}

// Contains various signal groups that can be assigned to an entity
type SignalGroupArgs struct {
	// Log Analytics Signal Group
	AzureLogAnalytics LogAnalyticsSignalGroupPtrInput `pulumi:"azureLogAnalytics"`
	// Azure Monitor Workspace Signal Group
	AzureMonitorWorkspace AzureMonitorWorkspaceSignalGroupPtrInput `pulumi:"azureMonitorWorkspace"`
	// Azure Resource Signal Group
	AzureResource AzureResourceSignalGroupPtrInput `pulumi:"azureResource"`
	// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
	Dependencies DependenciesSignalGroupPtrInput `pulumi:"dependencies"`
}

// Defaults sets the appropriate defaults for SignalGroupArgs
func (val *SignalGroupArgs) Defaults() *SignalGroupArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (SignalGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalGroup)(nil)).Elem()
}

func (i SignalGroupArgs) ToSignalGroupOutput() SignalGroupOutput {
	return i.ToSignalGroupOutputWithContext(context.Background())
}

func (i SignalGroupArgs) ToSignalGroupOutputWithContext(ctx context.Context) SignalGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalGroupOutput)
}

func (i SignalGroupArgs) ToSignalGroupPtrOutput() SignalGroupPtrOutput {
	return i.ToSignalGroupPtrOutputWithContext(context.Background())
}

func (i SignalGroupArgs) ToSignalGroupPtrOutputWithContext(ctx context.Context) SignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalGroupOutput).ToSignalGroupPtrOutputWithContext(ctx)
}

// SignalGroupPtrInput is an input type that accepts SignalGroupArgs, SignalGroupPtr and SignalGroupPtrOutput values.
// You can construct a concrete instance of `SignalGroupPtrInput` via:
//
//	        SignalGroupArgs{...}
//
//	or:
//
//	        nil
type SignalGroupPtrInput interface {
	pulumi.Input

	ToSignalGroupPtrOutput() SignalGroupPtrOutput
	ToSignalGroupPtrOutputWithContext(context.Context) SignalGroupPtrOutput
}

type signalGroupPtrType SignalGroupArgs

func SignalGroupPtr(v *SignalGroupArgs) SignalGroupPtrInput {
	return (*signalGroupPtrType)(v)
}

func (*signalGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalGroup)(nil)).Elem()
}

func (i *signalGroupPtrType) ToSignalGroupPtrOutput() SignalGroupPtrOutput {
	return i.ToSignalGroupPtrOutputWithContext(context.Background())
}

func (i *signalGroupPtrType) ToSignalGroupPtrOutputWithContext(ctx context.Context) SignalGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SignalGroupPtrOutput)
}

// Contains various signal groups that can be assigned to an entity
type SignalGroupOutput struct{ *pulumi.OutputState }

func (SignalGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalGroup)(nil)).Elem()
}

func (o SignalGroupOutput) ToSignalGroupOutput() SignalGroupOutput {
	return o
}

func (o SignalGroupOutput) ToSignalGroupOutputWithContext(ctx context.Context) SignalGroupOutput {
	return o
}

func (o SignalGroupOutput) ToSignalGroupPtrOutput() SignalGroupPtrOutput {
	return o.ToSignalGroupPtrOutputWithContext(context.Background())
}

func (o SignalGroupOutput) ToSignalGroupPtrOutputWithContext(ctx context.Context) SignalGroupPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SignalGroup) *SignalGroup {
		return &v
	}).(SignalGroupPtrOutput)
}

// Log Analytics Signal Group
func (o SignalGroupOutput) AzureLogAnalytics() LogAnalyticsSignalGroupPtrOutput {
	return o.ApplyT(func(v SignalGroup) *LogAnalyticsSignalGroup { return v.AzureLogAnalytics }).(LogAnalyticsSignalGroupPtrOutput)
}

// Azure Monitor Workspace Signal Group
func (o SignalGroupOutput) AzureMonitorWorkspace() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o.ApplyT(func(v SignalGroup) *AzureMonitorWorkspaceSignalGroup { return v.AzureMonitorWorkspace }).(AzureMonitorWorkspaceSignalGroupPtrOutput)
}

// Azure Resource Signal Group
func (o SignalGroupOutput) AzureResource() AzureResourceSignalGroupPtrOutput {
	return o.ApplyT(func(v SignalGroup) *AzureResourceSignalGroup { return v.AzureResource }).(AzureResourceSignalGroupPtrOutput)
}

// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
func (o SignalGroupOutput) Dependencies() DependenciesSignalGroupPtrOutput {
	return o.ApplyT(func(v SignalGroup) *DependenciesSignalGroup { return v.Dependencies }).(DependenciesSignalGroupPtrOutput)
}

type SignalGroupPtrOutput struct{ *pulumi.OutputState }

func (SignalGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalGroup)(nil)).Elem()
}

func (o SignalGroupPtrOutput) ToSignalGroupPtrOutput() SignalGroupPtrOutput {
	return o
}

func (o SignalGroupPtrOutput) ToSignalGroupPtrOutputWithContext(ctx context.Context) SignalGroupPtrOutput {
	return o
}

func (o SignalGroupPtrOutput) Elem() SignalGroupOutput {
	return o.ApplyT(func(v *SignalGroup) SignalGroup {
		if v != nil {
			return *v
		}
		var ret SignalGroup
		return ret
	}).(SignalGroupOutput)
}

// Log Analytics Signal Group
func (o SignalGroupPtrOutput) AzureLogAnalytics() LogAnalyticsSignalGroupPtrOutput {
	return o.ApplyT(func(v *SignalGroup) *LogAnalyticsSignalGroup {
		if v == nil {
			return nil
		}
		return v.AzureLogAnalytics
	}).(LogAnalyticsSignalGroupPtrOutput)
}

// Azure Monitor Workspace Signal Group
func (o SignalGroupPtrOutput) AzureMonitorWorkspace() AzureMonitorWorkspaceSignalGroupPtrOutput {
	return o.ApplyT(func(v *SignalGroup) *AzureMonitorWorkspaceSignalGroup {
		if v == nil {
			return nil
		}
		return v.AzureMonitorWorkspace
	}).(AzureMonitorWorkspaceSignalGroupPtrOutput)
}

// Azure Resource Signal Group
func (o SignalGroupPtrOutput) AzureResource() AzureResourceSignalGroupPtrOutput {
	return o.ApplyT(func(v *SignalGroup) *AzureResourceSignalGroup {
		if v == nil {
			return nil
		}
		return v.AzureResource
	}).(AzureResourceSignalGroupPtrOutput)
}

// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
func (o SignalGroupPtrOutput) Dependencies() DependenciesSignalGroupPtrOutput {
	return o.ApplyT(func(v *SignalGroup) *DependenciesSignalGroup {
		if v == nil {
			return nil
		}
		return v.Dependencies
	}).(DependenciesSignalGroupPtrOutput)
}

// Contains various signal groups that can be assigned to an entity
type SignalGroupResponse struct {
	// Log Analytics Signal Group
	AzureLogAnalytics *LogAnalyticsSignalGroupResponse `pulumi:"azureLogAnalytics"`
	// Azure Monitor Workspace Signal Group
	AzureMonitorWorkspace *AzureMonitorWorkspaceSignalGroupResponse `pulumi:"azureMonitorWorkspace"`
	// Azure Resource Signal Group
	AzureResource *AzureResourceSignalGroupResponse `pulumi:"azureResource"`
	// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
	Dependencies *DependenciesSignalGroupResponse `pulumi:"dependencies"`
}

// Defaults sets the appropriate defaults for SignalGroupResponse
func (val *SignalGroupResponse) Defaults() *SignalGroupResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Dependencies = tmp.Dependencies.Defaults()

	return &tmp
}

// Contains various signal groups that can be assigned to an entity
type SignalGroupResponseOutput struct{ *pulumi.OutputState }

func (SignalGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SignalGroupResponse)(nil)).Elem()
}

func (o SignalGroupResponseOutput) ToSignalGroupResponseOutput() SignalGroupResponseOutput {
	return o
}

func (o SignalGroupResponseOutput) ToSignalGroupResponseOutputWithContext(ctx context.Context) SignalGroupResponseOutput {
	return o
}

// Log Analytics Signal Group
func (o SignalGroupResponseOutput) AzureLogAnalytics() LogAnalyticsSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v SignalGroupResponse) *LogAnalyticsSignalGroupResponse { return v.AzureLogAnalytics }).(LogAnalyticsSignalGroupResponsePtrOutput)
}

// Azure Monitor Workspace Signal Group
func (o SignalGroupResponseOutput) AzureMonitorWorkspace() AzureMonitorWorkspaceSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v SignalGroupResponse) *AzureMonitorWorkspaceSignalGroupResponse { return v.AzureMonitorWorkspace }).(AzureMonitorWorkspaceSignalGroupResponsePtrOutput)
}

// Azure Resource Signal Group
func (o SignalGroupResponseOutput) AzureResource() AzureResourceSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v SignalGroupResponse) *AzureResourceSignalGroupResponse { return v.AzureResource }).(AzureResourceSignalGroupResponsePtrOutput)
}

// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
func (o SignalGroupResponseOutput) Dependencies() DependenciesSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v SignalGroupResponse) *DependenciesSignalGroupResponse { return v.Dependencies }).(DependenciesSignalGroupResponsePtrOutput)
}

type SignalGroupResponsePtrOutput struct{ *pulumi.OutputState }

func (SignalGroupResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SignalGroupResponse)(nil)).Elem()
}

func (o SignalGroupResponsePtrOutput) ToSignalGroupResponsePtrOutput() SignalGroupResponsePtrOutput {
	return o
}

func (o SignalGroupResponsePtrOutput) ToSignalGroupResponsePtrOutputWithContext(ctx context.Context) SignalGroupResponsePtrOutput {
	return o
}

func (o SignalGroupResponsePtrOutput) Elem() SignalGroupResponseOutput {
	return o.ApplyT(func(v *SignalGroupResponse) SignalGroupResponse {
		if v != nil {
			return *v
		}
		var ret SignalGroupResponse
		return ret
	}).(SignalGroupResponseOutput)
}

// Log Analytics Signal Group
func (o SignalGroupResponsePtrOutput) AzureLogAnalytics() LogAnalyticsSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v *SignalGroupResponse) *LogAnalyticsSignalGroupResponse {
		if v == nil {
			return nil
		}
		return v.AzureLogAnalytics
	}).(LogAnalyticsSignalGroupResponsePtrOutput)
}

// Azure Monitor Workspace Signal Group
func (o SignalGroupResponsePtrOutput) AzureMonitorWorkspace() AzureMonitorWorkspaceSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v *SignalGroupResponse) *AzureMonitorWorkspaceSignalGroupResponse {
		if v == nil {
			return nil
		}
		return v.AzureMonitorWorkspace
	}).(AzureMonitorWorkspaceSignalGroupResponsePtrOutput)
}

// Azure Resource Signal Group
func (o SignalGroupResponsePtrOutput) AzureResource() AzureResourceSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v *SignalGroupResponse) *AzureResourceSignalGroupResponse {
		if v == nil {
			return nil
		}
		return v.AzureResource
	}).(AzureResourceSignalGroupResponsePtrOutput)
}

// Settings for dependency signals to control how the health state of child entities influences the health state of the parent entity.
func (o SignalGroupResponsePtrOutput) Dependencies() DependenciesSignalGroupResponsePtrOutput {
	return o.ApplyT(func(v *SignalGroupResponse) *DependenciesSignalGroupResponse {
		if v == nil {
			return nil
		}
		return v.Dependencies
	}).(DependenciesSignalGroupResponsePtrOutput)
}

// An SMS receiver.
type SmsReceiver struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// SmsReceiverInput is an input type that accepts SmsReceiverArgs and SmsReceiverOutput values.
// You can construct a concrete instance of `SmsReceiverInput` via:
//
//	SmsReceiverArgs{...}
type SmsReceiverInput interface {
	pulumi.Input

	ToSmsReceiverOutput() SmsReceiverOutput
	ToSmsReceiverOutputWithContext(context.Context) SmsReceiverOutput
}

// An SMS receiver.
type SmsReceiverArgs struct {
	// The country code of the SMS receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within a tenant action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (SmsReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArgs) ToSmsReceiverOutput() SmsReceiverOutput {
	return i.ToSmsReceiverOutputWithContext(context.Background())
}

func (i SmsReceiverArgs) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverOutput)
}

// SmsReceiverArrayInput is an input type that accepts SmsReceiverArray and SmsReceiverArrayOutput values.
// You can construct a concrete instance of `SmsReceiverArrayInput` via:
//
//	SmsReceiverArray{ SmsReceiverArgs{...} }
type SmsReceiverArrayInput interface {
	pulumi.Input

	ToSmsReceiverArrayOutput() SmsReceiverArrayOutput
	ToSmsReceiverArrayOutputWithContext(context.Context) SmsReceiverArrayOutput
}

type SmsReceiverArray []SmsReceiverInput

func (SmsReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return i.ToSmsReceiverArrayOutputWithContext(context.Background())
}

func (i SmsReceiverArray) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmsReceiverArrayOutput)
}

// An SMS receiver.
type SmsReceiverOutput struct{ *pulumi.OutputState }

func (SmsReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverOutput) ToSmsReceiverOutput() SmsReceiverOutput {
	return o
}

func (o SmsReceiverOutput) ToSmsReceiverOutputWithContext(ctx context.Context) SmsReceiverOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within a tenant action group.
func (o SmsReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type SmsReceiverArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiver)(nil)).Elem()
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutput() SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) ToSmsReceiverArrayOutputWithContext(ctx context.Context) SmsReceiverArrayOutput {
	return o
}

func (o SmsReceiverArrayOutput) Index(i pulumi.IntInput) SmsReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiver {
		return vs[0].([]SmsReceiver)[vs[1].(int)]
	}).(SmsReceiverOutput)
}

// An SMS receiver.
type SmsReceiverResponse struct {
	// The country code of the SMS receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the SMS receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// The phone number of the SMS receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
	// The status of the receiver.
	Status string `pulumi:"status"`
}

// An SMS receiver.
type SmsReceiverResponseOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutput() SmsReceiverResponseOutput {
	return o
}

func (o SmsReceiverResponseOutput) ToSmsReceiverResponseOutputWithContext(ctx context.Context) SmsReceiverResponseOutput {
	return o
}

// The country code of the SMS receiver.
func (o SmsReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the SMS receiver. Names must be unique across all receivers within a tenant action group.
func (o SmsReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the SMS receiver.
func (o SmsReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

// The status of the receiver.
func (o SmsReceiverResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SmsReceiverResponse) string { return v.Status }).(pulumi.StringOutput)
}

type SmsReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (SmsReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmsReceiverResponse)(nil)).Elem()
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutput() SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) ToSmsReceiverResponseArrayOutputWithContext(ctx context.Context) SmsReceiverResponseArrayOutput {
	return o
}

func (o SmsReceiverResponseArrayOutput) Index(i pulumi.IntInput) SmsReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmsReceiverResponse {
		return vs[0].([]SmsReceiverResponse)[vs[1].(int)]
	}).(SmsReceiverResponseOutput)
}

type StorageBlobDestination struct {
	// The container name of the Storage Blob.
	ContainerName *string `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

// StorageBlobDestinationInput is an input type that accepts StorageBlobDestinationArgs and StorageBlobDestinationOutput values.
// You can construct a concrete instance of `StorageBlobDestinationInput` via:
//
//	StorageBlobDestinationArgs{...}
type StorageBlobDestinationInput interface {
	pulumi.Input

	ToStorageBlobDestinationOutput() StorageBlobDestinationOutput
	ToStorageBlobDestinationOutputWithContext(context.Context) StorageBlobDestinationOutput
}

type StorageBlobDestinationArgs struct {
	// The container name of the Storage Blob.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
}

func (StorageBlobDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestination)(nil)).Elem()
}

func (i StorageBlobDestinationArgs) ToStorageBlobDestinationOutput() StorageBlobDestinationOutput {
	return i.ToStorageBlobDestinationOutputWithContext(context.Background())
}

func (i StorageBlobDestinationArgs) ToStorageBlobDestinationOutputWithContext(ctx context.Context) StorageBlobDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDestinationOutput)
}

// StorageBlobDestinationArrayInput is an input type that accepts StorageBlobDestinationArray and StorageBlobDestinationArrayOutput values.
// You can construct a concrete instance of `StorageBlobDestinationArrayInput` via:
//
//	StorageBlobDestinationArray{ StorageBlobDestinationArgs{...} }
type StorageBlobDestinationArrayInput interface {
	pulumi.Input

	ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput
	ToStorageBlobDestinationArrayOutputWithContext(context.Context) StorageBlobDestinationArrayOutput
}

type StorageBlobDestinationArray []StorageBlobDestinationInput

func (StorageBlobDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestination)(nil)).Elem()
}

func (i StorageBlobDestinationArray) ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput {
	return i.ToStorageBlobDestinationArrayOutputWithContext(context.Background())
}

func (i StorageBlobDestinationArray) ToStorageBlobDestinationArrayOutputWithContext(ctx context.Context) StorageBlobDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageBlobDestinationArrayOutput)
}

type StorageBlobDestinationOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestination)(nil)).Elem()
}

func (o StorageBlobDestinationOutput) ToStorageBlobDestinationOutput() StorageBlobDestinationOutput {
	return o
}

func (o StorageBlobDestinationOutput) ToStorageBlobDestinationOutputWithContext(ctx context.Context) StorageBlobDestinationOutput {
	return o
}

// The container name of the Storage Blob.
func (o StorageBlobDestinationOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageBlobDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageBlobDestinationOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestination) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDestinationArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestination)(nil)).Elem()
}

func (o StorageBlobDestinationArrayOutput) ToStorageBlobDestinationArrayOutput() StorageBlobDestinationArrayOutput {
	return o
}

func (o StorageBlobDestinationArrayOutput) ToStorageBlobDestinationArrayOutputWithContext(ctx context.Context) StorageBlobDestinationArrayOutput {
	return o
}

func (o StorageBlobDestinationArrayOutput) Index(i pulumi.IntInput) StorageBlobDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlobDestination {
		return vs[0].([]StorageBlobDestination)[vs[1].(int)]
	}).(StorageBlobDestinationOutput)
}

type StorageBlobDestinationResponse struct {
	// The container name of the Storage Blob.
	ContainerName *string `pulumi:"containerName"`
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

type StorageBlobDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageBlobDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDestinationResponseOutput) ToStorageBlobDestinationResponseOutput() StorageBlobDestinationResponseOutput {
	return o
}

func (o StorageBlobDestinationResponseOutput) ToStorageBlobDestinationResponseOutputWithContext(ctx context.Context) StorageBlobDestinationResponseOutput {
	return o
}

// The container name of the Storage Blob.
func (o StorageBlobDestinationResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageBlobDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageBlobDestinationResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageBlobDestinationResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type StorageBlobDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageBlobDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageBlobDestinationResponse)(nil)).Elem()
}

func (o StorageBlobDestinationResponseArrayOutput) ToStorageBlobDestinationResponseArrayOutput() StorageBlobDestinationResponseArrayOutput {
	return o
}

func (o StorageBlobDestinationResponseArrayOutput) ToStorageBlobDestinationResponseArrayOutputWithContext(ctx context.Context) StorageBlobDestinationResponseArrayOutput {
	return o
}

func (o StorageBlobDestinationResponseArrayOutput) Index(i pulumi.IntInput) StorageBlobDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageBlobDestinationResponse {
		return vs[0].([]StorageBlobDestinationResponse)[vs[1].(int)]
	}).(StorageBlobDestinationResponseOutput)
}

type StorageTableDestination struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName *string `pulumi:"tableName"`
}

// StorageTableDestinationInput is an input type that accepts StorageTableDestinationArgs and StorageTableDestinationOutput values.
// You can construct a concrete instance of `StorageTableDestinationInput` via:
//
//	StorageTableDestinationArgs{...}
type StorageTableDestinationInput interface {
	pulumi.Input

	ToStorageTableDestinationOutput() StorageTableDestinationOutput
	ToStorageTableDestinationOutputWithContext(context.Context) StorageTableDestinationOutput
}

type StorageTableDestinationArgs struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
}

func (StorageTableDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestination)(nil)).Elem()
}

func (i StorageTableDestinationArgs) ToStorageTableDestinationOutput() StorageTableDestinationOutput {
	return i.ToStorageTableDestinationOutputWithContext(context.Background())
}

func (i StorageTableDestinationArgs) ToStorageTableDestinationOutputWithContext(ctx context.Context) StorageTableDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageTableDestinationOutput)
}

// StorageTableDestinationArrayInput is an input type that accepts StorageTableDestinationArray and StorageTableDestinationArrayOutput values.
// You can construct a concrete instance of `StorageTableDestinationArrayInput` via:
//
//	StorageTableDestinationArray{ StorageTableDestinationArgs{...} }
type StorageTableDestinationArrayInput interface {
	pulumi.Input

	ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput
	ToStorageTableDestinationArrayOutputWithContext(context.Context) StorageTableDestinationArrayOutput
}

type StorageTableDestinationArray []StorageTableDestinationInput

func (StorageTableDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestination)(nil)).Elem()
}

func (i StorageTableDestinationArray) ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput {
	return i.ToStorageTableDestinationArrayOutputWithContext(context.Background())
}

func (i StorageTableDestinationArray) ToStorageTableDestinationArrayOutputWithContext(ctx context.Context) StorageTableDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageTableDestinationArrayOutput)
}

type StorageTableDestinationOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestination)(nil)).Elem()
}

func (o StorageTableDestinationOutput) ToStorageTableDestinationOutput() StorageTableDestinationOutput {
	return o
}

func (o StorageTableDestinationOutput) ToStorageTableDestinationOutputWithContext(ctx context.Context) StorageTableDestinationOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageTableDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageTableDestinationOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

// The name of the Storage Table.
func (o StorageTableDestinationOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestination) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type StorageTableDestinationArrayOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestination)(nil)).Elem()
}

func (o StorageTableDestinationArrayOutput) ToStorageTableDestinationArrayOutput() StorageTableDestinationArrayOutput {
	return o
}

func (o StorageTableDestinationArrayOutput) ToStorageTableDestinationArrayOutputWithContext(ctx context.Context) StorageTableDestinationArrayOutput {
	return o
}

func (o StorageTableDestinationArrayOutput) Index(i pulumi.IntInput) StorageTableDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageTableDestination {
		return vs[0].([]StorageTableDestination)[vs[1].(int)]
	}).(StorageTableDestinationOutput)
}

type StorageTableDestinationResponse struct {
	// A friendly name for the destination.
	// This name should be unique across all destinations (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// The resource ID of the storage account.
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
	// The name of the Storage Table.
	TableName *string `pulumi:"tableName"`
}

type StorageTableDestinationResponseOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageTableDestinationResponse)(nil)).Elem()
}

func (o StorageTableDestinationResponseOutput) ToStorageTableDestinationResponseOutput() StorageTableDestinationResponseOutput {
	return o
}

func (o StorageTableDestinationResponseOutput) ToStorageTableDestinationResponseOutputWithContext(ctx context.Context) StorageTableDestinationResponseOutput {
	return o
}

// A friendly name for the destination.
// This name should be unique across all destinations (regardless of type) within the data collection rule.
func (o StorageTableDestinationResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of the storage account.
func (o StorageTableDestinationResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

// The name of the Storage Table.
func (o StorageTableDestinationResponseOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageTableDestinationResponse) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type StorageTableDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageTableDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageTableDestinationResponse)(nil)).Elem()
}

func (o StorageTableDestinationResponseArrayOutput) ToStorageTableDestinationResponseArrayOutput() StorageTableDestinationResponseArrayOutput {
	return o
}

func (o StorageTableDestinationResponseArrayOutput) ToStorageTableDestinationResponseArrayOutputWithContext(ctx context.Context) StorageTableDestinationResponseArrayOutput {
	return o
}

func (o StorageTableDestinationResponseArrayOutput) Index(i pulumi.IntInput) StorageTableDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageTableDestinationResponse {
		return vs[0].([]StorageTableDestinationResponse)[vs[1].(int)]
	}).(StorageTableDestinationResponseOutput)
}

// Declaration of a custom stream.
type StreamDeclaration struct {
	// List of columns used by data in this stream.
	Columns []ColumnDefinition `pulumi:"columns"`
}

// StreamDeclarationInput is an input type that accepts StreamDeclarationArgs and StreamDeclarationOutput values.
// You can construct a concrete instance of `StreamDeclarationInput` via:
//
//	StreamDeclarationArgs{...}
type StreamDeclarationInput interface {
	pulumi.Input

	ToStreamDeclarationOutput() StreamDeclarationOutput
	ToStreamDeclarationOutputWithContext(context.Context) StreamDeclarationOutput
}

// Declaration of a custom stream.
type StreamDeclarationArgs struct {
	// List of columns used by data in this stream.
	Columns ColumnDefinitionArrayInput `pulumi:"columns"`
}

func (StreamDeclarationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclaration)(nil)).Elem()
}

func (i StreamDeclarationArgs) ToStreamDeclarationOutput() StreamDeclarationOutput {
	return i.ToStreamDeclarationOutputWithContext(context.Background())
}

func (i StreamDeclarationArgs) ToStreamDeclarationOutputWithContext(ctx context.Context) StreamDeclarationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDeclarationOutput)
}

// StreamDeclarationMapInput is an input type that accepts StreamDeclarationMap and StreamDeclarationMapOutput values.
// You can construct a concrete instance of `StreamDeclarationMapInput` via:
//
//	StreamDeclarationMap{ "key": StreamDeclarationArgs{...} }
type StreamDeclarationMapInput interface {
	pulumi.Input

	ToStreamDeclarationMapOutput() StreamDeclarationMapOutput
	ToStreamDeclarationMapOutputWithContext(context.Context) StreamDeclarationMapOutput
}

type StreamDeclarationMap map[string]StreamDeclarationInput

func (StreamDeclarationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclaration)(nil)).Elem()
}

func (i StreamDeclarationMap) ToStreamDeclarationMapOutput() StreamDeclarationMapOutput {
	return i.ToStreamDeclarationMapOutputWithContext(context.Background())
}

func (i StreamDeclarationMap) ToStreamDeclarationMapOutputWithContext(ctx context.Context) StreamDeclarationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamDeclarationMapOutput)
}

// Declaration of a custom stream.
type StreamDeclarationOutput struct{ *pulumi.OutputState }

func (StreamDeclarationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclaration)(nil)).Elem()
}

func (o StreamDeclarationOutput) ToStreamDeclarationOutput() StreamDeclarationOutput {
	return o
}

func (o StreamDeclarationOutput) ToStreamDeclarationOutputWithContext(ctx context.Context) StreamDeclarationOutput {
	return o
}

// List of columns used by data in this stream.
func (o StreamDeclarationOutput) Columns() ColumnDefinitionArrayOutput {
	return o.ApplyT(func(v StreamDeclaration) []ColumnDefinition { return v.Columns }).(ColumnDefinitionArrayOutput)
}

type StreamDeclarationMapOutput struct{ *pulumi.OutputState }

func (StreamDeclarationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclaration)(nil)).Elem()
}

func (o StreamDeclarationMapOutput) ToStreamDeclarationMapOutput() StreamDeclarationMapOutput {
	return o
}

func (o StreamDeclarationMapOutput) ToStreamDeclarationMapOutputWithContext(ctx context.Context) StreamDeclarationMapOutput {
	return o
}

func (o StreamDeclarationMapOutput) MapIndex(k pulumi.StringInput) StreamDeclarationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamDeclaration {
		return vs[0].(map[string]StreamDeclaration)[vs[1].(string)]
	}).(StreamDeclarationOutput)
}

// Declaration of a custom stream.
type StreamDeclarationResponse struct {
	// List of columns used by data in this stream.
	Columns []ColumnDefinitionResponse `pulumi:"columns"`
}

// Declaration of a custom stream.
type StreamDeclarationResponseOutput struct{ *pulumi.OutputState }

func (StreamDeclarationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamDeclarationResponse)(nil)).Elem()
}

func (o StreamDeclarationResponseOutput) ToStreamDeclarationResponseOutput() StreamDeclarationResponseOutput {
	return o
}

func (o StreamDeclarationResponseOutput) ToStreamDeclarationResponseOutputWithContext(ctx context.Context) StreamDeclarationResponseOutput {
	return o
}

// List of columns used by data in this stream.
func (o StreamDeclarationResponseOutput) Columns() ColumnDefinitionResponseArrayOutput {
	return o.ApplyT(func(v StreamDeclarationResponse) []ColumnDefinitionResponse { return v.Columns }).(ColumnDefinitionResponseArrayOutput)
}

type StreamDeclarationResponseMapOutput struct{ *pulumi.OutputState }

func (StreamDeclarationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamDeclarationResponse)(nil)).Elem()
}

func (o StreamDeclarationResponseMapOutput) ToStreamDeclarationResponseMapOutput() StreamDeclarationResponseMapOutput {
	return o
}

func (o StreamDeclarationResponseMapOutput) ToStreamDeclarationResponseMapOutputWithContext(ctx context.Context) StreamDeclarationResponseMapOutput {
	return o
}

func (o StreamDeclarationResponseMapOutput) MapIndex(k pulumi.StringInput) StreamDeclarationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamDeclarationResponse {
		return vs[0].(map[string]StreamDeclarationResponse)[vs[1].(string)]
	}).(StreamDeclarationResponseOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettings struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// SubscriptionLogSettingsInput is an input type that accepts SubscriptionLogSettingsArgs and SubscriptionLogSettingsOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsInput` via:
//
//	SubscriptionLogSettingsArgs{...}
type SubscriptionLogSettingsInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput
	ToSubscriptionLogSettingsOutputWithContext(context.Context) SubscriptionLogSettingsOutput
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsArgs struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup pulumi.StringPtrInput `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (SubscriptionLogSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return i.ToSubscriptionLogSettingsOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArgs) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsOutput)
}

// SubscriptionLogSettingsArrayInput is an input type that accepts SubscriptionLogSettingsArray and SubscriptionLogSettingsArrayOutput values.
// You can construct a concrete instance of `SubscriptionLogSettingsArrayInput` via:
//
//	SubscriptionLogSettingsArray{ SubscriptionLogSettingsArgs{...} }
type SubscriptionLogSettingsArrayInput interface {
	pulumi.Input

	ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput
	ToSubscriptionLogSettingsArrayOutputWithContext(context.Context) SubscriptionLogSettingsArrayOutput
}

type SubscriptionLogSettingsArray []SubscriptionLogSettingsInput

func (SubscriptionLogSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return i.ToSubscriptionLogSettingsArrayOutputWithContext(context.Background())
}

func (i SubscriptionLogSettingsArray) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionLogSettingsArrayOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutput() SubscriptionLogSettingsOutput {
	return o
}

func (o SubscriptionLogSettingsOutput) ToSubscriptionLogSettingsOutputWithContext(ctx context.Context) SubscriptionLogSettingsOutput {
	return o
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
func (o SubscriptionLogSettingsOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettings) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettings)(nil)).Elem()
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutput() SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) ToSubscriptionLogSettingsArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsArrayOutput {
	return o
}

func (o SubscriptionLogSettingsArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettings {
		return vs[0].([]SubscriptionLogSettings)[vs[1].(int)]
	}).(SubscriptionLogSettingsOutput)
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponse struct {
	// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
	Category *string `pulumi:"category"`
	// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
	CategoryGroup *string `pulumi:"categoryGroup"`
	// a value indicating whether this log is enabled.
	Enabled bool `pulumi:"enabled"`
}

// Part of Subscription diagnostic setting. Specifies the settings for a particular log.
type SubscriptionLogSettingsResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutput() SubscriptionLogSettingsResponseOutput {
	return o
}

func (o SubscriptionLogSettingsResponseOutput) ToSubscriptionLogSettingsResponseOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseOutput {
	return o
}

// Name of a Subscription Diagnostic Log category for a resource type this setting is applied to.
func (o SubscriptionLogSettingsResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Name of a Subscription Diagnostic Log category group for a resource type this setting is applied to.
func (o SubscriptionLogSettingsResponseOutput) CategoryGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) *string { return v.CategoryGroup }).(pulumi.StringPtrOutput)
}

// a value indicating whether this log is enabled.
func (o SubscriptionLogSettingsResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SubscriptionLogSettingsResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type SubscriptionLogSettingsResponseArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionLogSettingsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubscriptionLogSettingsResponse)(nil)).Elem()
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutput() SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) ToSubscriptionLogSettingsResponseArrayOutputWithContext(ctx context.Context) SubscriptionLogSettingsResponseArrayOutput {
	return o
}

func (o SubscriptionLogSettingsResponseArrayOutput) Index(i pulumi.IntInput) SubscriptionLogSettingsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubscriptionLogSettingsResponse {
		return vs[0].([]SubscriptionLogSettingsResponse)[vs[1].(int)]
	}).(SubscriptionLogSettingsResponseOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSource struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// SyslogDataSourceInput is an input type that accepts SyslogDataSourceArgs and SyslogDataSourceOutput values.
// You can construct a concrete instance of `SyslogDataSourceInput` via:
//
//	SyslogDataSourceArgs{...}
type SyslogDataSourceInput interface {
	pulumi.Input

	ToSyslogDataSourceOutput() SyslogDataSourceOutput
	ToSyslogDataSourceOutputWithContext(context.Context) SyslogDataSourceOutput
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceArgs struct {
	// The list of facility names.
	FacilityNames pulumi.StringArrayInput `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels pulumi.StringArrayInput `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (SyslogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return i.ToSyslogDataSourceOutputWithContext(context.Background())
}

func (i SyslogDataSourceArgs) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceOutput)
}

// SyslogDataSourceArrayInput is an input type that accepts SyslogDataSourceArray and SyslogDataSourceArrayOutput values.
// You can construct a concrete instance of `SyslogDataSourceArrayInput` via:
//
//	SyslogDataSourceArray{ SyslogDataSourceArgs{...} }
type SyslogDataSourceArrayInput interface {
	pulumi.Input

	ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput
	ToSyslogDataSourceArrayOutputWithContext(context.Context) SyslogDataSourceArrayOutput
}

type SyslogDataSourceArray []SyslogDataSourceInput

func (SyslogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return i.ToSyslogDataSourceArrayOutputWithContext(context.Background())
}

func (i SyslogDataSourceArray) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogDataSourceArrayOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutput() SyslogDataSourceOutput {
	return o
}

func (o SyslogDataSourceOutput) ToSyslogDataSourceOutputWithContext(ctx context.Context) SyslogDataSourceOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type SyslogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSource)(nil)).Elem()
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutput() SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) ToSyslogDataSourceArrayOutputWithContext(ctx context.Context) SyslogDataSourceArrayOutput {
	return o
}

func (o SyslogDataSourceArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSource {
		return vs[0].([]SyslogDataSource)[vs[1].(int)]
	}).(SyslogDataSourceOutput)
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponse struct {
	// The list of facility names.
	FacilityNames []string `pulumi:"facilityNames"`
	// The log levels to collect.
	LogLevels []string `pulumi:"logLevels"`
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
}

// Definition of which syslog data will be collected and how it will be collected.
// Only collected from Linux machines.
type SyslogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutput() SyslogDataSourceResponseOutput {
	return o
}

func (o SyslogDataSourceResponseOutput) ToSyslogDataSourceResponseOutputWithContext(ctx context.Context) SyslogDataSourceResponseOutput {
	return o
}

// The list of facility names.
func (o SyslogDataSourceResponseOutput) FacilityNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.FacilityNames }).(pulumi.StringArrayOutput)
}

// The log levels to collect.
func (o SyslogDataSourceResponseOutput) LogLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.LogLevels }).(pulumi.StringArrayOutput)
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o SyslogDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o SyslogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyslogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type SyslogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SyslogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyslogDataSourceResponse)(nil)).Elem()
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutput() SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) ToSyslogDataSourceResponseArrayOutputWithContext(ctx context.Context) SyslogDataSourceResponseArrayOutput {
	return o
}

func (o SyslogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) SyslogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyslogDataSourceResponse {
		return vs[0].([]SyslogDataSourceResponse)[vs[1].(int)]
	}).(SyslogDataSourceResponseOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiver struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol *string `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiver
func (val *SyslogReceiver) Defaults() *SyslogReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "rfc3164"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// SyslogReceiverInput is an input type that accepts SyslogReceiverArgs and SyslogReceiverOutput values.
// You can construct a concrete instance of `SyslogReceiverInput` via:
//
//	SyslogReceiverArgs{...}
type SyslogReceiverInput interface {
	pulumi.Input

	ToSyslogReceiverOutput() SyslogReceiverOutput
	ToSyslogReceiverOutputWithContext(context.Context) SyslogReceiverOutput
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverArgs struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiverArgs
func (val *SyslogReceiverArgs) Defaults() *SyslogReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("rfc3164")
	}
	return &tmp
}
func (SyslogReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiver)(nil)).Elem()
}

func (i SyslogReceiverArgs) ToSyslogReceiverOutput() SyslogReceiverOutput {
	return i.ToSyslogReceiverOutputWithContext(context.Background())
}

func (i SyslogReceiverArgs) ToSyslogReceiverOutputWithContext(ctx context.Context) SyslogReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverOutput)
}

func (i SyslogReceiverArgs) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return i.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (i SyslogReceiverArgs) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverOutput).ToSyslogReceiverPtrOutputWithContext(ctx)
}

// SyslogReceiverPtrInput is an input type that accepts SyslogReceiverArgs, SyslogReceiverPtr and SyslogReceiverPtrOutput values.
// You can construct a concrete instance of `SyslogReceiverPtrInput` via:
//
//	        SyslogReceiverArgs{...}
//
//	or:
//
//	        nil
type SyslogReceiverPtrInput interface {
	pulumi.Input

	ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput
	ToSyslogReceiverPtrOutputWithContext(context.Context) SyslogReceiverPtrOutput
}

type syslogReceiverPtrType SyslogReceiverArgs

func SyslogReceiverPtr(v *SyslogReceiverArgs) SyslogReceiverPtrInput {
	return (*syslogReceiverPtrType)(v)
}

func (*syslogReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiver)(nil)).Elem()
}

func (i *syslogReceiverPtrType) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return i.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (i *syslogReceiverPtrType) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyslogReceiverPtrOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverOutput struct{ *pulumi.OutputState }

func (SyslogReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiver)(nil)).Elem()
}

func (o SyslogReceiverOutput) ToSyslogReceiverOutput() SyslogReceiverOutput {
	return o
}

func (o SyslogReceiverOutput) ToSyslogReceiverOutputWithContext(ctx context.Context) SyslogReceiverOutput {
	return o
}

func (o SyslogReceiverOutput) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return o.ToSyslogReceiverPtrOutputWithContext(context.Background())
}

func (o SyslogReceiverOutput) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyslogReceiver) *SyslogReceiver {
		return &v
	}).(SyslogReceiverPtrOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogReceiver) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SyslogReceiverPtrOutput struct{ *pulumi.OutputState }

func (SyslogReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiver)(nil)).Elem()
}

func (o SyslogReceiverPtrOutput) ToSyslogReceiverPtrOutput() SyslogReceiverPtrOutput {
	return o
}

func (o SyslogReceiverPtrOutput) ToSyslogReceiverPtrOutputWithContext(ctx context.Context) SyslogReceiverPtrOutput {
	return o
}

func (o SyslogReceiverPtrOutput) Elem() SyslogReceiverOutput {
	return o.ApplyT(func(v *SyslogReceiver) SyslogReceiver {
		if v != nil {
			return *v
		}
		var ret SyslogReceiver
		return ret
	}).(SyslogReceiverOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiver) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverResponse struct {
	// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Protocol to parse syslog messages. Default rfc3164
	Protocol *string `pulumi:"protocol"`
}

// Defaults sets the appropriate defaults for SyslogReceiverResponse
func (val *SyslogReceiverResponse) Defaults() *SyslogReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "rfc3164"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// Base receiver using TCP as transport protocol.
type SyslogReceiverResponseOutput struct{ *pulumi.OutputState }

func (SyslogReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyslogReceiverResponse)(nil)).Elem()
}

func (o SyslogReceiverResponseOutput) ToSyslogReceiverResponseOutput() SyslogReceiverResponseOutput {
	return o
}

func (o SyslogReceiverResponseOutput) ToSyslogReceiverResponseOutputWithContext(ctx context.Context) SyslogReceiverResponseOutput {
	return o
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v SyslogReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyslogReceiverResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type SyslogReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (SyslogReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyslogReceiverResponse)(nil)).Elem()
}

func (o SyslogReceiverResponsePtrOutput) ToSyslogReceiverResponsePtrOutput() SyslogReceiverResponsePtrOutput {
	return o
}

func (o SyslogReceiverResponsePtrOutput) ToSyslogReceiverResponsePtrOutputWithContext(ctx context.Context) SyslogReceiverResponsePtrOutput {
	return o
}

func (o SyslogReceiverResponsePtrOutput) Elem() SyslogReceiverResponseOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) SyslogReceiverResponse {
		if v != nil {
			return *v
		}
		var ret SyslogReceiverResponse
		return ret
	}).(SyslogReceiverResponseOutput)
}

// Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.
func (o SyslogReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Protocol to parse syslog messages. Default rfc3164
func (o SyslogReceiverResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyslogReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

type SystemDataResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutput() SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) ToSystemDataResponsePtrOutputWithContext(ctx context.Context) SystemDataResponsePtrOutput {
	return o
}

func (o SystemDataResponsePtrOutput) Elem() SystemDataResponseOutput {
	return o.ApplyT(func(v *SystemDataResponse) SystemDataResponse {
		if v != nil {
			return *v
		}
		var ret SystemDataResponse
		return ret
	}).(SystemDataResponseOutput)
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponsePtrOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponsePtrOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CreatedByType
	}).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponsePtrOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedAt
	}).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedBy
	}).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponsePtrOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LastModifiedByType
	}).(pulumi.StringPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporter struct {
	// TCP url to export.
	Url string `pulumi:"url"`
}

// TcpExporterInput is an input type that accepts TcpExporterArgs and TcpExporterOutput values.
// You can construct a concrete instance of `TcpExporterInput` via:
//
//	TcpExporterArgs{...}
type TcpExporterInput interface {
	pulumi.Input

	ToTcpExporterOutput() TcpExporterOutput
	ToTcpExporterOutputWithContext(context.Context) TcpExporterOutput
}

// Base exporter using TCP as transport protocol.
type TcpExporterArgs struct {
	// TCP url to export.
	Url pulumi.StringInput `pulumi:"url"`
}

func (TcpExporterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporter)(nil)).Elem()
}

func (i TcpExporterArgs) ToTcpExporterOutput() TcpExporterOutput {
	return i.ToTcpExporterOutputWithContext(context.Background())
}

func (i TcpExporterArgs) ToTcpExporterOutputWithContext(ctx context.Context) TcpExporterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterOutput)
}

func (i TcpExporterArgs) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return i.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (i TcpExporterArgs) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterOutput).ToTcpExporterPtrOutputWithContext(ctx)
}

// TcpExporterPtrInput is an input type that accepts TcpExporterArgs, TcpExporterPtr and TcpExporterPtrOutput values.
// You can construct a concrete instance of `TcpExporterPtrInput` via:
//
//	        TcpExporterArgs{...}
//
//	or:
//
//	        nil
type TcpExporterPtrInput interface {
	pulumi.Input

	ToTcpExporterPtrOutput() TcpExporterPtrOutput
	ToTcpExporterPtrOutputWithContext(context.Context) TcpExporterPtrOutput
}

type tcpExporterPtrType TcpExporterArgs

func TcpExporterPtr(v *TcpExporterArgs) TcpExporterPtrInput {
	return (*tcpExporterPtrType)(v)
}

func (*tcpExporterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporter)(nil)).Elem()
}

func (i *tcpExporterPtrType) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return i.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (i *tcpExporterPtrType) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpExporterPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporterOutput struct{ *pulumi.OutputState }

func (TcpExporterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporter)(nil)).Elem()
}

func (o TcpExporterOutput) ToTcpExporterOutput() TcpExporterOutput {
	return o
}

func (o TcpExporterOutput) ToTcpExporterOutputWithContext(ctx context.Context) TcpExporterOutput {
	return o
}

func (o TcpExporterOutput) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return o.ToTcpExporterPtrOutputWithContext(context.Background())
}

func (o TcpExporterOutput) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpExporter) *TcpExporter {
		return &v
	}).(TcpExporterPtrOutput)
}

// TCP url to export.
func (o TcpExporterOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v TcpExporter) string { return v.Url }).(pulumi.StringOutput)
}

type TcpExporterPtrOutput struct{ *pulumi.OutputState }

func (TcpExporterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporter)(nil)).Elem()
}

func (o TcpExporterPtrOutput) ToTcpExporterPtrOutput() TcpExporterPtrOutput {
	return o
}

func (o TcpExporterPtrOutput) ToTcpExporterPtrOutputWithContext(ctx context.Context) TcpExporterPtrOutput {
	return o
}

func (o TcpExporterPtrOutput) Elem() TcpExporterOutput {
	return o.ApplyT(func(v *TcpExporter) TcpExporter {
		if v != nil {
			return *v
		}
		var ret TcpExporter
		return ret
	}).(TcpExporterOutput)
}

// TCP url to export.
func (o TcpExporterPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpExporter) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Base exporter using TCP as transport protocol.
type TcpExporterResponse struct {
	// TCP url to export.
	Url string `pulumi:"url"`
}

// Base exporter using TCP as transport protocol.
type TcpExporterResponseOutput struct{ *pulumi.OutputState }

func (TcpExporterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpExporterResponse)(nil)).Elem()
}

func (o TcpExporterResponseOutput) ToTcpExporterResponseOutput() TcpExporterResponseOutput {
	return o
}

func (o TcpExporterResponseOutput) ToTcpExporterResponseOutputWithContext(ctx context.Context) TcpExporterResponseOutput {
	return o
}

// TCP url to export.
func (o TcpExporterResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v TcpExporterResponse) string { return v.Url }).(pulumi.StringOutput)
}

type TcpExporterResponsePtrOutput struct{ *pulumi.OutputState }

func (TcpExporterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpExporterResponse)(nil)).Elem()
}

func (o TcpExporterResponsePtrOutput) ToTcpExporterResponsePtrOutput() TcpExporterResponsePtrOutput {
	return o
}

func (o TcpExporterResponsePtrOutput) ToTcpExporterResponsePtrOutputWithContext(ctx context.Context) TcpExporterResponsePtrOutput {
	return o
}

func (o TcpExporterResponsePtrOutput) Elem() TcpExporterResponseOutput {
	return o.ApplyT(func(v *TcpExporterResponse) TcpExporterResponse {
		if v != nil {
			return *v
		}
		var ret TcpExporterResponse
		return ret
	}).(TcpExporterResponseOutput)
}

// TCP url to export.
func (o TcpExporterResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpExporterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Threshold-based evaluation rule for a signal definition
type ThresholdRule struct {
	// Operator how to compare the signal value with the threshold
	Operator string `pulumi:"operator"`
	// Threshold value
	Threshold string `pulumi:"threshold"`
}

// ThresholdRuleInput is an input type that accepts ThresholdRuleArgs and ThresholdRuleOutput values.
// You can construct a concrete instance of `ThresholdRuleInput` via:
//
//	ThresholdRuleArgs{...}
type ThresholdRuleInput interface {
	pulumi.Input

	ToThresholdRuleOutput() ThresholdRuleOutput
	ToThresholdRuleOutputWithContext(context.Context) ThresholdRuleOutput
}

// Threshold-based evaluation rule for a signal definition
type ThresholdRuleArgs struct {
	// Operator how to compare the signal value with the threshold
	Operator pulumi.StringInput `pulumi:"operator"`
	// Threshold value
	Threshold pulumi.StringInput `pulumi:"threshold"`
}

func (ThresholdRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdRule)(nil)).Elem()
}

func (i ThresholdRuleArgs) ToThresholdRuleOutput() ThresholdRuleOutput {
	return i.ToThresholdRuleOutputWithContext(context.Background())
}

func (i ThresholdRuleArgs) ToThresholdRuleOutputWithContext(ctx context.Context) ThresholdRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThresholdRuleOutput)
}

func (i ThresholdRuleArgs) ToThresholdRulePtrOutput() ThresholdRulePtrOutput {
	return i.ToThresholdRulePtrOutputWithContext(context.Background())
}

func (i ThresholdRuleArgs) ToThresholdRulePtrOutputWithContext(ctx context.Context) ThresholdRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThresholdRuleOutput).ToThresholdRulePtrOutputWithContext(ctx)
}

// ThresholdRulePtrInput is an input type that accepts ThresholdRuleArgs, ThresholdRulePtr and ThresholdRulePtrOutput values.
// You can construct a concrete instance of `ThresholdRulePtrInput` via:
//
//	        ThresholdRuleArgs{...}
//
//	or:
//
//	        nil
type ThresholdRulePtrInput interface {
	pulumi.Input

	ToThresholdRulePtrOutput() ThresholdRulePtrOutput
	ToThresholdRulePtrOutputWithContext(context.Context) ThresholdRulePtrOutput
}

type thresholdRulePtrType ThresholdRuleArgs

func ThresholdRulePtr(v *ThresholdRuleArgs) ThresholdRulePtrInput {
	return (*thresholdRulePtrType)(v)
}

func (*thresholdRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdRule)(nil)).Elem()
}

func (i *thresholdRulePtrType) ToThresholdRulePtrOutput() ThresholdRulePtrOutput {
	return i.ToThresholdRulePtrOutputWithContext(context.Background())
}

func (i *thresholdRulePtrType) ToThresholdRulePtrOutputWithContext(ctx context.Context) ThresholdRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThresholdRulePtrOutput)
}

// Threshold-based evaluation rule for a signal definition
type ThresholdRuleOutput struct{ *pulumi.OutputState }

func (ThresholdRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdRule)(nil)).Elem()
}

func (o ThresholdRuleOutput) ToThresholdRuleOutput() ThresholdRuleOutput {
	return o
}

func (o ThresholdRuleOutput) ToThresholdRuleOutputWithContext(ctx context.Context) ThresholdRuleOutput {
	return o
}

func (o ThresholdRuleOutput) ToThresholdRulePtrOutput() ThresholdRulePtrOutput {
	return o.ToThresholdRulePtrOutputWithContext(context.Background())
}

func (o ThresholdRuleOutput) ToThresholdRulePtrOutputWithContext(ctx context.Context) ThresholdRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThresholdRule) *ThresholdRule {
		return &v
	}).(ThresholdRulePtrOutput)
}

// Operator how to compare the signal value with the threshold
func (o ThresholdRuleOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ThresholdRule) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value
func (o ThresholdRuleOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v ThresholdRule) string { return v.Threshold }).(pulumi.StringOutput)
}

type ThresholdRulePtrOutput struct{ *pulumi.OutputState }

func (ThresholdRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdRule)(nil)).Elem()
}

func (o ThresholdRulePtrOutput) ToThresholdRulePtrOutput() ThresholdRulePtrOutput {
	return o
}

func (o ThresholdRulePtrOutput) ToThresholdRulePtrOutputWithContext(ctx context.Context) ThresholdRulePtrOutput {
	return o
}

func (o ThresholdRulePtrOutput) Elem() ThresholdRuleOutput {
	return o.ApplyT(func(v *ThresholdRule) ThresholdRule {
		if v != nil {
			return *v
		}
		var ret ThresholdRule
		return ret
	}).(ThresholdRuleOutput)
}

// Operator how to compare the signal value with the threshold
func (o ThresholdRulePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThresholdRule) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Threshold value
func (o ThresholdRulePtrOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThresholdRule) *string {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.StringPtrOutput)
}

// Threshold-based evaluation rule for a signal definition
type ThresholdRuleResponse struct {
	// Operator how to compare the signal value with the threshold
	Operator string `pulumi:"operator"`
	// Threshold value
	Threshold string `pulumi:"threshold"`
}

// Threshold-based evaluation rule for a signal definition
type ThresholdRuleResponseOutput struct{ *pulumi.OutputState }

func (ThresholdRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThresholdRuleResponse)(nil)).Elem()
}

func (o ThresholdRuleResponseOutput) ToThresholdRuleResponseOutput() ThresholdRuleResponseOutput {
	return o
}

func (o ThresholdRuleResponseOutput) ToThresholdRuleResponseOutputWithContext(ctx context.Context) ThresholdRuleResponseOutput {
	return o
}

// Operator how to compare the signal value with the threshold
func (o ThresholdRuleResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ThresholdRuleResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Threshold value
func (o ThresholdRuleResponseOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v ThresholdRuleResponse) string { return v.Threshold }).(pulumi.StringOutput)
}

type ThresholdRuleResponsePtrOutput struct{ *pulumi.OutputState }

func (ThresholdRuleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThresholdRuleResponse)(nil)).Elem()
}

func (o ThresholdRuleResponsePtrOutput) ToThresholdRuleResponsePtrOutput() ThresholdRuleResponsePtrOutput {
	return o
}

func (o ThresholdRuleResponsePtrOutput) ToThresholdRuleResponsePtrOutputWithContext(ctx context.Context) ThresholdRuleResponsePtrOutput {
	return o
}

func (o ThresholdRuleResponsePtrOutput) Elem() ThresholdRuleResponseOutput {
	return o.ApplyT(func(v *ThresholdRuleResponse) ThresholdRuleResponse {
		if v != nil {
			return *v
		}
		var ret ThresholdRuleResponse
		return ret
	}).(ThresholdRuleResponseOutput)
}

// Operator how to compare the signal value with the threshold
func (o ThresholdRuleResponsePtrOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThresholdRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Operator
	}).(pulumi.StringPtrOutput)
}

// Threshold value
func (o ThresholdRuleResponsePtrOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThresholdRuleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Threshold
	}).(pulumi.StringPtrOutput)
}

// A specific date-time for the profile.
type TimeWindow struct {
	// the end time for the profile in ISO 8601 format.
	End string `pulumi:"end"`
	// the start time for the profile in ISO 8601 format.
	Start string `pulumi:"start"`
	// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone *string `pulumi:"timeZone"`
}

// TimeWindowInput is an input type that accepts TimeWindowArgs and TimeWindowOutput values.
// You can construct a concrete instance of `TimeWindowInput` via:
//
//	TimeWindowArgs{...}
type TimeWindowInput interface {
	pulumi.Input

	ToTimeWindowOutput() TimeWindowOutput
	ToTimeWindowOutputWithContext(context.Context) TimeWindowOutput
}

// A specific date-time for the profile.
type TimeWindowArgs struct {
	// the end time for the profile in ISO 8601 format.
	End pulumi.StringInput `pulumi:"end"`
	// the start time for the profile in ISO 8601 format.
	Start pulumi.StringInput `pulumi:"start"`
	// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

func (TimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (i TimeWindowArgs) ToTimeWindowOutput() TimeWindowOutput {
	return i.ToTimeWindowOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput)
}

func (i TimeWindowArgs) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i TimeWindowArgs) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowOutput).ToTimeWindowPtrOutputWithContext(ctx)
}

// TimeWindowPtrInput is an input type that accepts TimeWindowArgs, TimeWindowPtr and TimeWindowPtrOutput values.
// You can construct a concrete instance of `TimeWindowPtrInput` via:
//
//	        TimeWindowArgs{...}
//
//	or:
//
//	        nil
type TimeWindowPtrInput interface {
	pulumi.Input

	ToTimeWindowPtrOutput() TimeWindowPtrOutput
	ToTimeWindowPtrOutputWithContext(context.Context) TimeWindowPtrOutput
}

type timeWindowPtrType TimeWindowArgs

func TimeWindowPtr(v *TimeWindowArgs) TimeWindowPtrInput {
	return (*timeWindowPtrType)(v)
}

func (*timeWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return i.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (i *timeWindowPtrType) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeWindowPtrOutput)
}

// A specific date-time for the profile.
type TimeWindowOutput struct{ *pulumi.OutputState }

func (TimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindow)(nil)).Elem()
}

func (o TimeWindowOutput) ToTimeWindowOutput() TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowOutputWithContext(ctx context.Context) TimeWindowOutput {
	return o
}

func (o TimeWindowOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o.ToTimeWindowPtrOutputWithContext(context.Background())
}

func (o TimeWindowOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimeWindow) *TimeWindow {
		return &v
	}).(TimeWindowPtrOutput)
}

// the end time for the profile in ISO 8601 format.
func (o TimeWindowOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindow) string { return v.End }).(pulumi.StringOutput)
}

// the start time for the profile in ISO 8601 format.
func (o TimeWindowOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindow) string { return v.Start }).(pulumi.StringOutput)
}

// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o TimeWindowOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindow) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type TimeWindowPtrOutput struct{ *pulumi.OutputState }

func (TimeWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindow)(nil)).Elem()
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutput() TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) ToTimeWindowPtrOutputWithContext(ctx context.Context) TimeWindowPtrOutput {
	return o
}

func (o TimeWindowPtrOutput) Elem() TimeWindowOutput {
	return o.ApplyT(func(v *TimeWindow) TimeWindow {
		if v != nil {
			return *v
		}
		var ret TimeWindow
		return ret
	}).(TimeWindowOutput)
}

// the end time for the profile in ISO 8601 format.
func (o TimeWindowPtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.StringPtrOutput)
}

// the start time for the profile in ISO 8601 format.
func (o TimeWindowPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o TimeWindowPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindow) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// A specific date-time for the profile.
type TimeWindowResponse struct {
	// the end time for the profile in ISO 8601 format.
	End string `pulumi:"end"`
	// the start time for the profile in ISO 8601 format.
	Start string `pulumi:"start"`
	// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
	TimeZone *string `pulumi:"timeZone"`
}

// A specific date-time for the profile.
type TimeWindowResponseOutput struct{ *pulumi.OutputState }

func (TimeWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutput() TimeWindowResponseOutput {
	return o
}

func (o TimeWindowResponseOutput) ToTimeWindowResponseOutputWithContext(ctx context.Context) TimeWindowResponseOutput {
	return o
}

// the end time for the profile in ISO 8601 format.
func (o TimeWindowResponseOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.End }).(pulumi.StringOutput)
}

// the start time for the profile in ISO 8601 format.
func (o TimeWindowResponseOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v TimeWindowResponse) string { return v.Start }).(pulumi.StringOutput)
}

// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o TimeWindowResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimeWindowResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type TimeWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (TimeWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeWindowResponse)(nil)).Elem()
}

func (o TimeWindowResponsePtrOutput) ToTimeWindowResponsePtrOutput() TimeWindowResponsePtrOutput {
	return o
}

func (o TimeWindowResponsePtrOutput) ToTimeWindowResponsePtrOutputWithContext(ctx context.Context) TimeWindowResponsePtrOutput {
	return o
}

func (o TimeWindowResponsePtrOutput) Elem() TimeWindowResponseOutput {
	return o.ApplyT(func(v *TimeWindowResponse) TimeWindowResponse {
		if v != nil {
			return *v
		}
		var ret TimeWindowResponse
		return ret
	}).(TimeWindowResponseOutput)
}

// the end time for the profile in ISO 8601 format.
func (o TimeWindowResponsePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.End
	}).(pulumi.StringPtrOutput)
}

// the start time for the profile in ISO 8601 format.
func (o TimeWindowResponsePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Start
	}).(pulumi.StringPtrOutput)
}

// the timezone of the start and end times for the profile. Some examples of valid time zones are: Dateline Standard Time, UTC-11, Hawaiian Standard Time, Alaskan Standard Time, Pacific Standard Time (Mexico), Pacific Standard Time, US Mountain Standard Time, Mountain Standard Time (Mexico), Mountain Standard Time, Central America Standard Time, Central Standard Time, Central Standard Time (Mexico), Canada Central Standard Time, SA Pacific Standard Time, Eastern Standard Time, US Eastern Standard Time, Venezuela Standard Time, Paraguay Standard Time, Atlantic Standard Time, Central Brazilian Standard Time, SA Western Standard Time, Pacific SA Standard Time, Newfoundland Standard Time, E. South America Standard Time, Argentina Standard Time, SA Eastern Standard Time, Greenland Standard Time, Montevideo Standard Time, Bahia Standard Time, UTC-02, Mid-Atlantic Standard Time, Azores Standard Time, Cape Verde Standard Time, Morocco Standard Time, UTC, GMT Standard Time, Greenwich Standard Time, W. Europe Standard Time, Central Europe Standard Time, Romance Standard Time, Central European Standard Time, W. Central Africa Standard Time, Namibia Standard Time, Jordan Standard Time, GTB Standard Time, Middle East Standard Time, Egypt Standard Time, Syria Standard Time, E. Europe Standard Time, South Africa Standard Time, FLE Standard Time, Turkey Standard Time, Israel Standard Time, Kaliningrad Standard Time, Libya Standard Time, Arabic Standard Time, Arab Standard Time, Belarus Standard Time, Russian Standard Time, E. Africa Standard Time, Iran Standard Time, Arabian Standard Time, Azerbaijan Standard Time, Russia Time Zone 3, Mauritius Standard Time, Georgian Standard Time, Caucasus Standard Time, Afghanistan Standard Time, West Asia Standard Time, Ekaterinburg Standard Time, Pakistan Standard Time, India Standard Time, Sri Lanka Standard Time, Nepal Standard Time, Central Asia Standard Time, Bangladesh Standard Time, N. Central Asia Standard Time, Myanmar Standard Time, SE Asia Standard Time, North Asia Standard Time, China Standard Time, North Asia East Standard Time, Singapore Standard Time, W. Australia Standard Time, Taipei Standard Time, Ulaanbaatar Standard Time, Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time, Cen. Australia Standard Time, AUS Central Standard Time, E. Australia Standard Time, AUS Eastern Standard Time, West Pacific Standard Time, Tasmania Standard Time, Magadan Standard Time, Vladivostok Standard Time, Russia Time Zone 10, Central Pacific Standard Time, Russia Time Zone 11, New Zealand Standard Time, UTC+12, Fiji Standard Time, Kamchatka Standard Time, Tonga Standard Time, Samoa Standard Time, Line Islands Standard Time
func (o TimeWindowResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimeWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiver struct {
	// The encoding of the stream being received.
	Encoding *string `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
	JsonArrayMapper *JsonArrayMapper `pulumi:"jsonArrayMapper"`
	// Max read queue length.
	ReadQueueLength *int `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiver
func (val *UdpReceiver) Defaults() *UdpReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		encoding_ := "nop"
		tmp.Encoding = &encoding_
	}
	tmp.JsonArrayMapper = tmp.JsonArrayMapper.Defaults()

	if tmp.ReadQueueLength == nil {
		readQueueLength_ := 1000
		tmp.ReadQueueLength = &readQueueLength_
	}
	return &tmp
}

// UdpReceiverInput is an input type that accepts UdpReceiverArgs and UdpReceiverOutput values.
// You can construct a concrete instance of `UdpReceiverInput` via:
//
//	UdpReceiverArgs{...}
type UdpReceiverInput interface {
	pulumi.Input

	ToUdpReceiverOutput() UdpReceiverOutput
	ToUdpReceiverOutputWithContext(context.Context) UdpReceiverOutput
}

// Receiver using UDP as transport protocol.
type UdpReceiverArgs struct {
	// The encoding of the stream being received.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint pulumi.StringInput `pulumi:"endpoint"`
	// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
	JsonArrayMapper JsonArrayMapperPtrInput `pulumi:"jsonArrayMapper"`
	// Max read queue length.
	ReadQueueLength pulumi.IntPtrInput `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiverArgs
func (val *UdpReceiverArgs) Defaults() *UdpReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		tmp.Encoding = pulumi.StringPtr("nop")
	}

	if tmp.ReadQueueLength == nil {
		tmp.ReadQueueLength = pulumi.IntPtr(1000)
	}
	return &tmp
}
func (UdpReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiver)(nil)).Elem()
}

func (i UdpReceiverArgs) ToUdpReceiverOutput() UdpReceiverOutput {
	return i.ToUdpReceiverOutputWithContext(context.Background())
}

func (i UdpReceiverArgs) ToUdpReceiverOutputWithContext(ctx context.Context) UdpReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverOutput)
}

func (i UdpReceiverArgs) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return i.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (i UdpReceiverArgs) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverOutput).ToUdpReceiverPtrOutputWithContext(ctx)
}

// UdpReceiverPtrInput is an input type that accepts UdpReceiverArgs, UdpReceiverPtr and UdpReceiverPtrOutput values.
// You can construct a concrete instance of `UdpReceiverPtrInput` via:
//
//	        UdpReceiverArgs{...}
//
//	or:
//
//	        nil
type UdpReceiverPtrInput interface {
	pulumi.Input

	ToUdpReceiverPtrOutput() UdpReceiverPtrOutput
	ToUdpReceiverPtrOutputWithContext(context.Context) UdpReceiverPtrOutput
}

type udpReceiverPtrType UdpReceiverArgs

func UdpReceiverPtr(v *UdpReceiverArgs) UdpReceiverPtrInput {
	return (*udpReceiverPtrType)(v)
}

func (*udpReceiverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiver)(nil)).Elem()
}

func (i *udpReceiverPtrType) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return i.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (i *udpReceiverPtrType) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpReceiverPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiverOutput struct{ *pulumi.OutputState }

func (UdpReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiver)(nil)).Elem()
}

func (o UdpReceiverOutput) ToUdpReceiverOutput() UdpReceiverOutput {
	return o
}

func (o UdpReceiverOutput) ToUdpReceiverOutputWithContext(ctx context.Context) UdpReceiverOutput {
	return o
}

func (o UdpReceiverOutput) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return o.ToUdpReceiverPtrOutputWithContext(context.Background())
}

func (o UdpReceiverOutput) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UdpReceiver) *UdpReceiver {
		return &v
	}).(UdpReceiverPtrOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UdpReceiver) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v UdpReceiver) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
func (o UdpReceiverOutput) JsonArrayMapper() JsonArrayMapperPtrOutput {
	return o.ApplyT(func(v UdpReceiver) *JsonArrayMapper { return v.JsonArrayMapper }).(JsonArrayMapperPtrOutput)
}

// Max read queue length.
func (o UdpReceiverOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UdpReceiver) *int { return v.ReadQueueLength }).(pulumi.IntPtrOutput)
}

type UdpReceiverPtrOutput struct{ *pulumi.OutputState }

func (UdpReceiverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiver)(nil)).Elem()
}

func (o UdpReceiverPtrOutput) ToUdpReceiverPtrOutput() UdpReceiverPtrOutput {
	return o
}

func (o UdpReceiverPtrOutput) ToUdpReceiverPtrOutputWithContext(ctx context.Context) UdpReceiverPtrOutput {
	return o
}

func (o UdpReceiverPtrOutput) Elem() UdpReceiverOutput {
	return o.ApplyT(func(v *UdpReceiver) UdpReceiver {
		if v != nil {
			return *v
		}
		var ret UdpReceiver
		return ret
	}).(UdpReceiverOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
func (o UdpReceiverPtrOutput) JsonArrayMapper() JsonArrayMapperPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *JsonArrayMapper {
		if v == nil {
			return nil
		}
		return v.JsonArrayMapper
	}).(JsonArrayMapperPtrOutput)
}

// Max read queue length.
func (o UdpReceiverPtrOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UdpReceiver) *int {
		if v == nil {
			return nil
		}
		return v.ReadQueueLength
	}).(pulumi.IntPtrOutput)
}

// Receiver using UDP as transport protocol.
type UdpReceiverResponse struct {
	// The encoding of the stream being received.
	Encoding *string `pulumi:"encoding"`
	// TCP endpoint definition. Example: 0.0.0.0:<port>.
	Endpoint string `pulumi:"endpoint"`
	// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
	JsonArrayMapper *JsonArrayMapperResponse `pulumi:"jsonArrayMapper"`
	// Max read queue length.
	ReadQueueLength *int `pulumi:"readQueueLength"`
}

// Defaults sets the appropriate defaults for UdpReceiverResponse
func (val *UdpReceiverResponse) Defaults() *UdpReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Encoding == nil {
		encoding_ := "nop"
		tmp.Encoding = &encoding_
	}
	tmp.JsonArrayMapper = tmp.JsonArrayMapper.Defaults()

	if tmp.ReadQueueLength == nil {
		readQueueLength_ := 1000
		tmp.ReadQueueLength = &readQueueLength_
	}
	return &tmp
}

// Receiver using UDP as transport protocol.
type UdpReceiverResponseOutput struct{ *pulumi.OutputState }

func (UdpReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UdpReceiverResponse)(nil)).Elem()
}

func (o UdpReceiverResponseOutput) ToUdpReceiverResponseOutput() UdpReceiverResponseOutput {
	return o
}

func (o UdpReceiverResponseOutput) ToUdpReceiverResponseOutputWithContext(ctx context.Context) UdpReceiverResponseOutput {
	return o
}

// The encoding of the stream being received.
func (o UdpReceiverResponseOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UdpReceiverResponse) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v UdpReceiverResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
func (o UdpReceiverResponseOutput) JsonArrayMapper() JsonArrayMapperResponsePtrOutput {
	return o.ApplyT(func(v UdpReceiverResponse) *JsonArrayMapperResponse { return v.JsonArrayMapper }).(JsonArrayMapperResponsePtrOutput)
}

// Max read queue length.
func (o UdpReceiverResponseOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UdpReceiverResponse) *int { return v.ReadQueueLength }).(pulumi.IntPtrOutput)
}

type UdpReceiverResponsePtrOutput struct{ *pulumi.OutputState }

func (UdpReceiverResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpReceiverResponse)(nil)).Elem()
}

func (o UdpReceiverResponsePtrOutput) ToUdpReceiverResponsePtrOutput() UdpReceiverResponsePtrOutput {
	return o
}

func (o UdpReceiverResponsePtrOutput) ToUdpReceiverResponsePtrOutputWithContext(ctx context.Context) UdpReceiverResponsePtrOutput {
	return o
}

func (o UdpReceiverResponsePtrOutput) Elem() UdpReceiverResponseOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) UdpReceiverResponse {
		if v != nil {
			return *v
		}
		var ret UdpReceiverResponse
		return ret
	}).(UdpReceiverResponseOutput)
}

// The encoding of the stream being received.
func (o UdpReceiverResponsePtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// TCP endpoint definition. Example: 0.0.0.0:<port>.
func (o UdpReceiverResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Json array mapper - allows this udp receiver to parse a value from a given source field as a json array, match a key to each parsed value and output the key-value map to a given output field.
func (o UdpReceiverResponsePtrOutput) JsonArrayMapper() JsonArrayMapperResponsePtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *JsonArrayMapperResponse {
		if v == nil {
			return nil
		}
		return v.JsonArrayMapper
	}).(JsonArrayMapperResponsePtrOutput)
}

// Max read queue length.
func (o UdpReceiverResponsePtrOutput) ReadQueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UdpReceiverResponse) *int {
		if v == nil {
			return nil
		}
		return v.ReadQueueLength
	}).(pulumi.IntPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// User assigned identity properties.
type UserIdentityPropertiesResponse struct {
	// The client id of user assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal id of user assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties.
type UserIdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutput() UserIdentityPropertiesResponseOutput {
	return o
}

func (o UserIdentityPropertiesResponseOutput) ToUserIdentityPropertiesResponseOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseOutput {
	return o
}

// The client id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal id of user assigned identity.
func (o UserIdentityPropertiesResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityPropertiesResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserIdentityPropertiesResponseMapOutput struct{ *pulumi.OutputState }

func (UserIdentityPropertiesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserIdentityPropertiesResponse)(nil)).Elem()
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutput() UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) ToUserIdentityPropertiesResponseMapOutputWithContext(ctx context.Context) UserIdentityPropertiesResponseMapOutput {
	return o
}

func (o UserIdentityPropertiesResponseMapOutput) MapIndex(k pulumi.StringInput) UserIdentityPropertiesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserIdentityPropertiesResponse {
		return vs[0].(map[string]UserIdentityPropertiesResponse)[vs[1].(string)]
	}).(UserIdentityPropertiesResponseOutput)
}

// A voice receiver.
type VoiceReceiver struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// VoiceReceiverInput is an input type that accepts VoiceReceiverArgs and VoiceReceiverOutput values.
// You can construct a concrete instance of `VoiceReceiverInput` via:
//
//	VoiceReceiverArgs{...}
type VoiceReceiverInput interface {
	pulumi.Input

	ToVoiceReceiverOutput() VoiceReceiverOutput
	ToVoiceReceiverOutputWithContext(context.Context) VoiceReceiverOutput
}

// A voice receiver.
type VoiceReceiverArgs struct {
	// The country code of the voice receiver.
	CountryCode pulumi.StringInput `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within a tenant action group.
	Name pulumi.StringInput `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber pulumi.StringInput `pulumi:"phoneNumber"`
}

func (VoiceReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return i.ToVoiceReceiverOutputWithContext(context.Background())
}

func (i VoiceReceiverArgs) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverOutput)
}

// VoiceReceiverArrayInput is an input type that accepts VoiceReceiverArray and VoiceReceiverArrayOutput values.
// You can construct a concrete instance of `VoiceReceiverArrayInput` via:
//
//	VoiceReceiverArray{ VoiceReceiverArgs{...} }
type VoiceReceiverArrayInput interface {
	pulumi.Input

	ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput
	ToVoiceReceiverArrayOutputWithContext(context.Context) VoiceReceiverArrayOutput
}

type VoiceReceiverArray []VoiceReceiverInput

func (VoiceReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return i.ToVoiceReceiverArrayOutputWithContext(context.Background())
}

func (i VoiceReceiverArray) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VoiceReceiverArrayOutput)
}

// A voice receiver.
type VoiceReceiverOutput struct{ *pulumi.OutputState }

func (VoiceReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutput() VoiceReceiverOutput {
	return o
}

func (o VoiceReceiverOutput) ToVoiceReceiverOutputWithContext(ctx context.Context) VoiceReceiverOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within a tenant action group.
func (o VoiceReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiver) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiver)(nil)).Elem()
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutput() VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) ToVoiceReceiverArrayOutputWithContext(ctx context.Context) VoiceReceiverArrayOutput {
	return o
}

func (o VoiceReceiverArrayOutput) Index(i pulumi.IntInput) VoiceReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiver {
		return vs[0].([]VoiceReceiver)[vs[1].(int)]
	}).(VoiceReceiverOutput)
}

// A voice receiver.
type VoiceReceiverResponse struct {
	// The country code of the voice receiver.
	CountryCode string `pulumi:"countryCode"`
	// The name of the voice receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// The phone number of the voice receiver.
	PhoneNumber string `pulumi:"phoneNumber"`
}

// A voice receiver.
type VoiceReceiverResponseOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutput() VoiceReceiverResponseOutput {
	return o
}

func (o VoiceReceiverResponseOutput) ToVoiceReceiverResponseOutputWithContext(ctx context.Context) VoiceReceiverResponseOutput {
	return o
}

// The country code of the voice receiver.
func (o VoiceReceiverResponseOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.CountryCode }).(pulumi.StringOutput)
}

// The name of the voice receiver. Names must be unique across all receivers within a tenant action group.
func (o VoiceReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The phone number of the voice receiver.
func (o VoiceReceiverResponseOutput) PhoneNumber() pulumi.StringOutput {
	return o.ApplyT(func(v VoiceReceiverResponse) string { return v.PhoneNumber }).(pulumi.StringOutput)
}

type VoiceReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (VoiceReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VoiceReceiverResponse)(nil)).Elem()
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutput() VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) ToVoiceReceiverResponseArrayOutputWithContext(ctx context.Context) VoiceReceiverResponseArrayOutput {
	return o
}

func (o VoiceReceiverResponseArrayOutput) Index(i pulumi.IntInput) VoiceReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VoiceReceiverResponse {
		return vs[0].([]VoiceReceiverResponse)[vs[1].(int)]
	}).(VoiceReceiverResponseOutput)
}

// Webhook notification of an autoscale event.
type WebhookNotification struct {
	// a property bag of settings. This value can be empty.
	Properties map[string]string `pulumi:"properties"`
	// the service address to receive the notification.
	ServiceUri *string `pulumi:"serviceUri"`
}

// WebhookNotificationInput is an input type that accepts WebhookNotificationArgs and WebhookNotificationOutput values.
// You can construct a concrete instance of `WebhookNotificationInput` via:
//
//	WebhookNotificationArgs{...}
type WebhookNotificationInput interface {
	pulumi.Input

	ToWebhookNotificationOutput() WebhookNotificationOutput
	ToWebhookNotificationOutputWithContext(context.Context) WebhookNotificationOutput
}

// Webhook notification of an autoscale event.
type WebhookNotificationArgs struct {
	// a property bag of settings. This value can be empty.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// the service address to receive the notification.
	ServiceUri pulumi.StringPtrInput `pulumi:"serviceUri"`
}

func (WebhookNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookNotification)(nil)).Elem()
}

func (i WebhookNotificationArgs) ToWebhookNotificationOutput() WebhookNotificationOutput {
	return i.ToWebhookNotificationOutputWithContext(context.Background())
}

func (i WebhookNotificationArgs) ToWebhookNotificationOutputWithContext(ctx context.Context) WebhookNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookNotificationOutput)
}

// WebhookNotificationArrayInput is an input type that accepts WebhookNotificationArray and WebhookNotificationArrayOutput values.
// You can construct a concrete instance of `WebhookNotificationArrayInput` via:
//
//	WebhookNotificationArray{ WebhookNotificationArgs{...} }
type WebhookNotificationArrayInput interface {
	pulumi.Input

	ToWebhookNotificationArrayOutput() WebhookNotificationArrayOutput
	ToWebhookNotificationArrayOutputWithContext(context.Context) WebhookNotificationArrayOutput
}

type WebhookNotificationArray []WebhookNotificationInput

func (WebhookNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookNotification)(nil)).Elem()
}

func (i WebhookNotificationArray) ToWebhookNotificationArrayOutput() WebhookNotificationArrayOutput {
	return i.ToWebhookNotificationArrayOutputWithContext(context.Background())
}

func (i WebhookNotificationArray) ToWebhookNotificationArrayOutputWithContext(ctx context.Context) WebhookNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookNotificationArrayOutput)
}

// Webhook notification of an autoscale event.
type WebhookNotificationOutput struct{ *pulumi.OutputState }

func (WebhookNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookNotification)(nil)).Elem()
}

func (o WebhookNotificationOutput) ToWebhookNotificationOutput() WebhookNotificationOutput {
	return o
}

func (o WebhookNotificationOutput) ToWebhookNotificationOutputWithContext(ctx context.Context) WebhookNotificationOutput {
	return o
}

// a property bag of settings. This value can be empty.
func (o WebhookNotificationOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebhookNotification) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// the service address to receive the notification.
func (o WebhookNotificationOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookNotification) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

type WebhookNotificationArrayOutput struct{ *pulumi.OutputState }

func (WebhookNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookNotification)(nil)).Elem()
}

func (o WebhookNotificationArrayOutput) ToWebhookNotificationArrayOutput() WebhookNotificationArrayOutput {
	return o
}

func (o WebhookNotificationArrayOutput) ToWebhookNotificationArrayOutputWithContext(ctx context.Context) WebhookNotificationArrayOutput {
	return o
}

func (o WebhookNotificationArrayOutput) Index(i pulumi.IntInput) WebhookNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookNotification {
		return vs[0].([]WebhookNotification)[vs[1].(int)]
	}).(WebhookNotificationOutput)
}

// Webhook notification of an autoscale event.
type WebhookNotificationResponse struct {
	// a property bag of settings. This value can be empty.
	Properties map[string]string `pulumi:"properties"`
	// the service address to receive the notification.
	ServiceUri *string `pulumi:"serviceUri"`
}

// Webhook notification of an autoscale event.
type WebhookNotificationResponseOutput struct{ *pulumi.OutputState }

func (WebhookNotificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookNotificationResponse)(nil)).Elem()
}

func (o WebhookNotificationResponseOutput) ToWebhookNotificationResponseOutput() WebhookNotificationResponseOutput {
	return o
}

func (o WebhookNotificationResponseOutput) ToWebhookNotificationResponseOutputWithContext(ctx context.Context) WebhookNotificationResponseOutput {
	return o
}

// a property bag of settings. This value can be empty.
func (o WebhookNotificationResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebhookNotificationResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// the service address to receive the notification.
func (o WebhookNotificationResponseOutput) ServiceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookNotificationResponse) *string { return v.ServiceUri }).(pulumi.StringPtrOutput)
}

type WebhookNotificationResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookNotificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookNotificationResponse)(nil)).Elem()
}

func (o WebhookNotificationResponseArrayOutput) ToWebhookNotificationResponseArrayOutput() WebhookNotificationResponseArrayOutput {
	return o
}

func (o WebhookNotificationResponseArrayOutput) ToWebhookNotificationResponseArrayOutputWithContext(ctx context.Context) WebhookNotificationResponseArrayOutput {
	return o
}

func (o WebhookNotificationResponseArrayOutput) Index(i pulumi.IntInput) WebhookNotificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookNotificationResponse {
		return vs[0].([]WebhookNotificationResponse)[vs[1].(int)]
	}).(WebhookNotificationResponseOutput)
}

// A webhook receiver.
type WebhookReceiver struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri *string `pulumi:"identifierUri"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the webhook receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId *string `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth *bool `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for WebhookReceiver
func (val *WebhookReceiver) Defaults() *WebhookReceiver {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseAadAuth == nil {
		useAadAuth_ := false
		tmp.UseAadAuth = &useAadAuth_
	}
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// WebhookReceiverInput is an input type that accepts WebhookReceiverArgs and WebhookReceiverOutput values.
// You can construct a concrete instance of `WebhookReceiverInput` via:
//
//	WebhookReceiverArgs{...}
type WebhookReceiverInput interface {
	pulumi.Input

	ToWebhookReceiverOutput() WebhookReceiverOutput
	ToWebhookReceiverOutputWithContext(context.Context) WebhookReceiverOutput
}

// A webhook receiver.
type WebhookReceiverArgs struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri pulumi.StringPtrInput `pulumi:"identifierUri"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity pulumi.StringPtrInput `pulumi:"managedIdentity"`
	// The name of the webhook receiver. Names must be unique across all receivers within a tenant action group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri pulumi.StringInput `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth pulumi.BoolPtrInput `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema pulumi.BoolPtrInput `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for WebhookReceiverArgs
func (val *WebhookReceiverArgs) Defaults() *WebhookReceiverArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseAadAuth == nil {
		tmp.UseAadAuth = pulumi.BoolPtr(false)
	}
	if tmp.UseCommonAlertSchema == nil {
		tmp.UseCommonAlertSchema = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (WebhookReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return i.ToWebhookReceiverOutputWithContext(context.Background())
}

func (i WebhookReceiverArgs) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverOutput)
}

// WebhookReceiverArrayInput is an input type that accepts WebhookReceiverArray and WebhookReceiverArrayOutput values.
// You can construct a concrete instance of `WebhookReceiverArrayInput` via:
//
//	WebhookReceiverArray{ WebhookReceiverArgs{...} }
type WebhookReceiverArrayInput interface {
	pulumi.Input

	ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput
	ToWebhookReceiverArrayOutputWithContext(context.Context) WebhookReceiverArrayOutput
}

type WebhookReceiverArray []WebhookReceiverInput

func (WebhookReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return i.ToWebhookReceiverArrayOutputWithContext(context.Background())
}

func (i WebhookReceiverArray) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookReceiverArrayOutput)
}

// A webhook receiver.
type WebhookReceiverOutput struct{ *pulumi.OutputState }

func (WebhookReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutput() WebhookReceiverOutput {
	return o
}

func (o WebhookReceiverOutput) ToWebhookReceiverOutputWithContext(ctx context.Context) WebhookReceiverOutput {
	return o
}

// Indicates the identifier uri for aad auth.
func (o WebhookReceiverOutput) IdentifierUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *string { return v.IdentifierUri }).(pulumi.StringPtrOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o WebhookReceiverOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the webhook receiver. Names must be unique across all receivers within a tenant action group.
func (o WebhookReceiverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the webhook app object Id for aad auth.
func (o WebhookReceiverOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiver) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Indicates the tenant id for aad auth.
func (o WebhookReceiverOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not use AAD authentication.
func (o WebhookReceiverOutput) UseAadAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *bool { return v.UseAadAuth }).(pulumi.BoolPtrOutput)
}

// Indicates whether to use common alert schema.
func (o WebhookReceiverOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookReceiver) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type WebhookReceiverArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiver)(nil)).Elem()
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutput() WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) ToWebhookReceiverArrayOutputWithContext(ctx context.Context) WebhookReceiverArrayOutput {
	return o
}

func (o WebhookReceiverArrayOutput) Index(i pulumi.IntInput) WebhookReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiver {
		return vs[0].([]WebhookReceiver)[vs[1].(int)]
	}).(WebhookReceiverOutput)
}

// A webhook receiver.
type WebhookReceiverResponse struct {
	// Indicates the identifier uri for aad auth.
	IdentifierUri *string `pulumi:"identifierUri"`
	// The principal id of the managed identity. The value can be "None", "SystemAssigned"
	ManagedIdentity *string `pulumi:"managedIdentity"`
	// The name of the webhook receiver. Names must be unique across all receivers within a tenant action group.
	Name string `pulumi:"name"`
	// Indicates the webhook app object Id for aad auth.
	ObjectId *string `pulumi:"objectId"`
	// The URI where webhooks should be sent.
	ServiceUri string `pulumi:"serviceUri"`
	// Indicates the tenant id for aad auth.
	TenantId *string `pulumi:"tenantId"`
	// Indicates whether or not use AAD authentication.
	UseAadAuth *bool `pulumi:"useAadAuth"`
	// Indicates whether to use common alert schema.
	UseCommonAlertSchema *bool `pulumi:"useCommonAlertSchema"`
}

// Defaults sets the appropriate defaults for WebhookReceiverResponse
func (val *WebhookReceiverResponse) Defaults() *WebhookReceiverResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.UseAadAuth == nil {
		useAadAuth_ := false
		tmp.UseAadAuth = &useAadAuth_
	}
	if tmp.UseCommonAlertSchema == nil {
		useCommonAlertSchema_ := false
		tmp.UseCommonAlertSchema = &useCommonAlertSchema_
	}
	return &tmp
}

// A webhook receiver.
type WebhookReceiverResponseOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutput() WebhookReceiverResponseOutput {
	return o
}

func (o WebhookReceiverResponseOutput) ToWebhookReceiverResponseOutputWithContext(ctx context.Context) WebhookReceiverResponseOutput {
	return o
}

// Indicates the identifier uri for aad auth.
func (o WebhookReceiverResponseOutput) IdentifierUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.IdentifierUri }).(pulumi.StringPtrOutput)
}

// The principal id of the managed identity. The value can be "None", "SystemAssigned"
func (o WebhookReceiverResponseOutput) ManagedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.ManagedIdentity }).(pulumi.StringPtrOutput)
}

// The name of the webhook receiver. Names must be unique across all receivers within a tenant action group.
func (o WebhookReceiverResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the webhook app object Id for aad auth.
func (o WebhookReceiverResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// The URI where webhooks should be sent.
func (o WebhookReceiverResponseOutput) ServiceUri() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) string { return v.ServiceUri }).(pulumi.StringOutput)
}

// Indicates the tenant id for aad auth.
func (o WebhookReceiverResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not use AAD authentication.
func (o WebhookReceiverResponseOutput) UseAadAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *bool { return v.UseAadAuth }).(pulumi.BoolPtrOutput)
}

// Indicates whether to use common alert schema.
func (o WebhookReceiverResponseOutput) UseCommonAlertSchema() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WebhookReceiverResponse) *bool { return v.UseCommonAlertSchema }).(pulumi.BoolPtrOutput)
}

type WebhookReceiverResponseArrayOutput struct{ *pulumi.OutputState }

func (WebhookReceiverResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookReceiverResponse)(nil)).Elem()
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutput() WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) ToWebhookReceiverResponseArrayOutputWithContext(ctx context.Context) WebhookReceiverResponseArrayOutput {
	return o
}

func (o WebhookReceiverResponseArrayOutput) Index(i pulumi.IntInput) WebhookReceiverResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookReceiverResponse {
		return vs[0].([]WebhookReceiverResponse)[vs[1].(int)]
	}).(WebhookReceiverResponseOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteria struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

// WebtestLocationAvailabilityCriteriaInput is an input type that accepts WebtestLocationAvailabilityCriteriaArgs and WebtestLocationAvailabilityCriteriaOutput values.
// You can construct a concrete instance of `WebtestLocationAvailabilityCriteriaInput` via:
//
//	WebtestLocationAvailabilityCriteriaArgs{...}
type WebtestLocationAvailabilityCriteriaInput interface {
	pulumi.Input

	ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput
	ToWebtestLocationAvailabilityCriteriaOutputWithContext(context.Context) WebtestLocationAvailabilityCriteriaOutput
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaArgs struct {
	// The Application Insights resource Id.
	ComponentId pulumi.StringInput `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount pulumi.Float64Input `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
	OdataType pulumi.StringInput `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId pulumi.StringInput `pulumi:"webTestId"`
}

func (WebtestLocationAvailabilityCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteria)(nil)).Elem()
}

func (i WebtestLocationAvailabilityCriteriaArgs) ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput {
	return i.ToWebtestLocationAvailabilityCriteriaOutputWithContext(context.Background())
}

func (i WebtestLocationAvailabilityCriteriaArgs) ToWebtestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebtestLocationAvailabilityCriteriaOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaOutput struct{ *pulumi.OutputState }

func (WebtestLocationAvailabilityCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteria)(nil)).Elem()
}

func (o WebtestLocationAvailabilityCriteriaOutput) ToWebtestLocationAvailabilityCriteriaOutput() WebtestLocationAvailabilityCriteriaOutput {
	return o
}

func (o WebtestLocationAvailabilityCriteriaOutput) ToWebtestLocationAvailabilityCriteriaOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaOutput {
	return o
}

// The Application Insights resource Id.
func (o WebtestLocationAvailabilityCriteriaOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.ComponentId }).(pulumi.StringOutput)
}

// The number of failed locations.
func (o WebtestLocationAvailabilityCriteriaOutput) FailedLocationCount() pulumi.Float64Output {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) float64 { return v.FailedLocationCount }).(pulumi.Float64Output)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
func (o WebtestLocationAvailabilityCriteriaOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Application Insights web test Id.
func (o WebtestLocationAvailabilityCriteriaOutput) WebTestId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteria) string { return v.WebTestId }).(pulumi.StringOutput)
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponse struct {
	// The Application Insights resource Id.
	ComponentId string `pulumi:"componentId"`
	// The number of failed locations.
	FailedLocationCount float64 `pulumi:"failedLocationCount"`
	// specifies the type of the alert criteria.
	// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
	OdataType string `pulumi:"odataType"`
	// The Application Insights web test Id.
	WebTestId string `pulumi:"webTestId"`
}

// Specifies the metric alert rule criteria for a web test resource.
type WebtestLocationAvailabilityCriteriaResponseOutput struct{ *pulumi.OutputState }

func (WebtestLocationAvailabilityCriteriaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebtestLocationAvailabilityCriteriaResponse)(nil)).Elem()
}

func (o WebtestLocationAvailabilityCriteriaResponseOutput) ToWebtestLocationAvailabilityCriteriaResponseOutput() WebtestLocationAvailabilityCriteriaResponseOutput {
	return o
}

func (o WebtestLocationAvailabilityCriteriaResponseOutput) ToWebtestLocationAvailabilityCriteriaResponseOutputWithContext(ctx context.Context) WebtestLocationAvailabilityCriteriaResponseOutput {
	return o
}

// The Application Insights resource Id.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.ComponentId }).(pulumi.StringOutput)
}

// The number of failed locations.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) FailedLocationCount() pulumi.Float64Output {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) float64 { return v.FailedLocationCount }).(pulumi.Float64Output)
}

// specifies the type of the alert criteria.
// Expected value is 'Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria'.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) OdataType() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.OdataType }).(pulumi.StringOutput)
}

// The Application Insights web test Id.
func (o WebtestLocationAvailabilityCriteriaResponseOutput) WebTestId() pulumi.StringOutput {
	return o.ApplyT(func(v WebtestLocationAvailabilityCriteriaResponse) string { return v.WebTestId }).(pulumi.StringOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// WindowsEventLogDataSourceInput is an input type that accepts WindowsEventLogDataSourceArgs and WindowsEventLogDataSourceOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceInput` via:
//
//	WindowsEventLogDataSourceArgs{...}
type WindowsEventLogDataSourceInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput
	ToWindowsEventLogDataSourceOutputWithContext(context.Context) WindowsEventLogDataSourceOutput
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams pulumi.StringArrayInput `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries pulumi.StringArrayInput `pulumi:"xPathQueries"`
}

func (WindowsEventLogDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return i.ToWindowsEventLogDataSourceOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArgs) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceOutput)
}

// WindowsEventLogDataSourceArrayInput is an input type that accepts WindowsEventLogDataSourceArray and WindowsEventLogDataSourceArrayOutput values.
// You can construct a concrete instance of `WindowsEventLogDataSourceArrayInput` via:
//
//	WindowsEventLogDataSourceArray{ WindowsEventLogDataSourceArgs{...} }
type WindowsEventLogDataSourceArrayInput interface {
	pulumi.Input

	ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput
	ToWindowsEventLogDataSourceArrayOutputWithContext(context.Context) WindowsEventLogDataSourceArrayOutput
}

type WindowsEventLogDataSourceArray []WindowsEventLogDataSourceInput

func (WindowsEventLogDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return i.ToWindowsEventLogDataSourceArrayOutputWithContext(context.Background())
}

func (i WindowsEventLogDataSourceArray) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsEventLogDataSourceArrayOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutput() WindowsEventLogDataSourceOutput {
	return o
}

func (o WindowsEventLogDataSourceOutput) ToWindowsEventLogDataSourceOutputWithContext(ctx context.Context) WindowsEventLogDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSource) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSource)(nil)).Elem()
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutput() WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) ToWindowsEventLogDataSourceArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSource {
		return vs[0].([]WindowsEventLogDataSource)[vs[1].(int)]
	}).(WindowsEventLogDataSourceOutput)
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// List of streams that this data source will be sent to.
	// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
	Streams []string `pulumi:"streams"`
	// A list of Windows Event Log queries in XPATH format.
	XPathQueries []string `pulumi:"xPathQueries"`
}

// Definition of which Windows Event Log events will be collected and how they will be collected.
// Only collected from Windows machines.
type WindowsEventLogDataSourceResponseOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutput() WindowsEventLogDataSourceResponseOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseOutput) ToWindowsEventLogDataSourceResponseOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsEventLogDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// List of streams that this data source will be sent to.
// A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
func (o WindowsEventLogDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

// A list of Windows Event Log queries in XPATH format.
func (o WindowsEventLogDataSourceResponseOutput) XPathQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsEventLogDataSourceResponse) []string { return v.XPathQueries }).(pulumi.StringArrayOutput)
}

type WindowsEventLogDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsEventLogDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsEventLogDataSourceResponse)(nil)).Elem()
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutput() WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) ToWindowsEventLogDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsEventLogDataSourceResponseArrayOutput {
	return o
}

func (o WindowsEventLogDataSourceResponseArrayOutput) Index(i pulumi.IntInput) WindowsEventLogDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsEventLogDataSourceResponse {
		return vs[0].([]WindowsEventLogDataSourceResponse)[vs[1].(int)]
	}).(WindowsEventLogDataSourceResponseOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSource struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// Firewall logs streams
	Streams []string `pulumi:"streams"`
}

// WindowsFirewallLogsDataSourceInput is an input type that accepts WindowsFirewallLogsDataSourceArgs and WindowsFirewallLogsDataSourceOutput values.
// You can construct a concrete instance of `WindowsFirewallLogsDataSourceInput` via:
//
//	WindowsFirewallLogsDataSourceArgs{...}
type WindowsFirewallLogsDataSourceInput interface {
	pulumi.Input

	ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput
	ToWindowsFirewallLogsDataSourceOutputWithContext(context.Context) WindowsFirewallLogsDataSourceOutput
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceArgs struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Firewall logs streams
	Streams pulumi.StringArrayInput `pulumi:"streams"`
}

func (WindowsFirewallLogsDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (i WindowsFirewallLogsDataSourceArgs) ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput {
	return i.ToWindowsFirewallLogsDataSourceOutputWithContext(context.Background())
}

func (i WindowsFirewallLogsDataSourceArgs) ToWindowsFirewallLogsDataSourceOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsFirewallLogsDataSourceOutput)
}

// WindowsFirewallLogsDataSourceArrayInput is an input type that accepts WindowsFirewallLogsDataSourceArray and WindowsFirewallLogsDataSourceArrayOutput values.
// You can construct a concrete instance of `WindowsFirewallLogsDataSourceArrayInput` via:
//
//	WindowsFirewallLogsDataSourceArray{ WindowsFirewallLogsDataSourceArgs{...} }
type WindowsFirewallLogsDataSourceArrayInput interface {
	pulumi.Input

	ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput
	ToWindowsFirewallLogsDataSourceArrayOutputWithContext(context.Context) WindowsFirewallLogsDataSourceArrayOutput
}

type WindowsFirewallLogsDataSourceArray []WindowsFirewallLogsDataSourceInput

func (WindowsFirewallLogsDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (i WindowsFirewallLogsDataSourceArray) ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput {
	return i.ToWindowsFirewallLogsDataSourceArrayOutputWithContext(context.Background())
}

func (i WindowsFirewallLogsDataSourceArray) ToWindowsFirewallLogsDataSourceArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WindowsFirewallLogsDataSourceArrayOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceOutput) ToWindowsFirewallLogsDataSourceOutput() WindowsFirewallLogsDataSourceOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceOutput) ToWindowsFirewallLogsDataSourceOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsFirewallLogsDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Firewall logs streams
func (o WindowsFirewallLogsDataSourceOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSource) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type WindowsFirewallLogsDataSourceArrayOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSource)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceArrayOutput) ToWindowsFirewallLogsDataSourceArrayOutput() WindowsFirewallLogsDataSourceArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceArrayOutput) ToWindowsFirewallLogsDataSourceArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceArrayOutput) Index(i pulumi.IntInput) WindowsFirewallLogsDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsFirewallLogsDataSource {
		return vs[0].([]WindowsFirewallLogsDataSource)[vs[1].(int)]
	}).(WindowsFirewallLogsDataSourceOutput)
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceResponse struct {
	// A friendly name for the data source.
	// This name should be unique across all data sources (regardless of type) within the data collection rule.
	Name *string `pulumi:"name"`
	// Firewall logs streams
	Streams []string `pulumi:"streams"`
}

// Enables Firewall logs to be collected by this data collection rule.
type WindowsFirewallLogsDataSourceResponseOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WindowsFirewallLogsDataSourceResponse)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceResponseOutput) ToWindowsFirewallLogsDataSourceResponseOutput() WindowsFirewallLogsDataSourceResponseOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseOutput) ToWindowsFirewallLogsDataSourceResponseOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceResponseOutput {
	return o
}

// A friendly name for the data source.
// This name should be unique across all data sources (regardless of type) within the data collection rule.
func (o WindowsFirewallLogsDataSourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Firewall logs streams
func (o WindowsFirewallLogsDataSourceResponseOutput) Streams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WindowsFirewallLogsDataSourceResponse) []string { return v.Streams }).(pulumi.StringArrayOutput)
}

type WindowsFirewallLogsDataSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (WindowsFirewallLogsDataSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WindowsFirewallLogsDataSourceResponse)(nil)).Elem()
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) ToWindowsFirewallLogsDataSourceResponseArrayOutput() WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) ToWindowsFirewallLogsDataSourceResponseArrayOutputWithContext(ctx context.Context) WindowsFirewallLogsDataSourceResponseArrayOutput {
	return o
}

func (o WindowsFirewallLogsDataSourceResponseArrayOutput) Index(i pulumi.IntInput) WindowsFirewallLogsDataSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WindowsFirewallLogsDataSourceResponse {
		return vs[0].([]WindowsFirewallLogsDataSourceResponse)[vs[1].(int)]
	}).(WindowsFirewallLogsDataSourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AccessModeSettingsOutput{})
	pulumi.RegisterOutputType(AccessModeSettingsExclusionOutput{})
	pulumi.RegisterOutputType(AccessModeSettingsExclusionArrayOutput{})
	pulumi.RegisterOutputType(AccessModeSettingsExclusionResponseOutput{})
	pulumi.RegisterOutputType(AccessModeSettingsExclusionResponseArrayOutput{})
	pulumi.RegisterOutputType(AccessModeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupTypeOutput{})
	pulumi.RegisterOutputType(ActionGroupTypeArrayOutput{})
	pulumi.RegisterOutputType(ActionGroupResponseOutput{})
	pulumi.RegisterOutputType(ActionGroupResponseArrayOutput{})
	pulumi.RegisterOutputType(ActionListOutput{})
	pulumi.RegisterOutputType(ActionListResponseOutput{})
	pulumi.RegisterOutputType(ActionsOutput{})
	pulumi.RegisterOutputType(ActionsPtrOutput{})
	pulumi.RegisterOutputType(ActionsResponseOutput{})
	pulumi.RegisterOutputType(ActionsResponsePtrOutput{})
	pulumi.RegisterOutputType(AlertConfigurationOutput{})
	pulumi.RegisterOutputType(AlertConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AlertConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AlertConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AlertRuleAllOfConditionOutput{})
	pulumi.RegisterOutputType(AlertRuleAllOfConditionResponseOutput{})
	pulumi.RegisterOutputType(AlertRuleAnyOfOrLeafConditionOutput{})
	pulumi.RegisterOutputType(AlertRuleAnyOfOrLeafConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertRuleAnyOfOrLeafConditionResponseOutput{})
	pulumi.RegisterOutputType(AlertRuleAnyOfOrLeafConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(AlertRuleLeafConditionOutput{})
	pulumi.RegisterOutputType(AlertRuleLeafConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertRuleLeafConditionResponseOutput{})
	pulumi.RegisterOutputType(AlertRuleLeafConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsTopologyDiscoveryRulePropertiesOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsTopologyDiscoveryRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ApplicationInsightsTopologyDiscoveryRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverArrayOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseOutput{})
	pulumi.RegisterOutputType(ArmRoleReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverArrayOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseOutput{})
	pulumi.RegisterOutputType(AutomationRunbookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleNotificationOutput{})
	pulumi.RegisterOutputType(AutoscaleNotificationArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleNotificationResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleNotificationResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponseOutput{})
	pulumi.RegisterOutputType(AutoscaleProfileResponseArrayOutput{})
	pulumi.RegisterOutputType(AutoscaleSettingResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureAppPushReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverArrayOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseOutput{})
	pulumi.RegisterOutputType(AzureFunctionReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigPtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigResponseOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsApiConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterPtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterResponseOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceLogsExporterResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceResponseDefaultIngestionSettingsOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceResponseMetricsOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceSignalGroupOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceSignalGroupPtrOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceSignalGroupResponseOutput{})
	pulumi.RegisterOutputType(AzureMonitorWorkspaceSignalGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerCommonTypesExtendedLocationOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerCommonTypesExtendedLocationPtrOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerCommonTypesExtendedLocationResponseOutput{})
	pulumi.RegisterOutputType(AzureResourceManagerCommonTypesExtendedLocationResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureResourceSignalGroupOutput{})
	pulumi.RegisterOutputType(AzureResourceSignalGroupPtrOutput{})
	pulumi.RegisterOutputType(AzureResourceSignalGroupResponseOutput{})
	pulumi.RegisterOutputType(AzureResourceSignalGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchProcessorOutput{})
	pulumi.RegisterOutputType(BatchProcessorPtrOutput{})
	pulumi.RegisterOutputType(BatchProcessorResponseOutput{})
	pulumi.RegisterOutputType(BatchProcessorResponsePtrOutput{})
	pulumi.RegisterOutputType(CacheConfigurationOutput{})
	pulumi.RegisterOutputType(CacheConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CacheConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionArrayOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ColumnDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ConcurrencyConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ConditionOutput{})
	pulumi.RegisterOutputType(ConditionArrayOutput{})
	pulumi.RegisterOutputType(ConditionFailingPeriodsOutput{})
	pulumi.RegisterOutputType(ConditionFailingPeriodsPtrOutput{})
	pulumi.RegisterOutputType(ConditionResponseOutput{})
	pulumi.RegisterOutputType(ConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ConditionResponseFailingPeriodsOutput{})
	pulumi.RegisterOutputType(ConditionResponseFailingPeriodsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointNetworkAclsOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseConfigurationAccessOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseConfigurationAccessPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseFailoverConfigurationOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseLogsIngestionOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseLogsIngestionPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetricsIngestionOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseMetricsIngestionPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseNetworkAclsOutput{})
	pulumi.RegisterOutputType(DataCollectionEndpointResponseNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAssociationProxyOnlyResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleAssociationResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseIdentityOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseIdentityPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResourceResponseSystemDataOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDataSourcesPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseDestinationsPtrOutput{})
	pulumi.RegisterOutputType(DataCollectionRuleResponseMetadataOutput{})
	pulumi.RegisterOutputType(DataFlowOutput{})
	pulumi.RegisterOutputType(DataFlowArrayOutput{})
	pulumi.RegisterOutputType(DataFlowResponseOutput{})
	pulumi.RegisterOutputType(DataFlowResponseArrayOutput{})
	pulumi.RegisterOutputType(DataImportSourcesEventHubOutput{})
	pulumi.RegisterOutputType(DataImportSourcesEventHubPtrOutput{})
	pulumi.RegisterOutputType(DataImportSourcesResponseEventHubOutput{})
	pulumi.RegisterOutputType(DataImportSourcesResponseEventHubPtrOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecDataImportsOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecDataImportsPtrOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecResponseDataImportsOutput{})
	pulumi.RegisterOutputType(DataSourcesSpecResponseDataImportsPtrOutput{})
	pulumi.RegisterOutputType(DependenciesSignalGroupOutput{})
	pulumi.RegisterOutputType(DependenciesSignalGroupPtrOutput{})
	pulumi.RegisterOutputType(DependenciesSignalGroupResponseOutput{})
	pulumi.RegisterOutputType(DependenciesSignalGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsOutput{})
	pulumi.RegisterOutputType(DestinationsSpecResponseAzureMonitorMetricsPtrOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingsCategoryResourceResponseOutput{})
	pulumi.RegisterOutputType(DiagnosticSettingsCategoryResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(DimensionOutput{})
	pulumi.RegisterOutputType(DimensionArrayOutput{})
	pulumi.RegisterOutputType(DimensionResponseOutput{})
	pulumi.RegisterOutputType(DimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(DiscoveryErrorResponseOutput{})
	pulumi.RegisterOutputType(DynamicDetectionRuleOutput{})
	pulumi.RegisterOutputType(DynamicDetectionRulePtrOutput{})
	pulumi.RegisterOutputType(DynamicDetectionRuleResponseOutput{})
	pulumi.RegisterOutputType(DynamicDetectionRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(DynamicMetricCriteriaOutput{})
	pulumi.RegisterOutputType(DynamicMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(DynamicThresholdFailingPeriodsOutput{})
	pulumi.RegisterOutputType(DynamicThresholdFailingPeriodsResponseOutput{})
	pulumi.RegisterOutputType(EmailNotificationOutput{})
	pulumi.RegisterOutputType(EmailNotificationPtrOutput{})
	pulumi.RegisterOutputType(EmailNotificationResponseOutput{})
	pulumi.RegisterOutputType(EmailNotificationResponsePtrOutput{})
	pulumi.RegisterOutputType(EmailReceiverOutput{})
	pulumi.RegisterOutputType(EmailReceiverArrayOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseOutput{})
	pulumi.RegisterOutputType(EmailReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(EntityAlertsOutput{})
	pulumi.RegisterOutputType(EntityAlertsPtrOutput{})
	pulumi.RegisterOutputType(EntityAlertsResponseOutput{})
	pulumi.RegisterOutputType(EntityAlertsResponsePtrOutput{})
	pulumi.RegisterOutputType(EntityCoordinatesOutput{})
	pulumi.RegisterOutputType(EntityCoordinatesPtrOutput{})
	pulumi.RegisterOutputType(EntityCoordinatesResponseOutput{})
	pulumi.RegisterOutputType(EntityCoordinatesResponsePtrOutput{})
	pulumi.RegisterOutputType(EntityPropertiesOutput{})
	pulumi.RegisterOutputType(EntityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EvaluationRuleOutput{})
	pulumi.RegisterOutputType(EvaluationRulePtrOutput{})
	pulumi.RegisterOutputType(EvaluationRuleResponseOutput{})
	pulumi.RegisterOutputType(EventHubDestinationOutput{})
	pulumi.RegisterOutputType(EventHubDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventHubDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventHubDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationArrayOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationResponseOutput{})
	pulumi.RegisterOutputType(EventHubDirectDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(EventHubReceiverOutput{})
	pulumi.RegisterOutputType(EventHubReceiverArrayOutput{})
	pulumi.RegisterOutputType(EventHubReceiverResponseOutput{})
	pulumi.RegisterOutputType(EventHubReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(ExporterOutput{})
	pulumi.RegisterOutputType(ExporterArrayOutput{})
	pulumi.RegisterOutputType(ExporterResponseOutput{})
	pulumi.RegisterOutputType(ExporterResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceArrayOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseOutput{})
	pulumi.RegisterOutputType(ExtensionDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(HealthModelPropertiesOutput{})
	pulumi.RegisterOutputType(HealthModelPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HealthModelPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IconDefinitionOutput{})
	pulumi.RegisterOutputType(IconDefinitionPtrOutput{})
	pulumi.RegisterOutputType(IconDefinitionResponseOutput{})
	pulumi.RegisterOutputType(IconDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceArrayOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceResponseOutput{})
	pulumi.RegisterOutputType(IisLogsDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(IncidentReceiverOutput{})
	pulumi.RegisterOutputType(IncidentReceiverArrayOutput{})
	pulumi.RegisterOutputType(IncidentReceiverResponseOutput{})
	pulumi.RegisterOutputType(IncidentReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(IncidentServiceConnectionOutput{})
	pulumi.RegisterOutputType(IncidentServiceConnectionResponseOutput{})
	pulumi.RegisterOutputType(InvestigationExecutionResponseOutput{})
	pulumi.RegisterOutputType(InvestigationMetadataResponseOutput{})
	pulumi.RegisterOutputType(InvestigationMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(InvestigationScopeResponseOutput{})
	pulumi.RegisterOutputType(InvestigationScopeResponseArrayOutput{})
	pulumi.RegisterOutputType(IssuePropertiesOutput{})
	pulumi.RegisterOutputType(IssuePropertiesPtrOutput{})
	pulumi.RegisterOutputType(IssuePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverOutput{})
	pulumi.RegisterOutputType(ItsmReceiverArrayOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseOutput{})
	pulumi.RegisterOutputType(ItsmReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(JsonArrayMapperOutput{})
	pulumi.RegisterOutputType(JsonArrayMapperPtrOutput{})
	pulumi.RegisterOutputType(JsonArrayMapperResponseOutput{})
	pulumi.RegisterOutputType(JsonArrayMapperResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonMapperDestinationFieldOutput{})
	pulumi.RegisterOutputType(JsonMapperDestinationFieldPtrOutput{})
	pulumi.RegisterOutputType(JsonMapperDestinationFieldResponseOutput{})
	pulumi.RegisterOutputType(JsonMapperDestinationFieldResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonMapperSourceFieldOutput{})
	pulumi.RegisterOutputType(JsonMapperSourceFieldPtrOutput{})
	pulumi.RegisterOutputType(JsonMapperSourceFieldResponseOutput{})
	pulumi.RegisterOutputType(JsonMapperSourceFieldResponsePtrOutput{})
	pulumi.RegisterOutputType(LocationSpecResponseOutput{})
	pulumi.RegisterOutputType(LocationSpecResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsQuerySignalDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(LogAnalyticsQuerySignalDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsQuerySignalDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsSignalGroupOutput{})
	pulumi.RegisterOutputType(LogAnalyticsSignalGroupPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsSignalGroupResponseOutput{})
	pulumi.RegisterOutputType(LogAnalyticsSignalGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(LogFileSettingsResponseTextOutput{})
	pulumi.RegisterOutputType(LogFileSettingsResponseTextPtrOutput{})
	pulumi.RegisterOutputType(LogFileSettingsTextOutput{})
	pulumi.RegisterOutputType(LogFileSettingsTextPtrOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceArrayOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseSettingsOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceResponseSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceSettingsOutput{})
	pulumi.RegisterOutputType(LogFilesDataSourceSettingsPtrOutput{})
	pulumi.RegisterOutputType(LogSettingsOutput{})
	pulumi.RegisterOutputType(LogSettingsArrayOutput{})
	pulumi.RegisterOutputType(LogSettingsResponseOutput{})
	pulumi.RegisterOutputType(LogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverArrayOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseOutput{})
	pulumi.RegisterOutputType(LogicAppReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationSettingPropertiesOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationSettingPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthenticationSettingPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsArrayOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagementGroupLogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionOutput{})
	pulumi.RegisterOutputType(MetricAlertActionArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertActionResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricAlertMultipleResourceMultipleMetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertMultipleResourceMultipleMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricAlertSingleResourceMultipleMetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricAlertSingleResourceMultipleMetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricCriteriaOutput{})
	pulumi.RegisterOutputType(MetricCriteriaArrayOutput{})
	pulumi.RegisterOutputType(MetricCriteriaResponseOutput{})
	pulumi.RegisterOutputType(MetricCriteriaResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricDimensionOutput{})
	pulumi.RegisterOutputType(MetricDimensionArrayOutput{})
	pulumi.RegisterOutputType(MetricDimensionResponseOutput{})
	pulumi.RegisterOutputType(MetricDimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricSettingsOutput{})
	pulumi.RegisterOutputType(MetricSettingsArrayOutput{})
	pulumi.RegisterOutputType(MetricSettingsResponseOutput{})
	pulumi.RegisterOutputType(MetricSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(MetricTriggerOutput{})
	pulumi.RegisterOutputType(MetricTriggerResponseOutput{})
	pulumi.RegisterOutputType(ModelDiscoverySettingsOutput{})
	pulumi.RegisterOutputType(ModelDiscoverySettingsPtrOutput{})
	pulumi.RegisterOutputType(ModelDiscoverySettingsResponseOutput{})
	pulumi.RegisterOutputType(ModelDiscoverySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationArrayOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationResponseOutput{})
	pulumi.RegisterOutputType(MonitoringAccountDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationArrayOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(NetworkingConfigurationResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteOutput{})
	pulumi.RegisterOutputType(NetworkingRouteArrayOutput{})
	pulumi.RegisterOutputType(NetworkingRouteResponseOutput{})
	pulumi.RegisterOutputType(NetworkingRouteResponseArrayOutput{})
	pulumi.RegisterOutputType(OriginResponseOutput{})
	pulumi.RegisterOutputType(OtlpReceiverOutput{})
	pulumi.RegisterOutputType(OtlpReceiverPtrOutput{})
	pulumi.RegisterOutputType(OtlpReceiverResponseOutput{})
	pulumi.RegisterOutputType(OtlpReceiverResponsePtrOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PerfCounterDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsPtrOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsResponseOutput{})
	pulumi.RegisterOutputType(PersistenceConfigurationsResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineGroupPropertiesOutput{})
	pulumi.RegisterOutputType(PipelineGroupPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PipelineGroupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PipelineResponseOutput{})
	pulumi.RegisterOutputType(PipelineResponseArrayOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PlatformTelemetryDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PredictiveAutoscalePolicyOutput{})
	pulumi.RegisterOutputType(PredictiveAutoscalePolicyPtrOutput{})
	pulumi.RegisterOutputType(PredictiveAutoscalePolicyResponseOutput{})
	pulumi.RegisterOutputType(PredictiveAutoscalePolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkScopedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ProcessorOutput{})
	pulumi.RegisterOutputType(ProcessorArrayOutput{})
	pulumi.RegisterOutputType(ProcessorResponseOutput{})
	pulumi.RegisterOutputType(ProcessorResponseArrayOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceArrayOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceResponseOutput{})
	pulumi.RegisterOutputType(PrometheusForwarderDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(PrometheusMetricsSignalDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(PrometheusMetricsSignalDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(PrometheusMetricsSignalDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ReceiverOutput{})
	pulumi.RegisterOutputType(ReceiverArrayOutput{})
	pulumi.RegisterOutputType(ReceiverResponseOutput{})
	pulumi.RegisterOutputType(ReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
	pulumi.RegisterOutputType(RecordMapArrayOutput{})
	pulumi.RegisterOutputType(RecordMapResponseOutput{})
	pulumi.RegisterOutputType(RecordMapResponseArrayOutput{})
	pulumi.RegisterOutputType(RecurrenceOutput{})
	pulumi.RegisterOutputType(RecurrencePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrentScheduleOutput{})
	pulumi.RegisterOutputType(RecurrentSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrentScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrentScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RelatedAlertResponseOutput{})
	pulumi.RegisterOutputType(RelatedAlertResponseArrayOutput{})
	pulumi.RegisterOutputType(RelatedResourceResponseOutput{})
	pulumi.RegisterOutputType(RelatedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(RelationshipPropertiesOutput{})
	pulumi.RegisterOutputType(RelationshipPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RelationshipPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ResourceGraphQueryDiscoveryRulePropertiesOutput{})
	pulumi.RegisterOutputType(ResourceGraphQueryDiscoveryRulePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ResourceGraphQueryDiscoveryRulePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
	pulumi.RegisterOutputType(ResourceMapArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapResponseOutput{})
	pulumi.RegisterOutputType(ResourceMapResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceMetricSignalDefinitionPropertiesOutput{})
	pulumi.RegisterOutputType(ResourceMetricSignalDefinitionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(ResourceMetricSignalDefinitionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyOutput{})
	pulumi.RegisterOutputType(RetentionPolicyPtrOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponseOutput{})
	pulumi.RegisterOutputType(RetentionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(RuleResolveConfigurationOutput{})
	pulumi.RegisterOutputType(RuleResolveConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RuleResolveConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RuleResolveConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RunParametersResponseOutput{})
	pulumi.RegisterOutputType(ScaleActionOutput{})
	pulumi.RegisterOutputType(ScaleActionResponseOutput{})
	pulumi.RegisterOutputType(ScaleCapacityOutput{})
	pulumi.RegisterOutputType(ScaleCapacityResponseOutput{})
	pulumi.RegisterOutputType(ScaleRuleOutput{})
	pulumi.RegisterOutputType(ScaleRuleArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleMetricDimensionOutput{})
	pulumi.RegisterOutputType(ScaleRuleMetricDimensionArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleMetricDimensionResponseOutput{})
	pulumi.RegisterOutputType(ScaleRuleMetricDimensionResponseArrayOutput{})
	pulumi.RegisterOutputType(ScaleRuleResponseOutput{})
	pulumi.RegisterOutputType(ScaleRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRuleCriteriaOutput{})
	pulumi.RegisterOutputType(ScheduledQueryRuleCriteriaResponseOutput{})
	pulumi.RegisterOutputType(SchemaMapOutput{})
	pulumi.RegisterOutputType(SchemaMapPtrOutput{})
	pulumi.RegisterOutputType(SchemaMapResponseOutput{})
	pulumi.RegisterOutputType(SchemaMapResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeMapOutput{})
	pulumi.RegisterOutputType(ScopeMapArrayOutput{})
	pulumi.RegisterOutputType(ScopeMapResponseOutput{})
	pulumi.RegisterOutputType(ScopeMapResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServicePtrOutput{})
	pulumi.RegisterOutputType(ServiceResponseOutput{})
	pulumi.RegisterOutputType(SignalAssignmentOutput{})
	pulumi.RegisterOutputType(SignalAssignmentArrayOutput{})
	pulumi.RegisterOutputType(SignalAssignmentResponseOutput{})
	pulumi.RegisterOutputType(SignalAssignmentResponseArrayOutput{})
	pulumi.RegisterOutputType(SignalGroupOutput{})
	pulumi.RegisterOutputType(SignalGroupPtrOutput{})
	pulumi.RegisterOutputType(SignalGroupResponseOutput{})
	pulumi.RegisterOutputType(SignalGroupResponsePtrOutput{})
	pulumi.RegisterOutputType(SmsReceiverOutput{})
	pulumi.RegisterOutputType(SmsReceiverArrayOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseOutput{})
	pulumi.RegisterOutputType(SmsReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationArrayOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageBlobDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationArrayOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationResponseOutput{})
	pulumi.RegisterOutputType(StorageTableDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(StreamDeclarationOutput{})
	pulumi.RegisterOutputType(StreamDeclarationMapOutput{})
	pulumi.RegisterOutputType(StreamDeclarationResponseOutput{})
	pulumi.RegisterOutputType(StreamDeclarationResponseMapOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseOutput{})
	pulumi.RegisterOutputType(SubscriptionLogSettingsResponseArrayOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(SyslogDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SyslogReceiverOutput{})
	pulumi.RegisterOutputType(SyslogReceiverPtrOutput{})
	pulumi.RegisterOutputType(SyslogReceiverResponseOutput{})
	pulumi.RegisterOutputType(SyslogReceiverResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponsePtrOutput{})
	pulumi.RegisterOutputType(TcpExporterOutput{})
	pulumi.RegisterOutputType(TcpExporterPtrOutput{})
	pulumi.RegisterOutputType(TcpExporterResponseOutput{})
	pulumi.RegisterOutputType(TcpExporterResponsePtrOutput{})
	pulumi.RegisterOutputType(ThresholdRuleOutput{})
	pulumi.RegisterOutputType(ThresholdRulePtrOutput{})
	pulumi.RegisterOutputType(ThresholdRuleResponseOutput{})
	pulumi.RegisterOutputType(ThresholdRuleResponsePtrOutput{})
	pulumi.RegisterOutputType(TimeWindowOutput{})
	pulumi.RegisterOutputType(TimeWindowPtrOutput{})
	pulumi.RegisterOutputType(TimeWindowResponseOutput{})
	pulumi.RegisterOutputType(TimeWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(UdpReceiverOutput{})
	pulumi.RegisterOutputType(UdpReceiverPtrOutput{})
	pulumi.RegisterOutputType(UdpReceiverResponseOutput{})
	pulumi.RegisterOutputType(UdpReceiverResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityPropertiesResponseMapOutput{})
	pulumi.RegisterOutputType(VoiceReceiverOutput{})
	pulumi.RegisterOutputType(VoiceReceiverArrayOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseOutput{})
	pulumi.RegisterOutputType(VoiceReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookNotificationOutput{})
	pulumi.RegisterOutputType(WebhookNotificationArrayOutput{})
	pulumi.RegisterOutputType(WebhookNotificationResponseOutput{})
	pulumi.RegisterOutputType(WebhookNotificationResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverOutput{})
	pulumi.RegisterOutputType(WebhookReceiverArrayOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseOutput{})
	pulumi.RegisterOutputType(WebhookReceiverResponseArrayOutput{})
	pulumi.RegisterOutputType(WebtestLocationAvailabilityCriteriaOutput{})
	pulumi.RegisterOutputType(WebtestLocationAvailabilityCriteriaResponseOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceArrayOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseOutput{})
	pulumi.RegisterOutputType(WindowsEventLogDataSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceArrayOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceResponseOutput{})
	pulumi.RegisterOutputType(WindowsFirewallLogsDataSourceResponseArrayOutput{})
}
