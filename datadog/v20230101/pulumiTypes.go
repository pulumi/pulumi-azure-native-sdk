// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

type DatadogApiKeyResponse struct {
	// The time of creation of the API key.
	Created *string `pulumi:"created"`
	// The user that created the API key.
	CreatedBy *string `pulumi:"createdBy"`
	// The value of the API key.
	Key string `pulumi:"key"`
	// The name of the API key.
	Name *string `pulumi:"name"`
}

type DatadogApiKeyResponseOutput struct{ *pulumi.OutputState }

func (DatadogApiKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogApiKeyResponse)(nil)).Elem()
}

func (o DatadogApiKeyResponseOutput) ToDatadogApiKeyResponseOutput() DatadogApiKeyResponseOutput {
	return o
}

func (o DatadogApiKeyResponseOutput) ToDatadogApiKeyResponseOutputWithContext(ctx context.Context) DatadogApiKeyResponseOutput {
	return o
}

func (o DatadogApiKeyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogApiKeyResponse] {
	return pulumix.Output[DatadogApiKeyResponse]{
		OutputState: o.OutputState,
	}
}

// The time of creation of the API key.
func (o DatadogApiKeyResponseOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogApiKeyResponse) *string { return v.Created }).(pulumi.StringPtrOutput)
}

// The user that created the API key.
func (o DatadogApiKeyResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogApiKeyResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The value of the API key.
func (o DatadogApiKeyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DatadogApiKeyResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The name of the API key.
func (o DatadogApiKeyResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogApiKeyResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatadogApiKeyResponseArrayOutput struct{ *pulumi.OutputState }

func (DatadogApiKeyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatadogApiKeyResponse)(nil)).Elem()
}

func (o DatadogApiKeyResponseArrayOutput) ToDatadogApiKeyResponseArrayOutput() DatadogApiKeyResponseArrayOutput {
	return o
}

func (o DatadogApiKeyResponseArrayOutput) ToDatadogApiKeyResponseArrayOutputWithContext(ctx context.Context) DatadogApiKeyResponseArrayOutput {
	return o
}

func (o DatadogApiKeyResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatadogApiKeyResponse] {
	return pulumix.Output[[]DatadogApiKeyResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogApiKeyResponseArrayOutput) Index(i pulumi.IntInput) DatadogApiKeyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatadogApiKeyResponse {
		return vs[0].([]DatadogApiKeyResponse)[vs[1].(int)]
	}).(DatadogApiKeyResponseOutput)
}

type DatadogHostMetadataResponse struct {
	// The agent version.
	AgentVersion  *string                       `pulumi:"agentVersion"`
	InstallMethod *DatadogInstallMethodResponse `pulumi:"installMethod"`
	LogsAgent     *DatadogLogsAgentResponse     `pulumi:"logsAgent"`
}

type DatadogHostMetadataResponseOutput struct{ *pulumi.OutputState }

func (DatadogHostMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogHostMetadataResponse)(nil)).Elem()
}

func (o DatadogHostMetadataResponseOutput) ToDatadogHostMetadataResponseOutput() DatadogHostMetadataResponseOutput {
	return o
}

func (o DatadogHostMetadataResponseOutput) ToDatadogHostMetadataResponseOutputWithContext(ctx context.Context) DatadogHostMetadataResponseOutput {
	return o
}

func (o DatadogHostMetadataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogHostMetadataResponse] {
	return pulumix.Output[DatadogHostMetadataResponse]{
		OutputState: o.OutputState,
	}
}

// The agent version.
func (o DatadogHostMetadataResponseOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogHostMetadataResponse) *string { return v.AgentVersion }).(pulumi.StringPtrOutput)
}

func (o DatadogHostMetadataResponseOutput) InstallMethod() DatadogInstallMethodResponsePtrOutput {
	return o.ApplyT(func(v DatadogHostMetadataResponse) *DatadogInstallMethodResponse { return v.InstallMethod }).(DatadogInstallMethodResponsePtrOutput)
}

func (o DatadogHostMetadataResponseOutput) LogsAgent() DatadogLogsAgentResponsePtrOutput {
	return o.ApplyT(func(v DatadogHostMetadataResponse) *DatadogLogsAgentResponse { return v.LogsAgent }).(DatadogLogsAgentResponsePtrOutput)
}

type DatadogHostMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (DatadogHostMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogHostMetadataResponse)(nil)).Elem()
}

func (o DatadogHostMetadataResponsePtrOutput) ToDatadogHostMetadataResponsePtrOutput() DatadogHostMetadataResponsePtrOutput {
	return o
}

func (o DatadogHostMetadataResponsePtrOutput) ToDatadogHostMetadataResponsePtrOutputWithContext(ctx context.Context) DatadogHostMetadataResponsePtrOutput {
	return o
}

func (o DatadogHostMetadataResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatadogHostMetadataResponse] {
	return pulumix.Output[*DatadogHostMetadataResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogHostMetadataResponsePtrOutput) Elem() DatadogHostMetadataResponseOutput {
	return o.ApplyT(func(v *DatadogHostMetadataResponse) DatadogHostMetadataResponse {
		if v != nil {
			return *v
		}
		var ret DatadogHostMetadataResponse
		return ret
	}).(DatadogHostMetadataResponseOutput)
}

// The agent version.
func (o DatadogHostMetadataResponsePtrOutput) AgentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogHostMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.AgentVersion
	}).(pulumi.StringPtrOutput)
}

func (o DatadogHostMetadataResponsePtrOutput) InstallMethod() DatadogInstallMethodResponsePtrOutput {
	return o.ApplyT(func(v *DatadogHostMetadataResponse) *DatadogInstallMethodResponse {
		if v == nil {
			return nil
		}
		return v.InstallMethod
	}).(DatadogInstallMethodResponsePtrOutput)
}

func (o DatadogHostMetadataResponsePtrOutput) LogsAgent() DatadogLogsAgentResponsePtrOutput {
	return o.ApplyT(func(v *DatadogHostMetadataResponse) *DatadogLogsAgentResponse {
		if v == nil {
			return nil
		}
		return v.LogsAgent
	}).(DatadogLogsAgentResponsePtrOutput)
}

type DatadogHostResponse struct {
	// The aliases for the host installed via the Datadog agent.
	Aliases []string `pulumi:"aliases"`
	// The Datadog integrations reporting metrics for the host.
	Apps []string                     `pulumi:"apps"`
	Meta *DatadogHostMetadataResponse `pulumi:"meta"`
	// The name of the host.
	Name *string `pulumi:"name"`
}

type DatadogHostResponseOutput struct{ *pulumi.OutputState }

func (DatadogHostResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogHostResponse)(nil)).Elem()
}

func (o DatadogHostResponseOutput) ToDatadogHostResponseOutput() DatadogHostResponseOutput {
	return o
}

func (o DatadogHostResponseOutput) ToDatadogHostResponseOutputWithContext(ctx context.Context) DatadogHostResponseOutput {
	return o
}

func (o DatadogHostResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogHostResponse] {
	return pulumix.Output[DatadogHostResponse]{
		OutputState: o.OutputState,
	}
}

// The aliases for the host installed via the Datadog agent.
func (o DatadogHostResponseOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatadogHostResponse) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// The Datadog integrations reporting metrics for the host.
func (o DatadogHostResponseOutput) Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatadogHostResponse) []string { return v.Apps }).(pulumi.StringArrayOutput)
}

func (o DatadogHostResponseOutput) Meta() DatadogHostMetadataResponsePtrOutput {
	return o.ApplyT(func(v DatadogHostResponse) *DatadogHostMetadataResponse { return v.Meta }).(DatadogHostMetadataResponsePtrOutput)
}

// The name of the host.
func (o DatadogHostResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogHostResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatadogHostResponseArrayOutput struct{ *pulumi.OutputState }

func (DatadogHostResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatadogHostResponse)(nil)).Elem()
}

func (o DatadogHostResponseArrayOutput) ToDatadogHostResponseArrayOutput() DatadogHostResponseArrayOutput {
	return o
}

func (o DatadogHostResponseArrayOutput) ToDatadogHostResponseArrayOutputWithContext(ctx context.Context) DatadogHostResponseArrayOutput {
	return o
}

func (o DatadogHostResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatadogHostResponse] {
	return pulumix.Output[[]DatadogHostResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogHostResponseArrayOutput) Index(i pulumi.IntInput) DatadogHostResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatadogHostResponse {
		return vs[0].([]DatadogHostResponse)[vs[1].(int)]
	}).(DatadogHostResponseOutput)
}

type DatadogInstallMethodResponse struct {
	// The installer version.
	InstallerVersion *string `pulumi:"installerVersion"`
	// The tool.
	Tool *string `pulumi:"tool"`
	// The tool version.
	ToolVersion *string `pulumi:"toolVersion"`
}

type DatadogInstallMethodResponseOutput struct{ *pulumi.OutputState }

func (DatadogInstallMethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogInstallMethodResponse)(nil)).Elem()
}

func (o DatadogInstallMethodResponseOutput) ToDatadogInstallMethodResponseOutput() DatadogInstallMethodResponseOutput {
	return o
}

func (o DatadogInstallMethodResponseOutput) ToDatadogInstallMethodResponseOutputWithContext(ctx context.Context) DatadogInstallMethodResponseOutput {
	return o
}

func (o DatadogInstallMethodResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogInstallMethodResponse] {
	return pulumix.Output[DatadogInstallMethodResponse]{
		OutputState: o.OutputState,
	}
}

// The installer version.
func (o DatadogInstallMethodResponseOutput) InstallerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogInstallMethodResponse) *string { return v.InstallerVersion }).(pulumi.StringPtrOutput)
}

// The tool.
func (o DatadogInstallMethodResponseOutput) Tool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogInstallMethodResponse) *string { return v.Tool }).(pulumi.StringPtrOutput)
}

// The tool version.
func (o DatadogInstallMethodResponseOutput) ToolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogInstallMethodResponse) *string { return v.ToolVersion }).(pulumi.StringPtrOutput)
}

type DatadogInstallMethodResponsePtrOutput struct{ *pulumi.OutputState }

func (DatadogInstallMethodResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogInstallMethodResponse)(nil)).Elem()
}

func (o DatadogInstallMethodResponsePtrOutput) ToDatadogInstallMethodResponsePtrOutput() DatadogInstallMethodResponsePtrOutput {
	return o
}

func (o DatadogInstallMethodResponsePtrOutput) ToDatadogInstallMethodResponsePtrOutputWithContext(ctx context.Context) DatadogInstallMethodResponsePtrOutput {
	return o
}

func (o DatadogInstallMethodResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatadogInstallMethodResponse] {
	return pulumix.Output[*DatadogInstallMethodResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogInstallMethodResponsePtrOutput) Elem() DatadogInstallMethodResponseOutput {
	return o.ApplyT(func(v *DatadogInstallMethodResponse) DatadogInstallMethodResponse {
		if v != nil {
			return *v
		}
		var ret DatadogInstallMethodResponse
		return ret
	}).(DatadogInstallMethodResponseOutput)
}

// The installer version.
func (o DatadogInstallMethodResponsePtrOutput) InstallerVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogInstallMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstallerVersion
	}).(pulumi.StringPtrOutput)
}

// The tool.
func (o DatadogInstallMethodResponsePtrOutput) Tool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogInstallMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tool
	}).(pulumi.StringPtrOutput)
}

// The tool version.
func (o DatadogInstallMethodResponsePtrOutput) ToolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogInstallMethodResponse) *string {
		if v == nil {
			return nil
		}
		return v.ToolVersion
	}).(pulumi.StringPtrOutput)
}

type DatadogLogsAgentResponse struct {
	// The transport.
	Transport *string `pulumi:"transport"`
}

type DatadogLogsAgentResponseOutput struct{ *pulumi.OutputState }

func (DatadogLogsAgentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogLogsAgentResponse)(nil)).Elem()
}

func (o DatadogLogsAgentResponseOutput) ToDatadogLogsAgentResponseOutput() DatadogLogsAgentResponseOutput {
	return o
}

func (o DatadogLogsAgentResponseOutput) ToDatadogLogsAgentResponseOutputWithContext(ctx context.Context) DatadogLogsAgentResponseOutput {
	return o
}

func (o DatadogLogsAgentResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogLogsAgentResponse] {
	return pulumix.Output[DatadogLogsAgentResponse]{
		OutputState: o.OutputState,
	}
}

// The transport.
func (o DatadogLogsAgentResponseOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogLogsAgentResponse) *string { return v.Transport }).(pulumi.StringPtrOutput)
}

type DatadogLogsAgentResponsePtrOutput struct{ *pulumi.OutputState }

func (DatadogLogsAgentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogLogsAgentResponse)(nil)).Elem()
}

func (o DatadogLogsAgentResponsePtrOutput) ToDatadogLogsAgentResponsePtrOutput() DatadogLogsAgentResponsePtrOutput {
	return o
}

func (o DatadogLogsAgentResponsePtrOutput) ToDatadogLogsAgentResponsePtrOutputWithContext(ctx context.Context) DatadogLogsAgentResponsePtrOutput {
	return o
}

func (o DatadogLogsAgentResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatadogLogsAgentResponse] {
	return pulumix.Output[*DatadogLogsAgentResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogLogsAgentResponsePtrOutput) Elem() DatadogLogsAgentResponseOutput {
	return o.ApplyT(func(v *DatadogLogsAgentResponse) DatadogLogsAgentResponse {
		if v != nil {
			return *v
		}
		var ret DatadogLogsAgentResponse
		return ret
	}).(DatadogLogsAgentResponseOutput)
}

// The transport.
func (o DatadogLogsAgentResponsePtrOutput) Transport() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogLogsAgentResponse) *string {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(pulumi.StringPtrOutput)
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
type DatadogOrganizationProperties struct {
	// Api key associated to the Datadog organization.
	ApiKey *string `pulumi:"apiKey"`
	// Application key associated to the Datadog organization.
	ApplicationKey *string `pulumi:"applicationKey"`
	// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
	Cspm *bool `pulumi:"cspm"`
	// The Id of the Enterprise App used for Single sign on.
	EnterpriseAppId *string `pulumi:"enterpriseAppId"`
	// Id of the Datadog organization.
	Id *string `pulumi:"id"`
	// The auth code used to linking to an existing Datadog organization.
	LinkingAuthCode *string `pulumi:"linkingAuthCode"`
	// The client_id from an existing in exchange for an auth token to link organization.
	LinkingClientId *string `pulumi:"linkingClientId"`
	// Name of the Datadog organization.
	Name *string `pulumi:"name"`
	// The redirect URI for linking.
	RedirectUri *string `pulumi:"redirectUri"`
}

// DatadogOrganizationPropertiesInput is an input type that accepts DatadogOrganizationPropertiesArgs and DatadogOrganizationPropertiesOutput values.
// You can construct a concrete instance of `DatadogOrganizationPropertiesInput` via:
//
//	DatadogOrganizationPropertiesArgs{...}
type DatadogOrganizationPropertiesInput interface {
	pulumi.Input

	ToDatadogOrganizationPropertiesOutput() DatadogOrganizationPropertiesOutput
	ToDatadogOrganizationPropertiesOutputWithContext(context.Context) DatadogOrganizationPropertiesOutput
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
type DatadogOrganizationPropertiesArgs struct {
	// Api key associated to the Datadog organization.
	ApiKey pulumi.StringPtrInput `pulumi:"apiKey"`
	// Application key associated to the Datadog organization.
	ApplicationKey pulumi.StringPtrInput `pulumi:"applicationKey"`
	// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
	Cspm pulumi.BoolPtrInput `pulumi:"cspm"`
	// The Id of the Enterprise App used for Single sign on.
	EnterpriseAppId pulumi.StringPtrInput `pulumi:"enterpriseAppId"`
	// Id of the Datadog organization.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The auth code used to linking to an existing Datadog organization.
	LinkingAuthCode pulumi.StringPtrInput `pulumi:"linkingAuthCode"`
	// The client_id from an existing in exchange for an auth token to link organization.
	LinkingClientId pulumi.StringPtrInput `pulumi:"linkingClientId"`
	// Name of the Datadog organization.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The redirect URI for linking.
	RedirectUri pulumi.StringPtrInput `pulumi:"redirectUri"`
}

func (DatadogOrganizationPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogOrganizationProperties)(nil)).Elem()
}

func (i DatadogOrganizationPropertiesArgs) ToDatadogOrganizationPropertiesOutput() DatadogOrganizationPropertiesOutput {
	return i.ToDatadogOrganizationPropertiesOutputWithContext(context.Background())
}

func (i DatadogOrganizationPropertiesArgs) ToDatadogOrganizationPropertiesOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatadogOrganizationPropertiesOutput)
}

func (i DatadogOrganizationPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[DatadogOrganizationProperties] {
	return pulumix.Output[DatadogOrganizationProperties]{
		OutputState: i.ToDatadogOrganizationPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i DatadogOrganizationPropertiesArgs) ToDatadogOrganizationPropertiesPtrOutput() DatadogOrganizationPropertiesPtrOutput {
	return i.ToDatadogOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (i DatadogOrganizationPropertiesArgs) ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatadogOrganizationPropertiesOutput).ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx)
}

// DatadogOrganizationPropertiesPtrInput is an input type that accepts DatadogOrganizationPropertiesArgs, DatadogOrganizationPropertiesPtr and DatadogOrganizationPropertiesPtrOutput values.
// You can construct a concrete instance of `DatadogOrganizationPropertiesPtrInput` via:
//
//	        DatadogOrganizationPropertiesArgs{...}
//
//	or:
//
//	        nil
type DatadogOrganizationPropertiesPtrInput interface {
	pulumi.Input

	ToDatadogOrganizationPropertiesPtrOutput() DatadogOrganizationPropertiesPtrOutput
	ToDatadogOrganizationPropertiesPtrOutputWithContext(context.Context) DatadogOrganizationPropertiesPtrOutput
}

type datadogOrganizationPropertiesPtrType DatadogOrganizationPropertiesArgs

func DatadogOrganizationPropertiesPtr(v *DatadogOrganizationPropertiesArgs) DatadogOrganizationPropertiesPtrInput {
	return (*datadogOrganizationPropertiesPtrType)(v)
}

func (*datadogOrganizationPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogOrganizationProperties)(nil)).Elem()
}

func (i *datadogOrganizationPropertiesPtrType) ToDatadogOrganizationPropertiesPtrOutput() DatadogOrganizationPropertiesPtrOutput {
	return i.ToDatadogOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (i *datadogOrganizationPropertiesPtrType) ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatadogOrganizationPropertiesPtrOutput)
}

func (i *datadogOrganizationPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*DatadogOrganizationProperties] {
	return pulumix.Output[*DatadogOrganizationProperties]{
		OutputState: i.ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
type DatadogOrganizationPropertiesOutput struct{ *pulumi.OutputState }

func (DatadogOrganizationPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogOrganizationProperties)(nil)).Elem()
}

func (o DatadogOrganizationPropertiesOutput) ToDatadogOrganizationPropertiesOutput() DatadogOrganizationPropertiesOutput {
	return o
}

func (o DatadogOrganizationPropertiesOutput) ToDatadogOrganizationPropertiesOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesOutput {
	return o
}

func (o DatadogOrganizationPropertiesOutput) ToDatadogOrganizationPropertiesPtrOutput() DatadogOrganizationPropertiesPtrOutput {
	return o.ToDatadogOrganizationPropertiesPtrOutputWithContext(context.Background())
}

func (o DatadogOrganizationPropertiesOutput) ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatadogOrganizationProperties) *DatadogOrganizationProperties {
		return &v
	}).(DatadogOrganizationPropertiesPtrOutput)
}

func (o DatadogOrganizationPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogOrganizationProperties] {
	return pulumix.Output[DatadogOrganizationProperties]{
		OutputState: o.OutputState,
	}
}

// Api key associated to the Datadog organization.
func (o DatadogOrganizationPropertiesOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// Application key associated to the Datadog organization.
func (o DatadogOrganizationPropertiesOutput) ApplicationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.ApplicationKey }).(pulumi.StringPtrOutput)
}

// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
func (o DatadogOrganizationPropertiesOutput) Cspm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *bool { return v.Cspm }).(pulumi.BoolPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o DatadogOrganizationPropertiesOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.EnterpriseAppId }).(pulumi.StringPtrOutput)
}

// Id of the Datadog organization.
func (o DatadogOrganizationPropertiesOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The auth code used to linking to an existing Datadog organization.
func (o DatadogOrganizationPropertiesOutput) LinkingAuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.LinkingAuthCode }).(pulumi.StringPtrOutput)
}

// The client_id from an existing in exchange for an auth token to link organization.
func (o DatadogOrganizationPropertiesOutput) LinkingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.LinkingClientId }).(pulumi.StringPtrOutput)
}

// Name of the Datadog organization.
func (o DatadogOrganizationPropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The redirect URI for linking.
func (o DatadogOrganizationPropertiesOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationProperties) *string { return v.RedirectUri }).(pulumi.StringPtrOutput)
}

type DatadogOrganizationPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatadogOrganizationPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogOrganizationProperties)(nil)).Elem()
}

func (o DatadogOrganizationPropertiesPtrOutput) ToDatadogOrganizationPropertiesPtrOutput() DatadogOrganizationPropertiesPtrOutput {
	return o
}

func (o DatadogOrganizationPropertiesPtrOutput) ToDatadogOrganizationPropertiesPtrOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesPtrOutput {
	return o
}

func (o DatadogOrganizationPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatadogOrganizationProperties] {
	return pulumix.Output[*DatadogOrganizationProperties]{
		OutputState: o.OutputState,
	}
}

func (o DatadogOrganizationPropertiesPtrOutput) Elem() DatadogOrganizationPropertiesOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) DatadogOrganizationProperties {
		if v != nil {
			return *v
		}
		var ret DatadogOrganizationProperties
		return ret
	}).(DatadogOrganizationPropertiesOutput)
}

// Api key associated to the Datadog organization.
func (o DatadogOrganizationPropertiesPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Application key associated to the Datadog organization.
func (o DatadogOrganizationPropertiesPtrOutput) ApplicationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationKey
	}).(pulumi.StringPtrOutput)
}

// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
func (o DatadogOrganizationPropertiesPtrOutput) Cspm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Cspm
	}).(pulumi.BoolPtrOutput)
}

// The Id of the Enterprise App used for Single sign on.
func (o DatadogOrganizationPropertiesPtrOutput) EnterpriseAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseAppId
	}).(pulumi.StringPtrOutput)
}

// Id of the Datadog organization.
func (o DatadogOrganizationPropertiesPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The auth code used to linking to an existing Datadog organization.
func (o DatadogOrganizationPropertiesPtrOutput) LinkingAuthCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.LinkingAuthCode
	}).(pulumi.StringPtrOutput)
}

// The client_id from an existing in exchange for an auth token to link organization.
func (o DatadogOrganizationPropertiesPtrOutput) LinkingClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.LinkingClientId
	}).(pulumi.StringPtrOutput)
}

// Name of the Datadog organization.
func (o DatadogOrganizationPropertiesPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The redirect URI for linking.
func (o DatadogOrganizationPropertiesPtrOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationProperties) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUri
	}).(pulumi.StringPtrOutput)
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
type DatadogOrganizationPropertiesResponse struct {
	// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
	Cspm *bool `pulumi:"cspm"`
	// Id of the Datadog organization.
	Id *string `pulumi:"id"`
	// Name of the Datadog organization.
	Name *string `pulumi:"name"`
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
type DatadogOrganizationPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DatadogOrganizationPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatadogOrganizationPropertiesResponse)(nil)).Elem()
}

func (o DatadogOrganizationPropertiesResponseOutput) ToDatadogOrganizationPropertiesResponseOutput() DatadogOrganizationPropertiesResponseOutput {
	return o
}

func (o DatadogOrganizationPropertiesResponseOutput) ToDatadogOrganizationPropertiesResponseOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesResponseOutput {
	return o
}

func (o DatadogOrganizationPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatadogOrganizationPropertiesResponse] {
	return pulumix.Output[DatadogOrganizationPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
func (o DatadogOrganizationPropertiesResponseOutput) Cspm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationPropertiesResponse) *bool { return v.Cspm }).(pulumi.BoolPtrOutput)
}

// Id of the Datadog organization.
func (o DatadogOrganizationPropertiesResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationPropertiesResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the Datadog organization.
func (o DatadogOrganizationPropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatadogOrganizationPropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type DatadogOrganizationPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatadogOrganizationPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatadogOrganizationPropertiesResponse)(nil)).Elem()
}

func (o DatadogOrganizationPropertiesResponsePtrOutput) ToDatadogOrganizationPropertiesResponsePtrOutput() DatadogOrganizationPropertiesResponsePtrOutput {
	return o
}

func (o DatadogOrganizationPropertiesResponsePtrOutput) ToDatadogOrganizationPropertiesResponsePtrOutputWithContext(ctx context.Context) DatadogOrganizationPropertiesResponsePtrOutput {
	return o
}

func (o DatadogOrganizationPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DatadogOrganizationPropertiesResponse] {
	return pulumix.Output[*DatadogOrganizationPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatadogOrganizationPropertiesResponsePtrOutput) Elem() DatadogOrganizationPropertiesResponseOutput {
	return o.ApplyT(func(v *DatadogOrganizationPropertiesResponse) DatadogOrganizationPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DatadogOrganizationPropertiesResponse
		return ret
	}).(DatadogOrganizationPropertiesResponseOutput)
}

// The configuration which describes the state of cloud security posture management. This collects configuration information for all resources in a subscription and track conformance to industry benchmarks.
func (o DatadogOrganizationPropertiesResponsePtrOutput) Cspm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Cspm
	}).(pulumi.BoolPtrOutput)
}

// Id of the Datadog organization.
func (o DatadogOrganizationPropertiesResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Name of the Datadog organization.
func (o DatadogOrganizationPropertiesResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatadogOrganizationPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTag struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action *string `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name *string `pulumi:"name"`
	// The value of the tag.
	Value *string `pulumi:"value"`
}

// FilteringTagInput is an input type that accepts FilteringTagArgs and FilteringTagOutput values.
// You can construct a concrete instance of `FilteringTagInput` via:
//
//	FilteringTagArgs{...}
type FilteringTagInput interface {
	pulumi.Input

	ToFilteringTagOutput() FilteringTagOutput
	ToFilteringTagOutputWithContext(context.Context) FilteringTagOutput
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagArgs struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the tag.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FilteringTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTag)(nil)).Elem()
}

func (i FilteringTagArgs) ToFilteringTagOutput() FilteringTagOutput {
	return i.ToFilteringTagOutputWithContext(context.Background())
}

func (i FilteringTagArgs) ToFilteringTagOutputWithContext(ctx context.Context) FilteringTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilteringTagOutput)
}

func (i FilteringTagArgs) ToOutput(ctx context.Context) pulumix.Output[FilteringTag] {
	return pulumix.Output[FilteringTag]{
		OutputState: i.ToFilteringTagOutputWithContext(ctx).OutputState,
	}
}

// FilteringTagArrayInput is an input type that accepts FilteringTagArray and FilteringTagArrayOutput values.
// You can construct a concrete instance of `FilteringTagArrayInput` via:
//
//	FilteringTagArray{ FilteringTagArgs{...} }
type FilteringTagArrayInput interface {
	pulumi.Input

	ToFilteringTagArrayOutput() FilteringTagArrayOutput
	ToFilteringTagArrayOutputWithContext(context.Context) FilteringTagArrayOutput
}

type FilteringTagArray []FilteringTagInput

func (FilteringTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTag)(nil)).Elem()
}

func (i FilteringTagArray) ToFilteringTagArrayOutput() FilteringTagArrayOutput {
	return i.ToFilteringTagArrayOutputWithContext(context.Background())
}

func (i FilteringTagArray) ToFilteringTagArrayOutputWithContext(ctx context.Context) FilteringTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilteringTagArrayOutput)
}

func (i FilteringTagArray) ToOutput(ctx context.Context) pulumix.Output[[]FilteringTag] {
	return pulumix.Output[[]FilteringTag]{
		OutputState: i.ToFilteringTagArrayOutputWithContext(ctx).OutputState,
	}
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagOutput struct{ *pulumi.OutputState }

func (FilteringTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTag)(nil)).Elem()
}

func (o FilteringTagOutput) ToFilteringTagOutput() FilteringTagOutput {
	return o
}

func (o FilteringTagOutput) ToFilteringTagOutputWithContext(ctx context.Context) FilteringTagOutput {
	return o
}

func (o FilteringTagOutput) ToOutput(ctx context.Context) pulumix.Output[FilteringTag] {
	return pulumix.Output[FilteringTag]{
		OutputState: o.OutputState,
	}
}

// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
func (o FilteringTagOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The name (also known as the key) of the tag.
func (o FilteringTagOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the tag.
func (o FilteringTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FilteringTagArrayOutput struct{ *pulumi.OutputState }

func (FilteringTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTag)(nil)).Elem()
}

func (o FilteringTagArrayOutput) ToFilteringTagArrayOutput() FilteringTagArrayOutput {
	return o
}

func (o FilteringTagArrayOutput) ToFilteringTagArrayOutputWithContext(ctx context.Context) FilteringTagArrayOutput {
	return o
}

func (o FilteringTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FilteringTag] {
	return pulumix.Output[[]FilteringTag]{
		OutputState: o.OutputState,
	}
}

func (o FilteringTagArrayOutput) Index(i pulumi.IntInput) FilteringTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilteringTag {
		return vs[0].([]FilteringTag)[vs[1].(int)]
	}).(FilteringTagOutput)
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagResponse struct {
	// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
	Action *string `pulumi:"action"`
	// The name (also known as the key) of the tag.
	Name *string `pulumi:"name"`
	// The value of the tag.
	Value *string `pulumi:"value"`
}

// The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
type FilteringTagResponseOutput struct{ *pulumi.OutputState }

func (FilteringTagResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FilteringTagResponse)(nil)).Elem()
}

func (o FilteringTagResponseOutput) ToFilteringTagResponseOutput() FilteringTagResponseOutput {
	return o
}

func (o FilteringTagResponseOutput) ToFilteringTagResponseOutputWithContext(ctx context.Context) FilteringTagResponseOutput {
	return o
}

func (o FilteringTagResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FilteringTagResponse] {
	return pulumix.Output[FilteringTagResponse]{
		OutputState: o.OutputState,
	}
}

// Valid actions for a filtering tag. Exclusion takes priority over inclusion.
func (o FilteringTagResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The name (also known as the key) of the tag.
func (o FilteringTagResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the tag.
func (o FilteringTagResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FilteringTagResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FilteringTagResponseArrayOutput struct{ *pulumi.OutputState }

func (FilteringTagResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FilteringTagResponse)(nil)).Elem()
}

func (o FilteringTagResponseArrayOutput) ToFilteringTagResponseArrayOutput() FilteringTagResponseArrayOutput {
	return o
}

func (o FilteringTagResponseArrayOutput) ToFilteringTagResponseArrayOutputWithContext(ctx context.Context) FilteringTagResponseArrayOutput {
	return o
}

func (o FilteringTagResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FilteringTagResponse] {
	return pulumix.Output[[]FilteringTagResponse]{
		OutputState: o.OutputState,
	}
}

func (o FilteringTagResponseArrayOutput) Index(i pulumi.IntInput) FilteringTagResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FilteringTagResponse {
		return vs[0].([]FilteringTagResponse)[vs[1].(int)]
	}).(FilteringTagResponseOutput)
}

type IdentityProperties struct {
	// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
	Type *string `pulumi:"type"`
}

// IdentityPropertiesInput is an input type that accepts IdentityPropertiesArgs and IdentityPropertiesOutput values.
// You can construct a concrete instance of `IdentityPropertiesInput` via:
//
//	IdentityPropertiesArgs{...}
type IdentityPropertiesInput interface {
	pulumi.Input

	ToIdentityPropertiesOutput() IdentityPropertiesOutput
	ToIdentityPropertiesOutputWithContext(context.Context) IdentityPropertiesOutput
}

type IdentityPropertiesArgs struct {
	// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IdentityPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return i.ToIdentityPropertiesOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput)
}

func (i IdentityPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[IdentityProperties] {
	return pulumix.Output[IdentityProperties]{
		OutputState: i.ToIdentityPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i IdentityPropertiesArgs) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesOutput).ToIdentityPropertiesPtrOutputWithContext(ctx)
}

// IdentityPropertiesPtrInput is an input type that accepts IdentityPropertiesArgs, IdentityPropertiesPtr and IdentityPropertiesPtrOutput values.
// You can construct a concrete instance of `IdentityPropertiesPtrInput` via:
//
//	        IdentityPropertiesArgs{...}
//
//	or:
//
//	        nil
type IdentityPropertiesPtrInput interface {
	pulumi.Input

	ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput
	ToIdentityPropertiesPtrOutputWithContext(context.Context) IdentityPropertiesPtrOutput
}

type identityPropertiesPtrType IdentityPropertiesArgs

func IdentityPropertiesPtr(v *IdentityPropertiesArgs) IdentityPropertiesPtrInput {
	return (*identityPropertiesPtrType)(v)
}

func (*identityPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return i.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (i *identityPropertiesPtrType) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPropertiesPtrOutput)
}

func (i *identityPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*IdentityProperties] {
	return pulumix.Output[*IdentityProperties]{
		OutputState: i.ToIdentityPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

type IdentityPropertiesOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutput() IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesOutputWithContext(ctx context.Context) IdentityPropertiesOutput {
	return o
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o.ToIdentityPropertiesPtrOutputWithContext(context.Background())
}

func (o IdentityPropertiesOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityProperties) *IdentityProperties {
		return &v
	}).(IdentityPropertiesPtrOutput)
}

func (o IdentityPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityProperties] {
	return pulumix.Output[IdentityProperties]{
		OutputState: o.OutputState,
	}
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
func (o IdentityPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPropertiesPtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityProperties)(nil)).Elem()
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutput() IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) ToIdentityPropertiesPtrOutputWithContext(ctx context.Context) IdentityPropertiesPtrOutput {
	return o
}

func (o IdentityPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityProperties] {
	return pulumix.Output[*IdentityProperties]{
		OutputState: o.OutputState,
	}
}

func (o IdentityPropertiesPtrOutput) Elem() IdentityPropertiesOutput {
	return o.ApplyT(func(v *IdentityProperties) IdentityProperties {
		if v != nil {
			return *v
		}
		var ret IdentityProperties
		return ret
	}).(IdentityPropertiesOutput)
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
func (o IdentityPropertiesPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityProperties) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type IdentityPropertiesResponse struct {
	// The identity ID.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
	Type *string `pulumi:"type"`
}

type IdentityPropertiesResponseOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutput() IdentityPropertiesResponseOutput {
	return o
}

func (o IdentityPropertiesResponseOutput) ToIdentityPropertiesResponseOutputWithContext(ctx context.Context) IdentityPropertiesResponseOutput {
	return o
}

func (o IdentityPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityPropertiesResponse] {
	return pulumix.Output[IdentityPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The identity ID.
func (o IdentityPropertiesResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
func (o IdentityPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityPropertiesResponse)(nil)).Elem()
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutput() IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) ToIdentityPropertiesResponsePtrOutputWithContext(ctx context.Context) IdentityPropertiesResponsePtrOutput {
	return o
}

func (o IdentityPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityPropertiesResponse] {
	return pulumix.Output[*IdentityPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o IdentityPropertiesResponsePtrOutput) Elem() IdentityPropertiesResponseOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) IdentityPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret IdentityPropertiesResponse
		return ret
	}).(IdentityPropertiesResponseOutput)
}

// The identity ID.
func (o IdentityPropertiesResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityPropertiesResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Specifies the identity type of the Datadog Monitor. At this time the only allowed value is 'SystemAssigned'.
func (o IdentityPropertiesResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The definition of a linked resource.
type LinkedResourceResponse struct {
	// The ARM id of the linked resource.
	Id *string `pulumi:"id"`
}

// The definition of a linked resource.
type LinkedResourceResponseOutput struct{ *pulumi.OutputState }

func (LinkedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedResourceResponse)(nil)).Elem()
}

func (o LinkedResourceResponseOutput) ToLinkedResourceResponseOutput() LinkedResourceResponseOutput {
	return o
}

func (o LinkedResourceResponseOutput) ToLinkedResourceResponseOutputWithContext(ctx context.Context) LinkedResourceResponseOutput {
	return o
}

func (o LinkedResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LinkedResourceResponse] {
	return pulumix.Output[LinkedResourceResponse]{
		OutputState: o.OutputState,
	}
}

// The ARM id of the linked resource.
func (o LinkedResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type LinkedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedResourceResponse)(nil)).Elem()
}

func (o LinkedResourceResponseArrayOutput) ToLinkedResourceResponseArrayOutput() LinkedResourceResponseArrayOutput {
	return o
}

func (o LinkedResourceResponseArrayOutput) ToLinkedResourceResponseArrayOutputWithContext(ctx context.Context) LinkedResourceResponseArrayOutput {
	return o
}

func (o LinkedResourceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkedResourceResponse] {
	return pulumix.Output[[]LinkedResourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o LinkedResourceResponseArrayOutput) Index(i pulumi.IntInput) LinkedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedResourceResponse {
		return vs[0].([]LinkedResourceResponse)[vs[1].(int)]
	}).(LinkedResourceResponseOutput)
}

// Set of rules for sending logs for the Monitor resource.
type LogRules struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTag `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs *bool `pulumi:"sendAadLogs"`
	// Flag specifying if Azure resource logs should be sent for the Monitor resource.
	SendResourceLogs *bool `pulumi:"sendResourceLogs"`
	// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs *bool `pulumi:"sendSubscriptionLogs"`
}

// LogRulesInput is an input type that accepts LogRulesArgs and LogRulesOutput values.
// You can construct a concrete instance of `LogRulesInput` via:
//
//	LogRulesArgs{...}
type LogRulesInput interface {
	pulumi.Input

	ToLogRulesOutput() LogRulesOutput
	ToLogRulesOutputWithContext(context.Context) LogRulesOutput
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesArgs struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags FilteringTagArrayInput `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs pulumi.BoolPtrInput `pulumi:"sendAadLogs"`
	// Flag specifying if Azure resource logs should be sent for the Monitor resource.
	SendResourceLogs pulumi.BoolPtrInput `pulumi:"sendResourceLogs"`
	// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs pulumi.BoolPtrInput `pulumi:"sendSubscriptionLogs"`
}

func (LogRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRules)(nil)).Elem()
}

func (i LogRulesArgs) ToLogRulesOutput() LogRulesOutput {
	return i.ToLogRulesOutputWithContext(context.Background())
}

func (i LogRulesArgs) ToLogRulesOutputWithContext(ctx context.Context) LogRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesOutput)
}

func (i LogRulesArgs) ToOutput(ctx context.Context) pulumix.Output[LogRules] {
	return pulumix.Output[LogRules]{
		OutputState: i.ToLogRulesOutputWithContext(ctx).OutputState,
	}
}

func (i LogRulesArgs) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return i.ToLogRulesPtrOutputWithContext(context.Background())
}

func (i LogRulesArgs) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesOutput).ToLogRulesPtrOutputWithContext(ctx)
}

// LogRulesPtrInput is an input type that accepts LogRulesArgs, LogRulesPtr and LogRulesPtrOutput values.
// You can construct a concrete instance of `LogRulesPtrInput` via:
//
//	        LogRulesArgs{...}
//
//	or:
//
//	        nil
type LogRulesPtrInput interface {
	pulumi.Input

	ToLogRulesPtrOutput() LogRulesPtrOutput
	ToLogRulesPtrOutputWithContext(context.Context) LogRulesPtrOutput
}

type logRulesPtrType LogRulesArgs

func LogRulesPtr(v *LogRulesArgs) LogRulesPtrInput {
	return (*logRulesPtrType)(v)
}

func (*logRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRules)(nil)).Elem()
}

func (i *logRulesPtrType) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return i.ToLogRulesPtrOutputWithContext(context.Background())
}

func (i *logRulesPtrType) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogRulesPtrOutput)
}

func (i *logRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*LogRules] {
	return pulumix.Output[*LogRules]{
		OutputState: i.ToLogRulesPtrOutputWithContext(ctx).OutputState,
	}
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesOutput struct{ *pulumi.OutputState }

func (LogRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRules)(nil)).Elem()
}

func (o LogRulesOutput) ToLogRulesOutput() LogRulesOutput {
	return o
}

func (o LogRulesOutput) ToLogRulesOutputWithContext(ctx context.Context) LogRulesOutput {
	return o
}

func (o LogRulesOutput) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return o.ToLogRulesPtrOutputWithContext(context.Background())
}

func (o LogRulesOutput) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LogRules) *LogRules {
		return &v
	}).(LogRulesPtrOutput)
}

func (o LogRulesOutput) ToOutput(ctx context.Context) pulumix.Output[LogRules] {
	return pulumix.Output[LogRules]{
		OutputState: o.OutputState,
	}
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v LogRules) []FilteringTag { return v.FilteringTags }).(FilteringTagArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendAadLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure resource logs should be sent for the Monitor resource.
func (o LogRulesOutput) SendResourceLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendResourceLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
func (o LogRulesOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRules) *bool { return v.SendSubscriptionLogs }).(pulumi.BoolPtrOutput)
}

type LogRulesPtrOutput struct{ *pulumi.OutputState }

func (LogRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRules)(nil)).Elem()
}

func (o LogRulesPtrOutput) ToLogRulesPtrOutput() LogRulesPtrOutput {
	return o
}

func (o LogRulesPtrOutput) ToLogRulesPtrOutputWithContext(ctx context.Context) LogRulesPtrOutput {
	return o
}

func (o LogRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogRules] {
	return pulumix.Output[*LogRules]{
		OutputState: o.OutputState,
	}
}

func (o LogRulesPtrOutput) Elem() LogRulesOutput {
	return o.ApplyT(func(v *LogRules) LogRules {
		if v != nil {
			return *v
		}
		var ret LogRules
		return ret
	}).(LogRulesOutput)
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesPtrOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v *LogRules) []FilteringTag {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendAadLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure resource logs should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendResourceLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendResourceLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
func (o LogRulesPtrOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRules) *bool {
		if v == nil {
			return nil
		}
		return v.SendSubscriptionLogs
	}).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesResponse struct {
	// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTagResponse `pulumi:"filteringTags"`
	// Flag specifying if AAD logs should be sent for the Monitor resource.
	SendAadLogs *bool `pulumi:"sendAadLogs"`
	// Flag specifying if Azure resource logs should be sent for the Monitor resource.
	SendResourceLogs *bool `pulumi:"sendResourceLogs"`
	// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
	SendSubscriptionLogs *bool `pulumi:"sendSubscriptionLogs"`
}

// Set of rules for sending logs for the Monitor resource.
type LogRulesResponseOutput struct{ *pulumi.OutputState }

func (LogRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogRulesResponse)(nil)).Elem()
}

func (o LogRulesResponseOutput) ToLogRulesResponseOutput() LogRulesResponseOutput {
	return o
}

func (o LogRulesResponseOutput) ToLogRulesResponseOutputWithContext(ctx context.Context) LogRulesResponseOutput {
	return o
}

func (o LogRulesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LogRulesResponse] {
	return pulumix.Output[LogRulesResponse]{
		OutputState: o.OutputState,
	}
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesResponseOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v LogRulesResponse) []FilteringTagResponse { return v.FilteringTags }).(FilteringTagResponseArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendAadLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure resource logs should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendResourceLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendResourceLogs }).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
func (o LogRulesResponseOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LogRulesResponse) *bool { return v.SendSubscriptionLogs }).(pulumi.BoolPtrOutput)
}

type LogRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (LogRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogRulesResponse)(nil)).Elem()
}

func (o LogRulesResponsePtrOutput) ToLogRulesResponsePtrOutput() LogRulesResponsePtrOutput {
	return o
}

func (o LogRulesResponsePtrOutput) ToLogRulesResponsePtrOutputWithContext(ctx context.Context) LogRulesResponsePtrOutput {
	return o
}

func (o LogRulesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LogRulesResponse] {
	return pulumix.Output[*LogRulesResponse]{
		OutputState: o.OutputState,
	}
}

func (o LogRulesResponsePtrOutput) Elem() LogRulesResponseOutput {
	return o.ApplyT(func(v *LogRulesResponse) LogRulesResponse {
		if v != nil {
			return *v
		}
		var ret LogRulesResponse
		return ret
	}).(LogRulesResponseOutput)
}

// List of filtering tags to be used for capturing logs. This only takes effect if SendResourceLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o LogRulesResponsePtrOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v *LogRulesResponse) []FilteringTagResponse {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagResponseArrayOutput)
}

// Flag specifying if AAD logs should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendAadLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendAadLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure resource logs should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendResourceLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendResourceLogs
	}).(pulumi.BoolPtrOutput)
}

// Flag specifying if Azure subscription logs should be sent for the Monitor resource.
func (o LogRulesResponsePtrOutput) SendSubscriptionLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogRulesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SendSubscriptionLogs
	}).(pulumi.BoolPtrOutput)
}

// Set of rules for sending metrics for the Monitor resource.
type MetricRules struct {
	// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTag `pulumi:"filteringTags"`
}

// MetricRulesInput is an input type that accepts MetricRulesArgs and MetricRulesOutput values.
// You can construct a concrete instance of `MetricRulesInput` via:
//
//	MetricRulesArgs{...}
type MetricRulesInput interface {
	pulumi.Input

	ToMetricRulesOutput() MetricRulesOutput
	ToMetricRulesOutputWithContext(context.Context) MetricRulesOutput
}

// Set of rules for sending metrics for the Monitor resource.
type MetricRulesArgs struct {
	// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags FilteringTagArrayInput `pulumi:"filteringTags"`
}

func (MetricRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRules)(nil)).Elem()
}

func (i MetricRulesArgs) ToMetricRulesOutput() MetricRulesOutput {
	return i.ToMetricRulesOutputWithContext(context.Background())
}

func (i MetricRulesArgs) ToMetricRulesOutputWithContext(ctx context.Context) MetricRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesOutput)
}

func (i MetricRulesArgs) ToOutput(ctx context.Context) pulumix.Output[MetricRules] {
	return pulumix.Output[MetricRules]{
		OutputState: i.ToMetricRulesOutputWithContext(ctx).OutputState,
	}
}

func (i MetricRulesArgs) ToMetricRulesPtrOutput() MetricRulesPtrOutput {
	return i.ToMetricRulesPtrOutputWithContext(context.Background())
}

func (i MetricRulesArgs) ToMetricRulesPtrOutputWithContext(ctx context.Context) MetricRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesOutput).ToMetricRulesPtrOutputWithContext(ctx)
}

// MetricRulesPtrInput is an input type that accepts MetricRulesArgs, MetricRulesPtr and MetricRulesPtrOutput values.
// You can construct a concrete instance of `MetricRulesPtrInput` via:
//
//	        MetricRulesArgs{...}
//
//	or:
//
//	        nil
type MetricRulesPtrInput interface {
	pulumi.Input

	ToMetricRulesPtrOutput() MetricRulesPtrOutput
	ToMetricRulesPtrOutputWithContext(context.Context) MetricRulesPtrOutput
}

type metricRulesPtrType MetricRulesArgs

func MetricRulesPtr(v *MetricRulesArgs) MetricRulesPtrInput {
	return (*metricRulesPtrType)(v)
}

func (*metricRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricRules)(nil)).Elem()
}

func (i *metricRulesPtrType) ToMetricRulesPtrOutput() MetricRulesPtrOutput {
	return i.ToMetricRulesPtrOutputWithContext(context.Background())
}

func (i *metricRulesPtrType) ToMetricRulesPtrOutputWithContext(ctx context.Context) MetricRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetricRulesPtrOutput)
}

func (i *metricRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MetricRules] {
	return pulumix.Output[*MetricRules]{
		OutputState: i.ToMetricRulesPtrOutputWithContext(ctx).OutputState,
	}
}

// Set of rules for sending metrics for the Monitor resource.
type MetricRulesOutput struct{ *pulumi.OutputState }

func (MetricRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRules)(nil)).Elem()
}

func (o MetricRulesOutput) ToMetricRulesOutput() MetricRulesOutput {
	return o
}

func (o MetricRulesOutput) ToMetricRulesOutputWithContext(ctx context.Context) MetricRulesOutput {
	return o
}

func (o MetricRulesOutput) ToMetricRulesPtrOutput() MetricRulesPtrOutput {
	return o.ToMetricRulesPtrOutputWithContext(context.Background())
}

func (o MetricRulesOutput) ToMetricRulesPtrOutputWithContext(ctx context.Context) MetricRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetricRules) *MetricRules {
		return &v
	}).(MetricRulesPtrOutput)
}

func (o MetricRulesOutput) ToOutput(ctx context.Context) pulumix.Output[MetricRules] {
	return pulumix.Output[MetricRules]{
		OutputState: o.OutputState,
	}
}

// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MetricRulesOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v MetricRules) []FilteringTag { return v.FilteringTags }).(FilteringTagArrayOutput)
}

type MetricRulesPtrOutput struct{ *pulumi.OutputState }

func (MetricRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricRules)(nil)).Elem()
}

func (o MetricRulesPtrOutput) ToMetricRulesPtrOutput() MetricRulesPtrOutput {
	return o
}

func (o MetricRulesPtrOutput) ToMetricRulesPtrOutputWithContext(ctx context.Context) MetricRulesPtrOutput {
	return o
}

func (o MetricRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricRules] {
	return pulumix.Output[*MetricRules]{
		OutputState: o.OutputState,
	}
}

func (o MetricRulesPtrOutput) Elem() MetricRulesOutput {
	return o.ApplyT(func(v *MetricRules) MetricRules {
		if v != nil {
			return *v
		}
		var ret MetricRules
		return ret
	}).(MetricRulesOutput)
}

// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MetricRulesPtrOutput) FilteringTags() FilteringTagArrayOutput {
	return o.ApplyT(func(v *MetricRules) []FilteringTag {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagArrayOutput)
}

// Set of rules for sending metrics for the Monitor resource.
type MetricRulesResponse struct {
	// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
	FilteringTags []FilteringTagResponse `pulumi:"filteringTags"`
}

// Set of rules for sending metrics for the Monitor resource.
type MetricRulesResponseOutput struct{ *pulumi.OutputState }

func (MetricRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetricRulesResponse)(nil)).Elem()
}

func (o MetricRulesResponseOutput) ToMetricRulesResponseOutput() MetricRulesResponseOutput {
	return o
}

func (o MetricRulesResponseOutput) ToMetricRulesResponseOutputWithContext(ctx context.Context) MetricRulesResponseOutput {
	return o
}

func (o MetricRulesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MetricRulesResponse] {
	return pulumix.Output[MetricRulesResponse]{
		OutputState: o.OutputState,
	}
}

// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MetricRulesResponseOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v MetricRulesResponse) []FilteringTagResponse { return v.FilteringTags }).(FilteringTagResponseArrayOutput)
}

type MetricRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (MetricRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetricRulesResponse)(nil)).Elem()
}

func (o MetricRulesResponsePtrOutput) ToMetricRulesResponsePtrOutput() MetricRulesResponsePtrOutput {
	return o
}

func (o MetricRulesResponsePtrOutput) ToMetricRulesResponsePtrOutputWithContext(ctx context.Context) MetricRulesResponsePtrOutput {
	return o
}

func (o MetricRulesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MetricRulesResponse] {
	return pulumix.Output[*MetricRulesResponse]{
		OutputState: o.OutputState,
	}
}

func (o MetricRulesResponsePtrOutput) Elem() MetricRulesResponseOutput {
	return o.ApplyT(func(v *MetricRulesResponse) MetricRulesResponse {
		if v != nil {
			return *v
		}
		var ret MetricRulesResponse
		return ret
	}).(MetricRulesResponseOutput)
}

// List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
func (o MetricRulesResponsePtrOutput) FilteringTags() FilteringTagResponseArrayOutput {
	return o.ApplyT(func(v *MetricRulesResponse) []FilteringTagResponse {
		if v == nil {
			return nil
		}
		return v.FilteringTags
	}).(FilteringTagResponseArrayOutput)
}

// Properties specific to the monitor resource.
type MonitorProperties struct {
	// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
	DatadogOrganizationProperties *DatadogOrganizationProperties `pulumi:"datadogOrganizationProperties"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus *string `pulumi:"monitoringStatus"`
	// Includes name, email and optionally, phone number. User Information can't be null.
	UserInfo *UserInfo `pulumi:"userInfo"`
}

// MonitorPropertiesInput is an input type that accepts MonitorPropertiesArgs and MonitorPropertiesOutput values.
// You can construct a concrete instance of `MonitorPropertiesInput` via:
//
//	MonitorPropertiesArgs{...}
type MonitorPropertiesInput interface {
	pulumi.Input

	ToMonitorPropertiesOutput() MonitorPropertiesOutput
	ToMonitorPropertiesOutputWithContext(context.Context) MonitorPropertiesOutput
}

// Properties specific to the monitor resource.
type MonitorPropertiesArgs struct {
	// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
	DatadogOrganizationProperties DatadogOrganizationPropertiesPtrInput `pulumi:"datadogOrganizationProperties"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus pulumi.StringPtrInput `pulumi:"monitoringStatus"`
	// Includes name, email and optionally, phone number. User Information can't be null.
	UserInfo UserInfoPtrInput `pulumi:"userInfo"`
}

func (MonitorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorProperties)(nil)).Elem()
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesOutput() MonitorPropertiesOutput {
	return i.ToMonitorPropertiesOutputWithContext(context.Background())
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesOutputWithContext(ctx context.Context) MonitorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesOutput)
}

func (i MonitorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[MonitorProperties] {
	return pulumix.Output[MonitorProperties]{
		OutputState: i.ToMonitorPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return i.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (i MonitorPropertiesArgs) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesOutput).ToMonitorPropertiesPtrOutputWithContext(ctx)
}

// MonitorPropertiesPtrInput is an input type that accepts MonitorPropertiesArgs, MonitorPropertiesPtr and MonitorPropertiesPtrOutput values.
// You can construct a concrete instance of `MonitorPropertiesPtrInput` via:
//
//	        MonitorPropertiesArgs{...}
//
//	or:
//
//	        nil
type MonitorPropertiesPtrInput interface {
	pulumi.Input

	ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput
	ToMonitorPropertiesPtrOutputWithContext(context.Context) MonitorPropertiesPtrOutput
}

type monitorPropertiesPtrType MonitorPropertiesArgs

func MonitorPropertiesPtr(v *MonitorPropertiesArgs) MonitorPropertiesPtrInput {
	return (*monitorPropertiesPtrType)(v)
}

func (*monitorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorProperties)(nil)).Elem()
}

func (i *monitorPropertiesPtrType) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return i.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (i *monitorPropertiesPtrType) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorPropertiesPtrOutput)
}

func (i *monitorPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MonitorProperties] {
	return pulumix.Output[*MonitorProperties]{
		OutputState: i.ToMonitorPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Properties specific to the monitor resource.
type MonitorPropertiesOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorProperties)(nil)).Elem()
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesOutput() MonitorPropertiesOutput {
	return o
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesOutputWithContext(ctx context.Context) MonitorPropertiesOutput {
	return o
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return o.ToMonitorPropertiesPtrOutputWithContext(context.Background())
}

func (o MonitorPropertiesOutput) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorProperties) *MonitorProperties {
		return &v
	}).(MonitorPropertiesPtrOutput)
}

func (o MonitorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[MonitorProperties] {
	return pulumix.Output[MonitorProperties]{
		OutputState: o.OutputState,
	}
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
func (o MonitorPropertiesOutput) DatadogOrganizationProperties() DatadogOrganizationPropertiesPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *DatadogOrganizationProperties { return v.DatadogOrganizationProperties }).(DatadogOrganizationPropertiesPtrOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *string { return v.MonitoringStatus }).(pulumi.StringPtrOutput)
}

// Includes name, email and optionally, phone number. User Information can't be null.
func (o MonitorPropertiesOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v MonitorProperties) *UserInfo { return v.UserInfo }).(UserInfoPtrOutput)
}

type MonitorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorProperties)(nil)).Elem()
}

func (o MonitorPropertiesPtrOutput) ToMonitorPropertiesPtrOutput() MonitorPropertiesPtrOutput {
	return o
}

func (o MonitorPropertiesPtrOutput) ToMonitorPropertiesPtrOutputWithContext(ctx context.Context) MonitorPropertiesPtrOutput {
	return o
}

func (o MonitorPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitorProperties] {
	return pulumix.Output[*MonitorProperties]{
		OutputState: o.OutputState,
	}
}

func (o MonitorPropertiesPtrOutput) Elem() MonitorPropertiesOutput {
	return o.ApplyT(func(v *MonitorProperties) MonitorProperties {
		if v != nil {
			return *v
		}
		var ret MonitorProperties
		return ret
	}).(MonitorPropertiesOutput)
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
func (o MonitorPropertiesPtrOutput) DatadogOrganizationProperties() DatadogOrganizationPropertiesPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *DatadogOrganizationProperties {
		if v == nil {
			return nil
		}
		return v.DatadogOrganizationProperties
	}).(DatadogOrganizationPropertiesPtrOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesPtrOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *string {
		if v == nil {
			return nil
		}
		return v.MonitoringStatus
	}).(pulumi.StringPtrOutput)
}

// Includes name, email and optionally, phone number. User Information can't be null.
func (o MonitorPropertiesPtrOutput) UserInfo() UserInfoPtrOutput {
	return o.ApplyT(func(v *MonitorProperties) *UserInfo {
		if v == nil {
			return nil
		}
		return v.UserInfo
	}).(UserInfoPtrOutput)
}

// Properties specific to the monitor resource.
type MonitorPropertiesResponse struct {
	// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
	DatadogOrganizationProperties *DatadogOrganizationPropertiesResponse `pulumi:"datadogOrganizationProperties"`
	LiftrResourceCategory         string                                 `pulumi:"liftrResourceCategory"`
	// The priority of the resource.
	LiftrResourcePreference int `pulumi:"liftrResourcePreference"`
	// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
	MarketplaceSubscriptionStatus string `pulumi:"marketplaceSubscriptionStatus"`
	// Flag specifying if the resource monitoring is enabled or disabled.
	MonitoringStatus  *string `pulumi:"monitoringStatus"`
	ProvisioningState string  `pulumi:"provisioningState"`
	// Includes name, email and optionally, phone number. User Information can't be null.
	UserInfo *UserInfoResponse `pulumi:"userInfo"`
}

// Properties specific to the monitor resource.
type MonitorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorPropertiesResponse)(nil)).Elem()
}

func (o MonitorPropertiesResponseOutput) ToMonitorPropertiesResponseOutput() MonitorPropertiesResponseOutput {
	return o
}

func (o MonitorPropertiesResponseOutput) ToMonitorPropertiesResponseOutputWithContext(ctx context.Context) MonitorPropertiesResponseOutput {
	return o
}

func (o MonitorPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MonitorPropertiesResponse] {
	return pulumix.Output[MonitorPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Specify the Datadog organization name. In the case of linking to existing organizations, Id, ApiKey, and Applicationkey is required as well.
func (o MonitorPropertiesResponseOutput) DatadogOrganizationProperties() DatadogOrganizationPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *DatadogOrganizationPropertiesResponse {
		return v.DatadogOrganizationProperties
	}).(DatadogOrganizationPropertiesResponsePtrOutput)
}

func (o MonitorPropertiesResponseOutput) LiftrResourceCategory() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) string { return v.LiftrResourceCategory }).(pulumi.StringOutput)
}

// The priority of the resource.
func (o MonitorPropertiesResponseOutput) LiftrResourcePreference() pulumi.IntOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) int { return v.LiftrResourcePreference }).(pulumi.IntOutput)
}

// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.
func (o MonitorPropertiesResponseOutput) MarketplaceSubscriptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) string { return v.MarketplaceSubscriptionStatus }).(pulumi.StringOutput)
}

// Flag specifying if the resource monitoring is enabled or disabled.
func (o MonitorPropertiesResponseOutput) MonitoringStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *string { return v.MonitoringStatus }).(pulumi.StringPtrOutput)
}

func (o MonitorPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Includes name, email and optionally, phone number. User Information can't be null.
func (o MonitorPropertiesResponseOutput) UserInfo() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v MonitorPropertiesResponse) *UserInfoResponse { return v.UserInfo }).(UserInfoResponsePtrOutput)
}

// The properties of a resource currently being monitored by the Datadog monitor resource.
type MonitoredResourceResponse struct {
	// The ARM id of the resource.
	Id *string `pulumi:"id"`
	// Reason for why the resource is sending logs (or why it is not sending).
	ReasonForLogsStatus *string `pulumi:"reasonForLogsStatus"`
	// Reason for why the resource is sending metrics (or why it is not sending).
	ReasonForMetricsStatus *string `pulumi:"reasonForMetricsStatus"`
	// Flag indicating if resource is sending logs to Datadog.
	SendingLogs *bool `pulumi:"sendingLogs"`
	// Flag indicating if resource is sending metrics to Datadog.
	SendingMetrics *bool `pulumi:"sendingMetrics"`
}

// The properties of a resource currently being monitored by the Datadog monitor resource.
type MonitoredResourceResponseOutput struct{ *pulumi.OutputState }

func (MonitoredResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredResourceResponse)(nil)).Elem()
}

func (o MonitoredResourceResponseOutput) ToMonitoredResourceResponseOutput() MonitoredResourceResponseOutput {
	return o
}

func (o MonitoredResourceResponseOutput) ToMonitoredResourceResponseOutputWithContext(ctx context.Context) MonitoredResourceResponseOutput {
	return o
}

func (o MonitoredResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoredResourceResponse] {
	return pulumix.Output[MonitoredResourceResponse]{
		OutputState: o.OutputState,
	}
}

// The ARM id of the resource.
func (o MonitoredResourceResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Reason for why the resource is sending logs (or why it is not sending).
func (o MonitoredResourceResponseOutput) ReasonForLogsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.ReasonForLogsStatus }).(pulumi.StringPtrOutput)
}

// Reason for why the resource is sending metrics (or why it is not sending).
func (o MonitoredResourceResponseOutput) ReasonForMetricsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *string { return v.ReasonForMetricsStatus }).(pulumi.StringPtrOutput)
}

// Flag indicating if resource is sending logs to Datadog.
func (o MonitoredResourceResponseOutput) SendingLogs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *bool { return v.SendingLogs }).(pulumi.BoolPtrOutput)
}

// Flag indicating if resource is sending metrics to Datadog.
func (o MonitoredResourceResponseOutput) SendingMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoredResourceResponse) *bool { return v.SendingMetrics }).(pulumi.BoolPtrOutput)
}

type MonitoredResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (MonitoredResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredResourceResponse)(nil)).Elem()
}

func (o MonitoredResourceResponseArrayOutput) ToMonitoredResourceResponseArrayOutput() MonitoredResourceResponseArrayOutput {
	return o
}

func (o MonitoredResourceResponseArrayOutput) ToMonitoredResourceResponseArrayOutputWithContext(ctx context.Context) MonitoredResourceResponseArrayOutput {
	return o
}

func (o MonitoredResourceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MonitoredResourceResponse] {
	return pulumix.Output[[]MonitoredResourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o MonitoredResourceResponseArrayOutput) Index(i pulumi.IntInput) MonitoredResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredResourceResponse {
		return vs[0].([]MonitoredResourceResponse)[vs[1].(int)]
	}).(MonitoredResourceResponseOutput)
}

// The list of subscriptions and it's monitoring status by current Datadog monitor.
type MonitoredSubscriptionType struct {
	// The reason of not monitoring the subscription.
	Error *string `pulumi:"error"`
	// The state of monitoring.
	Status *string `pulumi:"status"`
	// The subscriptionId to be monitored.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Definition of the properties for a TagRules resource.
	TagRules *MonitoringTagRulesProperties `pulumi:"tagRules"`
}

// MonitoredSubscriptionTypeInput is an input type that accepts MonitoredSubscriptionTypeArgs and MonitoredSubscriptionTypeOutput values.
// You can construct a concrete instance of `MonitoredSubscriptionTypeInput` via:
//
//	MonitoredSubscriptionTypeArgs{...}
type MonitoredSubscriptionTypeInput interface {
	pulumi.Input

	ToMonitoredSubscriptionTypeOutput() MonitoredSubscriptionTypeOutput
	ToMonitoredSubscriptionTypeOutputWithContext(context.Context) MonitoredSubscriptionTypeOutput
}

// The list of subscriptions and it's monitoring status by current Datadog monitor.
type MonitoredSubscriptionTypeArgs struct {
	// The reason of not monitoring the subscription.
	Error pulumi.StringPtrInput `pulumi:"error"`
	// The state of monitoring.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The subscriptionId to be monitored.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Definition of the properties for a TagRules resource.
	TagRules MonitoringTagRulesPropertiesPtrInput `pulumi:"tagRules"`
}

func (MonitoredSubscriptionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredSubscriptionType)(nil)).Elem()
}

func (i MonitoredSubscriptionTypeArgs) ToMonitoredSubscriptionTypeOutput() MonitoredSubscriptionTypeOutput {
	return i.ToMonitoredSubscriptionTypeOutputWithContext(context.Background())
}

func (i MonitoredSubscriptionTypeArgs) ToMonitoredSubscriptionTypeOutputWithContext(ctx context.Context) MonitoredSubscriptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredSubscriptionTypeOutput)
}

func (i MonitoredSubscriptionTypeArgs) ToOutput(ctx context.Context) pulumix.Output[MonitoredSubscriptionType] {
	return pulumix.Output[MonitoredSubscriptionType]{
		OutputState: i.ToMonitoredSubscriptionTypeOutputWithContext(ctx).OutputState,
	}
}

// MonitoredSubscriptionTypeArrayInput is an input type that accepts MonitoredSubscriptionTypeArray and MonitoredSubscriptionTypeArrayOutput values.
// You can construct a concrete instance of `MonitoredSubscriptionTypeArrayInput` via:
//
//	MonitoredSubscriptionTypeArray{ MonitoredSubscriptionTypeArgs{...} }
type MonitoredSubscriptionTypeArrayInput interface {
	pulumi.Input

	ToMonitoredSubscriptionTypeArrayOutput() MonitoredSubscriptionTypeArrayOutput
	ToMonitoredSubscriptionTypeArrayOutputWithContext(context.Context) MonitoredSubscriptionTypeArrayOutput
}

type MonitoredSubscriptionTypeArray []MonitoredSubscriptionTypeInput

func (MonitoredSubscriptionTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredSubscriptionType)(nil)).Elem()
}

func (i MonitoredSubscriptionTypeArray) ToMonitoredSubscriptionTypeArrayOutput() MonitoredSubscriptionTypeArrayOutput {
	return i.ToMonitoredSubscriptionTypeArrayOutputWithContext(context.Background())
}

func (i MonitoredSubscriptionTypeArray) ToMonitoredSubscriptionTypeArrayOutputWithContext(ctx context.Context) MonitoredSubscriptionTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredSubscriptionTypeArrayOutput)
}

func (i MonitoredSubscriptionTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]MonitoredSubscriptionType] {
	return pulumix.Output[[]MonitoredSubscriptionType]{
		OutputState: i.ToMonitoredSubscriptionTypeArrayOutputWithContext(ctx).OutputState,
	}
}

// The list of subscriptions and it's monitoring status by current Datadog monitor.
type MonitoredSubscriptionTypeOutput struct{ *pulumi.OutputState }

func (MonitoredSubscriptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredSubscriptionType)(nil)).Elem()
}

func (o MonitoredSubscriptionTypeOutput) ToMonitoredSubscriptionTypeOutput() MonitoredSubscriptionTypeOutput {
	return o
}

func (o MonitoredSubscriptionTypeOutput) ToMonitoredSubscriptionTypeOutputWithContext(ctx context.Context) MonitoredSubscriptionTypeOutput {
	return o
}

func (o MonitoredSubscriptionTypeOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoredSubscriptionType] {
	return pulumix.Output[MonitoredSubscriptionType]{
		OutputState: o.OutputState,
	}
}

// The reason of not monitoring the subscription.
func (o MonitoredSubscriptionTypeOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionType) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The state of monitoring.
func (o MonitoredSubscriptionTypeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionType) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The subscriptionId to be monitored.
func (o MonitoredSubscriptionTypeOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionType) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Definition of the properties for a TagRules resource.
func (o MonitoredSubscriptionTypeOutput) TagRules() MonitoringTagRulesPropertiesPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionType) *MonitoringTagRulesProperties { return v.TagRules }).(MonitoringTagRulesPropertiesPtrOutput)
}

type MonitoredSubscriptionTypeArrayOutput struct{ *pulumi.OutputState }

func (MonitoredSubscriptionTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredSubscriptionType)(nil)).Elem()
}

func (o MonitoredSubscriptionTypeArrayOutput) ToMonitoredSubscriptionTypeArrayOutput() MonitoredSubscriptionTypeArrayOutput {
	return o
}

func (o MonitoredSubscriptionTypeArrayOutput) ToMonitoredSubscriptionTypeArrayOutputWithContext(ctx context.Context) MonitoredSubscriptionTypeArrayOutput {
	return o
}

func (o MonitoredSubscriptionTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MonitoredSubscriptionType] {
	return pulumix.Output[[]MonitoredSubscriptionType]{
		OutputState: o.OutputState,
	}
}

func (o MonitoredSubscriptionTypeArrayOutput) Index(i pulumi.IntInput) MonitoredSubscriptionTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredSubscriptionType {
		return vs[0].([]MonitoredSubscriptionType)[vs[1].(int)]
	}).(MonitoredSubscriptionTypeOutput)
}

// The list of subscriptions and it's monitoring status by current Datadog monitor.
type MonitoredSubscriptionResponse struct {
	// The reason of not monitoring the subscription.
	Error *string `pulumi:"error"`
	// The state of monitoring.
	Status *string `pulumi:"status"`
	// The subscriptionId to be monitored.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Definition of the properties for a TagRules resource.
	TagRules *MonitoringTagRulesPropertiesResponse `pulumi:"tagRules"`
}

// The list of subscriptions and it's monitoring status by current Datadog monitor.
type MonitoredSubscriptionResponseOutput struct{ *pulumi.OutputState }

func (MonitoredSubscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoredSubscriptionResponse)(nil)).Elem()
}

func (o MonitoredSubscriptionResponseOutput) ToMonitoredSubscriptionResponseOutput() MonitoredSubscriptionResponseOutput {
	return o
}

func (o MonitoredSubscriptionResponseOutput) ToMonitoredSubscriptionResponseOutputWithContext(ctx context.Context) MonitoredSubscriptionResponseOutput {
	return o
}

func (o MonitoredSubscriptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoredSubscriptionResponse] {
	return pulumix.Output[MonitoredSubscriptionResponse]{
		OutputState: o.OutputState,
	}
}

// The reason of not monitoring the subscription.
func (o MonitoredSubscriptionResponseOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionResponse) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// The state of monitoring.
func (o MonitoredSubscriptionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The subscriptionId to be monitored.
func (o MonitoredSubscriptionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Definition of the properties for a TagRules resource.
func (o MonitoredSubscriptionResponseOutput) TagRules() MonitoringTagRulesPropertiesResponsePtrOutput {
	return o.ApplyT(func(v MonitoredSubscriptionResponse) *MonitoringTagRulesPropertiesResponse { return v.TagRules }).(MonitoringTagRulesPropertiesResponsePtrOutput)
}

type MonitoredSubscriptionResponseArrayOutput struct{ *pulumi.OutputState }

func (MonitoredSubscriptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoredSubscriptionResponse)(nil)).Elem()
}

func (o MonitoredSubscriptionResponseArrayOutput) ToMonitoredSubscriptionResponseArrayOutput() MonitoredSubscriptionResponseArrayOutput {
	return o
}

func (o MonitoredSubscriptionResponseArrayOutput) ToMonitoredSubscriptionResponseArrayOutputWithContext(ctx context.Context) MonitoredSubscriptionResponseArrayOutput {
	return o
}

func (o MonitoredSubscriptionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MonitoredSubscriptionResponse] {
	return pulumix.Output[[]MonitoredSubscriptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o MonitoredSubscriptionResponseArrayOutput) Index(i pulumi.IntInput) MonitoredSubscriptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoredSubscriptionResponse {
		return vs[0].([]MonitoredSubscriptionResponse)[vs[1].(int)]
	}).(MonitoredSubscriptionResponseOutput)
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesProperties struct {
	// Configuration to enable/disable auto-muting flag
	Automuting *bool `pulumi:"automuting"`
	// Set of rules for sending logs for the Monitor resource.
	LogRules *LogRules `pulumi:"logRules"`
	// Set of rules for sending metrics for the Monitor resource.
	MetricRules *MetricRules `pulumi:"metricRules"`
}

// MonitoringTagRulesPropertiesInput is an input type that accepts MonitoringTagRulesPropertiesArgs and MonitoringTagRulesPropertiesOutput values.
// You can construct a concrete instance of `MonitoringTagRulesPropertiesInput` via:
//
//	MonitoringTagRulesPropertiesArgs{...}
type MonitoringTagRulesPropertiesInput interface {
	pulumi.Input

	ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput
	ToMonitoringTagRulesPropertiesOutputWithContext(context.Context) MonitoringTagRulesPropertiesOutput
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesArgs struct {
	// Configuration to enable/disable auto-muting flag
	Automuting pulumi.BoolPtrInput `pulumi:"automuting"`
	// Set of rules for sending logs for the Monitor resource.
	LogRules LogRulesPtrInput `pulumi:"logRules"`
	// Set of rules for sending metrics for the Monitor resource.
	MetricRules MetricRulesPtrInput `pulumi:"metricRules"`
}

func (MonitoringTagRulesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesProperties)(nil)).Elem()
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput {
	return i.ToMonitoringTagRulesPropertiesOutputWithContext(context.Background())
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesOutput)
}

func (i MonitoringTagRulesPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[MonitoringTagRulesProperties] {
	return pulumix.Output[MonitoringTagRulesProperties]{
		OutputState: i.ToMonitoringTagRulesPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return i.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (i MonitoringTagRulesPropertiesArgs) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesOutput).ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx)
}

// MonitoringTagRulesPropertiesPtrInput is an input type that accepts MonitoringTagRulesPropertiesArgs, MonitoringTagRulesPropertiesPtr and MonitoringTagRulesPropertiesPtrOutput values.
// You can construct a concrete instance of `MonitoringTagRulesPropertiesPtrInput` via:
//
//	        MonitoringTagRulesPropertiesArgs{...}
//
//	or:
//
//	        nil
type MonitoringTagRulesPropertiesPtrInput interface {
	pulumi.Input

	ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput
	ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Context) MonitoringTagRulesPropertiesPtrOutput
}

type monitoringTagRulesPropertiesPtrType MonitoringTagRulesPropertiesArgs

func MonitoringTagRulesPropertiesPtr(v *MonitoringTagRulesPropertiesArgs) MonitoringTagRulesPropertiesPtrInput {
	return (*monitoringTagRulesPropertiesPtrType)(v)
}

func (*monitoringTagRulesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTagRulesProperties)(nil)).Elem()
}

func (i *monitoringTagRulesPropertiesPtrType) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return i.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (i *monitoringTagRulesPropertiesPtrType) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTagRulesPropertiesPtrOutput)
}

func (i *monitoringTagRulesPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MonitoringTagRulesProperties] {
	return pulumix.Output[*MonitoringTagRulesProperties]{
		OutputState: i.ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesProperties)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesOutput() MonitoringTagRulesPropertiesOutput {
	return o
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesOutput {
	return o
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return o.ToMonitoringTagRulesPropertiesPtrOutputWithContext(context.Background())
}

func (o MonitoringTagRulesPropertiesOutput) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringTagRulesProperties) *MonitoringTagRulesProperties {
		return &v
	}).(MonitoringTagRulesPropertiesPtrOutput)
}

func (o MonitoringTagRulesPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoringTagRulesProperties] {
	return pulumix.Output[MonitoringTagRulesProperties]{
		OutputState: o.OutputState,
	}
}

// Configuration to enable/disable auto-muting flag
func (o MonitoringTagRulesPropertiesOutput) Automuting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesProperties) *bool { return v.Automuting }).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesOutput) LogRules() LogRulesPtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesProperties) *LogRules { return v.LogRules }).(LogRulesPtrOutput)
}

// Set of rules for sending metrics for the Monitor resource.
func (o MonitoringTagRulesPropertiesOutput) MetricRules() MetricRulesPtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesProperties) *MetricRules { return v.MetricRules }).(MetricRulesPtrOutput)
}

type MonitoringTagRulesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTagRulesProperties)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesPtrOutput) ToMonitoringTagRulesPropertiesPtrOutput() MonitoringTagRulesPropertiesPtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesPtrOutput) ToMonitoringTagRulesPropertiesPtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesPtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitoringTagRulesProperties] {
	return pulumix.Output[*MonitoringTagRulesProperties]{
		OutputState: o.OutputState,
	}
}

func (o MonitoringTagRulesPropertiesPtrOutput) Elem() MonitoringTagRulesPropertiesOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) MonitoringTagRulesProperties {
		if v != nil {
			return *v
		}
		var ret MonitoringTagRulesProperties
		return ret
	}).(MonitoringTagRulesPropertiesOutput)
}

// Configuration to enable/disable auto-muting flag
func (o MonitoringTagRulesPropertiesPtrOutput) Automuting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Automuting
	}).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesPtrOutput) LogRules() LogRulesPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) *LogRules {
		if v == nil {
			return nil
		}
		return v.LogRules
	}).(LogRulesPtrOutput)
}

// Set of rules for sending metrics for the Monitor resource.
func (o MonitoringTagRulesPropertiesPtrOutput) MetricRules() MetricRulesPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesProperties) *MetricRules {
		if v == nil {
			return nil
		}
		return v.MetricRules
	}).(MetricRulesPtrOutput)
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesResponse struct {
	// Configuration to enable/disable auto-muting flag
	Automuting *bool `pulumi:"automuting"`
	// Set of rules for sending logs for the Monitor resource.
	LogRules *LogRulesResponse `pulumi:"logRules"`
	// Set of rules for sending metrics for the Monitor resource.
	MetricRules       *MetricRulesResponse `pulumi:"metricRules"`
	ProvisioningState string               `pulumi:"provisioningState"`
}

// Definition of the properties for a TagRules resource.
type MonitoringTagRulesPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTagRulesPropertiesResponse)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesResponseOutput) ToMonitoringTagRulesPropertiesResponseOutput() MonitoringTagRulesPropertiesResponseOutput {
	return o
}

func (o MonitoringTagRulesPropertiesResponseOutput) ToMonitoringTagRulesPropertiesResponseOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesResponseOutput {
	return o
}

func (o MonitoringTagRulesPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MonitoringTagRulesPropertiesResponse] {
	return pulumix.Output[MonitoringTagRulesPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Configuration to enable/disable auto-muting flag
func (o MonitoringTagRulesPropertiesResponseOutput) Automuting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) *bool { return v.Automuting }).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesResponseOutput) LogRules() LogRulesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) *LogRulesResponse { return v.LogRules }).(LogRulesResponsePtrOutput)
}

// Set of rules for sending metrics for the Monitor resource.
func (o MonitoringTagRulesPropertiesResponseOutput) MetricRules() MetricRulesResponsePtrOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) *MetricRulesResponse { return v.MetricRules }).(MetricRulesResponsePtrOutput)
}

func (o MonitoringTagRulesPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringTagRulesPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type MonitoringTagRulesPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitoringTagRulesPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTagRulesPropertiesResponse)(nil)).Elem()
}

func (o MonitoringTagRulesPropertiesResponsePtrOutput) ToMonitoringTagRulesPropertiesResponsePtrOutput() MonitoringTagRulesPropertiesResponsePtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesResponsePtrOutput) ToMonitoringTagRulesPropertiesResponsePtrOutputWithContext(ctx context.Context) MonitoringTagRulesPropertiesResponsePtrOutput {
	return o
}

func (o MonitoringTagRulesPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitoringTagRulesPropertiesResponse] {
	return pulumix.Output[*MonitoringTagRulesPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o MonitoringTagRulesPropertiesResponsePtrOutput) Elem() MonitoringTagRulesPropertiesResponseOutput {
	return o.ApplyT(func(v *MonitoringTagRulesPropertiesResponse) MonitoringTagRulesPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret MonitoringTagRulesPropertiesResponse
		return ret
	}).(MonitoringTagRulesPropertiesResponseOutput)
}

// Configuration to enable/disable auto-muting flag
func (o MonitoringTagRulesPropertiesResponsePtrOutput) Automuting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Automuting
	}).(pulumi.BoolPtrOutput)
}

// Set of rules for sending logs for the Monitor resource.
func (o MonitoringTagRulesPropertiesResponsePtrOutput) LogRules() LogRulesResponsePtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesPropertiesResponse) *LogRulesResponse {
		if v == nil {
			return nil
		}
		return v.LogRules
	}).(LogRulesResponsePtrOutput)
}

// Set of rules for sending metrics for the Monitor resource.
func (o MonitoringTagRulesPropertiesResponsePtrOutput) MetricRules() MetricRulesResponsePtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesPropertiesResponse) *MetricRulesResponse {
		if v == nil {
			return nil
		}
		return v.MetricRules
	}).(MetricRulesResponsePtrOutput)
}

func (o MonitoringTagRulesPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTagRulesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

type ResourceSku struct {
	// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
	Name string `pulumi:"name"`
}

// ResourceSkuInput is an input type that accepts ResourceSkuArgs and ResourceSkuOutput values.
// You can construct a concrete instance of `ResourceSkuInput` via:
//
//	ResourceSkuArgs{...}
type ResourceSkuInput interface {
	pulumi.Input

	ToResourceSkuOutput() ResourceSkuOutput
	ToResourceSkuOutputWithContext(context.Context) ResourceSkuOutput
}

type ResourceSkuArgs struct {
	// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ResourceSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (i ResourceSkuArgs) ToResourceSkuOutput() ResourceSkuOutput {
	return i.ToResourceSkuOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput)
}

func (i ResourceSkuArgs) ToOutput(ctx context.Context) pulumix.Output[ResourceSku] {
	return pulumix.Output[ResourceSku]{
		OutputState: i.ToResourceSkuOutputWithContext(ctx).OutputState,
	}
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i ResourceSkuArgs) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuOutput).ToResourceSkuPtrOutputWithContext(ctx)
}

// ResourceSkuPtrInput is an input type that accepts ResourceSkuArgs, ResourceSkuPtr and ResourceSkuPtrOutput values.
// You can construct a concrete instance of `ResourceSkuPtrInput` via:
//
//	        ResourceSkuArgs{...}
//
//	or:
//
//	        nil
type ResourceSkuPtrInput interface {
	pulumi.Input

	ToResourceSkuPtrOutput() ResourceSkuPtrOutput
	ToResourceSkuPtrOutputWithContext(context.Context) ResourceSkuPtrOutput
}

type resourceSkuPtrType ResourceSkuArgs

func ResourceSkuPtr(v *ResourceSkuArgs) ResourceSkuPtrInput {
	return (*resourceSkuPtrType)(v)
}

func (*resourceSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return i.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (i *resourceSkuPtrType) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceSkuPtrOutput)
}

func (i *resourceSkuPtrType) ToOutput(ctx context.Context) pulumix.Output[*ResourceSku] {
	return pulumix.Output[*ResourceSku]{
		OutputState: i.ToResourceSkuPtrOutputWithContext(ctx).OutputState,
	}
}

type ResourceSkuOutput struct{ *pulumi.OutputState }

func (ResourceSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSku)(nil)).Elem()
}

func (o ResourceSkuOutput) ToResourceSkuOutput() ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuOutputWithContext(ctx context.Context) ResourceSkuOutput {
	return o
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o.ToResourceSkuPtrOutputWithContext(context.Background())
}

func (o ResourceSkuOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceSku) *ResourceSku {
		return &v
	}).(ResourceSkuPtrOutput)
}

func (o ResourceSkuOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSku] {
	return pulumix.Output[ResourceSku]{
		OutputState: o.OutputState,
	}
}

// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
func (o ResourceSkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSku) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceSkuPtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSku)(nil)).Elem()
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutput() ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) ToResourceSkuPtrOutputWithContext(ctx context.Context) ResourceSkuPtrOutput {
	return o
}

func (o ResourceSkuPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceSku] {
	return pulumix.Output[*ResourceSku]{
		OutputState: o.OutputState,
	}
}

func (o ResourceSkuPtrOutput) Elem() ResourceSkuOutput {
	return o.ApplyT(func(v *ResourceSku) ResourceSku {
		if v != nil {
			return *v
		}
		var ret ResourceSku
		return ret
	}).(ResourceSkuOutput)
}

// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
func (o ResourceSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type ResourceSkuResponse struct {
	// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
	Name string `pulumi:"name"`
}

type ResourceSkuResponseOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutput() ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToResourceSkuResponseOutputWithContext(ctx context.Context) ResourceSkuResponseOutput {
	return o
}

func (o ResourceSkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ResourceSkuResponse] {
	return pulumix.Output[ResourceSkuResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
func (o ResourceSkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceSkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ResourceSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceSkuResponse)(nil)).Elem()
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutput() ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) ToResourceSkuResponsePtrOutputWithContext(ctx context.Context) ResourceSkuResponsePtrOutput {
	return o
}

func (o ResourceSkuResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ResourceSkuResponse] {
	return pulumix.Output[*ResourceSkuResponse]{
		OutputState: o.OutputState,
	}
}

func (o ResourceSkuResponsePtrOutput) Elem() ResourceSkuResponseOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) ResourceSkuResponse {
		if v != nil {
			return *v
		}
		var ret ResourceSkuResponse
		return ret
	}).(ResourceSkuResponseOutput)
}

// Name of the SKU in {PlanId} format. For Terraform, the only allowed value is 'linking'.
func (o ResourceSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceSkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
type SubscriptionList struct {
	// List of subscriptions and the state of the monitoring.
	MonitoredSubscriptionList []MonitoredSubscriptionType `pulumi:"monitoredSubscriptionList"`
	// The operation for the patch on the resource.
	Operation *string `pulumi:"operation"`
}

// SubscriptionListInput is an input type that accepts SubscriptionListArgs and SubscriptionListOutput values.
// You can construct a concrete instance of `SubscriptionListInput` via:
//
//	SubscriptionListArgs{...}
type SubscriptionListInput interface {
	pulumi.Input

	ToSubscriptionListOutput() SubscriptionListOutput
	ToSubscriptionListOutputWithContext(context.Context) SubscriptionListOutput
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
type SubscriptionListArgs struct {
	// List of subscriptions and the state of the monitoring.
	MonitoredSubscriptionList MonitoredSubscriptionTypeArrayInput `pulumi:"monitoredSubscriptionList"`
	// The operation for the patch on the resource.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
}

func (SubscriptionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionList)(nil)).Elem()
}

func (i SubscriptionListArgs) ToSubscriptionListOutput() SubscriptionListOutput {
	return i.ToSubscriptionListOutputWithContext(context.Background())
}

func (i SubscriptionListArgs) ToSubscriptionListOutputWithContext(ctx context.Context) SubscriptionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListOutput)
}

func (i SubscriptionListArgs) ToOutput(ctx context.Context) pulumix.Output[SubscriptionList] {
	return pulumix.Output[SubscriptionList]{
		OutputState: i.ToSubscriptionListOutputWithContext(ctx).OutputState,
	}
}

func (i SubscriptionListArgs) ToSubscriptionListPtrOutput() SubscriptionListPtrOutput {
	return i.ToSubscriptionListPtrOutputWithContext(context.Background())
}

func (i SubscriptionListArgs) ToSubscriptionListPtrOutputWithContext(ctx context.Context) SubscriptionListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListOutput).ToSubscriptionListPtrOutputWithContext(ctx)
}

// SubscriptionListPtrInput is an input type that accepts SubscriptionListArgs, SubscriptionListPtr and SubscriptionListPtrOutput values.
// You can construct a concrete instance of `SubscriptionListPtrInput` via:
//
//	        SubscriptionListArgs{...}
//
//	or:
//
//	        nil
type SubscriptionListPtrInput interface {
	pulumi.Input

	ToSubscriptionListPtrOutput() SubscriptionListPtrOutput
	ToSubscriptionListPtrOutputWithContext(context.Context) SubscriptionListPtrOutput
}

type subscriptionListPtrType SubscriptionListArgs

func SubscriptionListPtr(v *SubscriptionListArgs) SubscriptionListPtrInput {
	return (*subscriptionListPtrType)(v)
}

func (*subscriptionListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionList)(nil)).Elem()
}

func (i *subscriptionListPtrType) ToSubscriptionListPtrOutput() SubscriptionListPtrOutput {
	return i.ToSubscriptionListPtrOutputWithContext(context.Background())
}

func (i *subscriptionListPtrType) ToSubscriptionListPtrOutputWithContext(ctx context.Context) SubscriptionListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionListPtrOutput)
}

func (i *subscriptionListPtrType) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionList] {
	return pulumix.Output[*SubscriptionList]{
		OutputState: i.ToSubscriptionListPtrOutputWithContext(ctx).OutputState,
	}
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
type SubscriptionListOutput struct{ *pulumi.OutputState }

func (SubscriptionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionList)(nil)).Elem()
}

func (o SubscriptionListOutput) ToSubscriptionListOutput() SubscriptionListOutput {
	return o
}

func (o SubscriptionListOutput) ToSubscriptionListOutputWithContext(ctx context.Context) SubscriptionListOutput {
	return o
}

func (o SubscriptionListOutput) ToSubscriptionListPtrOutput() SubscriptionListPtrOutput {
	return o.ToSubscriptionListPtrOutputWithContext(context.Background())
}

func (o SubscriptionListOutput) ToSubscriptionListPtrOutputWithContext(ctx context.Context) SubscriptionListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubscriptionList) *SubscriptionList {
		return &v
	}).(SubscriptionListPtrOutput)
}

func (o SubscriptionListOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionList] {
	return pulumix.Output[SubscriptionList]{
		OutputState: o.OutputState,
	}
}

// List of subscriptions and the state of the monitoring.
func (o SubscriptionListOutput) MonitoredSubscriptionList() MonitoredSubscriptionTypeArrayOutput {
	return o.ApplyT(func(v SubscriptionList) []MonitoredSubscriptionType { return v.MonitoredSubscriptionList }).(MonitoredSubscriptionTypeArrayOutput)
}

// The operation for the patch on the resource.
func (o SubscriptionListOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubscriptionList) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

type SubscriptionListPtrOutput struct{ *pulumi.OutputState }

func (SubscriptionListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionList)(nil)).Elem()
}

func (o SubscriptionListPtrOutput) ToSubscriptionListPtrOutput() SubscriptionListPtrOutput {
	return o
}

func (o SubscriptionListPtrOutput) ToSubscriptionListPtrOutputWithContext(ctx context.Context) SubscriptionListPtrOutput {
	return o
}

func (o SubscriptionListPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SubscriptionList] {
	return pulumix.Output[*SubscriptionList]{
		OutputState: o.OutputState,
	}
}

func (o SubscriptionListPtrOutput) Elem() SubscriptionListOutput {
	return o.ApplyT(func(v *SubscriptionList) SubscriptionList {
		if v != nil {
			return *v
		}
		var ret SubscriptionList
		return ret
	}).(SubscriptionListOutput)
}

// List of subscriptions and the state of the monitoring.
func (o SubscriptionListPtrOutput) MonitoredSubscriptionList() MonitoredSubscriptionTypeArrayOutput {
	return o.ApplyT(func(v *SubscriptionList) []MonitoredSubscriptionType {
		if v == nil {
			return nil
		}
		return v.MonitoredSubscriptionList
	}).(MonitoredSubscriptionTypeArrayOutput)
}

// The operation for the patch on the resource.
func (o SubscriptionListPtrOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionList) *string {
		if v == nil {
			return nil
		}
		return v.Operation
	}).(pulumi.StringPtrOutput)
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
type SubscriptionListResponse struct {
	// List of subscriptions and the state of the monitoring.
	MonitoredSubscriptionList []MonitoredSubscriptionResponse `pulumi:"monitoredSubscriptionList"`
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
type SubscriptionListResponseOutput struct{ *pulumi.OutputState }

func (SubscriptionListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubscriptionListResponse)(nil)).Elem()
}

func (o SubscriptionListResponseOutput) ToSubscriptionListResponseOutput() SubscriptionListResponseOutput {
	return o
}

func (o SubscriptionListResponseOutput) ToSubscriptionListResponseOutputWithContext(ctx context.Context) SubscriptionListResponseOutput {
	return o
}

func (o SubscriptionListResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SubscriptionListResponse] {
	return pulumix.Output[SubscriptionListResponse]{
		OutputState: o.OutputState,
	}
}

// List of subscriptions and the state of the monitoring.
func (o SubscriptionListResponseOutput) MonitoredSubscriptionList() MonitoredSubscriptionResponseArrayOutput {
	return o.ApplyT(func(v SubscriptionListResponse) []MonitoredSubscriptionResponse { return v.MonitoredSubscriptionList }).(MonitoredSubscriptionResponseArrayOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Includes name, email and optionally, phone number. User Information can't be null.
type UserInfo struct {
	// Email of the user used by Datadog for contacting them if needed
	EmailAddress *string `pulumi:"emailAddress"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Phone number of the user used by Datadog for contacting them if needed
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// UserInfoInput is an input type that accepts UserInfoArgs and UserInfoOutput values.
// You can construct a concrete instance of `UserInfoInput` via:
//
//	UserInfoArgs{...}
type UserInfoInput interface {
	pulumi.Input

	ToUserInfoOutput() UserInfoOutput
	ToUserInfoOutputWithContext(context.Context) UserInfoOutput
}

// Includes name, email and optionally, phone number. User Information can't be null.
type UserInfoArgs struct {
	// Email of the user used by Datadog for contacting them if needed
	EmailAddress pulumi.StringPtrInput `pulumi:"emailAddress"`
	// Name of the user
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Phone number of the user used by Datadog for contacting them if needed
	PhoneNumber pulumi.StringPtrInput `pulumi:"phoneNumber"`
}

func (UserInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (i UserInfoArgs) ToUserInfoOutput() UserInfoOutput {
	return i.ToUserInfoOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput)
}

func (i UserInfoArgs) ToOutput(ctx context.Context) pulumix.Output[UserInfo] {
	return pulumix.Output[UserInfo]{
		OutputState: i.ToUserInfoOutputWithContext(ctx).OutputState,
	}
}

func (i UserInfoArgs) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i UserInfoArgs) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoOutput).ToUserInfoPtrOutputWithContext(ctx)
}

// UserInfoPtrInput is an input type that accepts UserInfoArgs, UserInfoPtr and UserInfoPtrOutput values.
// You can construct a concrete instance of `UserInfoPtrInput` via:
//
//	        UserInfoArgs{...}
//
//	or:
//
//	        nil
type UserInfoPtrInput interface {
	pulumi.Input

	ToUserInfoPtrOutput() UserInfoPtrOutput
	ToUserInfoPtrOutputWithContext(context.Context) UserInfoPtrOutput
}

type userInfoPtrType UserInfoArgs

func UserInfoPtr(v *UserInfoArgs) UserInfoPtrInput {
	return (*userInfoPtrType)(v)
}

func (*userInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (i *userInfoPtrType) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return i.ToUserInfoPtrOutputWithContext(context.Background())
}

func (i *userInfoPtrType) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserInfoPtrOutput)
}

func (i *userInfoPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserInfo] {
	return pulumix.Output[*UserInfo]{
		OutputState: i.ToUserInfoPtrOutputWithContext(ctx).OutputState,
	}
}

// Includes name, email and optionally, phone number. User Information can't be null.
type UserInfoOutput struct{ *pulumi.OutputState }

func (UserInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfo)(nil)).Elem()
}

func (o UserInfoOutput) ToUserInfoOutput() UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoOutputWithContext(ctx context.Context) UserInfoOutput {
	return o
}

func (o UserInfoOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o.ToUserInfoPtrOutputWithContext(context.Background())
}

func (o UserInfoOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserInfo) *UserInfo {
		return &v
	}).(UserInfoPtrOutput)
}

func (o UserInfoOutput) ToOutput(ctx context.Context) pulumix.Output[UserInfo] {
	return pulumix.Output[UserInfo]{
		OutputState: o.OutputState,
	}
}

// Email of the user used by Datadog for contacting them if needed
func (o UserInfoOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

// Name of the user
func (o UserInfoOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Datadog for contacting them if needed
func (o UserInfoOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfo) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type UserInfoPtrOutput struct{ *pulumi.OutputState }

func (UserInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfo)(nil)).Elem()
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutput() UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToUserInfoPtrOutputWithContext(ctx context.Context) UserInfoPtrOutput {
	return o
}

func (o UserInfoPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserInfo] {
	return pulumix.Output[*UserInfo]{
		OutputState: o.OutputState,
	}
}

func (o UserInfoPtrOutput) Elem() UserInfoOutput {
	return o.ApplyT(func(v *UserInfo) UserInfo {
		if v != nil {
			return *v
		}
		var ret UserInfo
		return ret
	}).(UserInfoOutput)
}

// Email of the user used by Datadog for contacting them if needed
func (o UserInfoPtrOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringPtrOutput)
}

// Name of the user
func (o UserInfoPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Datadog for contacting them if needed
func (o UserInfoPtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfo) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

// Includes name, email and optionally, phone number. User Information can't be null.
type UserInfoResponse struct {
	// Email of the user used by Datadog for contacting them if needed
	EmailAddress *string `pulumi:"emailAddress"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Phone number of the user used by Datadog for contacting them if needed
	PhoneNumber *string `pulumi:"phoneNumber"`
}

// Includes name, email and optionally, phone number. User Information can't be null.
type UserInfoResponseOutput struct{ *pulumi.OutputState }

func (UserInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutput() UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToUserInfoResponseOutputWithContext(ctx context.Context) UserInfoResponseOutput {
	return o
}

func (o UserInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserInfoResponse] {
	return pulumix.Output[UserInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Email of the user used by Datadog for contacting them if needed
func (o UserInfoResponseOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.EmailAddress }).(pulumi.StringPtrOutput)
}

// Name of the user
func (o UserInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Datadog for contacting them if needed
func (o UserInfoResponseOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserInfoResponse) *string { return v.PhoneNumber }).(pulumi.StringPtrOutput)
}

type UserInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (UserInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserInfoResponse)(nil)).Elem()
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutput() UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) ToUserInfoResponsePtrOutputWithContext(ctx context.Context) UserInfoResponsePtrOutput {
	return o
}

func (o UserInfoResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserInfoResponse] {
	return pulumix.Output[*UserInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserInfoResponsePtrOutput) Elem() UserInfoResponseOutput {
	return o.ApplyT(func(v *UserInfoResponse) UserInfoResponse {
		if v != nil {
			return *v
		}
		var ret UserInfoResponse
		return ret
	}).(UserInfoResponseOutput)
}

// Email of the user used by Datadog for contacting them if needed
func (o UserInfoResponsePtrOutput) EmailAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.EmailAddress
	}).(pulumi.StringPtrOutput)
}

// Name of the user
func (o UserInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Phone number of the user used by Datadog for contacting them if needed
func (o UserInfoResponsePtrOutput) PhoneNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.PhoneNumber
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DatadogApiKeyResponseOutput{})
	pulumi.RegisterOutputType(DatadogApiKeyResponseArrayOutput{})
	pulumi.RegisterOutputType(DatadogHostMetadataResponseOutput{})
	pulumi.RegisterOutputType(DatadogHostMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(DatadogHostResponseOutput{})
	pulumi.RegisterOutputType(DatadogHostResponseArrayOutput{})
	pulumi.RegisterOutputType(DatadogInstallMethodResponseOutput{})
	pulumi.RegisterOutputType(DatadogInstallMethodResponsePtrOutput{})
	pulumi.RegisterOutputType(DatadogLogsAgentResponseOutput{})
	pulumi.RegisterOutputType(DatadogLogsAgentResponsePtrOutput{})
	pulumi.RegisterOutputType(DatadogOrganizationPropertiesOutput{})
	pulumi.RegisterOutputType(DatadogOrganizationPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatadogOrganizationPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatadogOrganizationPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(FilteringTagOutput{})
	pulumi.RegisterOutputType(FilteringTagArrayOutput{})
	pulumi.RegisterOutputType(FilteringTagResponseOutput{})
	pulumi.RegisterOutputType(FilteringTagResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesPtrOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponseOutput{})
	pulumi.RegisterOutputType(IdentityPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedResourceResponseOutput{})
	pulumi.RegisterOutputType(LinkedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(LogRulesOutput{})
	pulumi.RegisterOutputType(LogRulesPtrOutput{})
	pulumi.RegisterOutputType(LogRulesResponseOutput{})
	pulumi.RegisterOutputType(LogRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(MetricRulesOutput{})
	pulumi.RegisterOutputType(MetricRulesPtrOutput{})
	pulumi.RegisterOutputType(MetricRulesResponseOutput{})
	pulumi.RegisterOutputType(MetricRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MonitorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MonitoredResourceResponseOutput{})
	pulumi.RegisterOutputType(MonitoredResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitoredSubscriptionTypeOutput{})
	pulumi.RegisterOutputType(MonitoredSubscriptionTypeArrayOutput{})
	pulumi.RegisterOutputType(MonitoredSubscriptionResponseOutput{})
	pulumi.RegisterOutputType(MonitoredSubscriptionResponseArrayOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MonitoringTagRulesPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuOutput{})
	pulumi.RegisterOutputType(ResourceSkuPtrOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponseOutput{})
	pulumi.RegisterOutputType(ResourceSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SubscriptionListOutput{})
	pulumi.RegisterOutputType(SubscriptionListPtrOutput{})
	pulumi.RegisterOutputType(SubscriptionListResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserInfoOutput{})
	pulumi.RegisterOutputType(UserInfoPtrOutput{})
	pulumi.RegisterOutputType(UserInfoResponseOutput{})
	pulumi.RegisterOutputType(UserInfoResponsePtrOutput{})
}
