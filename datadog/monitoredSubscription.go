// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
// Azure REST API version: 2023-01-01.
type MonitoredSubscription struct {
	pulumi.CustomResourceState

	// Name of the monitored subscription resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
	Properties SubscriptionListResponseOutput `pulumi:"properties"`
	// The type of the monitored subscription resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMonitoredSubscription registers a new resource with the given unique name, arguments, and options.
func NewMonitoredSubscription(ctx *pulumi.Context,
	name string, args *MonitoredSubscriptionArgs, opts ...pulumi.ResourceOption) (*MonitoredSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datadog/v20230101:MonitoredSubscription"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MonitoredSubscription
	err := ctx.RegisterResource("azure-native:datadog:MonitoredSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoredSubscription gets an existing MonitoredSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoredSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoredSubscriptionState, opts ...pulumi.ResourceOption) (*MonitoredSubscription, error) {
	var resource MonitoredSubscription
	err := ctx.ReadResource("azure-native:datadog:MonitoredSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoredSubscription resources.
type monitoredSubscriptionState struct {
}

type MonitoredSubscriptionState struct {
}

func (MonitoredSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredSubscriptionState)(nil)).Elem()
}

type monitoredSubscriptionArgs struct {
	// The configuration name. Only 'default' value is supported.
	ConfigurationName *string `pulumi:"configurationName"`
	// Monitor resource name
	MonitorName string `pulumi:"monitorName"`
	// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
	Properties *SubscriptionList `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a MonitoredSubscription resource.
type MonitoredSubscriptionArgs struct {
	// The configuration name. Only 'default' value is supported.
	ConfigurationName pulumi.StringPtrInput
	// Monitor resource name
	MonitorName pulumi.StringInput
	// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
	Properties SubscriptionListPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (MonitoredSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoredSubscriptionArgs)(nil)).Elem()
}

type MonitoredSubscriptionInput interface {
	pulumi.Input

	ToMonitoredSubscriptionOutput() MonitoredSubscriptionOutput
	ToMonitoredSubscriptionOutputWithContext(ctx context.Context) MonitoredSubscriptionOutput
}

func (*MonitoredSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredSubscription)(nil)).Elem()
}

func (i *MonitoredSubscription) ToMonitoredSubscriptionOutput() MonitoredSubscriptionOutput {
	return i.ToMonitoredSubscriptionOutputWithContext(context.Background())
}

func (i *MonitoredSubscription) ToMonitoredSubscriptionOutputWithContext(ctx context.Context) MonitoredSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoredSubscriptionOutput)
}

func (i *MonitoredSubscription) ToOutput(ctx context.Context) pulumix.Output[*MonitoredSubscription] {
	return pulumix.Output[*MonitoredSubscription]{
		OutputState: i.ToMonitoredSubscriptionOutputWithContext(ctx).OutputState,
	}
}

type MonitoredSubscriptionOutput struct{ *pulumi.OutputState }

func (MonitoredSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoredSubscription)(nil)).Elem()
}

func (o MonitoredSubscriptionOutput) ToMonitoredSubscriptionOutput() MonitoredSubscriptionOutput {
	return o
}

func (o MonitoredSubscriptionOutput) ToMonitoredSubscriptionOutputWithContext(ctx context.Context) MonitoredSubscriptionOutput {
	return o
}

func (o MonitoredSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[*MonitoredSubscription] {
	return pulumix.Output[*MonitoredSubscription]{
		OutputState: o.OutputState,
	}
}

// Name of the monitored subscription resource.
func (o MonitoredSubscriptionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredSubscription) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The request to update subscriptions needed to be monitored by the Datadog monitor resource.
func (o MonitoredSubscriptionOutput) Properties() SubscriptionListResponseOutput {
	return o.ApplyT(func(v *MonitoredSubscription) SubscriptionListResponseOutput { return v.Properties }).(SubscriptionListResponseOutput)
}

// The type of the monitored subscription resource.
func (o MonitoredSubscriptionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *MonitoredSubscription) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(MonitoredSubscriptionOutput{})
}
