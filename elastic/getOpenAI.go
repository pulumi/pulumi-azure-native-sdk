// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elastic

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Capture properties of Open AI resource Integration.
// Azure REST API version: 2024-03-01.
//
// Other available API versions: 2024-01-01-preview, 2024-05-01-preview, 2024-06-15-preview.
func LookupOpenAI(ctx *pulumi.Context, args *LookupOpenAIArgs, opts ...pulumi.InvokeOption) (*LookupOpenAIResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupOpenAIResult
	err := ctx.Invoke("azure-native:elastic:getOpenAI", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupOpenAIArgs struct {
	// OpenAI Integration name
	IntegrationName string `pulumi:"integrationName"`
	// Monitor resource name
	MonitorName string `pulumi:"monitorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Capture properties of Open AI resource Integration.
type LookupOpenAIResult struct {
	// The id of the integration.
	Id string `pulumi:"id"`
	// Name of the integration.
	Name string `pulumi:"name"`
	// Open AI Integration details.
	Properties OpenAIIntegrationPropertiesResponse `pulumi:"properties"`
	// The type of the integration.
	Type string `pulumi:"type"`
}

func LookupOpenAIOutput(ctx *pulumi.Context, args LookupOpenAIOutputArgs, opts ...pulumi.InvokeOption) LookupOpenAIResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOpenAIResult, error) {
			args := v.(LookupOpenAIArgs)
			r, err := LookupOpenAI(ctx, &args, opts...)
			var s LookupOpenAIResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOpenAIResultOutput)
}

type LookupOpenAIOutputArgs struct {
	// OpenAI Integration name
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Monitor resource name
	MonitorName pulumi.StringInput `pulumi:"monitorName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupOpenAIOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenAIArgs)(nil)).Elem()
}

// Capture properties of Open AI resource Integration.
type LookupOpenAIResultOutput struct{ *pulumi.OutputState }

func (LookupOpenAIResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOpenAIResult)(nil)).Elem()
}

func (o LookupOpenAIResultOutput) ToLookupOpenAIResultOutput() LookupOpenAIResultOutput {
	return o
}

func (o LookupOpenAIResultOutput) ToLookupOpenAIResultOutputWithContext(ctx context.Context) LookupOpenAIResultOutput {
	return o
}

// The id of the integration.
func (o LookupOpenAIResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenAIResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the integration.
func (o LookupOpenAIResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenAIResult) string { return v.Name }).(pulumi.StringOutput)
}

// Open AI Integration details.
func (o LookupOpenAIResultOutput) Properties() OpenAIIntegrationPropertiesResponseOutput {
	return o.ApplyT(func(v LookupOpenAIResult) OpenAIIntegrationPropertiesResponse { return v.Properties }).(OpenAIIntegrationPropertiesResponseOutput)
}

// The type of the integration.
func (o LookupOpenAIResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOpenAIResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOpenAIResultOutput{})
}
