// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20241001preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Capture properties of Open AI resource Integration.
type OpenAI struct {
	pulumi.CustomResourceState

	// Name of the integration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Open AI Integration details.
	Properties OpenAIIntegrationPropertiesResponseOutput `pulumi:"properties"`
	// The type of the integration.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOpenAI registers a new resource with the given unique name, arguments, and options.
func NewOpenAI(ctx *pulumi.Context,
	name string, args *OpenAIArgs, opts ...pulumi.ResourceOption) (*OpenAI, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorName == nil {
		return nil, errors.New("invalid value for required argument 'MonitorName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:elastic/v20240101preview:OpenAI"),
		},
		{
			Type: pulumi.String("azure-native:elastic/v20240301:OpenAI"),
		},
		{
			Type: pulumi.String("azure-native:elastic/v20240501preview:OpenAI"),
		},
		{
			Type: pulumi.String("azure-native:elastic/v20240615preview:OpenAI"),
		},
		{
			Type: pulumi.String("azure-native:elastic:OpenAI"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OpenAI
	err := ctx.RegisterResource("azure-native:elastic/v20241001preview:OpenAI", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOpenAI gets an existing OpenAI resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOpenAI(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OpenAIState, opts ...pulumi.ResourceOption) (*OpenAI, error) {
	var resource OpenAI
	err := ctx.ReadResource("azure-native:elastic/v20241001preview:OpenAI", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OpenAI resources.
type openAIState struct {
}

type OpenAIState struct {
}

func (OpenAIState) ElementType() reflect.Type {
	return reflect.TypeOf((*openAIState)(nil)).Elem()
}

type openAIArgs struct {
	// OpenAI Integration name
	IntegrationName *string `pulumi:"integrationName"`
	// Monitor resource name
	MonitorName string `pulumi:"monitorName"`
	// Open AI Integration details.
	Properties *OpenAIIntegrationProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a OpenAI resource.
type OpenAIArgs struct {
	// OpenAI Integration name
	IntegrationName pulumi.StringPtrInput
	// Monitor resource name
	MonitorName pulumi.StringInput
	// Open AI Integration details.
	Properties OpenAIIntegrationPropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
}

func (OpenAIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*openAIArgs)(nil)).Elem()
}

type OpenAIInput interface {
	pulumi.Input

	ToOpenAIOutput() OpenAIOutput
	ToOpenAIOutputWithContext(ctx context.Context) OpenAIOutput
}

func (*OpenAI) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenAI)(nil)).Elem()
}

func (i *OpenAI) ToOpenAIOutput() OpenAIOutput {
	return i.ToOpenAIOutputWithContext(context.Background())
}

func (i *OpenAI) ToOpenAIOutputWithContext(ctx context.Context) OpenAIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenAIOutput)
}

type OpenAIOutput struct{ *pulumi.OutputState }

func (OpenAIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OpenAI)(nil)).Elem()
}

func (o OpenAIOutput) ToOpenAIOutput() OpenAIOutput {
	return o
}

func (o OpenAIOutput) ToOpenAIOutputWithContext(ctx context.Context) OpenAIOutput {
	return o
}

// Name of the integration.
func (o OpenAIOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenAI) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Open AI Integration details.
func (o OpenAIOutput) Properties() OpenAIIntegrationPropertiesResponseOutput {
	return o.ApplyT(func(v *OpenAI) OpenAIIntegrationPropertiesResponseOutput { return v.Properties }).(OpenAIIntegrationPropertiesResponseOutput)
}

// The type of the integration.
func (o OpenAIOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OpenAI) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(OpenAIOutput{})
}
