// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230601

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Specifies a CORS rule for the Map Account.
type CorsRule struct {
	// Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// CorsRuleInput is an input type that accepts CorsRuleArgs and CorsRuleOutput values.
// You can construct a concrete instance of `CorsRuleInput` via:
//
//	CorsRuleArgs{...}
type CorsRuleInput interface {
	pulumi.Input

	ToCorsRuleOutput() CorsRuleOutput
	ToCorsRuleOutputWithContext(context.Context) CorsRuleOutput
}

// Specifies a CORS rule for the Map Account.
type CorsRuleArgs struct {
	// Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
	AllowedOrigins pulumi.StringArrayInput `pulumi:"allowedOrigins"`
}

func (CorsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRule)(nil)).Elem()
}

func (i CorsRuleArgs) ToCorsRuleOutput() CorsRuleOutput {
	return i.ToCorsRuleOutputWithContext(context.Background())
}

func (i CorsRuleArgs) ToCorsRuleOutputWithContext(ctx context.Context) CorsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsRuleOutput)
}

func (i CorsRuleArgs) ToOutput(ctx context.Context) pulumix.Output[CorsRule] {
	return pulumix.Output[CorsRule]{
		OutputState: i.ToCorsRuleOutputWithContext(ctx).OutputState,
	}
}

// CorsRuleArrayInput is an input type that accepts CorsRuleArray and CorsRuleArrayOutput values.
// You can construct a concrete instance of `CorsRuleArrayInput` via:
//
//	CorsRuleArray{ CorsRuleArgs{...} }
type CorsRuleArrayInput interface {
	pulumi.Input

	ToCorsRuleArrayOutput() CorsRuleArrayOutput
	ToCorsRuleArrayOutputWithContext(context.Context) CorsRuleArrayOutput
}

type CorsRuleArray []CorsRuleInput

func (CorsRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorsRule)(nil)).Elem()
}

func (i CorsRuleArray) ToCorsRuleArrayOutput() CorsRuleArrayOutput {
	return i.ToCorsRuleArrayOutputWithContext(context.Background())
}

func (i CorsRuleArray) ToCorsRuleArrayOutputWithContext(ctx context.Context) CorsRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsRuleArrayOutput)
}

func (i CorsRuleArray) ToOutput(ctx context.Context) pulumix.Output[[]CorsRule] {
	return pulumix.Output[[]CorsRule]{
		OutputState: i.ToCorsRuleArrayOutputWithContext(ctx).OutputState,
	}
}

// Specifies a CORS rule for the Map Account.
type CorsRuleOutput struct{ *pulumi.OutputState }

func (CorsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRule)(nil)).Elem()
}

func (o CorsRuleOutput) ToCorsRuleOutput() CorsRuleOutput {
	return o
}

func (o CorsRuleOutput) ToCorsRuleOutputWithContext(ctx context.Context) CorsRuleOutput {
	return o
}

func (o CorsRuleOutput) ToOutput(ctx context.Context) pulumix.Output[CorsRule] {
	return pulumix.Output[CorsRule]{
		OutputState: o.OutputState,
	}
}

// Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
func (o CorsRuleOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsRule) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type CorsRuleArrayOutput struct{ *pulumi.OutputState }

func (CorsRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorsRule)(nil)).Elem()
}

func (o CorsRuleArrayOutput) ToCorsRuleArrayOutput() CorsRuleArrayOutput {
	return o
}

func (o CorsRuleArrayOutput) ToCorsRuleArrayOutputWithContext(ctx context.Context) CorsRuleArrayOutput {
	return o
}

func (o CorsRuleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CorsRule] {
	return pulumix.Output[[]CorsRule]{
		OutputState: o.OutputState,
	}
}

func (o CorsRuleArrayOutput) Index(i pulumi.IntInput) CorsRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CorsRule {
		return vs[0].([]CorsRule)[vs[1].(int)]
	}).(CorsRuleOutput)
}

// Specifies a CORS rule for the Map Account.
type CorsRuleResponse struct {
	// Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
	AllowedOrigins []string `pulumi:"allowedOrigins"`
}

// Specifies a CORS rule for the Map Account.
type CorsRuleResponseOutput struct{ *pulumi.OutputState }

func (CorsRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRuleResponse)(nil)).Elem()
}

func (o CorsRuleResponseOutput) ToCorsRuleResponseOutput() CorsRuleResponseOutput {
	return o
}

func (o CorsRuleResponseOutput) ToCorsRuleResponseOutputWithContext(ctx context.Context) CorsRuleResponseOutput {
	return o
}

func (o CorsRuleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CorsRuleResponse] {
	return pulumix.Output[CorsRuleResponse]{
		OutputState: o.OutputState,
	}
}

// Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or "*" to allow all domains
func (o CorsRuleResponseOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CorsRuleResponse) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

type CorsRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (CorsRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorsRuleResponse)(nil)).Elem()
}

func (o CorsRuleResponseArrayOutput) ToCorsRuleResponseArrayOutput() CorsRuleResponseArrayOutput {
	return o
}

func (o CorsRuleResponseArrayOutput) ToCorsRuleResponseArrayOutputWithContext(ctx context.Context) CorsRuleResponseArrayOutput {
	return o
}

func (o CorsRuleResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CorsRuleResponse] {
	return pulumix.Output[[]CorsRuleResponse]{
		OutputState: o.OutputState,
	}
}

func (o CorsRuleResponseArrayOutput) Index(i pulumi.IntInput) CorsRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CorsRuleResponse {
		return vs[0].([]CorsRuleResponse)[vs[1].(int)]
	}).(CorsRuleResponseOutput)
}

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRules struct {
	// The list of CORS rules. You can include up to five CorsRule elements in the request.
	CorsRules []CorsRule `pulumi:"corsRules"`
}

// CorsRulesInput is an input type that accepts CorsRulesArgs and CorsRulesOutput values.
// You can construct a concrete instance of `CorsRulesInput` via:
//
//	CorsRulesArgs{...}
type CorsRulesInput interface {
	pulumi.Input

	ToCorsRulesOutput() CorsRulesOutput
	ToCorsRulesOutputWithContext(context.Context) CorsRulesOutput
}

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRulesArgs struct {
	// The list of CORS rules. You can include up to five CorsRule elements in the request.
	CorsRules CorsRuleArrayInput `pulumi:"corsRules"`
}

func (CorsRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRules)(nil)).Elem()
}

func (i CorsRulesArgs) ToCorsRulesOutput() CorsRulesOutput {
	return i.ToCorsRulesOutputWithContext(context.Background())
}

func (i CorsRulesArgs) ToCorsRulesOutputWithContext(ctx context.Context) CorsRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsRulesOutput)
}

func (i CorsRulesArgs) ToOutput(ctx context.Context) pulumix.Output[CorsRules] {
	return pulumix.Output[CorsRules]{
		OutputState: i.ToCorsRulesOutputWithContext(ctx).OutputState,
	}
}

func (i CorsRulesArgs) ToCorsRulesPtrOutput() CorsRulesPtrOutput {
	return i.ToCorsRulesPtrOutputWithContext(context.Background())
}

func (i CorsRulesArgs) ToCorsRulesPtrOutputWithContext(ctx context.Context) CorsRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsRulesOutput).ToCorsRulesPtrOutputWithContext(ctx)
}

// CorsRulesPtrInput is an input type that accepts CorsRulesArgs, CorsRulesPtr and CorsRulesPtrOutput values.
// You can construct a concrete instance of `CorsRulesPtrInput` via:
//
//	        CorsRulesArgs{...}
//
//	or:
//
//	        nil
type CorsRulesPtrInput interface {
	pulumi.Input

	ToCorsRulesPtrOutput() CorsRulesPtrOutput
	ToCorsRulesPtrOutputWithContext(context.Context) CorsRulesPtrOutput
}

type corsRulesPtrType CorsRulesArgs

func CorsRulesPtr(v *CorsRulesArgs) CorsRulesPtrInput {
	return (*corsRulesPtrType)(v)
}

func (*corsRulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsRules)(nil)).Elem()
}

func (i *corsRulesPtrType) ToCorsRulesPtrOutput() CorsRulesPtrOutput {
	return i.ToCorsRulesPtrOutputWithContext(context.Background())
}

func (i *corsRulesPtrType) ToCorsRulesPtrOutputWithContext(ctx context.Context) CorsRulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorsRulesPtrOutput)
}

func (i *corsRulesPtrType) ToOutput(ctx context.Context) pulumix.Output[*CorsRules] {
	return pulumix.Output[*CorsRules]{
		OutputState: i.ToCorsRulesPtrOutputWithContext(ctx).OutputState,
	}
}

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRulesOutput struct{ *pulumi.OutputState }

func (CorsRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRules)(nil)).Elem()
}

func (o CorsRulesOutput) ToCorsRulesOutput() CorsRulesOutput {
	return o
}

func (o CorsRulesOutput) ToCorsRulesOutputWithContext(ctx context.Context) CorsRulesOutput {
	return o
}

func (o CorsRulesOutput) ToCorsRulesPtrOutput() CorsRulesPtrOutput {
	return o.ToCorsRulesPtrOutputWithContext(context.Background())
}

func (o CorsRulesOutput) ToCorsRulesPtrOutputWithContext(ctx context.Context) CorsRulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CorsRules) *CorsRules {
		return &v
	}).(CorsRulesPtrOutput)
}

func (o CorsRulesOutput) ToOutput(ctx context.Context) pulumix.Output[CorsRules] {
	return pulumix.Output[CorsRules]{
		OutputState: o.OutputState,
	}
}

// The list of CORS rules. You can include up to five CorsRule elements in the request.
func (o CorsRulesOutput) CorsRules() CorsRuleArrayOutput {
	return o.ApplyT(func(v CorsRules) []CorsRule { return v.CorsRules }).(CorsRuleArrayOutput)
}

type CorsRulesPtrOutput struct{ *pulumi.OutputState }

func (CorsRulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsRules)(nil)).Elem()
}

func (o CorsRulesPtrOutput) ToCorsRulesPtrOutput() CorsRulesPtrOutput {
	return o
}

func (o CorsRulesPtrOutput) ToCorsRulesPtrOutputWithContext(ctx context.Context) CorsRulesPtrOutput {
	return o
}

func (o CorsRulesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CorsRules] {
	return pulumix.Output[*CorsRules]{
		OutputState: o.OutputState,
	}
}

func (o CorsRulesPtrOutput) Elem() CorsRulesOutput {
	return o.ApplyT(func(v *CorsRules) CorsRules {
		if v != nil {
			return *v
		}
		var ret CorsRules
		return ret
	}).(CorsRulesOutput)
}

// The list of CORS rules. You can include up to five CorsRule elements in the request.
func (o CorsRulesPtrOutput) CorsRules() CorsRuleArrayOutput {
	return o.ApplyT(func(v *CorsRules) []CorsRule {
		if v == nil {
			return nil
		}
		return v.CorsRules
	}).(CorsRuleArrayOutput)
}

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRulesResponse struct {
	// The list of CORS rules. You can include up to five CorsRule elements in the request.
	CorsRules []CorsRuleResponse `pulumi:"corsRules"`
}

// Sets the CORS rules. You can include up to five CorsRule elements in the request.
type CorsRulesResponseOutput struct{ *pulumi.OutputState }

func (CorsRulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorsRulesResponse)(nil)).Elem()
}

func (o CorsRulesResponseOutput) ToCorsRulesResponseOutput() CorsRulesResponseOutput {
	return o
}

func (o CorsRulesResponseOutput) ToCorsRulesResponseOutputWithContext(ctx context.Context) CorsRulesResponseOutput {
	return o
}

func (o CorsRulesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CorsRulesResponse] {
	return pulumix.Output[CorsRulesResponse]{
		OutputState: o.OutputState,
	}
}

// The list of CORS rules. You can include up to five CorsRule elements in the request.
func (o CorsRulesResponseOutput) CorsRules() CorsRuleResponseArrayOutput {
	return o.ApplyT(func(v CorsRulesResponse) []CorsRuleResponse { return v.CorsRules }).(CorsRuleResponseArrayOutput)
}

type CorsRulesResponsePtrOutput struct{ *pulumi.OutputState }

func (CorsRulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorsRulesResponse)(nil)).Elem()
}

func (o CorsRulesResponsePtrOutput) ToCorsRulesResponsePtrOutput() CorsRulesResponsePtrOutput {
	return o
}

func (o CorsRulesResponsePtrOutput) ToCorsRulesResponsePtrOutputWithContext(ctx context.Context) CorsRulesResponsePtrOutput {
	return o
}

func (o CorsRulesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CorsRulesResponse] {
	return pulumix.Output[*CorsRulesResponse]{
		OutputState: o.OutputState,
	}
}

func (o CorsRulesResponsePtrOutput) Elem() CorsRulesResponseOutput {
	return o.ApplyT(func(v *CorsRulesResponse) CorsRulesResponse {
		if v != nil {
			return *v
		}
		var ret CorsRulesResponse
		return ret
	}).(CorsRulesResponseOutput)
}

// The list of CORS rules. You can include up to five CorsRule elements in the request.
func (o CorsRulesResponsePtrOutput) CorsRules() CorsRuleResponseArrayOutput {
	return o.ApplyT(func(v *CorsRulesResponse) []CorsRuleResponse {
		if v == nil {
			return nil
		}
		return v.CorsRules
	}).(CorsRuleResponseArrayOutput)
}

// Creator resource properties
type CreatorProperties struct {
	// The storage units to be allocated. Integer values from 1 to 100, inclusive.
	StorageUnits int `pulumi:"storageUnits"`
}

// CreatorPropertiesInput is an input type that accepts CreatorPropertiesArgs and CreatorPropertiesOutput values.
// You can construct a concrete instance of `CreatorPropertiesInput` via:
//
//	CreatorPropertiesArgs{...}
type CreatorPropertiesInput interface {
	pulumi.Input

	ToCreatorPropertiesOutput() CreatorPropertiesOutput
	ToCreatorPropertiesOutputWithContext(context.Context) CreatorPropertiesOutput
}

// Creator resource properties
type CreatorPropertiesArgs struct {
	// The storage units to be allocated. Integer values from 1 to 100, inclusive.
	StorageUnits pulumi.IntInput `pulumi:"storageUnits"`
}

func (CreatorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatorProperties)(nil)).Elem()
}

func (i CreatorPropertiesArgs) ToCreatorPropertiesOutput() CreatorPropertiesOutput {
	return i.ToCreatorPropertiesOutputWithContext(context.Background())
}

func (i CreatorPropertiesArgs) ToCreatorPropertiesOutputWithContext(ctx context.Context) CreatorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreatorPropertiesOutput)
}

func (i CreatorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[CreatorProperties] {
	return pulumix.Output[CreatorProperties]{
		OutputState: i.ToCreatorPropertiesOutputWithContext(ctx).OutputState,
	}
}

// Creator resource properties
type CreatorPropertiesOutput struct{ *pulumi.OutputState }

func (CreatorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatorProperties)(nil)).Elem()
}

func (o CreatorPropertiesOutput) ToCreatorPropertiesOutput() CreatorPropertiesOutput {
	return o
}

func (o CreatorPropertiesOutput) ToCreatorPropertiesOutputWithContext(ctx context.Context) CreatorPropertiesOutput {
	return o
}

func (o CreatorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[CreatorProperties] {
	return pulumix.Output[CreatorProperties]{
		OutputState: o.OutputState,
	}
}

// The storage units to be allocated. Integer values from 1 to 100, inclusive.
func (o CreatorPropertiesOutput) StorageUnits() pulumi.IntOutput {
	return o.ApplyT(func(v CreatorProperties) int { return v.StorageUnits }).(pulumi.IntOutput)
}

// Creator resource properties
type CreatorPropertiesResponse struct {
	// The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
	ProvisioningState string `pulumi:"provisioningState"`
	// The storage units to be allocated. Integer values from 1 to 100, inclusive.
	StorageUnits int `pulumi:"storageUnits"`
}

// Creator resource properties
type CreatorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CreatorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreatorPropertiesResponse)(nil)).Elem()
}

func (o CreatorPropertiesResponseOutput) ToCreatorPropertiesResponseOutput() CreatorPropertiesResponseOutput {
	return o
}

func (o CreatorPropertiesResponseOutput) ToCreatorPropertiesResponseOutputWithContext(ctx context.Context) CreatorPropertiesResponseOutput {
	return o
}

func (o CreatorPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CreatorPropertiesResponse] {
	return pulumix.Output[CreatorPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// The state of the resource provisioning, terminal states: Succeeded, Failed, Canceled
func (o CreatorPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CreatorPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The storage units to be allocated. Integer values from 1 to 100, inclusive.
func (o CreatorPropertiesResponseOutput) StorageUnits() pulumi.IntOutput {
	return o.ApplyT(func(v CreatorPropertiesResponse) int { return v.StorageUnits }).(pulumi.IntOutput)
}

// All Customer-managed key encryption properties for the resource.
type CustomerManagedKeyEncryption struct {
	// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
	KeyEncryptionKeyIdentity *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity `pulumi:"keyEncryptionKeyIdentity"`
	// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
	KeyEncryptionKeyUrl *string `pulumi:"keyEncryptionKeyUrl"`
}

// CustomerManagedKeyEncryptionInput is an input type that accepts CustomerManagedKeyEncryptionArgs and CustomerManagedKeyEncryptionOutput values.
// You can construct a concrete instance of `CustomerManagedKeyEncryptionInput` via:
//
//	CustomerManagedKeyEncryptionArgs{...}
type CustomerManagedKeyEncryptionInput interface {
	pulumi.Input

	ToCustomerManagedKeyEncryptionOutput() CustomerManagedKeyEncryptionOutput
	ToCustomerManagedKeyEncryptionOutputWithContext(context.Context) CustomerManagedKeyEncryptionOutput
}

// All Customer-managed key encryption properties for the resource.
type CustomerManagedKeyEncryptionArgs struct {
	// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
	KeyEncryptionKeyIdentity CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrInput `pulumi:"keyEncryptionKeyIdentity"`
	// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
	KeyEncryptionKeyUrl pulumi.StringPtrInput `pulumi:"keyEncryptionKeyUrl"`
}

func (CustomerManagedKeyEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryption)(nil)).Elem()
}

func (i CustomerManagedKeyEncryptionArgs) ToCustomerManagedKeyEncryptionOutput() CustomerManagedKeyEncryptionOutput {
	return i.ToCustomerManagedKeyEncryptionOutputWithContext(context.Background())
}

func (i CustomerManagedKeyEncryptionArgs) ToCustomerManagedKeyEncryptionOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionOutput)
}

func (i CustomerManagedKeyEncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryption] {
	return pulumix.Output[CustomerManagedKeyEncryption]{
		OutputState: i.ToCustomerManagedKeyEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i CustomerManagedKeyEncryptionArgs) ToCustomerManagedKeyEncryptionPtrOutput() CustomerManagedKeyEncryptionPtrOutput {
	return i.ToCustomerManagedKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i CustomerManagedKeyEncryptionArgs) ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionOutput).ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx)
}

// CustomerManagedKeyEncryptionPtrInput is an input type that accepts CustomerManagedKeyEncryptionArgs, CustomerManagedKeyEncryptionPtr and CustomerManagedKeyEncryptionPtrOutput values.
// You can construct a concrete instance of `CustomerManagedKeyEncryptionPtrInput` via:
//
//	        CustomerManagedKeyEncryptionArgs{...}
//
//	or:
//
//	        nil
type CustomerManagedKeyEncryptionPtrInput interface {
	pulumi.Input

	ToCustomerManagedKeyEncryptionPtrOutput() CustomerManagedKeyEncryptionPtrOutput
	ToCustomerManagedKeyEncryptionPtrOutputWithContext(context.Context) CustomerManagedKeyEncryptionPtrOutput
}

type customerManagedKeyEncryptionPtrType CustomerManagedKeyEncryptionArgs

func CustomerManagedKeyEncryptionPtr(v *CustomerManagedKeyEncryptionArgs) CustomerManagedKeyEncryptionPtrInput {
	return (*customerManagedKeyEncryptionPtrType)(v)
}

func (*customerManagedKeyEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryption)(nil)).Elem()
}

func (i *customerManagedKeyEncryptionPtrType) ToCustomerManagedKeyEncryptionPtrOutput() CustomerManagedKeyEncryptionPtrOutput {
	return i.ToCustomerManagedKeyEncryptionPtrOutputWithContext(context.Background())
}

func (i *customerManagedKeyEncryptionPtrType) ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionPtrOutput)
}

func (i *customerManagedKeyEncryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryption] {
	return pulumix.Output[*CustomerManagedKeyEncryption]{
		OutputState: i.ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// All Customer-managed key encryption properties for the resource.
type CustomerManagedKeyEncryptionOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryption)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionOutput) ToCustomerManagedKeyEncryptionOutput() CustomerManagedKeyEncryptionOutput {
	return o
}

func (o CustomerManagedKeyEncryptionOutput) ToCustomerManagedKeyEncryptionOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionOutput {
	return o
}

func (o CustomerManagedKeyEncryptionOutput) ToCustomerManagedKeyEncryptionPtrOutput() CustomerManagedKeyEncryptionPtrOutput {
	return o.ToCustomerManagedKeyEncryptionPtrOutputWithContext(context.Background())
}

func (o CustomerManagedKeyEncryptionOutput) ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerManagedKeyEncryption) *CustomerManagedKeyEncryption {
		return &v
	}).(CustomerManagedKeyEncryptionPtrOutput)
}

func (o CustomerManagedKeyEncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryption] {
	return pulumix.Output[CustomerManagedKeyEncryption]{
		OutputState: o.OutputState,
	}
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
func (o CustomerManagedKeyEncryptionOutput) KeyEncryptionKeyIdentity() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryption) *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity {
		return v.KeyEncryptionKeyIdentity
	}).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput)
}

// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
func (o CustomerManagedKeyEncryptionOutput) KeyEncryptionKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryption) *string { return v.KeyEncryptionKeyUrl }).(pulumi.StringPtrOutput)
}

type CustomerManagedKeyEncryptionPtrOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryption)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionPtrOutput) ToCustomerManagedKeyEncryptionPtrOutput() CustomerManagedKeyEncryptionPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionPtrOutput) ToCustomerManagedKeyEncryptionPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryption] {
	return pulumix.Output[*CustomerManagedKeyEncryption]{
		OutputState: o.OutputState,
	}
}

func (o CustomerManagedKeyEncryptionPtrOutput) Elem() CustomerManagedKeyEncryptionOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryption) CustomerManagedKeyEncryption {
		if v != nil {
			return *v
		}
		var ret CustomerManagedKeyEncryption
		return ret
	}).(CustomerManagedKeyEncryptionOutput)
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
func (o CustomerManagedKeyEncryptionPtrOutput) KeyEncryptionKeyIdentity() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryption) *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKeyIdentity
	}).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput)
}

// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
func (o CustomerManagedKeyEncryptionPtrOutput) KeyEncryptionKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKeyUrl
	}).(pulumi.StringPtrOutput)
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity struct {
	// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
	DelegatedIdentityClientId *string `pulumi:"delegatedIdentityClientId"`
	// Values can be systemAssignedIdentity or userAssignedIdentity
	IdentityType *string `pulumi:"identityType"`
	// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityInput is an input type that accepts CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs and CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput values.
// You can construct a concrete instance of `CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityInput` via:
//
//	CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs{...}
type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityInput interface {
	pulumi.Input

	ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput
	ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutputWithContext(context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs struct {
	// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
	DelegatedIdentityClientId pulumi.StringPtrInput `pulumi:"delegatedIdentityClientId"`
	// Values can be systemAssignedIdentity or userAssignedIdentity
	IdentityType pulumi.StringPtrInput `pulumi:"identityType"`
	// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
	UserAssignedIdentityResourceId pulumi.StringPtrInput `pulumi:"userAssignedIdentityResourceId"`
}

func (CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (i CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput {
	return i.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutputWithContext(context.Background())
}

func (i CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput)
}

func (i CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity] {
	return pulumix.Output[CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity]{
		OutputState: i.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return i.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(context.Background())
}

func (i CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput).ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx)
}

// CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrInput is an input type that accepts CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs, CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtr and CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput values.
// You can construct a concrete instance of `CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrInput` via:
//
//	        CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs{...}
//
//	or:
//
//	        nil
type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrInput interface {
	pulumi.Input

	ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput
	ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput
}

type customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs

func CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtr(v *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityArgs) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrInput {
	return (*customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType)(v)
}

func (*customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (i *customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return i.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(context.Background())
}

func (i *customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput)
}

func (i *customerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity] {
	return pulumix.Output[*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity]{
		OutputState: i.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput {
	return o
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput {
	return o
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o.ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(context.Background())
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity {
		return &v
	}).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput)
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity] {
	return pulumix.Output[CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity]{
		OutputState: o.OutputState,
	}
}

// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) DelegatedIdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string {
		return v.DelegatedIdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Values can be systemAssignedIdentity or userAssignedIdentity
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string { return v.IdentityType }).(pulumi.StringPtrOutput)
}

// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string {
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

type CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) ToCustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity] {
	return pulumix.Output[*CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity]{
		OutputState: o.OutputState,
	}
}

func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) Elem() CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity {
		if v != nil {
			return *v
		}
		var ret CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity
		return ret
	}).(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput)
}

// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) DelegatedIdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.DelegatedIdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Values can be systemAssignedIdentity or userAssignedIdentity
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
func (o CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// All Customer-managed key encryption properties for the resource.
type CustomerManagedKeyEncryptionResponse struct {
	// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
	KeyEncryptionKeyIdentity *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity `pulumi:"keyEncryptionKeyIdentity"`
	// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
	KeyEncryptionKeyUrl *string `pulumi:"keyEncryptionKeyUrl"`
}

// All Customer-managed key encryption properties for the resource.
type CustomerManagedKeyEncryptionResponseOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryptionResponse)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionResponseOutput) ToCustomerManagedKeyEncryptionResponseOutput() CustomerManagedKeyEncryptionResponseOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseOutput) ToCustomerManagedKeyEncryptionResponseOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionResponseOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryptionResponse] {
	return pulumix.Output[CustomerManagedKeyEncryptionResponse]{
		OutputState: o.OutputState,
	}
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
func (o CustomerManagedKeyEncryptionResponseOutput) KeyEncryptionKeyIdentity() CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionResponse) *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity {
		return v.KeyEncryptionKeyIdentity
	}).(CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput)
}

// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
func (o CustomerManagedKeyEncryptionResponseOutput) KeyEncryptionKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionResponse) *string { return v.KeyEncryptionKeyUrl }).(pulumi.StringPtrOutput)
}

type CustomerManagedKeyEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryptionResponse)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionResponsePtrOutput) ToCustomerManagedKeyEncryptionResponsePtrOutput() CustomerManagedKeyEncryptionResponsePtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponsePtrOutput) ToCustomerManagedKeyEncryptionResponsePtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionResponsePtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryptionResponse] {
	return pulumix.Output[*CustomerManagedKeyEncryptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o CustomerManagedKeyEncryptionResponsePtrOutput) Elem() CustomerManagedKeyEncryptionResponseOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponse) CustomerManagedKeyEncryptionResponse {
		if v != nil {
			return *v
		}
		var ret CustomerManagedKeyEncryptionResponse
		return ret
	}).(CustomerManagedKeyEncryptionResponseOutput)
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
func (o CustomerManagedKeyEncryptionResponsePtrOutput) KeyEncryptionKeyIdentity() CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponse) *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKeyIdentity
	}).(CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput)
}

// key encryption key Url, versioned or non-versioned. Ex: https://contosovault.vault.azure.net/keys/contosokek/562a4bb76b524a1493a6afe8e536ee78 or https://contosovault.vault.azure.net/keys/contosokek.
func (o CustomerManagedKeyEncryptionResponsePtrOutput) KeyEncryptionKeyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeyEncryptionKeyUrl
	}).(pulumi.StringPtrOutput)
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
type CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity struct {
	// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
	DelegatedIdentityClientId *string `pulumi:"delegatedIdentityClientId"`
	// Values can be systemAssignedIdentity or userAssignedIdentity
	IdentityType *string `pulumi:"identityType"`
	// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// All identity configuration for Customer-managed key settings defining which identity should be used to auth to Key Vault.
type CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput() CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) ToCustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity] {
	return pulumix.Output[CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity]{
		OutputState: o.OutputState,
	}
}

// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) DelegatedIdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string {
		return v.DelegatedIdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Values can be systemAssignedIdentity or userAssignedIdentity
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string { return v.IdentityType }).(pulumi.StringPtrOutput)
}

// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string {
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

type CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput struct{ *pulumi.OutputState }

func (CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity)(nil)).Elem()
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) ToCustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput() CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) ToCustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutputWithContext(ctx context.Context) CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput {
	return o
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity] {
	return pulumix.Output[*CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity]{
		OutputState: o.OutputState,
	}
}

func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) Elem() CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity {
		if v != nil {
			return *v
		}
		var ret CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity
		return ret
	}).(CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput)
}

// delegated identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and userAssignedIdentity - internal use only.
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) DelegatedIdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.DelegatedIdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Values can be systemAssignedIdentity or userAssignedIdentity
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// user assigned identity to use for accessing key encryption key Url. Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity and delegatedResourceIdentity.
func (o CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
type Encryption struct {
	// All Customer-managed key encryption properties for the resource.
	CustomerManagedKeyEncryption *CustomerManagedKeyEncryption `pulumi:"customerManagedKeyEncryption"`
	// Values are enabled and disabled.
	InfrastructureEncryption *string `pulumi:"infrastructureEncryption"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//	EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
type EncryptionArgs struct {
	// All Customer-managed key encryption properties for the resource.
	CustomerManagedKeyEncryption CustomerManagedKeyEncryptionPtrInput `pulumi:"customerManagedKeyEncryption"`
	// Values are enabled and disabled.
	InfrastructureEncryption pulumi.StringPtrInput `pulumi:"infrastructureEncryption"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToOutput(ctx context.Context) pulumix.Output[Encryption] {
	return pulumix.Output[Encryption]{
		OutputState: i.ToEncryptionOutputWithContext(ctx).OutputState,
	}
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//	        EncryptionArgs{...}
//
//	or:
//
//	        nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

func (i *encryptionPtrType) ToOutput(ctx context.Context) pulumix.Output[*Encryption] {
	return pulumix.Output[*Encryption]{
		OutputState: i.ToEncryptionPtrOutputWithContext(ctx).OutputState,
	}
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

func (o EncryptionOutput) ToOutput(ctx context.Context) pulumix.Output[Encryption] {
	return pulumix.Output[Encryption]{
		OutputState: o.OutputState,
	}
}

// All Customer-managed key encryption properties for the resource.
func (o EncryptionOutput) CustomerManagedKeyEncryption() CustomerManagedKeyEncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *CustomerManagedKeyEncryption { return v.CustomerManagedKeyEncryption }).(CustomerManagedKeyEncryptionPtrOutput)
}

// Values are enabled and disabled.
func (o EncryptionOutput) InfrastructureEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Encryption) *string { return v.InfrastructureEncryption }).(pulumi.StringPtrOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Encryption] {
	return pulumix.Output[*Encryption]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption {
		if v != nil {
			return *v
		}
		var ret Encryption
		return ret
	}).(EncryptionOutput)
}

// All Customer-managed key encryption properties for the resource.
func (o EncryptionPtrOutput) CustomerManagedKeyEncryption() CustomerManagedKeyEncryptionPtrOutput {
	return o.ApplyT(func(v *Encryption) *CustomerManagedKeyEncryption {
		if v == nil {
			return nil
		}
		return v.CustomerManagedKeyEncryption
	}).(CustomerManagedKeyEncryptionPtrOutput)
}

// Values are enabled and disabled.
func (o EncryptionPtrOutput) InfrastructureEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return v.InfrastructureEncryption
	}).(pulumi.StringPtrOutput)
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
type EncryptionResponse struct {
	// All Customer-managed key encryption properties for the resource.
	CustomerManagedKeyEncryption *CustomerManagedKeyEncryptionResponse `pulumi:"customerManagedKeyEncryption"`
	// Values are enabled and disabled.
	InfrastructureEncryption *string `pulumi:"infrastructureEncryption"`
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[EncryptionResponse] {
	return pulumix.Output[EncryptionResponse]{
		OutputState: o.OutputState,
	}
}

// All Customer-managed key encryption properties for the resource.
func (o EncryptionResponseOutput) CustomerManagedKeyEncryption() CustomerManagedKeyEncryptionResponsePtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *CustomerManagedKeyEncryptionResponse {
		return v.CustomerManagedKeyEncryption
	}).(CustomerManagedKeyEncryptionResponsePtrOutput)
}

// Values are enabled and disabled.
func (o EncryptionResponseOutput) InfrastructureEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionResponse) *string { return v.InfrastructureEncryption }).(pulumi.StringPtrOutput)
}

type EncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutput() EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToEncryptionResponsePtrOutputWithContext(ctx context.Context) EncryptionResponsePtrOutput {
	return o
}

func (o EncryptionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*EncryptionResponse] {
	return pulumix.Output[*EncryptionResponse]{
		OutputState: o.OutputState,
	}
}

func (o EncryptionResponsePtrOutput) Elem() EncryptionResponseOutput {
	return o.ApplyT(func(v *EncryptionResponse) EncryptionResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionResponse
		return ret
	}).(EncryptionResponseOutput)
}

// All Customer-managed key encryption properties for the resource.
func (o EncryptionResponsePtrOutput) CustomerManagedKeyEncryption() CustomerManagedKeyEncryptionResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *CustomerManagedKeyEncryptionResponse {
		if v == nil {
			return nil
		}
		return v.CustomerManagedKeyEncryption
	}).(CustomerManagedKeyEncryptionResponsePtrOutput)
}

// Values are enabled and disabled.
func (o EncryptionResponsePtrOutput) InfrastructureEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.InfrastructureEncryption
	}).(pulumi.StringPtrOutput)
}

// Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs.
type LinkedResource struct {
	// ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.
	Id string `pulumi:"id"`
	// A provided name which uniquely identifies the linked resource.
	UniqueName string `pulumi:"uniqueName"`
}

// LinkedResourceInput is an input type that accepts LinkedResourceArgs and LinkedResourceOutput values.
// You can construct a concrete instance of `LinkedResourceInput` via:
//
//	LinkedResourceArgs{...}
type LinkedResourceInput interface {
	pulumi.Input

	ToLinkedResourceOutput() LinkedResourceOutput
	ToLinkedResourceOutputWithContext(context.Context) LinkedResourceOutput
}

// Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs.
type LinkedResourceArgs struct {
	// ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.
	Id pulumi.StringInput `pulumi:"id"`
	// A provided name which uniquely identifies the linked resource.
	UniqueName pulumi.StringInput `pulumi:"uniqueName"`
}

func (LinkedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedResource)(nil)).Elem()
}

func (i LinkedResourceArgs) ToLinkedResourceOutput() LinkedResourceOutput {
	return i.ToLinkedResourceOutputWithContext(context.Background())
}

func (i LinkedResourceArgs) ToLinkedResourceOutputWithContext(ctx context.Context) LinkedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedResourceOutput)
}

func (i LinkedResourceArgs) ToOutput(ctx context.Context) pulumix.Output[LinkedResource] {
	return pulumix.Output[LinkedResource]{
		OutputState: i.ToLinkedResourceOutputWithContext(ctx).OutputState,
	}
}

// LinkedResourceArrayInput is an input type that accepts LinkedResourceArray and LinkedResourceArrayOutput values.
// You can construct a concrete instance of `LinkedResourceArrayInput` via:
//
//	LinkedResourceArray{ LinkedResourceArgs{...} }
type LinkedResourceArrayInput interface {
	pulumi.Input

	ToLinkedResourceArrayOutput() LinkedResourceArrayOutput
	ToLinkedResourceArrayOutputWithContext(context.Context) LinkedResourceArrayOutput
}

type LinkedResourceArray []LinkedResourceInput

func (LinkedResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedResource)(nil)).Elem()
}

func (i LinkedResourceArray) ToLinkedResourceArrayOutput() LinkedResourceArrayOutput {
	return i.ToLinkedResourceArrayOutputWithContext(context.Background())
}

func (i LinkedResourceArray) ToLinkedResourceArrayOutputWithContext(ctx context.Context) LinkedResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedResourceArrayOutput)
}

func (i LinkedResourceArray) ToOutput(ctx context.Context) pulumix.Output[[]LinkedResource] {
	return pulumix.Output[[]LinkedResource]{
		OutputState: i.ToLinkedResourceArrayOutputWithContext(ctx).OutputState,
	}
}

// Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs.
type LinkedResourceOutput struct{ *pulumi.OutputState }

func (LinkedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedResource)(nil)).Elem()
}

func (o LinkedResourceOutput) ToLinkedResourceOutput() LinkedResourceOutput {
	return o
}

func (o LinkedResourceOutput) ToLinkedResourceOutputWithContext(ctx context.Context) LinkedResourceOutput {
	return o
}

func (o LinkedResourceOutput) ToOutput(ctx context.Context) pulumix.Output[LinkedResource] {
	return pulumix.Output[LinkedResource]{
		OutputState: o.OutputState,
	}
}

// ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.
func (o LinkedResourceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedResource) string { return v.Id }).(pulumi.StringOutput)
}

// A provided name which uniquely identifies the linked resource.
func (o LinkedResourceOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedResource) string { return v.UniqueName }).(pulumi.StringOutput)
}

type LinkedResourceArrayOutput struct{ *pulumi.OutputState }

func (LinkedResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedResource)(nil)).Elem()
}

func (o LinkedResourceArrayOutput) ToLinkedResourceArrayOutput() LinkedResourceArrayOutput {
	return o
}

func (o LinkedResourceArrayOutput) ToLinkedResourceArrayOutputWithContext(ctx context.Context) LinkedResourceArrayOutput {
	return o
}

func (o LinkedResourceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkedResource] {
	return pulumix.Output[[]LinkedResource]{
		OutputState: o.OutputState,
	}
}

func (o LinkedResourceArrayOutput) Index(i pulumi.IntInput) LinkedResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedResource {
		return vs[0].([]LinkedResource)[vs[1].(int)]
	}).(LinkedResourceOutput)
}

// Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs.
type LinkedResourceResponse struct {
	// ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.
	Id string `pulumi:"id"`
	// A provided name which uniquely identifies the linked resource.
	UniqueName string `pulumi:"uniqueName"`
}

// Linked resource is reference to a resource deployed in an Azure subscription, add the linked resource `uniqueName` value as an optional parameter for operations on Azure Maps Geospatial REST APIs.
type LinkedResourceResponseOutput struct{ *pulumi.OutputState }

func (LinkedResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedResourceResponse)(nil)).Elem()
}

func (o LinkedResourceResponseOutput) ToLinkedResourceResponseOutput() LinkedResourceResponseOutput {
	return o
}

func (o LinkedResourceResponseOutput) ToLinkedResourceResponseOutputWithContext(ctx context.Context) LinkedResourceResponseOutput {
	return o
}

func (o LinkedResourceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LinkedResourceResponse] {
	return pulumix.Output[LinkedResourceResponse]{
		OutputState: o.OutputState,
	}
}

// ARM resource id in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/accounts/{storageName}'.
func (o LinkedResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// A provided name which uniquely identifies the linked resource.
func (o LinkedResourceResponseOutput) UniqueName() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedResourceResponse) string { return v.UniqueName }).(pulumi.StringOutput)
}

type LinkedResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (LinkedResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LinkedResourceResponse)(nil)).Elem()
}

func (o LinkedResourceResponseArrayOutput) ToLinkedResourceResponseArrayOutput() LinkedResourceResponseArrayOutput {
	return o
}

func (o LinkedResourceResponseArrayOutput) ToLinkedResourceResponseArrayOutputWithContext(ctx context.Context) LinkedResourceResponseArrayOutput {
	return o
}

func (o LinkedResourceResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LinkedResourceResponse] {
	return pulumix.Output[[]LinkedResourceResponse]{
		OutputState: o.OutputState,
	}
}

func (o LinkedResourceResponseArrayOutput) Index(i pulumi.IntInput) LinkedResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LinkedResourceResponse {
		return vs[0].([]LinkedResourceResponse)[vs[1].(int)]
	}).(LinkedResourceResponseOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

func (i *managedServiceIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: i.ToManagedServiceIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

func (o ManagedServiceIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentity] {
	return pulumix.Output[ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentity] {
	return pulumix.Output[*ManagedServiceIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedServiceIdentityResponse] {
	return pulumix.Output[ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedServiceIdentityResponse] {
	return pulumix.Output[*ManagedServiceIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Additional Map account properties
type MapsAccountProperties struct {
	// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
	Cors *CorsRules `pulumi:"cors"`
	// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
	Encryption *Encryption `pulumi:"encryption"`
	// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
	LinkedResources []LinkedResource `pulumi:"linkedResources"`
}

// Defaults sets the appropriate defaults for MapsAccountProperties
func (val *MapsAccountProperties) Defaults() *MapsAccountProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DisableLocalAuth == nil {
		disableLocalAuth_ := false
		tmp.DisableLocalAuth = &disableLocalAuth_
	}
	return &tmp
}

// MapsAccountPropertiesInput is an input type that accepts MapsAccountPropertiesArgs and MapsAccountPropertiesOutput values.
// You can construct a concrete instance of `MapsAccountPropertiesInput` via:
//
//	MapsAccountPropertiesArgs{...}
type MapsAccountPropertiesInput interface {
	pulumi.Input

	ToMapsAccountPropertiesOutput() MapsAccountPropertiesOutput
	ToMapsAccountPropertiesOutputWithContext(context.Context) MapsAccountPropertiesOutput
}

// Additional Map account properties
type MapsAccountPropertiesArgs struct {
	// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
	Cors CorsRulesPtrInput `pulumi:"cors"`
	// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
	LinkedResources LinkedResourceArrayInput `pulumi:"linkedResources"`
}

// Defaults sets the appropriate defaults for MapsAccountPropertiesArgs
func (val *MapsAccountPropertiesArgs) Defaults() *MapsAccountPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DisableLocalAuth == nil {
		tmp.DisableLocalAuth = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (MapsAccountPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapsAccountProperties)(nil)).Elem()
}

func (i MapsAccountPropertiesArgs) ToMapsAccountPropertiesOutput() MapsAccountPropertiesOutput {
	return i.ToMapsAccountPropertiesOutputWithContext(context.Background())
}

func (i MapsAccountPropertiesArgs) ToMapsAccountPropertiesOutputWithContext(ctx context.Context) MapsAccountPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapsAccountPropertiesOutput)
}

func (i MapsAccountPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[MapsAccountProperties] {
	return pulumix.Output[MapsAccountProperties]{
		OutputState: i.ToMapsAccountPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i MapsAccountPropertiesArgs) ToMapsAccountPropertiesPtrOutput() MapsAccountPropertiesPtrOutput {
	return i.ToMapsAccountPropertiesPtrOutputWithContext(context.Background())
}

func (i MapsAccountPropertiesArgs) ToMapsAccountPropertiesPtrOutputWithContext(ctx context.Context) MapsAccountPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapsAccountPropertiesOutput).ToMapsAccountPropertiesPtrOutputWithContext(ctx)
}

// MapsAccountPropertiesPtrInput is an input type that accepts MapsAccountPropertiesArgs, MapsAccountPropertiesPtr and MapsAccountPropertiesPtrOutput values.
// You can construct a concrete instance of `MapsAccountPropertiesPtrInput` via:
//
//	        MapsAccountPropertiesArgs{...}
//
//	or:
//
//	        nil
type MapsAccountPropertiesPtrInput interface {
	pulumi.Input

	ToMapsAccountPropertiesPtrOutput() MapsAccountPropertiesPtrOutput
	ToMapsAccountPropertiesPtrOutputWithContext(context.Context) MapsAccountPropertiesPtrOutput
}

type mapsAccountPropertiesPtrType MapsAccountPropertiesArgs

func MapsAccountPropertiesPtr(v *MapsAccountPropertiesArgs) MapsAccountPropertiesPtrInput {
	return (*mapsAccountPropertiesPtrType)(v)
}

func (*mapsAccountPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MapsAccountProperties)(nil)).Elem()
}

func (i *mapsAccountPropertiesPtrType) ToMapsAccountPropertiesPtrOutput() MapsAccountPropertiesPtrOutput {
	return i.ToMapsAccountPropertiesPtrOutputWithContext(context.Background())
}

func (i *mapsAccountPropertiesPtrType) ToMapsAccountPropertiesPtrOutputWithContext(ctx context.Context) MapsAccountPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MapsAccountPropertiesPtrOutput)
}

func (i *mapsAccountPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*MapsAccountProperties] {
	return pulumix.Output[*MapsAccountProperties]{
		OutputState: i.ToMapsAccountPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Additional Map account properties
type MapsAccountPropertiesOutput struct{ *pulumi.OutputState }

func (MapsAccountPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapsAccountProperties)(nil)).Elem()
}

func (o MapsAccountPropertiesOutput) ToMapsAccountPropertiesOutput() MapsAccountPropertiesOutput {
	return o
}

func (o MapsAccountPropertiesOutput) ToMapsAccountPropertiesOutputWithContext(ctx context.Context) MapsAccountPropertiesOutput {
	return o
}

func (o MapsAccountPropertiesOutput) ToMapsAccountPropertiesPtrOutput() MapsAccountPropertiesPtrOutput {
	return o.ToMapsAccountPropertiesPtrOutputWithContext(context.Background())
}

func (o MapsAccountPropertiesOutput) ToMapsAccountPropertiesPtrOutputWithContext(ctx context.Context) MapsAccountPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MapsAccountProperties) *MapsAccountProperties {
		return &v
	}).(MapsAccountPropertiesPtrOutput)
}

func (o MapsAccountPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[MapsAccountProperties] {
	return pulumix.Output[MapsAccountProperties]{
		OutputState: o.OutputState,
	}
}

// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
func (o MapsAccountPropertiesOutput) Cors() CorsRulesPtrOutput {
	return o.ApplyT(func(v MapsAccountProperties) *CorsRules { return v.Cors }).(CorsRulesPtrOutput)
}

// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
func (o MapsAccountPropertiesOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MapsAccountProperties) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
func (o MapsAccountPropertiesOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v MapsAccountProperties) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
func (o MapsAccountPropertiesOutput) LinkedResources() LinkedResourceArrayOutput {
	return o.ApplyT(func(v MapsAccountProperties) []LinkedResource { return v.LinkedResources }).(LinkedResourceArrayOutput)
}

type MapsAccountPropertiesPtrOutput struct{ *pulumi.OutputState }

func (MapsAccountPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MapsAccountProperties)(nil)).Elem()
}

func (o MapsAccountPropertiesPtrOutput) ToMapsAccountPropertiesPtrOutput() MapsAccountPropertiesPtrOutput {
	return o
}

func (o MapsAccountPropertiesPtrOutput) ToMapsAccountPropertiesPtrOutputWithContext(ctx context.Context) MapsAccountPropertiesPtrOutput {
	return o
}

func (o MapsAccountPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MapsAccountProperties] {
	return pulumix.Output[*MapsAccountProperties]{
		OutputState: o.OutputState,
	}
}

func (o MapsAccountPropertiesPtrOutput) Elem() MapsAccountPropertiesOutput {
	return o.ApplyT(func(v *MapsAccountProperties) MapsAccountProperties {
		if v != nil {
			return *v
		}
		var ret MapsAccountProperties
		return ret
	}).(MapsAccountPropertiesOutput)
}

// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
func (o MapsAccountPropertiesPtrOutput) Cors() CorsRulesPtrOutput {
	return o.ApplyT(func(v *MapsAccountProperties) *CorsRules {
		if v == nil {
			return nil
		}
		return v.Cors
	}).(CorsRulesPtrOutput)
}

// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
func (o MapsAccountPropertiesPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MapsAccountProperties) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
func (o MapsAccountPropertiesPtrOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v *MapsAccountProperties) *Encryption {
		if v == nil {
			return nil
		}
		return v.Encryption
	}).(EncryptionPtrOutput)
}

// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
func (o MapsAccountPropertiesPtrOutput) LinkedResources() LinkedResourceArrayOutput {
	return o.ApplyT(func(v *MapsAccountProperties) []LinkedResource {
		if v == nil {
			return nil
		}
		return v.LinkedResources
	}).(LinkedResourceArrayOutput)
}

// Additional Map account properties
type MapsAccountPropertiesResponse struct {
	// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
	Cors *CorsRulesResponse `pulumi:"cors"`
	// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
	Encryption *EncryptionResponse `pulumi:"encryption"`
	// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
	LinkedResources []LinkedResourceResponse `pulumi:"linkedResources"`
	// The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal states: `Succeeded` and `Failed`
	ProvisioningState string `pulumi:"provisioningState"`
	// A unique identifier for the maps account
	UniqueId string `pulumi:"uniqueId"`
}

// Defaults sets the appropriate defaults for MapsAccountPropertiesResponse
func (val *MapsAccountPropertiesResponse) Defaults() *MapsAccountPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DisableLocalAuth == nil {
		disableLocalAuth_ := false
		tmp.DisableLocalAuth = &disableLocalAuth_
	}
	return &tmp
}

// Additional Map account properties
type MapsAccountPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MapsAccountPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapsAccountPropertiesResponse)(nil)).Elem()
}

func (o MapsAccountPropertiesResponseOutput) ToMapsAccountPropertiesResponseOutput() MapsAccountPropertiesResponseOutput {
	return o
}

func (o MapsAccountPropertiesResponseOutput) ToMapsAccountPropertiesResponseOutputWithContext(ctx context.Context) MapsAccountPropertiesResponseOutput {
	return o
}

func (o MapsAccountPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MapsAccountPropertiesResponse] {
	return pulumix.Output[MapsAccountPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service.
func (o MapsAccountPropertiesResponseOutput) Cors() CorsRulesResponsePtrOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) *CorsRulesResponse { return v.Cors }).(CorsRulesResponsePtrOutput)
}

// Allows toggle functionality on Azure Policy to disable Azure Maps local authentication support. This will disable Shared Keys and Shared Access Signature Token authentication from any usage.
func (o MapsAccountPropertiesResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// (Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.
func (o MapsAccountPropertiesResponseOutput) Encryption() EncryptionResponsePtrOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) *EncryptionResponse { return v.Encryption }).(EncryptionResponsePtrOutput)
}

// The array of associated resources to the Map account. Linked resource in the array cannot individually update, you must update all linked resources in the array together. These resources may be used on operations on the Azure Maps REST API. Access is controlled by the Map Account Managed Identity(s) permissions to those resource(s).
func (o MapsAccountPropertiesResponseOutput) LinkedResources() LinkedResourceResponseArrayOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) []LinkedResourceResponse { return v.LinkedResources }).(LinkedResourceResponseArrayOutput)
}

// The provisioning state of the Map account resource, Account updates can only be performed on terminal states. Terminal states: `Succeeded` and `Failed`
func (o MapsAccountPropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// A unique identifier for the maps account
func (o MapsAccountPropertiesResponseOutput) UniqueId() pulumi.StringOutput {
	return o.ApplyT(func(v MapsAccountPropertiesResponse) string { return v.UniqueId }).(pulumi.StringOutput)
}

// The SKU of the Maps Account.
type Sku struct {
	// The name of the SKU, in standard format (such as S0).
	Name string `pulumi:"name"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The SKU of the Maps Account.
type SkuArgs struct {
	// The name of the SKU, in standard format (such as S0).
	Name pulumi.StringInput `pulumi:"name"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: i.ToSkuOutputWithContext(ctx).OutputState,
	}
}

// The SKU of the Maps Account.
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToOutput(ctx context.Context) pulumix.Output[Sku] {
	return pulumix.Output[Sku]{
		OutputState: o.OutputState,
	}
}

// The name of the SKU, in standard format (such as S0).
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU of the Maps Account.
type SkuResponse struct {
	// The name of the SKU, in standard format (such as S0).
	Name string `pulumi:"name"`
	// Gets the sku tier. This is based on the SKU name.
	Tier string `pulumi:"tier"`
}

// The SKU of the Maps Account.
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SkuResponse] {
	return pulumix.Output[SkuResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the SKU, in standard format (such as S0).
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Gets the sku tier. This is based on the SKU name.
func (o SkuResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserAssignedIdentityResponse] {
	return pulumix.Output[UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]UserAssignedIdentityResponse] {
	return pulumix.Output[map[string]UserAssignedIdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(CorsRuleOutput{})
	pulumi.RegisterOutputType(CorsRuleArrayOutput{})
	pulumi.RegisterOutputType(CorsRuleResponseOutput{})
	pulumi.RegisterOutputType(CorsRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(CorsRulesOutput{})
	pulumi.RegisterOutputType(CorsRulesPtrOutput{})
	pulumi.RegisterOutputType(CorsRulesResponseOutput{})
	pulumi.RegisterOutputType(CorsRulesResponsePtrOutput{})
	pulumi.RegisterOutputType(CreatorPropertiesOutput{})
	pulumi.RegisterOutputType(CreatorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionPtrOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionKeyEncryptionKeyIdentityPtrOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionResponseOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityOutput{})
	pulumi.RegisterOutputType(CustomerManagedKeyEncryptionResponseKeyEncryptionKeyIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedResourceOutput{})
	pulumi.RegisterOutputType(LinkedResourceArrayOutput{})
	pulumi.RegisterOutputType(LinkedResourceResponseOutput{})
	pulumi.RegisterOutputType(LinkedResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MapsAccountPropertiesOutput{})
	pulumi.RegisterOutputType(MapsAccountPropertiesPtrOutput{})
	pulumi.RegisterOutputType(MapsAccountPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
