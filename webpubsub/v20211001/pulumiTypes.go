// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Properties of event handler.
type EventHandler struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettings `pulumi:"auth"`
	// Gets ot sets the list of system events.
	SystemEvents []string `pulumi:"systemEvents"`
	// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
	// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
	UrlTemplate string `pulumi:"urlTemplate"`
	// Gets or sets the matching pattern for event names.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
	//     3. The single event name, for example, "event1", it matches "event1"
	UserEventPattern *string `pulumi:"userEventPattern"`
}

// EventHandlerInput is an input type that accepts EventHandlerArgs and EventHandlerOutput values.
// You can construct a concrete instance of `EventHandlerInput` via:
//
//	EventHandlerArgs{...}
type EventHandlerInput interface {
	pulumi.Input

	ToEventHandlerOutput() EventHandlerOutput
	ToEventHandlerOutputWithContext(context.Context) EventHandlerOutput
}

// Properties of event handler.
type EventHandlerArgs struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth UpstreamAuthSettingsPtrInput `pulumi:"auth"`
	// Gets ot sets the list of system events.
	SystemEvents pulumi.StringArrayInput `pulumi:"systemEvents"`
	// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
	// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
	UrlTemplate pulumi.StringInput `pulumi:"urlTemplate"`
	// Gets or sets the matching pattern for event names.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
	//     3. The single event name, for example, "event1", it matches "event1"
	UserEventPattern pulumi.StringPtrInput `pulumi:"userEventPattern"`
}

func (EventHandlerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHandler)(nil)).Elem()
}

func (i EventHandlerArgs) ToEventHandlerOutput() EventHandlerOutput {
	return i.ToEventHandlerOutputWithContext(context.Background())
}

func (i EventHandlerArgs) ToEventHandlerOutputWithContext(ctx context.Context) EventHandlerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHandlerOutput)
}

// EventHandlerArrayInput is an input type that accepts EventHandlerArray and EventHandlerArrayOutput values.
// You can construct a concrete instance of `EventHandlerArrayInput` via:
//
//	EventHandlerArray{ EventHandlerArgs{...} }
type EventHandlerArrayInput interface {
	pulumi.Input

	ToEventHandlerArrayOutput() EventHandlerArrayOutput
	ToEventHandlerArrayOutputWithContext(context.Context) EventHandlerArrayOutput
}

type EventHandlerArray []EventHandlerInput

func (EventHandlerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHandler)(nil)).Elem()
}

func (i EventHandlerArray) ToEventHandlerArrayOutput() EventHandlerArrayOutput {
	return i.ToEventHandlerArrayOutputWithContext(context.Background())
}

func (i EventHandlerArray) ToEventHandlerArrayOutputWithContext(ctx context.Context) EventHandlerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventHandlerArrayOutput)
}

// Properties of event handler.
type EventHandlerOutput struct{ *pulumi.OutputState }

func (EventHandlerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHandler)(nil)).Elem()
}

func (o EventHandlerOutput) ToEventHandlerOutput() EventHandlerOutput {
	return o
}

func (o EventHandlerOutput) ToEventHandlerOutputWithContext(ctx context.Context) EventHandlerOutput {
	return o
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
func (o EventHandlerOutput) Auth() UpstreamAuthSettingsPtrOutput {
	return o.ApplyT(func(v EventHandler) *UpstreamAuthSettings { return v.Auth }).(UpstreamAuthSettingsPtrOutput)
}

// Gets ot sets the list of system events.
func (o EventHandlerOutput) SystemEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHandler) []string { return v.SystemEvents }).(pulumi.StringArrayOutput)
}

// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
func (o EventHandlerOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventHandler) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

// Gets or sets the matching pattern for event names.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any event name
//  2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
//  3. The single event name, for example, "event1", it matches "event1"
func (o EventHandlerOutput) UserEventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHandler) *string { return v.UserEventPattern }).(pulumi.StringPtrOutput)
}

type EventHandlerArrayOutput struct{ *pulumi.OutputState }

func (EventHandlerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHandler)(nil)).Elem()
}

func (o EventHandlerArrayOutput) ToEventHandlerArrayOutput() EventHandlerArrayOutput {
	return o
}

func (o EventHandlerArrayOutput) ToEventHandlerArrayOutputWithContext(ctx context.Context) EventHandlerArrayOutput {
	return o
}

func (o EventHandlerArrayOutput) Index(i pulumi.IntInput) EventHandlerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHandler {
		return vs[0].([]EventHandler)[vs[1].(int)]
	}).(EventHandlerOutput)
}

// Properties of event handler.
type EventHandlerResponse struct {
	// Upstream auth settings. If not set, no auth is used for upstream messages.
	Auth *UpstreamAuthSettingsResponse `pulumi:"auth"`
	// Gets ot sets the list of system events.
	SystemEvents []string `pulumi:"systemEvents"`
	// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
	// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
	UrlTemplate string `pulumi:"urlTemplate"`
	// Gets or sets the matching pattern for event names.
	// There are 3 kind of patterns supported:
	//     1. "*", it to matches any event name
	//     2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
	//     3. The single event name, for example, "event1", it matches "event1"
	UserEventPattern *string `pulumi:"userEventPattern"`
}

// Properties of event handler.
type EventHandlerResponseOutput struct{ *pulumi.OutputState }

func (EventHandlerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventHandlerResponse)(nil)).Elem()
}

func (o EventHandlerResponseOutput) ToEventHandlerResponseOutput() EventHandlerResponseOutput {
	return o
}

func (o EventHandlerResponseOutput) ToEventHandlerResponseOutputWithContext(ctx context.Context) EventHandlerResponseOutput {
	return o
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
func (o EventHandlerResponseOutput) Auth() UpstreamAuthSettingsResponsePtrOutput {
	return o.ApplyT(func(v EventHandlerResponse) *UpstreamAuthSettingsResponse { return v.Auth }).(UpstreamAuthSettingsResponsePtrOutput)
}

// Gets ot sets the list of system events.
func (o EventHandlerResponseOutput) SystemEvents() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EventHandlerResponse) []string { return v.SystemEvents }).(pulumi.StringArrayOutput)
}

// Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
// For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can't contains parameters.
func (o EventHandlerResponseOutput) UrlTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v EventHandlerResponse) string { return v.UrlTemplate }).(pulumi.StringOutput)
}

// Gets or sets the matching pattern for event names.
// There are 3 kind of patterns supported:
//  1. "*", it to matches any event name
//  2. Combine multiple events with ",", for example "event1,event2", it matches event "event1" and "event2"
//  3. The single event name, for example, "event1", it matches "event1"
func (o EventHandlerResponseOutput) UserEventPattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventHandlerResponse) *string { return v.UserEventPattern }).(pulumi.StringPtrOutput)
}

type EventHandlerResponseArrayOutput struct{ *pulumi.OutputState }

func (EventHandlerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventHandlerResponse)(nil)).Elem()
}

func (o EventHandlerResponseArrayOutput) ToEventHandlerResponseArrayOutput() EventHandlerResponseArrayOutput {
	return o
}

func (o EventHandlerResponseArrayOutput) ToEventHandlerResponseArrayOutputWithContext(ctx context.Context) EventHandlerResponseArrayOutput {
	return o
}

func (o EventHandlerResponseArrayOutput) Index(i pulumi.IntInput) EventHandlerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventHandlerResponse {
		return vs[0].([]EventHandlerResponse)[vs[1].(int)]
	}).(EventHandlerResponseOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettings struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `pulumi:"resource"`
}

// ManagedIdentitySettingsInput is an input type that accepts ManagedIdentitySettingsArgs and ManagedIdentitySettingsOutput values.
// You can construct a concrete instance of `ManagedIdentitySettingsInput` via:
//
//	ManagedIdentitySettingsArgs{...}
type ManagedIdentitySettingsInput interface {
	pulumi.Input

	ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput
	ToManagedIdentitySettingsOutputWithContext(context.Context) ManagedIdentitySettingsOutput
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsArgs struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ManagedIdentitySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettings)(nil)).Elem()
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput {
	return i.ToManagedIdentitySettingsOutputWithContext(context.Background())
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsOutputWithContext(ctx context.Context) ManagedIdentitySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsOutput)
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return i.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (i ManagedIdentitySettingsArgs) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsOutput).ToManagedIdentitySettingsPtrOutputWithContext(ctx)
}

// ManagedIdentitySettingsPtrInput is an input type that accepts ManagedIdentitySettingsArgs, ManagedIdentitySettingsPtr and ManagedIdentitySettingsPtrOutput values.
// You can construct a concrete instance of `ManagedIdentitySettingsPtrInput` via:
//
//	        ManagedIdentitySettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentitySettingsPtrInput interface {
	pulumi.Input

	ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput
	ToManagedIdentitySettingsPtrOutputWithContext(context.Context) ManagedIdentitySettingsPtrOutput
}

type managedIdentitySettingsPtrType ManagedIdentitySettingsArgs

func ManagedIdentitySettingsPtr(v *ManagedIdentitySettingsArgs) ManagedIdentitySettingsPtrInput {
	return (*managedIdentitySettingsPtrType)(v)
}

func (*managedIdentitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettings)(nil)).Elem()
}

func (i *managedIdentitySettingsPtrType) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return i.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (i *managedIdentitySettingsPtrType) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentitySettingsPtrOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettings)(nil)).Elem()
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsOutput() ManagedIdentitySettingsOutput {
	return o
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsOutputWithContext(ctx context.Context) ManagedIdentitySettingsOutput {
	return o
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return o.ToManagedIdentitySettingsPtrOutputWithContext(context.Background())
}

func (o ManagedIdentitySettingsOutput) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentitySettings) *ManagedIdentitySettings {
		return &v
	}).(ManagedIdentitySettingsPtrOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentitySettings) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ManagedIdentitySettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettings)(nil)).Elem()
}

func (o ManagedIdentitySettingsPtrOutput) ToManagedIdentitySettingsPtrOutput() ManagedIdentitySettingsPtrOutput {
	return o
}

func (o ManagedIdentitySettingsPtrOutput) ToManagedIdentitySettingsPtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsPtrOutput {
	return o
}

func (o ManagedIdentitySettingsPtrOutput) Elem() ManagedIdentitySettingsOutput {
	return o.ApplyT(func(v *ManagedIdentitySettings) ManagedIdentitySettings {
		if v != nil {
			return *v
		}
		var ret ManagedIdentitySettings
		return ret
	}).(ManagedIdentitySettingsOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentitySettings) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsResponse struct {
	// The Resource indicating the App ID URI of the target resource.
	// It also appears in the aud (audience) claim of the issued token.
	Resource *string `pulumi:"resource"`
}

// Managed identity settings for upstream.
type ManagedIdentitySettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentitySettingsResponse)(nil)).Elem()
}

func (o ManagedIdentitySettingsResponseOutput) ToManagedIdentitySettingsResponseOutput() ManagedIdentitySettingsResponseOutput {
	return o
}

func (o ManagedIdentitySettingsResponseOutput) ToManagedIdentitySettingsResponseOutputWithContext(ctx context.Context) ManagedIdentitySettingsResponseOutput {
	return o
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsResponseOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentitySettingsResponse) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ManagedIdentitySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentitySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentitySettingsResponse)(nil)).Elem()
}

func (o ManagedIdentitySettingsResponsePtrOutput) ToManagedIdentitySettingsResponsePtrOutput() ManagedIdentitySettingsResponsePtrOutput {
	return o
}

func (o ManagedIdentitySettingsResponsePtrOutput) ToManagedIdentitySettingsResponsePtrOutputWithContext(ctx context.Context) ManagedIdentitySettingsResponsePtrOutput {
	return o
}

func (o ManagedIdentitySettingsResponsePtrOutput) Elem() ManagedIdentitySettingsResponseOutput {
	return o.ApplyT(func(v *ManagedIdentitySettingsResponse) ManagedIdentitySettingsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentitySettingsResponse
		return ret
	}).(ManagedIdentitySettingsResponseOutput)
}

// The Resource indicating the App ID URI of the target resource.
// It also appears in the aud (audience) claim of the issued token.
func (o ManagedIdentitySettingsResponsePtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentitySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettings struct {
	// Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettings `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type *string `pulumi:"type"`
}

// UpstreamAuthSettingsInput is an input type that accepts UpstreamAuthSettingsArgs and UpstreamAuthSettingsOutput values.
// You can construct a concrete instance of `UpstreamAuthSettingsInput` via:
//
//	UpstreamAuthSettingsArgs{...}
type UpstreamAuthSettingsInput interface {
	pulumi.Input

	ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput
	ToUpstreamAuthSettingsOutputWithContext(context.Context) UpstreamAuthSettingsOutput
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsArgs struct {
	// Managed identity settings for upstream.
	ManagedIdentity ManagedIdentitySettingsPtrInput `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (UpstreamAuthSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettings)(nil)).Elem()
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput {
	return i.ToUpstreamAuthSettingsOutputWithContext(context.Background())
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsOutputWithContext(ctx context.Context) UpstreamAuthSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsOutput)
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return i.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (i UpstreamAuthSettingsArgs) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsOutput).ToUpstreamAuthSettingsPtrOutputWithContext(ctx)
}

// UpstreamAuthSettingsPtrInput is an input type that accepts UpstreamAuthSettingsArgs, UpstreamAuthSettingsPtr and UpstreamAuthSettingsPtrOutput values.
// You can construct a concrete instance of `UpstreamAuthSettingsPtrInput` via:
//
//	        UpstreamAuthSettingsArgs{...}
//
//	or:
//
//	        nil
type UpstreamAuthSettingsPtrInput interface {
	pulumi.Input

	ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput
	ToUpstreamAuthSettingsPtrOutputWithContext(context.Context) UpstreamAuthSettingsPtrOutput
}

type upstreamAuthSettingsPtrType UpstreamAuthSettingsArgs

func UpstreamAuthSettingsPtr(v *UpstreamAuthSettingsArgs) UpstreamAuthSettingsPtrInput {
	return (*upstreamAuthSettingsPtrType)(v)
}

func (*upstreamAuthSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettings)(nil)).Elem()
}

func (i *upstreamAuthSettingsPtrType) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return i.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (i *upstreamAuthSettingsPtrType) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamAuthSettingsPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettings)(nil)).Elem()
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsOutput() UpstreamAuthSettingsOutput {
	return o
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsOutputWithContext(ctx context.Context) UpstreamAuthSettingsOutput {
	return o
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return o.ToUpstreamAuthSettingsPtrOutputWithContext(context.Background())
}

func (o UpstreamAuthSettingsOutput) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UpstreamAuthSettings) *UpstreamAuthSettings {
		return &v
	}).(UpstreamAuthSettingsPtrOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsOutput) ManagedIdentity() ManagedIdentitySettingsPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettings) *ManagedIdentitySettings { return v.ManagedIdentity }).(ManagedIdentitySettingsPtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettings) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UpstreamAuthSettingsPtrOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettings)(nil)).Elem()
}

func (o UpstreamAuthSettingsPtrOutput) ToUpstreamAuthSettingsPtrOutput() UpstreamAuthSettingsPtrOutput {
	return o
}

func (o UpstreamAuthSettingsPtrOutput) ToUpstreamAuthSettingsPtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsPtrOutput {
	return o
}

func (o UpstreamAuthSettingsPtrOutput) Elem() UpstreamAuthSettingsOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) UpstreamAuthSettings {
		if v != nil {
			return *v
		}
		var ret UpstreamAuthSettings
		return ret
	}).(UpstreamAuthSettingsOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsPtrOutput) ManagedIdentity() ManagedIdentitySettingsPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) *ManagedIdentitySettings {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentitySettingsPtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettings) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsResponse struct {
	// Managed identity settings for upstream.
	ManagedIdentity *ManagedIdentitySettingsResponse `pulumi:"managedIdentity"`
	// Upstream auth type enum.
	Type *string `pulumi:"type"`
}

// Upstream auth settings. If not set, no auth is used for upstream messages.
type UpstreamAuthSettingsResponseOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamAuthSettingsResponse)(nil)).Elem()
}

func (o UpstreamAuthSettingsResponseOutput) ToUpstreamAuthSettingsResponseOutput() UpstreamAuthSettingsResponseOutput {
	return o
}

func (o UpstreamAuthSettingsResponseOutput) ToUpstreamAuthSettingsResponseOutputWithContext(ctx context.Context) UpstreamAuthSettingsResponseOutput {
	return o
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsResponseOutput) ManagedIdentity() ManagedIdentitySettingsResponsePtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettingsResponse) *ManagedIdentitySettingsResponse { return v.ManagedIdentity }).(ManagedIdentitySettingsResponsePtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamAuthSettingsResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type UpstreamAuthSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (UpstreamAuthSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamAuthSettingsResponse)(nil)).Elem()
}

func (o UpstreamAuthSettingsResponsePtrOutput) ToUpstreamAuthSettingsResponsePtrOutput() UpstreamAuthSettingsResponsePtrOutput {
	return o
}

func (o UpstreamAuthSettingsResponsePtrOutput) ToUpstreamAuthSettingsResponsePtrOutputWithContext(ctx context.Context) UpstreamAuthSettingsResponsePtrOutput {
	return o
}

func (o UpstreamAuthSettingsResponsePtrOutput) Elem() UpstreamAuthSettingsResponseOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) UpstreamAuthSettingsResponse {
		if v != nil {
			return *v
		}
		var ret UpstreamAuthSettingsResponse
		return ret
	}).(UpstreamAuthSettingsResponseOutput)
}

// Managed identity settings for upstream.
func (o UpstreamAuthSettingsResponsePtrOutput) ManagedIdentity() ManagedIdentitySettingsResponsePtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) *ManagedIdentitySettingsResponse {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentitySettingsResponsePtrOutput)
}

// Upstream auth type enum.
func (o UpstreamAuthSettingsResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UpstreamAuthSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties of a hub.
type WebPubSubHubProperties struct {
	// The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
	AnonymousConnectPolicy *string `pulumi:"anonymousConnectPolicy"`
	// Event handler of a hub.
	EventHandlers []EventHandler `pulumi:"eventHandlers"`
}

// Defaults sets the appropriate defaults for WebPubSubHubProperties
func (val *WebPubSubHubProperties) Defaults() *WebPubSubHubProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnonymousConnectPolicy == nil {
		anonymousConnectPolicy_ := "deny"
		tmp.AnonymousConnectPolicy = &anonymousConnectPolicy_
	}
	return &tmp
}

// WebPubSubHubPropertiesInput is an input type that accepts WebPubSubHubPropertiesArgs and WebPubSubHubPropertiesOutput values.
// You can construct a concrete instance of `WebPubSubHubPropertiesInput` via:
//
//	WebPubSubHubPropertiesArgs{...}
type WebPubSubHubPropertiesInput interface {
	pulumi.Input

	ToWebPubSubHubPropertiesOutput() WebPubSubHubPropertiesOutput
	ToWebPubSubHubPropertiesOutputWithContext(context.Context) WebPubSubHubPropertiesOutput
}

// Properties of a hub.
type WebPubSubHubPropertiesArgs struct {
	// The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
	AnonymousConnectPolicy pulumi.StringPtrInput `pulumi:"anonymousConnectPolicy"`
	// Event handler of a hub.
	EventHandlers EventHandlerArrayInput `pulumi:"eventHandlers"`
}

// Defaults sets the appropriate defaults for WebPubSubHubPropertiesArgs
func (val *WebPubSubHubPropertiesArgs) Defaults() *WebPubSubHubPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnonymousConnectPolicy == nil {
		tmp.AnonymousConnectPolicy = pulumi.StringPtr("deny")
	}
	return &tmp
}
func (WebPubSubHubPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebPubSubHubProperties)(nil)).Elem()
}

func (i WebPubSubHubPropertiesArgs) ToWebPubSubHubPropertiesOutput() WebPubSubHubPropertiesOutput {
	return i.ToWebPubSubHubPropertiesOutputWithContext(context.Background())
}

func (i WebPubSubHubPropertiesArgs) ToWebPubSubHubPropertiesOutputWithContext(ctx context.Context) WebPubSubHubPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebPubSubHubPropertiesOutput)
}

// Properties of a hub.
type WebPubSubHubPropertiesOutput struct{ *pulumi.OutputState }

func (WebPubSubHubPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebPubSubHubProperties)(nil)).Elem()
}

func (o WebPubSubHubPropertiesOutput) ToWebPubSubHubPropertiesOutput() WebPubSubHubPropertiesOutput {
	return o
}

func (o WebPubSubHubPropertiesOutput) ToWebPubSubHubPropertiesOutputWithContext(ctx context.Context) WebPubSubHubPropertiesOutput {
	return o
}

// The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
func (o WebPubSubHubPropertiesOutput) AnonymousConnectPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebPubSubHubProperties) *string { return v.AnonymousConnectPolicy }).(pulumi.StringPtrOutput)
}

// Event handler of a hub.
func (o WebPubSubHubPropertiesOutput) EventHandlers() EventHandlerArrayOutput {
	return o.ApplyT(func(v WebPubSubHubProperties) []EventHandler { return v.EventHandlers }).(EventHandlerArrayOutput)
}

// Properties of a hub.
type WebPubSubHubPropertiesResponse struct {
	// The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
	AnonymousConnectPolicy *string `pulumi:"anonymousConnectPolicy"`
	// Event handler of a hub.
	EventHandlers []EventHandlerResponse `pulumi:"eventHandlers"`
}

// Defaults sets the appropriate defaults for WebPubSubHubPropertiesResponse
func (val *WebPubSubHubPropertiesResponse) Defaults() *WebPubSubHubPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnonymousConnectPolicy == nil {
		anonymousConnectPolicy_ := "deny"
		tmp.AnonymousConnectPolicy = &anonymousConnectPolicy_
	}
	return &tmp
}

// Properties of a hub.
type WebPubSubHubPropertiesResponseOutput struct{ *pulumi.OutputState }

func (WebPubSubHubPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebPubSubHubPropertiesResponse)(nil)).Elem()
}

func (o WebPubSubHubPropertiesResponseOutput) ToWebPubSubHubPropertiesResponseOutput() WebPubSubHubPropertiesResponseOutput {
	return o
}

func (o WebPubSubHubPropertiesResponseOutput) ToWebPubSubHubPropertiesResponseOutputWithContext(ctx context.Context) WebPubSubHubPropertiesResponseOutput {
	return o
}

// The settings for configuring if anonymous connections are allowed for this hub: "allow" or "deny". Default to "deny".
func (o WebPubSubHubPropertiesResponseOutput) AnonymousConnectPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebPubSubHubPropertiesResponse) *string { return v.AnonymousConnectPolicy }).(pulumi.StringPtrOutput)
}

// Event handler of a hub.
func (o WebPubSubHubPropertiesResponseOutput) EventHandlers() EventHandlerResponseArrayOutput {
	return o.ApplyT(func(v WebPubSubHubPropertiesResponse) []EventHandlerResponse { return v.EventHandlers }).(EventHandlerResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(EventHandlerOutput{})
	pulumi.RegisterOutputType(EventHandlerArrayOutput{})
	pulumi.RegisterOutputType(EventHandlerResponseOutput{})
	pulumi.RegisterOutputType(EventHandlerResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentitySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsPtrOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsResponseOutput{})
	pulumi.RegisterOutputType(UpstreamAuthSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(WebPubSubHubPropertiesOutput{})
	pulumi.RegisterOutputType(WebPubSubHubPropertiesResponseOutput{})
}
