// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves a SQL Server ESU license resource
func LookupSqlServerEsuLicense(ctx *pulumi.Context, args *LookupSqlServerEsuLicenseArgs, opts ...pulumi.InvokeOption) (*LookupSqlServerEsuLicenseResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupSqlServerEsuLicenseResult
	err := ctx.Invoke("azure-native:azurearcdata/v20250301preview:getSqlServerEsuLicense", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSqlServerEsuLicenseArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of SQL Server ESU License
	SqlServerEsuLicenseName string `pulumi:"sqlServerEsuLicenseName"`
}

// Describe SQL Server ESU license resource.
type LookupSqlServerEsuLicenseResult struct {
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// SQL Server ESU license properties
	Properties SqlServerEsuLicensePropertiesResponse `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

func LookupSqlServerEsuLicenseOutput(ctx *pulumi.Context, args LookupSqlServerEsuLicenseOutputArgs, opts ...pulumi.InvokeOption) LookupSqlServerEsuLicenseResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSqlServerEsuLicenseResultOutput, error) {
			args := v.(LookupSqlServerEsuLicenseArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:azurearcdata/v20250301preview:getSqlServerEsuLicense", args, LookupSqlServerEsuLicenseResultOutput{}, options).(LookupSqlServerEsuLicenseResultOutput), nil
		}).(LookupSqlServerEsuLicenseResultOutput)
}

type LookupSqlServerEsuLicenseOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of SQL Server ESU License
	SqlServerEsuLicenseName pulumi.StringInput `pulumi:"sqlServerEsuLicenseName"`
}

func (LookupSqlServerEsuLicenseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlServerEsuLicenseArgs)(nil)).Elem()
}

// Describe SQL Server ESU license resource.
type LookupSqlServerEsuLicenseResultOutput struct{ *pulumi.OutputState }

func (LookupSqlServerEsuLicenseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSqlServerEsuLicenseResult)(nil)).Elem()
}

func (o LookupSqlServerEsuLicenseResultOutput) ToLookupSqlServerEsuLicenseResultOutput() LookupSqlServerEsuLicenseResultOutput {
	return o
}

func (o LookupSqlServerEsuLicenseResultOutput) ToLookupSqlServerEsuLicenseResultOutputWithContext(ctx context.Context) LookupSqlServerEsuLicenseResultOutput {
	return o
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupSqlServerEsuLicenseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) string { return v.Id }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o LookupSqlServerEsuLicenseResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o LookupSqlServerEsuLicenseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) string { return v.Name }).(pulumi.StringOutput)
}

// SQL Server ESU license properties
func (o LookupSqlServerEsuLicenseResultOutput) Properties() SqlServerEsuLicensePropertiesResponseOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) SqlServerEsuLicensePropertiesResponse { return v.Properties }).(SqlServerEsuLicensePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupSqlServerEsuLicenseResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o LookupSqlServerEsuLicenseResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupSqlServerEsuLicenseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSqlServerEsuLicenseResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSqlServerEsuLicenseResultOutput{})
}
