// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The service account provisioning mode for this Active Directory connector.
type AccountProvisioningMode string

const (
	AccountProvisioningModeAutomatic = AccountProvisioningMode("automatic")
	AccountProvisioningModeManual    = AccountProvisioningMode("manual")
)

func (AccountProvisioningMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountProvisioningMode)(nil)).Elem()
}

func (e AccountProvisioningMode) ToAccountProvisioningModeOutput() AccountProvisioningModeOutput {
	return pulumi.ToOutput(e).(AccountProvisioningModeOutput)
}

func (e AccountProvisioningMode) ToAccountProvisioningModeOutputWithContext(ctx context.Context) AccountProvisioningModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AccountProvisioningModeOutput)
}

func (e AccountProvisioningMode) ToAccountProvisioningModePtrOutput() AccountProvisioningModePtrOutput {
	return e.ToAccountProvisioningModePtrOutputWithContext(context.Background())
}

func (e AccountProvisioningMode) ToAccountProvisioningModePtrOutputWithContext(ctx context.Context) AccountProvisioningModePtrOutput {
	return AccountProvisioningMode(e).ToAccountProvisioningModeOutputWithContext(ctx).ToAccountProvisioningModePtrOutputWithContext(ctx)
}

func (e AccountProvisioningMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountProvisioningMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AccountProvisioningMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AccountProvisioningMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AccountProvisioningModeOutput struct{ *pulumi.OutputState }

func (AccountProvisioningModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountProvisioningMode)(nil)).Elem()
}

func (o AccountProvisioningModeOutput) ToAccountProvisioningModeOutput() AccountProvisioningModeOutput {
	return o
}

func (o AccountProvisioningModeOutput) ToAccountProvisioningModeOutputWithContext(ctx context.Context) AccountProvisioningModeOutput {
	return o
}

func (o AccountProvisioningModeOutput) ToAccountProvisioningModePtrOutput() AccountProvisioningModePtrOutput {
	return o.ToAccountProvisioningModePtrOutputWithContext(context.Background())
}

func (o AccountProvisioningModeOutput) ToAccountProvisioningModePtrOutputWithContext(ctx context.Context) AccountProvisioningModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountProvisioningMode) *AccountProvisioningMode {
		return &v
	}).(AccountProvisioningModePtrOutput)
}

func (o AccountProvisioningModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AccountProvisioningModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountProvisioningMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AccountProvisioningModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountProvisioningModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AccountProvisioningMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AccountProvisioningModePtrOutput struct{ *pulumi.OutputState }

func (AccountProvisioningModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountProvisioningMode)(nil)).Elem()
}

func (o AccountProvisioningModePtrOutput) ToAccountProvisioningModePtrOutput() AccountProvisioningModePtrOutput {
	return o
}

func (o AccountProvisioningModePtrOutput) ToAccountProvisioningModePtrOutputWithContext(ctx context.Context) AccountProvisioningModePtrOutput {
	return o
}

func (o AccountProvisioningModePtrOutput) Elem() AccountProvisioningModeOutput {
	return o.ApplyT(func(v *AccountProvisioningMode) AccountProvisioningMode {
		if v != nil {
			return *v
		}
		var ret AccountProvisioningMode
		return ret
	}).(AccountProvisioningModeOutput)
}

func (o AccountProvisioningModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AccountProvisioningModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AccountProvisioningMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AccountProvisioningModeInput is an input type that accepts values of the AccountProvisioningMode enum
// A concrete instance of `AccountProvisioningModeInput` can be one of the following:
//
//	AccountProvisioningModeAutomatic
//	AccountProvisioningModeManual
type AccountProvisioningModeInput interface {
	pulumi.Input

	ToAccountProvisioningModeOutput() AccountProvisioningModeOutput
	ToAccountProvisioningModeOutputWithContext(context.Context) AccountProvisioningModeOutput
}

var accountProvisioningModePtrType = reflect.TypeOf((**AccountProvisioningMode)(nil)).Elem()

type AccountProvisioningModePtrInput interface {
	pulumi.Input

	ToAccountProvisioningModePtrOutput() AccountProvisioningModePtrOutput
	ToAccountProvisioningModePtrOutputWithContext(context.Context) AccountProvisioningModePtrOutput
}

type accountProvisioningModePtr string

func AccountProvisioningModePtr(v string) AccountProvisioningModePtrInput {
	return (*accountProvisioningModePtr)(&v)
}

func (*accountProvisioningModePtr) ElementType() reflect.Type {
	return accountProvisioningModePtrType
}

func (in *accountProvisioningModePtr) ToAccountProvisioningModePtrOutput() AccountProvisioningModePtrOutput {
	return pulumi.ToOutput(in).(AccountProvisioningModePtrOutput)
}

func (in *accountProvisioningModePtr) ToAccountProvisioningModePtrOutputWithContext(ctx context.Context) AccountProvisioningModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AccountProvisioningModePtrOutput)
}

// The activation state of the license.
type ActivationState string

const (
	ActivationStateActivated   = ActivationState("Activated")
	ActivationStateDeactivated = ActivationState("Deactivated")
)

func (ActivationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivationState)(nil)).Elem()
}

func (e ActivationState) ToActivationStateOutput() ActivationStateOutput {
	return pulumi.ToOutput(e).(ActivationStateOutput)
}

func (e ActivationState) ToActivationStateOutputWithContext(ctx context.Context) ActivationStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ActivationStateOutput)
}

func (e ActivationState) ToActivationStatePtrOutput() ActivationStatePtrOutput {
	return e.ToActivationStatePtrOutputWithContext(context.Background())
}

func (e ActivationState) ToActivationStatePtrOutputWithContext(ctx context.Context) ActivationStatePtrOutput {
	return ActivationState(e).ToActivationStateOutputWithContext(ctx).ToActivationStatePtrOutputWithContext(ctx)
}

func (e ActivationState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActivationState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ActivationState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ActivationState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ActivationStateOutput struct{ *pulumi.OutputState }

func (ActivationStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActivationState)(nil)).Elem()
}

func (o ActivationStateOutput) ToActivationStateOutput() ActivationStateOutput {
	return o
}

func (o ActivationStateOutput) ToActivationStateOutputWithContext(ctx context.Context) ActivationStateOutput {
	return o
}

func (o ActivationStateOutput) ToActivationStatePtrOutput() ActivationStatePtrOutput {
	return o.ToActivationStatePtrOutputWithContext(context.Background())
}

func (o ActivationStateOutput) ToActivationStatePtrOutputWithContext(ctx context.Context) ActivationStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActivationState) *ActivationState {
		return &v
	}).(ActivationStatePtrOutput)
}

func (o ActivationStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ActivationStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActivationState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ActivationStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActivationStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ActivationState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ActivationStatePtrOutput struct{ *pulumi.OutputState }

func (ActivationStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivationState)(nil)).Elem()
}

func (o ActivationStatePtrOutput) ToActivationStatePtrOutput() ActivationStatePtrOutput {
	return o
}

func (o ActivationStatePtrOutput) ToActivationStatePtrOutputWithContext(ctx context.Context) ActivationStatePtrOutput {
	return o
}

func (o ActivationStatePtrOutput) Elem() ActivationStateOutput {
	return o.ApplyT(func(v *ActivationState) ActivationState {
		if v != nil {
			return *v
		}
		var ret ActivationState
		return ret
	}).(ActivationStateOutput)
}

func (o ActivationStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ActivationStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ActivationState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ActivationStateInput is an input type that accepts values of the ActivationState enum
// A concrete instance of `ActivationStateInput` can be one of the following:
//
//	ActivationStateActivated
//	ActivationStateDeactivated
type ActivationStateInput interface {
	pulumi.Input

	ToActivationStateOutput() ActivationStateOutput
	ToActivationStateOutputWithContext(context.Context) ActivationStateOutput
}

var activationStatePtrType = reflect.TypeOf((**ActivationState)(nil)).Elem()

type ActivationStatePtrInput interface {
	pulumi.Input

	ToActivationStatePtrOutput() ActivationStatePtrOutput
	ToActivationStatePtrOutputWithContext(context.Context) ActivationStatePtrOutput
}

type activationStatePtr string

func ActivationStatePtr(v string) ActivationStatePtrInput {
	return (*activationStatePtr)(&v)
}

func (*activationStatePtr) ElementType() reflect.Type {
	return activationStatePtrType
}

func (in *activationStatePtr) ToActivationStatePtrOutput() ActivationStatePtrOutput {
	return pulumi.ToOutput(in).(ActivationStatePtrOutput)
}

func (in *activationStatePtr) ToActivationStatePtrOutputWithContext(ctx context.Context) ActivationStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ActivationStatePtrOutput)
}

// The aggregation type to use for the numerical columns in the dataset.
type AggregationType string

const (
	AggregationTypeAverage = AggregationType("Average")
	AggregationTypeMinimum = AggregationType("Minimum")
	AggregationTypeMaximum = AggregationType("Maximum")
	AggregationTypeSum     = AggregationType("Sum")
	AggregationTypeCount   = AggregationType("Count")
)

func (AggregationType) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationType)(nil)).Elem()
}

func (e AggregationType) ToAggregationTypeOutput() AggregationTypeOutput {
	return pulumi.ToOutput(e).(AggregationTypeOutput)
}

func (e AggregationType) ToAggregationTypeOutputWithContext(ctx context.Context) AggregationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AggregationTypeOutput)
}

func (e AggregationType) ToAggregationTypePtrOutput() AggregationTypePtrOutput {
	return e.ToAggregationTypePtrOutputWithContext(context.Background())
}

func (e AggregationType) ToAggregationTypePtrOutputWithContext(ctx context.Context) AggregationTypePtrOutput {
	return AggregationType(e).ToAggregationTypeOutputWithContext(ctx).ToAggregationTypePtrOutputWithContext(ctx)
}

func (e AggregationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AggregationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AggregationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AggregationTypeOutput struct{ *pulumi.OutputState }

func (AggregationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationType)(nil)).Elem()
}

func (o AggregationTypeOutput) ToAggregationTypeOutput() AggregationTypeOutput {
	return o
}

func (o AggregationTypeOutput) ToAggregationTypeOutputWithContext(ctx context.Context) AggregationTypeOutput {
	return o
}

func (o AggregationTypeOutput) ToAggregationTypePtrOutput() AggregationTypePtrOutput {
	return o.ToAggregationTypePtrOutputWithContext(context.Background())
}

func (o AggregationTypeOutput) ToAggregationTypePtrOutputWithContext(ctx context.Context) AggregationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationType) *AggregationType {
		return &v
	}).(AggregationTypePtrOutput)
}

func (o AggregationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AggregationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AggregationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AggregationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AggregationTypePtrOutput struct{ *pulumi.OutputState }

func (AggregationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationType)(nil)).Elem()
}

func (o AggregationTypePtrOutput) ToAggregationTypePtrOutput() AggregationTypePtrOutput {
	return o
}

func (o AggregationTypePtrOutput) ToAggregationTypePtrOutputWithContext(ctx context.Context) AggregationTypePtrOutput {
	return o
}

func (o AggregationTypePtrOutput) Elem() AggregationTypeOutput {
	return o.ApplyT(func(v *AggregationType) AggregationType {
		if v != nil {
			return *v
		}
		var ret AggregationType
		return ret
	}).(AggregationTypeOutput)
}

func (o AggregationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AggregationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AggregationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AggregationTypeInput is an input type that accepts values of the AggregationType enum
// A concrete instance of `AggregationTypeInput` can be one of the following:
//
//	AggregationTypeAverage
//	AggregationTypeMinimum
//	AggregationTypeMaximum
//	AggregationTypeSum
//	AggregationTypeCount
type AggregationTypeInput interface {
	pulumi.Input

	ToAggregationTypeOutput() AggregationTypeOutput
	ToAggregationTypeOutputWithContext(context.Context) AggregationTypeOutput
}

var aggregationTypePtrType = reflect.TypeOf((**AggregationType)(nil)).Elem()

type AggregationTypePtrInput interface {
	pulumi.Input

	ToAggregationTypePtrOutput() AggregationTypePtrOutput
	ToAggregationTypePtrOutputWithContext(context.Context) AggregationTypePtrOutput
}

type aggregationTypePtr string

func AggregationTypePtr(v string) AggregationTypePtrInput {
	return (*aggregationTypePtr)(&v)
}

func (*aggregationTypePtr) ElementType() reflect.Type {
	return aggregationTypePtrType
}

func (in *aggregationTypePtr) ToAggregationTypePtrOutput() AggregationTypePtrOutput {
	return pulumi.ToOutput(in).(AggregationTypePtrOutput)
}

func (in *aggregationTypePtr) ToAggregationTypePtrOutputWithContext(ctx context.Context) AggregationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AggregationTypePtrOutput)
}

// The license type to apply for this managed instance.
type ArcSqlManagedInstanceLicenseType string

const (
	ArcSqlManagedInstanceLicenseTypeBasePrice        = ArcSqlManagedInstanceLicenseType("BasePrice")
	ArcSqlManagedInstanceLicenseTypeLicenseIncluded  = ArcSqlManagedInstanceLicenseType("LicenseIncluded")
	ArcSqlManagedInstanceLicenseTypeDisasterRecovery = ArcSqlManagedInstanceLicenseType("DisasterRecovery")
)

func (ArcSqlManagedInstanceLicenseType) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlManagedInstanceLicenseType)(nil)).Elem()
}

func (e ArcSqlManagedInstanceLicenseType) ToArcSqlManagedInstanceLicenseTypeOutput() ArcSqlManagedInstanceLicenseTypeOutput {
	return pulumi.ToOutput(e).(ArcSqlManagedInstanceLicenseTypeOutput)
}

func (e ArcSqlManagedInstanceLicenseType) ToArcSqlManagedInstanceLicenseTypeOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArcSqlManagedInstanceLicenseTypeOutput)
}

func (e ArcSqlManagedInstanceLicenseType) ToArcSqlManagedInstanceLicenseTypePtrOutput() ArcSqlManagedInstanceLicenseTypePtrOutput {
	return e.ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(context.Background())
}

func (e ArcSqlManagedInstanceLicenseType) ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypePtrOutput {
	return ArcSqlManagedInstanceLicenseType(e).ToArcSqlManagedInstanceLicenseTypeOutputWithContext(ctx).ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(ctx)
}

func (e ArcSqlManagedInstanceLicenseType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlManagedInstanceLicenseType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlManagedInstanceLicenseType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArcSqlManagedInstanceLicenseType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArcSqlManagedInstanceLicenseTypeOutput struct{ *pulumi.OutputState }

func (ArcSqlManagedInstanceLicenseTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlManagedInstanceLicenseType)(nil)).Elem()
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToArcSqlManagedInstanceLicenseTypeOutput() ArcSqlManagedInstanceLicenseTypeOutput {
	return o
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToArcSqlManagedInstanceLicenseTypeOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypeOutput {
	return o
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToArcSqlManagedInstanceLicenseTypePtrOutput() ArcSqlManagedInstanceLicenseTypePtrOutput {
	return o.ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(context.Background())
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcSqlManagedInstanceLicenseType) *ArcSqlManagedInstanceLicenseType {
		return &v
	}).(ArcSqlManagedInstanceLicenseTypePtrOutput)
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlManagedInstanceLicenseType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlManagedInstanceLicenseTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlManagedInstanceLicenseType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArcSqlManagedInstanceLicenseTypePtrOutput struct{ *pulumi.OutputState }

func (ArcSqlManagedInstanceLicenseTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcSqlManagedInstanceLicenseType)(nil)).Elem()
}

func (o ArcSqlManagedInstanceLicenseTypePtrOutput) ToArcSqlManagedInstanceLicenseTypePtrOutput() ArcSqlManagedInstanceLicenseTypePtrOutput {
	return o
}

func (o ArcSqlManagedInstanceLicenseTypePtrOutput) ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypePtrOutput {
	return o
}

func (o ArcSqlManagedInstanceLicenseTypePtrOutput) Elem() ArcSqlManagedInstanceLicenseTypeOutput {
	return o.ApplyT(func(v *ArcSqlManagedInstanceLicenseType) ArcSqlManagedInstanceLicenseType {
		if v != nil {
			return *v
		}
		var ret ArcSqlManagedInstanceLicenseType
		return ret
	}).(ArcSqlManagedInstanceLicenseTypeOutput)
}

func (o ArcSqlManagedInstanceLicenseTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlManagedInstanceLicenseTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArcSqlManagedInstanceLicenseType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArcSqlManagedInstanceLicenseTypeInput is an input type that accepts values of the ArcSqlManagedInstanceLicenseType enum
// A concrete instance of `ArcSqlManagedInstanceLicenseTypeInput` can be one of the following:
//
//	ArcSqlManagedInstanceLicenseTypeBasePrice
//	ArcSqlManagedInstanceLicenseTypeLicenseIncluded
//	ArcSqlManagedInstanceLicenseTypeDisasterRecovery
type ArcSqlManagedInstanceLicenseTypeInput interface {
	pulumi.Input

	ToArcSqlManagedInstanceLicenseTypeOutput() ArcSqlManagedInstanceLicenseTypeOutput
	ToArcSqlManagedInstanceLicenseTypeOutputWithContext(context.Context) ArcSqlManagedInstanceLicenseTypeOutput
}

var arcSqlManagedInstanceLicenseTypePtrType = reflect.TypeOf((**ArcSqlManagedInstanceLicenseType)(nil)).Elem()

type ArcSqlManagedInstanceLicenseTypePtrInput interface {
	pulumi.Input

	ToArcSqlManagedInstanceLicenseTypePtrOutput() ArcSqlManagedInstanceLicenseTypePtrOutput
	ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(context.Context) ArcSqlManagedInstanceLicenseTypePtrOutput
}

type arcSqlManagedInstanceLicenseTypePtr string

func ArcSqlManagedInstanceLicenseTypePtr(v string) ArcSqlManagedInstanceLicenseTypePtrInput {
	return (*arcSqlManagedInstanceLicenseTypePtr)(&v)
}

func (*arcSqlManagedInstanceLicenseTypePtr) ElementType() reflect.Type {
	return arcSqlManagedInstanceLicenseTypePtrType
}

func (in *arcSqlManagedInstanceLicenseTypePtr) ToArcSqlManagedInstanceLicenseTypePtrOutput() ArcSqlManagedInstanceLicenseTypePtrOutput {
	return pulumi.ToOutput(in).(ArcSqlManagedInstanceLicenseTypePtrOutput)
}

func (in *arcSqlManagedInstanceLicenseTypePtr) ToArcSqlManagedInstanceLicenseTypePtrOutputWithContext(ctx context.Context) ArcSqlManagedInstanceLicenseTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArcSqlManagedInstanceLicenseTypePtrOutput)
}

// Property that determines whether a given availability replica can run in synchronous-commit mode
type ArcSqlServerAvailabilityMode string

const (
	ArcSqlServerAvailabilityMode_SYNCHRONOUS_COMMIT  = ArcSqlServerAvailabilityMode("SYNCHRONOUS_COMMIT")
	ArcSqlServerAvailabilityMode_ASYNCHRONOUS_COMMIT = ArcSqlServerAvailabilityMode("ASYNCHRONOUS_COMMIT")
)

func (ArcSqlServerAvailabilityMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlServerAvailabilityMode)(nil)).Elem()
}

func (e ArcSqlServerAvailabilityMode) ToArcSqlServerAvailabilityModeOutput() ArcSqlServerAvailabilityModeOutput {
	return pulumi.ToOutput(e).(ArcSqlServerAvailabilityModeOutput)
}

func (e ArcSqlServerAvailabilityMode) ToArcSqlServerAvailabilityModeOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArcSqlServerAvailabilityModeOutput)
}

func (e ArcSqlServerAvailabilityMode) ToArcSqlServerAvailabilityModePtrOutput() ArcSqlServerAvailabilityModePtrOutput {
	return e.ToArcSqlServerAvailabilityModePtrOutputWithContext(context.Background())
}

func (e ArcSqlServerAvailabilityMode) ToArcSqlServerAvailabilityModePtrOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModePtrOutput {
	return ArcSqlServerAvailabilityMode(e).ToArcSqlServerAvailabilityModeOutputWithContext(ctx).ToArcSqlServerAvailabilityModePtrOutputWithContext(ctx)
}

func (e ArcSqlServerAvailabilityMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlServerAvailabilityMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlServerAvailabilityMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArcSqlServerAvailabilityMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArcSqlServerAvailabilityModeOutput struct{ *pulumi.OutputState }

func (ArcSqlServerAvailabilityModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlServerAvailabilityMode)(nil)).Elem()
}

func (o ArcSqlServerAvailabilityModeOutput) ToArcSqlServerAvailabilityModeOutput() ArcSqlServerAvailabilityModeOutput {
	return o
}

func (o ArcSqlServerAvailabilityModeOutput) ToArcSqlServerAvailabilityModeOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModeOutput {
	return o
}

func (o ArcSqlServerAvailabilityModeOutput) ToArcSqlServerAvailabilityModePtrOutput() ArcSqlServerAvailabilityModePtrOutput {
	return o.ToArcSqlServerAvailabilityModePtrOutputWithContext(context.Background())
}

func (o ArcSqlServerAvailabilityModeOutput) ToArcSqlServerAvailabilityModePtrOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcSqlServerAvailabilityMode) *ArcSqlServerAvailabilityMode {
		return &v
	}).(ArcSqlServerAvailabilityModePtrOutput)
}

func (o ArcSqlServerAvailabilityModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArcSqlServerAvailabilityModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlServerAvailabilityMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArcSqlServerAvailabilityModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlServerAvailabilityModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlServerAvailabilityMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArcSqlServerAvailabilityModePtrOutput struct{ *pulumi.OutputState }

func (ArcSqlServerAvailabilityModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcSqlServerAvailabilityMode)(nil)).Elem()
}

func (o ArcSqlServerAvailabilityModePtrOutput) ToArcSqlServerAvailabilityModePtrOutput() ArcSqlServerAvailabilityModePtrOutput {
	return o
}

func (o ArcSqlServerAvailabilityModePtrOutput) ToArcSqlServerAvailabilityModePtrOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModePtrOutput {
	return o
}

func (o ArcSqlServerAvailabilityModePtrOutput) Elem() ArcSqlServerAvailabilityModeOutput {
	return o.ApplyT(func(v *ArcSqlServerAvailabilityMode) ArcSqlServerAvailabilityMode {
		if v != nil {
			return *v
		}
		var ret ArcSqlServerAvailabilityMode
		return ret
	}).(ArcSqlServerAvailabilityModeOutput)
}

func (o ArcSqlServerAvailabilityModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlServerAvailabilityModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArcSqlServerAvailabilityMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArcSqlServerAvailabilityModeInput is an input type that accepts values of the ArcSqlServerAvailabilityMode enum
// A concrete instance of `ArcSqlServerAvailabilityModeInput` can be one of the following:
//
//	ArcSqlServerAvailabilityMode_SYNCHRONOUS_COMMIT
//	ArcSqlServerAvailabilityMode_ASYNCHRONOUS_COMMIT
type ArcSqlServerAvailabilityModeInput interface {
	pulumi.Input

	ToArcSqlServerAvailabilityModeOutput() ArcSqlServerAvailabilityModeOutput
	ToArcSqlServerAvailabilityModeOutputWithContext(context.Context) ArcSqlServerAvailabilityModeOutput
}

var arcSqlServerAvailabilityModePtrType = reflect.TypeOf((**ArcSqlServerAvailabilityMode)(nil)).Elem()

type ArcSqlServerAvailabilityModePtrInput interface {
	pulumi.Input

	ToArcSqlServerAvailabilityModePtrOutput() ArcSqlServerAvailabilityModePtrOutput
	ToArcSqlServerAvailabilityModePtrOutputWithContext(context.Context) ArcSqlServerAvailabilityModePtrOutput
}

type arcSqlServerAvailabilityModePtr string

func ArcSqlServerAvailabilityModePtr(v string) ArcSqlServerAvailabilityModePtrInput {
	return (*arcSqlServerAvailabilityModePtr)(&v)
}

func (*arcSqlServerAvailabilityModePtr) ElementType() reflect.Type {
	return arcSqlServerAvailabilityModePtrType
}

func (in *arcSqlServerAvailabilityModePtr) ToArcSqlServerAvailabilityModePtrOutput() ArcSqlServerAvailabilityModePtrOutput {
	return pulumi.ToOutput(in).(ArcSqlServerAvailabilityModePtrOutput)
}

func (in *arcSqlServerAvailabilityModePtr) ToArcSqlServerAvailabilityModePtrOutputWithContext(ctx context.Context) ArcSqlServerAvailabilityModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArcSqlServerAvailabilityModePtrOutput)
}

// Property to set the failover mode of the availability group replica
type ArcSqlServerFailoverMode string

const (
	ArcSqlServerFailoverModeAUTOMATIC = ArcSqlServerFailoverMode("AUTOMATIC")
	ArcSqlServerFailoverModeMANUAL    = ArcSqlServerFailoverMode("MANUAL")
	ArcSqlServerFailoverModeEXTERNAL  = ArcSqlServerFailoverMode("EXTERNAL")
	ArcSqlServerFailoverModeNONE      = ArcSqlServerFailoverMode("NONE")
)

func (ArcSqlServerFailoverMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlServerFailoverMode)(nil)).Elem()
}

func (e ArcSqlServerFailoverMode) ToArcSqlServerFailoverModeOutput() ArcSqlServerFailoverModeOutput {
	return pulumi.ToOutput(e).(ArcSqlServerFailoverModeOutput)
}

func (e ArcSqlServerFailoverMode) ToArcSqlServerFailoverModeOutputWithContext(ctx context.Context) ArcSqlServerFailoverModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ArcSqlServerFailoverModeOutput)
}

func (e ArcSqlServerFailoverMode) ToArcSqlServerFailoverModePtrOutput() ArcSqlServerFailoverModePtrOutput {
	return e.ToArcSqlServerFailoverModePtrOutputWithContext(context.Background())
}

func (e ArcSqlServerFailoverMode) ToArcSqlServerFailoverModePtrOutputWithContext(ctx context.Context) ArcSqlServerFailoverModePtrOutput {
	return ArcSqlServerFailoverMode(e).ToArcSqlServerFailoverModeOutputWithContext(ctx).ToArcSqlServerFailoverModePtrOutputWithContext(ctx)
}

func (e ArcSqlServerFailoverMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlServerFailoverMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ArcSqlServerFailoverMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ArcSqlServerFailoverMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ArcSqlServerFailoverModeOutput struct{ *pulumi.OutputState }

func (ArcSqlServerFailoverModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArcSqlServerFailoverMode)(nil)).Elem()
}

func (o ArcSqlServerFailoverModeOutput) ToArcSqlServerFailoverModeOutput() ArcSqlServerFailoverModeOutput {
	return o
}

func (o ArcSqlServerFailoverModeOutput) ToArcSqlServerFailoverModeOutputWithContext(ctx context.Context) ArcSqlServerFailoverModeOutput {
	return o
}

func (o ArcSqlServerFailoverModeOutput) ToArcSqlServerFailoverModePtrOutput() ArcSqlServerFailoverModePtrOutput {
	return o.ToArcSqlServerFailoverModePtrOutputWithContext(context.Background())
}

func (o ArcSqlServerFailoverModeOutput) ToArcSqlServerFailoverModePtrOutputWithContext(ctx context.Context) ArcSqlServerFailoverModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArcSqlServerFailoverMode) *ArcSqlServerFailoverMode {
		return &v
	}).(ArcSqlServerFailoverModePtrOutput)
}

func (o ArcSqlServerFailoverModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ArcSqlServerFailoverModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlServerFailoverMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ArcSqlServerFailoverModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlServerFailoverModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ArcSqlServerFailoverMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ArcSqlServerFailoverModePtrOutput struct{ *pulumi.OutputState }

func (ArcSqlServerFailoverModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArcSqlServerFailoverMode)(nil)).Elem()
}

func (o ArcSqlServerFailoverModePtrOutput) ToArcSqlServerFailoverModePtrOutput() ArcSqlServerFailoverModePtrOutput {
	return o
}

func (o ArcSqlServerFailoverModePtrOutput) ToArcSqlServerFailoverModePtrOutputWithContext(ctx context.Context) ArcSqlServerFailoverModePtrOutput {
	return o
}

func (o ArcSqlServerFailoverModePtrOutput) Elem() ArcSqlServerFailoverModeOutput {
	return o.ApplyT(func(v *ArcSqlServerFailoverMode) ArcSqlServerFailoverMode {
		if v != nil {
			return *v
		}
		var ret ArcSqlServerFailoverMode
		return ret
	}).(ArcSqlServerFailoverModeOutput)
}

func (o ArcSqlServerFailoverModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ArcSqlServerFailoverModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ArcSqlServerFailoverMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ArcSqlServerFailoverModeInput is an input type that accepts values of the ArcSqlServerFailoverMode enum
// A concrete instance of `ArcSqlServerFailoverModeInput` can be one of the following:
//
//	ArcSqlServerFailoverModeAUTOMATIC
//	ArcSqlServerFailoverModeMANUAL
//	ArcSqlServerFailoverModeEXTERNAL
//	ArcSqlServerFailoverModeNONE
type ArcSqlServerFailoverModeInput interface {
	pulumi.Input

	ToArcSqlServerFailoverModeOutput() ArcSqlServerFailoverModeOutput
	ToArcSqlServerFailoverModeOutputWithContext(context.Context) ArcSqlServerFailoverModeOutput
}

var arcSqlServerFailoverModePtrType = reflect.TypeOf((**ArcSqlServerFailoverMode)(nil)).Elem()

type ArcSqlServerFailoverModePtrInput interface {
	pulumi.Input

	ToArcSqlServerFailoverModePtrOutput() ArcSqlServerFailoverModePtrOutput
	ToArcSqlServerFailoverModePtrOutputWithContext(context.Context) ArcSqlServerFailoverModePtrOutput
}

type arcSqlServerFailoverModePtr string

func ArcSqlServerFailoverModePtr(v string) ArcSqlServerFailoverModePtrInput {
	return (*arcSqlServerFailoverModePtr)(&v)
}

func (*arcSqlServerFailoverModePtr) ElementType() reflect.Type {
	return arcSqlServerFailoverModePtrType
}

func (in *arcSqlServerFailoverModePtr) ToArcSqlServerFailoverModePtrOutput() ArcSqlServerFailoverModePtrOutput {
	return pulumi.ToOutput(in).(ArcSqlServerFailoverModePtrOutput)
}

func (in *arcSqlServerFailoverModePtr) ToArcSqlServerFailoverModePtrOutputWithContext(ctx context.Context) ArcSqlServerFailoverModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ArcSqlServerFailoverModePtrOutput)
}

// SQL Server license type.
type BillingPlan string

const (
	BillingPlanPAYG = BillingPlan("PAYG")
	BillingPlanPaid = BillingPlan("Paid")
)

func (BillingPlan) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingPlan)(nil)).Elem()
}

func (e BillingPlan) ToBillingPlanOutput() BillingPlanOutput {
	return pulumi.ToOutput(e).(BillingPlanOutput)
}

func (e BillingPlan) ToBillingPlanOutputWithContext(ctx context.Context) BillingPlanOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BillingPlanOutput)
}

func (e BillingPlan) ToBillingPlanPtrOutput() BillingPlanPtrOutput {
	return e.ToBillingPlanPtrOutputWithContext(context.Background())
}

func (e BillingPlan) ToBillingPlanPtrOutputWithContext(ctx context.Context) BillingPlanPtrOutput {
	return BillingPlan(e).ToBillingPlanOutputWithContext(ctx).ToBillingPlanPtrOutputWithContext(ctx)
}

func (e BillingPlan) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BillingPlan) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BillingPlan) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BillingPlan) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BillingPlanOutput struct{ *pulumi.OutputState }

func (BillingPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BillingPlan)(nil)).Elem()
}

func (o BillingPlanOutput) ToBillingPlanOutput() BillingPlanOutput {
	return o
}

func (o BillingPlanOutput) ToBillingPlanOutputWithContext(ctx context.Context) BillingPlanOutput {
	return o
}

func (o BillingPlanOutput) ToBillingPlanPtrOutput() BillingPlanPtrOutput {
	return o.ToBillingPlanPtrOutputWithContext(context.Background())
}

func (o BillingPlanOutput) ToBillingPlanPtrOutputWithContext(ctx context.Context) BillingPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BillingPlan) *BillingPlan {
		return &v
	}).(BillingPlanPtrOutput)
}

func (o BillingPlanOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BillingPlanOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BillingPlan) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BillingPlanOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BillingPlanOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BillingPlan) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BillingPlanPtrOutput struct{ *pulumi.OutputState }

func (BillingPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BillingPlan)(nil)).Elem()
}

func (o BillingPlanPtrOutput) ToBillingPlanPtrOutput() BillingPlanPtrOutput {
	return o
}

func (o BillingPlanPtrOutput) ToBillingPlanPtrOutputWithContext(ctx context.Context) BillingPlanPtrOutput {
	return o
}

func (o BillingPlanPtrOutput) Elem() BillingPlanOutput {
	return o.ApplyT(func(v *BillingPlan) BillingPlan {
		if v != nil {
			return *v
		}
		var ret BillingPlan
		return ret
	}).(BillingPlanOutput)
}

func (o BillingPlanPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BillingPlanPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BillingPlan) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BillingPlanInput is an input type that accepts values of the BillingPlan enum
// A concrete instance of `BillingPlanInput` can be one of the following:
//
//	BillingPlanPAYG
//	BillingPlanPaid
type BillingPlanInput interface {
	pulumi.Input

	ToBillingPlanOutput() BillingPlanOutput
	ToBillingPlanOutputWithContext(context.Context) BillingPlanOutput
}

var billingPlanPtrType = reflect.TypeOf((**BillingPlan)(nil)).Elem()

type BillingPlanPtrInput interface {
	pulumi.Input

	ToBillingPlanPtrOutput() BillingPlanPtrOutput
	ToBillingPlanPtrOutputWithContext(context.Context) BillingPlanPtrOutput
}

type billingPlanPtr string

func BillingPlanPtr(v string) BillingPlanPtrInput {
	return (*billingPlanPtr)(&v)
}

func (*billingPlanPtr) ElementType() reflect.Type {
	return billingPlanPtrType
}

func (in *billingPlanPtr) ToBillingPlanPtrOutput() BillingPlanPtrOutput {
	return pulumi.ToOutput(in).(BillingPlanPtrOutput)
}

func (in *billingPlanPtr) ToBillingPlanPtrOutputWithContext(ctx context.Context) BillingPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BillingPlanPtrOutput)
}

// Permitted authentication modes for the mirroring endpoint.
type ConnectionAuth string

const (
	ConnectionAuth_Windows_NTLM                  = ConnectionAuth("Windows_NTLM")
	ConnectionAuth_Windows_Kerberos              = ConnectionAuth("Windows_Kerberos")
	ConnectionAuth_Windows_Negotiate             = ConnectionAuth("Windows_Negotiate")
	ConnectionAuthCertificate                    = ConnectionAuth("Certificate")
	ConnectionAuth_Windows_NTLM_Certificate      = ConnectionAuth("Windows_NTLM_Certificate")
	ConnectionAuth_Windows_Kerberos_Certificate  = ConnectionAuth("Windows_Kerberos_Certificate")
	ConnectionAuth_Windows_Negotiate_Certificate = ConnectionAuth("Windows_Negotiate_Certificate")
	ConnectionAuth_Certificate_Windows_NTLM      = ConnectionAuth("Certificate_Windows_NTLM")
	ConnectionAuth_Certificate_Windows_Kerberos  = ConnectionAuth("Certificate_Windows_Kerberos")
	ConnectionAuth_Certificate_Windows_Negotiate = ConnectionAuth("Certificate_Windows_Negotiate")
)

func (ConnectionAuth) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAuth)(nil)).Elem()
}

func (e ConnectionAuth) ToConnectionAuthOutput() ConnectionAuthOutput {
	return pulumi.ToOutput(e).(ConnectionAuthOutput)
}

func (e ConnectionAuth) ToConnectionAuthOutputWithContext(ctx context.Context) ConnectionAuthOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ConnectionAuthOutput)
}

func (e ConnectionAuth) ToConnectionAuthPtrOutput() ConnectionAuthPtrOutput {
	return e.ToConnectionAuthPtrOutputWithContext(context.Background())
}

func (e ConnectionAuth) ToConnectionAuthPtrOutputWithContext(ctx context.Context) ConnectionAuthPtrOutput {
	return ConnectionAuth(e).ToConnectionAuthOutputWithContext(ctx).ToConnectionAuthPtrOutputWithContext(ctx)
}

func (e ConnectionAuth) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionAuth) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ConnectionAuth) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ConnectionAuth) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ConnectionAuthOutput struct{ *pulumi.OutputState }

func (ConnectionAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionAuth)(nil)).Elem()
}

func (o ConnectionAuthOutput) ToConnectionAuthOutput() ConnectionAuthOutput {
	return o
}

func (o ConnectionAuthOutput) ToConnectionAuthOutputWithContext(ctx context.Context) ConnectionAuthOutput {
	return o
}

func (o ConnectionAuthOutput) ToConnectionAuthPtrOutput() ConnectionAuthPtrOutput {
	return o.ToConnectionAuthPtrOutputWithContext(context.Background())
}

func (o ConnectionAuthOutput) ToConnectionAuthPtrOutputWithContext(ctx context.Context) ConnectionAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectionAuth) *ConnectionAuth {
		return &v
	}).(ConnectionAuthPtrOutput)
}

func (o ConnectionAuthOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ConnectionAuthOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionAuth) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ConnectionAuthOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionAuthOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ConnectionAuth) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ConnectionAuthPtrOutput struct{ *pulumi.OutputState }

func (ConnectionAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionAuth)(nil)).Elem()
}

func (o ConnectionAuthPtrOutput) ToConnectionAuthPtrOutput() ConnectionAuthPtrOutput {
	return o
}

func (o ConnectionAuthPtrOutput) ToConnectionAuthPtrOutputWithContext(ctx context.Context) ConnectionAuthPtrOutput {
	return o
}

func (o ConnectionAuthPtrOutput) Elem() ConnectionAuthOutput {
	return o.ApplyT(func(v *ConnectionAuth) ConnectionAuth {
		if v != nil {
			return *v
		}
		var ret ConnectionAuth
		return ret
	}).(ConnectionAuthOutput)
}

func (o ConnectionAuthPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ConnectionAuthPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ConnectionAuth) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ConnectionAuthInput is an input type that accepts values of the ConnectionAuth enum
// A concrete instance of `ConnectionAuthInput` can be one of the following:
//
//	ConnectionAuth_Windows_NTLM
//	ConnectionAuth_Windows_Kerberos
//	ConnectionAuth_Windows_Negotiate
//	ConnectionAuthCertificate
//	ConnectionAuth_Windows_NTLM_Certificate
//	ConnectionAuth_Windows_Kerberos_Certificate
//	ConnectionAuth_Windows_Negotiate_Certificate
//	ConnectionAuth_Certificate_Windows_NTLM
//	ConnectionAuth_Certificate_Windows_Kerberos
//	ConnectionAuth_Certificate_Windows_Negotiate
type ConnectionAuthInput interface {
	pulumi.Input

	ToConnectionAuthOutput() ConnectionAuthOutput
	ToConnectionAuthOutputWithContext(context.Context) ConnectionAuthOutput
}

var connectionAuthPtrType = reflect.TypeOf((**ConnectionAuth)(nil)).Elem()

type ConnectionAuthPtrInput interface {
	pulumi.Input

	ToConnectionAuthPtrOutput() ConnectionAuthPtrOutput
	ToConnectionAuthPtrOutputWithContext(context.Context) ConnectionAuthPtrOutput
}

type connectionAuthPtr string

func ConnectionAuthPtr(v string) ConnectionAuthPtrInput {
	return (*connectionAuthPtr)(&v)
}

func (*connectionAuthPtr) ElementType() reflect.Type {
	return connectionAuthPtrType
}

func (in *connectionAuthPtr) ToConnectionAuthPtrOutput() ConnectionAuthPtrOutput {
	return pulumi.ToOutput(in).(ConnectionAuthPtrOutput)
}

func (in *connectionAuthPtr) ToConnectionAuthPtrOutputWithContext(ctx context.Context) ConnectionAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ConnectionAuthPtrOutput)
}

// Database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. sourceDatabaseId and restorePointInTime must be specified.
type DatabaseCreateMode string

const (
	DatabaseCreateModeDefault            = DatabaseCreateMode("Default")
	DatabaseCreateModePointInTimeRestore = DatabaseCreateMode("PointInTimeRestore")
)

func (DatabaseCreateMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseCreateMode)(nil)).Elem()
}

func (e DatabaseCreateMode) ToDatabaseCreateModeOutput() DatabaseCreateModeOutput {
	return pulumi.ToOutput(e).(DatabaseCreateModeOutput)
}

func (e DatabaseCreateMode) ToDatabaseCreateModeOutputWithContext(ctx context.Context) DatabaseCreateModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseCreateModeOutput)
}

func (e DatabaseCreateMode) ToDatabaseCreateModePtrOutput() DatabaseCreateModePtrOutput {
	return e.ToDatabaseCreateModePtrOutputWithContext(context.Background())
}

func (e DatabaseCreateMode) ToDatabaseCreateModePtrOutputWithContext(ctx context.Context) DatabaseCreateModePtrOutput {
	return DatabaseCreateMode(e).ToDatabaseCreateModeOutputWithContext(ctx).ToDatabaseCreateModePtrOutputWithContext(ctx)
}

func (e DatabaseCreateMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseCreateMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseCreateMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseCreateMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseCreateModeOutput struct{ *pulumi.OutputState }

func (DatabaseCreateModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseCreateMode)(nil)).Elem()
}

func (o DatabaseCreateModeOutput) ToDatabaseCreateModeOutput() DatabaseCreateModeOutput {
	return o
}

func (o DatabaseCreateModeOutput) ToDatabaseCreateModeOutputWithContext(ctx context.Context) DatabaseCreateModeOutput {
	return o
}

func (o DatabaseCreateModeOutput) ToDatabaseCreateModePtrOutput() DatabaseCreateModePtrOutput {
	return o.ToDatabaseCreateModePtrOutputWithContext(context.Background())
}

func (o DatabaseCreateModeOutput) ToDatabaseCreateModePtrOutputWithContext(ctx context.Context) DatabaseCreateModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseCreateMode) *DatabaseCreateMode {
		return &v
	}).(DatabaseCreateModePtrOutput)
}

func (o DatabaseCreateModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseCreateModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseCreateMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseCreateModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseCreateModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseCreateMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseCreateModePtrOutput struct{ *pulumi.OutputState }

func (DatabaseCreateModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseCreateMode)(nil)).Elem()
}

func (o DatabaseCreateModePtrOutput) ToDatabaseCreateModePtrOutput() DatabaseCreateModePtrOutput {
	return o
}

func (o DatabaseCreateModePtrOutput) ToDatabaseCreateModePtrOutputWithContext(ctx context.Context) DatabaseCreateModePtrOutput {
	return o
}

func (o DatabaseCreateModePtrOutput) Elem() DatabaseCreateModeOutput {
	return o.ApplyT(func(v *DatabaseCreateMode) DatabaseCreateMode {
		if v != nil {
			return *v
		}
		var ret DatabaseCreateMode
		return ret
	}).(DatabaseCreateModeOutput)
}

func (o DatabaseCreateModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseCreateModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseCreateMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseCreateModeInput is an input type that accepts values of the DatabaseCreateMode enum
// A concrete instance of `DatabaseCreateModeInput` can be one of the following:
//
//	DatabaseCreateModeDefault
//	DatabaseCreateModePointInTimeRestore
type DatabaseCreateModeInput interface {
	pulumi.Input

	ToDatabaseCreateModeOutput() DatabaseCreateModeOutput
	ToDatabaseCreateModeOutputWithContext(context.Context) DatabaseCreateModeOutput
}

var databaseCreateModePtrType = reflect.TypeOf((**DatabaseCreateMode)(nil)).Elem()

type DatabaseCreateModePtrInput interface {
	pulumi.Input

	ToDatabaseCreateModePtrOutput() DatabaseCreateModePtrOutput
	ToDatabaseCreateModePtrOutputWithContext(context.Context) DatabaseCreateModePtrOutput
}

type databaseCreateModePtr string

func DatabaseCreateModePtr(v string) DatabaseCreateModePtrInput {
	return (*databaseCreateModePtr)(&v)
}

func (*databaseCreateModePtr) ElementType() reflect.Type {
	return databaseCreateModePtrType
}

func (in *databaseCreateModePtr) ToDatabaseCreateModePtrOutput() DatabaseCreateModePtrOutput {
	return pulumi.ToOutput(in).(DatabaseCreateModePtrOutput)
}

func (in *databaseCreateModePtr) ToDatabaseCreateModePtrOutputWithContext(ctx context.Context) DatabaseCreateModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseCreateModePtrOutput)
}

// State of the database.
type DatabaseState string

const (
	DatabaseStateOnline           = DatabaseState("Online")
	DatabaseStateRestoring        = DatabaseState("Restoring")
	DatabaseStateRecovering       = DatabaseState("Recovering")
	DatabaseStateRecoveryPending  = DatabaseState("RecoveryPending")
	DatabaseStateSuspect          = DatabaseState("Suspect")
	DatabaseStateEmergency        = DatabaseState("Emergency")
	DatabaseStateOffline          = DatabaseState("Offline")
	DatabaseStateCopying          = DatabaseState("Copying")
	DatabaseStateOfflineSecondary = DatabaseState("OfflineSecondary")
)

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseState)(nil)).Elem()
}

func (e DatabaseState) ToDatabaseStateOutput() DatabaseStateOutput {
	return pulumi.ToOutput(e).(DatabaseStateOutput)
}

func (e DatabaseState) ToDatabaseStateOutputWithContext(ctx context.Context) DatabaseStateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatabaseStateOutput)
}

func (e DatabaseState) ToDatabaseStatePtrOutput() DatabaseStatePtrOutput {
	return e.ToDatabaseStatePtrOutputWithContext(context.Background())
}

func (e DatabaseState) ToDatabaseStatePtrOutputWithContext(ctx context.Context) DatabaseStatePtrOutput {
	return DatabaseState(e).ToDatabaseStateOutputWithContext(ctx).ToDatabaseStatePtrOutputWithContext(ctx)
}

func (e DatabaseState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatabaseState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatabaseState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatabaseStateOutput struct{ *pulumi.OutputState }

func (DatabaseStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseState)(nil)).Elem()
}

func (o DatabaseStateOutput) ToDatabaseStateOutput() DatabaseStateOutput {
	return o
}

func (o DatabaseStateOutput) ToDatabaseStateOutputWithContext(ctx context.Context) DatabaseStateOutput {
	return o
}

func (o DatabaseStateOutput) ToDatabaseStatePtrOutput() DatabaseStatePtrOutput {
	return o.ToDatabaseStatePtrOutputWithContext(context.Background())
}

func (o DatabaseStateOutput) ToDatabaseStatePtrOutputWithContext(ctx context.Context) DatabaseStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseState) *DatabaseState {
		return &v
	}).(DatabaseStatePtrOutput)
}

func (o DatabaseStateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatabaseStateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseState) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatabaseStateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseStateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatabaseState) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatabaseStatePtrOutput struct{ *pulumi.OutputState }

func (DatabaseStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseState)(nil)).Elem()
}

func (o DatabaseStatePtrOutput) ToDatabaseStatePtrOutput() DatabaseStatePtrOutput {
	return o
}

func (o DatabaseStatePtrOutput) ToDatabaseStatePtrOutputWithContext(ctx context.Context) DatabaseStatePtrOutput {
	return o
}

func (o DatabaseStatePtrOutput) Elem() DatabaseStateOutput {
	return o.ApplyT(func(v *DatabaseState) DatabaseState {
		if v != nil {
			return *v
		}
		var ret DatabaseState
		return ret
	}).(DatabaseStateOutput)
}

func (o DatabaseStatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatabaseStatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatabaseState) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatabaseStateInput is an input type that accepts values of the DatabaseState enum
// A concrete instance of `DatabaseStateInput` can be one of the following:
//
//	DatabaseStateOnline
//	DatabaseStateRestoring
//	DatabaseStateRecovering
//	DatabaseStateRecoveryPending
//	DatabaseStateSuspect
//	DatabaseStateEmergency
//	DatabaseStateOffline
//	DatabaseStateCopying
//	DatabaseStateOfflineSecondary
type DatabaseStateInput interface {
	pulumi.Input

	ToDatabaseStateOutput() DatabaseStateOutput
	ToDatabaseStateOutputWithContext(context.Context) DatabaseStateOutput
}

var databaseStatePtrType = reflect.TypeOf((**DatabaseState)(nil)).Elem()

type DatabaseStatePtrInput interface {
	pulumi.Input

	ToDatabaseStatePtrOutput() DatabaseStatePtrOutput
	ToDatabaseStatePtrOutputWithContext(context.Context) DatabaseStatePtrOutput
}

type databaseStatePtr string

func DatabaseStatePtr(v string) DatabaseStatePtrInput {
	return (*databaseStatePtr)(&v)
}

func (*databaseStatePtr) ElementType() reflect.Type {
	return databaseStatePtrType
}

func (in *databaseStatePtr) ToDatabaseStatePtrOutput() DatabaseStatePtrOutput {
	return pulumi.ToOutput(in).(DatabaseStatePtrOutput)
}

func (in *databaseStatePtr) ToDatabaseStatePtrOutputWithContext(ctx context.Context) DatabaseStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatabaseStatePtrOutput)
}

// SQL Server edition.
type EditionType string

const (
	EditionTypeEvaluation             = EditionType("Evaluation")
	EditionTypeEnterprise             = EditionType("Enterprise")
	EditionTypeStandard               = EditionType("Standard")
	EditionTypeWeb                    = EditionType("Web")
	EditionTypeDeveloper              = EditionType("Developer")
	EditionTypeExpress                = EditionType("Express")
	EditionType_Business_Intelligence = EditionType("Business Intelligence")
)

func (EditionType) ElementType() reflect.Type {
	return reflect.TypeOf((*EditionType)(nil)).Elem()
}

func (e EditionType) ToEditionTypeOutput() EditionTypeOutput {
	return pulumi.ToOutput(e).(EditionTypeOutput)
}

func (e EditionType) ToEditionTypeOutputWithContext(ctx context.Context) EditionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EditionTypeOutput)
}

func (e EditionType) ToEditionTypePtrOutput() EditionTypePtrOutput {
	return e.ToEditionTypePtrOutputWithContext(context.Background())
}

func (e EditionType) ToEditionTypePtrOutputWithContext(ctx context.Context) EditionTypePtrOutput {
	return EditionType(e).ToEditionTypeOutputWithContext(ctx).ToEditionTypePtrOutputWithContext(ctx)
}

func (e EditionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EditionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EditionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EditionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EditionTypeOutput struct{ *pulumi.OutputState }

func (EditionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EditionType)(nil)).Elem()
}

func (o EditionTypeOutput) ToEditionTypeOutput() EditionTypeOutput {
	return o
}

func (o EditionTypeOutput) ToEditionTypeOutputWithContext(ctx context.Context) EditionTypeOutput {
	return o
}

func (o EditionTypeOutput) ToEditionTypePtrOutput() EditionTypePtrOutput {
	return o.ToEditionTypePtrOutputWithContext(context.Background())
}

func (o EditionTypeOutput) ToEditionTypePtrOutputWithContext(ctx context.Context) EditionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EditionType) *EditionType {
		return &v
	}).(EditionTypePtrOutput)
}

func (o EditionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EditionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EditionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EditionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EditionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EditionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EditionTypePtrOutput struct{ *pulumi.OutputState }

func (EditionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EditionType)(nil)).Elem()
}

func (o EditionTypePtrOutput) ToEditionTypePtrOutput() EditionTypePtrOutput {
	return o
}

func (o EditionTypePtrOutput) ToEditionTypePtrOutputWithContext(ctx context.Context) EditionTypePtrOutput {
	return o
}

func (o EditionTypePtrOutput) Elem() EditionTypeOutput {
	return o.ApplyT(func(v *EditionType) EditionType {
		if v != nil {
			return *v
		}
		var ret EditionType
		return ret
	}).(EditionTypeOutput)
}

func (o EditionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EditionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EditionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EditionTypeInput is an input type that accepts values of the EditionType enum
// A concrete instance of `EditionTypeInput` can be one of the following:
//
//	EditionTypeEvaluation
//	EditionTypeEnterprise
//	EditionTypeStandard
//	EditionTypeWeb
//	EditionTypeDeveloper
//	EditionTypeExpress
//	EditionType_Business_Intelligence
type EditionTypeInput interface {
	pulumi.Input

	ToEditionTypeOutput() EditionTypeOutput
	ToEditionTypeOutputWithContext(context.Context) EditionTypeOutput
}

var editionTypePtrType = reflect.TypeOf((**EditionType)(nil)).Elem()

type EditionTypePtrInput interface {
	pulumi.Input

	ToEditionTypePtrOutput() EditionTypePtrOutput
	ToEditionTypePtrOutputWithContext(context.Context) EditionTypePtrOutput
}

type editionTypePtr string

func EditionTypePtr(v string) EditionTypePtrInput {
	return (*editionTypePtr)(&v)
}

func (*editionTypePtr) ElementType() reflect.Type {
	return editionTypePtrType
}

func (in *editionTypePtr) ToEditionTypePtrOutput() EditionTypePtrOutput {
	return pulumi.ToOutput(in).(EditionTypePtrOutput)
}

func (in *editionTypePtr) ToEditionTypePtrOutputWithContext(ctx context.Context) EditionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EditionTypePtrOutput)
}

// The type of the extended location.
type ExtendedLocationTypes string

const (
	ExtendedLocationTypesCustomLocation = ExtendedLocationTypes("CustomLocation")
)

func (ExtendedLocationTypes) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return pulumi.ToOutput(e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ExtendedLocationTypesOutput)
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return e.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return ExtendedLocationTypes(e).ToExtendedLocationTypesOutputWithContext(ctx).ToExtendedLocationTypesPtrOutputWithContext(ctx)
}

func (e ExtendedLocationTypes) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExtendedLocationTypes) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExtendedLocationTypes) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ExtendedLocationTypesOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesOutputWithContext(ctx context.Context) ExtendedLocationTypesOutput {
	return o
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o.ToExtendedLocationTypesPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtendedLocationTypes) *ExtendedLocationTypes {
		return &v
	}).(ExtendedLocationTypesPtrOutput)
}

func (o ExtendedLocationTypesOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ExtendedLocationTypes) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ExtendedLocationTypesPtrOutput struct{ *pulumi.OutputState }

func (ExtendedLocationTypesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return o
}

func (o ExtendedLocationTypesPtrOutput) Elem() ExtendedLocationTypesOutput {
	return o.ApplyT(func(v *ExtendedLocationTypes) ExtendedLocationTypes {
		if v != nil {
			return *v
		}
		var ret ExtendedLocationTypes
		return ret
	}).(ExtendedLocationTypesOutput)
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ExtendedLocationTypesPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ExtendedLocationTypes) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ExtendedLocationTypesInput is an input type that accepts values of the ExtendedLocationTypes enum
// A concrete instance of `ExtendedLocationTypesInput` can be one of the following:
//
//	ExtendedLocationTypesCustomLocation
type ExtendedLocationTypesInput interface {
	pulumi.Input

	ToExtendedLocationTypesOutput() ExtendedLocationTypesOutput
	ToExtendedLocationTypesOutputWithContext(context.Context) ExtendedLocationTypesOutput
}

var extendedLocationTypesPtrType = reflect.TypeOf((**ExtendedLocationTypes)(nil)).Elem()

type ExtendedLocationTypesPtrInput interface {
	pulumi.Input

	ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput
	ToExtendedLocationTypesPtrOutputWithContext(context.Context) ExtendedLocationTypesPtrOutput
}

type extendedLocationTypesPtr string

func ExtendedLocationTypesPtr(v string) ExtendedLocationTypesPtrInput {
	return (*extendedLocationTypesPtr)(&v)
}

func (*extendedLocationTypesPtr) ElementType() reflect.Type {
	return extendedLocationTypesPtrType
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutput() ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutput(in).(ExtendedLocationTypesPtrOutput)
}

func (in *extendedLocationTypesPtr) ToExtendedLocationTypesPtrOutputWithContext(ctx context.Context) ExtendedLocationTypesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ExtendedLocationTypesPtrOutput)
}

// The partner sync mode of the SQL managed instance.
type FailoverGroupPartnerSyncMode string

const (
	FailoverGroupPartnerSyncModeAsync = FailoverGroupPartnerSyncMode("async")
	FailoverGroupPartnerSyncModeSync  = FailoverGroupPartnerSyncMode("sync")
)

func (FailoverGroupPartnerSyncMode) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerSyncMode)(nil)).Elem()
}

func (e FailoverGroupPartnerSyncMode) ToFailoverGroupPartnerSyncModeOutput() FailoverGroupPartnerSyncModeOutput {
	return pulumi.ToOutput(e).(FailoverGroupPartnerSyncModeOutput)
}

func (e FailoverGroupPartnerSyncMode) ToFailoverGroupPartnerSyncModeOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(FailoverGroupPartnerSyncModeOutput)
}

func (e FailoverGroupPartnerSyncMode) ToFailoverGroupPartnerSyncModePtrOutput() FailoverGroupPartnerSyncModePtrOutput {
	return e.ToFailoverGroupPartnerSyncModePtrOutputWithContext(context.Background())
}

func (e FailoverGroupPartnerSyncMode) ToFailoverGroupPartnerSyncModePtrOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModePtrOutput {
	return FailoverGroupPartnerSyncMode(e).ToFailoverGroupPartnerSyncModeOutputWithContext(ctx).ToFailoverGroupPartnerSyncModePtrOutputWithContext(ctx)
}

func (e FailoverGroupPartnerSyncMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e FailoverGroupPartnerSyncMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e FailoverGroupPartnerSyncMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e FailoverGroupPartnerSyncMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type FailoverGroupPartnerSyncModeOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerSyncModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailoverGroupPartnerSyncMode)(nil)).Elem()
}

func (o FailoverGroupPartnerSyncModeOutput) ToFailoverGroupPartnerSyncModeOutput() FailoverGroupPartnerSyncModeOutput {
	return o
}

func (o FailoverGroupPartnerSyncModeOutput) ToFailoverGroupPartnerSyncModeOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModeOutput {
	return o
}

func (o FailoverGroupPartnerSyncModeOutput) ToFailoverGroupPartnerSyncModePtrOutput() FailoverGroupPartnerSyncModePtrOutput {
	return o.ToFailoverGroupPartnerSyncModePtrOutputWithContext(context.Background())
}

func (o FailoverGroupPartnerSyncModeOutput) ToFailoverGroupPartnerSyncModePtrOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FailoverGroupPartnerSyncMode) *FailoverGroupPartnerSyncMode {
		return &v
	}).(FailoverGroupPartnerSyncModePtrOutput)
}

func (o FailoverGroupPartnerSyncModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o FailoverGroupPartnerSyncModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FailoverGroupPartnerSyncMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o FailoverGroupPartnerSyncModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FailoverGroupPartnerSyncModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e FailoverGroupPartnerSyncMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type FailoverGroupPartnerSyncModePtrOutput struct{ *pulumi.OutputState }

func (FailoverGroupPartnerSyncModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailoverGroupPartnerSyncMode)(nil)).Elem()
}

func (o FailoverGroupPartnerSyncModePtrOutput) ToFailoverGroupPartnerSyncModePtrOutput() FailoverGroupPartnerSyncModePtrOutput {
	return o
}

func (o FailoverGroupPartnerSyncModePtrOutput) ToFailoverGroupPartnerSyncModePtrOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModePtrOutput {
	return o
}

func (o FailoverGroupPartnerSyncModePtrOutput) Elem() FailoverGroupPartnerSyncModeOutput {
	return o.ApplyT(func(v *FailoverGroupPartnerSyncMode) FailoverGroupPartnerSyncMode {
		if v != nil {
			return *v
		}
		var ret FailoverGroupPartnerSyncMode
		return ret
	}).(FailoverGroupPartnerSyncModeOutput)
}

func (o FailoverGroupPartnerSyncModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o FailoverGroupPartnerSyncModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *FailoverGroupPartnerSyncMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// FailoverGroupPartnerSyncModeInput is an input type that accepts values of the FailoverGroupPartnerSyncMode enum
// A concrete instance of `FailoverGroupPartnerSyncModeInput` can be one of the following:
//
//	FailoverGroupPartnerSyncModeAsync
//	FailoverGroupPartnerSyncModeSync
type FailoverGroupPartnerSyncModeInput interface {
	pulumi.Input

	ToFailoverGroupPartnerSyncModeOutput() FailoverGroupPartnerSyncModeOutput
	ToFailoverGroupPartnerSyncModeOutputWithContext(context.Context) FailoverGroupPartnerSyncModeOutput
}

var failoverGroupPartnerSyncModePtrType = reflect.TypeOf((**FailoverGroupPartnerSyncMode)(nil)).Elem()

type FailoverGroupPartnerSyncModePtrInput interface {
	pulumi.Input

	ToFailoverGroupPartnerSyncModePtrOutput() FailoverGroupPartnerSyncModePtrOutput
	ToFailoverGroupPartnerSyncModePtrOutputWithContext(context.Context) FailoverGroupPartnerSyncModePtrOutput
}

type failoverGroupPartnerSyncModePtr string

func FailoverGroupPartnerSyncModePtr(v string) FailoverGroupPartnerSyncModePtrInput {
	return (*failoverGroupPartnerSyncModePtr)(&v)
}

func (*failoverGroupPartnerSyncModePtr) ElementType() reflect.Type {
	return failoverGroupPartnerSyncModePtrType
}

func (in *failoverGroupPartnerSyncModePtr) ToFailoverGroupPartnerSyncModePtrOutput() FailoverGroupPartnerSyncModePtrOutput {
	return pulumi.ToOutput(in).(FailoverGroupPartnerSyncModePtrOutput)
}

func (in *failoverGroupPartnerSyncModePtr) ToFailoverGroupPartnerSyncModePtrOutputWithContext(ctx context.Context) FailoverGroupPartnerSyncModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(FailoverGroupPartnerSyncModePtrOutput)
}

// Type of host for Azure Arc SQL Server
type HostType string

const (
	HostType_Azure_Virtual_Machine        = HostType("Azure Virtual Machine")
	HostType_Azure_VMWare_Virtual_Machine = HostType("Azure VMWare Virtual Machine")
	HostType_Azure_Kubernetes_Service     = HostType("Azure Kubernetes Service")
	HostType_AWS_VMWare_Virtual_Machine   = HostType("AWS VMWare Virtual Machine")
	HostType_AWS_Kubernetes_Service       = HostType("AWS Kubernetes Service")
	HostType_GCP_VMWare_Virtual_Machine   = HostType("GCP VMWare Virtual Machine")
	HostType_GCP_Kubernetes_Service       = HostType("GCP Kubernetes Service")
	HostTypeContainer                     = HostType("Container")
	HostType_Virtual_Machine              = HostType("Virtual Machine")
	HostType_Physical_Server              = HostType("Physical Server")
	HostType_AWS_Virtual_Machine          = HostType("AWS Virtual Machine")
	HostType_GCP_Virtual_Machine          = HostType("GCP Virtual Machine")
	HostTypeOther                         = HostType("Other")
)

func (HostType) ElementType() reflect.Type {
	return reflect.TypeOf((*HostType)(nil)).Elem()
}

func (e HostType) ToHostTypeOutput() HostTypeOutput {
	return pulumi.ToOutput(e).(HostTypeOutput)
}

func (e HostType) ToHostTypeOutputWithContext(ctx context.Context) HostTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HostTypeOutput)
}

func (e HostType) ToHostTypePtrOutput() HostTypePtrOutput {
	return e.ToHostTypePtrOutputWithContext(context.Background())
}

func (e HostType) ToHostTypePtrOutputWithContext(ctx context.Context) HostTypePtrOutput {
	return HostType(e).ToHostTypeOutputWithContext(ctx).ToHostTypePtrOutputWithContext(ctx)
}

func (e HostType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e HostType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e HostType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HostTypeOutput struct{ *pulumi.OutputState }

func (HostTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostType)(nil)).Elem()
}

func (o HostTypeOutput) ToHostTypeOutput() HostTypeOutput {
	return o
}

func (o HostTypeOutput) ToHostTypeOutputWithContext(ctx context.Context) HostTypeOutput {
	return o
}

func (o HostTypeOutput) ToHostTypePtrOutput() HostTypePtrOutput {
	return o.ToHostTypePtrOutputWithContext(context.Background())
}

func (o HostTypeOutput) ToHostTypePtrOutputWithContext(ctx context.Context) HostTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostType) *HostType {
		return &v
	}).(HostTypePtrOutput)
}

func (o HostTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HostTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HostTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e HostType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HostTypePtrOutput struct{ *pulumi.OutputState }

func (HostTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostType)(nil)).Elem()
}

func (o HostTypePtrOutput) ToHostTypePtrOutput() HostTypePtrOutput {
	return o
}

func (o HostTypePtrOutput) ToHostTypePtrOutputWithContext(ctx context.Context) HostTypePtrOutput {
	return o
}

func (o HostTypePtrOutput) Elem() HostTypeOutput {
	return o.ApplyT(func(v *HostType) HostType {
		if v != nil {
			return *v
		}
		var ret HostType
		return ret
	}).(HostTypeOutput)
}

func (o HostTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HostTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *HostType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HostTypeInput is an input type that accepts values of the HostType enum
// A concrete instance of `HostTypeInput` can be one of the following:
//
//	HostType_Azure_Virtual_Machine
//	HostType_Azure_VMWare_Virtual_Machine
//	HostType_Azure_Kubernetes_Service
//	HostType_AWS_VMWare_Virtual_Machine
//	HostType_AWS_Kubernetes_Service
//	HostType_GCP_VMWare_Virtual_Machine
//	HostType_GCP_Kubernetes_Service
//	HostTypeContainer
//	HostType_Virtual_Machine
//	HostType_Physical_Server
//	HostType_AWS_Virtual_Machine
//	HostType_GCP_Virtual_Machine
//	HostTypeOther
type HostTypeInput interface {
	pulumi.Input

	ToHostTypeOutput() HostTypeOutput
	ToHostTypeOutputWithContext(context.Context) HostTypeOutput
}

var hostTypePtrType = reflect.TypeOf((**HostType)(nil)).Elem()

type HostTypePtrInput interface {
	pulumi.Input

	ToHostTypePtrOutput() HostTypePtrOutput
	ToHostTypePtrOutputWithContext(context.Context) HostTypePtrOutput
}

type hostTypePtr string

func HostTypePtr(v string) HostTypePtrInput {
	return (*hostTypePtr)(&v)
}

func (*hostTypePtr) ElementType() reflect.Type {
	return hostTypePtrType
}

func (in *hostTypePtr) ToHostTypePtrOutput() HostTypePtrOutput {
	return pulumi.ToOutput(in).(HostTypePtrOutput)
}

func (in *hostTypePtr) ToHostTypePtrOutputWithContext(ctx context.Context) HostTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HostTypePtrOutput)
}

// The method used for Entra authentication
type IdentityType string

const (
	// System Assigned Managed Identity
	IdentityTypeSystemAssignedManagedIdentity = IdentityType("SystemAssignedManagedIdentity")
	// User Assigned Managed Identity
	IdentityTypeUserAssignedManagedIdentity = IdentityType("UserAssignedManagedIdentity")
)

func (IdentityType) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (e IdentityType) ToIdentityTypeOutput() IdentityTypeOutput {
	return pulumi.ToOutput(e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IdentityTypeOutput)
}

func (e IdentityType) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return e.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (e IdentityType) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return IdentityType(e).ToIdentityTypeOutputWithContext(ctx).ToIdentityTypePtrOutputWithContext(ctx)
}

func (e IdentityType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IdentityType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IdentityType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IdentityTypeOutput struct{ *pulumi.OutputState }

func (IdentityTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityType)(nil)).Elem()
}

func (o IdentityTypeOutput) ToIdentityTypeOutput() IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypeOutputWithContext(ctx context.Context) IdentityTypeOutput {
	return o
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o.ToIdentityTypePtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityType) *IdentityType {
		return &v
	}).(IdentityTypePtrOutput)
}

func (o IdentityTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IdentityTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IdentityType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IdentityTypePtrOutput struct{ *pulumi.OutputState }

func (IdentityTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityType)(nil)).Elem()
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return o
}

func (o IdentityTypePtrOutput) Elem() IdentityTypeOutput {
	return o.ApplyT(func(v *IdentityType) IdentityType {
		if v != nil {
			return *v
		}
		var ret IdentityType
		return ret
	}).(IdentityTypeOutput)
}

func (o IdentityTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IdentityTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IdentityType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IdentityTypeInput is an input type that accepts values of the IdentityType enum
// A concrete instance of `IdentityTypeInput` can be one of the following:
//
//	IdentityTypeSystemAssignedManagedIdentity
//	IdentityTypeUserAssignedManagedIdentity
type IdentityTypeInput interface {
	pulumi.Input

	ToIdentityTypeOutput() IdentityTypeOutput
	ToIdentityTypeOutputWithContext(context.Context) IdentityTypeOutput
}

var identityTypePtrType = reflect.TypeOf((**IdentityType)(nil)).Elem()

type IdentityTypePtrInput interface {
	pulumi.Input

	ToIdentityTypePtrOutput() IdentityTypePtrOutput
	ToIdentityTypePtrOutputWithContext(context.Context) IdentityTypePtrOutput
}

type identityTypePtr string

func IdentityTypePtr(v string) IdentityTypePtrInput {
	return (*identityTypePtr)(&v)
}

func (*identityTypePtr) ElementType() reflect.Type {
	return identityTypePtrType
}

func (in *identityTypePtr) ToIdentityTypePtrOutput() IdentityTypePtrOutput {
	return pulumi.ToOutput(in).(IdentityTypePtrOutput)
}

func (in *identityTypePtr) ToIdentityTypePtrOutputWithContext(ctx context.Context) IdentityTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IdentityTypePtrOutput)
}

// The infrastructure the data controller is running on.
type Infrastructure string

const (
	InfrastructureAzure      = Infrastructure("azure")
	InfrastructureGcp        = Infrastructure("gcp")
	InfrastructureAws        = Infrastructure("aws")
	InfrastructureAlibaba    = Infrastructure("alibaba")
	InfrastructureOnpremises = Infrastructure("onpremises")
	InfrastructureOther      = Infrastructure("other")
)

func (Infrastructure) ElementType() reflect.Type {
	return reflect.TypeOf((*Infrastructure)(nil)).Elem()
}

func (e Infrastructure) ToInfrastructureOutput() InfrastructureOutput {
	return pulumi.ToOutput(e).(InfrastructureOutput)
}

func (e Infrastructure) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InfrastructureOutput)
}

func (e Infrastructure) ToInfrastructurePtrOutput() InfrastructurePtrOutput {
	return e.ToInfrastructurePtrOutputWithContext(context.Background())
}

func (e Infrastructure) ToInfrastructurePtrOutputWithContext(ctx context.Context) InfrastructurePtrOutput {
	return Infrastructure(e).ToInfrastructureOutputWithContext(ctx).ToInfrastructurePtrOutputWithContext(ctx)
}

func (e Infrastructure) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Infrastructure) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Infrastructure) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Infrastructure) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InfrastructureOutput struct{ *pulumi.OutputState }

func (InfrastructureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Infrastructure)(nil)).Elem()
}

func (o InfrastructureOutput) ToInfrastructureOutput() InfrastructureOutput {
	return o
}

func (o InfrastructureOutput) ToInfrastructureOutputWithContext(ctx context.Context) InfrastructureOutput {
	return o
}

func (o InfrastructureOutput) ToInfrastructurePtrOutput() InfrastructurePtrOutput {
	return o.ToInfrastructurePtrOutputWithContext(context.Background())
}

func (o InfrastructureOutput) ToInfrastructurePtrOutputWithContext(ctx context.Context) InfrastructurePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Infrastructure) *Infrastructure {
		return &v
	}).(InfrastructurePtrOutput)
}

func (o InfrastructureOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InfrastructureOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Infrastructure) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InfrastructureOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InfrastructureOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Infrastructure) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InfrastructurePtrOutput struct{ *pulumi.OutputState }

func (InfrastructurePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Infrastructure)(nil)).Elem()
}

func (o InfrastructurePtrOutput) ToInfrastructurePtrOutput() InfrastructurePtrOutput {
	return o
}

func (o InfrastructurePtrOutput) ToInfrastructurePtrOutputWithContext(ctx context.Context) InfrastructurePtrOutput {
	return o
}

func (o InfrastructurePtrOutput) Elem() InfrastructureOutput {
	return o.ApplyT(func(v *Infrastructure) Infrastructure {
		if v != nil {
			return *v
		}
		var ret Infrastructure
		return ret
	}).(InfrastructureOutput)
}

func (o InfrastructurePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InfrastructurePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Infrastructure) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InfrastructureInput is an input type that accepts values of the Infrastructure enum
// A concrete instance of `InfrastructureInput` can be one of the following:
//
//	InfrastructureAzure
//	InfrastructureGcp
//	InfrastructureAws
//	InfrastructureAlibaba
//	InfrastructureOnpremises
//	InfrastructureOther
type InfrastructureInput interface {
	pulumi.Input

	ToInfrastructureOutput() InfrastructureOutput
	ToInfrastructureOutputWithContext(context.Context) InfrastructureOutput
}

var infrastructurePtrType = reflect.TypeOf((**Infrastructure)(nil)).Elem()

type InfrastructurePtrInput interface {
	pulumi.Input

	ToInfrastructurePtrOutput() InfrastructurePtrOutput
	ToInfrastructurePtrOutputWithContext(context.Context) InfrastructurePtrOutput
}

type infrastructurePtr string

func InfrastructurePtr(v string) InfrastructurePtrInput {
	return (*infrastructurePtr)(&v)
}

func (*infrastructurePtr) ElementType() reflect.Type {
	return infrastructurePtrType
}

func (in *infrastructurePtr) ToInfrastructurePtrOutput() InfrastructurePtrOutput {
	return pulumi.ToOutput(in).(InfrastructurePtrOutput)
}

func (in *infrastructurePtr) ToInfrastructurePtrOutputWithContext(ctx context.Context) InfrastructurePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InfrastructurePtrOutput)
}

// The role of the SQL managed instance in this failover group.
type InstanceFailoverGroupRole string

const (
	InstanceFailoverGroupRolePrimary                        = InstanceFailoverGroupRole("primary")
	InstanceFailoverGroupRoleSecondary                      = InstanceFailoverGroupRole("secondary")
	InstanceFailoverGroupRole_Force_Primary_Allow_Data_Loss = InstanceFailoverGroupRole("force-primary-allow-data-loss")
	InstanceFailoverGroupRole_Force_Secondary               = InstanceFailoverGroupRole("force-secondary")
)

func (InstanceFailoverGroupRole) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFailoverGroupRole)(nil)).Elem()
}

func (e InstanceFailoverGroupRole) ToInstanceFailoverGroupRoleOutput() InstanceFailoverGroupRoleOutput {
	return pulumi.ToOutput(e).(InstanceFailoverGroupRoleOutput)
}

func (e InstanceFailoverGroupRole) ToInstanceFailoverGroupRoleOutputWithContext(ctx context.Context) InstanceFailoverGroupRoleOutput {
	return pulumi.ToOutputWithContext(ctx, e).(InstanceFailoverGroupRoleOutput)
}

func (e InstanceFailoverGroupRole) ToInstanceFailoverGroupRolePtrOutput() InstanceFailoverGroupRolePtrOutput {
	return e.ToInstanceFailoverGroupRolePtrOutputWithContext(context.Background())
}

func (e InstanceFailoverGroupRole) ToInstanceFailoverGroupRolePtrOutputWithContext(ctx context.Context) InstanceFailoverGroupRolePtrOutput {
	return InstanceFailoverGroupRole(e).ToInstanceFailoverGroupRoleOutputWithContext(ctx).ToInstanceFailoverGroupRolePtrOutputWithContext(ctx)
}

func (e InstanceFailoverGroupRole) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceFailoverGroupRole) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceFailoverGroupRole) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceFailoverGroupRole) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type InstanceFailoverGroupRoleOutput struct{ *pulumi.OutputState }

func (InstanceFailoverGroupRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFailoverGroupRole)(nil)).Elem()
}

func (o InstanceFailoverGroupRoleOutput) ToInstanceFailoverGroupRoleOutput() InstanceFailoverGroupRoleOutput {
	return o
}

func (o InstanceFailoverGroupRoleOutput) ToInstanceFailoverGroupRoleOutputWithContext(ctx context.Context) InstanceFailoverGroupRoleOutput {
	return o
}

func (o InstanceFailoverGroupRoleOutput) ToInstanceFailoverGroupRolePtrOutput() InstanceFailoverGroupRolePtrOutput {
	return o.ToInstanceFailoverGroupRolePtrOutputWithContext(context.Background())
}

func (o InstanceFailoverGroupRoleOutput) ToInstanceFailoverGroupRolePtrOutputWithContext(ctx context.Context) InstanceFailoverGroupRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceFailoverGroupRole) *InstanceFailoverGroupRole {
		return &v
	}).(InstanceFailoverGroupRolePtrOutput)
}

func (o InstanceFailoverGroupRoleOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o InstanceFailoverGroupRoleOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceFailoverGroupRole) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o InstanceFailoverGroupRoleOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceFailoverGroupRoleOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e InstanceFailoverGroupRole) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type InstanceFailoverGroupRolePtrOutput struct{ *pulumi.OutputState }

func (InstanceFailoverGroupRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFailoverGroupRole)(nil)).Elem()
}

func (o InstanceFailoverGroupRolePtrOutput) ToInstanceFailoverGroupRolePtrOutput() InstanceFailoverGroupRolePtrOutput {
	return o
}

func (o InstanceFailoverGroupRolePtrOutput) ToInstanceFailoverGroupRolePtrOutputWithContext(ctx context.Context) InstanceFailoverGroupRolePtrOutput {
	return o
}

func (o InstanceFailoverGroupRolePtrOutput) Elem() InstanceFailoverGroupRoleOutput {
	return o.ApplyT(func(v *InstanceFailoverGroupRole) InstanceFailoverGroupRole {
		if v != nil {
			return *v
		}
		var ret InstanceFailoverGroupRole
		return ret
	}).(InstanceFailoverGroupRoleOutput)
}

func (o InstanceFailoverGroupRolePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o InstanceFailoverGroupRolePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *InstanceFailoverGroupRole) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// InstanceFailoverGroupRoleInput is an input type that accepts values of the InstanceFailoverGroupRole enum
// A concrete instance of `InstanceFailoverGroupRoleInput` can be one of the following:
//
//	InstanceFailoverGroupRolePrimary
//	InstanceFailoverGroupRoleSecondary
//	InstanceFailoverGroupRole_Force_Primary_Allow_Data_Loss
//	InstanceFailoverGroupRole_Force_Secondary
type InstanceFailoverGroupRoleInput interface {
	pulumi.Input

	ToInstanceFailoverGroupRoleOutput() InstanceFailoverGroupRoleOutput
	ToInstanceFailoverGroupRoleOutputWithContext(context.Context) InstanceFailoverGroupRoleOutput
}

var instanceFailoverGroupRolePtrType = reflect.TypeOf((**InstanceFailoverGroupRole)(nil)).Elem()

type InstanceFailoverGroupRolePtrInput interface {
	pulumi.Input

	ToInstanceFailoverGroupRolePtrOutput() InstanceFailoverGroupRolePtrOutput
	ToInstanceFailoverGroupRolePtrOutputWithContext(context.Context) InstanceFailoverGroupRolePtrOutput
}

type instanceFailoverGroupRolePtr string

func InstanceFailoverGroupRolePtr(v string) InstanceFailoverGroupRolePtrInput {
	return (*instanceFailoverGroupRolePtr)(&v)
}

func (*instanceFailoverGroupRolePtr) ElementType() reflect.Type {
	return instanceFailoverGroupRolePtrType
}

func (in *instanceFailoverGroupRolePtr) ToInstanceFailoverGroupRolePtrOutput() InstanceFailoverGroupRolePtrOutput {
	return pulumi.ToOutput(in).(InstanceFailoverGroupRolePtrOutput)
}

func (in *instanceFailoverGroupRolePtr) ToInstanceFailoverGroupRolePtrOutputWithContext(ctx context.Context) InstanceFailoverGroupRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(InstanceFailoverGroupRolePtrOutput)
}

// This property represents the choice between SQL Server Core and ESU licenses.
type LicenseCategory string

const (
	LicenseCategoryCore = LicenseCategory("Core")
)

func (LicenseCategory) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseCategory)(nil)).Elem()
}

func (e LicenseCategory) ToLicenseCategoryOutput() LicenseCategoryOutput {
	return pulumi.ToOutput(e).(LicenseCategoryOutput)
}

func (e LicenseCategory) ToLicenseCategoryOutputWithContext(ctx context.Context) LicenseCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, e).(LicenseCategoryOutput)
}

func (e LicenseCategory) ToLicenseCategoryPtrOutput() LicenseCategoryPtrOutput {
	return e.ToLicenseCategoryPtrOutputWithContext(context.Background())
}

func (e LicenseCategory) ToLicenseCategoryPtrOutputWithContext(ctx context.Context) LicenseCategoryPtrOutput {
	return LicenseCategory(e).ToLicenseCategoryOutputWithContext(ctx).ToLicenseCategoryPtrOutputWithContext(ctx)
}

func (e LicenseCategory) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseCategory) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e LicenseCategory) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e LicenseCategory) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type LicenseCategoryOutput struct{ *pulumi.OutputState }

func (LicenseCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LicenseCategory)(nil)).Elem()
}

func (o LicenseCategoryOutput) ToLicenseCategoryOutput() LicenseCategoryOutput {
	return o
}

func (o LicenseCategoryOutput) ToLicenseCategoryOutputWithContext(ctx context.Context) LicenseCategoryOutput {
	return o
}

func (o LicenseCategoryOutput) ToLicenseCategoryPtrOutput() LicenseCategoryPtrOutput {
	return o.ToLicenseCategoryPtrOutputWithContext(context.Background())
}

func (o LicenseCategoryOutput) ToLicenseCategoryPtrOutputWithContext(ctx context.Context) LicenseCategoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LicenseCategory) *LicenseCategory {
		return &v
	}).(LicenseCategoryPtrOutput)
}

func (o LicenseCategoryOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o LicenseCategoryOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseCategory) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o LicenseCategoryOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseCategoryOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e LicenseCategory) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type LicenseCategoryPtrOutput struct{ *pulumi.OutputState }

func (LicenseCategoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseCategory)(nil)).Elem()
}

func (o LicenseCategoryPtrOutput) ToLicenseCategoryPtrOutput() LicenseCategoryPtrOutput {
	return o
}

func (o LicenseCategoryPtrOutput) ToLicenseCategoryPtrOutputWithContext(ctx context.Context) LicenseCategoryPtrOutput {
	return o
}

func (o LicenseCategoryPtrOutput) Elem() LicenseCategoryOutput {
	return o.ApplyT(func(v *LicenseCategory) LicenseCategory {
		if v != nil {
			return *v
		}
		var ret LicenseCategory
		return ret
	}).(LicenseCategoryOutput)
}

func (o LicenseCategoryPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o LicenseCategoryPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *LicenseCategory) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// LicenseCategoryInput is an input type that accepts values of the LicenseCategory enum
// A concrete instance of `LicenseCategoryInput` can be one of the following:
//
//	LicenseCategoryCore
type LicenseCategoryInput interface {
	pulumi.Input

	ToLicenseCategoryOutput() LicenseCategoryOutput
	ToLicenseCategoryOutputWithContext(context.Context) LicenseCategoryOutput
}

var licenseCategoryPtrType = reflect.TypeOf((**LicenseCategory)(nil)).Elem()

type LicenseCategoryPtrInput interface {
	pulumi.Input

	ToLicenseCategoryPtrOutput() LicenseCategoryPtrOutput
	ToLicenseCategoryPtrOutputWithContext(context.Context) LicenseCategoryPtrOutput
}

type licenseCategoryPtr string

func LicenseCategoryPtr(v string) LicenseCategoryPtrInput {
	return (*licenseCategoryPtr)(&v)
}

func (*licenseCategoryPtr) ElementType() reflect.Type {
	return licenseCategoryPtrType
}

func (in *licenseCategoryPtr) ToLicenseCategoryPtrOutput() LicenseCategoryPtrOutput {
	return pulumi.ToOutput(in).(LicenseCategoryPtrOutput)
}

func (in *licenseCategoryPtr) ToLicenseCategoryPtrOutputWithContext(ctx context.Context) LicenseCategoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(LicenseCategoryPtrOutput)
}

// Mode of authentication in SqlServer.
type Mode string

const (
	// Mixed mode authentication for SQL Server which includes windows and SQL Authentication.
	ModeMixed = Mode("Mixed")
	// Windows Authentication for SQL Server.
	ModeWindows = Mode("Windows")
	// Used for scenarios were the mode cannot be determined.
	ModeUndefined = Mode("Undefined")
)

func (Mode) ElementType() reflect.Type {
	return reflect.TypeOf((*Mode)(nil)).Elem()
}

func (e Mode) ToModeOutput() ModeOutput {
	return pulumi.ToOutput(e).(ModeOutput)
}

func (e Mode) ToModeOutputWithContext(ctx context.Context) ModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ModeOutput)
}

func (e Mode) ToModePtrOutput() ModePtrOutput {
	return e.ToModePtrOutputWithContext(context.Background())
}

func (e Mode) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return Mode(e).ToModeOutputWithContext(ctx).ToModePtrOutputWithContext(ctx)
}

func (e Mode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Mode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Mode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Mode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ModeOutput struct{ *pulumi.OutputState }

func (ModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mode)(nil)).Elem()
}

func (o ModeOutput) ToModeOutput() ModeOutput {
	return o
}

func (o ModeOutput) ToModeOutputWithContext(ctx context.Context) ModeOutput {
	return o
}

func (o ModeOutput) ToModePtrOutput() ModePtrOutput {
	return o.ToModePtrOutputWithContext(context.Background())
}

func (o ModeOutput) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mode) *Mode {
		return &v
	}).(ModePtrOutput)
}

func (o ModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Mode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Mode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ModePtrOutput struct{ *pulumi.OutputState }

func (ModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mode)(nil)).Elem()
}

func (o ModePtrOutput) ToModePtrOutput() ModePtrOutput {
	return o
}

func (o ModePtrOutput) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return o
}

func (o ModePtrOutput) Elem() ModeOutput {
	return o.ApplyT(func(v *Mode) Mode {
		if v != nil {
			return *v
		}
		var ret Mode
		return ret
	}).(ModeOutput)
}

func (o ModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Mode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ModeInput is an input type that accepts values of the Mode enum
// A concrete instance of `ModeInput` can be one of the following:
//
//	ModeMixed
//	ModeWindows
//	ModeUndefined
type ModeInput interface {
	pulumi.Input

	ToModeOutput() ModeOutput
	ToModeOutputWithContext(context.Context) ModeOutput
}

var modePtrType = reflect.TypeOf((**Mode)(nil)).Elem()

type ModePtrInput interface {
	pulumi.Input

	ToModePtrOutput() ModePtrOutput
	ToModePtrOutputWithContext(context.Context) ModePtrOutput
}

type modePtr string

func ModePtr(v string) ModePtrInput {
	return (*modePtr)(&v)
}

func (*modePtr) ElementType() reflect.Type {
	return modePtrType
}

func (in *modePtr) ToModePtrOutput() ModePtrOutput {
	return pulumi.ToOutput(in).(ModePtrOutput)
}

func (in *modePtr) ToModePtrOutputWithContext(ctx context.Context) ModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ModePtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier.
type PostgresInstanceSkuTier string

const (
	PostgresInstanceSkuTierHyperscale = PostgresInstanceSkuTier("Hyperscale")
)

func (PostgresInstanceSkuTier) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresInstanceSkuTier)(nil)).Elem()
}

func (e PostgresInstanceSkuTier) ToPostgresInstanceSkuTierOutput() PostgresInstanceSkuTierOutput {
	return pulumi.ToOutput(e).(PostgresInstanceSkuTierOutput)
}

func (e PostgresInstanceSkuTier) ToPostgresInstanceSkuTierOutputWithContext(ctx context.Context) PostgresInstanceSkuTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PostgresInstanceSkuTierOutput)
}

func (e PostgresInstanceSkuTier) ToPostgresInstanceSkuTierPtrOutput() PostgresInstanceSkuTierPtrOutput {
	return e.ToPostgresInstanceSkuTierPtrOutputWithContext(context.Background())
}

func (e PostgresInstanceSkuTier) ToPostgresInstanceSkuTierPtrOutputWithContext(ctx context.Context) PostgresInstanceSkuTierPtrOutput {
	return PostgresInstanceSkuTier(e).ToPostgresInstanceSkuTierOutputWithContext(ctx).ToPostgresInstanceSkuTierPtrOutputWithContext(ctx)
}

func (e PostgresInstanceSkuTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostgresInstanceSkuTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PostgresInstanceSkuTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PostgresInstanceSkuTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PostgresInstanceSkuTierOutput struct{ *pulumi.OutputState }

func (PostgresInstanceSkuTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresInstanceSkuTier)(nil)).Elem()
}

func (o PostgresInstanceSkuTierOutput) ToPostgresInstanceSkuTierOutput() PostgresInstanceSkuTierOutput {
	return o
}

func (o PostgresInstanceSkuTierOutput) ToPostgresInstanceSkuTierOutputWithContext(ctx context.Context) PostgresInstanceSkuTierOutput {
	return o
}

func (o PostgresInstanceSkuTierOutput) ToPostgresInstanceSkuTierPtrOutput() PostgresInstanceSkuTierPtrOutput {
	return o.ToPostgresInstanceSkuTierPtrOutputWithContext(context.Background())
}

func (o PostgresInstanceSkuTierOutput) ToPostgresInstanceSkuTierPtrOutputWithContext(ctx context.Context) PostgresInstanceSkuTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresInstanceSkuTier) *PostgresInstanceSkuTier {
		return &v
	}).(PostgresInstanceSkuTierPtrOutput)
}

func (o PostgresInstanceSkuTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PostgresInstanceSkuTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresInstanceSkuTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PostgresInstanceSkuTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresInstanceSkuTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PostgresInstanceSkuTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PostgresInstanceSkuTierPtrOutput struct{ *pulumi.OutputState }

func (PostgresInstanceSkuTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresInstanceSkuTier)(nil)).Elem()
}

func (o PostgresInstanceSkuTierPtrOutput) ToPostgresInstanceSkuTierPtrOutput() PostgresInstanceSkuTierPtrOutput {
	return o
}

func (o PostgresInstanceSkuTierPtrOutput) ToPostgresInstanceSkuTierPtrOutputWithContext(ctx context.Context) PostgresInstanceSkuTierPtrOutput {
	return o
}

func (o PostgresInstanceSkuTierPtrOutput) Elem() PostgresInstanceSkuTierOutput {
	return o.ApplyT(func(v *PostgresInstanceSkuTier) PostgresInstanceSkuTier {
		if v != nil {
			return *v
		}
		var ret PostgresInstanceSkuTier
		return ret
	}).(PostgresInstanceSkuTierOutput)
}

func (o PostgresInstanceSkuTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PostgresInstanceSkuTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PostgresInstanceSkuTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PostgresInstanceSkuTierInput is an input type that accepts values of the PostgresInstanceSkuTier enum
// A concrete instance of `PostgresInstanceSkuTierInput` can be one of the following:
//
//	PostgresInstanceSkuTierHyperscale
type PostgresInstanceSkuTierInput interface {
	pulumi.Input

	ToPostgresInstanceSkuTierOutput() PostgresInstanceSkuTierOutput
	ToPostgresInstanceSkuTierOutputWithContext(context.Context) PostgresInstanceSkuTierOutput
}

var postgresInstanceSkuTierPtrType = reflect.TypeOf((**PostgresInstanceSkuTier)(nil)).Elem()

type PostgresInstanceSkuTierPtrInput interface {
	pulumi.Input

	ToPostgresInstanceSkuTierPtrOutput() PostgresInstanceSkuTierPtrOutput
	ToPostgresInstanceSkuTierPtrOutputWithContext(context.Context) PostgresInstanceSkuTierPtrOutput
}

type postgresInstanceSkuTierPtr string

func PostgresInstanceSkuTierPtr(v string) PostgresInstanceSkuTierPtrInput {
	return (*postgresInstanceSkuTierPtr)(&v)
}

func (*postgresInstanceSkuTierPtr) ElementType() reflect.Type {
	return postgresInstanceSkuTierPtrType
}

func (in *postgresInstanceSkuTierPtr) ToPostgresInstanceSkuTierPtrOutput() PostgresInstanceSkuTierPtrOutput {
	return pulumi.ToOutput(in).(PostgresInstanceSkuTierPtrOutput)
}

func (in *postgresInstanceSkuTierPtr) ToPostgresInstanceSkuTierPtrOutputWithContext(ctx context.Context) PostgresInstanceSkuTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PostgresInstanceSkuTierPtrOutput)
}

// Whether the primary replica should allow all connections or only READ_WRITE connections (disallowing ReadOnly connections)
type PrimaryAllowConnections string

const (
	PrimaryAllowConnectionsALL         = PrimaryAllowConnections("ALL")
	PrimaryAllowConnections_READ_WRITE = PrimaryAllowConnections("READ_WRITE")
)

func (PrimaryAllowConnections) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryAllowConnections)(nil)).Elem()
}

func (e PrimaryAllowConnections) ToPrimaryAllowConnectionsOutput() PrimaryAllowConnectionsOutput {
	return pulumi.ToOutput(e).(PrimaryAllowConnectionsOutput)
}

func (e PrimaryAllowConnections) ToPrimaryAllowConnectionsOutputWithContext(ctx context.Context) PrimaryAllowConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(PrimaryAllowConnectionsOutput)
}

func (e PrimaryAllowConnections) ToPrimaryAllowConnectionsPtrOutput() PrimaryAllowConnectionsPtrOutput {
	return e.ToPrimaryAllowConnectionsPtrOutputWithContext(context.Background())
}

func (e PrimaryAllowConnections) ToPrimaryAllowConnectionsPtrOutputWithContext(ctx context.Context) PrimaryAllowConnectionsPtrOutput {
	return PrimaryAllowConnections(e).ToPrimaryAllowConnectionsOutputWithContext(ctx).ToPrimaryAllowConnectionsPtrOutputWithContext(ctx)
}

func (e PrimaryAllowConnections) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryAllowConnections) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PrimaryAllowConnections) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PrimaryAllowConnections) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type PrimaryAllowConnectionsOutput struct{ *pulumi.OutputState }

func (PrimaryAllowConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrimaryAllowConnections)(nil)).Elem()
}

func (o PrimaryAllowConnectionsOutput) ToPrimaryAllowConnectionsOutput() PrimaryAllowConnectionsOutput {
	return o
}

func (o PrimaryAllowConnectionsOutput) ToPrimaryAllowConnectionsOutputWithContext(ctx context.Context) PrimaryAllowConnectionsOutput {
	return o
}

func (o PrimaryAllowConnectionsOutput) ToPrimaryAllowConnectionsPtrOutput() PrimaryAllowConnectionsPtrOutput {
	return o.ToPrimaryAllowConnectionsPtrOutputWithContext(context.Background())
}

func (o PrimaryAllowConnectionsOutput) ToPrimaryAllowConnectionsPtrOutputWithContext(ctx context.Context) PrimaryAllowConnectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrimaryAllowConnections) *PrimaryAllowConnections {
		return &v
	}).(PrimaryAllowConnectionsPtrOutput)
}

func (o PrimaryAllowConnectionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o PrimaryAllowConnectionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrimaryAllowConnections) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o PrimaryAllowConnectionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrimaryAllowConnectionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e PrimaryAllowConnections) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type PrimaryAllowConnectionsPtrOutput struct{ *pulumi.OutputState }

func (PrimaryAllowConnectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrimaryAllowConnections)(nil)).Elem()
}

func (o PrimaryAllowConnectionsPtrOutput) ToPrimaryAllowConnectionsPtrOutput() PrimaryAllowConnectionsPtrOutput {
	return o
}

func (o PrimaryAllowConnectionsPtrOutput) ToPrimaryAllowConnectionsPtrOutputWithContext(ctx context.Context) PrimaryAllowConnectionsPtrOutput {
	return o
}

func (o PrimaryAllowConnectionsPtrOutput) Elem() PrimaryAllowConnectionsOutput {
	return o.ApplyT(func(v *PrimaryAllowConnections) PrimaryAllowConnections {
		if v != nil {
			return *v
		}
		var ret PrimaryAllowConnections
		return ret
	}).(PrimaryAllowConnectionsOutput)
}

func (o PrimaryAllowConnectionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o PrimaryAllowConnectionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *PrimaryAllowConnections) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// PrimaryAllowConnectionsInput is an input type that accepts values of the PrimaryAllowConnections enum
// A concrete instance of `PrimaryAllowConnectionsInput` can be one of the following:
//
//	PrimaryAllowConnectionsALL
//	PrimaryAllowConnections_READ_WRITE
type PrimaryAllowConnectionsInput interface {
	pulumi.Input

	ToPrimaryAllowConnectionsOutput() PrimaryAllowConnectionsOutput
	ToPrimaryAllowConnectionsOutputWithContext(context.Context) PrimaryAllowConnectionsOutput
}

var primaryAllowConnectionsPtrType = reflect.TypeOf((**PrimaryAllowConnections)(nil)).Elem()

type PrimaryAllowConnectionsPtrInput interface {
	pulumi.Input

	ToPrimaryAllowConnectionsPtrOutput() PrimaryAllowConnectionsPtrOutput
	ToPrimaryAllowConnectionsPtrOutputWithContext(context.Context) PrimaryAllowConnectionsPtrOutput
}

type primaryAllowConnectionsPtr string

func PrimaryAllowConnectionsPtr(v string) PrimaryAllowConnectionsPtrInput {
	return (*primaryAllowConnectionsPtr)(&v)
}

func (*primaryAllowConnectionsPtr) ElementType() reflect.Type {
	return primaryAllowConnectionsPtrType
}

func (in *primaryAllowConnectionsPtr) ToPrimaryAllowConnectionsPtrOutput() PrimaryAllowConnectionsPtrOutput {
	return pulumi.ToOutput(in).(PrimaryAllowConnectionsPtrOutput)
}

func (in *primaryAllowConnectionsPtr) ToPrimaryAllowConnectionsPtrOutputWithContext(ctx context.Context) PrimaryAllowConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(PrimaryAllowConnectionsPtrOutput)
}

// Status of the database.
type RecoveryMode string

const (
	RecoveryModeFull         = RecoveryMode("Full")
	RecoveryMode_Bulk_Logged = RecoveryMode("Bulk-logged")
	RecoveryModeSimple       = RecoveryMode("Simple")
)

func (RecoveryMode) ElementType() reflect.Type {
	return reflect.TypeOf((*RecoveryMode)(nil)).Elem()
}

func (e RecoveryMode) ToRecoveryModeOutput() RecoveryModeOutput {
	return pulumi.ToOutput(e).(RecoveryModeOutput)
}

func (e RecoveryMode) ToRecoveryModeOutputWithContext(ctx context.Context) RecoveryModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RecoveryModeOutput)
}

func (e RecoveryMode) ToRecoveryModePtrOutput() RecoveryModePtrOutput {
	return e.ToRecoveryModePtrOutputWithContext(context.Background())
}

func (e RecoveryMode) ToRecoveryModePtrOutputWithContext(ctx context.Context) RecoveryModePtrOutput {
	return RecoveryMode(e).ToRecoveryModeOutputWithContext(ctx).ToRecoveryModePtrOutputWithContext(ctx)
}

func (e RecoveryMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecoveryMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RecoveryMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RecoveryMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RecoveryModeOutput struct{ *pulumi.OutputState }

func (RecoveryModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecoveryMode)(nil)).Elem()
}

func (o RecoveryModeOutput) ToRecoveryModeOutput() RecoveryModeOutput {
	return o
}

func (o RecoveryModeOutput) ToRecoveryModeOutputWithContext(ctx context.Context) RecoveryModeOutput {
	return o
}

func (o RecoveryModeOutput) ToRecoveryModePtrOutput() RecoveryModePtrOutput {
	return o.ToRecoveryModePtrOutputWithContext(context.Background())
}

func (o RecoveryModeOutput) ToRecoveryModePtrOutputWithContext(ctx context.Context) RecoveryModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecoveryMode) *RecoveryMode {
		return &v
	}).(RecoveryModePtrOutput)
}

func (o RecoveryModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RecoveryModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecoveryMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RecoveryModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecoveryModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RecoveryMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RecoveryModePtrOutput struct{ *pulumi.OutputState }

func (RecoveryModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecoveryMode)(nil)).Elem()
}

func (o RecoveryModePtrOutput) ToRecoveryModePtrOutput() RecoveryModePtrOutput {
	return o
}

func (o RecoveryModePtrOutput) ToRecoveryModePtrOutputWithContext(ctx context.Context) RecoveryModePtrOutput {
	return o
}

func (o RecoveryModePtrOutput) Elem() RecoveryModeOutput {
	return o.ApplyT(func(v *RecoveryMode) RecoveryMode {
		if v != nil {
			return *v
		}
		var ret RecoveryMode
		return ret
	}).(RecoveryModeOutput)
}

func (o RecoveryModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RecoveryModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RecoveryMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RecoveryModeInput is an input type that accepts values of the RecoveryMode enum
// A concrete instance of `RecoveryModeInput` can be one of the following:
//
//	RecoveryModeFull
//	RecoveryMode_Bulk_Logged
//	RecoveryModeSimple
type RecoveryModeInput interface {
	pulumi.Input

	ToRecoveryModeOutput() RecoveryModeOutput
	ToRecoveryModeOutputWithContext(context.Context) RecoveryModeOutput
}

var recoveryModePtrType = reflect.TypeOf((**RecoveryMode)(nil)).Elem()

type RecoveryModePtrInput interface {
	pulumi.Input

	ToRecoveryModePtrOutput() RecoveryModePtrOutput
	ToRecoveryModePtrOutputWithContext(context.Context) RecoveryModePtrOutput
}

type recoveryModePtr string

func RecoveryModePtr(v string) RecoveryModePtrInput {
	return (*recoveryModePtr)(&v)
}

func (*recoveryModePtr) ElementType() reflect.Type {
	return recoveryModePtrType
}

func (in *recoveryModePtr) ToRecoveryModePtrOutput() RecoveryModePtrOutput {
	return pulumi.ToOutput(in).(RecoveryModePtrOutput)
}

func (in *recoveryModePtr) ToRecoveryModePtrOutputWithContext(ctx context.Context) RecoveryModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RecoveryModePtrOutput)
}

// The Azure scope to which the license will apply.
type ScopeType string

const (
	ScopeTypeTenant        = ScopeType("Tenant")
	ScopeTypeSubscription  = ScopeType("Subscription")
	ScopeTypeResourceGroup = ScopeType("ResourceGroup")
)

func (ScopeType) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeType)(nil)).Elem()
}

func (e ScopeType) ToScopeTypeOutput() ScopeTypeOutput {
	return pulumi.ToOutput(e).(ScopeTypeOutput)
}

func (e ScopeType) ToScopeTypeOutputWithContext(ctx context.Context) ScopeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ScopeTypeOutput)
}

func (e ScopeType) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return e.ToScopeTypePtrOutputWithContext(context.Background())
}

func (e ScopeType) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return ScopeType(e).ToScopeTypeOutputWithContext(ctx).ToScopeTypePtrOutputWithContext(ctx)
}

func (e ScopeType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScopeType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ScopeType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ScopeType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ScopeTypeOutput struct{ *pulumi.OutputState }

func (ScopeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeType)(nil)).Elem()
}

func (o ScopeTypeOutput) ToScopeTypeOutput() ScopeTypeOutput {
	return o
}

func (o ScopeTypeOutput) ToScopeTypeOutputWithContext(ctx context.Context) ScopeTypeOutput {
	return o
}

func (o ScopeTypeOutput) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return o.ToScopeTypePtrOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeType) *ScopeType {
		return &v
	}).(ScopeTypePtrOutput)
}

func (o ScopeTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScopeType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ScopeTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScopeTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ScopeType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ScopeTypePtrOutput struct{ *pulumi.OutputState }

func (ScopeTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeType)(nil)).Elem()
}

func (o ScopeTypePtrOutput) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return o
}

func (o ScopeTypePtrOutput) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return o
}

func (o ScopeTypePtrOutput) Elem() ScopeTypeOutput {
	return o.ApplyT(func(v *ScopeType) ScopeType {
		if v != nil {
			return *v
		}
		var ret ScopeType
		return ret
	}).(ScopeTypeOutput)
}

func (o ScopeTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ScopeTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ScopeType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ScopeTypeInput is an input type that accepts values of the ScopeType enum
// A concrete instance of `ScopeTypeInput` can be one of the following:
//
//	ScopeTypeTenant
//	ScopeTypeSubscription
//	ScopeTypeResourceGroup
type ScopeTypeInput interface {
	pulumi.Input

	ToScopeTypeOutput() ScopeTypeOutput
	ToScopeTypeOutputWithContext(context.Context) ScopeTypeOutput
}

var scopeTypePtrType = reflect.TypeOf((**ScopeType)(nil)).Elem()

type ScopeTypePtrInput interface {
	pulumi.Input

	ToScopeTypePtrOutput() ScopeTypePtrOutput
	ToScopeTypePtrOutputWithContext(context.Context) ScopeTypePtrOutput
}

type scopeTypePtr string

func ScopeTypePtr(v string) ScopeTypePtrInput {
	return (*scopeTypePtr)(&v)
}

func (*scopeTypePtr) ElementType() reflect.Type {
	return scopeTypePtrType
}

func (in *scopeTypePtr) ToScopeTypePtrOutput() ScopeTypePtrOutput {
	return pulumi.ToOutput(in).(ScopeTypePtrOutput)
}

func (in *scopeTypePtr) ToScopeTypePtrOutputWithContext(ctx context.Context) ScopeTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ScopeTypePtrOutput)
}

// Whether the secondary replica should allow all connections, no connections, or only ReadOnly connections.
type SecondaryAllowConnections string

const (
	SecondaryAllowConnectionsNO         = SecondaryAllowConnections("NO")
	SecondaryAllowConnectionsALL        = SecondaryAllowConnections("ALL")
	SecondaryAllowConnections_READ_ONLY = SecondaryAllowConnections("READ_ONLY")
)

func (SecondaryAllowConnections) ElementType() reflect.Type {
	return reflect.TypeOf((*SecondaryAllowConnections)(nil)).Elem()
}

func (e SecondaryAllowConnections) ToSecondaryAllowConnectionsOutput() SecondaryAllowConnectionsOutput {
	return pulumi.ToOutput(e).(SecondaryAllowConnectionsOutput)
}

func (e SecondaryAllowConnections) ToSecondaryAllowConnectionsOutputWithContext(ctx context.Context) SecondaryAllowConnectionsOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SecondaryAllowConnectionsOutput)
}

func (e SecondaryAllowConnections) ToSecondaryAllowConnectionsPtrOutput() SecondaryAllowConnectionsPtrOutput {
	return e.ToSecondaryAllowConnectionsPtrOutputWithContext(context.Background())
}

func (e SecondaryAllowConnections) ToSecondaryAllowConnectionsPtrOutputWithContext(ctx context.Context) SecondaryAllowConnectionsPtrOutput {
	return SecondaryAllowConnections(e).ToSecondaryAllowConnectionsOutputWithContext(ctx).ToSecondaryAllowConnectionsPtrOutputWithContext(ctx)
}

func (e SecondaryAllowConnections) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecondaryAllowConnections) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SecondaryAllowConnections) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SecondaryAllowConnections) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SecondaryAllowConnectionsOutput struct{ *pulumi.OutputState }

func (SecondaryAllowConnectionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecondaryAllowConnections)(nil)).Elem()
}

func (o SecondaryAllowConnectionsOutput) ToSecondaryAllowConnectionsOutput() SecondaryAllowConnectionsOutput {
	return o
}

func (o SecondaryAllowConnectionsOutput) ToSecondaryAllowConnectionsOutputWithContext(ctx context.Context) SecondaryAllowConnectionsOutput {
	return o
}

func (o SecondaryAllowConnectionsOutput) ToSecondaryAllowConnectionsPtrOutput() SecondaryAllowConnectionsPtrOutput {
	return o.ToSecondaryAllowConnectionsPtrOutputWithContext(context.Background())
}

func (o SecondaryAllowConnectionsOutput) ToSecondaryAllowConnectionsPtrOutputWithContext(ctx context.Context) SecondaryAllowConnectionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecondaryAllowConnections) *SecondaryAllowConnections {
		return &v
	}).(SecondaryAllowConnectionsPtrOutput)
}

func (o SecondaryAllowConnectionsOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SecondaryAllowConnectionsOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecondaryAllowConnections) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SecondaryAllowConnectionsOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecondaryAllowConnectionsOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SecondaryAllowConnections) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SecondaryAllowConnectionsPtrOutput struct{ *pulumi.OutputState }

func (SecondaryAllowConnectionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecondaryAllowConnections)(nil)).Elem()
}

func (o SecondaryAllowConnectionsPtrOutput) ToSecondaryAllowConnectionsPtrOutput() SecondaryAllowConnectionsPtrOutput {
	return o
}

func (o SecondaryAllowConnectionsPtrOutput) ToSecondaryAllowConnectionsPtrOutputWithContext(ctx context.Context) SecondaryAllowConnectionsPtrOutput {
	return o
}

func (o SecondaryAllowConnectionsPtrOutput) Elem() SecondaryAllowConnectionsOutput {
	return o.ApplyT(func(v *SecondaryAllowConnections) SecondaryAllowConnections {
		if v != nil {
			return *v
		}
		var ret SecondaryAllowConnections
		return ret
	}).(SecondaryAllowConnectionsOutput)
}

func (o SecondaryAllowConnectionsPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SecondaryAllowConnectionsPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SecondaryAllowConnections) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SecondaryAllowConnectionsInput is an input type that accepts values of the SecondaryAllowConnections enum
// A concrete instance of `SecondaryAllowConnectionsInput` can be one of the following:
//
//	SecondaryAllowConnectionsNO
//	SecondaryAllowConnectionsALL
//	SecondaryAllowConnections_READ_ONLY
type SecondaryAllowConnectionsInput interface {
	pulumi.Input

	ToSecondaryAllowConnectionsOutput() SecondaryAllowConnectionsOutput
	ToSecondaryAllowConnectionsOutputWithContext(context.Context) SecondaryAllowConnectionsOutput
}

var secondaryAllowConnectionsPtrType = reflect.TypeOf((**SecondaryAllowConnections)(nil)).Elem()

type SecondaryAllowConnectionsPtrInput interface {
	pulumi.Input

	ToSecondaryAllowConnectionsPtrOutput() SecondaryAllowConnectionsPtrOutput
	ToSecondaryAllowConnectionsPtrOutputWithContext(context.Context) SecondaryAllowConnectionsPtrOutput
}

type secondaryAllowConnectionsPtr string

func SecondaryAllowConnectionsPtr(v string) SecondaryAllowConnectionsPtrInput {
	return (*secondaryAllowConnectionsPtr)(&v)
}

func (*secondaryAllowConnectionsPtr) ElementType() reflect.Type {
	return secondaryAllowConnectionsPtrType
}

func (in *secondaryAllowConnectionsPtr) ToSecondaryAllowConnectionsPtrOutput() SecondaryAllowConnectionsPtrOutput {
	return pulumi.ToOutput(in).(SecondaryAllowConnectionsPtrOutput)
}

func (in *secondaryAllowConnectionsPtr) ToSecondaryAllowConnectionsPtrOutputWithContext(ctx context.Context) SecondaryAllowConnectionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SecondaryAllowConnectionsPtrOutput)
}

// Specifies how the secondary replica will be initially seeded. AUTOMATIC enables direct seeding. This method will seed the secondary replica over the network. This method does not require you to backup and restore a copy of the primary database on the replica. MANUAL specifies manual seeding (default). This method requires you to create a backup of the database on the primary replica and manually restore that backup on the secondary replica.
type SeedingMode string

const (
	SeedingModeAUTOMATIC = SeedingMode("AUTOMATIC")
	SeedingModeMANUAL    = SeedingMode("MANUAL")
)

func (SeedingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*SeedingMode)(nil)).Elem()
}

func (e SeedingMode) ToSeedingModeOutput() SeedingModeOutput {
	return pulumi.ToOutput(e).(SeedingModeOutput)
}

func (e SeedingMode) ToSeedingModeOutputWithContext(ctx context.Context) SeedingModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SeedingModeOutput)
}

func (e SeedingMode) ToSeedingModePtrOutput() SeedingModePtrOutput {
	return e.ToSeedingModePtrOutputWithContext(context.Background())
}

func (e SeedingMode) ToSeedingModePtrOutputWithContext(ctx context.Context) SeedingModePtrOutput {
	return SeedingMode(e).ToSeedingModeOutputWithContext(ctx).ToSeedingModePtrOutputWithContext(ctx)
}

func (e SeedingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SeedingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SeedingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SeedingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SeedingModeOutput struct{ *pulumi.OutputState }

func (SeedingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SeedingMode)(nil)).Elem()
}

func (o SeedingModeOutput) ToSeedingModeOutput() SeedingModeOutput {
	return o
}

func (o SeedingModeOutput) ToSeedingModeOutputWithContext(ctx context.Context) SeedingModeOutput {
	return o
}

func (o SeedingModeOutput) ToSeedingModePtrOutput() SeedingModePtrOutput {
	return o.ToSeedingModePtrOutputWithContext(context.Background())
}

func (o SeedingModeOutput) ToSeedingModePtrOutputWithContext(ctx context.Context) SeedingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SeedingMode) *SeedingMode {
		return &v
	}).(SeedingModePtrOutput)
}

func (o SeedingModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SeedingModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SeedingMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SeedingModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SeedingModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SeedingMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SeedingModePtrOutput struct{ *pulumi.OutputState }

func (SeedingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SeedingMode)(nil)).Elem()
}

func (o SeedingModePtrOutput) ToSeedingModePtrOutput() SeedingModePtrOutput {
	return o
}

func (o SeedingModePtrOutput) ToSeedingModePtrOutputWithContext(ctx context.Context) SeedingModePtrOutput {
	return o
}

func (o SeedingModePtrOutput) Elem() SeedingModeOutput {
	return o.ApplyT(func(v *SeedingMode) SeedingMode {
		if v != nil {
			return *v
		}
		var ret SeedingMode
		return ret
	}).(SeedingModeOutput)
}

func (o SeedingModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SeedingModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SeedingMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SeedingModeInput is an input type that accepts values of the SeedingMode enum
// A concrete instance of `SeedingModeInput` can be one of the following:
//
//	SeedingModeAUTOMATIC
//	SeedingModeMANUAL
type SeedingModeInput interface {
	pulumi.Input

	ToSeedingModeOutput() SeedingModeOutput
	ToSeedingModeOutputWithContext(context.Context) SeedingModeOutput
}

var seedingModePtrType = reflect.TypeOf((**SeedingMode)(nil)).Elem()

type SeedingModePtrInput interface {
	pulumi.Input

	ToSeedingModePtrOutput() SeedingModePtrOutput
	ToSeedingModePtrOutputWithContext(context.Context) SeedingModePtrOutput
}

type seedingModePtr string

func SeedingModePtr(v string) SeedingModePtrInput {
	return (*seedingModePtr)(&v)
}

func (*seedingModePtr) ElementType() reflect.Type {
	return seedingModePtrType
}

func (in *seedingModePtr) ToSeedingModePtrOutput() SeedingModePtrOutput {
	return pulumi.ToOutput(in).(SeedingModePtrOutput)
}

func (in *seedingModePtr) ToSeedingModePtrOutputWithContext(ctx context.Context) SeedingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SeedingModePtrOutput)
}

// Indicates if the resource represents a SQL Server engine or a SQL Server component service installed on the host.
type ServiceType string

const (
	// SQL Server Database Services.
	ServiceTypeEngine = ServiceType("Engine")
	// SQL Server Reporting Services.
	ServiceTypeSSRS = ServiceType("SSRS")
	// SQL Server Analysis Services.
	ServiceTypeSSAS = ServiceType("SSAS")
	// SQL Server Integration Services.
	ServiceTypeSSIS = ServiceType("SSIS")
	// Power BI Report Server.
	ServiceTypePBIRS = ServiceType("PBIRS")
)

func (ServiceType) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (e ServiceType) ToServiceTypeOutput() ServiceTypeOutput {
	return pulumi.ToOutput(e).(ServiceTypeOutput)
}

func (e ServiceType) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ServiceTypeOutput)
}

func (e ServiceType) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return e.ToServiceTypePtrOutputWithContext(context.Background())
}

func (e ServiceType) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return ServiceType(e).ToServiceTypeOutputWithContext(ctx).ToServiceTypePtrOutputWithContext(ctx)
}

func (e ServiceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ServiceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ServiceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ServiceTypeOutput struct{ *pulumi.OutputState }

func (ServiceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceType)(nil)).Elem()
}

func (o ServiceTypeOutput) ToServiceTypeOutput() ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypeOutputWithContext(ctx context.Context) ServiceTypeOutput {
	return o
}

func (o ServiceTypeOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o.ToServiceTypePtrOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceType) *ServiceType {
		return &v
	}).(ServiceTypePtrOutput)
}

func (o ServiceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ServiceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ServiceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ServiceTypePtrOutput struct{ *pulumi.OutputState }

func (ServiceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceType)(nil)).Elem()
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return o
}

func (o ServiceTypePtrOutput) Elem() ServiceTypeOutput {
	return o.ApplyT(func(v *ServiceType) ServiceType {
		if v != nil {
			return *v
		}
		var ret ServiceType
		return ret
	}).(ServiceTypeOutput)
}

func (o ServiceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ServiceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ServiceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ServiceTypeInput is an input type that accepts values of the ServiceType enum
// A concrete instance of `ServiceTypeInput` can be one of the following:
//
//	ServiceTypeEngine
//	ServiceTypeSSRS
//	ServiceTypeSSAS
//	ServiceTypeSSIS
//	ServiceTypePBIRS
type ServiceTypeInput interface {
	pulumi.Input

	ToServiceTypeOutput() ServiceTypeOutput
	ToServiceTypeOutputWithContext(context.Context) ServiceTypeOutput
}

var serviceTypePtrType = reflect.TypeOf((**ServiceType)(nil)).Elem()

type ServiceTypePtrInput interface {
	pulumi.Input

	ToServiceTypePtrOutput() ServiceTypePtrOutput
	ToServiceTypePtrOutputWithContext(context.Context) ServiceTypePtrOutput
}

type serviceTypePtr string

func ServiceTypePtr(v string) ServiceTypePtrInput {
	return (*serviceTypePtr)(&v)
}

func (*serviceTypePtr) ElementType() reflect.Type {
	return serviceTypePtrType
}

func (in *serviceTypePtr) ToServiceTypePtrOutput() ServiceTypePtrOutput {
	return pulumi.ToOutput(in).(ServiceTypePtrOutput)
}

func (in *serviceTypePtr) ToServiceTypePtrOutputWithContext(ctx context.Context) ServiceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ServiceTypePtrOutput)
}

// The name of the SKU.
type SqlManagedInstanceSkuName string

const (
	SqlManagedInstanceSkuNameVCore = SqlManagedInstanceSkuName("vCore")
)

func (SqlManagedInstanceSkuName) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSkuName)(nil)).Elem()
}

func (e SqlManagedInstanceSkuName) ToSqlManagedInstanceSkuNameOutput() SqlManagedInstanceSkuNameOutput {
	return pulumi.ToOutput(e).(SqlManagedInstanceSkuNameOutput)
}

func (e SqlManagedInstanceSkuName) ToSqlManagedInstanceSkuNameOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNameOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlManagedInstanceSkuNameOutput)
}

func (e SqlManagedInstanceSkuName) ToSqlManagedInstanceSkuNamePtrOutput() SqlManagedInstanceSkuNamePtrOutput {
	return e.ToSqlManagedInstanceSkuNamePtrOutputWithContext(context.Background())
}

func (e SqlManagedInstanceSkuName) ToSqlManagedInstanceSkuNamePtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNamePtrOutput {
	return SqlManagedInstanceSkuName(e).ToSqlManagedInstanceSkuNameOutputWithContext(ctx).ToSqlManagedInstanceSkuNamePtrOutputWithContext(ctx)
}

func (e SqlManagedInstanceSkuName) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagedInstanceSkuName) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagedInstanceSkuName) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlManagedInstanceSkuName) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlManagedInstanceSkuNameOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSkuName)(nil)).Elem()
}

func (o SqlManagedInstanceSkuNameOutput) ToSqlManagedInstanceSkuNameOutput() SqlManagedInstanceSkuNameOutput {
	return o
}

func (o SqlManagedInstanceSkuNameOutput) ToSqlManagedInstanceSkuNameOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNameOutput {
	return o
}

func (o SqlManagedInstanceSkuNameOutput) ToSqlManagedInstanceSkuNamePtrOutput() SqlManagedInstanceSkuNamePtrOutput {
	return o.ToSqlManagedInstanceSkuNamePtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuNameOutput) ToSqlManagedInstanceSkuNamePtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagedInstanceSkuName) *SqlManagedInstanceSkuName {
		return &v
	}).(SqlManagedInstanceSkuNamePtrOutput)
}

func (o SqlManagedInstanceSkuNameOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuNameOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagedInstanceSkuName) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlManagedInstanceSkuNameOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuNameOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagedInstanceSkuName) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlManagedInstanceSkuNamePtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceSkuName)(nil)).Elem()
}

func (o SqlManagedInstanceSkuNamePtrOutput) ToSqlManagedInstanceSkuNamePtrOutput() SqlManagedInstanceSkuNamePtrOutput {
	return o
}

func (o SqlManagedInstanceSkuNamePtrOutput) ToSqlManagedInstanceSkuNamePtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNamePtrOutput {
	return o
}

func (o SqlManagedInstanceSkuNamePtrOutput) Elem() SqlManagedInstanceSkuNameOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuName) SqlManagedInstanceSkuName {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceSkuName
		return ret
	}).(SqlManagedInstanceSkuNameOutput)
}

func (o SqlManagedInstanceSkuNamePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuNamePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlManagedInstanceSkuName) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlManagedInstanceSkuNameInput is an input type that accepts values of the SqlManagedInstanceSkuName enum
// A concrete instance of `SqlManagedInstanceSkuNameInput` can be one of the following:
//
//	SqlManagedInstanceSkuNameVCore
type SqlManagedInstanceSkuNameInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuNameOutput() SqlManagedInstanceSkuNameOutput
	ToSqlManagedInstanceSkuNameOutputWithContext(context.Context) SqlManagedInstanceSkuNameOutput
}

var sqlManagedInstanceSkuNamePtrType = reflect.TypeOf((**SqlManagedInstanceSkuName)(nil)).Elem()

type SqlManagedInstanceSkuNamePtrInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuNamePtrOutput() SqlManagedInstanceSkuNamePtrOutput
	ToSqlManagedInstanceSkuNamePtrOutputWithContext(context.Context) SqlManagedInstanceSkuNamePtrOutput
}

type sqlManagedInstanceSkuNamePtr string

func SqlManagedInstanceSkuNamePtr(v string) SqlManagedInstanceSkuNamePtrInput {
	return (*sqlManagedInstanceSkuNamePtr)(&v)
}

func (*sqlManagedInstanceSkuNamePtr) ElementType() reflect.Type {
	return sqlManagedInstanceSkuNamePtrType
}

func (in *sqlManagedInstanceSkuNamePtr) ToSqlManagedInstanceSkuNamePtrOutput() SqlManagedInstanceSkuNamePtrOutput {
	return pulumi.ToOutput(in).(SqlManagedInstanceSkuNamePtrOutput)
}

func (in *sqlManagedInstanceSkuNamePtr) ToSqlManagedInstanceSkuNamePtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlManagedInstanceSkuNamePtrOutput)
}

// The pricing tier for the instance.
type SqlManagedInstanceSkuTier string

const (
	SqlManagedInstanceSkuTierGeneralPurpose   = SqlManagedInstanceSkuTier("GeneralPurpose")
	SqlManagedInstanceSkuTierBusinessCritical = SqlManagedInstanceSkuTier("BusinessCritical")
)

func (SqlManagedInstanceSkuTier) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSkuTier)(nil)).Elem()
}

func (e SqlManagedInstanceSkuTier) ToSqlManagedInstanceSkuTierOutput() SqlManagedInstanceSkuTierOutput {
	return pulumi.ToOutput(e).(SqlManagedInstanceSkuTierOutput)
}

func (e SqlManagedInstanceSkuTier) ToSqlManagedInstanceSkuTierOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlManagedInstanceSkuTierOutput)
}

func (e SqlManagedInstanceSkuTier) ToSqlManagedInstanceSkuTierPtrOutput() SqlManagedInstanceSkuTierPtrOutput {
	return e.ToSqlManagedInstanceSkuTierPtrOutputWithContext(context.Background())
}

func (e SqlManagedInstanceSkuTier) ToSqlManagedInstanceSkuTierPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierPtrOutput {
	return SqlManagedInstanceSkuTier(e).ToSqlManagedInstanceSkuTierOutputWithContext(ctx).ToSqlManagedInstanceSkuTierPtrOutputWithContext(ctx)
}

func (e SqlManagedInstanceSkuTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagedInstanceSkuTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlManagedInstanceSkuTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlManagedInstanceSkuTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlManagedInstanceSkuTierOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuTierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlManagedInstanceSkuTier)(nil)).Elem()
}

func (o SqlManagedInstanceSkuTierOutput) ToSqlManagedInstanceSkuTierOutput() SqlManagedInstanceSkuTierOutput {
	return o
}

func (o SqlManagedInstanceSkuTierOutput) ToSqlManagedInstanceSkuTierOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierOutput {
	return o
}

func (o SqlManagedInstanceSkuTierOutput) ToSqlManagedInstanceSkuTierPtrOutput() SqlManagedInstanceSkuTierPtrOutput {
	return o.ToSqlManagedInstanceSkuTierPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuTierOutput) ToSqlManagedInstanceSkuTierPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlManagedInstanceSkuTier) *SqlManagedInstanceSkuTier {
		return &v
	}).(SqlManagedInstanceSkuTierPtrOutput)
}

func (o SqlManagedInstanceSkuTierOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuTierOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagedInstanceSkuTier) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlManagedInstanceSkuTierOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuTierOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlManagedInstanceSkuTier) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlManagedInstanceSkuTierPtrOutput struct{ *pulumi.OutputState }

func (SqlManagedInstanceSkuTierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlManagedInstanceSkuTier)(nil)).Elem()
}

func (o SqlManagedInstanceSkuTierPtrOutput) ToSqlManagedInstanceSkuTierPtrOutput() SqlManagedInstanceSkuTierPtrOutput {
	return o
}

func (o SqlManagedInstanceSkuTierPtrOutput) ToSqlManagedInstanceSkuTierPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierPtrOutput {
	return o
}

func (o SqlManagedInstanceSkuTierPtrOutput) Elem() SqlManagedInstanceSkuTierOutput {
	return o.ApplyT(func(v *SqlManagedInstanceSkuTier) SqlManagedInstanceSkuTier {
		if v != nil {
			return *v
		}
		var ret SqlManagedInstanceSkuTier
		return ret
	}).(SqlManagedInstanceSkuTierOutput)
}

func (o SqlManagedInstanceSkuTierPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlManagedInstanceSkuTierPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlManagedInstanceSkuTier) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlManagedInstanceSkuTierInput is an input type that accepts values of the SqlManagedInstanceSkuTier enum
// A concrete instance of `SqlManagedInstanceSkuTierInput` can be one of the following:
//
//	SqlManagedInstanceSkuTierGeneralPurpose
//	SqlManagedInstanceSkuTierBusinessCritical
type SqlManagedInstanceSkuTierInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuTierOutput() SqlManagedInstanceSkuTierOutput
	ToSqlManagedInstanceSkuTierOutputWithContext(context.Context) SqlManagedInstanceSkuTierOutput
}

var sqlManagedInstanceSkuTierPtrType = reflect.TypeOf((**SqlManagedInstanceSkuTier)(nil)).Elem()

type SqlManagedInstanceSkuTierPtrInput interface {
	pulumi.Input

	ToSqlManagedInstanceSkuTierPtrOutput() SqlManagedInstanceSkuTierPtrOutput
	ToSqlManagedInstanceSkuTierPtrOutputWithContext(context.Context) SqlManagedInstanceSkuTierPtrOutput
}

type sqlManagedInstanceSkuTierPtr string

func SqlManagedInstanceSkuTierPtr(v string) SqlManagedInstanceSkuTierPtrInput {
	return (*sqlManagedInstanceSkuTierPtr)(&v)
}

func (*sqlManagedInstanceSkuTierPtr) ElementType() reflect.Type {
	return sqlManagedInstanceSkuTierPtrType
}

func (in *sqlManagedInstanceSkuTierPtr) ToSqlManagedInstanceSkuTierPtrOutput() SqlManagedInstanceSkuTierPtrOutput {
	return pulumi.ToOutput(in).(SqlManagedInstanceSkuTierPtrOutput)
}

func (in *sqlManagedInstanceSkuTierPtr) ToSqlManagedInstanceSkuTierPtrOutputWithContext(ctx context.Context) SqlManagedInstanceSkuTierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlManagedInstanceSkuTierPtrOutput)
}

// SQL Server version.
type SqlVersion string

const (
	SqlVersion_SQL_Server_2012 = SqlVersion("SQL Server 2012")
	SqlVersion_SQL_Server_2014 = SqlVersion("SQL Server 2014")
	SqlVersion_SQL_Server_2016 = SqlVersion("SQL Server 2016")
	SqlVersion_SQL_Server_2017 = SqlVersion("SQL Server 2017")
	SqlVersion_SQL_Server_2019 = SqlVersion("SQL Server 2019")
	SqlVersion_SQL_Server_2022 = SqlVersion("SQL Server 2022")
	SqlVersionUnknown          = SqlVersion("Unknown")
)

func (SqlVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlVersion)(nil)).Elem()
}

func (e SqlVersion) ToSqlVersionOutput() SqlVersionOutput {
	return pulumi.ToOutput(e).(SqlVersionOutput)
}

func (e SqlVersion) ToSqlVersionOutputWithContext(ctx context.Context) SqlVersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SqlVersionOutput)
}

func (e SqlVersion) ToSqlVersionPtrOutput() SqlVersionPtrOutput {
	return e.ToSqlVersionPtrOutputWithContext(context.Background())
}

func (e SqlVersion) ToSqlVersionPtrOutputWithContext(ctx context.Context) SqlVersionPtrOutput {
	return SqlVersion(e).ToSqlVersionOutputWithContext(ctx).ToSqlVersionPtrOutputWithContext(ctx)
}

func (e SqlVersion) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlVersion) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SqlVersion) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SqlVersion) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SqlVersionOutput struct{ *pulumi.OutputState }

func (SqlVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlVersion)(nil)).Elem()
}

func (o SqlVersionOutput) ToSqlVersionOutput() SqlVersionOutput {
	return o
}

func (o SqlVersionOutput) ToSqlVersionOutputWithContext(ctx context.Context) SqlVersionOutput {
	return o
}

func (o SqlVersionOutput) ToSqlVersionPtrOutput() SqlVersionPtrOutput {
	return o.ToSqlVersionPtrOutputWithContext(context.Background())
}

func (o SqlVersionOutput) ToSqlVersionPtrOutputWithContext(ctx context.Context) SqlVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlVersion) *SqlVersion {
		return &v
	}).(SqlVersionPtrOutput)
}

func (o SqlVersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SqlVersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlVersion) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SqlVersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlVersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SqlVersion) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SqlVersionPtrOutput struct{ *pulumi.OutputState }

func (SqlVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlVersion)(nil)).Elem()
}

func (o SqlVersionPtrOutput) ToSqlVersionPtrOutput() SqlVersionPtrOutput {
	return o
}

func (o SqlVersionPtrOutput) ToSqlVersionPtrOutputWithContext(ctx context.Context) SqlVersionPtrOutput {
	return o
}

func (o SqlVersionPtrOutput) Elem() SqlVersionOutput {
	return o.ApplyT(func(v *SqlVersion) SqlVersion {
		if v != nil {
			return *v
		}
		var ret SqlVersion
		return ret
	}).(SqlVersionOutput)
}

func (o SqlVersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SqlVersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SqlVersion) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SqlVersionInput is an input type that accepts values of the SqlVersion enum
// A concrete instance of `SqlVersionInput` can be one of the following:
//
//	SqlVersion_SQL_Server_2012
//	SqlVersion_SQL_Server_2014
//	SqlVersion_SQL_Server_2016
//	SqlVersion_SQL_Server_2017
//	SqlVersion_SQL_Server_2019
//	SqlVersion_SQL_Server_2022
//	SqlVersionUnknown
type SqlVersionInput interface {
	pulumi.Input

	ToSqlVersionOutput() SqlVersionOutput
	ToSqlVersionOutputWithContext(context.Context) SqlVersionOutput
}

var sqlVersionPtrType = reflect.TypeOf((**SqlVersion)(nil)).Elem()

type SqlVersionPtrInput interface {
	pulumi.Input

	ToSqlVersionPtrOutput() SqlVersionPtrOutput
	ToSqlVersionPtrOutputWithContext(context.Context) SqlVersionPtrOutput
}

type sqlVersionPtr string

func SqlVersionPtr(v string) SqlVersionPtrInput {
	return (*sqlVersionPtr)(&v)
}

func (*sqlVersionPtr) ElementType() reflect.Type {
	return sqlVersionPtrType
}

func (in *sqlVersionPtr) ToSqlVersionPtrOutput() SqlVersionPtrOutput {
	return pulumi.ToOutput(in).(SqlVersionPtrOutput)
}

func (in *sqlVersionPtr) ToSqlVersionPtrOutputWithContext(ctx context.Context) SqlVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SqlVersionPtrOutput)
}

// The activation state of the license.
type State string

const (
	StateInactive   = State("Inactive")
	StateActive     = State("Active")
	StateTerminated = State("Terminated")
)

func (State) ElementType() reflect.Type {
	return reflect.TypeOf((*State)(nil)).Elem()
}

func (e State) ToStateOutput() StateOutput {
	return pulumi.ToOutput(e).(StateOutput)
}

func (e State) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StateOutput)
}

func (e State) ToStatePtrOutput() StatePtrOutput {
	return e.ToStatePtrOutputWithContext(context.Background())
}

func (e State) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return State(e).ToStateOutputWithContext(ctx).ToStatePtrOutputWithContext(ctx)
}

func (e State) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e State) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e State) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e State) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StateOutput struct{ *pulumi.OutputState }

func (StateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*State)(nil)).Elem()
}

func (o StateOutput) ToStateOutput() StateOutput {
	return o
}

func (o StateOutput) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return o
}

func (o StateOutput) ToStatePtrOutput() StatePtrOutput {
	return o.ToStatePtrOutputWithContext(context.Background())
}

func (o StateOutput) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v State) *State {
		return &v
	}).(StatePtrOutput)
}

func (o StateOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StateOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e State) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StateOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StateOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e State) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StatePtrOutput struct{ *pulumi.OutputState }

func (StatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**State)(nil)).Elem()
}

func (o StatePtrOutput) ToStatePtrOutput() StatePtrOutput {
	return o
}

func (o StatePtrOutput) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return o
}

func (o StatePtrOutput) Elem() StateOutput {
	return o.ApplyT(func(v *State) State {
		if v != nil {
			return *v
		}
		var ret State
		return ret
	}).(StateOutput)
}

func (o StatePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StatePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *State) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StateInput is an input type that accepts values of the State enum
// A concrete instance of `StateInput` can be one of the following:
//
//	StateInactive
//	StateActive
//	StateTerminated
type StateInput interface {
	pulumi.Input

	ToStateOutput() StateOutput
	ToStateOutputWithContext(context.Context) StateOutput
}

var statePtrType = reflect.TypeOf((**State)(nil)).Elem()

type StatePtrInput interface {
	pulumi.Input

	ToStatePtrOutput() StatePtrOutput
	ToStatePtrOutputWithContext(context.Context) StatePtrOutput
}

type statePtr string

func StatePtr(v string) StatePtrInput {
	return (*statePtr)(&v)
}

func (*statePtr) ElementType() reflect.Type {
	return statePtrType
}

func (in *statePtr) ToStatePtrOutput() StatePtrOutput {
	return pulumi.ToOutput(in).(StatePtrOutput)
}

func (in *statePtr) ToStatePtrOutputWithContext(ctx context.Context) StatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StatePtrOutput)
}

// The SQL Server version the license covers.
type Version string

const (
	Version_SQL_Server_2012 = Version("SQL Server 2012")
	Version_SQL_Server_2014 = Version("SQL Server 2014")
)

func (Version) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (e Version) ToVersionOutput() VersionOutput {
	return pulumi.ToOutput(e).(VersionOutput)
}

func (e Version) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(VersionOutput)
}

func (e Version) ToVersionPtrOutput() VersionPtrOutput {
	return e.ToVersionPtrOutputWithContext(context.Background())
}

func (e Version) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return Version(e).ToVersionOutputWithContext(ctx).ToVersionPtrOutputWithContext(ctx)
}

func (e Version) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Version) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Version) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Version) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

func (o VersionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o VersionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Version) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o VersionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Version) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version {
		if v != nil {
			return *v
		}
		var ret Version
		return ret
	}).(VersionOutput)
}

func (o VersionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o VersionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Version) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// VersionInput is an input type that accepts values of the Version enum
// A concrete instance of `VersionInput` can be one of the following:
//
//	Version_SQL_Server_2012
//	Version_SQL_Server_2014
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

var versionPtrType = reflect.TypeOf((**Version)(nil)).Elem()

type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtr string

func VersionPtr(v string) VersionPtrInput {
	return (*versionPtr)(&v)
}

func (*versionPtr) ElementType() reflect.Type {
	return versionPtrType
}

func (in *versionPtr) ToVersionPtrOutput() VersionPtrOutput {
	return pulumi.ToOutput(in).(VersionPtrOutput)
}

func (in *versionPtr) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(VersionPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountProvisioningModeOutput{})
	pulumi.RegisterOutputType(AccountProvisioningModePtrOutput{})
	pulumi.RegisterOutputType(ActivationStateOutput{})
	pulumi.RegisterOutputType(ActivationStatePtrOutput{})
	pulumi.RegisterOutputType(AggregationTypeOutput{})
	pulumi.RegisterOutputType(AggregationTypePtrOutput{})
	pulumi.RegisterOutputType(ArcSqlManagedInstanceLicenseTypeOutput{})
	pulumi.RegisterOutputType(ArcSqlManagedInstanceLicenseTypePtrOutput{})
	pulumi.RegisterOutputType(ArcSqlServerAvailabilityModeOutput{})
	pulumi.RegisterOutputType(ArcSqlServerAvailabilityModePtrOutput{})
	pulumi.RegisterOutputType(ArcSqlServerFailoverModeOutput{})
	pulumi.RegisterOutputType(ArcSqlServerFailoverModePtrOutput{})
	pulumi.RegisterOutputType(BillingPlanOutput{})
	pulumi.RegisterOutputType(BillingPlanPtrOutput{})
	pulumi.RegisterOutputType(ConnectionAuthOutput{})
	pulumi.RegisterOutputType(ConnectionAuthPtrOutput{})
	pulumi.RegisterOutputType(DatabaseCreateModeOutput{})
	pulumi.RegisterOutputType(DatabaseCreateModePtrOutput{})
	pulumi.RegisterOutputType(DatabaseStateOutput{})
	pulumi.RegisterOutputType(DatabaseStatePtrOutput{})
	pulumi.RegisterOutputType(EditionTypeOutput{})
	pulumi.RegisterOutputType(EditionTypePtrOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesOutput{})
	pulumi.RegisterOutputType(ExtendedLocationTypesPtrOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerSyncModeOutput{})
	pulumi.RegisterOutputType(FailoverGroupPartnerSyncModePtrOutput{})
	pulumi.RegisterOutputType(HostTypeOutput{})
	pulumi.RegisterOutputType(HostTypePtrOutput{})
	pulumi.RegisterOutputType(IdentityTypeOutput{})
	pulumi.RegisterOutputType(IdentityTypePtrOutput{})
	pulumi.RegisterOutputType(InfrastructureOutput{})
	pulumi.RegisterOutputType(InfrastructurePtrOutput{})
	pulumi.RegisterOutputType(InstanceFailoverGroupRoleOutput{})
	pulumi.RegisterOutputType(InstanceFailoverGroupRolePtrOutput{})
	pulumi.RegisterOutputType(LicenseCategoryOutput{})
	pulumi.RegisterOutputType(LicenseCategoryPtrOutput{})
	pulumi.RegisterOutputType(ModeOutput{})
	pulumi.RegisterOutputType(ModePtrOutput{})
	pulumi.RegisterOutputType(PostgresInstanceSkuTierOutput{})
	pulumi.RegisterOutputType(PostgresInstanceSkuTierPtrOutput{})
	pulumi.RegisterOutputType(PrimaryAllowConnectionsOutput{})
	pulumi.RegisterOutputType(PrimaryAllowConnectionsPtrOutput{})
	pulumi.RegisterOutputType(RecoveryModeOutput{})
	pulumi.RegisterOutputType(RecoveryModePtrOutput{})
	pulumi.RegisterOutputType(ScopeTypeOutput{})
	pulumi.RegisterOutputType(ScopeTypePtrOutput{})
	pulumi.RegisterOutputType(SecondaryAllowConnectionsOutput{})
	pulumi.RegisterOutputType(SecondaryAllowConnectionsPtrOutput{})
	pulumi.RegisterOutputType(SeedingModeOutput{})
	pulumi.RegisterOutputType(SeedingModePtrOutput{})
	pulumi.RegisterOutputType(ServiceTypeOutput{})
	pulumi.RegisterOutputType(ServiceTypePtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuNameOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuNamePtrOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuTierOutput{})
	pulumi.RegisterOutputType(SqlManagedInstanceSkuTierPtrOutput{})
	pulumi.RegisterOutputType(SqlVersionOutput{})
	pulumi.RegisterOutputType(SqlVersionPtrOutput{})
	pulumi.RegisterOutputType(StateOutput{})
	pulumi.RegisterOutputType(StatePtrOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
}
