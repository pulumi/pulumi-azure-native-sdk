// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves SQL Server instance telemetry
func GetSqlServerInstanceTelemetry(ctx *pulumi.Context, args *GetSqlServerInstanceTelemetryArgs, opts ...pulumi.InvokeOption) (*GetSqlServerInstanceTelemetryResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetSqlServerInstanceTelemetryResult
	err := ctx.Invoke("azure-native:azurearcdata/v20240101:getSqlServerInstanceTelemetry", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetSqlServerInstanceTelemetryArgs struct {
	// The aggregation type to use for the numerical columns in the dataset.
	AggregationType *string `pulumi:"aggregationType"`
	// The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and returned.
	DatabaseNames []string `pulumi:"databaseNames"`
	// The name of the telemetry dataset to retrieve.
	DatasetName string `pulumi:"datasetName"`
	// The end time for the time range to fetch telemetry for. If not specified, the current time is used.
	EndTime *string `pulumi:"endTime"`
	// The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
	Interval *string `pulumi:"interval"`
	// The name of the Azure resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of SQL Server Instance
	SqlServerInstanceName string `pulumi:"sqlServerInstanceName"`
	// The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used.
	StartTime *string `pulumi:"startTime"`
}

// Defaults sets the appropriate defaults for GetSqlServerInstanceTelemetryArgs
func (val *GetSqlServerInstanceTelemetryArgs) Defaults() *GetSqlServerInstanceTelemetryArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AggregationType == nil {
		aggregationType_ := "Average"
		tmp.AggregationType = &aggregationType_
	}
	if tmp.Interval == nil {
		interval_ := "PT1H"
		tmp.Interval = &interval_
	}
	return &tmp
}

// A section of the telemetry response for the SQL Server instance.
type GetSqlServerInstanceTelemetryResult struct {
	// The columns of the result telemetry table for the SQL Server instance.
	Columns []SqlServerInstanceTelemetryColumnResponse `pulumi:"columns"`
	// The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more sections are available.
	NextLink string `pulumi:"nextLink"`
	// A list of rows from the result telemetry table for the SQL Server instance.
	Rows [][]string `pulumi:"rows"`
}

func GetSqlServerInstanceTelemetryOutput(ctx *pulumi.Context, args GetSqlServerInstanceTelemetryOutputArgs, opts ...pulumi.InvokeOption) GetSqlServerInstanceTelemetryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSqlServerInstanceTelemetryResult, error) {
			args := v.(GetSqlServerInstanceTelemetryArgs)
			r, err := GetSqlServerInstanceTelemetry(ctx, &args, opts...)
			var s GetSqlServerInstanceTelemetryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSqlServerInstanceTelemetryResultOutput)
}

type GetSqlServerInstanceTelemetryOutputArgs struct {
	// The aggregation type to use for the numerical columns in the dataset.
	AggregationType pulumi.StringPtrInput `pulumi:"aggregationType"`
	// The list of database names to return telemetry for. If not specified, telemetry for all databases will be aggregated and returned.
	DatabaseNames pulumi.StringArrayInput `pulumi:"databaseNames"`
	// The name of the telemetry dataset to retrieve.
	DatasetName pulumi.StringInput `pulumi:"datasetName"`
	// The end time for the time range to fetch telemetry for. If not specified, the current time is used.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// The time granularity to fetch telemetry for. This is an ISO8601 duration. Examples: PT15M, PT1H, P1D
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The name of the Azure resource group
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of SQL Server Instance
	SqlServerInstanceName pulumi.StringInput `pulumi:"sqlServerInstanceName"`
	// The start time for the time range to fetch telemetry for. If not specified, the current time minus 1 hour is used.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (GetSqlServerInstanceTelemetryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlServerInstanceTelemetryArgs)(nil)).Elem()
}

// A section of the telemetry response for the SQL Server instance.
type GetSqlServerInstanceTelemetryResultOutput struct{ *pulumi.OutputState }

func (GetSqlServerInstanceTelemetryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSqlServerInstanceTelemetryResult)(nil)).Elem()
}

func (o GetSqlServerInstanceTelemetryResultOutput) ToGetSqlServerInstanceTelemetryResultOutput() GetSqlServerInstanceTelemetryResultOutput {
	return o
}

func (o GetSqlServerInstanceTelemetryResultOutput) ToGetSqlServerInstanceTelemetryResultOutputWithContext(ctx context.Context) GetSqlServerInstanceTelemetryResultOutput {
	return o
}

// The columns of the result telemetry table for the SQL Server instance.
func (o GetSqlServerInstanceTelemetryResultOutput) Columns() SqlServerInstanceTelemetryColumnResponseArrayOutput {
	return o.ApplyT(func(v GetSqlServerInstanceTelemetryResult) []SqlServerInstanceTelemetryColumnResponse {
		return v.Columns
	}).(SqlServerInstanceTelemetryColumnResponseArrayOutput)
}

// The link to the next section of rows of the telemetry response for the SQL Server instance. Null if no more sections are available.
func (o GetSqlServerInstanceTelemetryResultOutput) NextLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetSqlServerInstanceTelemetryResult) string { return v.NextLink }).(pulumi.StringOutput)
}

// A list of rows from the result telemetry table for the SQL Server instance.
func (o GetSqlServerInstanceTelemetryResultOutput) Rows() pulumi.StringArrayArrayOutput {
	return o.ApplyT(func(v GetSqlServerInstanceTelemetryResult) [][]string { return v.Rows }).(pulumi.StringArrayArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSqlServerInstanceTelemetryResultOutput{})
}
