// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Arc Sql Server Availability Group
type SqlServerAvailabilityGroup struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Properties of Arc Sql Server availability group
	Properties SqlServerAvailabilityGroupResourcePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlServerAvailabilityGroup registers a new resource with the given unique name, arguments, and options.
func NewSqlServerAvailabilityGroup(ctx *pulumi.Context,
	name string, args *SqlServerAvailabilityGroupArgs, opts ...pulumi.ResourceOption) (*SqlServerAvailabilityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SqlServerInstanceName == nil {
		return nil, errors.New("invalid value for required argument 'SqlServerInstanceName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurearcdata:SqlServerAvailabilityGroup"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlServerAvailabilityGroup
	err := ctx.RegisterResource("azure-native:azurearcdata/v20240101:SqlServerAvailabilityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlServerAvailabilityGroup gets an existing SqlServerAvailabilityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServerAvailabilityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlServerAvailabilityGroupState, opts ...pulumi.ResourceOption) (*SqlServerAvailabilityGroup, error) {
	var resource SqlServerAvailabilityGroup
	err := ctx.ReadResource("azure-native:azurearcdata/v20240101:SqlServerAvailabilityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlServerAvailabilityGroup resources.
type sqlServerAvailabilityGroupState struct {
}

type SqlServerAvailabilityGroupState struct {
}

func (SqlServerAvailabilityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerAvailabilityGroupState)(nil)).Elem()
}

type sqlServerAvailabilityGroupArgs struct {
	// Name of SQL Availability Group
	AvailabilityGroupName *string `pulumi:"availabilityGroupName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// Properties of Arc Sql Server availability group
	Properties SqlServerAvailabilityGroupResourceProperties `pulumi:"properties"`
	// The name of the Azure resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of SQL Server Instance
	SqlServerInstanceName string `pulumi:"sqlServerInstanceName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlServerAvailabilityGroup resource.
type SqlServerAvailabilityGroupArgs struct {
	// Name of SQL Availability Group
	AvailabilityGroupName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// Properties of Arc Sql Server availability group
	Properties SqlServerAvailabilityGroupResourcePropertiesInput
	// The name of the Azure resource group
	ResourceGroupName pulumi.StringInput
	// Name of SQL Server Instance
	SqlServerInstanceName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlServerAvailabilityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerAvailabilityGroupArgs)(nil)).Elem()
}

type SqlServerAvailabilityGroupInput interface {
	pulumi.Input

	ToSqlServerAvailabilityGroupOutput() SqlServerAvailabilityGroupOutput
	ToSqlServerAvailabilityGroupOutputWithContext(ctx context.Context) SqlServerAvailabilityGroupOutput
}

func (*SqlServerAvailabilityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerAvailabilityGroup)(nil)).Elem()
}

func (i *SqlServerAvailabilityGroup) ToSqlServerAvailabilityGroupOutput() SqlServerAvailabilityGroupOutput {
	return i.ToSqlServerAvailabilityGroupOutputWithContext(context.Background())
}

func (i *SqlServerAvailabilityGroup) ToSqlServerAvailabilityGroupOutputWithContext(ctx context.Context) SqlServerAvailabilityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerAvailabilityGroupOutput)
}

type SqlServerAvailabilityGroupOutput struct{ *pulumi.OutputState }

func (SqlServerAvailabilityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerAvailabilityGroup)(nil)).Elem()
}

func (o SqlServerAvailabilityGroupOutput) ToSqlServerAvailabilityGroupOutput() SqlServerAvailabilityGroupOutput {
	return o
}

func (o SqlServerAvailabilityGroupOutput) ToSqlServerAvailabilityGroupOutputWithContext(ctx context.Context) SqlServerAvailabilityGroupOutput {
	return o
}

// The geo-location where the resource lives
func (o SqlServerAvailabilityGroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SqlServerAvailabilityGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Properties of Arc Sql Server availability group
func (o SqlServerAvailabilityGroupOutput) Properties() SqlServerAvailabilityGroupResourcePropertiesResponseOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) SqlServerAvailabilityGroupResourcePropertiesResponseOutput {
		return v.Properties
	}).(SqlServerAvailabilityGroupResourcePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SqlServerAvailabilityGroupOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SqlServerAvailabilityGroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlServerAvailabilityGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerAvailabilityGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlServerAvailabilityGroupOutput{})
}
