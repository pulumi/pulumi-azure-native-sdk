// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azurearcdata

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describe SQL Server ESU license resource.
//
// Uses Azure REST API version 2024-05-01-preview. In version 2.x of the Azure Native provider, it used API version 2024-05-01-preview.
//
// Other available API versions: 2025-03-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native azurearcdata [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type SqlServerEsuLicense struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// SQL Server ESU license properties
	Properties SqlServerEsuLicensePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlServerEsuLicense registers a new resource with the given unique name, arguments, and options.
func NewSqlServerEsuLicense(ctx *pulumi.Context,
	name string, args *SqlServerEsuLicenseArgs, opts ...pulumi.ResourceOption) (*SqlServerEsuLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurearcdata/v20240501preview:SqlServerEsuLicense"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20250301preview:SqlServerEsuLicense"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlServerEsuLicense
	err := ctx.RegisterResource("azure-native:azurearcdata:SqlServerEsuLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlServerEsuLicense gets an existing SqlServerEsuLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServerEsuLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlServerEsuLicenseState, opts ...pulumi.ResourceOption) (*SqlServerEsuLicense, error) {
	var resource SqlServerEsuLicense
	err := ctx.ReadResource("azure-native:azurearcdata:SqlServerEsuLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlServerEsuLicense resources.
type sqlServerEsuLicenseState struct {
}

type SqlServerEsuLicenseState struct {
}

func (SqlServerEsuLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerEsuLicenseState)(nil)).Elem()
}

type sqlServerEsuLicenseArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// SQL Server ESU license properties
	Properties SqlServerEsuLicenseProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of SQL Server ESU License
	SqlServerEsuLicenseName *string `pulumi:"sqlServerEsuLicenseName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlServerEsuLicense resource.
type SqlServerEsuLicenseArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// SQL Server ESU license properties
	Properties SqlServerEsuLicensePropertiesInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Name of SQL Server ESU License
	SqlServerEsuLicenseName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlServerEsuLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerEsuLicenseArgs)(nil)).Elem()
}

type SqlServerEsuLicenseInput interface {
	pulumi.Input

	ToSqlServerEsuLicenseOutput() SqlServerEsuLicenseOutput
	ToSqlServerEsuLicenseOutputWithContext(ctx context.Context) SqlServerEsuLicenseOutput
}

func (*SqlServerEsuLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerEsuLicense)(nil)).Elem()
}

func (i *SqlServerEsuLicense) ToSqlServerEsuLicenseOutput() SqlServerEsuLicenseOutput {
	return i.ToSqlServerEsuLicenseOutputWithContext(context.Background())
}

func (i *SqlServerEsuLicense) ToSqlServerEsuLicenseOutputWithContext(ctx context.Context) SqlServerEsuLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerEsuLicenseOutput)
}

type SqlServerEsuLicenseOutput struct{ *pulumi.OutputState }

func (SqlServerEsuLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerEsuLicense)(nil)).Elem()
}

func (o SqlServerEsuLicenseOutput) ToSqlServerEsuLicenseOutput() SqlServerEsuLicenseOutput {
	return o
}

func (o SqlServerEsuLicenseOutput) ToSqlServerEsuLicenseOutputWithContext(ctx context.Context) SqlServerEsuLicenseOutput {
	return o
}

// The Azure API version of the resource.
func (o SqlServerEsuLicenseOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o SqlServerEsuLicenseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SqlServerEsuLicenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SQL Server ESU license properties
func (o SqlServerEsuLicenseOutput) Properties() SqlServerEsuLicensePropertiesResponseOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) SqlServerEsuLicensePropertiesResponseOutput { return v.Properties }).(SqlServerEsuLicensePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SqlServerEsuLicenseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SqlServerEsuLicenseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlServerEsuLicenseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerEsuLicense) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlServerEsuLicenseOutput{})
}
