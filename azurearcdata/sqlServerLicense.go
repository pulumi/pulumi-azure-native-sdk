// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package azurearcdata

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describe SQL Server license resource.
//
// Uses Azure REST API version 2024-05-01-preview.
//
// Other available API versions: 2025-03-01-preview.
type SqlServerLicense struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// SQL Server license properties
	Properties SqlServerLicensePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSqlServerLicense registers a new resource with the given unique name, arguments, and options.
func NewSqlServerLicense(ctx *pulumi.Context,
	name string, args *SqlServerLicenseArgs, opts ...pulumi.ResourceOption) (*SqlServerLicense, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:azurearcdata/v20240501preview:SqlServerLicense"),
		},
		{
			Type: pulumi.String("azure-native:azurearcdata/v20250301preview:SqlServerLicense"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SqlServerLicense
	err := ctx.RegisterResource("azure-native:azurearcdata:SqlServerLicense", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlServerLicense gets an existing SqlServerLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlServerLicense(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlServerLicenseState, opts ...pulumi.ResourceOption) (*SqlServerLicense, error) {
	var resource SqlServerLicense
	err := ctx.ReadResource("azure-native:azurearcdata:SqlServerLicense", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlServerLicense resources.
type sqlServerLicenseState struct {
}

type SqlServerLicenseState struct {
}

func (SqlServerLicenseState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerLicenseState)(nil)).Elem()
}

type sqlServerLicenseArgs struct {
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// SQL Server license properties
	Properties SqlServerLicenseProperties `pulumi:"properties"`
	// The name of the Azure resource group
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of SQL Server License
	SqlServerLicenseName *string `pulumi:"sqlServerLicenseName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a SqlServerLicense resource.
type SqlServerLicenseArgs struct {
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// SQL Server license properties
	Properties SqlServerLicensePropertiesInput
	// The name of the Azure resource group
	ResourceGroupName pulumi.StringInput
	// Name of SQL Server License
	SqlServerLicenseName pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (SqlServerLicenseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlServerLicenseArgs)(nil)).Elem()
}

type SqlServerLicenseInput interface {
	pulumi.Input

	ToSqlServerLicenseOutput() SqlServerLicenseOutput
	ToSqlServerLicenseOutputWithContext(ctx context.Context) SqlServerLicenseOutput
}

func (*SqlServerLicense) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerLicense)(nil)).Elem()
}

func (i *SqlServerLicense) ToSqlServerLicenseOutput() SqlServerLicenseOutput {
	return i.ToSqlServerLicenseOutputWithContext(context.Background())
}

func (i *SqlServerLicense) ToSqlServerLicenseOutputWithContext(ctx context.Context) SqlServerLicenseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerLicenseOutput)
}

type SqlServerLicenseOutput struct{ *pulumi.OutputState }

func (SqlServerLicenseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerLicense)(nil)).Elem()
}

func (o SqlServerLicenseOutput) ToSqlServerLicenseOutput() SqlServerLicenseOutput {
	return o
}

func (o SqlServerLicenseOutput) ToSqlServerLicenseOutputWithContext(ctx context.Context) SqlServerLicenseOutput {
	return o
}

// The geo-location where the resource lives
func (o SqlServerLicenseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerLicense) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o SqlServerLicenseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerLicense) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SQL Server license properties
func (o SqlServerLicenseOutput) Properties() SqlServerLicensePropertiesResponseOutput {
	return o.ApplyT(func(v *SqlServerLicense) SqlServerLicensePropertiesResponseOutput { return v.Properties }).(SqlServerLicensePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o SqlServerLicenseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *SqlServerLicense) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o SqlServerLicenseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SqlServerLicense) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o SqlServerLicenseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlServerLicense) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(SqlServerLicenseOutput{})
}
