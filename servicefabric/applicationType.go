// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package servicefabric

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The application type name resource
// Azure REST API version: 2024-11-01-preview.
type ApplicationType struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The current deployment or provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApplicationType registers a new resource with the given unique name, arguments, and options.
func NewApplicationType(ctx *pulumi.Context,
	name string, args *ApplicationTypeArgs, opts ...pulumi.ResourceOption) (*ApplicationType, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:servicefabric/v20210101preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210501:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210601:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210701preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20210901privatepreview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20211101preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220101:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220201preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220601preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20220801preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20221001preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230201preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230301preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230301preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230701preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230701preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230901preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20230901preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20231101preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20231101preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20231201preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20231201preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240201preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240201preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240401:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240401:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240601preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240601preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240901preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20240901preview:ManagedClusterApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric/v20241101preview:ApplicationType"),
		},
		{
			Type: pulumi.String("azure-native:servicefabric:ManagedClusterApplicationType"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApplicationType
	err := ctx.RegisterResource("azure-native:servicefabric:ApplicationType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationType gets an existing ApplicationType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationTypeState, opts ...pulumi.ResourceOption) (*ApplicationType, error) {
	var resource ApplicationType
	err := ctx.ReadResource("azure-native:servicefabric:ApplicationType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationType resources.
type applicationTypeState struct {
}

type ApplicationTypeState struct {
}

func (ApplicationTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationTypeState)(nil)).Elem()
}

type applicationTypeArgs struct {
	// The name of the application type name resource.
	ApplicationTypeName *string `pulumi:"applicationTypeName"`
	// The name of the cluster resource.
	ClusterName string `pulumi:"clusterName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ApplicationType resource.
type ApplicationTypeArgs struct {
	// The name of the application type name resource.
	ApplicationTypeName pulumi.StringPtrInput
	// The name of the cluster resource.
	ClusterName pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ApplicationTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationTypeArgs)(nil)).Elem()
}

type ApplicationTypeInput interface {
	pulumi.Input

	ToApplicationTypeOutput() ApplicationTypeOutput
	ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput
}

func (*ApplicationType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationType)(nil)).Elem()
}

func (i *ApplicationType) ToApplicationTypeOutput() ApplicationTypeOutput {
	return i.ToApplicationTypeOutputWithContext(context.Background())
}

func (i *ApplicationType) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationTypeOutput)
}

type ApplicationTypeOutput struct{ *pulumi.OutputState }

func (ApplicationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationType)(nil)).Elem()
}

func (o ApplicationTypeOutput) ToApplicationTypeOutput() ApplicationTypeOutput {
	return o
}

func (o ApplicationTypeOutput) ToApplicationTypeOutputWithContext(ctx context.Context) ApplicationTypeOutput {
	return o
}

// The Azure API version of the resource.
func (o ApplicationTypeOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o ApplicationTypeOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o ApplicationTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The current deployment or provisioning state, which only appears in the response.
func (o ApplicationTypeOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o ApplicationTypeOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *ApplicationType) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o ApplicationTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o ApplicationTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationType) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplicationTypeOutput{})
}
