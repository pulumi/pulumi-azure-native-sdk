// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesruntime

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A LoadBalancer resource for an Arc connected cluster (Microsoft.Kubernetes/connectedClusters)
// Azure REST API version: 2024-03-01.
//
// Other available API versions: 2023-10-01-preview.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// IP Range
	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	// Advertise Mode
	AdvertiseMode pulumi.StringOutput `pulumi:"advertiseMode"`
	// The list of BGP peers it should advertise to. Null or empty means to advertise to all peers.
	BgpPeers pulumi.StringArrayOutput `pulumi:"bgpPeers"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Resource provision state
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
	ServiceSelector pulumi.StringMapOutput `pulumi:"serviceSelector"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Addresses == nil {
		return nil, errors.New("invalid value for required argument 'Addresses'")
	}
	if args.AdvertiseMode == nil {
		return nil, errors.New("invalid value for required argument 'AdvertiseMode'")
	}
	if args.ResourceUri == nil {
		return nil, errors.New("invalid value for required argument 'ResourceUri'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:kubernetesruntime/v20231001preview:LoadBalancer"),
		},
		{
			Type: pulumi.String("azure-native:kubernetesruntime/v20240301:LoadBalancer"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("azure-native:kubernetesruntime:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("azure-native:kubernetesruntime:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
}

type LoadBalancerState struct {
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// IP Range
	Addresses []string `pulumi:"addresses"`
	// Advertise Mode
	AdvertiseMode string `pulumi:"advertiseMode"`
	// The list of BGP peers it should advertise to. Null or empty means to advertise to all peers.
	BgpPeers []string `pulumi:"bgpPeers"`
	// The name of the LoadBalancer
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
	// A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
	ServiceSelector map[string]string `pulumi:"serviceSelector"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// IP Range
	Addresses pulumi.StringArrayInput
	// Advertise Mode
	AdvertiseMode pulumi.StringInput
	// The list of BGP peers it should advertise to. Null or empty means to advertise to all peers.
	BgpPeers pulumi.StringArrayInput
	// The name of the LoadBalancer
	LoadBalancerName pulumi.StringPtrInput
	// The fully qualified Azure Resource manager identifier of the resource.
	ResourceUri pulumi.StringInput
	// A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
	ServiceSelector pulumi.StringMapInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// IP Range
func (o LoadBalancerOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Advertise Mode
func (o LoadBalancerOutput) AdvertiseMode() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.AdvertiseMode }).(pulumi.StringOutput)
}

// The list of BGP peers it should advertise to. Null or empty means to advertise to all peers.
func (o LoadBalancerOutput) BgpPeers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.BgpPeers }).(pulumi.StringArrayOutput)
}

// The name of the resource
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resource provision state
func (o LoadBalancerOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// A dynamic label mapping to select related services. For instance, if you want to create a load balancer only for services with label "a=b", then please specify {"a": "b"} in the field.
func (o LoadBalancerOutput) ServiceSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringMapOutput { return v.ServiceSelector }).(pulumi.StringMapOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LoadBalancerOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *LoadBalancer) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LoadBalancerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerOutput{})
}
