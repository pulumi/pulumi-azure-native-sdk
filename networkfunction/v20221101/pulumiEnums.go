// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20221101

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Emission destination type.
type DestinationType string

const (
	DestinationTypeAzureMonitor = DestinationType("AzureMonitor")
)

func (DestinationType) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationType)(nil)).Elem()
}

func (e DestinationType) ToDestinationTypeOutput() DestinationTypeOutput {
	return pulumi.ToOutput(e).(DestinationTypeOutput)
}

func (e DestinationType) ToDestinationTypeOutputWithContext(ctx context.Context) DestinationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DestinationTypeOutput)
}

func (e DestinationType) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return e.ToDestinationTypePtrOutputWithContext(context.Background())
}

func (e DestinationType) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return DestinationType(e).ToDestinationTypeOutputWithContext(ctx).ToDestinationTypePtrOutputWithContext(ctx)
}

func (e DestinationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DestinationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DestinationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DestinationTypeOutput struct{ *pulumi.OutputState }

func (DestinationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationType)(nil)).Elem()
}

func (o DestinationTypeOutput) ToDestinationTypeOutput() DestinationTypeOutput {
	return o
}

func (o DestinationTypeOutput) ToDestinationTypeOutputWithContext(ctx context.Context) DestinationTypeOutput {
	return o
}

func (o DestinationTypeOutput) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return o.ToDestinationTypePtrOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationType) *DestinationType {
		return &v
	}).(DestinationTypePtrOutput)
}

func (o DestinationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DestinationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DestinationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DestinationTypePtrOutput struct{ *pulumi.OutputState }

func (DestinationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationType)(nil)).Elem()
}

func (o DestinationTypePtrOutput) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return o
}

func (o DestinationTypePtrOutput) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return o
}

func (o DestinationTypePtrOutput) Elem() DestinationTypeOutput {
	return o.ApplyT(func(v *DestinationType) DestinationType {
		if v != nil {
			return *v
		}
		var ret DestinationType
		return ret
	}).(DestinationTypeOutput)
}

func (o DestinationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DestinationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DestinationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DestinationTypeInput is an input type that accepts values of the DestinationType enum
// A concrete instance of `DestinationTypeInput` can be one of the following:
//
//	DestinationTypeAzureMonitor
type DestinationTypeInput interface {
	pulumi.Input

	ToDestinationTypeOutput() DestinationTypeOutput
	ToDestinationTypeOutputWithContext(context.Context) DestinationTypeOutput
}

var destinationTypePtrType = reflect.TypeOf((**DestinationType)(nil)).Elem()

type DestinationTypePtrInput interface {
	pulumi.Input

	ToDestinationTypePtrOutput() DestinationTypePtrOutput
	ToDestinationTypePtrOutputWithContext(context.Context) DestinationTypePtrOutput
}

type destinationTypePtr string

func DestinationTypePtr(v string) DestinationTypePtrInput {
	return (*destinationTypePtr)(&v)
}

func (*destinationTypePtr) ElementType() reflect.Type {
	return destinationTypePtrType
}

func (in *destinationTypePtr) ToDestinationTypePtrOutput() DestinationTypePtrOutput {
	return pulumi.ToOutput(in).(DestinationTypePtrOutput)
}

func (in *destinationTypePtr) ToDestinationTypePtrOutputWithContext(ctx context.Context) DestinationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DestinationTypePtrOutput)
}

// Emission format type.
type EmissionType string

const (
	EmissionTypeIPFIX = EmissionType("IPFIX")
)

func (EmissionType) ElementType() reflect.Type {
	return reflect.TypeOf((*EmissionType)(nil)).Elem()
}

func (e EmissionType) ToEmissionTypeOutput() EmissionTypeOutput {
	return pulumi.ToOutput(e).(EmissionTypeOutput)
}

func (e EmissionType) ToEmissionTypeOutputWithContext(ctx context.Context) EmissionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EmissionTypeOutput)
}

func (e EmissionType) ToEmissionTypePtrOutput() EmissionTypePtrOutput {
	return e.ToEmissionTypePtrOutputWithContext(context.Background())
}

func (e EmissionType) ToEmissionTypePtrOutputWithContext(ctx context.Context) EmissionTypePtrOutput {
	return EmissionType(e).ToEmissionTypeOutputWithContext(ctx).ToEmissionTypePtrOutputWithContext(ctx)
}

func (e EmissionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EmissionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EmissionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EmissionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EmissionTypeOutput struct{ *pulumi.OutputState }

func (EmissionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmissionType)(nil)).Elem()
}

func (o EmissionTypeOutput) ToEmissionTypeOutput() EmissionTypeOutput {
	return o
}

func (o EmissionTypeOutput) ToEmissionTypeOutputWithContext(ctx context.Context) EmissionTypeOutput {
	return o
}

func (o EmissionTypeOutput) ToEmissionTypePtrOutput() EmissionTypePtrOutput {
	return o.ToEmissionTypePtrOutputWithContext(context.Background())
}

func (o EmissionTypeOutput) ToEmissionTypePtrOutputWithContext(ctx context.Context) EmissionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EmissionType) *EmissionType {
		return &v
	}).(EmissionTypePtrOutput)
}

func (o EmissionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EmissionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EmissionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EmissionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EmissionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EmissionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EmissionTypePtrOutput struct{ *pulumi.OutputState }

func (EmissionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmissionType)(nil)).Elem()
}

func (o EmissionTypePtrOutput) ToEmissionTypePtrOutput() EmissionTypePtrOutput {
	return o
}

func (o EmissionTypePtrOutput) ToEmissionTypePtrOutputWithContext(ctx context.Context) EmissionTypePtrOutput {
	return o
}

func (o EmissionTypePtrOutput) Elem() EmissionTypeOutput {
	return o.ApplyT(func(v *EmissionType) EmissionType {
		if v != nil {
			return *v
		}
		var ret EmissionType
		return ret
	}).(EmissionTypeOutput)
}

func (o EmissionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EmissionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EmissionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EmissionTypeInput is an input type that accepts values of the EmissionType enum
// A concrete instance of `EmissionTypeInput` can be one of the following:
//
//	EmissionTypeIPFIX
type EmissionTypeInput interface {
	pulumi.Input

	ToEmissionTypeOutput() EmissionTypeOutput
	ToEmissionTypeOutputWithContext(context.Context) EmissionTypeOutput
}

var emissionTypePtrType = reflect.TypeOf((**EmissionType)(nil)).Elem()

type EmissionTypePtrInput interface {
	pulumi.Input

	ToEmissionTypePtrOutput() EmissionTypePtrOutput
	ToEmissionTypePtrOutputWithContext(context.Context) EmissionTypePtrOutput
}

type emissionTypePtr string

func EmissionTypePtr(v string) EmissionTypePtrInput {
	return (*emissionTypePtr)(&v)
}

func (*emissionTypePtr) ElementType() reflect.Type {
	return emissionTypePtrType
}

func (in *emissionTypePtr) ToEmissionTypePtrOutput() EmissionTypePtrOutput {
	return pulumi.ToOutput(in).(EmissionTypePtrOutput)
}

func (in *emissionTypePtr) ToEmissionTypePtrOutputWithContext(ctx context.Context) EmissionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EmissionTypePtrOutput)
}

// The ingestion type.
type IngestionType string

const (
	IngestionTypeIPFIX = IngestionType("IPFIX")
)

func (IngestionType) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionType)(nil)).Elem()
}

func (e IngestionType) ToIngestionTypeOutput() IngestionTypeOutput {
	return pulumi.ToOutput(e).(IngestionTypeOutput)
}

func (e IngestionType) ToIngestionTypeOutputWithContext(ctx context.Context) IngestionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(IngestionTypeOutput)
}

func (e IngestionType) ToIngestionTypePtrOutput() IngestionTypePtrOutput {
	return e.ToIngestionTypePtrOutputWithContext(context.Background())
}

func (e IngestionType) ToIngestionTypePtrOutputWithContext(ctx context.Context) IngestionTypePtrOutput {
	return IngestionType(e).ToIngestionTypeOutputWithContext(ctx).ToIngestionTypePtrOutputWithContext(ctx)
}

func (e IngestionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngestionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e IngestionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e IngestionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type IngestionTypeOutput struct{ *pulumi.OutputState }

func (IngestionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IngestionType)(nil)).Elem()
}

func (o IngestionTypeOutput) ToIngestionTypeOutput() IngestionTypeOutput {
	return o
}

func (o IngestionTypeOutput) ToIngestionTypeOutputWithContext(ctx context.Context) IngestionTypeOutput {
	return o
}

func (o IngestionTypeOutput) ToIngestionTypePtrOutput() IngestionTypePtrOutput {
	return o.ToIngestionTypePtrOutputWithContext(context.Background())
}

func (o IngestionTypeOutput) ToIngestionTypePtrOutputWithContext(ctx context.Context) IngestionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IngestionType) *IngestionType {
		return &v
	}).(IngestionTypePtrOutput)
}

func (o IngestionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o IngestionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IngestionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o IngestionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IngestionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e IngestionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type IngestionTypePtrOutput struct{ *pulumi.OutputState }

func (IngestionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestionType)(nil)).Elem()
}

func (o IngestionTypePtrOutput) ToIngestionTypePtrOutput() IngestionTypePtrOutput {
	return o
}

func (o IngestionTypePtrOutput) ToIngestionTypePtrOutputWithContext(ctx context.Context) IngestionTypePtrOutput {
	return o
}

func (o IngestionTypePtrOutput) Elem() IngestionTypeOutput {
	return o.ApplyT(func(v *IngestionType) IngestionType {
		if v != nil {
			return *v
		}
		var ret IngestionType
		return ret
	}).(IngestionTypeOutput)
}

func (o IngestionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o IngestionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *IngestionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// IngestionTypeInput is an input type that accepts values of the IngestionType enum
// A concrete instance of `IngestionTypeInput` can be one of the following:
//
//	IngestionTypeIPFIX
type IngestionTypeInput interface {
	pulumi.Input

	ToIngestionTypeOutput() IngestionTypeOutput
	ToIngestionTypeOutputWithContext(context.Context) IngestionTypeOutput
}

var ingestionTypePtrType = reflect.TypeOf((**IngestionType)(nil)).Elem()

type IngestionTypePtrInput interface {
	pulumi.Input

	ToIngestionTypePtrOutput() IngestionTypePtrOutput
	ToIngestionTypePtrOutputWithContext(context.Context) IngestionTypePtrOutput
}

type ingestionTypePtr string

func IngestionTypePtr(v string) IngestionTypePtrInput {
	return (*ingestionTypePtr)(&v)
}

func (*ingestionTypePtr) ElementType() reflect.Type {
	return ingestionTypePtrType
}

func (in *ingestionTypePtr) ToIngestionTypePtrOutput() IngestionTypePtrOutput {
	return pulumi.ToOutput(in).(IngestionTypePtrOutput)
}

func (in *ingestionTypePtr) ToIngestionTypePtrOutputWithContext(ctx context.Context) IngestionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(IngestionTypePtrOutput)
}

// Ingestion source type.
type SourceType string

const (
	SourceTypeResource = SourceType("Resource")
)

func (SourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceType)(nil)).Elem()
}

func (e SourceType) ToSourceTypeOutput() SourceTypeOutput {
	return pulumi.ToOutput(e).(SourceTypeOutput)
}

func (e SourceType) ToSourceTypeOutputWithContext(ctx context.Context) SourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceTypeOutput)
}

func (e SourceType) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return e.ToSourceTypePtrOutputWithContext(context.Background())
}

func (e SourceType) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return SourceType(e).ToSourceTypeOutputWithContext(ctx).ToSourceTypePtrOutputWithContext(ctx)
}

func (e SourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceTypeOutput struct{ *pulumi.OutputState }

func (SourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceType)(nil)).Elem()
}

func (o SourceTypeOutput) ToSourceTypeOutput() SourceTypeOutput {
	return o
}

func (o SourceTypeOutput) ToSourceTypeOutputWithContext(ctx context.Context) SourceTypeOutput {
	return o
}

func (o SourceTypeOutput) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return o.ToSourceTypePtrOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceType) *SourceType {
		return &v
	}).(SourceTypePtrOutput)
}

func (o SourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceTypePtrOutput struct{ *pulumi.OutputState }

func (SourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceType)(nil)).Elem()
}

func (o SourceTypePtrOutput) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return o
}

func (o SourceTypePtrOutput) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return o
}

func (o SourceTypePtrOutput) Elem() SourceTypeOutput {
	return o.ApplyT(func(v *SourceType) SourceType {
		if v != nil {
			return *v
		}
		var ret SourceType
		return ret
	}).(SourceTypeOutput)
}

func (o SourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SourceTypeInput is an input type that accepts values of the SourceType enum
// A concrete instance of `SourceTypeInput` can be one of the following:
//
//	SourceTypeResource
type SourceTypeInput interface {
	pulumi.Input

	ToSourceTypeOutput() SourceTypeOutput
	ToSourceTypeOutputWithContext(context.Context) SourceTypeOutput
}

var sourceTypePtrType = reflect.TypeOf((**SourceType)(nil)).Elem()

type SourceTypePtrInput interface {
	pulumi.Input

	ToSourceTypePtrOutput() SourceTypePtrOutput
	ToSourceTypePtrOutputWithContext(context.Context) SourceTypePtrOutput
}

type sourceTypePtr string

func SourceTypePtr(v string) SourceTypePtrInput {
	return (*sourceTypePtr)(&v)
}

func (*sourceTypePtr) ElementType() reflect.Type {
	return sourceTypePtrType
}

func (in *sourceTypePtr) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return pulumi.ToOutput(in).(SourceTypePtrOutput)
}

func (in *sourceTypePtr) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DestinationTypeOutput{})
	pulumi.RegisterOutputType(DestinationTypePtrOutput{})
	pulumi.RegisterOutputType(EmissionTypeOutput{})
	pulumi.RegisterOutputType(EmissionTypePtrOutput{})
	pulumi.RegisterOutputType(IngestionTypeOutput{})
	pulumi.RegisterOutputType(IngestionTypePtrOutput{})
	pulumi.RegisterOutputType(SourceTypeOutput{})
	pulumi.RegisterOutputType(SourceTypePtrOutput{})
}
