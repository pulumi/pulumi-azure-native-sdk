// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connectedcache

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Represents the high level Nodes needed to provision cache node resources
//
// Uses Azure REST API version 2023-05-01-preview. In version 2.x of the Azure Native provider, it used API version 2023-05-01-preview.
//
// Other available API versions: 2024-11-30-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native connectedcache [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type EnterpriseMccCacheNodesOperation struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties CacheNodePropertyResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEnterpriseMccCacheNodesOperation registers a new resource with the given unique name, arguments, and options.
func NewEnterpriseMccCacheNodesOperation(ctx *pulumi.Context,
	name string, args *EnterpriseMccCacheNodesOperationArgs, opts ...pulumi.ResourceOption) (*EnterpriseMccCacheNodesOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerResourceName == nil {
		return nil, errors.New("invalid value for required argument 'CustomerResourceName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:connectedcache/v20230501preview:EnterpriseMccCacheNodesOperation"),
		},
		{
			Type: pulumi.String("azure-native:connectedcache/v20241130preview:EnterpriseMccCacheNodesOperation"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource EnterpriseMccCacheNodesOperation
	err := ctx.RegisterResource("azure-native:connectedcache:EnterpriseMccCacheNodesOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnterpriseMccCacheNodesOperation gets an existing EnterpriseMccCacheNodesOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnterpriseMccCacheNodesOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnterpriseMccCacheNodesOperationState, opts ...pulumi.ResourceOption) (*EnterpriseMccCacheNodesOperation, error) {
	var resource EnterpriseMccCacheNodesOperation
	err := ctx.ReadResource("azure-native:connectedcache:EnterpriseMccCacheNodesOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnterpriseMccCacheNodesOperation resources.
type enterpriseMccCacheNodesOperationState struct {
}

type EnterpriseMccCacheNodesOperationState struct {
}

func (EnterpriseMccCacheNodesOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseMccCacheNodesOperationState)(nil)).Elem()
}

type enterpriseMccCacheNodesOperationArgs struct {
	// Name of the ConnectedCache resource
	CacheNodeResourceName *string `pulumi:"cacheNodeResourceName"`
	// Name of the Customer resource
	CustomerResourceName string `pulumi:"customerResourceName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The resource-specific properties for this resource.
	Properties *CacheNodeProperty `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a EnterpriseMccCacheNodesOperation resource.
type EnterpriseMccCacheNodesOperationArgs struct {
	// Name of the ConnectedCache resource
	CacheNodeResourceName pulumi.StringPtrInput
	// Name of the Customer resource
	CustomerResourceName pulumi.StringInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties CacheNodePropertyPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (EnterpriseMccCacheNodesOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enterpriseMccCacheNodesOperationArgs)(nil)).Elem()
}

type EnterpriseMccCacheNodesOperationInput interface {
	pulumi.Input

	ToEnterpriseMccCacheNodesOperationOutput() EnterpriseMccCacheNodesOperationOutput
	ToEnterpriseMccCacheNodesOperationOutputWithContext(ctx context.Context) EnterpriseMccCacheNodesOperationOutput
}

func (*EnterpriseMccCacheNodesOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseMccCacheNodesOperation)(nil)).Elem()
}

func (i *EnterpriseMccCacheNodesOperation) ToEnterpriseMccCacheNodesOperationOutput() EnterpriseMccCacheNodesOperationOutput {
	return i.ToEnterpriseMccCacheNodesOperationOutputWithContext(context.Background())
}

func (i *EnterpriseMccCacheNodesOperation) ToEnterpriseMccCacheNodesOperationOutputWithContext(ctx context.Context) EnterpriseMccCacheNodesOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseMccCacheNodesOperationOutput)
}

type EnterpriseMccCacheNodesOperationOutput struct{ *pulumi.OutputState }

func (EnterpriseMccCacheNodesOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseMccCacheNodesOperation)(nil)).Elem()
}

func (o EnterpriseMccCacheNodesOperationOutput) ToEnterpriseMccCacheNodesOperationOutput() EnterpriseMccCacheNodesOperationOutput {
	return o
}

func (o EnterpriseMccCacheNodesOperationOutput) ToEnterpriseMccCacheNodesOperationOutputWithContext(ctx context.Context) EnterpriseMccCacheNodesOperationOutput {
	return o
}

// The Azure API version of the resource.
func (o EnterpriseMccCacheNodesOperationOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o EnterpriseMccCacheNodesOperationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EnterpriseMccCacheNodesOperationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o EnterpriseMccCacheNodesOperationOutput) Properties() CacheNodePropertyResponseOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) CacheNodePropertyResponseOutput { return v.Properties }).(CacheNodePropertyResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EnterpriseMccCacheNodesOperationOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EnterpriseMccCacheNodesOperationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EnterpriseMccCacheNodesOperationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EnterpriseMccCacheNodesOperation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnterpriseMccCacheNodesOperationOutput{})
}
