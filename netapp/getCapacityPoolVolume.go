// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the details of the specified volume
//
// Uses Azure REST API version 2024-09-01.
//
// Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview, 2025-01-01, 2025-01-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func LookupCapacityPoolVolume(ctx *pulumi.Context, args *LookupCapacityPoolVolumeArgs, opts ...pulumi.InvokeOption) (*LookupCapacityPoolVolumeResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupCapacityPoolVolumeResult
	err := ctx.Invoke("azure-native:netapp:getCapacityPoolVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupCapacityPoolVolumeArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// The name of the capacity pool
	PoolName string `pulumi:"poolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The name of the volume
	VolumeName string `pulumi:"volumeName"`
}

// Volume resource
type LookupCapacityPoolVolumeResult struct {
	// Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
	ActualThroughputMibps float64 `pulumi:"actualThroughputMibps"`
	// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
	AvsDataStore *string `pulumi:"avsDataStore"`
	// The Azure API version of the resource.
	AzureApiVersion string `pulumi:"azureApiVersion"`
	// Resource identifier used to identify the Backup.
	BackupId *string `pulumi:"backupId"`
	// Unique Baremetal Tenant Identifier.
	BaremetalTenantId string `pulumi:"baremetalTenantId"`
	// Pool Resource Id used in case of creating a volume through volume group
	CapacityPoolResourceId *string `pulumi:"capacityPoolResourceId"`
	// When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
	CloneProgress int `pulumi:"cloneProgress"`
	// Specifies whether Cool Access(tiering) is enabled for the volume.
	CoolAccess *bool `pulumi:"coolAccess"`
	// coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
	//  Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
	//  OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
	//  Never - No client-driven data is pulled from cool tier to standard storage.
	CoolAccessRetrievalPolicy *string `pulumi:"coolAccessRetrievalPolicy"`
	// coolAccessTieringPolicy determines which cold data blocks are moved to cool tier. The possible values for this field are: Auto - Moves cold user data blocks in both the Snapshot copies and the active file system to the cool tier tier. This policy is the default. SnapshotOnly - Moves user data blocks of the Volume Snapshot copies that are not associated with the active file system to the cool tier.
	CoolAccessTieringPolicy *string `pulumi:"coolAccessTieringPolicy"`
	// Specifies the number of days after which data that is not accessed by clients will be tiered.
	CoolnessPeriod *int `pulumi:"coolnessPeriod"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken string `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection *VolumePropertiesResponseDataProtection `pulumi:"dataProtection"`
	// Data store resource unique identifier
	DataStoreResourceId []string `pulumi:"dataStoreResourceId"`
	// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
	DefaultGroupQuotaInKiBs *float64 `pulumi:"defaultGroupQuotaInKiBs"`
	// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
	DefaultUserQuotaInKiBs *float64 `pulumi:"defaultUserQuotaInKiBs"`
	// If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
	DeleteBaseSnapshot *bool `pulumi:"deleteBaseSnapshot"`
	// The effective value of the network features type available to the volume, or current effective state of update.
	EffectiveNetworkFeatures string `pulumi:"effectiveNetworkFeatures"`
	// Flag indicating whether subvolume operations are enabled on the volume
	EnableSubvolumes *string `pulumi:"enableSubvolumes"`
	// Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
	Encrypted bool `pulumi:"encrypted"`
	// Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
	EncryptionKeySource *string `pulumi:"encryptionKeySource"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag string `pulumi:"etag"`
	// Set of export policy rules
	ExportPolicy *VolumePropertiesResponseExportPolicy `pulumi:"exportPolicy"`
	// Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
	FileAccessLogs string `pulumi:"fileAccessLogs"`
	// Unique FileSystem Identifier.
	FileSystemId string `pulumi:"fileSystemId"`
	// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
	Id string `pulumi:"id"`
	// Specifies if default quota is enabled for the volume.
	IsDefaultQuotaEnabled *bool `pulumi:"isDefaultQuotaEnabled"`
	// Specifies whether volume is a Large Volume or Regular Volume.
	IsLargeVolume *bool `pulumi:"isLargeVolume"`
	// Restoring
	IsRestoring *bool `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
	KeyVaultPrivateEndpointResourceId *string `pulumi:"keyVaultPrivateEndpointResourceId"`
	// Specifies whether LDAP is enabled or not for a given NFS volume.
	LdapEnabled *bool `pulumi:"ldapEnabled"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
	MaximumNumberOfFiles float64 `pulumi:"maximumNumberOfFiles"`
	// List of mount targets
	MountTargets []MountTargetPropertiesResponse `pulumi:"mountTargets"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The original value of the network features type available to the volume at the time it was created.
	NetworkFeatures *string `pulumi:"networkFeatures"`
	// Network Sibling Set ID for the the group of volumes sharing networking resources.
	NetworkSiblingSetId string `pulumi:"networkSiblingSetId"`
	// Id of the snapshot or backup that the volume is restored from.
	OriginatingResourceId string `pulumi:"originatingResourceId"`
	// Application specific placement rules for the particular volume
	PlacementRules []PlacementKeyValuePairsResponse `pulumi:"placementRules"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
	ProvisionedAvailabilityZone string `pulumi:"provisionedAvailabilityZone"`
	// Azure lifecycle management
	ProvisioningState string `pulumi:"provisioningState"`
	// Proximity placement group associated with the volume
	ProximityPlacementGroup *string `pulumi:"proximityPlacementGroup"`
	// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
	SecurityStyle *string `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
	SmbAccessBasedEnumeration *string `pulumi:"smbAccessBasedEnumeration"`
	// Enables continuously available share property for smb volume. Only applicable for SMB volume
	SmbContinuouslyAvailable *bool `pulumi:"smbContinuouslyAvailable"`
	// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
	SmbEncryption *bool `pulumi:"smbEncryption"`
	// Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
	SmbNonBrowsable *string `pulumi:"smbNonBrowsable"`
	// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
	SnapshotDirectoryVisible *bool `pulumi:"snapshotDirectoryVisible"`
	// Resource identifier used to identify the Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// Provides storage to network proximity information for the volume.
	StorageToNetworkProximity string `pulumi:"storageToNetworkProximity"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId string `pulumi:"subnetId"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// T2 network information
	T2Network string `pulumi:"t2Network"`
	// Resource tags.
	Tags            map[string]string `pulumi:"tags"`
	ThroughputMibps *float64          `pulumi:"throughputMibps"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
	// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
	UnixPermissions *string `pulumi:"unixPermissions"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. For regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes, valid values are in the range 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values expressed in bytes as multiples of 1 GiB.
	UsageThreshold float64 `pulumi:"usageThreshold"`
	// Volume Group Name
	VolumeGroupName string `pulumi:"volumeGroupName"`
	// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
	VolumeSpecName *string `pulumi:"volumeSpecName"`
	// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
	VolumeType *string `pulumi:"volumeType"`
	// Availability Zone
	Zones []string `pulumi:"zones"`
}

// Defaults sets the appropriate defaults for LookupCapacityPoolVolumeResult
func (val *LookupCapacityPoolVolumeResult) Defaults() *LookupCapacityPoolVolumeResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AvsDataStore == nil {
		avsDataStore_ := "Disabled"
		tmp.AvsDataStore = &avsDataStore_
	}
	if tmp.CoolAccess == nil {
		coolAccess_ := false
		tmp.CoolAccess = &coolAccess_
	}
	if tmp.DefaultGroupQuotaInKiBs == nil {
		defaultGroupQuotaInKiBs_ := 0.0
		tmp.DefaultGroupQuotaInKiBs = &defaultGroupQuotaInKiBs_
	}
	if tmp.DefaultUserQuotaInKiBs == nil {
		defaultUserQuotaInKiBs_ := 0.0
		tmp.DefaultUserQuotaInKiBs = &defaultUserQuotaInKiBs_
	}
	if tmp.EnableSubvolumes == nil {
		enableSubvolumes_ := "Disabled"
		tmp.EnableSubvolumes = &enableSubvolumes_
	}
	if tmp.EncryptionKeySource == nil {
		encryptionKeySource_ := "Microsoft.NetApp"
		tmp.EncryptionKeySource = &encryptionKeySource_
	}
	if utilities.IsZero(tmp.FileAccessLogs) {
		tmp.FileAccessLogs = "Disabled"
	}
	if tmp.IsDefaultQuotaEnabled == nil {
		isDefaultQuotaEnabled_ := false
		tmp.IsDefaultQuotaEnabled = &isDefaultQuotaEnabled_
	}
	if tmp.IsLargeVolume == nil {
		isLargeVolume_ := false
		tmp.IsLargeVolume = &isLargeVolume_
	}
	if tmp.KerberosEnabled == nil {
		kerberosEnabled_ := false
		tmp.KerberosEnabled = &kerberosEnabled_
	}
	if tmp.LdapEnabled == nil {
		ldapEnabled_ := false
		tmp.LdapEnabled = &ldapEnabled_
	}
	if tmp.SecurityStyle == nil {
		securityStyle_ := "unix"
		tmp.SecurityStyle = &securityStyle_
	}
	if tmp.SmbContinuouslyAvailable == nil {
		smbContinuouslyAvailable_ := false
		tmp.SmbContinuouslyAvailable = &smbContinuouslyAvailable_
	}
	if tmp.SmbEncryption == nil {
		smbEncryption_ := false
		tmp.SmbEncryption = &smbEncryption_
	}
	if tmp.SnapshotDirectoryVisible == nil {
		snapshotDirectoryVisible_ := true
		tmp.SnapshotDirectoryVisible = &snapshotDirectoryVisible_
	}
	if utilities.IsZero(tmp.UsageThreshold) {
		tmp.UsageThreshold = 107374182400.0
	}
	return &tmp
}
func LookupCapacityPoolVolumeOutput(ctx *pulumi.Context, args LookupCapacityPoolVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupCapacityPoolVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCapacityPoolVolumeResultOutput, error) {
			args := v.(LookupCapacityPoolVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:netapp:getCapacityPoolVolume", args, LookupCapacityPoolVolumeResultOutput{}, options).(LookupCapacityPoolVolumeResultOutput), nil
		}).(LookupCapacityPoolVolumeResultOutput)
}

type LookupCapacityPoolVolumeOutputArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the capacity pool
	PoolName pulumi.StringInput `pulumi:"poolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The name of the volume
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
}

func (LookupCapacityPoolVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityPoolVolumeArgs)(nil)).Elem()
}

// Volume resource
type LookupCapacityPoolVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupCapacityPoolVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCapacityPoolVolumeResult)(nil)).Elem()
}

func (o LookupCapacityPoolVolumeResultOutput) ToLookupCapacityPoolVolumeResultOutput() LookupCapacityPoolVolumeResultOutput {
	return o
}

func (o LookupCapacityPoolVolumeResultOutput) ToLookupCapacityPoolVolumeResultOutputWithContext(ctx context.Context) LookupCapacityPoolVolumeResultOutput {
	return o
}

// Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel
func (o LookupCapacityPoolVolumeResultOutput) ActualThroughputMibps() pulumi.Float64Output {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) float64 { return v.ActualThroughputMibps }).(pulumi.Float64Output)
}

// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
func (o LookupCapacityPoolVolumeResultOutput) AvsDataStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.AvsDataStore }).(pulumi.StringPtrOutput)
}

// The Azure API version of the resource.
func (o LookupCapacityPoolVolumeResultOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// Resource identifier used to identify the Backup.
func (o LookupCapacityPoolVolumeResultOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Unique Baremetal Tenant Identifier.
func (o LookupCapacityPoolVolumeResultOutput) BaremetalTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.BaremetalTenantId }).(pulumi.StringOutput)
}

// Pool Resource Id used in case of creating a volume through volume group
func (o LookupCapacityPoolVolumeResultOutput) CapacityPoolResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.CapacityPoolResourceId }).(pulumi.StringPtrOutput)
}

// When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
func (o LookupCapacityPoolVolumeResultOutput) CloneProgress() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) int { return v.CloneProgress }).(pulumi.IntOutput)
}

// Specifies whether Cool Access(tiering) is enabled for the volume.
func (o LookupCapacityPoolVolumeResultOutput) CoolAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.CoolAccess }).(pulumi.BoolPtrOutput)
}

// coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
//
//	Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
//	OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
//	Never - No client-driven data is pulled from cool tier to standard storage.
func (o LookupCapacityPoolVolumeResultOutput) CoolAccessRetrievalPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.CoolAccessRetrievalPolicy }).(pulumi.StringPtrOutput)
}

// coolAccessTieringPolicy determines which cold data blocks are moved to cool tier. The possible values for this field are: Auto - Moves cold user data blocks in both the Snapshot copies and the active file system to the cool tier tier. This policy is the default. SnapshotOnly - Moves user data blocks of the Volume Snapshot copies that are not associated with the active file system to the cool tier.
func (o LookupCapacityPoolVolumeResultOutput) CoolAccessTieringPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.CoolAccessTieringPolicy }).(pulumi.StringPtrOutput)
}

// Specifies the number of days after which data that is not accessed by clients will be tiered.
func (o LookupCapacityPoolVolumeResultOutput) CoolnessPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *int { return v.CoolnessPeriod }).(pulumi.IntPtrOutput)
}

// A unique file path for the volume. Used when creating mount targets
func (o LookupCapacityPoolVolumeResultOutput) CreationToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.CreationToken }).(pulumi.StringOutput)
}

// DataProtection type volumes include an object containing details of the replication
func (o LookupCapacityPoolVolumeResultOutput) DataProtection() VolumePropertiesResponseDataProtectionPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *VolumePropertiesResponseDataProtection {
		return v.DataProtection
	}).(VolumePropertiesResponseDataProtectionPtrOutput)
}

// Data store resource unique identifier
func (o LookupCapacityPoolVolumeResultOutput) DataStoreResourceId() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) []string { return v.DataStoreResourceId }).(pulumi.StringArrayOutput)
}

// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
func (o LookupCapacityPoolVolumeResultOutput) DefaultGroupQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *float64 { return v.DefaultGroupQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
func (o LookupCapacityPoolVolumeResultOutput) DefaultUserQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *float64 { return v.DefaultUserQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false
func (o LookupCapacityPoolVolumeResultOutput) DeleteBaseSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.DeleteBaseSnapshot }).(pulumi.BoolPtrOutput)
}

// The effective value of the network features type available to the volume, or current effective state of update.
func (o LookupCapacityPoolVolumeResultOutput) EffectiveNetworkFeatures() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.EffectiveNetworkFeatures }).(pulumi.StringOutput)
}

// Flag indicating whether subvolume operations are enabled on the volume
func (o LookupCapacityPoolVolumeResultOutput) EnableSubvolumes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.EnableSubvolumes }).(pulumi.StringPtrOutput)
}

// Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01.
func (o LookupCapacityPoolVolumeResultOutput) Encrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) bool { return v.Encrypted }).(pulumi.BoolOutput)
}

// Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'
func (o LookupCapacityPoolVolumeResultOutput) EncryptionKeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.EncryptionKeySource }).(pulumi.StringPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o LookupCapacityPoolVolumeResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Set of export policy rules
func (o LookupCapacityPoolVolumeResultOutput) ExportPolicy() VolumePropertiesResponseExportPolicyPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *VolumePropertiesResponseExportPolicy { return v.ExportPolicy }).(VolumePropertiesResponseExportPolicyPtrOutput)
}

// Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume.
func (o LookupCapacityPoolVolumeResultOutput) FileAccessLogs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.FileAccessLogs }).(pulumi.StringOutput)
}

// Unique FileSystem Identifier.
func (o LookupCapacityPoolVolumeResultOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
func (o LookupCapacityPoolVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies if default quota is enabled for the volume.
func (o LookupCapacityPoolVolumeResultOutput) IsDefaultQuotaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.IsDefaultQuotaEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether volume is a Large Volume or Regular Volume.
func (o LookupCapacityPoolVolumeResultOutput) IsLargeVolume() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.IsLargeVolume }).(pulumi.BoolPtrOutput)
}

// Restoring
func (o LookupCapacityPoolVolumeResultOutput) IsRestoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.IsRestoring }).(pulumi.BoolPtrOutput)
}

// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
func (o LookupCapacityPoolVolumeResultOutput) KerberosEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.KerberosEnabled }).(pulumi.BoolPtrOutput)
}

// The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'.
func (o LookupCapacityPoolVolumeResultOutput) KeyVaultPrivateEndpointResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.KeyVaultPrivateEndpointResourceId }).(pulumi.StringPtrOutput)
}

// Specifies whether LDAP is enabled or not for a given NFS volume.
func (o LookupCapacityPoolVolumeResultOutput) LdapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.LdapEnabled }).(pulumi.BoolPtrOutput)
}

// The geo-location where the resource lives
func (o LookupCapacityPoolVolumeResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.Location }).(pulumi.StringOutput)
}

// Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
func (o LookupCapacityPoolVolumeResultOutput) MaximumNumberOfFiles() pulumi.Float64Output {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) float64 { return v.MaximumNumberOfFiles }).(pulumi.Float64Output)
}

// List of mount targets
func (o LookupCapacityPoolVolumeResultOutput) MountTargets() MountTargetPropertiesResponseArrayOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) []MountTargetPropertiesResponse { return v.MountTargets }).(MountTargetPropertiesResponseArrayOutput)
}

// The name of the resource
func (o LookupCapacityPoolVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

// The original value of the network features type available to the volume at the time it was created.
func (o LookupCapacityPoolVolumeResultOutput) NetworkFeatures() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.NetworkFeatures }).(pulumi.StringPtrOutput)
}

// Network Sibling Set ID for the the group of volumes sharing networking resources.
func (o LookupCapacityPoolVolumeResultOutput) NetworkSiblingSetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.NetworkSiblingSetId }).(pulumi.StringOutput)
}

// Id of the snapshot or backup that the volume is restored from.
func (o LookupCapacityPoolVolumeResultOutput) OriginatingResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.OriginatingResourceId }).(pulumi.StringOutput)
}

// Application specific placement rules for the particular volume
func (o LookupCapacityPoolVolumeResultOutput) PlacementRules() PlacementKeyValuePairsResponseArrayOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) []PlacementKeyValuePairsResponse { return v.PlacementRules }).(PlacementKeyValuePairsResponseArrayOutput)
}

// Set of protocol types, default NFSv3, CIFS for SMB protocol
func (o LookupCapacityPoolVolumeResultOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides.
func (o LookupCapacityPoolVolumeResultOutput) ProvisionedAvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.ProvisionedAvailabilityZone }).(pulumi.StringOutput)
}

// Azure lifecycle management
func (o LookupCapacityPoolVolumeResultOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Proximity placement group associated with the volume
func (o LookupCapacityPoolVolumeResultOutput) ProximityPlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.ProximityPlacementGroup }).(pulumi.StringPtrOutput)
}

// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
func (o LookupCapacityPoolVolumeResultOutput) SecurityStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.SecurityStyle }).(pulumi.StringPtrOutput)
}

// The service level of the file system
func (o LookupCapacityPoolVolumeResultOutput) ServiceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.ServiceLevel }).(pulumi.StringPtrOutput)
}

// Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume
func (o LookupCapacityPoolVolumeResultOutput) SmbAccessBasedEnumeration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.SmbAccessBasedEnumeration }).(pulumi.StringPtrOutput)
}

// Enables continuously available share property for smb volume. Only applicable for SMB volume
func (o LookupCapacityPoolVolumeResultOutput) SmbContinuouslyAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.SmbContinuouslyAvailable }).(pulumi.BoolPtrOutput)
}

// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
func (o LookupCapacityPoolVolumeResultOutput) SmbEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.SmbEncryption }).(pulumi.BoolPtrOutput)
}

// Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume
func (o LookupCapacityPoolVolumeResultOutput) SmbNonBrowsable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.SmbNonBrowsable }).(pulumi.StringPtrOutput)
}

// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true).
func (o LookupCapacityPoolVolumeResultOutput) SnapshotDirectoryVisible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *bool { return v.SnapshotDirectoryVisible }).(pulumi.BoolPtrOutput)
}

// Resource identifier used to identify the Snapshot.
func (o LookupCapacityPoolVolumeResultOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Provides storage to network proximity information for the volume.
func (o LookupCapacityPoolVolumeResultOutput) StorageToNetworkProximity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.StorageToNetworkProximity }).(pulumi.StringOutput)
}

// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
func (o LookupCapacityPoolVolumeResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o LookupCapacityPoolVolumeResultOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// T2 network information
func (o LookupCapacityPoolVolumeResultOutput) T2Network() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.T2Network }).(pulumi.StringOutput)
}

// Resource tags.
func (o LookupCapacityPoolVolumeResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupCapacityPoolVolumeResultOutput) ThroughputMibps() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *float64 { return v.ThroughputMibps }).(pulumi.Float64PtrOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o LookupCapacityPoolVolumeResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.Type }).(pulumi.StringOutput)
}

// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
func (o LookupCapacityPoolVolumeResultOutput) UnixPermissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.UnixPermissions }).(pulumi.StringPtrOutput)
}

// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. For regular volumes, valid values are in the range 50GiB to 100TiB. For large volumes, valid values are in the range 100TiB to 500TiB, and on an exceptional basis, from to 2400GiB to 2400TiB. Values expressed in bytes as multiples of 1 GiB.
func (o LookupCapacityPoolVolumeResultOutput) UsageThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) float64 { return v.UsageThreshold }).(pulumi.Float64Output)
}

// Volume Group Name
func (o LookupCapacityPoolVolumeResultOutput) VolumeGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) string { return v.VolumeGroupName }).(pulumi.StringOutput)
}

// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
func (o LookupCapacityPoolVolumeResultOutput) VolumeSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.VolumeSpecName }).(pulumi.StringPtrOutput)
}

// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
func (o LookupCapacityPoolVolumeResultOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

// Availability Zone
func (o LookupCapacityPoolVolumeResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCapacityPoolVolumeResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCapacityPoolVolumeResultOutput{})
}
