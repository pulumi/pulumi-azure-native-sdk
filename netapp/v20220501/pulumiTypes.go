// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220501

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Encryption settings
type AccountEncryption struct {
	// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
	Identity *EncryptionIdentity `pulumi:"identity"`
	// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
	KeySource *string `pulumi:"keySource"`
	// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
	KeyVaultProperties *KeyVaultProperties `pulumi:"keyVaultProperties"`
}

// Defaults sets the appropriate defaults for AccountEncryption
func (val *AccountEncryption) Defaults() *AccountEncryption {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeySource == nil {
		keySource_ := "Microsoft.NetApp"
		tmp.KeySource = &keySource_
	}
	return &tmp
}

// AccountEncryptionInput is an input type that accepts AccountEncryptionArgs and AccountEncryptionOutput values.
// You can construct a concrete instance of `AccountEncryptionInput` via:
//
//	AccountEncryptionArgs{...}
type AccountEncryptionInput interface {
	pulumi.Input

	ToAccountEncryptionOutput() AccountEncryptionOutput
	ToAccountEncryptionOutputWithContext(context.Context) AccountEncryptionOutput
}

// Encryption settings
type AccountEncryptionArgs struct {
	// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
	Identity EncryptionIdentityPtrInput `pulumi:"identity"`
	// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
	KeySource pulumi.StringPtrInput `pulumi:"keySource"`
	// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
	KeyVaultProperties KeyVaultPropertiesPtrInput `pulumi:"keyVaultProperties"`
}

// Defaults sets the appropriate defaults for AccountEncryptionArgs
func (val *AccountEncryptionArgs) Defaults() *AccountEncryptionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeySource == nil {
		tmp.KeySource = pulumi.StringPtr("Microsoft.NetApp")
	}
	return &tmp
}
func (AccountEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return i.ToAccountEncryptionOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput)
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i AccountEncryptionArgs) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionOutput).ToAccountEncryptionPtrOutputWithContext(ctx)
}

// AccountEncryptionPtrInput is an input type that accepts AccountEncryptionArgs, AccountEncryptionPtr and AccountEncryptionPtrOutput values.
// You can construct a concrete instance of `AccountEncryptionPtrInput` via:
//
//	        AccountEncryptionArgs{...}
//
//	or:
//
//	        nil
type AccountEncryptionPtrInput interface {
	pulumi.Input

	ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput
	ToAccountEncryptionPtrOutputWithContext(context.Context) AccountEncryptionPtrOutput
}

type accountEncryptionPtrType AccountEncryptionArgs

func AccountEncryptionPtr(v *AccountEncryptionArgs) AccountEncryptionPtrInput {
	return (*accountEncryptionPtrType)(v)
}

func (*accountEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return i.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (i *accountEncryptionPtrType) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountEncryptionPtrOutput)
}

// Encryption settings
type AccountEncryptionOutput struct{ *pulumi.OutputState }

func (AccountEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutput() AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionOutputWithContext(ctx context.Context) AccountEncryptionOutput {
	return o
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o.ToAccountEncryptionPtrOutputWithContext(context.Background())
}

func (o AccountEncryptionOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AccountEncryption) *AccountEncryption {
		return &v
	}).(AccountEncryptionPtrOutput)
}

// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionOutput) Identity() EncryptionIdentityPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *EncryptionIdentity { return v.Identity }).(EncryptionIdentityPtrOutput)
}

// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
func (o AccountEncryptionOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *string { return v.KeySource }).(pulumi.StringPtrOutput)
}

// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v AccountEncryption) *KeyVaultProperties { return v.KeyVaultProperties }).(KeyVaultPropertiesPtrOutput)
}

type AccountEncryptionPtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryption)(nil)).Elem()
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutput() AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) ToAccountEncryptionPtrOutputWithContext(ctx context.Context) AccountEncryptionPtrOutput {
	return o
}

func (o AccountEncryptionPtrOutput) Elem() AccountEncryptionOutput {
	return o.ApplyT(func(v *AccountEncryption) AccountEncryption {
		if v != nil {
			return *v
		}
		var ret AccountEncryption
		return ret
	}).(AccountEncryptionOutput)
}

// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionPtrOutput) Identity() EncryptionIdentityPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *EncryptionIdentity {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EncryptionIdentityPtrOutput)
}

// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
func (o AccountEncryptionPtrOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *string {
		if v == nil {
			return nil
		}
		return v.KeySource
	}).(pulumi.StringPtrOutput)
}

// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionPtrOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *AccountEncryption) *KeyVaultProperties {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesPtrOutput)
}

// Encryption settings
type AccountEncryptionResponse struct {
	// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
	Identity *EncryptionIdentityResponse `pulumi:"identity"`
	// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
	KeySource *string `pulumi:"keySource"`
	// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
	KeyVaultProperties *KeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
}

// Defaults sets the appropriate defaults for AccountEncryptionResponse
func (val *AccountEncryptionResponse) Defaults() *AccountEncryptionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.KeySource == nil {
		keySource_ := "Microsoft.NetApp"
		tmp.KeySource = &keySource_
	}
	return &tmp
}

// Encryption settings
type AccountEncryptionResponseOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutput() AccountEncryptionResponseOutput {
	return o
}

func (o AccountEncryptionResponseOutput) ToAccountEncryptionResponseOutputWithContext(ctx context.Context) AccountEncryptionResponseOutput {
	return o
}

// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionResponseOutput) Identity() EncryptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *EncryptionIdentityResponse { return v.Identity }).(EncryptionIdentityResponsePtrOutput)
}

// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
func (o AccountEncryptionResponseOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *string { return v.KeySource }).(pulumi.StringPtrOutput)
}

// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionResponseOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v AccountEncryptionResponse) *KeyVaultPropertiesResponse { return v.KeyVaultProperties }).(KeyVaultPropertiesResponsePtrOutput)
}

type AccountEncryptionResponsePtrOutput struct{ *pulumi.OutputState }

func (AccountEncryptionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountEncryptionResponse)(nil)).Elem()
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutput() AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) ToAccountEncryptionResponsePtrOutputWithContext(ctx context.Context) AccountEncryptionResponsePtrOutput {
	return o
}

func (o AccountEncryptionResponsePtrOutput) Elem() AccountEncryptionResponseOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) AccountEncryptionResponse {
		if v != nil {
			return *v
		}
		var ret AccountEncryptionResponse
		return ret
	}).(AccountEncryptionResponseOutput)
}

// Identity used to authenticate to KeyVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionResponsePtrOutput) Identity() EncryptionIdentityResponsePtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *EncryptionIdentityResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(EncryptionIdentityResponsePtrOutput)
}

// The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.NetApp, Microsoft.KeyVault
func (o AccountEncryptionResponsePtrOutput) KeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *string {
		if v == nil {
			return nil
		}
		return v.KeySource
	}).(pulumi.StringPtrOutput)
}

// Properties provided by KeVault. Applicable if keySource is 'Microsoft.KeyVault'.
func (o AccountEncryptionResponsePtrOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *AccountEncryptionResponse) *KeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.KeyVaultProperties
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// Active Directory
type ActiveDirectory struct {
	// Id of the Active Directory
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName *string `pulumi:"adName"`
	// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
	Administrators []string `pulumi:"administrators"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption *bool `pulumi:"aesEncryption"`
	//  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
	AllowLocalNfsUsersWithLdap *bool `pulumi:"allowLocalNfsUsersWithLdap"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators []string `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns *string `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain *string `pulumi:"domain"`
	// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDCConnections *bool `pulumi:"encryptDCConnections"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP *string `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be secured via TLS.
	LdapOverTLS *bool `pulumi:"ldapOverTLS"`
	// LDAP Search scope options
	LdapSearchScope *LdapSearchScopeOpt `pulumi:"ldapSearchScope"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password *string `pulumi:"password"`
	// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
	SecurityOperators []string `pulumi:"securityOperators"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate *string `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site *string `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName *string `pulumi:"smbServerName"`
	// A domain user account with permission to create machine accounts
	Username *string `pulumi:"username"`
}

// Defaults sets the appropriate defaults for ActiveDirectory
func (val *ActiveDirectory) Defaults() *ActiveDirectory {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OrganizationalUnit == nil {
		organizationalUnit_ := "CN=Computers"
		tmp.OrganizationalUnit = &organizationalUnit_
	}
	return &tmp
}

// ActiveDirectoryInput is an input type that accepts ActiveDirectoryArgs and ActiveDirectoryOutput values.
// You can construct a concrete instance of `ActiveDirectoryInput` via:
//
//	ActiveDirectoryArgs{...}
type ActiveDirectoryInput interface {
	pulumi.Input

	ToActiveDirectoryOutput() ActiveDirectoryOutput
	ToActiveDirectoryOutputWithContext(context.Context) ActiveDirectoryOutput
}

// Active Directory
type ActiveDirectoryArgs struct {
	// Id of the Active Directory
	ActiveDirectoryId pulumi.StringPtrInput `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName pulumi.StringPtrInput `pulumi:"adName"`
	// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
	Administrators pulumi.StringArrayInput `pulumi:"administrators"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption pulumi.BoolPtrInput `pulumi:"aesEncryption"`
	//  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
	AllowLocalNfsUsersWithLdap pulumi.BoolPtrInput `pulumi:"allowLocalNfsUsersWithLdap"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators pulumi.StringArrayInput `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDCConnections pulumi.BoolPtrInput `pulumi:"encryptDCConnections"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP pulumi.StringPtrInput `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be secured via TLS.
	LdapOverTLS pulumi.BoolPtrInput `pulumi:"ldapOverTLS"`
	// LDAP Search scope options
	LdapSearchScope LdapSearchScopeOptPtrInput `pulumi:"ldapSearchScope"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning pulumi.BoolPtrInput `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit pulumi.StringPtrInput `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
	SecurityOperators pulumi.StringArrayInput `pulumi:"securityOperators"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate pulumi.StringPtrInput `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site pulumi.StringPtrInput `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName pulumi.StringPtrInput `pulumi:"smbServerName"`
	// A domain user account with permission to create machine accounts
	Username pulumi.StringPtrInput `pulumi:"username"`
}

// Defaults sets the appropriate defaults for ActiveDirectoryArgs
func (val *ActiveDirectoryArgs) Defaults() *ActiveDirectoryArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OrganizationalUnit == nil {
		tmp.OrganizationalUnit = pulumi.StringPtr("CN=Computers")
	}
	return &tmp
}
func (ActiveDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryArgs) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return i.ToActiveDirectoryOutputWithContext(context.Background())
}

func (i ActiveDirectoryArgs) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryOutput)
}

// ActiveDirectoryArrayInput is an input type that accepts ActiveDirectoryArray and ActiveDirectoryArrayOutput values.
// You can construct a concrete instance of `ActiveDirectoryArrayInput` via:
//
//	ActiveDirectoryArray{ ActiveDirectoryArgs{...} }
type ActiveDirectoryArrayInput interface {
	pulumi.Input

	ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput
	ToActiveDirectoryArrayOutputWithContext(context.Context) ActiveDirectoryArrayOutput
}

type ActiveDirectoryArray []ActiveDirectoryInput

func (ActiveDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectory)(nil)).Elem()
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return i.ToActiveDirectoryArrayOutputWithContext(context.Background())
}

func (i ActiveDirectoryArray) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActiveDirectoryArrayOutput)
}

// Active Directory
type ActiveDirectoryOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutput() ActiveDirectoryOutput {
	return o
}

func (o ActiveDirectoryOutput) ToActiveDirectoryOutputWithContext(ctx context.Context) ActiveDirectoryOutput {
	return o
}

// Id of the Active Directory
func (o ActiveDirectoryOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
func (o ActiveDirectoryOutput) AdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.AdName }).(pulumi.StringPtrOutput)
}

// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectory) []string { return v.Administrators }).(pulumi.StringArrayOutput)
}

// If enabled, AES encryption will be enabled for SMB communication.
func (o ActiveDirectoryOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
func (o ActiveDirectoryOutput) AllowLocalNfsUsersWithLdap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.AllowLocalNfsUsersWithLdap }).(pulumi.BoolPtrOutput)
}

// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectory) []string { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
func (o ActiveDirectoryOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// Name of the Active Directory domain
func (o ActiveDirectoryOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
func (o ActiveDirectoryOutput) EncryptDCConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.EncryptDCConnections }).(pulumi.BoolPtrOutput)
}

// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
func (o ActiveDirectoryOutput) KdcIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.KdcIP }).(pulumi.StringPtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be secured via TLS.
func (o ActiveDirectoryOutput) LdapOverTLS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.LdapOverTLS }).(pulumi.BoolPtrOutput)
}

// LDAP Search scope options
func (o ActiveDirectoryOutput) LdapSearchScope() LdapSearchScopeOptPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *LdapSearchScopeOpt { return v.LdapSearchScope }).(LdapSearchScopeOptPtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o ActiveDirectoryOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *bool { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// The Organizational Unit (OU) within the Windows Active Directory
func (o ActiveDirectoryOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// Plain text password of Active Directory domain administrator, value is masked in the response
func (o ActiveDirectoryOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
func (o ActiveDirectoryOutput) SecurityOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectory) []string { return v.SecurityOperators }).(pulumi.StringArrayOutput)
}

// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
func (o ActiveDirectoryOutput) ServerRootCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.ServerRootCACertificate }).(pulumi.StringPtrOutput)
}

// The Active Directory site the service will limit Domain Controller discovery to
func (o ActiveDirectoryOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Site }).(pulumi.StringPtrOutput)
}

// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
func (o ActiveDirectoryOutput) SmbServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.SmbServerName }).(pulumi.StringPtrOutput)
}

// A domain user account with permission to create machine accounts
func (o ActiveDirectoryOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectory) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectory)(nil)).Elem()
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutput() ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) ToActiveDirectoryArrayOutputWithContext(ctx context.Context) ActiveDirectoryArrayOutput {
	return o
}

func (o ActiveDirectoryArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectory {
		return vs[0].([]ActiveDirectory)[vs[1].(int)]
	}).(ActiveDirectoryOutput)
}

// Active Directory
type ActiveDirectoryResponse struct {
	// Id of the Active Directory
	ActiveDirectoryId *string `pulumi:"activeDirectoryId"`
	// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
	AdName *string `pulumi:"adName"`
	// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
	Administrators []string `pulumi:"administrators"`
	// If enabled, AES encryption will be enabled for SMB communication.
	AesEncryption *bool `pulumi:"aesEncryption"`
	//  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
	AllowLocalNfsUsersWithLdap *bool `pulumi:"allowLocalNfsUsersWithLdap"`
	// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
	BackupOperators []string `pulumi:"backupOperators"`
	// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
	Dns *string `pulumi:"dns"`
	// Name of the Active Directory domain
	Domain *string `pulumi:"domain"`
	// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
	EncryptDCConnections *bool `pulumi:"encryptDCConnections"`
	// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
	KdcIP *string `pulumi:"kdcIP"`
	// Specifies whether or not the LDAP traffic needs to be secured via TLS.
	LdapOverTLS *bool `pulumi:"ldapOverTLS"`
	// LDAP Search scope options
	LdapSearchScope *LdapSearchScopeOptResponse `pulumi:"ldapSearchScope"`
	// Specifies whether or not the LDAP traffic needs to be signed.
	LdapSigning *bool `pulumi:"ldapSigning"`
	// The Organizational Unit (OU) within the Windows Active Directory
	OrganizationalUnit *string `pulumi:"organizationalUnit"`
	// Plain text password of Active Directory domain administrator, value is masked in the response
	Password *string `pulumi:"password"`
	// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
	SecurityOperators []string `pulumi:"securityOperators"`
	// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
	ServerRootCACertificate *string `pulumi:"serverRootCACertificate"`
	// The Active Directory site the service will limit Domain Controller discovery to
	Site *string `pulumi:"site"`
	// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
	SmbServerName *string `pulumi:"smbServerName"`
	// Status of the Active Directory
	Status string `pulumi:"status"`
	// Any details in regards to the Status of the Active Directory
	StatusDetails string `pulumi:"statusDetails"`
	// A domain user account with permission to create machine accounts
	Username *string `pulumi:"username"`
}

// Defaults sets the appropriate defaults for ActiveDirectoryResponse
func (val *ActiveDirectoryResponse) Defaults() *ActiveDirectoryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.OrganizationalUnit == nil {
		organizationalUnit_ := "CN=Computers"
		tmp.OrganizationalUnit = &organizationalUnit_
	}
	return &tmp
}

// Active Directory
type ActiveDirectoryResponseOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActiveDirectoryResponse)(nil)).Elem()
}

func (o ActiveDirectoryResponseOutput) ToActiveDirectoryResponseOutput() ActiveDirectoryResponseOutput {
	return o
}

func (o ActiveDirectoryResponseOutput) ToActiveDirectoryResponseOutputWithContext(ctx context.Context) ActiveDirectoryResponseOutput {
	return o
}

// Id of the Active Directory
func (o ActiveDirectoryResponseOutput) ActiveDirectoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.ActiveDirectoryId }).(pulumi.StringPtrOutput)
}

// Name of the active directory machine. This optional parameter is used only while creating kerberos volume
func (o ActiveDirectoryResponseOutput) AdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.AdName }).(pulumi.StringPtrOutput)
}

// Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryResponseOutput) Administrators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) []string { return v.Administrators }).(pulumi.StringArrayOutput)
}

// If enabled, AES encryption will be enabled for SMB communication.
func (o ActiveDirectoryResponseOutput) AesEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.AesEncryption }).(pulumi.BoolPtrOutput)
}

// If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
func (o ActiveDirectoryResponseOutput) AllowLocalNfsUsersWithLdap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.AllowLocalNfsUsersWithLdap }).(pulumi.BoolPtrOutput)
}

// Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
func (o ActiveDirectoryResponseOutput) BackupOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) []string { return v.BackupOperators }).(pulumi.StringArrayOutput)
}

// Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
func (o ActiveDirectoryResponseOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// Name of the Active Directory domain
func (o ActiveDirectoryResponseOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted.
func (o ActiveDirectoryResponseOutput) EncryptDCConnections() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.EncryptDCConnections }).(pulumi.BoolPtrOutput)
}

// kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
func (o ActiveDirectoryResponseOutput) KdcIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.KdcIP }).(pulumi.StringPtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be secured via TLS.
func (o ActiveDirectoryResponseOutput) LdapOverTLS() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.LdapOverTLS }).(pulumi.BoolPtrOutput)
}

// LDAP Search scope options
func (o ActiveDirectoryResponseOutput) LdapSearchScope() LdapSearchScopeOptResponsePtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *LdapSearchScopeOptResponse { return v.LdapSearchScope }).(LdapSearchScopeOptResponsePtrOutput)
}

// Specifies whether or not the LDAP traffic needs to be signed.
func (o ActiveDirectoryResponseOutput) LdapSigning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *bool { return v.LdapSigning }).(pulumi.BoolPtrOutput)
}

// The Organizational Unit (OU) within the Windows Active Directory
func (o ActiveDirectoryResponseOutput) OrganizationalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.OrganizationalUnit }).(pulumi.StringPtrOutput)
}

// Plain text password of Active Directory domain administrator, value is masked in the response
func (o ActiveDirectoryResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
func (o ActiveDirectoryResponseOutput) SecurityOperators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) []string { return v.SecurityOperators }).(pulumi.StringArrayOutput)
}

// When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
func (o ActiveDirectoryResponseOutput) ServerRootCACertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.ServerRootCACertificate }).(pulumi.StringPtrOutput)
}

// The Active Directory site the service will limit Domain Controller discovery to
func (o ActiveDirectoryResponseOutput) Site() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Site }).(pulumi.StringPtrOutput)
}

// NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
func (o ActiveDirectoryResponseOutput) SmbServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.SmbServerName }).(pulumi.StringPtrOutput)
}

// Status of the Active Directory
func (o ActiveDirectoryResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Any details in regards to the Status of the Active Directory
func (o ActiveDirectoryResponseOutput) StatusDetails() pulumi.StringOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) string { return v.StatusDetails }).(pulumi.StringOutput)
}

// A domain user account with permission to create machine accounts
func (o ActiveDirectoryResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActiveDirectoryResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ActiveDirectoryResponseArrayOutput struct{ *pulumi.OutputState }

func (ActiveDirectoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ActiveDirectoryResponse)(nil)).Elem()
}

func (o ActiveDirectoryResponseArrayOutput) ToActiveDirectoryResponseArrayOutput() ActiveDirectoryResponseArrayOutput {
	return o
}

func (o ActiveDirectoryResponseArrayOutput) ToActiveDirectoryResponseArrayOutputWithContext(ctx context.Context) ActiveDirectoryResponseArrayOutput {
	return o
}

func (o ActiveDirectoryResponseArrayOutput) Index(i pulumi.IntInput) ActiveDirectoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ActiveDirectoryResponse {
		return vs[0].([]ActiveDirectoryResponse)[vs[1].(int)]
	}).(ActiveDirectoryResponseOutput)
}

// Identity used to authenticate with key vault.
type EncryptionIdentity struct {
	// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// EncryptionIdentityInput is an input type that accepts EncryptionIdentityArgs and EncryptionIdentityOutput values.
// You can construct a concrete instance of `EncryptionIdentityInput` via:
//
//	EncryptionIdentityArgs{...}
type EncryptionIdentityInput interface {
	pulumi.Input

	ToEncryptionIdentityOutput() EncryptionIdentityOutput
	ToEncryptionIdentityOutputWithContext(context.Context) EncryptionIdentityOutput
}

// Identity used to authenticate with key vault.
type EncryptionIdentityArgs struct {
	// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (EncryptionIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentity)(nil)).Elem()
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityOutput() EncryptionIdentityOutput {
	return i.ToEncryptionIdentityOutputWithContext(context.Background())
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityOutputWithContext(ctx context.Context) EncryptionIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityOutput)
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return i.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (i EncryptionIdentityArgs) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityOutput).ToEncryptionIdentityPtrOutputWithContext(ctx)
}

// EncryptionIdentityPtrInput is an input type that accepts EncryptionIdentityArgs, EncryptionIdentityPtr and EncryptionIdentityPtrOutput values.
// You can construct a concrete instance of `EncryptionIdentityPtrInput` via:
//
//	        EncryptionIdentityArgs{...}
//
//	or:
//
//	        nil
type EncryptionIdentityPtrInput interface {
	pulumi.Input

	ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput
	ToEncryptionIdentityPtrOutputWithContext(context.Context) EncryptionIdentityPtrOutput
}

type encryptionIdentityPtrType EncryptionIdentityArgs

func EncryptionIdentityPtr(v *EncryptionIdentityArgs) EncryptionIdentityPtrInput {
	return (*encryptionIdentityPtrType)(v)
}

func (*encryptionIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentity)(nil)).Elem()
}

func (i *encryptionIdentityPtrType) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return i.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (i *encryptionIdentityPtrType) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionIdentityPtrOutput)
}

// Identity used to authenticate with key vault.
type EncryptionIdentityOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentity)(nil)).Elem()
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityOutput() EncryptionIdentityOutput {
	return o
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityOutputWithContext(ctx context.Context) EncryptionIdentityOutput {
	return o
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return o.ToEncryptionIdentityPtrOutputWithContext(context.Background())
}

func (o EncryptionIdentityOutput) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionIdentity) *EncryptionIdentity {
		return &v
	}).(EncryptionIdentityPtrOutput)
}

// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
func (o EncryptionIdentityOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionIdentity) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EncryptionIdentityPtrOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentity)(nil)).Elem()
}

func (o EncryptionIdentityPtrOutput) ToEncryptionIdentityPtrOutput() EncryptionIdentityPtrOutput {
	return o
}

func (o EncryptionIdentityPtrOutput) ToEncryptionIdentityPtrOutputWithContext(ctx context.Context) EncryptionIdentityPtrOutput {
	return o
}

func (o EncryptionIdentityPtrOutput) Elem() EncryptionIdentityOutput {
	return o.ApplyT(func(v *EncryptionIdentity) EncryptionIdentity {
		if v != nil {
			return *v
		}
		var ret EncryptionIdentity
		return ret
	}).(EncryptionIdentityOutput)
}

// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
func (o EncryptionIdentityPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionIdentity) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity used to authenticate with key vault.
type EncryptionIdentityResponse struct {
	// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
	PrincipalId string `pulumi:"principalId"`
	// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Identity used to authenticate with key vault.
type EncryptionIdentityResponseOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionIdentityResponse)(nil)).Elem()
}

func (o EncryptionIdentityResponseOutput) ToEncryptionIdentityResponseOutput() EncryptionIdentityResponseOutput {
	return o
}

func (o EncryptionIdentityResponseOutput) ToEncryptionIdentityResponseOutputWithContext(ctx context.Context) EncryptionIdentityResponseOutput {
	return o
}

// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
func (o EncryptionIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
func (o EncryptionIdentityResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionIdentityResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type EncryptionIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionIdentityResponse)(nil)).Elem()
}

func (o EncryptionIdentityResponsePtrOutput) ToEncryptionIdentityResponsePtrOutput() EncryptionIdentityResponsePtrOutput {
	return o
}

func (o EncryptionIdentityResponsePtrOutput) ToEncryptionIdentityResponsePtrOutputWithContext(ctx context.Context) EncryptionIdentityResponsePtrOutput {
	return o
}

func (o EncryptionIdentityResponsePtrOutput) Elem() EncryptionIdentityResponseOutput {
	return o.ApplyT(func(v *EncryptionIdentityResponse) EncryptionIdentityResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionIdentityResponse
		return ret
	}).(EncryptionIdentityResponseOutput)
}

// The principal ID (object ID) of the identity used to authenticate with key vault. Read-only.
func (o EncryptionIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities.
func (o EncryptionIdentityResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type string `pulumi:"type"`
	// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type pulumi.StringInput `pulumi:"type"`
	// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Identity) string { return v.Type }).(pulumi.StringOutput)
}

// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Identity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type string `pulumi:"type"`
	// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
func (o IdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]UserAssignedIdentityResponse { return v.UserAssignedIdentities }).(UserAssignedIdentityResponseMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Properties of key vault.
type KeyVaultProperties struct {
	// The name of KeyVault key.
	KeyName string `pulumi:"keyName"`
	// The resource ID of KeyVault.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// The Uri of KeyVault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
}

// KeyVaultPropertiesInput is an input type that accepts KeyVaultPropertiesArgs and KeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesInput` via:
//
//	KeyVaultPropertiesArgs{...}
type KeyVaultPropertiesInput interface {
	pulumi.Input

	ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput
	ToKeyVaultPropertiesOutputWithContext(context.Context) KeyVaultPropertiesOutput
}

// Properties of key vault.
type KeyVaultPropertiesArgs struct {
	// The name of KeyVault key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The resource ID of KeyVault.
	KeyVaultResourceId pulumi.StringInput `pulumi:"keyVaultResourceId"`
	// The Uri of KeyVault.
	KeyVaultUri pulumi.StringInput `pulumi:"keyVaultUri"`
}

func (KeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return i.ToKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput)
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput).ToKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultPropertiesPtrInput is an input type that accepts KeyVaultPropertiesArgs, KeyVaultPropertiesPtr and KeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesPtrInput` via:
//
//	        KeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput
	ToKeyVaultPropertiesPtrOutputWithContext(context.Context) KeyVaultPropertiesPtrOutput
}

type keyVaultPropertiesPtrType KeyVaultPropertiesArgs

func KeyVaultPropertiesPtr(v *KeyVaultPropertiesArgs) KeyVaultPropertiesPtrInput {
	return (*keyVaultPropertiesPtrType)(v)
}

func (*keyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesPtrOutput)
}

// Properties of key vault.
type KeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultProperties) *KeyVaultProperties {
		return &v
	}).(KeyVaultPropertiesPtrOutput)
}

// The name of KeyVault key.
func (o KeyVaultPropertiesOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultProperties) string { return v.KeyName }).(pulumi.StringOutput)
}

// The resource ID of KeyVault.
func (o KeyVaultPropertiesOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultProperties) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// The Uri of KeyVault.
func (o KeyVaultPropertiesOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultProperties) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

type KeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) Elem() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultProperties) KeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultProperties
		return ret
	}).(KeyVaultPropertiesOutput)
}

// The name of KeyVault key.
func (o KeyVaultPropertiesPtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// The resource ID of KeyVault.
func (o KeyVaultPropertiesPtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// The Uri of KeyVault.
func (o KeyVaultPropertiesPtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// Properties of key vault.
type KeyVaultPropertiesResponse struct {
	// The name of KeyVault key.
	KeyName string `pulumi:"keyName"`
	// UUID v4 used to identify the Azure Key Vault configuration
	KeyVaultId string `pulumi:"keyVaultId"`
	// The resource ID of KeyVault.
	KeyVaultResourceId string `pulumi:"keyVaultResourceId"`
	// The Uri of KeyVault.
	KeyVaultUri string `pulumi:"keyVaultUri"`
	// Status of the KeyVault connection.
	Status string `pulumi:"status"`
}

// Properties of key vault.
type KeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return o
}

// The name of KeyVault key.
func (o KeyVaultPropertiesResponseOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyName }).(pulumi.StringOutput)
}

// UUID v4 used to identify the Azure Key Vault configuration
func (o KeyVaultPropertiesResponseOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

// The resource ID of KeyVault.
func (o KeyVaultPropertiesResponseOutput) KeyVaultResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyVaultResourceId }).(pulumi.StringOutput)
}

// The Uri of KeyVault.
func (o KeyVaultPropertiesResponseOutput) KeyVaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyVaultUri }).(pulumi.StringOutput)
}

// Status of the KeyVault connection.
func (o KeyVaultPropertiesResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.Status }).(pulumi.StringOutput)
}

type KeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) Elem() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) KeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultPropertiesResponse
		return ret
	}).(KeyVaultPropertiesResponseOutput)
}

// The name of KeyVault key.
func (o KeyVaultPropertiesResponsePtrOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyName
	}).(pulumi.StringPtrOutput)
}

// UUID v4 used to identify the Azure Key Vault configuration
func (o KeyVaultPropertiesResponsePtrOutput) KeyVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultId
	}).(pulumi.StringPtrOutput)
}

// The resource ID of KeyVault.
func (o KeyVaultPropertiesResponsePtrOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultResourceId
	}).(pulumi.StringPtrOutput)
}

// The Uri of KeyVault.
func (o KeyVaultPropertiesResponsePtrOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultUri
	}).(pulumi.StringPtrOutput)
}

// Status of the KeyVault connection.
func (o KeyVaultPropertiesResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// LDAP search scope
type LdapSearchScopeOpt struct {
	// This specifies the group DN, which overrides the base DN for group lookups.
	GroupDN *string `pulumi:"groupDN"`
	// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
	GroupMembershipFilter *string `pulumi:"groupMembershipFilter"`
	// This specifies the user DN, which overrides the base DN for user lookups.
	UserDN *string `pulumi:"userDN"`
}

// LdapSearchScopeOptInput is an input type that accepts LdapSearchScopeOptArgs and LdapSearchScopeOptOutput values.
// You can construct a concrete instance of `LdapSearchScopeOptInput` via:
//
//	LdapSearchScopeOptArgs{...}
type LdapSearchScopeOptInput interface {
	pulumi.Input

	ToLdapSearchScopeOptOutput() LdapSearchScopeOptOutput
	ToLdapSearchScopeOptOutputWithContext(context.Context) LdapSearchScopeOptOutput
}

// LDAP search scope
type LdapSearchScopeOptArgs struct {
	// This specifies the group DN, which overrides the base DN for group lookups.
	GroupDN pulumi.StringPtrInput `pulumi:"groupDN"`
	// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
	GroupMembershipFilter pulumi.StringPtrInput `pulumi:"groupMembershipFilter"`
	// This specifies the user DN, which overrides the base DN for user lookups.
	UserDN pulumi.StringPtrInput `pulumi:"userDN"`
}

func (LdapSearchScopeOptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapSearchScopeOpt)(nil)).Elem()
}

func (i LdapSearchScopeOptArgs) ToLdapSearchScopeOptOutput() LdapSearchScopeOptOutput {
	return i.ToLdapSearchScopeOptOutputWithContext(context.Background())
}

func (i LdapSearchScopeOptArgs) ToLdapSearchScopeOptOutputWithContext(ctx context.Context) LdapSearchScopeOptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapSearchScopeOptOutput)
}

func (i LdapSearchScopeOptArgs) ToLdapSearchScopeOptPtrOutput() LdapSearchScopeOptPtrOutput {
	return i.ToLdapSearchScopeOptPtrOutputWithContext(context.Background())
}

func (i LdapSearchScopeOptArgs) ToLdapSearchScopeOptPtrOutputWithContext(ctx context.Context) LdapSearchScopeOptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapSearchScopeOptOutput).ToLdapSearchScopeOptPtrOutputWithContext(ctx)
}

// LdapSearchScopeOptPtrInput is an input type that accepts LdapSearchScopeOptArgs, LdapSearchScopeOptPtr and LdapSearchScopeOptPtrOutput values.
// You can construct a concrete instance of `LdapSearchScopeOptPtrInput` via:
//
//	        LdapSearchScopeOptArgs{...}
//
//	or:
//
//	        nil
type LdapSearchScopeOptPtrInput interface {
	pulumi.Input

	ToLdapSearchScopeOptPtrOutput() LdapSearchScopeOptPtrOutput
	ToLdapSearchScopeOptPtrOutputWithContext(context.Context) LdapSearchScopeOptPtrOutput
}

type ldapSearchScopeOptPtrType LdapSearchScopeOptArgs

func LdapSearchScopeOptPtr(v *LdapSearchScopeOptArgs) LdapSearchScopeOptPtrInput {
	return (*ldapSearchScopeOptPtrType)(v)
}

func (*ldapSearchScopeOptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapSearchScopeOpt)(nil)).Elem()
}

func (i *ldapSearchScopeOptPtrType) ToLdapSearchScopeOptPtrOutput() LdapSearchScopeOptPtrOutput {
	return i.ToLdapSearchScopeOptPtrOutputWithContext(context.Background())
}

func (i *ldapSearchScopeOptPtrType) ToLdapSearchScopeOptPtrOutputWithContext(ctx context.Context) LdapSearchScopeOptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapSearchScopeOptPtrOutput)
}

// LDAP search scope
type LdapSearchScopeOptOutput struct{ *pulumi.OutputState }

func (LdapSearchScopeOptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapSearchScopeOpt)(nil)).Elem()
}

func (o LdapSearchScopeOptOutput) ToLdapSearchScopeOptOutput() LdapSearchScopeOptOutput {
	return o
}

func (o LdapSearchScopeOptOutput) ToLdapSearchScopeOptOutputWithContext(ctx context.Context) LdapSearchScopeOptOutput {
	return o
}

func (o LdapSearchScopeOptOutput) ToLdapSearchScopeOptPtrOutput() LdapSearchScopeOptPtrOutput {
	return o.ToLdapSearchScopeOptPtrOutputWithContext(context.Background())
}

func (o LdapSearchScopeOptOutput) ToLdapSearchScopeOptPtrOutputWithContext(ctx context.Context) LdapSearchScopeOptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LdapSearchScopeOpt) *LdapSearchScopeOpt {
		return &v
	}).(LdapSearchScopeOptPtrOutput)
}

// This specifies the group DN, which overrides the base DN for group lookups.
func (o LdapSearchScopeOptOutput) GroupDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOpt) *string { return v.GroupDN }).(pulumi.StringPtrOutput)
}

// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
func (o LdapSearchScopeOptOutput) GroupMembershipFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOpt) *string { return v.GroupMembershipFilter }).(pulumi.StringPtrOutput)
}

// This specifies the user DN, which overrides the base DN for user lookups.
func (o LdapSearchScopeOptOutput) UserDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOpt) *string { return v.UserDN }).(pulumi.StringPtrOutput)
}

type LdapSearchScopeOptPtrOutput struct{ *pulumi.OutputState }

func (LdapSearchScopeOptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapSearchScopeOpt)(nil)).Elem()
}

func (o LdapSearchScopeOptPtrOutput) ToLdapSearchScopeOptPtrOutput() LdapSearchScopeOptPtrOutput {
	return o
}

func (o LdapSearchScopeOptPtrOutput) ToLdapSearchScopeOptPtrOutputWithContext(ctx context.Context) LdapSearchScopeOptPtrOutput {
	return o
}

func (o LdapSearchScopeOptPtrOutput) Elem() LdapSearchScopeOptOutput {
	return o.ApplyT(func(v *LdapSearchScopeOpt) LdapSearchScopeOpt {
		if v != nil {
			return *v
		}
		var ret LdapSearchScopeOpt
		return ret
	}).(LdapSearchScopeOptOutput)
}

// This specifies the group DN, which overrides the base DN for group lookups.
func (o LdapSearchScopeOptPtrOutput) GroupDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOpt) *string {
		if v == nil {
			return nil
		}
		return v.GroupDN
	}).(pulumi.StringPtrOutput)
}

// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
func (o LdapSearchScopeOptPtrOutput) GroupMembershipFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOpt) *string {
		if v == nil {
			return nil
		}
		return v.GroupMembershipFilter
	}).(pulumi.StringPtrOutput)
}

// This specifies the user DN, which overrides the base DN for user lookups.
func (o LdapSearchScopeOptPtrOutput) UserDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOpt) *string {
		if v == nil {
			return nil
		}
		return v.UserDN
	}).(pulumi.StringPtrOutput)
}

// LDAP search scope
type LdapSearchScopeOptResponse struct {
	// This specifies the group DN, which overrides the base DN for group lookups.
	GroupDN *string `pulumi:"groupDN"`
	// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
	GroupMembershipFilter *string `pulumi:"groupMembershipFilter"`
	// This specifies the user DN, which overrides the base DN for user lookups.
	UserDN *string `pulumi:"userDN"`
}

// LDAP search scope
type LdapSearchScopeOptResponseOutput struct{ *pulumi.OutputState }

func (LdapSearchScopeOptResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LdapSearchScopeOptResponse)(nil)).Elem()
}

func (o LdapSearchScopeOptResponseOutput) ToLdapSearchScopeOptResponseOutput() LdapSearchScopeOptResponseOutput {
	return o
}

func (o LdapSearchScopeOptResponseOutput) ToLdapSearchScopeOptResponseOutputWithContext(ctx context.Context) LdapSearchScopeOptResponseOutput {
	return o
}

// This specifies the group DN, which overrides the base DN for group lookups.
func (o LdapSearchScopeOptResponseOutput) GroupDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOptResponse) *string { return v.GroupDN }).(pulumi.StringPtrOutput)
}

// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
func (o LdapSearchScopeOptResponseOutput) GroupMembershipFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOptResponse) *string { return v.GroupMembershipFilter }).(pulumi.StringPtrOutput)
}

// This specifies the user DN, which overrides the base DN for user lookups.
func (o LdapSearchScopeOptResponseOutput) UserDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LdapSearchScopeOptResponse) *string { return v.UserDN }).(pulumi.StringPtrOutput)
}

type LdapSearchScopeOptResponsePtrOutput struct{ *pulumi.OutputState }

func (LdapSearchScopeOptResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapSearchScopeOptResponse)(nil)).Elem()
}

func (o LdapSearchScopeOptResponsePtrOutput) ToLdapSearchScopeOptResponsePtrOutput() LdapSearchScopeOptResponsePtrOutput {
	return o
}

func (o LdapSearchScopeOptResponsePtrOutput) ToLdapSearchScopeOptResponsePtrOutputWithContext(ctx context.Context) LdapSearchScopeOptResponsePtrOutput {
	return o
}

func (o LdapSearchScopeOptResponsePtrOutput) Elem() LdapSearchScopeOptResponseOutput {
	return o.ApplyT(func(v *LdapSearchScopeOptResponse) LdapSearchScopeOptResponse {
		if v != nil {
			return *v
		}
		var ret LdapSearchScopeOptResponse
		return ret
	}).(LdapSearchScopeOptResponseOutput)
}

// This specifies the group DN, which overrides the base DN for group lookups.
func (o LdapSearchScopeOptResponsePtrOutput) GroupDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOptResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupDN
	}).(pulumi.StringPtrOutput)
}

// This specifies the custom LDAP search filter to be used when looking up group membership from LDAP server.
func (o LdapSearchScopeOptResponsePtrOutput) GroupMembershipFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOptResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupMembershipFilter
	}).(pulumi.StringPtrOutput)
}

// This specifies the user DN, which overrides the base DN for user lookups.
func (o LdapSearchScopeOptResponsePtrOutput) UserDN() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LdapSearchScopeOptResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserDN
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// UserAssignedIdentity for the resource.
type UserAssignedIdentityResponse struct {
	// The client ID of the identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the identity.
	PrincipalId string `pulumi:"principalId"`
}

// UserAssignedIdentity for the resource.
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountEncryptionOutput{})
	pulumi.RegisterOutputType(AccountEncryptionPtrOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponseOutput{})
	pulumi.RegisterOutputType(AccountEncryptionResponsePtrOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryArrayOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryResponseOutput{})
	pulumi.RegisterOutputType(ActiveDirectoryResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityPtrOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityResponseOutput{})
	pulumi.RegisterOutputType(EncryptionIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LdapSearchScopeOptOutput{})
	pulumi.RegisterOutputType(LdapSearchScopeOptPtrOutput{})
	pulumi.RegisterOutputType(LdapSearchScopeOptResponseOutput{})
	pulumi.RegisterOutputType(LdapSearchScopeOptResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
}
