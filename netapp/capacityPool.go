// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Capacity pool resource
//
// Uses Azure REST API version 2024-09-01.
//
// Other available API versions: 2022-11-01, 2022-11-01-preview, 2023-05-01, 2023-05-01-preview, 2023-07-01, 2023-07-01-preview, 2023-11-01, 2023-11-01-preview, 2024-01-01, 2024-03-01, 2024-03-01-preview, 2024-05-01, 2024-05-01-preview, 2024-07-01, 2024-07-01-preview, 2024-09-01-preview, 2025-01-01, 2025-01-01-preview, 2025-03-01, 2025-03-01-preview, 2025-06-01. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type CapacityPool struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// If enabled (true) the pool can contain cool Access enabled volumes.
	CoolAccess pulumi.BoolPtrOutput `pulumi:"coolAccess"`
	// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
	EncryptionType pulumi.StringPtrOutput `pulumi:"encryptionType"`
	// A unique read-only string that changes whenever the resource is updated.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// UUID v4 used to identify the Pool
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// Azure lifecycle management
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The qos type of the pool
	QosType pulumi.StringPtrOutput `pulumi:"qosType"`
	// The service level of the file system
	ServiceLevel pulumi.StringOutput `pulumi:"serviceLevel"`
	// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of 1099511627776).
	Size pulumi.Float64Output `pulumi:"size"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Total throughput of pool in MiB/s
	TotalThroughputMibps pulumi.Float64Output `pulumi:"totalThroughputMibps"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
	// Utilized throughput of pool in MiB/s
	UtilizedThroughputMibps pulumi.Float64Output `pulumi:"utilizedThroughputMibps"`
}

// NewCapacityPool registers a new resource with the given unique name, arguments, and options.
func NewCapacityPool(ctx *pulumi.Context,
	name string, args *CapacityPoolArgs, opts ...pulumi.ResourceOption) (*CapacityPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ServiceLevel == nil {
		return nil, errors.New("invalid value for required argument 'ServiceLevel'")
	}
	if args.CoolAccess == nil {
		args.CoolAccess = pulumi.BoolPtr(false)
	}
	if args.EncryptionType == nil {
		args.EncryptionType = pulumi.StringPtr("Single")
	}
	if args.QosType == nil {
		args.QosType = pulumi.StringPtr("Auto")
	}
	if args.Size == nil {
		args.Size = pulumi.Float64(4398046511104.0)
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:netapp/v20170815:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20190501:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20190601:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20190701:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20190801:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20191001:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20191101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200201:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200301:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200501:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200601:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200701:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200801:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20200901:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20201101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20201201:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210201:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210401:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210401preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210601:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20210801:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20211001:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20220101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20220301:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20220501:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20220901:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20221101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20221101:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20221101preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20221101preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230501:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230501:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230501preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230501preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230701:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230701:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230701preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20230701preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20231101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20231101:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20231101preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20231101preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240101:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240301:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240301:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240301preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240301preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240501:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240501:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240501preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240501preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240701:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240701:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240701preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240701preview:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240901:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240901:Pool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20240901preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250101:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250101preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250301:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250301preview:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250601:CapacityPool"),
		},
		{
			Type: pulumi.String("azure-native:netapp:Pool"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CapacityPool
	err := ctx.RegisterResource("azure-native:netapp:CapacityPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityPool gets an existing CapacityPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityPoolState, opts ...pulumi.ResourceOption) (*CapacityPool, error) {
	var resource CapacityPool
	err := ctx.ReadResource("azure-native:netapp:CapacityPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityPool resources.
type capacityPoolState struct {
}

type CapacityPoolState struct {
}

func (CapacityPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityPoolState)(nil)).Elem()
}

type capacityPoolArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// If enabled (true) the pool can contain cool Access enabled volumes.
	CoolAccess *bool `pulumi:"coolAccess"`
	// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
	EncryptionType *string `pulumi:"encryptionType"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the capacity pool
	PoolName *string `pulumi:"poolName"`
	// The qos type of the pool
	QosType *string `pulumi:"qosType"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The service level of the file system
	ServiceLevel string `pulumi:"serviceLevel"`
	// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of 1099511627776).
	Size float64 `pulumi:"size"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a CapacityPool resource.
type CapacityPoolArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput
	// If enabled (true) the pool can contain cool Access enabled volumes.
	CoolAccess pulumi.BoolPtrInput
	// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
	EncryptionType pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the capacity pool
	PoolName pulumi.StringPtrInput
	// The qos type of the pool
	QosType pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// The service level of the file system
	ServiceLevel pulumi.StringInput
	// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of 1099511627776).
	Size pulumi.Float64Input
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (CapacityPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityPoolArgs)(nil)).Elem()
}

type CapacityPoolInput interface {
	pulumi.Input

	ToCapacityPoolOutput() CapacityPoolOutput
	ToCapacityPoolOutputWithContext(ctx context.Context) CapacityPoolOutput
}

func (*CapacityPool) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityPool)(nil)).Elem()
}

func (i *CapacityPool) ToCapacityPoolOutput() CapacityPoolOutput {
	return i.ToCapacityPoolOutputWithContext(context.Background())
}

func (i *CapacityPool) ToCapacityPoolOutputWithContext(ctx context.Context) CapacityPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityPoolOutput)
}

type CapacityPoolOutput struct{ *pulumi.OutputState }

func (CapacityPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityPool)(nil)).Elem()
}

func (o CapacityPoolOutput) ToCapacityPoolOutput() CapacityPoolOutput {
	return o
}

func (o CapacityPoolOutput) ToCapacityPoolOutputWithContext(ctx context.Context) CapacityPoolOutput {
	return o
}

// The Azure API version of the resource.
func (o CapacityPoolOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// If enabled (true) the pool can contain cool Access enabled volumes.
func (o CapacityPoolOutput) CoolAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.BoolPtrOutput { return v.CoolAccess }).(pulumi.BoolPtrOutput)
}

// Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool.
func (o CapacityPoolOutput) EncryptionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringPtrOutput { return v.EncryptionType }).(pulumi.StringPtrOutput)
}

// A unique read-only string that changes whenever the resource is updated.
func (o CapacityPoolOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The geo-location where the resource lives
func (o CapacityPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o CapacityPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// UUID v4 used to identify the Pool
func (o CapacityPoolOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// Azure lifecycle management
func (o CapacityPoolOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The qos type of the pool
func (o CapacityPoolOutput) QosType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringPtrOutput { return v.QosType }).(pulumi.StringPtrOutput)
}

// The service level of the file system
func (o CapacityPoolOutput) ServiceLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.ServiceLevel }).(pulumi.StringOutput)
}

// Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiple of 1099511627776).
func (o CapacityPoolOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *CapacityPool) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o CapacityPoolOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *CapacityPool) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o CapacityPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Total throughput of pool in MiB/s
func (o CapacityPoolOutput) TotalThroughputMibps() pulumi.Float64Output {
	return o.ApplyT(func(v *CapacityPool) pulumi.Float64Output { return v.TotalThroughputMibps }).(pulumi.Float64Output)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o CapacityPoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Utilized throughput of pool in MiB/s
func (o CapacityPoolOutput) UtilizedThroughputMibps() pulumi.Float64Output {
	return o.ApplyT(func(v *CapacityPool) pulumi.Float64Output { return v.UtilizedThroughputMibps }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(CapacityPoolOutput{})
}
