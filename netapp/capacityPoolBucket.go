// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Bucket resource
//
// Uses Azure REST API version 2025-01-01-preview.
//
// Other available API versions: 2025-03-01-preview, 2025-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
type CapacityPoolBucket struct {
	pulumi.CustomResourceState

	// The Azure API version of the resource.
	AzureApiVersion pulumi.StringOutput `pulumi:"azureApiVersion"`
	// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
	FileSystemUser FileSystemUserResponsePtrOutput `pulumi:"fileSystemUser"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Provisioning state of the resource
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Properties of the server managing the lifecycle of volume buckets
	Server BucketServerPropertiesResponsePtrOutput `pulumi:"server"`
	// The bucket credentials status. There states:
	//
	// "NoCredentialsSet": Access and Secret key pair have not been generated.
	// "CredentialsExpired": Access and Secret key pair have expired.
	// "Active": The certificate has been installed and credentials are unexpired.
	Status pulumi.StringOutput `pulumi:"status"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCapacityPoolBucket registers a new resource with the given unique name, arguments, and options.
func NewCapacityPoolBucket(ctx *pulumi.Context,
	name string, args *CapacityPoolBucketArgs, opts ...pulumi.ResourceOption) (*CapacityPoolBucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.PoolName == nil {
		return nil, errors.New("invalid value for required argument 'PoolName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	if args.Path == nil {
		args.Path = pulumi.StringPtr("/")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:netapp/v20250101preview:CapacityPoolBucket"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250301preview:CapacityPoolBucket"),
		},
		{
			Type: pulumi.String("azure-native:netapp/v20250701preview:CapacityPoolBucket"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource CapacityPoolBucket
	err := ctx.RegisterResource("azure-native:netapp:CapacityPoolBucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCapacityPoolBucket gets an existing CapacityPoolBucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityPoolBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CapacityPoolBucketState, opts ...pulumi.ResourceOption) (*CapacityPoolBucket, error) {
	var resource CapacityPoolBucket
	err := ctx.ReadResource("azure-native:netapp:CapacityPoolBucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CapacityPoolBucket resources.
type capacityPoolBucketState struct {
}

type CapacityPoolBucketState struct {
}

func (CapacityPoolBucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityPoolBucketState)(nil)).Elem()
}

type capacityPoolBucketArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// The name of the bucket
	BucketName *string `pulumi:"bucketName"`
	// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
	FileSystemUser *FileSystemUser `pulumi:"fileSystemUser"`
	// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
	Path *string `pulumi:"path"`
	// The name of the capacity pool
	PoolName string `pulumi:"poolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Properties of the server managing the lifecycle of volume buckets
	Server *BucketServerProperties `pulumi:"server"`
	// The name of the volume
	VolumeName string `pulumi:"volumeName"`
}

// The set of arguments for constructing a CapacityPoolBucket resource.
type CapacityPoolBucketArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput
	// The name of the bucket
	BucketName pulumi.StringPtrInput
	// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
	FileSystemUser FileSystemUserPtrInput
	// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
	Path pulumi.StringPtrInput
	// The name of the capacity pool
	PoolName pulumi.StringInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Properties of the server managing the lifecycle of volume buckets
	Server BucketServerPropertiesPtrInput
	// The name of the volume
	VolumeName pulumi.StringInput
}

func (CapacityPoolBucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*capacityPoolBucketArgs)(nil)).Elem()
}

type CapacityPoolBucketInput interface {
	pulumi.Input

	ToCapacityPoolBucketOutput() CapacityPoolBucketOutput
	ToCapacityPoolBucketOutputWithContext(ctx context.Context) CapacityPoolBucketOutput
}

func (*CapacityPoolBucket) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityPoolBucket)(nil)).Elem()
}

func (i *CapacityPoolBucket) ToCapacityPoolBucketOutput() CapacityPoolBucketOutput {
	return i.ToCapacityPoolBucketOutputWithContext(context.Background())
}

func (i *CapacityPoolBucket) ToCapacityPoolBucketOutputWithContext(ctx context.Context) CapacityPoolBucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityPoolBucketOutput)
}

type CapacityPoolBucketOutput struct{ *pulumi.OutputState }

func (CapacityPoolBucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CapacityPoolBucket)(nil)).Elem()
}

func (o CapacityPoolBucketOutput) ToCapacityPoolBucketOutput() CapacityPoolBucketOutput {
	return o
}

func (o CapacityPoolBucketOutput) ToCapacityPoolBucketOutputWithContext(ctx context.Context) CapacityPoolBucketOutput {
	return o
}

// The Azure API version of the resource.
func (o CapacityPoolBucketOutput) AzureApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringOutput { return v.AzureApiVersion }).(pulumi.StringOutput)
}

// File System user having access to volume data. For Unix, this is the user's uid and gid. For Windows, this is the user's username. Note that the Unix and Windows user details are mutually exclusive, meaning one or other must be supplied, but not both.
func (o CapacityPoolBucketOutput) FileSystemUser() FileSystemUserResponsePtrOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) FileSystemUserResponsePtrOutput { return v.FileSystemUser }).(FileSystemUserResponsePtrOutput)
}

// The name of the resource
func (o CapacityPoolBucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The volume path mounted inside the bucket. The default is the root path '/' if no value is provided when the bucket is created.
func (o CapacityPoolBucketOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Provisioning state of the resource
func (o CapacityPoolBucketOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringOutput { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Properties of the server managing the lifecycle of volume buckets
func (o CapacityPoolBucketOutput) Server() BucketServerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) BucketServerPropertiesResponsePtrOutput { return v.Server }).(BucketServerPropertiesResponsePtrOutput)
}

// The bucket credentials status. There states:
//
// "NoCredentialsSet": Access and Secret key pair have not been generated.
// "CredentialsExpired": Access and Secret key pair have expired.
// "Active": The certificate has been installed and credentials are unexpired.
func (o CapacityPoolBucketOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o CapacityPoolBucketOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o CapacityPoolBucketOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CapacityPoolBucket) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(CapacityPoolBucketOutput{})
}
