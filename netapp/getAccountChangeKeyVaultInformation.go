// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package netapp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v3/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains data from encryption.keyVaultProperties as well as information about which private endpoint is used by each encryption sibling set. Response from this endpoint can be modified and used as request body for POST request.
//
// Uses Azure REST API version 2024-09-01.
//
// Other available API versions: 2023-11-01-preview, 2024-03-01-preview, 2024-05-01-preview, 2024-07-01-preview, 2025-01-01, 2025-01-01-preview, 2025-03-01, 2025-03-01-preview, 2025-06-01, 2025-07-01-preview. These can be accessed by generating a local SDK package using the CLI command `pulumi package add azure-native netapp [ApiVersion]`. See the [version guide](../../../version-guide/#accessing-any-api-version-via-local-packages) for details.
func GetAccountChangeKeyVaultInformation(ctx *pulumi.Context, args *GetAccountChangeKeyVaultInformationArgs, opts ...pulumi.InvokeOption) (*GetAccountChangeKeyVaultInformationResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetAccountChangeKeyVaultInformationResult
	err := ctx.Invoke("azure-native:netapp:getAccountChangeKeyVaultInformation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetAccountChangeKeyVaultInformationArgs struct {
	// The name of the NetApp account
	AccountName string `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// Result of getKeyVaultStatus with information about how volumes under NetApp account are encrypted.
type GetAccountChangeKeyVaultInformationResult struct {
	// The name of the key that should be used for encryption.
	KeyName *string `pulumi:"keyName"`
	// Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
	KeyVaultPrivateEndpoints []KeyVaultPrivateEndpointResponse `pulumi:"keyVaultPrivateEndpoints"`
	// Azure resource ID of the key vault/managed HSM that should be used for encryption.
	KeyVaultResourceId *string `pulumi:"keyVaultResourceId"`
	// The URI of the key vault/managed HSM that should be used for encryption.
	KeyVaultUri *string `pulumi:"keyVaultUri"`
}

func GetAccountChangeKeyVaultInformationOutput(ctx *pulumi.Context, args GetAccountChangeKeyVaultInformationOutputArgs, opts ...pulumi.InvokeOption) GetAccountChangeKeyVaultInformationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAccountChangeKeyVaultInformationResultOutput, error) {
			args := v.(GetAccountChangeKeyVaultInformationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: utilities.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure-native:netapp:getAccountChangeKeyVaultInformation", args, GetAccountChangeKeyVaultInformationResultOutput{}, options).(GetAccountChangeKeyVaultInformationResultOutput), nil
		}).(GetAccountChangeKeyVaultInformationResultOutput)
}

type GetAccountChangeKeyVaultInformationOutputArgs struct {
	// The name of the NetApp account
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetAccountChangeKeyVaultInformationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountChangeKeyVaultInformationArgs)(nil)).Elem()
}

// Result of getKeyVaultStatus with information about how volumes under NetApp account are encrypted.
type GetAccountChangeKeyVaultInformationResultOutput struct{ *pulumi.OutputState }

func (GetAccountChangeKeyVaultInformationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountChangeKeyVaultInformationResult)(nil)).Elem()
}

func (o GetAccountChangeKeyVaultInformationResultOutput) ToGetAccountChangeKeyVaultInformationResultOutput() GetAccountChangeKeyVaultInformationResultOutput {
	return o
}

func (o GetAccountChangeKeyVaultInformationResultOutput) ToGetAccountChangeKeyVaultInformationResultOutputWithContext(ctx context.Context) GetAccountChangeKeyVaultInformationResultOutput {
	return o
}

// The name of the key that should be used for encryption.
func (o GetAccountChangeKeyVaultInformationResultOutput) KeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountChangeKeyVaultInformationResult) *string { return v.KeyName }).(pulumi.StringPtrOutput)
}

// Pairs of virtual network ID and private endpoint ID. Every virtual network that has volumes encrypted with customer-managed keys needs its own key vault private endpoint.
func (o GetAccountChangeKeyVaultInformationResultOutput) KeyVaultPrivateEndpoints() KeyVaultPrivateEndpointResponseArrayOutput {
	return o.ApplyT(func(v GetAccountChangeKeyVaultInformationResult) []KeyVaultPrivateEndpointResponse {
		return v.KeyVaultPrivateEndpoints
	}).(KeyVaultPrivateEndpointResponseArrayOutput)
}

// Azure resource ID of the key vault/managed HSM that should be used for encryption.
func (o GetAccountChangeKeyVaultInformationResultOutput) KeyVaultResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountChangeKeyVaultInformationResult) *string { return v.KeyVaultResourceId }).(pulumi.StringPtrOutput)
}

// The URI of the key vault/managed HSM that should be used for encryption.
func (o GetAccountChangeKeyVaultInformationResultOutput) KeyVaultUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountChangeKeyVaultInformationResult) *string { return v.KeyVaultUri }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAccountChangeKeyVaultInformationResultOutput{})
}
