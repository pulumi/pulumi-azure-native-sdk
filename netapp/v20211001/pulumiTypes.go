// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20211001

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Volume Export Policy Rule
type ExportPolicyRule struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients *string `pulumi:"allowedClients"`
	// This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
	ChownMode *string `pulumi:"chownMode"`
	// Allows CIFS protocol
	Cifs *bool `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess *bool `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly *bool `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite *bool `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly *bool `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite *bool `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly *bool `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite *bool `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 *bool `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 *bool `pulumi:"nfsv41"`
	// Order index
	RuleIndex *int `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// Defaults sets the appropriate defaults for ExportPolicyRule
func (val *ExportPolicyRule) Defaults() *ExportPolicyRule {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ChownMode == nil {
		chownMode_ := "Restricted"
		tmp.ChownMode = &chownMode_
	}
	if tmp.HasRootAccess == nil {
		hasRootAccess_ := true
		tmp.HasRootAccess = &hasRootAccess_
	}
	if tmp.Kerberos5ReadOnly == nil {
		kerberos5ReadOnly_ := false
		tmp.Kerberos5ReadOnly = &kerberos5ReadOnly_
	}
	if tmp.Kerberos5ReadWrite == nil {
		kerberos5ReadWrite_ := false
		tmp.Kerberos5ReadWrite = &kerberos5ReadWrite_
	}
	if tmp.Kerberos5iReadOnly == nil {
		kerberos5iReadOnly_ := false
		tmp.Kerberos5iReadOnly = &kerberos5iReadOnly_
	}
	if tmp.Kerberos5iReadWrite == nil {
		kerberos5iReadWrite_ := false
		tmp.Kerberos5iReadWrite = &kerberos5iReadWrite_
	}
	if tmp.Kerberos5pReadOnly == nil {
		kerberos5pReadOnly_ := false
		tmp.Kerberos5pReadOnly = &kerberos5pReadOnly_
	}
	if tmp.Kerberos5pReadWrite == nil {
		kerberos5pReadWrite_ := false
		tmp.Kerberos5pReadWrite = &kerberos5pReadWrite_
	}
	return &tmp
}

// ExportPolicyRuleInput is an input type that accepts ExportPolicyRuleArgs and ExportPolicyRuleOutput values.
// You can construct a concrete instance of `ExportPolicyRuleInput` via:
//
//	ExportPolicyRuleArgs{...}
type ExportPolicyRuleInput interface {
	pulumi.Input

	ToExportPolicyRuleOutput() ExportPolicyRuleOutput
	ToExportPolicyRuleOutputWithContext(context.Context) ExportPolicyRuleOutput
}

// Volume Export Policy Rule
type ExportPolicyRuleArgs struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients pulumi.StringPtrInput `pulumi:"allowedClients"`
	// This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
	ChownMode pulumi.StringPtrInput `pulumi:"chownMode"`
	// Allows CIFS protocol
	Cifs pulumi.BoolPtrInput `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess pulumi.BoolPtrInput `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly pulumi.BoolPtrInput `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite pulumi.BoolPtrInput `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 pulumi.BoolPtrInput `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 pulumi.BoolPtrInput `pulumi:"nfsv41"`
	// Order index
	RuleIndex pulumi.IntPtrInput `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly pulumi.BoolPtrInput `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite pulumi.BoolPtrInput `pulumi:"unixReadWrite"`
}

// Defaults sets the appropriate defaults for ExportPolicyRuleArgs
func (val *ExportPolicyRuleArgs) Defaults() *ExportPolicyRuleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ChownMode == nil {
		tmp.ChownMode = pulumi.StringPtr("Restricted")
	}
	if tmp.HasRootAccess == nil {
		tmp.HasRootAccess = pulumi.BoolPtr(true)
	}
	if tmp.Kerberos5ReadOnly == nil {
		tmp.Kerberos5ReadOnly = pulumi.BoolPtr(false)
	}
	if tmp.Kerberos5ReadWrite == nil {
		tmp.Kerberos5ReadWrite = pulumi.BoolPtr(false)
	}
	if tmp.Kerberos5iReadOnly == nil {
		tmp.Kerberos5iReadOnly = pulumi.BoolPtr(false)
	}
	if tmp.Kerberos5iReadWrite == nil {
		tmp.Kerberos5iReadWrite = pulumi.BoolPtr(false)
	}
	if tmp.Kerberos5pReadOnly == nil {
		tmp.Kerberos5pReadOnly = pulumi.BoolPtr(false)
	}
	if tmp.Kerberos5pReadWrite == nil {
		tmp.Kerberos5pReadWrite = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ExportPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRule)(nil)).Elem()
}

func (i ExportPolicyRuleArgs) ToExportPolicyRuleOutput() ExportPolicyRuleOutput {
	return i.ToExportPolicyRuleOutputWithContext(context.Background())
}

func (i ExportPolicyRuleArgs) ToExportPolicyRuleOutputWithContext(ctx context.Context) ExportPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleOutput)
}

// ExportPolicyRuleArrayInput is an input type that accepts ExportPolicyRuleArray and ExportPolicyRuleArrayOutput values.
// You can construct a concrete instance of `ExportPolicyRuleArrayInput` via:
//
//	ExportPolicyRuleArray{ ExportPolicyRuleArgs{...} }
type ExportPolicyRuleArrayInput interface {
	pulumi.Input

	ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput
	ToExportPolicyRuleArrayOutputWithContext(context.Context) ExportPolicyRuleArrayOutput
}

type ExportPolicyRuleArray []ExportPolicyRuleInput

func (ExportPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRule)(nil)).Elem()
}

func (i ExportPolicyRuleArray) ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput {
	return i.ToExportPolicyRuleArrayOutputWithContext(context.Background())
}

func (i ExportPolicyRuleArray) ToExportPolicyRuleArrayOutputWithContext(ctx context.Context) ExportPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExportPolicyRuleArrayOutput)
}

// Volume Export Policy Rule
type ExportPolicyRuleOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRule)(nil)).Elem()
}

func (o ExportPolicyRuleOutput) ToExportPolicyRuleOutput() ExportPolicyRuleOutput {
	return o
}

func (o ExportPolicyRuleOutput) ToExportPolicyRuleOutputWithContext(ctx context.Context) ExportPolicyRuleOutput {
	return o
}

// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
func (o ExportPolicyRuleOutput) AllowedClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *string { return v.AllowedClients }).(pulumi.StringPtrOutput)
}

// This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
func (o ExportPolicyRuleOutput) ChownMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *string { return v.ChownMode }).(pulumi.StringPtrOutput)
}

// Allows CIFS protocol
func (o ExportPolicyRuleOutput) Cifs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Cifs }).(pulumi.BoolPtrOutput)
}

// Has root access to volume
func (o ExportPolicyRuleOutput) HasRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.HasRootAccess }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5ReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5ReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5ReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5iReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5iReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5iReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5iReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5pReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5pReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleOutput) Kerberos5pReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Kerberos5pReadWrite }).(pulumi.BoolPtrOutput)
}

// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
func (o ExportPolicyRuleOutput) Nfsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Nfsv3 }).(pulumi.BoolPtrOutput)
}

// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
func (o ExportPolicyRuleOutput) Nfsv41() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.Nfsv41 }).(pulumi.BoolPtrOutput)
}

// Order index
func (o ExportPolicyRuleOutput) RuleIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *int { return v.RuleIndex }).(pulumi.IntPtrOutput)
}

// Read only access
func (o ExportPolicyRuleOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Read and write access
func (o ExportPolicyRuleOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRule) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type ExportPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRule)(nil)).Elem()
}

func (o ExportPolicyRuleArrayOutput) ToExportPolicyRuleArrayOutput() ExportPolicyRuleArrayOutput {
	return o
}

func (o ExportPolicyRuleArrayOutput) ToExportPolicyRuleArrayOutputWithContext(ctx context.Context) ExportPolicyRuleArrayOutput {
	return o
}

func (o ExportPolicyRuleArrayOutput) Index(i pulumi.IntInput) ExportPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportPolicyRule {
		return vs[0].([]ExportPolicyRule)[vs[1].(int)]
	}).(ExportPolicyRuleOutput)
}

// Volume Export Policy Rule
type ExportPolicyRuleResponse struct {
	// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
	AllowedClients *string `pulumi:"allowedClients"`
	// This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
	ChownMode *string `pulumi:"chownMode"`
	// Allows CIFS protocol
	Cifs *bool `pulumi:"cifs"`
	// Has root access to volume
	HasRootAccess *bool `pulumi:"hasRootAccess"`
	// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadOnly *bool `pulumi:"kerberos5ReadOnly"`
	// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5ReadWrite *bool `pulumi:"kerberos5ReadWrite"`
	// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadOnly *bool `pulumi:"kerberos5iReadOnly"`
	// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5iReadWrite *bool `pulumi:"kerberos5iReadWrite"`
	// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadOnly *bool `pulumi:"kerberos5pReadOnly"`
	// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
	Kerberos5pReadWrite *bool `pulumi:"kerberos5pReadWrite"`
	// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
	Nfsv3 *bool `pulumi:"nfsv3"`
	// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
	Nfsv41 *bool `pulumi:"nfsv41"`
	// Order index
	RuleIndex *int `pulumi:"ruleIndex"`
	// Read only access
	UnixReadOnly *bool `pulumi:"unixReadOnly"`
	// Read and write access
	UnixReadWrite *bool `pulumi:"unixReadWrite"`
}

// Defaults sets the appropriate defaults for ExportPolicyRuleResponse
func (val *ExportPolicyRuleResponse) Defaults() *ExportPolicyRuleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ChownMode == nil {
		chownMode_ := "Restricted"
		tmp.ChownMode = &chownMode_
	}
	if tmp.HasRootAccess == nil {
		hasRootAccess_ := true
		tmp.HasRootAccess = &hasRootAccess_
	}
	if tmp.Kerberos5ReadOnly == nil {
		kerberos5ReadOnly_ := false
		tmp.Kerberos5ReadOnly = &kerberos5ReadOnly_
	}
	if tmp.Kerberos5ReadWrite == nil {
		kerberos5ReadWrite_ := false
		tmp.Kerberos5ReadWrite = &kerberos5ReadWrite_
	}
	if tmp.Kerberos5iReadOnly == nil {
		kerberos5iReadOnly_ := false
		tmp.Kerberos5iReadOnly = &kerberos5iReadOnly_
	}
	if tmp.Kerberos5iReadWrite == nil {
		kerberos5iReadWrite_ := false
		tmp.Kerberos5iReadWrite = &kerberos5iReadWrite_
	}
	if tmp.Kerberos5pReadOnly == nil {
		kerberos5pReadOnly_ := false
		tmp.Kerberos5pReadOnly = &kerberos5pReadOnly_
	}
	if tmp.Kerberos5pReadWrite == nil {
		kerberos5pReadWrite_ := false
		tmp.Kerberos5pReadWrite = &kerberos5pReadWrite_
	}
	return &tmp
}

// Volume Export Policy Rule
type ExportPolicyRuleResponseOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportPolicyRuleResponse)(nil)).Elem()
}

func (o ExportPolicyRuleResponseOutput) ToExportPolicyRuleResponseOutput() ExportPolicyRuleResponseOutput {
	return o
}

func (o ExportPolicyRuleResponseOutput) ToExportPolicyRuleResponseOutputWithContext(ctx context.Context) ExportPolicyRuleResponseOutput {
	return o
}

// Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
func (o ExportPolicyRuleResponseOutput) AllowedClients() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *string { return v.AllowedClients }).(pulumi.StringPtrOutput)
}

// This parameter specifies who is authorized to change the ownership of a file. restricted - Only root user can change the ownership of the file. unrestricted - Non-root users can change ownership of files that they own.
func (o ExportPolicyRuleResponseOutput) ChownMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *string { return v.ChownMode }).(pulumi.StringPtrOutput)
}

// Allows CIFS protocol
func (o ExportPolicyRuleResponseOutput) Cifs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Cifs }).(pulumi.BoolPtrOutput)
}

// Has root access to volume
func (o ExportPolicyRuleResponseOutput) HasRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.HasRootAccess }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5ReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5 Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5ReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5ReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5iReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5iReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5i Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5iReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5iReadWrite }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read only access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5pReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5pReadOnly }).(pulumi.BoolPtrOutput)
}

// Kerberos5p Read and write access. To be use with swagger version 2020-05-01 or later
func (o ExportPolicyRuleResponseOutput) Kerberos5pReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Kerberos5pReadWrite }).(pulumi.BoolPtrOutput)
}

// Allows NFSv3 protocol. Enable only for NFSv3 type volumes
func (o ExportPolicyRuleResponseOutput) Nfsv3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Nfsv3 }).(pulumi.BoolPtrOutput)
}

// Allows NFSv4.1 protocol. Enable only for NFSv4.1 type volumes
func (o ExportPolicyRuleResponseOutput) Nfsv41() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.Nfsv41 }).(pulumi.BoolPtrOutput)
}

// Order index
func (o ExportPolicyRuleResponseOutput) RuleIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *int { return v.RuleIndex }).(pulumi.IntPtrOutput)
}

// Read only access
func (o ExportPolicyRuleResponseOutput) UnixReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.UnixReadOnly }).(pulumi.BoolPtrOutput)
}

// Read and write access
func (o ExportPolicyRuleResponseOutput) UnixReadWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExportPolicyRuleResponse) *bool { return v.UnixReadWrite }).(pulumi.BoolPtrOutput)
}

type ExportPolicyRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ExportPolicyRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExportPolicyRuleResponse)(nil)).Elem()
}

func (o ExportPolicyRuleResponseArrayOutput) ToExportPolicyRuleResponseArrayOutput() ExportPolicyRuleResponseArrayOutput {
	return o
}

func (o ExportPolicyRuleResponseArrayOutput) ToExportPolicyRuleResponseArrayOutputWithContext(ctx context.Context) ExportPolicyRuleResponseArrayOutput {
	return o
}

func (o ExportPolicyRuleResponseArrayOutput) Index(i pulumi.IntInput) ExportPolicyRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExportPolicyRuleResponse {
		return vs[0].([]ExportPolicyRuleResponse)[vs[1].(int)]
	}).(ExportPolicyRuleResponseOutput)
}

// Mount target properties
type MountTargetPropertiesResponse struct {
	// UUID v4 used to identify the MountTarget
	FileSystemId string `pulumi:"fileSystemId"`
	// The mount target's IPv4 address
	IpAddress string `pulumi:"ipAddress"`
	// UUID v4 used to identify the MountTarget
	MountTargetId string `pulumi:"mountTargetId"`
	// The SMB server's Fully Qualified Domain Name, FQDN
	SmbServerFqdn *string `pulumi:"smbServerFqdn"`
}

// Mount target properties
type MountTargetPropertiesResponseOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountTargetPropertiesResponse)(nil)).Elem()
}

func (o MountTargetPropertiesResponseOutput) ToMountTargetPropertiesResponseOutput() MountTargetPropertiesResponseOutput {
	return o
}

func (o MountTargetPropertiesResponseOutput) ToMountTargetPropertiesResponseOutputWithContext(ctx context.Context) MountTargetPropertiesResponseOutput {
	return o
}

// UUID v4 used to identify the MountTarget
func (o MountTargetPropertiesResponseOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The mount target's IPv4 address
func (o MountTargetPropertiesResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// UUID v4 used to identify the MountTarget
func (o MountTargetPropertiesResponseOutput) MountTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) string { return v.MountTargetId }).(pulumi.StringOutput)
}

// The SMB server's Fully Qualified Domain Name, FQDN
func (o MountTargetPropertiesResponseOutput) SmbServerFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountTargetPropertiesResponse) *string { return v.SmbServerFqdn }).(pulumi.StringPtrOutput)
}

type MountTargetPropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (MountTargetPropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MountTargetPropertiesResponse)(nil)).Elem()
}

func (o MountTargetPropertiesResponseArrayOutput) ToMountTargetPropertiesResponseArrayOutput() MountTargetPropertiesResponseArrayOutput {
	return o
}

func (o MountTargetPropertiesResponseArrayOutput) ToMountTargetPropertiesResponseArrayOutputWithContext(ctx context.Context) MountTargetPropertiesResponseArrayOutput {
	return o
}

func (o MountTargetPropertiesResponseArrayOutput) Index(i pulumi.IntInput) MountTargetPropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MountTargetPropertiesResponse {
		return vs[0].([]MountTargetPropertiesResponse)[vs[1].(int)]
	}).(MountTargetPropertiesResponseOutput)
}

// Application specific parameters for the placement of volumes in the volume group
type PlacementKeyValuePairs struct {
	// Key for an application specific parameter for the placement of volumes in the volume group
	Key string `pulumi:"key"`
	// Value for an application specific parameter for the placement of volumes in the volume group
	Value string `pulumi:"value"`
}

// PlacementKeyValuePairsInput is an input type that accepts PlacementKeyValuePairsArgs and PlacementKeyValuePairsOutput values.
// You can construct a concrete instance of `PlacementKeyValuePairsInput` via:
//
//	PlacementKeyValuePairsArgs{...}
type PlacementKeyValuePairsInput interface {
	pulumi.Input

	ToPlacementKeyValuePairsOutput() PlacementKeyValuePairsOutput
	ToPlacementKeyValuePairsOutputWithContext(context.Context) PlacementKeyValuePairsOutput
}

// Application specific parameters for the placement of volumes in the volume group
type PlacementKeyValuePairsArgs struct {
	// Key for an application specific parameter for the placement of volumes in the volume group
	Key pulumi.StringInput `pulumi:"key"`
	// Value for an application specific parameter for the placement of volumes in the volume group
	Value pulumi.StringInput `pulumi:"value"`
}

func (PlacementKeyValuePairsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementKeyValuePairs)(nil)).Elem()
}

func (i PlacementKeyValuePairsArgs) ToPlacementKeyValuePairsOutput() PlacementKeyValuePairsOutput {
	return i.ToPlacementKeyValuePairsOutputWithContext(context.Background())
}

func (i PlacementKeyValuePairsArgs) ToPlacementKeyValuePairsOutputWithContext(ctx context.Context) PlacementKeyValuePairsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementKeyValuePairsOutput)
}

// PlacementKeyValuePairsArrayInput is an input type that accepts PlacementKeyValuePairsArray and PlacementKeyValuePairsArrayOutput values.
// You can construct a concrete instance of `PlacementKeyValuePairsArrayInput` via:
//
//	PlacementKeyValuePairsArray{ PlacementKeyValuePairsArgs{...} }
type PlacementKeyValuePairsArrayInput interface {
	pulumi.Input

	ToPlacementKeyValuePairsArrayOutput() PlacementKeyValuePairsArrayOutput
	ToPlacementKeyValuePairsArrayOutputWithContext(context.Context) PlacementKeyValuePairsArrayOutput
}

type PlacementKeyValuePairsArray []PlacementKeyValuePairsInput

func (PlacementKeyValuePairsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlacementKeyValuePairs)(nil)).Elem()
}

func (i PlacementKeyValuePairsArray) ToPlacementKeyValuePairsArrayOutput() PlacementKeyValuePairsArrayOutput {
	return i.ToPlacementKeyValuePairsArrayOutputWithContext(context.Background())
}

func (i PlacementKeyValuePairsArray) ToPlacementKeyValuePairsArrayOutputWithContext(ctx context.Context) PlacementKeyValuePairsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlacementKeyValuePairsArrayOutput)
}

// Application specific parameters for the placement of volumes in the volume group
type PlacementKeyValuePairsOutput struct{ *pulumi.OutputState }

func (PlacementKeyValuePairsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementKeyValuePairs)(nil)).Elem()
}

func (o PlacementKeyValuePairsOutput) ToPlacementKeyValuePairsOutput() PlacementKeyValuePairsOutput {
	return o
}

func (o PlacementKeyValuePairsOutput) ToPlacementKeyValuePairsOutputWithContext(ctx context.Context) PlacementKeyValuePairsOutput {
	return o
}

// Key for an application specific parameter for the placement of volumes in the volume group
func (o PlacementKeyValuePairsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementKeyValuePairs) string { return v.Key }).(pulumi.StringOutput)
}

// Value for an application specific parameter for the placement of volumes in the volume group
func (o PlacementKeyValuePairsOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementKeyValuePairs) string { return v.Value }).(pulumi.StringOutput)
}

type PlacementKeyValuePairsArrayOutput struct{ *pulumi.OutputState }

func (PlacementKeyValuePairsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlacementKeyValuePairs)(nil)).Elem()
}

func (o PlacementKeyValuePairsArrayOutput) ToPlacementKeyValuePairsArrayOutput() PlacementKeyValuePairsArrayOutput {
	return o
}

func (o PlacementKeyValuePairsArrayOutput) ToPlacementKeyValuePairsArrayOutputWithContext(ctx context.Context) PlacementKeyValuePairsArrayOutput {
	return o
}

func (o PlacementKeyValuePairsArrayOutput) Index(i pulumi.IntInput) PlacementKeyValuePairsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlacementKeyValuePairs {
		return vs[0].([]PlacementKeyValuePairs)[vs[1].(int)]
	}).(PlacementKeyValuePairsOutput)
}

// Application specific parameters for the placement of volumes in the volume group
type PlacementKeyValuePairsResponse struct {
	// Key for an application specific parameter for the placement of volumes in the volume group
	Key string `pulumi:"key"`
	// Value for an application specific parameter for the placement of volumes in the volume group
	Value string `pulumi:"value"`
}

// Application specific parameters for the placement of volumes in the volume group
type PlacementKeyValuePairsResponseOutput struct{ *pulumi.OutputState }

func (PlacementKeyValuePairsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlacementKeyValuePairsResponse)(nil)).Elem()
}

func (o PlacementKeyValuePairsResponseOutput) ToPlacementKeyValuePairsResponseOutput() PlacementKeyValuePairsResponseOutput {
	return o
}

func (o PlacementKeyValuePairsResponseOutput) ToPlacementKeyValuePairsResponseOutputWithContext(ctx context.Context) PlacementKeyValuePairsResponseOutput {
	return o
}

// Key for an application specific parameter for the placement of volumes in the volume group
func (o PlacementKeyValuePairsResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementKeyValuePairsResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Value for an application specific parameter for the placement of volumes in the volume group
func (o PlacementKeyValuePairsResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PlacementKeyValuePairsResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PlacementKeyValuePairsResponseArrayOutput struct{ *pulumi.OutputState }

func (PlacementKeyValuePairsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlacementKeyValuePairsResponse)(nil)).Elem()
}

func (o PlacementKeyValuePairsResponseArrayOutput) ToPlacementKeyValuePairsResponseArrayOutput() PlacementKeyValuePairsResponseArrayOutput {
	return o
}

func (o PlacementKeyValuePairsResponseArrayOutput) ToPlacementKeyValuePairsResponseArrayOutputWithContext(ctx context.Context) PlacementKeyValuePairsResponseArrayOutput {
	return o
}

func (o PlacementKeyValuePairsResponseArrayOutput) Index(i pulumi.IntInput) PlacementKeyValuePairsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlacementKeyValuePairsResponse {
		return vs[0].([]PlacementKeyValuePairsResponse)[vs[1].(int)]
	}).(PlacementKeyValuePairsResponseOutput)
}

// Replication properties
type ReplicationObject struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType *string `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion *string `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId *string `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule *string `pulumi:"replicationSchedule"`
}

// ReplicationObjectInput is an input type that accepts ReplicationObjectArgs and ReplicationObjectOutput values.
// You can construct a concrete instance of `ReplicationObjectInput` via:
//
//	ReplicationObjectArgs{...}
type ReplicationObjectInput interface {
	pulumi.Input

	ToReplicationObjectOutput() ReplicationObjectOutput
	ToReplicationObjectOutputWithContext(context.Context) ReplicationObjectOutput
}

// Replication properties
type ReplicationObjectArgs struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion pulumi.StringPtrInput `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId pulumi.StringInput `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId pulumi.StringPtrInput `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule pulumi.StringPtrInput `pulumi:"replicationSchedule"`
}

func (ReplicationObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObject)(nil)).Elem()
}

func (i ReplicationObjectArgs) ToReplicationObjectOutput() ReplicationObjectOutput {
	return i.ToReplicationObjectOutputWithContext(context.Background())
}

func (i ReplicationObjectArgs) ToReplicationObjectOutputWithContext(ctx context.Context) ReplicationObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectOutput)
}

func (i ReplicationObjectArgs) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return i.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (i ReplicationObjectArgs) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectOutput).ToReplicationObjectPtrOutputWithContext(ctx)
}

// ReplicationObjectPtrInput is an input type that accepts ReplicationObjectArgs, ReplicationObjectPtr and ReplicationObjectPtrOutput values.
// You can construct a concrete instance of `ReplicationObjectPtrInput` via:
//
//	        ReplicationObjectArgs{...}
//
//	or:
//
//	        nil
type ReplicationObjectPtrInput interface {
	pulumi.Input

	ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput
	ToReplicationObjectPtrOutputWithContext(context.Context) ReplicationObjectPtrOutput
}

type replicationObjectPtrType ReplicationObjectArgs

func ReplicationObjectPtr(v *ReplicationObjectArgs) ReplicationObjectPtrInput {
	return (*replicationObjectPtrType)(v)
}

func (*replicationObjectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObject)(nil)).Elem()
}

func (i *replicationObjectPtrType) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return i.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (i *replicationObjectPtrType) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationObjectPtrOutput)
}

// Replication properties
type ReplicationObjectOutput struct{ *pulumi.OutputState }

func (ReplicationObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObject)(nil)).Elem()
}

func (o ReplicationObjectOutput) ToReplicationObjectOutput() ReplicationObjectOutput {
	return o
}

func (o ReplicationObjectOutput) ToReplicationObjectOutputWithContext(ctx context.Context) ReplicationObjectOutput {
	return o
}

func (o ReplicationObjectOutput) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return o.ToReplicationObjectPtrOutputWithContext(context.Background())
}

func (o ReplicationObjectOutput) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicationObject) *ReplicationObject {
		return &v
	}).(ReplicationObjectPtrOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.RemoteVolumeRegion }).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObject) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Id
func (o ReplicationObjectOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.ReplicationId }).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObject) *string { return v.ReplicationSchedule }).(pulumi.StringPtrOutput)
}

type ReplicationObjectPtrOutput struct{ *pulumi.OutputState }

func (ReplicationObjectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObject)(nil)).Elem()
}

func (o ReplicationObjectPtrOutput) ToReplicationObjectPtrOutput() ReplicationObjectPtrOutput {
	return o
}

func (o ReplicationObjectPtrOutput) ToReplicationObjectPtrOutputWithContext(ctx context.Context) ReplicationObjectPtrOutput {
	return o
}

func (o ReplicationObjectPtrOutput) Elem() ReplicationObjectOutput {
	return o.ApplyT(func(v *ReplicationObject) ReplicationObject {
		if v != nil {
			return *v
		}
		var ret ReplicationObject
		return ret
	}).(ReplicationObjectOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectPtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectPtrOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.RemoteVolumeRegion
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectPtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// Id
func (o ReplicationObjectPtrOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationId
	}).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectPtrOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObject) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationSchedule
	}).(pulumi.StringPtrOutput)
}

// Replication properties
type ReplicationObjectResponse struct {
	// Indicates whether the local volume is the source or destination for the Volume Replication
	EndpointType *string `pulumi:"endpointType"`
	// The remote region for the other end of the Volume Replication.
	RemoteVolumeRegion *string `pulumi:"remoteVolumeRegion"`
	// The resource ID of the remote volume.
	RemoteVolumeResourceId string `pulumi:"remoteVolumeResourceId"`
	// Id
	ReplicationId *string `pulumi:"replicationId"`
	// Schedule
	ReplicationSchedule *string `pulumi:"replicationSchedule"`
}

// Replication properties
type ReplicationObjectResponseOutput struct{ *pulumi.OutputState }

func (ReplicationObjectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationObjectResponse)(nil)).Elem()
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponseOutput() ReplicationObjectResponseOutput {
	return o
}

func (o ReplicationObjectResponseOutput) ToReplicationObjectResponseOutputWithContext(ctx context.Context) ReplicationObjectResponseOutput {
	return o
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectResponseOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectResponseOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.RemoteVolumeRegion }).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectResponseOutput) RemoteVolumeResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) string { return v.RemoteVolumeResourceId }).(pulumi.StringOutput)
}

// Id
func (o ReplicationObjectResponseOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.ReplicationId }).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectResponseOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicationObjectResponse) *string { return v.ReplicationSchedule }).(pulumi.StringPtrOutput)
}

type ReplicationObjectResponsePtrOutput struct{ *pulumi.OutputState }

func (ReplicationObjectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationObjectResponse)(nil)).Elem()
}

func (o ReplicationObjectResponsePtrOutput) ToReplicationObjectResponsePtrOutput() ReplicationObjectResponsePtrOutput {
	return o
}

func (o ReplicationObjectResponsePtrOutput) ToReplicationObjectResponsePtrOutputWithContext(ctx context.Context) ReplicationObjectResponsePtrOutput {
	return o
}

func (o ReplicationObjectResponsePtrOutput) Elem() ReplicationObjectResponseOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) ReplicationObjectResponse {
		if v != nil {
			return *v
		}
		var ret ReplicationObjectResponse
		return ret
	}).(ReplicationObjectResponseOutput)
}

// Indicates whether the local volume is the source or destination for the Volume Replication
func (o ReplicationObjectResponsePtrOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndpointType
	}).(pulumi.StringPtrOutput)
}

// The remote region for the other end of the Volume Replication.
func (o ReplicationObjectResponsePtrOutput) RemoteVolumeRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteVolumeRegion
	}).(pulumi.StringPtrOutput)
}

// The resource ID of the remote volume.
func (o ReplicationObjectResponsePtrOutput) RemoteVolumeResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RemoteVolumeResourceId
	}).(pulumi.StringPtrOutput)
}

// Id
func (o ReplicationObjectResponsePtrOutput) ReplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationId
	}).(pulumi.StringPtrOutput)
}

// Schedule
func (o ReplicationObjectResponsePtrOutput) ReplicationSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicationObjectResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationSchedule
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Volume Backup Properties
type VolumeBackupProperties struct {
	// Backup Enabled
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced *bool `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId *string `pulumi:"vaultId"`
}

// VolumeBackupPropertiesInput is an input type that accepts VolumeBackupPropertiesArgs and VolumeBackupPropertiesOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesInput` via:
//
//	VolumeBackupPropertiesArgs{...}
type VolumeBackupPropertiesInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput
	ToVolumeBackupPropertiesOutputWithContext(context.Context) VolumeBackupPropertiesOutput
}

// Volume Backup Properties
type VolumeBackupPropertiesArgs struct {
	// Backup Enabled
	BackupEnabled pulumi.BoolPtrInput `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId pulumi.StringPtrInput `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced pulumi.BoolPtrInput `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId pulumi.StringPtrInput `pulumi:"vaultId"`
}

func (VolumeBackupPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupProperties)(nil)).Elem()
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput {
	return i.ToVolumeBackupPropertiesOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesOutputWithContext(ctx context.Context) VolumeBackupPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesOutput)
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return i.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i VolumeBackupPropertiesArgs) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesOutput).ToVolumeBackupPropertiesPtrOutputWithContext(ctx)
}

// VolumeBackupPropertiesPtrInput is an input type that accepts VolumeBackupPropertiesArgs, VolumeBackupPropertiesPtr and VolumeBackupPropertiesPtrOutput values.
// You can construct a concrete instance of `VolumeBackupPropertiesPtrInput` via:
//
//	        VolumeBackupPropertiesArgs{...}
//
//	or:
//
//	        nil
type VolumeBackupPropertiesPtrInput interface {
	pulumi.Input

	ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput
	ToVolumeBackupPropertiesPtrOutputWithContext(context.Context) VolumeBackupPropertiesPtrOutput
}

type volumeBackupPropertiesPtrType VolumeBackupPropertiesArgs

func VolumeBackupPropertiesPtr(v *VolumeBackupPropertiesArgs) VolumeBackupPropertiesPtrInput {
	return (*volumeBackupPropertiesPtrType)(v)
}

func (*volumeBackupPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupProperties)(nil)).Elem()
}

func (i *volumeBackupPropertiesPtrType) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return i.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (i *volumeBackupPropertiesPtrType) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBackupPropertiesPtrOutput)
}

// Volume Backup Properties
type VolumeBackupPropertiesOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupProperties)(nil)).Elem()
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesOutput() VolumeBackupPropertiesOutput {
	return o
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesOutputWithContext(ctx context.Context) VolumeBackupPropertiesOutput {
	return o
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return o.ToVolumeBackupPropertiesPtrOutputWithContext(context.Background())
}

func (o VolumeBackupPropertiesOutput) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeBackupProperties) *VolumeBackupProperties {
		return &v
	}).(VolumeBackupPropertiesPtrOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *bool { return v.BackupEnabled }).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *string { return v.BackupPolicyId }).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *bool { return v.PolicyEnforced }).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupProperties) *string { return v.VaultId }).(pulumi.StringPtrOutput)
}

type VolumeBackupPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupProperties)(nil)).Elem()
}

func (o VolumeBackupPropertiesPtrOutput) ToVolumeBackupPropertiesPtrOutput() VolumeBackupPropertiesPtrOutput {
	return o
}

func (o VolumeBackupPropertiesPtrOutput) ToVolumeBackupPropertiesPtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesPtrOutput {
	return o
}

func (o VolumeBackupPropertiesPtrOutput) Elem() VolumeBackupPropertiesOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) VolumeBackupProperties {
		if v != nil {
			return *v
		}
		var ret VolumeBackupProperties
		return ret
	}).(VolumeBackupPropertiesOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesPtrOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *bool {
		if v == nil {
			return nil
		}
		return v.BackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesPtrOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *string {
		if v == nil {
			return nil
		}
		return v.BackupPolicyId
	}).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesPtrOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *bool {
		if v == nil {
			return nil
		}
		return v.PolicyEnforced
	}).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesPtrOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupProperties) *string {
		if v == nil {
			return nil
		}
		return v.VaultId
	}).(pulumi.StringPtrOutput)
}

// Volume Backup Properties
type VolumeBackupPropertiesResponse struct {
	// Backup Enabled
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Backup Policy Resource ID
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// Policy Enforced
	PolicyEnforced *bool `pulumi:"policyEnforced"`
	// Vault Resource ID
	VaultId *string `pulumi:"vaultId"`
}

// Volume Backup Properties
type VolumeBackupPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponseOutput() VolumeBackupPropertiesResponseOutput {
	return o
}

func (o VolumeBackupPropertiesResponseOutput) ToVolumeBackupPropertiesResponseOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponseOutput {
	return o
}

// Backup Enabled
func (o VolumeBackupPropertiesResponseOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *bool { return v.BackupEnabled }).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesResponseOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *string { return v.BackupPolicyId }).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesResponseOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *bool { return v.PolicyEnforced }).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesResponseOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeBackupPropertiesResponse) *string { return v.VaultId }).(pulumi.StringPtrOutput)
}

type VolumeBackupPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeBackupPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBackupPropertiesResponse)(nil)).Elem()
}

func (o VolumeBackupPropertiesResponsePtrOutput) ToVolumeBackupPropertiesResponsePtrOutput() VolumeBackupPropertiesResponsePtrOutput {
	return o
}

func (o VolumeBackupPropertiesResponsePtrOutput) ToVolumeBackupPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeBackupPropertiesResponsePtrOutput {
	return o
}

func (o VolumeBackupPropertiesResponsePtrOutput) Elem() VolumeBackupPropertiesResponseOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) VolumeBackupPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret VolumeBackupPropertiesResponse
		return ret
	}).(VolumeBackupPropertiesResponseOutput)
}

// Backup Enabled
func (o VolumeBackupPropertiesResponsePtrOutput) BackupEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.BackupEnabled
	}).(pulumi.BoolPtrOutput)
}

// Backup Policy Resource ID
func (o VolumeBackupPropertiesResponsePtrOutput) BackupPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.BackupPolicyId
	}).(pulumi.StringPtrOutput)
}

// Policy Enforced
func (o VolumeBackupPropertiesResponsePtrOutput) PolicyEnforced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.PolicyEnforced
	}).(pulumi.BoolPtrOutput)
}

// Vault Resource ID
func (o VolumeBackupPropertiesResponsePtrOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeBackupPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VaultId
	}).(pulumi.StringPtrOutput)
}

// Volume group properties
type VolumeGroupMetaData struct {
	// Application specific identifier
	ApplicationIdentifier *string `pulumi:"applicationIdentifier"`
	// Application Type
	ApplicationType *string `pulumi:"applicationType"`
	// Application specific identifier of deployment rules for the volume group
	DeploymentSpecId *string `pulumi:"deploymentSpecId"`
	// Application specific placement rules for the volume group
	GlobalPlacementRules []PlacementKeyValuePairs `pulumi:"globalPlacementRules"`
	// Group Description
	GroupDescription *string `pulumi:"groupDescription"`
}

// VolumeGroupMetaDataInput is an input type that accepts VolumeGroupMetaDataArgs and VolumeGroupMetaDataOutput values.
// You can construct a concrete instance of `VolumeGroupMetaDataInput` via:
//
//	VolumeGroupMetaDataArgs{...}
type VolumeGroupMetaDataInput interface {
	pulumi.Input

	ToVolumeGroupMetaDataOutput() VolumeGroupMetaDataOutput
	ToVolumeGroupMetaDataOutputWithContext(context.Context) VolumeGroupMetaDataOutput
}

// Volume group properties
type VolumeGroupMetaDataArgs struct {
	// Application specific identifier
	ApplicationIdentifier pulumi.StringPtrInput `pulumi:"applicationIdentifier"`
	// Application Type
	ApplicationType pulumi.StringPtrInput `pulumi:"applicationType"`
	// Application specific identifier of deployment rules for the volume group
	DeploymentSpecId pulumi.StringPtrInput `pulumi:"deploymentSpecId"`
	// Application specific placement rules for the volume group
	GlobalPlacementRules PlacementKeyValuePairsArrayInput `pulumi:"globalPlacementRules"`
	// Group Description
	GroupDescription pulumi.StringPtrInput `pulumi:"groupDescription"`
}

func (VolumeGroupMetaDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupMetaData)(nil)).Elem()
}

func (i VolumeGroupMetaDataArgs) ToVolumeGroupMetaDataOutput() VolumeGroupMetaDataOutput {
	return i.ToVolumeGroupMetaDataOutputWithContext(context.Background())
}

func (i VolumeGroupMetaDataArgs) ToVolumeGroupMetaDataOutputWithContext(ctx context.Context) VolumeGroupMetaDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupMetaDataOutput)
}

func (i VolumeGroupMetaDataArgs) ToVolumeGroupMetaDataPtrOutput() VolumeGroupMetaDataPtrOutput {
	return i.ToVolumeGroupMetaDataPtrOutputWithContext(context.Background())
}

func (i VolumeGroupMetaDataArgs) ToVolumeGroupMetaDataPtrOutputWithContext(ctx context.Context) VolumeGroupMetaDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupMetaDataOutput).ToVolumeGroupMetaDataPtrOutputWithContext(ctx)
}

// VolumeGroupMetaDataPtrInput is an input type that accepts VolumeGroupMetaDataArgs, VolumeGroupMetaDataPtr and VolumeGroupMetaDataPtrOutput values.
// You can construct a concrete instance of `VolumeGroupMetaDataPtrInput` via:
//
//	        VolumeGroupMetaDataArgs{...}
//
//	or:
//
//	        nil
type VolumeGroupMetaDataPtrInput interface {
	pulumi.Input

	ToVolumeGroupMetaDataPtrOutput() VolumeGroupMetaDataPtrOutput
	ToVolumeGroupMetaDataPtrOutputWithContext(context.Context) VolumeGroupMetaDataPtrOutput
}

type volumeGroupMetaDataPtrType VolumeGroupMetaDataArgs

func VolumeGroupMetaDataPtr(v *VolumeGroupMetaDataArgs) VolumeGroupMetaDataPtrInput {
	return (*volumeGroupMetaDataPtrType)(v)
}

func (*volumeGroupMetaDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupMetaData)(nil)).Elem()
}

func (i *volumeGroupMetaDataPtrType) ToVolumeGroupMetaDataPtrOutput() VolumeGroupMetaDataPtrOutput {
	return i.ToVolumeGroupMetaDataPtrOutputWithContext(context.Background())
}

func (i *volumeGroupMetaDataPtrType) ToVolumeGroupMetaDataPtrOutputWithContext(ctx context.Context) VolumeGroupMetaDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupMetaDataPtrOutput)
}

// Volume group properties
type VolumeGroupMetaDataOutput struct{ *pulumi.OutputState }

func (VolumeGroupMetaDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupMetaData)(nil)).Elem()
}

func (o VolumeGroupMetaDataOutput) ToVolumeGroupMetaDataOutput() VolumeGroupMetaDataOutput {
	return o
}

func (o VolumeGroupMetaDataOutput) ToVolumeGroupMetaDataOutputWithContext(ctx context.Context) VolumeGroupMetaDataOutput {
	return o
}

func (o VolumeGroupMetaDataOutput) ToVolumeGroupMetaDataPtrOutput() VolumeGroupMetaDataPtrOutput {
	return o.ToVolumeGroupMetaDataPtrOutputWithContext(context.Background())
}

func (o VolumeGroupMetaDataOutput) ToVolumeGroupMetaDataPtrOutputWithContext(ctx context.Context) VolumeGroupMetaDataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeGroupMetaData) *VolumeGroupMetaData {
		return &v
	}).(VolumeGroupMetaDataPtrOutput)
}

// Application specific identifier
func (o VolumeGroupMetaDataOutput) ApplicationIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaData) *string { return v.ApplicationIdentifier }).(pulumi.StringPtrOutput)
}

// Application Type
func (o VolumeGroupMetaDataOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaData) *string { return v.ApplicationType }).(pulumi.StringPtrOutput)
}

// Application specific identifier of deployment rules for the volume group
func (o VolumeGroupMetaDataOutput) DeploymentSpecId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaData) *string { return v.DeploymentSpecId }).(pulumi.StringPtrOutput)
}

// Application specific placement rules for the volume group
func (o VolumeGroupMetaDataOutput) GlobalPlacementRules() PlacementKeyValuePairsArrayOutput {
	return o.ApplyT(func(v VolumeGroupMetaData) []PlacementKeyValuePairs { return v.GlobalPlacementRules }).(PlacementKeyValuePairsArrayOutput)
}

// Group Description
func (o VolumeGroupMetaDataOutput) GroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaData) *string { return v.GroupDescription }).(pulumi.StringPtrOutput)
}

type VolumeGroupMetaDataPtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupMetaDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupMetaData)(nil)).Elem()
}

func (o VolumeGroupMetaDataPtrOutput) ToVolumeGroupMetaDataPtrOutput() VolumeGroupMetaDataPtrOutput {
	return o
}

func (o VolumeGroupMetaDataPtrOutput) ToVolumeGroupMetaDataPtrOutputWithContext(ctx context.Context) VolumeGroupMetaDataPtrOutput {
	return o
}

func (o VolumeGroupMetaDataPtrOutput) Elem() VolumeGroupMetaDataOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) VolumeGroupMetaData {
		if v != nil {
			return *v
		}
		var ret VolumeGroupMetaData
		return ret
	}).(VolumeGroupMetaDataOutput)
}

// Application specific identifier
func (o VolumeGroupMetaDataPtrOutput) ApplicationIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationIdentifier
	}).(pulumi.StringPtrOutput)
}

// Application Type
func (o VolumeGroupMetaDataPtrOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationType
	}).(pulumi.StringPtrOutput)
}

// Application specific identifier of deployment rules for the volume group
func (o VolumeGroupMetaDataPtrOutput) DeploymentSpecId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentSpecId
	}).(pulumi.StringPtrOutput)
}

// Application specific placement rules for the volume group
func (o VolumeGroupMetaDataPtrOutput) GlobalPlacementRules() PlacementKeyValuePairsArrayOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) []PlacementKeyValuePairs {
		if v == nil {
			return nil
		}
		return v.GlobalPlacementRules
	}).(PlacementKeyValuePairsArrayOutput)
}

// Group Description
func (o VolumeGroupMetaDataPtrOutput) GroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaData) *string {
		if v == nil {
			return nil
		}
		return v.GroupDescription
	}).(pulumi.StringPtrOutput)
}

// Volume group properties
type VolumeGroupMetaDataResponse struct {
	// Application specific identifier
	ApplicationIdentifier *string `pulumi:"applicationIdentifier"`
	// Application Type
	ApplicationType *string `pulumi:"applicationType"`
	// Application specific identifier of deployment rules for the volume group
	DeploymentSpecId *string `pulumi:"deploymentSpecId"`
	// Application specific placement rules for the volume group
	GlobalPlacementRules []PlacementKeyValuePairsResponse `pulumi:"globalPlacementRules"`
	// Group Description
	GroupDescription *string `pulumi:"groupDescription"`
	// Number of volumes in volume group
	VolumesCount float64 `pulumi:"volumesCount"`
}

// Volume group properties
type VolumeGroupMetaDataResponseOutput struct{ *pulumi.OutputState }

func (VolumeGroupMetaDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupMetaDataResponse)(nil)).Elem()
}

func (o VolumeGroupMetaDataResponseOutput) ToVolumeGroupMetaDataResponseOutput() VolumeGroupMetaDataResponseOutput {
	return o
}

func (o VolumeGroupMetaDataResponseOutput) ToVolumeGroupMetaDataResponseOutputWithContext(ctx context.Context) VolumeGroupMetaDataResponseOutput {
	return o
}

// Application specific identifier
func (o VolumeGroupMetaDataResponseOutput) ApplicationIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) *string { return v.ApplicationIdentifier }).(pulumi.StringPtrOutput)
}

// Application Type
func (o VolumeGroupMetaDataResponseOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) *string { return v.ApplicationType }).(pulumi.StringPtrOutput)
}

// Application specific identifier of deployment rules for the volume group
func (o VolumeGroupMetaDataResponseOutput) DeploymentSpecId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) *string { return v.DeploymentSpecId }).(pulumi.StringPtrOutput)
}

// Application specific placement rules for the volume group
func (o VolumeGroupMetaDataResponseOutput) GlobalPlacementRules() PlacementKeyValuePairsResponseArrayOutput {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) []PlacementKeyValuePairsResponse { return v.GlobalPlacementRules }).(PlacementKeyValuePairsResponseArrayOutput)
}

// Group Description
func (o VolumeGroupMetaDataResponseOutput) GroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) *string { return v.GroupDescription }).(pulumi.StringPtrOutput)
}

// Number of volumes in volume group
func (o VolumeGroupMetaDataResponseOutput) VolumesCount() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeGroupMetaDataResponse) float64 { return v.VolumesCount }).(pulumi.Float64Output)
}

type VolumeGroupMetaDataResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeGroupMetaDataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeGroupMetaDataResponse)(nil)).Elem()
}

func (o VolumeGroupMetaDataResponsePtrOutput) ToVolumeGroupMetaDataResponsePtrOutput() VolumeGroupMetaDataResponsePtrOutput {
	return o
}

func (o VolumeGroupMetaDataResponsePtrOutput) ToVolumeGroupMetaDataResponsePtrOutputWithContext(ctx context.Context) VolumeGroupMetaDataResponsePtrOutput {
	return o
}

func (o VolumeGroupMetaDataResponsePtrOutput) Elem() VolumeGroupMetaDataResponseOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) VolumeGroupMetaDataResponse {
		if v != nil {
			return *v
		}
		var ret VolumeGroupMetaDataResponse
		return ret
	}).(VolumeGroupMetaDataResponseOutput)
}

// Application specific identifier
func (o VolumeGroupMetaDataResponsePtrOutput) ApplicationIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationIdentifier
	}).(pulumi.StringPtrOutput)
}

// Application Type
func (o VolumeGroupMetaDataResponsePtrOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationType
	}).(pulumi.StringPtrOutput)
}

// Application specific identifier of deployment rules for the volume group
func (o VolumeGroupMetaDataResponsePtrOutput) DeploymentSpecId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentSpecId
	}).(pulumi.StringPtrOutput)
}

// Application specific placement rules for the volume group
func (o VolumeGroupMetaDataResponsePtrOutput) GlobalPlacementRules() PlacementKeyValuePairsResponseArrayOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) []PlacementKeyValuePairsResponse {
		if v == nil {
			return nil
		}
		return v.GlobalPlacementRules
	}).(PlacementKeyValuePairsResponseArrayOutput)
}

// Group Description
func (o VolumeGroupMetaDataResponsePtrOutput) GroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) *string {
		if v == nil {
			return nil
		}
		return v.GroupDescription
	}).(pulumi.StringPtrOutput)
}

// Number of volumes in volume group
func (o VolumeGroupMetaDataResponsePtrOutput) VolumesCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeGroupMetaDataResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.VolumesCount
	}).(pulumi.Float64PtrOutput)
}

// Volume resource
type VolumeGroupVolumeProperties struct {
	// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
	AvsDataStore *string `pulumi:"avsDataStore"`
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId *string `pulumi:"backupId"`
	// Pool Resource Id used in case of creating a volume through volume group
	CapacityPoolResourceId *string `pulumi:"capacityPoolResourceId"`
	// Specifies whether Cool Access(tiering) is enabled for the volume.
	CoolAccess *bool `pulumi:"coolAccess"`
	// Specifies the number of days after which data that is not accessed by clients will be tiered.
	CoolnessPeriod *int `pulumi:"coolnessPeriod"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken string `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection *VolumePropertiesDataProtection `pulumi:"dataProtection"`
	// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
	DefaultGroupQuotaInKiBs *float64 `pulumi:"defaultGroupQuotaInKiBs"`
	// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
	DefaultUserQuotaInKiBs *float64 `pulumi:"defaultUserQuotaInKiBs"`
	// Flag indicating whether subvolume operations are enabled on the volume
	EnableSubvolumes *string `pulumi:"enableSubvolumes"`
	// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
	EncryptionKeySource *string `pulumi:"encryptionKeySource"`
	// Set of export policy rules
	ExportPolicy *VolumePropertiesExportPolicy `pulumi:"exportPolicy"`
	// Specifies if default quota is enabled for the volume.
	IsDefaultQuotaEnabled *bool `pulumi:"isDefaultQuotaEnabled"`
	// Restoring
	IsRestoring *bool `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Specifies whether LDAP is enabled or not for a given NFS volume.
	LdapEnabled *bool `pulumi:"ldapEnabled"`
	// Resource name
	Name *string `pulumi:"name"`
	// Basic network, or Standard features available to the volume.
	NetworkFeatures *string `pulumi:"networkFeatures"`
	// Application specific placement rules for the particular volume
	PlacementRules []PlacementKeyValuePairs `pulumi:"placementRules"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// Proximity placement group associated with the volume
	ProximityPlacementGroup *string `pulumi:"proximityPlacementGroup"`
	// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
	SecurityStyle *string `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Enables continuously available share property for smb volume. Only applicable for SMB volume
	SmbContinuouslyAvailable *bool `pulumi:"smbContinuouslyAvailable"`
	// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
	SmbEncryption *bool `pulumi:"smbEncryption"`
	// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible *bool `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId string `pulumi:"subnetId"`
	// Resource tags
	Tags            map[string]string `pulumi:"tags"`
	ThroughputMibps *float64          `pulumi:"throughputMibps"`
	// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
	UnixPermissions *string `pulumi:"unixPermissions"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold float64 `pulumi:"usageThreshold"`
	// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
	VolumeSpecName *string `pulumi:"volumeSpecName"`
	// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
	VolumeType *string `pulumi:"volumeType"`
}

// Defaults sets the appropriate defaults for VolumeGroupVolumeProperties
func (val *VolumeGroupVolumeProperties) Defaults() *VolumeGroupVolumeProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AvsDataStore == nil {
		avsDataStore_ := "Disabled"
		tmp.AvsDataStore = &avsDataStore_
	}
	if tmp.CoolAccess == nil {
		coolAccess_ := false
		tmp.CoolAccess = &coolAccess_
	}
	if tmp.DefaultGroupQuotaInKiBs == nil {
		defaultGroupQuotaInKiBs_ := 0.0
		tmp.DefaultGroupQuotaInKiBs = &defaultGroupQuotaInKiBs_
	}
	if tmp.DefaultUserQuotaInKiBs == nil {
		defaultUserQuotaInKiBs_ := 0.0
		tmp.DefaultUserQuotaInKiBs = &defaultUserQuotaInKiBs_
	}
	if tmp.EnableSubvolumes == nil {
		enableSubvolumes_ := "Disabled"
		tmp.EnableSubvolumes = &enableSubvolumes_
	}
	if tmp.IsDefaultQuotaEnabled == nil {
		isDefaultQuotaEnabled_ := false
		tmp.IsDefaultQuotaEnabled = &isDefaultQuotaEnabled_
	}
	if tmp.KerberosEnabled == nil {
		kerberosEnabled_ := false
		tmp.KerberosEnabled = &kerberosEnabled_
	}
	if tmp.LdapEnabled == nil {
		ldapEnabled_ := false
		tmp.LdapEnabled = &ldapEnabled_
	}
	if tmp.NetworkFeatures == nil {
		networkFeatures_ := "Basic"
		tmp.NetworkFeatures = &networkFeatures_
	}
	if tmp.SecurityStyle == nil {
		securityStyle_ := "unix"
		tmp.SecurityStyle = &securityStyle_
	}
	if tmp.SmbContinuouslyAvailable == nil {
		smbContinuouslyAvailable_ := false
		tmp.SmbContinuouslyAvailable = &smbContinuouslyAvailable_
	}
	if tmp.SmbEncryption == nil {
		smbEncryption_ := false
		tmp.SmbEncryption = &smbEncryption_
	}
	if tmp.SnapshotDirectoryVisible == nil {
		snapshotDirectoryVisible_ := true
		tmp.SnapshotDirectoryVisible = &snapshotDirectoryVisible_
	}
	if tmp.UnixPermissions == nil {
		unixPermissions_ := "0770"
		tmp.UnixPermissions = &unixPermissions_
	}
	if isZero(tmp.UsageThreshold) {
		tmp.UsageThreshold = 107374182400.0
	}
	return &tmp
}

// VolumeGroupVolumePropertiesInput is an input type that accepts VolumeGroupVolumePropertiesArgs and VolumeGroupVolumePropertiesOutput values.
// You can construct a concrete instance of `VolumeGroupVolumePropertiesInput` via:
//
//	VolumeGroupVolumePropertiesArgs{...}
type VolumeGroupVolumePropertiesInput interface {
	pulumi.Input

	ToVolumeGroupVolumePropertiesOutput() VolumeGroupVolumePropertiesOutput
	ToVolumeGroupVolumePropertiesOutputWithContext(context.Context) VolumeGroupVolumePropertiesOutput
}

// Volume resource
type VolumeGroupVolumePropertiesArgs struct {
	// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
	AvsDataStore pulumi.StringPtrInput `pulumi:"avsDataStore"`
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId pulumi.StringPtrInput `pulumi:"backupId"`
	// Pool Resource Id used in case of creating a volume through volume group
	CapacityPoolResourceId pulumi.StringPtrInput `pulumi:"capacityPoolResourceId"`
	// Specifies whether Cool Access(tiering) is enabled for the volume.
	CoolAccess pulumi.BoolPtrInput `pulumi:"coolAccess"`
	// Specifies the number of days after which data that is not accessed by clients will be tiered.
	CoolnessPeriod pulumi.IntPtrInput `pulumi:"coolnessPeriod"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken pulumi.StringInput `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection VolumePropertiesDataProtectionPtrInput `pulumi:"dataProtection"`
	// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
	DefaultGroupQuotaInKiBs pulumi.Float64PtrInput `pulumi:"defaultGroupQuotaInKiBs"`
	// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
	DefaultUserQuotaInKiBs pulumi.Float64PtrInput `pulumi:"defaultUserQuotaInKiBs"`
	// Flag indicating whether subvolume operations are enabled on the volume
	EnableSubvolumes pulumi.StringPtrInput `pulumi:"enableSubvolumes"`
	// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
	EncryptionKeySource pulumi.StringPtrInput `pulumi:"encryptionKeySource"`
	// Set of export policy rules
	ExportPolicy VolumePropertiesExportPolicyPtrInput `pulumi:"exportPolicy"`
	// Specifies if default quota is enabled for the volume.
	IsDefaultQuotaEnabled pulumi.BoolPtrInput `pulumi:"isDefaultQuotaEnabled"`
	// Restoring
	IsRestoring pulumi.BoolPtrInput `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled pulumi.BoolPtrInput `pulumi:"kerberosEnabled"`
	// Specifies whether LDAP is enabled or not for a given NFS volume.
	LdapEnabled pulumi.BoolPtrInput `pulumi:"ldapEnabled"`
	// Resource name
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Basic network, or Standard features available to the volume.
	NetworkFeatures pulumi.StringPtrInput `pulumi:"networkFeatures"`
	// Application specific placement rules for the particular volume
	PlacementRules PlacementKeyValuePairsArrayInput `pulumi:"placementRules"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes pulumi.StringArrayInput `pulumi:"protocolTypes"`
	// Proximity placement group associated with the volume
	ProximityPlacementGroup pulumi.StringPtrInput `pulumi:"proximityPlacementGroup"`
	// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
	SecurityStyle pulumi.StringPtrInput `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel pulumi.StringPtrInput `pulumi:"serviceLevel"`
	// Enables continuously available share property for smb volume. Only applicable for SMB volume
	SmbContinuouslyAvailable pulumi.BoolPtrInput `pulumi:"smbContinuouslyAvailable"`
	// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
	SmbEncryption pulumi.BoolPtrInput `pulumi:"smbEncryption"`
	// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible pulumi.BoolPtrInput `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Resource tags
	Tags            pulumi.StringMapInput  `pulumi:"tags"`
	ThroughputMibps pulumi.Float64PtrInput `pulumi:"throughputMibps"`
	// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
	UnixPermissions pulumi.StringPtrInput `pulumi:"unixPermissions"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold pulumi.Float64Input `pulumi:"usageThreshold"`
	// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
	VolumeSpecName pulumi.StringPtrInput `pulumi:"volumeSpecName"`
	// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

// Defaults sets the appropriate defaults for VolumeGroupVolumePropertiesArgs
func (val *VolumeGroupVolumePropertiesArgs) Defaults() *VolumeGroupVolumePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AvsDataStore == nil {
		tmp.AvsDataStore = pulumi.StringPtr("Disabled")
	}
	if tmp.CoolAccess == nil {
		tmp.CoolAccess = pulumi.BoolPtr(false)
	}
	if tmp.DefaultGroupQuotaInKiBs == nil {
		tmp.DefaultGroupQuotaInKiBs = pulumi.Float64Ptr(0.0)
	}
	if tmp.DefaultUserQuotaInKiBs == nil {
		tmp.DefaultUserQuotaInKiBs = pulumi.Float64Ptr(0.0)
	}
	if tmp.EnableSubvolumes == nil {
		tmp.EnableSubvolumes = pulumi.StringPtr("Disabled")
	}
	if tmp.IsDefaultQuotaEnabled == nil {
		tmp.IsDefaultQuotaEnabled = pulumi.BoolPtr(false)
	}
	if tmp.KerberosEnabled == nil {
		tmp.KerberosEnabled = pulumi.BoolPtr(false)
	}
	if tmp.LdapEnabled == nil {
		tmp.LdapEnabled = pulumi.BoolPtr(false)
	}
	if tmp.NetworkFeatures == nil {
		tmp.NetworkFeatures = pulumi.StringPtr("Basic")
	}
	if tmp.SecurityStyle == nil {
		tmp.SecurityStyle = pulumi.StringPtr("unix")
	}
	if tmp.SmbContinuouslyAvailable == nil {
		tmp.SmbContinuouslyAvailable = pulumi.BoolPtr(false)
	}
	if tmp.SmbEncryption == nil {
		tmp.SmbEncryption = pulumi.BoolPtr(false)
	}
	if tmp.SnapshotDirectoryVisible == nil {
		tmp.SnapshotDirectoryVisible = pulumi.BoolPtr(true)
	}
	if tmp.UnixPermissions == nil {
		tmp.UnixPermissions = pulumi.StringPtr("0770")
	}
	if tmp.UsageThreshold == nil {
		tmp.UsageThreshold = pulumi.Float64(107374182400.0)
	}
	return &tmp
}
func (VolumeGroupVolumePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupVolumeProperties)(nil)).Elem()
}

func (i VolumeGroupVolumePropertiesArgs) ToVolumeGroupVolumePropertiesOutput() VolumeGroupVolumePropertiesOutput {
	return i.ToVolumeGroupVolumePropertiesOutputWithContext(context.Background())
}

func (i VolumeGroupVolumePropertiesArgs) ToVolumeGroupVolumePropertiesOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupVolumePropertiesOutput)
}

// VolumeGroupVolumePropertiesArrayInput is an input type that accepts VolumeGroupVolumePropertiesArray and VolumeGroupVolumePropertiesArrayOutput values.
// You can construct a concrete instance of `VolumeGroupVolumePropertiesArrayInput` via:
//
//	VolumeGroupVolumePropertiesArray{ VolumeGroupVolumePropertiesArgs{...} }
type VolumeGroupVolumePropertiesArrayInput interface {
	pulumi.Input

	ToVolumeGroupVolumePropertiesArrayOutput() VolumeGroupVolumePropertiesArrayOutput
	ToVolumeGroupVolumePropertiesArrayOutputWithContext(context.Context) VolumeGroupVolumePropertiesArrayOutput
}

type VolumeGroupVolumePropertiesArray []VolumeGroupVolumePropertiesInput

func (VolumeGroupVolumePropertiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupVolumeProperties)(nil)).Elem()
}

func (i VolumeGroupVolumePropertiesArray) ToVolumeGroupVolumePropertiesArrayOutput() VolumeGroupVolumePropertiesArrayOutput {
	return i.ToVolumeGroupVolumePropertiesArrayOutputWithContext(context.Background())
}

func (i VolumeGroupVolumePropertiesArray) ToVolumeGroupVolumePropertiesArrayOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeGroupVolumePropertiesArrayOutput)
}

// Volume resource
type VolumeGroupVolumePropertiesOutput struct{ *pulumi.OutputState }

func (VolumeGroupVolumePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupVolumeProperties)(nil)).Elem()
}

func (o VolumeGroupVolumePropertiesOutput) ToVolumeGroupVolumePropertiesOutput() VolumeGroupVolumePropertiesOutput {
	return o
}

func (o VolumeGroupVolumePropertiesOutput) ToVolumeGroupVolumePropertiesOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesOutput {
	return o
}

// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
func (o VolumeGroupVolumePropertiesOutput) AvsDataStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.AvsDataStore }).(pulumi.StringPtrOutput)
}

// UUID v4 or resource identifier used to identify the Backup.
func (o VolumeGroupVolumePropertiesOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Pool Resource Id used in case of creating a volume through volume group
func (o VolumeGroupVolumePropertiesOutput) CapacityPoolResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.CapacityPoolResourceId }).(pulumi.StringPtrOutput)
}

// Specifies whether Cool Access(tiering) is enabled for the volume.
func (o VolumeGroupVolumePropertiesOutput) CoolAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.CoolAccess }).(pulumi.BoolPtrOutput)
}

// Specifies the number of days after which data that is not accessed by clients will be tiered.
func (o VolumeGroupVolumePropertiesOutput) CoolnessPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *int { return v.CoolnessPeriod }).(pulumi.IntPtrOutput)
}

// A unique file path for the volume. Used when creating mount targets
func (o VolumeGroupVolumePropertiesOutput) CreationToken() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) string { return v.CreationToken }).(pulumi.StringOutput)
}

// DataProtection type volumes include an object containing details of the replication
func (o VolumeGroupVolumePropertiesOutput) DataProtection() VolumePropertiesDataProtectionPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *VolumePropertiesDataProtection { return v.DataProtection }).(VolumePropertiesDataProtectionPtrOutput)
}

// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
func (o VolumeGroupVolumePropertiesOutput) DefaultGroupQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *float64 { return v.DefaultGroupQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
func (o VolumeGroupVolumePropertiesOutput) DefaultUserQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *float64 { return v.DefaultUserQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// Flag indicating whether subvolume operations are enabled on the volume
func (o VolumeGroupVolumePropertiesOutput) EnableSubvolumes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.EnableSubvolumes }).(pulumi.StringPtrOutput)
}

// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
func (o VolumeGroupVolumePropertiesOutput) EncryptionKeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.EncryptionKeySource }).(pulumi.StringPtrOutput)
}

// Set of export policy rules
func (o VolumeGroupVolumePropertiesOutput) ExportPolicy() VolumePropertiesExportPolicyPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *VolumePropertiesExportPolicy { return v.ExportPolicy }).(VolumePropertiesExportPolicyPtrOutput)
}

// Specifies if default quota is enabled for the volume.
func (o VolumeGroupVolumePropertiesOutput) IsDefaultQuotaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.IsDefaultQuotaEnabled }).(pulumi.BoolPtrOutput)
}

// Restoring
func (o VolumeGroupVolumePropertiesOutput) IsRestoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.IsRestoring }).(pulumi.BoolPtrOutput)
}

// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
func (o VolumeGroupVolumePropertiesOutput) KerberosEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.KerberosEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether LDAP is enabled or not for a given NFS volume.
func (o VolumeGroupVolumePropertiesOutput) LdapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.LdapEnabled }).(pulumi.BoolPtrOutput)
}

// Resource name
func (o VolumeGroupVolumePropertiesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Basic network, or Standard features available to the volume.
func (o VolumeGroupVolumePropertiesOutput) NetworkFeatures() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.NetworkFeatures }).(pulumi.StringPtrOutput)
}

// Application specific placement rules for the particular volume
func (o VolumeGroupVolumePropertiesOutput) PlacementRules() PlacementKeyValuePairsArrayOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) []PlacementKeyValuePairs { return v.PlacementRules }).(PlacementKeyValuePairsArrayOutput)
}

// Set of protocol types, default NFSv3, CIFS for SMB protocol
func (o VolumeGroupVolumePropertiesOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// Proximity placement group associated with the volume
func (o VolumeGroupVolumePropertiesOutput) ProximityPlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.ProximityPlacementGroup }).(pulumi.StringPtrOutput)
}

// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
func (o VolumeGroupVolumePropertiesOutput) SecurityStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.SecurityStyle }).(pulumi.StringPtrOutput)
}

// The service level of the file system
func (o VolumeGroupVolumePropertiesOutput) ServiceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.ServiceLevel }).(pulumi.StringPtrOutput)
}

// Enables continuously available share property for smb volume. Only applicable for SMB volume
func (o VolumeGroupVolumePropertiesOutput) SmbContinuouslyAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.SmbContinuouslyAvailable }).(pulumi.BoolPtrOutput)
}

// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
func (o VolumeGroupVolumePropertiesOutput) SmbEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.SmbEncryption }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
func (o VolumeGroupVolumePropertiesOutput) SnapshotDirectoryVisible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *bool { return v.SnapshotDirectoryVisible }).(pulumi.BoolPtrOutput)
}

// UUID v4 or resource identifier used to identify the Snapshot.
func (o VolumeGroupVolumePropertiesOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
func (o VolumeGroupVolumePropertiesOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Resource tags
func (o VolumeGroupVolumePropertiesOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VolumeGroupVolumePropertiesOutput) ThroughputMibps() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *float64 { return v.ThroughputMibps }).(pulumi.Float64PtrOutput)
}

// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
func (o VolumeGroupVolumePropertiesOutput) UnixPermissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.UnixPermissions }).(pulumi.StringPtrOutput)
}

// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
func (o VolumeGroupVolumePropertiesOutput) UsageThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) float64 { return v.UsageThreshold }).(pulumi.Float64Output)
}

// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
func (o VolumeGroupVolumePropertiesOutput) VolumeSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.VolumeSpecName }).(pulumi.StringPtrOutput)
}

// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
func (o VolumeGroupVolumePropertiesOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumeProperties) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type VolumeGroupVolumePropertiesArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupVolumePropertiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupVolumeProperties)(nil)).Elem()
}

func (o VolumeGroupVolumePropertiesArrayOutput) ToVolumeGroupVolumePropertiesArrayOutput() VolumeGroupVolumePropertiesArrayOutput {
	return o
}

func (o VolumeGroupVolumePropertiesArrayOutput) ToVolumeGroupVolumePropertiesArrayOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesArrayOutput {
	return o
}

func (o VolumeGroupVolumePropertiesArrayOutput) Index(i pulumi.IntInput) VolumeGroupVolumePropertiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeGroupVolumeProperties {
		return vs[0].([]VolumeGroupVolumeProperties)[vs[1].(int)]
	}).(VolumeGroupVolumePropertiesOutput)
}

// Volume resource
type VolumeGroupVolumePropertiesResponse struct {
	// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
	AvsDataStore *string `pulumi:"avsDataStore"`
	// UUID v4 or resource identifier used to identify the Backup.
	BackupId *string `pulumi:"backupId"`
	// Unique Baremetal Tenant Identifier.
	BaremetalTenantId string `pulumi:"baremetalTenantId"`
	// Pool Resource Id used in case of creating a volume through volume group
	CapacityPoolResourceId *string `pulumi:"capacityPoolResourceId"`
	// When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
	CloneProgress int `pulumi:"cloneProgress"`
	// Specifies whether Cool Access(tiering) is enabled for the volume.
	CoolAccess *bool `pulumi:"coolAccess"`
	// Specifies the number of days after which data that is not accessed by clients will be tiered.
	CoolnessPeriod *int `pulumi:"coolnessPeriod"`
	// A unique file path for the volume. Used when creating mount targets
	CreationToken string `pulumi:"creationToken"`
	// DataProtection type volumes include an object containing details of the replication
	DataProtection *VolumePropertiesResponseDataProtection `pulumi:"dataProtection"`
	// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
	DefaultGroupQuotaInKiBs *float64 `pulumi:"defaultGroupQuotaInKiBs"`
	// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
	DefaultUserQuotaInKiBs *float64 `pulumi:"defaultUserQuotaInKiBs"`
	// Flag indicating whether subvolume operations are enabled on the volume
	EnableSubvolumes *string `pulumi:"enableSubvolumes"`
	// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
	EncryptionKeySource *string `pulumi:"encryptionKeySource"`
	// Set of export policy rules
	ExportPolicy *VolumePropertiesResponseExportPolicy `pulumi:"exportPolicy"`
	// Unique FileSystem Identifier.
	FileSystemId string `pulumi:"fileSystemId"`
	// Resource Id
	Id string `pulumi:"id"`
	// Specifies if default quota is enabled for the volume.
	IsDefaultQuotaEnabled *bool `pulumi:"isDefaultQuotaEnabled"`
	// Restoring
	IsRestoring *bool `pulumi:"isRestoring"`
	// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
	KerberosEnabled *bool `pulumi:"kerberosEnabled"`
	// Specifies whether LDAP is enabled or not for a given NFS volume.
	LdapEnabled *bool `pulumi:"ldapEnabled"`
	// Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
	MaximumNumberOfFiles float64 `pulumi:"maximumNumberOfFiles"`
	// List of mount targets
	MountTargets []MountTargetPropertiesResponse `pulumi:"mountTargets"`
	// Resource name
	Name *string `pulumi:"name"`
	// Basic network, or Standard features available to the volume.
	NetworkFeatures *string `pulumi:"networkFeatures"`
	// Network Sibling Set ID for the the group of volumes sharing networking resources.
	NetworkSiblingSetId string `pulumi:"networkSiblingSetId"`
	// Application specific placement rules for the particular volume
	PlacementRules []PlacementKeyValuePairsResponse `pulumi:"placementRules"`
	// Set of protocol types, default NFSv3, CIFS for SMB protocol
	ProtocolTypes []string `pulumi:"protocolTypes"`
	// Azure lifecycle management
	ProvisioningState string `pulumi:"provisioningState"`
	// Proximity placement group associated with the volume
	ProximityPlacementGroup *string `pulumi:"proximityPlacementGroup"`
	// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
	SecurityStyle *string `pulumi:"securityStyle"`
	// The service level of the file system
	ServiceLevel *string `pulumi:"serviceLevel"`
	// Enables continuously available share property for smb volume. Only applicable for SMB volume
	SmbContinuouslyAvailable *bool `pulumi:"smbContinuouslyAvailable"`
	// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
	SmbEncryption *bool `pulumi:"smbEncryption"`
	// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
	SnapshotDirectoryVisible *bool `pulumi:"snapshotDirectoryVisible"`
	// UUID v4 or resource identifier used to identify the Snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// Provides storage to network proximity information for the volume.
	StorageToNetworkProximity string `pulumi:"storageToNetworkProximity"`
	// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
	SubnetId string `pulumi:"subnetId"`
	// T2 network information
	T2Network string `pulumi:"t2Network"`
	// Resource tags
	Tags            map[string]string `pulumi:"tags"`
	ThroughputMibps *float64          `pulumi:"throughputMibps"`
	// Resource type
	Type string `pulumi:"type"`
	// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
	UnixPermissions *string `pulumi:"unixPermissions"`
	// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
	UsageThreshold float64 `pulumi:"usageThreshold"`
	// Volume Group Name
	VolumeGroupName string `pulumi:"volumeGroupName"`
	// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
	VolumeSpecName *string `pulumi:"volumeSpecName"`
	// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
	VolumeType *string `pulumi:"volumeType"`
}

// Defaults sets the appropriate defaults for VolumeGroupVolumePropertiesResponse
func (val *VolumeGroupVolumePropertiesResponse) Defaults() *VolumeGroupVolumePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AvsDataStore == nil {
		avsDataStore_ := "Disabled"
		tmp.AvsDataStore = &avsDataStore_
	}
	if tmp.CoolAccess == nil {
		coolAccess_ := false
		tmp.CoolAccess = &coolAccess_
	}
	if tmp.DefaultGroupQuotaInKiBs == nil {
		defaultGroupQuotaInKiBs_ := 0.0
		tmp.DefaultGroupQuotaInKiBs = &defaultGroupQuotaInKiBs_
	}
	if tmp.DefaultUserQuotaInKiBs == nil {
		defaultUserQuotaInKiBs_ := 0.0
		tmp.DefaultUserQuotaInKiBs = &defaultUserQuotaInKiBs_
	}
	if tmp.EnableSubvolumes == nil {
		enableSubvolumes_ := "Disabled"
		tmp.EnableSubvolumes = &enableSubvolumes_
	}
	if tmp.IsDefaultQuotaEnabled == nil {
		isDefaultQuotaEnabled_ := false
		tmp.IsDefaultQuotaEnabled = &isDefaultQuotaEnabled_
	}
	if tmp.KerberosEnabled == nil {
		kerberosEnabled_ := false
		tmp.KerberosEnabled = &kerberosEnabled_
	}
	if tmp.LdapEnabled == nil {
		ldapEnabled_ := false
		tmp.LdapEnabled = &ldapEnabled_
	}
	if tmp.NetworkFeatures == nil {
		networkFeatures_ := "Basic"
		tmp.NetworkFeatures = &networkFeatures_
	}
	if tmp.SecurityStyle == nil {
		securityStyle_ := "unix"
		tmp.SecurityStyle = &securityStyle_
	}
	if tmp.SmbContinuouslyAvailable == nil {
		smbContinuouslyAvailable_ := false
		tmp.SmbContinuouslyAvailable = &smbContinuouslyAvailable_
	}
	if tmp.SmbEncryption == nil {
		smbEncryption_ := false
		tmp.SmbEncryption = &smbEncryption_
	}
	if tmp.SnapshotDirectoryVisible == nil {
		snapshotDirectoryVisible_ := true
		tmp.SnapshotDirectoryVisible = &snapshotDirectoryVisible_
	}
	if tmp.UnixPermissions == nil {
		unixPermissions_ := "0770"
		tmp.UnixPermissions = &unixPermissions_
	}
	if isZero(tmp.UsageThreshold) {
		tmp.UsageThreshold = 107374182400.0
	}
	return &tmp
}

// Volume resource
type VolumeGroupVolumePropertiesResponseOutput struct{ *pulumi.OutputState }

func (VolumeGroupVolumePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeGroupVolumePropertiesResponse)(nil)).Elem()
}

func (o VolumeGroupVolumePropertiesResponseOutput) ToVolumeGroupVolumePropertiesResponseOutput() VolumeGroupVolumePropertiesResponseOutput {
	return o
}

func (o VolumeGroupVolumePropertiesResponseOutput) ToVolumeGroupVolumePropertiesResponseOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesResponseOutput {
	return o
}

// Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
func (o VolumeGroupVolumePropertiesResponseOutput) AvsDataStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.AvsDataStore }).(pulumi.StringPtrOutput)
}

// UUID v4 or resource identifier used to identify the Backup.
func (o VolumeGroupVolumePropertiesResponseOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.BackupId }).(pulumi.StringPtrOutput)
}

// Unique Baremetal Tenant Identifier.
func (o VolumeGroupVolumePropertiesResponseOutput) BaremetalTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.BaremetalTenantId }).(pulumi.StringOutput)
}

// Pool Resource Id used in case of creating a volume through volume group
func (o VolumeGroupVolumePropertiesResponseOutput) CapacityPoolResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.CapacityPoolResourceId }).(pulumi.StringPtrOutput)
}

// When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning.
func (o VolumeGroupVolumePropertiesResponseOutput) CloneProgress() pulumi.IntOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) int { return v.CloneProgress }).(pulumi.IntOutput)
}

// Specifies whether Cool Access(tiering) is enabled for the volume.
func (o VolumeGroupVolumePropertiesResponseOutput) CoolAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.CoolAccess }).(pulumi.BoolPtrOutput)
}

// Specifies the number of days after which data that is not accessed by clients will be tiered.
func (o VolumeGroupVolumePropertiesResponseOutput) CoolnessPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *int { return v.CoolnessPeriod }).(pulumi.IntPtrOutput)
}

// A unique file path for the volume. Used when creating mount targets
func (o VolumeGroupVolumePropertiesResponseOutput) CreationToken() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.CreationToken }).(pulumi.StringOutput)
}

// DataProtection type volumes include an object containing details of the replication
func (o VolumeGroupVolumePropertiesResponseOutput) DataProtection() VolumePropertiesResponseDataProtectionPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *VolumePropertiesResponseDataProtection {
		return v.DataProtection
	}).(VolumePropertiesResponseDataProtectionPtrOutput)
}

// Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
func (o VolumeGroupVolumePropertiesResponseOutput) DefaultGroupQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *float64 { return v.DefaultGroupQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
func (o VolumeGroupVolumePropertiesResponseOutput) DefaultUserQuotaInKiBs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *float64 { return v.DefaultUserQuotaInKiBs }).(pulumi.Float64PtrOutput)
}

// Flag indicating whether subvolume operations are enabled on the volume
func (o VolumeGroupVolumePropertiesResponseOutput) EnableSubvolumes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.EnableSubvolumes }).(pulumi.StringPtrOutput)
}

// Encryption Key Source. Possible values are: 'Microsoft.NetApp'
func (o VolumeGroupVolumePropertiesResponseOutput) EncryptionKeySource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.EncryptionKeySource }).(pulumi.StringPtrOutput)
}

// Set of export policy rules
func (o VolumeGroupVolumePropertiesResponseOutput) ExportPolicy() VolumePropertiesResponseExportPolicyPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *VolumePropertiesResponseExportPolicy {
		return v.ExportPolicy
	}).(VolumePropertiesResponseExportPolicyPtrOutput)
}

// Unique FileSystem Identifier.
func (o VolumeGroupVolumePropertiesResponseOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// Resource Id
func (o VolumeGroupVolumePropertiesResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies if default quota is enabled for the volume.
func (o VolumeGroupVolumePropertiesResponseOutput) IsDefaultQuotaEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.IsDefaultQuotaEnabled }).(pulumi.BoolPtrOutput)
}

// Restoring
func (o VolumeGroupVolumePropertiesResponseOutput) IsRestoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.IsRestoring }).(pulumi.BoolPtrOutput)
}

// Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
func (o VolumeGroupVolumePropertiesResponseOutput) KerberosEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.KerberosEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies whether LDAP is enabled or not for a given NFS volume.
func (o VolumeGroupVolumePropertiesResponseOutput) LdapEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.LdapEnabled }).(pulumi.BoolPtrOutput)
}

// Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB.
func (o VolumeGroupVolumePropertiesResponseOutput) MaximumNumberOfFiles() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) float64 { return v.MaximumNumberOfFiles }).(pulumi.Float64Output)
}

// List of mount targets
func (o VolumeGroupVolumePropertiesResponseOutput) MountTargets() MountTargetPropertiesResponseArrayOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) []MountTargetPropertiesResponse { return v.MountTargets }).(MountTargetPropertiesResponseArrayOutput)
}

// Resource name
func (o VolumeGroupVolumePropertiesResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Basic network, or Standard features available to the volume.
func (o VolumeGroupVolumePropertiesResponseOutput) NetworkFeatures() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.NetworkFeatures }).(pulumi.StringPtrOutput)
}

// Network Sibling Set ID for the the group of volumes sharing networking resources.
func (o VolumeGroupVolumePropertiesResponseOutput) NetworkSiblingSetId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.NetworkSiblingSetId }).(pulumi.StringOutput)
}

// Application specific placement rules for the particular volume
func (o VolumeGroupVolumePropertiesResponseOutput) PlacementRules() PlacementKeyValuePairsResponseArrayOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) []PlacementKeyValuePairsResponse { return v.PlacementRules }).(PlacementKeyValuePairsResponseArrayOutput)
}

// Set of protocol types, default NFSv3, CIFS for SMB protocol
func (o VolumeGroupVolumePropertiesResponseOutput) ProtocolTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) []string { return v.ProtocolTypes }).(pulumi.StringArrayOutput)
}

// Azure lifecycle management
func (o VolumeGroupVolumePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Proximity placement group associated with the volume
func (o VolumeGroupVolumePropertiesResponseOutput) ProximityPlacementGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.ProximityPlacementGroup }).(pulumi.StringPtrOutput)
}

// The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
func (o VolumeGroupVolumePropertiesResponseOutput) SecurityStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.SecurityStyle }).(pulumi.StringPtrOutput)
}

// The service level of the file system
func (o VolumeGroupVolumePropertiesResponseOutput) ServiceLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.ServiceLevel }).(pulumi.StringPtrOutput)
}

// Enables continuously available share property for smb volume. Only applicable for SMB volume
func (o VolumeGroupVolumePropertiesResponseOutput) SmbContinuouslyAvailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.SmbContinuouslyAvailable }).(pulumi.BoolPtrOutput)
}

// Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
func (o VolumeGroupVolumePropertiesResponseOutput) SmbEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.SmbEncryption }).(pulumi.BoolPtrOutput)
}

// If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
func (o VolumeGroupVolumePropertiesResponseOutput) SnapshotDirectoryVisible() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *bool { return v.SnapshotDirectoryVisible }).(pulumi.BoolPtrOutput)
}

// UUID v4 or resource identifier used to identify the Snapshot.
func (o VolumeGroupVolumePropertiesResponseOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// Provides storage to network proximity information for the volume.
func (o VolumeGroupVolumePropertiesResponseOutput) StorageToNetworkProximity() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.StorageToNetworkProximity }).(pulumi.StringOutput)
}

// The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
func (o VolumeGroupVolumePropertiesResponseOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.SubnetId }).(pulumi.StringOutput)
}

// T2 network information
func (o VolumeGroupVolumePropertiesResponseOutput) T2Network() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.T2Network }).(pulumi.StringOutput)
}

// Resource tags
func (o VolumeGroupVolumePropertiesResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VolumeGroupVolumePropertiesResponseOutput) ThroughputMibps() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *float64 { return v.ThroughputMibps }).(pulumi.Float64PtrOutput)
}

// Resource type
func (o VolumeGroupVolumePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
func (o VolumeGroupVolumePropertiesResponseOutput) UnixPermissions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.UnixPermissions }).(pulumi.StringPtrOutput)
}

// Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
func (o VolumeGroupVolumePropertiesResponseOutput) UsageThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) float64 { return v.UsageThreshold }).(pulumi.Float64Output)
}

// Volume Group Name
func (o VolumeGroupVolumePropertiesResponseOutput) VolumeGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) string { return v.VolumeGroupName }).(pulumi.StringOutput)
}

// Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
func (o VolumeGroupVolumePropertiesResponseOutput) VolumeSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.VolumeSpecName }).(pulumi.StringPtrOutput)
}

// What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
func (o VolumeGroupVolumePropertiesResponseOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeGroupVolumePropertiesResponse) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type VolumeGroupVolumePropertiesResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeGroupVolumePropertiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeGroupVolumePropertiesResponse)(nil)).Elem()
}

func (o VolumeGroupVolumePropertiesResponseArrayOutput) ToVolumeGroupVolumePropertiesResponseArrayOutput() VolumeGroupVolumePropertiesResponseArrayOutput {
	return o
}

func (o VolumeGroupVolumePropertiesResponseArrayOutput) ToVolumeGroupVolumePropertiesResponseArrayOutputWithContext(ctx context.Context) VolumeGroupVolumePropertiesResponseArrayOutput {
	return o
}

func (o VolumeGroupVolumePropertiesResponseArrayOutput) Index(i pulumi.IntInput) VolumeGroupVolumePropertiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeGroupVolumePropertiesResponse {
		return vs[0].([]VolumeGroupVolumePropertiesResponse)[vs[1].(int)]
	}).(VolumeGroupVolumePropertiesResponseOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtection struct {
	// Backup Properties
	Backup *VolumeBackupProperties `pulumi:"backup"`
	// Replication properties
	Replication *ReplicationObject `pulumi:"replication"`
	// Snapshot properties.
	Snapshot *VolumeSnapshotProperties `pulumi:"snapshot"`
}

// VolumePropertiesDataProtectionInput is an input type that accepts VolumePropertiesDataProtectionArgs and VolumePropertiesDataProtectionOutput values.
// You can construct a concrete instance of `VolumePropertiesDataProtectionInput` via:
//
//	VolumePropertiesDataProtectionArgs{...}
type VolumePropertiesDataProtectionInput interface {
	pulumi.Input

	ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput
	ToVolumePropertiesDataProtectionOutputWithContext(context.Context) VolumePropertiesDataProtectionOutput
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtectionArgs struct {
	// Backup Properties
	Backup VolumeBackupPropertiesPtrInput `pulumi:"backup"`
	// Replication properties
	Replication ReplicationObjectPtrInput `pulumi:"replication"`
	// Snapshot properties.
	Snapshot VolumeSnapshotPropertiesPtrInput `pulumi:"snapshot"`
}

func (VolumePropertiesDataProtectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesDataProtection)(nil)).Elem()
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput {
	return i.ToVolumePropertiesDataProtectionOutputWithContext(context.Background())
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionOutput)
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return i.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesDataProtectionArgs) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionOutput).ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx)
}

// VolumePropertiesDataProtectionPtrInput is an input type that accepts VolumePropertiesDataProtectionArgs, VolumePropertiesDataProtectionPtr and VolumePropertiesDataProtectionPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesDataProtectionPtrInput` via:
//
//	        VolumePropertiesDataProtectionArgs{...}
//
//	or:
//
//	        nil
type VolumePropertiesDataProtectionPtrInput interface {
	pulumi.Input

	ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput
	ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Context) VolumePropertiesDataProtectionPtrOutput
}

type volumePropertiesDataProtectionPtrType VolumePropertiesDataProtectionArgs

func VolumePropertiesDataProtectionPtr(v *VolumePropertiesDataProtectionArgs) VolumePropertiesDataProtectionPtrInput {
	return (*volumePropertiesDataProtectionPtrType)(v)
}

func (*volumePropertiesDataProtectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesDataProtection)(nil)).Elem()
}

func (i *volumePropertiesDataProtectionPtrType) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return i.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesDataProtectionPtrType) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesDataProtectionPtrOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesDataProtectionOutput struct{ *pulumi.OutputState }

func (VolumePropertiesDataProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesDataProtection)(nil)).Elem()
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionOutput() VolumePropertiesDataProtectionOutput {
	return o
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionOutput {
	return o
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return o.ToVolumePropertiesDataProtectionPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesDataProtectionOutput) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumePropertiesDataProtection) *VolumePropertiesDataProtection {
		return &v
	}).(VolumePropertiesDataProtectionPtrOutput)
}

// Backup Properties
func (o VolumePropertiesDataProtectionOutput) Backup() VolumeBackupPropertiesPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *VolumeBackupProperties { return v.Backup }).(VolumeBackupPropertiesPtrOutput)
}

// Replication properties
func (o VolumePropertiesDataProtectionOutput) Replication() ReplicationObjectPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *ReplicationObject { return v.Replication }).(ReplicationObjectPtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesDataProtectionOutput) Snapshot() VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v VolumePropertiesDataProtection) *VolumeSnapshotProperties { return v.Snapshot }).(VolumeSnapshotPropertiesPtrOutput)
}

type VolumePropertiesDataProtectionPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesDataProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesDataProtection)(nil)).Elem()
}

func (o VolumePropertiesDataProtectionPtrOutput) ToVolumePropertiesDataProtectionPtrOutput() VolumePropertiesDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesDataProtectionPtrOutput) ToVolumePropertiesDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesDataProtectionPtrOutput) Elem() VolumePropertiesDataProtectionOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) VolumePropertiesDataProtection {
		if v != nil {
			return *v
		}
		var ret VolumePropertiesDataProtection
		return ret
	}).(VolumePropertiesDataProtectionOutput)
}

// Backup Properties
func (o VolumePropertiesDataProtectionPtrOutput) Backup() VolumeBackupPropertiesPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *VolumeBackupProperties {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(VolumeBackupPropertiesPtrOutput)
}

// Replication properties
func (o VolumePropertiesDataProtectionPtrOutput) Replication() ReplicationObjectPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *ReplicationObject {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(ReplicationObjectPtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesDataProtectionPtrOutput) Snapshot() VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyT(func(v *VolumePropertiesDataProtection) *VolumeSnapshotProperties {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(VolumeSnapshotPropertiesPtrOutput)
}

// Set of export policy rules
type VolumePropertiesExportPolicy struct {
	// Export policy rule
	Rules []ExportPolicyRule `pulumi:"rules"`
}

// VolumePropertiesExportPolicyInput is an input type that accepts VolumePropertiesExportPolicyArgs and VolumePropertiesExportPolicyOutput values.
// You can construct a concrete instance of `VolumePropertiesExportPolicyInput` via:
//
//	VolumePropertiesExportPolicyArgs{...}
type VolumePropertiesExportPolicyInput interface {
	pulumi.Input

	ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput
	ToVolumePropertiesExportPolicyOutputWithContext(context.Context) VolumePropertiesExportPolicyOutput
}

// Set of export policy rules
type VolumePropertiesExportPolicyArgs struct {
	// Export policy rule
	Rules ExportPolicyRuleArrayInput `pulumi:"rules"`
}

func (VolumePropertiesExportPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesExportPolicy)(nil)).Elem()
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput {
	return i.ToVolumePropertiesExportPolicyOutputWithContext(context.Background())
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyOutput)
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return i.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (i VolumePropertiesExportPolicyArgs) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyOutput).ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx)
}

// VolumePropertiesExportPolicyPtrInput is an input type that accepts VolumePropertiesExportPolicyArgs, VolumePropertiesExportPolicyPtr and VolumePropertiesExportPolicyPtrOutput values.
// You can construct a concrete instance of `VolumePropertiesExportPolicyPtrInput` via:
//
//	        VolumePropertiesExportPolicyArgs{...}
//
//	or:
//
//	        nil
type VolumePropertiesExportPolicyPtrInput interface {
	pulumi.Input

	ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput
	ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Context) VolumePropertiesExportPolicyPtrOutput
}

type volumePropertiesExportPolicyPtrType VolumePropertiesExportPolicyArgs

func VolumePropertiesExportPolicyPtr(v *VolumePropertiesExportPolicyArgs) VolumePropertiesExportPolicyPtrInput {
	return (*volumePropertiesExportPolicyPtrType)(v)
}

func (*volumePropertiesExportPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesExportPolicy)(nil)).Elem()
}

func (i *volumePropertiesExportPolicyPtrType) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return i.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (i *volumePropertiesExportPolicyPtrType) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumePropertiesExportPolicyPtrOutput)
}

// Set of export policy rules
type VolumePropertiesExportPolicyOutput struct{ *pulumi.OutputState }

func (VolumePropertiesExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyOutput() VolumePropertiesExportPolicyOutput {
	return o
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyOutput {
	return o
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return o.ToVolumePropertiesExportPolicyPtrOutputWithContext(context.Background())
}

func (o VolumePropertiesExportPolicyOutput) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumePropertiesExportPolicy) *VolumePropertiesExportPolicy {
		return &v
	}).(VolumePropertiesExportPolicyPtrOutput)
}

// Export policy rule
func (o VolumePropertiesExportPolicyOutput) Rules() ExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v VolumePropertiesExportPolicy) []ExportPolicyRule { return v.Rules }).(ExportPolicyRuleArrayOutput)
}

type VolumePropertiesExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesExportPolicyPtrOutput) ToVolumePropertiesExportPolicyPtrOutput() VolumePropertiesExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesExportPolicyPtrOutput) ToVolumePropertiesExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesExportPolicyPtrOutput) Elem() VolumePropertiesExportPolicyOutput {
	return o.ApplyT(func(v *VolumePropertiesExportPolicy) VolumePropertiesExportPolicy {
		if v != nil {
			return *v
		}
		var ret VolumePropertiesExportPolicy
		return ret
	}).(VolumePropertiesExportPolicyOutput)
}

// Export policy rule
func (o VolumePropertiesExportPolicyPtrOutput) Rules() ExportPolicyRuleArrayOutput {
	return o.ApplyT(func(v *VolumePropertiesExportPolicy) []ExportPolicyRule {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ExportPolicyRuleArrayOutput)
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesResponseDataProtection struct {
	// Backup Properties
	Backup *VolumeBackupPropertiesResponse `pulumi:"backup"`
	// Replication properties
	Replication *ReplicationObjectResponse `pulumi:"replication"`
	// Snapshot properties.
	Snapshot *VolumeSnapshotPropertiesResponse `pulumi:"snapshot"`
}

// DataProtection type volumes include an object containing details of the replication
type VolumePropertiesResponseDataProtectionOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseDataProtectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionOutput() VolumePropertiesResponseDataProtectionOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionOutput) ToVolumePropertiesResponseDataProtectionOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionOutput {
	return o
}

// Backup Properties
func (o VolumePropertiesResponseDataProtectionOutput) Backup() VolumeBackupPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *VolumeBackupPropertiesResponse { return v.Backup }).(VolumeBackupPropertiesResponsePtrOutput)
}

// Replication properties
func (o VolumePropertiesResponseDataProtectionOutput) Replication() ReplicationObjectResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *ReplicationObjectResponse { return v.Replication }).(ReplicationObjectResponsePtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesResponseDataProtectionOutput) Snapshot() VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v VolumePropertiesResponseDataProtection) *VolumeSnapshotPropertiesResponse { return v.Snapshot }).(VolumeSnapshotPropertiesResponsePtrOutput)
}

type VolumePropertiesResponseDataProtectionPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseDataProtectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseDataProtection)(nil)).Elem()
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) ToVolumePropertiesResponseDataProtectionPtrOutput() VolumePropertiesResponseDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) ToVolumePropertiesResponseDataProtectionPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseDataProtectionPtrOutput {
	return o
}

func (o VolumePropertiesResponseDataProtectionPtrOutput) Elem() VolumePropertiesResponseDataProtectionOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) VolumePropertiesResponseDataProtection {
		if v != nil {
			return *v
		}
		var ret VolumePropertiesResponseDataProtection
		return ret
	}).(VolumePropertiesResponseDataProtectionOutput)
}

// Backup Properties
func (o VolumePropertiesResponseDataProtectionPtrOutput) Backup() VolumeBackupPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *VolumeBackupPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Backup
	}).(VolumeBackupPropertiesResponsePtrOutput)
}

// Replication properties
func (o VolumePropertiesResponseDataProtectionPtrOutput) Replication() ReplicationObjectResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *ReplicationObjectResponse {
		if v == nil {
			return nil
		}
		return v.Replication
	}).(ReplicationObjectResponsePtrOutput)
}

// Snapshot properties.
func (o VolumePropertiesResponseDataProtectionPtrOutput) Snapshot() VolumeSnapshotPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseDataProtection) *VolumeSnapshotPropertiesResponse {
		if v == nil {
			return nil
		}
		return v.Snapshot
	}).(VolumeSnapshotPropertiesResponsePtrOutput)
}

// Set of export policy rules
type VolumePropertiesResponseExportPolicy struct {
	// Export policy rule
	Rules []ExportPolicyRuleResponse `pulumi:"rules"`
}

// Set of export policy rules
type VolumePropertiesResponseExportPolicyOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseExportPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyOutput() VolumePropertiesResponseExportPolicyOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyOutput) ToVolumePropertiesResponseExportPolicyOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyOutput {
	return o
}

// Export policy rule
func (o VolumePropertiesResponseExportPolicyOutput) Rules() ExportPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v VolumePropertiesResponseExportPolicy) []ExportPolicyRuleResponse { return v.Rules }).(ExportPolicyRuleResponseArrayOutput)
}

type VolumePropertiesResponseExportPolicyPtrOutput struct{ *pulumi.OutputState }

func (VolumePropertiesResponseExportPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumePropertiesResponseExportPolicy)(nil)).Elem()
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) ToVolumePropertiesResponseExportPolicyPtrOutput() VolumePropertiesResponseExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) ToVolumePropertiesResponseExportPolicyPtrOutputWithContext(ctx context.Context) VolumePropertiesResponseExportPolicyPtrOutput {
	return o
}

func (o VolumePropertiesResponseExportPolicyPtrOutput) Elem() VolumePropertiesResponseExportPolicyOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseExportPolicy) VolumePropertiesResponseExportPolicy {
		if v != nil {
			return *v
		}
		var ret VolumePropertiesResponseExportPolicy
		return ret
	}).(VolumePropertiesResponseExportPolicyOutput)
}

// Export policy rule
func (o VolumePropertiesResponseExportPolicyPtrOutput) Rules() ExportPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v *VolumePropertiesResponseExportPolicy) []ExportPolicyRuleResponse {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(ExportPolicyRuleResponseArrayOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotProperties struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId *string `pulumi:"snapshotPolicyId"`
}

// VolumeSnapshotPropertiesInput is an input type that accepts VolumeSnapshotPropertiesArgs and VolumeSnapshotPropertiesOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesInput` via:
//
//	VolumeSnapshotPropertiesArgs{...}
type VolumeSnapshotPropertiesInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput
	ToVolumeSnapshotPropertiesOutputWithContext(context.Context) VolumeSnapshotPropertiesOutput
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesArgs struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId pulumi.StringPtrInput `pulumi:"snapshotPolicyId"`
}

func (VolumeSnapshotPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotProperties)(nil)).Elem()
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput {
	return i.ToVolumeSnapshotPropertiesOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesOutput)
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return i.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i VolumeSnapshotPropertiesArgs) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesOutput).ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx)
}

// VolumeSnapshotPropertiesPtrInput is an input type that accepts VolumeSnapshotPropertiesArgs, VolumeSnapshotPropertiesPtr and VolumeSnapshotPropertiesPtrOutput values.
// You can construct a concrete instance of `VolumeSnapshotPropertiesPtrInput` via:
//
//	        VolumeSnapshotPropertiesArgs{...}
//
//	or:
//
//	        nil
type VolumeSnapshotPropertiesPtrInput interface {
	pulumi.Input

	ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput
	ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Context) VolumeSnapshotPropertiesPtrOutput
}

type volumeSnapshotPropertiesPtrType VolumeSnapshotPropertiesArgs

func VolumeSnapshotPropertiesPtr(v *VolumeSnapshotPropertiesArgs) VolumeSnapshotPropertiesPtrInput {
	return (*volumeSnapshotPropertiesPtrType)(v)
}

func (*volumeSnapshotPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotProperties)(nil)).Elem()
}

func (i *volumeSnapshotPropertiesPtrType) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return i.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (i *volumeSnapshotPropertiesPtrType) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSnapshotPropertiesPtrOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotProperties)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesOutput() VolumeSnapshotPropertiesOutput {
	return o
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesOutput {
	return o
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return o.ToVolumeSnapshotPropertiesPtrOutputWithContext(context.Background())
}

func (o VolumeSnapshotPropertiesOutput) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeSnapshotProperties) *VolumeSnapshotProperties {
		return &v
	}).(VolumeSnapshotPropertiesPtrOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotProperties) *string { return v.SnapshotPolicyId }).(pulumi.StringPtrOutput)
}

type VolumeSnapshotPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotProperties)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesPtrOutput) ToVolumeSnapshotPropertiesPtrOutput() VolumeSnapshotPropertiesPtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesPtrOutput) ToVolumeSnapshotPropertiesPtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesPtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesPtrOutput) Elem() VolumeSnapshotPropertiesOutput {
	return o.ApplyT(func(v *VolumeSnapshotProperties) VolumeSnapshotProperties {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotProperties
		return ret
	}).(VolumeSnapshotPropertiesOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesPtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotProperties) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesResponse struct {
	// Snapshot Policy ResourceId
	SnapshotPolicyId *string `pulumi:"snapshotPolicyId"`
}

// Volume Snapshot Properties
type VolumeSnapshotPropertiesResponseOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponseOutput() VolumeSnapshotPropertiesResponseOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponseOutput) ToVolumeSnapshotPropertiesResponseOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponseOutput {
	return o
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesResponseOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeSnapshotPropertiesResponse) *string { return v.SnapshotPolicyId }).(pulumi.StringPtrOutput)
}

type VolumeSnapshotPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeSnapshotPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSnapshotPropertiesResponse)(nil)).Elem()
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) ToVolumeSnapshotPropertiesResponsePtrOutput() VolumeSnapshotPropertiesResponsePtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) ToVolumeSnapshotPropertiesResponsePtrOutputWithContext(ctx context.Context) VolumeSnapshotPropertiesResponsePtrOutput {
	return o
}

func (o VolumeSnapshotPropertiesResponsePtrOutput) Elem() VolumeSnapshotPropertiesResponseOutput {
	return o.ApplyT(func(v *VolumeSnapshotPropertiesResponse) VolumeSnapshotPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret VolumeSnapshotPropertiesResponse
		return ret
	}).(VolumeSnapshotPropertiesResponseOutput)
}

// Snapshot Policy ResourceId
func (o VolumeSnapshotPropertiesResponsePtrOutput) SnapshotPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSnapshotPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotPolicyId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ExportPolicyRuleOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleResponseOutput{})
	pulumi.RegisterOutputType(ExportPolicyRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesResponseOutput{})
	pulumi.RegisterOutputType(MountTargetPropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(PlacementKeyValuePairsOutput{})
	pulumi.RegisterOutputType(PlacementKeyValuePairsArrayOutput{})
	pulumi.RegisterOutputType(PlacementKeyValuePairsResponseOutput{})
	pulumi.RegisterOutputType(PlacementKeyValuePairsResponseArrayOutput{})
	pulumi.RegisterOutputType(ReplicationObjectOutput{})
	pulumi.RegisterOutputType(ReplicationObjectPtrOutput{})
	pulumi.RegisterOutputType(ReplicationObjectResponseOutput{})
	pulumi.RegisterOutputType(ReplicationObjectResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VolumeBackupPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupMetaDataOutput{})
	pulumi.RegisterOutputType(VolumeGroupMetaDataPtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupMetaDataResponseOutput{})
	pulumi.RegisterOutputType(VolumeGroupMetaDataResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeGroupVolumePropertiesOutput{})
	pulumi.RegisterOutputType(VolumeGroupVolumePropertiesArrayOutput{})
	pulumi.RegisterOutputType(VolumeGroupVolumePropertiesResponseOutput{})
	pulumi.RegisterOutputType(VolumeGroupVolumePropertiesResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumePropertiesDataProtectionOutput{})
	pulumi.RegisterOutputType(VolumePropertiesDataProtectionPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesExportPolicyOutput{})
	pulumi.RegisterOutputType(VolumePropertiesExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseDataProtectionOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseDataProtectionPtrOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseExportPolicyOutput{})
	pulumi.RegisterOutputType(VolumePropertiesResponseExportPolicyPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VolumeSnapshotPropertiesResponsePtrOutput{})
}
