// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contoso

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Employee resource
// Azure REST API version: 2021-10-01-preview.
type Employee struct {
	pulumi.CustomResourceState

	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The resource-specific properties for this resource.
	Properties EmployeePropertiesResponseOutput `pulumi:"properties"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponseOutput `pulumi:"systemData"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEmployee registers a new resource with the given unique name, arguments, and options.
func NewEmployee(ctx *pulumi.Context,
	name string, args *EmployeeArgs, opts ...pulumi.ResourceOption) (*Employee, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:contoso/v20211001preview:Employee"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Employee
	err := ctx.RegisterResource("azure-native:contoso:Employee", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmployee gets an existing Employee resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmployee(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmployeeState, opts ...pulumi.ResourceOption) (*Employee, error) {
	var resource Employee
	err := ctx.ReadResource("azure-native:contoso:Employee", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Employee resources.
type employeeState struct {
}

type EmployeeState struct {
}

func (EmployeeState) ElementType() reflect.Type {
	return reflect.TypeOf((*employeeState)(nil)).Elem()
}

type employeeArgs struct {
	// The name of the Employee
	EmployeeName *string `pulumi:"employeeName"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The resource-specific properties for this resource.
	Properties *EmployeeProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Employee resource.
type EmployeeArgs struct {
	// The name of the Employee
	EmployeeName pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The resource-specific properties for this resource.
	Properties EmployeePropertiesPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (EmployeeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*employeeArgs)(nil)).Elem()
}

type EmployeeInput interface {
	pulumi.Input

	ToEmployeeOutput() EmployeeOutput
	ToEmployeeOutputWithContext(ctx context.Context) EmployeeOutput
}

func (*Employee) ElementType() reflect.Type {
	return reflect.TypeOf((**Employee)(nil)).Elem()
}

func (i *Employee) ToEmployeeOutput() EmployeeOutput {
	return i.ToEmployeeOutputWithContext(context.Background())
}

func (i *Employee) ToEmployeeOutputWithContext(ctx context.Context) EmployeeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmployeeOutput)
}

type EmployeeOutput struct{ *pulumi.OutputState }

func (EmployeeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Employee)(nil)).Elem()
}

func (o EmployeeOutput) ToEmployeeOutput() EmployeeOutput {
	return o
}

func (o EmployeeOutput) ToEmployeeOutputWithContext(ctx context.Context) EmployeeOutput {
	return o
}

// The geo-location where the resource lives
func (o EmployeeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Employee) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the resource
func (o EmployeeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Employee) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resource-specific properties for this resource.
func (o EmployeeOutput) Properties() EmployeePropertiesResponseOutput {
	return o.ApplyT(func(v *Employee) EmployeePropertiesResponseOutput { return v.Properties }).(EmployeePropertiesResponseOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o EmployeeOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v *Employee) SystemDataResponseOutput { return v.SystemData }).(SystemDataResponseOutput)
}

// Resource tags.
func (o EmployeeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Employee) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o EmployeeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Employee) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EmployeeOutput{})
}
