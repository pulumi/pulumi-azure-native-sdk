// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetesconfiguration

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Parameters to reconcile to the AzureBlob source kind type.
type AzureBlobDefinition struct {
	// The account key (shared key) to access the storage account
	AccountKey *string `pulumi:"accountKey"`
	// The Azure Blob container name to sync from the url endpoint for the flux configuration.
	ContainerName *string `pulumi:"containerName"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// Parameters to authenticate using a Managed Identity.
	ManagedIdentity *ManagedIdentityDefinition `pulumi:"managedIdentity"`
	// The Shared Access token to access the storage container
	SasToken *string `pulumi:"sasToken"`
	// Parameters to authenticate using Service Principal.
	ServicePrincipal *ServicePrincipalDefinition `pulumi:"servicePrincipal"`
	// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration Azure Blob storage account.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for AzureBlobDefinition
func (val *AzureBlobDefinition) Defaults() *AzureBlobDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ServicePrincipal = tmp.ServicePrincipal.Defaults()

	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// AzureBlobDefinitionInput is an input type that accepts AzureBlobDefinitionArgs and AzureBlobDefinitionOutput values.
// You can construct a concrete instance of `AzureBlobDefinitionInput` via:
//
//	AzureBlobDefinitionArgs{...}
type AzureBlobDefinitionInput interface {
	pulumi.Input

	ToAzureBlobDefinitionOutput() AzureBlobDefinitionOutput
	ToAzureBlobDefinitionOutputWithContext(context.Context) AzureBlobDefinitionOutput
}

// Parameters to reconcile to the AzureBlob source kind type.
type AzureBlobDefinitionArgs struct {
	// The account key (shared key) to access the storage account
	AccountKey pulumi.StringPtrInput `pulumi:"accountKey"`
	// The Azure Blob container name to sync from the url endpoint for the flux configuration.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef pulumi.StringPtrInput `pulumi:"localAuthRef"`
	// Parameters to authenticate using a Managed Identity.
	ManagedIdentity ManagedIdentityDefinitionPtrInput `pulumi:"managedIdentity"`
	// The Shared Access token to access the storage container
	SasToken pulumi.StringPtrInput `pulumi:"sasToken"`
	// Parameters to authenticate using Service Principal.
	ServicePrincipal ServicePrincipalDefinitionPtrInput `pulumi:"servicePrincipal"`
	// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration Azure Blob storage account.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for AzureBlobDefinitionArgs
func (val *AzureBlobDefinitionArgs) Defaults() *AzureBlobDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	return &tmp
}
func (AzureBlobDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDefinition)(nil)).Elem()
}

func (i AzureBlobDefinitionArgs) ToAzureBlobDefinitionOutput() AzureBlobDefinitionOutput {
	return i.ToAzureBlobDefinitionOutputWithContext(context.Background())
}

func (i AzureBlobDefinitionArgs) ToAzureBlobDefinitionOutputWithContext(ctx context.Context) AzureBlobDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDefinitionOutput)
}

func (i AzureBlobDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[AzureBlobDefinition] {
	return pulumix.Output[AzureBlobDefinition]{
		OutputState: i.ToAzureBlobDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i AzureBlobDefinitionArgs) ToAzureBlobDefinitionPtrOutput() AzureBlobDefinitionPtrOutput {
	return i.ToAzureBlobDefinitionPtrOutputWithContext(context.Background())
}

func (i AzureBlobDefinitionArgs) ToAzureBlobDefinitionPtrOutputWithContext(ctx context.Context) AzureBlobDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDefinitionOutput).ToAzureBlobDefinitionPtrOutputWithContext(ctx)
}

// AzureBlobDefinitionPtrInput is an input type that accepts AzureBlobDefinitionArgs, AzureBlobDefinitionPtr and AzureBlobDefinitionPtrOutput values.
// You can construct a concrete instance of `AzureBlobDefinitionPtrInput` via:
//
//	        AzureBlobDefinitionArgs{...}
//
//	or:
//
//	        nil
type AzureBlobDefinitionPtrInput interface {
	pulumi.Input

	ToAzureBlobDefinitionPtrOutput() AzureBlobDefinitionPtrOutput
	ToAzureBlobDefinitionPtrOutputWithContext(context.Context) AzureBlobDefinitionPtrOutput
}

type azureBlobDefinitionPtrType AzureBlobDefinitionArgs

func AzureBlobDefinitionPtr(v *AzureBlobDefinitionArgs) AzureBlobDefinitionPtrInput {
	return (*azureBlobDefinitionPtrType)(v)
}

func (*azureBlobDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobDefinition)(nil)).Elem()
}

func (i *azureBlobDefinitionPtrType) ToAzureBlobDefinitionPtrOutput() AzureBlobDefinitionPtrOutput {
	return i.ToAzureBlobDefinitionPtrOutputWithContext(context.Background())
}

func (i *azureBlobDefinitionPtrType) ToAzureBlobDefinitionPtrOutputWithContext(ctx context.Context) AzureBlobDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDefinitionPtrOutput)
}

func (i *azureBlobDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*AzureBlobDefinition] {
	return pulumix.Output[*AzureBlobDefinition]{
		OutputState: i.ToAzureBlobDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to reconcile to the AzureBlob source kind type.
type AzureBlobDefinitionOutput struct{ *pulumi.OutputState }

func (AzureBlobDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDefinition)(nil)).Elem()
}

func (o AzureBlobDefinitionOutput) ToAzureBlobDefinitionOutput() AzureBlobDefinitionOutput {
	return o
}

func (o AzureBlobDefinitionOutput) ToAzureBlobDefinitionOutputWithContext(ctx context.Context) AzureBlobDefinitionOutput {
	return o
}

func (o AzureBlobDefinitionOutput) ToAzureBlobDefinitionPtrOutput() AzureBlobDefinitionPtrOutput {
	return o.ToAzureBlobDefinitionPtrOutputWithContext(context.Background())
}

func (o AzureBlobDefinitionOutput) ToAzureBlobDefinitionPtrOutputWithContext(ctx context.Context) AzureBlobDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureBlobDefinition) *AzureBlobDefinition {
		return &v
	}).(AzureBlobDefinitionPtrOutput)
}

func (o AzureBlobDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[AzureBlobDefinition] {
	return pulumix.Output[AzureBlobDefinition]{
		OutputState: o.OutputState,
	}
}

// The account key (shared key) to access the storage account
func (o AzureBlobDefinitionOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The Azure Blob container name to sync from the url endpoint for the flux configuration.
func (o AzureBlobDefinitionOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o AzureBlobDefinitionOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using a Managed Identity.
func (o AzureBlobDefinitionOutput) ManagedIdentity() ManagedIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *ManagedIdentityDefinition { return v.ManagedIdentity }).(ManagedIdentityDefinitionPtrOutput)
}

// The Shared Access token to access the storage container
func (o AzureBlobDefinitionOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using Service Principal.
func (o AzureBlobDefinitionOutput) ServicePrincipal() ServicePrincipalDefinitionPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *ServicePrincipalDefinition { return v.ServicePrincipal }).(ServicePrincipalDefinitionPtrOutput)
}

// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration Azure Blob storage account.
func (o AzureBlobDefinitionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinition) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type AzureBlobDefinitionPtrOutput struct{ *pulumi.OutputState }

func (AzureBlobDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobDefinition)(nil)).Elem()
}

func (o AzureBlobDefinitionPtrOutput) ToAzureBlobDefinitionPtrOutput() AzureBlobDefinitionPtrOutput {
	return o
}

func (o AzureBlobDefinitionPtrOutput) ToAzureBlobDefinitionPtrOutputWithContext(ctx context.Context) AzureBlobDefinitionPtrOutput {
	return o
}

func (o AzureBlobDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureBlobDefinition] {
	return pulumix.Output[*AzureBlobDefinition]{
		OutputState: o.OutputState,
	}
}

func (o AzureBlobDefinitionPtrOutput) Elem() AzureBlobDefinitionOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) AzureBlobDefinition {
		if v != nil {
			return *v
		}
		var ret AzureBlobDefinition
		return ret
	}).(AzureBlobDefinitionOutput)
}

// The account key (shared key) to access the storage account
func (o AzureBlobDefinitionPtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The Azure Blob container name to sync from the url endpoint for the flux configuration.
func (o AzureBlobDefinitionPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o AzureBlobDefinitionPtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using a Managed Identity.
func (o AzureBlobDefinitionPtrOutput) ManagedIdentity() ManagedIdentityDefinitionPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *ManagedIdentityDefinition {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentityDefinitionPtrOutput)
}

// The Shared Access token to access the storage container
func (o AzureBlobDefinitionPtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *string {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using Service Principal.
func (o AzureBlobDefinitionPtrOutput) ServicePrincipal() ServicePrincipalDefinitionPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *ServicePrincipalDefinition {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ServicePrincipalDefinitionPtrOutput)
}

// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionPtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionPtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration Azure Blob storage account.
func (o AzureBlobDefinitionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Parameters to reconcile to the AzureBlob source kind type.
type AzureBlobDefinitionResponse struct {
	// The account key (shared key) to access the storage account
	AccountKey *string `pulumi:"accountKey"`
	// The Azure Blob container name to sync from the url endpoint for the flux configuration.
	ContainerName *string `pulumi:"containerName"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// Parameters to authenticate using a Managed Identity.
	ManagedIdentity *ManagedIdentityDefinitionResponse `pulumi:"managedIdentity"`
	// The Shared Access token to access the storage container
	SasToken *string `pulumi:"sasToken"`
	// Parameters to authenticate using Service Principal.
	ServicePrincipal *ServicePrincipalDefinitionResponse `pulumi:"servicePrincipal"`
	// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration Azure Blob storage account.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for AzureBlobDefinitionResponse
func (val *AzureBlobDefinitionResponse) Defaults() *AzureBlobDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ServicePrincipal = tmp.ServicePrincipal.Defaults()

	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// Parameters to reconcile to the AzureBlob source kind type.
type AzureBlobDefinitionResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDefinitionResponse)(nil)).Elem()
}

func (o AzureBlobDefinitionResponseOutput) ToAzureBlobDefinitionResponseOutput() AzureBlobDefinitionResponseOutput {
	return o
}

func (o AzureBlobDefinitionResponseOutput) ToAzureBlobDefinitionResponseOutputWithContext(ctx context.Context) AzureBlobDefinitionResponseOutput {
	return o
}

func (o AzureBlobDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AzureBlobDefinitionResponse] {
	return pulumix.Output[AzureBlobDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The account key (shared key) to access the storage account
func (o AzureBlobDefinitionResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// The Azure Blob container name to sync from the url endpoint for the flux configuration.
func (o AzureBlobDefinitionResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o AzureBlobDefinitionResponseOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using a Managed Identity.
func (o AzureBlobDefinitionResponseOutput) ManagedIdentity() ManagedIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *ManagedIdentityDefinitionResponse { return v.ManagedIdentity }).(ManagedIdentityDefinitionResponsePtrOutput)
}

// The Shared Access token to access the storage container
func (o AzureBlobDefinitionResponseOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using Service Principal.
func (o AzureBlobDefinitionResponseOutput) ServicePrincipal() ServicePrincipalDefinitionResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *ServicePrincipalDefinitionResponse { return v.ServicePrincipal }).(ServicePrincipalDefinitionResponsePtrOutput)
}

// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration Azure Blob storage account.
func (o AzureBlobDefinitionResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDefinitionResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type AzureBlobDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureBlobDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureBlobDefinitionResponse)(nil)).Elem()
}

func (o AzureBlobDefinitionResponsePtrOutput) ToAzureBlobDefinitionResponsePtrOutput() AzureBlobDefinitionResponsePtrOutput {
	return o
}

func (o AzureBlobDefinitionResponsePtrOutput) ToAzureBlobDefinitionResponsePtrOutputWithContext(ctx context.Context) AzureBlobDefinitionResponsePtrOutput {
	return o
}

func (o AzureBlobDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AzureBlobDefinitionResponse] {
	return pulumix.Output[*AzureBlobDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o AzureBlobDefinitionResponsePtrOutput) Elem() AzureBlobDefinitionResponseOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) AzureBlobDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret AzureBlobDefinitionResponse
		return ret
	}).(AzureBlobDefinitionResponseOutput)
}

// The account key (shared key) to access the storage account
func (o AzureBlobDefinitionResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// The Azure Blob container name to sync from the url endpoint for the flux configuration.
func (o AzureBlobDefinitionResponsePtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o AzureBlobDefinitionResponsePtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using a Managed Identity.
func (o AzureBlobDefinitionResponsePtrOutput) ManagedIdentity() ManagedIdentityDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *ManagedIdentityDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ManagedIdentityDefinitionResponsePtrOutput)
}

// The Shared Access token to access the storage container
func (o AzureBlobDefinitionResponsePtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using Service Principal.
func (o AzureBlobDefinitionResponsePtrOutput) ServicePrincipal() ServicePrincipalDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *ServicePrincipalDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ServicePrincipalDefinitionResponsePtrOutput)
}

// The interval at which to re-reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionResponsePtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster Azure Blob source with the remote.
func (o AzureBlobDefinitionResponsePtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration Azure Blob storage account.
func (o AzureBlobDefinitionResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureBlobDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Parameters to reconcile to the Bucket source kind type.
type BucketDefinition struct {
	// Plaintext access key used to securely access the S3 bucket
	AccessKey *string `pulumi:"accessKey"`
	// The bucket name to sync from the url endpoint for the flux configuration.
	BucketName *string `pulumi:"bucketName"`
	// Specify whether to use insecure communication when puling data from the S3 bucket.
	Insecure *bool `pulumi:"insecure"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The interval at which to re-reconcile the cluster bucket source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster bucket source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration S3 bucket.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for BucketDefinition
func (val *BucketDefinition) Defaults() *BucketDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Insecure == nil {
		insecure_ := true
		tmp.Insecure = &insecure_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// BucketDefinitionInput is an input type that accepts BucketDefinitionArgs and BucketDefinitionOutput values.
// You can construct a concrete instance of `BucketDefinitionInput` via:
//
//	BucketDefinitionArgs{...}
type BucketDefinitionInput interface {
	pulumi.Input

	ToBucketDefinitionOutput() BucketDefinitionOutput
	ToBucketDefinitionOutputWithContext(context.Context) BucketDefinitionOutput
}

// Parameters to reconcile to the Bucket source kind type.
type BucketDefinitionArgs struct {
	// Plaintext access key used to securely access the S3 bucket
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The bucket name to sync from the url endpoint for the flux configuration.
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// Specify whether to use insecure communication when puling data from the S3 bucket.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef pulumi.StringPtrInput `pulumi:"localAuthRef"`
	// The interval at which to re-reconcile the cluster bucket source with the remote.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster bucket source with the remote.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration S3 bucket.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for BucketDefinitionArgs
func (val *BucketDefinitionArgs) Defaults() *BucketDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Insecure == nil {
		tmp.Insecure = pulumi.BoolPtr(true)
	}
	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	return &tmp
}
func (BucketDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketDefinition)(nil)).Elem()
}

func (i BucketDefinitionArgs) ToBucketDefinitionOutput() BucketDefinitionOutput {
	return i.ToBucketDefinitionOutputWithContext(context.Background())
}

func (i BucketDefinitionArgs) ToBucketDefinitionOutputWithContext(ctx context.Context) BucketDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketDefinitionOutput)
}

func (i BucketDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[BucketDefinition] {
	return pulumix.Output[BucketDefinition]{
		OutputState: i.ToBucketDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i BucketDefinitionArgs) ToBucketDefinitionPtrOutput() BucketDefinitionPtrOutput {
	return i.ToBucketDefinitionPtrOutputWithContext(context.Background())
}

func (i BucketDefinitionArgs) ToBucketDefinitionPtrOutputWithContext(ctx context.Context) BucketDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketDefinitionOutput).ToBucketDefinitionPtrOutputWithContext(ctx)
}

// BucketDefinitionPtrInput is an input type that accepts BucketDefinitionArgs, BucketDefinitionPtr and BucketDefinitionPtrOutput values.
// You can construct a concrete instance of `BucketDefinitionPtrInput` via:
//
//	        BucketDefinitionArgs{...}
//
//	or:
//
//	        nil
type BucketDefinitionPtrInput interface {
	pulumi.Input

	ToBucketDefinitionPtrOutput() BucketDefinitionPtrOutput
	ToBucketDefinitionPtrOutputWithContext(context.Context) BucketDefinitionPtrOutput
}

type bucketDefinitionPtrType BucketDefinitionArgs

func BucketDefinitionPtr(v *BucketDefinitionArgs) BucketDefinitionPtrInput {
	return (*bucketDefinitionPtrType)(v)
}

func (*bucketDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketDefinition)(nil)).Elem()
}

func (i *bucketDefinitionPtrType) ToBucketDefinitionPtrOutput() BucketDefinitionPtrOutput {
	return i.ToBucketDefinitionPtrOutputWithContext(context.Background())
}

func (i *bucketDefinitionPtrType) ToBucketDefinitionPtrOutputWithContext(ctx context.Context) BucketDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketDefinitionPtrOutput)
}

func (i *bucketDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*BucketDefinition] {
	return pulumix.Output[*BucketDefinition]{
		OutputState: i.ToBucketDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to reconcile to the Bucket source kind type.
type BucketDefinitionOutput struct{ *pulumi.OutputState }

func (BucketDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketDefinition)(nil)).Elem()
}

func (o BucketDefinitionOutput) ToBucketDefinitionOutput() BucketDefinitionOutput {
	return o
}

func (o BucketDefinitionOutput) ToBucketDefinitionOutputWithContext(ctx context.Context) BucketDefinitionOutput {
	return o
}

func (o BucketDefinitionOutput) ToBucketDefinitionPtrOutput() BucketDefinitionPtrOutput {
	return o.ToBucketDefinitionPtrOutputWithContext(context.Background())
}

func (o BucketDefinitionOutput) ToBucketDefinitionPtrOutputWithContext(ctx context.Context) BucketDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BucketDefinition) *BucketDefinition {
		return &v
	}).(BucketDefinitionPtrOutput)
}

func (o BucketDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[BucketDefinition] {
	return pulumix.Output[BucketDefinition]{
		OutputState: o.OutputState,
	}
}

// Plaintext access key used to securely access the S3 bucket
func (o BucketDefinitionOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinition) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bucket name to sync from the url endpoint for the flux configuration.
func (o BucketDefinitionOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinition) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// Specify whether to use insecure communication when puling data from the S3 bucket.
func (o BucketDefinitionOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketDefinition) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o BucketDefinitionOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinition) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster bucket source with the remote.
func (o BucketDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BucketDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster bucket source with the remote.
func (o BucketDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BucketDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration S3 bucket.
func (o BucketDefinitionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinition) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketDefinitionPtrOutput struct{ *pulumi.OutputState }

func (BucketDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketDefinition)(nil)).Elem()
}

func (o BucketDefinitionPtrOutput) ToBucketDefinitionPtrOutput() BucketDefinitionPtrOutput {
	return o
}

func (o BucketDefinitionPtrOutput) ToBucketDefinitionPtrOutputWithContext(ctx context.Context) BucketDefinitionPtrOutput {
	return o
}

func (o BucketDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BucketDefinition] {
	return pulumix.Output[*BucketDefinition]{
		OutputState: o.OutputState,
	}
}

func (o BucketDefinitionPtrOutput) Elem() BucketDefinitionOutput {
	return o.ApplyT(func(v *BucketDefinition) BucketDefinition {
		if v != nil {
			return *v
		}
		var ret BucketDefinition
		return ret
	}).(BucketDefinitionOutput)
}

// Plaintext access key used to securely access the S3 bucket
func (o BucketDefinitionPtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bucket name to sync from the url endpoint for the flux configuration.
func (o BucketDefinitionPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// Specify whether to use insecure communication when puling data from the S3 bucket.
func (o BucketDefinitionPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o BucketDefinitionPtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster bucket source with the remote.
func (o BucketDefinitionPtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster bucket source with the remote.
func (o BucketDefinitionPtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration S3 bucket.
func (o BucketDefinitionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Parameters to reconcile to the Bucket source kind type.
type BucketDefinitionResponse struct {
	// Plaintext access key used to securely access the S3 bucket
	AccessKey *string `pulumi:"accessKey"`
	// The bucket name to sync from the url endpoint for the flux configuration.
	BucketName *string `pulumi:"bucketName"`
	// Specify whether to use insecure communication when puling data from the S3 bucket.
	Insecure *bool `pulumi:"insecure"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The interval at which to re-reconcile the cluster bucket source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster bucket source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration S3 bucket.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for BucketDefinitionResponse
func (val *BucketDefinitionResponse) Defaults() *BucketDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Insecure == nil {
		insecure_ := true
		tmp.Insecure = &insecure_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// Parameters to reconcile to the Bucket source kind type.
type BucketDefinitionResponseOutput struct{ *pulumi.OutputState }

func (BucketDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BucketDefinitionResponse)(nil)).Elem()
}

func (o BucketDefinitionResponseOutput) ToBucketDefinitionResponseOutput() BucketDefinitionResponseOutput {
	return o
}

func (o BucketDefinitionResponseOutput) ToBucketDefinitionResponseOutputWithContext(ctx context.Context) BucketDefinitionResponseOutput {
	return o
}

func (o BucketDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BucketDefinitionResponse] {
	return pulumix.Output[BucketDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Plaintext access key used to securely access the S3 bucket
func (o BucketDefinitionResponseOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The bucket name to sync from the url endpoint for the flux configuration.
func (o BucketDefinitionResponseOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// Specify whether to use insecure communication when puling data from the S3 bucket.
func (o BucketDefinitionResponseOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o BucketDefinitionResponseOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster bucket source with the remote.
func (o BucketDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster bucket source with the remote.
func (o BucketDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration S3 bucket.
func (o BucketDefinitionResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BucketDefinitionResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type BucketDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (BucketDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketDefinitionResponse)(nil)).Elem()
}

func (o BucketDefinitionResponsePtrOutput) ToBucketDefinitionResponsePtrOutput() BucketDefinitionResponsePtrOutput {
	return o
}

func (o BucketDefinitionResponsePtrOutput) ToBucketDefinitionResponsePtrOutputWithContext(ctx context.Context) BucketDefinitionResponsePtrOutput {
	return o
}

func (o BucketDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BucketDefinitionResponse] {
	return pulumix.Output[*BucketDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o BucketDefinitionResponsePtrOutput) Elem() BucketDefinitionResponseOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) BucketDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret BucketDefinitionResponse
		return ret
	}).(BucketDefinitionResponseOutput)
}

// Plaintext access key used to securely access the S3 bucket
func (o BucketDefinitionResponsePtrOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessKey
	}).(pulumi.StringPtrOutput)
}

// The bucket name to sync from the url endpoint for the flux configuration.
func (o BucketDefinitionResponsePtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// Specify whether to use insecure communication when puling data from the S3 bucket.
func (o BucketDefinitionResponsePtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o BucketDefinitionResponsePtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster bucket source with the remote.
func (o BucketDefinitionResponsePtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster bucket source with the remote.
func (o BucketDefinitionResponsePtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration S3 bucket.
func (o BucketDefinitionResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BucketDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Compliance Status details
type ComplianceStatusResponse struct {
	// The compliance state of the configuration.
	ComplianceState string `pulumi:"complianceState"`
	// Datetime the configuration was last applied.
	LastConfigApplied *string `pulumi:"lastConfigApplied"`
	// Message from when the configuration was applied.
	Message *string `pulumi:"message"`
	// Level of the message.
	MessageLevel *string `pulumi:"messageLevel"`
}

// Compliance Status details
type ComplianceStatusResponseOutput struct{ *pulumi.OutputState }

func (ComplianceStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComplianceStatusResponse)(nil)).Elem()
}

func (o ComplianceStatusResponseOutput) ToComplianceStatusResponseOutput() ComplianceStatusResponseOutput {
	return o
}

func (o ComplianceStatusResponseOutput) ToComplianceStatusResponseOutputWithContext(ctx context.Context) ComplianceStatusResponseOutput {
	return o
}

func (o ComplianceStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ComplianceStatusResponse] {
	return pulumix.Output[ComplianceStatusResponse]{
		OutputState: o.OutputState,
	}
}

// The compliance state of the configuration.
func (o ComplianceStatusResponseOutput) ComplianceState() pulumi.StringOutput {
	return o.ApplyT(func(v ComplianceStatusResponse) string { return v.ComplianceState }).(pulumi.StringOutput)
}

// Datetime the configuration was last applied.
func (o ComplianceStatusResponseOutput) LastConfigApplied() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceStatusResponse) *string { return v.LastConfigApplied }).(pulumi.StringPtrOutput)
}

// Message from when the configuration was applied.
func (o ComplianceStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Level of the message.
func (o ComplianceStatusResponseOutput) MessageLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComplianceStatusResponse) *string { return v.MessageLevel }).(pulumi.StringPtrOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorAdditionalInfoResponse] {
	return pulumix.Output[ErrorAdditionalInfoResponse]{
		OutputState: o.OutputState,
	}
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorAdditionalInfoResponse] {
	return pulumix.Output[[]ErrorAdditionalInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ErrorDetailResponse] {
	return pulumix.Output[ErrorDetailResponse]{
		OutputState: o.OutputState,
	}
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ErrorDetailResponse] {
	return pulumix.Output[[]ErrorDetailResponse]{
		OutputState: o.OutputState,
	}
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Identity of the Extension resource in an AKS cluster
type ExtensionAksAssignedIdentity struct {
	// The identity type.
	Type *AKSIdentityType `pulumi:"type"`
}

// ExtensionAksAssignedIdentityInput is an input type that accepts ExtensionAksAssignedIdentityArgs and ExtensionAksAssignedIdentityOutput values.
// You can construct a concrete instance of `ExtensionAksAssignedIdentityInput` via:
//
//	ExtensionAksAssignedIdentityArgs{...}
type ExtensionAksAssignedIdentityInput interface {
	pulumi.Input

	ToExtensionAksAssignedIdentityOutput() ExtensionAksAssignedIdentityOutput
	ToExtensionAksAssignedIdentityOutputWithContext(context.Context) ExtensionAksAssignedIdentityOutput
}

// Identity of the Extension resource in an AKS cluster
type ExtensionAksAssignedIdentityArgs struct {
	// The identity type.
	Type AKSIdentityTypePtrInput `pulumi:"type"`
}

func (ExtensionAksAssignedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionAksAssignedIdentity)(nil)).Elem()
}

func (i ExtensionAksAssignedIdentityArgs) ToExtensionAksAssignedIdentityOutput() ExtensionAksAssignedIdentityOutput {
	return i.ToExtensionAksAssignedIdentityOutputWithContext(context.Background())
}

func (i ExtensionAksAssignedIdentityArgs) ToExtensionAksAssignedIdentityOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAksAssignedIdentityOutput)
}

func (i ExtensionAksAssignedIdentityArgs) ToOutput(ctx context.Context) pulumix.Output[ExtensionAksAssignedIdentity] {
	return pulumix.Output[ExtensionAksAssignedIdentity]{
		OutputState: i.ToExtensionAksAssignedIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i ExtensionAksAssignedIdentityArgs) ToExtensionAksAssignedIdentityPtrOutput() ExtensionAksAssignedIdentityPtrOutput {
	return i.ToExtensionAksAssignedIdentityPtrOutputWithContext(context.Background())
}

func (i ExtensionAksAssignedIdentityArgs) ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAksAssignedIdentityOutput).ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx)
}

// ExtensionAksAssignedIdentityPtrInput is an input type that accepts ExtensionAksAssignedIdentityArgs, ExtensionAksAssignedIdentityPtr and ExtensionAksAssignedIdentityPtrOutput values.
// You can construct a concrete instance of `ExtensionAksAssignedIdentityPtrInput` via:
//
//	        ExtensionAksAssignedIdentityArgs{...}
//
//	or:
//
//	        nil
type ExtensionAksAssignedIdentityPtrInput interface {
	pulumi.Input

	ToExtensionAksAssignedIdentityPtrOutput() ExtensionAksAssignedIdentityPtrOutput
	ToExtensionAksAssignedIdentityPtrOutputWithContext(context.Context) ExtensionAksAssignedIdentityPtrOutput
}

type extensionAksAssignedIdentityPtrType ExtensionAksAssignedIdentityArgs

func ExtensionAksAssignedIdentityPtr(v *ExtensionAksAssignedIdentityArgs) ExtensionAksAssignedIdentityPtrInput {
	return (*extensionAksAssignedIdentityPtrType)(v)
}

func (*extensionAksAssignedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionAksAssignedIdentity)(nil)).Elem()
}

func (i *extensionAksAssignedIdentityPtrType) ToExtensionAksAssignedIdentityPtrOutput() ExtensionAksAssignedIdentityPtrOutput {
	return i.ToExtensionAksAssignedIdentityPtrOutputWithContext(context.Background())
}

func (i *extensionAksAssignedIdentityPtrType) ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionAksAssignedIdentityPtrOutput)
}

func (i *extensionAksAssignedIdentityPtrType) ToOutput(ctx context.Context) pulumix.Output[*ExtensionAksAssignedIdentity] {
	return pulumix.Output[*ExtensionAksAssignedIdentity]{
		OutputState: i.ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity of the Extension resource in an AKS cluster
type ExtensionAksAssignedIdentityOutput struct{ *pulumi.OutputState }

func (ExtensionAksAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionAksAssignedIdentity)(nil)).Elem()
}

func (o ExtensionAksAssignedIdentityOutput) ToExtensionAksAssignedIdentityOutput() ExtensionAksAssignedIdentityOutput {
	return o
}

func (o ExtensionAksAssignedIdentityOutput) ToExtensionAksAssignedIdentityOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityOutput {
	return o
}

func (o ExtensionAksAssignedIdentityOutput) ToExtensionAksAssignedIdentityPtrOutput() ExtensionAksAssignedIdentityPtrOutput {
	return o.ToExtensionAksAssignedIdentityPtrOutputWithContext(context.Background())
}

func (o ExtensionAksAssignedIdentityOutput) ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExtensionAksAssignedIdentity) *ExtensionAksAssignedIdentity {
		return &v
	}).(ExtensionAksAssignedIdentityPtrOutput)
}

func (o ExtensionAksAssignedIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionAksAssignedIdentity] {
	return pulumix.Output[ExtensionAksAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

// The identity type.
func (o ExtensionAksAssignedIdentityOutput) Type() AKSIdentityTypePtrOutput {
	return o.ApplyT(func(v ExtensionAksAssignedIdentity) *AKSIdentityType { return v.Type }).(AKSIdentityTypePtrOutput)
}

type ExtensionAksAssignedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ExtensionAksAssignedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionAksAssignedIdentity)(nil)).Elem()
}

func (o ExtensionAksAssignedIdentityPtrOutput) ToExtensionAksAssignedIdentityPtrOutput() ExtensionAksAssignedIdentityPtrOutput {
	return o
}

func (o ExtensionAksAssignedIdentityPtrOutput) ToExtensionAksAssignedIdentityPtrOutputWithContext(ctx context.Context) ExtensionAksAssignedIdentityPtrOutput {
	return o
}

func (o ExtensionAksAssignedIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtensionAksAssignedIdentity] {
	return pulumix.Output[*ExtensionAksAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionAksAssignedIdentityPtrOutput) Elem() ExtensionAksAssignedIdentityOutput {
	return o.ApplyT(func(v *ExtensionAksAssignedIdentity) ExtensionAksAssignedIdentity {
		if v != nil {
			return *v
		}
		var ret ExtensionAksAssignedIdentity
		return ret
	}).(ExtensionAksAssignedIdentityOutput)
}

// The identity type.
func (o ExtensionAksAssignedIdentityPtrOutput) Type() AKSIdentityTypePtrOutput {
	return o.ApplyT(func(v *ExtensionAksAssignedIdentity) *AKSIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(AKSIdentityTypePtrOutput)
}

// Identity of the Extension resource in an AKS cluster
type ExtensionResponseAksAssignedIdentity struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
}

// Identity of the Extension resource in an AKS cluster
type ExtensionResponseAksAssignedIdentityOutput struct{ *pulumi.OutputState }

func (ExtensionResponseAksAssignedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionResponseAksAssignedIdentity)(nil)).Elem()
}

func (o ExtensionResponseAksAssignedIdentityOutput) ToExtensionResponseAksAssignedIdentityOutput() ExtensionResponseAksAssignedIdentityOutput {
	return o
}

func (o ExtensionResponseAksAssignedIdentityOutput) ToExtensionResponseAksAssignedIdentityOutputWithContext(ctx context.Context) ExtensionResponseAksAssignedIdentityOutput {
	return o
}

func (o ExtensionResponseAksAssignedIdentityOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionResponseAksAssignedIdentity] {
	return pulumix.Output[ExtensionResponseAksAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

// The principal ID of resource identity.
func (o ExtensionResponseAksAssignedIdentityOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionResponseAksAssignedIdentity) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o ExtensionResponseAksAssignedIdentityOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ExtensionResponseAksAssignedIdentity) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o ExtensionResponseAksAssignedIdentityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionResponseAksAssignedIdentity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ExtensionResponseAksAssignedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ExtensionResponseAksAssignedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtensionResponseAksAssignedIdentity)(nil)).Elem()
}

func (o ExtensionResponseAksAssignedIdentityPtrOutput) ToExtensionResponseAksAssignedIdentityPtrOutput() ExtensionResponseAksAssignedIdentityPtrOutput {
	return o
}

func (o ExtensionResponseAksAssignedIdentityPtrOutput) ToExtensionResponseAksAssignedIdentityPtrOutputWithContext(ctx context.Context) ExtensionResponseAksAssignedIdentityPtrOutput {
	return o
}

func (o ExtensionResponseAksAssignedIdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ExtensionResponseAksAssignedIdentity] {
	return pulumix.Output[*ExtensionResponseAksAssignedIdentity]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionResponseAksAssignedIdentityPtrOutput) Elem() ExtensionResponseAksAssignedIdentityOutput {
	return o.ApplyT(func(v *ExtensionResponseAksAssignedIdentity) ExtensionResponseAksAssignedIdentity {
		if v != nil {
			return *v
		}
		var ret ExtensionResponseAksAssignedIdentity
		return ret
	}).(ExtensionResponseAksAssignedIdentityOutput)
}

// The principal ID of resource identity.
func (o ExtensionResponseAksAssignedIdentityPtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionResponseAksAssignedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o ExtensionResponseAksAssignedIdentityPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionResponseAksAssignedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o ExtensionResponseAksAssignedIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtensionResponseAksAssignedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Status from the extension.
type ExtensionStatus struct {
	// Status code provided by the Extension
	Code *string `pulumi:"code"`
	// Short description of status of the extension.
	DisplayStatus *string `pulumi:"displayStatus"`
	// Level of the status.
	Level *string `pulumi:"level"`
	// Detailed message of the status from the Extension.
	Message *string `pulumi:"message"`
	// DateLiteral (per ISO8601) noting the time of installation status.
	Time *string `pulumi:"time"`
}

// Defaults sets the appropriate defaults for ExtensionStatus
func (val *ExtensionStatus) Defaults() *ExtensionStatus {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Level == nil {
		level_ := "Information"
		tmp.Level = &level_
	}
	return &tmp
}

// ExtensionStatusInput is an input type that accepts ExtensionStatusArgs and ExtensionStatusOutput values.
// You can construct a concrete instance of `ExtensionStatusInput` via:
//
//	ExtensionStatusArgs{...}
type ExtensionStatusInput interface {
	pulumi.Input

	ToExtensionStatusOutput() ExtensionStatusOutput
	ToExtensionStatusOutputWithContext(context.Context) ExtensionStatusOutput
}

// Status from the extension.
type ExtensionStatusArgs struct {
	// Status code provided by the Extension
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Short description of status of the extension.
	DisplayStatus pulumi.StringPtrInput `pulumi:"displayStatus"`
	// Level of the status.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Detailed message of the status from the Extension.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// DateLiteral (per ISO8601) noting the time of installation status.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

// Defaults sets the appropriate defaults for ExtensionStatusArgs
func (val *ExtensionStatusArgs) Defaults() *ExtensionStatusArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Level == nil {
		tmp.Level = pulumi.StringPtr("Information")
	}
	return &tmp
}
func (ExtensionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionStatus)(nil)).Elem()
}

func (i ExtensionStatusArgs) ToExtensionStatusOutput() ExtensionStatusOutput {
	return i.ToExtensionStatusOutputWithContext(context.Background())
}

func (i ExtensionStatusArgs) ToExtensionStatusOutputWithContext(ctx context.Context) ExtensionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionStatusOutput)
}

func (i ExtensionStatusArgs) ToOutput(ctx context.Context) pulumix.Output[ExtensionStatus] {
	return pulumix.Output[ExtensionStatus]{
		OutputState: i.ToExtensionStatusOutputWithContext(ctx).OutputState,
	}
}

// ExtensionStatusArrayInput is an input type that accepts ExtensionStatusArray and ExtensionStatusArrayOutput values.
// You can construct a concrete instance of `ExtensionStatusArrayInput` via:
//
//	ExtensionStatusArray{ ExtensionStatusArgs{...} }
type ExtensionStatusArrayInput interface {
	pulumi.Input

	ToExtensionStatusArrayOutput() ExtensionStatusArrayOutput
	ToExtensionStatusArrayOutputWithContext(context.Context) ExtensionStatusArrayOutput
}

type ExtensionStatusArray []ExtensionStatusInput

func (ExtensionStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionStatus)(nil)).Elem()
}

func (i ExtensionStatusArray) ToExtensionStatusArrayOutput() ExtensionStatusArrayOutput {
	return i.ToExtensionStatusArrayOutputWithContext(context.Background())
}

func (i ExtensionStatusArray) ToExtensionStatusArrayOutputWithContext(ctx context.Context) ExtensionStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtensionStatusArrayOutput)
}

func (i ExtensionStatusArray) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionStatus] {
	return pulumix.Output[[]ExtensionStatus]{
		OutputState: i.ToExtensionStatusArrayOutputWithContext(ctx).OutputState,
	}
}

// Status from the extension.
type ExtensionStatusOutput struct{ *pulumi.OutputState }

func (ExtensionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionStatus)(nil)).Elem()
}

func (o ExtensionStatusOutput) ToExtensionStatusOutput() ExtensionStatusOutput {
	return o
}

func (o ExtensionStatusOutput) ToExtensionStatusOutputWithContext(ctx context.Context) ExtensionStatusOutput {
	return o
}

func (o ExtensionStatusOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionStatus] {
	return pulumix.Output[ExtensionStatus]{
		OutputState: o.OutputState,
	}
}

// Status code provided by the Extension
func (o ExtensionStatusOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatus) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Short description of status of the extension.
func (o ExtensionStatusOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatus) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// Level of the status.
func (o ExtensionStatusOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatus) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Detailed message of the status from the Extension.
func (o ExtensionStatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatus) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// DateLiteral (per ISO8601) noting the time of installation status.
func (o ExtensionStatusOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatus) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type ExtensionStatusArrayOutput struct{ *pulumi.OutputState }

func (ExtensionStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionStatus)(nil)).Elem()
}

func (o ExtensionStatusArrayOutput) ToExtensionStatusArrayOutput() ExtensionStatusArrayOutput {
	return o
}

func (o ExtensionStatusArrayOutput) ToExtensionStatusArrayOutputWithContext(ctx context.Context) ExtensionStatusArrayOutput {
	return o
}

func (o ExtensionStatusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionStatus] {
	return pulumix.Output[[]ExtensionStatus]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionStatusArrayOutput) Index(i pulumi.IntInput) ExtensionStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionStatus {
		return vs[0].([]ExtensionStatus)[vs[1].(int)]
	}).(ExtensionStatusOutput)
}

// Status from the extension.
type ExtensionStatusResponse struct {
	// Status code provided by the Extension
	Code *string `pulumi:"code"`
	// Short description of status of the extension.
	DisplayStatus *string `pulumi:"displayStatus"`
	// Level of the status.
	Level *string `pulumi:"level"`
	// Detailed message of the status from the Extension.
	Message *string `pulumi:"message"`
	// DateLiteral (per ISO8601) noting the time of installation status.
	Time *string `pulumi:"time"`
}

// Defaults sets the appropriate defaults for ExtensionStatusResponse
func (val *ExtensionStatusResponse) Defaults() *ExtensionStatusResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Level == nil {
		level_ := "Information"
		tmp.Level = &level_
	}
	return &tmp
}

// Status from the extension.
type ExtensionStatusResponseOutput struct{ *pulumi.OutputState }

func (ExtensionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExtensionStatusResponse)(nil)).Elem()
}

func (o ExtensionStatusResponseOutput) ToExtensionStatusResponseOutput() ExtensionStatusResponseOutput {
	return o
}

func (o ExtensionStatusResponseOutput) ToExtensionStatusResponseOutputWithContext(ctx context.Context) ExtensionStatusResponseOutput {
	return o
}

func (o ExtensionStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ExtensionStatusResponse] {
	return pulumix.Output[ExtensionStatusResponse]{
		OutputState: o.OutputState,
	}
}

// Status code provided by the Extension
func (o ExtensionStatusResponseOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatusResponse) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// Short description of status of the extension.
func (o ExtensionStatusResponseOutput) DisplayStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatusResponse) *string { return v.DisplayStatus }).(pulumi.StringPtrOutput)
}

// Level of the status.
func (o ExtensionStatusResponseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatusResponse) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Detailed message of the status from the Extension.
func (o ExtensionStatusResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatusResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// DateLiteral (per ISO8601) noting the time of installation status.
func (o ExtensionStatusResponseOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExtensionStatusResponse) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type ExtensionStatusResponseArrayOutput struct{ *pulumi.OutputState }

func (ExtensionStatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExtensionStatusResponse)(nil)).Elem()
}

func (o ExtensionStatusResponseArrayOutput) ToExtensionStatusResponseArrayOutput() ExtensionStatusResponseArrayOutput {
	return o
}

func (o ExtensionStatusResponseArrayOutput) ToExtensionStatusResponseArrayOutputWithContext(ctx context.Context) ExtensionStatusResponseArrayOutput {
	return o
}

func (o ExtensionStatusResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ExtensionStatusResponse] {
	return pulumix.Output[[]ExtensionStatusResponse]{
		OutputState: o.OutputState,
	}
}

func (o ExtensionStatusResponseArrayOutput) Index(i pulumi.IntInput) ExtensionStatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExtensionStatusResponse {
		return vs[0].([]ExtensionStatusResponse)[vs[1].(int)]
	}).(ExtensionStatusResponseOutput)
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinition struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCACert *string `pulumi:"httpsCACert"`
	// Plaintext HTTPS username used to access private git repositories over HTTPS
	HttpsUser *string `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef *RepositoryRefDefinition `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts *string `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinition
func (val *GitRepositoryDefinition) Defaults() *GitRepositoryDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// GitRepositoryDefinitionInput is an input type that accepts GitRepositoryDefinitionArgs and GitRepositoryDefinitionOutput values.
// You can construct a concrete instance of `GitRepositoryDefinitionInput` via:
//
//	GitRepositoryDefinitionArgs{...}
type GitRepositoryDefinitionInput interface {
	pulumi.Input

	ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput
	ToGitRepositoryDefinitionOutputWithContext(context.Context) GitRepositoryDefinitionOutput
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionArgs struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCACert pulumi.StringPtrInput `pulumi:"httpsCACert"`
	// Plaintext HTTPS username used to access private git repositories over HTTPS
	HttpsUser pulumi.StringPtrInput `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef pulumi.StringPtrInput `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef RepositoryRefDefinitionPtrInput `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts pulumi.StringPtrInput `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinitionArgs
func (val *GitRepositoryDefinitionArgs) Defaults() *GitRepositoryDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	return &tmp
}
func (GitRepositoryDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinition)(nil)).Elem()
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput {
	return i.ToGitRepositoryDefinitionOutputWithContext(context.Background())
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionOutputWithContext(ctx context.Context) GitRepositoryDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionOutput)
}

func (i GitRepositoryDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinition] {
	return pulumix.Output[GitRepositoryDefinition]{
		OutputState: i.ToGitRepositoryDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return i.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (i GitRepositoryDefinitionArgs) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionOutput).ToGitRepositoryDefinitionPtrOutputWithContext(ctx)
}

// GitRepositoryDefinitionPtrInput is an input type that accepts GitRepositoryDefinitionArgs, GitRepositoryDefinitionPtr and GitRepositoryDefinitionPtrOutput values.
// You can construct a concrete instance of `GitRepositoryDefinitionPtrInput` via:
//
//	        GitRepositoryDefinitionArgs{...}
//
//	or:
//
//	        nil
type GitRepositoryDefinitionPtrInput interface {
	pulumi.Input

	ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput
	ToGitRepositoryDefinitionPtrOutputWithContext(context.Context) GitRepositoryDefinitionPtrOutput
}

type gitRepositoryDefinitionPtrType GitRepositoryDefinitionArgs

func GitRepositoryDefinitionPtr(v *GitRepositoryDefinitionArgs) GitRepositoryDefinitionPtrInput {
	return (*gitRepositoryDefinitionPtrType)(v)
}

func (*gitRepositoryDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinition)(nil)).Elem()
}

func (i *gitRepositoryDefinitionPtrType) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return i.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (i *gitRepositoryDefinitionPtrType) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepositoryDefinitionPtrOutput)
}

func (i *gitRepositoryDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinition] {
	return pulumix.Output[*GitRepositoryDefinition]{
		OutputState: i.ToGitRepositoryDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinition)(nil)).Elem()
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionOutput() GitRepositoryDefinitionOutput {
	return o
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionOutputWithContext(ctx context.Context) GitRepositoryDefinitionOutput {
	return o
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return o.ToGitRepositoryDefinitionPtrOutputWithContext(context.Background())
}

func (o GitRepositoryDefinitionOutput) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepositoryDefinition) *GitRepositoryDefinition {
		return &v
	}).(GitRepositoryDefinitionPtrOutput)
}

func (o GitRepositoryDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinition] {
	return pulumix.Output[GitRepositoryDefinition]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionOutput) HttpsCACert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.HttpsCACert }).(pulumi.StringPtrOutput)
}

// Plaintext HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.HttpsUser }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionOutput) RepositoryRef() RepositoryRefDefinitionPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *RepositoryRefDefinition { return v.RepositoryRef }).(RepositoryRefDefinitionPtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.SshKnownHosts }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinition) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryDefinitionPtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinition)(nil)).Elem()
}

func (o GitRepositoryDefinitionPtrOutput) ToGitRepositoryDefinitionPtrOutput() GitRepositoryDefinitionPtrOutput {
	return o
}

func (o GitRepositoryDefinitionPtrOutput) ToGitRepositoryDefinitionPtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionPtrOutput {
	return o
}

func (o GitRepositoryDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinition] {
	return pulumix.Output[*GitRepositoryDefinition]{
		OutputState: o.OutputState,
	}
}

func (o GitRepositoryDefinitionPtrOutput) Elem() GitRepositoryDefinitionOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) GitRepositoryDefinition {
		if v != nil {
			return *v
		}
		var ret GitRepositoryDefinition
		return ret
	}).(GitRepositoryDefinitionOutput)
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionPtrOutput) HttpsCACert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.HttpsCACert
	}).(pulumi.StringPtrOutput)
}

// Plaintext HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionPtrOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.HttpsUser
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionPtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionPtrOutput) RepositoryRef() RepositoryRefDefinitionPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *RepositoryRefDefinition {
		if v == nil {
			return nil
		}
		return v.RepositoryRef
	}).(RepositoryRefDefinitionPtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionPtrOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.SshKnownHosts
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionPtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionPtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionResponse struct {
	// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
	HttpsCACert *string `pulumi:"httpsCACert"`
	// Plaintext HTTPS username used to access private git repositories over HTTPS
	HttpsUser *string `pulumi:"httpsUser"`
	// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
	LocalAuthRef *string `pulumi:"localAuthRef"`
	// The source reference for the GitRepository object.
	RepositoryRef *RepositoryRefDefinitionResponse `pulumi:"repositoryRef"`
	// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
	SshKnownHosts *string `pulumi:"sshKnownHosts"`
	// The interval at which to re-reconcile the cluster git repository source with the remote.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the cluster git repository source with the remote.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// The URL to sync for the flux configuration git repository.
	Url *string `pulumi:"url"`
}

// Defaults sets the appropriate defaults for GitRepositoryDefinitionResponse
func (val *GitRepositoryDefinitionResponse) Defaults() *GitRepositoryDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	return &tmp
}

// Parameters to reconcile to the GitRepository source kind type.
type GitRepositoryDefinitionResponseOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepositoryDefinitionResponse)(nil)).Elem()
}

func (o GitRepositoryDefinitionResponseOutput) ToGitRepositoryDefinitionResponseOutput() GitRepositoryDefinitionResponseOutput {
	return o
}

func (o GitRepositoryDefinitionResponseOutput) ToGitRepositoryDefinitionResponseOutputWithContext(ctx context.Context) GitRepositoryDefinitionResponseOutput {
	return o
}

func (o GitRepositoryDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[GitRepositoryDefinitionResponse] {
	return pulumix.Output[GitRepositoryDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionResponseOutput) HttpsCACert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.HttpsCACert }).(pulumi.StringPtrOutput)
}

// Plaintext HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionResponseOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.HttpsUser }).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionResponseOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.LocalAuthRef }).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionResponseOutput) RepositoryRef() RepositoryRefDefinitionResponsePtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *RepositoryRefDefinitionResponse { return v.RepositoryRef }).(RepositoryRefDefinitionResponsePtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionResponseOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.SshKnownHosts }).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionResponseOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepositoryDefinitionResponse) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitRepositoryDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (GitRepositoryDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepositoryDefinitionResponse)(nil)).Elem()
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToGitRepositoryDefinitionResponsePtrOutput() GitRepositoryDefinitionResponsePtrOutput {
	return o
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToGitRepositoryDefinitionResponsePtrOutputWithContext(ctx context.Context) GitRepositoryDefinitionResponsePtrOutput {
	return o
}

func (o GitRepositoryDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*GitRepositoryDefinitionResponse] {
	return pulumix.Output[*GitRepositoryDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o GitRepositoryDefinitionResponsePtrOutput) Elem() GitRepositoryDefinitionResponseOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) GitRepositoryDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret GitRepositoryDefinitionResponse
		return ret
	}).(GitRepositoryDefinitionResponseOutput)
}

// Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
func (o GitRepositoryDefinitionResponsePtrOutput) HttpsCACert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsCACert
	}).(pulumi.StringPtrOutput)
}

// Plaintext HTTPS username used to access private git repositories over HTTPS
func (o GitRepositoryDefinitionResponsePtrOutput) HttpsUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.HttpsUser
	}).(pulumi.StringPtrOutput)
}

// Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
func (o GitRepositoryDefinitionResponsePtrOutput) LocalAuthRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LocalAuthRef
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
func (o GitRepositoryDefinitionResponsePtrOutput) RepositoryRef() RepositoryRefDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *RepositoryRefDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.RepositoryRef
	}).(RepositoryRefDefinitionResponsePtrOutput)
}

// Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
func (o GitRepositoryDefinitionResponsePtrOutput) SshKnownHosts() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshKnownHosts
	}).(pulumi.StringPtrOutput)
}

// The interval at which to re-reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponsePtrOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SyncIntervalInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the cluster git repository source with the remote.
func (o GitRepositoryDefinitionResponsePtrOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TimeoutInSeconds
	}).(pulumi.Float64PtrOutput)
}

// The URL to sync for the flux configuration git repository.
func (o GitRepositoryDefinitionResponsePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepositoryDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Properties for Helm operator.
type HelmOperatorProperties struct {
	// Values override for the operator Helm chart.
	ChartValues *string `pulumi:"chartValues"`
	// Version of the operator Helm chart.
	ChartVersion *string `pulumi:"chartVersion"`
}

// HelmOperatorPropertiesInput is an input type that accepts HelmOperatorPropertiesArgs and HelmOperatorPropertiesOutput values.
// You can construct a concrete instance of `HelmOperatorPropertiesInput` via:
//
//	HelmOperatorPropertiesArgs{...}
type HelmOperatorPropertiesInput interface {
	pulumi.Input

	ToHelmOperatorPropertiesOutput() HelmOperatorPropertiesOutput
	ToHelmOperatorPropertiesOutputWithContext(context.Context) HelmOperatorPropertiesOutput
}

// Properties for Helm operator.
type HelmOperatorPropertiesArgs struct {
	// Values override for the operator Helm chart.
	ChartValues pulumi.StringPtrInput `pulumi:"chartValues"`
	// Version of the operator Helm chart.
	ChartVersion pulumi.StringPtrInput `pulumi:"chartVersion"`
}

func (HelmOperatorPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmOperatorProperties)(nil)).Elem()
}

func (i HelmOperatorPropertiesArgs) ToHelmOperatorPropertiesOutput() HelmOperatorPropertiesOutput {
	return i.ToHelmOperatorPropertiesOutputWithContext(context.Background())
}

func (i HelmOperatorPropertiesArgs) ToHelmOperatorPropertiesOutputWithContext(ctx context.Context) HelmOperatorPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmOperatorPropertiesOutput)
}

func (i HelmOperatorPropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[HelmOperatorProperties] {
	return pulumix.Output[HelmOperatorProperties]{
		OutputState: i.ToHelmOperatorPropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i HelmOperatorPropertiesArgs) ToHelmOperatorPropertiesPtrOutput() HelmOperatorPropertiesPtrOutput {
	return i.ToHelmOperatorPropertiesPtrOutputWithContext(context.Background())
}

func (i HelmOperatorPropertiesArgs) ToHelmOperatorPropertiesPtrOutputWithContext(ctx context.Context) HelmOperatorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmOperatorPropertiesOutput).ToHelmOperatorPropertiesPtrOutputWithContext(ctx)
}

// HelmOperatorPropertiesPtrInput is an input type that accepts HelmOperatorPropertiesArgs, HelmOperatorPropertiesPtr and HelmOperatorPropertiesPtrOutput values.
// You can construct a concrete instance of `HelmOperatorPropertiesPtrInput` via:
//
//	        HelmOperatorPropertiesArgs{...}
//
//	or:
//
//	        nil
type HelmOperatorPropertiesPtrInput interface {
	pulumi.Input

	ToHelmOperatorPropertiesPtrOutput() HelmOperatorPropertiesPtrOutput
	ToHelmOperatorPropertiesPtrOutputWithContext(context.Context) HelmOperatorPropertiesPtrOutput
}

type helmOperatorPropertiesPtrType HelmOperatorPropertiesArgs

func HelmOperatorPropertiesPtr(v *HelmOperatorPropertiesArgs) HelmOperatorPropertiesPtrInput {
	return (*helmOperatorPropertiesPtrType)(v)
}

func (*helmOperatorPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmOperatorProperties)(nil)).Elem()
}

func (i *helmOperatorPropertiesPtrType) ToHelmOperatorPropertiesPtrOutput() HelmOperatorPropertiesPtrOutput {
	return i.ToHelmOperatorPropertiesPtrOutputWithContext(context.Background())
}

func (i *helmOperatorPropertiesPtrType) ToHelmOperatorPropertiesPtrOutputWithContext(ctx context.Context) HelmOperatorPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HelmOperatorPropertiesPtrOutput)
}

func (i *helmOperatorPropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*HelmOperatorProperties] {
	return pulumix.Output[*HelmOperatorProperties]{
		OutputState: i.ToHelmOperatorPropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Properties for Helm operator.
type HelmOperatorPropertiesOutput struct{ *pulumi.OutputState }

func (HelmOperatorPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmOperatorProperties)(nil)).Elem()
}

func (o HelmOperatorPropertiesOutput) ToHelmOperatorPropertiesOutput() HelmOperatorPropertiesOutput {
	return o
}

func (o HelmOperatorPropertiesOutput) ToHelmOperatorPropertiesOutputWithContext(ctx context.Context) HelmOperatorPropertiesOutput {
	return o
}

func (o HelmOperatorPropertiesOutput) ToHelmOperatorPropertiesPtrOutput() HelmOperatorPropertiesPtrOutput {
	return o.ToHelmOperatorPropertiesPtrOutputWithContext(context.Background())
}

func (o HelmOperatorPropertiesOutput) ToHelmOperatorPropertiesPtrOutputWithContext(ctx context.Context) HelmOperatorPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HelmOperatorProperties) *HelmOperatorProperties {
		return &v
	}).(HelmOperatorPropertiesPtrOutput)
}

func (o HelmOperatorPropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[HelmOperatorProperties] {
	return pulumix.Output[HelmOperatorProperties]{
		OutputState: o.OutputState,
	}
}

// Values override for the operator Helm chart.
func (o HelmOperatorPropertiesOutput) ChartValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmOperatorProperties) *string { return v.ChartValues }).(pulumi.StringPtrOutput)
}

// Version of the operator Helm chart.
func (o HelmOperatorPropertiesOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmOperatorProperties) *string { return v.ChartVersion }).(pulumi.StringPtrOutput)
}

type HelmOperatorPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HelmOperatorPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmOperatorProperties)(nil)).Elem()
}

func (o HelmOperatorPropertiesPtrOutput) ToHelmOperatorPropertiesPtrOutput() HelmOperatorPropertiesPtrOutput {
	return o
}

func (o HelmOperatorPropertiesPtrOutput) ToHelmOperatorPropertiesPtrOutputWithContext(ctx context.Context) HelmOperatorPropertiesPtrOutput {
	return o
}

func (o HelmOperatorPropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HelmOperatorProperties] {
	return pulumix.Output[*HelmOperatorProperties]{
		OutputState: o.OutputState,
	}
}

func (o HelmOperatorPropertiesPtrOutput) Elem() HelmOperatorPropertiesOutput {
	return o.ApplyT(func(v *HelmOperatorProperties) HelmOperatorProperties {
		if v != nil {
			return *v
		}
		var ret HelmOperatorProperties
		return ret
	}).(HelmOperatorPropertiesOutput)
}

// Values override for the operator Helm chart.
func (o HelmOperatorPropertiesPtrOutput) ChartValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmOperatorProperties) *string {
		if v == nil {
			return nil
		}
		return v.ChartValues
	}).(pulumi.StringPtrOutput)
}

// Version of the operator Helm chart.
func (o HelmOperatorPropertiesPtrOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmOperatorProperties) *string {
		if v == nil {
			return nil
		}
		return v.ChartVersion
	}).(pulumi.StringPtrOutput)
}

// Properties for Helm operator.
type HelmOperatorPropertiesResponse struct {
	// Values override for the operator Helm chart.
	ChartValues *string `pulumi:"chartValues"`
	// Version of the operator Helm chart.
	ChartVersion *string `pulumi:"chartVersion"`
}

// Properties for Helm operator.
type HelmOperatorPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HelmOperatorPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmOperatorPropertiesResponse)(nil)).Elem()
}

func (o HelmOperatorPropertiesResponseOutput) ToHelmOperatorPropertiesResponseOutput() HelmOperatorPropertiesResponseOutput {
	return o
}

func (o HelmOperatorPropertiesResponseOutput) ToHelmOperatorPropertiesResponseOutputWithContext(ctx context.Context) HelmOperatorPropertiesResponseOutput {
	return o
}

func (o HelmOperatorPropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HelmOperatorPropertiesResponse] {
	return pulumix.Output[HelmOperatorPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Values override for the operator Helm chart.
func (o HelmOperatorPropertiesResponseOutput) ChartValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmOperatorPropertiesResponse) *string { return v.ChartValues }).(pulumi.StringPtrOutput)
}

// Version of the operator Helm chart.
func (o HelmOperatorPropertiesResponseOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HelmOperatorPropertiesResponse) *string { return v.ChartVersion }).(pulumi.StringPtrOutput)
}

type HelmOperatorPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HelmOperatorPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmOperatorPropertiesResponse)(nil)).Elem()
}

func (o HelmOperatorPropertiesResponsePtrOutput) ToHelmOperatorPropertiesResponsePtrOutput() HelmOperatorPropertiesResponsePtrOutput {
	return o
}

func (o HelmOperatorPropertiesResponsePtrOutput) ToHelmOperatorPropertiesResponsePtrOutputWithContext(ctx context.Context) HelmOperatorPropertiesResponsePtrOutput {
	return o
}

func (o HelmOperatorPropertiesResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HelmOperatorPropertiesResponse] {
	return pulumix.Output[*HelmOperatorPropertiesResponse]{
		OutputState: o.OutputState,
	}
}

func (o HelmOperatorPropertiesResponsePtrOutput) Elem() HelmOperatorPropertiesResponseOutput {
	return o.ApplyT(func(v *HelmOperatorPropertiesResponse) HelmOperatorPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret HelmOperatorPropertiesResponse
		return ret
	}).(HelmOperatorPropertiesResponseOutput)
}

// Values override for the operator Helm chart.
func (o HelmOperatorPropertiesResponsePtrOutput) ChartValues() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmOperatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChartValues
	}).(pulumi.StringPtrOutput)
}

// Version of the operator Helm chart.
func (o HelmOperatorPropertiesResponsePtrOutput) ChartVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HelmOperatorPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ChartVersion
	}).(pulumi.StringPtrOutput)
}

// Properties for HelmRelease objects
type HelmReleasePropertiesDefinitionResponse struct {
	// Total number of times that the HelmRelease failed to install or upgrade
	FailureCount *float64 `pulumi:"failureCount"`
	// The reference to the HelmChart object used as the source to this HelmRelease
	HelmChartRef *ObjectReferenceDefinitionResponse `pulumi:"helmChartRef"`
	// Number of times that the HelmRelease failed to install
	InstallFailureCount *float64 `pulumi:"installFailureCount"`
	// The revision number of the last released object change
	LastRevisionApplied *float64 `pulumi:"lastRevisionApplied"`
	// Number of times that the HelmRelease failed to upgrade
	UpgradeFailureCount *float64 `pulumi:"upgradeFailureCount"`
}

// Properties for HelmRelease objects
type HelmReleasePropertiesDefinitionResponseOutput struct{ *pulumi.OutputState }

func (HelmReleasePropertiesDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HelmReleasePropertiesDefinitionResponse)(nil)).Elem()
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToHelmReleasePropertiesDefinitionResponseOutput() HelmReleasePropertiesDefinitionResponseOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToHelmReleasePropertiesDefinitionResponseOutputWithContext(ctx context.Context) HelmReleasePropertiesDefinitionResponseOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[HelmReleasePropertiesDefinitionResponse] {
	return pulumix.Output[HelmReleasePropertiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Total number of times that the HelmRelease failed to install or upgrade
func (o HelmReleasePropertiesDefinitionResponseOutput) FailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.FailureCount }).(pulumi.Float64PtrOutput)
}

// The reference to the HelmChart object used as the source to this HelmRelease
func (o HelmReleasePropertiesDefinitionResponseOutput) HelmChartRef() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *ObjectReferenceDefinitionResponse {
		return v.HelmChartRef
	}).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Number of times that the HelmRelease failed to install
func (o HelmReleasePropertiesDefinitionResponseOutput) InstallFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.InstallFailureCount }).(pulumi.Float64PtrOutput)
}

// The revision number of the last released object change
func (o HelmReleasePropertiesDefinitionResponseOutput) LastRevisionApplied() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.LastRevisionApplied }).(pulumi.Float64PtrOutput)
}

// Number of times that the HelmRelease failed to upgrade
func (o HelmReleasePropertiesDefinitionResponseOutput) UpgradeFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v HelmReleasePropertiesDefinitionResponse) *float64 { return v.UpgradeFailureCount }).(pulumi.Float64PtrOutput)
}

type HelmReleasePropertiesDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (HelmReleasePropertiesDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HelmReleasePropertiesDefinitionResponse)(nil)).Elem()
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToHelmReleasePropertiesDefinitionResponsePtrOutput() HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToHelmReleasePropertiesDefinitionResponsePtrOutputWithContext(ctx context.Context) HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*HelmReleasePropertiesDefinitionResponse] {
	return pulumix.Output[*HelmReleasePropertiesDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o HelmReleasePropertiesDefinitionResponsePtrOutput) Elem() HelmReleasePropertiesDefinitionResponseOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) HelmReleasePropertiesDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret HelmReleasePropertiesDefinitionResponse
		return ret
	}).(HelmReleasePropertiesDefinitionResponseOutput)
}

// Total number of times that the HelmRelease failed to install or upgrade
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) FailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.FailureCount
	}).(pulumi.Float64PtrOutput)
}

// The reference to the HelmChart object used as the source to this HelmRelease
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) HelmChartRef() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *ObjectReferenceDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.HelmChartRef
	}).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Number of times that the HelmRelease failed to install
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) InstallFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.InstallFailureCount
	}).(pulumi.Float64PtrOutput)
}

// The revision number of the last released object change
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) LastRevisionApplied() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LastRevisionApplied
	}).(pulumi.Float64PtrOutput)
}

// Number of times that the HelmRelease failed to upgrade
func (o HelmReleasePropertiesDefinitionResponsePtrOutput) UpgradeFailureCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *HelmReleasePropertiesDefinitionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.UpgradeFailureCount
	}).(pulumi.Float64PtrOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToOutput(ctx context.Context) pulumix.Output[Identity] {
	return pulumix.Output[Identity]{
		OutputState: i.ToIdentityOutputWithContext(ctx).OutputState,
	}
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

func (i *identityPtrType) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: i.ToIdentityPtrOutputWithContext(ctx).OutputState,
	}
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

func (o IdentityOutput) ToOutput(ctx context.Context) pulumix.Output[Identity] {
	return pulumix.Output[Identity]{
		OutputState: o.OutputState,
	}
}

// The identity type.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Identity] {
	return pulumix.Output[*Identity]{
		OutputState: o.OutputState,
	}
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IdentityResponse] {
	return pulumix.Output[IdentityResponse]{
		OutputState: o.OutputState,
	}
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IdentityResponse] {
	return pulumix.Output[*IdentityResponse]{
		OutputState: o.OutputState,
	}
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Properties that define a Azure Arc PrivateLinkScope resource.
type KubernetesConfigurationPrivateLinkScopeProperties struct {
	// Managed Cluster ARM ID for the private link scope  (Required)
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// KubernetesConfigurationPrivateLinkScopePropertiesInput is an input type that accepts KubernetesConfigurationPrivateLinkScopePropertiesArgs and KubernetesConfigurationPrivateLinkScopePropertiesOutput values.
// You can construct a concrete instance of `KubernetesConfigurationPrivateLinkScopePropertiesInput` via:
//
//	KubernetesConfigurationPrivateLinkScopePropertiesArgs{...}
type KubernetesConfigurationPrivateLinkScopePropertiesInput interface {
	pulumi.Input

	ToKubernetesConfigurationPrivateLinkScopePropertiesOutput() KubernetesConfigurationPrivateLinkScopePropertiesOutput
	ToKubernetesConfigurationPrivateLinkScopePropertiesOutputWithContext(context.Context) KubernetesConfigurationPrivateLinkScopePropertiesOutput
}

// Properties that define a Azure Arc PrivateLinkScope resource.
type KubernetesConfigurationPrivateLinkScopePropertiesArgs struct {
	// Managed Cluster ARM ID for the private link scope  (Required)
	ClusterResourceId pulumi.StringInput `pulumi:"clusterResourceId"`
	// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
}

func (KubernetesConfigurationPrivateLinkScopePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfigurationPrivateLinkScopeProperties)(nil)).Elem()
}

func (i KubernetesConfigurationPrivateLinkScopePropertiesArgs) ToKubernetesConfigurationPrivateLinkScopePropertiesOutput() KubernetesConfigurationPrivateLinkScopePropertiesOutput {
	return i.ToKubernetesConfigurationPrivateLinkScopePropertiesOutputWithContext(context.Background())
}

func (i KubernetesConfigurationPrivateLinkScopePropertiesArgs) ToKubernetesConfigurationPrivateLinkScopePropertiesOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigurationPrivateLinkScopePropertiesOutput)
}

func (i KubernetesConfigurationPrivateLinkScopePropertiesArgs) ToOutput(ctx context.Context) pulumix.Output[KubernetesConfigurationPrivateLinkScopeProperties] {
	return pulumix.Output[KubernetesConfigurationPrivateLinkScopeProperties]{
		OutputState: i.ToKubernetesConfigurationPrivateLinkScopePropertiesOutputWithContext(ctx).OutputState,
	}
}

func (i KubernetesConfigurationPrivateLinkScopePropertiesArgs) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutput() KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return i.ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(context.Background())
}

func (i KubernetesConfigurationPrivateLinkScopePropertiesArgs) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigurationPrivateLinkScopePropertiesOutput).ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx)
}

// KubernetesConfigurationPrivateLinkScopePropertiesPtrInput is an input type that accepts KubernetesConfigurationPrivateLinkScopePropertiesArgs, KubernetesConfigurationPrivateLinkScopePropertiesPtr and KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput values.
// You can construct a concrete instance of `KubernetesConfigurationPrivateLinkScopePropertiesPtrInput` via:
//
//	        KubernetesConfigurationPrivateLinkScopePropertiesArgs{...}
//
//	or:
//
//	        nil
type KubernetesConfigurationPrivateLinkScopePropertiesPtrInput interface {
	pulumi.Input

	ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutput() KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput
	ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(context.Context) KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput
}

type kubernetesConfigurationPrivateLinkScopePropertiesPtrType KubernetesConfigurationPrivateLinkScopePropertiesArgs

func KubernetesConfigurationPrivateLinkScopePropertiesPtr(v *KubernetesConfigurationPrivateLinkScopePropertiesArgs) KubernetesConfigurationPrivateLinkScopePropertiesPtrInput {
	return (*kubernetesConfigurationPrivateLinkScopePropertiesPtrType)(v)
}

func (*kubernetesConfigurationPrivateLinkScopePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesConfigurationPrivateLinkScopeProperties)(nil)).Elem()
}

func (i *kubernetesConfigurationPrivateLinkScopePropertiesPtrType) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutput() KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return i.ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(context.Background())
}

func (i *kubernetesConfigurationPrivateLinkScopePropertiesPtrType) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput)
}

func (i *kubernetesConfigurationPrivateLinkScopePropertiesPtrType) ToOutput(ctx context.Context) pulumix.Output[*KubernetesConfigurationPrivateLinkScopeProperties] {
	return pulumix.Output[*KubernetesConfigurationPrivateLinkScopeProperties]{
		OutputState: i.ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx).OutputState,
	}
}

// Properties that define a Azure Arc PrivateLinkScope resource.
type KubernetesConfigurationPrivateLinkScopePropertiesOutput struct{ *pulumi.OutputState }

func (KubernetesConfigurationPrivateLinkScopePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfigurationPrivateLinkScopeProperties)(nil)).Elem()
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesOutput() KubernetesConfigurationPrivateLinkScopePropertiesOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutput() KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return o.ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(context.Background())
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesConfigurationPrivateLinkScopeProperties) *KubernetesConfigurationPrivateLinkScopeProperties {
		return &v
	}).(KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput)
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ToOutput(ctx context.Context) pulumix.Output[KubernetesConfigurationPrivateLinkScopeProperties] {
	return pulumix.Output[KubernetesConfigurationPrivateLinkScopeProperties]{
		OutputState: o.OutputState,
	}
}

// Managed Cluster ARM ID for the private link scope  (Required)
func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopeProperties) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
func (o KubernetesConfigurationPrivateLinkScopePropertiesOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopeProperties) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

type KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput struct{ *pulumi.OutputState }

func (KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesConfigurationPrivateLinkScopeProperties)(nil)).Elem()
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutput() KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesPtrOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*KubernetesConfigurationPrivateLinkScopeProperties] {
	return pulumix.Output[*KubernetesConfigurationPrivateLinkScopeProperties]{
		OutputState: o.OutputState,
	}
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) Elem() KubernetesConfigurationPrivateLinkScopePropertiesOutput {
	return o.ApplyT(func(v *KubernetesConfigurationPrivateLinkScopeProperties) KubernetesConfigurationPrivateLinkScopeProperties {
		if v != nil {
			return *v
		}
		var ret KubernetesConfigurationPrivateLinkScopeProperties
		return ret
	}).(KubernetesConfigurationPrivateLinkScopePropertiesOutput)
}

// Managed Cluster ARM ID for the private link scope  (Required)
func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) ClusterResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesConfigurationPrivateLinkScopeProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterResourceId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
func (o KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesConfigurationPrivateLinkScopeProperties) *string {
		if v == nil {
			return nil
		}
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// Properties that define a Azure Arc PrivateLinkScope resource.
type KubernetesConfigurationPrivateLinkScopePropertiesResponse struct {
	// Managed Cluster ARM ID for the private link scope  (Required)
	ClusterResourceId string `pulumi:"clusterResourceId"`
	// The collection of associated Private Endpoint Connections.
	PrivateEndpointConnections []PrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// The Guid id of the private link scope.
	PrivateLinkScopeId string `pulumi:"privateLinkScopeId"`
	// Current state of this PrivateLinkScope: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Provisioning ,Succeeded, Canceled and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
}

// Properties that define a Azure Arc PrivateLinkScope resource.
type KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput struct{ *pulumi.OutputState }

func (KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesConfigurationPrivateLinkScopePropertiesResponse)(nil)).Elem()
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesResponseOutput() KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ToKubernetesConfigurationPrivateLinkScopePropertiesResponseOutputWithContext(ctx context.Context) KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput {
	return o
}

func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KubernetesConfigurationPrivateLinkScopePropertiesResponse] {
	return pulumix.Output[KubernetesConfigurationPrivateLinkScopePropertiesResponse]{
		OutputState: o.OutputState,
	}
}

// Managed Cluster ARM ID for the private link scope  (Required)
func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ClusterResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopePropertiesResponse) string { return v.ClusterResourceId }).(pulumi.StringOutput)
}

// The collection of associated Private Endpoint Connections.
func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) PrivateEndpointConnections() PrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopePropertiesResponse) []PrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(PrivateEndpointConnectionResponseArrayOutput)
}

// The Guid id of the private link scope.
func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) PrivateLinkScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopePropertiesResponse) string { return v.PrivateLinkScopeId }).(pulumi.StringOutput)
}

// Current state of this PrivateLinkScope: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Provisioning ,Succeeded, Canceled and Failed.
func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints.
func (o KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesConfigurationPrivateLinkScopePropertiesResponse) *string {
		return v.PublicNetworkAccess
	}).(pulumi.StringPtrOutput)
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinition struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn []string `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force *bool `pulumi:"force"`
	// The path in the source reference to reconcile on the cluster.
	Path *string `pulumi:"path"`
	// Used for variable substitution for this Kustomization after kustomize build.
	PostBuild *PostBuildDefinition `pulumi:"postBuild"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune *bool `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds *float64 `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// Enable/disable health check for all Kubernetes objects created by this Kustomization.
	Wait *bool `pulumi:"wait"`
}

// Defaults sets the appropriate defaults for KustomizationDefinition
func (val *KustomizationDefinition) Defaults() *KustomizationDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		force_ := false
		tmp.Force = &force_
	}
	if tmp.Path == nil {
		path_ := ""
		tmp.Path = &path_
	}
	if tmp.Prune == nil {
		prune_ := false
		tmp.Prune = &prune_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	if tmp.Wait == nil {
		wait_ := true
		tmp.Wait = &wait_
	}
	return &tmp
}

// KustomizationDefinitionInput is an input type that accepts KustomizationDefinitionArgs and KustomizationDefinitionOutput values.
// You can construct a concrete instance of `KustomizationDefinitionInput` via:
//
//	KustomizationDefinitionArgs{...}
type KustomizationDefinitionInput interface {
	pulumi.Input

	ToKustomizationDefinitionOutput() KustomizationDefinitionOutput
	ToKustomizationDefinitionOutputWithContext(context.Context) KustomizationDefinitionOutput
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionArgs struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn pulumi.StringArrayInput `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force pulumi.BoolPtrInput `pulumi:"force"`
	// The path in the source reference to reconcile on the cluster.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Used for variable substitution for this Kustomization after kustomize build.
	PostBuild PostBuildDefinitionPtrInput `pulumi:"postBuild"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune pulumi.BoolPtrInput `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds pulumi.Float64PtrInput `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds pulumi.Float64PtrInput `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds pulumi.Float64PtrInput `pulumi:"timeoutInSeconds"`
	// Enable/disable health check for all Kubernetes objects created by this Kustomization.
	Wait pulumi.BoolPtrInput `pulumi:"wait"`
}

// Defaults sets the appropriate defaults for KustomizationDefinitionArgs
func (val *KustomizationDefinitionArgs) Defaults() *KustomizationDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		tmp.Force = pulumi.BoolPtr(false)
	}
	if tmp.Path == nil {
		tmp.Path = pulumi.StringPtr("")
	}
	if tmp.Prune == nil {
		tmp.Prune = pulumi.BoolPtr(false)
	}
	if tmp.SyncIntervalInSeconds == nil {
		tmp.SyncIntervalInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.TimeoutInSeconds == nil {
		tmp.TimeoutInSeconds = pulumi.Float64Ptr(600.0)
	}
	if tmp.Wait == nil {
		tmp.Wait = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (KustomizationDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinition)(nil)).Elem()
}

func (i KustomizationDefinitionArgs) ToKustomizationDefinitionOutput() KustomizationDefinitionOutput {
	return i.ToKustomizationDefinitionOutputWithContext(context.Background())
}

func (i KustomizationDefinitionArgs) ToKustomizationDefinitionOutputWithContext(ctx context.Context) KustomizationDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationDefinitionOutput)
}

func (i KustomizationDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinition] {
	return pulumix.Output[KustomizationDefinition]{
		OutputState: i.ToKustomizationDefinitionOutputWithContext(ctx).OutputState,
	}
}

// KustomizationDefinitionMapInput is an input type that accepts KustomizationDefinitionMap and KustomizationDefinitionMapOutput values.
// You can construct a concrete instance of `KustomizationDefinitionMapInput` via:
//
//	KustomizationDefinitionMap{ "key": KustomizationDefinitionArgs{...} }
type KustomizationDefinitionMapInput interface {
	pulumi.Input

	ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput
	ToKustomizationDefinitionMapOutputWithContext(context.Context) KustomizationDefinitionMapOutput
}

type KustomizationDefinitionMap map[string]KustomizationDefinitionInput

func (KustomizationDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinition)(nil)).Elem()
}

func (i KustomizationDefinitionMap) ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput {
	return i.ToKustomizationDefinitionMapOutputWithContext(context.Background())
}

func (i KustomizationDefinitionMap) ToKustomizationDefinitionMapOutputWithContext(ctx context.Context) KustomizationDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KustomizationDefinitionMapOutput)
}

func (i KustomizationDefinitionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinition] {
	return pulumix.Output[map[string]KustomizationDefinition]{
		OutputState: i.ToKustomizationDefinitionMapOutputWithContext(ctx).OutputState,
	}
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinition)(nil)).Elem()
}

func (o KustomizationDefinitionOutput) ToKustomizationDefinitionOutput() KustomizationDefinitionOutput {
	return o
}

func (o KustomizationDefinitionOutput) ToKustomizationDefinitionOutputWithContext(ctx context.Context) KustomizationDefinitionOutput {
	return o
}

func (o KustomizationDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinition] {
	return pulumix.Output[KustomizationDefinition]{
		OutputState: o.OutputState,
	}
}

// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
func (o KustomizationDefinitionOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KustomizationDefinition) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
func (o KustomizationDefinitionOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// The path in the source reference to reconcile on the cluster.
func (o KustomizationDefinitionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Used for variable substitution for this Kustomization after kustomize build.
func (o KustomizationDefinitionOutput) PostBuild() PostBuildDefinitionPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *PostBuildDefinition { return v.PostBuild }).(PostBuildDefinitionPtrOutput)
}

// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
func (o KustomizationDefinitionOutput) RetryIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.RetryIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// Enable/disable health check for all Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinition) *bool { return v.Wait }).(pulumi.BoolPtrOutput)
}

type KustomizationDefinitionMapOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinition)(nil)).Elem()
}

func (o KustomizationDefinitionMapOutput) ToKustomizationDefinitionMapOutput() KustomizationDefinitionMapOutput {
	return o
}

func (o KustomizationDefinitionMapOutput) ToKustomizationDefinitionMapOutputWithContext(ctx context.Context) KustomizationDefinitionMapOutput {
	return o
}

func (o KustomizationDefinitionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinition] {
	return pulumix.Output[map[string]KustomizationDefinition]{
		OutputState: o.OutputState,
	}
}

func (o KustomizationDefinitionMapOutput) MapIndex(k pulumi.StringInput) KustomizationDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KustomizationDefinition {
		return vs[0].(map[string]KustomizationDefinition)[vs[1].(string)]
	}).(KustomizationDefinitionOutput)
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionResponse struct {
	// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
	DependsOn []string `pulumi:"dependsOn"`
	// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
	Force *bool `pulumi:"force"`
	// Name of the Kustomization, matching the key in the Kustomizations object map.
	Name string `pulumi:"name"`
	// The path in the source reference to reconcile on the cluster.
	Path *string `pulumi:"path"`
	// Used for variable substitution for this Kustomization after kustomize build.
	PostBuild *PostBuildDefinitionResponse `pulumi:"postBuild"`
	// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
	Prune *bool `pulumi:"prune"`
	// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
	RetryIntervalInSeconds *float64 `pulumi:"retryIntervalInSeconds"`
	// The interval at which to re-reconcile the Kustomization on the cluster.
	SyncIntervalInSeconds *float64 `pulumi:"syncIntervalInSeconds"`
	// The maximum time to attempt to reconcile the Kustomization on the cluster.
	TimeoutInSeconds *float64 `pulumi:"timeoutInSeconds"`
	// Enable/disable health check for all Kubernetes objects created by this Kustomization.
	Wait *bool `pulumi:"wait"`
}

// Defaults sets the appropriate defaults for KustomizationDefinitionResponse
func (val *KustomizationDefinitionResponse) Defaults() *KustomizationDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Force == nil {
		force_ := false
		tmp.Force = &force_
	}
	if tmp.Path == nil {
		path_ := ""
		tmp.Path = &path_
	}
	if tmp.Prune == nil {
		prune_ := false
		tmp.Prune = &prune_
	}
	if tmp.SyncIntervalInSeconds == nil {
		syncIntervalInSeconds_ := 600.0
		tmp.SyncIntervalInSeconds = &syncIntervalInSeconds_
	}
	if tmp.TimeoutInSeconds == nil {
		timeoutInSeconds_ := 600.0
		tmp.TimeoutInSeconds = &timeoutInSeconds_
	}
	if tmp.Wait == nil {
		wait_ := true
		tmp.Wait = &wait_
	}
	return &tmp
}

// The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster.
type KustomizationDefinitionResponseOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KustomizationDefinitionResponse)(nil)).Elem()
}

func (o KustomizationDefinitionResponseOutput) ToKustomizationDefinitionResponseOutput() KustomizationDefinitionResponseOutput {
	return o
}

func (o KustomizationDefinitionResponseOutput) ToKustomizationDefinitionResponseOutputWithContext(ctx context.Context) KustomizationDefinitionResponseOutput {
	return o
}

func (o KustomizationDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[KustomizationDefinitionResponse] {
	return pulumix.Output[KustomizationDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation.
func (o KustomizationDefinitionResponseOutput) DependsOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) []string { return v.DependsOn }).(pulumi.StringArrayOutput)
}

// Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change.
func (o KustomizationDefinitionResponseOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *bool { return v.Force }).(pulumi.BoolPtrOutput)
}

// Name of the Kustomization, matching the key in the Kustomizations object map.
func (o KustomizationDefinitionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The path in the source reference to reconcile on the cluster.
func (o KustomizationDefinitionResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Used for variable substitution for this Kustomization after kustomize build.
func (o KustomizationDefinitionResponseOutput) PostBuild() PostBuildDefinitionResponsePtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *PostBuildDefinitionResponse { return v.PostBuild }).(PostBuildDefinitionResponsePtrOutput)
}

// Enable/disable garbage collections of Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionResponseOutput) Prune() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *bool { return v.Prune }).(pulumi.BoolPtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation.
func (o KustomizationDefinitionResponseOutput) RetryIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.RetryIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The interval at which to re-reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionResponseOutput) SyncIntervalInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.SyncIntervalInSeconds }).(pulumi.Float64PtrOutput)
}

// The maximum time to attempt to reconcile the Kustomization on the cluster.
func (o KustomizationDefinitionResponseOutput) TimeoutInSeconds() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *float64 { return v.TimeoutInSeconds }).(pulumi.Float64PtrOutput)
}

// Enable/disable health check for all Kubernetes objects created by this Kustomization.
func (o KustomizationDefinitionResponseOutput) Wait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KustomizationDefinitionResponse) *bool { return v.Wait }).(pulumi.BoolPtrOutput)
}

type KustomizationDefinitionResponseMapOutput struct{ *pulumi.OutputState }

func (KustomizationDefinitionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KustomizationDefinitionResponse)(nil)).Elem()
}

func (o KustomizationDefinitionResponseMapOutput) ToKustomizationDefinitionResponseMapOutput() KustomizationDefinitionResponseMapOutput {
	return o
}

func (o KustomizationDefinitionResponseMapOutput) ToKustomizationDefinitionResponseMapOutputWithContext(ctx context.Context) KustomizationDefinitionResponseMapOutput {
	return o
}

func (o KustomizationDefinitionResponseMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]KustomizationDefinitionResponse] {
	return pulumix.Output[map[string]KustomizationDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o KustomizationDefinitionResponseMapOutput) MapIndex(k pulumi.StringInput) KustomizationDefinitionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KustomizationDefinitionResponse {
		return vs[0].(map[string]KustomizationDefinitionResponse)[vs[1].(string)]
	}).(KustomizationDefinitionResponseOutput)
}

// Parameters to authenticate using a Managed Identity.
type ManagedIdentityDefinition struct {
	// The client Id for authenticating a Managed Identity.
	ClientId *string `pulumi:"clientId"`
}

// ManagedIdentityDefinitionInput is an input type that accepts ManagedIdentityDefinitionArgs and ManagedIdentityDefinitionOutput values.
// You can construct a concrete instance of `ManagedIdentityDefinitionInput` via:
//
//	ManagedIdentityDefinitionArgs{...}
type ManagedIdentityDefinitionInput interface {
	pulumi.Input

	ToManagedIdentityDefinitionOutput() ManagedIdentityDefinitionOutput
	ToManagedIdentityDefinitionOutputWithContext(context.Context) ManagedIdentityDefinitionOutput
}

// Parameters to authenticate using a Managed Identity.
type ManagedIdentityDefinitionArgs struct {
	// The client Id for authenticating a Managed Identity.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
}

func (ManagedIdentityDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityDefinition)(nil)).Elem()
}

func (i ManagedIdentityDefinitionArgs) ToManagedIdentityDefinitionOutput() ManagedIdentityDefinitionOutput {
	return i.ToManagedIdentityDefinitionOutputWithContext(context.Background())
}

func (i ManagedIdentityDefinitionArgs) ToManagedIdentityDefinitionOutputWithContext(ctx context.Context) ManagedIdentityDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityDefinitionOutput)
}

func (i ManagedIdentityDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[ManagedIdentityDefinition] {
	return pulumix.Output[ManagedIdentityDefinition]{
		OutputState: i.ToManagedIdentityDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i ManagedIdentityDefinitionArgs) ToManagedIdentityDefinitionPtrOutput() ManagedIdentityDefinitionPtrOutput {
	return i.ToManagedIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityDefinitionArgs) ToManagedIdentityDefinitionPtrOutputWithContext(ctx context.Context) ManagedIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityDefinitionOutput).ToManagedIdentityDefinitionPtrOutputWithContext(ctx)
}

// ManagedIdentityDefinitionPtrInput is an input type that accepts ManagedIdentityDefinitionArgs, ManagedIdentityDefinitionPtr and ManagedIdentityDefinitionPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityDefinitionPtrInput` via:
//
//	        ManagedIdentityDefinitionArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityDefinitionPtrInput interface {
	pulumi.Input

	ToManagedIdentityDefinitionPtrOutput() ManagedIdentityDefinitionPtrOutput
	ToManagedIdentityDefinitionPtrOutputWithContext(context.Context) ManagedIdentityDefinitionPtrOutput
}

type managedIdentityDefinitionPtrType ManagedIdentityDefinitionArgs

func ManagedIdentityDefinitionPtr(v *ManagedIdentityDefinitionArgs) ManagedIdentityDefinitionPtrInput {
	return (*managedIdentityDefinitionPtrType)(v)
}

func (*managedIdentityDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityDefinition)(nil)).Elem()
}

func (i *managedIdentityDefinitionPtrType) ToManagedIdentityDefinitionPtrOutput() ManagedIdentityDefinitionPtrOutput {
	return i.ToManagedIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (i *managedIdentityDefinitionPtrType) ToManagedIdentityDefinitionPtrOutputWithContext(ctx context.Context) ManagedIdentityDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityDefinitionPtrOutput)
}

func (i *managedIdentityDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ManagedIdentityDefinition] {
	return pulumix.Output[*ManagedIdentityDefinition]{
		OutputState: i.ToManagedIdentityDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to authenticate using a Managed Identity.
type ManagedIdentityDefinitionOutput struct{ *pulumi.OutputState }

func (ManagedIdentityDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityDefinition)(nil)).Elem()
}

func (o ManagedIdentityDefinitionOutput) ToManagedIdentityDefinitionOutput() ManagedIdentityDefinitionOutput {
	return o
}

func (o ManagedIdentityDefinitionOutput) ToManagedIdentityDefinitionOutputWithContext(ctx context.Context) ManagedIdentityDefinitionOutput {
	return o
}

func (o ManagedIdentityDefinitionOutput) ToManagedIdentityDefinitionPtrOutput() ManagedIdentityDefinitionPtrOutput {
	return o.ToManagedIdentityDefinitionPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityDefinitionOutput) ToManagedIdentityDefinitionPtrOutputWithContext(ctx context.Context) ManagedIdentityDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentityDefinition) *ManagedIdentityDefinition {
		return &v
	}).(ManagedIdentityDefinitionPtrOutput)
}

func (o ManagedIdentityDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedIdentityDefinition] {
	return pulumix.Output[ManagedIdentityDefinition]{
		OutputState: o.OutputState,
	}
}

// The client Id for authenticating a Managed Identity.
func (o ManagedIdentityDefinitionOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityDefinition) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityDefinition)(nil)).Elem()
}

func (o ManagedIdentityDefinitionPtrOutput) ToManagedIdentityDefinitionPtrOutput() ManagedIdentityDefinitionPtrOutput {
	return o
}

func (o ManagedIdentityDefinitionPtrOutput) ToManagedIdentityDefinitionPtrOutputWithContext(ctx context.Context) ManagedIdentityDefinitionPtrOutput {
	return o
}

func (o ManagedIdentityDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedIdentityDefinition] {
	return pulumix.Output[*ManagedIdentityDefinition]{
		OutputState: o.OutputState,
	}
}

func (o ManagedIdentityDefinitionPtrOutput) Elem() ManagedIdentityDefinitionOutput {
	return o.ApplyT(func(v *ManagedIdentityDefinition) ManagedIdentityDefinition {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityDefinition
		return ret
	}).(ManagedIdentityDefinitionOutput)
}

// The client Id for authenticating a Managed Identity.
func (o ManagedIdentityDefinitionPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using a Managed Identity.
type ManagedIdentityDefinitionResponse struct {
	// The client Id for authenticating a Managed Identity.
	ClientId *string `pulumi:"clientId"`
}

// Parameters to authenticate using a Managed Identity.
type ManagedIdentityDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityDefinitionResponse)(nil)).Elem()
}

func (o ManagedIdentityDefinitionResponseOutput) ToManagedIdentityDefinitionResponseOutput() ManagedIdentityDefinitionResponseOutput {
	return o
}

func (o ManagedIdentityDefinitionResponseOutput) ToManagedIdentityDefinitionResponseOutputWithContext(ctx context.Context) ManagedIdentityDefinitionResponseOutput {
	return o
}

func (o ManagedIdentityDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ManagedIdentityDefinitionResponse] {
	return pulumix.Output[ManagedIdentityDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The client Id for authenticating a Managed Identity.
func (o ManagedIdentityDefinitionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityDefinitionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityDefinitionResponse)(nil)).Elem()
}

func (o ManagedIdentityDefinitionResponsePtrOutput) ToManagedIdentityDefinitionResponsePtrOutput() ManagedIdentityDefinitionResponsePtrOutput {
	return o
}

func (o ManagedIdentityDefinitionResponsePtrOutput) ToManagedIdentityDefinitionResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityDefinitionResponsePtrOutput {
	return o
}

func (o ManagedIdentityDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ManagedIdentityDefinitionResponse] {
	return pulumix.Output[*ManagedIdentityDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ManagedIdentityDefinitionResponsePtrOutput) Elem() ManagedIdentityDefinitionResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityDefinitionResponse) ManagedIdentityDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityDefinitionResponse
		return ret
	}).(ManagedIdentityDefinitionResponseOutput)
}

// The client Id for authenticating a Managed Identity.
func (o ManagedIdentityDefinitionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Object reference to a Kubernetes object on a cluster
type ObjectReferenceDefinitionResponse struct {
	// Name of the object
	Name *string `pulumi:"name"`
	// Namespace of the object
	Namespace *string `pulumi:"namespace"`
}

// Object reference to a Kubernetes object on a cluster
type ObjectReferenceDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectReferenceDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectReferenceDefinitionResponse)(nil)).Elem()
}

func (o ObjectReferenceDefinitionResponseOutput) ToObjectReferenceDefinitionResponseOutput() ObjectReferenceDefinitionResponseOutput {
	return o
}

func (o ObjectReferenceDefinitionResponseOutput) ToObjectReferenceDefinitionResponseOutputWithContext(ctx context.Context) ObjectReferenceDefinitionResponseOutput {
	return o
}

func (o ObjectReferenceDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectReferenceDefinitionResponse] {
	return pulumix.Output[ObjectReferenceDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Name of the object
func (o ObjectReferenceDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferenceDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the object
func (o ObjectReferenceDefinitionResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectReferenceDefinitionResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ObjectReferenceDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ObjectReferenceDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectReferenceDefinitionResponse)(nil)).Elem()
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToObjectReferenceDefinitionResponsePtrOutput() ObjectReferenceDefinitionResponsePtrOutput {
	return o
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToObjectReferenceDefinitionResponsePtrOutputWithContext(ctx context.Context) ObjectReferenceDefinitionResponsePtrOutput {
	return o
}

func (o ObjectReferenceDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ObjectReferenceDefinitionResponse] {
	return pulumix.Output[*ObjectReferenceDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectReferenceDefinitionResponsePtrOutput) Elem() ObjectReferenceDefinitionResponseOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) ObjectReferenceDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ObjectReferenceDefinitionResponse
		return ret
	}).(ObjectReferenceDefinitionResponseOutput)
}

// Name of the object
func (o ObjectReferenceDefinitionResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the object
func (o ObjectReferenceDefinitionResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectReferenceDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Status condition of Kubernetes object
type ObjectStatusConditionDefinitionResponse struct {
	// Last time this status condition has changed
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// A more verbose description of the object status condition
	Message *string `pulumi:"message"`
	// Reason for the specified status condition type status
	Reason *string `pulumi:"reason"`
	// Status of the Kubernetes object condition type
	Status *string `pulumi:"status"`
	// Object status condition type for this object
	Type *string `pulumi:"type"`
}

// Status condition of Kubernetes object
type ObjectStatusConditionDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectStatusConditionDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectStatusConditionDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToObjectStatusConditionDefinitionResponseOutput() ObjectStatusConditionDefinitionResponseOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToObjectStatusConditionDefinitionResponseOutputWithContext(ctx context.Context) ObjectStatusConditionDefinitionResponseOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectStatusConditionDefinitionResponse] {
	return pulumix.Output[ObjectStatusConditionDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Last time this status condition has changed
func (o ObjectStatusConditionDefinitionResponseOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// A more verbose description of the object status condition
func (o ObjectStatusConditionDefinitionResponseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Reason for the specified status condition type status
func (o ObjectStatusConditionDefinitionResponseOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the Kubernetes object condition type
func (o ObjectStatusConditionDefinitionResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Object status condition type for this object
func (o ObjectStatusConditionDefinitionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusConditionDefinitionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ObjectStatusConditionDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ObjectStatusConditionDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectStatusConditionDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToObjectStatusConditionDefinitionResponseArrayOutput() ObjectStatusConditionDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToObjectStatusConditionDefinitionResponseArrayOutputWithContext(ctx context.Context) ObjectStatusConditionDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectStatusConditionDefinitionResponse] {
	return pulumix.Output[[]ObjectStatusConditionDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectStatusConditionDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ObjectStatusConditionDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectStatusConditionDefinitionResponse {
		return vs[0].([]ObjectStatusConditionDefinitionResponse)[vs[1].(int)]
	}).(ObjectStatusConditionDefinitionResponseOutput)
}

// Statuses of objects deployed by the user-specified kustomizations from the git repository.
type ObjectStatusDefinitionResponse struct {
	// Object reference to the Kustomization that applied this object
	AppliedBy *ObjectReferenceDefinitionResponse `pulumi:"appliedBy"`
	// Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster.
	ComplianceState *string `pulumi:"complianceState"`
	// Additional properties that are provided from objects of the HelmRelease kind
	HelmReleaseProperties *HelmReleasePropertiesDefinitionResponse `pulumi:"helmReleaseProperties"`
	// Kind of the applied object
	Kind *string `pulumi:"kind"`
	// Name of the applied object
	Name *string `pulumi:"name"`
	// Namespace of the applied object
	Namespace *string `pulumi:"namespace"`
	// List of Kubernetes object status conditions present on the cluster
	StatusConditions []ObjectStatusConditionDefinitionResponse `pulumi:"statusConditions"`
}

// Statuses of objects deployed by the user-specified kustomizations from the git repository.
type ObjectStatusDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ObjectStatusDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectStatusDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusDefinitionResponseOutput) ToObjectStatusDefinitionResponseOutput() ObjectStatusDefinitionResponseOutput {
	return o
}

func (o ObjectStatusDefinitionResponseOutput) ToObjectStatusDefinitionResponseOutputWithContext(ctx context.Context) ObjectStatusDefinitionResponseOutput {
	return o
}

func (o ObjectStatusDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ObjectStatusDefinitionResponse] {
	return pulumix.Output[ObjectStatusDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Object reference to the Kustomization that applied this object
func (o ObjectStatusDefinitionResponseOutput) AppliedBy() ObjectReferenceDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *ObjectReferenceDefinitionResponse { return v.AppliedBy }).(ObjectReferenceDefinitionResponsePtrOutput)
}

// Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster.
func (o ObjectStatusDefinitionResponseOutput) ComplianceState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.ComplianceState }).(pulumi.StringPtrOutput)
}

// Additional properties that are provided from objects of the HelmRelease kind
func (o ObjectStatusDefinitionResponseOutput) HelmReleaseProperties() HelmReleasePropertiesDefinitionResponsePtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *HelmReleasePropertiesDefinitionResponse {
		return v.HelmReleaseProperties
	}).(HelmReleasePropertiesDefinitionResponsePtrOutput)
}

// Kind of the applied object
func (o ObjectStatusDefinitionResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the applied object
func (o ObjectStatusDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the applied object
func (o ObjectStatusDefinitionResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of Kubernetes object status conditions present on the cluster
func (o ObjectStatusDefinitionResponseOutput) StatusConditions() ObjectStatusConditionDefinitionResponseArrayOutput {
	return o.ApplyT(func(v ObjectStatusDefinitionResponse) []ObjectStatusConditionDefinitionResponse {
		return v.StatusConditions
	}).(ObjectStatusConditionDefinitionResponseArrayOutput)
}

type ObjectStatusDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (ObjectStatusDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ObjectStatusDefinitionResponse)(nil)).Elem()
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToObjectStatusDefinitionResponseArrayOutput() ObjectStatusDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToObjectStatusDefinitionResponseArrayOutputWithContext(ctx context.Context) ObjectStatusDefinitionResponseArrayOutput {
	return o
}

func (o ObjectStatusDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ObjectStatusDefinitionResponse] {
	return pulumix.Output[[]ObjectStatusDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ObjectStatusDefinitionResponseArrayOutput) Index(i pulumi.IntInput) ObjectStatusDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ObjectStatusDefinitionResponse {
		return vs[0].([]ObjectStatusDefinitionResponse)[vs[1].(int)]
	}).(ObjectStatusDefinitionResponseOutput)
}

// Plan for the resource.
type Plan struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// PlanInput is an input type that accepts PlanArgs and PlanOutput values.
// You can construct a concrete instance of `PlanInput` via:
//
//	PlanArgs{...}
type PlanInput interface {
	pulumi.Input

	ToPlanOutput() PlanOutput
	ToPlanOutputWithContext(context.Context) PlanOutput
}

// Plan for the resource.
type PlanArgs struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name pulumi.StringInput `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product pulumi.StringInput `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode pulumi.StringPtrInput `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher pulumi.StringInput `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (i PlanArgs) ToPlanOutput() PlanOutput {
	return i.ToPlanOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput)
}

func (i PlanArgs) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: i.ToPlanOutputWithContext(ctx).OutputState,
	}
}

func (i PlanArgs) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i PlanArgs) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanOutput).ToPlanPtrOutputWithContext(ctx)
}

// PlanPtrInput is an input type that accepts PlanArgs, PlanPtr and PlanPtrOutput values.
// You can construct a concrete instance of `PlanPtrInput` via:
//
//	        PlanArgs{...}
//
//	or:
//
//	        nil
type PlanPtrInput interface {
	pulumi.Input

	ToPlanPtrOutput() PlanPtrOutput
	ToPlanPtrOutputWithContext(context.Context) PlanPtrOutput
}

type planPtrType PlanArgs

func PlanPtr(v *PlanArgs) PlanPtrInput {
	return (*planPtrType)(v)
}

func (*planPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (i *planPtrType) ToPlanPtrOutput() PlanPtrOutput {
	return i.ToPlanPtrOutputWithContext(context.Background())
}

func (i *planPtrType) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlanPtrOutput)
}

func (i *planPtrType) ToOutput(ctx context.Context) pulumix.Output[*Plan] {
	return pulumix.Output[*Plan]{
		OutputState: i.ToPlanPtrOutputWithContext(ctx).OutputState,
	}
}

// Plan for the resource.
type PlanOutput struct{ *pulumi.OutputState }

func (PlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Plan)(nil)).Elem()
}

func (o PlanOutput) ToPlanOutput() PlanOutput {
	return o
}

func (o PlanOutput) ToPlanOutputWithContext(ctx context.Context) PlanOutput {
	return o
}

func (o PlanOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o.ToPlanPtrOutputWithContext(context.Background())
}

func (o PlanOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Plan) *Plan {
		return &v
	}).(PlanPtrOutput)
}

func (o PlanOutput) ToOutput(ctx context.Context) pulumix.Output[Plan] {
	return pulumix.Output[Plan]{
		OutputState: o.OutputState,
	}
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v Plan) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Plan) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanPtrOutput struct{ *pulumi.OutputState }

func (PlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Plan)(nil)).Elem()
}

func (o PlanPtrOutput) ToPlanPtrOutput() PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToPlanPtrOutputWithContext(ctx context.Context) PlanPtrOutput {
	return o
}

func (o PlanPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Plan] {
	return pulumix.Output[*Plan]{
		OutputState: o.OutputState,
	}
}

func (o PlanPtrOutput) Elem() PlanOutput {
	return o.ApplyT(func(v *Plan) Plan {
		if v != nil {
			return *v
		}
		var ret Plan
		return ret
	}).(PlanOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanPtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanPtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Plan) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Plan for the resource.
type PlanResponse struct {
	// A user defined name of the 3rd Party Artifact that is being procured.
	Name string `pulumi:"name"`
	// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
	Product string `pulumi:"product"`
	// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
	PromotionCode *string `pulumi:"promotionCode"`
	// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
	Publisher string `pulumi:"publisher"`
	// The version of the desired product/artifact.
	Version *string `pulumi:"version"`
}

// Plan for the resource.
type PlanResponseOutput struct{ *pulumi.OutputState }

func (PlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlanResponse)(nil)).Elem()
}

func (o PlanResponseOutput) ToPlanResponseOutput() PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToPlanResponseOutputWithContext(ctx context.Context) PlanResponseOutput {
	return o
}

func (o PlanResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PlanResponse] {
	return pulumix.Output[PlanResponse]{
		OutputState: o.OutputState,
	}
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponseOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Product }).(pulumi.StringOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponseOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.PromotionCode }).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v PlanResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

// The version of the desired product/artifact.
func (o PlanResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlanResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PlanResponsePtrOutput struct{ *pulumi.OutputState }

func (PlanResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlanResponse)(nil)).Elem()
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutput() PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToPlanResponsePtrOutputWithContext(ctx context.Context) PlanResponsePtrOutput {
	return o
}

func (o PlanResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PlanResponse] {
	return pulumix.Output[*PlanResponse]{
		OutputState: o.OutputState,
	}
}

func (o PlanResponsePtrOutput) Elem() PlanResponseOutput {
	return o.ApplyT(func(v *PlanResponse) PlanResponse {
		if v != nil {
			return *v
		}
		var ret PlanResponse
		return ret
	}).(PlanResponseOutput)
}

// A user defined name of the 3rd Party Artifact that is being procured.
func (o PlanResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
func (o PlanResponsePtrOutput) Product() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Product
	}).(pulumi.StringPtrOutput)
}

// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
func (o PlanResponsePtrOutput) PromotionCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.PromotionCode
	}).(pulumi.StringPtrOutput)
}

// The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
func (o PlanResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// The version of the desired product/artifact.
func (o PlanResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PlanResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The postBuild definitions defining variable substitutions for this Kustomization after kustomize build.
type PostBuildDefinition struct {
	// Key/value pairs holding the variables to be substituted in this Kustomization.
	Substitute map[string]string `pulumi:"substitute"`
	// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
	SubstituteFrom []SubstituteFromDefinition `pulumi:"substituteFrom"`
}

// PostBuildDefinitionInput is an input type that accepts PostBuildDefinitionArgs and PostBuildDefinitionOutput values.
// You can construct a concrete instance of `PostBuildDefinitionInput` via:
//
//	PostBuildDefinitionArgs{...}
type PostBuildDefinitionInput interface {
	pulumi.Input

	ToPostBuildDefinitionOutput() PostBuildDefinitionOutput
	ToPostBuildDefinitionOutputWithContext(context.Context) PostBuildDefinitionOutput
}

// The postBuild definitions defining variable substitutions for this Kustomization after kustomize build.
type PostBuildDefinitionArgs struct {
	// Key/value pairs holding the variables to be substituted in this Kustomization.
	Substitute pulumi.StringMapInput `pulumi:"substitute"`
	// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
	SubstituteFrom SubstituteFromDefinitionArrayInput `pulumi:"substituteFrom"`
}

func (PostBuildDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostBuildDefinition)(nil)).Elem()
}

func (i PostBuildDefinitionArgs) ToPostBuildDefinitionOutput() PostBuildDefinitionOutput {
	return i.ToPostBuildDefinitionOutputWithContext(context.Background())
}

func (i PostBuildDefinitionArgs) ToPostBuildDefinitionOutputWithContext(ctx context.Context) PostBuildDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostBuildDefinitionOutput)
}

func (i PostBuildDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[PostBuildDefinition] {
	return pulumix.Output[PostBuildDefinition]{
		OutputState: i.ToPostBuildDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i PostBuildDefinitionArgs) ToPostBuildDefinitionPtrOutput() PostBuildDefinitionPtrOutput {
	return i.ToPostBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i PostBuildDefinitionArgs) ToPostBuildDefinitionPtrOutputWithContext(ctx context.Context) PostBuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostBuildDefinitionOutput).ToPostBuildDefinitionPtrOutputWithContext(ctx)
}

// PostBuildDefinitionPtrInput is an input type that accepts PostBuildDefinitionArgs, PostBuildDefinitionPtr and PostBuildDefinitionPtrOutput values.
// You can construct a concrete instance of `PostBuildDefinitionPtrInput` via:
//
//	        PostBuildDefinitionArgs{...}
//
//	or:
//
//	        nil
type PostBuildDefinitionPtrInput interface {
	pulumi.Input

	ToPostBuildDefinitionPtrOutput() PostBuildDefinitionPtrOutput
	ToPostBuildDefinitionPtrOutputWithContext(context.Context) PostBuildDefinitionPtrOutput
}

type postBuildDefinitionPtrType PostBuildDefinitionArgs

func PostBuildDefinitionPtr(v *PostBuildDefinitionArgs) PostBuildDefinitionPtrInput {
	return (*postBuildDefinitionPtrType)(v)
}

func (*postBuildDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostBuildDefinition)(nil)).Elem()
}

func (i *postBuildDefinitionPtrType) ToPostBuildDefinitionPtrOutput() PostBuildDefinitionPtrOutput {
	return i.ToPostBuildDefinitionPtrOutputWithContext(context.Background())
}

func (i *postBuildDefinitionPtrType) ToPostBuildDefinitionPtrOutputWithContext(ctx context.Context) PostBuildDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostBuildDefinitionPtrOutput)
}

func (i *postBuildDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*PostBuildDefinition] {
	return pulumix.Output[*PostBuildDefinition]{
		OutputState: i.ToPostBuildDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// The postBuild definitions defining variable substitutions for this Kustomization after kustomize build.
type PostBuildDefinitionOutput struct{ *pulumi.OutputState }

func (PostBuildDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostBuildDefinition)(nil)).Elem()
}

func (o PostBuildDefinitionOutput) ToPostBuildDefinitionOutput() PostBuildDefinitionOutput {
	return o
}

func (o PostBuildDefinitionOutput) ToPostBuildDefinitionOutputWithContext(ctx context.Context) PostBuildDefinitionOutput {
	return o
}

func (o PostBuildDefinitionOutput) ToPostBuildDefinitionPtrOutput() PostBuildDefinitionPtrOutput {
	return o.ToPostBuildDefinitionPtrOutputWithContext(context.Background())
}

func (o PostBuildDefinitionOutput) ToPostBuildDefinitionPtrOutputWithContext(ctx context.Context) PostBuildDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostBuildDefinition) *PostBuildDefinition {
		return &v
	}).(PostBuildDefinitionPtrOutput)
}

func (o PostBuildDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[PostBuildDefinition] {
	return pulumix.Output[PostBuildDefinition]{
		OutputState: o.OutputState,
	}
}

// Key/value pairs holding the variables to be substituted in this Kustomization.
func (o PostBuildDefinitionOutput) Substitute() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostBuildDefinition) map[string]string { return v.Substitute }).(pulumi.StringMapOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
func (o PostBuildDefinitionOutput) SubstituteFrom() SubstituteFromDefinitionArrayOutput {
	return o.ApplyT(func(v PostBuildDefinition) []SubstituteFromDefinition { return v.SubstituteFrom }).(SubstituteFromDefinitionArrayOutput)
}

type PostBuildDefinitionPtrOutput struct{ *pulumi.OutputState }

func (PostBuildDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostBuildDefinition)(nil)).Elem()
}

func (o PostBuildDefinitionPtrOutput) ToPostBuildDefinitionPtrOutput() PostBuildDefinitionPtrOutput {
	return o
}

func (o PostBuildDefinitionPtrOutput) ToPostBuildDefinitionPtrOutputWithContext(ctx context.Context) PostBuildDefinitionPtrOutput {
	return o
}

func (o PostBuildDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PostBuildDefinition] {
	return pulumix.Output[*PostBuildDefinition]{
		OutputState: o.OutputState,
	}
}

func (o PostBuildDefinitionPtrOutput) Elem() PostBuildDefinitionOutput {
	return o.ApplyT(func(v *PostBuildDefinition) PostBuildDefinition {
		if v != nil {
			return *v
		}
		var ret PostBuildDefinition
		return ret
	}).(PostBuildDefinitionOutput)
}

// Key/value pairs holding the variables to be substituted in this Kustomization.
func (o PostBuildDefinitionPtrOutput) Substitute() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostBuildDefinition) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitute
	}).(pulumi.StringMapOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
func (o PostBuildDefinitionPtrOutput) SubstituteFrom() SubstituteFromDefinitionArrayOutput {
	return o.ApplyT(func(v *PostBuildDefinition) []SubstituteFromDefinition {
		if v == nil {
			return nil
		}
		return v.SubstituteFrom
	}).(SubstituteFromDefinitionArrayOutput)
}

// The postBuild definitions defining variable substitutions for this Kustomization after kustomize build.
type PostBuildDefinitionResponse struct {
	// Key/value pairs holding the variables to be substituted in this Kustomization.
	Substitute map[string]string `pulumi:"substitute"`
	// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
	SubstituteFrom []SubstituteFromDefinitionResponse `pulumi:"substituteFrom"`
}

// The postBuild definitions defining variable substitutions for this Kustomization after kustomize build.
type PostBuildDefinitionResponseOutput struct{ *pulumi.OutputState }

func (PostBuildDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostBuildDefinitionResponse)(nil)).Elem()
}

func (o PostBuildDefinitionResponseOutput) ToPostBuildDefinitionResponseOutput() PostBuildDefinitionResponseOutput {
	return o
}

func (o PostBuildDefinitionResponseOutput) ToPostBuildDefinitionResponseOutputWithContext(ctx context.Context) PostBuildDefinitionResponseOutput {
	return o
}

func (o PostBuildDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PostBuildDefinitionResponse] {
	return pulumix.Output[PostBuildDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Key/value pairs holding the variables to be substituted in this Kustomization.
func (o PostBuildDefinitionResponseOutput) Substitute() pulumi.StringMapOutput {
	return o.ApplyT(func(v PostBuildDefinitionResponse) map[string]string { return v.Substitute }).(pulumi.StringMapOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
func (o PostBuildDefinitionResponseOutput) SubstituteFrom() SubstituteFromDefinitionResponseArrayOutput {
	return o.ApplyT(func(v PostBuildDefinitionResponse) []SubstituteFromDefinitionResponse { return v.SubstituteFrom }).(SubstituteFromDefinitionResponseArrayOutput)
}

type PostBuildDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (PostBuildDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostBuildDefinitionResponse)(nil)).Elem()
}

func (o PostBuildDefinitionResponsePtrOutput) ToPostBuildDefinitionResponsePtrOutput() PostBuildDefinitionResponsePtrOutput {
	return o
}

func (o PostBuildDefinitionResponsePtrOutput) ToPostBuildDefinitionResponsePtrOutputWithContext(ctx context.Context) PostBuildDefinitionResponsePtrOutput {
	return o
}

func (o PostBuildDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PostBuildDefinitionResponse] {
	return pulumix.Output[*PostBuildDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o PostBuildDefinitionResponsePtrOutput) Elem() PostBuildDefinitionResponseOutput {
	return o.ApplyT(func(v *PostBuildDefinitionResponse) PostBuildDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret PostBuildDefinitionResponse
		return ret
	}).(PostBuildDefinitionResponseOutput)
}

// Key/value pairs holding the variables to be substituted in this Kustomization.
func (o PostBuildDefinitionResponsePtrOutput) Substitute() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PostBuildDefinitionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitute
	}).(pulumi.StringMapOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
func (o PostBuildDefinitionResponsePtrOutput) SubstituteFrom() SubstituteFromDefinitionResponseArrayOutput {
	return o.ApplyT(func(v *PostBuildDefinitionResponse) []SubstituteFromDefinitionResponse {
		if v == nil {
			return nil
		}
		return v.SubstituteFrom
	}).(SubstituteFromDefinitionResponseArrayOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateEndpointConnectionResponse] {
	return pulumix.Output[PrivateEndpointConnectionResponse]{
		OutputState: o.OutputState,
	}
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrivateEndpointConnectionResponse] {
	return pulumix.Output[[]PrivateEndpointConnectionResponse]{
		OutputState: o.OutputState,
	}
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateEndpointResponse] {
	return pulumix.Output[PrivateEndpointResponse]{
		OutputState: o.OutputState,
	}
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PrivateEndpointResponse] {
	return pulumix.Output[*PrivateEndpointResponse]{
		OutputState: o.OutputState,
	}
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionState] {
	return pulumix.Output[PrivateLinkServiceConnectionState]{
		OutputState: i.ToPrivateLinkServiceConnectionStateOutputWithContext(ctx).OutputState,
	}
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionState] {
	return pulumix.Output[PrivateLinkServiceConnectionState]{
		OutputState: o.OutputState,
	}
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PrivateLinkServiceConnectionStateResponse] {
	return pulumix.Output[PrivateLinkServiceConnectionStateResponse]{
		OutputState: o.OutputState,
	}
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
type RepositoryRefDefinition struct {
	// The git repository branch name to checkout.
	Branch *string `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit *string `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver *string `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag *string `pulumi:"tag"`
}

// RepositoryRefDefinitionInput is an input type that accepts RepositoryRefDefinitionArgs and RepositoryRefDefinitionOutput values.
// You can construct a concrete instance of `RepositoryRefDefinitionInput` via:
//
//	RepositoryRefDefinitionArgs{...}
type RepositoryRefDefinitionInput interface {
	pulumi.Input

	ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput
	ToRepositoryRefDefinitionOutputWithContext(context.Context) RepositoryRefDefinitionOutput
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionArgs struct {
	// The git repository branch name to checkout.
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit pulumi.StringPtrInput `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver pulumi.StringPtrInput `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (RepositoryRefDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinition)(nil)).Elem()
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput {
	return i.ToRepositoryRefDefinitionOutputWithContext(context.Background())
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionOutputWithContext(ctx context.Context) RepositoryRefDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionOutput)
}

func (i RepositoryRefDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinition] {
	return pulumix.Output[RepositoryRefDefinition]{
		OutputState: i.ToRepositoryRefDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return i.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (i RepositoryRefDefinitionArgs) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionOutput).ToRepositoryRefDefinitionPtrOutputWithContext(ctx)
}

// RepositoryRefDefinitionPtrInput is an input type that accepts RepositoryRefDefinitionArgs, RepositoryRefDefinitionPtr and RepositoryRefDefinitionPtrOutput values.
// You can construct a concrete instance of `RepositoryRefDefinitionPtrInput` via:
//
//	        RepositoryRefDefinitionArgs{...}
//
//	or:
//
//	        nil
type RepositoryRefDefinitionPtrInput interface {
	pulumi.Input

	ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput
	ToRepositoryRefDefinitionPtrOutputWithContext(context.Context) RepositoryRefDefinitionPtrOutput
}

type repositoryRefDefinitionPtrType RepositoryRefDefinitionArgs

func RepositoryRefDefinitionPtr(v *RepositoryRefDefinitionArgs) RepositoryRefDefinitionPtrInput {
	return (*repositoryRefDefinitionPtrType)(v)
}

func (*repositoryRefDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinition)(nil)).Elem()
}

func (i *repositoryRefDefinitionPtrType) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return i.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (i *repositoryRefDefinitionPtrType) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryRefDefinitionPtrOutput)
}

func (i *repositoryRefDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinition] {
	return pulumix.Output[*RepositoryRefDefinition]{
		OutputState: i.ToRepositoryRefDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinition)(nil)).Elem()
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionOutput() RepositoryRefDefinitionOutput {
	return o
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionOutputWithContext(ctx context.Context) RepositoryRefDefinitionOutput {
	return o
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return o.ToRepositoryRefDefinitionPtrOutputWithContext(context.Background())
}

func (o RepositoryRefDefinitionOutput) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryRefDefinition) *RepositoryRefDefinition {
		return &v
	}).(RepositoryRefDefinitionPtrOutput)
}

func (o RepositoryRefDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinition] {
	return pulumix.Output[RepositoryRefDefinition]{
		OutputState: o.OutputState,
	}
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinition) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type RepositoryRefDefinitionPtrOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinition)(nil)).Elem()
}

func (o RepositoryRefDefinitionPtrOutput) ToRepositoryRefDefinitionPtrOutput() RepositoryRefDefinitionPtrOutput {
	return o
}

func (o RepositoryRefDefinitionPtrOutput) ToRepositoryRefDefinitionPtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionPtrOutput {
	return o
}

func (o RepositoryRefDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinition] {
	return pulumix.Output[*RepositoryRefDefinition]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRefDefinitionPtrOutput) Elem() RepositoryRefDefinitionOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) RepositoryRefDefinition {
		if v != nil {
			return *v
		}
		var ret RepositoryRefDefinition
		return ret
	}).(RepositoryRefDefinitionOutput)
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionPtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionPtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionResponse struct {
	// The git repository branch name to checkout.
	Branch *string `pulumi:"branch"`
	// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
	Commit *string `pulumi:"commit"`
	// The semver range used to match against git repository tags. This takes precedence over tag.
	Semver *string `pulumi:"semver"`
	// The git repository tag name to checkout. This takes precedence over branch.
	Tag *string `pulumi:"tag"`
}

// The source reference for the GitRepository object.
type RepositoryRefDefinitionResponseOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryRefDefinitionResponse)(nil)).Elem()
}

func (o RepositoryRefDefinitionResponseOutput) ToRepositoryRefDefinitionResponseOutput() RepositoryRefDefinitionResponseOutput {
	return o
}

func (o RepositoryRefDefinitionResponseOutput) ToRepositoryRefDefinitionResponseOutputWithContext(ctx context.Context) RepositoryRefDefinitionResponseOutput {
	return o
}

func (o RepositoryRefDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[RepositoryRefDefinitionResponse] {
	return pulumix.Output[RepositoryRefDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionResponseOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionResponseOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Commit }).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionResponseOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Semver }).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionResponseOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryRefDefinitionResponse) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type RepositoryRefDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (RepositoryRefDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryRefDefinitionResponse)(nil)).Elem()
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToRepositoryRefDefinitionResponsePtrOutput() RepositoryRefDefinitionResponsePtrOutput {
	return o
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToRepositoryRefDefinitionResponsePtrOutputWithContext(ctx context.Context) RepositoryRefDefinitionResponsePtrOutput {
	return o
}

func (o RepositoryRefDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryRefDefinitionResponse] {
	return pulumix.Output[*RepositoryRefDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryRefDefinitionResponsePtrOutput) Elem() RepositoryRefDefinitionResponseOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) RepositoryRefDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret RepositoryRefDefinitionResponse
		return ret
	}).(RepositoryRefDefinitionResponseOutput)
}

// The git repository branch name to checkout.
func (o RepositoryRefDefinitionResponsePtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
func (o RepositoryRefDefinitionResponsePtrOutput) Commit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Commit
	}).(pulumi.StringPtrOutput)
}

// The semver range used to match against git repository tags. This takes precedence over tag.
func (o RepositoryRefDefinitionResponsePtrOutput) Semver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Semver
	}).(pulumi.StringPtrOutput)
}

// The git repository tag name to checkout. This takes precedence over branch.
func (o RepositoryRefDefinitionResponsePtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryRefDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Scope of the extension. It can be either Cluster or Namespace; but not both.
type Scope struct {
	// Specifies that the scope of the extension is Cluster
	Cluster *ScopeCluster `pulumi:"cluster"`
	// Specifies that the scope of the extension is Namespace
	Namespace *ScopeNamespace `pulumi:"namespace"`
}

// ScopeInput is an input type that accepts ScopeArgs and ScopeOutput values.
// You can construct a concrete instance of `ScopeInput` via:
//
//	ScopeArgs{...}
type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(context.Context) ScopeOutput
}

// Scope of the extension. It can be either Cluster or Namespace; but not both.
type ScopeArgs struct {
	// Specifies that the scope of the extension is Cluster
	Cluster ScopeClusterPtrInput `pulumi:"cluster"`
	// Specifies that the scope of the extension is Namespace
	Namespace ScopeNamespacePtrInput `pulumi:"namespace"`
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (i ScopeArgs) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

func (i ScopeArgs) ToOutput(ctx context.Context) pulumix.Output[Scope] {
	return pulumix.Output[Scope]{
		OutputState: i.ToScopeOutputWithContext(ctx).OutputState,
	}
}

func (i ScopeArgs) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i ScopeArgs) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput).ToScopePtrOutputWithContext(ctx)
}

// ScopePtrInput is an input type that accepts ScopeArgs, ScopePtr and ScopePtrOutput values.
// You can construct a concrete instance of `ScopePtrInput` via:
//
//	        ScopeArgs{...}
//
//	or:
//
//	        nil
type ScopePtrInput interface {
	pulumi.Input

	ToScopePtrOutput() ScopePtrOutput
	ToScopePtrOutputWithContext(context.Context) ScopePtrOutput
}

type scopePtrType ScopeArgs

func ScopePtr(v *ScopeArgs) ScopePtrInput {
	return (*scopePtrType)(v)
}

func (*scopePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *scopePtrType) ToScopePtrOutput() ScopePtrOutput {
	return i.ToScopePtrOutputWithContext(context.Background())
}

func (i *scopePtrType) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopePtrOutput)
}

func (i *scopePtrType) ToOutput(ctx context.Context) pulumix.Output[*Scope] {
	return pulumix.Output[*Scope]{
		OutputState: i.ToScopePtrOutputWithContext(ctx).OutputState,
	}
}

// Scope of the extension. It can be either Cluster or Namespace; but not both.
type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopePtrOutput() ScopePtrOutput {
	return o.ToScopePtrOutputWithContext(context.Background())
}

func (o ScopeOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Scope) *Scope {
		return &v
	}).(ScopePtrOutput)
}

func (o ScopeOutput) ToOutput(ctx context.Context) pulumix.Output[Scope] {
	return pulumix.Output[Scope]{
		OutputState: o.OutputState,
	}
}

// Specifies that the scope of the extension is Cluster
func (o ScopeOutput) Cluster() ScopeClusterPtrOutput {
	return o.ApplyT(func(v Scope) *ScopeCluster { return v.Cluster }).(ScopeClusterPtrOutput)
}

// Specifies that the scope of the extension is Namespace
func (o ScopeOutput) Namespace() ScopeNamespacePtrOutput {
	return o.ApplyT(func(v Scope) *ScopeNamespace { return v.Namespace }).(ScopeNamespacePtrOutput)
}

type ScopePtrOutput struct{ *pulumi.OutputState }

func (ScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopePtrOutput) ToScopePtrOutput() ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToScopePtrOutputWithContext(ctx context.Context) ScopePtrOutput {
	return o
}

func (o ScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Scope] {
	return pulumix.Output[*Scope]{
		OutputState: o.OutputState,
	}
}

func (o ScopePtrOutput) Elem() ScopeOutput {
	return o.ApplyT(func(v *Scope) Scope {
		if v != nil {
			return *v
		}
		var ret Scope
		return ret
	}).(ScopeOutput)
}

// Specifies that the scope of the extension is Cluster
func (o ScopePtrOutput) Cluster() ScopeClusterPtrOutput {
	return o.ApplyT(func(v *Scope) *ScopeCluster {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(ScopeClusterPtrOutput)
}

// Specifies that the scope of the extension is Namespace
func (o ScopePtrOutput) Namespace() ScopeNamespacePtrOutput {
	return o.ApplyT(func(v *Scope) *ScopeNamespace {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(ScopeNamespacePtrOutput)
}

// Specifies that the scope of the extension is Cluster
type ScopeCluster struct {
	// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
	ReleaseNamespace *string `pulumi:"releaseNamespace"`
}

// ScopeClusterInput is an input type that accepts ScopeClusterArgs and ScopeClusterOutput values.
// You can construct a concrete instance of `ScopeClusterInput` via:
//
//	ScopeClusterArgs{...}
type ScopeClusterInput interface {
	pulumi.Input

	ToScopeClusterOutput() ScopeClusterOutput
	ToScopeClusterOutputWithContext(context.Context) ScopeClusterOutput
}

// Specifies that the scope of the extension is Cluster
type ScopeClusterArgs struct {
	// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
	ReleaseNamespace pulumi.StringPtrInput `pulumi:"releaseNamespace"`
}

func (ScopeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeCluster)(nil)).Elem()
}

func (i ScopeClusterArgs) ToScopeClusterOutput() ScopeClusterOutput {
	return i.ToScopeClusterOutputWithContext(context.Background())
}

func (i ScopeClusterArgs) ToScopeClusterOutputWithContext(ctx context.Context) ScopeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeClusterOutput)
}

func (i ScopeClusterArgs) ToOutput(ctx context.Context) pulumix.Output[ScopeCluster] {
	return pulumix.Output[ScopeCluster]{
		OutputState: i.ToScopeClusterOutputWithContext(ctx).OutputState,
	}
}

func (i ScopeClusterArgs) ToScopeClusterPtrOutput() ScopeClusterPtrOutput {
	return i.ToScopeClusterPtrOutputWithContext(context.Background())
}

func (i ScopeClusterArgs) ToScopeClusterPtrOutputWithContext(ctx context.Context) ScopeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeClusterOutput).ToScopeClusterPtrOutputWithContext(ctx)
}

// ScopeClusterPtrInput is an input type that accepts ScopeClusterArgs, ScopeClusterPtr and ScopeClusterPtrOutput values.
// You can construct a concrete instance of `ScopeClusterPtrInput` via:
//
//	        ScopeClusterArgs{...}
//
//	or:
//
//	        nil
type ScopeClusterPtrInput interface {
	pulumi.Input

	ToScopeClusterPtrOutput() ScopeClusterPtrOutput
	ToScopeClusterPtrOutputWithContext(context.Context) ScopeClusterPtrOutput
}

type scopeClusterPtrType ScopeClusterArgs

func ScopeClusterPtr(v *ScopeClusterArgs) ScopeClusterPtrInput {
	return (*scopeClusterPtrType)(v)
}

func (*scopeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeCluster)(nil)).Elem()
}

func (i *scopeClusterPtrType) ToScopeClusterPtrOutput() ScopeClusterPtrOutput {
	return i.ToScopeClusterPtrOutputWithContext(context.Background())
}

func (i *scopeClusterPtrType) ToScopeClusterPtrOutputWithContext(ctx context.Context) ScopeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeClusterPtrOutput)
}

func (i *scopeClusterPtrType) ToOutput(ctx context.Context) pulumix.Output[*ScopeCluster] {
	return pulumix.Output[*ScopeCluster]{
		OutputState: i.ToScopeClusterPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies that the scope of the extension is Cluster
type ScopeClusterOutput struct{ *pulumi.OutputState }

func (ScopeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeCluster)(nil)).Elem()
}

func (o ScopeClusterOutput) ToScopeClusterOutput() ScopeClusterOutput {
	return o
}

func (o ScopeClusterOutput) ToScopeClusterOutputWithContext(ctx context.Context) ScopeClusterOutput {
	return o
}

func (o ScopeClusterOutput) ToScopeClusterPtrOutput() ScopeClusterPtrOutput {
	return o.ToScopeClusterPtrOutputWithContext(context.Background())
}

func (o ScopeClusterOutput) ToScopeClusterPtrOutputWithContext(ctx context.Context) ScopeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeCluster) *ScopeCluster {
		return &v
	}).(ScopeClusterPtrOutput)
}

func (o ScopeClusterOutput) ToOutput(ctx context.Context) pulumix.Output[ScopeCluster] {
	return pulumix.Output[ScopeCluster]{
		OutputState: o.OutputState,
	}
}

// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
func (o ScopeClusterOutput) ReleaseNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeCluster) *string { return v.ReleaseNamespace }).(pulumi.StringPtrOutput)
}

type ScopeClusterPtrOutput struct{ *pulumi.OutputState }

func (ScopeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeCluster)(nil)).Elem()
}

func (o ScopeClusterPtrOutput) ToScopeClusterPtrOutput() ScopeClusterPtrOutput {
	return o
}

func (o ScopeClusterPtrOutput) ToScopeClusterPtrOutputWithContext(ctx context.Context) ScopeClusterPtrOutput {
	return o
}

func (o ScopeClusterPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeCluster] {
	return pulumix.Output[*ScopeCluster]{
		OutputState: o.OutputState,
	}
}

func (o ScopeClusterPtrOutput) Elem() ScopeClusterOutput {
	return o.ApplyT(func(v *ScopeCluster) ScopeCluster {
		if v != nil {
			return *v
		}
		var ret ScopeCluster
		return ret
	}).(ScopeClusterOutput)
}

// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
func (o ScopeClusterPtrOutput) ReleaseNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeCluster) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseNamespace
	}).(pulumi.StringPtrOutput)
}

// Specifies that the scope of the extension is Cluster
type ScopeClusterResponse struct {
	// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
	ReleaseNamespace *string `pulumi:"releaseNamespace"`
}

// Specifies that the scope of the extension is Cluster
type ScopeClusterResponseOutput struct{ *pulumi.OutputState }

func (ScopeClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeClusterResponse)(nil)).Elem()
}

func (o ScopeClusterResponseOutput) ToScopeClusterResponseOutput() ScopeClusterResponseOutput {
	return o
}

func (o ScopeClusterResponseOutput) ToScopeClusterResponseOutputWithContext(ctx context.Context) ScopeClusterResponseOutput {
	return o
}

func (o ScopeClusterResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScopeClusterResponse] {
	return pulumix.Output[ScopeClusterResponse]{
		OutputState: o.OutputState,
	}
}

// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
func (o ScopeClusterResponseOutput) ReleaseNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeClusterResponse) *string { return v.ReleaseNamespace }).(pulumi.StringPtrOutput)
}

type ScopeClusterResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeClusterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeClusterResponse)(nil)).Elem()
}

func (o ScopeClusterResponsePtrOutput) ToScopeClusterResponsePtrOutput() ScopeClusterResponsePtrOutput {
	return o
}

func (o ScopeClusterResponsePtrOutput) ToScopeClusterResponsePtrOutputWithContext(ctx context.Context) ScopeClusterResponsePtrOutput {
	return o
}

func (o ScopeClusterResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeClusterResponse] {
	return pulumix.Output[*ScopeClusterResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScopeClusterResponsePtrOutput) Elem() ScopeClusterResponseOutput {
	return o.ApplyT(func(v *ScopeClusterResponse) ScopeClusterResponse {
		if v != nil {
			return *v
		}
		var ret ScopeClusterResponse
		return ret
	}).(ScopeClusterResponseOutput)
}

// Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created
func (o ScopeClusterResponsePtrOutput) ReleaseNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeClusterResponse) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseNamespace
	}).(pulumi.StringPtrOutput)
}

// Specifies that the scope of the extension is Namespace
type ScopeNamespace struct {
	// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// ScopeNamespaceInput is an input type that accepts ScopeNamespaceArgs and ScopeNamespaceOutput values.
// You can construct a concrete instance of `ScopeNamespaceInput` via:
//
//	ScopeNamespaceArgs{...}
type ScopeNamespaceInput interface {
	pulumi.Input

	ToScopeNamespaceOutput() ScopeNamespaceOutput
	ToScopeNamespaceOutputWithContext(context.Context) ScopeNamespaceOutput
}

// Specifies that the scope of the extension is Namespace
type ScopeNamespaceArgs struct {
	// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
	TargetNamespace pulumi.StringPtrInput `pulumi:"targetNamespace"`
}

func (ScopeNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeNamespace)(nil)).Elem()
}

func (i ScopeNamespaceArgs) ToScopeNamespaceOutput() ScopeNamespaceOutput {
	return i.ToScopeNamespaceOutputWithContext(context.Background())
}

func (i ScopeNamespaceArgs) ToScopeNamespaceOutputWithContext(ctx context.Context) ScopeNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeNamespaceOutput)
}

func (i ScopeNamespaceArgs) ToOutput(ctx context.Context) pulumix.Output[ScopeNamespace] {
	return pulumix.Output[ScopeNamespace]{
		OutputState: i.ToScopeNamespaceOutputWithContext(ctx).OutputState,
	}
}

func (i ScopeNamespaceArgs) ToScopeNamespacePtrOutput() ScopeNamespacePtrOutput {
	return i.ToScopeNamespacePtrOutputWithContext(context.Background())
}

func (i ScopeNamespaceArgs) ToScopeNamespacePtrOutputWithContext(ctx context.Context) ScopeNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeNamespaceOutput).ToScopeNamespacePtrOutputWithContext(ctx)
}

// ScopeNamespacePtrInput is an input type that accepts ScopeNamespaceArgs, ScopeNamespacePtr and ScopeNamespacePtrOutput values.
// You can construct a concrete instance of `ScopeNamespacePtrInput` via:
//
//	        ScopeNamespaceArgs{...}
//
//	or:
//
//	        nil
type ScopeNamespacePtrInput interface {
	pulumi.Input

	ToScopeNamespacePtrOutput() ScopeNamespacePtrOutput
	ToScopeNamespacePtrOutputWithContext(context.Context) ScopeNamespacePtrOutput
}

type scopeNamespacePtrType ScopeNamespaceArgs

func ScopeNamespacePtr(v *ScopeNamespaceArgs) ScopeNamespacePtrInput {
	return (*scopeNamespacePtrType)(v)
}

func (*scopeNamespacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeNamespace)(nil)).Elem()
}

func (i *scopeNamespacePtrType) ToScopeNamespacePtrOutput() ScopeNamespacePtrOutput {
	return i.ToScopeNamespacePtrOutputWithContext(context.Background())
}

func (i *scopeNamespacePtrType) ToScopeNamespacePtrOutputWithContext(ctx context.Context) ScopeNamespacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeNamespacePtrOutput)
}

func (i *scopeNamespacePtrType) ToOutput(ctx context.Context) pulumix.Output[*ScopeNamespace] {
	return pulumix.Output[*ScopeNamespace]{
		OutputState: i.ToScopeNamespacePtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies that the scope of the extension is Namespace
type ScopeNamespaceOutput struct{ *pulumi.OutputState }

func (ScopeNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeNamespace)(nil)).Elem()
}

func (o ScopeNamespaceOutput) ToScopeNamespaceOutput() ScopeNamespaceOutput {
	return o
}

func (o ScopeNamespaceOutput) ToScopeNamespaceOutputWithContext(ctx context.Context) ScopeNamespaceOutput {
	return o
}

func (o ScopeNamespaceOutput) ToScopeNamespacePtrOutput() ScopeNamespacePtrOutput {
	return o.ToScopeNamespacePtrOutputWithContext(context.Background())
}

func (o ScopeNamespaceOutput) ToScopeNamespacePtrOutputWithContext(ctx context.Context) ScopeNamespacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeNamespace) *ScopeNamespace {
		return &v
	}).(ScopeNamespacePtrOutput)
}

func (o ScopeNamespaceOutput) ToOutput(ctx context.Context) pulumix.Output[ScopeNamespace] {
	return pulumix.Output[ScopeNamespace]{
		OutputState: o.OutputState,
	}
}

// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
func (o ScopeNamespaceOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeNamespace) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type ScopeNamespacePtrOutput struct{ *pulumi.OutputState }

func (ScopeNamespacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeNamespace)(nil)).Elem()
}

func (o ScopeNamespacePtrOutput) ToScopeNamespacePtrOutput() ScopeNamespacePtrOutput {
	return o
}

func (o ScopeNamespacePtrOutput) ToScopeNamespacePtrOutputWithContext(ctx context.Context) ScopeNamespacePtrOutput {
	return o
}

func (o ScopeNamespacePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeNamespace] {
	return pulumix.Output[*ScopeNamespace]{
		OutputState: o.OutputState,
	}
}

func (o ScopeNamespacePtrOutput) Elem() ScopeNamespaceOutput {
	return o.ApplyT(func(v *ScopeNamespace) ScopeNamespace {
		if v != nil {
			return *v
		}
		var ret ScopeNamespace
		return ret
	}).(ScopeNamespaceOutput)
}

// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
func (o ScopeNamespacePtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeNamespace) *string {
		if v == nil {
			return nil
		}
		return v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

// Specifies that the scope of the extension is Namespace
type ScopeNamespaceResponse struct {
	// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
	TargetNamespace *string `pulumi:"targetNamespace"`
}

// Specifies that the scope of the extension is Namespace
type ScopeNamespaceResponseOutput struct{ *pulumi.OutputState }

func (ScopeNamespaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeNamespaceResponse)(nil)).Elem()
}

func (o ScopeNamespaceResponseOutput) ToScopeNamespaceResponseOutput() ScopeNamespaceResponseOutput {
	return o
}

func (o ScopeNamespaceResponseOutput) ToScopeNamespaceResponseOutputWithContext(ctx context.Context) ScopeNamespaceResponseOutput {
	return o
}

func (o ScopeNamespaceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScopeNamespaceResponse] {
	return pulumix.Output[ScopeNamespaceResponse]{
		OutputState: o.OutputState,
	}
}

// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
func (o ScopeNamespaceResponseOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScopeNamespaceResponse) *string { return v.TargetNamespace }).(pulumi.StringPtrOutput)
}

type ScopeNamespaceResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeNamespaceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeNamespaceResponse)(nil)).Elem()
}

func (o ScopeNamespaceResponsePtrOutput) ToScopeNamespaceResponsePtrOutput() ScopeNamespaceResponsePtrOutput {
	return o
}

func (o ScopeNamespaceResponsePtrOutput) ToScopeNamespaceResponsePtrOutputWithContext(ctx context.Context) ScopeNamespaceResponsePtrOutput {
	return o
}

func (o ScopeNamespaceResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeNamespaceResponse] {
	return pulumix.Output[*ScopeNamespaceResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScopeNamespaceResponsePtrOutput) Elem() ScopeNamespaceResponseOutput {
	return o.ApplyT(func(v *ScopeNamespaceResponse) ScopeNamespaceResponse {
		if v != nil {
			return *v
		}
		var ret ScopeNamespaceResponse
		return ret
	}).(ScopeNamespaceResponseOutput)
}

// Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created
func (o ScopeNamespaceResponsePtrOutput) TargetNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScopeNamespaceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetNamespace
	}).(pulumi.StringPtrOutput)
}

// Scope of the extension. It can be either Cluster or Namespace; but not both.
type ScopeResponse struct {
	// Specifies that the scope of the extension is Cluster
	Cluster *ScopeClusterResponse `pulumi:"cluster"`
	// Specifies that the scope of the extension is Namespace
	Namespace *ScopeNamespaceResponse `pulumi:"namespace"`
}

// Scope of the extension. It can be either Cluster or Namespace; but not both.
type ScopeResponseOutput struct{ *pulumi.OutputState }

func (ScopeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeResponse)(nil)).Elem()
}

func (o ScopeResponseOutput) ToScopeResponseOutput() ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToScopeResponseOutputWithContext(ctx context.Context) ScopeResponseOutput {
	return o
}

func (o ScopeResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ScopeResponse] {
	return pulumix.Output[ScopeResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies that the scope of the extension is Cluster
func (o ScopeResponseOutput) Cluster() ScopeClusterResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeClusterResponse { return v.Cluster }).(ScopeClusterResponsePtrOutput)
}

// Specifies that the scope of the extension is Namespace
func (o ScopeResponseOutput) Namespace() ScopeNamespaceResponsePtrOutput {
	return o.ApplyT(func(v ScopeResponse) *ScopeNamespaceResponse { return v.Namespace }).(ScopeNamespaceResponsePtrOutput)
}

type ScopeResponsePtrOutput struct{ *pulumi.OutputState }

func (ScopeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeResponse)(nil)).Elem()
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutput() ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToScopeResponsePtrOutputWithContext(ctx context.Context) ScopeResponsePtrOutput {
	return o
}

func (o ScopeResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ScopeResponse] {
	return pulumix.Output[*ScopeResponse]{
		OutputState: o.OutputState,
	}
}

func (o ScopeResponsePtrOutput) Elem() ScopeResponseOutput {
	return o.ApplyT(func(v *ScopeResponse) ScopeResponse {
		if v != nil {
			return *v
		}
		var ret ScopeResponse
		return ret
	}).(ScopeResponseOutput)
}

// Specifies that the scope of the extension is Cluster
func (o ScopeResponsePtrOutput) Cluster() ScopeClusterResponsePtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *ScopeClusterResponse {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(ScopeClusterResponsePtrOutput)
}

// Specifies that the scope of the extension is Namespace
func (o ScopeResponsePtrOutput) Namespace() ScopeNamespaceResponsePtrOutput {
	return o.ApplyT(func(v *ScopeResponse) *ScopeNamespaceResponse {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(ScopeNamespaceResponsePtrOutput)
}

// Parameters to authenticate using Service Principal.
type ServicePrincipalDefinition struct {
	// Base64-encoded certificate used to authenticate a Service Principal
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The password for the certificate used to authenticate a Service Principal
	ClientCertificatePassword *string `pulumi:"clientCertificatePassword"`
	// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
	ClientCertificateSendChain *bool `pulumi:"clientCertificateSendChain"`
	// The client Id for authenticating a Service Principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret for authenticating a Service Principal
	ClientSecret *string `pulumi:"clientSecret"`
	// The tenant Id for authenticating a Service Principal
	TenantId *string `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for ServicePrincipalDefinition
func (val *ServicePrincipalDefinition) Defaults() *ServicePrincipalDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientCertificateSendChain == nil {
		clientCertificateSendChain_ := false
		tmp.ClientCertificateSendChain = &clientCertificateSendChain_
	}
	return &tmp
}

// ServicePrincipalDefinitionInput is an input type that accepts ServicePrincipalDefinitionArgs and ServicePrincipalDefinitionOutput values.
// You can construct a concrete instance of `ServicePrincipalDefinitionInput` via:
//
//	ServicePrincipalDefinitionArgs{...}
type ServicePrincipalDefinitionInput interface {
	pulumi.Input

	ToServicePrincipalDefinitionOutput() ServicePrincipalDefinitionOutput
	ToServicePrincipalDefinitionOutputWithContext(context.Context) ServicePrincipalDefinitionOutput
}

// Parameters to authenticate using Service Principal.
type ServicePrincipalDefinitionArgs struct {
	// Base64-encoded certificate used to authenticate a Service Principal
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The password for the certificate used to authenticate a Service Principal
	ClientCertificatePassword pulumi.StringPtrInput `pulumi:"clientCertificatePassword"`
	// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
	ClientCertificateSendChain pulumi.BoolPtrInput `pulumi:"clientCertificateSendChain"`
	// The client Id for authenticating a Service Principal.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret for authenticating a Service Principal
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// The tenant Id for authenticating a Service Principal
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for ServicePrincipalDefinitionArgs
func (val *ServicePrincipalDefinitionArgs) Defaults() *ServicePrincipalDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientCertificateSendChain == nil {
		tmp.ClientCertificateSendChain = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ServicePrincipalDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDefinition)(nil)).Elem()
}

func (i ServicePrincipalDefinitionArgs) ToServicePrincipalDefinitionOutput() ServicePrincipalDefinitionOutput {
	return i.ToServicePrincipalDefinitionOutputWithContext(context.Background())
}

func (i ServicePrincipalDefinitionArgs) ToServicePrincipalDefinitionOutputWithContext(ctx context.Context) ServicePrincipalDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDefinitionOutput)
}

func (i ServicePrincipalDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalDefinition] {
	return pulumix.Output[ServicePrincipalDefinition]{
		OutputState: i.ToServicePrincipalDefinitionOutputWithContext(ctx).OutputState,
	}
}

func (i ServicePrincipalDefinitionArgs) ToServicePrincipalDefinitionPtrOutput() ServicePrincipalDefinitionPtrOutput {
	return i.ToServicePrincipalDefinitionPtrOutputWithContext(context.Background())
}

func (i ServicePrincipalDefinitionArgs) ToServicePrincipalDefinitionPtrOutputWithContext(ctx context.Context) ServicePrincipalDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDefinitionOutput).ToServicePrincipalDefinitionPtrOutputWithContext(ctx)
}

// ServicePrincipalDefinitionPtrInput is an input type that accepts ServicePrincipalDefinitionArgs, ServicePrincipalDefinitionPtr and ServicePrincipalDefinitionPtrOutput values.
// You can construct a concrete instance of `ServicePrincipalDefinitionPtrInput` via:
//
//	        ServicePrincipalDefinitionArgs{...}
//
//	or:
//
//	        nil
type ServicePrincipalDefinitionPtrInput interface {
	pulumi.Input

	ToServicePrincipalDefinitionPtrOutput() ServicePrincipalDefinitionPtrOutput
	ToServicePrincipalDefinitionPtrOutputWithContext(context.Context) ServicePrincipalDefinitionPtrOutput
}

type servicePrincipalDefinitionPtrType ServicePrincipalDefinitionArgs

func ServicePrincipalDefinitionPtr(v *ServicePrincipalDefinitionArgs) ServicePrincipalDefinitionPtrInput {
	return (*servicePrincipalDefinitionPtrType)(v)
}

func (*servicePrincipalDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalDefinition)(nil)).Elem()
}

func (i *servicePrincipalDefinitionPtrType) ToServicePrincipalDefinitionPtrOutput() ServicePrincipalDefinitionPtrOutput {
	return i.ToServicePrincipalDefinitionPtrOutputWithContext(context.Background())
}

func (i *servicePrincipalDefinitionPtrType) ToServicePrincipalDefinitionPtrOutputWithContext(ctx context.Context) ServicePrincipalDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDefinitionPtrOutput)
}

func (i *servicePrincipalDefinitionPtrType) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalDefinition] {
	return pulumix.Output[*ServicePrincipalDefinition]{
		OutputState: i.ToServicePrincipalDefinitionPtrOutputWithContext(ctx).OutputState,
	}
}

// Parameters to authenticate using Service Principal.
type ServicePrincipalDefinitionOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDefinition)(nil)).Elem()
}

func (o ServicePrincipalDefinitionOutput) ToServicePrincipalDefinitionOutput() ServicePrincipalDefinitionOutput {
	return o
}

func (o ServicePrincipalDefinitionOutput) ToServicePrincipalDefinitionOutputWithContext(ctx context.Context) ServicePrincipalDefinitionOutput {
	return o
}

func (o ServicePrincipalDefinitionOutput) ToServicePrincipalDefinitionPtrOutput() ServicePrincipalDefinitionPtrOutput {
	return o.ToServicePrincipalDefinitionPtrOutputWithContext(context.Background())
}

func (o ServicePrincipalDefinitionOutput) ToServicePrincipalDefinitionPtrOutputWithContext(ctx context.Context) ServicePrincipalDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServicePrincipalDefinition) *ServicePrincipalDefinition {
		return &v
	}).(ServicePrincipalDefinitionPtrOutput)
}

func (o ServicePrincipalDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalDefinition] {
	return pulumix.Output[ServicePrincipalDefinition]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The password for the certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *string { return v.ClientCertificatePassword }).(pulumi.StringPtrOutput)
}

// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
func (o ServicePrincipalDefinitionOutput) ClientCertificateSendChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *bool { return v.ClientCertificateSendChain }).(pulumi.BoolPtrOutput)
}

// The client Id for authenticating a Service Principal.
func (o ServicePrincipalDefinitionOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for authenticating a Service Principal
func (o ServicePrincipalDefinitionOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The tenant Id for authenticating a Service Principal
func (o ServicePrincipalDefinitionOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinition) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ServicePrincipalDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalDefinition)(nil)).Elem()
}

func (o ServicePrincipalDefinitionPtrOutput) ToServicePrincipalDefinitionPtrOutput() ServicePrincipalDefinitionPtrOutput {
	return o
}

func (o ServicePrincipalDefinitionPtrOutput) ToServicePrincipalDefinitionPtrOutputWithContext(ctx context.Context) ServicePrincipalDefinitionPtrOutput {
	return o
}

func (o ServicePrincipalDefinitionPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalDefinition] {
	return pulumix.Output[*ServicePrincipalDefinition]{
		OutputState: o.OutputState,
	}
}

func (o ServicePrincipalDefinitionPtrOutput) Elem() ServicePrincipalDefinitionOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) ServicePrincipalDefinition {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalDefinition
		return ret
	}).(ServicePrincipalDefinitionOutput)
}

// Base64-encoded certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The password for the certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionPtrOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificatePassword
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
func (o ServicePrincipalDefinitionPtrOutput) ClientCertificateSendChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertificateSendChain
	}).(pulumi.BoolPtrOutput)
}

// The client Id for authenticating a Service Principal.
func (o ServicePrincipalDefinitionPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for authenticating a Service Principal
func (o ServicePrincipalDefinitionPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The tenant Id for authenticating a Service Principal
func (o ServicePrincipalDefinitionPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinition) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Parameters to authenticate using Service Principal.
type ServicePrincipalDefinitionResponse struct {
	// Base64-encoded certificate used to authenticate a Service Principal
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The password for the certificate used to authenticate a Service Principal
	ClientCertificatePassword *string `pulumi:"clientCertificatePassword"`
	// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
	ClientCertificateSendChain *bool `pulumi:"clientCertificateSendChain"`
	// The client Id for authenticating a Service Principal.
	ClientId *string `pulumi:"clientId"`
	// The client secret for authenticating a Service Principal
	ClientSecret *string `pulumi:"clientSecret"`
	// The tenant Id for authenticating a Service Principal
	TenantId *string `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for ServicePrincipalDefinitionResponse
func (val *ServicePrincipalDefinitionResponse) Defaults() *ServicePrincipalDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClientCertificateSendChain == nil {
		clientCertificateSendChain_ := false
		tmp.ClientCertificateSendChain = &clientCertificateSendChain_
	}
	return &tmp
}

// Parameters to authenticate using Service Principal.
type ServicePrincipalDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDefinitionResponse)(nil)).Elem()
}

func (o ServicePrincipalDefinitionResponseOutput) ToServicePrincipalDefinitionResponseOutput() ServicePrincipalDefinitionResponseOutput {
	return o
}

func (o ServicePrincipalDefinitionResponseOutput) ToServicePrincipalDefinitionResponseOutputWithContext(ctx context.Context) ServicePrincipalDefinitionResponseOutput {
	return o
}

func (o ServicePrincipalDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ServicePrincipalDefinitionResponse] {
	return pulumix.Output[ServicePrincipalDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Base64-encoded certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionResponseOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The password for the certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionResponseOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *string { return v.ClientCertificatePassword }).(pulumi.StringPtrOutput)
}

// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
func (o ServicePrincipalDefinitionResponseOutput) ClientCertificateSendChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *bool { return v.ClientCertificateSendChain }).(pulumi.BoolPtrOutput)
}

// The client Id for authenticating a Service Principal.
func (o ServicePrincipalDefinitionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret for authenticating a Service Principal
func (o ServicePrincipalDefinitionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The tenant Id for authenticating a Service Principal
func (o ServicePrincipalDefinitionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDefinitionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ServicePrincipalDefinitionResponsePtrOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDefinitionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServicePrincipalDefinitionResponse)(nil)).Elem()
}

func (o ServicePrincipalDefinitionResponsePtrOutput) ToServicePrincipalDefinitionResponsePtrOutput() ServicePrincipalDefinitionResponsePtrOutput {
	return o
}

func (o ServicePrincipalDefinitionResponsePtrOutput) ToServicePrincipalDefinitionResponsePtrOutputWithContext(ctx context.Context) ServicePrincipalDefinitionResponsePtrOutput {
	return o
}

func (o ServicePrincipalDefinitionResponsePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ServicePrincipalDefinitionResponse] {
	return pulumix.Output[*ServicePrincipalDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o ServicePrincipalDefinitionResponsePtrOutput) Elem() ServicePrincipalDefinitionResponseOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) ServicePrincipalDefinitionResponse {
		if v != nil {
			return *v
		}
		var ret ServicePrincipalDefinitionResponse
		return ret
	}).(ServicePrincipalDefinitionResponseOutput)
}

// Base64-encoded certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionResponsePtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The password for the certificate used to authenticate a Service Principal
func (o ServicePrincipalDefinitionResponsePtrOutput) ClientCertificatePassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificatePassword
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate
func (o ServicePrincipalDefinitionResponsePtrOutput) ClientCertificateSendChain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ClientCertificateSendChain
	}).(pulumi.BoolPtrOutput)
}

// The client Id for authenticating a Service Principal.
func (o ServicePrincipalDefinitionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret for authenticating a Service Principal
func (o ServicePrincipalDefinitionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The tenant Id for authenticating a Service Principal
func (o ServicePrincipalDefinitionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServicePrincipalDefinitionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
type SubstituteFromDefinition struct {
	// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
	Kind *string `pulumi:"kind"`
	// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
	Name *string `pulumi:"name"`
	// Set to True to proceed without ConfigMap/Secret, if it is not present.
	Optional *bool `pulumi:"optional"`
}

// Defaults sets the appropriate defaults for SubstituteFromDefinition
func (val *SubstituteFromDefinition) Defaults() *SubstituteFromDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Optional == nil {
		optional_ := false
		tmp.Optional = &optional_
	}
	return &tmp
}

// SubstituteFromDefinitionInput is an input type that accepts SubstituteFromDefinitionArgs and SubstituteFromDefinitionOutput values.
// You can construct a concrete instance of `SubstituteFromDefinitionInput` via:
//
//	SubstituteFromDefinitionArgs{...}
type SubstituteFromDefinitionInput interface {
	pulumi.Input

	ToSubstituteFromDefinitionOutput() SubstituteFromDefinitionOutput
	ToSubstituteFromDefinitionOutputWithContext(context.Context) SubstituteFromDefinitionOutput
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
type SubstituteFromDefinitionArgs struct {
	// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Set to True to proceed without ConfigMap/Secret, if it is not present.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

// Defaults sets the appropriate defaults for SubstituteFromDefinitionArgs
func (val *SubstituteFromDefinitionArgs) Defaults() *SubstituteFromDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Optional == nil {
		tmp.Optional = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (SubstituteFromDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubstituteFromDefinition)(nil)).Elem()
}

func (i SubstituteFromDefinitionArgs) ToSubstituteFromDefinitionOutput() SubstituteFromDefinitionOutput {
	return i.ToSubstituteFromDefinitionOutputWithContext(context.Background())
}

func (i SubstituteFromDefinitionArgs) ToSubstituteFromDefinitionOutputWithContext(ctx context.Context) SubstituteFromDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubstituteFromDefinitionOutput)
}

func (i SubstituteFromDefinitionArgs) ToOutput(ctx context.Context) pulumix.Output[SubstituteFromDefinition] {
	return pulumix.Output[SubstituteFromDefinition]{
		OutputState: i.ToSubstituteFromDefinitionOutputWithContext(ctx).OutputState,
	}
}

// SubstituteFromDefinitionArrayInput is an input type that accepts SubstituteFromDefinitionArray and SubstituteFromDefinitionArrayOutput values.
// You can construct a concrete instance of `SubstituteFromDefinitionArrayInput` via:
//
//	SubstituteFromDefinitionArray{ SubstituteFromDefinitionArgs{...} }
type SubstituteFromDefinitionArrayInput interface {
	pulumi.Input

	ToSubstituteFromDefinitionArrayOutput() SubstituteFromDefinitionArrayOutput
	ToSubstituteFromDefinitionArrayOutputWithContext(context.Context) SubstituteFromDefinitionArrayOutput
}

type SubstituteFromDefinitionArray []SubstituteFromDefinitionInput

func (SubstituteFromDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubstituteFromDefinition)(nil)).Elem()
}

func (i SubstituteFromDefinitionArray) ToSubstituteFromDefinitionArrayOutput() SubstituteFromDefinitionArrayOutput {
	return i.ToSubstituteFromDefinitionArrayOutputWithContext(context.Background())
}

func (i SubstituteFromDefinitionArray) ToSubstituteFromDefinitionArrayOutputWithContext(ctx context.Context) SubstituteFromDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubstituteFromDefinitionArrayOutput)
}

func (i SubstituteFromDefinitionArray) ToOutput(ctx context.Context) pulumix.Output[[]SubstituteFromDefinition] {
	return pulumix.Output[[]SubstituteFromDefinition]{
		OutputState: i.ToSubstituteFromDefinitionArrayOutputWithContext(ctx).OutputState,
	}
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
type SubstituteFromDefinitionOutput struct{ *pulumi.OutputState }

func (SubstituteFromDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubstituteFromDefinition)(nil)).Elem()
}

func (o SubstituteFromDefinitionOutput) ToSubstituteFromDefinitionOutput() SubstituteFromDefinitionOutput {
	return o
}

func (o SubstituteFromDefinitionOutput) ToSubstituteFromDefinitionOutputWithContext(ctx context.Context) SubstituteFromDefinitionOutput {
	return o
}

func (o SubstituteFromDefinitionOutput) ToOutput(ctx context.Context) pulumix.Output[SubstituteFromDefinition] {
	return pulumix.Output[SubstituteFromDefinition]{
		OutputState: o.OutputState,
	}
}

// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
func (o SubstituteFromDefinitionOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinition) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
func (o SubstituteFromDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Set to True to proceed without ConfigMap/Secret, if it is not present.
func (o SubstituteFromDefinitionOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinition) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SubstituteFromDefinitionArrayOutput struct{ *pulumi.OutputState }

func (SubstituteFromDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubstituteFromDefinition)(nil)).Elem()
}

func (o SubstituteFromDefinitionArrayOutput) ToSubstituteFromDefinitionArrayOutput() SubstituteFromDefinitionArrayOutput {
	return o
}

func (o SubstituteFromDefinitionArrayOutput) ToSubstituteFromDefinitionArrayOutputWithContext(ctx context.Context) SubstituteFromDefinitionArrayOutput {
	return o
}

func (o SubstituteFromDefinitionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SubstituteFromDefinition] {
	return pulumix.Output[[]SubstituteFromDefinition]{
		OutputState: o.OutputState,
	}
}

func (o SubstituteFromDefinitionArrayOutput) Index(i pulumi.IntInput) SubstituteFromDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubstituteFromDefinition {
		return vs[0].([]SubstituteFromDefinition)[vs[1].(int)]
	}).(SubstituteFromDefinitionOutput)
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
type SubstituteFromDefinitionResponse struct {
	// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
	Kind *string `pulumi:"kind"`
	// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
	Name *string `pulumi:"name"`
	// Set to True to proceed without ConfigMap/Secret, if it is not present.
	Optional *bool `pulumi:"optional"`
}

// Defaults sets the appropriate defaults for SubstituteFromDefinitionResponse
func (val *SubstituteFromDefinitionResponse) Defaults() *SubstituteFromDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Optional == nil {
		optional_ := false
		tmp.Optional = &optional_
	}
	return &tmp
}

// Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization.
type SubstituteFromDefinitionResponseOutput struct{ *pulumi.OutputState }

func (SubstituteFromDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubstituteFromDefinitionResponse)(nil)).Elem()
}

func (o SubstituteFromDefinitionResponseOutput) ToSubstituteFromDefinitionResponseOutput() SubstituteFromDefinitionResponseOutput {
	return o
}

func (o SubstituteFromDefinitionResponseOutput) ToSubstituteFromDefinitionResponseOutputWithContext(ctx context.Context) SubstituteFromDefinitionResponseOutput {
	return o
}

func (o SubstituteFromDefinitionResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SubstituteFromDefinitionResponse] {
	return pulumix.Output[SubstituteFromDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

// Define whether it is ConfigMap or Secret that holds the variables to be used in substitution.
func (o SubstituteFromDefinitionResponseOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinitionResponse) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the ConfigMap/Secret that holds the variables to be used in substitution.
func (o SubstituteFromDefinitionResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinitionResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Set to True to proceed without ConfigMap/Secret, if it is not present.
func (o SubstituteFromDefinitionResponseOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SubstituteFromDefinitionResponse) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type SubstituteFromDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (SubstituteFromDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubstituteFromDefinitionResponse)(nil)).Elem()
}

func (o SubstituteFromDefinitionResponseArrayOutput) ToSubstituteFromDefinitionResponseArrayOutput() SubstituteFromDefinitionResponseArrayOutput {
	return o
}

func (o SubstituteFromDefinitionResponseArrayOutput) ToSubstituteFromDefinitionResponseArrayOutputWithContext(ctx context.Context) SubstituteFromDefinitionResponseArrayOutput {
	return o
}

func (o SubstituteFromDefinitionResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SubstituteFromDefinitionResponse] {
	return pulumix.Output[[]SubstituteFromDefinitionResponse]{
		OutputState: o.OutputState,
	}
}

func (o SubstituteFromDefinitionResponseArrayOutput) Index(i pulumi.IntInput) SubstituteFromDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubstituteFromDefinitionResponse {
		return vs[0].([]SubstituteFromDefinitionResponse)[vs[1].(int)]
	}).(SubstituteFromDefinitionResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SystemDataResponse] {
	return pulumix.Output[SystemDataResponse]{
		OutputState: o.OutputState,
	}
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AzureBlobDefinitionOutput{})
	pulumi.RegisterOutputType(AzureBlobDefinitionPtrOutput{})
	pulumi.RegisterOutputType(AzureBlobDefinitionResponseOutput{})
	pulumi.RegisterOutputType(AzureBlobDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(BucketDefinitionOutput{})
	pulumi.RegisterOutputType(BucketDefinitionPtrOutput{})
	pulumi.RegisterOutputType(BucketDefinitionResponseOutput{})
	pulumi.RegisterOutputType(BucketDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ComplianceStatusResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ExtensionAksAssignedIdentityOutput{})
	pulumi.RegisterOutputType(ExtensionAksAssignedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ExtensionResponseAksAssignedIdentityOutput{})
	pulumi.RegisterOutputType(ExtensionResponseAksAssignedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ExtensionStatusOutput{})
	pulumi.RegisterOutputType(ExtensionStatusArrayOutput{})
	pulumi.RegisterOutputType(ExtensionStatusResponseOutput{})
	pulumi.RegisterOutputType(ExtensionStatusResponseArrayOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionPtrOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionResponseOutput{})
	pulumi.RegisterOutputType(GitRepositoryDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(HelmOperatorPropertiesOutput{})
	pulumi.RegisterOutputType(HelmOperatorPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HelmOperatorPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HelmOperatorPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HelmReleasePropertiesDefinitionResponseOutput{})
	pulumi.RegisterOutputType(HelmReleasePropertiesDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(KubernetesConfigurationPrivateLinkScopePropertiesOutput{})
	pulumi.RegisterOutputType(KubernetesConfigurationPrivateLinkScopePropertiesPtrOutput{})
	pulumi.RegisterOutputType(KubernetesConfigurationPrivateLinkScopePropertiesResponseOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionMapOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionResponseOutput{})
	pulumi.RegisterOutputType(KustomizationDefinitionResponseMapOutput{})
	pulumi.RegisterOutputType(ManagedIdentityDefinitionOutput{})
	pulumi.RegisterOutputType(ManagedIdentityDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ObjectReferenceDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectReferenceDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ObjectStatusConditionDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectStatusConditionDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(ObjectStatusDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ObjectStatusDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(PlanOutput{})
	pulumi.RegisterOutputType(PlanPtrOutput{})
	pulumi.RegisterOutputType(PlanResponseOutput{})
	pulumi.RegisterOutputType(PlanResponsePtrOutput{})
	pulumi.RegisterOutputType(PostBuildDefinitionOutput{})
	pulumi.RegisterOutputType(PostBuildDefinitionPtrOutput{})
	pulumi.RegisterOutputType(PostBuildDefinitionResponseOutput{})
	pulumi.RegisterOutputType(PostBuildDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionPtrOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionResponseOutput{})
	pulumi.RegisterOutputType(RepositoryRefDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeOutput{})
	pulumi.RegisterOutputType(ScopePtrOutput{})
	pulumi.RegisterOutputType(ScopeClusterOutput{})
	pulumi.RegisterOutputType(ScopeClusterPtrOutput{})
	pulumi.RegisterOutputType(ScopeClusterResponseOutput{})
	pulumi.RegisterOutputType(ScopeClusterResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeNamespaceOutput{})
	pulumi.RegisterOutputType(ScopeNamespacePtrOutput{})
	pulumi.RegisterOutputType(ScopeNamespaceResponseOutput{})
	pulumi.RegisterOutputType(ScopeNamespaceResponsePtrOutput{})
	pulumi.RegisterOutputType(ScopeResponseOutput{})
	pulumi.RegisterOutputType(ScopeResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDefinitionOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDefinitionResponsePtrOutput{})
	pulumi.RegisterOutputType(SubstituteFromDefinitionOutput{})
	pulumi.RegisterOutputType(SubstituteFromDefinitionArrayOutput{})
	pulumi.RegisterOutputType(SubstituteFromDefinitionResponseOutput{})
	pulumi.RegisterOutputType(SubstituteFromDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
